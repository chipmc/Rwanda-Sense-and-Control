
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.4.4/argon/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002760  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016814  2**0
                  CONTENTS
  4 .data         00000068  2003e30c  000d6780  0000e30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000047c  2003e374  2003e374  0001e374  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d67e8  000d67e8  000167e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6810  000d6810  00016810  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d7511  00000000  00000000  00016814  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010841  00000000  00000000  000edd25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b57c  00000000  00000000  000fe566  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002210  00000000  00000000  00119ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004090  00000000  00000000  0011bcf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033f31  00000000  00000000  0011fd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000277a5  00000000  00000000  00153cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00100d3b  00000000  00000000  0017b458  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c408  00000000  00000000  0027c194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f94f 	bl	d62d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f954 	bl	d62ea <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e30c 	.word	0x2003e30c
   d404c:	000d6780 	.word	0x000d6780
   d4050:	2003e374 	.word	0x2003e374
   d4054:	2003e374 	.word	0x2003e374
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fb63 	bl	d5728 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d677c 	.word	0x000d677c
   d4084:	000d673c 	.word	0x000d673c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b83c 	b.w	d4104 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f85d 	bl	d414c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bb15 	b.w	d56c4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bb83 	b.w	d47a4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb89 	b.w	d47b4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bb87 	b.w	d47b4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.2.constprop.4>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40b8:	b513      	push	{r0, r1, r4, lr}
   d40ba:	4313      	orrs	r3, r2
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40bc:	f88d 3000 	strb.w	r3, [sp]
   d40c0:	460a      	mov	r2, r1
   d40c2:	233c      	movs	r3, #60	; 0x3c
   d40c4:	4903      	ldr	r1, [pc, #12]	; (d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.2.constprop.4+0x1c>)
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40c6:	4604      	mov	r4, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c8:	f000 fd14 	bl	d4af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40cc:	4620      	mov	r0, r4
   d40ce:	b002      	add	sp, #8
   d40d0:	bd10      	pop	{r4, pc}
   d40d2:	bf00      	nop
   d40d4:	000d63a8 	.word	0x000d63a8

000d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40d8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40da:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40dc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40de:	b17c      	cbz	r4, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	3b01      	subs	r3, #1
   d40e4:	6063      	str	r3, [r4, #4]
   d40e6:	b95b      	cbnz	r3, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	4620      	mov	r0, r4
   d40ec:	689b      	ldr	r3, [r3, #8]
   d40ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f0:	68a3      	ldr	r3, [r4, #8]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	60a3      	str	r3, [r4, #8]
   d40f6:	b91b      	cbnz	r3, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	68db      	ldr	r3, [r3, #12]
   d40fe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4100:	4628      	mov	r0, r5
   d4102:	bd38      	pop	{r3, r4, r5, pc}

000d4104 <setup>:

char resultStr[64];

Adafruit_SHT31 sht31 = Adafruit_SHT31();

void setup() {
   d4104:	b513      	push	{r0, r1, r4, lr}
   d4106:	4c0d      	ldr	r4, [pc, #52]	; (d413c <setup+0x38>)
  Particle.publish("Status","SHT31 test",PRIVATE);
   d4108:	490d      	ldr	r1, [pc, #52]	; (d4140 <setup+0x3c>)
   d410a:	7822      	ldrb	r2, [r4, #0]
   d410c:	f04f 0300 	mov.w	r3, #0
   d4110:	4668      	mov	r0, sp
   d4112:	f7ff ffd1 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.2.constprop.4>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4116:	a801      	add	r0, sp, #4
   d4118:	f7ff ffde 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (! sht31.begin(0x44)) {   // Set to 0x45 for alternate i2c addr
   d411c:	2144      	movs	r1, #68	; 0x44
   d411e:	4809      	ldr	r0, [pc, #36]	; (d4144 <setup+0x40>)
   d4120:	f000 f8d7 	bl	d42d2 <_ZN14Adafruit_SHT315beginEh>
   d4124:	b940      	cbnz	r0, d4138 <setup+0x34>
    Particle.publish("Status","Couldn't find SHT31",PRIVATE);
   d4126:	4603      	mov	r3, r0
   d4128:	7822      	ldrb	r2, [r4, #0]
   d412a:	4907      	ldr	r1, [pc, #28]	; (d4148 <setup+0x44>)
   d412c:	4668      	mov	r0, sp
   d412e:	f7ff ffc3 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.2.constprop.4>
   d4132:	a801      	add	r0, sp, #4
   d4134:	f7ff ffd0 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
   d4138:	b002      	add	sp, #8
   d413a:	bd10      	pop	{r4, pc}
   d413c:	2003e384 	.word	0x2003e384
   d4140:	000d63af 	.word	0x000d63af
   d4144:	2003e378 	.word	0x2003e378
   d4148:	000d63ba 	.word	0x000d63ba

000d414c <loop>:

void loop() {
   d414c:	b510      	push	{r4, lr}
   d414e:	ed2d 8b04 	vpush	{d8-d9}
    
  float t = sht31.readTemperature();
   d4152:	483b      	ldr	r0, [pc, #236]	; (d4240 <loop+0xf4>)
  float h = sht31.readHumidity();
  float tF = (t* 9) /5 + 32;
   d4154:	ed9f 9a3b 	vldr	s18, [pc, #236]	; d4244 <loop+0xf8>
   d4158:	4c3b      	ldr	r4, [pc, #236]	; (d4248 <loop+0xfc>)
  if (! sht31.begin(0x44)) {   // Set to 0x45 for alternate i2c addr
    Particle.publish("Status","Couldn't find SHT31",PRIVATE);
    }
  }

void loop() {
   d415a:	b084      	sub	sp, #16
    
  float t = sht31.readTemperature();
   d415c:	f000 f950 	bl	d4400 <_ZN14Adafruit_SHT3115readTemperatureEv>
  float h = sht31.readHumidity();
   d4160:	4837      	ldr	r0, [pc, #220]	; (d4240 <loop+0xf4>)
    }
  }

void loop() {
    
  float t = sht31.readTemperature();
   d4162:	eeb0 8a40 	vmov.f32	s16, s0
  float h = sht31.readHumidity();
   d4166:	f000 f959 	bl	d441c <_ZN14Adafruit_SHT3112readHumidityEv>
  float tF = (t* 9) /5 + 32;
   d416a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d416e:	ee28 7a07 	vmul.f32	s14, s16, s14
   d4172:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d4176:	eec7 7a26 	vdiv.f32	s15, s14, s13

  if (! isnan(t)) {  // check if 'is not a number'
   d417a:	eeb4 8a48 	vcmp.f32	s16, s16
   d417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }

void loop() {
    
  float t = sht31.readTemperature();
  float h = sht31.readHumidity();
   d4182:	eef0 8a40 	vmov.f32	s17, s0
  float tF = (t* 9) /5 + 32;
   d4186:	ee37 9a89 	vadd.f32	s18, s15, s18

  if (! isnan(t)) {  // check if 'is not a number'
   d418a:	d624      	bvs.n	d41d6 <loop+0x8a>
    //Temperature in C
    snprintf(resultStr,sizeof(resultStr),"Temp *C = %4.2f", t);
   d418c:	ee18 0a10 	vmov	r0, s16
   d4190:	f001 fddc 	bl	d5d4c <__aeabi_f2d>
   d4194:	4a2d      	ldr	r2, [pc, #180]	; (d424c <loop+0x100>)
   d4196:	e9cd 0100 	strd	r0, r1, [sp]
   d419a:	2140      	movs	r1, #64	; 0x40
   d419c:	482c      	ldr	r0, [pc, #176]	; (d4250 <loop+0x104>)
   d419e:	f000 fb11 	bl	d47c4 <snprintf>
    Particle.publish("Status",resultStr,PRIVATE);
   d41a2:	f04f 0300 	mov.w	r3, #0
   d41a6:	7822      	ldrb	r2, [r4, #0]
   d41a8:	4929      	ldr	r1, [pc, #164]	; (d4250 <loop+0x104>)
   d41aa:	a802      	add	r0, sp, #8
   d41ac:	f7ff ff84 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.2.constprop.4>
   d41b0:	a803      	add	r0, sp, #12
   d41b2:	f7ff ff91 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    //Temperature in F
    snprintf(resultStr,sizeof(resultStr),"Temp *F = %4.2f", tF);
   d41b6:	ee19 0a10 	vmov	r0, s18
   d41ba:	f001 fdc7 	bl	d5d4c <__aeabi_f2d>
   d41be:	4a25      	ldr	r2, [pc, #148]	; (d4254 <loop+0x108>)
   d41c0:	e9cd 0100 	strd	r0, r1, [sp]
   d41c4:	2140      	movs	r1, #64	; 0x40
   d41c6:	4822      	ldr	r0, [pc, #136]	; (d4250 <loop+0x104>)
   d41c8:	f000 fafc 	bl	d47c4 <snprintf>
    Particle.publish("Status",resultStr,PRIVATE);
   d41cc:	f04f 0300 	mov.w	r3, #0
   d41d0:	7822      	ldrb	r2, [r4, #0]
   d41d2:	491f      	ldr	r1, [pc, #124]	; (d4250 <loop+0x104>)
   d41d4:	e003      	b.n	d41de <loop+0x92>
  } else { 
    Particle.publish("Status","Failed to read temperature",PRIVATE);
   d41d6:	7822      	ldrb	r2, [r4, #0]
   d41d8:	491f      	ldr	r1, [pc, #124]	; (d4258 <loop+0x10c>)
   d41da:	f04f 0300 	mov.w	r3, #0
   d41de:	a802      	add	r0, sp, #8
   d41e0:	f7ff ff6a 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.2.constprop.4>
   d41e4:	a803      	add	r0, sp, #12
   d41e6:	f7ff ff77 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  delay(1000);
   d41ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41ee:	f000 fb01 	bl	d47f4 <delay>
  
  if (! isnan(h)) {  // check if 'is not a number'
   d41f2:	eef4 8a68 	vcmp.f32	s17, s17
   d41f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41fa:	d60f      	bvs.n	d421c <loop+0xd0>
    snprintf(resultStr,sizeof(resultStr),"Hum. %% = %4.2f", h);
   d41fc:	ee18 0a90 	vmov	r0, s17
   d4200:	f001 fda4 	bl	d5d4c <__aeabi_f2d>
   d4204:	4a15      	ldr	r2, [pc, #84]	; (d425c <loop+0x110>)
   d4206:	e9cd 0100 	strd	r0, r1, [sp]
   d420a:	2140      	movs	r1, #64	; 0x40
   d420c:	4810      	ldr	r0, [pc, #64]	; (d4250 <loop+0x104>)
   d420e:	f000 fad9 	bl	d47c4 <snprintf>
    Particle.publish("Status",resultStr,PRIVATE);
   d4212:	f04f 0300 	mov.w	r3, #0
   d4216:	7822      	ldrb	r2, [r4, #0]
   d4218:	490d      	ldr	r1, [pc, #52]	; (d4250 <loop+0x104>)
   d421a:	e003      	b.n	d4224 <loop+0xd8>
  } else { 
    Particle.publish("Status","Failed to read humidity",PRIVATE);
   d421c:	7822      	ldrb	r2, [r4, #0]
   d421e:	4910      	ldr	r1, [pc, #64]	; (d4260 <loop+0x114>)
   d4220:	f04f 0300 	mov.w	r3, #0
   d4224:	a802      	add	r0, sp, #8
   d4226:	f7ff ff47 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.2.constprop.4>
   d422a:	a803      	add	r0, sp, #12
   d422c:	f7ff ff54 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  delay(1000);
   d4230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4234:	f000 fade 	bl	d47f4 <delay>
}
   d4238:	b004      	add	sp, #16
   d423a:	ecbd 8b04 	vpop	{d8-d9}
   d423e:	bd10      	pop	{r4, pc}
   d4240:	2003e378 	.word	0x2003e378
   d4244:	42000000 	.word	0x42000000
   d4248:	2003e384 	.word	0x2003e384
   d424c:	000d63ce 	.word	0x000d63ce
   d4250:	2003e385 	.word	0x2003e385
   d4254:	000d63de 	.word	0x000d63de
   d4258:	000d63ee 	.word	0x000d63ee
   d425c:	000d6409 	.word	0x000d6409
   d4260:	000d6419 	.word	0x000d6419

000d4264 <_GLOBAL__sub_I_resultStr>:
   d4264:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4266:	4b05      	ldr	r3, [pc, #20]	; (d427c <_GLOBAL__sub_I_resultStr+0x18>)
   d4268:	2201      	movs	r2, #1
   d426a:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d426c:	f000 f91e 	bl	d44ac <HAL_Pin_Map>
#include "math.h"
#include "adafruit-sht31.h"

char resultStr[64];

Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4270:	4803      	ldr	r0, [pc, #12]	; (d4280 <_GLOBAL__sub_I_resultStr+0x1c>)
    Particle.publish("Status",resultStr,PRIVATE);
  } else { 
    Particle.publish("Status","Failed to read humidity",PRIVATE);
  }
  delay(1000);
}
   d4272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "math.h"
#include "adafruit-sht31.h"

char resultStr[64];

Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4276:	f000 b809 	b.w	d428c <_ZN14Adafruit_SHT31C1Ev>
   d427a:	bf00      	nop
   d427c:	2003e384 	.word	0x2003e384
   d4280:	2003e378 	.word	0x2003e378

000d4284 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4284:	6803      	ldr	r3, [r0, #0]
   d4286:	b2c9      	uxtb	r1, r1
   d4288:	689b      	ldr	r3, [r3, #8]
   d428a:	4718      	bx	r3

000d428c <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d428c:	4770      	bx	lr

000d428e <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d428e:	b538      	push	{r3, r4, r5, lr}
   d4290:	4605      	mov	r5, r0
   d4292:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4294:	f001 fa62 	bl	d575c <_Z19__fetch_global_Wirev>
   d4298:	7829      	ldrb	r1, [r5, #0]
   d429a:	f000 fe3b 	bl	d4f14 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d429e:	f001 fa5d 	bl	d575c <_Z19__fetch_global_Wirev>
   d42a2:	0a21      	lsrs	r1, r4, #8
   d42a4:	f7ff ffee 	bl	d4284 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d42a8:	f001 fa58 	bl	d575c <_Z19__fetch_global_Wirev>
   d42ac:	b2e1      	uxtb	r1, r4
   d42ae:	f7ff ffe9 	bl	d4284 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d42b2:	f001 fa53 	bl	d575c <_Z19__fetch_global_Wirev>
}
   d42b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d42ba:	f000 be33 	b.w	d4f24 <_ZN7TwoWire15endTransmissionEv>

000d42be <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d42be:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d42c0:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d42c4:	f7ff ffe3 	bl	d428e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d42c8:	200a      	movs	r0, #10
}
   d42ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d42ce:	f000 ba91 	b.w	d47f4 <delay>

000d42d2 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d42d2:	b538      	push	{r3, r4, r5, lr}
   d42d4:	4604      	mov	r4, r0
   d42d6:	460d      	mov	r5, r1
  Wire.begin();
   d42d8:	f001 fa40 	bl	d575c <_Z19__fetch_global_Wirev>
   d42dc:	f000 fe08 	bl	d4ef0 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d42e0:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d42e2:	7025      	strb	r5, [r4, #0]
  reset();
   d42e4:	f7ff ffeb 	bl	d42be <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d42e8:	2001      	movs	r0, #1
   d42ea:	bd38      	pop	{r3, r4, r5, pc}

000d42ec <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d42ec:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d42ee:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d42f0:	4291      	cmp	r1, r2
   d42f2:	d00e      	beq.n	d4312 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d42f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d42f8:	4058      	eors	r0, r3
   d42fa:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d42fc:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4300:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d4304:	bf18      	it	ne
   d4306:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d430a:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d430c:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d430e:	d1f5      	bne.n	d42fc <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4310:	e7ee      	b.n	d42f0 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d4312:	4770      	bx	lr
   d4314:	0000      	movs	r0, r0
	...

000d4318 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4318:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d431a:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d431e:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4320:	f7ff ffb5 	bl	d428e <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d4324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4328:	f000 fa64 	bl	d47f4 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d432c:	f001 fa16 	bl	d575c <_Z19__fetch_global_Wirev>
   d4330:	2206      	movs	r2, #6
   d4332:	7821      	ldrb	r1, [r4, #0]
   d4334:	f000 fdeb 	bl	d4f0e <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
   d4338:	f001 fa10 	bl	d575c <_Z19__fetch_global_Wirev>
   d433c:	6803      	ldr	r3, [r0, #0]
   d433e:	691b      	ldr	r3, [r3, #16]
   d4340:	4798      	blx	r3
   d4342:	2806      	cmp	r0, #6
   d4344:	d14a      	bne.n	d43dc <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d4346:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d4348:	f001 fa08 	bl	d575c <_Z19__fetch_global_Wirev>
   d434c:	6803      	ldr	r3, [r0, #0]
   d434e:	695b      	ldr	r3, [r3, #20]
   d4350:	4798      	blx	r3
   d4352:	f80d 0005 	strb.w	r0, [sp, r5]
   d4356:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d4358:	2d06      	cmp	r5, #6
   d435a:	d1f5      	bne.n	d4348 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d435c:	2202      	movs	r2, #2
   d435e:	4669      	mov	r1, sp
   d4360:	4620      	mov	r0, r4
   d4362:	f7ff ffc3 	bl	d42ec <_ZN14Adafruit_SHT314crc8EPKhi>
   d4366:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d436a:	4285      	cmp	r5, r0
   d436c:	d136      	bne.n	d43dc <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d436e:	2202      	movs	r2, #2
   d4370:	f10d 0103 	add.w	r1, sp, #3
   d4374:	4620      	mov	r0, r4
   d4376:	f7ff ffb9 	bl	d42ec <_ZN14Adafruit_SHT314crc8EPKhi>
   d437a:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d437e:	4285      	cmp	r5, r0
   d4380:	d12c      	bne.n	d43dc <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4382:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d4386:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d438a:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d438e:	ba40      	rev16	r0, r0
   d4390:	b280      	uxth	r0, r0
   d4392:	f001 fcb9 	bl	d5d08 <__aeabi_ui2d>
  stemp *= 175;
   d4396:	a318      	add	r3, pc, #96	; (adr r3, d43f8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4398:	e9d3 2300 	ldrd	r2, r3, [r3]
   d439c:	f001 fd2a 	bl	d5df4 <__aeabi_dmul>
  stemp /= 0xffff;
   d43a0:	a311      	add	r3, pc, #68	; (adr r3, d43e8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d43a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43a6:	f001 fe4f 	bl	d6048 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d43aa:	2200      	movs	r2, #0
   d43ac:	4b10      	ldr	r3, [pc, #64]	; (d43f0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d43ae:	f001 fb6d 	bl	d5a8c <__aeabi_dsub>
   d43b2:	f001 ff31 	bl	d6218 <__aeabi_d2f>
   d43b6:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d43b8:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d43bc:	f001 fca4 	bl	d5d08 <__aeabi_ui2d>
  shum *= 100;
   d43c0:	2200      	movs	r2, #0
   d43c2:	4b0c      	ldr	r3, [pc, #48]	; (d43f4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d43c4:	f001 fd16 	bl	d5df4 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d43c8:	a307      	add	r3, pc, #28	; (adr r3, d43e8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d43ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43ce:	f001 fe3b 	bl	d6048 <__aeabi_ddiv>
   d43d2:	f001 ff21 	bl	d6218 <__aeabi_d2f>
   d43d6:	6060      	str	r0, [r4, #4]
  
  return true;
   d43d8:	2001      	movs	r0, #1
   d43da:	e000      	b.n	d43de <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d43dc:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d43de:	b002      	add	sp, #8
   d43e0:	bd70      	pop	{r4, r5, r6, pc}
   d43e2:	bf00      	nop
   d43e4:	f3af 8000 	nop.w
   d43e8:	00000000 	.word	0x00000000
   d43ec:	40efffe0 	.word	0x40efffe0
   d43f0:	40468000 	.word	0x40468000
   d43f4:	40590000 	.word	0x40590000
   d43f8:	00000000 	.word	0x00000000
   d43fc:	4065e000 	.word	0x4065e000

000d4400 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d4400:	b510      	push	{r4, lr}
   d4402:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4404:	f7ff ff88 	bl	d4318 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4408:	b110      	cbz	r0, d4410 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d440a:	ed94 0a02 	vldr	s0, [r4, #8]
   d440e:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d4410:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4418 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d4414:	bd10      	pop	{r4, pc}
   d4416:	bf00      	nop
   d4418:	7fc00000 	.word	0x7fc00000

000d441c <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d441c:	b510      	push	{r4, lr}
   d441e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4420:	f7ff ff7a 	bl	d4318 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4424:	b110      	cbz	r0, d442c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d4426:	ed94 0a01 	vldr	s0, [r4, #4]
   d442a:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d442c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4434 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d4430:	bd10      	pop	{r4, pc}
   d4432:	bf00      	nop
   d4434:	7fc00000 	.word	0x7fc00000

000d4438 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4438:	f000 b838 	b.w	d44ac <HAL_Pin_Map>

000d443c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <os_thread_is_current+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	689b      	ldr	r3, [r3, #8]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030248 	.word	0x00030248

000d444c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <os_thread_join+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	691b      	ldr	r3, [r3, #16]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030248 	.word	0x00030248

000d445c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <os_thread_cleanup+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	695b      	ldr	r3, [r3, #20]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030248 	.word	0x00030248

000d446c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <os_mutex_create+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030248 	.word	0x00030248

000d447c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <os_mutex_recursive_create+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030248 	.word	0x00030248

000d448c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <HAL_RNG_GetRandomNumber+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	685b      	ldr	r3, [r3, #4]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030218 	.word	0x00030218

000d449c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	695b      	ldr	r3, [r3, #20]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030218 	.word	0x00030218

000d44ac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <HAL_Pin_Map+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	681b      	ldr	r3, [r3, #0]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003022c 	.word	0x0003022c

000d44bc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <HAL_I2C_Begin+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	68db      	ldr	r3, [r3, #12]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030228 	.word	0x00030228

000d44cc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_I2C_Request_Data+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	695b      	ldr	r3, [r3, #20]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030228 	.word	0x00030228

000d44dc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_I2C_Begin_Transmission+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	699b      	ldr	r3, [r3, #24]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030228 	.word	0x00030228

000d44ec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_I2C_End_Transmission+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	69db      	ldr	r3, [r3, #28]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030228 	.word	0x00030228

000d44fc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_I2C_Write_Data+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6a1b      	ldr	r3, [r3, #32]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030228 	.word	0x00030228

000d450c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_I2C_Available_Data+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030228 	.word	0x00030228

000d451c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_I2C_Read_Data+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030228 	.word	0x00030228

000d452c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_I2C_Peek_Data+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030228 	.word	0x00030228

000d453c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_I2C_Flush_Data+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030228 	.word	0x00030228

000d454c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_I2C_Init+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030228 	.word	0x00030228

000d455c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <inet_inet_ntop+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030264 	.word	0x00030264

000d456c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <netdb_freeaddrinfo+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	689b      	ldr	r3, [r3, #8]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030268 	.word	0x00030268

000d457c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <netdb_getaddrinfo+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	68db      	ldr	r3, [r3, #12]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030268 	.word	0x00030268

000d458c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_SPI_Init+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	69db      	ldr	r3, [r3, #28]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030230 	.word	0x00030230

000d459c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_USART_Init+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	681b      	ldr	r3, [r3, #0]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	0003023c 	.word	0x0003023c

000d45ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USART_Write_Data+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	68db      	ldr	r3, [r3, #12]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003023c 	.word	0x0003023c

000d45bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_USART_Available_Data+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	691b      	ldr	r3, [r3, #16]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003023c 	.word	0x0003023c

000d45cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_USART_Read_Data+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	695b      	ldr	r3, [r3, #20]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003023c 	.word	0x0003023c

000d45dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <HAL_USART_Peek_Data+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	699b      	ldr	r3, [r3, #24]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003023c 	.word	0x0003023c

000d45ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <HAL_USART_Flush_Data+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	69db      	ldr	r3, [r3, #28]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003023c 	.word	0x0003023c

000d45fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <HAL_USART_Available_Data_For_Write+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003023c 	.word	0x0003023c

000d460c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <HAL_USB_USART_Init+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	681b      	ldr	r3, [r3, #0]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003024c 	.word	0x0003024c

000d461c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <HAL_USB_USART_Available_Data+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	691b      	ldr	r3, [r3, #16]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003024c 	.word	0x0003024c

000d462c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	695b      	ldr	r3, [r3, #20]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003024c 	.word	0x0003024c

000d463c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <HAL_USB_USART_Receive_Data+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	699b      	ldr	r3, [r3, #24]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003024c 	.word	0x0003024c

000d464c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <HAL_USB_USART_Send_Data+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	69db      	ldr	r3, [r3, #28]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003024c 	.word	0x0003024c

000d465c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <HAL_USB_USART_Flush_Data+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6a1b      	ldr	r3, [r3, #32]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003024c 	.word	0x0003024c

000d466c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <set_system_mode+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	685b      	ldr	r3, [r3, #4]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030220 	.word	0x00030220

000d467c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <system_delay_ms+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	695b      	ldr	r3, [r3, #20]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030220 	.word	0x00030220

000d468c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <application_thread_current+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030220 	.word	0x00030220

000d469c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <application_thread_invoke+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030220 	.word	0x00030220

000d46ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b03      	ldr	r3, [pc, #12]	; (d46bc <system_ctrl_set_app_request_handler+0x10>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46b6:	9301      	str	r3, [sp, #4]
   d46b8:	bd08      	pop	{r3, pc}
   d46ba:	0000      	.short	0x0000
   d46bc:	00030220 	.word	0x00030220

000d46c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b03      	ldr	r3, [pc, #12]	; (d46d0 <system_ctrl_set_result+0x10>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46ca:	9301      	str	r3, [sp, #4]
   d46cc:	bd08      	pop	{r3, pc}
   d46ce:	0000      	.short	0x0000
   d46d0:	00030220 	.word	0x00030220

000d46d4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <spark_cloud_flag_connected+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	695b      	ldr	r3, [r3, #20]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030244 	.word	0x00030244

000d46e4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <spark_send_event+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6a1b      	ldr	r3, [r3, #32]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030244 	.word	0x00030244

000d46f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030244 	.word	0x00030244

000d4704 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <network_connect+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	685b      	ldr	r3, [r3, #4]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030240 	.word	0x00030240

000d4714 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <network_connecting+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	689b      	ldr	r3, [r3, #8]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030240 	.word	0x00030240

000d4724 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <network_disconnect+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	68db      	ldr	r3, [r3, #12]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030240 	.word	0x00030240

000d4734 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <network_ready+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	691b      	ldr	r3, [r3, #16]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030240 	.word	0x00030240

000d4744 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <network_on+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	695b      	ldr	r3, [r3, #20]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030240 	.word	0x00030240

000d4754 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <network_off+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	699b      	ldr	r3, [r3, #24]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030240 	.word	0x00030240

000d4764 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <network_listen+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	69db      	ldr	r3, [r3, #28]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030240 	.word	0x00030240

000d4774 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <network_listening+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6a1b      	ldr	r3, [r3, #32]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030240 	.word	0x00030240

000d4784 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <network_set_listen_timeout+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030240 	.word	0x00030240

000d4794 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <network_get_listen_timeout+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030240 	.word	0x00030240

000d47a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <malloc+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	681b      	ldr	r3, [r3, #0]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003021c 	.word	0x0003021c

000d47b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <free+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	685b      	ldr	r3, [r3, #4]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003021c 	.word	0x0003021c

000d47c4 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <snprintf+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	69db      	ldr	r3, [r3, #28]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003021c 	.word	0x0003021c

000d47d4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <abort+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003021c 	.word	0x0003021c

000d47e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <_malloc_r+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003021c 	.word	0x0003021c

000d47f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d47f4:	2100      	movs	r1, #0
   d47f6:	f7ff bf41 	b.w	d467c <system_delay_ms>

000d47fa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d47fa:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d47fc:	6883      	ldr	r3, [r0, #8]
   d47fe:	4604      	mov	r4, r0
   d4800:	b90b      	cbnz	r3, d4806 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4802:	f000 fff4 	bl	d57ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4806:	68c3      	ldr	r3, [r0, #12]
   d4808:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d480a:	68a3      	ldr	r3, [r4, #8]
   d480c:	b11b      	cbz	r3, d4816 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d480e:	2203      	movs	r2, #3
   d4810:	4621      	mov	r1, r4
   d4812:	4620      	mov	r0, r4
   d4814:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4816:	4620      	mov	r0, r4
   d4818:	2110      	movs	r1, #16
}
   d481a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d481e:	f000 bfe4 	b.w	d57ea <_ZdlPvj>

000d4822 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4822:	680b      	ldr	r3, [r1, #0]
   d4824:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4826:	b113      	cbz	r3, d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4828:	685a      	ldr	r2, [r3, #4]
   d482a:	3201      	adds	r2, #1
   d482c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d482e:	4770      	bx	lr

000d4830 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4830:	4802      	ldr	r0, [pc, #8]	; (d483c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4832:	2300      	movs	r3, #0
   d4834:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4836:	f7ff be21 	b.w	d447c <os_mutex_recursive_create>
   d483a:	bf00      	nop
   d483c:	2003e3c8 	.word	0x2003e3c8

000d4840 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4840:	4770      	bx	lr

000d4842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4842:	2000      	movs	r0, #0
   d4844:	4770      	bx	lr

000d4846 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4846:	b510      	push	{r4, lr}
   d4848:	2110      	movs	r1, #16
   d484a:	4604      	mov	r4, r0
   d484c:	f000 ffcd 	bl	d57ea <_ZdlPvj>
   d4850:	4620      	mov	r0, r4
   d4852:	bd10      	pop	{r4, pc}

000d4854 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4854:	b508      	push	{r3, lr}
      { delete this; }
   d4856:	b108      	cbz	r0, d485c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4858:	f7ff fff5 	bl	d4846 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d485c:	bd08      	pop	{r3, pc}

000d485e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d485e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4860:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4862:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4864:	b113      	cbz	r3, d486c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4866:	2203      	movs	r2, #3
   d4868:	4601      	mov	r1, r0
   d486a:	4798      	blx	r3
    }
   d486c:	4620      	mov	r0, r4
   d486e:	bd10      	pop	{r4, pc}

000d4870 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4870:	2200      	movs	r2, #0
   d4872:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4874:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4876:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d487a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d487c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4880:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4882:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4884:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4886:	680c      	ldr	r4, [r1, #0]
   d4888:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d488a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d488c:	bd10      	pop	{r4, pc}

000d488e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d488e:	b510      	push	{r4, lr}
   d4890:	4604      	mov	r4, r0
    free((void*)msg_);
   d4892:	6800      	ldr	r0, [r0, #0]
   d4894:	f7ff ff8e 	bl	d47b4 <free>
}
   d4898:	4620      	mov	r0, r4
   d489a:	bd10      	pop	{r4, pc}

000d489c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d489c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d489e:	68c4      	ldr	r4, [r0, #12]
   d48a0:	b1f4      	cbz	r4, d48e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d48a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d48a4:	2b02      	cmp	r3, #2
   d48a6:	d103      	bne.n	d48b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d48a8:	f104 000c 	add.w	r0, r4, #12
   d48ac:	f7ff ffef 	bl	d488e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d48b0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d48b2:	b135      	cbz	r5, d48c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48b4:	4628      	mov	r0, r5
   d48b6:	f7ff ffd2 	bl	d485e <_ZNSt14_Function_baseD1Ev>
   d48ba:	2110      	movs	r1, #16
   d48bc:	4628      	mov	r0, r5
   d48be:	f000 ff94 	bl	d57ea <_ZdlPvj>
   d48c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d48c4:	b135      	cbz	r5, d48d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d48c6:	4628      	mov	r0, r5
   d48c8:	f7ff ffc9 	bl	d485e <_ZNSt14_Function_baseD1Ev>
   d48cc:	2110      	movs	r1, #16
   d48ce:	4628      	mov	r0, r5
   d48d0:	f000 ff8b 	bl	d57ea <_ZdlPvj>
   d48d4:	4620      	mov	r0, r4
   d48d6:	2114      	movs	r1, #20
   d48d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d48dc:	f000 bf85 	b.w	d57ea <_ZdlPvj>
   d48e0:	bd38      	pop	{r3, r4, r5, pc}

000d48e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d48e2:	b513      	push	{r0, r1, r4, lr}
   d48e4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d48e6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d48ea:	2300      	movs	r3, #0
   d48ec:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48ee:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d48f0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d48f2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48f4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d48f6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48f8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48fa:	f7ff fbed 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48fe:	4620      	mov	r0, r4
   d4900:	b002      	add	sp, #8
   d4902:	bd10      	pop	{r4, pc}

000d4904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4906:	460c      	mov	r4, r1
   d4908:	ad02      	add	r5, sp, #8
   d490a:	f854 3b04 	ldr.w	r3, [r4], #4
   d490e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4912:	4606      	mov	r6, r0
   d4914:	460f      	mov	r7, r1
   d4916:	a801      	add	r0, sp, #4
   d4918:	4621      	mov	r1, r4
   d491a:	f7ff ff82 	bl	d4822 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d491e:	4629      	mov	r1, r5
   d4920:	4630      	mov	r0, r6
   d4922:	f7ff ffde 	bl	d48e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4926:	a801      	add	r0, sp, #4
   d4928:	f7ff fbd6 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d492c:	4620      	mov	r0, r4
   d492e:	f7ff fbd3 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4932:	4638      	mov	r0, r7
   d4934:	2108      	movs	r1, #8
   d4936:	f000 ff58 	bl	d57ea <_ZdlPvj>
        return p;
    }
   d493a:	4630      	mov	r0, r6
   d493c:	b003      	add	sp, #12
   d493e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4940 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4940:	b513      	push	{r0, r1, r4, lr}
   d4942:	460b      	mov	r3, r1
   d4944:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4946:	c803      	ldmia	r0, {r0, r1}
   d4948:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d494c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4950:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4954:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4958:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d495c:	b002      	add	sp, #8
   d495e:	bd10      	pop	{r4, pc}

000d4960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4960:	b538      	push	{r3, r4, r5, lr}
   d4962:	2300      	movs	r3, #0
   d4964:	4604      	mov	r4, r0
   d4966:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4968:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d496a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d496c:	f7ff fb95 	bl	d409a <_Znwj>
   d4970:	b128      	cbz	r0, d497e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4972:	2301      	movs	r3, #1
   d4974:	6043      	str	r3, [r0, #4]
   d4976:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4978:	4b02      	ldr	r3, [pc, #8]	; (d4984 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d497a:	6003      	str	r3, [r0, #0]
   d497c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d497e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4980:	4620      	mov	r0, r4
   d4982:	bd38      	pop	{r3, r4, r5, pc}
   d4984:	000d643c 	.word	0x000d643c

000d4988 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4988:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d498a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d498c:	b90a      	cbnz	r2, d4992 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d498e:	f000 ff2e 	bl	d57ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4992:	68c3      	ldr	r3, [r0, #12]
    }
   d4994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4998:	4718      	bx	r3

000d499a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d499a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d499c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d499e:	f100 0110 	add.w	r1, r0, #16
   d49a2:	f7ff fff1 	bl	d4988 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d49a6:	bd08      	pop	{r3, pc}

000d49a8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49a8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d49aa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49ac:	b90a      	cbnz	r2, d49b2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d49ae:	f000 ff1e 	bl	d57ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d49b2:	68c3      	ldr	r3, [r0, #12]
    }
   d49b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d49b8:	4718      	bx	r3

000d49ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d49ba:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d49bc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d49be:	f100 0110 	add.w	r1, r0, #16
   d49c2:	f7ff fff1 	bl	d49a8 <_ZNKSt8functionIFvRKbEEclES1_>
   d49c6:	bd08      	pop	{r3, pc}

000d49c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d49c8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49ca:	2300      	movs	r3, #0
   d49cc:	6083      	str	r3, [r0, #8]
   d49ce:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d49d0:	4604      	mov	r4, r0
   d49d2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d49d4:	b12b      	cbz	r3, d49e2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d49d6:	2202      	movs	r2, #2
   d49d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d49da:	68eb      	ldr	r3, [r5, #12]
   d49dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d49de:	68ab      	ldr	r3, [r5, #8]
   d49e0:	60a3      	str	r3, [r4, #8]
	}
    }
   d49e2:	4620      	mov	r0, r4
   d49e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d49e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d49ea:	b089      	sub	sp, #36	; 0x24
   d49ec:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d49ee:	4668      	mov	r0, sp
   d49f0:	f7ff ff3e 	bl	d4870 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d49f4:	2300      	movs	r3, #0
   d49f6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d49fa:	f04f 0202 	mov.w	r2, #2
   d49fe:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4a02:	2b00      	cmp	r3, #0
   d4a04:	d103      	bne.n	d4a0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4a06:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4a0a:	2900      	cmp	r1, #0
   d4a0c:	d1f7      	bne.n	d49fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4a0e:	d002      	beq.n	d4a16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4a10:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a14:	e063      	b.n	d4ade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4a16:	f114 050c 	adds.w	r5, r4, #12
   d4a1a:	d003      	beq.n	d4a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4a1c:	4669      	mov	r1, sp
   d4a1e:	4628      	mov	r0, r5
   d4a20:	f7ff ff26 	bl	d4870 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4a24:	f3bf 8f5f 	dmb	sy
   d4a28:	2301      	movs	r3, #1
   d4a2a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4a2c:	2000      	movs	r0, #0
   d4a2e:	f104 0308 	add.w	r3, r4, #8
   d4a32:	f3bf 8f5f 	dmb	sy
   d4a36:	e853 6f00 	ldrex	r6, [r3]
   d4a3a:	e843 0200 	strex	r2, r0, [r3]
   d4a3e:	2a00      	cmp	r2, #0
   d4a40:	d1f9      	bne.n	d4a36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4a42:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4a46:	2e00      	cmp	r6, #0
   d4a48:	d049      	beq.n	d4ade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4a4a:	f7ff fe1f 	bl	d468c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4a4e:	b120      	cbz	r0, d4a5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4a50:	4629      	mov	r1, r5
   d4a52:	4630      	mov	r0, r6
   d4a54:	f7ff ff98 	bl	d4988 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a58:	e03a      	b.n	d4ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4a5a:	4631      	mov	r1, r6
   d4a5c:	a802      	add	r0, sp, #8
   d4a5e:	f7ff ffb3 	bl	d49c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4a62:	68e0      	ldr	r0, [r4, #12]
   d4a64:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4a68:	b108      	cbz	r0, d4a6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4a6a:	f001 fc6f 	bl	d634c <strdup>
   d4a6e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4a70:	2010      	movs	r0, #16
   d4a72:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4a76:	f7ff fb10 	bl	d409a <_Znwj>
   d4a7a:	4605      	mov	r5, r0
   d4a7c:	b1e8      	cbz	r0, d4aba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a7e:	2700      	movs	r7, #0
   d4a80:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a82:	2018      	movs	r0, #24
   d4a84:	f7ff fb09 	bl	d409a <_Znwj>
   d4a88:	4604      	mov	r4, r0
   d4a8a:	b188      	cbz	r0, d4ab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4a8c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a8e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4a90:	a802      	add	r0, sp, #8
   d4a92:	f7ff ff55 	bl	d4940 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a96:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4a98:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a9a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a9c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4a9e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4aa0:	a906      	add	r1, sp, #24
   d4aa2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4aa4:	60e3      	str	r3, [r4, #12]
   d4aa6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4aaa:	9205      	str	r2, [sp, #20]
   d4aac:	f7ff fee0 	bl	d4870 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ab0:	4b0d      	ldr	r3, [pc, #52]	; (d4ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4ab2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ab4:	4b0d      	ldr	r3, [pc, #52]	; (d4aec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ab6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ab8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4aba:	a806      	add	r0, sp, #24
   d4abc:	f7ff fee7 	bl	d488e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ac0:	a802      	add	r0, sp, #8
   d4ac2:	f7ff fecc 	bl	d485e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ac6:	2200      	movs	r2, #0
   d4ac8:	4629      	mov	r1, r5
   d4aca:	4809      	ldr	r0, [pc, #36]	; (d4af0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4acc:	f7ff fde6 	bl	d469c <application_thread_invoke>
   d4ad0:	4630      	mov	r0, r6
   d4ad2:	f7ff fec4 	bl	d485e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4ad6:	2110      	movs	r1, #16
   d4ad8:	4630      	mov	r0, r6
   d4ada:	f000 fe86 	bl	d57ea <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4ade:	4668      	mov	r0, sp
   d4ae0:	f7ff fed5 	bl	d488e <_ZN8particle5ErrorD1Ev>
    }
   d4ae4:	b009      	add	sp, #36	; 0x24
   d4ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ae8:	000d499b 	.word	0x000d499b
   d4aec:	000d4c11 	.word	0x000d4c11
   d4af0:	000d47fb 	.word	0x000d47fb

000d4af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4af8:	b08b      	sub	sp, #44	; 0x2c
   d4afa:	4606      	mov	r6, r0
   d4afc:	460f      	mov	r7, r1
   d4afe:	4690      	mov	r8, r2
   d4b00:	4699      	mov	r9, r3
   d4b02:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b06:	f7ff fde5 	bl	d46d4 <spark_cloud_flag_connected>
   d4b0a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4b0c:	4683      	mov	fp, r0
   d4b0e:	bb30      	cbnz	r0, d4b5e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4b10:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4b14:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4b16:	a905      	add	r1, sp, #20
   d4b18:	4628      	mov	r0, r5
   d4b1a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4b1e:	f7ff fea7 	bl	d4870 <_ZN8particle5ErrorC1EOS0_>
   d4b22:	2014      	movs	r0, #20
   d4b24:	f7ff fab9 	bl	d409a <_Znwj>
   d4b28:	4604      	mov	r4, r0
   d4b2a:	b158      	cbz	r0, d4b44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4b2c:	2302      	movs	r3, #2
   d4b2e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b30:	2301      	movs	r3, #1
   d4b32:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4b34:	f8c0 b004 	str.w	fp, [r0, #4]
   d4b38:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4b3c:	4629      	mov	r1, r5
   d4b3e:	300c      	adds	r0, #12
   d4b40:	f7ff fe96 	bl	d4870 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4b44:	4630      	mov	r0, r6
   d4b46:	4621      	mov	r1, r4
   d4b48:	f840 4b04 	str.w	r4, [r0], #4
   d4b4c:	f7ff ff08 	bl	d4960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4b50:	4628      	mov	r0, r5
   d4b52:	f7ff fe9c 	bl	d488e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4b56:	a805      	add	r0, sp, #20
   d4b58:	f7ff fe99 	bl	d488e <_ZN8particle5ErrorD1Ev>
   d4b5c:	e052      	b.n	d4c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4b5e:	2400      	movs	r4, #0
   d4b60:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4b62:	2014      	movs	r0, #20
   d4b64:	606c      	str	r4, [r5, #4]
   d4b66:	60ac      	str	r4, [r5, #8]
   d4b68:	9307      	str	r3, [sp, #28]
   d4b6a:	f7ff fa96 	bl	d409a <_Znwj>
   d4b6e:	4601      	mov	r1, r0
   d4b70:	b118      	cbz	r0, d4b7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4b72:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b74:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4b76:	6044      	str	r4, [r0, #4]
   d4b78:	6084      	str	r4, [r0, #8]
   d4b7a:	a804      	add	r0, sp, #16
   d4b7c:	9103      	str	r1, [sp, #12]
   d4b7e:	f7ff feef 	bl	d4960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4b82:	4b22      	ldr	r3, [pc, #136]	; (d4c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4b84:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4b86:	2008      	movs	r0, #8
   d4b88:	f7ff fa87 	bl	d409a <_Znwj>
   d4b8c:	4604      	mov	r4, r0
   d4b8e:	b128      	cbz	r0, d4b9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b90:	9b03      	ldr	r3, [sp, #12]
   d4b92:	f840 3b04 	str.w	r3, [r0], #4
   d4b96:	a904      	add	r1, sp, #16
   d4b98:	f7ff fe43 	bl	d4822 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b9c:	9500      	str	r5, [sp, #0]
   d4b9e:	fa5f f38a 	uxtb.w	r3, sl
   d4ba2:	464a      	mov	r2, r9
   d4ba4:	4641      	mov	r1, r8
   d4ba6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4ba8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4baa:	f7ff fd9b 	bl	d46e4 <spark_send_event>
   d4bae:	b920      	cbnz	r0, d4bba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4bb0:	9b03      	ldr	r3, [sp, #12]
   d4bb2:	785b      	ldrb	r3, [r3, #1]
   d4bb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4bb8:	b183      	cbz	r3, d4bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4bba:	9b03      	ldr	r3, [sp, #12]
   d4bbc:	9305      	str	r3, [sp, #20]
   d4bbe:	a904      	add	r1, sp, #16
   d4bc0:	a806      	add	r0, sp, #24
   d4bc2:	f7ff fe2e 	bl	d4822 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4bc6:	a905      	add	r1, sp, #20
   d4bc8:	4630      	mov	r0, r6
   d4bca:	f7ff fe8a 	bl	d48e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4bce:	a806      	add	r0, sp, #24
   d4bd0:	f7ff fa82 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bd4:	a804      	add	r0, sp, #16
   d4bd6:	f7ff fa7f 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bda:	e013      	b.n	d4c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4bdc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4be0:	a905      	add	r1, sp, #20
   d4be2:	a803      	add	r0, sp, #12
   d4be4:	9205      	str	r2, [sp, #20]
   d4be6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4bea:	f7ff fefd 	bl	d49e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4bee:	a805      	add	r0, sp, #20
   d4bf0:	f7ff fe4d 	bl	d488e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4bf4:	a805      	add	r0, sp, #20
   d4bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4bf8:	f7ff fe84 	bl	d4904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4bfc:	a806      	add	r0, sp, #24
   d4bfe:	f7ff fa6b 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c02:	e7da      	b.n	d4bba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4c04:	4630      	mov	r0, r6
   d4c06:	b00b      	add	sp, #44	; 0x2c
   d4c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c0c:	000d4d81 	.word	0x000d4d81

000d4c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c10:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c14:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c16:	d006      	beq.n	d4c26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4c18:	2a03      	cmp	r2, #3
   d4c1a:	d017      	beq.n	d4c4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4c1c:	2a01      	cmp	r2, #1
   d4c1e:	d122      	bne.n	d4c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c20:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c22:	6003      	str	r3, [r0, #0]
	      break;
   d4c24:	e01f      	b.n	d4c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c26:	2018      	movs	r0, #24
   d4c28:	680e      	ldr	r6, [r1, #0]
   d4c2a:	f7ff fa36 	bl	d409a <_Znwj>
   d4c2e:	4605      	mov	r5, r0
   d4c30:	b150      	cbz	r0, d4c48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4c32:	4631      	mov	r1, r6
   d4c34:	f7ff fec8 	bl	d49c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4c38:	6930      	ldr	r0, [r6, #16]
   d4c3a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4c3e:	b108      	cbz	r0, d4c44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4c40:	f001 fb84 	bl	d634c <strdup>
   d4c44:	6128      	str	r0, [r5, #16]
   d4c46:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c48:	6025      	str	r5, [r4, #0]
   d4c4a:	e00c      	b.n	d4c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c4c:	6804      	ldr	r4, [r0, #0]
   d4c4e:	b154      	cbz	r4, d4c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4c50:	f104 0010 	add.w	r0, r4, #16
   d4c54:	f7ff fe1b 	bl	d488e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c58:	4620      	mov	r0, r4
   d4c5a:	f7ff fe00 	bl	d485e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c5e:	2118      	movs	r1, #24
   d4c60:	4620      	mov	r0, r4
   d4c62:	f000 fdc2 	bl	d57ea <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4c66:	2000      	movs	r0, #0
   d4c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c6a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c6a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c6c:	2300      	movs	r3, #0
   d4c6e:	6083      	str	r3, [r0, #8]
   d4c70:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c72:	4604      	mov	r4, r0
   d4c74:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4c76:	b12b      	cbz	r3, d4c84 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c78:	2202      	movs	r2, #2
   d4c7a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c7c:	68eb      	ldr	r3, [r5, #12]
   d4c7e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c80:	68ab      	ldr	r3, [r5, #8]
   d4c82:	60a3      	str	r3, [r4, #8]
	}
    }
   d4c84:	4620      	mov	r0, r4
   d4c86:	bd38      	pop	{r3, r4, r5, pc}

000d4c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c88:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c8a:	b570      	push	{r4, r5, r6, lr}
   d4c8c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c8e:	d006      	beq.n	d4c9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4c90:	2a03      	cmp	r2, #3
   d4c92:	d011      	beq.n	d4cb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4c94:	2a01      	cmp	r2, #1
   d4c96:	d118      	bne.n	d4cca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c98:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c9a:	6003      	str	r3, [r0, #0]
	      break;
   d4c9c:	e015      	b.n	d4cca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c9e:	2014      	movs	r0, #20
   d4ca0:	680e      	ldr	r6, [r1, #0]
   d4ca2:	f7ff f9fa 	bl	d409a <_Znwj>
   d4ca6:	4605      	mov	r5, r0
   d4ca8:	b120      	cbz	r0, d4cb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4caa:	4631      	mov	r1, r6
   d4cac:	f7ff ffdd 	bl	d4c6a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4cb0:	7c33      	ldrb	r3, [r6, #16]
   d4cb2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4cb4:	6025      	str	r5, [r4, #0]
   d4cb6:	e008      	b.n	d4cca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4cb8:	6804      	ldr	r4, [r0, #0]
   d4cba:	b134      	cbz	r4, d4cca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	f7ff fdce 	bl	d485e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4cc2:	2114      	movs	r1, #20
   d4cc4:	4620      	mov	r0, r4
   d4cc6:	f000 fd90 	bl	d57ea <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4cca:	2000      	movs	r0, #0
   d4ccc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4cd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4cd0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4cd2:	2300      	movs	r3, #0
   d4cd4:	b087      	sub	sp, #28
   d4cd6:	460c      	mov	r4, r1
   d4cd8:	f3bf 8f5f 	dmb	sy
   d4cdc:	e850 6f00 	ldrex	r6, [r0]
   d4ce0:	e840 3200 	strex	r2, r3, [r0]
   d4ce4:	2a00      	cmp	r2, #0
   d4ce6:	d1f9      	bne.n	d4cdc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4ce8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4cec:	2e00      	cmp	r6, #0
   d4cee:	d03f      	beq.n	d4d70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4cf0:	4618      	mov	r0, r3
   d4cf2:	f7ff fccb 	bl	d468c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4cf6:	4607      	mov	r7, r0
   d4cf8:	b120      	cbz	r0, d4d04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4cfa:	4621      	mov	r1, r4
   d4cfc:	4630      	mov	r0, r6
   d4cfe:	f7ff fe53 	bl	d49a8 <_ZNKSt8functionIFvRKbEEclES1_>
   d4d02:	e02e      	b.n	d4d62 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d04:	4631      	mov	r1, r6
   d4d06:	a801      	add	r0, sp, #4
   d4d08:	f7ff ffaf 	bl	d4c6a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d0c:	7823      	ldrb	r3, [r4, #0]
   d4d0e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d12:	2010      	movs	r0, #16
   d4d14:	f7ff f9c1 	bl	d409a <_Znwj>
   d4d18:	4605      	mov	r5, r0
   d4d1a:	b1d0      	cbz	r0, d4d52 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d1c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d1e:	2014      	movs	r0, #20
   d4d20:	f7ff f9bb 	bl	d409a <_Znwj>
   d4d24:	4604      	mov	r4, r0
   d4d26:	b178      	cbz	r0, d4d48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d28:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4d2a:	4601      	mov	r1, r0
   d4d2c:	a801      	add	r0, sp, #4
   d4d2e:	f7ff fe07 	bl	d4940 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d32:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4d34:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d36:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d38:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4d3a:	9203      	str	r2, [sp, #12]
   d4d3c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d3e:	60e3      	str	r3, [r4, #12]
   d4d40:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4d44:	9204      	str	r2, [sp, #16]
   d4d46:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4d48:	4b0a      	ldr	r3, [pc, #40]	; (d4d74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4d4a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4d4c:	4b0a      	ldr	r3, [pc, #40]	; (d4d78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d4e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4d50:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d52:	a801      	add	r0, sp, #4
   d4d54:	f7ff fd83 	bl	d485e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d58:	2200      	movs	r2, #0
   d4d5a:	4629      	mov	r1, r5
   d4d5c:	4807      	ldr	r0, [pc, #28]	; (d4d7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4d5e:	f7ff fc9d 	bl	d469c <application_thread_invoke>
   d4d62:	4630      	mov	r0, r6
   d4d64:	f7ff fd7b 	bl	d485e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4d68:	2110      	movs	r1, #16
   d4d6a:	4630      	mov	r0, r6
   d4d6c:	f000 fd3d 	bl	d57ea <_ZdlPvj>
        }
    }
   d4d70:	b007      	add	sp, #28
   d4d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d74:	000d49bb 	.word	0x000d49bb
   d4d78:	000d4c89 	.word	0x000d4c89
   d4d7c:	000d47fb 	.word	0x000d47fb

000d4d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4d80:	b530      	push	{r4, r5, lr}
   d4d82:	b085      	sub	sp, #20
   d4d84:	4604      	mov	r4, r0
   d4d86:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4d88:	4668      	mov	r0, sp
   d4d8a:	4611      	mov	r1, r2
   d4d8c:	f7ff fdba 	bl	d4904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4d90:	b17c      	cbz	r4, d4db2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4d92:	b224      	sxth	r4, r4
   d4d94:	4628      	mov	r0, r5
   d4d96:	b10d      	cbz	r5, d4d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4d98:	f001 fad8 	bl	d634c <strdup>
   d4d9c:	9002      	str	r0, [sp, #8]
   d4d9e:	a902      	add	r1, sp, #8
   d4da0:	4668      	mov	r0, sp
   d4da2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4da6:	f7ff fe1f 	bl	d49e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4daa:	a802      	add	r0, sp, #8
   d4dac:	f7ff fd6f 	bl	d488e <_ZN8particle5ErrorD1Ev>
   d4db0:	e01d      	b.n	d4dee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4db2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4db4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4db8:	f04f 0201 	mov.w	r2, #1
   d4dbc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4dc0:	42a3      	cmp	r3, r4
   d4dc2:	d103      	bne.n	d4dcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4dc4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4dc8:	2900      	cmp	r1, #0
   d4dca:	d1f7      	bne.n	d4dbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4dcc:	d002      	beq.n	d4dd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4dce:	f88d 3008 	strb.w	r3, [sp, #8]
   d4dd2:	e00c      	b.n	d4dee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4dd4:	f110 010c 	adds.w	r1, r0, #12
   d4dd8:	f04f 0301 	mov.w	r3, #1
   d4ddc:	bf18      	it	ne
   d4dde:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4de0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4de4:	3004      	adds	r0, #4
   d4de6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4dea:	f7ff ff71 	bl	d4cd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4dee:	a801      	add	r0, sp, #4
   d4df0:	f7ff f972 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4df4:	b005      	add	sp, #20
   d4df6:	bd30      	pop	{r4, r5, pc}

000d4df8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4df8:	2200      	movs	r2, #0
   d4dfa:	4611      	mov	r1, r2
   d4dfc:	6840      	ldr	r0, [r0, #4]
   d4dfe:	f7ff bcb9 	b.w	d4774 <network_listening>

000d4e02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e02:	2200      	movs	r2, #0
   d4e04:	4611      	mov	r1, r2
   d4e06:	6840      	ldr	r0, [r0, #4]
   d4e08:	f7ff bcc4 	b.w	d4794 <network_get_listen_timeout>

000d4e0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e0c:	2200      	movs	r2, #0
   d4e0e:	6840      	ldr	r0, [r0, #4]
   d4e10:	f7ff bcb8 	b.w	d4784 <network_set_listen_timeout>

000d4e14 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e14:	2200      	movs	r2, #0
   d4e16:	f081 0101 	eor.w	r1, r1, #1
   d4e1a:	6840      	ldr	r0, [r0, #4]
   d4e1c:	f7ff bca2 	b.w	d4764 <network_listen>

000d4e20 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4e20:	2300      	movs	r3, #0
   d4e22:	461a      	mov	r2, r3
   d4e24:	4619      	mov	r1, r3
   d4e26:	6840      	ldr	r0, [r0, #4]
   d4e28:	f7ff bc94 	b.w	d4754 <network_off>

000d4e2c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e2c:	2300      	movs	r3, #0
   d4e2e:	461a      	mov	r2, r3
   d4e30:	4619      	mov	r1, r3
   d4e32:	6840      	ldr	r0, [r0, #4]
   d4e34:	f7ff bc86 	b.w	d4744 <network_on>

000d4e38 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e38:	2200      	movs	r2, #0
   d4e3a:	4611      	mov	r1, r2
   d4e3c:	6840      	ldr	r0, [r0, #4]
   d4e3e:	f7ff bc79 	b.w	d4734 <network_ready>

000d4e42 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e42:	2200      	movs	r2, #0
   d4e44:	4611      	mov	r1, r2
   d4e46:	6840      	ldr	r0, [r0, #4]
   d4e48:	f7ff bc64 	b.w	d4714 <network_connecting>

000d4e4c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e4c:	2200      	movs	r2, #0
   d4e4e:	2102      	movs	r1, #2
   d4e50:	6840      	ldr	r0, [r0, #4]
   d4e52:	f7ff bc67 	b.w	d4724 <network_disconnect>

000d4e56 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e56:	2300      	movs	r3, #0
   d4e58:	461a      	mov	r2, r3
   d4e5a:	6840      	ldr	r0, [r0, #4]
   d4e5c:	f7ff bc52 	b.w	d4704 <network_connect>

000d4e60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e60:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e62:	2203      	movs	r2, #3
   d4e64:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e66:	4a02      	ldr	r2, [pc, #8]	; (d4e70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e68:	601a      	str	r2, [r3, #0]
   d4e6a:	4770      	bx	lr
   d4e6c:	2003e3cc 	.word	0x2003e3cc
   d4e70:	000d6458 	.word	0x000d6458

000d4e74 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4e74:	4770      	bx	lr

000d4e76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e78:	4606      	mov	r6, r0
   d4e7a:	4615      	mov	r5, r2
   d4e7c:	460c      	mov	r4, r1
   d4e7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e80:	42bc      	cmp	r4, r7
   d4e82:	d006      	beq.n	d4e92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e84:	6833      	ldr	r3, [r6, #0]
   d4e86:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e8a:	689b      	ldr	r3, [r3, #8]
   d4e8c:	4630      	mov	r0, r6
   d4e8e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e90:	e7f6      	b.n	d4e80 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4e92:	4628      	mov	r0, r5
   d4e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e96 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4e96:	2200      	movs	r2, #0
   d4e98:	7c00      	ldrb	r0, [r0, #16]
   d4e9a:	f7ff bb2f 	b.w	d44fc <HAL_I2C_Write_Data>

000d4e9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4e9e:	2100      	movs	r1, #0
   d4ea0:	7c00      	ldrb	r0, [r0, #16]
   d4ea2:	f7ff bb33 	b.w	d450c <HAL_I2C_Available_Data>

000d4ea6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4ea6:	2100      	movs	r1, #0
   d4ea8:	7c00      	ldrb	r0, [r0, #16]
   d4eaa:	f7ff bb37 	b.w	d451c <HAL_I2C_Read_Data>

000d4eae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4eae:	2100      	movs	r1, #0
   d4eb0:	7c00      	ldrb	r0, [r0, #16]
   d4eb2:	f7ff bb3b 	b.w	d452c <HAL_I2C_Peek_Data>

000d4eb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4eb6:	2100      	movs	r1, #0
   d4eb8:	7c00      	ldrb	r0, [r0, #16]
   d4eba:	f7ff bb3f 	b.w	d453c <HAL_I2C_Flush_Data>

000d4ebe <_ZN7TwoWireD0Ev>:
   d4ebe:	b510      	push	{r4, lr}
   d4ec0:	2114      	movs	r1, #20
   d4ec2:	4604      	mov	r4, r0
   d4ec4:	f000 fc91 	bl	d57ea <_ZdlPvj>
   d4ec8:	4620      	mov	r0, r4
   d4eca:	bd10      	pop	{r4, pc}

000d4ecc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ecc:	b510      	push	{r4, lr}
   d4ece:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ed4:	4608      	mov	r0, r1
   d4ed6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4ed8:	2100      	movs	r1, #0
   d4eda:	4b04      	ldr	r3, [pc, #16]	; (d4eec <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4edc:	7420      	strb	r0, [r4, #16]
   d4ede:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ee0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4ee2:	f7ff fb33 	bl	d454c <HAL_I2C_Init>

}
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	bd10      	pop	{r4, pc}
   d4eea:	bf00      	nop
   d4eec:	000d648c 	.word	0x000d648c

000d4ef0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4ef0:	2300      	movs	r3, #0
   d4ef2:	461a      	mov	r2, r3
   d4ef4:	4619      	mov	r1, r3
   d4ef6:	7c00      	ldrb	r0, [r0, #16]
   d4ef8:	f7ff bae0 	b.w	d44bc <HAL_I2C_Begin>

000d4efc <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d4efc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d4efe:	2400      	movs	r4, #0
   d4f00:	7c00      	ldrb	r0, [r0, #16]
   d4f02:	9400      	str	r4, [sp, #0]
   d4f04:	f7ff fae2 	bl	d44cc <HAL_I2C_Request_Data>
  return result;
}
   d4f08:	b2c0      	uxtb	r0, r0
   d4f0a:	b002      	add	sp, #8
   d4f0c:	bd10      	pop	{r4, pc}

000d4f0e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d4f0e:	2301      	movs	r3, #1
   d4f10:	f7ff bff4 	b.w	d4efc <_ZN7TwoWire11requestFromEhhh>

000d4f14 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4f14:	2200      	movs	r2, #0
   d4f16:	7c00      	ldrb	r0, [r0, #16]
   d4f18:	f7ff bae0 	b.w	d44dc <HAL_I2C_Begin_Transmission>

000d4f1c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4f1c:	2200      	movs	r2, #0
   d4f1e:	7c00      	ldrb	r0, [r0, #16]
   d4f20:	f7ff bae4 	b.w	d44ec <HAL_I2C_End_Transmission>

000d4f24 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4f24:	2101      	movs	r1, #1
   d4f26:	f7ff bff9 	b.w	d4f1c <_ZN7TwoWire15endTransmissionEh>

000d4f2a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f2a:	4770      	bx	lr

000d4f2c <_ZN9IPAddressD0Ev>:
   d4f2c:	b510      	push	{r4, lr}
   d4f2e:	2118      	movs	r1, #24
   d4f30:	4604      	mov	r4, r0
   d4f32:	f000 fc5a 	bl	d57ea <_ZdlPvj>
   d4f36:	4620      	mov	r0, r4
   d4f38:	bd10      	pop	{r4, pc}

000d4f3a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f3c:	7d03      	ldrb	r3, [r0, #20]
   d4f3e:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f40:	b08d      	sub	sp, #52	; 0x34
   d4f42:	460e      	mov	r6, r1
   d4f44:	f100 0704 	add.w	r7, r0, #4
   d4f48:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f4c:	d002      	beq.n	d4f54 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4f4e:	f100 0508 	add.w	r5, r0, #8
   d4f52:	e018      	b.n	d4f86 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f54:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f56:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f58:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f5c:	232f      	movs	r3, #47	; 0x2f
   d4f5e:	462a      	mov	r2, r5
   d4f60:	200a      	movs	r0, #10
   d4f62:	f7ff fafb 	bl	d455c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f66:	4628      	mov	r0, r5
   d4f68:	f001 fa0b 	bl	d6382 <strlen>
   d4f6c:	6833      	ldr	r3, [r6, #0]
   d4f6e:	4602      	mov	r2, r0
   d4f70:	68db      	ldr	r3, [r3, #12]
   d4f72:	4629      	mov	r1, r5
   d4f74:	4630      	mov	r0, r6
   d4f76:	4798      	blx	r3
   d4f78:	e00f      	b.n	d4f9a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4f7a:	b124      	cbz	r4, d4f86 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4f7c:	212e      	movs	r1, #46	; 0x2e
   d4f7e:	4630      	mov	r0, r6
   d4f80:	f000 f9ca 	bl	d5318 <_ZN5Print5printEc>
   d4f84:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4f86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4f8a:	220a      	movs	r2, #10
   d4f8c:	4630      	mov	r0, r6
   d4f8e:	f000 f9f3 	bl	d5378 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f92:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f94:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f96:	d1f0      	bne.n	d4f7a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f98:	4620      	mov	r0, r4
    }
    return n;
}
   d4f9a:	b00d      	add	sp, #52	; 0x34
   d4f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4fa0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4fa0:	b510      	push	{r4, lr}
   d4fa2:	4b05      	ldr	r3, [pc, #20]	; (d4fb8 <_ZN9IPAddressC1Ev+0x18>)
   d4fa4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4fa6:	2211      	movs	r2, #17
   d4fa8:	f840 3b04 	str.w	r3, [r0], #4
   d4fac:	2100      	movs	r1, #0
   d4fae:	f001 f99c 	bl	d62ea <memset>
{
    clear();
}
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	bd10      	pop	{r4, pc}
   d4fb6:	bf00      	nop
   d4fb8:	000d64b4 	.word	0x000d64b4

000d4fbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4fbc:	4603      	mov	r3, r0
   d4fbe:	4a07      	ldr	r2, [pc, #28]	; (d4fdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4fc0:	b510      	push	{r4, lr}
   d4fc2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4fc6:	f101 0210 	add.w	r2, r1, #16
   d4fca:	f851 4b04 	ldr.w	r4, [r1], #4
   d4fce:	f843 4b04 	str.w	r4, [r3], #4
   d4fd2:	4291      	cmp	r1, r2
   d4fd4:	d1f9      	bne.n	d4fca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4fd6:	780a      	ldrb	r2, [r1, #0]
   d4fd8:	701a      	strb	r2, [r3, #0]
}
   d4fda:	bd10      	pop	{r4, pc}
   d4fdc:	000d64b4 	.word	0x000d64b4

000d4fe0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4fe0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4fe2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4fe6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4fea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4fee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4ff2:	2304      	movs	r3, #4
   d4ff4:	6041      	str	r1, [r0, #4]
   d4ff6:	7503      	strb	r3, [r0, #20]
   d4ff8:	bd10      	pop	{r4, pc}

000d4ffa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ffc:	780d      	ldrb	r5, [r1, #0]
   d4ffe:	788b      	ldrb	r3, [r1, #2]
   d5000:	784a      	ldrb	r2, [r1, #1]
   d5002:	78c9      	ldrb	r1, [r1, #3]
   d5004:	9100      	str	r1, [sp, #0]
   d5006:	4629      	mov	r1, r5
   d5008:	f7ff ffea 	bl	d4fe0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d500c:	b003      	add	sp, #12
   d500e:	bd30      	pop	{r4, r5, pc}

000d5010 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5010:	4b01      	ldr	r3, [pc, #4]	; (d5018 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5012:	4a02      	ldr	r2, [pc, #8]	; (d501c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5014:	601a      	str	r2, [r3, #0]
   d5016:	4770      	bx	lr
   d5018:	2003e3d4 	.word	0x2003e3d4
   d501c:	000d6533 	.word	0x000d6533

000d5020 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5020:	2200      	movs	r2, #0
   d5022:	4611      	mov	r1, r2
   d5024:	6840      	ldr	r0, [r0, #4]
   d5026:	f7ff bba5 	b.w	d4774 <network_listening>

000d502a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d502a:	2200      	movs	r2, #0
   d502c:	4611      	mov	r1, r2
   d502e:	6840      	ldr	r0, [r0, #4]
   d5030:	f7ff bbb0 	b.w	d4794 <network_get_listen_timeout>

000d5034 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5034:	2200      	movs	r2, #0
   d5036:	6840      	ldr	r0, [r0, #4]
   d5038:	f7ff bba4 	b.w	d4784 <network_set_listen_timeout>

000d503c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d503c:	2200      	movs	r2, #0
   d503e:	f081 0101 	eor.w	r1, r1, #1
   d5042:	6840      	ldr	r0, [r0, #4]
   d5044:	f7ff bb8e 	b.w	d4764 <network_listen>

000d5048 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5048:	2300      	movs	r3, #0
   d504a:	461a      	mov	r2, r3
   d504c:	2101      	movs	r1, #1
   d504e:	6840      	ldr	r0, [r0, #4]
   d5050:	f7ff bb80 	b.w	d4754 <network_off>

000d5054 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5054:	2300      	movs	r3, #0
   d5056:	461a      	mov	r2, r3
   d5058:	4619      	mov	r1, r3
   d505a:	6840      	ldr	r0, [r0, #4]
   d505c:	f7ff bb72 	b.w	d4744 <network_on>

000d5060 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5060:	2200      	movs	r2, #0
   d5062:	4611      	mov	r1, r2
   d5064:	6840      	ldr	r0, [r0, #4]
   d5066:	f7ff bb65 	b.w	d4734 <network_ready>

000d506a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d506a:	2200      	movs	r2, #0
   d506c:	4611      	mov	r1, r2
   d506e:	6840      	ldr	r0, [r0, #4]
   d5070:	f7ff bb50 	b.w	d4714 <network_connecting>

000d5074 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5074:	2200      	movs	r2, #0
   d5076:	2102      	movs	r1, #2
   d5078:	6840      	ldr	r0, [r0, #4]
   d507a:	f7ff bb53 	b.w	d4724 <network_disconnect>

000d507e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d507e:	2300      	movs	r3, #0
   d5080:	461a      	mov	r2, r3
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	f7ff bb3e 	b.w	d4704 <network_connect>

000d5088 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5088:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d508a:	4605      	mov	r5, r0
   d508c:	b188      	cbz	r0, d50b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d508e:	6804      	ldr	r4, [r0, #0]
   d5090:	b14c      	cbz	r4, d50a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5092:	68a3      	ldr	r3, [r4, #8]
   d5094:	b11b      	cbz	r3, d509e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5096:	2203      	movs	r2, #3
   d5098:	4621      	mov	r1, r4
   d509a:	4620      	mov	r0, r4
   d509c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d509e:	2110      	movs	r1, #16
   d50a0:	4620      	mov	r0, r4
   d50a2:	f000 fba2 	bl	d57ea <_ZdlPvj>
   d50a6:	4628      	mov	r0, r5
   d50a8:	2114      	movs	r1, #20
      }
   d50aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50ae:	f000 bb9c 	b.w	d57ea <_ZdlPvj>
   d50b2:	bd38      	pop	{r3, r4, r5, pc}

000d50b4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d50b4:	b110      	cbz	r0, d50bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d50b6:	6803      	ldr	r3, [r0, #0]
   d50b8:	685b      	ldr	r3, [r3, #4]
   d50ba:	4718      	bx	r3
   d50bc:	4770      	bx	lr

000d50be <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d50be:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d50c0:	6803      	ldr	r3, [r0, #0]
   d50c2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d50c4:	b1bb      	cbz	r3, d50f6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d50c6:	6858      	ldr	r0, [r3, #4]
   d50c8:	f7ff f9b8 	bl	d443c <os_thread_is_current>
   d50cc:	b978      	cbnz	r0, d50ee <_ZN6ThreadD1Ev+0x30>
   d50ce:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d50d0:	7c5a      	ldrb	r2, [r3, #17]
   d50d2:	b912      	cbnz	r2, d50da <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d50d4:	6858      	ldr	r0, [r3, #4]
   d50d6:	f7ff f9b9 	bl	d444c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d50da:	6823      	ldr	r3, [r4, #0]
   d50dc:	6858      	ldr	r0, [r3, #4]
   d50de:	f7ff f9bd 	bl	d445c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50e2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d50e4:	2300      	movs	r3, #0
   d50e6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d50e8:	b128      	cbz	r0, d50f6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d50ea:	f7ff ffcd 	bl	d5088 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50ee:	6820      	ldr	r0, [r4, #0]
   d50f0:	b108      	cbz	r0, d50f6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d50f2:	f7ff ffc9 	bl	d5088 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d50f6:	4620      	mov	r0, r4
   d50f8:	bd10      	pop	{r4, pc}
	...

000d50fc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d50fc:	b538      	push	{r3, r4, r5, lr}
   d50fe:	4b0c      	ldr	r3, [pc, #48]	; (d5130 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5100:	6003      	str	r3, [r0, #0]
   d5102:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5104:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5108:	b108      	cbz	r0, d510e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d510a:	f7fe ffca 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d510e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5112:	b135      	cbz	r5, d5122 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5114:	4628      	mov	r0, r5
   d5116:	f7ff ffd2 	bl	d50be <_ZN6ThreadD1Ev>
   d511a:	2104      	movs	r1, #4
   d511c:	4628      	mov	r0, r5
   d511e:	f000 fb64 	bl	d57ea <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5122:	68a0      	ldr	r0, [r4, #8]
   d5124:	b108      	cbz	r0, d512a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5126:	f7ff ffc5 	bl	d50b4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d512a:	4620      	mov	r0, r4
   d512c:	bd38      	pop	{r3, r4, r5, pc}
   d512e:	bf00      	nop
   d5130:	000d65a8 	.word	0x000d65a8

000d5134 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5134:	b538      	push	{r3, r4, r5, lr}
   d5136:	4c0e      	ldr	r4, [pc, #56]	; (d5170 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5138:	4b0e      	ldr	r3, [pc, #56]	; (d5174 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d513a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d513c:	2500      	movs	r5, #0
   d513e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5140:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5144:	6063      	str	r3, [r4, #4]
   d5146:	60a5      	str	r5, [r4, #8]
   d5148:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d514c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5150:	f7ff f994 	bl	d447c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5154:	4b08      	ldr	r3, [pc, #32]	; (d5178 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5156:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d515a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d515e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5160:	4620      	mov	r0, r4
   d5162:	4a06      	ldr	r2, [pc, #24]	; (d517c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5164:	4906      	ldr	r1, [pc, #24]	; (d5180 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d516a:	f000 bb39 	b.w	d57e0 <__aeabi_atexit>
   d516e:	bf00      	nop
   d5170:	2003e3d8 	.word	0x2003e3d8
   d5174:	000d65dc 	.word	0x000d65dc
   d5178:	000d65a8 	.word	0x000d65a8
   d517c:	2003e374 	.word	0x2003e374
   d5180:	000d50fd 	.word	0x000d50fd

000d5184 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5184:	2300      	movs	r3, #0
   d5186:	461a      	mov	r2, r3
   d5188:	6840      	ldr	r0, [r0, #4]
   d518a:	f7ff babb 	b.w	d4704 <network_connect>

000d518e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d518e:	2200      	movs	r2, #0
   d5190:	2102      	movs	r1, #2
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff bac6 	b.w	d4724 <network_disconnect>

000d5198 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5198:	2200      	movs	r2, #0
   d519a:	4611      	mov	r1, r2
   d519c:	6840      	ldr	r0, [r0, #4]
   d519e:	f7ff bab9 	b.w	d4714 <network_connecting>

000d51a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d51a2:	2200      	movs	r2, #0
   d51a4:	4611      	mov	r1, r2
   d51a6:	6840      	ldr	r0, [r0, #4]
   d51a8:	f7ff bac4 	b.w	d4734 <network_ready>

000d51ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d51ac:	2300      	movs	r3, #0
   d51ae:	461a      	mov	r2, r3
   d51b0:	4619      	mov	r1, r3
   d51b2:	6840      	ldr	r0, [r0, #4]
   d51b4:	f7ff bac6 	b.w	d4744 <network_on>

000d51b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d51b8:	2300      	movs	r3, #0
   d51ba:	461a      	mov	r2, r3
   d51bc:	4619      	mov	r1, r3
   d51be:	6840      	ldr	r0, [r0, #4]
   d51c0:	f7ff bac8 	b.w	d4754 <network_off>

000d51c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d51c4:	2200      	movs	r2, #0
   d51c6:	f081 0101 	eor.w	r1, r1, #1
   d51ca:	6840      	ldr	r0, [r0, #4]
   d51cc:	f7ff baca 	b.w	d4764 <network_listen>

000d51d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d51d0:	2200      	movs	r2, #0
   d51d2:	6840      	ldr	r0, [r0, #4]
   d51d4:	f7ff bad6 	b.w	d4784 <network_set_listen_timeout>

000d51d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d51d8:	2200      	movs	r2, #0
   d51da:	4611      	mov	r1, r2
   d51dc:	6840      	ldr	r0, [r0, #4]
   d51de:	f7ff bad9 	b.w	d4794 <network_get_listen_timeout>

000d51e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d51e2:	2200      	movs	r2, #0
   d51e4:	4611      	mov	r1, r2
   d51e6:	6840      	ldr	r0, [r0, #4]
   d51e8:	f7ff bac4 	b.w	d4774 <network_listening>

000d51ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d51ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d51f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d51f2:	b095      	sub	sp, #84	; 0x54
   d51f4:	4616      	mov	r6, r2
   d51f6:	460d      	mov	r5, r1
   d51f8:	4607      	mov	r7, r0
    IPAddress addr;
   d51fa:	f7ff fed1 	bl	d4fa0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d51fe:	4621      	mov	r1, r4
   d5200:	2220      	movs	r2, #32
   d5202:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5204:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5206:	f001 f870 	bl	d62ea <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d520a:	2340      	movs	r3, #64	; 0x40
   d520c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d520e:	4621      	mov	r1, r4
   d5210:	466b      	mov	r3, sp
   d5212:	aa0c      	add	r2, sp, #48	; 0x30
   d5214:	4630      	mov	r0, r6
   d5216:	f7ff f9b1 	bl	d457c <netdb_getaddrinfo>
    if (!r) {
   d521a:	4604      	mov	r4, r0
   d521c:	2800      	cmp	r0, #0
   d521e:	d144      	bne.n	d52aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5220:	4602      	mov	r2, r0
   d5222:	2101      	movs	r1, #1
   d5224:	6868      	ldr	r0, [r5, #4]
   d5226:	f7ff fa85 	bl	d4734 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d522a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d522c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d522e:	4622      	mov	r2, r4
   d5230:	6868      	ldr	r0, [r5, #4]
   d5232:	f7ff fa7f 	bl	d4734 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5236:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5238:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d523a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d523c:	2e00      	cmp	r6, #0
   d523e:	d034      	beq.n	d52aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5240:	2900      	cmp	r1, #0
   d5242:	d132      	bne.n	d52aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5244:	6873      	ldr	r3, [r6, #4]
   d5246:	2b02      	cmp	r3, #2
   d5248:	d002      	beq.n	d5250 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d524a:	2b0a      	cmp	r3, #10
   d524c:	d009      	beq.n	d5262 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d524e:	e02a      	b.n	d52a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5250:	f1b8 0f00 	cmp.w	r8, #0
   d5254:	d027      	beq.n	d52a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5256:	6971      	ldr	r1, [r6, #20]
   d5258:	4638      	mov	r0, r7
   d525a:	3104      	adds	r1, #4
   d525c:	f7ff fecd 	bl	d4ffa <_ZN9IPAddressaSEPKh>
   d5260:	e020      	b.n	d52a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5262:	f1b9 0f00 	cmp.w	r9, #0
   d5266:	d01e      	beq.n	d52a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5268:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d526a:	2211      	movs	r2, #17
   d526c:	a801      	add	r0, sp, #4
   d526e:	f001 f83c 	bl	d62ea <memset>
                    a.v = 6;
   d5272:	2306      	movs	r3, #6
   d5274:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5278:	ad01      	add	r5, sp, #4
   d527a:	f104 0308 	add.w	r3, r4, #8
   d527e:	3418      	adds	r4, #24
   d5280:	6818      	ldr	r0, [r3, #0]
   d5282:	6859      	ldr	r1, [r3, #4]
   d5284:	462a      	mov	r2, r5
   d5286:	c203      	stmia	r2!, {r0, r1}
   d5288:	3308      	adds	r3, #8
   d528a:	42a3      	cmp	r3, r4
   d528c:	4615      	mov	r5, r2
   d528e:	d1f7      	bne.n	d5280 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5290:	a901      	add	r1, sp, #4
   d5292:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5294:	ad07      	add	r5, sp, #28
   d5296:	f7ff fe91 	bl	d4fbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d529a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d529c:	1d3c      	adds	r4, r7, #4
   d529e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d52a0:	682b      	ldr	r3, [r5, #0]
   d52a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d52a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52a6:	69f6      	ldr	r6, [r6, #28]
   d52a8:	e7c8      	b.n	d523c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d52aa:	9800      	ldr	r0, [sp, #0]
   d52ac:	f7ff f95e 	bl	d456c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d52b0:	4638      	mov	r0, r7
   d52b2:	b015      	add	sp, #84	; 0x54
   d52b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d52b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d52b8:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d52ba:	4a03      	ldr	r2, [pc, #12]	; (d52c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d52bc:	601a      	str	r2, [r3, #0]
   d52be:	2200      	movs	r2, #0
   d52c0:	605a      	str	r2, [r3, #4]
   d52c2:	4770      	bx	lr
   d52c4:	2003e5ac 	.word	0x2003e5ac
   d52c8:	000d65dc 	.word	0x000d65dc

000d52cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d52cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52ce:	4606      	mov	r6, r0
   d52d0:	460d      	mov	r5, r1
   d52d2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d52d4:	2400      	movs	r4, #0
  while (size--) {
   d52d6:	42bd      	cmp	r5, r7
   d52d8:	d00c      	beq.n	d52f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d52da:	6833      	ldr	r3, [r6, #0]
   d52dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d52e0:	689b      	ldr	r3, [r3, #8]
   d52e2:	4630      	mov	r0, r6
   d52e4:	4798      	blx	r3
     if (chunk>=0)
   d52e6:	2800      	cmp	r0, #0
   d52e8:	db01      	blt.n	d52ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d52ea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d52ec:	e7f3      	b.n	d52d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d52ee:	2c00      	cmp	r4, #0
   d52f0:	bf08      	it	eq
   d52f2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d52f4:	4620      	mov	r0, r4
   d52f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d52f8:	b570      	push	{r4, r5, r6, lr}
   d52fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d52fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d52fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5300:	b149      	cbz	r1, d5316 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5302:	f001 f83e 	bl	d6382 <strlen>
   d5306:	682b      	ldr	r3, [r5, #0]
   d5308:	4602      	mov	r2, r0
   d530a:	4621      	mov	r1, r4
   d530c:	4628      	mov	r0, r5
   d530e:	68db      	ldr	r3, [r3, #12]
    }
   d5310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5314:	4718      	bx	r3
    }
   d5316:	bd70      	pop	{r4, r5, r6, pc}

000d5318 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5318:	6803      	ldr	r3, [r0, #0]
   d531a:	689b      	ldr	r3, [r3, #8]
   d531c:	4718      	bx	r3

000d531e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d531e:	b530      	push	{r4, r5, lr}
   d5320:	b08b      	sub	sp, #44	; 0x2c
   d5322:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5324:	2100      	movs	r1, #0
   d5326:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d532a:	2a01      	cmp	r2, #1
   d532c:	bf98      	it	ls
   d532e:	220a      	movls	r2, #10
   d5330:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5334:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5338:	fb05 3312 	mls	r3, r5, r2, r3
   d533c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5340:	2b09      	cmp	r3, #9
   d5342:	bf94      	ite	ls
   d5344:	3330      	addls	r3, #48	; 0x30
   d5346:	3337      	addhi	r3, #55	; 0x37
   d5348:	b2db      	uxtb	r3, r3
   d534a:	4621      	mov	r1, r4
   d534c:	f804 3901 	strb.w	r3, [r4], #-1
   d5350:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5352:	2d00      	cmp	r5, #0
   d5354:	d1ee      	bne.n	d5334 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5356:	f7ff ffcf 	bl	d52f8 <_ZN5Print5writeEPKc>
}
   d535a:	b00b      	add	sp, #44	; 0x2c
   d535c:	bd30      	pop	{r4, r5, pc}

000d535e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d535e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5360:	b92a      	cbnz	r2, d536e <_ZN5Print5printEmi+0x10>
   d5362:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5364:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5368:	689b      	ldr	r3, [r3, #8]
   d536a:	b2c9      	uxtb	r1, r1
   d536c:	4718      	bx	r3
  else return printNumber(n, base);
   d536e:	b2d2      	uxtb	r2, r2
}
   d5370:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5374:	f7ff bfd3 	b.w	d531e <_ZN5Print11printNumberEmh>

000d5378 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5378:	f7ff bff1 	b.w	d535e <_ZN5Print5printEmi>

000d537c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d537c:	b510      	push	{r4, lr}
   d537e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5380:	f7ff fa6d 	bl	d485e <_ZNSt14_Function_baseD1Ev>
   d5384:	4620      	mov	r0, r4
   d5386:	bd10      	pop	{r4, pc}

000d5388 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5388:	4803      	ldr	r0, [pc, #12]	; (d5398 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d538a:	4a04      	ldr	r2, [pc, #16]	; (d539c <_GLOBAL__sub_I_RGB+0x14>)
   d538c:	4904      	ldr	r1, [pc, #16]	; (d53a0 <_GLOBAL__sub_I_RGB+0x18>)
   d538e:	2300      	movs	r3, #0
   d5390:	6083      	str	r3, [r0, #8]
   d5392:	f000 ba25 	b.w	d57e0 <__aeabi_atexit>
   d5396:	bf00      	nop
   d5398:	2003e5b4 	.word	0x2003e5b4
   d539c:	2003e374 	.word	0x2003e374
   d53a0:	000d537d 	.word	0x000d537d

000d53a4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d53a4:	4770      	bx	lr

000d53a6 <_ZN8SPIClassD0Ev>:
   d53a6:	b510      	push	{r4, lr}
   d53a8:	2110      	movs	r1, #16
   d53aa:	4604      	mov	r4, r0
   d53ac:	f000 fa1d 	bl	d57ea <_ZdlPvj>
   d53b0:	4620      	mov	r0, r4
   d53b2:	bd10      	pop	{r4, pc}

000d53b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d53b4:	b570      	push	{r4, r5, r6, lr}
   d53b6:	4b08      	ldr	r3, [pc, #32]	; (d53d8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d53b8:	6003      	str	r3, [r0, #0]
   d53ba:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d53bc:	2500      	movs	r5, #0
   d53be:	460e      	mov	r6, r1
   d53c0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d53c4:	f7ff f852 	bl	d446c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d53c8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d53ca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d53cc:	f7ff f8de 	bl	d458c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d53d0:	60a5      	str	r5, [r4, #8]
}
   d53d2:	4620      	mov	r0, r4
   d53d4:	bd70      	pop	{r4, r5, r6, pc}
   d53d6:	bf00      	nop
   d53d8:	000d6610 	.word	0x000d6610

000d53dc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d53dc:	4b04      	ldr	r3, [pc, #16]	; (d53f0 <_GLOBAL__sub_I_System+0x14>)
   d53de:	2000      	movs	r0, #0
   d53e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d53e4:	7018      	strb	r0, [r3, #0]
   d53e6:	8058      	strh	r0, [r3, #2]
   d53e8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d53ea:	f7ff b93f 	b.w	d466c <set_system_mode>
   d53ee:	bf00      	nop
   d53f0:	2003e5c4 	.word	0x2003e5c4

000d53f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d53f4:	4b02      	ldr	r3, [pc, #8]	; (d5400 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d53f6:	681a      	ldr	r2, [r3, #0]
   d53f8:	4b02      	ldr	r3, [pc, #8]	; (d5404 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d53fa:	601a      	str	r2, [r3, #0]
   d53fc:	4770      	bx	lr
   d53fe:	bf00      	nop
   d5400:	2003e30c 	.word	0x2003e30c
   d5404:	2003e5cc 	.word	0x2003e5cc

000d5408 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5408:	4770      	bx	lr

000d540a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d540a:	7441      	strb	r1, [r0, #17]
   d540c:	4770      	bx	lr

000d540e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d540e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5410:	7c00      	ldrb	r0, [r0, #16]
   d5412:	f7ff f8f3 	bl	d45fc <HAL_USART_Available_Data_For_Write>
}
   d5416:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d541a:	bd08      	pop	{r3, pc}

000d541c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d541c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d541e:	7c00      	ldrb	r0, [r0, #16]
   d5420:	f7ff f8cc 	bl	d45bc <HAL_USART_Available_Data>
}
   d5424:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5428:	bd08      	pop	{r3, pc}

000d542a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d542a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d542c:	7c00      	ldrb	r0, [r0, #16]
   d542e:	f7ff f8d5 	bl	d45dc <HAL_USART_Peek_Data>
}
   d5432:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5436:	bf28      	it	cs
   d5438:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d543c:	bd08      	pop	{r3, pc}

000d543e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d543e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5440:	7c00      	ldrb	r0, [r0, #16]
   d5442:	f7ff f8c3 	bl	d45cc <HAL_USART_Read_Data>
}
   d5446:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d544a:	bf28      	it	cs
   d544c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5450:	bd08      	pop	{r3, pc}

000d5452 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5452:	7c00      	ldrb	r0, [r0, #16]
   d5454:	f7ff b8ca 	b.w	d45ec <HAL_USART_Flush_Data>

000d5458 <_ZN11USARTSerialD0Ev>:
   d5458:	b510      	push	{r4, lr}
   d545a:	2114      	movs	r1, #20
   d545c:	4604      	mov	r4, r0
   d545e:	f000 f9c4 	bl	d57ea <_ZdlPvj>
   d5462:	4620      	mov	r0, r4
   d5464:	bd10      	pop	{r4, pc}

000d5466 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5466:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5468:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d546a:	4604      	mov	r4, r0
   d546c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d546e:	b925      	cbnz	r5, d547a <_ZN11USARTSerial5writeEh+0x14>
   d5470:	7c00      	ldrb	r0, [r0, #16]
   d5472:	f7ff f8c3 	bl	d45fc <HAL_USART_Available_Data_For_Write>
   d5476:	2800      	cmp	r0, #0
   d5478:	dd05      	ble.n	d5486 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d547a:	4631      	mov	r1, r6
   d547c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d547e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5482:	f7ff b893 	b.w	d45ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d5486:	4628      	mov	r0, r5
   d5488:	bd70      	pop	{r4, r5, r6, pc}
	...

000d548c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d548c:	b510      	push	{r4, lr}
   d548e:	4604      	mov	r4, r0
   d5490:	4608      	mov	r0, r1
   d5492:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5494:	2200      	movs	r2, #0
   d5496:	6062      	str	r2, [r4, #4]
   d5498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d549c:	60a2      	str	r2, [r4, #8]
   d549e:	4a05      	ldr	r2, [pc, #20]	; (d54b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54a0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54a2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54a4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54a8:	461a      	mov	r2, r3
   d54aa:	f7ff f877 	bl	d459c <HAL_USART_Init>
}
   d54ae:	4620      	mov	r0, r4
   d54b0:	bd10      	pop	{r4, pc}
   d54b2:	bf00      	nop
   d54b4:	000d664c 	.word	0x000d664c

000d54b8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54b8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54ba:	4d0c      	ldr	r5, [pc, #48]	; (d54ec <_Z22__fetch_global_Serial1v+0x34>)
   d54bc:	6829      	ldr	r1, [r5, #0]
   d54be:	f011 0401 	ands.w	r4, r1, #1
   d54c2:	d111      	bne.n	d54e8 <_Z22__fetch_global_Serial1v+0x30>
   d54c4:	4628      	mov	r0, r5
   d54c6:	f7fe fdee 	bl	d40a6 <__cxa_guard_acquire>
   d54ca:	b168      	cbz	r0, d54e8 <_Z22__fetch_global_Serial1v+0x30>
   d54cc:	4a08      	ldr	r2, [pc, #32]	; (d54f0 <_Z22__fetch_global_Serial1v+0x38>)
   d54ce:	4b09      	ldr	r3, [pc, #36]	; (d54f4 <_Z22__fetch_global_Serial1v+0x3c>)
   d54d0:	4809      	ldr	r0, [pc, #36]	; (d54f8 <_Z22__fetch_global_Serial1v+0x40>)
   d54d2:	4621      	mov	r1, r4
   d54d4:	f7ff ffda 	bl	d548c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d54d8:	4628      	mov	r0, r5
   d54da:	f7fe fde9 	bl	d40b0 <__cxa_guard_release>
   d54de:	4a07      	ldr	r2, [pc, #28]	; (d54fc <_Z22__fetch_global_Serial1v+0x44>)
   d54e0:	4907      	ldr	r1, [pc, #28]	; (d5500 <_Z22__fetch_global_Serial1v+0x48>)
   d54e2:	4805      	ldr	r0, [pc, #20]	; (d54f8 <_Z22__fetch_global_Serial1v+0x40>)
   d54e4:	f000 f97c 	bl	d57e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54e8:	4803      	ldr	r0, [pc, #12]	; (d54f8 <_Z22__fetch_global_Serial1v+0x40>)
   d54ea:	bd38      	pop	{r3, r4, r5, pc}
   d54ec:	2003e668 	.word	0x2003e668
   d54f0:	2003e66c 	.word	0x2003e66c
   d54f4:	2003e5e4 	.word	0x2003e5e4
   d54f8:	2003e5d0 	.word	0x2003e5d0
   d54fc:	2003e374 	.word	0x2003e374
   d5500:	000d5409 	.word	0x000d5409

000d5504 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5504:	7441      	strb	r1, [r0, #17]
   d5506:	4770      	bx	lr

000d5508 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5508:	4770      	bx	lr

000d550a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d550a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d550c:	2100      	movs	r1, #0
   d550e:	7c00      	ldrb	r0, [r0, #16]
   d5510:	f7ff f894 	bl	d463c <HAL_USB_USART_Receive_Data>
}
   d5514:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5518:	bf28      	it	cs
   d551a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d551e:	bd08      	pop	{r3, pc}

000d5520 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5520:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5522:	2101      	movs	r1, #1
   d5524:	7c00      	ldrb	r0, [r0, #16]
   d5526:	f7ff f889 	bl	d463c <HAL_USB_USART_Receive_Data>
}
   d552a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d552e:	bf28      	it	cs
   d5530:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5534:	bd08      	pop	{r3, pc}

000d5536 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5536:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5538:	7c00      	ldrb	r0, [r0, #16]
   d553a:	f7ff f877 	bl	d462c <HAL_USB_USART_Available_Data_For_Write>
}
   d553e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5542:	bd08      	pop	{r3, pc}

000d5544 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5544:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5546:	7c00      	ldrb	r0, [r0, #16]
   d5548:	f7ff f868 	bl	d461c <HAL_USB_USART_Available_Data>
}
   d554c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5550:	bd08      	pop	{r3, pc}

000d5552 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5552:	7c00      	ldrb	r0, [r0, #16]
   d5554:	f7ff b882 	b.w	d465c <HAL_USB_USART_Flush_Data>

000d5558 <_ZN9USBSerialD0Ev>:
   d5558:	b510      	push	{r4, lr}
   d555a:	2114      	movs	r1, #20
   d555c:	4604      	mov	r4, r0
   d555e:	f000 f944 	bl	d57ea <_ZdlPvj>
   d5562:	4620      	mov	r0, r4
   d5564:	bd10      	pop	{r4, pc}

000d5566 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5566:	b538      	push	{r3, r4, r5, lr}
   d5568:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d556a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d556c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d556e:	f7ff f85d 	bl	d462c <HAL_USB_USART_Available_Data_For_Write>
   d5572:	2800      	cmp	r0, #0
   d5574:	dc01      	bgt.n	d557a <_ZN9USBSerial5writeEh+0x14>
   d5576:	7c60      	ldrb	r0, [r4, #17]
   d5578:	b128      	cbz	r0, d5586 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d557a:	4629      	mov	r1, r5
   d557c:	7c20      	ldrb	r0, [r4, #16]
   d557e:	f7ff f865 	bl	d464c <HAL_USB_USART_Send_Data>
   d5582:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5586:	bd38      	pop	{r3, r4, r5, pc}

000d5588 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5588:	b510      	push	{r4, lr}
   d558a:	4604      	mov	r4, r0
   d558c:	2300      	movs	r3, #0
   d558e:	6063      	str	r3, [r4, #4]
   d5590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5594:	60a3      	str	r3, [r4, #8]
   d5596:	4b05      	ldr	r3, [pc, #20]	; (d55ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5598:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d559a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d559c:	4608      	mov	r0, r1
{
  _serial = serial;
   d559e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d55a0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d55a2:	4611      	mov	r1, r2
   d55a4:	f7ff f832 	bl	d460c <HAL_USB_USART_Init>
}
   d55a8:	4620      	mov	r0, r4
   d55aa:	bd10      	pop	{r4, pc}
   d55ac:	000d667c 	.word	0x000d667c

000d55b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55b2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55b6:	2100      	movs	r1, #0
   d55b8:	f000 fe97 	bl	d62ea <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55bc:	4620      	mov	r0, r4
   d55be:	bd10      	pop	{r4, pc}

000d55c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55c2:	4d0e      	ldr	r5, [pc, #56]	; (d55fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d55c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55c6:	a801      	add	r0, sp, #4
   d55c8:	f7ff fff2 	bl	d55b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55cc:	6829      	ldr	r1, [r5, #0]
   d55ce:	f011 0401 	ands.w	r4, r1, #1
   d55d2:	d110      	bne.n	d55f6 <_Z16_fetch_usbserialv+0x36>
   d55d4:	4628      	mov	r0, r5
   d55d6:	f7fe fd66 	bl	d40a6 <__cxa_guard_acquire>
   d55da:	b160      	cbz	r0, d55f6 <_Z16_fetch_usbserialv+0x36>
   d55dc:	aa01      	add	r2, sp, #4
   d55de:	4621      	mov	r1, r4
   d55e0:	4807      	ldr	r0, [pc, #28]	; (d5600 <_Z16_fetch_usbserialv+0x40>)
   d55e2:	f7ff ffd1 	bl	d5588 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55e6:	4628      	mov	r0, r5
   d55e8:	f7fe fd62 	bl	d40b0 <__cxa_guard_release>
   d55ec:	4a05      	ldr	r2, [pc, #20]	; (d5604 <_Z16_fetch_usbserialv+0x44>)
   d55ee:	4906      	ldr	r1, [pc, #24]	; (d5608 <_Z16_fetch_usbserialv+0x48>)
   d55f0:	4803      	ldr	r0, [pc, #12]	; (d5600 <_Z16_fetch_usbserialv+0x40>)
   d55f2:	f000 f8f5 	bl	d57e0 <__aeabi_atexit>
	return _usbserial;
}
   d55f6:	4802      	ldr	r0, [pc, #8]	; (d5600 <_Z16_fetch_usbserialv+0x40>)
   d55f8:	b007      	add	sp, #28
   d55fa:	bd30      	pop	{r4, r5, pc}
   d55fc:	2003e6f0 	.word	0x2003e6f0
   d5600:	2003e6f4 	.word	0x2003e6f4
   d5604:	2003e374 	.word	0x2003e374
   d5608:	000d5509 	.word	0x000d5509

000d560c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d560c:	2200      	movs	r2, #0
   d560e:	4611      	mov	r1, r2
   d5610:	6840      	ldr	r0, [r0, #4]
   d5612:	f7ff b88f 	b.w	d4734 <network_ready>

000d5616 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5616:	2200      	movs	r2, #0
   d5618:	4611      	mov	r1, r2
   d561a:	6840      	ldr	r0, [r0, #4]
   d561c:	f7ff b8aa 	b.w	d4774 <network_listening>

000d5620 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5620:	2200      	movs	r2, #0
   d5622:	4611      	mov	r1, r2
   d5624:	6840      	ldr	r0, [r0, #4]
   d5626:	f7ff b8b5 	b.w	d4794 <network_get_listen_timeout>

000d562a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d562a:	2200      	movs	r2, #0
   d562c:	6840      	ldr	r0, [r0, #4]
   d562e:	f7ff b8a9 	b.w	d4784 <network_set_listen_timeout>

000d5632 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5632:	2200      	movs	r2, #0
   d5634:	f081 0101 	eor.w	r1, r1, #1
   d5638:	6840      	ldr	r0, [r0, #4]
   d563a:	f7ff b893 	b.w	d4764 <network_listen>

000d563e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d563e:	2300      	movs	r3, #0
   d5640:	461a      	mov	r2, r3
   d5642:	4619      	mov	r1, r3
   d5644:	6840      	ldr	r0, [r0, #4]
   d5646:	f7ff b885 	b.w	d4754 <network_off>

000d564a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d564a:	2300      	movs	r3, #0
   d564c:	461a      	mov	r2, r3
   d564e:	4619      	mov	r1, r3
   d5650:	6840      	ldr	r0, [r0, #4]
   d5652:	f7ff b877 	b.w	d4744 <network_on>

000d5656 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5656:	2200      	movs	r2, #0
   d5658:	4611      	mov	r1, r2
   d565a:	6840      	ldr	r0, [r0, #4]
   d565c:	f7ff b85a 	b.w	d4714 <network_connecting>

000d5660 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5660:	2200      	movs	r2, #0
   d5662:	2102      	movs	r1, #2
   d5664:	6840      	ldr	r0, [r0, #4]
   d5666:	f7ff b85d 	b.w	d4724 <network_disconnect>

000d566a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d566a:	2300      	movs	r3, #0
   d566c:	461a      	mov	r2, r3
   d566e:	6840      	ldr	r0, [r0, #4]
   d5670:	f7ff b848 	b.w	d4704 <network_connect>

000d5674 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5674:	4b02      	ldr	r3, [pc, #8]	; (d5680 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5676:	2204      	movs	r2, #4
   d5678:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d567a:	4a02      	ldr	r2, [pc, #8]	; (d5684 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d567c:	601a      	str	r2, [r3, #0]
   d567e:	4770      	bx	lr
   d5680:	2003e708 	.word	0x2003e708
   d5684:	000d66ac 	.word	0x000d66ac

000d5688 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5688:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d568a:	4b0c      	ldr	r3, [pc, #48]	; (d56bc <serialEventRun+0x34>)
   d568c:	b133      	cbz	r3, d569c <serialEventRun+0x14>
   d568e:	f7ff ff97 	bl	d55c0 <_Z16_fetch_usbserialv>
   d5692:	6803      	ldr	r3, [r0, #0]
   d5694:	691b      	ldr	r3, [r3, #16]
   d5696:	4798      	blx	r3
   d5698:	2800      	cmp	r0, #0
   d569a:	dc09      	bgt.n	d56b0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d569c:	4b08      	ldr	r3, [pc, #32]	; (d56c0 <serialEventRun+0x38>)
   d569e:	b163      	cbz	r3, d56ba <serialEventRun+0x32>
   d56a0:	f7ff ff0a 	bl	d54b8 <_Z22__fetch_global_Serial1v>
   d56a4:	6803      	ldr	r3, [r0, #0]
   d56a6:	691b      	ldr	r3, [r3, #16]
   d56a8:	4798      	blx	r3
   d56aa:	2800      	cmp	r0, #0
   d56ac:	dc03      	bgt.n	d56b6 <serialEventRun+0x2e>
   d56ae:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d56b0:	f3af 8000 	nop.w
   d56b4:	e7f2      	b.n	d569c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d56b6:	f3af 8000 	nop.w
   d56ba:	bd08      	pop	{r3, pc}
	...

000d56c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d56c4:	b508      	push	{r3, lr}
	serialEventRun();
   d56c6:	f7ff ffdf 	bl	d5688 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d56ca:	f7fe fee7 	bl	d449c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d56ce:	4b01      	ldr	r3, [pc, #4]	; (d56d4 <_post_loop+0x10>)
   d56d0:	6018      	str	r0, [r3, #0]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	2003e714 	.word	0x2003e714

000d56d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d56d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56da:	2300      	movs	r3, #0
   d56dc:	9300      	str	r3, [sp, #0]
   d56de:	461a      	mov	r2, r3
   d56e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56e4:	f7fe ffec 	bl	d46c0 <system_ctrl_set_result>
}
   d56e8:	b003      	add	sp, #12
   d56ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d56f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d56f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d56f2:	8843      	ldrh	r3, [r0, #2]
   d56f4:	2b0a      	cmp	r3, #10
   d56f6:	d008      	beq.n	d570a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d56f8:	2b50      	cmp	r3, #80	; 0x50
   d56fa:	d109      	bne.n	d5710 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d56fc:	4b09      	ldr	r3, [pc, #36]	; (d5724 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d56fe:	681b      	ldr	r3, [r3, #0]
   d5700:	b13b      	cbz	r3, d5712 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5702:	b003      	add	sp, #12
   d5704:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5708:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d570a:	f7ff ffe5 	bl	d56d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d570e:	e006      	b.n	d571e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5710:	2300      	movs	r3, #0
   d5712:	9300      	str	r3, [sp, #0]
   d5714:	461a      	mov	r2, r3
   d5716:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d571a:	f7fe ffd1 	bl	d46c0 <system_ctrl_set_result>
        break;
    }
}
   d571e:	b003      	add	sp, #12
   d5720:	f85d fb04 	ldr.w	pc, [sp], #4
   d5724:	2003e710 	.word	0x2003e710

000d5728 <module_user_init_hook>:

void module_user_init_hook()
{
   d5728:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d572a:	f7fe feaf 	bl	d448c <HAL_RNG_GetRandomNumber>
   d572e:	4604      	mov	r4, r0
    srand(seed);
   d5730:	f000 fde4 	bl	d62fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5734:	4b07      	ldr	r3, [pc, #28]	; (d5754 <module_user_init_hook+0x2c>)
   d5736:	b113      	cbz	r3, d573e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5738:	4620      	mov	r0, r4
   d573a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d573e:	2100      	movs	r1, #0
   d5740:	4804      	ldr	r0, [pc, #16]	; (d5754 <module_user_init_hook+0x2c>)
   d5742:	f7fe ffd7 	bl	d46f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5746:	2100      	movs	r1, #0
   d5748:	4803      	ldr	r0, [pc, #12]	; (d5758 <module_user_init_hook+0x30>)
}
   d574a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d574e:	f7fe bfad 	b.w	d46ac <system_ctrl_set_app_request_handler>
   d5752:	bf00      	nop
   d5754:	00000000 	.word	0x00000000
   d5758:	000d56f1 	.word	0x000d56f1

000d575c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d575c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d575e:	4d0b      	ldr	r5, [pc, #44]	; (d578c <_Z19__fetch_global_Wirev+0x30>)
   d5760:	6829      	ldr	r1, [r5, #0]
   d5762:	f011 0401 	ands.w	r4, r1, #1
   d5766:	d10f      	bne.n	d5788 <_Z19__fetch_global_Wirev+0x2c>
   d5768:	4628      	mov	r0, r5
   d576a:	f7fe fc9c 	bl	d40a6 <__cxa_guard_acquire>
   d576e:	b158      	cbz	r0, d5788 <_Z19__fetch_global_Wirev+0x2c>
   d5770:	4621      	mov	r1, r4
   d5772:	4807      	ldr	r0, [pc, #28]	; (d5790 <_Z19__fetch_global_Wirev+0x34>)
   d5774:	f7ff fbaa 	bl	d4ecc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5778:	4628      	mov	r0, r5
   d577a:	f7fe fc99 	bl	d40b0 <__cxa_guard_release>
   d577e:	4a05      	ldr	r2, [pc, #20]	; (d5794 <_Z19__fetch_global_Wirev+0x38>)
   d5780:	4905      	ldr	r1, [pc, #20]	; (d5798 <_Z19__fetch_global_Wirev+0x3c>)
   d5782:	4803      	ldr	r0, [pc, #12]	; (d5790 <_Z19__fetch_global_Wirev+0x34>)
   d5784:	f000 f82c 	bl	d57e0 <__aeabi_atexit>
	return wire;
}
   d5788:	4801      	ldr	r0, [pc, #4]	; (d5790 <_Z19__fetch_global_Wirev+0x34>)
   d578a:	bd38      	pop	{r3, r4, r5, pc}
   d578c:	2003e718 	.word	0x2003e718
   d5790:	2003e71c 	.word	0x2003e71c
   d5794:	2003e374 	.word	0x2003e374
   d5798:	000d4e75 	.word	0x000d4e75

000d579c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d579c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d579e:	4c0c      	ldr	r4, [pc, #48]	; (d57d0 <_GLOBAL__sub_I_SPI+0x34>)
   d57a0:	4e0c      	ldr	r6, [pc, #48]	; (d57d4 <_GLOBAL__sub_I_SPI+0x38>)
   d57a2:	4d0d      	ldr	r5, [pc, #52]	; (d57d8 <_GLOBAL__sub_I_SPI+0x3c>)
   d57a4:	2100      	movs	r1, #0
   d57a6:	4620      	mov	r0, r4
   d57a8:	f7ff fe04 	bl	d53b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d57ac:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d57ae:	4c0b      	ldr	r4, [pc, #44]	; (d57dc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d57b0:	4632      	mov	r2, r6
   d57b2:	4629      	mov	r1, r5
   d57b4:	f000 f814 	bl	d57e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d57b8:	2101      	movs	r1, #1
   d57ba:	4620      	mov	r0, r4
   d57bc:	f7ff fdfa 	bl	d53b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d57c0:	4632      	mov	r2, r6
   d57c2:	4629      	mov	r1, r5
   d57c4:	4620      	mov	r0, r4
   d57c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d57ca:	f000 b809 	b.w	d57e0 <__aeabi_atexit>
   d57ce:	bf00      	nop
   d57d0:	2003e730 	.word	0x2003e730
   d57d4:	2003e374 	.word	0x2003e374
   d57d8:	000d53a5 	.word	0x000d53a5
   d57dc:	2003e740 	.word	0x2003e740

000d57e0 <__aeabi_atexit>:
   d57e0:	460b      	mov	r3, r1
   d57e2:	4601      	mov	r1, r0
   d57e4:	4618      	mov	r0, r3
   d57e6:	f000 bd67 	b.w	d62b8 <__cxa_atexit>

000d57ea <_ZdlPvj>:
   d57ea:	f7fe bc58 	b.w	d409e <_ZdlPv>

000d57ee <_ZSt25__throw_bad_function_callv>:
   d57ee:	b508      	push	{r3, lr}
   d57f0:	f7fe fff0 	bl	d47d4 <abort>

000d57f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d57f4:	4b24      	ldr	r3, [pc, #144]	; (d5888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d57f6:	681a      	ldr	r2, [r3, #0]
   d57f8:	07d0      	lsls	r0, r2, #31
   d57fa:	bf5c      	itt	pl
   d57fc:	2201      	movpl	r2, #1
   d57fe:	601a      	strpl	r2, [r3, #0]
   d5800:	4b22      	ldr	r3, [pc, #136]	; (d588c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5802:	681a      	ldr	r2, [r3, #0]
   d5804:	07d1      	lsls	r1, r2, #31
   d5806:	bf5c      	itt	pl
   d5808:	2201      	movpl	r2, #1
   d580a:	601a      	strpl	r2, [r3, #0]
   d580c:	4b20      	ldr	r3, [pc, #128]	; (d5890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d580e:	681a      	ldr	r2, [r3, #0]
   d5810:	07d2      	lsls	r2, r2, #31
   d5812:	bf5c      	itt	pl
   d5814:	2201      	movpl	r2, #1
   d5816:	601a      	strpl	r2, [r3, #0]
   d5818:	4b1e      	ldr	r3, [pc, #120]	; (d5894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d581a:	681a      	ldr	r2, [r3, #0]
   d581c:	07d0      	lsls	r0, r2, #31
   d581e:	bf5c      	itt	pl
   d5820:	2201      	movpl	r2, #1
   d5822:	601a      	strpl	r2, [r3, #0]
   d5824:	4b1c      	ldr	r3, [pc, #112]	; (d5898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5826:	681a      	ldr	r2, [r3, #0]
   d5828:	07d1      	lsls	r1, r2, #31
   d582a:	bf5c      	itt	pl
   d582c:	2201      	movpl	r2, #1
   d582e:	601a      	strpl	r2, [r3, #0]
   d5830:	4b1a      	ldr	r3, [pc, #104]	; (d589c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5832:	681a      	ldr	r2, [r3, #0]
   d5834:	07d2      	lsls	r2, r2, #31
   d5836:	bf5c      	itt	pl
   d5838:	2201      	movpl	r2, #1
   d583a:	601a      	strpl	r2, [r3, #0]
   d583c:	4b18      	ldr	r3, [pc, #96]	; (d58a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d583e:	681a      	ldr	r2, [r3, #0]
   d5840:	07d0      	lsls	r0, r2, #31
   d5842:	bf5c      	itt	pl
   d5844:	2201      	movpl	r2, #1
   d5846:	601a      	strpl	r2, [r3, #0]
   d5848:	4b16      	ldr	r3, [pc, #88]	; (d58a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d584a:	681a      	ldr	r2, [r3, #0]
   d584c:	07d1      	lsls	r1, r2, #31
   d584e:	bf5c      	itt	pl
   d5850:	2201      	movpl	r2, #1
   d5852:	601a      	strpl	r2, [r3, #0]
   d5854:	4b14      	ldr	r3, [pc, #80]	; (d58a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5856:	681a      	ldr	r2, [r3, #0]
   d5858:	07d2      	lsls	r2, r2, #31
   d585a:	bf5c      	itt	pl
   d585c:	2201      	movpl	r2, #1
   d585e:	601a      	strpl	r2, [r3, #0]
   d5860:	4b12      	ldr	r3, [pc, #72]	; (d58ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5862:	681a      	ldr	r2, [r3, #0]
   d5864:	07d0      	lsls	r0, r2, #31
   d5866:	bf5c      	itt	pl
   d5868:	2201      	movpl	r2, #1
   d586a:	601a      	strpl	r2, [r3, #0]
   d586c:	4b10      	ldr	r3, [pc, #64]	; (d58b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d586e:	681a      	ldr	r2, [r3, #0]
   d5870:	07d1      	lsls	r1, r2, #31
   d5872:	bf5c      	itt	pl
   d5874:	2201      	movpl	r2, #1
   d5876:	601a      	strpl	r2, [r3, #0]
   d5878:	4b0e      	ldr	r3, [pc, #56]	; (d58b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d587a:	681a      	ldr	r2, [r3, #0]
   d587c:	07d2      	lsls	r2, r2, #31
   d587e:	bf5c      	itt	pl
   d5880:	2201      	movpl	r2, #1
   d5882:	601a      	strpl	r2, [r3, #0]
   d5884:	4770      	bx	lr
   d5886:	bf00      	nop
   d5888:	2003e77c 	.word	0x2003e77c
   d588c:	2003e778 	.word	0x2003e778
   d5890:	2003e774 	.word	0x2003e774
   d5894:	2003e770 	.word	0x2003e770
   d5898:	2003e76c 	.word	0x2003e76c
   d589c:	2003e768 	.word	0x2003e768
   d58a0:	2003e764 	.word	0x2003e764
   d58a4:	2003e760 	.word	0x2003e760
   d58a8:	2003e75c 	.word	0x2003e75c
   d58ac:	2003e758 	.word	0x2003e758
   d58b0:	2003e754 	.word	0x2003e754
   d58b4:	2003e750 	.word	0x2003e750

000d58b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d58b8:	4b18      	ldr	r3, [pc, #96]	; (d591c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d58ba:	681a      	ldr	r2, [r3, #0]
   d58bc:	07d1      	lsls	r1, r2, #31
   d58be:	bf5c      	itt	pl
   d58c0:	2201      	movpl	r2, #1
   d58c2:	601a      	strpl	r2, [r3, #0]
   d58c4:	4b16      	ldr	r3, [pc, #88]	; (d5920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d58c6:	681a      	ldr	r2, [r3, #0]
   d58c8:	07d2      	lsls	r2, r2, #31
   d58ca:	bf5c      	itt	pl
   d58cc:	2201      	movpl	r2, #1
   d58ce:	601a      	strpl	r2, [r3, #0]
   d58d0:	4b14      	ldr	r3, [pc, #80]	; (d5924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d58d2:	681a      	ldr	r2, [r3, #0]
   d58d4:	07d0      	lsls	r0, r2, #31
   d58d6:	bf5c      	itt	pl
   d58d8:	2201      	movpl	r2, #1
   d58da:	601a      	strpl	r2, [r3, #0]
   d58dc:	4b12      	ldr	r3, [pc, #72]	; (d5928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d58de:	681a      	ldr	r2, [r3, #0]
   d58e0:	07d1      	lsls	r1, r2, #31
   d58e2:	bf5c      	itt	pl
   d58e4:	2201      	movpl	r2, #1
   d58e6:	601a      	strpl	r2, [r3, #0]
   d58e8:	4b10      	ldr	r3, [pc, #64]	; (d592c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d58ea:	681a      	ldr	r2, [r3, #0]
   d58ec:	07d2      	lsls	r2, r2, #31
   d58ee:	bf5c      	itt	pl
   d58f0:	2201      	movpl	r2, #1
   d58f2:	601a      	strpl	r2, [r3, #0]
   d58f4:	4b0e      	ldr	r3, [pc, #56]	; (d5930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d58f6:	681a      	ldr	r2, [r3, #0]
   d58f8:	07d0      	lsls	r0, r2, #31
   d58fa:	bf5c      	itt	pl
   d58fc:	2201      	movpl	r2, #1
   d58fe:	601a      	strpl	r2, [r3, #0]
   d5900:	4b0c      	ldr	r3, [pc, #48]	; (d5934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5902:	681a      	ldr	r2, [r3, #0]
   d5904:	07d1      	lsls	r1, r2, #31
   d5906:	bf5c      	itt	pl
   d5908:	2201      	movpl	r2, #1
   d590a:	601a      	strpl	r2, [r3, #0]
   d590c:	4b0a      	ldr	r3, [pc, #40]	; (d5938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d590e:	681a      	ldr	r2, [r3, #0]
   d5910:	07d2      	lsls	r2, r2, #31
   d5912:	bf5c      	itt	pl
   d5914:	2201      	movpl	r2, #1
   d5916:	601a      	strpl	r2, [r3, #0]
   d5918:	4770      	bx	lr
   d591a:	bf00      	nop
   d591c:	2003e79c 	.word	0x2003e79c
   d5920:	2003e798 	.word	0x2003e798
   d5924:	2003e794 	.word	0x2003e794
   d5928:	2003e790 	.word	0x2003e790
   d592c:	2003e78c 	.word	0x2003e78c
   d5930:	2003e788 	.word	0x2003e788
   d5934:	2003e784 	.word	0x2003e784
   d5938:	2003e780 	.word	0x2003e780

000d593c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d593c:	4b18      	ldr	r3, [pc, #96]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d593e:	681a      	ldr	r2, [r3, #0]
   d5940:	07d1      	lsls	r1, r2, #31
   d5942:	bf5c      	itt	pl
   d5944:	2201      	movpl	r2, #1
   d5946:	601a      	strpl	r2, [r3, #0]
   d5948:	4b16      	ldr	r3, [pc, #88]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d594a:	681a      	ldr	r2, [r3, #0]
   d594c:	07d2      	lsls	r2, r2, #31
   d594e:	bf5c      	itt	pl
   d5950:	2201      	movpl	r2, #1
   d5952:	601a      	strpl	r2, [r3, #0]
   d5954:	4b14      	ldr	r3, [pc, #80]	; (d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5956:	681a      	ldr	r2, [r3, #0]
   d5958:	07d0      	lsls	r0, r2, #31
   d595a:	bf5c      	itt	pl
   d595c:	2201      	movpl	r2, #1
   d595e:	601a      	strpl	r2, [r3, #0]
   d5960:	4b12      	ldr	r3, [pc, #72]	; (d59ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5962:	681a      	ldr	r2, [r3, #0]
   d5964:	07d1      	lsls	r1, r2, #31
   d5966:	bf5c      	itt	pl
   d5968:	2201      	movpl	r2, #1
   d596a:	601a      	strpl	r2, [r3, #0]
   d596c:	4b10      	ldr	r3, [pc, #64]	; (d59b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d596e:	681a      	ldr	r2, [r3, #0]
   d5970:	07d2      	lsls	r2, r2, #31
   d5972:	bf5c      	itt	pl
   d5974:	2201      	movpl	r2, #1
   d5976:	601a      	strpl	r2, [r3, #0]
   d5978:	4b0e      	ldr	r3, [pc, #56]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d597a:	681a      	ldr	r2, [r3, #0]
   d597c:	07d0      	lsls	r0, r2, #31
   d597e:	bf5c      	itt	pl
   d5980:	2201      	movpl	r2, #1
   d5982:	601a      	strpl	r2, [r3, #0]
   d5984:	4b0c      	ldr	r3, [pc, #48]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5986:	681a      	ldr	r2, [r3, #0]
   d5988:	07d1      	lsls	r1, r2, #31
   d598a:	bf5c      	itt	pl
   d598c:	2201      	movpl	r2, #1
   d598e:	601a      	strpl	r2, [r3, #0]
   d5990:	4b0a      	ldr	r3, [pc, #40]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5992:	681a      	ldr	r2, [r3, #0]
   d5994:	07d2      	lsls	r2, r2, #31
   d5996:	bf5c      	itt	pl
   d5998:	2201      	movpl	r2, #1
   d599a:	601a      	strpl	r2, [r3, #0]
   d599c:	4770      	bx	lr
   d599e:	bf00      	nop
   d59a0:	2003e7bc 	.word	0x2003e7bc
   d59a4:	2003e7b8 	.word	0x2003e7b8
   d59a8:	2003e7b4 	.word	0x2003e7b4
   d59ac:	2003e7b0 	.word	0x2003e7b0
   d59b0:	2003e7ac 	.word	0x2003e7ac
   d59b4:	2003e7a8 	.word	0x2003e7a8
   d59b8:	2003e7a4 	.word	0x2003e7a4
   d59bc:	2003e7a0 	.word	0x2003e7a0

000d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d59c0:	4b24      	ldr	r3, [pc, #144]	; (d5a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d0      	lsls	r0, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b22      	ldr	r3, [pc, #136]	; (d5a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d1      	lsls	r1, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b20      	ldr	r3, [pc, #128]	; (d5a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d2      	lsls	r2, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b1e      	ldr	r3, [pc, #120]	; (d5a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d0      	lsls	r0, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b1c      	ldr	r3, [pc, #112]	; (d5a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d1      	lsls	r1, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b1a      	ldr	r3, [pc, #104]	; (d5a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d2      	lsls	r2, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4b18      	ldr	r3, [pc, #96]	; (d5a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a0a:	681a      	ldr	r2, [r3, #0]
   d5a0c:	07d0      	lsls	r0, r2, #31
   d5a0e:	bf5c      	itt	pl
   d5a10:	2201      	movpl	r2, #1
   d5a12:	601a      	strpl	r2, [r3, #0]
   d5a14:	4b16      	ldr	r3, [pc, #88]	; (d5a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5a16:	681a      	ldr	r2, [r3, #0]
   d5a18:	07d1      	lsls	r1, r2, #31
   d5a1a:	bf5c      	itt	pl
   d5a1c:	2201      	movpl	r2, #1
   d5a1e:	601a      	strpl	r2, [r3, #0]
   d5a20:	4b14      	ldr	r3, [pc, #80]	; (d5a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5a22:	681a      	ldr	r2, [r3, #0]
   d5a24:	07d2      	lsls	r2, r2, #31
   d5a26:	bf5c      	itt	pl
   d5a28:	2201      	movpl	r2, #1
   d5a2a:	601a      	strpl	r2, [r3, #0]
   d5a2c:	4b12      	ldr	r3, [pc, #72]	; (d5a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5a2e:	681a      	ldr	r2, [r3, #0]
   d5a30:	07d0      	lsls	r0, r2, #31
   d5a32:	bf5c      	itt	pl
   d5a34:	2201      	movpl	r2, #1
   d5a36:	601a      	strpl	r2, [r3, #0]
   d5a38:	4b10      	ldr	r3, [pc, #64]	; (d5a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5a3a:	681a      	ldr	r2, [r3, #0]
   d5a3c:	07d1      	lsls	r1, r2, #31
   d5a3e:	bf5c      	itt	pl
   d5a40:	2201      	movpl	r2, #1
   d5a42:	601a      	strpl	r2, [r3, #0]
   d5a44:	4b0e      	ldr	r3, [pc, #56]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d2      	lsls	r2, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4770      	bx	lr
   d5a52:	bf00      	nop
   d5a54:	2003e7ec 	.word	0x2003e7ec
   d5a58:	2003e7e8 	.word	0x2003e7e8
   d5a5c:	2003e7e4 	.word	0x2003e7e4
   d5a60:	2003e7e0 	.word	0x2003e7e0
   d5a64:	2003e7dc 	.word	0x2003e7dc
   d5a68:	2003e7d8 	.word	0x2003e7d8
   d5a6c:	2003e7d4 	.word	0x2003e7d4
   d5a70:	2003e7d0 	.word	0x2003e7d0
   d5a74:	2003e7cc 	.word	0x2003e7cc
   d5a78:	2003e7c8 	.word	0x2003e7c8
   d5a7c:	2003e7c4 	.word	0x2003e7c4
   d5a80:	2003e7c0 	.word	0x2003e7c0

000d5a84 <__aeabi_drsub>:
   d5a84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5a88:	e002      	b.n	d5a90 <__adddf3>
   d5a8a:	bf00      	nop

000d5a8c <__aeabi_dsub>:
   d5a8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5a90 <__adddf3>:
   d5a90:	b530      	push	{r4, r5, lr}
   d5a92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5a96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5a9a:	ea94 0f05 	teq	r4, r5
   d5a9e:	bf08      	it	eq
   d5aa0:	ea90 0f02 	teqeq	r0, r2
   d5aa4:	bf1f      	itttt	ne
   d5aa6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5aaa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5aae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5ab2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ab6:	f000 80e2 	beq.w	d5c7e <__adddf3+0x1ee>
   d5aba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5abe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5ac2:	bfb8      	it	lt
   d5ac4:	426d      	neglt	r5, r5
   d5ac6:	dd0c      	ble.n	d5ae2 <__adddf3+0x52>
   d5ac8:	442c      	add	r4, r5
   d5aca:	ea80 0202 	eor.w	r2, r0, r2
   d5ace:	ea81 0303 	eor.w	r3, r1, r3
   d5ad2:	ea82 0000 	eor.w	r0, r2, r0
   d5ad6:	ea83 0101 	eor.w	r1, r3, r1
   d5ada:	ea80 0202 	eor.w	r2, r0, r2
   d5ade:	ea81 0303 	eor.w	r3, r1, r3
   d5ae2:	2d36      	cmp	r5, #54	; 0x36
   d5ae4:	bf88      	it	hi
   d5ae6:	bd30      	pophi	{r4, r5, pc}
   d5ae8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5aec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5af0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5af4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5af8:	d002      	beq.n	d5b00 <__adddf3+0x70>
   d5afa:	4240      	negs	r0, r0
   d5afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5b04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5b08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5b0c:	d002      	beq.n	d5b14 <__adddf3+0x84>
   d5b0e:	4252      	negs	r2, r2
   d5b10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5b14:	ea94 0f05 	teq	r4, r5
   d5b18:	f000 80a7 	beq.w	d5c6a <__adddf3+0x1da>
   d5b1c:	f1a4 0401 	sub.w	r4, r4, #1
   d5b20:	f1d5 0e20 	rsbs	lr, r5, #32
   d5b24:	db0d      	blt.n	d5b42 <__adddf3+0xb2>
   d5b26:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5b2a:	fa22 f205 	lsr.w	r2, r2, r5
   d5b2e:	1880      	adds	r0, r0, r2
   d5b30:	f141 0100 	adc.w	r1, r1, #0
   d5b34:	fa03 f20e 	lsl.w	r2, r3, lr
   d5b38:	1880      	adds	r0, r0, r2
   d5b3a:	fa43 f305 	asr.w	r3, r3, r5
   d5b3e:	4159      	adcs	r1, r3
   d5b40:	e00e      	b.n	d5b60 <__adddf3+0xd0>
   d5b42:	f1a5 0520 	sub.w	r5, r5, #32
   d5b46:	f10e 0e20 	add.w	lr, lr, #32
   d5b4a:	2a01      	cmp	r2, #1
   d5b4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5b50:	bf28      	it	cs
   d5b52:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5b56:	fa43 f305 	asr.w	r3, r3, r5
   d5b5a:	18c0      	adds	r0, r0, r3
   d5b5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5b60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b64:	d507      	bpl.n	d5b76 <__adddf3+0xe6>
   d5b66:	f04f 0e00 	mov.w	lr, #0
   d5b6a:	f1dc 0c00 	rsbs	ip, ip, #0
   d5b6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5b72:	eb6e 0101 	sbc.w	r1, lr, r1
   d5b76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5b7a:	d31b      	bcc.n	d5bb4 <__adddf3+0x124>
   d5b7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5b80:	d30c      	bcc.n	d5b9c <__adddf3+0x10c>
   d5b82:	0849      	lsrs	r1, r1, #1
   d5b84:	ea5f 0030 	movs.w	r0, r0, rrx
   d5b88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5b8c:	f104 0401 	add.w	r4, r4, #1
   d5b90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5b94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5b98:	f080 809a 	bcs.w	d5cd0 <__adddf3+0x240>
   d5b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5ba0:	bf08      	it	eq
   d5ba2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5ba6:	f150 0000 	adcs.w	r0, r0, #0
   d5baa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5bae:	ea41 0105 	orr.w	r1, r1, r5
   d5bb2:	bd30      	pop	{r4, r5, pc}
   d5bb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5bb8:	4140      	adcs	r0, r0
   d5bba:	eb41 0101 	adc.w	r1, r1, r1
   d5bbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5bc2:	f1a4 0401 	sub.w	r4, r4, #1
   d5bc6:	d1e9      	bne.n	d5b9c <__adddf3+0x10c>
   d5bc8:	f091 0f00 	teq	r1, #0
   d5bcc:	bf04      	itt	eq
   d5bce:	4601      	moveq	r1, r0
   d5bd0:	2000      	moveq	r0, #0
   d5bd2:	fab1 f381 	clz	r3, r1
   d5bd6:	bf08      	it	eq
   d5bd8:	3320      	addeq	r3, #32
   d5bda:	f1a3 030b 	sub.w	r3, r3, #11
   d5bde:	f1b3 0220 	subs.w	r2, r3, #32
   d5be2:	da0c      	bge.n	d5bfe <__adddf3+0x16e>
   d5be4:	320c      	adds	r2, #12
   d5be6:	dd08      	ble.n	d5bfa <__adddf3+0x16a>
   d5be8:	f102 0c14 	add.w	ip, r2, #20
   d5bec:	f1c2 020c 	rsb	r2, r2, #12
   d5bf0:	fa01 f00c 	lsl.w	r0, r1, ip
   d5bf4:	fa21 f102 	lsr.w	r1, r1, r2
   d5bf8:	e00c      	b.n	d5c14 <__adddf3+0x184>
   d5bfa:	f102 0214 	add.w	r2, r2, #20
   d5bfe:	bfd8      	it	le
   d5c00:	f1c2 0c20 	rsble	ip, r2, #32
   d5c04:	fa01 f102 	lsl.w	r1, r1, r2
   d5c08:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5c0c:	bfdc      	itt	le
   d5c0e:	ea41 010c 	orrle.w	r1, r1, ip
   d5c12:	4090      	lslle	r0, r2
   d5c14:	1ae4      	subs	r4, r4, r3
   d5c16:	bfa2      	ittt	ge
   d5c18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5c1c:	4329      	orrge	r1, r5
   d5c1e:	bd30      	popge	{r4, r5, pc}
   d5c20:	ea6f 0404 	mvn.w	r4, r4
   d5c24:	3c1f      	subs	r4, #31
   d5c26:	da1c      	bge.n	d5c62 <__adddf3+0x1d2>
   d5c28:	340c      	adds	r4, #12
   d5c2a:	dc0e      	bgt.n	d5c4a <__adddf3+0x1ba>
   d5c2c:	f104 0414 	add.w	r4, r4, #20
   d5c30:	f1c4 0220 	rsb	r2, r4, #32
   d5c34:	fa20 f004 	lsr.w	r0, r0, r4
   d5c38:	fa01 f302 	lsl.w	r3, r1, r2
   d5c3c:	ea40 0003 	orr.w	r0, r0, r3
   d5c40:	fa21 f304 	lsr.w	r3, r1, r4
   d5c44:	ea45 0103 	orr.w	r1, r5, r3
   d5c48:	bd30      	pop	{r4, r5, pc}
   d5c4a:	f1c4 040c 	rsb	r4, r4, #12
   d5c4e:	f1c4 0220 	rsb	r2, r4, #32
   d5c52:	fa20 f002 	lsr.w	r0, r0, r2
   d5c56:	fa01 f304 	lsl.w	r3, r1, r4
   d5c5a:	ea40 0003 	orr.w	r0, r0, r3
   d5c5e:	4629      	mov	r1, r5
   d5c60:	bd30      	pop	{r4, r5, pc}
   d5c62:	fa21 f004 	lsr.w	r0, r1, r4
   d5c66:	4629      	mov	r1, r5
   d5c68:	bd30      	pop	{r4, r5, pc}
   d5c6a:	f094 0f00 	teq	r4, #0
   d5c6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5c72:	bf06      	itte	eq
   d5c74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5c78:	3401      	addeq	r4, #1
   d5c7a:	3d01      	subne	r5, #1
   d5c7c:	e74e      	b.n	d5b1c <__adddf3+0x8c>
   d5c7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5c82:	bf18      	it	ne
   d5c84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5c88:	d029      	beq.n	d5cde <__adddf3+0x24e>
   d5c8a:	ea94 0f05 	teq	r4, r5
   d5c8e:	bf08      	it	eq
   d5c90:	ea90 0f02 	teqeq	r0, r2
   d5c94:	d005      	beq.n	d5ca2 <__adddf3+0x212>
   d5c96:	ea54 0c00 	orrs.w	ip, r4, r0
   d5c9a:	bf04      	itt	eq
   d5c9c:	4619      	moveq	r1, r3
   d5c9e:	4610      	moveq	r0, r2
   d5ca0:	bd30      	pop	{r4, r5, pc}
   d5ca2:	ea91 0f03 	teq	r1, r3
   d5ca6:	bf1e      	ittt	ne
   d5ca8:	2100      	movne	r1, #0
   d5caa:	2000      	movne	r0, #0
   d5cac:	bd30      	popne	{r4, r5, pc}
   d5cae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5cb2:	d105      	bne.n	d5cc0 <__adddf3+0x230>
   d5cb4:	0040      	lsls	r0, r0, #1
   d5cb6:	4149      	adcs	r1, r1
   d5cb8:	bf28      	it	cs
   d5cba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5cbe:	bd30      	pop	{r4, r5, pc}
   d5cc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5cc4:	bf3c      	itt	cc
   d5cc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5cca:	bd30      	popcc	{r4, r5, pc}
   d5ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5cd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5cd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5cd8:	f04f 0000 	mov.w	r0, #0
   d5cdc:	bd30      	pop	{r4, r5, pc}
   d5cde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5ce2:	bf1a      	itte	ne
   d5ce4:	4619      	movne	r1, r3
   d5ce6:	4610      	movne	r0, r2
   d5ce8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5cec:	bf1c      	itt	ne
   d5cee:	460b      	movne	r3, r1
   d5cf0:	4602      	movne	r2, r0
   d5cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5cf6:	bf06      	itte	eq
   d5cf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5cfc:	ea91 0f03 	teqeq	r1, r3
   d5d00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5d04:	bd30      	pop	{r4, r5, pc}
   d5d06:	bf00      	nop

000d5d08 <__aeabi_ui2d>:
   d5d08:	f090 0f00 	teq	r0, #0
   d5d0c:	bf04      	itt	eq
   d5d0e:	2100      	moveq	r1, #0
   d5d10:	4770      	bxeq	lr
   d5d12:	b530      	push	{r4, r5, lr}
   d5d14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5d18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5d1c:	f04f 0500 	mov.w	r5, #0
   d5d20:	f04f 0100 	mov.w	r1, #0
   d5d24:	e750      	b.n	d5bc8 <__adddf3+0x138>
   d5d26:	bf00      	nop

000d5d28 <__aeabi_i2d>:
   d5d28:	f090 0f00 	teq	r0, #0
   d5d2c:	bf04      	itt	eq
   d5d2e:	2100      	moveq	r1, #0
   d5d30:	4770      	bxeq	lr
   d5d32:	b530      	push	{r4, r5, lr}
   d5d34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5d38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5d3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5d40:	bf48      	it	mi
   d5d42:	4240      	negmi	r0, r0
   d5d44:	f04f 0100 	mov.w	r1, #0
   d5d48:	e73e      	b.n	d5bc8 <__adddf3+0x138>
   d5d4a:	bf00      	nop

000d5d4c <__aeabi_f2d>:
   d5d4c:	0042      	lsls	r2, r0, #1
   d5d4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5d52:	ea4f 0131 	mov.w	r1, r1, rrx
   d5d56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5d5a:	bf1f      	itttt	ne
   d5d5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5d60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5d64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5d68:	4770      	bxne	lr
   d5d6a:	f092 0f00 	teq	r2, #0
   d5d6e:	bf14      	ite	ne
   d5d70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5d74:	4770      	bxeq	lr
   d5d76:	b530      	push	{r4, r5, lr}
   d5d78:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5d7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5d84:	e720      	b.n	d5bc8 <__adddf3+0x138>
   d5d86:	bf00      	nop

000d5d88 <__aeabi_ul2d>:
   d5d88:	ea50 0201 	orrs.w	r2, r0, r1
   d5d8c:	bf08      	it	eq
   d5d8e:	4770      	bxeq	lr
   d5d90:	b530      	push	{r4, r5, lr}
   d5d92:	f04f 0500 	mov.w	r5, #0
   d5d96:	e00a      	b.n	d5dae <__aeabi_l2d+0x16>

000d5d98 <__aeabi_l2d>:
   d5d98:	ea50 0201 	orrs.w	r2, r0, r1
   d5d9c:	bf08      	it	eq
   d5d9e:	4770      	bxeq	lr
   d5da0:	b530      	push	{r4, r5, lr}
   d5da2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5da6:	d502      	bpl.n	d5dae <__aeabi_l2d+0x16>
   d5da8:	4240      	negs	r0, r0
   d5daa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5dae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5db2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5db6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5dba:	f43f aedc 	beq.w	d5b76 <__adddf3+0xe6>
   d5dbe:	f04f 0203 	mov.w	r2, #3
   d5dc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5dc6:	bf18      	it	ne
   d5dc8:	3203      	addne	r2, #3
   d5dca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5dce:	bf18      	it	ne
   d5dd0:	3203      	addne	r2, #3
   d5dd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5dd6:	f1c2 0320 	rsb	r3, r2, #32
   d5dda:	fa00 fc03 	lsl.w	ip, r0, r3
   d5dde:	fa20 f002 	lsr.w	r0, r0, r2
   d5de2:	fa01 fe03 	lsl.w	lr, r1, r3
   d5de6:	ea40 000e 	orr.w	r0, r0, lr
   d5dea:	fa21 f102 	lsr.w	r1, r1, r2
   d5dee:	4414      	add	r4, r2
   d5df0:	e6c1      	b.n	d5b76 <__adddf3+0xe6>
   d5df2:	bf00      	nop

000d5df4 <__aeabi_dmul>:
   d5df4:	b570      	push	{r4, r5, r6, lr}
   d5df6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5dfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5dfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5e02:	bf1d      	ittte	ne
   d5e04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5e08:	ea94 0f0c 	teqne	r4, ip
   d5e0c:	ea95 0f0c 	teqne	r5, ip
   d5e10:	f000 f8de 	bleq	d5fd0 <__aeabi_dmul+0x1dc>
   d5e14:	442c      	add	r4, r5
   d5e16:	ea81 0603 	eor.w	r6, r1, r3
   d5e1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5e1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5e22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5e26:	bf18      	it	ne
   d5e28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5e2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5e34:	d038      	beq.n	d5ea8 <__aeabi_dmul+0xb4>
   d5e36:	fba0 ce02 	umull	ip, lr, r0, r2
   d5e3a:	f04f 0500 	mov.w	r5, #0
   d5e3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5e42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5e46:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5e4a:	f04f 0600 	mov.w	r6, #0
   d5e4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5e52:	f09c 0f00 	teq	ip, #0
   d5e56:	bf18      	it	ne
   d5e58:	f04e 0e01 	orrne.w	lr, lr, #1
   d5e5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5e60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5e64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5e68:	d204      	bcs.n	d5e74 <__aeabi_dmul+0x80>
   d5e6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5e6e:	416d      	adcs	r5, r5
   d5e70:	eb46 0606 	adc.w	r6, r6, r6
   d5e74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5e78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5e7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5e80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5e84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5e88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5e8c:	bf88      	it	hi
   d5e8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e92:	d81e      	bhi.n	d5ed2 <__aeabi_dmul+0xde>
   d5e94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5e98:	bf08      	it	eq
   d5e9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5e9e:	f150 0000 	adcs.w	r0, r0, #0
   d5ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ea6:	bd70      	pop	{r4, r5, r6, pc}
   d5ea8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5eac:	ea46 0101 	orr.w	r1, r6, r1
   d5eb0:	ea40 0002 	orr.w	r0, r0, r2
   d5eb4:	ea81 0103 	eor.w	r1, r1, r3
   d5eb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5ebc:	bfc2      	ittt	gt
   d5ebe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5ec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5ec6:	bd70      	popgt	{r4, r5, r6, pc}
   d5ec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ecc:	f04f 0e00 	mov.w	lr, #0
   d5ed0:	3c01      	subs	r4, #1
   d5ed2:	f300 80ab 	bgt.w	d602c <__aeabi_dmul+0x238>
   d5ed6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5eda:	bfde      	ittt	le
   d5edc:	2000      	movle	r0, #0
   d5ede:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5ee2:	bd70      	pople	{r4, r5, r6, pc}
   d5ee4:	f1c4 0400 	rsb	r4, r4, #0
   d5ee8:	3c20      	subs	r4, #32
   d5eea:	da35      	bge.n	d5f58 <__aeabi_dmul+0x164>
   d5eec:	340c      	adds	r4, #12
   d5eee:	dc1b      	bgt.n	d5f28 <__aeabi_dmul+0x134>
   d5ef0:	f104 0414 	add.w	r4, r4, #20
   d5ef4:	f1c4 0520 	rsb	r5, r4, #32
   d5ef8:	fa00 f305 	lsl.w	r3, r0, r5
   d5efc:	fa20 f004 	lsr.w	r0, r0, r4
   d5f00:	fa01 f205 	lsl.w	r2, r1, r5
   d5f04:	ea40 0002 	orr.w	r0, r0, r2
   d5f08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5f0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5f14:	fa21 f604 	lsr.w	r6, r1, r4
   d5f18:	eb42 0106 	adc.w	r1, r2, r6
   d5f1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f20:	bf08      	it	eq
   d5f22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5f26:	bd70      	pop	{r4, r5, r6, pc}
   d5f28:	f1c4 040c 	rsb	r4, r4, #12
   d5f2c:	f1c4 0520 	rsb	r5, r4, #32
   d5f30:	fa00 f304 	lsl.w	r3, r0, r4
   d5f34:	fa20 f005 	lsr.w	r0, r0, r5
   d5f38:	fa01 f204 	lsl.w	r2, r1, r4
   d5f3c:	ea40 0002 	orr.w	r0, r0, r2
   d5f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5f44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5f48:	f141 0100 	adc.w	r1, r1, #0
   d5f4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f50:	bf08      	it	eq
   d5f52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5f56:	bd70      	pop	{r4, r5, r6, pc}
   d5f58:	f1c4 0520 	rsb	r5, r4, #32
   d5f5c:	fa00 f205 	lsl.w	r2, r0, r5
   d5f60:	ea4e 0e02 	orr.w	lr, lr, r2
   d5f64:	fa20 f304 	lsr.w	r3, r0, r4
   d5f68:	fa01 f205 	lsl.w	r2, r1, r5
   d5f6c:	ea43 0302 	orr.w	r3, r3, r2
   d5f70:	fa21 f004 	lsr.w	r0, r1, r4
   d5f74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5f78:	fa21 f204 	lsr.w	r2, r1, r4
   d5f7c:	ea20 0002 	bic.w	r0, r0, r2
   d5f80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5f84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f88:	bf08      	it	eq
   d5f8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5f8e:	bd70      	pop	{r4, r5, r6, pc}
   d5f90:	f094 0f00 	teq	r4, #0
   d5f94:	d10f      	bne.n	d5fb6 <__aeabi_dmul+0x1c2>
   d5f96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5f9a:	0040      	lsls	r0, r0, #1
   d5f9c:	eb41 0101 	adc.w	r1, r1, r1
   d5fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fa4:	bf08      	it	eq
   d5fa6:	3c01      	subeq	r4, #1
   d5fa8:	d0f7      	beq.n	d5f9a <__aeabi_dmul+0x1a6>
   d5faa:	ea41 0106 	orr.w	r1, r1, r6
   d5fae:	f095 0f00 	teq	r5, #0
   d5fb2:	bf18      	it	ne
   d5fb4:	4770      	bxne	lr
   d5fb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5fba:	0052      	lsls	r2, r2, #1
   d5fbc:	eb43 0303 	adc.w	r3, r3, r3
   d5fc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5fc4:	bf08      	it	eq
   d5fc6:	3d01      	subeq	r5, #1
   d5fc8:	d0f7      	beq.n	d5fba <__aeabi_dmul+0x1c6>
   d5fca:	ea43 0306 	orr.w	r3, r3, r6
   d5fce:	4770      	bx	lr
   d5fd0:	ea94 0f0c 	teq	r4, ip
   d5fd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5fd8:	bf18      	it	ne
   d5fda:	ea95 0f0c 	teqne	r5, ip
   d5fde:	d00c      	beq.n	d5ffa <__aeabi_dmul+0x206>
   d5fe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5fe4:	bf18      	it	ne
   d5fe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5fea:	d1d1      	bne.n	d5f90 <__aeabi_dmul+0x19c>
   d5fec:	ea81 0103 	eor.w	r1, r1, r3
   d5ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ff4:	f04f 0000 	mov.w	r0, #0
   d5ff8:	bd70      	pop	{r4, r5, r6, pc}
   d5ffa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5ffe:	bf06      	itte	eq
   d6000:	4610      	moveq	r0, r2
   d6002:	4619      	moveq	r1, r3
   d6004:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6008:	d019      	beq.n	d603e <__aeabi_dmul+0x24a>
   d600a:	ea94 0f0c 	teq	r4, ip
   d600e:	d102      	bne.n	d6016 <__aeabi_dmul+0x222>
   d6010:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6014:	d113      	bne.n	d603e <__aeabi_dmul+0x24a>
   d6016:	ea95 0f0c 	teq	r5, ip
   d601a:	d105      	bne.n	d6028 <__aeabi_dmul+0x234>
   d601c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6020:	bf1c      	itt	ne
   d6022:	4610      	movne	r0, r2
   d6024:	4619      	movne	r1, r3
   d6026:	d10a      	bne.n	d603e <__aeabi_dmul+0x24a>
   d6028:	ea81 0103 	eor.w	r1, r1, r3
   d602c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6030:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6038:	f04f 0000 	mov.w	r0, #0
   d603c:	bd70      	pop	{r4, r5, r6, pc}
   d603e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6042:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6046:	bd70      	pop	{r4, r5, r6, pc}

000d6048 <__aeabi_ddiv>:
   d6048:	b570      	push	{r4, r5, r6, lr}
   d604a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d604e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6056:	bf1d      	ittte	ne
   d6058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d605c:	ea94 0f0c 	teqne	r4, ip
   d6060:	ea95 0f0c 	teqne	r5, ip
   d6064:	f000 f8a7 	bleq	d61b6 <__aeabi_ddiv+0x16e>
   d6068:	eba4 0405 	sub.w	r4, r4, r5
   d606c:	ea81 0e03 	eor.w	lr, r1, r3
   d6070:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6074:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6078:	f000 8088 	beq.w	d618c <__aeabi_ddiv+0x144>
   d607c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6080:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6084:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6088:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d608c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6090:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6094:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6098:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d609c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d60a0:	429d      	cmp	r5, r3
   d60a2:	bf08      	it	eq
   d60a4:	4296      	cmpeq	r6, r2
   d60a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d60aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d60ae:	d202      	bcs.n	d60b6 <__aeabi_ddiv+0x6e>
   d60b0:	085b      	lsrs	r3, r3, #1
   d60b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d60b6:	1ab6      	subs	r6, r6, r2
   d60b8:	eb65 0503 	sbc.w	r5, r5, r3
   d60bc:	085b      	lsrs	r3, r3, #1
   d60be:	ea4f 0232 	mov.w	r2, r2, rrx
   d60c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d60c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d60ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d60ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d60d2:	bf22      	ittt	cs
   d60d4:	1ab6      	subcs	r6, r6, r2
   d60d6:	4675      	movcs	r5, lr
   d60d8:	ea40 000c 	orrcs.w	r0, r0, ip
   d60dc:	085b      	lsrs	r3, r3, #1
   d60de:	ea4f 0232 	mov.w	r2, r2, rrx
   d60e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d60e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d60ea:	bf22      	ittt	cs
   d60ec:	1ab6      	subcs	r6, r6, r2
   d60ee:	4675      	movcs	r5, lr
   d60f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d60f4:	085b      	lsrs	r3, r3, #1
   d60f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d60fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d60fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6102:	bf22      	ittt	cs
   d6104:	1ab6      	subcs	r6, r6, r2
   d6106:	4675      	movcs	r5, lr
   d6108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d610c:	085b      	lsrs	r3, r3, #1
   d610e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6112:	ebb6 0e02 	subs.w	lr, r6, r2
   d6116:	eb75 0e03 	sbcs.w	lr, r5, r3
   d611a:	bf22      	ittt	cs
   d611c:	1ab6      	subcs	r6, r6, r2
   d611e:	4675      	movcs	r5, lr
   d6120:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6124:	ea55 0e06 	orrs.w	lr, r5, r6
   d6128:	d018      	beq.n	d615c <__aeabi_ddiv+0x114>
   d612a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d612e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6132:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d613a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d613e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6142:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6146:	d1c0      	bne.n	d60ca <__aeabi_ddiv+0x82>
   d6148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d614c:	d10b      	bne.n	d6166 <__aeabi_ddiv+0x11e>
   d614e:	ea41 0100 	orr.w	r1, r1, r0
   d6152:	f04f 0000 	mov.w	r0, #0
   d6156:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d615a:	e7b6      	b.n	d60ca <__aeabi_ddiv+0x82>
   d615c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6160:	bf04      	itt	eq
   d6162:	4301      	orreq	r1, r0
   d6164:	2000      	moveq	r0, #0
   d6166:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d616a:	bf88      	it	hi
   d616c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6170:	f63f aeaf 	bhi.w	d5ed2 <__aeabi_dmul+0xde>
   d6174:	ebb5 0c03 	subs.w	ip, r5, r3
   d6178:	bf04      	itt	eq
   d617a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d617e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6182:	f150 0000 	adcs.w	r0, r0, #0
   d6186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d618a:	bd70      	pop	{r4, r5, r6, pc}
   d618c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6190:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6194:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6198:	bfc2      	ittt	gt
   d619a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d619e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61a2:	bd70      	popgt	{r4, r5, r6, pc}
   d61a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61a8:	f04f 0e00 	mov.w	lr, #0
   d61ac:	3c01      	subs	r4, #1
   d61ae:	e690      	b.n	d5ed2 <__aeabi_dmul+0xde>
   d61b0:	ea45 0e06 	orr.w	lr, r5, r6
   d61b4:	e68d      	b.n	d5ed2 <__aeabi_dmul+0xde>
   d61b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d61ba:	ea94 0f0c 	teq	r4, ip
   d61be:	bf08      	it	eq
   d61c0:	ea95 0f0c 	teqeq	r5, ip
   d61c4:	f43f af3b 	beq.w	d603e <__aeabi_dmul+0x24a>
   d61c8:	ea94 0f0c 	teq	r4, ip
   d61cc:	d10a      	bne.n	d61e4 <__aeabi_ddiv+0x19c>
   d61ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d61d2:	f47f af34 	bne.w	d603e <__aeabi_dmul+0x24a>
   d61d6:	ea95 0f0c 	teq	r5, ip
   d61da:	f47f af25 	bne.w	d6028 <__aeabi_dmul+0x234>
   d61de:	4610      	mov	r0, r2
   d61e0:	4619      	mov	r1, r3
   d61e2:	e72c      	b.n	d603e <__aeabi_dmul+0x24a>
   d61e4:	ea95 0f0c 	teq	r5, ip
   d61e8:	d106      	bne.n	d61f8 <__aeabi_ddiv+0x1b0>
   d61ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d61ee:	f43f aefd 	beq.w	d5fec <__aeabi_dmul+0x1f8>
   d61f2:	4610      	mov	r0, r2
   d61f4:	4619      	mov	r1, r3
   d61f6:	e722      	b.n	d603e <__aeabi_dmul+0x24a>
   d61f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d61fc:	bf18      	it	ne
   d61fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6202:	f47f aec5 	bne.w	d5f90 <__aeabi_dmul+0x19c>
   d6206:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d620a:	f47f af0d 	bne.w	d6028 <__aeabi_dmul+0x234>
   d620e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6212:	f47f aeeb 	bne.w	d5fec <__aeabi_dmul+0x1f8>
   d6216:	e712      	b.n	d603e <__aeabi_dmul+0x24a>

000d6218 <__aeabi_d2f>:
   d6218:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d621c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6220:	bf24      	itt	cs
   d6222:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6226:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d622a:	d90d      	bls.n	d6248 <__aeabi_d2f+0x30>
   d622c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6230:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6234:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6238:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d623c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6240:	bf08      	it	eq
   d6242:	f020 0001 	biceq.w	r0, r0, #1
   d6246:	4770      	bx	lr
   d6248:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d624c:	d121      	bne.n	d6292 <__aeabi_d2f+0x7a>
   d624e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6252:	bfbc      	itt	lt
   d6254:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6258:	4770      	bxlt	lr
   d625a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d625e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6262:	f1c2 0218 	rsb	r2, r2, #24
   d6266:	f1c2 0c20 	rsb	ip, r2, #32
   d626a:	fa10 f30c 	lsls.w	r3, r0, ip
   d626e:	fa20 f002 	lsr.w	r0, r0, r2
   d6272:	bf18      	it	ne
   d6274:	f040 0001 	orrne.w	r0, r0, #1
   d6278:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d627c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6280:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6284:	ea40 000c 	orr.w	r0, r0, ip
   d6288:	fa23 f302 	lsr.w	r3, r3, r2
   d628c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6290:	e7cc      	b.n	d622c <__aeabi_d2f+0x14>
   d6292:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6296:	d107      	bne.n	d62a8 <__aeabi_d2f+0x90>
   d6298:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d629c:	bf1e      	ittt	ne
   d629e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d62a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d62a6:	4770      	bxne	lr
   d62a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d62ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d62b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d62b4:	4770      	bx	lr
   d62b6:	bf00      	nop

000d62b8 <__cxa_atexit>:
   d62b8:	b510      	push	{r4, lr}
   d62ba:	4c05      	ldr	r4, [pc, #20]	; (d62d0 <__cxa_atexit+0x18>)
   d62bc:	4613      	mov	r3, r2
   d62be:	b12c      	cbz	r4, d62cc <__cxa_atexit+0x14>
   d62c0:	460a      	mov	r2, r1
   d62c2:	4601      	mov	r1, r0
   d62c4:	2002      	movs	r0, #2
   d62c6:	f3af 8000 	nop.w
   d62ca:	bd10      	pop	{r4, pc}
   d62cc:	4620      	mov	r0, r4
   d62ce:	bd10      	pop	{r4, pc}
   d62d0:	00000000 	.word	0x00000000

000d62d4 <memcpy>:
   d62d4:	b510      	push	{r4, lr}
   d62d6:	1e43      	subs	r3, r0, #1
   d62d8:	440a      	add	r2, r1
   d62da:	4291      	cmp	r1, r2
   d62dc:	d004      	beq.n	d62e8 <memcpy+0x14>
   d62de:	f811 4b01 	ldrb.w	r4, [r1], #1
   d62e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d62e6:	e7f8      	b.n	d62da <memcpy+0x6>
   d62e8:	bd10      	pop	{r4, pc}

000d62ea <memset>:
   d62ea:	4402      	add	r2, r0
   d62ec:	4603      	mov	r3, r0
   d62ee:	4293      	cmp	r3, r2
   d62f0:	d002      	beq.n	d62f8 <memset+0xe>
   d62f2:	f803 1b01 	strb.w	r1, [r3], #1
   d62f6:	e7fa      	b.n	d62ee <memset+0x4>
   d62f8:	4770      	bx	lr
	...

000d62fc <srand>:
   d62fc:	b538      	push	{r3, r4, r5, lr}
   d62fe:	4b12      	ldr	r3, [pc, #72]	; (d6348 <srand+0x4c>)
   d6300:	681c      	ldr	r4, [r3, #0]
   d6302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6304:	4605      	mov	r5, r0
   d6306:	b9d3      	cbnz	r3, d633e <srand+0x42>
   d6308:	2018      	movs	r0, #24
   d630a:	f7fe fa4b 	bl	d47a4 <malloc>
   d630e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6312:	63a0      	str	r0, [r4, #56]	; 0x38
   d6314:	8003      	strh	r3, [r0, #0]
   d6316:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d631a:	8043      	strh	r3, [r0, #2]
   d631c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6320:	8083      	strh	r3, [r0, #4]
   d6322:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6326:	80c3      	strh	r3, [r0, #6]
   d6328:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d632c:	8103      	strh	r3, [r0, #8]
   d632e:	2305      	movs	r3, #5
   d6330:	8143      	strh	r3, [r0, #10]
   d6332:	230b      	movs	r3, #11
   d6334:	8183      	strh	r3, [r0, #12]
   d6336:	2201      	movs	r2, #1
   d6338:	2300      	movs	r3, #0
   d633a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d633e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6340:	2200      	movs	r2, #0
   d6342:	611d      	str	r5, [r3, #16]
   d6344:	615a      	str	r2, [r3, #20]
   d6346:	bd38      	pop	{r3, r4, r5, pc}
   d6348:	2003e370 	.word	0x2003e370

000d634c <strdup>:
   d634c:	4b02      	ldr	r3, [pc, #8]	; (d6358 <strdup+0xc>)
   d634e:	4601      	mov	r1, r0
   d6350:	6818      	ldr	r0, [r3, #0]
   d6352:	f000 b803 	b.w	d635c <_strdup_r>
   d6356:	bf00      	nop
   d6358:	2003e370 	.word	0x2003e370

000d635c <_strdup_r>:
   d635c:	b570      	push	{r4, r5, r6, lr}
   d635e:	4606      	mov	r6, r0
   d6360:	4608      	mov	r0, r1
   d6362:	460c      	mov	r4, r1
   d6364:	f000 f80d 	bl	d6382 <strlen>
   d6368:	1c45      	adds	r5, r0, #1
   d636a:	4629      	mov	r1, r5
   d636c:	4630      	mov	r0, r6
   d636e:	f7fe fa39 	bl	d47e4 <_malloc_r>
   d6372:	4606      	mov	r6, r0
   d6374:	b118      	cbz	r0, d637e <_strdup_r+0x22>
   d6376:	462a      	mov	r2, r5
   d6378:	4621      	mov	r1, r4
   d637a:	f7ff ffab 	bl	d62d4 <memcpy>
   d637e:	4630      	mov	r0, r6
   d6380:	bd70      	pop	{r4, r5, r6, pc}

000d6382 <strlen>:
   d6382:	4603      	mov	r3, r0
   d6384:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6388:	2a00      	cmp	r2, #0
   d638a:	d1fb      	bne.n	d6384 <strlen+0x2>
   d638c:	1a18      	subs	r0, r3, r0
   d638e:	3801      	subs	r0, #1
   d6390:	4770      	bx	lr

000d6392 <link_code_end>:
	...

000d6394 <dynalib_user>:
   d6394:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d63a4:	0000 0000 7453 7461 7375 5300 5448 3133     ....Status.SHT31
   d63b4:	7420 7365 0074 6f43 6c75 6e64 7427 6620      test.Couldn't f
   d63c4:	6e69 2064 4853 3354 0031 6554 706d 2a20     ind SHT31.Temp *
   d63d4:	2043 203d 3425 322e 0066 6554 706d 2a20     C = %4.2f.Temp *
   d63e4:	2046 203d 3425 322e 0066 6146 6c69 6465     F = %4.2f.Failed
   d63f4:	7420 206f 6572 6461 7420 6d65 6570 6172      to read tempera
   d6404:	7574 6572 4800 6d75 202e 2525 3d20 2520     ture.Hum. %% = %
   d6414:	2e34 6632 4600 6961 656c 2064 6f74 7220     4.2f.Failed to r
   d6424:	6165 2064 7568 696d 6964 7974 0000 0000     ead humidity....

000d6434 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d643c:	4841 000d 4847 000d 489d 000d 4855 000d     AH..GH...H..UH..
   d644c:	4843 000d                                   CH..

000d6450 <_ZTVN5spark13EthernetClassE>:
	...
   d6458:	4e57 000d 4e4d 000d 4e43 000d 4e39 000d     WN..MN..CN..9N..
   d6468:	4e2d 000d 4e21 000d 4e15 000d 4e0d 000d     -N..!N...N...N..
   d6478:	4e03 000d 4df9 000d 51ed 000d               .N...M...Q..

000d6484 <_ZTV7TwoWire>:
	...
   d648c:	4e75 000d 4ebf 000d 4e97 000d 4e77 000d     uN...N...N..wN..
   d649c:	4e9f 000d 4ea7 000d 4eaf 000d 4eb7 000d     .N...N...N...N..

000d64ac <_ZTV9IPAddress>:
	...
   d64b4:	4f3b 000d 4f2b 000d 4f2d 000d 6162 6475     ;O..+O..-O..baud
   d64c4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d64d4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d64e4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d64f4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6504:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6514:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6524:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6534:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6544:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6554:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6564:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d6574:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d6584:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d6594:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d65a0 <_ZTVN5spark9MeshClassE>:
	...
   d65a8:	507f 000d 5075 000d 506b 000d 5061 000d     .P..uP..kP..aP..
   d65b8:	5055 000d 5049 000d 503d 000d 5035 000d     UP..IP..=P..5P..
   d65c8:	502b 000d 5021 000d 51ed 000d               +P..!P...Q..

000d65d4 <_ZTVN5spark12NetworkClassE>:
	...
   d65dc:	5185 000d 518f 000d 5199 000d 51a3 000d     .Q...Q...Q...Q..
   d65ec:	51ad 000d 51b9 000d 51c5 000d 51d1 000d     .Q...Q...Q...Q..
   d65fc:	51d9 000d 51e3 000d 51ed 000d               .Q...Q...Q..

000d6608 <_ZTV8SPIClass>:
	...
   d6610:	53a5 000d 53a7 000d 005a 2b25 3330 3a64     .S...S..Z.%+03d:
   d6620:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6630:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d6640:	0000 0000                                   ....

000d6644 <_ZTV11USARTSerial>:
	...
   d664c:	5409 000d 5459 000d 5467 000d 52cd 000d     .T..YT..gT...R..
   d665c:	541d 000d 543f 000d 542b 000d 5453 000d     .T..?T..+T..ST..
   d666c:	540b 000d 540f 000d                         .T...T..

000d6674 <_ZTV9USBSerial>:
	...
   d667c:	5509 000d 5559 000d 5567 000d 52cd 000d     .U..YU..gU...R..
   d668c:	5545 000d 550b 000d 5521 000d 5553 000d     EU...U..!U..SU..
   d669c:	5537 000d 5505 000d                         7U...U..

000d66a4 <_ZTVN5spark9WiFiClassE>:
	...
   d66ac:	566b 000d 5661 000d 5657 000d 560d 000d     kV..aV..WV...V..
   d66bc:	564b 000d 563f 000d 5633 000d 562b 000d     KV..?V..3V..+V..
   d66cc:	5621 000d 5617 000d 51ed 000d               !V...V...Q..

000d66d8 <__sf_fake_stdin>:
	...

000d66f8 <__sf_fake_stdout>:
	...

000d6718 <__sf_fake_stderr>:
	...
   d6738:	0043                                        C.

000d673a <link_const_variable_data_end>:
	...

000d673c <link_constructors_location>:
   d673c:	000d4265 	.word	0x000d4265
   d6740:	000d4439 	.word	0x000d4439
   d6744:	000d4831 	.word	0x000d4831
   d6748:	000d4e61 	.word	0x000d4e61
   d674c:	000d5011 	.word	0x000d5011
   d6750:	000d5135 	.word	0x000d5135
   d6754:	000d52b9 	.word	0x000d52b9
   d6758:	000d5389 	.word	0x000d5389
   d675c:	000d53dd 	.word	0x000d53dd
   d6760:	000d53f5 	.word	0x000d53f5
   d6764:	000d5675 	.word	0x000d5675
   d6768:	000d579d 	.word	0x000d579d
   d676c:	000d57f5 	.word	0x000d57f5
   d6770:	000d58b9 	.word	0x000d58b9
   d6774:	000d593d 	.word	0x000d593d
   d6778:	000d59c1 	.word	0x000d59c1

000d677c <link_constructors_end>:
   d677c:	00000000 	.word	0x00000000
