
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.4.4/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000073d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001b5a4  2**0
                  CONTENTS
  4 .data         00000184  2003e07c  000db3f0  0000e07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005f0  2003e200  2003e200  0001e200  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000db574  000db574  0001b574  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000db5a0  000db5a0  0001b5a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f6dd4  00000000  00000000  0001b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013b64  00000000  00000000  00112378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022734  00000000  00000000  00125edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002dc0  00000000  00000000  00148610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051f0  00000000  00000000  0014b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039a5b  00000000  00000000  001505c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030d6a  00000000  00000000  0018a01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105df2  00000000  00000000  001bad85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eadc  00000000  00000000  002c0b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fa57 	bl	d84e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fa5c 	bl	d84fa <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e07c 	.word	0x2003e07c
   d404c:	000db3f0 	.word	0x000db3f0
   d4050:	2003e200 	.word	0x2003e200
   d4054:	2003e200 	.word	0x2003e200
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f9c1 	bl	d73e4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db3ec 	.word	0x000db3ec
   d4084:	000db3ac 	.word	0x000db3ac

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 beba 	b.w	d4e00 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fc99 	bl	d49c4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b973 	b.w	d7380 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bc99 	b.w	d59d0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bc9f 	b.w	d59e0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bc9d 	b.w	d59e0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z10measureNow6String>:
inline void softDelay(uint32_t t) {
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
}

int measureNow(String command) // Function to force sending data in current hour
{
   d40b8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	4904      	ldr	r1, [pc, #16]	; (d40cc <_Z10measureNow6String+0x14>)
   d40bc:	f002 ff21 	bl	d6f02 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40c0:	b118      	cbz	r0, d40ca <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d40c2:	4b03      	ldr	r3, [pc, #12]	; (d40d0 <_Z10measureNow6String+0x18>)
   d40c4:	2203      	movs	r2, #3
   d40c6:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c8:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	000dab88 	.word	0x000dab88
   d40d0:	2003e242 	.word	0x2003e242

000d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d6:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40da:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40dc:	f88d 3000 	strb.w	r3, [sp]
   d40e0:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e2:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e4:	f001 ff7c 	bl	d5fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40e8:	4628      	mov	r0, r5
   d40ea:	b003      	add	sp, #12
   d40ec:	bd30      	pop	{r4, r5, pc}
	...

000d40f0 <_Z17getSignalStrengthv>:
  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength()
{
   d40f0:	b530      	push	{r4, r5, lr}
   d40f2:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d40f4:	4912      	ldr	r1, [pc, #72]	; (d4140 <_Z17getSignalStrengthv+0x50>)
   d40f6:	a804      	add	r0, sp, #16
   d40f8:	f001 fd08 	bl	d5b0c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d40fc:	a804      	add	r0, sp, #16
   d40fe:	f001 fd58 	bl	d5bb2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4102:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4104:	a804      	add	r0, sp, #16
   d4106:	f001 fdbd 	bl	d5c84 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d410a:	a804      	add	r0, sp, #16
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d410c:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4110:	f001 fd9e 	bl	d5c50 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4114:	ee10 0a10 	vmov	r0, s0
   d4118:	f003 fd3a 	bl	d7b90 <__aeabi_f2d>
   d411c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4120:	4628      	mov	r0, r5
   d4122:	f003 fd35 	bl	d7b90 <__aeabi_f2d>
   d4126:	e9cd 0100 	strd	r0, r1, [sp]
   d412a:	4b06      	ldr	r3, [pc, #24]	; (d4144 <_Z17getSignalStrengthv+0x54>)
   d412c:	4a06      	ldr	r2, [pc, #24]	; (d4148 <_Z17getSignalStrengthv+0x58>)
   d412e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   d4132:	4806      	ldr	r0, [pc, #24]	; (d414c <_Z17getSignalStrengthv+0x5c>)
   d4134:	2140      	movs	r1, #64	; 0x40
   d4136:	f001 fc6b 	bl	d5a10 <snprintf>
}
   d413a:	b00f      	add	sp, #60	; 0x3c
   d413c:	bd30      	pop	{r4, r5, pc}
   d413e:	bf00      	nop
   d4140:	2003e32c 	.word	0x2003e32c
   d4144:	2003e0f0 	.word	0x2003e0f0
   d4148:	000da980 	.word	0x000da980
   d414c:	2003e270 	.word	0x2003e270

000d4150 <_Z17connectToParticlev>:


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4150:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4154:	481a      	ldr	r0, [pc, #104]	; (d41c0 <_Z17connectToParticlev+0x70>)
   d4156:	2300      	movs	r3, #0
   d4158:	461a      	mov	r2, r3
   d415a:	4619      	mov	r1, r3
   d415c:	6840      	ldr	r0, [r0, #4]
   d415e:	f001 fc07 	bl	d5970 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4162:	f001 fb9d 	bl	d58a0 <spark_cloud_flag_connect>
   d4166:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d416a:	f240 36e7 	movw	r6, #999	; 0x3e7
   d416e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4170:	2000      	movs	r0, #0
   d4172:	f001 f9d7 	bl	d5524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4176:	f04f 0900 	mov.w	r9, #0
   d417a:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d417c:	2000      	movs	r0, #0
   d417e:	f001 f9d1 	bl	d5524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4182:	ebb0 0008 	subs.w	r0, r0, r8
   d4186:	eb61 0109 	sbc.w	r1, r1, r9
   d418a:	428f      	cmp	r7, r1
   d418c:	bf08      	it	eq
   d418e:	4286      	cmpeq	r6, r0
   d4190:	d305      	bcc.n	d419e <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4192:	f001 fb95 	bl	d58c0 <spark_cloud_flag_connected>
   d4196:	b910      	cbnz	r0, d419e <_Z17connectToParticlev+0x4e>
            spark_process();
   d4198:	f001 fb7a 	bl	d5890 <spark_process>
   d419c:	e7ee      	b.n	d417c <_Z17connectToParticlev+0x2c>
   d419e:	f001 fb8f 	bl	d58c0 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41a2:	b118      	cbz	r0, d41ac <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d41a4:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d41a8:	f001 bb8a 	b.w	d58c0 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41ac:	f001 f982 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41b0:	4b04      	ldr	r3, [pc, #16]	; (d41c4 <_Z17connectToParticlev+0x74>)
   d41b2:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d41b4:	f001 fb6c 	bl	d5890 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41b8:	3c01      	subs	r4, #1
   d41ba:	d0f3      	beq.n	d41a4 <_Z17connectToParticlev+0x54>
   d41bc:	e7d8      	b.n	d4170 <_Z17connectToParticlev+0x20>
   d41be:	bf00      	nop
   d41c0:	2003e32c 	.word	0x2003e32c
   d41c4:	2003e6cc 	.word	0x2003e6cc

000d41c8 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d41c8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ca:	f001 fb79 	bl	d58c0 <spark_cloud_flag_connected>
    return !Particle.connected();
   d41ce:	f080 0001 	eor.w	r0, r0, #1
}
   d41d2:	b2c0      	uxtb	r0, r0
   d41d4:	bd08      	pop	{r3, pc}
	...

000d41d8 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d41da:	f001 fb69 	bl	d58b0 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41de:	2000      	movs	r0, #0
   d41e0:	f001 f9a0 	bl	d5524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41e4:	2500      	movs	r5, #0
   d41e6:	4604      	mov	r4, r0
   d41e8:	f643 2697 	movw	r6, #14999	; 0x3a97
   d41ec:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41ee:	2000      	movs	r0, #0
   d41f0:	f001 f998 	bl	d5524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41f4:	1b00      	subs	r0, r0, r4
   d41f6:	eb61 0105 	sbc.w	r1, r1, r5
   d41fa:	428f      	cmp	r7, r1
   d41fc:	bf08      	it	eq
   d41fe:	4286      	cmpeq	r6, r0
   d4200:	d305      	bcc.n	d420e <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem                              
   d4202:	f7ff ffe1 	bl	d41c8 <_Z12notConnectedv>
   d4206:	b910      	cbnz	r0, d420e <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d4208:	f001 fb42 	bl	d5890 <spark_process>
   d420c:	e7ef      	b.n	d41ee <_Z22disconnectFromParticlev+0x16>
   d420e:	f7ff ffdb 	bl	d41c8 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4212:	4806      	ldr	r0, [pc, #24]	; (d422c <_Z22disconnectFromParticlev+0x54>)
   d4214:	2300      	movs	r3, #0
   d4216:	461a      	mov	r2, r3
   d4218:	4619      	mov	r1, r3
   d421a:	6840      	ldr	r0, [r0, #4]
   d421c:	f001 fbb0 	bl	d5980 <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4224:	f001 fc18 	bl	d5a58 <delay>
  return true;
}
   d4228:	2001      	movs	r0, #1
   d422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d422c:	2003e32c 	.word	0x2003e32c

000d4230 <_Z9PMICresetv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
    return !Particle.connected();
}

// Power Management function
void PMICreset() {
   d4230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
   d4232:	481f      	ldr	r0, [pc, #124]	; (d42b0 <_Z9PMICresetv+0x80>)
   d4234:	f002 fb50 	bl	d68d8 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
   d4238:	481d      	ldr	r0, [pc, #116]	; (d42b0 <_Z9PMICresetv+0x80>)
   d423a:	f002 fd11 	bl	d6c60 <_ZN4PMIC15disableWatchdogEv>
  if (sysStatus.solarPowerMode) {
   d423e:	4b1d      	ldr	r3, [pc, #116]	; (d42b4 <_Z9PMICresetv+0x84>)
   d4240:	795c      	ldrb	r4, [r3, #5]
   d4242:	4b1d      	ldr	r3, [pc, #116]	; (d42b8 <_Z9PMICresetv+0x88>)
   d4244:	b1bc      	cbz	r4, d4276 <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
   d4246:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
   d4248:	f241 21e8 	movw	r1, #4840	; 0x12e8
   d424c:	4818      	ldr	r0, [pc, #96]	; (d42b0 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (sysStatus.solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
   d424e:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
   d4250:	f002 fbc4 	bl	d69dc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
   d4254:	f44f 7161 	mov.w	r1, #900	; 0x384
   d4258:	4815      	ldr	r0, [pc, #84]	; (d42b0 <_Z9PMICresetv+0x80>)
   d425a:	f002 fc49 	bl	d6af0 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
   d425e:	2200      	movs	r2, #0
   d4260:	4611      	mov	r1, r2
   d4262:	9202      	str	r2, [sp, #8]
   d4264:	9201      	str	r2, [sp, #4]
   d4266:	9200      	str	r2, [sp, #0]
   d4268:	2301      	movs	r3, #1
   d426a:	4811      	ldr	r0, [pc, #68]	; (d42b0 <_Z9PMICresetv+0x80>)
   d426c:	f002 fc9f 	bl	d6bae <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
   d4270:	f241 0170 	movw	r1, #4208	; 0x1070
   d4274:	e016      	b.n	d42a4 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
   d4276:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
   d4278:	f241 0170 	movw	r1, #4208	; 0x1070
   d427c:	480c      	ldr	r0, [pc, #48]	; (d42b0 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
   d427e:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
   d4280:	f002 fbac 	bl	d69dc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
   d4284:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d4288:	4809      	ldr	r0, [pc, #36]	; (d42b0 <_Z9PMICresetv+0x80>)
   d428a:	f002 fc31 	bl	d6af0 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
   d428e:	2301      	movs	r3, #1
   d4290:	4621      	mov	r1, r4
   d4292:	9402      	str	r4, [sp, #8]
   d4294:	9401      	str	r4, [sp, #4]
   d4296:	9400      	str	r4, [sp, #0]
   d4298:	461a      	mov	r2, r3
   d429a:	4805      	ldr	r0, [pc, #20]	; (d42b0 <_Z9PMICresetv+0x80>)
   d429c:	f002 fc87 	bl	d6bae <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
   d42a0:	f241 0110 	movw	r1, #4112	; 0x1010
   d42a4:	4802      	ldr	r0, [pc, #8]	; (d42b0 <_Z9PMICresetv+0x80>)
  }
}
   d42a6:	b004      	add	sp, #16
   d42a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
   d42ac:	f002 bcb2 	b.w	d6c14 <_ZN4PMIC16setChargeVoltageEt>
   d42b0:	2003e243 	.word	0x2003e243
   d42b4:	2003e308 	.word	0x2003e308
   d42b8:	2003e214 	.word	0x2003e214

000d42bc <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d42bc:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d42be:	4c07      	ldr	r4, [pc, #28]	; (d42dc <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42c0:	f001 f8f8 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
   d42c4:	6823      	ldr	r3, [r4, #0]
   d42c6:	1ac0      	subs	r0, r0, r3
   d42c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d42cc:	d304      	bcc.n	d42d8 <_Z20meterParticlePublishv+0x1c>
   d42ce:	f001 f8f1 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d42d2:	6020      	str	r0, [r4, #0]
   d42d4:	2001      	movs	r0, #1
   d42d6:	bd10      	pop	{r4, pc}
    return 1;
  } 
  else return 0;
   d42d8:	2000      	movs	r0, #0
}
   d42da:	bd10      	pop	{r4, pc}
   d42dc:	2003e2b0 	.word	0x2003e2b0

000d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d42e0:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d42e2:	f7ff ffeb 	bl	d42bc <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d42e6:	b118      	cbz	r0, d42f0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d42e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d42ec:	f7ff bfe6 	b.w	d42bc <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d42f0:	f001 face 	bl	d5890 <spark_process>
   d42f4:	e7f5      	b.n	d42e2 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36+0x2>
	...

000d42f8 <_Z14fullModemResetv>:
    return 1;
  } 
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d42f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42fa:	f001 fad9 	bl	d58b0 <spark_cloud_flag_disconnect>
   d42fe:	f001 f8d9 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4302:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4306:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4308:	f001 fada 	bl	d58c0 <spark_cloud_flag_connected>
   d430c:	b140      	cbz	r0, d4320 <_Z14fullModemResetv+0x28>
   d430e:	f001 f8d1 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
   d4312:	1b00      	subs	r0, r0, r4
   d4314:	42a8      	cmp	r0, r5
   d4316:	d803      	bhi.n	d4320 <_Z14fullModemResetv+0x28>
		delay(100);
   d4318:	2064      	movs	r0, #100	; 0x64
   d431a:	f001 fb9d 	bl	d5a58 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d431e:	e7f3      	b.n	d4308 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4320:	2100      	movs	r1, #0
   d4322:	4b09      	ldr	r3, [pc, #36]	; (d4348 <_Z14fullModemResetv+0x50>)
   d4324:	f247 5230 	movw	r2, #30000	; 0x7530
   d4328:	4608      	mov	r0, r1
   d432a:	f001 f86b 	bl	d5404 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d432e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4332:	f001 fb91 	bl	d5a58 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4336:	4b05      	ldr	r3, [pc, #20]	; (d434c <_Z14fullModemResetv+0x54>)
   d4338:	220a      	movs	r2, #10
   d433a:	681b      	ldr	r3, [r3, #0]
   d433c:	2101      	movs	r1, #1
   d433e:	4668      	mov	r0, sp
   d4340:	f002 fe12 	bl	d6f68 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4344:	b003      	add	sp, #12
   d4346:	bd30      	pop	{r4, r5, pc}
   d4348:	000da999 	.word	0x000da999
   d434c:	2003e25c 	.word	0x2003e25c

000d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4350:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4352:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4354:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4356:	b17c      	cbz	r4, d4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4358:	6863      	ldr	r3, [r4, #4]
   d435a:	3b01      	subs	r3, #1
   d435c:	6063      	str	r3, [r4, #4]
   d435e:	b95b      	cbnz	r3, d4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4360:	6823      	ldr	r3, [r4, #0]
   d4362:	4620      	mov	r0, r4
   d4364:	689b      	ldr	r3, [r3, #8]
   d4366:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4368:	68a3      	ldr	r3, [r4, #8]
   d436a:	3b01      	subs	r3, #1
   d436c:	60a3      	str	r3, [r4, #8]
   d436e:	b91b      	cbnz	r3, d4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4370:	6823      	ldr	r3, [r4, #0]
   d4372:	4620      	mov	r0, r4
   d4374:	68db      	ldr	r3, [r3, #12]
   d4376:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4378:	4628      	mov	r0, r5
   d437a:	bd38      	pop	{r3, r4, r5, pc}

000d437c <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d437c:	b510      	push	{r4, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d437e:	4c1d      	ldr	r4, [pc, #116]	; (d43f4 <_Z9sendEventv+0x78>)
    break;
  }
}

void sendEvent()
{
   d4380:	b0ce      	sub	sp, #312	; 0x138
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d4382:	69e3      	ldr	r3, [r4, #28]
   d4384:	930a      	str	r3, [sp, #40]	; 0x28
   d4386:	4b1c      	ldr	r3, [pc, #112]	; (d43f8 <_Z9sendEventv+0x7c>)
   d4388:	69a0      	ldr	r0, [r4, #24]
   d438a:	699a      	ldr	r2, [r3, #24]
   d438c:	9209      	str	r2, [sp, #36]	; 0x24
   d438e:	689b      	ldr	r3, [r3, #8]
   d4390:	9308      	str	r3, [sp, #32]
   d4392:	68e3      	ldr	r3, [r4, #12]
   d4394:	9307      	str	r3, [sp, #28]
   d4396:	68a3      	ldr	r3, [r4, #8]
   d4398:	9306      	str	r3, [sp, #24]
   d439a:	6863      	ldr	r3, [r4, #4]
   d439c:	9305      	str	r3, [sp, #20]
   d439e:	6823      	ldr	r3, [r4, #0]
   d43a0:	9304      	str	r3, [sp, #16]
   d43a2:	f003 fbf5 	bl	d7b90 <__aeabi_f2d>
   d43a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43aa:	6960      	ldr	r0, [r4, #20]
   d43ac:	f003 fbf0 	bl	d7b90 <__aeabi_f2d>
   d43b0:	4a12      	ldr	r2, [pc, #72]	; (d43fc <_Z9sendEventv+0x80>)
   d43b2:	e9cd 0100 	strd	r0, r1, [sp]
   d43b6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d43ba:	a80e      	add	r0, sp, #56	; 0x38
   d43bc:	f001 fb28 	bl	d5a10 <snprintf>
   d43c0:	4b0f      	ldr	r3, [pc, #60]	; (d4400 <_Z9sendEventv+0x84>)
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d43c2:	4910      	ldr	r1, [pc, #64]	; (d4404 <_Z9sendEventv+0x88>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d43c4:	781b      	ldrb	r3, [r3, #0]
   d43c6:	2200      	movs	r2, #0
   d43c8:	f88d 2000 	strb.w	r2, [sp]
   d43cc:	a80c      	add	r0, sp, #48	; 0x30
   d43ce:	aa0e      	add	r2, sp, #56	; 0x38
   d43d0:	f7ff fe80 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43d4:	a80d      	add	r0, sp, #52	; 0x34
   d43d6:	f7ff ffbb 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d43da:	f002 fe8f 	bl	d70fc <_ZN9TimeClass4hourEv>
   d43de:	4b0a      	ldr	r3, [pc, #40]	; (d4408 <_Z9sendEventv+0x8c>)
   d43e0:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d43e2:	4b0a      	ldr	r3, [pc, #40]	; (d440c <_Z9sendEventv+0x90>)
   d43e4:	2201      	movs	r2, #1
   d43e6:	701a      	strb	r2, [r3, #0]
   d43e8:	f001 f864 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d43ec:	4b08      	ldr	r3, [pc, #32]	; (d4410 <_Z9sendEventv+0x94>)
   d43ee:	6018      	str	r0, [r3, #0]
}
   d43f0:	b04e      	add	sp, #312	; 0x138
   d43f2:	bd10      	pop	{r4, pc}
   d43f4:	2003e2b8 	.word	0x2003e2b8
   d43f8:	2003e308 	.word	0x2003e308
   d43fc:	000da9a6 	.word	0x000da9a6
   d4400:	2003e21c 	.word	0x2003e21c
   d4404:	000daa41 	.word	0x000daa41
   d4408:	2003e258 	.word	0x2003e258
   d440c:	2003e0ec 	.word	0x2003e0ec
   d4410:	2003e218 	.word	0x2003e218

000d4414 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d4414:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4416:	780b      	ldrb	r3, [r1, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d4418:	b094      	sub	sp, #80	; 0x50
   d441a:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d441c:	b923      	cbnz	r3, d4428 <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d441e:	491c      	ldr	r1, [pc, #112]	; (d4490 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4420:	a804      	add	r0, sp, #16
   d4422:	f004 f8a5 	bl	d8570 <strcpy>
   d4426:	e017      	b.n	d4458 <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4428:	4608      	mov	r0, r1
   d442a:	f003 ff4d 	bl	d82c8 <atoi>
   d442e:	28c8      	cmp	r0, #200	; 0xc8
   d4430:	d004      	beq.n	d443c <_Z14UbidotsHandlerPKcS0_+0x28>
   d4432:	4620      	mov	r0, r4
   d4434:	f003 ff48 	bl	d82c8 <atoi>
   d4438:	28c9      	cmp	r0, #201	; 0xc9
   d443a:	d11e      	bne.n	d447a <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d443c:	4915      	ldr	r1, [pc, #84]	; (d4494 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d443e:	a804      	add	r0, sp, #16
   d4440:	f004 f896 	bl	d8570 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4444:	f002 fe52 	bl	d70ec <_ZN9TimeClass3nowEv>
   d4448:	4b13      	ldr	r3, [pc, #76]	; (d4498 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d444a:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d444c:	4b13      	ldr	r3, [pc, #76]	; (d449c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d444e:	2201      	movs	r2, #1
   d4450:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4452:	4b13      	ldr	r3, [pc, #76]	; (d44a0 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4454:	2200      	movs	r2, #0
   d4456:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d4458:	f7ff ff42 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d445c:	4b11      	ldr	r3, [pc, #68]	; (d44a4 <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d445e:	4912      	ldr	r1, [pc, #72]	; (d44a8 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4460:	781b      	ldrb	r3, [r3, #0]
   d4462:	2200      	movs	r2, #0
   d4464:	f88d 2000 	strb.w	r2, [sp]
   d4468:	a802      	add	r0, sp, #8
   d446a:	aa04      	add	r2, sp, #16
   d446c:	f7ff fe32 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4470:	a803      	add	r0, sp, #12
   d4472:	f7ff ff6d 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4476:	b014      	add	sp, #80	; 0x50
   d4478:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d447a:	4620      	mov	r0, r4
   d447c:	f003 ff24 	bl	d82c8 <atoi>
   d4480:	4a0a      	ldr	r2, [pc, #40]	; (d44ac <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4482:	4603      	mov	r3, r0
   d4484:	2140      	movs	r1, #64	; 0x40
   d4486:	a804      	add	r0, sp, #16
   d4488:	f001 fac2 	bl	d5a10 <snprintf>
   d448c:	e7e4      	b.n	d4458 <_Z14UbidotsHandlerPKcS0_+0x44>
   d448e:	bf00      	nop
   d4490:	000daa5a 	.word	0x000daa5a
   d4494:	000daa6f 	.word	0x000daa6f
   d4498:	2003e308 	.word	0x2003e308
   d449c:	2003e241 	.word	0x2003e241
   d44a0:	2003e0ec 	.word	0x2003e0ec
   d44a4:	2003e21c 	.word	0x2003e21c
   d44a8:	000daa62 	.word	0x000daa62
   d44ac:	000daa81 	.word	0x000daa81

000d44b0 <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d44b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Read values from the sensor

  if (sysStatus.SHT_31config) {                                             // Only read the sensor if it is present
   d44b2:	4b48      	ldr	r3, [pc, #288]	; (d45d4 <_Z16takeMeasurementsv+0x124>)
   d44b4:	4c48      	ldr	r4, [pc, #288]	; (d45d8 <_Z16takeMeasurementsv+0x128>)
   d44b6:	7b1a      	ldrb	r2, [r3, #12]
   d44b8:	461d      	mov	r5, r3
   d44ba:	b152      	cbz	r2, d44d2 <_Z16takeMeasurementsv+0x22>
    current.temperature = sht31.readTemperature();
   d44bc:	4847      	ldr	r0, [pc, #284]	; (d45dc <_Z16takeMeasurementsv+0x12c>)
   d44be:	f000 ff7b 	bl	d53b8 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = sht31.readHumidity();
   d44c2:	4846      	ldr	r0, [pc, #280]	; (d45dc <_Z16takeMeasurementsv+0x12c>)

bool takeMeasurements() {
  // Read values from the sensor

  if (sysStatus.SHT_31config) {                                             // Only read the sensor if it is present
    current.temperature = sht31.readTemperature();
   d44c4:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = sht31.readHumidity();
   d44c8:	f000 ff84 	bl	d53d4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d44cc:	ed84 0a06 	vstr	s0, [r4, #24]
   d44d0:	e002      	b.n	d44d8 <_Z16takeMeasurementsv+0x28>
  }
  else current.temperature = current.humidity = 0.0;
   d44d2:	2300      	movs	r3, #0
   d44d4:	61a3      	str	r3, [r4, #24]
   d44d6:	6163      	str	r3, [r4, #20]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d44d8:	6960      	ldr	r0, [r4, #20]
   d44da:	f003 fb59 	bl	d7b90 <__aeabi_f2d>
   d44de:	4a40      	ldr	r2, [pc, #256]	; (d45e0 <_Z16takeMeasurementsv+0x130>)
   d44e0:	e9cd 0100 	strd	r0, r1, [sp]
   d44e4:	2110      	movs	r1, #16
   d44e6:	483f      	ldr	r0, [pc, #252]	; (d45e4 <_Z16takeMeasurementsv+0x134>)
   d44e8:	f001 fa92 	bl	d5a10 <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d44ec:	69a0      	ldr	r0, [r4, #24]
   d44ee:	f003 fb4f 	bl	d7b90 <__aeabi_f2d>
   d44f2:	4a3d      	ldr	r2, [pc, #244]	; (d45e8 <_Z16takeMeasurementsv+0x138>)
   d44f4:	e9cd 0100 	strd	r0, r1, [sp]
   d44f8:	2110      	movs	r1, #16
   d44fa:	483c      	ldr	r0, [pc, #240]	; (d45ec <_Z16takeMeasurementsv+0x13c>)
   d44fc:	f001 fa88 	bl	d5a10 <snprintf>


  current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4500:	2013      	movs	r0, #19
   d4502:	f003 f802 	bl	d750a <analogRead>
   d4506:	2664      	movs	r6, #100	; 0x64
   d4508:	2300      	movs	r3, #0
   d450a:	4619      	mov	r1, r3
   d450c:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4510:	9600      	str	r6, [sp, #0]
   d4512:	f001 fa95 	bl	d5a40 <_Z3mapiiiii>
   d4516:	6020      	str	r0, [r4, #0]
  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d4518:	2012      	movs	r0, #18
   d451a:	f002 fff6 	bl	d750a <analogRead>
   d451e:	2300      	movs	r3, #0
   d4520:	4619      	mov	r1, r3
   d4522:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4526:	9600      	str	r6, [sp, #0]
   d4528:	f001 fa8a 	bl	d5a40 <_Z3mapiiiii>
   d452c:	6060      	str	r0, [r4, #4]
  current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d452e:	2011      	movs	r0, #17
   d4530:	f002 ffeb 	bl	d750a <analogRead>
   d4534:	231e      	movs	r3, #30
   d4536:	9300      	str	r3, [sp, #0]
   d4538:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d453c:	2300      	movs	r3, #0
   d453e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d4542:	f001 fa7d 	bl	d5a40 <_Z3mapiiiii>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4546:	4b2a      	ldr	r3, [pc, #168]	; (d45f0 <_Z16takeMeasurementsv+0x140>)
   d4548:	60a0      	str	r0, [r4, #8]
   d454a:	2200      	movs	r2, #0
   d454c:	4611      	mov	r1, r2
   d454e:	6858      	ldr	r0, [r3, #4]
   d4550:	f001 fa06 	bl	d5960 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4554:	b108      	cbz	r0, d455a <_Z16takeMeasurementsv+0xaa>
   d4556:	f7ff fdcb 	bl	d40f0 <_Z17getSignalStrengthv>
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d455a:	4826      	ldr	r0, [pc, #152]	; (d45f4 <_Z16takeMeasurementsv+0x144>)
   d455c:	f001 ff4c 	bl	d63f8 <_ZN9FuelGauge6getSoCEv>
   d4560:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4564:	4a24      	ldr	r2, [pc, #144]	; (d45f8 <_Z16takeMeasurementsv+0x148>)
   d4566:	4825      	ldr	r0, [pc, #148]	; (d45fc <_Z16takeMeasurementsv+0x14c>)
  current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
  current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d4568:	edc5 7a02 	vstr	s15, [r5, #8]
   d456c:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4570:	2110      	movs	r1, #16
   d4572:	f001 fa4d 	bl	d5a10 <snprintf>

  if (current.temperature < 0 || current.temperature > 45) {                      // Need to add temp charging controls - 
   d4576:	edd4 7a05 	vldr	s15, [r4, #20]
   d457a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4582:	d406      	bmi.n	d4592 <_Z16takeMeasurementsv+0xe2>
   d4584:	ed9f 7a1e 	vldr	s14, [pc, #120]	; d4600 <_Z16takeMeasurementsv+0x150>
   d4588:	eef4 7ac7 	vcmpe.f32	s15, s14
   d458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4590:	dd18      	ble.n	d45c4 <_Z16takeMeasurementsv+0x114>
    snprintf(powerContext, sizeof(powerContext), "Chg Disabled Temp");
   d4592:	491c      	ldr	r1, [pc, #112]	; (d4604 <_Z16takeMeasurementsv+0x154>)
   d4594:	481c      	ldr	r0, [pc, #112]	; (d4608 <_Z16takeMeasurementsv+0x158>)
   d4596:	f003 ffeb 	bl	d8570 <strcpy>
    power.disableCharging();                                          // Disable Charging if temp is too low or too high
   d459a:	481c      	ldr	r0, [pc, #112]	; (d460c <_Z16takeMeasurementsv+0x15c>)
   d459c:	f002 faf0 	bl	d6b80 <_ZN4PMIC15disableChargingEv>
    waitUntil(meterParticlePublish);
   d45a0:	f7ff fe9e 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d45a4:	f001 f98c 	bl	d58c0 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Alert", "Charging disabled Temperature",PRIVATE);
   d45a8:	b160      	cbz	r0, d45c4 <_Z16takeMeasurementsv+0x114>
   d45aa:	4b19      	ldr	r3, [pc, #100]	; (d4610 <_Z16takeMeasurementsv+0x160>)
   d45ac:	4919      	ldr	r1, [pc, #100]	; (d4614 <_Z16takeMeasurementsv+0x164>)
   d45ae:	781b      	ldrb	r3, [r3, #0]
   d45b0:	2200      	movs	r2, #0
   d45b2:	f88d 2000 	strb.w	r2, [sp]
   d45b6:	a802      	add	r0, sp, #8
   d45b8:	4a17      	ldr	r2, [pc, #92]	; (d4618 <_Z16takeMeasurementsv+0x168>)
   d45ba:	f7ff fd8b 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d45be:	a803      	add	r0, sp, #12
   d45c0:	f7ff fec6 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d45c4:	4b15      	ldr	r3, [pc, #84]	; (d461c <_Z16takeMeasurementsv+0x16c>)
   d45c6:	2001      	movs	r0, #1
   d45c8:	7018      	strb	r0, [r3, #0]
   d45ca:	4b15      	ldr	r3, [pc, #84]	; (d4620 <_Z16takeMeasurementsv+0x170>)
   d45cc:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d45ce:	b004      	add	sp, #16
   d45d0:	bd70      	pop	{r4, r5, r6, pc}
   d45d2:	bf00      	nop
   d45d4:	2003e308 	.word	0x2003e308
   d45d8:	2003e2b8 	.word	0x2003e2b8
   d45dc:	2003e24c 	.word	0x2003e24c
   d45e0:	000daa9e 	.word	0x000daa9e
   d45e4:	2003e204 	.word	0x2003e204
   d45e8:	000daaa6 	.word	0x000daaa6
   d45ec:	2003e2d8 	.word	0x2003e2d8
   d45f0:	2003e32c 	.word	0x2003e32c
   d45f4:	2003e238 	.word	0x2003e238
   d45f8:	000daaaf 	.word	0x000daaaf
   d45fc:	2003e2e8 	.word	0x2003e2e8
   d4600:	42340000 	.word	0x42340000
   d4604:	000daab5 	.word	0x000daab5
   d4608:	2003e21d 	.word	0x2003e21d
   d460c:	2003e243 	.word	0x2003e243
   d4610:	2003e21c 	.word	0x2003e21c
   d4614:	000daae5 	.word	0x000daae5
   d4618:	000daac7 	.word	0x000daac7
   d461c:	2003e248 	.word	0x2003e248
   d4620:	2003e241 	.word	0x2003e241

000d4624 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4624:	b530      	push	{r4, r5, lr}
   d4626:	4918      	ldr	r1, [pc, #96]	; (d4688 <_Z12setSolarMode6String+0x64>)
   d4628:	b085      	sub	sp, #20
   d462a:	4604      	mov	r4, r0
   d462c:	f002 fc69 	bl	d6f02 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4630:	4605      	mov	r5, r0
   d4632:	b168      	cbz	r0, d4650 <_Z12setSolarMode6String+0x2c>
  {
    sysStatus.solarPowerMode = true;
   d4634:	4b15      	ldr	r3, [pc, #84]	; (d468c <_Z12setSolarMode6String+0x68>)
   d4636:	2401      	movs	r4, #1
   d4638:	715c      	strb	r4, [r3, #5]
    systemStatusWriteNeeded = true;
   d463a:	4b15      	ldr	r3, [pc, #84]	; (d4690 <_Z12setSolarMode6String+0x6c>)
   d463c:	701c      	strb	r4, [r3, #0]
    PMICreset();                                               // Change the power management Settings
   d463e:	f7ff fdf7 	bl	d4230 <_Z9PMICresetv>
   d4642:	4b14      	ldr	r3, [pc, #80]	; (d4694 <_Z12setSolarMode6String+0x70>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
   d4644:	2200      	movs	r2, #0
   d4646:	781b      	ldrb	r3, [r3, #0]
   d4648:	f88d 2000 	strb.w	r2, [sp]
   d464c:	4a12      	ldr	r2, [pc, #72]	; (d4698 <_Z12setSolarMode6String+0x74>)
   d464e:	e010      	b.n	d4672 <_Z12setSolarMode6String+0x4e>
   d4650:	4912      	ldr	r1, [pc, #72]	; (d469c <_Z12setSolarMode6String+0x78>)
   d4652:	4620      	mov	r0, r4
   d4654:	f002 fc55 	bl	d6f02 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4658:	b198      	cbz	r0, d4682 <_Z12setSolarMode6String+0x5e>
  {
    sysStatus.solarPowerMode = false;
   d465a:	4b0c      	ldr	r3, [pc, #48]	; (d468c <_Z12setSolarMode6String+0x68>)
   d465c:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded = true;
   d465e:	4b0c      	ldr	r3, [pc, #48]	; (d4690 <_Z12setSolarMode6String+0x6c>)
   d4660:	2401      	movs	r4, #1
   d4662:	701c      	strb	r4, [r3, #0]
    PMICreset();                                                // Change the power management settings
   d4664:	f7ff fde4 	bl	d4230 <_Z9PMICresetv>
   d4668:	4b0a      	ldr	r3, [pc, #40]	; (d4694 <_Z12setSolarMode6String+0x70>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
   d466a:	4a0d      	ldr	r2, [pc, #52]	; (d46a0 <_Z12setSolarMode6String+0x7c>)
   d466c:	781b      	ldrb	r3, [r3, #0]
   d466e:	f88d 5000 	strb.w	r5, [sp]
   d4672:	490c      	ldr	r1, [pc, #48]	; (d46a4 <_Z12setSolarMode6String+0x80>)
   d4674:	a802      	add	r0, sp, #8
   d4676:	f7ff fd2d 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d467a:	a803      	add	r0, sp, #12
   d467c:	f7ff fe68 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4680:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4682:	b005      	add	sp, #20
   d4684:	bd30      	pop	{r4, r5, pc}
   d4686:	bf00      	nop
   d4688:	000dab88 	.word	0x000dab88
   d468c:	2003e308 	.word	0x2003e308
   d4690:	2003e241 	.word	0x2003e241
   d4694:	2003e21c 	.word	0x2003e21c
   d4698:	000daaeb 	.word	0x000daaeb
   d469c:	000dab02 	.word	0x000dab02
   d46a0:	000dab04 	.word	0x000dab04
   d46a4:	000dab1a 	.word	0x000dab1a

000d46a8 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d46a8:	b530      	push	{r4, r5, lr}
   d46aa:	4916      	ldr	r1, [pc, #88]	; (d4704 <_Z14setVerboseMode6String+0x5c>)
   d46ac:	b085      	sub	sp, #20
   d46ae:	4604      	mov	r4, r0
   d46b0:	f002 fc27 	bl	d6f02 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d46b4:	4605      	mov	r5, r0
   d46b6:	b158      	cbz	r0, d46d0 <_Z14setVerboseMode6String+0x28>
  {
    sysStatus.verboseMode = true;
   d46b8:	4b13      	ldr	r3, [pc, #76]	; (d4708 <_Z14setVerboseMode6String+0x60>)
   d46ba:	2401      	movs	r4, #1
   d46bc:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d46be:	4b13      	ldr	r3, [pc, #76]	; (d470c <_Z14setVerboseMode6String+0x64>)
   d46c0:	701c      	strb	r4, [r3, #0]
   d46c2:	4b13      	ldr	r3, [pc, #76]	; (d4710 <_Z14setVerboseMode6String+0x68>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d46c4:	2200      	movs	r2, #0
   d46c6:	781b      	ldrb	r3, [r3, #0]
   d46c8:	f88d 2000 	strb.w	r2, [sp]
   d46cc:	4a11      	ldr	r2, [pc, #68]	; (d4714 <_Z14setVerboseMode6String+0x6c>)
   d46ce:	e00e      	b.n	d46ee <_Z14setVerboseMode6String+0x46>
   d46d0:	4911      	ldr	r1, [pc, #68]	; (d4718 <_Z14setVerboseMode6String+0x70>)
   d46d2:	4620      	mov	r0, r4
   d46d4:	f002 fc15 	bl	d6f02 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d46d8:	b188      	cbz	r0, d46fe <_Z14setVerboseMode6String+0x56>
  {
    sysStatus.verboseMode = false;
   d46da:	4b0b      	ldr	r3, [pc, #44]	; (d4708 <_Z14setVerboseMode6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d46dc:	4a0f      	ldr	r2, [pc, #60]	; (d471c <_Z14setVerboseMode6String+0x74>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
   d46de:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d46e0:	4b0a      	ldr	r3, [pc, #40]	; (d470c <_Z14setVerboseMode6String+0x64>)
   d46e2:	2401      	movs	r4, #1
   d46e4:	701c      	strb	r4, [r3, #0]
   d46e6:	4b0a      	ldr	r3, [pc, #40]	; (d4710 <_Z14setVerboseMode6String+0x68>)
   d46e8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d46ea:	f88d 5000 	strb.w	r5, [sp]
   d46ee:	490c      	ldr	r1, [pc, #48]	; (d4720 <_Z14setVerboseMode6String+0x78>)
   d46f0:	a802      	add	r0, sp, #8
   d46f2:	f7ff fcef 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d46f6:	a803      	add	r0, sp, #12
   d46f8:	f7ff fe2a 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46fc:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d46fe:	b005      	add	sp, #20
   d4700:	bd30      	pop	{r4, r5, pc}
   d4702:	bf00      	nop
   d4704:	000dab88 	.word	0x000dab88
   d4708:	2003e308 	.word	0x2003e308
   d470c:	2003e241 	.word	0x2003e241
   d4710:	2003e21c 	.word	0x2003e21c
   d4714:	000dab1f 	.word	0x000dab1f
   d4718:	000dab02 	.word	0x000dab02
   d471c:	000dab30 	.word	0x000dab30
   d4720:	000dab1a 	.word	0x000dab1a

000d4724 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4724:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4726:	4927      	ldr	r1, [pc, #156]	; (d47c4 <_Z15setLowPowerMode6String+0xa0>)
   d4728:	b085      	sub	sp, #20
   d472a:	4604      	mov	r4, r0
   d472c:	f002 fbe9 	bl	d6f02 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4730:	b928      	cbnz	r0, d473e <_Z15setLowPowerMode6String+0x1a>
   d4732:	4925      	ldr	r1, [pc, #148]	; (d47c8 <_Z15setLowPowerMode6String+0xa4>)
   d4734:	4620      	mov	r0, r4
   d4736:	f002 fbe4 	bl	d6f02 <_ZNK6String6equalsEPKc>
   d473a:	2800      	cmp	r0, #0
   d473c:	d03f      	beq.n	d47be <_Z15setLowPowerMode6String+0x9a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d473e:	4921      	ldr	r1, [pc, #132]	; (d47c4 <_Z15setLowPowerMode6String+0xa0>)
   d4740:	4620      	mov	r0, r4
   d4742:	f002 fbde 	bl	d6f02 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4746:	4605      	mov	r5, r0
   d4748:	b140      	cbz	r0, d475c <_Z15setLowPowerMode6String+0x38>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d474a:	4b20      	ldr	r3, [pc, #128]	; (d47cc <_Z15setLowPowerMode6String+0xa8>)
   d474c:	791a      	ldrb	r2, [r3, #4]
   d474e:	461c      	mov	r4, r3
   d4750:	b112      	cbz	r2, d4758 <_Z15setLowPowerMode6String+0x34>
   d4752:	f001 f8b5 	bl	d58c0 <spark_cloud_flag_connected>
   d4756:	b998      	cbnz	r0, d4780 <_Z15setLowPowerMode6String+0x5c>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4758:	2301      	movs	r3, #1
   d475a:	e00c      	b.n	d4776 <_Z15setLowPowerMode6String+0x52>
   d475c:	491a      	ldr	r1, [pc, #104]	; (d47c8 <_Z15setLowPowerMode6String+0xa4>)
   d475e:	4620      	mov	r0, r4
   d4760:	f002 fbcf 	bl	d6f02 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4764:	b140      	cbz	r0, d4778 <_Z15setLowPowerMode6String+0x54>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d4766:	4b19      	ldr	r3, [pc, #100]	; (d47cc <_Z15setLowPowerMode6String+0xa8>)
   d4768:	791a      	ldrb	r2, [r3, #4]
   d476a:	461c      	mov	r4, r3
   d476c:	b112      	cbz	r2, d4774 <_Z15setLowPowerMode6String+0x50>
   d476e:	f001 f8a7 	bl	d58c0 <spark_cloud_flag_connected>
   d4772:	b9a8      	cbnz	r0, d47a0 <_Z15setLowPowerMode6String+0x7c>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Normal Operations", PRIVATE);
    }
    sysStatus.lowPowerMode = false;
   d4774:	2300      	movs	r3, #0
   d4776:	71a3      	strb	r3, [r4, #6]
  }
  systemStatusWriteNeeded = true;
   d4778:	4b15      	ldr	r3, [pc, #84]	; (d47d0 <_Z15setLowPowerMode6String+0xac>)
   d477a:	2001      	movs	r0, #1
   d477c:	7018      	strb	r0, [r3, #0]
   d477e:	e01e      	b.n	d47be <_Z15setLowPowerMode6String+0x9a>
{
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4780:	f7ff fdae 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4784:	4b13      	ldr	r3, [pc, #76]	; (d47d4 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power", PRIVATE);
   d4786:	4914      	ldr	r1, [pc, #80]	; (d47d8 <_Z15setLowPowerMode6String+0xb4>)
   d4788:	781b      	ldrb	r3, [r3, #0]
   d478a:	2200      	movs	r2, #0
   d478c:	f88d 2000 	strb.w	r2, [sp]
   d4790:	a802      	add	r0, sp, #8
   d4792:	4a12      	ldr	r2, [pc, #72]	; (d47dc <_Z15setLowPowerMode6String+0xb8>)
   d4794:	f7ff fc9e 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4798:	a803      	add	r0, sp, #12
   d479a:	f7ff fdd9 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d479e:	e7db      	b.n	d4758 <_Z15setLowPowerMode6String+0x34>
    sysStatus.lowPowerMode = true;
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d47a0:	f7ff fd9e 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d47a4:	4b0b      	ldr	r3, [pc, #44]	; (d47d4 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Normal Operations", PRIVATE);
   d47a6:	4a0e      	ldr	r2, [pc, #56]	; (d47e0 <_Z15setLowPowerMode6String+0xbc>)
   d47a8:	781b      	ldrb	r3, [r3, #0]
   d47aa:	490b      	ldr	r1, [pc, #44]	; (d47d8 <_Z15setLowPowerMode6String+0xb4>)
   d47ac:	f88d 5000 	strb.w	r5, [sp]
   d47b0:	a802      	add	r0, sp, #8
   d47b2:	f7ff fc8f 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d47b6:	a803      	add	r0, sp, #12
   d47b8:	f7ff fdca 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47bc:	e7da      	b.n	d4774 <_Z15setLowPowerMode6String+0x50>
    }
    sysStatus.lowPowerMode = false;
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d47be:	b005      	add	sp, #20
   d47c0:	bd30      	pop	{r4, r5, pc}
   d47c2:	bf00      	nop
   d47c4:	000dab88 	.word	0x000dab88
   d47c8:	000dab02 	.word	0x000dab02
   d47cc:	2003e308 	.word	0x2003e308
   d47d0:	2003e241 	.word	0x2003e241
   d47d4:	2003e21c 	.word	0x2003e21c
   d47d8:	000dab1a 	.word	0x000dab1a
   d47dc:	000dab45 	.word	0x000dab45
   d47e0:	000dab4f 	.word	0x000dab4f

000d47e4 <_Z11setSolenoid6String>:

int setSolenoid(String command) // Function to force sending data in current hour
{
   d47e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d47e6:	4928      	ldr	r1, [pc, #160]	; (d4888 <_Z11setSolenoid6String+0xa4>)
   d47e8:	4605      	mov	r5, r0
   d47ea:	f002 fb8a 	bl	d6f02 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                           // Open the water valve
   d47ee:	4606      	mov	r6, r0
   d47f0:	b1b0      	cbz	r0, d4820 <_Z11setSolenoid6String+0x3c>
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d47f2:	2101      	movs	r1, #1
   d47f4:	2002      	movs	r0, #2
   d47f6:	f002 fe5c 	bl	d74b2 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d47fa:	2100      	movs	r1, #0
   d47fc:	2003      	movs	r0, #3
   d47fe:	f002 fe58 	bl	d74b2 <digitalWrite>
    delay(holdTimeMillis);
   d4802:	4b22      	ldr	r3, [pc, #136]	; (d488c <_Z11setSolenoid6String+0xa8>)
   d4804:	6818      	ldr	r0, [r3, #0]
   d4806:	f001 f927 	bl	d5a58 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d480a:	2101      	movs	r1, #1
   d480c:	2003      	movs	r0, #3
   d480e:	f002 fe50 	bl	d74b2 <digitalWrite>
   d4812:	4b1f      	ldr	r3, [pc, #124]	; (d4890 <_Z11setSolenoid6String+0xac>)
    Particle.publish("Solenoid","Open the Valve",PRIVATE);
   d4814:	2200      	movs	r2, #0
   d4816:	781b      	ldrb	r3, [r3, #0]
   d4818:	f88d 2000 	strb.w	r2, [sp]
   d481c:	4a1d      	ldr	r2, [pc, #116]	; (d4894 <_Z11setSolenoid6String+0xb0>)
   d481e:	e029      	b.n	d4874 <_Z11setSolenoid6String+0x90>
   d4820:	491d      	ldr	r1, [pc, #116]	; (d4898 <_Z11setSolenoid6String+0xb4>)
   d4822:	4628      	mov	r0, r5
   d4824:	f002 fb6d 	bl	d6f02 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0") {                                      // Disable Solenoid (neither opens or closes)
   d4828:	4604      	mov	r4, r0
   d482a:	b148      	cbz	r0, d4840 <_Z11setSolenoid6String+0x5c>
    digitalWrite(solEnablePin,HIGH);                              // disable the solenoid
   d482c:	2101      	movs	r1, #1
   d482e:	2003      	movs	r0, #3
   d4830:	f002 fe3f 	bl	d74b2 <digitalWrite>
   d4834:	4b16      	ldr	r3, [pc, #88]	; (d4890 <_Z11setSolenoid6String+0xac>)
    Particle.publish("Solenoid","Value Control Disabled",PRIVATE);
   d4836:	4a19      	ldr	r2, [pc, #100]	; (d489c <_Z11setSolenoid6String+0xb8>)
   d4838:	781b      	ldrb	r3, [r3, #0]
   d483a:	f88d 6000 	strb.w	r6, [sp]
   d483e:	e019      	b.n	d4874 <_Z11setSolenoid6String+0x90>
   d4840:	4917      	ldr	r1, [pc, #92]	; (d48a0 <_Z11setSolenoid6String+0xbc>)
   d4842:	4628      	mov	r0, r5
   d4844:	f002 fb5d 	bl	d6f02 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "-1") {                                     // Close the water valve
   d4848:	b1e0      	cbz	r0, d4884 <_Z11setSolenoid6String+0xa0>
    digitalWrite(solDirection,LOW);                               // Close the valve
   d484a:	4621      	mov	r1, r4
   d484c:	2002      	movs	r0, #2
   d484e:	f002 fe30 	bl	d74b2 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4852:	4621      	mov	r1, r4
   d4854:	2003      	movs	r0, #3
   d4856:	f002 fe2c 	bl	d74b2 <digitalWrite>
    delay(holdTimeMillis);
   d485a:	4b0c      	ldr	r3, [pc, #48]	; (d488c <_Z11setSolenoid6String+0xa8>)
   d485c:	6818      	ldr	r0, [r3, #0]
   d485e:	f001 f8fb 	bl	d5a58 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4862:	2101      	movs	r1, #1
   d4864:	2003      	movs	r0, #3
   d4866:	f002 fe24 	bl	d74b2 <digitalWrite>
   d486a:	4b09      	ldr	r3, [pc, #36]	; (d4890 <_Z11setSolenoid6String+0xac>)
    Particle.publish("Solenoid","Close the valve",PRIVATE);
   d486c:	4a0d      	ldr	r2, [pc, #52]	; (d48a4 <_Z11setSolenoid6String+0xc0>)
   d486e:	781b      	ldrb	r3, [r3, #0]
   d4870:	f88d 4000 	strb.w	r4, [sp]
   d4874:	490c      	ldr	r1, [pc, #48]	; (d48a8 <_Z11setSolenoid6String+0xc4>)
   d4876:	a802      	add	r0, sp, #8
   d4878:	f7ff fc2c 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d487c:	a803      	add	r0, sp, #12
   d487e:	f7ff fd67 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4882:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4884:	b004      	add	sp, #16
   d4886:	bd70      	pop	{r4, r5, r6, pc}
   d4888:	000dab88 	.word	0x000dab88
   d488c:	2003e244 	.word	0x2003e244
   d4890:	2003e21c 	.word	0x2003e21c
   d4894:	000dab61 	.word	0x000dab61
   d4898:	000dab02 	.word	0x000dab02
   d489c:	000dab70 	.word	0x000dab70
   d48a0:	000dab87 	.word	0x000dab87
   d48a4:	000dab8a 	.word	0x000dab8a
   d48a8:	000dad01 	.word	0x000dad01

000d48ac <_Z17setHoldTimeMillis6String>:

int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d48ac:	b570      	push	{r4, r5, r6, lr}
   d48ae:	b086      	sub	sp, #24
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d48b0:	a903      	add	r1, sp, #12
   d48b2:	6800      	ldr	r0, [r0, #0]
   d48b4:	f004 fccc 	bl	d9250 <strtof>
  if ((inputDebounce < 0.0) | (inputDebounce > 0.5)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d48b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d48bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48c0:	d431      	bmi.n	d4926 <_Z17setHoldTimeMillis6String+0x7a>
   d48c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d48c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d48ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48ce:	bfcc      	ite	gt
   d48d0:	2501      	movgt	r5, #1
   d48d2:	2500      	movle	r5, #0
   d48d4:	bb3d      	cbnz	r5, d4926 <_Z17setHoldTimeMillis6String+0x7a>
  sysStatus.solenoidHoldTime = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d48d6:	eddf 7a16 	vldr	s15, [pc, #88]	; d4930 <_Z17setHoldTimeMillis6String+0x84>
  systemStatusWriteNeeded = true;
   d48da:	4b16      	ldr	r3, [pc, #88]	; (d4934 <_Z17setHoldTimeMillis6String+0x88>)
int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 0.5)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.solenoidHoldTime = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d48dc:	4e16      	ldr	r6, [pc, #88]	; (d4938 <_Z17setHoldTimeMillis6String+0x8c>)
  systemStatusWriteNeeded = true;
  snprintf(holdTimeStr,sizeof(holdTimeStr),"%i mSec",holdTimeMillis);
   d48de:	4a17      	ldr	r2, [pc, #92]	; (d493c <_Z17setHoldTimeMillis6String+0x90>)
   d48e0:	4817      	ldr	r0, [pc, #92]	; (d4940 <_Z17setHoldTimeMillis6String+0x94>)
int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 0.5)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.solenoidHoldTime = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d48e2:	ee20 0a27 	vmul.f32	s0, s0, s15
  systemStatusWriteNeeded = true;
   d48e6:	2401      	movs	r4, #1
   d48e8:	701c      	strb	r4, [r3, #0]
  snprintf(holdTimeStr,sizeof(holdTimeStr),"%i mSec",holdTimeMillis);
   d48ea:	4b16      	ldr	r3, [pc, #88]	; (d4944 <_Z17setHoldTimeMillis6String+0x98>)
int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 0.5)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.solenoidHoldTime = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d48ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  systemStatusWriteNeeded = true;
  snprintf(holdTimeStr,sizeof(holdTimeStr),"%i mSec",holdTimeMillis);
   d48f0:	681b      	ldr	r3, [r3, #0]
int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 0.5)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.solenoidHoldTime = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d48f2:	ed86 0a05 	vstr	s0, [r6, #20]
  systemStatusWriteNeeded = true;
  snprintf(holdTimeStr,sizeof(holdTimeStr),"%i mSec",holdTimeMillis);
   d48f6:	2110      	movs	r1, #16
   d48f8:	f001 f88a 	bl	d5a10 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d48fc:	7933      	ldrb	r3, [r6, #4]
   d48fe:	b1a3      	cbz	r3, d492a <_Z17setHoldTimeMillis6String+0x7e>
   d4900:	f000 ffde 	bl	d58c0 <spark_cloud_flag_connected>
   d4904:	b188      	cbz	r0, d492a <_Z17setHoldTimeMillis6String+0x7e>
    waitUntil(meterParticlePublish);
   d4906:	f7ff fceb 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d490a:	4b0f      	ldr	r3, [pc, #60]	; (d4948 <_Z17setHoldTimeMillis6String+0x9c>)
    Particle.publish("HoldTime",holdTimeStr, PRIVATE);
   d490c:	4a0c      	ldr	r2, [pc, #48]	; (d4940 <_Z17setHoldTimeMillis6String+0x94>)
   d490e:	781b      	ldrb	r3, [r3, #0]
   d4910:	490e      	ldr	r1, [pc, #56]	; (d494c <_Z17setHoldTimeMillis6String+0xa0>)
   d4912:	f88d 5000 	strb.w	r5, [sp]
   d4916:	a804      	add	r0, sp, #16
   d4918:	f7ff fbdc 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d491c:	a805      	add	r0, sp, #20
   d491e:	f7ff fd17 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4922:	4620      	mov	r0, r4
   d4924:	e002      	b.n	d492c <_Z17setHoldTimeMillis6String+0x80>

int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 0.5)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4926:	2000      	movs	r0, #0
   d4928:	e000      	b.n	d492c <_Z17setHoldTimeMillis6String+0x80>
  snprintf(holdTimeStr,sizeof(holdTimeStr),"%i mSec",holdTimeMillis);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("HoldTime",holdTimeStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d492a:	2001      	movs	r0, #1
}
   d492c:	b006      	add	sp, #24
   d492e:	bd70      	pop	{r4, r5, r6, pc}
   d4930:	447a0000 	.word	0x447a0000
   d4934:	2003e241 	.word	0x2003e241
   d4938:	2003e308 	.word	0x2003e308
   d493c:	000dab9a 	.word	0x000dab9a
   d4940:	2003e2f8 	.word	0x2003e2f8
   d4944:	2003e244 	.word	0x2003e244
   d4948:	2003e21c 	.word	0x2003e21c
   d494c:	000dad0d 	.word	0x000dad0d

000d4950 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
   d4950:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4952:	4d16      	ldr	r5, [pc, #88]	; (d49ac <_Z22publishStateTransitionv+0x5c>)
   d4954:	4c16      	ldr	r4, [pc, #88]	; (d49b0 <_Z22publishStateTransitionv+0x60>)
   d4956:	4917      	ldr	r1, [pc, #92]	; (d49b4 <_Z22publishStateTransitionv+0x64>)
   d4958:	782a      	ldrb	r2, [r5, #0]
   d495a:	7820      	ldrb	r0, [r4, #0]
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}

void publishStateTransition(void)
{
   d495c:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d495e:	230e      	movs	r3, #14
   d4960:	fb03 1202 	mla	r2, r3, r2, r1
   d4964:	9200      	str	r2, [sp, #0]
   d4966:	fb03 1300 	mla	r3, r3, r0, r1
   d496a:	4a13      	ldr	r2, [pc, #76]	; (d49b8 <_Z22publishStateTransitionv+0x68>)
   d496c:	2128      	movs	r1, #40	; 0x28
   d496e:	a804      	add	r0, sp, #16
   d4970:	f001 f84e 	bl	d5a10 <snprintf>
  oldState = state;
   d4974:	782b      	ldrb	r3, [r5, #0]
   d4976:	7023      	strb	r3, [r4, #0]
   d4978:	f000 ffa2 	bl	d58c0 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d497c:	b170      	cbz	r0, d499c <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d497e:	f7ff fcaf 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4982:	4b0e      	ldr	r3, [pc, #56]	; (d49bc <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4984:	490e      	ldr	r1, [pc, #56]	; (d49c0 <_Z22publishStateTransitionv+0x70>)
   d4986:	781b      	ldrb	r3, [r3, #0]
   d4988:	2200      	movs	r2, #0
   d498a:	f88d 2000 	strb.w	r2, [sp]
   d498e:	a802      	add	r0, sp, #8
   d4990:	aa04      	add	r2, sp, #16
   d4992:	f7ff fb9f 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4996:	a803      	add	r0, sp, #12
   d4998:	f7ff fcda 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d499c:	f002 fcac 	bl	d72f8 <_Z16_fetch_usbserialv>
   d49a0:	a904      	add	r1, sp, #16
   d49a2:	f002 f9a9 	bl	d6cf8 <_ZN5Print7printlnEPKc>
}
   d49a6:	b00f      	add	sp, #60	; 0x3c
   d49a8:	bd30      	pop	{r4, r5, pc}
   d49aa:	bf00      	nop
   d49ac:	2003e242 	.word	0x2003e242
   d49b0:	2003e240 	.word	0x2003e240
   d49b4:	2003e07c 	.word	0x2003e07c
   d49b8:	000daba2 	.word	0x000daba2
   d49bc:	2003e21c 	.word	0x2003e21c
   d49c0:	000dabb0 	.word	0x000dabb0

000d49c4 <loop>:
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
    Serial.println(StartupMessage);
}

void loop()
{
   d49c4:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d49c6:	4c8c      	ldr	r4, [pc, #560]	; (d4bf8 <loop+0x234>)
   d49c8:	7823      	ldrb	r3, [r4, #0]
   d49ca:	3b01      	subs	r3, #1
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
    Serial.println(StartupMessage);
}

void loop()
{
   d49cc:	b088      	sub	sp, #32
  switch(state) {
   d49ce:	2b06      	cmp	r3, #6
   d49d0:	f200 81f1 	bhi.w	d4db6 <loop+0x3f2>
   d49d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d49d8:	0007017a 	.word	0x0007017a
   d49dc:	006e003f 	.word	0x006e003f
   d49e0:	00c0008f 	.word	0x00c0008f
   d49e4:	0138      	.short	0x0138
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d49e6:	4d85      	ldr	r5, [pc, #532]	; (d4bfc <loop+0x238>)
   d49e8:	792b      	ldrb	r3, [r5, #4]
   d49ea:	b12b      	cbz	r3, d49f8 <loop+0x34>
   d49ec:	4b84      	ldr	r3, [pc, #528]	; (d4c00 <loop+0x23c>)
   d49ee:	781b      	ldrb	r3, [r3, #0]
   d49f0:	2b02      	cmp	r3, #2
   d49f2:	d001      	beq.n	d49f8 <loop+0x34>
   d49f4:	f7ff ffac 	bl	d4950 <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d49f8:	4b82      	ldr	r3, [pc, #520]	; (d4c04 <loop+0x240>)
   d49fa:	781b      	ldrb	r3, [r3, #0]
   d49fc:	b133      	cbz	r3, d4a0c <loop+0x48>
   d49fe:	f002 fd9b 	bl	d7538 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4a02:	2220      	movs	r2, #32
   d4a04:	497d      	ldr	r1, [pc, #500]	; (d4bfc <loop+0x238>)
   d4a06:	2001      	movs	r0, #1
   d4a08:	f000 fd7c 	bl	d5504 <HAL_EEPROM_Put>
    if (currentStatusWriteNeeded) EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d4a0c:	4b7e      	ldr	r3, [pc, #504]	; (d4c08 <loop+0x244>)
   d4a0e:	781b      	ldrb	r3, [r3, #0]
   d4a10:	b133      	cbz	r3, d4a20 <loop+0x5c>
   d4a12:	f002 fd91 	bl	d7538 <_Z21__fetch_global_EEPROMv>
   d4a16:	2220      	movs	r2, #32
   d4a18:	497c      	ldr	r1, [pc, #496]	; (d4c0c <loop+0x248>)
   d4a1a:	2050      	movs	r0, #80	; 0x50
   d4a1c:	f000 fd72 	bl	d5504 <HAL_EEPROM_Put>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;
   d4a20:	79ab      	ldrb	r3, [r5, #6]
   d4a22:	b143      	cbz	r3, d4a36 <loop+0x72>
   d4a24:	f000 fd46 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
   d4a28:	4b79      	ldr	r3, [pc, #484]	; (d4c10 <loop+0x24c>)
   d4a2a:	681b      	ldr	r3, [r3, #0]
   d4a2c:	1ac0      	subs	r0, r0, r3
   d4a2e:	4b79      	ldr	r3, [pc, #484]	; (d4c14 <loop+0x250>)
   d4a30:	4298      	cmp	r0, r3
   d4a32:	f200 81bd 	bhi.w	d4db0 <loop+0x3ec>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;     // We want to report on the hour but not after bedtime
   d4a36:	f002 fb61 	bl	d70fc <_ZN9TimeClass4hourEv>
   d4a3a:	4b77      	ldr	r3, [pc, #476]	; (d4c18 <loop+0x254>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
   d4a3c:	68aa      	ldr	r2, [r5, #8]
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
    if (systemStatusWriteNeeded) EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
    if (currentStatusWriteNeeded) EEPROM.put(MEM_MAP::currentStatusAddr ,current);
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;     // We want to report on the hour but not after bedtime
   d4a3e:	781b      	ldrb	r3, [r3, #0]
   d4a40:	4298      	cmp	r0, r3
   d4a42:	bf1c      	itt	ne
   d4a44:	2303      	movne	r3, #3
   d4a46:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
   d4a48:	4b74      	ldr	r3, [pc, #464]	; (d4c1c <loop+0x258>)
   d4a4a:	681b      	ldr	r3, [r3, #0]
   d4a4c:	429a      	cmp	r2, r3
   d4a4e:	f300 81b2 	bgt.w	d4db6 <loop+0x3f2>
   d4a52:	2307      	movs	r3, #7
   d4a54:	e02c      	b.n	d4ab0 <loop+0xec>
    break;

  case MEASURING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4a56:	4b69      	ldr	r3, [pc, #420]	; (d4bfc <loop+0x238>)
   d4a58:	791a      	ldrb	r2, [r3, #4]
   d4a5a:	461d      	mov	r5, r3
   d4a5c:	b12a      	cbz	r2, d4a6a <loop+0xa6>
   d4a5e:	4b68      	ldr	r3, [pc, #416]	; (d4c00 <loop+0x23c>)
   d4a60:	781b      	ldrb	r3, [r3, #0]
   d4a62:	2b03      	cmp	r3, #3
   d4a64:	d001      	beq.n	d4a6a <loop+0xa6>
   d4a66:	f7ff ff73 	bl	d4950 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4a6a:	f7ff fd21 	bl	d44b0 <_Z16takeMeasurementsv>
   d4a6e:	4606      	mov	r6, r0
   d4a70:	b9e8      	cbnz	r0, d4aae <loop+0xea>
    {
      state = ERROR_STATE;
   d4a72:	2301      	movs	r3, #1
   d4a74:	7023      	strb	r3, [r4, #0]
   d4a76:	f000 fd1d 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4a7a:	4b69      	ldr	r3, [pc, #420]	; (d4c20 <loop+0x25c>)
   d4a7c:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d4a7e:	792b      	ldrb	r3, [r5, #4]
   d4a80:	2b00      	cmp	r3, #0
   d4a82:	f000 8198 	beq.w	d4db6 <loop+0x3f2>
   d4a86:	f000 ff1b 	bl	d58c0 <spark_cloud_flag_connected>
   d4a8a:	2800      	cmp	r0, #0
   d4a8c:	f000 8193 	beq.w	d4db6 <loop+0x3f2>
        waitUntil(meterParticlePublish);
   d4a90:	f7ff fc26 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4a94:	4b63      	ldr	r3, [pc, #396]	; (d4c24 <loop+0x260>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4a96:	4a64      	ldr	r2, [pc, #400]	; (d4c28 <loop+0x264>)
   d4a98:	781b      	ldrb	r3, [r3, #0]
   d4a9a:	4964      	ldr	r1, [pc, #400]	; (d4c2c <loop+0x268>)
   d4a9c:	f88d 6000 	strb.w	r6, [sp]
   d4aa0:	a806      	add	r0, sp, #24
   d4aa2:	f7ff fb17 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4aa6:	a807      	add	r0, sp, #28
   d4aa8:	f7ff fc52 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4aac:	e183      	b.n	d4db6 <loop+0x3f2>
      }
    }
    else state = REPORTING_STATE;
   d4aae:	2304      	movs	r3, #4
   d4ab0:	7023      	strb	r3, [r4, #0]
   d4ab2:	e180      	b.n	d4db6 <loop+0x3f2>
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ab4:	4b51      	ldr	r3, [pc, #324]	; (d4bfc <loop+0x238>)
   d4ab6:	791b      	ldrb	r3, [r3, #4]
   d4ab8:	b12b      	cbz	r3, d4ac6 <loop+0x102>
   d4aba:	4b51      	ldr	r3, [pc, #324]	; (d4c00 <loop+0x23c>)
   d4abc:	781b      	ldrb	r3, [r3, #0]
   d4abe:	2b04      	cmp	r3, #4
   d4ac0:	d001      	beq.n	d4ac6 <loop+0x102>
   d4ac2:	f7ff ff45 	bl	d4950 <_Z22publishStateTransitionv>
   d4ac6:	f000 fefb 	bl	d58c0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4aca:	b168      	cbz	r0, d4ae8 <loop+0x124>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
   d4acc:	f002 fb16 	bl	d70fc <_ZN9TimeClass4hourEv>
   d4ad0:	280c      	cmp	r0, #12
   d4ad2:	d105      	bne.n	d4ae0 <loop+0x11c>
   d4ad4:	f000 fef4 	bl	d58c0 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4ad8:	b110      	cbz	r0, d4ae0 <loop+0x11c>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4ada:	2000      	movs	r0, #0
   d4adc:	f000 ff10 	bl	d5900 <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
   d4ae0:	f7ff fc4c 	bl	d437c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d4ae4:	2305      	movs	r3, #5
   d4ae6:	e7e3      	b.n	d4ab0 <loop+0xec>
    }
    else if (!connectToParticle()) state = ERROR_STATE;                   // In case we timed out on our 1st attempt to connect
   d4ae8:	f7ff fb32 	bl	d4150 <_Z17connectToParticlev>
   d4aec:	2800      	cmp	r0, #0
   d4aee:	f040 8162 	bne.w	d4db6 <loop+0x3f2>
   d4af2:	2301      	movs	r3, #1
   d4af4:	e7dc      	b.n	d4ab0 <loop+0xec>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4af6:	4b41      	ldr	r3, [pc, #260]	; (d4bfc <loop+0x238>)
   d4af8:	791b      	ldrb	r3, [r3, #4]
   d4afa:	b12b      	cbz	r3, d4b08 <loop+0x144>
   d4afc:	4b40      	ldr	r3, [pc, #256]	; (d4c00 <loop+0x23c>)
   d4afe:	781b      	ldrb	r3, [r3, #0]
   d4b00:	2b05      	cmp	r3, #5
   d4b02:	d001      	beq.n	d4b08 <loop+0x144>
   d4b04:	f7ff ff24 	bl	d4950 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4b08:	4b49      	ldr	r3, [pc, #292]	; (d4c30 <loop+0x26c>)
   d4b0a:	781b      	ldrb	r3, [r3, #0]
   d4b0c:	b923      	cbnz	r3, d4b18 <loop+0x154>
   d4b0e:	f000 fcd1 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d4b12:	4b3f      	ldr	r3, [pc, #252]	; (d4c10 <loop+0x24c>)
   d4b14:	6018      	str	r0, [r3, #0]
   d4b16:	e06d      	b.n	d4bf4 <loop+0x230>
   d4b18:	f000 fccc 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4b1c:	4b45      	ldr	r3, [pc, #276]	; (d4c34 <loop+0x270>)
   d4b1e:	681b      	ldr	r3, [r3, #0]
   d4b20:	1ac0      	subs	r0, r0, r3
   d4b22:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4b26:	4298      	cmp	r0, r3
   d4b28:	f240 8145 	bls.w	d4db6 <loop+0x3f2>
   d4b2c:	f000 fcc2 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b30:	4b3b      	ldr	r3, [pc, #236]	; (d4c20 <loop+0x25c>)
   d4b32:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b34:	f000 fec4 	bl	d58c0 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4b38:	2800      	cmp	r0, #0
   d4b3a:	d0da      	beq.n	d4af2 <loop+0x12e>
   d4b3c:	4b39      	ldr	r3, [pc, #228]	; (d4c24 <loop+0x260>)
   d4b3e:	493e      	ldr	r1, [pc, #248]	; (d4c38 <loop+0x274>)
   d4b40:	781b      	ldrb	r3, [r3, #0]
   d4b42:	2200      	movs	r2, #0
   d4b44:	f88d 2000 	strb.w	r2, [sp]
   d4b48:	a806      	add	r0, sp, #24
   d4b4a:	4a3c      	ldr	r2, [pc, #240]	; (d4c3c <loop+0x278>)
   d4b4c:	f7ff fac2 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4b50:	a807      	add	r0, sp, #28
   d4b52:	f7ff fbfd 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b56:	e7cc      	b.n	d4af2 <loop+0x12e>
      state = ERROR_STATE;                                            // Response timed out
    }
    break;

  case NAPPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4b58:	4b28      	ldr	r3, [pc, #160]	; (d4bfc <loop+0x238>)
   d4b5a:	791a      	ldrb	r2, [r3, #4]
   d4b5c:	461d      	mov	r5, r3
   d4b5e:	b12a      	cbz	r2, d4b6c <loop+0x1a8>
   d4b60:	4b27      	ldr	r3, [pc, #156]	; (d4c00 <loop+0x23c>)
   d4b62:	781b      	ldrb	r3, [r3, #0]
   d4b64:	2b06      	cmp	r3, #6
   d4b66:	d001      	beq.n	d4b6c <loop+0x1a8>
   d4b68:	f7ff fef2 	bl	d4950 <_Z22publishStateTransitionv>
   d4b6c:	f000 fea8 	bl	d58c0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4b70:	b1b0      	cbz	r0, d4ba0 <loop+0x1dc>
      if (sysStatus.verboseMode) {
   d4b72:	792b      	ldrb	r3, [r5, #4]
   d4b74:	b173      	cbz	r3, d4b94 <loop+0x1d0>
        waitUntil(meterParticlePublish);
   d4b76:	f7ff fbb3 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4b7a:	4b2a      	ldr	r3, [pc, #168]	; (d4c24 <loop+0x260>)
        Particle.publish("State","Going to Sleep",PRIVATE);
   d4b7c:	492b      	ldr	r1, [pc, #172]	; (d4c2c <loop+0x268>)
   d4b7e:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4b80:	2200      	movs	r2, #0
   d4b82:	f88d 2000 	strb.w	r2, [sp]
   d4b86:	a806      	add	r0, sp, #24
   d4b88:	4a2d      	ldr	r2, [pc, #180]	; (d4c40 <loop+0x27c>)
   d4b8a:	f7ff faa3 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4b8e:	a807      	add	r0, sp, #28
   d4b90:	f7ff fbde 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d4b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4b98:	f000 ff5e 	bl	d5a58 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d4b9c:	f7ff fb1c 	bl	d41d8 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d4ba0:	2100      	movs	r1, #0
   d4ba2:	2007      	movs	r0, #7
   d4ba4:	f002 fc85 	bl	d74b2 <digitalWrite>
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d4ba8:	2100      	movs	r1, #0
   d4baa:	200e      	movs	r0, #14
   d4bac:	f002 fc81 	bl	d74b2 <digitalWrite>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d4bb0:	f002 faae 	bl	d7110 <_ZN9TimeClass6minuteEv>
   d4bb4:	4b23      	ldr	r3, [pc, #140]	; (d4c44 <loop+0x280>)
   d4bb6:	681a      	ldr	r2, [r3, #0]
   d4bb8:	2304      	movs	r3, #4
   d4bba:	f8ad 3014 	strh.w	r3, [sp, #20]
   d4bbe:	ab08      	add	r3, sp, #32
   d4bc0:	2100      	movs	r1, #0
   d4bc2:	f803 1d0e 	strb.w	r1, [r3, #-14]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4bc6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4bca:	9202      	str	r2, [sp, #8]
   d4bcc:	223c      	movs	r2, #60	; 0x3c
   d4bce:	2501      	movs	r5, #1
   d4bd0:	4350      	muls	r0, r2
   d4bd2:	9001      	str	r0, [sp, #4]
   d4bd4:	462a      	mov	r2, r5
   d4bd6:	a905      	add	r1, sp, #20
   d4bd8:	a806      	add	r0, sp, #24
   d4bda:	9500      	str	r5, [sp, #0]
   d4bdc:	f002 f9f4 	bl	d6fc8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch, CHANGE, secondsToHour);                    // Sleep till the next hour, then wakes and continues execution - Stop mode
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d4be0:	4629      	mov	r1, r5
   d4be2:	2007      	movs	r0, #7
   d4be4:	f002 fc65 	bl	d74b2 <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d4be8:	4629      	mov	r1, r5
   d4bea:	200e      	movs	r0, #14
   d4bec:	f002 fc61 	bl	d74b2 <digitalWrite>
    connectToParticle();                                                // Wakey Wakey and get connected.
   d4bf0:	f7ff faae 	bl	d4150 <_Z17connectToParticlev>
    state = IDLE_STATE;                                                 // Awake now, we need to go back to the IDLE state for next tasking
   d4bf4:	2302      	movs	r3, #2
   d4bf6:	e75b      	b.n	d4ab0 <loop+0xec>
   d4bf8:	2003e242 	.word	0x2003e242
   d4bfc:	2003e308 	.word	0x2003e308
   d4c00:	2003e240 	.word	0x2003e240
   d4c04:	2003e241 	.word	0x2003e241
   d4c08:	2003e248 	.word	0x2003e248
   d4c0c:	2003e2b8 	.word	0x2003e2b8
   d4c10:	2003e26c 	.word	0x2003e26c
   d4c14:	00015f90 	.word	0x00015f90
   d4c18:	2003e258 	.word	0x2003e258
   d4c1c:	2003e214 	.word	0x2003e214
   d4c20:	2003e2b4 	.word	0x2003e2b4
   d4c24:	2003e21c 	.word	0x2003e21c
   d4c28:	000dac53 	.word	0x000dac53
   d4c2c:	000dabe9 	.word	0x000dabe9
   d4c30:	2003e0ec 	.word	0x2003e0ec
   d4c34:	2003e218 	.word	0x2003e218
   d4c38:	000dabc1 	.word	0x000dabc1
   d4c3c:	000da9a5 	.word	0x000da9a5
   d4c40:	000dabda 	.word	0x000dabda
   d4c44:	2003e25c 	.word	0x2003e25c
    } break;

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4c48:	4b5c      	ldr	r3, [pc, #368]	; (d4dbc <loop+0x3f8>)
   d4c4a:	791a      	ldrb	r2, [r3, #4]
   d4c4c:	461d      	mov	r5, r3
   d4c4e:	b12a      	cbz	r2, d4c5c <loop+0x298>
   d4c50:	4b5b      	ldr	r3, [pc, #364]	; (d4dc0 <loop+0x3fc>)
   d4c52:	781b      	ldrb	r3, [r3, #0]
   d4c54:	2b07      	cmp	r3, #7
   d4c56:	d001      	beq.n	d4c5c <loop+0x298>
   d4c58:	f7ff fe7a 	bl	d4950 <_Z22publishStateTransitionv>
   d4c5c:	f000 fe30 	bl	d58c0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c60:	b1b0      	cbz	r0, d4c90 <loop+0x2cc>
      if (sysStatus.verboseMode) {
   d4c62:	792b      	ldrb	r3, [r5, #4]
   d4c64:	b173      	cbz	r3, d4c84 <loop+0x2c0>
        waitUntil(meterParticlePublish);
   d4c66:	f7ff fb3b 	bl	d42e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4c6a:	4b56      	ldr	r3, [pc, #344]	; (d4dc4 <loop+0x400>)
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d4c6c:	4956      	ldr	r1, [pc, #344]	; (d4dc8 <loop+0x404>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4c6e:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4c70:	2200      	movs	r2, #0
   d4c72:	f88d 2000 	strb.w	r2, [sp]
   d4c76:	a806      	add	r0, sp, #24
   d4c78:	4a54      	ldr	r2, [pc, #336]	; (d4dcc <loop+0x408>)
   d4c7a:	f7ff fa2b 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4c7e:	a807      	add	r0, sp, #28
   d4c80:	f7ff fb66 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d4c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4c88:	f000 fee6 	bl	d5a58 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d4c8c:	f7ff faa4 	bl	d41d8 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d4c90:	2100      	movs	r1, #0
   d4c92:	2007      	movs	r0, #7
   d4c94:	f002 fc0d 	bl	d74b2 <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
   d4c98:	f002 fa3a 	bl	d7110 <_ZN9TimeClass6minuteEv>
   d4c9c:	4b4c      	ldr	r3, [pc, #304]	; (d4dd0 <loop+0x40c>)
   d4c9e:	681a      	ldr	r2, [r3, #0]
   d4ca0:	2304      	movs	r3, #4
   d4ca2:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4ca6:	ab08      	add	r3, sp, #32
   d4ca8:	2502      	movs	r5, #2
   d4caa:	f803 5d0d 	strb.w	r5, [r3, #-13]!
   d4cae:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4cb2:	9202      	str	r2, [sp, #8]
   d4cb4:	223c      	movs	r2, #60	; 0x3c
   d4cb6:	4350      	muls	r0, r2
   d4cb8:	2201      	movs	r2, #1
   d4cba:	9001      	str	r0, [sp, #4]
   d4cbc:	9200      	str	r2, [sp, #0]
   d4cbe:	f10d 0116 	add.w	r1, sp, #22
   d4cc2:	a806      	add	r0, sp, #24
   d4cc4:	f002 f980 	bl	d6fc8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch,FALLING,secondsToHour);                     // Very deep sleep till the next hour - then resets
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d4cc8:	7025      	strb	r5, [r4, #0]
    } break;
   d4cca:	e074      	b.n	d4db6 <loop+0x3f2>

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ccc:	4c3b      	ldr	r4, [pc, #236]	; (d4dbc <loop+0x3f8>)
   d4cce:	7923      	ldrb	r3, [r4, #4]
   d4cd0:	b12b      	cbz	r3, d4cde <loop+0x31a>
   d4cd2:	4b3b      	ldr	r3, [pc, #236]	; (d4dc0 <loop+0x3fc>)
   d4cd4:	781b      	ldrb	r3, [r3, #0]
   d4cd6:	2b01      	cmp	r3, #1
   d4cd8:	d001      	beq.n	d4cde <loop+0x31a>
   d4cda:	f7ff fe39 	bl	d4950 <_Z22publishStateTransitionv>
   d4cde:	f000 fbe9 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4ce2:	4b3c      	ldr	r3, [pc, #240]	; (d4dd4 <loop+0x410>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d4cea:	3330      	adds	r3, #48	; 0x30
   d4cec:	4298      	cmp	r0, r3
   d4cee:	d962      	bls.n	d4db6 <loop+0x3f2>
    {
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d4cf0:	69a3      	ldr	r3, [r4, #24]
   d4cf2:	2b03      	cmp	r3, #3
   d4cf4:	dc14      	bgt.n	d4d20 <loop+0x35c>
   d4cf6:	f000 fde3 	bl	d58c0 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4cfa:	b160      	cbz	r0, d4d16 <loop+0x352>
   d4cfc:	4b31      	ldr	r3, [pc, #196]	; (d4dc4 <loop+0x400>)
   d4cfe:	4932      	ldr	r1, [pc, #200]	; (d4dc8 <loop+0x404>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4d00:	781b      	ldrb	r3, [r3, #0]
   d4d02:	2200      	movs	r2, #0
   d4d04:	f88d 2000 	strb.w	r2, [sp]
   d4d08:	a806      	add	r0, sp, #24
   d4d0a:	4a33      	ldr	r2, [pc, #204]	; (d4dd8 <loop+0x414>)
   d4d0c:	f7ff f9e2 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4d10:	a807      	add	r0, sp, #28
   d4d12:	f7ff fb1d 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4d16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d1a:	f000 fe9d 	bl	d5a58 <delay>
   d4d1e:	e024      	b.n	d4d6a <loop+0x3a6>
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d4d20:	f002 f9e4 	bl	d70ec <_ZN9TimeClass3nowEv>
   d4d24:	4b25      	ldr	r3, [pc, #148]	; (d4dbc <loop+0x3f8>)
   d4d26:	69db      	ldr	r3, [r3, #28]
   d4d28:	1ac0      	subs	r0, r0, r3
   d4d2a:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d4d2e:	d91f      	bls.n	d4d70 <loop+0x3ac>
   d4d30:	f000 fdc6 	bl	d58c0 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d4d34:	b160      	cbz	r0, d4d50 <loop+0x38c>
   d4d36:	4b23      	ldr	r3, [pc, #140]	; (d4dc4 <loop+0x400>)
   d4d38:	4923      	ldr	r1, [pc, #140]	; (d4dc8 <loop+0x404>)
   d4d3a:	781b      	ldrb	r3, [r3, #0]
   d4d3c:	2200      	movs	r2, #0
   d4d3e:	f88d 2000 	strb.w	r2, [sp]
   d4d42:	a806      	add	r0, sp, #24
   d4d44:	4a25      	ldr	r2, [pc, #148]	; (d4ddc <loop+0x418>)
   d4d46:	f7ff f9c5 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4d4a:	a807      	add	r0, sp, #28
   d4d4c:	f7ff fb00 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4d50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d54:	f000 fe80 	bl	d5a58 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d4d58:	2300      	movs	r3, #0
   d4d5a:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d4d5c:	f002 fbec 	bl	d7538 <_Z21__fetch_global_EEPROMv>
   d4d60:	2220      	movs	r2, #32
   d4d62:	4916      	ldr	r1, [pc, #88]	; (d4dbc <loop+0x3f8>)
   d4d64:	2001      	movs	r0, #1
   d4d66:	f000 fbcd 	bl	d5504 <HAL_EEPROM_Put>
        System.reset();
   d4d6a:	f002 f8f9 	bl	d6f60 <_ZN11SystemClass5resetEv>
   d4d6e:	e022      	b.n	d4db6 <loop+0x3f2>
   d4d70:	f000 fda6 	bl	d58c0 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d4d74:	b160      	cbz	r0, d4d90 <loop+0x3cc>
   d4d76:	4b13      	ldr	r3, [pc, #76]	; (d4dc4 <loop+0x400>)
   d4d78:	4913      	ldr	r1, [pc, #76]	; (d4dc8 <loop+0x404>)
   d4d7a:	781b      	ldrb	r3, [r3, #0]
   d4d7c:	2200      	movs	r2, #0
   d4d7e:	f88d 2000 	strb.w	r2, [sp]
   d4d82:	a806      	add	r0, sp, #24
   d4d84:	4a16      	ldr	r2, [pc, #88]	; (d4de0 <loop+0x41c>)
   d4d86:	f7ff f9a5 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d4d8a:	a807      	add	r0, sp, #28
   d4d8c:	f7ff fae0 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4d90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d94:	f000 fe60 	bl	d5a58 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d4d98:	2300      	movs	r3, #0
   d4d9a:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d4d9c:	f002 fbcc 	bl	d7538 <_Z21__fetch_global_EEPROMv>
   d4da0:	2220      	movs	r2, #32
   d4da2:	4906      	ldr	r1, [pc, #24]	; (d4dbc <loop+0x3f8>)
   d4da4:	2001      	movs	r0, #1
   d4da6:	f000 fbad 	bl	d5504 <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d4daa:	f7ff faa5 	bl	d42f8 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d4dae:	e002      	b.n	d4db6 <loop+0x3f2>
  switch(state) {
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
    if (systemStatusWriteNeeded) EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
    if (currentStatusWriteNeeded) EEPROM.put(MEM_MAP::currentStatusAddr ,current);
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;
   d4db0:	2306      	movs	r3, #6
   d4db2:	7023      	strb	r3, [r4, #0]
   d4db4:	e63f      	b.n	d4a36 <loop+0x72>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d4db6:	b008      	add	sp, #32
   d4db8:	bd70      	pop	{r4, r5, r6, pc}
   d4dba:	bf00      	nop
   d4dbc:	2003e308 	.word	0x2003e308
   d4dc0:	2003e240 	.word	0x2003e240
   d4dc4:	2003e21c 	.word	0x2003e21c
   d4dc8:	000dabe9 	.word	0x000dabe9
   d4dcc:	000dabef 	.word	0x000dabef
   d4dd0:	2003e25c 	.word	0x2003e25c
   d4dd4:	2003e2b4 	.word	0x2003e2b4
   d4dd8:	000dac06 	.word	0x000dac06
   d4ddc:	000dac1a 	.word	0x000dac1a
   d4de0:	000dac34 	.word	0x000dac34

000d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4de4:	2300      	movs	r3, #0
   d4de6:	2204      	movs	r2, #4
   d4de8:	f000 bd42 	b.w	d5870 <spark_variable>

000d4dec <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>:
   d4dec:	2300      	movs	r3, #0
   d4dee:	2202      	movs	r2, #2
   d4df0:	f000 bd3e 	b.w	d5870 <spark_variable>

000d4df4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4df4:	4602      	mov	r2, r0
   d4df6:	4801      	ldr	r0, [pc, #4]	; (d4dfc <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4df8:	f000 bfd1 	b.w	d5d9e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4dfc:	000d5d73 	.word	0x000d5d73

000d4e00 <setup>:
// Battery monitoring
int lowBattLimit;                                   // Trigger for Low Batt State


void setup()                                                      // Note: Disconnected Setup()
{
   d4e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e04:	4baf      	ldr	r3, [pc, #700]	; (d50c4 <setup+0x2c4>)
// Battery monitoring
int lowBattLimit;                                   // Trigger for Low Batt State


void setup()                                                      // Note: Disconnected Setup()
{
   d4e06:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e08:	aa08      	add	r2, sp, #32
   d4e0a:	f103 0510 	add.w	r5, r3, #16
   d4e0e:	4616      	mov	r6, r2
   d4e10:	6818      	ldr	r0, [r3, #0]
   d4e12:	6859      	ldr	r1, [r3, #4]
   d4e14:	4614      	mov	r4, r2
   d4e16:	c403      	stmia	r4!, {r0, r1}
   d4e18:	3308      	adds	r3, #8
   d4e1a:	42ab      	cmp	r3, r5
   d4e1c:	4622      	mov	r2, r4
   d4e1e:	d1f7      	bne.n	d4e10 <setup+0x10>
   d4e20:	8819      	ldrh	r1, [r3, #0]
   d4e22:	789b      	ldrb	r3, [r3, #2]
   d4e24:	8021      	strh	r1, [r4, #0]
   d4e26:	70a3      	strb	r3, [r4, #2]
   d4e28:	222d      	movs	r2, #45	; 0x2d
   d4e2a:	2100      	movs	r1, #0
   d4e2c:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d4e30:	f003 fb63 	bl	d84fa <memset>
  state = IDLE_STATE;
   d4e34:	4aa4      	ldr	r2, [pc, #656]	; (d50c8 <setup+0x2c8>)
   d4e36:	2302      	movs	r3, #2
   d4e38:	7013      	strb	r3, [r2, #0]

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4e3a:	4ba4      	ldr	r3, [pc, #656]	; (d50cc <setup+0x2cc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   d4e42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d4e46:	f003 031f 	and.w	r3, r3, #31
   d4e4a:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4e4e:	2d2f      	cmp	r5, #47	; 0x2f
   d4e50:	4690      	mov	r8, r2
   d4e52:	dd05      	ble.n	d4e60 <setup+0x60>
   d4e54:	4a9e      	ldr	r2, [pc, #632]	; (d50d0 <setup+0x2d0>)
   d4e56:	2100      	movs	r1, #0
   d4e58:	200a      	movs	r0, #10
   d4e5a:	f000 fca3 	bl	d57a4 <panic_>
   d4e5e:	e001      	b.n	d4e64 <setup+0x64>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4e60:	2d1f      	cmp	r5, #31
   d4e62:	dd03      	ble.n	d4e6c <setup+0x6c>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4e64:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
   d4e68:	4b9a      	ldr	r3, [pc, #616]	; (d50d4 <setup+0x2d4>)
   d4e6a:	e001      	b.n	d4e70 <setup+0x70>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4e6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4e70:	2401      	movs	r4, #1
   d4e72:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4e76:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508

  pinSetFast(solEnablePin);                                       // Make sure the Solenoid is off
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4e7a:	4621      	mov	r1, r4
   d4e7c:	2007      	movs	r0, #7
   d4e7e:	f002 fb07 	bl	d7490 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d4e82:	2100      	movs	r1, #0
   d4e84:	2004      	movs	r0, #4
   d4e86:	f002 fb03 	bl	d7490 <pinMode>
  pinMode(soilPin1, INPUT);
   d4e8a:	2100      	movs	r1, #0
   d4e8c:	2013      	movs	r0, #19
   d4e8e:	f002 faff 	bl	d7490 <pinMode>
  pinMode(soilPin2, INPUT);
   d4e92:	2100      	movs	r1, #0
   d4e94:	2012      	movs	r0, #18
   d4e96:	f002 fafb 	bl	d7490 <pinMode>
  pinMode(pressurePin, INPUT);
   d4e9a:	2100      	movs	r1, #0
   d4e9c:	2011      	movs	r0, #17
   d4e9e:	f002 faf7 	bl	d7490 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d4ea2:	4621      	mov	r1, r4
   d4ea4:	200e      	movs	r0, #14
   d4ea6:	f002 faf3 	bl	d7490 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d4eaa:	4621      	mov	r1, r4
   d4eac:	200e      	movs	r0, #14
   d4eae:	f002 fb00 	bl	d74b2 <digitalWrite>
  pinMode(solEnablePin,OUTPUT);                                     
   d4eb2:	4621      	mov	r1, r4
   d4eb4:	2003      	movs	r0, #3
   d4eb6:	f002 faeb 	bl	d7490 <pinMode>
  pinMode(solDirection,OUTPUT);                                      
   d4eba:	4621      	mov	r1, r4
   d4ebc:	2002      	movs	r0, #2
   d4ebe:	f002 fae7 	bl	d7490 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d4ec2:	4621      	mov	r1, r4
   d4ec4:	2003      	movs	r0, #3
   d4ec6:	f002 faf4 	bl	d74b2 <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d4eca:	2100      	movs	r1, #0
   d4ecc:	2002      	movs	r0, #2
   d4ece:	f002 faf0 	bl	d74b2 <digitalWrite>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4ed2:	a804      	add	r0, sp, #16
   d4ed4:	f000 fcfc 	bl	d58d0 <spark_deviceID>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4ed8:	2700      	movs	r7, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4eda:	2300      	movs	r3, #0
   d4edc:	227d      	movs	r2, #125	; 0x7d
   d4ede:	a918      	add	r1, sp, #96	; 0x60
   d4ee0:	a804      	add	r0, sp, #16
   d4ee2:	f002 f820 	bl	d6f26 <_ZNK6String8getBytesEPhjj>
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("ResetCount", sysStatus.resetCount);
   d4ee6:	4d7c      	ldr	r5, [pc, #496]	; (d50d8 <setup+0x2d8>)
   d4ee8:	497c      	ldr	r1, [pc, #496]	; (d50dc <setup+0x2dc>)
   d4eea:	9701      	str	r7, [sp, #4]
   d4eec:	463b      	mov	r3, r7
   d4eee:	463a      	mov	r2, r7
   d4ef0:	9700      	str	r7, [sp, #0]
   d4ef2:	a818      	add	r0, sp, #96	; 0x60
   d4ef4:	f000 fcfc 	bl	d58f0 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d4ef8:	4979      	ldr	r1, [pc, #484]	; (d50e0 <setup+0x2e0>)
   d4efa:	487a      	ldr	r0, [pc, #488]	; (d50e4 <setup+0x2e4>)
   d4efc:	f7ff ff72 	bl	d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d4f00:	f105 0118 	add.w	r1, r5, #24
   d4f04:	4878      	ldr	r0, [pc, #480]	; (d50e8 <setup+0x2e8>)
   d4f06:	f7ff ff71 	bl	d4dec <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Release",releaseNumber);
   d4f0a:	4978      	ldr	r1, [pc, #480]	; (d50ec <setup+0x2ec>)
   d4f0c:	4878      	ldr	r0, [pc, #480]	; (d50f0 <setup+0x2f0>)
   d4f0e:	f7ff ff69 	bl	d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("StateOfChg", batteryString);
   d4f12:	4978      	ldr	r1, [pc, #480]	; (d50f4 <setup+0x2f4>)
   d4f14:	4878      	ldr	r0, [pc, #480]	; (d50f8 <setup+0x2f8>)
   d4f16:	f7ff ff65 	bl	d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("PowerContext",powerContext);
   d4f1a:	4978      	ldr	r1, [pc, #480]	; (d50fc <setup+0x2fc>)
   d4f1c:	4878      	ldr	r0, [pc, #480]	; (d5100 <setup+0x300>)
   d4f1e:	f7ff ff61 	bl	d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("LowPowerMode",(bool)sysStatus.lowPowerMode);
   d4f22:	79ab      	ldrb	r3, [r5, #6]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4f24:	4877      	ldr	r0, [pc, #476]	; (d5104 <setup+0x304>)
   d4f26:	1bdb      	subs	r3, r3, r7
   d4f28:	f10d 09e0 	add.w	r9, sp, #224	; 0xe0
   d4f2c:	bf18      	it	ne
   d4f2e:	2301      	movne	r3, #1
   d4f30:	f809 3dd8 	strb.w	r3, [r9, #-216]!
   d4f34:	4622      	mov	r2, r4
   d4f36:	463b      	mov	r3, r7
   d4f38:	4649      	mov	r1, r9
   d4f3a:	f000 fc99 	bl	d5870 <spark_variable>
  Particle.variable("Temperature", temperatureString);
   d4f3e:	4972      	ldr	r1, [pc, #456]	; (d5108 <setup+0x308>)
   d4f40:	4872      	ldr	r0, [pc, #456]	; (d510c <setup+0x30c>)
   d4f42:	f7ff ff4f 	bl	d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Humidity", humidityString);
   d4f46:	4972      	ldr	r1, [pc, #456]	; (d5110 <setup+0x310>)
   d4f48:	4872      	ldr	r0, [pc, #456]	; (d5114 <setup+0x314>)
   d4f4a:	f7ff ff4b 	bl	d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture1", current.soilMoisture1);
   d4f4e:	4972      	ldr	r1, [pc, #456]	; (d5118 <setup+0x318>)
   d4f50:	4872      	ldr	r0, [pc, #456]	; (d511c <setup+0x31c>)
   d4f52:	f7ff ff4b 	bl	d4dec <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture2", current.soilMoisture2);
   d4f56:	4972      	ldr	r1, [pc, #456]	; (d5120 <setup+0x320>)
   d4f58:	4872      	ldr	r0, [pc, #456]	; (d5124 <setup+0x324>)
   d4f5a:	f7ff ff47 	bl	d4dec <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Pressure", current.pressure);
   d4f5e:	4972      	ldr	r1, [pc, #456]	; (d5128 <setup+0x328>)
   d4f60:	4872      	ldr	r0, [pc, #456]	; (d512c <setup+0x32c>)
   d4f62:	f7ff ff43 	bl	d4dec <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("HoldTime", holdTimeStr);
   d4f66:	4972      	ldr	r1, [pc, #456]	; (d5130 <setup+0x330>)
   d4f68:	4872      	ldr	r0, [pc, #456]	; (d5134 <setup+0x334>)
   d4f6a:	f7ff ff3b 	bl	d4de4 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>

  Particle.function("Measure-Now",measureNow);
   d4f6e:	4972      	ldr	r1, [pc, #456]	; (d5138 <setup+0x338>)
   d4f70:	4872      	ldr	r0, [pc, #456]	; (d513c <setup+0x33c>)
   d4f72:	f7ff ff3f 	bl	d4df4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d4f76:	4972      	ldr	r1, [pc, #456]	; (d5140 <setup+0x340>)
   d4f78:	4862      	ldr	r0, [pc, #392]	; (d5104 <setup+0x304>)
   d4f7a:	f7ff ff3b 	bl	d4df4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d4f7e:	4971      	ldr	r1, [pc, #452]	; (d5144 <setup+0x344>)
   d4f80:	4871      	ldr	r0, [pc, #452]	; (d5148 <setup+0x348>)
   d4f82:	f7ff ff37 	bl	d4df4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d4f86:	4971      	ldr	r1, [pc, #452]	; (d514c <setup+0x34c>)
   d4f88:	4871      	ldr	r0, [pc, #452]	; (d5150 <setup+0x350>)
   d4f8a:	f7ff ff33 	bl	d4df4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSolenoid",setSolenoid);
   d4f8e:	4971      	ldr	r1, [pc, #452]	; (d5154 <setup+0x354>)
   d4f90:	4871      	ldr	r0, [pc, #452]	; (d5158 <setup+0x358>)
   d4f92:	f7ff ff2f 	bl	d4df4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetHoldTime",setHoldTimeMillis);
   d4f96:	4971      	ldr	r1, [pc, #452]	; (d515c <setup+0x35c>)
   d4f98:	4871      	ldr	r0, [pc, #452]	; (d5160 <setup+0x360>)
   d4f9a:	f7ff ff2b 	bl	d4df4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d4f9e:	f002 facb 	bl	d7538 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4fa2:	4638      	mov	r0, r7
   d4fa4:	f000 fa9e 	bl	d54e4 <HAL_EEPROM_Read>
   d4fa8:	2802      	cmp	r0, #2
   d4faa:	d116      	bne.n	d4fda <setup+0x1da>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4fac:	4c4a      	ldr	r4, [pc, #296]	; (d50d8 <setup+0x2d8>)
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d4fae:	f002 fac3 	bl	d7538 <_Z21__fetch_global_EEPROMv>
   d4fb2:	2220      	movs	r2, #32
   d4fb4:	4621      	mov	r1, r4
   d4fb6:	2001      	movs	r0, #1
   d4fb8:	f000 fa9c 	bl	d54f4 <HAL_EEPROM_Get>

  if (!sht31.begin(0x44)) {                                             // Set to 0x45 for alternate i2c addr
   d4fbc:	2144      	movs	r1, #68	; 0x44
   d4fbe:	4869      	ldr	r0, [pc, #420]	; (d5164 <setup+0x364>)
   d4fc0:	f000 f963 	bl	d528a <_ZN14Adafruit_SHT315beginEh>
   d4fc4:	4607      	mov	r7, r0
   d4fc6:	b9d8      	cbnz	r0, d5000 <setup+0x200>
    snprintf(StartupMessage,sizeof(StartupMessage),"Could not find SHT31");
   d4fc8:	4967      	ldr	r1, [pc, #412]	; (d5168 <setup+0x368>)
   d4fca:	4630      	mov	r0, r6
   d4fcc:	f003 fad0 	bl	d8570 <strcpy>
    sysStatus.SHT_31config = 0;
    systemStatusWriteNeeded = true;                                     // Instead of going to an error state
   d4fd0:	4b66      	ldr	r3, [pc, #408]	; (d516c <setup+0x36c>)

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object

  if (!sht31.begin(0x44)) {                                             // Set to 0x45 for alternate i2c addr
    snprintf(StartupMessage,sizeof(StartupMessage),"Could not find SHT31");
    sysStatus.SHT_31config = 0;
   d4fd2:	7327      	strb	r7, [r4, #12]
    systemStatusWriteNeeded = true;                                     // Instead of going to an error state
   d4fd4:	2201      	movs	r2, #1
   d4fd6:	701a      	strb	r2, [r3, #0]
   d4fd8:	e012      	b.n	d5000 <setup+0x200>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetSolenoid",setSolenoid);
  Particle.function("SetHoldTime",setHoldTimeMillis);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d4fda:	f002 faad 	bl	d7538 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4fde:	2204      	movs	r2, #4
   d4fe0:	4963      	ldr	r1, [pc, #396]	; (d5170 <setup+0x370>)
   d4fe2:	4638      	mov	r0, r7
   d4fe4:	f000 fa8e 	bl	d5504 <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d4fe8:	f002 faa6 	bl	d7538 <_Z21__fetch_global_EEPROMv>
   d4fec:	4620      	mov	r0, r4
   d4fee:	2204      	movs	r2, #4
   d4ff0:	4649      	mov	r1, r9
  Particle.function("SetSolenoid",setSolenoid);
  Particle.function("SetHoldTime",setHoldTimeMillis);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d4ff2:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d4ff4:	9702      	str	r7, [sp, #8]
   d4ff6:	f000 fa85 	bl	d5504 <HAL_EEPROM_Put>
  Particle.function("SetSolenoid",setSolenoid);
  Particle.function("SetHoldTime",setHoldTimeMillis);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d4ffa:	2cf0      	cmp	r4, #240	; 0xf0
   d4ffc:	d1f4      	bne.n	d4fe8 <setup+0x1e8>
   d4ffe:	e7d5      	b.n	d4fac <setup+0x1ac>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5000:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5002:	4611      	mov	r1, r2
   d5004:	4648      	mov	r0, r9
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5006:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5008:	f000 fa3c 	bl	d5484 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d500c:	9b02      	ldr	r3, [sp, #8]
    snprintf(StartupMessage,sizeof(StartupMessage),"Could not find SHT31");
    sysStatus.SHT_31config = 0;
    systemStatusWriteNeeded = true;                                     // Instead of going to an error state
  }

  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d500e:	2b14      	cmp	r3, #20
   d5010:	d105      	bne.n	d501e <setup+0x21e>
    sysStatus.resetCount++;
   d5012:	69ab      	ldr	r3, [r5, #24]
   d5014:	3301      	adds	r3, #1
   d5016:	61ab      	str	r3, [r5, #24]
    systemStatusWriteNeeded = true;                                     // If so, store increment number - watchdog must have done This
   d5018:	4b54      	ldr	r3, [pc, #336]	; (d516c <setup+0x36c>)
   d501a:	2201      	movs	r2, #1
   d501c:	701a      	strb	r2, [r3, #0]
  }
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d501e:	69ab      	ldr	r3, [r5, #24]
   d5020:	2b05      	cmp	r3, #5
   d5022:	dd04      	ble.n	d502e <setup+0x22e>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d5024:	4b2c      	ldr	r3, [pc, #176]	; (d50d8 <setup+0x2d8>)
   d5026:	2204      	movs	r2, #4
   d5028:	619a      	str	r2, [r3, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d502a:	f7ff f965 	bl	d42f8 <_Z14fullModemResetv>
  }

  if (sysStatus.solenoidHoldTime < 0 || sysStatus.solenoidHoldTime > 500) {
   d502e:	696b      	ldr	r3, [r5, #20]
   d5030:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d5034:	d905      	bls.n	d5042 <setup+0x242>
    sysStatus.solenoidHoldTime = 20;
   d5036:	4b28      	ldr	r3, [pc, #160]	; (d50d8 <setup+0x2d8>)
   d5038:	2214      	movs	r2, #20
   d503a:	615a      	str	r2, [r3, #20]
    systemStatusWriteNeeded = true;
   d503c:	4b4b      	ldr	r3, [pc, #300]	; (d516c <setup+0x36c>)
   d503e:	2201      	movs	r2, #1
   d5040:	701a      	strb	r2, [r3, #0]
  }

  
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d5042:	f7ff f8f5 	bl	d4230 <_Z9PMICresetv>

  if (!digitalRead(userSwitch)) { 
   d5046:	2004      	movs	r0, #4
   d5048:	f002 fa4c 	bl	d74e4 <digitalRead>
   d504c:	b918      	cbnz	r0, d5056 <setup+0x256>
    sysStatus.lowPowerMode = false;         // Rescue mode to locally take lowPowerMode so you can connect to device
    systemStatusWriteNeeded = true;
   d504e:	4b47      	ldr	r3, [pc, #284]	; (d516c <setup+0x36c>)

  
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  if (!digitalRead(userSwitch)) { 
    sysStatus.lowPowerMode = false;         // Rescue mode to locally take lowPowerMode so you can connect to device
   d5050:	71a8      	strb	r0, [r5, #6]
    systemStatusWriteNeeded = true;
   d5052:	2201      	movs	r2, #1
   d5054:	701a      	strb	r2, [r3, #0]
  }

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d5056:	f7ff fa2b 	bl	d44b0 <_Z16takeMeasurementsv>

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d505a:	4b46      	ldr	r3, [pc, #280]	; (d5174 <setup+0x374>)
   d505c:	68aa      	ldr	r2, [r5, #8]
   d505e:	681b      	ldr	r3, [r3, #0]
   d5060:	429a      	cmp	r2, r3
   d5062:	dc03      	bgt.n	d506c <setup+0x26c>
   d5064:	2307      	movs	r3, #7
   d5066:	f888 3000 	strb.w	r3, [r8]
   d506a:	e00d      	b.n	d5088 <setup+0x288>
  else if(!connectToParticle()) {
   d506c:	f7ff f870 	bl	d4150 <_Z17connectToParticlev>
   d5070:	b950      	cbnz	r0, d5088 <setup+0x288>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d5072:	2301      	movs	r3, #1
   d5074:	f888 3000 	strb.w	r3, [r8]
   d5078:	f000 fa1c 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d507c:	4b3e      	ldr	r3, [pc, #248]	; (d5178 <setup+0x378>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d507e:	493f      	ldr	r1, [pc, #252]	; (d517c <setup+0x37c>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d5080:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5082:	4630      	mov	r0, r6
   d5084:	f003 fa74 	bl	d8570 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5088:	f000 fc1a 	bl	d58c0 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d508c:	b108      	cbz	r0, d5092 <setup+0x292>
   d508e:	792b      	ldrb	r3, [r5, #4]
   d5090:	b953      	cbnz	r3, d50a8 <setup+0x2a8>
    Serial.println(StartupMessage);
   d5092:	f002 f931 	bl	d72f8 <_Z16_fetch_usbserialv>
   d5096:	4631      	mov	r1, r6
   d5098:	f001 fe2e 	bl	d6cf8 <_ZN5Print7printlnEPKc>
  pinMode(solDirection,OUTPUT);                                      
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d509c:	a804      	add	r0, sp, #16
   d509e:	f001 febc 	bl	d6e1a <_ZN6StringD1Ev>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
    Serial.println(StartupMessage);
}
   d50a2:	b039      	add	sp, #228	; 0xe4
   d50a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d50a8:	4b35      	ldr	r3, [pc, #212]	; (d5180 <setup+0x380>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d50aa:	4936      	ldr	r1, [pc, #216]	; (d5184 <setup+0x384>)
   d50ac:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d50ae:	2200      	movs	r2, #0
   d50b0:	f88d 2000 	strb.w	r2, [sp]
   d50b4:	4648      	mov	r0, r9
   d50b6:	4632      	mov	r2, r6
   d50b8:	f7ff f80c 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.60.constprop.74>
   d50bc:	a803      	add	r0, sp, #12
   d50be:	f7ff f947 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50c2:	e7e6      	b.n	d5092 <setup+0x292>
   d50c4:	000da93c 	.word	0x000da93c
   d50c8:	2003e242 	.word	0x2003e242
   d50cc:	2003e268 	.word	0x2003e268
   d50d0:	000d54a5 	.word	0x000d54a5
   d50d4:	50000300 	.word	0x50000300
   d50d8:	2003e308 	.word	0x2003e308
   d50dc:	000d4415 	.word	0x000d4415
   d50e0:	2003e270 	.word	0x2003e270
   d50e4:	000dac6d 	.word	0x000dac6d
   d50e8:	000dac74 	.word	0x000dac74
   d50ec:	000dad74 	.word	0x000dad74
   d50f0:	000dac7f 	.word	0x000dac7f
   d50f4:	2003e2e8 	.word	0x2003e2e8
   d50f8:	000dac87 	.word	0x000dac87
   d50fc:	2003e21d 	.word	0x2003e21d
   d5100:	000dac92 	.word	0x000dac92
   d5104:	000dac9f 	.word	0x000dac9f
   d5108:	2003e204 	.word	0x2003e204
   d510c:	000daad9 	.word	0x000daad9
   d5110:	2003e2d8 	.word	0x2003e2d8
   d5114:	000dacac 	.word	0x000dacac
   d5118:	2003e2b8 	.word	0x2003e2b8
   d511c:	000dacb5 	.word	0x000dacb5
   d5120:	2003e2bc 	.word	0x2003e2bc
   d5124:	000dacc3 	.word	0x000dacc3
   d5128:	2003e2c0 	.word	0x2003e2c0
   d512c:	000dacd1 	.word	0x000dacd1
   d5130:	2003e2f8 	.word	0x2003e2f8
   d5134:	000dad0d 	.word	0x000dad0d
   d5138:	000d40b9 	.word	0x000d40b9
   d513c:	000dacda 	.word	0x000dacda
   d5140:	000d4725 	.word	0x000d4725
   d5144:	000d4625 	.word	0x000d4625
   d5148:	000dace6 	.word	0x000dace6
   d514c:	000d46a9 	.word	0x000d46a9
   d5150:	000dacf1 	.word	0x000dacf1
   d5154:	000d47e5 	.word	0x000d47e5
   d5158:	000dacfe 	.word	0x000dacfe
   d515c:	000d48ad 	.word	0x000d48ad
   d5160:	000dad0a 	.word	0x000dad0a
   d5164:	2003e24c 	.word	0x2003e24c
   d5168:	000dad16 	.word	0x000dad16
   d516c:	2003e241 	.word	0x2003e241
   d5170:	000da97c 	.word	0x000da97c
   d5174:	2003e214 	.word	0x2003e214
   d5178:	2003e2b4 	.word	0x2003e2b4
   d517c:	000dad2b 	.word	0x000dad2b
   d5180:	2003e21c 	.word	0x2003e21c
   d5184:	000dad3d 	.word	0x000dad3d

000d5188 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5188:	4b22      	ldr	r3, [pc, #136]	; (d5214 <_GLOBAL__sub_I___appProductID+0x8c>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d518a:	b570      	push	{r4, r5, r6, lr}
   d518c:	2400      	movs	r4, #0
   d518e:	601c      	str	r4, [r3, #0]
   d5190:	4b21      	ldr	r3, [pc, #132]	; (d5218 <_GLOBAL__sub_I___appProductID+0x90>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
   d5192:	4e22      	ldr	r6, [pc, #136]	; (d521c <_GLOBAL__sub_I___appProductID+0x94>)
   d5194:	2501      	movs	r5, #1
   d5196:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5198:	f000 f9cc 	bl	d5534 <HAL_Pin_Map>
   d519c:	4b20      	ldr	r3, [pc, #128]	; (d5220 <_GLOBAL__sub_I___appProductID+0x98>)
   d519e:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d51a0:	f002 f93a 	bl	d7418 <spark_protocol_instance>
   d51a4:	4623      	mov	r3, r4
   d51a6:	4622      	mov	r2, r4
   d51a8:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d51ac:	f002 f93c 	bl	d7428 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d51b0:	f002 f932 	bl	d7418 <spark_protocol_instance>
   d51b4:	4623      	mov	r3, r4
   d51b6:	4622      	mov	r2, r4
   d51b8:	210c      	movs	r1, #12
   d51ba:	f002 f93d 	bl	d7438 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d51be:	4b19      	ldr	r3, [pc, #100]	; (d5224 <_GLOBAL__sub_I___appProductID+0x9c>)
   d51c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d51c4:	701c      	strb	r4, [r3, #0]
   d51c6:	805c      	strh	r4, [r3, #2]
   d51c8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d51ca:	2002      	movs	r0, #2
   d51cc:	f000 fafa 	bl	d57c4 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
   d51d0:	4621      	mov	r1, r4
   d51d2:	4628      	mov	r0, r5
   d51d4:	f000 fb0e 	bl	d57f4 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d51d8:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
   d51da:	4d13      	ldr	r5, [pc, #76]	; (d5228 <_GLOBAL__sub_I___appProductID+0xa0>)
   d51dc:	2004      	movs	r0, #4
   d51de:	f000 f941 	bl	d5464 <HAL_Feature_Set>
   d51e2:	4621      	mov	r1, r4
   d51e4:	4628      	mov	r0, r5
   d51e6:	f001 f8c7 	bl	d6378 <_ZN9FuelGaugeC1Eb>
   d51ea:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
   d51ec:	4d0f      	ldr	r5, [pc, #60]	; (d522c <_GLOBAL__sub_I___appProductID+0xa4>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
   d51ee:	4910      	ldr	r1, [pc, #64]	; (d5230 <_GLOBAL__sub_I___appProductID+0xa8>)
   d51f0:	4632      	mov	r2, r6
   d51f2:	f002 fa17 	bl	d7624 <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
   d51f6:	4621      	mov	r1, r4
   d51f8:	4628      	mov	r0, r5
   d51fa:	f001 fb84 	bl	d6906 <_ZN4PMICC1Eb>
   d51fe:	4632      	mov	r2, r6
   d5200:	4628      	mov	r0, r5
   d5202:	490c      	ldr	r1, [pc, #48]	; (d5234 <_GLOBAL__sub_I___appProductID+0xac>)
   d5204:	f002 fa0e 	bl	d7624 <__aeabi_atexit>
Adafruit_SHT31 sht31 = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5208:	480b      	ldr	r0, [pc, #44]	; (d5238 <_GLOBAL__sub_I___appProductID+0xb0>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d520a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
Adafruit_SHT31 sht31 = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d520e:	f000 b819 	b.w	d5244 <_ZN14Adafruit_SHT31C1Ev>
   d5212:	bf00      	nop
   d5214:	2003e25c 	.word	0x2003e25c
   d5218:	2003e21c 	.word	0x2003e21c
   d521c:	2003e200 	.word	0x2003e200
   d5220:	2003e268 	.word	0x2003e268
   d5224:	2003e260 	.word	0x2003e260
   d5228:	2003e238 	.word	0x2003e238
   d522c:	2003e243 	.word	0x2003e243
   d5230:	000d6397 	.word	0x000d6397
   d5234:	000d6925 	.word	0x000d6925
   d5238:	2003e24c 	.word	0x2003e24c

000d523c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d523c:	6803      	ldr	r3, [r0, #0]
   d523e:	b2c9      	uxtb	r1, r1
   d5240:	689b      	ldr	r3, [r3, #8]
   d5242:	4718      	bx	r3

000d5244 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5244:	4770      	bx	lr

000d5246 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5246:	b538      	push	{r3, r4, r5, lr}
   d5248:	4605      	mov	r5, r0
   d524a:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d524c:	f002 f988 	bl	d7560 <_Z19__fetch_global_Wirev>
   d5250:	7829      	ldrb	r1, [r5, #0]
   d5252:	f001 f94c 	bl	d64ee <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5256:	f002 f983 	bl	d7560 <_Z19__fetch_global_Wirev>
   d525a:	0a21      	lsrs	r1, r4, #8
   d525c:	f7ff ffee 	bl	d523c <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5260:	f002 f97e 	bl	d7560 <_Z19__fetch_global_Wirev>
   d5264:	b2e1      	uxtb	r1, r4
   d5266:	f7ff ffe9 	bl	d523c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d526a:	f002 f979 	bl	d7560 <_Z19__fetch_global_Wirev>
}
   d526e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d5272:	f001 b947 	b.w	d6504 <_ZN7TwoWire15endTransmissionEv>

000d5276 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d5276:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5278:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d527c:	f7ff ffe3 	bl	d5246 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d5280:	200a      	movs	r0, #10
}
   d5282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d5286:	f000 bbe7 	b.w	d5a58 <delay>

000d528a <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d528a:	b538      	push	{r3, r4, r5, lr}
   d528c:	4604      	mov	r4, r0
   d528e:	460d      	mov	r5, r1
  Wire.begin();
   d5290:	f002 f966 	bl	d7560 <_Z19__fetch_global_Wirev>
   d5294:	f001 f914 	bl	d64c0 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d5298:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d529a:	7025      	strb	r5, [r4, #0]
  reset();
   d529c:	f7ff ffeb 	bl	d5276 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d52a0:	2001      	movs	r0, #1
   d52a2:	bd38      	pop	{r3, r4, r5, pc}

000d52a4 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d52a4:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d52a6:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d52a8:	4291      	cmp	r1, r2
   d52aa:	d00e      	beq.n	d52ca <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d52ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   d52b0:	4058      	eors	r0, r3
   d52b2:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d52b4:	f010 0f80 	tst.w	r0, #128	; 0x80
   d52b8:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d52bc:	bf18      	it	ne
   d52be:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d52c2:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d52c4:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d52c6:	d1f5      	bne.n	d52b4 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d52c8:	e7ee      	b.n	d52a8 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d52ca:	4770      	bx	lr
   d52cc:	0000      	movs	r0, r0
	...

000d52d0 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d52d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d52d2:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d52d6:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d52d8:	f7ff ffb5 	bl	d5246 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d52dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d52e0:	f000 fbba 	bl	d5a58 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d52e4:	f002 f93c 	bl	d7560 <_Z19__fetch_global_Wirev>
   d52e8:	2206      	movs	r2, #6
   d52ea:	7821      	ldrb	r1, [r4, #0]
   d52ec:	f001 f8f7 	bl	d64de <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
   d52f0:	f002 f936 	bl	d7560 <_Z19__fetch_global_Wirev>
   d52f4:	6803      	ldr	r3, [r0, #0]
   d52f6:	691b      	ldr	r3, [r3, #16]
   d52f8:	4798      	blx	r3
   d52fa:	2806      	cmp	r0, #6
   d52fc:	d14a      	bne.n	d5394 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d52fe:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d5300:	f002 f92e 	bl	d7560 <_Z19__fetch_global_Wirev>
   d5304:	6803      	ldr	r3, [r0, #0]
   d5306:	695b      	ldr	r3, [r3, #20]
   d5308:	4798      	blx	r3
   d530a:	f80d 0005 	strb.w	r0, [sp, r5]
   d530e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d5310:	2d06      	cmp	r5, #6
   d5312:	d1f5      	bne.n	d5300 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5314:	2202      	movs	r2, #2
   d5316:	4669      	mov	r1, sp
   d5318:	4620      	mov	r0, r4
   d531a:	f7ff ffc3 	bl	d52a4 <_ZN14Adafruit_SHT314crc8EPKhi>
   d531e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d5322:	4285      	cmp	r5, r0
   d5324:	d136      	bne.n	d5394 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5326:	2202      	movs	r2, #2
   d5328:	f10d 0103 	add.w	r1, sp, #3
   d532c:	4620      	mov	r0, r4
   d532e:	f7ff ffb9 	bl	d52a4 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5332:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d5336:	4285      	cmp	r5, r0
   d5338:	d12c      	bne.n	d5394 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d533a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d533e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d5342:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5346:	ba40      	rev16	r0, r0
   d5348:	b280      	uxth	r0, r0
   d534a:	f002 fbff 	bl	d7b4c <__aeabi_ui2d>
  stemp *= 175;
   d534e:	a318      	add	r3, pc, #96	; (adr r3, d53b0 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5350:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5354:	f002 fc70 	bl	d7c38 <__aeabi_dmul>
  stemp /= 0xffff;
   d5358:	a311      	add	r3, pc, #68	; (adr r3, d53a0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d535a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d535e:	f002 fd95 	bl	d7e8c <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d5362:	2200      	movs	r2, #0
   d5364:	4b10      	ldr	r3, [pc, #64]	; (d53a8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d5366:	f002 fab3 	bl	d78d0 <__aeabi_dsub>
   d536a:	f002 ff5d 	bl	d8228 <__aeabi_d2f>
   d536e:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d5370:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d5374:	f002 fbea 	bl	d7b4c <__aeabi_ui2d>
  shum *= 100;
   d5378:	2200      	movs	r2, #0
   d537a:	4b0c      	ldr	r3, [pc, #48]	; (d53ac <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d537c:	f002 fc5c 	bl	d7c38 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d5380:	a307      	add	r3, pc, #28	; (adr r3, d53a0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5382:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5386:	f002 fd81 	bl	d7e8c <__aeabi_ddiv>
   d538a:	f002 ff4d 	bl	d8228 <__aeabi_d2f>
   d538e:	6060      	str	r0, [r4, #4]
  
  return true;
   d5390:	2001      	movs	r0, #1
   d5392:	e000      	b.n	d5396 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d5394:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d5396:	b002      	add	sp, #8
   d5398:	bd70      	pop	{r4, r5, r6, pc}
   d539a:	bf00      	nop
   d539c:	f3af 8000 	nop.w
   d53a0:	00000000 	.word	0x00000000
   d53a4:	40efffe0 	.word	0x40efffe0
   d53a8:	40468000 	.word	0x40468000
   d53ac:	40590000 	.word	0x40590000
   d53b0:	00000000 	.word	0x00000000
   d53b4:	4065e000 	.word	0x4065e000

000d53b8 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d53b8:	b510      	push	{r4, lr}
   d53ba:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d53bc:	f7ff ff88 	bl	d52d0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d53c0:	b110      	cbz	r0, d53c8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d53c2:	ed94 0a02 	vldr	s0, [r4, #8]
   d53c6:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d53c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d53d0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d53cc:	bd10      	pop	{r4, pc}
   d53ce:	bf00      	nop
   d53d0:	7fc00000 	.word	0x7fc00000

000d53d4 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d53d4:	b510      	push	{r4, lr}
   d53d6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d53d8:	f7ff ff7a 	bl	d52d0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d53dc:	b110      	cbz	r0, d53e4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d53de:	ed94 0a01 	vldr	s0, [r4, #4]
   d53e2:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d53e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d53ec <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d53e8:	bd10      	pop	{r4, pc}
   d53ea:	bf00      	nop
   d53ec:	7fc00000 	.word	0x7fc00000

000d53f0 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d53f0:	f000 b8a0 	b.w	d5534 <HAL_Pin_Map>

000d53f4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <cellular_signal+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030274 	.word	0x00030274

000d5404 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <cellular_command+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030274 	.word	0x00030274

000d5414 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <os_thread_is_current+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	689b      	ldr	r3, [r3, #8]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030248 	.word	0x00030248

000d5424 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <os_thread_join+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	691b      	ldr	r3, [r3, #16]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030248 	.word	0x00030248

000d5434 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <os_thread_cleanup+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	695b      	ldr	r3, [r3, #20]
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030248 	.word	0x00030248

000d5444 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <os_mutex_create+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030248 	.word	0x00030248

000d5454 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <os_mutex_recursive_create+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030248 	.word	0x00030248

000d5464 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <HAL_Feature_Set+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030234 	.word	0x00030234

000d5474 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <HAL_Core_System_Reset_Ex+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030234 	.word	0x00030234

000d5484 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030234 	.word	0x00030234

000d5494 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <HAL_RNG_GetRandomNumber+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	685b      	ldr	r3, [r3, #4]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030218 	.word	0x00030218

000d54a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <HAL_Delay_Microseconds+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	68db      	ldr	r3, [r3, #12]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030218 	.word	0x00030218

000d54b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	695b      	ldr	r3, [r3, #20]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030218 	.word	0x00030218

000d54c4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <HAL_RTC_Get_UnixTime+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	69db      	ldr	r3, [r3, #28]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030218 	.word	0x00030218

000d54d4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <HAL_EEPROM_Init+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030218 	.word	0x00030218

000d54e4 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <HAL_EEPROM_Read+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030218 	.word	0x00030218

000d54f4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <HAL_EEPROM_Get+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030218 	.word	0x00030218

000d5504 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <HAL_EEPROM_Put+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030218 	.word	0x00030218

000d5514 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <HAL_RTC_Time_Is_Valid+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030218 	.word	0x00030218

000d5524 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <hal_timer_millis+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030218 	.word	0x00030218

000d5534 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <HAL_Pin_Map+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	681b      	ldr	r3, [r3, #0]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	0003022c 	.word	0x0003022c

000d5544 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <HAL_Validate_Pin_Function+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	685b      	ldr	r3, [r3, #4]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	0003022c 	.word	0x0003022c

000d5554 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <HAL_Pin_Mode+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	689b      	ldr	r3, [r3, #8]
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	0003022c 	.word	0x0003022c

000d5564 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <HAL_Get_Pin_Mode+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	68db      	ldr	r3, [r3, #12]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	0003022c 	.word	0x0003022c

000d5574 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <HAL_GPIO_Write+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	691b      	ldr	r3, [r3, #16]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	0003022c 	.word	0x0003022c

000d5584 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <HAL_GPIO_Read+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	695b      	ldr	r3, [r3, #20]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	0003022c 	.word	0x0003022c

000d5594 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_ADC_Read+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	0003022c 	.word	0x0003022c

000d55a4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_I2C_Begin+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	68db      	ldr	r3, [r3, #12]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030228 	.word	0x00030228

000d55b4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <HAL_I2C_Request_Data+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	695b      	ldr	r3, [r3, #20]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030228 	.word	0x00030228

000d55c4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <HAL_I2C_Begin_Transmission+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	699b      	ldr	r3, [r3, #24]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030228 	.word	0x00030228

000d55d4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <HAL_I2C_End_Transmission+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	69db      	ldr	r3, [r3, #28]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030228 	.word	0x00030228

000d55e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <HAL_I2C_Write_Data+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	6a1b      	ldr	r3, [r3, #32]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030228 	.word	0x00030228

000d55f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <HAL_I2C_Available_Data+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030228 	.word	0x00030228

000d5604 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <HAL_I2C_Read_Data+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030228 	.word	0x00030228

000d5614 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <HAL_I2C_Peek_Data+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030228 	.word	0x00030228

000d5624 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <HAL_I2C_Flush_Data+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030228 	.word	0x00030228

000d5634 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <HAL_I2C_Is_Enabled+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030228 	.word	0x00030228

000d5644 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <HAL_I2C_Init+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030228 	.word	0x00030228

000d5654 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_I2C_Acquire+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030228 	.word	0x00030228

000d5664 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_I2C_Release+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030228 	.word	0x00030228

000d5674 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <inet_inet_ntop+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	695b      	ldr	r3, [r3, #20]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030264 	.word	0x00030264

000d5684 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <netdb_freeaddrinfo+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	689b      	ldr	r3, [r3, #8]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030268 	.word	0x00030268

000d5694 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <netdb_getaddrinfo+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	68db      	ldr	r3, [r3, #12]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030268 	.word	0x00030268

000d56a4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <HAL_SPI_Init+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	69db      	ldr	r3, [r3, #28]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030230 	.word	0x00030230

000d56b4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <HAL_SPI_Is_Enabled+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6a1b      	ldr	r3, [r3, #32]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030230 	.word	0x00030230

000d56c4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_USART_Init+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	681b      	ldr	r3, [r3, #0]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003023c 	.word	0x0003023c

000d56d4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <HAL_USART_Write_Data+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	68db      	ldr	r3, [r3, #12]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003023c 	.word	0x0003023c

000d56e4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <HAL_USART_Available_Data+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	691b      	ldr	r3, [r3, #16]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	0003023c 	.word	0x0003023c

000d56f4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <HAL_USART_Read_Data+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	695b      	ldr	r3, [r3, #20]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003023c 	.word	0x0003023c

000d5704 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_USART_Peek_Data+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	699b      	ldr	r3, [r3, #24]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	0003023c 	.word	0x0003023c

000d5714 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_USART_Flush_Data+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	69db      	ldr	r3, [r3, #28]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	0003023c 	.word	0x0003023c

000d5724 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_USART_Is_Enabled+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6a1b      	ldr	r3, [r3, #32]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003023c 	.word	0x0003023c

000d5734 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_USART_Available_Data_For_Write+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003023c 	.word	0x0003023c

000d5744 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_USB_USART_Init+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	681b      	ldr	r3, [r3, #0]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003024c 	.word	0x0003024c

000d5754 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_USB_USART_Available_Data+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	691b      	ldr	r3, [r3, #16]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003024c 	.word	0x0003024c

000d5764 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	695b      	ldr	r3, [r3, #20]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003024c 	.word	0x0003024c

000d5774 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_USB_USART_Receive_Data+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	699b      	ldr	r3, [r3, #24]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003024c 	.word	0x0003024c

000d5784 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <HAL_USB_USART_Send_Data+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	69db      	ldr	r3, [r3, #28]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	0003024c 	.word	0x0003024c

000d5794 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <HAL_USB_USART_Flush_Data+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6a1b      	ldr	r3, [r3, #32]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	0003024c 	.word	0x0003024c

000d57a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <panic_+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030260 	.word	0x00030260

000d57b4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <system_mode+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	681b      	ldr	r3, [r3, #0]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030220 	.word	0x00030220

000d57c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <set_system_mode+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	685b      	ldr	r3, [r3, #4]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030220 	.word	0x00030220

000d57d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <system_delay_ms+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	695b      	ldr	r3, [r3, #20]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030220 	.word	0x00030220

000d57e4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <system_sleep+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	699b      	ldr	r3, [r3, #24]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030220 	.word	0x00030220

000d57f4 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <system_thread_set_state+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030220 	.word	0x00030220

000d5804 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <application_thread_current+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030220 	.word	0x00030220

000d5814 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <application_thread_invoke+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030220 	.word	0x00030220

000d5824 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <system_thread_get_state+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030220 	.word	0x00030220

000d5834 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b03      	ldr	r3, [pc, #12]	; (d5844 <system_ctrl_set_app_request_handler+0x10>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d583e:	9301      	str	r3, [sp, #4]
   d5840:	bd08      	pop	{r3, pc}
   d5842:	0000      	.short	0x0000
   d5844:	00030220 	.word	0x00030220

000d5848 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b03      	ldr	r3, [pc, #12]	; (d5858 <system_ctrl_set_result+0x10>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5852:	9301      	str	r3, [sp, #4]
   d5854:	bd08      	pop	{r3, pc}
   d5856:	0000      	.short	0x0000
   d5858:	00030220 	.word	0x00030220

000d585c <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b03      	ldr	r3, [pc, #12]	; (d586c <system_sleep_pins+0x10>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d5866:	9301      	str	r3, [sp, #4]
   d5868:	bd08      	pop	{r3, pc}
   d586a:	0000      	.short	0x0000
   d586c:	00030220 	.word	0x00030220

000d5870 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <spark_variable+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	681b      	ldr	r3, [r3, #0]
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030244 	.word	0x00030244

000d5880 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <spark_function+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	685b      	ldr	r3, [r3, #4]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030244 	.word	0x00030244

000d5890 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <spark_process+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	689b      	ldr	r3, [r3, #8]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030244 	.word	0x00030244

000d58a0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <spark_cloud_flag_connect+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	68db      	ldr	r3, [r3, #12]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030244 	.word	0x00030244

000d58b0 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <spark_cloud_flag_disconnect+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	691b      	ldr	r3, [r3, #16]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030244 	.word	0x00030244

000d58c0 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <spark_cloud_flag_connected+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	695b      	ldr	r3, [r3, #20]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030244 	.word	0x00030244

000d58d0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <spark_deviceID+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	69db      	ldr	r3, [r3, #28]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030244 	.word	0x00030244

000d58e0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <spark_send_event+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6a1b      	ldr	r3, [r3, #32]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030244 	.word	0x00030244

000d58f0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <spark_subscribe+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030244 	.word	0x00030244

000d5900 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <spark_sync_time+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	00030244 	.word	0x00030244

000d5910 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <spark_sync_time_pending+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030244 	.word	0x00030244

000d5920 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	00030244 	.word	0x00030244

000d5930 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <network_connect+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	685b      	ldr	r3, [r3, #4]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	00030240 	.word	0x00030240

000d5940 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <network_connecting+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	689b      	ldr	r3, [r3, #8]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	00030240 	.word	0x00030240

000d5950 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <network_disconnect+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	68db      	ldr	r3, [r3, #12]
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030240 	.word	0x00030240

000d5960 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <network_ready+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	691b      	ldr	r3, [r3, #16]
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030240 	.word	0x00030240

000d5970 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <network_on+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	695b      	ldr	r3, [r3, #20]
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030240 	.word	0x00030240

000d5980 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <network_off+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	699b      	ldr	r3, [r3, #24]
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030240 	.word	0x00030240

000d5990 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <network_listen+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	69db      	ldr	r3, [r3, #28]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030240 	.word	0x00030240

000d59a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <network_listening+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	6a1b      	ldr	r3, [r3, #32]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030240 	.word	0x00030240

000d59b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <network_set_listen_timeout+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030240 	.word	0x00030240

000d59c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <network_get_listen_timeout+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030240 	.word	0x00030240

000d59d0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <malloc+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	681b      	ldr	r3, [r3, #0]
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	0003021c 	.word	0x0003021c

000d59e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <free+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	685b      	ldr	r3, [r3, #4]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	0003021c 	.word	0x0003021c

000d59f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <realloc+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	689b      	ldr	r3, [r3, #8]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	0003021c 	.word	0x0003021c

000d5a00 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <siscanf+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	699b      	ldr	r3, [r3, #24]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	0003021c 	.word	0x0003021c

000d5a10 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <snprintf+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	69db      	ldr	r3, [r3, #28]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	0003021c 	.word	0x0003021c

000d5a20 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <abort+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	0003021c 	.word	0x0003021c

000d5a30 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <_malloc_r+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	0003021c 	.word	0x0003021c

000d5a40 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d5a40:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d5a42:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d5a44:	d007      	beq.n	d5a56 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d5a46:	9d03      	ldr	r5, [sp, #12]
   d5a48:	1a44      	subs	r4, r0, r1
   d5a4a:	1aed      	subs	r5, r5, r3
   d5a4c:	436c      	muls	r4, r5
   d5a4e:	1a52      	subs	r2, r2, r1
   d5a50:	fb94 f4f2 	sdiv	r4, r4, r2
   d5a54:	18e0      	adds	r0, r4, r3
}
   d5a56:	bd30      	pop	{r4, r5, pc}

000d5a58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5a58:	2100      	movs	r1, #0
   d5a5a:	f7ff bebb 	b.w	d57d4 <system_delay_ms>

000d5a5e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5a5e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a60:	6883      	ldr	r3, [r0, #8]
   d5a62:	4604      	mov	r4, r0
   d5a64:	b90b      	cbnz	r3, d5a6a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5a66:	f001 fde4 	bl	d7632 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a6a:	68c3      	ldr	r3, [r0, #12]
   d5a6c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5a6e:	68a3      	ldr	r3, [r4, #8]
   d5a70:	b11b      	cbz	r3, d5a7a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a72:	2203      	movs	r2, #3
   d5a74:	4621      	mov	r1, r4
   d5a76:	4620      	mov	r0, r4
   d5a78:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	2110      	movs	r1, #16
}
   d5a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5a82:	f001 bdd4 	b.w	d762e <_ZdlPvj>

000d5a86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5a86:	680b      	ldr	r3, [r1, #0]
   d5a88:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5a8a:	b113      	cbz	r3, d5a92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5a8c:	685a      	ldr	r2, [r3, #4]
   d5a8e:	3201      	adds	r2, #1
   d5a90:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5a92:	4770      	bx	lr

000d5a94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a94:	4802      	ldr	r0, [pc, #8]	; (d5aa0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5a96:	2300      	movs	r3, #0
   d5a98:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5a9a:	f7ff bcdb 	b.w	d5454 <os_mutex_recursive_create>
   d5a9e:	bf00      	nop
   d5aa0:	2003e328 	.word	0x2003e328

000d5aa4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5aa4:	2200      	movs	r2, #0
   d5aa6:	4611      	mov	r1, r2
   d5aa8:	6840      	ldr	r0, [r0, #4]
   d5aaa:	f7ff bf59 	b.w	d5960 <network_ready>

000d5aae <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5aae:	2200      	movs	r2, #0
   d5ab0:	4611      	mov	r1, r2
   d5ab2:	6840      	ldr	r0, [r0, #4]
   d5ab4:	f7ff bf74 	b.w	d59a0 <network_listening>

000d5ab8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ab8:	2200      	movs	r2, #0
   d5aba:	4611      	mov	r1, r2
   d5abc:	6840      	ldr	r0, [r0, #4]
   d5abe:	f7ff bf7f 	b.w	d59c0 <network_get_listen_timeout>

000d5ac2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	6840      	ldr	r0, [r0, #4]
   d5ac6:	f7ff bf73 	b.w	d59b0 <network_set_listen_timeout>

000d5aca <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5aca:	2200      	movs	r2, #0
   d5acc:	f081 0101 	eor.w	r1, r1, #1
   d5ad0:	6840      	ldr	r0, [r0, #4]
   d5ad2:	f7ff bf5d 	b.w	d5990 <network_listen>

000d5ad6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5ad6:	2300      	movs	r3, #0
   d5ad8:	461a      	mov	r2, r3
   d5ada:	4619      	mov	r1, r3
   d5adc:	6840      	ldr	r0, [r0, #4]
   d5ade:	f7ff bf4f 	b.w	d5980 <network_off>

000d5ae2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5ae2:	2300      	movs	r3, #0
   d5ae4:	461a      	mov	r2, r3
   d5ae6:	4619      	mov	r1, r3
   d5ae8:	6840      	ldr	r0, [r0, #4]
   d5aea:	f7ff bf41 	b.w	d5970 <network_on>

000d5aee <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5aee:	2200      	movs	r2, #0
   d5af0:	4611      	mov	r1, r2
   d5af2:	6840      	ldr	r0, [r0, #4]
   d5af4:	f7ff bf24 	b.w	d5940 <network_connecting>

000d5af8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5af8:	2200      	movs	r2, #0
   d5afa:	2102      	movs	r1, #2
   d5afc:	6840      	ldr	r0, [r0, #4]
   d5afe:	f7ff bf27 	b.w	d5950 <network_disconnect>

000d5b02 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b02:	2300      	movs	r3, #0
   d5b04:	461a      	mov	r2, r3
   d5b06:	6840      	ldr	r0, [r0, #4]
   d5b08:	f7ff bf12 	b.w	d5930 <network_connect>

000d5b0c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5b0e:	4b1b      	ldr	r3, [pc, #108]	; (d5b7c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5b10:	6003      	str	r3, [r0, #0]
   d5b12:	2500      	movs	r5, #0
   d5b14:	460f      	mov	r7, r1
   d5b16:	3328      	adds	r3, #40	; 0x28
   d5b18:	2618      	movs	r6, #24
   d5b1a:	b089      	sub	sp, #36	; 0x24
   d5b1c:	6043      	str	r3, [r0, #4]
   d5b1e:	6085      	str	r5, [r0, #8]
   d5b20:	60c5      	str	r5, [r0, #12]
   d5b22:	4632      	mov	r2, r6
   d5b24:	4629      	mov	r1, r5
   d5b26:	4604      	mov	r4, r0
   d5b28:	3010      	adds	r0, #16
   d5b2a:	f002 fce6 	bl	d84fa <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5b2e:	462a      	mov	r2, r5
   d5b30:	4629      	mov	r1, r5
   d5b32:	6878      	ldr	r0, [r7, #4]
   d5b34:	f7ff ff14 	bl	d5960 <network_ready>
   d5b38:	b908      	cbnz	r0, d5b3e <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5b3a:	60a0      	str	r0, [r4, #8]
            return sig;
   d5b3c:	e01b      	b.n	d5b76 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5b3e:	4629      	mov	r1, r5
   d5b40:	4632      	mov	r2, r6
   d5b42:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5b44:	9500      	str	r5, [sp, #0]
   d5b46:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5b48:	f002 fcd7 	bl	d84fa <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5b4c:	a902      	add	r1, sp, #8
   d5b4e:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5b50:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5b54:	f7ff fc4e 	bl	d53f4 <cellular_signal>
   d5b58:	b110      	cbz	r0, d5b60 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5b5a:	2301      	movs	r3, #1
   d5b5c:	60a3      	str	r3, [r4, #8]
            return sig;
   d5b5e:	e00a      	b.n	d5b76 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d5b60:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5b62:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5b64:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5b66:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5b68:	b90b      	cbnz	r3, d5b6e <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5b6a:	2302      	movs	r3, #2
   d5b6c:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d5b6e:	a902      	add	r1, sp, #8
   d5b70:	4620      	mov	r0, r4
   d5b72:	f000 f8a1 	bl	d5cb8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5b76:	4620      	mov	r0, r4
   d5b78:	b009      	add	sp, #36	; 0x24
   d5b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b7c:	000dadb8 	.word	0x000dadb8

000d5b80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5b80:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5b82:	4c08      	ldr	r4, [pc, #32]	; (d5ba4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5b84:	2528      	movs	r5, #40	; 0x28
   d5b86:	462a      	mov	r2, r5
   d5b88:	2100      	movs	r1, #0
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	f002 fcb5 	bl	d84fa <memset>
        cid = -1;
   d5b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5b94:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b96:	4b04      	ldr	r3, [pc, #16]	; (d5ba8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5b98:	8025      	strh	r5, [r4, #0]
   d5b9a:	2204      	movs	r2, #4
   d5b9c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5b9e:	4a03      	ldr	r2, [pc, #12]	; (d5bac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5ba0:	601a      	str	r2, [r3, #0]
   d5ba2:	bd38      	pop	{r3, r4, r5, pc}
   d5ba4:	2003e334 	.word	0x2003e334
   d5ba8:	2003e32c 	.word	0x2003e32c
   d5bac:	000dad84 	.word	0x000dad84

000d5bb0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5bb0:	4770      	bx	lr

000d5bb2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5bb2:	7d00      	ldrb	r0, [r0, #20]
   d5bb4:	4770      	bx	lr
	...

000d5bb8 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5bb8:	7d03      	ldrb	r3, [r0, #20]
   d5bba:	b11b      	cbz	r3, d5bc4 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5bbc:	6983      	ldr	r3, [r0, #24]
   d5bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5bc2:	d102      	bne.n	d5bca <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d5bc4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5bdc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5bc8:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d5bca:	ee07 3a90 	vmov	s15, r3
   d5bce:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5be0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d5bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5bd6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5bda:	4770      	bx	lr
   d5bdc:	00000000 	.word	0x00000000
   d5be0:	42c80000 	.word	0x42c80000

000d5be4 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5be4:	7d03      	ldrb	r3, [r0, #20]
   d5be6:	b11b      	cbz	r3, d5bf0 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5be8:	6a03      	ldr	r3, [r0, #32]
   d5bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5bee:	d102      	bne.n	d5bf6 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5bf0:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5c08 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5bf4:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d5bf6:	ee07 3a90 	vmov	s15, r3
   d5bfa:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5c0c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5c02:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5c06:	4770      	bx	lr
   d5c08:	00000000 	.word	0x00000000
   d5c0c:	42c80000 	.word	0x42c80000

000d5c10 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5c10:	b570      	push	{r4, r5, r6, lr}
   d5c12:	460d      	mov	r5, r1
   d5c14:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5c16:	220a      	movs	r2, #10
   d5c18:	6881      	ldr	r1, [r0, #8]
   d5c1a:	4628      	mov	r0, r5
   d5c1c:	f001 f8c7 	bl	d6dae <_ZN5Print5printEii>
    n += p.print(',');
   d5c20:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5c22:	4604      	mov	r4, r0
    n += p.print(',');
   d5c24:	4628      	mov	r0, r5
   d5c26:	f001 f858 	bl	d6cda <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d5c2a:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5c2c:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5c2e:	68f1      	ldr	r1, [r6, #12]
   d5c30:	4628      	mov	r0, r5
   d5c32:	f001 f8bc 	bl	d6dae <_ZN5Print5printEii>
    return n;
}
   d5c36:	4420      	add	r0, r4
   d5c38:	bd70      	pop	{r4, r5, r6, pc}

000d5c3a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d5c3a:	f1a0 0004 	sub.w	r0, r0, #4
   d5c3e:	f7ff bfe7 	b.w	d5c10 <_ZNK14CellularSignal7printToER5Print>

000d5c42 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5c42:	b510      	push	{r4, lr}
   d5c44:	2128      	movs	r1, #40	; 0x28
   d5c46:	4604      	mov	r4, r0
   d5c48:	f001 fcf1 	bl	d762e <_ZdlPvj>
   d5c4c:	4620      	mov	r0, r4
   d5c4e:	bd10      	pop	{r4, pc}

000d5c50 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5c50:	7d03      	ldrb	r3, [r0, #20]
   d5c52:	b17b      	cbz	r3, d5c74 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5c56:	2b00      	cmp	r3, #0
   d5c58:	db0c      	blt.n	d5c74 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d5c5a:	ee07 3a90 	vmov	s15, r3
   d5c5e:	eddf 6a07 	vldr	s13, [pc, #28]	; d5c7c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d5c62:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5c80 <_ZNK14CellularSignal10getQualityEv+0x30>
   d5c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5c6e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5c72:	4770      	bx	lr
    }

    return -1.0f;
   d5c74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5c78:	4770      	bx	lr
   d5c7a:	bf00      	nop
   d5c7c:	477fff00 	.word	0x477fff00
   d5c80:	42c80000 	.word	0x42c80000

000d5c84 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5c84:	7d03      	ldrb	r3, [r0, #20]
   d5c86:	b17b      	cbz	r3, d5ca8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5c88:	69c3      	ldr	r3, [r0, #28]
   d5c8a:	2b00      	cmp	r3, #0
   d5c8c:	db0c      	blt.n	d5ca8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5c8e:	ee07 3a90 	vmov	s15, r3
   d5c92:	eddf 6a07 	vldr	s13, [pc, #28]	; d5cb0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d5c96:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5cb4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5ca2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5ca6:	4770      	bx	lr
    }

    return -1.0f;
   d5ca8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5cac:	4770      	bx	lr
   d5cae:	bf00      	nop
   d5cb0:	477fff00 	.word	0x477fff00
   d5cb4:	42c80000 	.word	0x42c80000

000d5cb8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d5cb8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d5cba:	460d      	mov	r5, r1
   d5cbc:	f100 0410 	add.w	r4, r0, #16
   d5cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5cc8:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5ccc:	2001      	movs	r0, #1
   d5cce:	bd30      	pop	{r4, r5, pc}

000d5cd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cd0:	4770      	bx	lr

000d5cd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5cd2:	2000      	movs	r0, #0
   d5cd4:	4770      	bx	lr

000d5cd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cd6:	b510      	push	{r4, lr}
   d5cd8:	2110      	movs	r1, #16
   d5cda:	4604      	mov	r4, r0
   d5cdc:	f001 fca7 	bl	d762e <_ZdlPvj>
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	bd10      	pop	{r4, pc}

000d5ce4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5ce4:	b508      	push	{r3, lr}
      { delete this; }
   d5ce6:	b108      	cbz	r0, d5cec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5ce8:	f7ff fff5 	bl	d5cd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5cec:	bd08      	pop	{r3, pc}

000d5cee <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5cee:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5cf0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5cf2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5cf4:	b113      	cbz	r3, d5cfc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5cf6:	2203      	movs	r2, #3
   d5cf8:	4601      	mov	r1, r0
   d5cfa:	4798      	blx	r3
    }
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	bd10      	pop	{r4, pc}

000d5d00 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d00:	2200      	movs	r2, #0
   d5d02:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5d04:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d06:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5d0a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d0c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5d10:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d12:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d14:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d16:	680c      	ldr	r4, [r1, #0]
   d5d18:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d1a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5d1c:	bd10      	pop	{r4, pc}

000d5d1e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5d1e:	b510      	push	{r4, lr}
   d5d20:	4604      	mov	r4, r0
    free((void*)msg_);
   d5d22:	6800      	ldr	r0, [r0, #0]
   d5d24:	f7ff fe5c 	bl	d59e0 <free>
}
   d5d28:	4620      	mov	r0, r4
   d5d2a:	bd10      	pop	{r4, pc}

000d5d2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5d2c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5d2e:	68c4      	ldr	r4, [r0, #12]
   d5d30:	b1f4      	cbz	r4, d5d70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5d32:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5d34:	2b02      	cmp	r3, #2
   d5d36:	d103      	bne.n	d5d40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5d38:	f104 000c 	add.w	r0, r4, #12
   d5d3c:	f7ff ffef 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5d40:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5d42:	b135      	cbz	r5, d5d52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d44:	4628      	mov	r0, r5
   d5d46:	f7ff ffd2 	bl	d5cee <_ZNSt14_Function_baseD1Ev>
   d5d4a:	2110      	movs	r1, #16
   d5d4c:	4628      	mov	r0, r5
   d5d4e:	f001 fc6e 	bl	d762e <_ZdlPvj>
   d5d52:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5d54:	b135      	cbz	r5, d5d64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5d56:	4628      	mov	r0, r5
   d5d58:	f7ff ffc9 	bl	d5cee <_ZNSt14_Function_baseD1Ev>
   d5d5c:	2110      	movs	r1, #16
   d5d5e:	4628      	mov	r0, r5
   d5d60:	f001 fc65 	bl	d762e <_ZdlPvj>
   d5d64:	4620      	mov	r0, r4
   d5d66:	2114      	movs	r1, #20
   d5d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5d6c:	f001 bc5f 	b.w	d762e <_ZdlPvj>
   d5d70:	bd38      	pop	{r3, r4, r5, pc}

000d5d72 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5d72:	b510      	push	{r4, lr}
   d5d74:	b088      	sub	sp, #32
   d5d76:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5d78:	4668      	mov	r0, sp
   d5d7a:	f001 f895 	bl	d6ea8 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5d7e:	4669      	mov	r1, sp
   d5d80:	a804      	add	r0, sp, #16
   d5d82:	f001 f8b3 	bl	d6eec <_ZN6StringC1ERKS_>
   d5d86:	a804      	add	r0, sp, #16
   d5d88:	47a0      	blx	r4
   d5d8a:	4604      	mov	r4, r0
   d5d8c:	a804      	add	r0, sp, #16
   d5d8e:	f001 f844 	bl	d6e1a <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5d92:	4668      	mov	r0, sp
   d5d94:	f001 f841 	bl	d6e1a <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5d98:	4620      	mov	r0, r4
   d5d9a:	b008      	add	sp, #32
   d5d9c:	bd10      	pop	{r4, pc}

000d5d9e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5da0:	2410      	movs	r4, #16
   d5da2:	b085      	sub	sp, #20
   d5da4:	4607      	mov	r7, r0
   d5da6:	460e      	mov	r6, r1
   d5da8:	4615      	mov	r5, r2
   d5daa:	2100      	movs	r1, #0
   d5dac:	4622      	mov	r2, r4
   d5dae:	4668      	mov	r0, sp
   d5db0:	f002 fba3 	bl	d84fa <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5db4:	2200      	movs	r2, #0
   d5db6:	4669      	mov	r1, sp
   d5db8:	4610      	mov	r0, r2
         size = sizeof(*this);
   d5dba:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d5dbe:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5dc0:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5dc2:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5dc4:	f7ff fd5c 	bl	d5880 <spark_function>
}
   d5dc8:	b005      	add	sp, #20
   d5dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5dcc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5dcc:	b513      	push	{r0, r1, r4, lr}
   d5dce:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5dd0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5dd4:	2300      	movs	r3, #0
   d5dd6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5dd8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5dda:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ddc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dde:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5de0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5de2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5de4:	f7fe fab4 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5de8:	4620      	mov	r0, r4
   d5dea:	b002      	add	sp, #8
   d5dec:	bd10      	pop	{r4, pc}

000d5dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5df0:	460c      	mov	r4, r1
   d5df2:	ad02      	add	r5, sp, #8
   d5df4:	f854 3b04 	ldr.w	r3, [r4], #4
   d5df8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5dfc:	4606      	mov	r6, r0
   d5dfe:	460f      	mov	r7, r1
   d5e00:	a801      	add	r0, sp, #4
   d5e02:	4621      	mov	r1, r4
   d5e04:	f7ff fe3f 	bl	d5a86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5e08:	4629      	mov	r1, r5
   d5e0a:	4630      	mov	r0, r6
   d5e0c:	f7ff ffde 	bl	d5dcc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e10:	a801      	add	r0, sp, #4
   d5e12:	f7fe fa9d 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e16:	4620      	mov	r0, r4
   d5e18:	f7fe fa9a 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5e1c:	4638      	mov	r0, r7
   d5e1e:	2108      	movs	r1, #8
   d5e20:	f001 fc05 	bl	d762e <_ZdlPvj>
        return p;
    }
   d5e24:	4630      	mov	r0, r6
   d5e26:	b003      	add	sp, #12
   d5e28:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e2a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5e2a:	b513      	push	{r0, r1, r4, lr}
   d5e2c:	460b      	mov	r3, r1
   d5e2e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e30:	c803      	ldmia	r0, {r0, r1}
   d5e32:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e36:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e3a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e3e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5e42:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5e46:	b002      	add	sp, #8
   d5e48:	bd10      	pop	{r4, pc}
	...

000d5e4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e4c:	b538      	push	{r3, r4, r5, lr}
   d5e4e:	2300      	movs	r3, #0
   d5e50:	4604      	mov	r4, r0
   d5e52:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e54:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e56:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e58:	f7fe f91f 	bl	d409a <_Znwj>
   d5e5c:	b128      	cbz	r0, d5e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5e5e:	2301      	movs	r3, #1
   d5e60:	6043      	str	r3, [r0, #4]
   d5e62:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5e64:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5e66:	6003      	str	r3, [r0, #0]
   d5e68:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e6a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	bd38      	pop	{r3, r4, r5, pc}
   d5e70:	000dadec 	.word	0x000dadec

000d5e74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e74:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e76:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e78:	b90a      	cbnz	r2, d5e7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5e7a:	f001 fbda 	bl	d7632 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e7e:	68c3      	ldr	r3, [r0, #12]
    }
   d5e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e84:	4718      	bx	r3

000d5e86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e86:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e88:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e8a:	f100 0110 	add.w	r1, r0, #16
   d5e8e:	f7ff fff1 	bl	d5e74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5e92:	bd08      	pop	{r3, pc}

000d5e94 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e94:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e96:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e98:	b90a      	cbnz	r2, d5e9e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5e9a:	f001 fbca 	bl	d7632 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e9e:	68c3      	ldr	r3, [r0, #12]
    }
   d5ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ea4:	4718      	bx	r3

000d5ea6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5ea6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5ea8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5eaa:	f100 0110 	add.w	r1, r0, #16
   d5eae:	f7ff fff1 	bl	d5e94 <_ZNKSt8functionIFvRKbEEclES1_>
   d5eb2:	bd08      	pop	{r3, pc}

000d5eb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5eb4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5eb6:	2300      	movs	r3, #0
   d5eb8:	6083      	str	r3, [r0, #8]
   d5eba:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5ebc:	4604      	mov	r4, r0
   d5ebe:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5ec0:	b12b      	cbz	r3, d5ece <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ec2:	2202      	movs	r2, #2
   d5ec4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ec6:	68eb      	ldr	r3, [r5, #12]
   d5ec8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5eca:	68ab      	ldr	r3, [r5, #8]
   d5ecc:	60a3      	str	r3, [r4, #8]
	}
    }
   d5ece:	4620      	mov	r0, r4
   d5ed0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ed6:	b089      	sub	sp, #36	; 0x24
   d5ed8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5eda:	4668      	mov	r0, sp
   d5edc:	f7ff ff10 	bl	d5d00 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5ee0:	2300      	movs	r3, #0
   d5ee2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5ee6:	f04f 0202 	mov.w	r2, #2
   d5eea:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5eee:	2b00      	cmp	r3, #0
   d5ef0:	d103      	bne.n	d5efa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5ef2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5ef6:	2900      	cmp	r1, #0
   d5ef8:	d1f7      	bne.n	d5eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5efa:	d002      	beq.n	d5f02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5efc:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f00:	e063      	b.n	d5fca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5f02:	f114 050c 	adds.w	r5, r4, #12
   d5f06:	d003      	beq.n	d5f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5f08:	4669      	mov	r1, sp
   d5f0a:	4628      	mov	r0, r5
   d5f0c:	f7ff fef8 	bl	d5d00 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5f10:	f3bf 8f5f 	dmb	sy
   d5f14:	2301      	movs	r3, #1
   d5f16:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5f18:	2000      	movs	r0, #0
   d5f1a:	f104 0308 	add.w	r3, r4, #8
   d5f1e:	f3bf 8f5f 	dmb	sy
   d5f22:	e853 6f00 	ldrex	r6, [r3]
   d5f26:	e843 0200 	strex	r2, r0, [r3]
   d5f2a:	2a00      	cmp	r2, #0
   d5f2c:	d1f9      	bne.n	d5f22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5f2e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5f32:	2e00      	cmp	r6, #0
   d5f34:	d049      	beq.n	d5fca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5f36:	f7ff fc65 	bl	d5804 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5f3a:	b120      	cbz	r0, d5f46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5f3c:	4629      	mov	r1, r5
   d5f3e:	4630      	mov	r0, r6
   d5f40:	f7ff ff98 	bl	d5e74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5f44:	e03a      	b.n	d5fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5f46:	4631      	mov	r1, r6
   d5f48:	a802      	add	r0, sp, #8
   d5f4a:	f7ff ffb3 	bl	d5eb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5f4e:	68e0      	ldr	r0, [r4, #12]
   d5f50:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5f54:	b108      	cbz	r0, d5f5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5f56:	f002 fb13 	bl	d8580 <strdup>
   d5f5a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f5c:	2010      	movs	r0, #16
   d5f5e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5f62:	f7fe f89a 	bl	d409a <_Znwj>
   d5f66:	4605      	mov	r5, r0
   d5f68:	b1e8      	cbz	r0, d5fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f6a:	2700      	movs	r7, #0
   d5f6c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f6e:	2018      	movs	r0, #24
   d5f70:	f7fe f893 	bl	d409a <_Znwj>
   d5f74:	4604      	mov	r4, r0
   d5f76:	b188      	cbz	r0, d5f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f78:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f7a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f7c:	a802      	add	r0, sp, #8
   d5f7e:	f7ff ff54 	bl	d5e2a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f82:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f86:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f88:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5f8a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f8c:	a906      	add	r1, sp, #24
   d5f8e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f90:	60e3      	str	r3, [r4, #12]
   d5f92:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f96:	9205      	str	r2, [sp, #20]
   d5f98:	f7ff feb2 	bl	d5d00 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f9c:	4b0d      	ldr	r3, [pc, #52]	; (d5fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5f9e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5fa0:	4b0d      	ldr	r3, [pc, #52]	; (d5fd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5fa2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5fa4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5fa6:	a806      	add	r0, sp, #24
   d5fa8:	f7ff feb9 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fac:	a802      	add	r0, sp, #8
   d5fae:	f7ff fe9e 	bl	d5cee <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5fb2:	2200      	movs	r2, #0
   d5fb4:	4629      	mov	r1, r5
   d5fb6:	4809      	ldr	r0, [pc, #36]	; (d5fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5fb8:	f7ff fc2c 	bl	d5814 <application_thread_invoke>
   d5fbc:	4630      	mov	r0, r6
   d5fbe:	f7ff fe96 	bl	d5cee <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5fc2:	2110      	movs	r1, #16
   d5fc4:	4630      	mov	r0, r6
   d5fc6:	f001 fb32 	bl	d762e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5fca:	4668      	mov	r0, sp
   d5fcc:	f7ff fea7 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
    }
   d5fd0:	b009      	add	sp, #36	; 0x24
   d5fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fd4:	000d5e87 	.word	0x000d5e87
   d5fd8:	000d60fd 	.word	0x000d60fd
   d5fdc:	000d5a5f 	.word	0x000d5a5f

000d5fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fe4:	b08b      	sub	sp, #44	; 0x2c
   d5fe6:	4606      	mov	r6, r0
   d5fe8:	460f      	mov	r7, r1
   d5fea:	4690      	mov	r8, r2
   d5fec:	4699      	mov	r9, r3
   d5fee:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ff2:	f7ff fc65 	bl	d58c0 <spark_cloud_flag_connected>
   d5ff6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5ff8:	4683      	mov	fp, r0
   d5ffa:	bb30      	cbnz	r0, d604a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5ffc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6000:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6002:	a905      	add	r1, sp, #20
   d6004:	4628      	mov	r0, r5
   d6006:	f8ad 3018 	strh.w	r3, [sp, #24]
   d600a:	f7ff fe79 	bl	d5d00 <_ZN8particle5ErrorC1EOS0_>
   d600e:	2014      	movs	r0, #20
   d6010:	f7fe f843 	bl	d409a <_Znwj>
   d6014:	4604      	mov	r4, r0
   d6016:	b158      	cbz	r0, d6030 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6018:	2302      	movs	r3, #2
   d601a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d601c:	2301      	movs	r3, #1
   d601e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6020:	f8c0 b004 	str.w	fp, [r0, #4]
   d6024:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6028:	4629      	mov	r1, r5
   d602a:	300c      	adds	r0, #12
   d602c:	f7ff fe68 	bl	d5d00 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6030:	4630      	mov	r0, r6
   d6032:	4621      	mov	r1, r4
   d6034:	f840 4b04 	str.w	r4, [r0], #4
   d6038:	f7ff ff08 	bl	d5e4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d603c:	4628      	mov	r0, r5
   d603e:	f7ff fe6e 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6042:	a805      	add	r0, sp, #20
   d6044:	f7ff fe6b 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
   d6048:	e052      	b.n	d60f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d604a:	2400      	movs	r4, #0
   d604c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d604e:	2014      	movs	r0, #20
   d6050:	606c      	str	r4, [r5, #4]
   d6052:	60ac      	str	r4, [r5, #8]
   d6054:	9307      	str	r3, [sp, #28]
   d6056:	f7fe f820 	bl	d409a <_Znwj>
   d605a:	4601      	mov	r1, r0
   d605c:	b118      	cbz	r0, d6066 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d605e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6060:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6062:	6044      	str	r4, [r0, #4]
   d6064:	6084      	str	r4, [r0, #8]
   d6066:	a804      	add	r0, sp, #16
   d6068:	9103      	str	r1, [sp, #12]
   d606a:	f7ff feef 	bl	d5e4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d606e:	4b22      	ldr	r3, [pc, #136]	; (d60f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6070:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6072:	2008      	movs	r0, #8
   d6074:	f7fe f811 	bl	d409a <_Znwj>
   d6078:	4604      	mov	r4, r0
   d607a:	b128      	cbz	r0, d6088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d607c:	9b03      	ldr	r3, [sp, #12]
   d607e:	f840 3b04 	str.w	r3, [r0], #4
   d6082:	a904      	add	r1, sp, #16
   d6084:	f7ff fcff 	bl	d5a86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6088:	9500      	str	r5, [sp, #0]
   d608a:	fa5f f38a 	uxtb.w	r3, sl
   d608e:	464a      	mov	r2, r9
   d6090:	4641      	mov	r1, r8
   d6092:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6094:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6096:	f7ff fc23 	bl	d58e0 <spark_send_event>
   d609a:	b920      	cbnz	r0, d60a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d609c:	9b03      	ldr	r3, [sp, #12]
   d609e:	785b      	ldrb	r3, [r3, #1]
   d60a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d60a4:	b183      	cbz	r3, d60c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d60a6:	9b03      	ldr	r3, [sp, #12]
   d60a8:	9305      	str	r3, [sp, #20]
   d60aa:	a904      	add	r1, sp, #16
   d60ac:	a806      	add	r0, sp, #24
   d60ae:	f7ff fcea 	bl	d5a86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d60b2:	a905      	add	r1, sp, #20
   d60b4:	4630      	mov	r0, r6
   d60b6:	f7ff fe89 	bl	d5dcc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60ba:	a806      	add	r0, sp, #24
   d60bc:	f7fe f948 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60c0:	a804      	add	r0, sp, #16
   d60c2:	f7fe f945 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60c6:	e013      	b.n	d60f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d60c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d60cc:	a905      	add	r1, sp, #20
   d60ce:	a803      	add	r0, sp, #12
   d60d0:	9205      	str	r2, [sp, #20]
   d60d2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d60d6:	f7ff fefd 	bl	d5ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d60da:	a805      	add	r0, sp, #20
   d60dc:	f7ff fe1f 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d60e0:	a805      	add	r0, sp, #20
   d60e2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d60e4:	f7ff fe83 	bl	d5dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d60e8:	a806      	add	r0, sp, #24
   d60ea:	f7fe f931 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60ee:	e7da      	b.n	d60a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d60f0:	4630      	mov	r0, r6
   d60f2:	b00b      	add	sp, #44	; 0x2c
   d60f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60f8:	000d626d 	.word	0x000d626d

000d60fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d60fc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d60fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6100:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6102:	d006      	beq.n	d6112 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6104:	2a03      	cmp	r2, #3
   d6106:	d017      	beq.n	d6138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6108:	2a01      	cmp	r2, #1
   d610a:	d122      	bne.n	d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d610c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d610e:	6003      	str	r3, [r0, #0]
	      break;
   d6110:	e01f      	b.n	d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6112:	2018      	movs	r0, #24
   d6114:	680e      	ldr	r6, [r1, #0]
   d6116:	f7fd ffc0 	bl	d409a <_Znwj>
   d611a:	4605      	mov	r5, r0
   d611c:	b150      	cbz	r0, d6134 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d611e:	4631      	mov	r1, r6
   d6120:	f7ff fec8 	bl	d5eb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6124:	6930      	ldr	r0, [r6, #16]
   d6126:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d612a:	b108      	cbz	r0, d6130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d612c:	f002 fa28 	bl	d8580 <strdup>
   d6130:	6128      	str	r0, [r5, #16]
   d6132:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6134:	6025      	str	r5, [r4, #0]
   d6136:	e00c      	b.n	d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6138:	6804      	ldr	r4, [r0, #0]
   d613a:	b154      	cbz	r4, d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d613c:	f104 0010 	add.w	r0, r4, #16
   d6140:	f7ff fded 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6144:	4620      	mov	r0, r4
   d6146:	f7ff fdd2 	bl	d5cee <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d614a:	2118      	movs	r1, #24
   d614c:	4620      	mov	r0, r4
   d614e:	f001 fa6e 	bl	d762e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6152:	2000      	movs	r0, #0
   d6154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6156 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6156:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6158:	2300      	movs	r3, #0
   d615a:	6083      	str	r3, [r0, #8]
   d615c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d615e:	4604      	mov	r4, r0
   d6160:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6162:	b12b      	cbz	r3, d6170 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6164:	2202      	movs	r2, #2
   d6166:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6168:	68eb      	ldr	r3, [r5, #12]
   d616a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d616c:	68ab      	ldr	r3, [r5, #8]
   d616e:	60a3      	str	r3, [r4, #8]
	}
    }
   d6170:	4620      	mov	r0, r4
   d6172:	bd38      	pop	{r3, r4, r5, pc}

000d6174 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6174:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6176:	b570      	push	{r4, r5, r6, lr}
   d6178:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d617a:	d006      	beq.n	d618a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d617c:	2a03      	cmp	r2, #3
   d617e:	d011      	beq.n	d61a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6180:	2a01      	cmp	r2, #1
   d6182:	d118      	bne.n	d61b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6184:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6186:	6003      	str	r3, [r0, #0]
	      break;
   d6188:	e015      	b.n	d61b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d618a:	2014      	movs	r0, #20
   d618c:	680e      	ldr	r6, [r1, #0]
   d618e:	f7fd ff84 	bl	d409a <_Znwj>
   d6192:	4605      	mov	r5, r0
   d6194:	b120      	cbz	r0, d61a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6196:	4631      	mov	r1, r6
   d6198:	f7ff ffdd 	bl	d6156 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d619c:	7c33      	ldrb	r3, [r6, #16]
   d619e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d61a0:	6025      	str	r5, [r4, #0]
   d61a2:	e008      	b.n	d61b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d61a4:	6804      	ldr	r4, [r0, #0]
   d61a6:	b134      	cbz	r4, d61b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61a8:	4620      	mov	r0, r4
   d61aa:	f7ff fda0 	bl	d5cee <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d61ae:	2114      	movs	r1, #20
   d61b0:	4620      	mov	r0, r4
   d61b2:	f001 fa3c 	bl	d762e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d61b6:	2000      	movs	r0, #0
   d61b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d61bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d61bc:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d61be:	2300      	movs	r3, #0
   d61c0:	b087      	sub	sp, #28
   d61c2:	460c      	mov	r4, r1
   d61c4:	f3bf 8f5f 	dmb	sy
   d61c8:	e850 6f00 	ldrex	r6, [r0]
   d61cc:	e840 3200 	strex	r2, r3, [r0]
   d61d0:	2a00      	cmp	r2, #0
   d61d2:	d1f9      	bne.n	d61c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d61d4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d61d8:	2e00      	cmp	r6, #0
   d61da:	d03f      	beq.n	d625c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d61dc:	4618      	mov	r0, r3
   d61de:	f7ff fb11 	bl	d5804 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d61e2:	4607      	mov	r7, r0
   d61e4:	b120      	cbz	r0, d61f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d61e6:	4621      	mov	r1, r4
   d61e8:	4630      	mov	r0, r6
   d61ea:	f7ff fe53 	bl	d5e94 <_ZNKSt8functionIFvRKbEEclES1_>
   d61ee:	e02e      	b.n	d624e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d61f0:	4631      	mov	r1, r6
   d61f2:	a801      	add	r0, sp, #4
   d61f4:	f7ff ffaf 	bl	d6156 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d61f8:	7823      	ldrb	r3, [r4, #0]
   d61fa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d61fe:	2010      	movs	r0, #16
   d6200:	f7fd ff4b 	bl	d409a <_Znwj>
   d6204:	4605      	mov	r5, r0
   d6206:	b1d0      	cbz	r0, d623e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6208:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d620a:	2014      	movs	r0, #20
   d620c:	f7fd ff45 	bl	d409a <_Znwj>
   d6210:	4604      	mov	r4, r0
   d6212:	b178      	cbz	r0, d6234 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6214:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6216:	4601      	mov	r1, r0
   d6218:	a801      	add	r0, sp, #4
   d621a:	f7ff fe06 	bl	d5e2a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d621e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6220:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6222:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6224:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6226:	9203      	str	r2, [sp, #12]
   d6228:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d622a:	60e3      	str	r3, [r4, #12]
   d622c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6230:	9204      	str	r2, [sp, #16]
   d6232:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6234:	4b0a      	ldr	r3, [pc, #40]	; (d6260 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6236:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6238:	4b0a      	ldr	r3, [pc, #40]	; (d6264 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d623a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d623c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d623e:	a801      	add	r0, sp, #4
   d6240:	f7ff fd55 	bl	d5cee <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6244:	2200      	movs	r2, #0
   d6246:	4629      	mov	r1, r5
   d6248:	4807      	ldr	r0, [pc, #28]	; (d6268 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d624a:	f7ff fae3 	bl	d5814 <application_thread_invoke>
   d624e:	4630      	mov	r0, r6
   d6250:	f7ff fd4d 	bl	d5cee <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6254:	2110      	movs	r1, #16
   d6256:	4630      	mov	r0, r6
   d6258:	f001 f9e9 	bl	d762e <_ZdlPvj>
        }
    }
   d625c:	b007      	add	sp, #28
   d625e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6260:	000d5ea7 	.word	0x000d5ea7
   d6264:	000d6175 	.word	0x000d6175
   d6268:	000d5a5f 	.word	0x000d5a5f

000d626c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d626c:	b530      	push	{r4, r5, lr}
   d626e:	b085      	sub	sp, #20
   d6270:	4604      	mov	r4, r0
   d6272:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6274:	4668      	mov	r0, sp
   d6276:	4611      	mov	r1, r2
   d6278:	f7ff fdb9 	bl	d5dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d627c:	b17c      	cbz	r4, d629e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d627e:	b224      	sxth	r4, r4
   d6280:	4628      	mov	r0, r5
   d6282:	b10d      	cbz	r5, d6288 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6284:	f002 f97c 	bl	d8580 <strdup>
   d6288:	9002      	str	r0, [sp, #8]
   d628a:	a902      	add	r1, sp, #8
   d628c:	4668      	mov	r0, sp
   d628e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6292:	f7ff fe1f 	bl	d5ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6296:	a802      	add	r0, sp, #8
   d6298:	f7ff fd41 	bl	d5d1e <_ZN8particle5ErrorD1Ev>
   d629c:	e01d      	b.n	d62da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d629e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d62a0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d62a4:	f04f 0201 	mov.w	r2, #1
   d62a8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d62ac:	42a3      	cmp	r3, r4
   d62ae:	d103      	bne.n	d62b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d62b0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d62b4:	2900      	cmp	r1, #0
   d62b6:	d1f7      	bne.n	d62a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d62b8:	d002      	beq.n	d62c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d62ba:	f88d 3008 	strb.w	r3, [sp, #8]
   d62be:	e00c      	b.n	d62da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d62c0:	f110 010c 	adds.w	r1, r0, #12
   d62c4:	f04f 0301 	mov.w	r3, #1
   d62c8:	bf18      	it	ne
   d62ca:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d62cc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d62d0:	3004      	adds	r0, #4
   d62d2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d62d6:	f7ff ff71 	bl	d61bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d62da:	a801      	add	r0, sp, #4
   d62dc:	f7fe f838 	bl	d4350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d62e0:	b005      	add	sp, #20
   d62e2:	bd30      	pop	{r4, r5, pc}

000d62e4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62e4:	2200      	movs	r2, #0
   d62e6:	4611      	mov	r1, r2
   d62e8:	6840      	ldr	r0, [r0, #4]
   d62ea:	f7ff bb59 	b.w	d59a0 <network_listening>

000d62ee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d62ee:	2200      	movs	r2, #0
   d62f0:	4611      	mov	r1, r2
   d62f2:	6840      	ldr	r0, [r0, #4]
   d62f4:	f7ff bb64 	b.w	d59c0 <network_get_listen_timeout>

000d62f8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d62f8:	2200      	movs	r2, #0
   d62fa:	6840      	ldr	r0, [r0, #4]
   d62fc:	f7ff bb58 	b.w	d59b0 <network_set_listen_timeout>

000d6300 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6300:	2200      	movs	r2, #0
   d6302:	f081 0101 	eor.w	r1, r1, #1
   d6306:	6840      	ldr	r0, [r0, #4]
   d6308:	f7ff bb42 	b.w	d5990 <network_listen>

000d630c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d630c:	2300      	movs	r3, #0
   d630e:	461a      	mov	r2, r3
   d6310:	4619      	mov	r1, r3
   d6312:	6840      	ldr	r0, [r0, #4]
   d6314:	f7ff bb34 	b.w	d5980 <network_off>

000d6318 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6318:	2300      	movs	r3, #0
   d631a:	461a      	mov	r2, r3
   d631c:	4619      	mov	r1, r3
   d631e:	6840      	ldr	r0, [r0, #4]
   d6320:	f7ff bb26 	b.w	d5970 <network_on>

000d6324 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6324:	2200      	movs	r2, #0
   d6326:	4611      	mov	r1, r2
   d6328:	6840      	ldr	r0, [r0, #4]
   d632a:	f7ff bb19 	b.w	d5960 <network_ready>

000d632e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d632e:	2200      	movs	r2, #0
   d6330:	4611      	mov	r1, r2
   d6332:	6840      	ldr	r0, [r0, #4]
   d6334:	f7ff bb04 	b.w	d5940 <network_connecting>

000d6338 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6338:	2200      	movs	r2, #0
   d633a:	2102      	movs	r1, #2
   d633c:	6840      	ldr	r0, [r0, #4]
   d633e:	f7ff bb07 	b.w	d5950 <network_disconnect>

000d6342 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6342:	2300      	movs	r3, #0
   d6344:	461a      	mov	r2, r3
   d6346:	6840      	ldr	r0, [r0, #4]
   d6348:	f7ff baf2 	b.w	d5930 <network_connect>

000d634c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d634c:	4b02      	ldr	r3, [pc, #8]	; (d6358 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d634e:	2203      	movs	r2, #3
   d6350:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6352:	4a02      	ldr	r2, [pc, #8]	; (d635c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6354:	601a      	str	r2, [r3, #0]
   d6356:	4770      	bx	lr
   d6358:	2003e35c 	.word	0x2003e35c
   d635c:	000dae08 	.word	0x000dae08

000d6360 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6360:	6800      	ldr	r0, [r0, #0]
   d6362:	f000 b8d6 	b.w	d6512 <_ZN7TwoWire4lockEv>

000d6366 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6366:	b510      	push	{r4, lr}
   d6368:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d636a:	6001      	str	r1, [r0, #0]
   d636c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d636e:	b10a      	cbz	r2, d6374 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6370:	f7ff fff6 	bl	d6360 <_ZN9FuelGauge4lockEv>
    }
}
   d6374:	4620      	mov	r0, r4
   d6376:	bd10      	pop	{r4, pc}

000d6378 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d6378:	b538      	push	{r3, r4, r5, lr}
   d637a:	4604      	mov	r4, r0
   d637c:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d637e:	f001 f90f 	bl	d75a0 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6382:	462a      	mov	r2, r5
   d6384:	4601      	mov	r1, r0
   d6386:	4620      	mov	r0, r4
   d6388:	f7ff ffed 	bl	d6366 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d638c:	4620      	mov	r0, r4
   d638e:	bd38      	pop	{r3, r4, r5, pc}

000d6390 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6390:	6800      	ldr	r0, [r0, #0]
   d6392:	f000 b8c7 	b.w	d6524 <_ZN7TwoWire6unlockEv>

000d6396 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6396:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6398:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d639a:	4604      	mov	r4, r0
{
    if (lock_) {
   d639c:	b10b      	cbz	r3, d63a2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d639e:	f7ff fff7 	bl	d6390 <_ZN9FuelGauge6unlockEv>
    }
}
   d63a2:	4620      	mov	r0, r4
   d63a4:	bd10      	pop	{r4, pc}

000d63a6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d63a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63a8:	4604      	mov	r4, r0
   d63aa:	4616      	mov	r6, r2
   d63ac:	461d      	mov	r5, r3
   d63ae:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d63b0:	f7ff ffd6 	bl	d6360 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d63b4:	6820      	ldr	r0, [r4, #0]
   d63b6:	2136      	movs	r1, #54	; 0x36
   d63b8:	f000 f89d 	bl	d64f6 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d63bc:	6820      	ldr	r0, [r4, #0]
   d63be:	6803      	ldr	r3, [r0, #0]
   d63c0:	4639      	mov	r1, r7
   d63c2:	689b      	ldr	r3, [r3, #8]
   d63c4:	4798      	blx	r3
    i2c_.endTransmission(true);
   d63c6:	2101      	movs	r1, #1
   d63c8:	6820      	ldr	r0, [r4, #0]
   d63ca:	f000 f897 	bl	d64fc <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d63ce:	2202      	movs	r2, #2
   d63d0:	2136      	movs	r1, #54	; 0x36
   d63d2:	2301      	movs	r3, #1
   d63d4:	6820      	ldr	r0, [r4, #0]
   d63d6:	f000 f885 	bl	d64e4 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d63da:	6820      	ldr	r0, [r4, #0]
   d63dc:	6803      	ldr	r3, [r0, #0]
   d63de:	695b      	ldr	r3, [r3, #20]
   d63e0:	4798      	blx	r3
   d63e2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d63e4:	6820      	ldr	r0, [r4, #0]
   d63e6:	6803      	ldr	r3, [r0, #0]
   d63e8:	695b      	ldr	r3, [r3, #20]
   d63ea:	4798      	blx	r3
   d63ec:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d63ee:	4620      	mov	r0, r4
}
   d63f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d63f4:	f7ff bfcc 	b.w	d6390 <_ZN9FuelGauge6unlockEv>

000d63f8 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d63f8:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d63fa:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d63fc:	2200      	movs	r2, #0
	byte LSB = 0;
   d63fe:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6402:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d6406:	2104      	movs	r1, #4
   d6408:	f10d 0206 	add.w	r2, sp, #6
   d640c:	f7ff ffcb 	bl	d63a6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6410:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6414:	f001 fbaa 	bl	d7b6c <__aeabi_i2d>
   d6418:	2200      	movs	r2, #0
   d641a:	4b09      	ldr	r3, [pc, #36]	; (d6440 <_ZN9FuelGauge6getSoCEv+0x48>)
   d641c:	f001 fc0c 	bl	d7c38 <__aeabi_dmul>
   d6420:	f001 ff02 	bl	d8228 <__aeabi_d2f>
   d6424:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6428:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d642c:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6430:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6434:	ee37 0a80 	vadd.f32	s0, s15, s0
   d6438:	b003      	add	sp, #12
   d643a:	f85d fb04 	ldr.w	pc, [sp], #4
   d643e:	bf00      	nop
   d6440:	3f700000 	.word	0x3f700000

000d6444 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6444:	4770      	bx	lr

000d6446 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6448:	4606      	mov	r6, r0
   d644a:	4615      	mov	r5, r2
   d644c:	460c      	mov	r4, r1
   d644e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6450:	42bc      	cmp	r4, r7
   d6452:	d006      	beq.n	d6462 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6454:	6833      	ldr	r3, [r6, #0]
   d6456:	f814 1b01 	ldrb.w	r1, [r4], #1
   d645a:	689b      	ldr	r3, [r3, #8]
   d645c:	4630      	mov	r0, r6
   d645e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6460:	e7f6      	b.n	d6450 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6462:	4628      	mov	r0, r5
   d6464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6466 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6466:	2200      	movs	r2, #0
   d6468:	7c00      	ldrb	r0, [r0, #16]
   d646a:	f7ff b8bb 	b.w	d55e4 <HAL_I2C_Write_Data>

000d646e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d646e:	2100      	movs	r1, #0
   d6470:	7c00      	ldrb	r0, [r0, #16]
   d6472:	f7ff b8bf 	b.w	d55f4 <HAL_I2C_Available_Data>

000d6476 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6476:	2100      	movs	r1, #0
   d6478:	7c00      	ldrb	r0, [r0, #16]
   d647a:	f7ff b8c3 	b.w	d5604 <HAL_I2C_Read_Data>

000d647e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d647e:	2100      	movs	r1, #0
   d6480:	7c00      	ldrb	r0, [r0, #16]
   d6482:	f7ff b8c7 	b.w	d5614 <HAL_I2C_Peek_Data>

000d6486 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6486:	2100      	movs	r1, #0
   d6488:	7c00      	ldrb	r0, [r0, #16]
   d648a:	f7ff b8cb 	b.w	d5624 <HAL_I2C_Flush_Data>

000d648e <_ZN7TwoWireD0Ev>:
   d648e:	b510      	push	{r4, lr}
   d6490:	2114      	movs	r1, #20
   d6492:	4604      	mov	r4, r0
   d6494:	f001 f8cb 	bl	d762e <_ZdlPvj>
   d6498:	4620      	mov	r0, r4
   d649a:	bd10      	pop	{r4, pc}

000d649c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d649c:	b510      	push	{r4, lr}
   d649e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d64a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d64a4:	4608      	mov	r0, r1
   d64a6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d64a8:	2100      	movs	r1, #0
   d64aa:	4b04      	ldr	r3, [pc, #16]	; (d64bc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d64ac:	7420      	strb	r0, [r4, #16]
   d64ae:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d64b0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d64b2:	f7ff f8c7 	bl	d5644 <HAL_I2C_Init>

}
   d64b6:	4620      	mov	r0, r4
   d64b8:	bd10      	pop	{r4, pc}
   d64ba:	bf00      	nop
   d64bc:	000dae3c 	.word	0x000dae3c

000d64c0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d64c0:	2300      	movs	r3, #0
   d64c2:	461a      	mov	r2, r3
   d64c4:	4619      	mov	r1, r3
   d64c6:	7c00      	ldrb	r0, [r0, #16]
   d64c8:	f7ff b86c 	b.w	d55a4 <HAL_I2C_Begin>

000d64cc <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d64cc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d64ce:	2400      	movs	r4, #0
   d64d0:	7c00      	ldrb	r0, [r0, #16]
   d64d2:	9400      	str	r4, [sp, #0]
   d64d4:	f7ff f86e 	bl	d55b4 <HAL_I2C_Request_Data>
  return result;
}
   d64d8:	b2c0      	uxtb	r0, r0
   d64da:	b002      	add	sp, #8
   d64dc:	bd10      	pop	{r4, pc}

000d64de <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d64de:	2301      	movs	r3, #1
   d64e0:	f7ff bff4 	b.w	d64cc <_ZN7TwoWire11requestFromEhhh>

000d64e4 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d64e4:	b2db      	uxtb	r3, r3
   d64e6:	b2d2      	uxtb	r2, r2
   d64e8:	b2c9      	uxtb	r1, r1
   d64ea:	f7ff bfef 	b.w	d64cc <_ZN7TwoWire11requestFromEhhh>

000d64ee <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d64ee:	2200      	movs	r2, #0
   d64f0:	7c00      	ldrb	r0, [r0, #16]
   d64f2:	f7ff b867 	b.w	d55c4 <HAL_I2C_Begin_Transmission>

000d64f6 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d64f6:	b2c9      	uxtb	r1, r1
   d64f8:	f7ff bff9 	b.w	d64ee <_ZN7TwoWire17beginTransmissionEh>

000d64fc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d64fc:	2200      	movs	r2, #0
   d64fe:	7c00      	ldrb	r0, [r0, #16]
   d6500:	f7ff b868 	b.w	d55d4 <HAL_I2C_End_Transmission>

000d6504 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6504:	2101      	movs	r1, #1
   d6506:	f7ff bff9 	b.w	d64fc <_ZN7TwoWire15endTransmissionEh>

000d650a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d650a:	2100      	movs	r1, #0
   d650c:	7c00      	ldrb	r0, [r0, #16]
   d650e:	f7ff b891 	b.w	d5634 <HAL_I2C_Is_Enabled>

000d6512 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6512:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6514:	2100      	movs	r1, #0
   d6516:	7c00      	ldrb	r0, [r0, #16]
   d6518:	f7ff f89c 	bl	d5654 <HAL_I2C_Acquire>
}
   d651c:	fab0 f080 	clz	r0, r0
   d6520:	0940      	lsrs	r0, r0, #5
   d6522:	bd08      	pop	{r3, pc}

000d6524 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6524:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6526:	2100      	movs	r1, #0
   d6528:	7c00      	ldrb	r0, [r0, #16]
   d652a:	f7ff f89b 	bl	d5664 <HAL_I2C_Release>
}
   d652e:	fab0 f080 	clz	r0, r0
   d6532:	0940      	lsrs	r0, r0, #5
   d6534:	bd08      	pop	{r3, pc}

000d6536 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6536:	4770      	bx	lr

000d6538 <_ZN9IPAddressD0Ev>:
   d6538:	b510      	push	{r4, lr}
   d653a:	2118      	movs	r1, #24
   d653c:	4604      	mov	r4, r0
   d653e:	f001 f876 	bl	d762e <_ZdlPvj>
   d6542:	4620      	mov	r0, r4
   d6544:	bd10      	pop	{r4, pc}

000d6546 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6546:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6548:	7d03      	ldrb	r3, [r0, #20]
   d654a:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d654c:	b08d      	sub	sp, #52	; 0x34
   d654e:	460e      	mov	r6, r1
   d6550:	f100 0704 	add.w	r7, r0, #4
   d6554:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6558:	d002      	beq.n	d6560 <_ZNK9IPAddress7printToER5Print+0x1a>
   d655a:	f100 0508 	add.w	r5, r0, #8
   d655e:	e018      	b.n	d6592 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6560:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6562:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6564:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6568:	232f      	movs	r3, #47	; 0x2f
   d656a:	462a      	mov	r2, r5
   d656c:	200a      	movs	r0, #10
   d656e:	f7ff f881 	bl	d5674 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6572:	4628      	mov	r0, r5
   d6574:	f002 f81f 	bl	d85b6 <strlen>
   d6578:	6833      	ldr	r3, [r6, #0]
   d657a:	4602      	mov	r2, r0
   d657c:	68db      	ldr	r3, [r3, #12]
   d657e:	4629      	mov	r1, r5
   d6580:	4630      	mov	r0, r6
   d6582:	4798      	blx	r3
   d6584:	e00f      	b.n	d65a6 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6586:	b124      	cbz	r4, d6592 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6588:	212e      	movs	r1, #46	; 0x2e
   d658a:	4630      	mov	r0, r6
   d658c:	f000 fba5 	bl	d6cda <_ZN5Print5printEc>
   d6590:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6592:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6596:	220a      	movs	r2, #10
   d6598:	4630      	mov	r0, r6
   d659a:	f000 fbe4 	bl	d6d66 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d659e:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d65a0:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d65a2:	d1f0      	bne.n	d6586 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d65a4:	4620      	mov	r0, r4
    }
    return n;
}
   d65a6:	b00d      	add	sp, #52	; 0x34
   d65a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d65ac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d65ac:	b510      	push	{r4, lr}
   d65ae:	4b05      	ldr	r3, [pc, #20]	; (d65c4 <_ZN9IPAddressC1Ev+0x18>)
   d65b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d65b2:	2211      	movs	r2, #17
   d65b4:	f840 3b04 	str.w	r3, [r0], #4
   d65b8:	2100      	movs	r1, #0
   d65ba:	f001 ff9e 	bl	d84fa <memset>
{
    clear();
}
   d65be:	4620      	mov	r0, r4
   d65c0:	bd10      	pop	{r4, pc}
   d65c2:	bf00      	nop
   d65c4:	000dae64 	.word	0x000dae64

000d65c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d65c8:	4603      	mov	r3, r0
   d65ca:	4a07      	ldr	r2, [pc, #28]	; (d65e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d65cc:	b510      	push	{r4, lr}
   d65ce:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d65d2:	f101 0210 	add.w	r2, r1, #16
   d65d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d65da:	f843 4b04 	str.w	r4, [r3], #4
   d65de:	4291      	cmp	r1, r2
   d65e0:	d1f9      	bne.n	d65d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d65e2:	780a      	ldrb	r2, [r1, #0]
   d65e4:	701a      	strb	r2, [r3, #0]
}
   d65e6:	bd10      	pop	{r4, pc}
   d65e8:	000dae64 	.word	0x000dae64

000d65ec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d65ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d65fe:	2304      	movs	r3, #4
   d6600:	6041      	str	r1, [r0, #4]
   d6602:	7503      	strb	r3, [r0, #20]
   d6604:	bd10      	pop	{r4, pc}

000d6606 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6606:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6608:	780d      	ldrb	r5, [r1, #0]
   d660a:	788b      	ldrb	r3, [r1, #2]
   d660c:	784a      	ldrb	r2, [r1, #1]
   d660e:	78c9      	ldrb	r1, [r1, #3]
   d6610:	9100      	str	r1, [sp, #0]
   d6612:	4629      	mov	r1, r5
   d6614:	f7ff ffea 	bl	d65ec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6618:	b003      	add	sp, #12
   d661a:	bd30      	pop	{r4, r5, pc}

000d661c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d661c:	4b01      	ldr	r3, [pc, #4]	; (d6624 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d661e:	4a02      	ldr	r2, [pc, #8]	; (d6628 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6620:	601a      	str	r2, [r3, #0]
   d6622:	4770      	bx	lr
   d6624:	2003e364 	.word	0x2003e364
   d6628:	000daee0 	.word	0x000daee0

000d662c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d662c:	2200      	movs	r2, #0
   d662e:	4611      	mov	r1, r2
   d6630:	6840      	ldr	r0, [r0, #4]
   d6632:	f7ff b9b5 	b.w	d59a0 <network_listening>

000d6636 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6636:	2200      	movs	r2, #0
   d6638:	4611      	mov	r1, r2
   d663a:	6840      	ldr	r0, [r0, #4]
   d663c:	f7ff b9c0 	b.w	d59c0 <network_get_listen_timeout>

000d6640 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6640:	2200      	movs	r2, #0
   d6642:	6840      	ldr	r0, [r0, #4]
   d6644:	f7ff b9b4 	b.w	d59b0 <network_set_listen_timeout>

000d6648 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6648:	2200      	movs	r2, #0
   d664a:	f081 0101 	eor.w	r1, r1, #1
   d664e:	6840      	ldr	r0, [r0, #4]
   d6650:	f7ff b99e 	b.w	d5990 <network_listen>

000d6654 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6654:	2300      	movs	r3, #0
   d6656:	461a      	mov	r2, r3
   d6658:	2101      	movs	r1, #1
   d665a:	6840      	ldr	r0, [r0, #4]
   d665c:	f7ff b990 	b.w	d5980 <network_off>

000d6660 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6660:	2300      	movs	r3, #0
   d6662:	461a      	mov	r2, r3
   d6664:	4619      	mov	r1, r3
   d6666:	6840      	ldr	r0, [r0, #4]
   d6668:	f7ff b982 	b.w	d5970 <network_on>

000d666c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d666c:	2200      	movs	r2, #0
   d666e:	4611      	mov	r1, r2
   d6670:	6840      	ldr	r0, [r0, #4]
   d6672:	f7ff b975 	b.w	d5960 <network_ready>

000d6676 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6676:	2200      	movs	r2, #0
   d6678:	4611      	mov	r1, r2
   d667a:	6840      	ldr	r0, [r0, #4]
   d667c:	f7ff b960 	b.w	d5940 <network_connecting>

000d6680 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6680:	2200      	movs	r2, #0
   d6682:	2102      	movs	r1, #2
   d6684:	6840      	ldr	r0, [r0, #4]
   d6686:	f7ff b963 	b.w	d5950 <network_disconnect>

000d668a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d668a:	2300      	movs	r3, #0
   d668c:	461a      	mov	r2, r3
   d668e:	6840      	ldr	r0, [r0, #4]
   d6690:	f7ff b94e 	b.w	d5930 <network_connect>

000d6694 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6694:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6696:	4605      	mov	r5, r0
   d6698:	b188      	cbz	r0, d66be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d669a:	6804      	ldr	r4, [r0, #0]
   d669c:	b14c      	cbz	r4, d66b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d669e:	68a3      	ldr	r3, [r4, #8]
   d66a0:	b11b      	cbz	r3, d66aa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d66a2:	2203      	movs	r2, #3
   d66a4:	4621      	mov	r1, r4
   d66a6:	4620      	mov	r0, r4
   d66a8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66aa:	2110      	movs	r1, #16
   d66ac:	4620      	mov	r0, r4
   d66ae:	f000 ffbe 	bl	d762e <_ZdlPvj>
   d66b2:	4628      	mov	r0, r5
   d66b4:	2114      	movs	r1, #20
      }
   d66b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66ba:	f000 bfb8 	b.w	d762e <_ZdlPvj>
   d66be:	bd38      	pop	{r3, r4, r5, pc}

000d66c0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d66c0:	b110      	cbz	r0, d66c8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d66c2:	6803      	ldr	r3, [r0, #0]
   d66c4:	685b      	ldr	r3, [r3, #4]
   d66c6:	4718      	bx	r3
   d66c8:	4770      	bx	lr

000d66ca <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d66ca:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d66cc:	6803      	ldr	r3, [r0, #0]
   d66ce:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d66d0:	b1bb      	cbz	r3, d6702 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d66d2:	6858      	ldr	r0, [r3, #4]
   d66d4:	f7fe fe9e 	bl	d5414 <os_thread_is_current>
   d66d8:	b978      	cbnz	r0, d66fa <_ZN6ThreadD1Ev+0x30>
   d66da:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d66dc:	7c5a      	ldrb	r2, [r3, #17]
   d66de:	b912      	cbnz	r2, d66e6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d66e0:	6858      	ldr	r0, [r3, #4]
   d66e2:	f7fe fe9f 	bl	d5424 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d66e6:	6823      	ldr	r3, [r4, #0]
   d66e8:	6858      	ldr	r0, [r3, #4]
   d66ea:	f7fe fea3 	bl	d5434 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66ee:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d66f0:	2300      	movs	r3, #0
   d66f2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d66f4:	b128      	cbz	r0, d6702 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d66f6:	f7ff ffcd 	bl	d6694 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66fa:	6820      	ldr	r0, [r4, #0]
   d66fc:	b108      	cbz	r0, d6702 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d66fe:	f7ff ffc9 	bl	d6694 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6702:	4620      	mov	r0, r4
   d6704:	bd10      	pop	{r4, pc}
	...

000d6708 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6708:	b538      	push	{r3, r4, r5, lr}
   d670a:	4b0c      	ldr	r3, [pc, #48]	; (d673c <_ZN5spark9MeshClassD1Ev+0x34>)
   d670c:	6003      	str	r3, [r0, #0]
   d670e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6710:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6714:	b108      	cbz	r0, d671a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6716:	f7fd fcc4 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d671a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d671e:	b135      	cbz	r5, d672e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6720:	4628      	mov	r0, r5
   d6722:	f7ff ffd2 	bl	d66ca <_ZN6ThreadD1Ev>
   d6726:	2104      	movs	r1, #4
   d6728:	4628      	mov	r0, r5
   d672a:	f000 ff80 	bl	d762e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d672e:	68a0      	ldr	r0, [r4, #8]
   d6730:	b108      	cbz	r0, d6736 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6732:	f7ff ffc5 	bl	d66c0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6736:	4620      	mov	r0, r4
   d6738:	bd38      	pop	{r3, r4, r5, pc}
   d673a:	bf00      	nop
   d673c:	000daf50 	.word	0x000daf50

000d6740 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6740:	b538      	push	{r3, r4, r5, lr}
   d6742:	4c0e      	ldr	r4, [pc, #56]	; (d677c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6744:	4b0e      	ldr	r3, [pc, #56]	; (d6780 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6746:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6748:	2500      	movs	r5, #0
   d674a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d674c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6750:	6063      	str	r3, [r4, #4]
   d6752:	60a5      	str	r5, [r4, #8]
   d6754:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6758:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d675c:	f7fe fe7a 	bl	d5454 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6760:	4b08      	ldr	r3, [pc, #32]	; (d6784 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6762:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6766:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d676a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d676c:	4620      	mov	r0, r4
   d676e:	4a06      	ldr	r2, [pc, #24]	; (d6788 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6770:	4906      	ldr	r1, [pc, #24]	; (d678c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6776:	f000 bf55 	b.w	d7624 <__aeabi_atexit>
   d677a:	bf00      	nop
   d677c:	2003e368 	.word	0x2003e368
   d6780:	000daf84 	.word	0x000daf84
   d6784:	000daf50 	.word	0x000daf50
   d6788:	2003e200 	.word	0x2003e200
   d678c:	000d6709 	.word	0x000d6709

000d6790 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6790:	2300      	movs	r3, #0
   d6792:	461a      	mov	r2, r3
   d6794:	6840      	ldr	r0, [r0, #4]
   d6796:	f7ff b8cb 	b.w	d5930 <network_connect>

000d679a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d679a:	2200      	movs	r2, #0
   d679c:	2102      	movs	r1, #2
   d679e:	6840      	ldr	r0, [r0, #4]
   d67a0:	f7ff b8d6 	b.w	d5950 <network_disconnect>

000d67a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d67a4:	2200      	movs	r2, #0
   d67a6:	4611      	mov	r1, r2
   d67a8:	6840      	ldr	r0, [r0, #4]
   d67aa:	f7ff b8c9 	b.w	d5940 <network_connecting>

000d67ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d67ae:	2200      	movs	r2, #0
   d67b0:	4611      	mov	r1, r2
   d67b2:	6840      	ldr	r0, [r0, #4]
   d67b4:	f7ff b8d4 	b.w	d5960 <network_ready>

000d67b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d67b8:	2300      	movs	r3, #0
   d67ba:	461a      	mov	r2, r3
   d67bc:	4619      	mov	r1, r3
   d67be:	6840      	ldr	r0, [r0, #4]
   d67c0:	f7ff b8d6 	b.w	d5970 <network_on>

000d67c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d67c4:	2300      	movs	r3, #0
   d67c6:	461a      	mov	r2, r3
   d67c8:	4619      	mov	r1, r3
   d67ca:	6840      	ldr	r0, [r0, #4]
   d67cc:	f7ff b8d8 	b.w	d5980 <network_off>

000d67d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d67d0:	2200      	movs	r2, #0
   d67d2:	f081 0101 	eor.w	r1, r1, #1
   d67d6:	6840      	ldr	r0, [r0, #4]
   d67d8:	f7ff b8da 	b.w	d5990 <network_listen>

000d67dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d67dc:	2200      	movs	r2, #0
   d67de:	6840      	ldr	r0, [r0, #4]
   d67e0:	f7ff b8e6 	b.w	d59b0 <network_set_listen_timeout>

000d67e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d67e4:	2200      	movs	r2, #0
   d67e6:	4611      	mov	r1, r2
   d67e8:	6840      	ldr	r0, [r0, #4]
   d67ea:	f7ff b8e9 	b.w	d59c0 <network_get_listen_timeout>

000d67ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d67ee:	2200      	movs	r2, #0
   d67f0:	4611      	mov	r1, r2
   d67f2:	6840      	ldr	r0, [r0, #4]
   d67f4:	f7ff b8d4 	b.w	d59a0 <network_listening>

000d67f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d67f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d67fc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d67fe:	b095      	sub	sp, #84	; 0x54
   d6800:	4616      	mov	r6, r2
   d6802:	460d      	mov	r5, r1
   d6804:	4607      	mov	r7, r0
    IPAddress addr;
   d6806:	f7ff fed1 	bl	d65ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d680a:	4621      	mov	r1, r4
   d680c:	2220      	movs	r2, #32
   d680e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6810:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6812:	f001 fe72 	bl	d84fa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6816:	2340      	movs	r3, #64	; 0x40
   d6818:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d681a:	4621      	mov	r1, r4
   d681c:	466b      	mov	r3, sp
   d681e:	aa0c      	add	r2, sp, #48	; 0x30
   d6820:	4630      	mov	r0, r6
   d6822:	f7fe ff37 	bl	d5694 <netdb_getaddrinfo>
    if (!r) {
   d6826:	4604      	mov	r4, r0
   d6828:	2800      	cmp	r0, #0
   d682a:	d144      	bne.n	d68b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d682c:	4602      	mov	r2, r0
   d682e:	2101      	movs	r1, #1
   d6830:	6868      	ldr	r0, [r5, #4]
   d6832:	f7ff f895 	bl	d5960 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6836:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6838:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d683a:	4622      	mov	r2, r4
   d683c:	6868      	ldr	r0, [r5, #4]
   d683e:	f7ff f88f 	bl	d5960 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6842:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6844:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6846:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6848:	2e00      	cmp	r6, #0
   d684a:	d034      	beq.n	d68b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d684c:	2900      	cmp	r1, #0
   d684e:	d132      	bne.n	d68b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6850:	6873      	ldr	r3, [r6, #4]
   d6852:	2b02      	cmp	r3, #2
   d6854:	d002      	beq.n	d685c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6856:	2b0a      	cmp	r3, #10
   d6858:	d009      	beq.n	d686e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d685a:	e02a      	b.n	d68b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d685c:	f1b8 0f00 	cmp.w	r8, #0
   d6860:	d027      	beq.n	d68b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6862:	6971      	ldr	r1, [r6, #20]
   d6864:	4638      	mov	r0, r7
   d6866:	3104      	adds	r1, #4
   d6868:	f7ff fecd 	bl	d6606 <_ZN9IPAddressaSEPKh>
   d686c:	e020      	b.n	d68b0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d686e:	f1b9 0f00 	cmp.w	r9, #0
   d6872:	d01e      	beq.n	d68b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6874:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6876:	2211      	movs	r2, #17
   d6878:	a801      	add	r0, sp, #4
   d687a:	f001 fe3e 	bl	d84fa <memset>
                    a.v = 6;
   d687e:	2306      	movs	r3, #6
   d6880:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6884:	ad01      	add	r5, sp, #4
   d6886:	f104 0308 	add.w	r3, r4, #8
   d688a:	3418      	adds	r4, #24
   d688c:	6818      	ldr	r0, [r3, #0]
   d688e:	6859      	ldr	r1, [r3, #4]
   d6890:	462a      	mov	r2, r5
   d6892:	c203      	stmia	r2!, {r0, r1}
   d6894:	3308      	adds	r3, #8
   d6896:	42a3      	cmp	r3, r4
   d6898:	4615      	mov	r5, r2
   d689a:	d1f7      	bne.n	d688c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d689c:	a901      	add	r1, sp, #4
   d689e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d68a0:	ad07      	add	r5, sp, #28
   d68a2:	f7ff fe91 	bl	d65c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d68a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68a8:	1d3c      	adds	r4, r7, #4
   d68aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68ac:	682b      	ldr	r3, [r5, #0]
   d68ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d68b0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d68b2:	69f6      	ldr	r6, [r6, #28]
   d68b4:	e7c8      	b.n	d6848 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d68b6:	9800      	ldr	r0, [sp, #0]
   d68b8:	f7fe fee4 	bl	d5684 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d68bc:	4638      	mov	r0, r7
   d68be:	b015      	add	sp, #84	; 0x54
   d68c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d68c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d68c4:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d68c6:	4a03      	ldr	r2, [pc, #12]	; (d68d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d68c8:	601a      	str	r2, [r3, #0]
   d68ca:	2200      	movs	r2, #0
   d68cc:	605a      	str	r2, [r3, #4]
   d68ce:	4770      	bx	lr
   d68d0:	2003e53c 	.word	0x2003e53c
   d68d4:	000daf84 	.word	0x000daf84

000d68d8 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
   d68d8:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d68da:	f000 fe61 	bl	d75a0 <_Z20__fetch_global_Wire1v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
   d68de:	f7ff fe14 	bl	d650a <_ZN7TwoWire9isEnabledEv>
   d68e2:	b918      	cbnz	r0, d68ec <_ZN4PMIC5beginEv+0x14>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d68e4:	f000 fe5c 	bl	d75a0 <_Z20__fetch_global_Wire1v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
   d68e8:	f7ff fdea 	bl	d64c0 <_ZN7TwoWire5beginEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d68ec:	f000 fe58 	bl	d75a0 <_Z20__fetch_global_Wire1v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
   d68f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
   d68f4:	f7ff be09 	b.w	d650a <_ZN7TwoWire9isEnabledEv>

000d68f8 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d68f8:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d68fa:	f000 fe51 	bl	d75a0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d68fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d6902:	f7ff be06 	b.w	d6512 <_ZN7TwoWire4lockEv>

000d6906 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d6906:	b510      	push	{r4, lr}
   d6908:	4604      	mov	r4, r0
    lock_(_lock)
   d690a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d690c:	b109      	cbz	r1, d6912 <_ZN4PMICC1Eb+0xc>
        lock();
   d690e:	f7ff fff3 	bl	d68f8 <_ZN4PMIC4lockEv>
    }
}
   d6912:	4620      	mov	r0, r4
   d6914:	bd10      	pop	{r4, pc}

000d6916 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d6916:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6918:	f000 fe42 	bl	d75a0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d691c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d6920:	f7ff be00 	b.w	d6524 <_ZN7TwoWire6unlockEv>

000d6924 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6924:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6926:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6928:	4604      	mov	r4, r0
{
    if (lock_) {
   d692a:	b10b      	cbz	r3, d6930 <_ZN4PMICD1Ev+0xc>
        unlock();
   d692c:	f7ff fff3 	bl	d6916 <_ZN4PMIC6unlockEv>
    }
}
   d6930:	4620      	mov	r0, r4
   d6932:	bd10      	pop	{r4, pc}

000d6934 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6934:	b510      	push	{r4, lr}
   d6936:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6938:	6800      	ldr	r0, [r0, #0]
   d693a:	f7ff ffec 	bl	d6916 <_ZN4PMIC6unlockEv>
   d693e:	4620      	mov	r0, r4
   d6940:	bd10      	pop	{r4, pc}

000d6942 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d6942:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6944:	ac02      	add	r4, sp, #8
   d6946:	460d      	mov	r5, r1
   d6948:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d694c:	f7ff ffd4 	bl	d68f8 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6950:	f000 fe26 	bl	d75a0 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d6954:	216b      	movs	r1, #107	; 0x6b
   d6956:	f7ff fdce 	bl	d64f6 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d695a:	f000 fe21 	bl	d75a0 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d695e:	6803      	ldr	r3, [r0, #0]
   d6960:	4629      	mov	r1, r5
   d6962:	689b      	ldr	r3, [r3, #8]
   d6964:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6966:	f000 fe1b 	bl	d75a0 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d696a:	2101      	movs	r1, #1
   d696c:	f7ff fdc6 	bl	d64fc <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6970:	f000 fe16 	bl	d75a0 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d6974:	2301      	movs	r3, #1
   d6976:	461a      	mov	r2, r3
   d6978:	216b      	movs	r1, #107	; 0x6b
   d697a:	f7ff fdb3 	bl	d64e4 <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d697e:	f000 fe0f 	bl	d75a0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d6982:	6803      	ldr	r3, [r0, #0]
   d6984:	695b      	ldr	r3, [r3, #20]
   d6986:	4798      	blx	r3
   d6988:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d698a:	4620      	mov	r0, r4
   d698c:	f7ff ffd2 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d6990:	b2e8      	uxtb	r0, r5
   d6992:	b003      	add	sp, #12
   d6994:	bd30      	pop	{r4, r5, pc}

000d6996 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d6996:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6998:	ac02      	add	r4, sp, #8
   d699a:	4615      	mov	r5, r2
   d699c:	460e      	mov	r6, r1
   d699e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d69a2:	f7ff ffa9 	bl	d68f8 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69a6:	f000 fdfb 	bl	d75a0 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d69aa:	216b      	movs	r1, #107	; 0x6b
   d69ac:	f7ff fda3 	bl	d64f6 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69b0:	f000 fdf6 	bl	d75a0 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d69b4:	6803      	ldr	r3, [r0, #0]
   d69b6:	4631      	mov	r1, r6
   d69b8:	689b      	ldr	r3, [r3, #8]
   d69ba:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69bc:	f000 fdf0 	bl	d75a0 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d69c0:	6803      	ldr	r3, [r0, #0]
   d69c2:	4629      	mov	r1, r5
   d69c4:	689b      	ldr	r3, [r3, #8]
   d69c6:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69c8:	f000 fdea 	bl	d75a0 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d69cc:	2101      	movs	r1, #1
   d69ce:	f7ff fd95 	bl	d64fc <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d69d2:	4620      	mov	r0, r4
   d69d4:	f7ff ffae 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d69d8:	b002      	add	sp, #8
   d69da:	bd70      	pop	{r4, r5, r6, pc}

000d69dc <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
   d69dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d69de:	4604      	mov	r4, r0
   d69e0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d69e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d69e4:	f7ff ff88 	bl	d68f8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d69e8:	2100      	movs	r1, #0
   d69ea:	4620      	mov	r0, r4
   d69ec:	f7ff ffa9 	bl	d6942 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d69f0:	f241 1358 	movw	r3, #4440	; 0x1158
   d69f4:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
   d69f6:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
   d69fa:	d05b      	beq.n	d6ab4 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
   d69fc:	d820      	bhi.n	d6a40 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
   d69fe:	f241 0318 	movw	r3, #4120	; 0x1018
   d6a02:	429d      	cmp	r5, r3
   d6a04:	d04d      	beq.n	d6aa2 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
   d6a06:	d80c      	bhi.n	d6a22 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
   d6a08:	f640 7378 	movw	r3, #3960	; 0xf78
   d6a0c:	429d      	cmp	r5, r3
   d6a0e:	d042      	beq.n	d6a96 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
   d6a10:	f640 73c8 	movw	r3, #4040	; 0xfc8
   d6a14:	429d      	cmp	r5, r3
   d6a16:	d041      	beq.n	d6a9c <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
   d6a18:	f640 7328 	movw	r3, #3880	; 0xf28
   d6a1c:	429d      	cmp	r5, r3
   d6a1e:	d160      	bne.n	d6ae2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
   d6a20:	e059      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
   d6a22:	f241 03b8 	movw	r3, #4280	; 0x10b8
   d6a26:	429d      	cmp	r5, r3
   d6a28:	d03e      	beq.n	d6aa8 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
   d6a2a:	f241 1308 	movw	r3, #4360	; 0x1108
   d6a2e:	429d      	cmp	r5, r3
   d6a30:	d03d      	beq.n	d6aae <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
   d6a32:	f241 0368 	movw	r3, #4200	; 0x1068
   d6a36:	429d      	cmp	r5, r3
   d6a38:	d153      	bne.n	d6ae2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
   d6a3a:	f042 0220 	orr.w	r2, r2, #32
   d6a3e:	e04a      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d6a40:	f241 2398 	movw	r3, #4760	; 0x1298
   d6a44:	429d      	cmp	r5, r3
   d6a46:	d03e      	beq.n	d6ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
   d6a48:	d80e      	bhi.n	d6a68 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
   d6a4a:	f241 13f8 	movw	r3, #4600	; 0x11f8
   d6a4e:	429d      	cmp	r5, r3
   d6a50:	d033      	beq.n	d6aba <_ZN4PMIC20setInputVoltageLimitEt+0xde>
   d6a52:	f241 2348 	movw	r3, #4680	; 0x1248
   d6a56:	429d      	cmp	r5, r3
   d6a58:	d032      	beq.n	d6ac0 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
   d6a5a:	f241 13a8 	movw	r3, #4520	; 0x11a8
   d6a5e:	429d      	cmp	r5, r3
   d6a60:	d13f      	bne.n	d6ae2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
   d6a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   d6a66:	e036      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d6a68:	f241 3338 	movw	r3, #4920	; 0x1338
   d6a6c:	429d      	cmp	r5, r3
   d6a6e:	d02d      	beq.n	d6acc <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
   d6a70:	d806      	bhi.n	d6a80 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
   d6a72:	f241 23e8 	movw	r3, #4840	; 0x12e8
   d6a76:	429d      	cmp	r5, r3
   d6a78:	d133      	bne.n	d6ae2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
   d6a7a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d6a7e:	e02a      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d6a80:	f241 3388 	movw	r3, #5000	; 0x1388
   d6a84:	429d      	cmp	r5, r3
   d6a86:	d024      	beq.n	d6ad2 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
   d6a88:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d6a8c:	429d      	cmp	r5, r3
   d6a8e:	d128      	bne.n	d6ae2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
   d6a90:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   d6a94:	e01f      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
   d6a96:	f042 0208 	orr.w	r2, r2, #8
   d6a9a:	e01c      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
   d6a9c:	f042 0210 	orr.w	r2, r2, #16
   d6aa0:	e019      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
   d6aa2:	f042 0218 	orr.w	r2, r2, #24
   d6aa6:	e016      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
   d6aa8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
   d6aac:	e013      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
   d6aae:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   d6ab2:	e010      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
   d6ab4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
   d6ab8:	e00d      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
   d6aba:	f042 0248 	orr.w	r2, r2, #72	; 0x48
   d6abe:	e00a      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
   d6ac0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   d6ac4:	e007      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
   d6ac6:	f042 0258 	orr.w	r2, r2, #88	; 0x58
   d6aca:	e004      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
   d6acc:	f042 0268 	orr.w	r2, r2, #104	; 0x68
   d6ad0:	e001      	b.n	d6ad6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
   d6ad2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	2100      	movs	r1, #0
   d6ada:	f7ff ff5c 	bl	d6996 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d6ade:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
   d6ae0:	e000      	b.n	d6ae4 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d6ae2:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d6ae4:	a801      	add	r0, sp, #4
   d6ae6:	f7ff ff25 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d6aea:	4620      	mov	r0, r4
   d6aec:	b003      	add	sp, #12
   d6aee:	bd30      	pop	{r4, r5, pc}

000d6af0 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
   d6af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6af2:	4604      	mov	r4, r0
   d6af4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6af6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6af8:	f7ff fefe 	bl	d68f8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d6afc:	2100      	movs	r1, #0
   d6afe:	4620      	mov	r0, r4
   d6b00:	f7ff ff1f 	bl	d6942 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
   d6b04:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
   d6b08:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
   d6b0c:	d023      	beq.n	d6b56 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
   d6b0e:	d807      	bhi.n	d6b20 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
   d6b10:	2d96      	cmp	r5, #150	; 0x96
   d6b12:	d01a      	beq.n	d6b4a <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
   d6b14:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   d6b18:	d01a      	beq.n	d6b50 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
   d6b1a:	2d64      	cmp	r5, #100	; 0x64
   d6b1c:	d129      	bne.n	d6b72 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
   d6b1e:	e022      	b.n	d6b66 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
   d6b20:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d6b24:	429d      	cmp	r5, r3
   d6b26:	d019      	beq.n	d6b5c <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
   d6b28:	d805      	bhi.n	d6b36 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
   d6b2a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   d6b2e:	d120      	bne.n	d6b72 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
   d6b30:	f042 0204 	orr.w	r2, r2, #4
   d6b34:	e017      	b.n	d6b66 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
   d6b36:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
   d6b3a:	d012      	beq.n	d6b62 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
   d6b3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d6b40:	429d      	cmp	r5, r3
   d6b42:	d116      	bne.n	d6b72 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
   d6b44:	f042 0207 	orr.w	r2, r2, #7
   d6b48:	e00d      	b.n	d6b66 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
   d6b4a:	f042 0201 	orr.w	r2, r2, #1
   d6b4e:	e00a      	b.n	d6b66 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
   d6b50:	f042 0202 	orr.w	r2, r2, #2
   d6b54:	e007      	b.n	d6b66 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
   d6b56:	f042 0203 	orr.w	r2, r2, #3
   d6b5a:	e004      	b.n	d6b66 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
   d6b5c:	f042 0205 	orr.w	r2, r2, #5
   d6b60:	e001      	b.n	d6b66 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
   d6b62:	f042 0206 	orr.w	r2, r2, #6
   d6b66:	4620      	mov	r0, r4
   d6b68:	2100      	movs	r1, #0
   d6b6a:	f7ff ff14 	bl	d6996 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d6b6e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
   d6b70:	e000      	b.n	d6b74 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d6b72:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
   d6b74:	a801      	add	r0, sp, #4
   d6b76:	f7ff fedd 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d6b7a:	4620      	mov	r0, r4
   d6b7c:	b003      	add	sp, #12
   d6b7e:	bd30      	pop	{r4, r5, pc}

000d6b80 <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
   d6b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b82:	ac02      	add	r4, sp, #8
   d6b84:	4605      	mov	r5, r0
   d6b86:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d6b8a:	f7ff feb5 	bl	d68f8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d6b8e:	2101      	movs	r1, #1
   d6b90:	4628      	mov	r0, r5
   d6b92:	f7ff fed6 	bl	d6942 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d6b96:	2101      	movs	r1, #1
   d6b98:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d6b9c:	4628      	mov	r0, r5
   d6b9e:	f7ff fefa 	bl	d6996 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	f7ff fec6 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
   d6ba8:	2001      	movs	r0, #1
   d6baa:	b003      	add	sp, #12
   d6bac:	bd30      	pop	{r4, r5, pc}

000d6bae <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
   d6bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6bb0:	460c      	mov	r4, r1
   d6bb2:	4605      	mov	r5, r0
   d6bb4:	4617      	mov	r7, r2
   d6bb6:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6bb8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6bba:	f7ff fe9d 	bl	d68f8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
   d6bbe:	2c00      	cmp	r4, #0
   d6bc0:	bf0c      	ite	eq
   d6bc2:	2400      	moveq	r4, #0
   d6bc4:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
   d6bc6:	b117      	cbz	r7, d6bce <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
   d6bc8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   d6bcc:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
   d6bce:	b10e      	cbz	r6, d6bd4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
   d6bd0:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
   d6bd4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d6bd8:	b10b      	cbz	r3, d6bde <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
   d6bda:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
   d6bde:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d6be2:	b10b      	cbz	r3, d6be8 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
   d6be4:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
   d6be8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d6bec:	b10b      	cbz	r3, d6bf2 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
   d6bee:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d6bf2:	2102      	movs	r1, #2
   d6bf4:	4628      	mov	r0, r5
   d6bf6:	f7ff fea4 	bl	d6942 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
   d6bfa:	f000 0201 	and.w	r2, r0, #1
   d6bfe:	4322      	orrs	r2, r4
   d6c00:	2102      	movs	r1, #2
   d6c02:	4628      	mov	r0, r5
   d6c04:	f7ff fec7 	bl	d6996 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
   d6c08:	a801      	add	r0, sp, #4
   d6c0a:	f7ff fe93 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
   d6c0e:	2001      	movs	r0, #1
   d6c10:	b003      	add	sp, #12
   d6c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c14 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
   d6c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c16:	4604      	mov	r4, r0
   d6c18:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c1a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6c1c:	f7ff fe6c 	bl	d68f8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d6c20:	2104      	movs	r1, #4
   d6c22:	4620      	mov	r0, r4
   d6c24:	f7ff fe8d 	bl	d6942 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
   d6c28:	f241 0310 	movw	r3, #4112	; 0x1010
   d6c2c:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
   d6c2e:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
   d6c32:	d006      	beq.n	d6c42 <_ZN4PMIC16setChargeVoltageEt+0x2e>
   d6c34:	f241 0370 	movw	r3, #4208	; 0x1070
   d6c38:	429d      	cmp	r5, r3
   d6c3a:	d10a      	bne.n	d6c52 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d6c3c:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
   d6c40:	e001      	b.n	d6c46 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
   d6c42:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d6c46:	4620      	mov	r0, r4
   d6c48:	2104      	movs	r1, #4
   d6c4a:	f7ff fea4 	bl	d6996 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d6c4e:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
   d6c50:	e000      	b.n	d6c54 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
   d6c52:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d6c54:	a801      	add	r0, sp, #4
   d6c56:	f7ff fe6d 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d6c5a:	4620      	mov	r0, r4
   d6c5c:	b003      	add	sp, #12
   d6c5e:	bd30      	pop	{r4, r5, pc}

000d6c60 <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
   d6c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c62:	ac02      	add	r4, sp, #8
   d6c64:	4605      	mov	r5, r0
   d6c66:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d6c6a:	f7ff fe45 	bl	d68f8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
   d6c6e:	2105      	movs	r1, #5
   d6c70:	4628      	mov	r0, r5
   d6c72:	f7ff fe66 	bl	d6942 <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
   d6c76:	2105      	movs	r1, #5
   d6c78:	f000 02ce 	and.w	r2, r0, #206	; 0xce
   d6c7c:	4628      	mov	r0, r5
   d6c7e:	f7ff fe8a 	bl	d6996 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
   d6c82:	4620      	mov	r0, r4
   d6c84:	f7ff fe56 	bl	d6934 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
   d6c88:	2001      	movs	r0, #1
   d6c8a:	b003      	add	sp, #12
   d6c8c:	bd30      	pop	{r4, r5, pc}

000d6c8e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c90:	4606      	mov	r6, r0
   d6c92:	460d      	mov	r5, r1
   d6c94:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6c96:	2400      	movs	r4, #0
  while (size--) {
   d6c98:	42bd      	cmp	r5, r7
   d6c9a:	d00c      	beq.n	d6cb6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6c9c:	6833      	ldr	r3, [r6, #0]
   d6c9e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6ca2:	689b      	ldr	r3, [r3, #8]
   d6ca4:	4630      	mov	r0, r6
   d6ca6:	4798      	blx	r3
     if (chunk>=0)
   d6ca8:	2800      	cmp	r0, #0
   d6caa:	db01      	blt.n	d6cb0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6cac:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6cae:	e7f3      	b.n	d6c98 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6cb0:	2c00      	cmp	r4, #0
   d6cb2:	bf08      	it	eq
   d6cb4:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cba <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6cba:	b570      	push	{r4, r5, r6, lr}
   d6cbc:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6cbe:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6cc0:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6cc2:	b149      	cbz	r1, d6cd8 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6cc4:	f001 fc77 	bl	d85b6 <strlen>
   d6cc8:	682b      	ldr	r3, [r5, #0]
   d6cca:	4602      	mov	r2, r0
   d6ccc:	4621      	mov	r1, r4
   d6cce:	4628      	mov	r0, r5
   d6cd0:	68db      	ldr	r3, [r3, #12]
    }
   d6cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6cd6:	4718      	bx	r3
    }
   d6cd8:	bd70      	pop	{r4, r5, r6, pc}

000d6cda <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6cda:	6803      	ldr	r3, [r0, #0]
   d6cdc:	689b      	ldr	r3, [r3, #8]
   d6cde:	4718      	bx	r3

000d6ce0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6ce0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6ce2:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6ce4:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6ce6:	f7ff fff8 	bl	d6cda <_ZN5Print5printEc>
  n += print('\n');
   d6cea:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6cec:	4604      	mov	r4, r0
  n += print('\n');
   d6cee:	4628      	mov	r0, r5
   d6cf0:	f7ff fff3 	bl	d6cda <_ZN5Print5printEc>
  return n;
}
   d6cf4:	4420      	add	r0, r4
   d6cf6:	bd38      	pop	{r3, r4, r5, pc}

000d6cf8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6cf8:	b538      	push	{r3, r4, r5, lr}
   d6cfa:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6cfc:	f7ff ffdd 	bl	d6cba <_ZN5Print5writeEPKc>
   d6d00:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6d02:	4628      	mov	r0, r5
   d6d04:	f7ff ffec 	bl	d6ce0 <_ZN5Print7printlnEv>
  return n;
}
   d6d08:	4420      	add	r0, r4
   d6d0a:	bd38      	pop	{r3, r4, r5, pc}

000d6d0c <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d0c:	b530      	push	{r4, r5, lr}
   d6d0e:	b08b      	sub	sp, #44	; 0x2c
   d6d10:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6d12:	2100      	movs	r1, #0
   d6d14:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6d18:	2a01      	cmp	r2, #1
   d6d1a:	bf98      	it	ls
   d6d1c:	220a      	movls	r2, #10
   d6d1e:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6d22:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6d26:	fb05 3312 	mls	r3, r5, r2, r3
   d6d2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6d2e:	2b09      	cmp	r3, #9
   d6d30:	bf94      	ite	ls
   d6d32:	3330      	addls	r3, #48	; 0x30
   d6d34:	3337      	addhi	r3, #55	; 0x37
   d6d36:	b2db      	uxtb	r3, r3
   d6d38:	4621      	mov	r1, r4
   d6d3a:	f804 3901 	strb.w	r3, [r4], #-1
   d6d3e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6d40:	2d00      	cmp	r5, #0
   d6d42:	d1ee      	bne.n	d6d22 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6d44:	f7ff ffb9 	bl	d6cba <_ZN5Print5writeEPKc>
}
   d6d48:	b00b      	add	sp, #44	; 0x2c
   d6d4a:	bd30      	pop	{r4, r5, pc}

000d6d4c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6d4c:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6d4e:	b92a      	cbnz	r2, d6d5c <_ZN5Print5printEmi+0x10>
   d6d50:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6d52:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6d56:	689b      	ldr	r3, [r3, #8]
   d6d58:	b2c9      	uxtb	r1, r1
   d6d5a:	4718      	bx	r3
  else return printNumber(n, base);
   d6d5c:	b2d2      	uxtb	r2, r2
}
   d6d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6d62:	f7ff bfd3 	b.w	d6d0c <_ZN5Print11printNumberEmh>

000d6d66 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6d66:	f7ff bff1 	b.w	d6d4c <_ZN5Print5printEmi>

000d6d6a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d6e:	4607      	mov	r7, r0
   d6d70:	460e      	mov	r6, r1
  if (base == 0) {
   d6d72:	4615      	mov	r5, r2
   d6d74:	b92a      	cbnz	r2, d6d82 <_ZN5Print5printEli+0x18>
    return write(n);
   d6d76:	6803      	ldr	r3, [r0, #0]
   d6d78:	b2c9      	uxtb	r1, r1
   d6d7a:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6d80:	4718      	bx	r3
  } else if (base == 10) {
   d6d82:	2a0a      	cmp	r2, #10
   d6d84:	d102      	bne.n	d6d8c <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6d86:	2900      	cmp	r1, #0
   d6d88:	da01      	bge.n	d6d8e <_ZN5Print5printEli+0x24>
   d6d8a:	e004      	b.n	d6d96 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6d8c:	b2d2      	uxtb	r2, r2
  }
}
   d6d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6d92:	f7ff bfbb 	b.w	d6d0c <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6d96:	212d      	movs	r1, #45	; 0x2d
   d6d98:	f7ff ff9f 	bl	d6cda <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6d9c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6d9e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6da0:	4271      	negs	r1, r6
   d6da2:	4638      	mov	r0, r7
   d6da4:	f7ff ffb2 	bl	d6d0c <_ZN5Print11printNumberEmh>
   d6da8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6dae <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6dae:	f7ff bfdc 	b.w	d6d6a <_ZN5Print5printEli>

000d6db2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6db2:	b510      	push	{r4, lr}
   d6db4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6db6:	f7fe ff9a 	bl	d5cee <_ZNSt14_Function_baseD1Ev>
   d6dba:	4620      	mov	r0, r4
   d6dbc:	bd10      	pop	{r4, pc}
	...

000d6dc0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6dc0:	4803      	ldr	r0, [pc, #12]	; (d6dd0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6dc2:	4a04      	ldr	r2, [pc, #16]	; (d6dd4 <_GLOBAL__sub_I_RGB+0x14>)
   d6dc4:	4904      	ldr	r1, [pc, #16]	; (d6dd8 <_GLOBAL__sub_I_RGB+0x18>)
   d6dc6:	2300      	movs	r3, #0
   d6dc8:	6083      	str	r3, [r0, #8]
   d6dca:	f000 bc2b 	b.w	d7624 <__aeabi_atexit>
   d6dce:	bf00      	nop
   d6dd0:	2003e544 	.word	0x2003e544
   d6dd4:	2003e200 	.word	0x2003e200
   d6dd8:	000d6db3 	.word	0x000d6db3

000d6ddc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6ddc:	4770      	bx	lr

000d6dde <_ZN8SPIClassD0Ev>:
   d6dde:	b510      	push	{r4, lr}
   d6de0:	2110      	movs	r1, #16
   d6de2:	4604      	mov	r4, r0
   d6de4:	f000 fc23 	bl	d762e <_ZdlPvj>
   d6de8:	4620      	mov	r0, r4
   d6dea:	bd10      	pop	{r4, pc}

000d6dec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6dec:	b570      	push	{r4, r5, r6, lr}
   d6dee:	4b08      	ldr	r3, [pc, #32]	; (d6e10 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6df0:	6003      	str	r3, [r0, #0]
   d6df2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6df4:	2500      	movs	r5, #0
   d6df6:	460e      	mov	r6, r1
   d6df8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6dfc:	f7fe fb22 	bl	d5444 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6e00:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6e02:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6e04:	f7fe fc4e 	bl	d56a4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6e08:	60a5      	str	r5, [r4, #8]
}
   d6e0a:	4620      	mov	r0, r4
   d6e0c:	bd70      	pop	{r4, r5, r6, pc}
   d6e0e:	bf00      	nop
   d6e10:	000dafb8 	.word	0x000dafb8

000d6e14 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6e14:	7900      	ldrb	r0, [r0, #4]
   d6e16:	f7fe bc4d 	b.w	d56b4 <HAL_SPI_Is_Enabled>

000d6e1a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6e1a:	b510      	push	{r4, lr}
   d6e1c:	4604      	mov	r4, r0
{
	free(buffer);
   d6e1e:	6800      	ldr	r0, [r0, #0]
   d6e20:	f7fe fdde 	bl	d59e0 <free>
}
   d6e24:	4620      	mov	r0, r4
   d6e26:	bd10      	pop	{r4, pc}

000d6e28 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6e28:	b510      	push	{r4, lr}
   d6e2a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6e2c:	6800      	ldr	r0, [r0, #0]
   d6e2e:	b108      	cbz	r0, d6e34 <_ZN6String10invalidateEv+0xc>
   d6e30:	f7fe fdd6 	bl	d59e0 <free>
	buffer = NULL;
   d6e34:	2300      	movs	r3, #0
   d6e36:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6e38:	60a3      	str	r3, [r4, #8]
   d6e3a:	6063      	str	r3, [r4, #4]
   d6e3c:	bd10      	pop	{r4, pc}

000d6e3e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6e3e:	b538      	push	{r3, r4, r5, lr}
   d6e40:	4604      	mov	r4, r0
   d6e42:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6e44:	6800      	ldr	r0, [r0, #0]
   d6e46:	3101      	adds	r1, #1
   d6e48:	f7fe fdd2 	bl	d59f0 <realloc>
	if (newbuffer) {
   d6e4c:	b110      	cbz	r0, d6e54 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6e4e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6e52:	2001      	movs	r0, #1
	}
	return 0;
}
   d6e54:	bd38      	pop	{r3, r4, r5, pc}

000d6e56 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6e56:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6e58:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6e5a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6e5c:	b113      	cbz	r3, d6e64 <_ZN6String7reserveEj+0xe>
   d6e5e:	6843      	ldr	r3, [r0, #4]
   d6e60:	428b      	cmp	r3, r1
   d6e62:	d207      	bcs.n	d6e74 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6e64:	4620      	mov	r0, r4
   d6e66:	f7ff ffea 	bl	d6e3e <_ZN6String12changeBufferEj>
   d6e6a:	b120      	cbz	r0, d6e76 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6e6c:	68a3      	ldr	r3, [r4, #8]
   d6e6e:	b90b      	cbnz	r3, d6e74 <_ZN6String7reserveEj+0x1e>
   d6e70:	6822      	ldr	r2, [r4, #0]
   d6e72:	7013      	strb	r3, [r2, #0]
   d6e74:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6e76:	bd10      	pop	{r4, pc}

000d6e78 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6e78:	b570      	push	{r4, r5, r6, lr}
   d6e7a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6e7c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6e7e:	4604      	mov	r4, r0
   d6e80:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6e82:	f7ff ffe8 	bl	d6e56 <_ZN6String7reserveEj>
   d6e86:	b918      	cbnz	r0, d6e90 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6e88:	4620      	mov	r0, r4
   d6e8a:	f7ff ffcd 	bl	d6e28 <_ZN6String10invalidateEv>
		return *this;
   d6e8e:	e009      	b.n	d6ea4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6e90:	462a      	mov	r2, r5
   d6e92:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6e94:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6e96:	6820      	ldr	r0, [r4, #0]
   d6e98:	f001 fb24 	bl	d84e4 <memcpy>
	buffer[len] = 0;
   d6e9c:	6822      	ldr	r2, [r4, #0]
   d6e9e:	68a3      	ldr	r3, [r4, #8]
   d6ea0:	2100      	movs	r1, #0
   d6ea2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	bd70      	pop	{r4, r5, r6, pc}

000d6ea8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6ea8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6eaa:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6eac:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6eae:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6eb0:	6043      	str	r3, [r0, #4]
	len = 0;
   d6eb2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6eb4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6eb6:	460d      	mov	r5, r1
   d6eb8:	b139      	cbz	r1, d6eca <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6eba:	4608      	mov	r0, r1
   d6ebc:	f001 fb7b 	bl	d85b6 <strlen>
   d6ec0:	4629      	mov	r1, r5
   d6ec2:	4602      	mov	r2, r0
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	f7ff ffd7 	bl	d6e78 <_ZN6String4copyEPKcj>
}
   d6eca:	4620      	mov	r0, r4
   d6ecc:	bd38      	pop	{r3, r4, r5, pc}

000d6ece <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6ece:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6ed0:	b510      	push	{r4, lr}
   d6ed2:	460b      	mov	r3, r1
   d6ed4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6ed6:	d007      	beq.n	d6ee8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6ed8:	6809      	ldr	r1, [r1, #0]
   d6eda:	b119      	cbz	r1, d6ee4 <_ZN6StringaSERKS_+0x16>
   d6edc:	689a      	ldr	r2, [r3, #8]
   d6ede:	f7ff ffcb 	bl	d6e78 <_ZN6String4copyEPKcj>
   d6ee2:	e001      	b.n	d6ee8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6ee4:	f7ff ffa0 	bl	d6e28 <_ZN6String10invalidateEv>

	return *this;
}
   d6ee8:	4620      	mov	r0, r4
   d6eea:	bd10      	pop	{r4, pc}

000d6eec <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6eec:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6eee:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6ef0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ef2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6ef4:	6043      	str	r3, [r0, #4]
	len = 0;
   d6ef6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6ef8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6efa:	f7ff ffe8 	bl	d6ece <_ZN6StringaSERKS_>
}
   d6efe:	4620      	mov	r0, r4
   d6f00:	bd10      	pop	{r4, pc}

000d6f02 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f02:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f04:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f06:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f08:	b912      	cbnz	r2, d6f10 <_ZNK6String6equalsEPKc+0xe>
   d6f0a:	b919      	cbnz	r1, d6f14 <_ZNK6String6equalsEPKc+0x12>
   d6f0c:	2001      	movs	r0, #1
   d6f0e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6f10:	b911      	cbnz	r1, d6f18 <_ZNK6String6equalsEPKc+0x16>
   d6f12:	6803      	ldr	r3, [r0, #0]
   d6f14:	7818      	ldrb	r0, [r3, #0]
   d6f16:	e002      	b.n	d6f1e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6f18:	6800      	ldr	r0, [r0, #0]
   d6f1a:	f001 fb1f 	bl	d855c <strcmp>
   d6f1e:	fab0 f080 	clz	r0, r0
   d6f22:	0940      	lsrs	r0, r0, #5
}
   d6f24:	bd08      	pop	{r3, pc}

000d6f26 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6f26:	b570      	push	{r4, r5, r6, lr}
   d6f28:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6f2a:	b19a      	cbz	r2, d6f54 <_ZNK6String8getBytesEPhjj+0x2e>
   d6f2c:	b191      	cbz	r1, d6f54 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6f2e:	6885      	ldr	r5, [r0, #8]
   d6f30:	429d      	cmp	r5, r3
   d6f32:	d802      	bhi.n	d6f3a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6f34:	2300      	movs	r3, #0
   d6f36:	700b      	strb	r3, [r1, #0]
		return;
   d6f38:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6f3a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6f3c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6f3e:	6801      	ldr	r1, [r0, #0]
   d6f40:	42ac      	cmp	r4, r5
   d6f42:	bf28      	it	cs
   d6f44:	462c      	movcs	r4, r5
   d6f46:	4419      	add	r1, r3
   d6f48:	4622      	mov	r2, r4
   d6f4a:	4630      	mov	r0, r6
   d6f4c:	f001 fb50 	bl	d85f0 <strncpy>
	buf[n] = 0;
   d6f50:	2300      	movs	r3, #0
   d6f52:	5533      	strb	r3, [r6, r4]
   d6f54:	bd70      	pop	{r4, r5, r6, pc}

000d6f56 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d6f56:	4601      	mov	r1, r0
   d6f58:	2200      	movs	r2, #0
   d6f5a:	208c      	movs	r0, #140	; 0x8c
   d6f5c:	f7fe ba8a 	b.w	d5474 <HAL_Core_System_Reset_Ex>

000d6f60 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6f60:	2000      	movs	r0, #0
   d6f62:	f7ff bff8 	b.w	d6f56 <_ZN11SystemClass5resetEm>
	...

000d6f68 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d6f68:	b510      	push	{r4, lr}
   d6f6a:	4604      	mov	r4, r0
   d6f6c:	4608      	mov	r0, r1
   d6f6e:	4611      	mov	r1, r2
   d6f70:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d6f72:	2300      	movs	r3, #0
   d6f74:	f7fe fc36 	bl	d57e4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d6f78:	4b06      	ldr	r3, [pc, #24]	; (d6f94 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d6f7a:	2200      	movs	r2, #0
   d6f7c:	701a      	strb	r2, [r3, #0]
   d6f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6f82:	8058      	strh	r0, [r3, #2]
   d6f84:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d6f86:	681a      	ldr	r2, [r3, #0]
   d6f88:	889b      	ldrh	r3, [r3, #4]
   d6f8a:	6022      	str	r2, [r4, #0]
   d6f8c:	80a3      	strh	r3, [r4, #4]
}
   d6f8e:	4620      	mov	r0, r4
   d6f90:	bd10      	pop	{r4, pc}
   d6f92:	bf00      	nop
   d6f94:	2003e554 	.word	0x2003e554

000d6f98 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d6f98:	b510      	push	{r4, lr}
   d6f9a:	2400      	movs	r4, #0
   d6f9c:	7004      	strb	r4, [r0, #0]
   d6f9e:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d6fa0:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d6fa2:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d6fa6:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d6fa8:	dd07      	ble.n	d6fba <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d6faa:	3901      	subs	r1, #1
   d6fac:	4299      	cmp	r1, r3
   d6fae:	d209      	bcs.n	d6fc4 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d6fb0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d6fb4:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d6fb6:	2301      	movs	r3, #1
   d6fb8:	e001      	b.n	d6fbe <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d6fba:	d102      	bne.n	d6fc2 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d6fbc:	2302      	movs	r3, #2
   d6fbe:	7003      	strb	r3, [r0, #0]
   d6fc0:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d6fc2:	8041      	strh	r1, [r0, #2]
    }
}
   d6fc4:	bd10      	pop	{r4, pc}
	...

000d6fc8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6fc8:	b570      	push	{r4, r5, r6, lr}
   d6fca:	b086      	sub	sp, #24
   d6fcc:	4616      	mov	r6, r2
   d6fce:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6fd0:	2300      	movs	r3, #0
   d6fd2:	9302      	str	r3, [sp, #8]
   d6fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6fd6:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6fd8:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6fdc:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6fde:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6fe2:	4631      	mov	r1, r6
   d6fe4:	4628      	mov	r0, r5
   d6fe6:	f7fe fc39 	bl	d585c <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d6fea:	4633      	mov	r3, r6
   d6fec:	462a      	mov	r2, r5
   d6fee:	4601      	mov	r1, r0
   d6ff0:	a804      	add	r0, sp, #16
   d6ff2:	f7ff ffd1 	bl	d6f98 <_ZN11SleepResultC1EiPKtj>
   d6ff6:	4b06      	ldr	r3, [pc, #24]	; (d7010 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d6ff8:	9804      	ldr	r0, [sp, #16]
   d6ffa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d6ffe:	6018      	str	r0, [r3, #0]
   d7000:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d7002:	681a      	ldr	r2, [r3, #0]
   d7004:	889b      	ldrh	r3, [r3, #4]
   d7006:	6022      	str	r2, [r4, #0]
}
   d7008:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d700a:	80a3      	strh	r3, [r4, #4]
}
   d700c:	b006      	add	sp, #24
   d700e:	bd70      	pop	{r4, r5, r6, pc}
   d7010:	2003e554 	.word	0x2003e554

000d7014 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7014:	4b04      	ldr	r3, [pc, #16]	; (d7028 <_GLOBAL__sub_I_System+0x14>)
   d7016:	2000      	movs	r0, #0
   d7018:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d701c:	7018      	strb	r0, [r3, #0]
   d701e:	8058      	strh	r0, [r3, #2]
   d7020:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7022:	f7fe bbcf 	b.w	d57c4 <set_system_mode>
   d7026:	bf00      	nop
   d7028:	2003e554 	.word	0x2003e554

000d702c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d702c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d702e:	4b14      	ldr	r3, [pc, #80]	; (d7080 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7030:	4f14      	ldr	r7, [pc, #80]	; (d7084 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7032:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7034:	4b14      	ldr	r3, [pc, #80]	; (d7088 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7036:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7038:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d703a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d703c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d703e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7040:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7042:	d01b      	beq.n	d707c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7044:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7046:	ad01      	add	r5, sp, #4
   d7048:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d704c:	f001 f94e 	bl	d82ec <localtime>
	calendar_time->tm_year += 1900;
   d7050:	6943      	ldr	r3, [r0, #20]
   d7052:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7056:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7058:	4604      	mov	r4, r0
   d705a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d705c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d705e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7062:	f8d4 e000 	ldr.w	lr, [r4]
   d7066:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d706a:	ad01      	add	r5, sp, #4
   d706c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d706e:	4c07      	ldr	r4, [pc, #28]	; (d708c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7076:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7078:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d707c:	b00b      	add	sp, #44	; 0x2c
   d707e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7080:	2003e58c 	.word	0x2003e58c
   d7084:	2003e588 	.word	0x2003e588
   d7088:	2003e584 	.word	0x2003e584
   d708c:	2003e55c 	.word	0x2003e55c

000d7090 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d7090:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d7092:	2000      	movs	r0, #0
   d7094:	f7fe fc3c 	bl	d5910 <spark_sync_time_pending>
   d7098:	b128      	cbz	r0, d70a6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d709a:	f7fe fc11 	bl	d58c0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d709e:	f080 0001 	eor.w	r0, r0, #1
   d70a2:	b2c0      	uxtb	r0, r0
   d70a4:	bd08      	pop	{r3, pc}
   d70a6:	2001      	movs	r0, #1
    }
   d70a8:	bd08      	pop	{r3, pc}

000d70aa <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d70aa:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d70ac:	2000      	movs	r0, #0
   d70ae:	f7fe fa31 	bl	d5514 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d70b2:	4604      	mov	r4, r0
   d70b4:	b968      	cbnz	r0, d70d2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d70b6:	f7fe fb7d 	bl	d57b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d70ba:	2801      	cmp	r0, #1
   d70bc:	d10b      	bne.n	d70d6 <_ZN9TimeClass7isValidEv+0x2c>
   d70be:	4620      	mov	r0, r4
   d70c0:	f7fe fbb0 	bl	d5824 <system_thread_get_state>
   d70c4:	b938      	cbnz	r0, d70d6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d70c6:	f7ff ffe3 	bl	d7090 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d70ca:	b930      	cbnz	r0, d70da <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d70cc:	f7fe fbe0 	bl	d5890 <spark_process>
   d70d0:	e7f9      	b.n	d70c6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d70d2:	2001      	movs	r0, #1
   d70d4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d70d6:	2000      	movs	r0, #0
   d70d8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d70da:	f7ff ffd9 	bl	d7090 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d70de:	2000      	movs	r0, #0
   d70e0:	f7fe fa18 	bl	d5514 <HAL_RTC_Time_Is_Valid>
   d70e4:	3000      	adds	r0, #0
   d70e6:	bf18      	it	ne
   d70e8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d70ea:	bd10      	pop	{r4, pc}

000d70ec <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d70ec:	b508      	push	{r3, lr}
    (void)isValid();
   d70ee:	f7ff ffdc 	bl	d70aa <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d70f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d70f6:	f7fe b9e5 	b.w	d54c4 <HAL_RTC_Get_UnixTime>
	...

000d70fc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d70fc:	b508      	push	{r3, lr}
	return hour(now());
   d70fe:	f7ff fff5 	bl	d70ec <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7102:	f7ff ff93 	bl	d702c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d7106:	4b01      	ldr	r3, [pc, #4]	; (d710c <_ZN9TimeClass4hourEv+0x10>)
   d7108:	6898      	ldr	r0, [r3, #8]
   d710a:	bd08      	pop	{r3, pc}
   d710c:	2003e55c 	.word	0x2003e55c

000d7110 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d7110:	b508      	push	{r3, lr}
	return minute(now());
   d7112:	f7ff ffeb 	bl	d70ec <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7116:	f7ff ff89 	bl	d702c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d711a:	4b01      	ldr	r3, [pc, #4]	; (d7120 <_ZN9TimeClass6minuteEv+0x10>)
   d711c:	6858      	ldr	r0, [r3, #4]
   d711e:	bd08      	pop	{r3, pc}
   d7120:	2003e55c 	.word	0x2003e55c

000d7124 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7124:	4b02      	ldr	r3, [pc, #8]	; (d7130 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7126:	681a      	ldr	r2, [r3, #0]
   d7128:	4b02      	ldr	r3, [pc, #8]	; (d7134 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d712a:	601a      	str	r2, [r3, #0]
   d712c:	4770      	bx	lr
   d712e:	bf00      	nop
   d7130:	2003e110 	.word	0x2003e110
   d7134:	2003e580 	.word	0x2003e580

000d7138 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7138:	4770      	bx	lr

000d713a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d713a:	7441      	strb	r1, [r0, #17]
   d713c:	4770      	bx	lr

000d713e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d713e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7140:	7c00      	ldrb	r0, [r0, #16]
   d7142:	f7fe faf7 	bl	d5734 <HAL_USART_Available_Data_For_Write>
}
   d7146:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d714a:	bd08      	pop	{r3, pc}

000d714c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d714c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d714e:	7c00      	ldrb	r0, [r0, #16]
   d7150:	f7fe fac8 	bl	d56e4 <HAL_USART_Available_Data>
}
   d7154:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7158:	bd08      	pop	{r3, pc}

000d715a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d715a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d715c:	7c00      	ldrb	r0, [r0, #16]
   d715e:	f7fe fad1 	bl	d5704 <HAL_USART_Peek_Data>
}
   d7162:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7166:	bf28      	it	cs
   d7168:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d716c:	bd08      	pop	{r3, pc}

000d716e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d716e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7170:	7c00      	ldrb	r0, [r0, #16]
   d7172:	f7fe fabf 	bl	d56f4 <HAL_USART_Read_Data>
}
   d7176:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d717a:	bf28      	it	cs
   d717c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7180:	bd08      	pop	{r3, pc}

000d7182 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7182:	7c00      	ldrb	r0, [r0, #16]
   d7184:	f7fe bac6 	b.w	d5714 <HAL_USART_Flush_Data>

000d7188 <_ZN11USARTSerialD0Ev>:
   d7188:	b510      	push	{r4, lr}
   d718a:	2114      	movs	r1, #20
   d718c:	4604      	mov	r4, r0
   d718e:	f000 fa4e 	bl	d762e <_ZdlPvj>
   d7192:	4620      	mov	r0, r4
   d7194:	bd10      	pop	{r4, pc}

000d7196 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7196:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7198:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d719a:	4604      	mov	r4, r0
   d719c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d719e:	b925      	cbnz	r5, d71aa <_ZN11USARTSerial5writeEh+0x14>
   d71a0:	7c00      	ldrb	r0, [r0, #16]
   d71a2:	f7fe fac7 	bl	d5734 <HAL_USART_Available_Data_For_Write>
   d71a6:	2800      	cmp	r0, #0
   d71a8:	dd05      	ble.n	d71b6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d71aa:	4631      	mov	r1, r6
   d71ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d71ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d71b2:	f7fe ba8f 	b.w	d56d4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d71b6:	4628      	mov	r0, r5
   d71b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d71bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d71bc:	b510      	push	{r4, lr}
   d71be:	4604      	mov	r4, r0
   d71c0:	4608      	mov	r0, r1
   d71c2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d71c4:	2200      	movs	r2, #0
   d71c6:	6062      	str	r2, [r4, #4]
   d71c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d71cc:	60a2      	str	r2, [r4, #8]
   d71ce:	4a05      	ldr	r2, [pc, #20]	; (d71e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d71d0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d71d2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d71d4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d71d6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d71d8:	461a      	mov	r2, r3
   d71da:	f7fe fa73 	bl	d56c4 <HAL_USART_Init>
}
   d71de:	4620      	mov	r0, r4
   d71e0:	bd10      	pop	{r4, pc}
   d71e2:	bf00      	nop
   d71e4:	000daff0 	.word	0x000daff0

000d71e8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d71e8:	7c00      	ldrb	r0, [r0, #16]
   d71ea:	f7fe ba9b 	b.w	d5724 <HAL_USART_Is_Enabled>
	...

000d71f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d71f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d71f2:	4d0c      	ldr	r5, [pc, #48]	; (d7224 <_Z22__fetch_global_Serial1v+0x34>)
   d71f4:	6829      	ldr	r1, [r5, #0]
   d71f6:	f011 0401 	ands.w	r4, r1, #1
   d71fa:	d111      	bne.n	d7220 <_Z22__fetch_global_Serial1v+0x30>
   d71fc:	4628      	mov	r0, r5
   d71fe:	f7fc ff52 	bl	d40a6 <__cxa_guard_acquire>
   d7202:	b168      	cbz	r0, d7220 <_Z22__fetch_global_Serial1v+0x30>
   d7204:	4a08      	ldr	r2, [pc, #32]	; (d7228 <_Z22__fetch_global_Serial1v+0x38>)
   d7206:	4b09      	ldr	r3, [pc, #36]	; (d722c <_Z22__fetch_global_Serial1v+0x3c>)
   d7208:	4809      	ldr	r0, [pc, #36]	; (d7230 <_Z22__fetch_global_Serial1v+0x40>)
   d720a:	4621      	mov	r1, r4
   d720c:	f7ff ffd6 	bl	d71bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7210:	4628      	mov	r0, r5
   d7212:	f7fc ff4d 	bl	d40b0 <__cxa_guard_release>
   d7216:	4a07      	ldr	r2, [pc, #28]	; (d7234 <_Z22__fetch_global_Serial1v+0x44>)
   d7218:	4907      	ldr	r1, [pc, #28]	; (d7238 <_Z22__fetch_global_Serial1v+0x48>)
   d721a:	4805      	ldr	r0, [pc, #20]	; (d7230 <_Z22__fetch_global_Serial1v+0x40>)
   d721c:	f000 fa02 	bl	d7624 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7220:	4803      	ldr	r0, [pc, #12]	; (d7230 <_Z22__fetch_global_Serial1v+0x40>)
   d7222:	bd38      	pop	{r3, r4, r5, pc}
   d7224:	2003e628 	.word	0x2003e628
   d7228:	2003e62c 	.word	0x2003e62c
   d722c:	2003e5a4 	.word	0x2003e5a4
   d7230:	2003e590 	.word	0x2003e590
   d7234:	2003e200 	.word	0x2003e200
   d7238:	000d7139 	.word	0x000d7139

000d723c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d723c:	7441      	strb	r1, [r0, #17]
   d723e:	4770      	bx	lr

000d7240 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7240:	4770      	bx	lr

000d7242 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7242:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7244:	2100      	movs	r1, #0
   d7246:	7c00      	ldrb	r0, [r0, #16]
   d7248:	f7fe fa94 	bl	d5774 <HAL_USB_USART_Receive_Data>
}
   d724c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7250:	bf28      	it	cs
   d7252:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7256:	bd08      	pop	{r3, pc}

000d7258 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7258:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d725a:	2101      	movs	r1, #1
   d725c:	7c00      	ldrb	r0, [r0, #16]
   d725e:	f7fe fa89 	bl	d5774 <HAL_USB_USART_Receive_Data>
}
   d7262:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7266:	bf28      	it	cs
   d7268:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d726c:	bd08      	pop	{r3, pc}

000d726e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d726e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7270:	7c00      	ldrb	r0, [r0, #16]
   d7272:	f7fe fa77 	bl	d5764 <HAL_USB_USART_Available_Data_For_Write>
}
   d7276:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d727a:	bd08      	pop	{r3, pc}

000d727c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d727c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d727e:	7c00      	ldrb	r0, [r0, #16]
   d7280:	f7fe fa68 	bl	d5754 <HAL_USB_USART_Available_Data>
}
   d7284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7288:	bd08      	pop	{r3, pc}

000d728a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d728a:	7c00      	ldrb	r0, [r0, #16]
   d728c:	f7fe ba82 	b.w	d5794 <HAL_USB_USART_Flush_Data>

000d7290 <_ZN9USBSerialD0Ev>:
   d7290:	b510      	push	{r4, lr}
   d7292:	2114      	movs	r1, #20
   d7294:	4604      	mov	r4, r0
   d7296:	f000 f9ca 	bl	d762e <_ZdlPvj>
   d729a:	4620      	mov	r0, r4
   d729c:	bd10      	pop	{r4, pc}

000d729e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d729e:	b538      	push	{r3, r4, r5, lr}
   d72a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d72a2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d72a4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d72a6:	f7fe fa5d 	bl	d5764 <HAL_USB_USART_Available_Data_For_Write>
   d72aa:	2800      	cmp	r0, #0
   d72ac:	dc01      	bgt.n	d72b2 <_ZN9USBSerial5writeEh+0x14>
   d72ae:	7c60      	ldrb	r0, [r4, #17]
   d72b0:	b128      	cbz	r0, d72be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d72b2:	4629      	mov	r1, r5
   d72b4:	7c20      	ldrb	r0, [r4, #16]
   d72b6:	f7fe fa65 	bl	d5784 <HAL_USB_USART_Send_Data>
   d72ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d72be:	bd38      	pop	{r3, r4, r5, pc}

000d72c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d72c0:	b510      	push	{r4, lr}
   d72c2:	4604      	mov	r4, r0
   d72c4:	2300      	movs	r3, #0
   d72c6:	6063      	str	r3, [r4, #4]
   d72c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d72cc:	60a3      	str	r3, [r4, #8]
   d72ce:	4b05      	ldr	r3, [pc, #20]	; (d72e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d72d0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d72d2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d72d4:	4608      	mov	r0, r1
{
  _serial = serial;
   d72d6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d72d8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d72da:	4611      	mov	r1, r2
   d72dc:	f7fe fa32 	bl	d5744 <HAL_USB_USART_Init>
}
   d72e0:	4620      	mov	r0, r4
   d72e2:	bd10      	pop	{r4, pc}
   d72e4:	000db020 	.word	0x000db020

000d72e8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d72e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d72ea:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d72ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d72ee:	2100      	movs	r1, #0
   d72f0:	f001 f903 	bl	d84fa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d72f4:	4620      	mov	r0, r4
   d72f6:	bd10      	pop	{r4, pc}

000d72f8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d72f8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d72fa:	4d0e      	ldr	r5, [pc, #56]	; (d7334 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d72fc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d72fe:	a801      	add	r0, sp, #4
   d7300:	f7ff fff2 	bl	d72e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7304:	6829      	ldr	r1, [r5, #0]
   d7306:	f011 0401 	ands.w	r4, r1, #1
   d730a:	d110      	bne.n	d732e <_Z16_fetch_usbserialv+0x36>
   d730c:	4628      	mov	r0, r5
   d730e:	f7fc feca 	bl	d40a6 <__cxa_guard_acquire>
   d7312:	b160      	cbz	r0, d732e <_Z16_fetch_usbserialv+0x36>
   d7314:	aa01      	add	r2, sp, #4
   d7316:	4621      	mov	r1, r4
   d7318:	4807      	ldr	r0, [pc, #28]	; (d7338 <_Z16_fetch_usbserialv+0x40>)
   d731a:	f7ff ffd1 	bl	d72c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d731e:	4628      	mov	r0, r5
   d7320:	f7fc fec6 	bl	d40b0 <__cxa_guard_release>
   d7324:	4a05      	ldr	r2, [pc, #20]	; (d733c <_Z16_fetch_usbserialv+0x44>)
   d7326:	4906      	ldr	r1, [pc, #24]	; (d7340 <_Z16_fetch_usbserialv+0x48>)
   d7328:	4803      	ldr	r0, [pc, #12]	; (d7338 <_Z16_fetch_usbserialv+0x40>)
   d732a:	f000 f97b 	bl	d7624 <__aeabi_atexit>
	return _usbserial;
}
   d732e:	4802      	ldr	r0, [pc, #8]	; (d7338 <_Z16_fetch_usbserialv+0x40>)
   d7330:	b007      	add	sp, #28
   d7332:	bd30      	pop	{r4, r5, pc}
   d7334:	2003e6b0 	.word	0x2003e6b0
   d7338:	2003e6b4 	.word	0x2003e6b4
   d733c:	2003e200 	.word	0x2003e200
   d7340:	000d7241 	.word	0x000d7241

000d7344 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7344:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7346:	4b0c      	ldr	r3, [pc, #48]	; (d7378 <serialEventRun+0x34>)
   d7348:	b133      	cbz	r3, d7358 <serialEventRun+0x14>
   d734a:	f7ff ffd5 	bl	d72f8 <_Z16_fetch_usbserialv>
   d734e:	6803      	ldr	r3, [r0, #0]
   d7350:	691b      	ldr	r3, [r3, #16]
   d7352:	4798      	blx	r3
   d7354:	2800      	cmp	r0, #0
   d7356:	dc09      	bgt.n	d736c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7358:	4b08      	ldr	r3, [pc, #32]	; (d737c <serialEventRun+0x38>)
   d735a:	b163      	cbz	r3, d7376 <serialEventRun+0x32>
   d735c:	f7ff ff48 	bl	d71f0 <_Z22__fetch_global_Serial1v>
   d7360:	6803      	ldr	r3, [r0, #0]
   d7362:	691b      	ldr	r3, [r3, #16]
   d7364:	4798      	blx	r3
   d7366:	2800      	cmp	r0, #0
   d7368:	dc03      	bgt.n	d7372 <serialEventRun+0x2e>
   d736a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d736c:	f3af 8000 	nop.w
   d7370:	e7f2      	b.n	d7358 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7372:	f3af 8000 	nop.w
   d7376:	bd08      	pop	{r3, pc}
	...

000d7380 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7380:	b508      	push	{r3, lr}
	serialEventRun();
   d7382:	f7ff ffdf 	bl	d7344 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7386:	f7fe f895 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d738a:	4b01      	ldr	r3, [pc, #4]	; (d7390 <_post_loop+0x10>)
   d738c:	6018      	str	r0, [r3, #0]
   d738e:	bd08      	pop	{r3, pc}
   d7390:	2003e6cc 	.word	0x2003e6cc

000d7394 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7394:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7396:	2300      	movs	r3, #0
   d7398:	9300      	str	r3, [sp, #0]
   d739a:	461a      	mov	r2, r3
   d739c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d73a0:	f7fe fa52 	bl	d5848 <system_ctrl_set_result>
}
   d73a4:	b003      	add	sp, #12
   d73a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d73ac <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d73ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d73ae:	8843      	ldrh	r3, [r0, #2]
   d73b0:	2b0a      	cmp	r3, #10
   d73b2:	d008      	beq.n	d73c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d73b4:	2b50      	cmp	r3, #80	; 0x50
   d73b6:	d109      	bne.n	d73cc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d73b8:	4b09      	ldr	r3, [pc, #36]	; (d73e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d73ba:	681b      	ldr	r3, [r3, #0]
   d73bc:	b13b      	cbz	r3, d73ce <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d73be:	b003      	add	sp, #12
   d73c0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d73c4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d73c6:	f7ff ffe5 	bl	d7394 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d73ca:	e006      	b.n	d73da <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d73cc:	2300      	movs	r3, #0
   d73ce:	9300      	str	r3, [sp, #0]
   d73d0:	461a      	mov	r2, r3
   d73d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d73d6:	f7fe fa37 	bl	d5848 <system_ctrl_set_result>
        break;
    }
}
   d73da:	b003      	add	sp, #12
   d73dc:	f85d fb04 	ldr.w	pc, [sp], #4
   d73e0:	2003e6c8 	.word	0x2003e6c8

000d73e4 <module_user_init_hook>:

void module_user_init_hook()
{
   d73e4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d73e6:	f7fe f855 	bl	d5494 <HAL_RNG_GetRandomNumber>
   d73ea:	4604      	mov	r4, r0
    srand(seed);
   d73ec:	f001 f88e 	bl	d850c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d73f0:	4b07      	ldr	r3, [pc, #28]	; (d7410 <module_user_init_hook+0x2c>)
   d73f2:	b113      	cbz	r3, d73fa <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d73f4:	4620      	mov	r0, r4
   d73f6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d73fa:	2100      	movs	r1, #0
   d73fc:	4804      	ldr	r0, [pc, #16]	; (d7410 <module_user_init_hook+0x2c>)
   d73fe:	f7fe fa8f 	bl	d5920 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7402:	2100      	movs	r1, #0
   d7404:	4803      	ldr	r0, [pc, #12]	; (d7414 <module_user_init_hook+0x30>)
}
   d7406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d740a:	f7fe ba13 	b.w	d5834 <system_ctrl_set_app_request_handler>
   d740e:	bf00      	nop
   d7410:	00000000 	.word	0x00000000
   d7414:	000d73ad 	.word	0x000d73ad

000d7418 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7418:	b508      	push	{r3, lr}
   d741a:	4b02      	ldr	r3, [pc, #8]	; (d7424 <spark_protocol_instance+0xc>)
   d741c:	681b      	ldr	r3, [r3, #0]
   d741e:	681b      	ldr	r3, [r3, #0]
   d7420:	9301      	str	r3, [sp, #4]
   d7422:	bd08      	pop	{r3, pc}
   d7424:	0003025c 	.word	0x0003025c

000d7428 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7428:	b508      	push	{r3, lr}
   d742a:	4b02      	ldr	r3, [pc, #8]	; (d7434 <spark_protocol_set_product_id+0xc>)
   d742c:	681b      	ldr	r3, [r3, #0]
   d742e:	685b      	ldr	r3, [r3, #4]
   d7430:	9301      	str	r3, [sp, #4]
   d7432:	bd08      	pop	{r3, pc}
   d7434:	0003025c 	.word	0x0003025c

000d7438 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7438:	b508      	push	{r3, lr}
   d743a:	4b02      	ldr	r3, [pc, #8]	; (d7444 <spark_protocol_set_product_firmware_version+0xc>)
   d743c:	681b      	ldr	r3, [r3, #0]
   d743e:	689b      	ldr	r3, [r3, #8]
   d7440:	9301      	str	r3, [sp, #4]
   d7442:	bd08      	pop	{r3, pc}
   d7444:	0003025c 	.word	0x0003025c

000d7448 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7448:	b510      	push	{r4, lr}
   d744a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d744c:	480f      	ldr	r0, [pc, #60]	; (d748c <pinAvailable+0x44>)
   d744e:	f7ff fce1 	bl	d6e14 <_ZN8SPIClass9isEnabledEv>
   d7452:	b128      	cbz	r0, d7460 <pinAvailable+0x18>
   d7454:	f1a4 030b 	sub.w	r3, r4, #11
   d7458:	2b02      	cmp	r3, #2
   d745a:	d801      	bhi.n	d7460 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d745c:	2000      	movs	r0, #0
   d745e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7460:	f000 f87e 	bl	d7560 <_Z19__fetch_global_Wirev>
   d7464:	f7ff f851 	bl	d650a <_ZN7TwoWire9isEnabledEv>
   d7468:	b108      	cbz	r0, d746e <pinAvailable+0x26>
   d746a:	2c01      	cmp	r4, #1
   d746c:	d9f6      	bls.n	d745c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d746e:	f7ff febf 	bl	d71f0 <_Z22__fetch_global_Serial1v>
   d7472:	f7ff feb9 	bl	d71e8 <_ZN11USARTSerial9isEnabledEv>
   d7476:	b118      	cbz	r0, d7480 <pinAvailable+0x38>
   d7478:	f1a4 0309 	sub.w	r3, r4, #9
   d747c:	2b01      	cmp	r3, #1
   d747e:	d9ed      	bls.n	d745c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7480:	2c23      	cmp	r4, #35	; 0x23
   d7482:	bf8c      	ite	hi
   d7484:	2000      	movhi	r0, #0
   d7486:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7488:	bd10      	pop	{r4, pc}
   d748a:	bf00      	nop
   d748c:	2003e708 	.word	0x2003e708

000d7490 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7490:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7492:	b538      	push	{r3, r4, r5, lr}
   d7494:	4604      	mov	r4, r0
   d7496:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7498:	d80a      	bhi.n	d74b0 <pinMode+0x20>
   d749a:	29ff      	cmp	r1, #255	; 0xff
   d749c:	d008      	beq.n	d74b0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d749e:	f7ff ffd3 	bl	d7448 <pinAvailable>
   d74a2:	b128      	cbz	r0, d74b0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d74a4:	4629      	mov	r1, r5
   d74a6:	4620      	mov	r0, r4
}
   d74a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d74ac:	f7fe b852 	b.w	d5554 <HAL_Pin_Mode>
   d74b0:	bd38      	pop	{r3, r4, r5, pc}

000d74b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d74b2:	b538      	push	{r3, r4, r5, lr}
   d74b4:	4604      	mov	r4, r0
   d74b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d74b8:	f7fe f854 	bl	d5564 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d74bc:	28ff      	cmp	r0, #255	; 0xff
   d74be:	d010      	beq.n	d74e2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d74c0:	2806      	cmp	r0, #6
   d74c2:	d804      	bhi.n	d74ce <digitalWrite+0x1c>
   d74c4:	234d      	movs	r3, #77	; 0x4d
   d74c6:	fa23 f000 	lsr.w	r0, r3, r0
   d74ca:	07c3      	lsls	r3, r0, #31
   d74cc:	d409      	bmi.n	d74e2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d74ce:	4620      	mov	r0, r4
   d74d0:	f7ff ffba 	bl	d7448 <pinAvailable>
   d74d4:	b128      	cbz	r0, d74e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d74d6:	4629      	mov	r1, r5
   d74d8:	4620      	mov	r0, r4
}
   d74da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d74de:	f7fe b849 	b.w	d5574 <HAL_GPIO_Write>
   d74e2:	bd38      	pop	{r3, r4, r5, pc}

000d74e4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d74e4:	b510      	push	{r4, lr}
   d74e6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d74e8:	f7fe f83c 	bl	d5564 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d74ec:	3804      	subs	r0, #4
   d74ee:	b2c0      	uxtb	r0, r0
   d74f0:	2801      	cmp	r0, #1
   d74f2:	d908      	bls.n	d7506 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d74f4:	4620      	mov	r0, r4
   d74f6:	f7ff ffa7 	bl	d7448 <pinAvailable>
   d74fa:	b120      	cbz	r0, d7506 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d74fc:	4620      	mov	r0, r4
}
   d74fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7502:	f7fe b83f 	b.w	d5584 <HAL_GPIO_Read>
}
   d7506:	2000      	movs	r0, #0
   d7508:	bd10      	pop	{r4, pc}

000d750a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d750a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d750c:	b510      	push	{r4, lr}
   d750e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7510:	bf9c      	itt	ls
   d7512:	340e      	addls	r4, #14
   d7514:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7516:	4620      	mov	r0, r4
   d7518:	f7ff ff96 	bl	d7448 <pinAvailable>
   d751c:	b150      	cbz	r0, d7534 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d751e:	2103      	movs	r1, #3
   d7520:	4620      	mov	r0, r4
   d7522:	f7fe f80f 	bl	d5544 <HAL_Validate_Pin_Function>
   d7526:	2803      	cmp	r0, #3
   d7528:	d104      	bne.n	d7534 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d752a:	4620      	mov	r0, r4
}
   d752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7530:	f7fe b830 	b.w	d5594 <HAL_ADC_Read>
}
   d7534:	2000      	movs	r0, #0
   d7536:	bd10      	pop	{r4, pc}

000d7538 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7538:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d753a:	4c07      	ldr	r4, [pc, #28]	; (d7558 <_Z21__fetch_global_EEPROMv+0x20>)
   d753c:	6823      	ldr	r3, [r4, #0]
   d753e:	07db      	lsls	r3, r3, #31
   d7540:	d408      	bmi.n	d7554 <_Z21__fetch_global_EEPROMv+0x1c>
   d7542:	4620      	mov	r0, r4
   d7544:	f7fc fdaf 	bl	d40a6 <__cxa_guard_acquire>
   d7548:	b120      	cbz	r0, d7554 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d754a:	f7fd ffc3 	bl	d54d4 <HAL_EEPROM_Init>
   d754e:	4620      	mov	r0, r4
   d7550:	f7fc fdae 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7554:	4801      	ldr	r0, [pc, #4]	; (d755c <_Z21__fetch_global_EEPROMv+0x24>)
   d7556:	bd10      	pop	{r4, pc}
   d7558:	2003e6d0 	.word	0x2003e6d0
   d755c:	2003e6d4 	.word	0x2003e6d4

000d7560 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7560:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7562:	4d0b      	ldr	r5, [pc, #44]	; (d7590 <_Z19__fetch_global_Wirev+0x30>)
   d7564:	6829      	ldr	r1, [r5, #0]
   d7566:	f011 0401 	ands.w	r4, r1, #1
   d756a:	d10f      	bne.n	d758c <_Z19__fetch_global_Wirev+0x2c>
   d756c:	4628      	mov	r0, r5
   d756e:	f7fc fd9a 	bl	d40a6 <__cxa_guard_acquire>
   d7572:	b158      	cbz	r0, d758c <_Z19__fetch_global_Wirev+0x2c>
   d7574:	4621      	mov	r1, r4
   d7576:	4807      	ldr	r0, [pc, #28]	; (d7594 <_Z19__fetch_global_Wirev+0x34>)
   d7578:	f7fe ff90 	bl	d649c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d757c:	4628      	mov	r0, r5
   d757e:	f7fc fd97 	bl	d40b0 <__cxa_guard_release>
   d7582:	4a05      	ldr	r2, [pc, #20]	; (d7598 <_Z19__fetch_global_Wirev+0x38>)
   d7584:	4905      	ldr	r1, [pc, #20]	; (d759c <_Z19__fetch_global_Wirev+0x3c>)
   d7586:	4803      	ldr	r0, [pc, #12]	; (d7594 <_Z19__fetch_global_Wirev+0x34>)
   d7588:	f000 f84c 	bl	d7624 <__aeabi_atexit>
	return wire;
}
   d758c:	4801      	ldr	r0, [pc, #4]	; (d7594 <_Z19__fetch_global_Wirev+0x34>)
   d758e:	bd38      	pop	{r3, r4, r5, pc}
   d7590:	2003e6d8 	.word	0x2003e6d8
   d7594:	2003e6f0 	.word	0x2003e6f0
   d7598:	2003e200 	.word	0x2003e200
   d759c:	000d6445 	.word	0x000d6445

000d75a0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d75a0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d75a2:	4c0b      	ldr	r4, [pc, #44]	; (d75d0 <_Z20__fetch_global_Wire1v+0x30>)
   d75a4:	6823      	ldr	r3, [r4, #0]
   d75a6:	07db      	lsls	r3, r3, #31
   d75a8:	d40f      	bmi.n	d75ca <_Z20__fetch_global_Wire1v+0x2a>
   d75aa:	4620      	mov	r0, r4
   d75ac:	f7fc fd7b 	bl	d40a6 <__cxa_guard_acquire>
   d75b0:	b158      	cbz	r0, d75ca <_Z20__fetch_global_Wire1v+0x2a>
   d75b2:	2101      	movs	r1, #1
   d75b4:	4807      	ldr	r0, [pc, #28]	; (d75d4 <_Z20__fetch_global_Wire1v+0x34>)
   d75b6:	f7fe ff71 	bl	d649c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d75ba:	4620      	mov	r0, r4
   d75bc:	f7fc fd78 	bl	d40b0 <__cxa_guard_release>
   d75c0:	4a05      	ldr	r2, [pc, #20]	; (d75d8 <_Z20__fetch_global_Wire1v+0x38>)
   d75c2:	4906      	ldr	r1, [pc, #24]	; (d75dc <_Z20__fetch_global_Wire1v+0x3c>)
   d75c4:	4803      	ldr	r0, [pc, #12]	; (d75d4 <_Z20__fetch_global_Wire1v+0x34>)
   d75c6:	f000 f82d 	bl	d7624 <__aeabi_atexit>
	return wire;
}
   d75ca:	4802      	ldr	r0, [pc, #8]	; (d75d4 <_Z20__fetch_global_Wire1v+0x34>)
   d75cc:	bd10      	pop	{r4, pc}
   d75ce:	bf00      	nop
   d75d0:	2003e704 	.word	0x2003e704
   d75d4:	2003e6dc 	.word	0x2003e6dc
   d75d8:	2003e200 	.word	0x2003e200
   d75dc:	000d6445 	.word	0x000d6445

000d75e0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d75e0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d75e2:	4c0c      	ldr	r4, [pc, #48]	; (d7614 <_GLOBAL__sub_I_SPI+0x34>)
   d75e4:	4e0c      	ldr	r6, [pc, #48]	; (d7618 <_GLOBAL__sub_I_SPI+0x38>)
   d75e6:	4d0d      	ldr	r5, [pc, #52]	; (d761c <_GLOBAL__sub_I_SPI+0x3c>)
   d75e8:	2100      	movs	r1, #0
   d75ea:	4620      	mov	r0, r4
   d75ec:	f7ff fbfe 	bl	d6dec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d75f0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d75f2:	4c0b      	ldr	r4, [pc, #44]	; (d7620 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d75f4:	4632      	mov	r2, r6
   d75f6:	4629      	mov	r1, r5
   d75f8:	f000 f814 	bl	d7624 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d75fc:	2101      	movs	r1, #1
   d75fe:	4620      	mov	r0, r4
   d7600:	f7ff fbf4 	bl	d6dec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7604:	4632      	mov	r2, r6
   d7606:	4629      	mov	r1, r5
   d7608:	4620      	mov	r0, r4
   d760a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d760e:	f000 b809 	b.w	d7624 <__aeabi_atexit>
   d7612:	bf00      	nop
   d7614:	2003e708 	.word	0x2003e708
   d7618:	2003e200 	.word	0x2003e200
   d761c:	000d6ddd 	.word	0x000d6ddd
   d7620:	2003e718 	.word	0x2003e718

000d7624 <__aeabi_atexit>:
   d7624:	460b      	mov	r3, r1
   d7626:	4601      	mov	r1, r0
   d7628:	4618      	mov	r0, r3
   d762a:	f000 be51 	b.w	d82d0 <__cxa_atexit>

000d762e <_ZdlPvj>:
   d762e:	f7fc bd36 	b.w	d409e <_ZdlPv>

000d7632 <_ZSt25__throw_bad_function_callv>:
   d7632:	b508      	push	{r3, lr}
   d7634:	f7fe f9f4 	bl	d5a20 <abort>

000d7638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7638:	4b24      	ldr	r3, [pc, #144]	; (d76cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d763a:	681a      	ldr	r2, [r3, #0]
   d763c:	07d0      	lsls	r0, r2, #31
   d763e:	bf5c      	itt	pl
   d7640:	2201      	movpl	r2, #1
   d7642:	601a      	strpl	r2, [r3, #0]
   d7644:	4b22      	ldr	r3, [pc, #136]	; (d76d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7646:	681a      	ldr	r2, [r3, #0]
   d7648:	07d1      	lsls	r1, r2, #31
   d764a:	bf5c      	itt	pl
   d764c:	2201      	movpl	r2, #1
   d764e:	601a      	strpl	r2, [r3, #0]
   d7650:	4b20      	ldr	r3, [pc, #128]	; (d76d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7652:	681a      	ldr	r2, [r3, #0]
   d7654:	07d2      	lsls	r2, r2, #31
   d7656:	bf5c      	itt	pl
   d7658:	2201      	movpl	r2, #1
   d765a:	601a      	strpl	r2, [r3, #0]
   d765c:	4b1e      	ldr	r3, [pc, #120]	; (d76d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d765e:	681a      	ldr	r2, [r3, #0]
   d7660:	07d0      	lsls	r0, r2, #31
   d7662:	bf5c      	itt	pl
   d7664:	2201      	movpl	r2, #1
   d7666:	601a      	strpl	r2, [r3, #0]
   d7668:	4b1c      	ldr	r3, [pc, #112]	; (d76dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d766a:	681a      	ldr	r2, [r3, #0]
   d766c:	07d1      	lsls	r1, r2, #31
   d766e:	bf5c      	itt	pl
   d7670:	2201      	movpl	r2, #1
   d7672:	601a      	strpl	r2, [r3, #0]
   d7674:	4b1a      	ldr	r3, [pc, #104]	; (d76e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7676:	681a      	ldr	r2, [r3, #0]
   d7678:	07d2      	lsls	r2, r2, #31
   d767a:	bf5c      	itt	pl
   d767c:	2201      	movpl	r2, #1
   d767e:	601a      	strpl	r2, [r3, #0]
   d7680:	4b18      	ldr	r3, [pc, #96]	; (d76e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7682:	681a      	ldr	r2, [r3, #0]
   d7684:	07d0      	lsls	r0, r2, #31
   d7686:	bf5c      	itt	pl
   d7688:	2201      	movpl	r2, #1
   d768a:	601a      	strpl	r2, [r3, #0]
   d768c:	4b16      	ldr	r3, [pc, #88]	; (d76e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d768e:	681a      	ldr	r2, [r3, #0]
   d7690:	07d1      	lsls	r1, r2, #31
   d7692:	bf5c      	itt	pl
   d7694:	2201      	movpl	r2, #1
   d7696:	601a      	strpl	r2, [r3, #0]
   d7698:	4b14      	ldr	r3, [pc, #80]	; (d76ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d769a:	681a      	ldr	r2, [r3, #0]
   d769c:	07d2      	lsls	r2, r2, #31
   d769e:	bf5c      	itt	pl
   d76a0:	2201      	movpl	r2, #1
   d76a2:	601a      	strpl	r2, [r3, #0]
   d76a4:	4b12      	ldr	r3, [pc, #72]	; (d76f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d76a6:	681a      	ldr	r2, [r3, #0]
   d76a8:	07d0      	lsls	r0, r2, #31
   d76aa:	bf5c      	itt	pl
   d76ac:	2201      	movpl	r2, #1
   d76ae:	601a      	strpl	r2, [r3, #0]
   d76b0:	4b10      	ldr	r3, [pc, #64]	; (d76f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d76b2:	681a      	ldr	r2, [r3, #0]
   d76b4:	07d1      	lsls	r1, r2, #31
   d76b6:	bf5c      	itt	pl
   d76b8:	2201      	movpl	r2, #1
   d76ba:	601a      	strpl	r2, [r3, #0]
   d76bc:	4b0e      	ldr	r3, [pc, #56]	; (d76f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d76be:	681a      	ldr	r2, [r3, #0]
   d76c0:	07d2      	lsls	r2, r2, #31
   d76c2:	bf5c      	itt	pl
   d76c4:	2201      	movpl	r2, #1
   d76c6:	601a      	strpl	r2, [r3, #0]
   d76c8:	4770      	bx	lr
   d76ca:	bf00      	nop
   d76cc:	2003e754 	.word	0x2003e754
   d76d0:	2003e750 	.word	0x2003e750
   d76d4:	2003e74c 	.word	0x2003e74c
   d76d8:	2003e748 	.word	0x2003e748
   d76dc:	2003e744 	.word	0x2003e744
   d76e0:	2003e740 	.word	0x2003e740
   d76e4:	2003e73c 	.word	0x2003e73c
   d76e8:	2003e738 	.word	0x2003e738
   d76ec:	2003e734 	.word	0x2003e734
   d76f0:	2003e730 	.word	0x2003e730
   d76f4:	2003e72c 	.word	0x2003e72c
   d76f8:	2003e728 	.word	0x2003e728

000d76fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d76fc:	4b18      	ldr	r3, [pc, #96]	; (d7760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d76fe:	681a      	ldr	r2, [r3, #0]
   d7700:	07d1      	lsls	r1, r2, #31
   d7702:	bf5c      	itt	pl
   d7704:	2201      	movpl	r2, #1
   d7706:	601a      	strpl	r2, [r3, #0]
   d7708:	4b16      	ldr	r3, [pc, #88]	; (d7764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d770a:	681a      	ldr	r2, [r3, #0]
   d770c:	07d2      	lsls	r2, r2, #31
   d770e:	bf5c      	itt	pl
   d7710:	2201      	movpl	r2, #1
   d7712:	601a      	strpl	r2, [r3, #0]
   d7714:	4b14      	ldr	r3, [pc, #80]	; (d7768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7716:	681a      	ldr	r2, [r3, #0]
   d7718:	07d0      	lsls	r0, r2, #31
   d771a:	bf5c      	itt	pl
   d771c:	2201      	movpl	r2, #1
   d771e:	601a      	strpl	r2, [r3, #0]
   d7720:	4b12      	ldr	r3, [pc, #72]	; (d776c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7722:	681a      	ldr	r2, [r3, #0]
   d7724:	07d1      	lsls	r1, r2, #31
   d7726:	bf5c      	itt	pl
   d7728:	2201      	movpl	r2, #1
   d772a:	601a      	strpl	r2, [r3, #0]
   d772c:	4b10      	ldr	r3, [pc, #64]	; (d7770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d772e:	681a      	ldr	r2, [r3, #0]
   d7730:	07d2      	lsls	r2, r2, #31
   d7732:	bf5c      	itt	pl
   d7734:	2201      	movpl	r2, #1
   d7736:	601a      	strpl	r2, [r3, #0]
   d7738:	4b0e      	ldr	r3, [pc, #56]	; (d7774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d773a:	681a      	ldr	r2, [r3, #0]
   d773c:	07d0      	lsls	r0, r2, #31
   d773e:	bf5c      	itt	pl
   d7740:	2201      	movpl	r2, #1
   d7742:	601a      	strpl	r2, [r3, #0]
   d7744:	4b0c      	ldr	r3, [pc, #48]	; (d7778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7746:	681a      	ldr	r2, [r3, #0]
   d7748:	07d1      	lsls	r1, r2, #31
   d774a:	bf5c      	itt	pl
   d774c:	2201      	movpl	r2, #1
   d774e:	601a      	strpl	r2, [r3, #0]
   d7750:	4b0a      	ldr	r3, [pc, #40]	; (d777c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7752:	681a      	ldr	r2, [r3, #0]
   d7754:	07d2      	lsls	r2, r2, #31
   d7756:	bf5c      	itt	pl
   d7758:	2201      	movpl	r2, #1
   d775a:	601a      	strpl	r2, [r3, #0]
   d775c:	4770      	bx	lr
   d775e:	bf00      	nop
   d7760:	2003e774 	.word	0x2003e774
   d7764:	2003e770 	.word	0x2003e770
   d7768:	2003e76c 	.word	0x2003e76c
   d776c:	2003e768 	.word	0x2003e768
   d7770:	2003e764 	.word	0x2003e764
   d7774:	2003e760 	.word	0x2003e760
   d7778:	2003e75c 	.word	0x2003e75c
   d777c:	2003e758 	.word	0x2003e758

000d7780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7780:	4b18      	ldr	r3, [pc, #96]	; (d77e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	07d1      	lsls	r1, r2, #31
   d7786:	bf5c      	itt	pl
   d7788:	2201      	movpl	r2, #1
   d778a:	601a      	strpl	r2, [r3, #0]
   d778c:	4b16      	ldr	r3, [pc, #88]	; (d77e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d778e:	681a      	ldr	r2, [r3, #0]
   d7790:	07d2      	lsls	r2, r2, #31
   d7792:	bf5c      	itt	pl
   d7794:	2201      	movpl	r2, #1
   d7796:	601a      	strpl	r2, [r3, #0]
   d7798:	4b14      	ldr	r3, [pc, #80]	; (d77ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d779a:	681a      	ldr	r2, [r3, #0]
   d779c:	07d0      	lsls	r0, r2, #31
   d779e:	bf5c      	itt	pl
   d77a0:	2201      	movpl	r2, #1
   d77a2:	601a      	strpl	r2, [r3, #0]
   d77a4:	4b12      	ldr	r3, [pc, #72]	; (d77f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d77a6:	681a      	ldr	r2, [r3, #0]
   d77a8:	07d1      	lsls	r1, r2, #31
   d77aa:	bf5c      	itt	pl
   d77ac:	2201      	movpl	r2, #1
   d77ae:	601a      	strpl	r2, [r3, #0]
   d77b0:	4b10      	ldr	r3, [pc, #64]	; (d77f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d77b2:	681a      	ldr	r2, [r3, #0]
   d77b4:	07d2      	lsls	r2, r2, #31
   d77b6:	bf5c      	itt	pl
   d77b8:	2201      	movpl	r2, #1
   d77ba:	601a      	strpl	r2, [r3, #0]
   d77bc:	4b0e      	ldr	r3, [pc, #56]	; (d77f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d77be:	681a      	ldr	r2, [r3, #0]
   d77c0:	07d0      	lsls	r0, r2, #31
   d77c2:	bf5c      	itt	pl
   d77c4:	2201      	movpl	r2, #1
   d77c6:	601a      	strpl	r2, [r3, #0]
   d77c8:	4b0c      	ldr	r3, [pc, #48]	; (d77fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d77ca:	681a      	ldr	r2, [r3, #0]
   d77cc:	07d1      	lsls	r1, r2, #31
   d77ce:	bf5c      	itt	pl
   d77d0:	2201      	movpl	r2, #1
   d77d2:	601a      	strpl	r2, [r3, #0]
   d77d4:	4b0a      	ldr	r3, [pc, #40]	; (d7800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d77d6:	681a      	ldr	r2, [r3, #0]
   d77d8:	07d2      	lsls	r2, r2, #31
   d77da:	bf5c      	itt	pl
   d77dc:	2201      	movpl	r2, #1
   d77de:	601a      	strpl	r2, [r3, #0]
   d77e0:	4770      	bx	lr
   d77e2:	bf00      	nop
   d77e4:	2003e794 	.word	0x2003e794
   d77e8:	2003e790 	.word	0x2003e790
   d77ec:	2003e78c 	.word	0x2003e78c
   d77f0:	2003e788 	.word	0x2003e788
   d77f4:	2003e784 	.word	0x2003e784
   d77f8:	2003e780 	.word	0x2003e780
   d77fc:	2003e77c 	.word	0x2003e77c
   d7800:	2003e778 	.word	0x2003e778

000d7804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7804:	4b24      	ldr	r3, [pc, #144]	; (d7898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7806:	681a      	ldr	r2, [r3, #0]
   d7808:	07d0      	lsls	r0, r2, #31
   d780a:	bf5c      	itt	pl
   d780c:	2201      	movpl	r2, #1
   d780e:	601a      	strpl	r2, [r3, #0]
   d7810:	4b22      	ldr	r3, [pc, #136]	; (d789c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7812:	681a      	ldr	r2, [r3, #0]
   d7814:	07d1      	lsls	r1, r2, #31
   d7816:	bf5c      	itt	pl
   d7818:	2201      	movpl	r2, #1
   d781a:	601a      	strpl	r2, [r3, #0]
   d781c:	4b20      	ldr	r3, [pc, #128]	; (d78a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d781e:	681a      	ldr	r2, [r3, #0]
   d7820:	07d2      	lsls	r2, r2, #31
   d7822:	bf5c      	itt	pl
   d7824:	2201      	movpl	r2, #1
   d7826:	601a      	strpl	r2, [r3, #0]
   d7828:	4b1e      	ldr	r3, [pc, #120]	; (d78a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d782a:	681a      	ldr	r2, [r3, #0]
   d782c:	07d0      	lsls	r0, r2, #31
   d782e:	bf5c      	itt	pl
   d7830:	2201      	movpl	r2, #1
   d7832:	601a      	strpl	r2, [r3, #0]
   d7834:	4b1c      	ldr	r3, [pc, #112]	; (d78a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7836:	681a      	ldr	r2, [r3, #0]
   d7838:	07d1      	lsls	r1, r2, #31
   d783a:	bf5c      	itt	pl
   d783c:	2201      	movpl	r2, #1
   d783e:	601a      	strpl	r2, [r3, #0]
   d7840:	4b1a      	ldr	r3, [pc, #104]	; (d78ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7842:	681a      	ldr	r2, [r3, #0]
   d7844:	07d2      	lsls	r2, r2, #31
   d7846:	bf5c      	itt	pl
   d7848:	2201      	movpl	r2, #1
   d784a:	601a      	strpl	r2, [r3, #0]
   d784c:	4b18      	ldr	r3, [pc, #96]	; (d78b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d784e:	681a      	ldr	r2, [r3, #0]
   d7850:	07d0      	lsls	r0, r2, #31
   d7852:	bf5c      	itt	pl
   d7854:	2201      	movpl	r2, #1
   d7856:	601a      	strpl	r2, [r3, #0]
   d7858:	4b16      	ldr	r3, [pc, #88]	; (d78b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d785a:	681a      	ldr	r2, [r3, #0]
   d785c:	07d1      	lsls	r1, r2, #31
   d785e:	bf5c      	itt	pl
   d7860:	2201      	movpl	r2, #1
   d7862:	601a      	strpl	r2, [r3, #0]
   d7864:	4b14      	ldr	r3, [pc, #80]	; (d78b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7866:	681a      	ldr	r2, [r3, #0]
   d7868:	07d2      	lsls	r2, r2, #31
   d786a:	bf5c      	itt	pl
   d786c:	2201      	movpl	r2, #1
   d786e:	601a      	strpl	r2, [r3, #0]
   d7870:	4b12      	ldr	r3, [pc, #72]	; (d78bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7872:	681a      	ldr	r2, [r3, #0]
   d7874:	07d0      	lsls	r0, r2, #31
   d7876:	bf5c      	itt	pl
   d7878:	2201      	movpl	r2, #1
   d787a:	601a      	strpl	r2, [r3, #0]
   d787c:	4b10      	ldr	r3, [pc, #64]	; (d78c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d787e:	681a      	ldr	r2, [r3, #0]
   d7880:	07d1      	lsls	r1, r2, #31
   d7882:	bf5c      	itt	pl
   d7884:	2201      	movpl	r2, #1
   d7886:	601a      	strpl	r2, [r3, #0]
   d7888:	4b0e      	ldr	r3, [pc, #56]	; (d78c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d788a:	681a      	ldr	r2, [r3, #0]
   d788c:	07d2      	lsls	r2, r2, #31
   d788e:	bf5c      	itt	pl
   d7890:	2201      	movpl	r2, #1
   d7892:	601a      	strpl	r2, [r3, #0]
   d7894:	4770      	bx	lr
   d7896:	bf00      	nop
   d7898:	2003e7c4 	.word	0x2003e7c4
   d789c:	2003e7c0 	.word	0x2003e7c0
   d78a0:	2003e7bc 	.word	0x2003e7bc
   d78a4:	2003e7b8 	.word	0x2003e7b8
   d78a8:	2003e7b4 	.word	0x2003e7b4
   d78ac:	2003e7b0 	.word	0x2003e7b0
   d78b0:	2003e7ac 	.word	0x2003e7ac
   d78b4:	2003e7a8 	.word	0x2003e7a8
   d78b8:	2003e7a4 	.word	0x2003e7a4
   d78bc:	2003e7a0 	.word	0x2003e7a0
   d78c0:	2003e79c 	.word	0x2003e79c
   d78c4:	2003e798 	.word	0x2003e798

000d78c8 <__aeabi_drsub>:
   d78c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d78cc:	e002      	b.n	d78d4 <__adddf3>
   d78ce:	bf00      	nop

000d78d0 <__aeabi_dsub>:
   d78d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d78d4 <__adddf3>:
   d78d4:	b530      	push	{r4, r5, lr}
   d78d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d78da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d78de:	ea94 0f05 	teq	r4, r5
   d78e2:	bf08      	it	eq
   d78e4:	ea90 0f02 	teqeq	r0, r2
   d78e8:	bf1f      	itttt	ne
   d78ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d78ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d78f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d78f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d78fa:	f000 80e2 	beq.w	d7ac2 <__adddf3+0x1ee>
   d78fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7902:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7906:	bfb8      	it	lt
   d7908:	426d      	neglt	r5, r5
   d790a:	dd0c      	ble.n	d7926 <__adddf3+0x52>
   d790c:	442c      	add	r4, r5
   d790e:	ea80 0202 	eor.w	r2, r0, r2
   d7912:	ea81 0303 	eor.w	r3, r1, r3
   d7916:	ea82 0000 	eor.w	r0, r2, r0
   d791a:	ea83 0101 	eor.w	r1, r3, r1
   d791e:	ea80 0202 	eor.w	r2, r0, r2
   d7922:	ea81 0303 	eor.w	r3, r1, r3
   d7926:	2d36      	cmp	r5, #54	; 0x36
   d7928:	bf88      	it	hi
   d792a:	bd30      	pophi	{r4, r5, pc}
   d792c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7930:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7934:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7938:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d793c:	d002      	beq.n	d7944 <__adddf3+0x70>
   d793e:	4240      	negs	r0, r0
   d7940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7944:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7948:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d794c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7950:	d002      	beq.n	d7958 <__adddf3+0x84>
   d7952:	4252      	negs	r2, r2
   d7954:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7958:	ea94 0f05 	teq	r4, r5
   d795c:	f000 80a7 	beq.w	d7aae <__adddf3+0x1da>
   d7960:	f1a4 0401 	sub.w	r4, r4, #1
   d7964:	f1d5 0e20 	rsbs	lr, r5, #32
   d7968:	db0d      	blt.n	d7986 <__adddf3+0xb2>
   d796a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d796e:	fa22 f205 	lsr.w	r2, r2, r5
   d7972:	1880      	adds	r0, r0, r2
   d7974:	f141 0100 	adc.w	r1, r1, #0
   d7978:	fa03 f20e 	lsl.w	r2, r3, lr
   d797c:	1880      	adds	r0, r0, r2
   d797e:	fa43 f305 	asr.w	r3, r3, r5
   d7982:	4159      	adcs	r1, r3
   d7984:	e00e      	b.n	d79a4 <__adddf3+0xd0>
   d7986:	f1a5 0520 	sub.w	r5, r5, #32
   d798a:	f10e 0e20 	add.w	lr, lr, #32
   d798e:	2a01      	cmp	r2, #1
   d7990:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7994:	bf28      	it	cs
   d7996:	f04c 0c02 	orrcs.w	ip, ip, #2
   d799a:	fa43 f305 	asr.w	r3, r3, r5
   d799e:	18c0      	adds	r0, r0, r3
   d79a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d79a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d79a8:	d507      	bpl.n	d79ba <__adddf3+0xe6>
   d79aa:	f04f 0e00 	mov.w	lr, #0
   d79ae:	f1dc 0c00 	rsbs	ip, ip, #0
   d79b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d79b6:	eb6e 0101 	sbc.w	r1, lr, r1
   d79ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d79be:	d31b      	bcc.n	d79f8 <__adddf3+0x124>
   d79c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d79c4:	d30c      	bcc.n	d79e0 <__adddf3+0x10c>
   d79c6:	0849      	lsrs	r1, r1, #1
   d79c8:	ea5f 0030 	movs.w	r0, r0, rrx
   d79cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d79d0:	f104 0401 	add.w	r4, r4, #1
   d79d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d79d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d79dc:	f080 809a 	bcs.w	d7b14 <__adddf3+0x240>
   d79e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d79e4:	bf08      	it	eq
   d79e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d79ea:	f150 0000 	adcs.w	r0, r0, #0
   d79ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d79f2:	ea41 0105 	orr.w	r1, r1, r5
   d79f6:	bd30      	pop	{r4, r5, pc}
   d79f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d79fc:	4140      	adcs	r0, r0
   d79fe:	eb41 0101 	adc.w	r1, r1, r1
   d7a02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a06:	f1a4 0401 	sub.w	r4, r4, #1
   d7a0a:	d1e9      	bne.n	d79e0 <__adddf3+0x10c>
   d7a0c:	f091 0f00 	teq	r1, #0
   d7a10:	bf04      	itt	eq
   d7a12:	4601      	moveq	r1, r0
   d7a14:	2000      	moveq	r0, #0
   d7a16:	fab1 f381 	clz	r3, r1
   d7a1a:	bf08      	it	eq
   d7a1c:	3320      	addeq	r3, #32
   d7a1e:	f1a3 030b 	sub.w	r3, r3, #11
   d7a22:	f1b3 0220 	subs.w	r2, r3, #32
   d7a26:	da0c      	bge.n	d7a42 <__adddf3+0x16e>
   d7a28:	320c      	adds	r2, #12
   d7a2a:	dd08      	ble.n	d7a3e <__adddf3+0x16a>
   d7a2c:	f102 0c14 	add.w	ip, r2, #20
   d7a30:	f1c2 020c 	rsb	r2, r2, #12
   d7a34:	fa01 f00c 	lsl.w	r0, r1, ip
   d7a38:	fa21 f102 	lsr.w	r1, r1, r2
   d7a3c:	e00c      	b.n	d7a58 <__adddf3+0x184>
   d7a3e:	f102 0214 	add.w	r2, r2, #20
   d7a42:	bfd8      	it	le
   d7a44:	f1c2 0c20 	rsble	ip, r2, #32
   d7a48:	fa01 f102 	lsl.w	r1, r1, r2
   d7a4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7a50:	bfdc      	itt	le
   d7a52:	ea41 010c 	orrle.w	r1, r1, ip
   d7a56:	4090      	lslle	r0, r2
   d7a58:	1ae4      	subs	r4, r4, r3
   d7a5a:	bfa2      	ittt	ge
   d7a5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7a60:	4329      	orrge	r1, r5
   d7a62:	bd30      	popge	{r4, r5, pc}
   d7a64:	ea6f 0404 	mvn.w	r4, r4
   d7a68:	3c1f      	subs	r4, #31
   d7a6a:	da1c      	bge.n	d7aa6 <__adddf3+0x1d2>
   d7a6c:	340c      	adds	r4, #12
   d7a6e:	dc0e      	bgt.n	d7a8e <__adddf3+0x1ba>
   d7a70:	f104 0414 	add.w	r4, r4, #20
   d7a74:	f1c4 0220 	rsb	r2, r4, #32
   d7a78:	fa20 f004 	lsr.w	r0, r0, r4
   d7a7c:	fa01 f302 	lsl.w	r3, r1, r2
   d7a80:	ea40 0003 	orr.w	r0, r0, r3
   d7a84:	fa21 f304 	lsr.w	r3, r1, r4
   d7a88:	ea45 0103 	orr.w	r1, r5, r3
   d7a8c:	bd30      	pop	{r4, r5, pc}
   d7a8e:	f1c4 040c 	rsb	r4, r4, #12
   d7a92:	f1c4 0220 	rsb	r2, r4, #32
   d7a96:	fa20 f002 	lsr.w	r0, r0, r2
   d7a9a:	fa01 f304 	lsl.w	r3, r1, r4
   d7a9e:	ea40 0003 	orr.w	r0, r0, r3
   d7aa2:	4629      	mov	r1, r5
   d7aa4:	bd30      	pop	{r4, r5, pc}
   d7aa6:	fa21 f004 	lsr.w	r0, r1, r4
   d7aaa:	4629      	mov	r1, r5
   d7aac:	bd30      	pop	{r4, r5, pc}
   d7aae:	f094 0f00 	teq	r4, #0
   d7ab2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7ab6:	bf06      	itte	eq
   d7ab8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7abc:	3401      	addeq	r4, #1
   d7abe:	3d01      	subne	r5, #1
   d7ac0:	e74e      	b.n	d7960 <__adddf3+0x8c>
   d7ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7ac6:	bf18      	it	ne
   d7ac8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7acc:	d029      	beq.n	d7b22 <__adddf3+0x24e>
   d7ace:	ea94 0f05 	teq	r4, r5
   d7ad2:	bf08      	it	eq
   d7ad4:	ea90 0f02 	teqeq	r0, r2
   d7ad8:	d005      	beq.n	d7ae6 <__adddf3+0x212>
   d7ada:	ea54 0c00 	orrs.w	ip, r4, r0
   d7ade:	bf04      	itt	eq
   d7ae0:	4619      	moveq	r1, r3
   d7ae2:	4610      	moveq	r0, r2
   d7ae4:	bd30      	pop	{r4, r5, pc}
   d7ae6:	ea91 0f03 	teq	r1, r3
   d7aea:	bf1e      	ittt	ne
   d7aec:	2100      	movne	r1, #0
   d7aee:	2000      	movne	r0, #0
   d7af0:	bd30      	popne	{r4, r5, pc}
   d7af2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7af6:	d105      	bne.n	d7b04 <__adddf3+0x230>
   d7af8:	0040      	lsls	r0, r0, #1
   d7afa:	4149      	adcs	r1, r1
   d7afc:	bf28      	it	cs
   d7afe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7b02:	bd30      	pop	{r4, r5, pc}
   d7b04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7b08:	bf3c      	itt	cc
   d7b0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7b0e:	bd30      	popcc	{r4, r5, pc}
   d7b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7b14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7b18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7b1c:	f04f 0000 	mov.w	r0, #0
   d7b20:	bd30      	pop	{r4, r5, pc}
   d7b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7b26:	bf1a      	itte	ne
   d7b28:	4619      	movne	r1, r3
   d7b2a:	4610      	movne	r0, r2
   d7b2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7b30:	bf1c      	itt	ne
   d7b32:	460b      	movne	r3, r1
   d7b34:	4602      	movne	r2, r0
   d7b36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7b3a:	bf06      	itte	eq
   d7b3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7b40:	ea91 0f03 	teqeq	r1, r3
   d7b44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7b48:	bd30      	pop	{r4, r5, pc}
   d7b4a:	bf00      	nop

000d7b4c <__aeabi_ui2d>:
   d7b4c:	f090 0f00 	teq	r0, #0
   d7b50:	bf04      	itt	eq
   d7b52:	2100      	moveq	r1, #0
   d7b54:	4770      	bxeq	lr
   d7b56:	b530      	push	{r4, r5, lr}
   d7b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7b60:	f04f 0500 	mov.w	r5, #0
   d7b64:	f04f 0100 	mov.w	r1, #0
   d7b68:	e750      	b.n	d7a0c <__adddf3+0x138>
   d7b6a:	bf00      	nop

000d7b6c <__aeabi_i2d>:
   d7b6c:	f090 0f00 	teq	r0, #0
   d7b70:	bf04      	itt	eq
   d7b72:	2100      	moveq	r1, #0
   d7b74:	4770      	bxeq	lr
   d7b76:	b530      	push	{r4, r5, lr}
   d7b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7b80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7b84:	bf48      	it	mi
   d7b86:	4240      	negmi	r0, r0
   d7b88:	f04f 0100 	mov.w	r1, #0
   d7b8c:	e73e      	b.n	d7a0c <__adddf3+0x138>
   d7b8e:	bf00      	nop

000d7b90 <__aeabi_f2d>:
   d7b90:	0042      	lsls	r2, r0, #1
   d7b92:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7b96:	ea4f 0131 	mov.w	r1, r1, rrx
   d7b9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7b9e:	bf1f      	itttt	ne
   d7ba0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7ba4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7ba8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7bac:	4770      	bxne	lr
   d7bae:	f092 0f00 	teq	r2, #0
   d7bb2:	bf14      	ite	ne
   d7bb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7bb8:	4770      	bxeq	lr
   d7bba:	b530      	push	{r4, r5, lr}
   d7bbc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7bc8:	e720      	b.n	d7a0c <__adddf3+0x138>
   d7bca:	bf00      	nop

000d7bcc <__aeabi_ul2d>:
   d7bcc:	ea50 0201 	orrs.w	r2, r0, r1
   d7bd0:	bf08      	it	eq
   d7bd2:	4770      	bxeq	lr
   d7bd4:	b530      	push	{r4, r5, lr}
   d7bd6:	f04f 0500 	mov.w	r5, #0
   d7bda:	e00a      	b.n	d7bf2 <__aeabi_l2d+0x16>

000d7bdc <__aeabi_l2d>:
   d7bdc:	ea50 0201 	orrs.w	r2, r0, r1
   d7be0:	bf08      	it	eq
   d7be2:	4770      	bxeq	lr
   d7be4:	b530      	push	{r4, r5, lr}
   d7be6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7bea:	d502      	bpl.n	d7bf2 <__aeabi_l2d+0x16>
   d7bec:	4240      	negs	r0, r0
   d7bee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7bf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7bf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7bfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7bfe:	f43f aedc 	beq.w	d79ba <__adddf3+0xe6>
   d7c02:	f04f 0203 	mov.w	r2, #3
   d7c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7c0a:	bf18      	it	ne
   d7c0c:	3203      	addne	r2, #3
   d7c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7c12:	bf18      	it	ne
   d7c14:	3203      	addne	r2, #3
   d7c16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7c1a:	f1c2 0320 	rsb	r3, r2, #32
   d7c1e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7c22:	fa20 f002 	lsr.w	r0, r0, r2
   d7c26:	fa01 fe03 	lsl.w	lr, r1, r3
   d7c2a:	ea40 000e 	orr.w	r0, r0, lr
   d7c2e:	fa21 f102 	lsr.w	r1, r1, r2
   d7c32:	4414      	add	r4, r2
   d7c34:	e6c1      	b.n	d79ba <__adddf3+0xe6>
   d7c36:	bf00      	nop

000d7c38 <__aeabi_dmul>:
   d7c38:	b570      	push	{r4, r5, r6, lr}
   d7c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7c46:	bf1d      	ittte	ne
   d7c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7c4c:	ea94 0f0c 	teqne	r4, ip
   d7c50:	ea95 0f0c 	teqne	r5, ip
   d7c54:	f000 f8de 	bleq	d7e14 <__aeabi_dmul+0x1dc>
   d7c58:	442c      	add	r4, r5
   d7c5a:	ea81 0603 	eor.w	r6, r1, r3
   d7c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7c6a:	bf18      	it	ne
   d7c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7c78:	d038      	beq.n	d7cec <__aeabi_dmul+0xb4>
   d7c7a:	fba0 ce02 	umull	ip, lr, r0, r2
   d7c7e:	f04f 0500 	mov.w	r5, #0
   d7c82:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7c8e:	f04f 0600 	mov.w	r6, #0
   d7c92:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7c96:	f09c 0f00 	teq	ip, #0
   d7c9a:	bf18      	it	ne
   d7c9c:	f04e 0e01 	orrne.w	lr, lr, #1
   d7ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7cac:	d204      	bcs.n	d7cb8 <__aeabi_dmul+0x80>
   d7cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7cb2:	416d      	adcs	r5, r5
   d7cb4:	eb46 0606 	adc.w	r6, r6, r6
   d7cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7cd0:	bf88      	it	hi
   d7cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7cd6:	d81e      	bhi.n	d7d16 <__aeabi_dmul+0xde>
   d7cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7cdc:	bf08      	it	eq
   d7cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7ce2:	f150 0000 	adcs.w	r0, r0, #0
   d7ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7cea:	bd70      	pop	{r4, r5, r6, pc}
   d7cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7cf0:	ea46 0101 	orr.w	r1, r6, r1
   d7cf4:	ea40 0002 	orr.w	r0, r0, r2
   d7cf8:	ea81 0103 	eor.w	r1, r1, r3
   d7cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7d00:	bfc2      	ittt	gt
   d7d02:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7d0a:	bd70      	popgt	{r4, r5, r6, pc}
   d7d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d10:	f04f 0e00 	mov.w	lr, #0
   d7d14:	3c01      	subs	r4, #1
   d7d16:	f300 80ab 	bgt.w	d7e70 <__aeabi_dmul+0x238>
   d7d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7d1e:	bfde      	ittt	le
   d7d20:	2000      	movle	r0, #0
   d7d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7d26:	bd70      	pople	{r4, r5, r6, pc}
   d7d28:	f1c4 0400 	rsb	r4, r4, #0
   d7d2c:	3c20      	subs	r4, #32
   d7d2e:	da35      	bge.n	d7d9c <__aeabi_dmul+0x164>
   d7d30:	340c      	adds	r4, #12
   d7d32:	dc1b      	bgt.n	d7d6c <__aeabi_dmul+0x134>
   d7d34:	f104 0414 	add.w	r4, r4, #20
   d7d38:	f1c4 0520 	rsb	r5, r4, #32
   d7d3c:	fa00 f305 	lsl.w	r3, r0, r5
   d7d40:	fa20 f004 	lsr.w	r0, r0, r4
   d7d44:	fa01 f205 	lsl.w	r2, r1, r5
   d7d48:	ea40 0002 	orr.w	r0, r0, r2
   d7d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7d58:	fa21 f604 	lsr.w	r6, r1, r4
   d7d5c:	eb42 0106 	adc.w	r1, r2, r6
   d7d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7d64:	bf08      	it	eq
   d7d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7d6a:	bd70      	pop	{r4, r5, r6, pc}
   d7d6c:	f1c4 040c 	rsb	r4, r4, #12
   d7d70:	f1c4 0520 	rsb	r5, r4, #32
   d7d74:	fa00 f304 	lsl.w	r3, r0, r4
   d7d78:	fa20 f005 	lsr.w	r0, r0, r5
   d7d7c:	fa01 f204 	lsl.w	r2, r1, r4
   d7d80:	ea40 0002 	orr.w	r0, r0, r2
   d7d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7d8c:	f141 0100 	adc.w	r1, r1, #0
   d7d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7d94:	bf08      	it	eq
   d7d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7d9a:	bd70      	pop	{r4, r5, r6, pc}
   d7d9c:	f1c4 0520 	rsb	r5, r4, #32
   d7da0:	fa00 f205 	lsl.w	r2, r0, r5
   d7da4:	ea4e 0e02 	orr.w	lr, lr, r2
   d7da8:	fa20 f304 	lsr.w	r3, r0, r4
   d7dac:	fa01 f205 	lsl.w	r2, r1, r5
   d7db0:	ea43 0302 	orr.w	r3, r3, r2
   d7db4:	fa21 f004 	lsr.w	r0, r1, r4
   d7db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7dbc:	fa21 f204 	lsr.w	r2, r1, r4
   d7dc0:	ea20 0002 	bic.w	r0, r0, r2
   d7dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7dcc:	bf08      	it	eq
   d7dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7dd2:	bd70      	pop	{r4, r5, r6, pc}
   d7dd4:	f094 0f00 	teq	r4, #0
   d7dd8:	d10f      	bne.n	d7dfa <__aeabi_dmul+0x1c2>
   d7dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7dde:	0040      	lsls	r0, r0, #1
   d7de0:	eb41 0101 	adc.w	r1, r1, r1
   d7de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7de8:	bf08      	it	eq
   d7dea:	3c01      	subeq	r4, #1
   d7dec:	d0f7      	beq.n	d7dde <__aeabi_dmul+0x1a6>
   d7dee:	ea41 0106 	orr.w	r1, r1, r6
   d7df2:	f095 0f00 	teq	r5, #0
   d7df6:	bf18      	it	ne
   d7df8:	4770      	bxne	lr
   d7dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7dfe:	0052      	lsls	r2, r2, #1
   d7e00:	eb43 0303 	adc.w	r3, r3, r3
   d7e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7e08:	bf08      	it	eq
   d7e0a:	3d01      	subeq	r5, #1
   d7e0c:	d0f7      	beq.n	d7dfe <__aeabi_dmul+0x1c6>
   d7e0e:	ea43 0306 	orr.w	r3, r3, r6
   d7e12:	4770      	bx	lr
   d7e14:	ea94 0f0c 	teq	r4, ip
   d7e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7e1c:	bf18      	it	ne
   d7e1e:	ea95 0f0c 	teqne	r5, ip
   d7e22:	d00c      	beq.n	d7e3e <__aeabi_dmul+0x206>
   d7e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7e28:	bf18      	it	ne
   d7e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7e2e:	d1d1      	bne.n	d7dd4 <__aeabi_dmul+0x19c>
   d7e30:	ea81 0103 	eor.w	r1, r1, r3
   d7e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e38:	f04f 0000 	mov.w	r0, #0
   d7e3c:	bd70      	pop	{r4, r5, r6, pc}
   d7e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7e42:	bf06      	itte	eq
   d7e44:	4610      	moveq	r0, r2
   d7e46:	4619      	moveq	r1, r3
   d7e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7e4c:	d019      	beq.n	d7e82 <__aeabi_dmul+0x24a>
   d7e4e:	ea94 0f0c 	teq	r4, ip
   d7e52:	d102      	bne.n	d7e5a <__aeabi_dmul+0x222>
   d7e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7e58:	d113      	bne.n	d7e82 <__aeabi_dmul+0x24a>
   d7e5a:	ea95 0f0c 	teq	r5, ip
   d7e5e:	d105      	bne.n	d7e6c <__aeabi_dmul+0x234>
   d7e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7e64:	bf1c      	itt	ne
   d7e66:	4610      	movne	r0, r2
   d7e68:	4619      	movne	r1, r3
   d7e6a:	d10a      	bne.n	d7e82 <__aeabi_dmul+0x24a>
   d7e6c:	ea81 0103 	eor.w	r1, r1, r3
   d7e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7e7c:	f04f 0000 	mov.w	r0, #0
   d7e80:	bd70      	pop	{r4, r5, r6, pc}
   d7e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7e8a:	bd70      	pop	{r4, r5, r6, pc}

000d7e8c <__aeabi_ddiv>:
   d7e8c:	b570      	push	{r4, r5, r6, lr}
   d7e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7e9a:	bf1d      	ittte	ne
   d7e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7ea0:	ea94 0f0c 	teqne	r4, ip
   d7ea4:	ea95 0f0c 	teqne	r5, ip
   d7ea8:	f000 f8a7 	bleq	d7ffa <__aeabi_ddiv+0x16e>
   d7eac:	eba4 0405 	sub.w	r4, r4, r5
   d7eb0:	ea81 0e03 	eor.w	lr, r1, r3
   d7eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7ebc:	f000 8088 	beq.w	d7fd0 <__aeabi_ddiv+0x144>
   d7ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7ee4:	429d      	cmp	r5, r3
   d7ee6:	bf08      	it	eq
   d7ee8:	4296      	cmpeq	r6, r2
   d7eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7ef2:	d202      	bcs.n	d7efa <__aeabi_ddiv+0x6e>
   d7ef4:	085b      	lsrs	r3, r3, #1
   d7ef6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7efa:	1ab6      	subs	r6, r6, r2
   d7efc:	eb65 0503 	sbc.w	r5, r5, r3
   d7f00:	085b      	lsrs	r3, r3, #1
   d7f02:	ea4f 0232 	mov.w	r2, r2, rrx
   d7f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7f0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7f12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7f16:	bf22      	ittt	cs
   d7f18:	1ab6      	subcs	r6, r6, r2
   d7f1a:	4675      	movcs	r5, lr
   d7f1c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7f20:	085b      	lsrs	r3, r3, #1
   d7f22:	ea4f 0232 	mov.w	r2, r2, rrx
   d7f26:	ebb6 0e02 	subs.w	lr, r6, r2
   d7f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7f2e:	bf22      	ittt	cs
   d7f30:	1ab6      	subcs	r6, r6, r2
   d7f32:	4675      	movcs	r5, lr
   d7f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7f38:	085b      	lsrs	r3, r3, #1
   d7f3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7f3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7f42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7f46:	bf22      	ittt	cs
   d7f48:	1ab6      	subcs	r6, r6, r2
   d7f4a:	4675      	movcs	r5, lr
   d7f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7f50:	085b      	lsrs	r3, r3, #1
   d7f52:	ea4f 0232 	mov.w	r2, r2, rrx
   d7f56:	ebb6 0e02 	subs.w	lr, r6, r2
   d7f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7f5e:	bf22      	ittt	cs
   d7f60:	1ab6      	subcs	r6, r6, r2
   d7f62:	4675      	movcs	r5, lr
   d7f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7f68:	ea55 0e06 	orrs.w	lr, r5, r6
   d7f6c:	d018      	beq.n	d7fa0 <__aeabi_ddiv+0x114>
   d7f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7f8a:	d1c0      	bne.n	d7f0e <__aeabi_ddiv+0x82>
   d7f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7f90:	d10b      	bne.n	d7faa <__aeabi_ddiv+0x11e>
   d7f92:	ea41 0100 	orr.w	r1, r1, r0
   d7f96:	f04f 0000 	mov.w	r0, #0
   d7f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7f9e:	e7b6      	b.n	d7f0e <__aeabi_ddiv+0x82>
   d7fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7fa4:	bf04      	itt	eq
   d7fa6:	4301      	orreq	r1, r0
   d7fa8:	2000      	moveq	r0, #0
   d7faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7fae:	bf88      	it	hi
   d7fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7fb4:	f63f aeaf 	bhi.w	d7d16 <__aeabi_dmul+0xde>
   d7fb8:	ebb5 0c03 	subs.w	ip, r5, r3
   d7fbc:	bf04      	itt	eq
   d7fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7fc6:	f150 0000 	adcs.w	r0, r0, #0
   d7fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7fce:	bd70      	pop	{r4, r5, r6, pc}
   d7fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7fdc:	bfc2      	ittt	gt
   d7fde:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7fe6:	bd70      	popgt	{r4, r5, r6, pc}
   d7fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7fec:	f04f 0e00 	mov.w	lr, #0
   d7ff0:	3c01      	subs	r4, #1
   d7ff2:	e690      	b.n	d7d16 <__aeabi_dmul+0xde>
   d7ff4:	ea45 0e06 	orr.w	lr, r5, r6
   d7ff8:	e68d      	b.n	d7d16 <__aeabi_dmul+0xde>
   d7ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ffe:	ea94 0f0c 	teq	r4, ip
   d8002:	bf08      	it	eq
   d8004:	ea95 0f0c 	teqeq	r5, ip
   d8008:	f43f af3b 	beq.w	d7e82 <__aeabi_dmul+0x24a>
   d800c:	ea94 0f0c 	teq	r4, ip
   d8010:	d10a      	bne.n	d8028 <__aeabi_ddiv+0x19c>
   d8012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8016:	f47f af34 	bne.w	d7e82 <__aeabi_dmul+0x24a>
   d801a:	ea95 0f0c 	teq	r5, ip
   d801e:	f47f af25 	bne.w	d7e6c <__aeabi_dmul+0x234>
   d8022:	4610      	mov	r0, r2
   d8024:	4619      	mov	r1, r3
   d8026:	e72c      	b.n	d7e82 <__aeabi_dmul+0x24a>
   d8028:	ea95 0f0c 	teq	r5, ip
   d802c:	d106      	bne.n	d803c <__aeabi_ddiv+0x1b0>
   d802e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8032:	f43f aefd 	beq.w	d7e30 <__aeabi_dmul+0x1f8>
   d8036:	4610      	mov	r0, r2
   d8038:	4619      	mov	r1, r3
   d803a:	e722      	b.n	d7e82 <__aeabi_dmul+0x24a>
   d803c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8040:	bf18      	it	ne
   d8042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8046:	f47f aec5 	bne.w	d7dd4 <__aeabi_dmul+0x19c>
   d804a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d804e:	f47f af0d 	bne.w	d7e6c <__aeabi_dmul+0x234>
   d8052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8056:	f47f aeeb 	bne.w	d7e30 <__aeabi_dmul+0x1f8>
   d805a:	e712      	b.n	d7e82 <__aeabi_dmul+0x24a>

000d805c <__gedf2>:
   d805c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8060:	e006      	b.n	d8070 <__cmpdf2+0x4>
   d8062:	bf00      	nop

000d8064 <__ledf2>:
   d8064:	f04f 0c01 	mov.w	ip, #1
   d8068:	e002      	b.n	d8070 <__cmpdf2+0x4>
   d806a:	bf00      	nop

000d806c <__cmpdf2>:
   d806c:	f04f 0c01 	mov.w	ip, #1
   d8070:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d807c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8080:	bf18      	it	ne
   d8082:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8086:	d01b      	beq.n	d80c0 <__cmpdf2+0x54>
   d8088:	b001      	add	sp, #4
   d808a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d808e:	bf0c      	ite	eq
   d8090:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8094:	ea91 0f03 	teqne	r1, r3
   d8098:	bf02      	ittt	eq
   d809a:	ea90 0f02 	teqeq	r0, r2
   d809e:	2000      	moveq	r0, #0
   d80a0:	4770      	bxeq	lr
   d80a2:	f110 0f00 	cmn.w	r0, #0
   d80a6:	ea91 0f03 	teq	r1, r3
   d80aa:	bf58      	it	pl
   d80ac:	4299      	cmppl	r1, r3
   d80ae:	bf08      	it	eq
   d80b0:	4290      	cmpeq	r0, r2
   d80b2:	bf2c      	ite	cs
   d80b4:	17d8      	asrcs	r0, r3, #31
   d80b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d80ba:	f040 0001 	orr.w	r0, r0, #1
   d80be:	4770      	bx	lr
   d80c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d80c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d80c8:	d102      	bne.n	d80d0 <__cmpdf2+0x64>
   d80ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d80ce:	d107      	bne.n	d80e0 <__cmpdf2+0x74>
   d80d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d80d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d80d8:	d1d6      	bne.n	d8088 <__cmpdf2+0x1c>
   d80da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d80de:	d0d3      	beq.n	d8088 <__cmpdf2+0x1c>
   d80e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d80e4:	4770      	bx	lr
   d80e6:	bf00      	nop

000d80e8 <__aeabi_cdrcmple>:
   d80e8:	4684      	mov	ip, r0
   d80ea:	4610      	mov	r0, r2
   d80ec:	4662      	mov	r2, ip
   d80ee:	468c      	mov	ip, r1
   d80f0:	4619      	mov	r1, r3
   d80f2:	4663      	mov	r3, ip
   d80f4:	e000      	b.n	d80f8 <__aeabi_cdcmpeq>
   d80f6:	bf00      	nop

000d80f8 <__aeabi_cdcmpeq>:
   d80f8:	b501      	push	{r0, lr}
   d80fa:	f7ff ffb7 	bl	d806c <__cmpdf2>
   d80fe:	2800      	cmp	r0, #0
   d8100:	bf48      	it	mi
   d8102:	f110 0f00 	cmnmi.w	r0, #0
   d8106:	bd01      	pop	{r0, pc}

000d8108 <__aeabi_dcmpeq>:
   d8108:	f84d ed08 	str.w	lr, [sp, #-8]!
   d810c:	f7ff fff4 	bl	d80f8 <__aeabi_cdcmpeq>
   d8110:	bf0c      	ite	eq
   d8112:	2001      	moveq	r0, #1
   d8114:	2000      	movne	r0, #0
   d8116:	f85d fb08 	ldr.w	pc, [sp], #8
   d811a:	bf00      	nop

000d811c <__aeabi_dcmplt>:
   d811c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8120:	f7ff ffea 	bl	d80f8 <__aeabi_cdcmpeq>
   d8124:	bf34      	ite	cc
   d8126:	2001      	movcc	r0, #1
   d8128:	2000      	movcs	r0, #0
   d812a:	f85d fb08 	ldr.w	pc, [sp], #8
   d812e:	bf00      	nop

000d8130 <__aeabi_dcmple>:
   d8130:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8134:	f7ff ffe0 	bl	d80f8 <__aeabi_cdcmpeq>
   d8138:	bf94      	ite	ls
   d813a:	2001      	movls	r0, #1
   d813c:	2000      	movhi	r0, #0
   d813e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8142:	bf00      	nop

000d8144 <__aeabi_dcmpge>:
   d8144:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8148:	f7ff ffce 	bl	d80e8 <__aeabi_cdrcmple>
   d814c:	bf94      	ite	ls
   d814e:	2001      	movls	r0, #1
   d8150:	2000      	movhi	r0, #0
   d8152:	f85d fb08 	ldr.w	pc, [sp], #8
   d8156:	bf00      	nop

000d8158 <__aeabi_dcmpgt>:
   d8158:	f84d ed08 	str.w	lr, [sp, #-8]!
   d815c:	f7ff ffc4 	bl	d80e8 <__aeabi_cdrcmple>
   d8160:	bf34      	ite	cc
   d8162:	2001      	movcc	r0, #1
   d8164:	2000      	movcs	r0, #0
   d8166:	f85d fb08 	ldr.w	pc, [sp], #8
   d816a:	bf00      	nop

000d816c <__aeabi_dcmpun>:
   d816c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8170:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8174:	d102      	bne.n	d817c <__aeabi_dcmpun+0x10>
   d8176:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d817a:	d10a      	bne.n	d8192 <__aeabi_dcmpun+0x26>
   d817c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8184:	d102      	bne.n	d818c <__aeabi_dcmpun+0x20>
   d8186:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d818a:	d102      	bne.n	d8192 <__aeabi_dcmpun+0x26>
   d818c:	f04f 0000 	mov.w	r0, #0
   d8190:	4770      	bx	lr
   d8192:	f04f 0001 	mov.w	r0, #1
   d8196:	4770      	bx	lr

000d8198 <__aeabi_d2iz>:
   d8198:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d819c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d81a0:	d215      	bcs.n	d81ce <__aeabi_d2iz+0x36>
   d81a2:	d511      	bpl.n	d81c8 <__aeabi_d2iz+0x30>
   d81a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d81a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d81ac:	d912      	bls.n	d81d4 <__aeabi_d2iz+0x3c>
   d81ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d81b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d81b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d81ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d81be:	fa23 f002 	lsr.w	r0, r3, r2
   d81c2:	bf18      	it	ne
   d81c4:	4240      	negne	r0, r0
   d81c6:	4770      	bx	lr
   d81c8:	f04f 0000 	mov.w	r0, #0
   d81cc:	4770      	bx	lr
   d81ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d81d2:	d105      	bne.n	d81e0 <__aeabi_d2iz+0x48>
   d81d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d81d8:	bf08      	it	eq
   d81da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d81de:	4770      	bx	lr
   d81e0:	f04f 0000 	mov.w	r0, #0
   d81e4:	4770      	bx	lr
   d81e6:	bf00      	nop

000d81e8 <__aeabi_d2uiz>:
   d81e8:	004a      	lsls	r2, r1, #1
   d81ea:	d211      	bcs.n	d8210 <__aeabi_d2uiz+0x28>
   d81ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d81f0:	d211      	bcs.n	d8216 <__aeabi_d2uiz+0x2e>
   d81f2:	d50d      	bpl.n	d8210 <__aeabi_d2uiz+0x28>
   d81f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d81f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d81fc:	d40e      	bmi.n	d821c <__aeabi_d2uiz+0x34>
   d81fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8206:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d820a:	fa23 f002 	lsr.w	r0, r3, r2
   d820e:	4770      	bx	lr
   d8210:	f04f 0000 	mov.w	r0, #0
   d8214:	4770      	bx	lr
   d8216:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d821a:	d102      	bne.n	d8222 <__aeabi_d2uiz+0x3a>
   d821c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8220:	4770      	bx	lr
   d8222:	f04f 0000 	mov.w	r0, #0
   d8226:	4770      	bx	lr

000d8228 <__aeabi_d2f>:
   d8228:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d822c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8230:	bf24      	itt	cs
   d8232:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8236:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d823a:	d90d      	bls.n	d8258 <__aeabi_d2f+0x30>
   d823c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8240:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8244:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8248:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d824c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8250:	bf08      	it	eq
   d8252:	f020 0001 	biceq.w	r0, r0, #1
   d8256:	4770      	bx	lr
   d8258:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d825c:	d121      	bne.n	d82a2 <__aeabi_d2f+0x7a>
   d825e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8262:	bfbc      	itt	lt
   d8264:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8268:	4770      	bxlt	lr
   d826a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d826e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8272:	f1c2 0218 	rsb	r2, r2, #24
   d8276:	f1c2 0c20 	rsb	ip, r2, #32
   d827a:	fa10 f30c 	lsls.w	r3, r0, ip
   d827e:	fa20 f002 	lsr.w	r0, r0, r2
   d8282:	bf18      	it	ne
   d8284:	f040 0001 	orrne.w	r0, r0, #1
   d8288:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d828c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8290:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8294:	ea40 000c 	orr.w	r0, r0, ip
   d8298:	fa23 f302 	lsr.w	r3, r3, r2
   d829c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d82a0:	e7cc      	b.n	d823c <__aeabi_d2f+0x14>
   d82a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d82a6:	d107      	bne.n	d82b8 <__aeabi_d2f+0x90>
   d82a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d82ac:	bf1e      	ittt	ne
   d82ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d82b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d82b6:	4770      	bxne	lr
   d82b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d82bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d82c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d82c4:	4770      	bx	lr
   d82c6:	bf00      	nop

000d82c8 <atoi>:
   d82c8:	220a      	movs	r2, #10
   d82ca:	2100      	movs	r1, #0
   d82cc:	f001 b866 	b.w	d939c <strtol>

000d82d0 <__cxa_atexit>:
   d82d0:	b510      	push	{r4, lr}
   d82d2:	4c05      	ldr	r4, [pc, #20]	; (d82e8 <__cxa_atexit+0x18>)
   d82d4:	4613      	mov	r3, r2
   d82d6:	b12c      	cbz	r4, d82e4 <__cxa_atexit+0x14>
   d82d8:	460a      	mov	r2, r1
   d82da:	4601      	mov	r1, r0
   d82dc:	2002      	movs	r0, #2
   d82de:	f3af 8000 	nop.w
   d82e2:	bd10      	pop	{r4, pc}
   d82e4:	4620      	mov	r0, r4
   d82e6:	bd10      	pop	{r4, pc}
   d82e8:	00000000 	.word	0x00000000

000d82ec <localtime>:
   d82ec:	b538      	push	{r3, r4, r5, lr}
   d82ee:	4b07      	ldr	r3, [pc, #28]	; (d830c <localtime+0x20>)
   d82f0:	681c      	ldr	r4, [r3, #0]
   d82f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d82f4:	4605      	mov	r5, r0
   d82f6:	b91b      	cbnz	r3, d8300 <localtime+0x14>
   d82f8:	2024      	movs	r0, #36	; 0x24
   d82fa:	f7fd fb69 	bl	d59d0 <malloc>
   d82fe:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8300:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8302:	4628      	mov	r0, r5
   d8304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8308:	f000 b802 	b.w	d8310 <localtime_r>
   d830c:	2003e178 	.word	0x2003e178

000d8310 <localtime_r>:
   d8310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8314:	460c      	mov	r4, r1
   d8316:	4680      	mov	r8, r0
   d8318:	f001 fe64 	bl	d9fe4 <__gettzinfo>
   d831c:	4621      	mov	r1, r4
   d831e:	4607      	mov	r7, r0
   d8320:	4640      	mov	r0, r8
   d8322:	f001 fe63 	bl	d9fec <gmtime_r>
   d8326:	6946      	ldr	r6, [r0, #20]
   d8328:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d832c:	07b3      	lsls	r3, r6, #30
   d832e:	4604      	mov	r4, r0
   d8330:	d105      	bne.n	d833e <localtime_r+0x2e>
   d8332:	2264      	movs	r2, #100	; 0x64
   d8334:	fb96 f3f2 	sdiv	r3, r6, r2
   d8338:	fb02 6313 	mls	r3, r2, r3, r6
   d833c:	b94b      	cbnz	r3, d8352 <localtime_r+0x42>
   d833e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d8342:	fb96 f3f5 	sdiv	r3, r6, r5
   d8346:	fb05 6513 	mls	r5, r5, r3, r6
   d834a:	fab5 f385 	clz	r3, r5
   d834e:	095b      	lsrs	r3, r3, #5
   d8350:	e000      	b.n	d8354 <localtime_r+0x44>
   d8352:	2301      	movs	r3, #1
   d8354:	4a5f      	ldr	r2, [pc, #380]	; (d84d4 <localtime_r+0x1c4>)
   d8356:	2530      	movs	r5, #48	; 0x30
   d8358:	fb05 2503 	mla	r5, r5, r3, r2
   d835c:	f001 f958 	bl	d9610 <__tz_lock>
   d8360:	f001 f958 	bl	d9614 <_tzset_unlocked>
   d8364:	4b5c      	ldr	r3, [pc, #368]	; (d84d8 <localtime_r+0x1c8>)
   d8366:	681b      	ldr	r3, [r3, #0]
   d8368:	b1f3      	cbz	r3, d83a8 <localtime_r+0x98>
   d836a:	687b      	ldr	r3, [r7, #4]
   d836c:	429e      	cmp	r6, r3
   d836e:	d105      	bne.n	d837c <localtime_r+0x6c>
   d8370:	6839      	ldr	r1, [r7, #0]
   d8372:	f8d8 3000 	ldr.w	r3, [r8]
   d8376:	69fa      	ldr	r2, [r7, #28]
   d8378:	b941      	cbnz	r1, d838c <localtime_r+0x7c>
   d837a:	e00a      	b.n	d8392 <localtime_r+0x82>
   d837c:	4630      	mov	r0, r6
   d837e:	f001 f89f 	bl	d94c0 <__tzcalc_limits>
   d8382:	2800      	cmp	r0, #0
   d8384:	d1f4      	bne.n	d8370 <localtime_r+0x60>
   d8386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d838a:	e00d      	b.n	d83a8 <localtime_r+0x98>
   d838c:	4293      	cmp	r3, r2
   d838e:	db08      	blt.n	d83a2 <localtime_r+0x92>
   d8390:	e001      	b.n	d8396 <localtime_r+0x86>
   d8392:	4293      	cmp	r3, r2
   d8394:	da07      	bge.n	d83a6 <localtime_r+0x96>
   d8396:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8398:	4293      	cmp	r3, r2
   d839a:	bfac      	ite	ge
   d839c:	2300      	movge	r3, #0
   d839e:	2301      	movlt	r3, #1
   d83a0:	e002      	b.n	d83a8 <localtime_r+0x98>
   d83a2:	2300      	movs	r3, #0
   d83a4:	e000      	b.n	d83a8 <localtime_r+0x98>
   d83a6:	2301      	movs	r3, #1
   d83a8:	6223      	str	r3, [r4, #32]
   d83aa:	6a23      	ldr	r3, [r4, #32]
   d83ac:	2b01      	cmp	r3, #1
   d83ae:	bf0c      	ite	eq
   d83b0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d83b2:	6a39      	ldrne	r1, [r7, #32]
   d83b4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d83b8:	203c      	movs	r0, #60	; 0x3c
   d83ba:	fb91 f6f3 	sdiv	r6, r1, r3
   d83be:	fb03 1316 	mls	r3, r3, r6, r1
   d83c2:	6861      	ldr	r1, [r4, #4]
   d83c4:	fb93 f2f0 	sdiv	r2, r3, r0
   d83c8:	fb00 3012 	mls	r0, r0, r2, r3
   d83cc:	6823      	ldr	r3, [r4, #0]
   d83ce:	1a89      	subs	r1, r1, r2
   d83d0:	68a2      	ldr	r2, [r4, #8]
   d83d2:	6061      	str	r1, [r4, #4]
   d83d4:	1a1b      	subs	r3, r3, r0
   d83d6:	1b92      	subs	r2, r2, r6
   d83d8:	2b3b      	cmp	r3, #59	; 0x3b
   d83da:	6023      	str	r3, [r4, #0]
   d83dc:	60a2      	str	r2, [r4, #8]
   d83de:	dd03      	ble.n	d83e8 <localtime_r+0xd8>
   d83e0:	3101      	adds	r1, #1
   d83e2:	6061      	str	r1, [r4, #4]
   d83e4:	3b3c      	subs	r3, #60	; 0x3c
   d83e6:	e004      	b.n	d83f2 <localtime_r+0xe2>
   d83e8:	2b00      	cmp	r3, #0
   d83ea:	da03      	bge.n	d83f4 <localtime_r+0xe4>
   d83ec:	3901      	subs	r1, #1
   d83ee:	6061      	str	r1, [r4, #4]
   d83f0:	333c      	adds	r3, #60	; 0x3c
   d83f2:	6023      	str	r3, [r4, #0]
   d83f4:	6863      	ldr	r3, [r4, #4]
   d83f6:	2b3b      	cmp	r3, #59	; 0x3b
   d83f8:	dd03      	ble.n	d8402 <localtime_r+0xf2>
   d83fa:	3201      	adds	r2, #1
   d83fc:	60a2      	str	r2, [r4, #8]
   d83fe:	3b3c      	subs	r3, #60	; 0x3c
   d8400:	e004      	b.n	d840c <localtime_r+0xfc>
   d8402:	2b00      	cmp	r3, #0
   d8404:	da03      	bge.n	d840e <localtime_r+0xfe>
   d8406:	3a01      	subs	r2, #1
   d8408:	60a2      	str	r2, [r4, #8]
   d840a:	333c      	adds	r3, #60	; 0x3c
   d840c:	6063      	str	r3, [r4, #4]
   d840e:	68a3      	ldr	r3, [r4, #8]
   d8410:	2b17      	cmp	r3, #23
   d8412:	dd22      	ble.n	d845a <localtime_r+0x14a>
   d8414:	69e2      	ldr	r2, [r4, #28]
   d8416:	3201      	adds	r2, #1
   d8418:	61e2      	str	r2, [r4, #28]
   d841a:	69a2      	ldr	r2, [r4, #24]
   d841c:	3201      	adds	r2, #1
   d841e:	2a06      	cmp	r2, #6
   d8420:	bfc8      	it	gt
   d8422:	2200      	movgt	r2, #0
   d8424:	61a2      	str	r2, [r4, #24]
   d8426:	68e2      	ldr	r2, [r4, #12]
   d8428:	3b18      	subs	r3, #24
   d842a:	3201      	adds	r2, #1
   d842c:	60a3      	str	r3, [r4, #8]
   d842e:	6923      	ldr	r3, [r4, #16]
   d8430:	60e2      	str	r2, [r4, #12]
   d8432:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8436:	428a      	cmp	r2, r1
   d8438:	dd46      	ble.n	d84c8 <localtime_r+0x1b8>
   d843a:	3301      	adds	r3, #1
   d843c:	2b0c      	cmp	r3, #12
   d843e:	bf0c      	ite	eq
   d8440:	6963      	ldreq	r3, [r4, #20]
   d8442:	6123      	strne	r3, [r4, #16]
   d8444:	eba2 0201 	sub.w	r2, r2, r1
   d8448:	60e2      	str	r2, [r4, #12]
   d844a:	bf01      	itttt	eq
   d844c:	3301      	addeq	r3, #1
   d844e:	2200      	moveq	r2, #0
   d8450:	6122      	streq	r2, [r4, #16]
   d8452:	6163      	streq	r3, [r4, #20]
   d8454:	bf08      	it	eq
   d8456:	61e2      	streq	r2, [r4, #28]
   d8458:	e036      	b.n	d84c8 <localtime_r+0x1b8>
   d845a:	2b00      	cmp	r3, #0
   d845c:	da34      	bge.n	d84c8 <localtime_r+0x1b8>
   d845e:	69e2      	ldr	r2, [r4, #28]
   d8460:	3a01      	subs	r2, #1
   d8462:	61e2      	str	r2, [r4, #28]
   d8464:	69a2      	ldr	r2, [r4, #24]
   d8466:	3a01      	subs	r2, #1
   d8468:	bf48      	it	mi
   d846a:	2206      	movmi	r2, #6
   d846c:	61a2      	str	r2, [r4, #24]
   d846e:	68e2      	ldr	r2, [r4, #12]
   d8470:	3318      	adds	r3, #24
   d8472:	3a01      	subs	r2, #1
   d8474:	60e2      	str	r2, [r4, #12]
   d8476:	60a3      	str	r3, [r4, #8]
   d8478:	bb32      	cbnz	r2, d84c8 <localtime_r+0x1b8>
   d847a:	6923      	ldr	r3, [r4, #16]
   d847c:	3b01      	subs	r3, #1
   d847e:	d401      	bmi.n	d8484 <localtime_r+0x174>
   d8480:	6123      	str	r3, [r4, #16]
   d8482:	e01d      	b.n	d84c0 <localtime_r+0x1b0>
   d8484:	230b      	movs	r3, #11
   d8486:	6123      	str	r3, [r4, #16]
   d8488:	6963      	ldr	r3, [r4, #20]
   d848a:	1e5a      	subs	r2, r3, #1
   d848c:	f012 0f03 	tst.w	r2, #3
   d8490:	6162      	str	r2, [r4, #20]
   d8492:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8496:	d105      	bne.n	d84a4 <localtime_r+0x194>
   d8498:	2164      	movs	r1, #100	; 0x64
   d849a:	fb93 f2f1 	sdiv	r2, r3, r1
   d849e:	fb01 3212 	mls	r2, r1, r2, r3
   d84a2:	b94a      	cbnz	r2, d84b8 <localtime_r+0x1a8>
   d84a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d84a8:	fb93 f2f1 	sdiv	r2, r3, r1
   d84ac:	fb01 3312 	mls	r3, r1, r2, r3
   d84b0:	fab3 f383 	clz	r3, r3
   d84b4:	095b      	lsrs	r3, r3, #5
   d84b6:	e000      	b.n	d84ba <localtime_r+0x1aa>
   d84b8:	2301      	movs	r3, #1
   d84ba:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d84be:	61e3      	str	r3, [r4, #28]
   d84c0:	6923      	ldr	r3, [r4, #16]
   d84c2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d84c6:	60e3      	str	r3, [r4, #12]
   d84c8:	f001 f8a3 	bl	d9612 <__tz_unlock>
   d84cc:	4620      	mov	r0, r4
   d84ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84d2:	bf00      	nop
   d84d4:	000db1b4 	.word	0x000db1b4
   d84d8:	2003e7e4 	.word	0x2003e7e4

000d84dc <_localeconv_r>:
   d84dc:	4800      	ldr	r0, [pc, #0]	; (d84e0 <_localeconv_r+0x4>)
   d84de:	4770      	bx	lr
   d84e0:	2003e17c 	.word	0x2003e17c

000d84e4 <memcpy>:
   d84e4:	b510      	push	{r4, lr}
   d84e6:	1e43      	subs	r3, r0, #1
   d84e8:	440a      	add	r2, r1
   d84ea:	4291      	cmp	r1, r2
   d84ec:	d004      	beq.n	d84f8 <memcpy+0x14>
   d84ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d84f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d84f6:	e7f8      	b.n	d84ea <memcpy+0x6>
   d84f8:	bd10      	pop	{r4, pc}

000d84fa <memset>:
   d84fa:	4402      	add	r2, r0
   d84fc:	4603      	mov	r3, r0
   d84fe:	4293      	cmp	r3, r2
   d8500:	d002      	beq.n	d8508 <memset+0xe>
   d8502:	f803 1b01 	strb.w	r1, [r3], #1
   d8506:	e7fa      	b.n	d84fe <memset+0x4>
   d8508:	4770      	bx	lr
	...

000d850c <srand>:
   d850c:	b538      	push	{r3, r4, r5, lr}
   d850e:	4b12      	ldr	r3, [pc, #72]	; (d8558 <srand+0x4c>)
   d8510:	681c      	ldr	r4, [r3, #0]
   d8512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8514:	4605      	mov	r5, r0
   d8516:	b9d3      	cbnz	r3, d854e <srand+0x42>
   d8518:	2018      	movs	r0, #24
   d851a:	f7fd fa59 	bl	d59d0 <malloc>
   d851e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8522:	63a0      	str	r0, [r4, #56]	; 0x38
   d8524:	8003      	strh	r3, [r0, #0]
   d8526:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d852a:	8043      	strh	r3, [r0, #2]
   d852c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8530:	8083      	strh	r3, [r0, #4]
   d8532:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8536:	80c3      	strh	r3, [r0, #6]
   d8538:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d853c:	8103      	strh	r3, [r0, #8]
   d853e:	2305      	movs	r3, #5
   d8540:	8143      	strh	r3, [r0, #10]
   d8542:	230b      	movs	r3, #11
   d8544:	8183      	strh	r3, [r0, #12]
   d8546:	2201      	movs	r2, #1
   d8548:	2300      	movs	r3, #0
   d854a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d854e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8550:	2200      	movs	r2, #0
   d8552:	611d      	str	r5, [r3, #16]
   d8554:	615a      	str	r2, [r3, #20]
   d8556:	bd38      	pop	{r3, r4, r5, pc}
   d8558:	2003e178 	.word	0x2003e178

000d855c <strcmp>:
   d855c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8560:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8564:	2a01      	cmp	r2, #1
   d8566:	bf28      	it	cs
   d8568:	429a      	cmpcs	r2, r3
   d856a:	d0f7      	beq.n	d855c <strcmp>
   d856c:	1ad0      	subs	r0, r2, r3
   d856e:	4770      	bx	lr

000d8570 <strcpy>:
   d8570:	4603      	mov	r3, r0
   d8572:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8576:	f803 2b01 	strb.w	r2, [r3], #1
   d857a:	2a00      	cmp	r2, #0
   d857c:	d1f9      	bne.n	d8572 <strcpy+0x2>
   d857e:	4770      	bx	lr

000d8580 <strdup>:
   d8580:	4b02      	ldr	r3, [pc, #8]	; (d858c <strdup+0xc>)
   d8582:	4601      	mov	r1, r0
   d8584:	6818      	ldr	r0, [r3, #0]
   d8586:	f000 b803 	b.w	d8590 <_strdup_r>
   d858a:	bf00      	nop
   d858c:	2003e178 	.word	0x2003e178

000d8590 <_strdup_r>:
   d8590:	b570      	push	{r4, r5, r6, lr}
   d8592:	4606      	mov	r6, r0
   d8594:	4608      	mov	r0, r1
   d8596:	460c      	mov	r4, r1
   d8598:	f000 f80d 	bl	d85b6 <strlen>
   d859c:	1c45      	adds	r5, r0, #1
   d859e:	4629      	mov	r1, r5
   d85a0:	4630      	mov	r0, r6
   d85a2:	f7fd fa45 	bl	d5a30 <_malloc_r>
   d85a6:	4606      	mov	r6, r0
   d85a8:	b118      	cbz	r0, d85b2 <_strdup_r+0x22>
   d85aa:	462a      	mov	r2, r5
   d85ac:	4621      	mov	r1, r4
   d85ae:	f7ff ff99 	bl	d84e4 <memcpy>
   d85b2:	4630      	mov	r0, r6
   d85b4:	bd70      	pop	{r4, r5, r6, pc}

000d85b6 <strlen>:
   d85b6:	4603      	mov	r3, r0
   d85b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d85bc:	2a00      	cmp	r2, #0
   d85be:	d1fb      	bne.n	d85b8 <strlen+0x2>
   d85c0:	1a18      	subs	r0, r3, r0
   d85c2:	3801      	subs	r0, #1
   d85c4:	4770      	bx	lr

000d85c6 <strncmp>:
   d85c6:	b530      	push	{r4, r5, lr}
   d85c8:	b182      	cbz	r2, d85ec <strncmp+0x26>
   d85ca:	1e45      	subs	r5, r0, #1
   d85cc:	3901      	subs	r1, #1
   d85ce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d85d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d85d6:	42a3      	cmp	r3, r4
   d85d8:	d106      	bne.n	d85e8 <strncmp+0x22>
   d85da:	43ec      	mvns	r4, r5
   d85dc:	4414      	add	r4, r2
   d85de:	42e0      	cmn	r0, r4
   d85e0:	d001      	beq.n	d85e6 <strncmp+0x20>
   d85e2:	2b00      	cmp	r3, #0
   d85e4:	d1f3      	bne.n	d85ce <strncmp+0x8>
   d85e6:	461c      	mov	r4, r3
   d85e8:	1b18      	subs	r0, r3, r4
   d85ea:	bd30      	pop	{r4, r5, pc}
   d85ec:	4610      	mov	r0, r2
   d85ee:	bd30      	pop	{r4, r5, pc}

000d85f0 <strncpy>:
   d85f0:	b510      	push	{r4, lr}
   d85f2:	4603      	mov	r3, r0
   d85f4:	b142      	cbz	r2, d8608 <strncpy+0x18>
   d85f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d85fa:	f803 4b01 	strb.w	r4, [r3], #1
   d85fe:	3a01      	subs	r2, #1
   d8600:	2c00      	cmp	r4, #0
   d8602:	d1f7      	bne.n	d85f4 <strncpy+0x4>
   d8604:	441a      	add	r2, r3
   d8606:	e000      	b.n	d860a <strncpy+0x1a>
   d8608:	bd10      	pop	{r4, pc}
   d860a:	4293      	cmp	r3, r2
   d860c:	d002      	beq.n	d8614 <strncpy+0x24>
   d860e:	f803 4b01 	strb.w	r4, [r3], #1
   d8612:	e7fa      	b.n	d860a <strncpy+0x1a>
   d8614:	bd10      	pop	{r4, pc}

000d8616 <sulp>:
   d8616:	b570      	push	{r4, r5, r6, lr}
   d8618:	4604      	mov	r4, r0
   d861a:	460d      	mov	r5, r1
   d861c:	ec45 4b10 	vmov	d0, r4, r5
   d8620:	4616      	mov	r6, r2
   d8622:	f002 f841 	bl	da6a8 <__ulp>
   d8626:	ec51 0b10 	vmov	r0, r1, d0
   d862a:	b17e      	cbz	r6, d864c <sulp+0x36>
   d862c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8630:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8634:	2b00      	cmp	r3, #0
   d8636:	dd09      	ble.n	d864c <sulp+0x36>
   d8638:	051b      	lsls	r3, r3, #20
   d863a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d863e:	2400      	movs	r4, #0
   d8640:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8644:	4622      	mov	r2, r4
   d8646:	462b      	mov	r3, r5
   d8648:	f7ff faf6 	bl	d7c38 <__aeabi_dmul>
   d864c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8650 <_strtod_r>:
   d8650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8654:	b09d      	sub	sp, #116	; 0x74
   d8656:	2300      	movs	r3, #0
   d8658:	9002      	str	r0, [sp, #8]
   d865a:	460c      	mov	r4, r1
   d865c:	9213      	str	r2, [sp, #76]	; 0x4c
   d865e:	9318      	str	r3, [sp, #96]	; 0x60
   d8660:	f04f 0a00 	mov.w	sl, #0
   d8664:	f04f 0b00 	mov.w	fp, #0
   d8668:	9117      	str	r1, [sp, #92]	; 0x5c
   d866a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d866c:	781a      	ldrb	r2, [r3, #0]
   d866e:	2a0d      	cmp	r2, #13
   d8670:	d805      	bhi.n	d867e <_strtod_r+0x2e>
   d8672:	2a09      	cmp	r2, #9
   d8674:	d213      	bcs.n	d869e <_strtod_r+0x4e>
   d8676:	2a00      	cmp	r2, #0
   d8678:	f000 81ac 	beq.w	d89d4 <_strtod_r+0x384>
   d867c:	e012      	b.n	d86a4 <_strtod_r+0x54>
   d867e:	2a2b      	cmp	r2, #43	; 0x2b
   d8680:	d004      	beq.n	d868c <_strtod_r+0x3c>
   d8682:	2a2d      	cmp	r2, #45	; 0x2d
   d8684:	d004      	beq.n	d8690 <_strtod_r+0x40>
   d8686:	2a20      	cmp	r2, #32
   d8688:	d10c      	bne.n	d86a4 <_strtod_r+0x54>
   d868a:	e008      	b.n	d869e <_strtod_r+0x4e>
   d868c:	2200      	movs	r2, #0
   d868e:	e000      	b.n	d8692 <_strtod_r+0x42>
   d8690:	2201      	movs	r2, #1
   d8692:	920c      	str	r2, [sp, #48]	; 0x30
   d8694:	1c5a      	adds	r2, r3, #1
   d8696:	9217      	str	r2, [sp, #92]	; 0x5c
   d8698:	785b      	ldrb	r3, [r3, #1]
   d869a:	b92b      	cbnz	r3, d86a8 <_strtod_r+0x58>
   d869c:	e19a      	b.n	d89d4 <_strtod_r+0x384>
   d869e:	3301      	adds	r3, #1
   d86a0:	9317      	str	r3, [sp, #92]	; 0x5c
   d86a2:	e7e2      	b.n	d866a <_strtod_r+0x1a>
   d86a4:	2300      	movs	r3, #0
   d86a6:	930c      	str	r3, [sp, #48]	; 0x30
   d86a8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d86aa:	782b      	ldrb	r3, [r5, #0]
   d86ac:	2b30      	cmp	r3, #48	; 0x30
   d86ae:	d15c      	bne.n	d876a <_strtod_r+0x11a>
   d86b0:	786b      	ldrb	r3, [r5, #1]
   d86b2:	2b58      	cmp	r3, #88	; 0x58
   d86b4:	d001      	beq.n	d86ba <_strtod_r+0x6a>
   d86b6:	2b78      	cmp	r3, #120	; 0x78
   d86b8:	d14c      	bne.n	d8754 <_strtod_r+0x104>
   d86ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d86bc:	9301      	str	r3, [sp, #4]
   d86be:	ab18      	add	r3, sp, #96	; 0x60
   d86c0:	9300      	str	r3, [sp, #0]
   d86c2:	4aa9      	ldr	r2, [pc, #676]	; (d8968 <_strtod_r+0x318>)
   d86c4:	9802      	ldr	r0, [sp, #8]
   d86c6:	ab19      	add	r3, sp, #100	; 0x64
   d86c8:	a917      	add	r1, sp, #92	; 0x5c
   d86ca:	f001 f974 	bl	d99b6 <__gethex>
   d86ce:	f010 0607 	ands.w	r6, r0, #7
   d86d2:	4604      	mov	r4, r0
   d86d4:	f000 8587 	beq.w	d91e6 <_strtod_r+0xb96>
   d86d8:	2e06      	cmp	r6, #6
   d86da:	d105      	bne.n	d86e8 <_strtod_r+0x98>
   d86dc:	3501      	adds	r5, #1
   d86de:	2300      	movs	r3, #0
   d86e0:	9517      	str	r5, [sp, #92]	; 0x5c
   d86e2:	930c      	str	r3, [sp, #48]	; 0x30
   d86e4:	f000 bd7f 	b.w	d91e6 <_strtod_r+0xb96>
   d86e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d86ea:	b13a      	cbz	r2, d86fc <_strtod_r+0xac>
   d86ec:	2135      	movs	r1, #53	; 0x35
   d86ee:	a81a      	add	r0, sp, #104	; 0x68
   d86f0:	f002 f8c7 	bl	da882 <__copybits>
   d86f4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d86f6:	9802      	ldr	r0, [sp, #8]
   d86f8:	f001 fd45 	bl	da186 <_Bfree>
   d86fc:	2e06      	cmp	r6, #6
   d86fe:	d822      	bhi.n	d8746 <_strtod_r+0xf6>
   d8700:	e8df f006 	tbb	[pc, r6]
   d8704:	18080d04 	.word	0x18080d04
   d8708:	0d1d      	.short	0x0d1d
   d870a:	04          	.byte	0x04
   d870b:	00          	.byte	0x00
   d870c:	f04f 0b00 	mov.w	fp, #0
   d8710:	46da      	mov	sl, fp
   d8712:	e018      	b.n	d8746 <_strtod_r+0xf6>
   d8714:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8718:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d871c:	e013      	b.n	d8746 <_strtod_r+0xf6>
   d871e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8720:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d8722:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8726:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d872a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d872e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8732:	e008      	b.n	d8746 <_strtod_r+0xf6>
   d8734:	f8df b234 	ldr.w	fp, [pc, #564]	; d896c <_strtod_r+0x31c>
   d8738:	f04f 0a00 	mov.w	sl, #0
   d873c:	e003      	b.n	d8746 <_strtod_r+0xf6>
   d873e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8742:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8746:	0721      	lsls	r1, r4, #28
   d8748:	f140 854d 	bpl.w	d91e6 <_strtod_r+0xb96>
   d874c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8750:	f000 bd49 	b.w	d91e6 <_strtod_r+0xb96>
   d8754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8756:	1c5a      	adds	r2, r3, #1
   d8758:	9217      	str	r2, [sp, #92]	; 0x5c
   d875a:	785b      	ldrb	r3, [r3, #1]
   d875c:	2b30      	cmp	r3, #48	; 0x30
   d875e:	d0f9      	beq.n	d8754 <_strtod_r+0x104>
   d8760:	2b00      	cmp	r3, #0
   d8762:	f000 8540 	beq.w	d91e6 <_strtod_r+0xb96>
   d8766:	2301      	movs	r3, #1
   d8768:	e000      	b.n	d876c <_strtod_r+0x11c>
   d876a:	2300      	movs	r3, #0
   d876c:	f04f 0800 	mov.w	r8, #0
   d8770:	9306      	str	r3, [sp, #24]
   d8772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8774:	9307      	str	r3, [sp, #28]
   d8776:	f8cd 8014 	str.w	r8, [sp, #20]
   d877a:	f8cd 8010 	str.w	r8, [sp, #16]
   d877e:	220a      	movs	r2, #10
   d8780:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d8782:	782e      	ldrb	r6, [r5, #0]
   d8784:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8788:	b2d9      	uxtb	r1, r3
   d878a:	2909      	cmp	r1, #9
   d878c:	d80e      	bhi.n	d87ac <_strtod_r+0x15c>
   d878e:	9904      	ldr	r1, [sp, #16]
   d8790:	2908      	cmp	r1, #8
   d8792:	bfdd      	ittte	le
   d8794:	9905      	ldrle	r1, [sp, #20]
   d8796:	fb02 3301 	mlale	r3, r2, r1, r3
   d879a:	9305      	strle	r3, [sp, #20]
   d879c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d87a0:	9b04      	ldr	r3, [sp, #16]
   d87a2:	3501      	adds	r5, #1
   d87a4:	3301      	adds	r3, #1
   d87a6:	9304      	str	r3, [sp, #16]
   d87a8:	9517      	str	r5, [sp, #92]	; 0x5c
   d87aa:	e7e9      	b.n	d8780 <_strtod_r+0x130>
   d87ac:	9802      	ldr	r0, [sp, #8]
   d87ae:	f7ff fe95 	bl	d84dc <_localeconv_r>
   d87b2:	6807      	ldr	r7, [r0, #0]
   d87b4:	9802      	ldr	r0, [sp, #8]
   d87b6:	f7ff fe91 	bl	d84dc <_localeconv_r>
   d87ba:	6800      	ldr	r0, [r0, #0]
   d87bc:	f7ff fefb 	bl	d85b6 <strlen>
   d87c0:	4639      	mov	r1, r7
   d87c2:	4602      	mov	r2, r0
   d87c4:	4628      	mov	r0, r5
   d87c6:	f7ff fefe 	bl	d85c6 <strncmp>
   d87ca:	4607      	mov	r7, r0
   d87cc:	b128      	cbz	r0, d87da <_strtod_r+0x18a>
   d87ce:	2000      	movs	r0, #0
   d87d0:	4633      	mov	r3, r6
   d87d2:	9d04      	ldr	r5, [sp, #16]
   d87d4:	4602      	mov	r2, r0
   d87d6:	4601      	mov	r1, r0
   d87d8:	e057      	b.n	d888a <_strtod_r+0x23a>
   d87da:	9802      	ldr	r0, [sp, #8]
   d87dc:	f7ff fe7e 	bl	d84dc <_localeconv_r>
   d87e0:	6800      	ldr	r0, [r0, #0]
   d87e2:	f7ff fee8 	bl	d85b6 <strlen>
   d87e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d87e8:	181a      	adds	r2, r3, r0
   d87ea:	9217      	str	r2, [sp, #92]	; 0x5c
   d87ec:	9a04      	ldr	r2, [sp, #16]
   d87ee:	5c1b      	ldrb	r3, [r3, r0]
   d87f0:	2a00      	cmp	r2, #0
   d87f2:	d142      	bne.n	d887a <_strtod_r+0x22a>
   d87f4:	4610      	mov	r0, r2
   d87f6:	2b30      	cmp	r3, #48	; 0x30
   d87f8:	d105      	bne.n	d8806 <_strtod_r+0x1b6>
   d87fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d87fc:	1c5a      	adds	r2, r3, #1
   d87fe:	9217      	str	r2, [sp, #92]	; 0x5c
   d8800:	3001      	adds	r0, #1
   d8802:	785b      	ldrb	r3, [r3, #1]
   d8804:	e7f7      	b.n	d87f6 <_strtod_r+0x1a6>
   d8806:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d880a:	2a08      	cmp	r2, #8
   d880c:	d843      	bhi.n	d8896 <_strtod_r+0x246>
   d880e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d8810:	9207      	str	r2, [sp, #28]
   d8812:	4602      	mov	r2, r0
   d8814:	2000      	movs	r0, #0
   d8816:	4605      	mov	r5, r0
   d8818:	3b30      	subs	r3, #48	; 0x30
   d881a:	f100 0101 	add.w	r1, r0, #1
   d881e:	d026      	beq.n	d886e <_strtod_r+0x21e>
   d8820:	440a      	add	r2, r1
   d8822:	eb05 0c00 	add.w	ip, r5, r0
   d8826:	4629      	mov	r1, r5
   d8828:	260a      	movs	r6, #10
   d882a:	4561      	cmp	r1, ip
   d882c:	d00e      	beq.n	d884c <_strtod_r+0x1fc>
   d882e:	3101      	adds	r1, #1
   d8830:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d8834:	f1be 0f08 	cmp.w	lr, #8
   d8838:	dc03      	bgt.n	d8842 <_strtod_r+0x1f2>
   d883a:	9f05      	ldr	r7, [sp, #20]
   d883c:	4377      	muls	r7, r6
   d883e:	9705      	str	r7, [sp, #20]
   d8840:	e7f3      	b.n	d882a <_strtod_r+0x1da>
   d8842:	2910      	cmp	r1, #16
   d8844:	bfd8      	it	le
   d8846:	fb06 f808 	mulle.w	r8, r6, r8
   d884a:	e7ee      	b.n	d882a <_strtod_r+0x1da>
   d884c:	4428      	add	r0, r5
   d884e:	2808      	cmp	r0, #8
   d8850:	f100 0501 	add.w	r5, r0, #1
   d8854:	dc05      	bgt.n	d8862 <_strtod_r+0x212>
   d8856:	9805      	ldr	r0, [sp, #20]
   d8858:	210a      	movs	r1, #10
   d885a:	fb01 3300 	mla	r3, r1, r0, r3
   d885e:	9305      	str	r3, [sp, #20]
   d8860:	e004      	b.n	d886c <_strtod_r+0x21c>
   d8862:	2d10      	cmp	r5, #16
   d8864:	bfdc      	itt	le
   d8866:	210a      	movle	r1, #10
   d8868:	fb01 3808 	mlale	r8, r1, r8, r3
   d886c:	2100      	movs	r1, #0
   d886e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8870:	1c58      	adds	r0, r3, #1
   d8872:	9017      	str	r0, [sp, #92]	; 0x5c
   d8874:	785b      	ldrb	r3, [r3, #1]
   d8876:	4608      	mov	r0, r1
   d8878:	e002      	b.n	d8880 <_strtod_r+0x230>
   d887a:	9d04      	ldr	r5, [sp, #16]
   d887c:	4638      	mov	r0, r7
   d887e:	463a      	mov	r2, r7
   d8880:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8884:	2909      	cmp	r1, #9
   d8886:	d9c7      	bls.n	d8818 <_strtod_r+0x1c8>
   d8888:	2101      	movs	r1, #1
   d888a:	2b65      	cmp	r3, #101	; 0x65
   d888c:	d001      	beq.n	d8892 <_strtod_r+0x242>
   d888e:	2b45      	cmp	r3, #69	; 0x45
   d8890:	d151      	bne.n	d8936 <_strtod_r+0x2e6>
   d8892:	b96d      	cbnz	r5, d88b0 <_strtod_r+0x260>
   d8894:	e004      	b.n	d88a0 <_strtod_r+0x250>
   d8896:	2b65      	cmp	r3, #101	; 0x65
   d8898:	f040 84b3 	bne.w	d9202 <_strtod_r+0xbb2>
   d889c:	2200      	movs	r2, #0
   d889e:	2101      	movs	r1, #1
   d88a0:	b928      	cbnz	r0, d88ae <_strtod_r+0x25e>
   d88a2:	9b06      	ldr	r3, [sp, #24]
   d88a4:	2b00      	cmp	r3, #0
   d88a6:	f000 8095 	beq.w	d89d4 <_strtod_r+0x384>
   d88aa:	4605      	mov	r5, r0
   d88ac:	e000      	b.n	d88b0 <_strtod_r+0x260>
   d88ae:	2500      	movs	r5, #0
   d88b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d88b2:	1c63      	adds	r3, r4, #1
   d88b4:	9317      	str	r3, [sp, #92]	; 0x5c
   d88b6:	7863      	ldrb	r3, [r4, #1]
   d88b8:	2b2b      	cmp	r3, #43	; 0x2b
   d88ba:	d006      	beq.n	d88ca <_strtod_r+0x27a>
   d88bc:	2b2d      	cmp	r3, #45	; 0x2d
   d88be:	d002      	beq.n	d88c6 <_strtod_r+0x276>
   d88c0:	2600      	movs	r6, #0
   d88c2:	9603      	str	r6, [sp, #12]
   d88c4:	e006      	b.n	d88d4 <_strtod_r+0x284>
   d88c6:	2301      	movs	r3, #1
   d88c8:	e000      	b.n	d88cc <_strtod_r+0x27c>
   d88ca:	2300      	movs	r3, #0
   d88cc:	9303      	str	r3, [sp, #12]
   d88ce:	1ca3      	adds	r3, r4, #2
   d88d0:	9317      	str	r3, [sp, #92]	; 0x5c
   d88d2:	78a3      	ldrb	r3, [r4, #2]
   d88d4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d88d8:	2e09      	cmp	r6, #9
   d88da:	d82b      	bhi.n	d8934 <_strtod_r+0x2e4>
   d88dc:	2b30      	cmp	r3, #48	; 0x30
   d88de:	d104      	bne.n	d88ea <_strtod_r+0x29a>
   d88e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d88e2:	1c5e      	adds	r6, r3, #1
   d88e4:	9617      	str	r6, [sp, #92]	; 0x5c
   d88e6:	785b      	ldrb	r3, [r3, #1]
   d88e8:	e7f8      	b.n	d88dc <_strtod_r+0x28c>
   d88ea:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d88ee:	2e08      	cmp	r6, #8
   d88f0:	d821      	bhi.n	d8936 <_strtod_r+0x2e6>
   d88f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d88f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d88f8:	f04f 0c0a 	mov.w	ip, #10
   d88fc:	461f      	mov	r7, r3
   d88fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8900:	1c5e      	adds	r6, r3, #1
   d8902:	9617      	str	r6, [sp, #92]	; 0x5c
   d8904:	785b      	ldrb	r3, [r3, #1]
   d8906:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d890a:	f1b9 0f09 	cmp.w	r9, #9
   d890e:	d804      	bhi.n	d891a <_strtod_r+0x2ca>
   d8910:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d8914:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8918:	e7f1      	b.n	d88fe <_strtod_r+0x2ae>
   d891a:	1bf6      	subs	r6, r6, r7
   d891c:	2e08      	cmp	r6, #8
   d891e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d8922:	dc02      	bgt.n	d892a <_strtod_r+0x2da>
   d8924:	45f1      	cmp	r9, lr
   d8926:	bfa8      	it	ge
   d8928:	46f1      	movge	r9, lr
   d892a:	9e03      	ldr	r6, [sp, #12]
   d892c:	b12e      	cbz	r6, d893a <_strtod_r+0x2ea>
   d892e:	f1c9 0900 	rsb	r9, r9, #0
   d8932:	e002      	b.n	d893a <_strtod_r+0x2ea>
   d8934:	9417      	str	r4, [sp, #92]	; 0x5c
   d8936:	f04f 0900 	mov.w	r9, #0
   d893a:	2d00      	cmp	r5, #0
   d893c:	d153      	bne.n	d89e6 <_strtod_r+0x396>
   d893e:	2800      	cmp	r0, #0
   d8940:	f040 8451 	bne.w	d91e6 <_strtod_r+0xb96>
   d8944:	9a06      	ldr	r2, [sp, #24]
   d8946:	2a00      	cmp	r2, #0
   d8948:	f040 844d 	bne.w	d91e6 <_strtod_r+0xb96>
   d894c:	2900      	cmp	r1, #0
   d894e:	d141      	bne.n	d89d4 <_strtod_r+0x384>
   d8950:	2b4e      	cmp	r3, #78	; 0x4e
   d8952:	d020      	beq.n	d8996 <_strtod_r+0x346>
   d8954:	dc02      	bgt.n	d895c <_strtod_r+0x30c>
   d8956:	2b49      	cmp	r3, #73	; 0x49
   d8958:	d00a      	beq.n	d8970 <_strtod_r+0x320>
   d895a:	e03b      	b.n	d89d4 <_strtod_r+0x384>
   d895c:	2b69      	cmp	r3, #105	; 0x69
   d895e:	d007      	beq.n	d8970 <_strtod_r+0x320>
   d8960:	2b6e      	cmp	r3, #110	; 0x6e
   d8962:	d018      	beq.n	d8996 <_strtod_r+0x346>
   d8964:	e036      	b.n	d89d4 <_strtod_r+0x384>
   d8966:	bf00      	nop
   d8968:	000db214 	.word	0x000db214
   d896c:	7ff00000 	.word	0x7ff00000
   d8970:	49a8      	ldr	r1, [pc, #672]	; (d8c14 <_strtod_r+0x5c4>)
   d8972:	a817      	add	r0, sp, #92	; 0x5c
   d8974:	f001 fa50 	bl	d9e18 <__match>
   d8978:	b360      	cbz	r0, d89d4 <_strtod_r+0x384>
   d897a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d897c:	49a6      	ldr	r1, [pc, #664]	; (d8c18 <_strtod_r+0x5c8>)
   d897e:	3b01      	subs	r3, #1
   d8980:	a817      	add	r0, sp, #92	; 0x5c
   d8982:	9317      	str	r3, [sp, #92]	; 0x5c
   d8984:	f001 fa48 	bl	d9e18 <__match>
   d8988:	b910      	cbnz	r0, d8990 <_strtod_r+0x340>
   d898a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d898c:	3301      	adds	r3, #1
   d898e:	9317      	str	r3, [sp, #92]	; 0x5c
   d8990:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d8c34 <_strtod_r+0x5e4>
   d8994:	e01a      	b.n	d89cc <_strtod_r+0x37c>
   d8996:	49a1      	ldr	r1, [pc, #644]	; (d8c1c <_strtod_r+0x5cc>)
   d8998:	a817      	add	r0, sp, #92	; 0x5c
   d899a:	f001 fa3d 	bl	d9e18 <__match>
   d899e:	b1c8      	cbz	r0, d89d4 <_strtod_r+0x384>
   d89a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89a2:	781b      	ldrb	r3, [r3, #0]
   d89a4:	2b28      	cmp	r3, #40	; 0x28
   d89a6:	d10f      	bne.n	d89c8 <_strtod_r+0x378>
   d89a8:	aa1a      	add	r2, sp, #104	; 0x68
   d89aa:	499d      	ldr	r1, [pc, #628]	; (d8c20 <_strtod_r+0x5d0>)
   d89ac:	a817      	add	r0, sp, #92	; 0x5c
   d89ae:	f001 fa46 	bl	d9e3e <__hexnan>
   d89b2:	2805      	cmp	r0, #5
   d89b4:	d108      	bne.n	d89c8 <_strtod_r+0x378>
   d89b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d89b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d89bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d89c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d89c4:	f000 bc0f 	b.w	d91e6 <_strtod_r+0xb96>
   d89c8:	f8df b26c 	ldr.w	fp, [pc, #620]	; d8c38 <_strtod_r+0x5e8>
   d89cc:	f04f 0a00 	mov.w	sl, #0
   d89d0:	f000 bc09 	b.w	d91e6 <_strtod_r+0xb96>
   d89d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d89d6:	9417      	str	r4, [sp, #92]	; 0x5c
   d89d8:	2b00      	cmp	r3, #0
   d89da:	f000 840f 	beq.w	d91fc <_strtod_r+0xbac>
   d89de:	2300      	movs	r3, #0
   d89e0:	930c      	str	r3, [sp, #48]	; 0x30
   d89e2:	f000 bc02 	b.w	d91ea <_strtod_r+0xb9a>
   d89e6:	9b04      	ldr	r3, [sp, #16]
   d89e8:	9805      	ldr	r0, [sp, #20]
   d89ea:	2b00      	cmp	r3, #0
   d89ec:	bf08      	it	eq
   d89ee:	462b      	moveq	r3, r5
   d89f0:	2d10      	cmp	r5, #16
   d89f2:	462c      	mov	r4, r5
   d89f4:	ebc2 0909 	rsb	r9, r2, r9
   d89f8:	bfa8      	it	ge
   d89fa:	2410      	movge	r4, #16
   d89fc:	9304      	str	r3, [sp, #16]
   d89fe:	f7ff f8a5 	bl	d7b4c <__aeabi_ui2d>
   d8a02:	2c09      	cmp	r4, #9
   d8a04:	4682      	mov	sl, r0
   d8a06:	468b      	mov	fp, r1
   d8a08:	dd13      	ble.n	d8a32 <_strtod_r+0x3e2>
   d8a0a:	4b86      	ldr	r3, [pc, #536]	; (d8c24 <_strtod_r+0x5d4>)
   d8a0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d8a10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8a14:	f7ff f910 	bl	d7c38 <__aeabi_dmul>
   d8a18:	4606      	mov	r6, r0
   d8a1a:	4640      	mov	r0, r8
   d8a1c:	460f      	mov	r7, r1
   d8a1e:	f7ff f895 	bl	d7b4c <__aeabi_ui2d>
   d8a22:	4602      	mov	r2, r0
   d8a24:	460b      	mov	r3, r1
   d8a26:	4630      	mov	r0, r6
   d8a28:	4639      	mov	r1, r7
   d8a2a:	f7fe ff53 	bl	d78d4 <__adddf3>
   d8a2e:	4682      	mov	sl, r0
   d8a30:	468b      	mov	fp, r1
   d8a32:	2d0f      	cmp	r5, #15
   d8a34:	dc36      	bgt.n	d8aa4 <_strtod_r+0x454>
   d8a36:	f1b9 0f00 	cmp.w	r9, #0
   d8a3a:	f000 83d4 	beq.w	d91e6 <_strtod_r+0xb96>
   d8a3e:	dd24      	ble.n	d8a8a <_strtod_r+0x43a>
   d8a40:	f1b9 0f16 	cmp.w	r9, #22
   d8a44:	dc07      	bgt.n	d8a56 <_strtod_r+0x406>
   d8a46:	4d77      	ldr	r5, [pc, #476]	; (d8c24 <_strtod_r+0x5d4>)
   d8a48:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d8a4c:	4652      	mov	r2, sl
   d8a4e:	465b      	mov	r3, fp
   d8a50:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8a54:	e014      	b.n	d8a80 <_strtod_r+0x430>
   d8a56:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8a5a:	4599      	cmp	r9, r3
   d8a5c:	dc22      	bgt.n	d8aa4 <_strtod_r+0x454>
   d8a5e:	4c71      	ldr	r4, [pc, #452]	; (d8c24 <_strtod_r+0x5d4>)
   d8a60:	f1c5 050f 	rsb	r5, r5, #15
   d8a64:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8a68:	ebc5 0509 	rsb	r5, r5, r9
   d8a6c:	4652      	mov	r2, sl
   d8a6e:	465b      	mov	r3, fp
   d8a70:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8a74:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8a78:	f7ff f8de 	bl	d7c38 <__aeabi_dmul>
   d8a7c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8a80:	f7ff f8da 	bl	d7c38 <__aeabi_dmul>
   d8a84:	4682      	mov	sl, r0
   d8a86:	468b      	mov	fp, r1
   d8a88:	e3ad      	b.n	d91e6 <_strtod_r+0xb96>
   d8a8a:	f119 0f16 	cmn.w	r9, #22
   d8a8e:	db09      	blt.n	d8aa4 <_strtod_r+0x454>
   d8a90:	4d64      	ldr	r5, [pc, #400]	; (d8c24 <_strtod_r+0x5d4>)
   d8a92:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d8a96:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8a9a:	4650      	mov	r0, sl
   d8a9c:	4659      	mov	r1, fp
   d8a9e:	f7ff f9f5 	bl	d7e8c <__aeabi_ddiv>
   d8aa2:	e7ef      	b.n	d8a84 <_strtod_r+0x434>
   d8aa4:	1b2c      	subs	r4, r5, r4
   d8aa6:	444c      	add	r4, r9
   d8aa8:	2c00      	cmp	r4, #0
   d8aaa:	dd57      	ble.n	d8b5c <_strtod_r+0x50c>
   d8aac:	f014 010f 	ands.w	r1, r4, #15
   d8ab0:	d00a      	beq.n	d8ac8 <_strtod_r+0x478>
   d8ab2:	4b5c      	ldr	r3, [pc, #368]	; (d8c24 <_strtod_r+0x5d4>)
   d8ab4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d8ab8:	4652      	mov	r2, sl
   d8aba:	465b      	mov	r3, fp
   d8abc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8ac0:	f7ff f8ba 	bl	d7c38 <__aeabi_dmul>
   d8ac4:	4682      	mov	sl, r0
   d8ac6:	468b      	mov	fp, r1
   d8ac8:	f034 040f 	bics.w	r4, r4, #15
   d8acc:	f000 80b8 	beq.w	d8c40 <_strtod_r+0x5f0>
   d8ad0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d8ad4:	dd0b      	ble.n	d8aee <_strtod_r+0x49e>
   d8ad6:	2400      	movs	r4, #0
   d8ad8:	4625      	mov	r5, r4
   d8ada:	9405      	str	r4, [sp, #20]
   d8adc:	9404      	str	r4, [sp, #16]
   d8ade:	9a02      	ldr	r2, [sp, #8]
   d8ae0:	f8df b150 	ldr.w	fp, [pc, #336]	; d8c34 <_strtod_r+0x5e4>
   d8ae4:	2322      	movs	r3, #34	; 0x22
   d8ae6:	6013      	str	r3, [r2, #0]
   d8ae8:	f04f 0a00 	mov.w	sl, #0
   d8aec:	e187      	b.n	d8dfe <_strtod_r+0x7ae>
   d8aee:	4e4e      	ldr	r6, [pc, #312]	; (d8c28 <_strtod_r+0x5d8>)
   d8af0:	2300      	movs	r3, #0
   d8af2:	1124      	asrs	r4, r4, #4
   d8af4:	4650      	mov	r0, sl
   d8af6:	4659      	mov	r1, fp
   d8af8:	4698      	mov	r8, r3
   d8afa:	4637      	mov	r7, r6
   d8afc:	2c01      	cmp	r4, #1
   d8afe:	dd0b      	ble.n	d8b18 <_strtod_r+0x4c8>
   d8b00:	07e2      	lsls	r2, r4, #31
   d8b02:	d504      	bpl.n	d8b0e <_strtod_r+0x4be>
   d8b04:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8b08:	f7ff f896 	bl	d7c38 <__aeabi_dmul>
   d8b0c:	2301      	movs	r3, #1
   d8b0e:	f108 0801 	add.w	r8, r8, #1
   d8b12:	1064      	asrs	r4, r4, #1
   d8b14:	3608      	adds	r6, #8
   d8b16:	e7f1      	b.n	d8afc <_strtod_r+0x4ac>
   d8b18:	b10b      	cbz	r3, d8b1e <_strtod_r+0x4ce>
   d8b1a:	4682      	mov	sl, r0
   d8b1c:	468b      	mov	fp, r1
   d8b1e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8b22:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d8b26:	4652      	mov	r2, sl
   d8b28:	465b      	mov	r3, fp
   d8b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8b2e:	f7ff f883 	bl	d7c38 <__aeabi_dmul>
   d8b32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8b36:	468b      	mov	fp, r1
   d8b38:	460a      	mov	r2, r1
   d8b3a:	0d1b      	lsrs	r3, r3, #20
   d8b3c:	493b      	ldr	r1, [pc, #236]	; (d8c2c <_strtod_r+0x5dc>)
   d8b3e:	051b      	lsls	r3, r3, #20
   d8b40:	428b      	cmp	r3, r1
   d8b42:	4682      	mov	sl, r0
   d8b44:	d8c7      	bhi.n	d8ad6 <_strtod_r+0x486>
   d8b46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8b4a:	428b      	cmp	r3, r1
   d8b4c:	bf86      	itte	hi
   d8b4e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d8c3c <_strtod_r+0x5ec>
   d8b52:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d8b56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8b5a:	e071      	b.n	d8c40 <_strtod_r+0x5f0>
   d8b5c:	d070      	beq.n	d8c40 <_strtod_r+0x5f0>
   d8b5e:	4264      	negs	r4, r4
   d8b60:	f014 020f 	ands.w	r2, r4, #15
   d8b64:	d00a      	beq.n	d8b7c <_strtod_r+0x52c>
   d8b66:	4b2f      	ldr	r3, [pc, #188]	; (d8c24 <_strtod_r+0x5d4>)
   d8b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8b6c:	4650      	mov	r0, sl
   d8b6e:	4659      	mov	r1, fp
   d8b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b74:	f7ff f98a 	bl	d7e8c <__aeabi_ddiv>
   d8b78:	4682      	mov	sl, r0
   d8b7a:	468b      	mov	fp, r1
   d8b7c:	1124      	asrs	r4, r4, #4
   d8b7e:	d05f      	beq.n	d8c40 <_strtod_r+0x5f0>
   d8b80:	2c1f      	cmp	r4, #31
   d8b82:	dd04      	ble.n	d8b8e <_strtod_r+0x53e>
   d8b84:	2400      	movs	r4, #0
   d8b86:	4625      	mov	r5, r4
   d8b88:	9405      	str	r4, [sp, #20]
   d8b8a:	9404      	str	r4, [sp, #16]
   d8b8c:	e130      	b.n	d8df0 <_strtod_r+0x7a0>
   d8b8e:	f014 0f10 	tst.w	r4, #16
   d8b92:	bf0c      	ite	eq
   d8b94:	2300      	moveq	r3, #0
   d8b96:	236a      	movne	r3, #106	; 0x6a
   d8b98:	4e25      	ldr	r6, [pc, #148]	; (d8c30 <_strtod_r+0x5e0>)
   d8b9a:	9303      	str	r3, [sp, #12]
   d8b9c:	4650      	mov	r0, sl
   d8b9e:	4659      	mov	r1, fp
   d8ba0:	2300      	movs	r3, #0
   d8ba2:	2c00      	cmp	r4, #0
   d8ba4:	dd09      	ble.n	d8bba <_strtod_r+0x56a>
   d8ba6:	07e2      	lsls	r2, r4, #31
   d8ba8:	d504      	bpl.n	d8bb4 <_strtod_r+0x564>
   d8baa:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8bae:	f7ff f843 	bl	d7c38 <__aeabi_dmul>
   d8bb2:	2301      	movs	r3, #1
   d8bb4:	1064      	asrs	r4, r4, #1
   d8bb6:	3608      	adds	r6, #8
   d8bb8:	e7f3      	b.n	d8ba2 <_strtod_r+0x552>
   d8bba:	b10b      	cbz	r3, d8bc0 <_strtod_r+0x570>
   d8bbc:	4682      	mov	sl, r0
   d8bbe:	468b      	mov	fp, r1
   d8bc0:	9b03      	ldr	r3, [sp, #12]
   d8bc2:	b1eb      	cbz	r3, d8c00 <_strtod_r+0x5b0>
   d8bc4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8bc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8bcc:	2b00      	cmp	r3, #0
   d8bce:	4659      	mov	r1, fp
   d8bd0:	dd16      	ble.n	d8c00 <_strtod_r+0x5b0>
   d8bd2:	2b1f      	cmp	r3, #31
   d8bd4:	dd0e      	ble.n	d8bf4 <_strtod_r+0x5a4>
   d8bd6:	2b34      	cmp	r3, #52	; 0x34
   d8bd8:	bfde      	ittt	le
   d8bda:	3b20      	suble	r3, #32
   d8bdc:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d8be0:	fa02 f303 	lslle.w	r3, r2, r3
   d8be4:	f04f 0a00 	mov.w	sl, #0
   d8be8:	bfcc      	ite	gt
   d8bea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8bee:	ea03 0b01 	andle.w	fp, r3, r1
   d8bf2:	e005      	b.n	d8c00 <_strtod_r+0x5b0>
   d8bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8bf8:	fa02 f303 	lsl.w	r3, r2, r3
   d8bfc:	ea03 0a0a 	and.w	sl, r3, sl
   d8c00:	2200      	movs	r2, #0
   d8c02:	2300      	movs	r3, #0
   d8c04:	4650      	mov	r0, sl
   d8c06:	4659      	mov	r1, fp
   d8c08:	f7ff fa7e 	bl	d8108 <__aeabi_dcmpeq>
   d8c0c:	2800      	cmp	r0, #0
   d8c0e:	d1b9      	bne.n	d8b84 <_strtod_r+0x534>
   d8c10:	e018      	b.n	d8c44 <_strtod_r+0x5f4>
   d8c12:	bf00      	nop
   d8c14:	000db23c 	.word	0x000db23c
   d8c18:	000db23f 	.word	0x000db23f
   d8c1c:	000db245 	.word	0x000db245
   d8c20:	000db228 	.word	0x000db228
   d8c24:	000db2b0 	.word	0x000db2b0
   d8c28:	000db378 	.word	0x000db378
   d8c2c:	7ca00000 	.word	0x7ca00000
   d8c30:	000db248 	.word	0x000db248
   d8c34:	7ff00000 	.word	0x7ff00000
   d8c38:	fff80000 	.word	0xfff80000
   d8c3c:	7fefffff 	.word	0x7fefffff
   d8c40:	2300      	movs	r3, #0
   d8c42:	9303      	str	r3, [sp, #12]
   d8c44:	9b05      	ldr	r3, [sp, #20]
   d8c46:	9300      	str	r3, [sp, #0]
   d8c48:	9a04      	ldr	r2, [sp, #16]
   d8c4a:	9907      	ldr	r1, [sp, #28]
   d8c4c:	9802      	ldr	r0, [sp, #8]
   d8c4e:	462b      	mov	r3, r5
   d8c50:	f001 faeb 	bl	da22a <__s2b>
   d8c54:	9005      	str	r0, [sp, #20]
   d8c56:	2800      	cmp	r0, #0
   d8c58:	f43f af3d 	beq.w	d8ad6 <_strtod_r+0x486>
   d8c5c:	f1b9 0f00 	cmp.w	r9, #0
   d8c60:	f1c9 0300 	rsb	r3, r9, #0
   d8c64:	bfa8      	it	ge
   d8c66:	2300      	movge	r3, #0
   d8c68:	930d      	str	r3, [sp, #52]	; 0x34
   d8c6a:	2400      	movs	r4, #0
   d8c6c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d8c70:	9312      	str	r3, [sp, #72]	; 0x48
   d8c72:	4625      	mov	r5, r4
   d8c74:	9b05      	ldr	r3, [sp, #20]
   d8c76:	9802      	ldr	r0, [sp, #8]
   d8c78:	6859      	ldr	r1, [r3, #4]
   d8c7a:	f001 fa4f 	bl	da11c <_Balloc>
   d8c7e:	9004      	str	r0, [sp, #16]
   d8c80:	2800      	cmp	r0, #0
   d8c82:	f43f af2c 	beq.w	d8ade <_strtod_r+0x48e>
   d8c86:	9b05      	ldr	r3, [sp, #20]
   d8c88:	691a      	ldr	r2, [r3, #16]
   d8c8a:	3202      	adds	r2, #2
   d8c8c:	f103 010c 	add.w	r1, r3, #12
   d8c90:	0092      	lsls	r2, r2, #2
   d8c92:	300c      	adds	r0, #12
   d8c94:	f7ff fc26 	bl	d84e4 <memcpy>
   d8c98:	aa1a      	add	r2, sp, #104	; 0x68
   d8c9a:	a919      	add	r1, sp, #100	; 0x64
   d8c9c:	ec4b ab10 	vmov	d0, sl, fp
   d8ca0:	9802      	ldr	r0, [sp, #8]
   d8ca2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8ca6:	f001 fd74 	bl	da792 <__d2b>
   d8caa:	9018      	str	r0, [sp, #96]	; 0x60
   d8cac:	2800      	cmp	r0, #0
   d8cae:	f43f af16 	beq.w	d8ade <_strtod_r+0x48e>
   d8cb2:	2101      	movs	r1, #1
   d8cb4:	9802      	ldr	r0, [sp, #8]
   d8cb6:	f001 fb43 	bl	da340 <__i2b>
   d8cba:	4605      	mov	r5, r0
   d8cbc:	2800      	cmp	r0, #0
   d8cbe:	f43f af0e 	beq.w	d8ade <_strtod_r+0x48e>
   d8cc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8cc4:	9903      	ldr	r1, [sp, #12]
   d8cc6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d8cc8:	2b00      	cmp	r3, #0
   d8cca:	bfad      	iteet	ge
   d8ccc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d8cce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d8cd0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d8cd4:	eb02 0803 	addge.w	r8, r2, r3
   d8cd8:	bfb8      	it	lt
   d8cda:	1ad2      	sublt	r2, r2, r3
   d8cdc:	eba3 0301 	sub.w	r3, r3, r1
   d8ce0:	4433      	add	r3, r6
   d8ce2:	49b5      	ldr	r1, [pc, #724]	; (d8fb8 <_strtod_r+0x968>)
   d8ce4:	bfa8      	it	ge
   d8ce6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8ce8:	3b01      	subs	r3, #1
   d8cea:	428b      	cmp	r3, r1
   d8cec:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8cf0:	f280 808a 	bge.w	d8e08 <_strtod_r+0x7b8>
   d8cf4:	1ac9      	subs	r1, r1, r3
   d8cf6:	291f      	cmp	r1, #31
   d8cf8:	bfc8      	it	gt
   d8cfa:	4fb0      	ldrgt	r7, [pc, #704]	; (d8fbc <_strtod_r+0x96c>)
   d8cfc:	f04f 0901 	mov.w	r9, #1
   d8d00:	bfd4      	ite	le
   d8d02:	fa09 f301 	lslle.w	r3, r9, r1
   d8d06:	1aff      	subgt	r7, r7, r3
   d8d08:	eba6 0601 	sub.w	r6, r6, r1
   d8d0c:	bfd9      	ittee	le
   d8d0e:	9306      	strle	r3, [sp, #24]
   d8d10:	2700      	movle	r7, #0
   d8d12:	fa09 f707 	lslgt.w	r7, r9, r7
   d8d16:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d8d1a:	eb08 0906 	add.w	r9, r8, r6
   d8d1e:	9b03      	ldr	r3, [sp, #12]
   d8d20:	45c8      	cmp	r8, r9
   d8d22:	4416      	add	r6, r2
   d8d24:	441e      	add	r6, r3
   d8d26:	4643      	mov	r3, r8
   d8d28:	bfa8      	it	ge
   d8d2a:	464b      	movge	r3, r9
   d8d2c:	42b3      	cmp	r3, r6
   d8d2e:	bfa8      	it	ge
   d8d30:	4633      	movge	r3, r6
   d8d32:	2b00      	cmp	r3, #0
   d8d34:	bfc2      	ittt	gt
   d8d36:	ebc3 0909 	rsbgt	r9, r3, r9
   d8d3a:	1af6      	subgt	r6, r6, r3
   d8d3c:	ebc3 0808 	rsbgt	r8, r3, r8
   d8d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8d42:	2b00      	cmp	r3, #0
   d8d44:	d164      	bne.n	d8e10 <_strtod_r+0x7c0>
   d8d46:	f1b9 0f00 	cmp.w	r9, #0
   d8d4a:	dc7a      	bgt.n	d8e42 <_strtod_r+0x7f2>
   d8d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8d4e:	2b00      	cmp	r3, #0
   d8d50:	f040 8081 	bne.w	d8e56 <_strtod_r+0x806>
   d8d54:	2e00      	cmp	r6, #0
   d8d56:	f300 8088 	bgt.w	d8e6a <_strtod_r+0x81a>
   d8d5a:	f1b8 0f00 	cmp.w	r8, #0
   d8d5e:	f300 808e 	bgt.w	d8e7e <_strtod_r+0x82e>
   d8d62:	9a04      	ldr	r2, [sp, #16]
   d8d64:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8d66:	9802      	ldr	r0, [sp, #8]
   d8d68:	f001 fc3f 	bl	da5ea <__mdiff>
   d8d6c:	4604      	mov	r4, r0
   d8d6e:	2800      	cmp	r0, #0
   d8d70:	f43f aeb5 	beq.w	d8ade <_strtod_r+0x48e>
   d8d74:	68c3      	ldr	r3, [r0, #12]
   d8d76:	9307      	str	r3, [sp, #28]
   d8d78:	2300      	movs	r3, #0
   d8d7a:	60c3      	str	r3, [r0, #12]
   d8d7c:	4629      	mov	r1, r5
   d8d7e:	f001 fc18 	bl	da5b2 <__mcmp>
   d8d82:	2800      	cmp	r0, #0
   d8d84:	f280 8089 	bge.w	d8e9a <_strtod_r+0x84a>
   d8d88:	9b07      	ldr	r3, [sp, #28]
   d8d8a:	2b00      	cmp	r3, #0
   d8d8c:	f040 8204 	bne.w	d9198 <_strtod_r+0xb48>
   d8d90:	f1ba 0f00 	cmp.w	sl, #0
   d8d94:	f040 8200 	bne.w	d9198 <_strtod_r+0xb48>
   d8d98:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8d9c:	2b00      	cmp	r3, #0
   d8d9e:	f040 81fb 	bne.w	d9198 <_strtod_r+0xb48>
   d8da2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8da6:	0d1b      	lsrs	r3, r3, #20
   d8da8:	051b      	lsls	r3, r3, #20
   d8daa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8dae:	f240 81f3 	bls.w	d9198 <_strtod_r+0xb48>
   d8db2:	6963      	ldr	r3, [r4, #20]
   d8db4:	2b00      	cmp	r3, #0
   d8db6:	d06c      	beq.n	d8e92 <_strtod_r+0x842>
   d8db8:	4621      	mov	r1, r4
   d8dba:	2201      	movs	r2, #1
   d8dbc:	9802      	ldr	r0, [sp, #8]
   d8dbe:	f001 fba7 	bl	da510 <__lshift>
   d8dc2:	4629      	mov	r1, r5
   d8dc4:	4604      	mov	r4, r0
   d8dc6:	f001 fbf4 	bl	da5b2 <__mcmp>
   d8dca:	2800      	cmp	r0, #0
   d8dcc:	f340 81e4 	ble.w	d9198 <_strtod_r+0xb48>
   d8dd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8dd4:	9a03      	ldr	r2, [sp, #12]
   d8dd6:	0d1b      	lsrs	r3, r3, #20
   d8dd8:	051b      	lsls	r3, r3, #20
   d8dda:	2a00      	cmp	r2, #0
   d8ddc:	f000 808c 	beq.w	d8ef8 <_strtod_r+0x8a8>
   d8de0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8de4:	f300 8088 	bgt.w	d8ef8 <_strtod_r+0x8a8>
   d8de8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d8dec:	f300 81d6 	bgt.w	d919c <_strtod_r+0xb4c>
   d8df0:	9a02      	ldr	r2, [sp, #8]
   d8df2:	2322      	movs	r3, #34	; 0x22
   d8df4:	f04f 0a00 	mov.w	sl, #0
   d8df8:	f04f 0b00 	mov.w	fp, #0
   d8dfc:	6013      	str	r3, [r2, #0]
   d8dfe:	9b05      	ldr	r3, [sp, #20]
   d8e00:	2b00      	cmp	r3, #0
   d8e02:	f040 81dc 	bne.w	d91be <_strtod_r+0xb6e>
   d8e06:	e1ee      	b.n	d91e6 <_strtod_r+0xb96>
   d8e08:	2301      	movs	r3, #1
   d8e0a:	2700      	movs	r7, #0
   d8e0c:	9306      	str	r3, [sp, #24]
   d8e0e:	e784      	b.n	d8d1a <_strtod_r+0x6ca>
   d8e10:	4629      	mov	r1, r5
   d8e12:	461a      	mov	r2, r3
   d8e14:	9802      	ldr	r0, [sp, #8]
   d8e16:	f001 fb2d 	bl	da474 <__pow5mult>
   d8e1a:	4605      	mov	r5, r0
   d8e1c:	2800      	cmp	r0, #0
   d8e1e:	f43f ae5e 	beq.w	d8ade <_strtod_r+0x48e>
   d8e22:	4601      	mov	r1, r0
   d8e24:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8e26:	9802      	ldr	r0, [sp, #8]
   d8e28:	f001 fa93 	bl	da352 <__multiply>
   d8e2c:	9007      	str	r0, [sp, #28]
   d8e2e:	2800      	cmp	r0, #0
   d8e30:	f43f ae55 	beq.w	d8ade <_strtod_r+0x48e>
   d8e34:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8e36:	9802      	ldr	r0, [sp, #8]
   d8e38:	f001 f9a5 	bl	da186 <_Bfree>
   d8e3c:	9b07      	ldr	r3, [sp, #28]
   d8e3e:	9318      	str	r3, [sp, #96]	; 0x60
   d8e40:	e781      	b.n	d8d46 <_strtod_r+0x6f6>
   d8e42:	464a      	mov	r2, r9
   d8e44:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8e46:	9802      	ldr	r0, [sp, #8]
   d8e48:	f001 fb62 	bl	da510 <__lshift>
   d8e4c:	9018      	str	r0, [sp, #96]	; 0x60
   d8e4e:	2800      	cmp	r0, #0
   d8e50:	f47f af7c 	bne.w	d8d4c <_strtod_r+0x6fc>
   d8e54:	e643      	b.n	d8ade <_strtod_r+0x48e>
   d8e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d8e58:	9904      	ldr	r1, [sp, #16]
   d8e5a:	9802      	ldr	r0, [sp, #8]
   d8e5c:	f001 fb0a 	bl	da474 <__pow5mult>
   d8e60:	9004      	str	r0, [sp, #16]
   d8e62:	2800      	cmp	r0, #0
   d8e64:	f47f af76 	bne.w	d8d54 <_strtod_r+0x704>
   d8e68:	e639      	b.n	d8ade <_strtod_r+0x48e>
   d8e6a:	4632      	mov	r2, r6
   d8e6c:	9904      	ldr	r1, [sp, #16]
   d8e6e:	9802      	ldr	r0, [sp, #8]
   d8e70:	f001 fb4e 	bl	da510 <__lshift>
   d8e74:	9004      	str	r0, [sp, #16]
   d8e76:	2800      	cmp	r0, #0
   d8e78:	f47f af6f 	bne.w	d8d5a <_strtod_r+0x70a>
   d8e7c:	e62f      	b.n	d8ade <_strtod_r+0x48e>
   d8e7e:	4629      	mov	r1, r5
   d8e80:	4642      	mov	r2, r8
   d8e82:	9802      	ldr	r0, [sp, #8]
   d8e84:	f001 fb44 	bl	da510 <__lshift>
   d8e88:	4605      	mov	r5, r0
   d8e8a:	2800      	cmp	r0, #0
   d8e8c:	f47f af69 	bne.w	d8d62 <_strtod_r+0x712>
   d8e90:	e625      	b.n	d8ade <_strtod_r+0x48e>
   d8e92:	6923      	ldr	r3, [r4, #16]
   d8e94:	2b01      	cmp	r3, #1
   d8e96:	dc8f      	bgt.n	d8db8 <_strtod_r+0x768>
   d8e98:	e17e      	b.n	d9198 <_strtod_r+0xb48>
   d8e9a:	d161      	bne.n	d8f60 <_strtod_r+0x910>
   d8e9c:	9a07      	ldr	r2, [sp, #28]
   d8e9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8ea2:	b322      	cbz	r2, d8eee <_strtod_r+0x89e>
   d8ea4:	4946      	ldr	r1, [pc, #280]	; (d8fc0 <_strtod_r+0x970>)
   d8ea6:	428b      	cmp	r3, r1
   d8ea8:	465a      	mov	r2, fp
   d8eaa:	d12e      	bne.n	d8f0a <_strtod_r+0x8ba>
   d8eac:	9b03      	ldr	r3, [sp, #12]
   d8eae:	4651      	mov	r1, sl
   d8eb0:	b163      	cbz	r3, d8ecc <_strtod_r+0x87c>
   d8eb2:	4b44      	ldr	r3, [pc, #272]	; (d8fc4 <_strtod_r+0x974>)
   d8eb4:	4013      	ands	r3, r2
   d8eb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8eba:	d807      	bhi.n	d8ecc <_strtod_r+0x87c>
   d8ebc:	0d1b      	lsrs	r3, r3, #20
   d8ebe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ec6:	fa00 f303 	lsl.w	r3, r0, r3
   d8eca:	e001      	b.n	d8ed0 <_strtod_r+0x880>
   d8ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8ed0:	428b      	cmp	r3, r1
   d8ed2:	d11a      	bne.n	d8f0a <_strtod_r+0x8ba>
   d8ed4:	493c      	ldr	r1, [pc, #240]	; (d8fc8 <_strtod_r+0x978>)
   d8ed6:	428a      	cmp	r2, r1
   d8ed8:	d102      	bne.n	d8ee0 <_strtod_r+0x890>
   d8eda:	3301      	adds	r3, #1
   d8edc:	f43f adff 	beq.w	d8ade <_strtod_r+0x48e>
   d8ee0:	4b38      	ldr	r3, [pc, #224]	; (d8fc4 <_strtod_r+0x974>)
   d8ee2:	4013      	ands	r3, r2
   d8ee4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8ee8:	f04f 0a00 	mov.w	sl, #0
   d8eec:	e154      	b.n	d9198 <_strtod_r+0xb48>
   d8eee:	b963      	cbnz	r3, d8f0a <_strtod_r+0x8ba>
   d8ef0:	f1ba 0f00 	cmp.w	sl, #0
   d8ef4:	d109      	bne.n	d8f0a <_strtod_r+0x8ba>
   d8ef6:	e76b      	b.n	d8dd0 <_strtod_r+0x780>
   d8ef8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d8efc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8f00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d8f04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8f08:	e146      	b.n	d9198 <_strtod_r+0xb48>
   d8f0a:	b117      	cbz	r7, d8f12 <_strtod_r+0x8c2>
   d8f0c:	ea17 0f0b 	tst.w	r7, fp
   d8f10:	e002      	b.n	d8f18 <_strtod_r+0x8c8>
   d8f12:	9b06      	ldr	r3, [sp, #24]
   d8f14:	ea13 0f0a 	tst.w	r3, sl
   d8f18:	f000 813e 	beq.w	d9198 <_strtod_r+0xb48>
   d8f1c:	9b07      	ldr	r3, [sp, #28]
   d8f1e:	9a03      	ldr	r2, [sp, #12]
   d8f20:	4650      	mov	r0, sl
   d8f22:	4659      	mov	r1, fp
   d8f24:	b153      	cbz	r3, d8f3c <_strtod_r+0x8ec>
   d8f26:	f7ff fb76 	bl	d8616 <sulp>
   d8f2a:	4602      	mov	r2, r0
   d8f2c:	460b      	mov	r3, r1
   d8f2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d8f32:	f7fe fccf 	bl	d78d4 <__adddf3>
   d8f36:	4682      	mov	sl, r0
   d8f38:	468b      	mov	fp, r1
   d8f3a:	e12d      	b.n	d9198 <_strtod_r+0xb48>
   d8f3c:	f7ff fb6b 	bl	d8616 <sulp>
   d8f40:	4602      	mov	r2, r0
   d8f42:	460b      	mov	r3, r1
   d8f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d8f48:	f7fe fcc2 	bl	d78d0 <__aeabi_dsub>
   d8f4c:	2200      	movs	r2, #0
   d8f4e:	2300      	movs	r3, #0
   d8f50:	4682      	mov	sl, r0
   d8f52:	468b      	mov	fp, r1
   d8f54:	f7ff f8d8 	bl	d8108 <__aeabi_dcmpeq>
   d8f58:	2800      	cmp	r0, #0
   d8f5a:	f47f af49 	bne.w	d8df0 <_strtod_r+0x7a0>
   d8f5e:	e11b      	b.n	d9198 <_strtod_r+0xb48>
   d8f60:	4629      	mov	r1, r5
   d8f62:	4620      	mov	r0, r4
   d8f64:	f001 fc63 	bl	da82e <__ratio>
   d8f68:	ec57 6b10 	vmov	r6, r7, d0
   d8f6c:	2200      	movs	r2, #0
   d8f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8f72:	ee10 0a10 	vmov	r0, s0
   d8f76:	4639      	mov	r1, r7
   d8f78:	f7ff f8da 	bl	d8130 <__aeabi_dcmple>
   d8f7c:	2800      	cmp	r0, #0
   d8f7e:	d042      	beq.n	d9006 <_strtod_r+0x9b6>
   d8f80:	9b07      	ldr	r3, [sp, #28]
   d8f82:	b123      	cbz	r3, d8f8e <_strtod_r+0x93e>
   d8f84:	f04f 0800 	mov.w	r8, #0
   d8f88:	f8df 9040 	ldr.w	r9, [pc, #64]	; d8fcc <_strtod_r+0x97c>
   d8f8c:	e011      	b.n	d8fb2 <_strtod_r+0x962>
   d8f8e:	f1ba 0f00 	cmp.w	sl, #0
   d8f92:	d103      	bne.n	d8f9c <_strtod_r+0x94c>
   d8f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8f98:	b93b      	cbnz	r3, d8faa <_strtod_r+0x95a>
   d8f9a:	e01b      	b.n	d8fd4 <_strtod_r+0x984>
   d8f9c:	f1ba 0f01 	cmp.w	sl, #1
   d8fa0:	d103      	bne.n	d8faa <_strtod_r+0x95a>
   d8fa2:	f1bb 0f00 	cmp.w	fp, #0
   d8fa6:	f43f af23 	beq.w	d8df0 <_strtod_r+0x7a0>
   d8faa:	f8df 9024 	ldr.w	r9, [pc, #36]	; d8fd0 <_strtod_r+0x980>
   d8fae:	f04f 0800 	mov.w	r8, #0
   d8fb2:	2600      	movs	r6, #0
   d8fb4:	4f05      	ldr	r7, [pc, #20]	; (d8fcc <_strtod_r+0x97c>)
   d8fb6:	e039      	b.n	d902c <_strtod_r+0x9dc>
   d8fb8:	fffffc02 	.word	0xfffffc02
   d8fbc:	fffffbe2 	.word	0xfffffbe2
   d8fc0:	000fffff 	.word	0x000fffff
   d8fc4:	7ff00000 	.word	0x7ff00000
   d8fc8:	7fefffff 	.word	0x7fefffff
   d8fcc:	3ff00000 	.word	0x3ff00000
   d8fd0:	bff00000 	.word	0xbff00000
   d8fd4:	2200      	movs	r2, #0
   d8fd6:	4b98      	ldr	r3, [pc, #608]	; (d9238 <_strtod_r+0xbe8>)
   d8fd8:	4630      	mov	r0, r6
   d8fda:	4639      	mov	r1, r7
   d8fdc:	f7ff f89e 	bl	d811c <__aeabi_dcmplt>
   d8fe0:	b940      	cbnz	r0, d8ff4 <_strtod_r+0x9a4>
   d8fe2:	4630      	mov	r0, r6
   d8fe4:	4639      	mov	r1, r7
   d8fe6:	2200      	movs	r2, #0
   d8fe8:	4b94      	ldr	r3, [pc, #592]	; (d923c <_strtod_r+0xbec>)
   d8fea:	f7fe fe25 	bl	d7c38 <__aeabi_dmul>
   d8fee:	4606      	mov	r6, r0
   d8ff0:	460f      	mov	r7, r1
   d8ff2:	e001      	b.n	d8ff8 <_strtod_r+0x9a8>
   d8ff4:	4f91      	ldr	r7, [pc, #580]	; (d923c <_strtod_r+0xbec>)
   d8ff6:	2600      	movs	r6, #0
   d8ff8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d8ffc:	9614      	str	r6, [sp, #80]	; 0x50
   d8ffe:	9315      	str	r3, [sp, #84]	; 0x54
   d9000:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d9004:	e012      	b.n	d902c <_strtod_r+0x9dc>
   d9006:	4b8d      	ldr	r3, [pc, #564]	; (d923c <_strtod_r+0xbec>)
   d9008:	4630      	mov	r0, r6
   d900a:	4639      	mov	r1, r7
   d900c:	2200      	movs	r2, #0
   d900e:	f7fe fe13 	bl	d7c38 <__aeabi_dmul>
   d9012:	9b07      	ldr	r3, [sp, #28]
   d9014:	4606      	mov	r6, r0
   d9016:	460f      	mov	r7, r1
   d9018:	b923      	cbnz	r3, d9024 <_strtod_r+0x9d4>
   d901a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d901e:	900e      	str	r0, [sp, #56]	; 0x38
   d9020:	930f      	str	r3, [sp, #60]	; 0x3c
   d9022:	e001      	b.n	d9028 <_strtod_r+0x9d8>
   d9024:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9028:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d902c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9030:	0d1b      	lsrs	r3, r3, #20
   d9032:	051b      	lsls	r3, r3, #20
   d9034:	9306      	str	r3, [sp, #24]
   d9036:	9a06      	ldr	r2, [sp, #24]
   d9038:	4b81      	ldr	r3, [pc, #516]	; (d9240 <_strtod_r+0xbf0>)
   d903a:	429a      	cmp	r2, r3
   d903c:	d12b      	bne.n	d9096 <_strtod_r+0xa46>
   d903e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9042:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9046:	ec4b ab10 	vmov	d0, sl, fp
   d904a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d904e:	f001 fb2b 	bl	da6a8 <__ulp>
   d9052:	4640      	mov	r0, r8
   d9054:	ec53 2b10 	vmov	r2, r3, d0
   d9058:	4649      	mov	r1, r9
   d905a:	f7fe fded 	bl	d7c38 <__aeabi_dmul>
   d905e:	4652      	mov	r2, sl
   d9060:	465b      	mov	r3, fp
   d9062:	f7fe fc37 	bl	d78d4 <__adddf3>
   d9066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d906a:	0d1b      	lsrs	r3, r3, #20
   d906c:	4a75      	ldr	r2, [pc, #468]	; (d9244 <_strtod_r+0xbf4>)
   d906e:	051b      	lsls	r3, r3, #20
   d9070:	4293      	cmp	r3, r2
   d9072:	4682      	mov	sl, r0
   d9074:	d90c      	bls.n	d9090 <_strtod_r+0xa40>
   d9076:	4b74      	ldr	r3, [pc, #464]	; (d9248 <_strtod_r+0xbf8>)
   d9078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d907a:	429a      	cmp	r2, r3
   d907c:	d103      	bne.n	d9086 <_strtod_r+0xa36>
   d907e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9080:	3301      	adds	r3, #1
   d9082:	f43f ad2c 	beq.w	d8ade <_strtod_r+0x48e>
   d9086:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d9248 <_strtod_r+0xbf8>
   d908a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d908e:	e072      	b.n	d9176 <_strtod_r+0xb26>
   d9090:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d9094:	e038      	b.n	d9108 <_strtod_r+0xab8>
   d9096:	9b03      	ldr	r3, [sp, #12]
   d9098:	b333      	cbz	r3, d90e8 <_strtod_r+0xa98>
   d909a:	9b06      	ldr	r3, [sp, #24]
   d909c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d90a0:	d822      	bhi.n	d90e8 <_strtod_r+0xa98>
   d90a2:	a35d      	add	r3, pc, #372	; (adr r3, d9218 <_strtod_r+0xbc8>)
   d90a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90a8:	4630      	mov	r0, r6
   d90aa:	4639      	mov	r1, r7
   d90ac:	f7ff f840 	bl	d8130 <__aeabi_dcmple>
   d90b0:	b1a8      	cbz	r0, d90de <_strtod_r+0xa8e>
   d90b2:	4639      	mov	r1, r7
   d90b4:	4630      	mov	r0, r6
   d90b6:	f7ff f897 	bl	d81e8 <__aeabi_d2uiz>
   d90ba:	2800      	cmp	r0, #0
   d90bc:	bf08      	it	eq
   d90be:	2001      	moveq	r0, #1
   d90c0:	f7fe fd44 	bl	d7b4c <__aeabi_ui2d>
   d90c4:	9b07      	ldr	r3, [sp, #28]
   d90c6:	4606      	mov	r6, r0
   d90c8:	460f      	mov	r7, r1
   d90ca:	b923      	cbnz	r3, d90d6 <_strtod_r+0xa86>
   d90cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d90d0:	9010      	str	r0, [sp, #64]	; 0x40
   d90d2:	9311      	str	r3, [sp, #68]	; 0x44
   d90d4:	e001      	b.n	d90da <_strtod_r+0xa8a>
   d90d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d90da:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d90de:	9a06      	ldr	r2, [sp, #24]
   d90e0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d90e4:	ebc2 0903 	rsb	r9, r2, r3
   d90e8:	ed9d 0b08 	vldr	d0, [sp, #32]
   d90ec:	f001 fadc 	bl	da6a8 <__ulp>
   d90f0:	4640      	mov	r0, r8
   d90f2:	ec53 2b10 	vmov	r2, r3, d0
   d90f6:	4649      	mov	r1, r9
   d90f8:	f7fe fd9e 	bl	d7c38 <__aeabi_dmul>
   d90fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9100:	f7fe fbe8 	bl	d78d4 <__adddf3>
   d9104:	4682      	mov	sl, r0
   d9106:	468b      	mov	fp, r1
   d9108:	9b03      	ldr	r3, [sp, #12]
   d910a:	bba3      	cbnz	r3, d9176 <_strtod_r+0xb26>
   d910c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9110:	0d1b      	lsrs	r3, r3, #20
   d9112:	9a06      	ldr	r2, [sp, #24]
   d9114:	051b      	lsls	r3, r3, #20
   d9116:	429a      	cmp	r2, r3
   d9118:	46d8      	mov	r8, fp
   d911a:	d12c      	bne.n	d9176 <_strtod_r+0xb26>
   d911c:	4639      	mov	r1, r7
   d911e:	4630      	mov	r0, r6
   d9120:	f7ff f83a 	bl	d8198 <__aeabi_d2iz>
   d9124:	f7fe fd22 	bl	d7b6c <__aeabi_i2d>
   d9128:	460b      	mov	r3, r1
   d912a:	4602      	mov	r2, r0
   d912c:	4639      	mov	r1, r7
   d912e:	4630      	mov	r0, r6
   d9130:	f7fe fbce 	bl	d78d0 <__aeabi_dsub>
   d9134:	9b07      	ldr	r3, [sp, #28]
   d9136:	4606      	mov	r6, r0
   d9138:	460f      	mov	r7, r1
   d913a:	b92b      	cbnz	r3, d9148 <_strtod_r+0xaf8>
   d913c:	f1ba 0f00 	cmp.w	sl, #0
   d9140:	d102      	bne.n	d9148 <_strtod_r+0xaf8>
   d9142:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9146:	b183      	cbz	r3, d916a <_strtod_r+0xb1a>
   d9148:	a335      	add	r3, pc, #212	; (adr r3, d9220 <_strtod_r+0xbd0>)
   d914a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d914e:	4630      	mov	r0, r6
   d9150:	4639      	mov	r1, r7
   d9152:	f7fe ffe3 	bl	d811c <__aeabi_dcmplt>
   d9156:	2800      	cmp	r0, #0
   d9158:	d131      	bne.n	d91be <_strtod_r+0xb6e>
   d915a:	a333      	add	r3, pc, #204	; (adr r3, d9228 <_strtod_r+0xbd8>)
   d915c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9160:	4630      	mov	r0, r6
   d9162:	4639      	mov	r1, r7
   d9164:	f7fe fff8 	bl	d8158 <__aeabi_dcmpgt>
   d9168:	e004      	b.n	d9174 <_strtod_r+0xb24>
   d916a:	a331      	add	r3, pc, #196	; (adr r3, d9230 <_strtod_r+0xbe0>)
   d916c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9170:	f7fe ffd4 	bl	d811c <__aeabi_dcmplt>
   d9174:	bb18      	cbnz	r0, d91be <_strtod_r+0xb6e>
   d9176:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9178:	9802      	ldr	r0, [sp, #8]
   d917a:	f001 f804 	bl	da186 <_Bfree>
   d917e:	9904      	ldr	r1, [sp, #16]
   d9180:	9802      	ldr	r0, [sp, #8]
   d9182:	f001 f800 	bl	da186 <_Bfree>
   d9186:	4629      	mov	r1, r5
   d9188:	9802      	ldr	r0, [sp, #8]
   d918a:	f000 fffc 	bl	da186 <_Bfree>
   d918e:	4621      	mov	r1, r4
   d9190:	9802      	ldr	r0, [sp, #8]
   d9192:	f000 fff8 	bl	da186 <_Bfree>
   d9196:	e56d      	b.n	d8c74 <_strtod_r+0x624>
   d9198:	9b03      	ldr	r3, [sp, #12]
   d919a:	b183      	cbz	r3, d91be <_strtod_r+0xb6e>
   d919c:	4b2b      	ldr	r3, [pc, #172]	; (d924c <_strtod_r+0xbfc>)
   d919e:	930b      	str	r3, [sp, #44]	; 0x2c
   d91a0:	2300      	movs	r3, #0
   d91a2:	930a      	str	r3, [sp, #40]	; 0x28
   d91a4:	4650      	mov	r0, sl
   d91a6:	4659      	mov	r1, fp
   d91a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d91ac:	f7fe fd44 	bl	d7c38 <__aeabi_dmul>
   d91b0:	4682      	mov	sl, r0
   d91b2:	468b      	mov	fp, r1
   d91b4:	b919      	cbnz	r1, d91be <_strtod_r+0xb6e>
   d91b6:	b910      	cbnz	r0, d91be <_strtod_r+0xb6e>
   d91b8:	9a02      	ldr	r2, [sp, #8]
   d91ba:	2322      	movs	r3, #34	; 0x22
   d91bc:	6013      	str	r3, [r2, #0]
   d91be:	9918      	ldr	r1, [sp, #96]	; 0x60
   d91c0:	9802      	ldr	r0, [sp, #8]
   d91c2:	f000 ffe0 	bl	da186 <_Bfree>
   d91c6:	9904      	ldr	r1, [sp, #16]
   d91c8:	9802      	ldr	r0, [sp, #8]
   d91ca:	f000 ffdc 	bl	da186 <_Bfree>
   d91ce:	4629      	mov	r1, r5
   d91d0:	9802      	ldr	r0, [sp, #8]
   d91d2:	f000 ffd8 	bl	da186 <_Bfree>
   d91d6:	9905      	ldr	r1, [sp, #20]
   d91d8:	9802      	ldr	r0, [sp, #8]
   d91da:	f000 ffd4 	bl	da186 <_Bfree>
   d91de:	4621      	mov	r1, r4
   d91e0:	9802      	ldr	r0, [sp, #8]
   d91e2:	f000 ffd0 	bl	da186 <_Bfree>
   d91e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d91e8:	b113      	cbz	r3, d91f0 <_strtod_r+0xba0>
   d91ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d91ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d91ee:	6013      	str	r3, [r2, #0]
   d91f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d91f2:	b11b      	cbz	r3, d91fc <_strtod_r+0xbac>
   d91f4:	4652      	mov	r2, sl
   d91f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d91fa:	e007      	b.n	d920c <_strtod_r+0xbbc>
   d91fc:	4652      	mov	r2, sl
   d91fe:	465b      	mov	r3, fp
   d9200:	e004      	b.n	d920c <_strtod_r+0xbbc>
   d9202:	2500      	movs	r5, #0
   d9204:	462a      	mov	r2, r5
   d9206:	2101      	movs	r1, #1
   d9208:	f7ff bb41 	b.w	d888e <_strtod_r+0x23e>
   d920c:	ec43 2b10 	vmov	d0, r2, r3
   d9210:	b01d      	add	sp, #116	; 0x74
   d9212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9216:	bf00      	nop
   d9218:	ffc00000 	.word	0xffc00000
   d921c:	41dfffff 	.word	0x41dfffff
   d9220:	94a03595 	.word	0x94a03595
   d9224:	3fdfffff 	.word	0x3fdfffff
   d9228:	35afe535 	.word	0x35afe535
   d922c:	3fe00000 	.word	0x3fe00000
   d9230:	94a03595 	.word	0x94a03595
   d9234:	3fcfffff 	.word	0x3fcfffff
   d9238:	3ff00000 	.word	0x3ff00000
   d923c:	3fe00000 	.word	0x3fe00000
   d9240:	7fe00000 	.word	0x7fe00000
   d9244:	7c9fffff 	.word	0x7c9fffff
   d9248:	7fefffff 	.word	0x7fefffff
   d924c:	39500000 	.word	0x39500000

000d9250 <strtof>:
   d9250:	b538      	push	{r3, r4, r5, lr}
   d9252:	4b0e      	ldr	r3, [pc, #56]	; (d928c <strtof+0x3c>)
   d9254:	460a      	mov	r2, r1
   d9256:	4601      	mov	r1, r0
   d9258:	6818      	ldr	r0, [r3, #0]
   d925a:	f7ff f9f9 	bl	d8650 <_strtod_r>
   d925e:	ec55 4b10 	vmov	r4, r5, d0
   d9262:	ee10 2a10 	vmov	r2, s0
   d9266:	462b      	mov	r3, r5
   d9268:	ee10 0a10 	vmov	r0, s0
   d926c:	4629      	mov	r1, r5
   d926e:	f7fe ff7d 	bl	d816c <__aeabi_dcmpun>
   d9272:	b120      	cbz	r0, d927e <strtof+0x2e>
   d9274:	2000      	movs	r0, #0
   d9276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d927a:	f001 bb4d 	b.w	da918 <nanf>
   d927e:	4620      	mov	r0, r4
   d9280:	4629      	mov	r1, r5
   d9282:	f7fe ffd1 	bl	d8228 <__aeabi_d2f>
   d9286:	ee00 0a10 	vmov	s0, r0
   d928a:	bd38      	pop	{r3, r4, r5, pc}
   d928c:	2003e178 	.word	0x2003e178

000d9290 <_strtol_r>:
   d9290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9294:	4680      	mov	r8, r0
   d9296:	4840      	ldr	r0, [pc, #256]	; (d9398 <_strtol_r+0x108>)
   d9298:	f8d0 9000 	ldr.w	r9, [r0]
   d929c:	460f      	mov	r7, r1
   d929e:	463d      	mov	r5, r7
   d92a0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d92a4:	eb09 0004 	add.w	r0, r9, r4
   d92a8:	7840      	ldrb	r0, [r0, #1]
   d92aa:	f000 0008 	and.w	r0, r0, #8
   d92ae:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d92b2:	b108      	cbz	r0, d92b8 <_strtol_r+0x28>
   d92b4:	462f      	mov	r7, r5
   d92b6:	e7f2      	b.n	d929e <_strtol_r+0xe>
   d92b8:	2c2d      	cmp	r4, #45	; 0x2d
   d92ba:	d103      	bne.n	d92c4 <_strtol_r+0x34>
   d92bc:	1cbd      	adds	r5, r7, #2
   d92be:	787c      	ldrb	r4, [r7, #1]
   d92c0:	2601      	movs	r6, #1
   d92c2:	e003      	b.n	d92cc <_strtol_r+0x3c>
   d92c4:	2c2b      	cmp	r4, #43	; 0x2b
   d92c6:	bf04      	itt	eq
   d92c8:	787c      	ldrbeq	r4, [r7, #1]
   d92ca:	1cbd      	addeq	r5, r7, #2
   d92cc:	b113      	cbz	r3, d92d4 <_strtol_r+0x44>
   d92ce:	2b10      	cmp	r3, #16
   d92d0:	d10a      	bne.n	d92e8 <_strtol_r+0x58>
   d92d2:	e05b      	b.n	d938c <_strtol_r+0xfc>
   d92d4:	2c30      	cmp	r4, #48	; 0x30
   d92d6:	d157      	bne.n	d9388 <_strtol_r+0xf8>
   d92d8:	7828      	ldrb	r0, [r5, #0]
   d92da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d92de:	2858      	cmp	r0, #88	; 0x58
   d92e0:	d14d      	bne.n	d937e <_strtol_r+0xee>
   d92e2:	786c      	ldrb	r4, [r5, #1]
   d92e4:	2310      	movs	r3, #16
   d92e6:	3502      	adds	r5, #2
   d92e8:	2e00      	cmp	r6, #0
   d92ea:	bf14      	ite	ne
   d92ec:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d92f0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d92f4:	2700      	movs	r7, #0
   d92f6:	fbbc faf3 	udiv	sl, ip, r3
   d92fa:	4638      	mov	r0, r7
   d92fc:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9300:	eb09 0e04 	add.w	lr, r9, r4
   d9304:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9308:	f01e 0f04 	tst.w	lr, #4
   d930c:	d001      	beq.n	d9312 <_strtol_r+0x82>
   d930e:	3c30      	subs	r4, #48	; 0x30
   d9310:	e00b      	b.n	d932a <_strtol_r+0x9a>
   d9312:	f01e 0e03 	ands.w	lr, lr, #3
   d9316:	d01b      	beq.n	d9350 <_strtol_r+0xc0>
   d9318:	f1be 0f01 	cmp.w	lr, #1
   d931c:	bf0c      	ite	eq
   d931e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9322:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9326:	ebce 0404 	rsb	r4, lr, r4
   d932a:	42a3      	cmp	r3, r4
   d932c:	dd10      	ble.n	d9350 <_strtol_r+0xc0>
   d932e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d9332:	d00a      	beq.n	d934a <_strtol_r+0xba>
   d9334:	4550      	cmp	r0, sl
   d9336:	d806      	bhi.n	d9346 <_strtol_r+0xb6>
   d9338:	d101      	bne.n	d933e <_strtol_r+0xae>
   d933a:	4564      	cmp	r4, ip
   d933c:	dc03      	bgt.n	d9346 <_strtol_r+0xb6>
   d933e:	fb03 4000 	mla	r0, r3, r0, r4
   d9342:	2701      	movs	r7, #1
   d9344:	e001      	b.n	d934a <_strtol_r+0xba>
   d9346:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d934a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d934e:	e7d7      	b.n	d9300 <_strtol_r+0x70>
   d9350:	1c7b      	adds	r3, r7, #1
   d9352:	d10c      	bne.n	d936e <_strtol_r+0xde>
   d9354:	2e00      	cmp	r6, #0
   d9356:	f04f 0322 	mov.w	r3, #34	; 0x22
   d935a:	bf14      	ite	ne
   d935c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9360:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9364:	f8c8 3000 	str.w	r3, [r8]
   d9368:	b92a      	cbnz	r2, d9376 <_strtol_r+0xe6>
   d936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d936e:	b106      	cbz	r6, d9372 <_strtol_r+0xe2>
   d9370:	4240      	negs	r0, r0
   d9372:	b172      	cbz	r2, d9392 <_strtol_r+0x102>
   d9374:	b107      	cbz	r7, d9378 <_strtol_r+0xe8>
   d9376:	1e69      	subs	r1, r5, #1
   d9378:	6011      	str	r1, [r2, #0]
   d937a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d937e:	2430      	movs	r4, #48	; 0x30
   d9380:	2b00      	cmp	r3, #0
   d9382:	d1b1      	bne.n	d92e8 <_strtol_r+0x58>
   d9384:	2308      	movs	r3, #8
   d9386:	e7af      	b.n	d92e8 <_strtol_r+0x58>
   d9388:	230a      	movs	r3, #10
   d938a:	e7ad      	b.n	d92e8 <_strtol_r+0x58>
   d938c:	2c30      	cmp	r4, #48	; 0x30
   d938e:	d0a3      	beq.n	d92d8 <_strtol_r+0x48>
   d9390:	e7aa      	b.n	d92e8 <_strtol_r+0x58>
   d9392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9396:	bf00      	nop
   d9398:	2003e114 	.word	0x2003e114

000d939c <strtol>:
   d939c:	4613      	mov	r3, r2
   d939e:	460a      	mov	r2, r1
   d93a0:	4601      	mov	r1, r0
   d93a2:	4802      	ldr	r0, [pc, #8]	; (d93ac <strtol+0x10>)
   d93a4:	6800      	ldr	r0, [r0, #0]
   d93a6:	f7ff bf73 	b.w	d9290 <_strtol_r>
   d93aa:	bf00      	nop
   d93ac:	2003e178 	.word	0x2003e178

000d93b0 <_strtoul_r>:
   d93b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93b4:	4680      	mov	r8, r0
   d93b6:	483c      	ldr	r0, [pc, #240]	; (d94a8 <_strtoul_r+0xf8>)
   d93b8:	f8d0 9000 	ldr.w	r9, [r0]
   d93bc:	460e      	mov	r6, r1
   d93be:	4635      	mov	r5, r6
   d93c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d93c4:	eb09 0004 	add.w	r0, r9, r4
   d93c8:	7840      	ldrb	r0, [r0, #1]
   d93ca:	f000 0008 	and.w	r0, r0, #8
   d93ce:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d93d2:	b108      	cbz	r0, d93d8 <_strtoul_r+0x28>
   d93d4:	462e      	mov	r6, r5
   d93d6:	e7f2      	b.n	d93be <_strtoul_r+0xe>
   d93d8:	2c2d      	cmp	r4, #45	; 0x2d
   d93da:	d103      	bne.n	d93e4 <_strtoul_r+0x34>
   d93dc:	1cb5      	adds	r5, r6, #2
   d93de:	7874      	ldrb	r4, [r6, #1]
   d93e0:	2701      	movs	r7, #1
   d93e2:	e003      	b.n	d93ec <_strtoul_r+0x3c>
   d93e4:	2c2b      	cmp	r4, #43	; 0x2b
   d93e6:	bf04      	itt	eq
   d93e8:	7874      	ldrbeq	r4, [r6, #1]
   d93ea:	1cb5      	addeq	r5, r6, #2
   d93ec:	b113      	cbz	r3, d93f4 <_strtoul_r+0x44>
   d93ee:	2b10      	cmp	r3, #16
   d93f0:	d10a      	bne.n	d9408 <_strtoul_r+0x58>
   d93f2:	e053      	b.n	d949c <_strtoul_r+0xec>
   d93f4:	2c30      	cmp	r4, #48	; 0x30
   d93f6:	d14f      	bne.n	d9498 <_strtoul_r+0xe8>
   d93f8:	7828      	ldrb	r0, [r5, #0]
   d93fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d93fe:	2858      	cmp	r0, #88	; 0x58
   d9400:	d145      	bne.n	d948e <_strtoul_r+0xde>
   d9402:	786c      	ldrb	r4, [r5, #1]
   d9404:	2310      	movs	r3, #16
   d9406:	3502      	adds	r5, #2
   d9408:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d940c:	2600      	movs	r6, #0
   d940e:	fbbc fcf3 	udiv	ip, ip, r3
   d9412:	fb03 fa0c 	mul.w	sl, r3, ip
   d9416:	ea6f 0a0a 	mvn.w	sl, sl
   d941a:	4630      	mov	r0, r6
   d941c:	eb09 0e04 	add.w	lr, r9, r4
   d9420:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9424:	f01e 0f04 	tst.w	lr, #4
   d9428:	d001      	beq.n	d942e <_strtoul_r+0x7e>
   d942a:	3c30      	subs	r4, #48	; 0x30
   d942c:	e00b      	b.n	d9446 <_strtoul_r+0x96>
   d942e:	f01e 0e03 	ands.w	lr, lr, #3
   d9432:	d01a      	beq.n	d946a <_strtoul_r+0xba>
   d9434:	f1be 0f01 	cmp.w	lr, #1
   d9438:	bf0c      	ite	eq
   d943a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d943e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9442:	ebce 0404 	rsb	r4, lr, r4
   d9446:	42a3      	cmp	r3, r4
   d9448:	dd0f      	ble.n	d946a <_strtoul_r+0xba>
   d944a:	2e00      	cmp	r6, #0
   d944c:	db08      	blt.n	d9460 <_strtoul_r+0xb0>
   d944e:	4560      	cmp	r0, ip
   d9450:	d806      	bhi.n	d9460 <_strtoul_r+0xb0>
   d9452:	d101      	bne.n	d9458 <_strtoul_r+0xa8>
   d9454:	4554      	cmp	r4, sl
   d9456:	dc03      	bgt.n	d9460 <_strtoul_r+0xb0>
   d9458:	fb03 4000 	mla	r0, r3, r0, r4
   d945c:	2601      	movs	r6, #1
   d945e:	e001      	b.n	d9464 <_strtoul_r+0xb4>
   d9460:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9464:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9468:	e7d8      	b.n	d941c <_strtoul_r+0x6c>
   d946a:	2e00      	cmp	r6, #0
   d946c:	da07      	bge.n	d947e <_strtoul_r+0xce>
   d946e:	2322      	movs	r3, #34	; 0x22
   d9470:	f8c8 3000 	str.w	r3, [r8]
   d9474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9478:	b92a      	cbnz	r2, d9486 <_strtoul_r+0xd6>
   d947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d947e:	b107      	cbz	r7, d9482 <_strtoul_r+0xd2>
   d9480:	4240      	negs	r0, r0
   d9482:	b172      	cbz	r2, d94a2 <_strtoul_r+0xf2>
   d9484:	b106      	cbz	r6, d9488 <_strtoul_r+0xd8>
   d9486:	1e69      	subs	r1, r5, #1
   d9488:	6011      	str	r1, [r2, #0]
   d948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d948e:	2430      	movs	r4, #48	; 0x30
   d9490:	2b00      	cmp	r3, #0
   d9492:	d1b9      	bne.n	d9408 <_strtoul_r+0x58>
   d9494:	2308      	movs	r3, #8
   d9496:	e7b7      	b.n	d9408 <_strtoul_r+0x58>
   d9498:	230a      	movs	r3, #10
   d949a:	e7b5      	b.n	d9408 <_strtoul_r+0x58>
   d949c:	2c30      	cmp	r4, #48	; 0x30
   d949e:	d0ab      	beq.n	d93f8 <_strtoul_r+0x48>
   d94a0:	e7b2      	b.n	d9408 <_strtoul_r+0x58>
   d94a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94a6:	bf00      	nop
   d94a8:	2003e114 	.word	0x2003e114

000d94ac <strtoul>:
   d94ac:	4613      	mov	r3, r2
   d94ae:	460a      	mov	r2, r1
   d94b0:	4601      	mov	r1, r0
   d94b2:	4802      	ldr	r0, [pc, #8]	; (d94bc <strtoul+0x10>)
   d94b4:	6800      	ldr	r0, [r0, #0]
   d94b6:	f7ff bf7b 	b.w	d93b0 <_strtoul_r>
   d94ba:	bf00      	nop
   d94bc:	2003e178 	.word	0x2003e178

000d94c0 <__tzcalc_limits>:
   d94c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d94c4:	4604      	mov	r4, r0
   d94c6:	f000 fd8d 	bl	d9fe4 <__gettzinfo>
   d94ca:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d94ce:	429c      	cmp	r4, r3
   d94d0:	f340 8096 	ble.w	d9600 <__tzcalc_limits+0x140>
   d94d4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d94d8:	18e3      	adds	r3, r4, r3
   d94da:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d94de:	109b      	asrs	r3, r3, #2
   d94e0:	f240 156d 	movw	r5, #365	; 0x16d
   d94e4:	fb05 3502 	mla	r5, r5, r2, r3
   d94e8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d94ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d94f0:	fb92 f3f3 	sdiv	r3, r2, r3
   d94f4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d94f8:	442b      	add	r3, r5
   d94fa:	18a5      	adds	r5, r4, r2
   d94fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9500:	fb95 f5f2 	sdiv	r5, r5, r2
   d9504:	441d      	add	r5, r3
   d9506:	2364      	movs	r3, #100	; 0x64
   d9508:	fb94 f7f2 	sdiv	r7, r4, r2
   d950c:	fb94 f6f3 	sdiv	r6, r4, r3
   d9510:	fb02 4717 	mls	r7, r2, r7, r4
   d9514:	fb03 4616 	mls	r6, r3, r6, r4
   d9518:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d951c:	fab7 fe87 	clz	lr, r7
   d9520:	9301      	str	r3, [sp, #4]
   d9522:	f004 0303 	and.w	r3, r4, #3
   d9526:	6044      	str	r4, [r0, #4]
   d9528:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d952c:	4601      	mov	r1, r0
   d952e:	9300      	str	r3, [sp, #0]
   d9530:	f04f 0c07 	mov.w	ip, #7
   d9534:	7a0b      	ldrb	r3, [r1, #8]
   d9536:	2b4a      	cmp	r3, #74	; 0x4a
   d9538:	d10e      	bne.n	d9558 <__tzcalc_limits+0x98>
   d953a:	694b      	ldr	r3, [r1, #20]
   d953c:	9a00      	ldr	r2, [sp, #0]
   d953e:	18ec      	adds	r4, r5, r3
   d9540:	b902      	cbnz	r2, d9544 <__tzcalc_limits+0x84>
   d9542:	b906      	cbnz	r6, d9546 <__tzcalc_limits+0x86>
   d9544:	b927      	cbnz	r7, d9550 <__tzcalc_limits+0x90>
   d9546:	2b3b      	cmp	r3, #59	; 0x3b
   d9548:	bfd4      	ite	le
   d954a:	2300      	movle	r3, #0
   d954c:	2301      	movgt	r3, #1
   d954e:	e000      	b.n	d9552 <__tzcalc_limits+0x92>
   d9550:	2300      	movs	r3, #0
   d9552:	4423      	add	r3, r4
   d9554:	3b01      	subs	r3, #1
   d9556:	e03f      	b.n	d95d8 <__tzcalc_limits+0x118>
   d9558:	2b44      	cmp	r3, #68	; 0x44
   d955a:	d102      	bne.n	d9562 <__tzcalc_limits+0xa2>
   d955c:	694b      	ldr	r3, [r1, #20]
   d955e:	442b      	add	r3, r5
   d9560:	e03a      	b.n	d95d8 <__tzcalc_limits+0x118>
   d9562:	9b00      	ldr	r3, [sp, #0]
   d9564:	b92b      	cbnz	r3, d9572 <__tzcalc_limits+0xb2>
   d9566:	2e00      	cmp	r6, #0
   d9568:	bf0c      	ite	eq
   d956a:	46f0      	moveq	r8, lr
   d956c:	f04f 0801 	movne.w	r8, #1
   d9570:	e000      	b.n	d9574 <__tzcalc_limits+0xb4>
   d9572:	46f0      	mov	r8, lr
   d9574:	4b24      	ldr	r3, [pc, #144]	; (d9608 <__tzcalc_limits+0x148>)
   d9576:	68cc      	ldr	r4, [r1, #12]
   d9578:	2230      	movs	r2, #48	; 0x30
   d957a:	fb02 3808 	mla	r8, r2, r8, r3
   d957e:	f1a8 0a04 	sub.w	sl, r8, #4
   d9582:	46a9      	mov	r9, r5
   d9584:	2301      	movs	r3, #1
   d9586:	42a3      	cmp	r3, r4
   d9588:	da04      	bge.n	d9594 <__tzcalc_limits+0xd4>
   d958a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d958e:	3301      	adds	r3, #1
   d9590:	44d9      	add	r9, fp
   d9592:	e7f8      	b.n	d9586 <__tzcalc_limits+0xc6>
   d9594:	f109 0304 	add.w	r3, r9, #4
   d9598:	fb93 fbfc 	sdiv	fp, r3, ip
   d959c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d95a0:	2c01      	cmp	r4, #1
   d95a2:	ebca 0a03 	rsb	sl, sl, r3
   d95a6:	694b      	ldr	r3, [r1, #20]
   d95a8:	bfb8      	it	lt
   d95aa:	2401      	movlt	r4, #1
   d95ac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d95b0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d95b4:	690b      	ldr	r3, [r1, #16]
   d95b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d95ba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d95be:	bf48      	it	mi
   d95c0:	f10a 0a07 	addmi.w	sl, sl, #7
   d95c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d95c8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d95cc:	4453      	add	r3, sl
   d95ce:	42a3      	cmp	r3, r4
   d95d0:	db01      	blt.n	d95d6 <__tzcalc_limits+0x116>
   d95d2:	3b07      	subs	r3, #7
   d95d4:	e7fb      	b.n	d95ce <__tzcalc_limits+0x10e>
   d95d6:	444b      	add	r3, r9
   d95d8:	698c      	ldr	r4, [r1, #24]
   d95da:	4a0c      	ldr	r2, [pc, #48]	; (d960c <__tzcalc_limits+0x14c>)
   d95dc:	fb02 4303 	mla	r3, r2, r3, r4
   d95e0:	6a0c      	ldr	r4, [r1, #32]
   d95e2:	4423      	add	r3, r4
   d95e4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d95e8:	9b01      	ldr	r3, [sp, #4]
   d95ea:	4299      	cmp	r1, r3
   d95ec:	d1a2      	bne.n	d9534 <__tzcalc_limits+0x74>
   d95ee:	69c3      	ldr	r3, [r0, #28]
   d95f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d95f2:	4293      	cmp	r3, r2
   d95f4:	bfac      	ite	ge
   d95f6:	2300      	movge	r3, #0
   d95f8:	2301      	movlt	r3, #1
   d95fa:	6003      	str	r3, [r0, #0]
   d95fc:	2001      	movs	r0, #1
   d95fe:	e000      	b.n	d9602 <__tzcalc_limits+0x142>
   d9600:	2000      	movs	r0, #0
   d9602:	b003      	add	sp, #12
   d9604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9608:	000db1b4 	.word	0x000db1b4
   d960c:	00015180 	.word	0x00015180

000d9610 <__tz_lock>:
   d9610:	4770      	bx	lr

000d9612 <__tz_unlock>:
   d9612:	4770      	bx	lr

000d9614 <_tzset_unlocked>:
   d9614:	4b01      	ldr	r3, [pc, #4]	; (d961c <_tzset_unlocked+0x8>)
   d9616:	6818      	ldr	r0, [r3, #0]
   d9618:	f000 b802 	b.w	d9620 <_tzset_unlocked_r>
   d961c:	2003e178 	.word	0x2003e178

000d9620 <_tzset_unlocked_r>:
   d9620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9624:	b08d      	sub	sp, #52	; 0x34
   d9626:	4607      	mov	r7, r0
   d9628:	f000 fcdc 	bl	d9fe4 <__gettzinfo>
   d962c:	49b0      	ldr	r1, [pc, #704]	; (d98f0 <_tzset_unlocked_r+0x2d0>)
   d962e:	4eb1      	ldr	r6, [pc, #708]	; (d98f4 <_tzset_unlocked_r+0x2d4>)
   d9630:	4604      	mov	r4, r0
   d9632:	4638      	mov	r0, r7
   d9634:	f000 fcce 	bl	d9fd4 <_getenv_r>
   d9638:	4605      	mov	r5, r0
   d963a:	b960      	cbnz	r0, d9656 <_tzset_unlocked_r+0x36>
   d963c:	4bae      	ldr	r3, [pc, #696]	; (d98f8 <_tzset_unlocked_r+0x2d8>)
   d963e:	4aaf      	ldr	r2, [pc, #700]	; (d98fc <_tzset_unlocked_r+0x2dc>)
   d9640:	6018      	str	r0, [r3, #0]
   d9642:	4baf      	ldr	r3, [pc, #700]	; (d9900 <_tzset_unlocked_r+0x2e0>)
   d9644:	6018      	str	r0, [r3, #0]
   d9646:	4baf      	ldr	r3, [pc, #700]	; (d9904 <_tzset_unlocked_r+0x2e4>)
   d9648:	6830      	ldr	r0, [r6, #0]
   d964a:	601a      	str	r2, [r3, #0]
   d964c:	605a      	str	r2, [r3, #4]
   d964e:	f7fc f9c7 	bl	d59e0 <free>
   d9652:	6035      	str	r5, [r6, #0]
   d9654:	e148      	b.n	d98e8 <_tzset_unlocked_r+0x2c8>
   d9656:	6831      	ldr	r1, [r6, #0]
   d9658:	b979      	cbnz	r1, d967a <_tzset_unlocked_r+0x5a>
   d965a:	6830      	ldr	r0, [r6, #0]
   d965c:	f7fc f9c0 	bl	d59e0 <free>
   d9660:	4628      	mov	r0, r5
   d9662:	f7fe ffa8 	bl	d85b6 <strlen>
   d9666:	1c41      	adds	r1, r0, #1
   d9668:	4638      	mov	r0, r7
   d966a:	f7fc f9e1 	bl	d5a30 <_malloc_r>
   d966e:	6030      	str	r0, [r6, #0]
   d9670:	b148      	cbz	r0, d9686 <_tzset_unlocked_r+0x66>
   d9672:	4629      	mov	r1, r5
   d9674:	f7fe ff7c 	bl	d8570 <strcpy>
   d9678:	e005      	b.n	d9686 <_tzset_unlocked_r+0x66>
   d967a:	f7fe ff6f 	bl	d855c <strcmp>
   d967e:	2800      	cmp	r0, #0
   d9680:	f000 8132 	beq.w	d98e8 <_tzset_unlocked_r+0x2c8>
   d9684:	e7e9      	b.n	d965a <_tzset_unlocked_r+0x3a>
   d9686:	782b      	ldrb	r3, [r5, #0]
   d9688:	4a9f      	ldr	r2, [pc, #636]	; (d9908 <_tzset_unlocked_r+0x2e8>)
   d968a:	49a0      	ldr	r1, [pc, #640]	; (d990c <_tzset_unlocked_r+0x2ec>)
   d968c:	2b3a      	cmp	r3, #58	; 0x3a
   d968e:	bf08      	it	eq
   d9690:	3501      	addeq	r5, #1
   d9692:	ae0a      	add	r6, sp, #40	; 0x28
   d9694:	4633      	mov	r3, r6
   d9696:	4628      	mov	r0, r5
   d9698:	f7fc f9b2 	bl	d5a00 <siscanf>
   d969c:	2800      	cmp	r0, #0
   d969e:	f340 8123 	ble.w	d98e8 <_tzset_unlocked_r+0x2c8>
   d96a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d96a4:	18ef      	adds	r7, r5, r3
   d96a6:	5ceb      	ldrb	r3, [r5, r3]
   d96a8:	2b2d      	cmp	r3, #45	; 0x2d
   d96aa:	d103      	bne.n	d96b4 <_tzset_unlocked_r+0x94>
   d96ac:	3701      	adds	r7, #1
   d96ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d96b2:	e003      	b.n	d96bc <_tzset_unlocked_r+0x9c>
   d96b4:	2b2b      	cmp	r3, #43	; 0x2b
   d96b6:	bf08      	it	eq
   d96b8:	3701      	addeq	r7, #1
   d96ba:	2501      	movs	r5, #1
   d96bc:	f10d 0a20 	add.w	sl, sp, #32
   d96c0:	f10d 0b1e 	add.w	fp, sp, #30
   d96c4:	f04f 0800 	mov.w	r8, #0
   d96c8:	9603      	str	r6, [sp, #12]
   d96ca:	f8cd a008 	str.w	sl, [sp, #8]
   d96ce:	9601      	str	r6, [sp, #4]
   d96d0:	f8cd b000 	str.w	fp, [sp]
   d96d4:	4633      	mov	r3, r6
   d96d6:	aa07      	add	r2, sp, #28
   d96d8:	498d      	ldr	r1, [pc, #564]	; (d9910 <_tzset_unlocked_r+0x2f0>)
   d96da:	f8ad 801e 	strh.w	r8, [sp, #30]
   d96de:	4638      	mov	r0, r7
   d96e0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d96e4:	f7fc f98c 	bl	d5a00 <siscanf>
   d96e8:	4540      	cmp	r0, r8
   d96ea:	f340 80fd 	ble.w	d98e8 <_tzset_unlocked_r+0x2c8>
   d96ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d96f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d96f6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d991c <_tzset_unlocked_r+0x2fc>
   d96fa:	213c      	movs	r1, #60	; 0x3c
   d96fc:	fb01 3302 	mla	r3, r1, r2, r3
   d9700:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9704:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9708:	fb01 3302 	mla	r3, r1, r2, r3
   d970c:	435d      	muls	r5, r3
   d970e:	6225      	str	r5, [r4, #32]
   d9710:	4d7c      	ldr	r5, [pc, #496]	; (d9904 <_tzset_unlocked_r+0x2e4>)
   d9712:	4b7d      	ldr	r3, [pc, #500]	; (d9908 <_tzset_unlocked_r+0x2e8>)
   d9714:	602b      	str	r3, [r5, #0]
   d9716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9718:	497c      	ldr	r1, [pc, #496]	; (d990c <_tzset_unlocked_r+0x2ec>)
   d971a:	441f      	add	r7, r3
   d971c:	464a      	mov	r2, r9
   d971e:	4633      	mov	r3, r6
   d9720:	4638      	mov	r0, r7
   d9722:	f7fc f96d 	bl	d5a00 <siscanf>
   d9726:	4540      	cmp	r0, r8
   d9728:	dc08      	bgt.n	d973c <_tzset_unlocked_r+0x11c>
   d972a:	682b      	ldr	r3, [r5, #0]
   d972c:	606b      	str	r3, [r5, #4]
   d972e:	4b72      	ldr	r3, [pc, #456]	; (d98f8 <_tzset_unlocked_r+0x2d8>)
   d9730:	6a22      	ldr	r2, [r4, #32]
   d9732:	601a      	str	r2, [r3, #0]
   d9734:	4b72      	ldr	r3, [pc, #456]	; (d9900 <_tzset_unlocked_r+0x2e0>)
   d9736:	f8c3 8000 	str.w	r8, [r3]
   d973a:	e0d5      	b.n	d98e8 <_tzset_unlocked_r+0x2c8>
   d973c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d973e:	f8c5 9004 	str.w	r9, [r5, #4]
   d9742:	18fd      	adds	r5, r7, r3
   d9744:	5cfb      	ldrb	r3, [r7, r3]
   d9746:	2b2d      	cmp	r3, #45	; 0x2d
   d9748:	d103      	bne.n	d9752 <_tzset_unlocked_r+0x132>
   d974a:	3501      	adds	r5, #1
   d974c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9750:	e003      	b.n	d975a <_tzset_unlocked_r+0x13a>
   d9752:	2b2b      	cmp	r3, #43	; 0x2b
   d9754:	bf08      	it	eq
   d9756:	3501      	addeq	r5, #1
   d9758:	2701      	movs	r7, #1
   d975a:	2300      	movs	r3, #0
   d975c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9760:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9764:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9768:	930a      	str	r3, [sp, #40]	; 0x28
   d976a:	9603      	str	r6, [sp, #12]
   d976c:	f8cd a008 	str.w	sl, [sp, #8]
   d9770:	9601      	str	r6, [sp, #4]
   d9772:	f8cd b000 	str.w	fp, [sp]
   d9776:	4633      	mov	r3, r6
   d9778:	aa07      	add	r2, sp, #28
   d977a:	4965      	ldr	r1, [pc, #404]	; (d9910 <_tzset_unlocked_r+0x2f0>)
   d977c:	4628      	mov	r0, r5
   d977e:	f7fc f93f 	bl	d5a00 <siscanf>
   d9782:	2800      	cmp	r0, #0
   d9784:	dc04      	bgt.n	d9790 <_tzset_unlocked_r+0x170>
   d9786:	6a23      	ldr	r3, [r4, #32]
   d9788:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d978c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d978e:	e00e      	b.n	d97ae <_tzset_unlocked_r+0x18e>
   d9790:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9794:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9798:	213c      	movs	r1, #60	; 0x3c
   d979a:	fb01 3302 	mla	r3, r1, r2, r3
   d979e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d97a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d97a6:	fb01 3302 	mla	r3, r1, r2, r3
   d97aa:	435f      	muls	r7, r3
   d97ac:	63e7      	str	r7, [r4, #60]	; 0x3c
   d97ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d97b0:	4627      	mov	r7, r4
   d97b2:	441d      	add	r5, r3
   d97b4:	f04f 0900 	mov.w	r9, #0
   d97b8:	782b      	ldrb	r3, [r5, #0]
   d97ba:	2b2c      	cmp	r3, #44	; 0x2c
   d97bc:	bf08      	it	eq
   d97be:	3501      	addeq	r5, #1
   d97c0:	f895 8000 	ldrb.w	r8, [r5]
   d97c4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d97c8:	d126      	bne.n	d9818 <_tzset_unlocked_r+0x1f8>
   d97ca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d97ce:	9302      	str	r3, [sp, #8]
   d97d0:	ab09      	add	r3, sp, #36	; 0x24
   d97d2:	9300      	str	r3, [sp, #0]
   d97d4:	9603      	str	r6, [sp, #12]
   d97d6:	9601      	str	r6, [sp, #4]
   d97d8:	4633      	mov	r3, r6
   d97da:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d97de:	494d      	ldr	r1, [pc, #308]	; (d9914 <_tzset_unlocked_r+0x2f4>)
   d97e0:	4628      	mov	r0, r5
   d97e2:	f7fc f90d 	bl	d5a00 <siscanf>
   d97e6:	2803      	cmp	r0, #3
   d97e8:	d17e      	bne.n	d98e8 <_tzset_unlocked_r+0x2c8>
   d97ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d97ee:	1e4b      	subs	r3, r1, #1
   d97f0:	2b0b      	cmp	r3, #11
   d97f2:	d879      	bhi.n	d98e8 <_tzset_unlocked_r+0x2c8>
   d97f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d97f8:	1e53      	subs	r3, r2, #1
   d97fa:	2b04      	cmp	r3, #4
   d97fc:	d874      	bhi.n	d98e8 <_tzset_unlocked_r+0x2c8>
   d97fe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9802:	2b06      	cmp	r3, #6
   d9804:	d870      	bhi.n	d98e8 <_tzset_unlocked_r+0x2c8>
   d9806:	f887 8008 	strb.w	r8, [r7, #8]
   d980a:	60f9      	str	r1, [r7, #12]
   d980c:	613a      	str	r2, [r7, #16]
   d980e:	617b      	str	r3, [r7, #20]
   d9810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9812:	eb05 0803 	add.w	r8, r5, r3
   d9816:	e02a      	b.n	d986e <_tzset_unlocked_r+0x24e>
   d9818:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d981c:	bf06      	itte	eq
   d981e:	3501      	addeq	r5, #1
   d9820:	4643      	moveq	r3, r8
   d9822:	2344      	movne	r3, #68	; 0x44
   d9824:	220a      	movs	r2, #10
   d9826:	a90b      	add	r1, sp, #44	; 0x2c
   d9828:	4628      	mov	r0, r5
   d982a:	9305      	str	r3, [sp, #20]
   d982c:	f7ff fe3e 	bl	d94ac <strtoul>
   d9830:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9834:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9838:	4545      	cmp	r5, r8
   d983a:	9b05      	ldr	r3, [sp, #20]
   d983c:	d114      	bne.n	d9868 <_tzset_unlocked_r+0x248>
   d983e:	234d      	movs	r3, #77	; 0x4d
   d9840:	f1b9 0f00 	cmp.w	r9, #0
   d9844:	d107      	bne.n	d9856 <_tzset_unlocked_r+0x236>
   d9846:	7223      	strb	r3, [r4, #8]
   d9848:	2303      	movs	r3, #3
   d984a:	60e3      	str	r3, [r4, #12]
   d984c:	2302      	movs	r3, #2
   d984e:	6123      	str	r3, [r4, #16]
   d9850:	f8c4 9014 	str.w	r9, [r4, #20]
   d9854:	e00b      	b.n	d986e <_tzset_unlocked_r+0x24e>
   d9856:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d985a:	230b      	movs	r3, #11
   d985c:	62a3      	str	r3, [r4, #40]	; 0x28
   d985e:	2301      	movs	r3, #1
   d9860:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9862:	2300      	movs	r3, #0
   d9864:	6323      	str	r3, [r4, #48]	; 0x30
   d9866:	e002      	b.n	d986e <_tzset_unlocked_r+0x24e>
   d9868:	b280      	uxth	r0, r0
   d986a:	723b      	strb	r3, [r7, #8]
   d986c:	6178      	str	r0, [r7, #20]
   d986e:	2302      	movs	r3, #2
   d9870:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9874:	2300      	movs	r3, #0
   d9876:	f8ad 301e 	strh.w	r3, [sp, #30]
   d987a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d987e:	930a      	str	r3, [sp, #40]	; 0x28
   d9880:	f898 3000 	ldrb.w	r3, [r8]
   d9884:	2b2f      	cmp	r3, #47	; 0x2f
   d9886:	d10b      	bne.n	d98a0 <_tzset_unlocked_r+0x280>
   d9888:	9603      	str	r6, [sp, #12]
   d988a:	f8cd a008 	str.w	sl, [sp, #8]
   d988e:	9601      	str	r6, [sp, #4]
   d9890:	f8cd b000 	str.w	fp, [sp]
   d9894:	4633      	mov	r3, r6
   d9896:	aa07      	add	r2, sp, #28
   d9898:	491f      	ldr	r1, [pc, #124]	; (d9918 <_tzset_unlocked_r+0x2f8>)
   d989a:	4640      	mov	r0, r8
   d989c:	f7fc f8b0 	bl	d5a00 <siscanf>
   d98a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d98a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d98a8:	213c      	movs	r1, #60	; 0x3c
   d98aa:	fb01 3302 	mla	r3, r1, r2, r3
   d98ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d98b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d98b6:	fb01 3302 	mla	r3, r1, r2, r3
   d98ba:	61bb      	str	r3, [r7, #24]
   d98bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d98be:	f109 0901 	add.w	r9, r9, #1
   d98c2:	f1b9 0f02 	cmp.w	r9, #2
   d98c6:	4445      	add	r5, r8
   d98c8:	f107 071c 	add.w	r7, r7, #28
   d98cc:	f47f af74 	bne.w	d97b8 <_tzset_unlocked_r+0x198>
   d98d0:	6860      	ldr	r0, [r4, #4]
   d98d2:	f7ff fdf5 	bl	d94c0 <__tzcalc_limits>
   d98d6:	4b08      	ldr	r3, [pc, #32]	; (d98f8 <_tzset_unlocked_r+0x2d8>)
   d98d8:	6a22      	ldr	r2, [r4, #32]
   d98da:	601a      	str	r2, [r3, #0]
   d98dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d98de:	1a9b      	subs	r3, r3, r2
   d98e0:	4a07      	ldr	r2, [pc, #28]	; (d9900 <_tzset_unlocked_r+0x2e0>)
   d98e2:	bf18      	it	ne
   d98e4:	2301      	movne	r3, #1
   d98e6:	6013      	str	r3, [r2, #0]
   d98e8:	b00d      	add	sp, #52	; 0x34
   d98ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d98ee:	bf00      	nop
   d98f0:	000db270 	.word	0x000db270
   d98f4:	2003e7e0 	.word	0x2003e7e0
   d98f8:	2003e7e8 	.word	0x2003e7e8
   d98fc:	000db273 	.word	0x000db273
   d9900:	2003e7e4 	.word	0x2003e7e4
   d9904:	2003e1b4 	.word	0x2003e1b4
   d9908:	2003e7d3 	.word	0x2003e7d3
   d990c:	000db277 	.word	0x000db277
   d9910:	000db29a 	.word	0x000db29a
   d9914:	000db286 	.word	0x000db286
   d9918:	000db299 	.word	0x000db299
   d991c:	2003e7c8 	.word	0x2003e7c8

000d9920 <rshift>:
   d9920:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9922:	6906      	ldr	r6, [r0, #16]
   d9924:	114b      	asrs	r3, r1, #5
   d9926:	42b3      	cmp	r3, r6
   d9928:	f100 0514 	add.w	r5, r0, #20
   d992c:	da27      	bge.n	d997e <rshift+0x5e>
   d992e:	f011 011f 	ands.w	r1, r1, #31
   d9932:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d9936:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d993a:	d101      	bne.n	d9940 <rshift+0x20>
   d993c:	4629      	mov	r1, r5
   d993e:	e016      	b.n	d996e <rshift+0x4e>
   d9940:	1d14      	adds	r4, r2, #4
   d9942:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d9946:	f1c1 0e20 	rsb	lr, r1, #32
   d994a:	40ca      	lsrs	r2, r1
   d994c:	462b      	mov	r3, r5
   d994e:	42b4      	cmp	r4, r6
   d9950:	d209      	bcs.n	d9966 <rshift+0x46>
   d9952:	6827      	ldr	r7, [r4, #0]
   d9954:	fa07 f70e 	lsl.w	r7, r7, lr
   d9958:	433a      	orrs	r2, r7
   d995a:	f843 2b04 	str.w	r2, [r3], #4
   d995e:	f854 2b04 	ldr.w	r2, [r4], #4
   d9962:	40ca      	lsrs	r2, r1
   d9964:	e7f3      	b.n	d994e <rshift+0x2e>
   d9966:	601a      	str	r2, [r3, #0]
   d9968:	b152      	cbz	r2, d9980 <rshift+0x60>
   d996a:	3304      	adds	r3, #4
   d996c:	e008      	b.n	d9980 <rshift+0x60>
   d996e:	42b2      	cmp	r2, r6
   d9970:	460b      	mov	r3, r1
   d9972:	d205      	bcs.n	d9980 <rshift+0x60>
   d9974:	f852 3b04 	ldr.w	r3, [r2], #4
   d9978:	f841 3b04 	str.w	r3, [r1], #4
   d997c:	e7f7      	b.n	d996e <rshift+0x4e>
   d997e:	462b      	mov	r3, r5
   d9980:	1b5b      	subs	r3, r3, r5
   d9982:	109b      	asrs	r3, r3, #2
   d9984:	6103      	str	r3, [r0, #16]
   d9986:	b903      	cbnz	r3, d998a <rshift+0x6a>
   d9988:	6143      	str	r3, [r0, #20]
   d998a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d998c <__hexdig_fun>:
   d998c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9990:	2b09      	cmp	r3, #9
   d9992:	d801      	bhi.n	d9998 <__hexdig_fun+0xc>
   d9994:	3820      	subs	r0, #32
   d9996:	e00a      	b.n	d99ae <__hexdig_fun+0x22>
   d9998:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d999c:	2b05      	cmp	r3, #5
   d999e:	d801      	bhi.n	d99a4 <__hexdig_fun+0x18>
   d99a0:	3847      	subs	r0, #71	; 0x47
   d99a2:	e004      	b.n	d99ae <__hexdig_fun+0x22>
   d99a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d99a8:	2b05      	cmp	r3, #5
   d99aa:	d802      	bhi.n	d99b2 <__hexdig_fun+0x26>
   d99ac:	3827      	subs	r0, #39	; 0x27
   d99ae:	b2c0      	uxtb	r0, r0
   d99b0:	4770      	bx	lr
   d99b2:	2000      	movs	r0, #0
   d99b4:	4770      	bx	lr

000d99b6 <__gethex>:
   d99b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99ba:	b08b      	sub	sp, #44	; 0x2c
   d99bc:	468a      	mov	sl, r1
   d99be:	4690      	mov	r8, r2
   d99c0:	9306      	str	r3, [sp, #24]
   d99c2:	9002      	str	r0, [sp, #8]
   d99c4:	f7fe fd8a 	bl	d84dc <_localeconv_r>
   d99c8:	6803      	ldr	r3, [r0, #0]
   d99ca:	9303      	str	r3, [sp, #12]
   d99cc:	4618      	mov	r0, r3
   d99ce:	f7fe fdf2 	bl	d85b6 <strlen>
   d99d2:	9b03      	ldr	r3, [sp, #12]
   d99d4:	9001      	str	r0, [sp, #4]
   d99d6:	4403      	add	r3, r0
   d99d8:	f04f 0b00 	mov.w	fp, #0
   d99dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d99e0:	9307      	str	r3, [sp, #28]
   d99e2:	f8da 3000 	ldr.w	r3, [sl]
   d99e6:	3302      	adds	r3, #2
   d99e8:	461f      	mov	r7, r3
   d99ea:	f813 0b01 	ldrb.w	r0, [r3], #1
   d99ee:	2830      	cmp	r0, #48	; 0x30
   d99f0:	d102      	bne.n	d99f8 <__gethex+0x42>
   d99f2:	f10b 0b01 	add.w	fp, fp, #1
   d99f6:	e7f7      	b.n	d99e8 <__gethex+0x32>
   d99f8:	f7ff ffc8 	bl	d998c <__hexdig_fun>
   d99fc:	4604      	mov	r4, r0
   d99fe:	b9e0      	cbnz	r0, d9a3a <__gethex+0x84>
   d9a00:	9a01      	ldr	r2, [sp, #4]
   d9a02:	9903      	ldr	r1, [sp, #12]
   d9a04:	4638      	mov	r0, r7
   d9a06:	f7fe fdde 	bl	d85c6 <strncmp>
   d9a0a:	2800      	cmp	r0, #0
   d9a0c:	d134      	bne.n	d9a78 <__gethex+0xc2>
   d9a0e:	9b01      	ldr	r3, [sp, #4]
   d9a10:	5cf8      	ldrb	r0, [r7, r3]
   d9a12:	18fe      	adds	r6, r7, r3
   d9a14:	f7ff ffba 	bl	d998c <__hexdig_fun>
   d9a18:	b380      	cbz	r0, d9a7c <__gethex+0xc6>
   d9a1a:	4633      	mov	r3, r6
   d9a1c:	7818      	ldrb	r0, [r3, #0]
   d9a1e:	2830      	cmp	r0, #48	; 0x30
   d9a20:	461f      	mov	r7, r3
   d9a22:	f103 0301 	add.w	r3, r3, #1
   d9a26:	d0f9      	beq.n	d9a1c <__gethex+0x66>
   d9a28:	f7ff ffb0 	bl	d998c <__hexdig_fun>
   d9a2c:	fab0 f580 	clz	r5, r0
   d9a30:	096d      	lsrs	r5, r5, #5
   d9a32:	4634      	mov	r4, r6
   d9a34:	f04f 0b01 	mov.w	fp, #1
   d9a38:	e001      	b.n	d9a3e <__gethex+0x88>
   d9a3a:	2500      	movs	r5, #0
   d9a3c:	462c      	mov	r4, r5
   d9a3e:	463a      	mov	r2, r7
   d9a40:	4616      	mov	r6, r2
   d9a42:	3201      	adds	r2, #1
   d9a44:	7830      	ldrb	r0, [r6, #0]
   d9a46:	f7ff ffa1 	bl	d998c <__hexdig_fun>
   d9a4a:	2800      	cmp	r0, #0
   d9a4c:	d1f8      	bne.n	d9a40 <__gethex+0x8a>
   d9a4e:	9a01      	ldr	r2, [sp, #4]
   d9a50:	9903      	ldr	r1, [sp, #12]
   d9a52:	4630      	mov	r0, r6
   d9a54:	f7fe fdb7 	bl	d85c6 <strncmp>
   d9a58:	b950      	cbnz	r0, d9a70 <__gethex+0xba>
   d9a5a:	b954      	cbnz	r4, d9a72 <__gethex+0xbc>
   d9a5c:	9b01      	ldr	r3, [sp, #4]
   d9a5e:	18f4      	adds	r4, r6, r3
   d9a60:	4622      	mov	r2, r4
   d9a62:	4616      	mov	r6, r2
   d9a64:	3201      	adds	r2, #1
   d9a66:	7830      	ldrb	r0, [r6, #0]
   d9a68:	f7ff ff90 	bl	d998c <__hexdig_fun>
   d9a6c:	2800      	cmp	r0, #0
   d9a6e:	d1f8      	bne.n	d9a62 <__gethex+0xac>
   d9a70:	b134      	cbz	r4, d9a80 <__gethex+0xca>
   d9a72:	1ba4      	subs	r4, r4, r6
   d9a74:	00a4      	lsls	r4, r4, #2
   d9a76:	e003      	b.n	d9a80 <__gethex+0xca>
   d9a78:	463e      	mov	r6, r7
   d9a7a:	e000      	b.n	d9a7e <__gethex+0xc8>
   d9a7c:	4604      	mov	r4, r0
   d9a7e:	2501      	movs	r5, #1
   d9a80:	7833      	ldrb	r3, [r6, #0]
   d9a82:	2b50      	cmp	r3, #80	; 0x50
   d9a84:	d001      	beq.n	d9a8a <__gethex+0xd4>
   d9a86:	2b70      	cmp	r3, #112	; 0x70
   d9a88:	d12a      	bne.n	d9ae0 <__gethex+0x12a>
   d9a8a:	7873      	ldrb	r3, [r6, #1]
   d9a8c:	2b2b      	cmp	r3, #43	; 0x2b
   d9a8e:	d008      	beq.n	d9aa2 <__gethex+0xec>
   d9a90:	2b2d      	cmp	r3, #45	; 0x2d
   d9a92:	d003      	beq.n	d9a9c <__gethex+0xe6>
   d9a94:	1c71      	adds	r1, r6, #1
   d9a96:	f04f 0900 	mov.w	r9, #0
   d9a9a:	e005      	b.n	d9aa8 <__gethex+0xf2>
   d9a9c:	f04f 0901 	mov.w	r9, #1
   d9aa0:	e001      	b.n	d9aa6 <__gethex+0xf0>
   d9aa2:	f04f 0900 	mov.w	r9, #0
   d9aa6:	1cb1      	adds	r1, r6, #2
   d9aa8:	7808      	ldrb	r0, [r1, #0]
   d9aaa:	f7ff ff6f 	bl	d998c <__hexdig_fun>
   d9aae:	1e43      	subs	r3, r0, #1
   d9ab0:	b2db      	uxtb	r3, r3
   d9ab2:	2b18      	cmp	r3, #24
   d9ab4:	d814      	bhi.n	d9ae0 <__gethex+0x12a>
   d9ab6:	f1a0 0210 	sub.w	r2, r0, #16
   d9aba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9abe:	f7ff ff65 	bl	d998c <__hexdig_fun>
   d9ac2:	1e43      	subs	r3, r0, #1
   d9ac4:	b2db      	uxtb	r3, r3
   d9ac6:	2b18      	cmp	r3, #24
   d9ac8:	d804      	bhi.n	d9ad4 <__gethex+0x11e>
   d9aca:	230a      	movs	r3, #10
   d9acc:	fb03 0202 	mla	r2, r3, r2, r0
   d9ad0:	3a10      	subs	r2, #16
   d9ad2:	e7f2      	b.n	d9aba <__gethex+0x104>
   d9ad4:	f1b9 0f00 	cmp.w	r9, #0
   d9ad8:	d000      	beq.n	d9adc <__gethex+0x126>
   d9ada:	4252      	negs	r2, r2
   d9adc:	4414      	add	r4, r2
   d9ade:	e000      	b.n	d9ae2 <__gethex+0x12c>
   d9ae0:	4631      	mov	r1, r6
   d9ae2:	f8ca 1000 	str.w	r1, [sl]
   d9ae6:	b12d      	cbz	r5, d9af4 <__gethex+0x13e>
   d9ae8:	f1bb 0f00 	cmp.w	fp, #0
   d9aec:	bf14      	ite	ne
   d9aee:	2000      	movne	r0, #0
   d9af0:	2006      	moveq	r0, #6
   d9af2:	e17c      	b.n	d9dee <__gethex+0x438>
   d9af4:	1bf3      	subs	r3, r6, r7
   d9af6:	3b01      	subs	r3, #1
   d9af8:	4629      	mov	r1, r5
   d9afa:	2b07      	cmp	r3, #7
   d9afc:	dd02      	ble.n	d9b04 <__gethex+0x14e>
   d9afe:	3101      	adds	r1, #1
   d9b00:	105b      	asrs	r3, r3, #1
   d9b02:	e7fa      	b.n	d9afa <__gethex+0x144>
   d9b04:	9802      	ldr	r0, [sp, #8]
   d9b06:	f000 fb09 	bl	da11c <_Balloc>
   d9b0a:	9b01      	ldr	r3, [sp, #4]
   d9b0c:	f100 0a14 	add.w	sl, r0, #20
   d9b10:	f04f 0900 	mov.w	r9, #0
   d9b14:	f1c3 0301 	rsb	r3, r3, #1
   d9b18:	4605      	mov	r5, r0
   d9b1a:	f8cd a010 	str.w	sl, [sp, #16]
   d9b1e:	46cb      	mov	fp, r9
   d9b20:	9308      	str	r3, [sp, #32]
   d9b22:	42b7      	cmp	r7, r6
   d9b24:	d22f      	bcs.n	d9b86 <__gethex+0x1d0>
   d9b26:	1e73      	subs	r3, r6, #1
   d9b28:	9305      	str	r3, [sp, #20]
   d9b2a:	9a07      	ldr	r2, [sp, #28]
   d9b2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9b30:	4293      	cmp	r3, r2
   d9b32:	d00b      	beq.n	d9b4c <__gethex+0x196>
   d9b34:	f1bb 0f20 	cmp.w	fp, #32
   d9b38:	d116      	bne.n	d9b68 <__gethex+0x1b2>
   d9b3a:	9b04      	ldr	r3, [sp, #16]
   d9b3c:	f8c3 9000 	str.w	r9, [r3]
   d9b40:	3304      	adds	r3, #4
   d9b42:	f04f 0900 	mov.w	r9, #0
   d9b46:	9304      	str	r3, [sp, #16]
   d9b48:	46cb      	mov	fp, r9
   d9b4a:	e00d      	b.n	d9b68 <__gethex+0x1b2>
   d9b4c:	9b05      	ldr	r3, [sp, #20]
   d9b4e:	9a08      	ldr	r2, [sp, #32]
   d9b50:	4413      	add	r3, r2
   d9b52:	429f      	cmp	r7, r3
   d9b54:	d8ee      	bhi.n	d9b34 <__gethex+0x17e>
   d9b56:	4618      	mov	r0, r3
   d9b58:	9a01      	ldr	r2, [sp, #4]
   d9b5a:	9903      	ldr	r1, [sp, #12]
   d9b5c:	9309      	str	r3, [sp, #36]	; 0x24
   d9b5e:	f7fe fd32 	bl	d85c6 <strncmp>
   d9b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9b64:	b168      	cbz	r0, d9b82 <__gethex+0x1cc>
   d9b66:	e7e5      	b.n	d9b34 <__gethex+0x17e>
   d9b68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9b6c:	f7ff ff0e 	bl	d998c <__hexdig_fun>
   d9b70:	f000 000f 	and.w	r0, r0, #15
   d9b74:	fa00 f00b 	lsl.w	r0, r0, fp
   d9b78:	9b05      	ldr	r3, [sp, #20]
   d9b7a:	ea49 0900 	orr.w	r9, r9, r0
   d9b7e:	f10b 0b04 	add.w	fp, fp, #4
   d9b82:	461e      	mov	r6, r3
   d9b84:	e7cd      	b.n	d9b22 <__gethex+0x16c>
   d9b86:	9804      	ldr	r0, [sp, #16]
   d9b88:	f840 9b04 	str.w	r9, [r0], #4
   d9b8c:	ebca 0000 	rsb	r0, sl, r0
   d9b90:	1080      	asrs	r0, r0, #2
   d9b92:	6128      	str	r0, [r5, #16]
   d9b94:	0147      	lsls	r7, r0, #5
   d9b96:	4648      	mov	r0, r9
   d9b98:	f000 fb85 	bl	da2a6 <__hi0bits>
   d9b9c:	f8d8 6000 	ldr.w	r6, [r8]
   d9ba0:	1a38      	subs	r0, r7, r0
   d9ba2:	42b0      	cmp	r0, r6
   d9ba4:	dd26      	ble.n	d9bf4 <__gethex+0x23e>
   d9ba6:	1b87      	subs	r7, r0, r6
   d9ba8:	4639      	mov	r1, r7
   d9baa:	4628      	mov	r0, r5
   d9bac:	f000 fe83 	bl	da8b6 <__any_on>
   d9bb0:	b1c8      	cbz	r0, d9be6 <__gethex+0x230>
   d9bb2:	1e7b      	subs	r3, r7, #1
   d9bb4:	1159      	asrs	r1, r3, #5
   d9bb6:	f003 021f 	and.w	r2, r3, #31
   d9bba:	f04f 0901 	mov.w	r9, #1
   d9bbe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d9bc2:	fa09 f202 	lsl.w	r2, r9, r2
   d9bc6:	420a      	tst	r2, r1
   d9bc8:	d00e      	beq.n	d9be8 <__gethex+0x232>
   d9bca:	454b      	cmp	r3, r9
   d9bcc:	dc02      	bgt.n	d9bd4 <__gethex+0x21e>
   d9bce:	f04f 0902 	mov.w	r9, #2
   d9bd2:	e009      	b.n	d9be8 <__gethex+0x232>
   d9bd4:	1eb9      	subs	r1, r7, #2
   d9bd6:	4628      	mov	r0, r5
   d9bd8:	f000 fe6d 	bl	da8b6 <__any_on>
   d9bdc:	2800      	cmp	r0, #0
   d9bde:	d0f6      	beq.n	d9bce <__gethex+0x218>
   d9be0:	f04f 0903 	mov.w	r9, #3
   d9be4:	e000      	b.n	d9be8 <__gethex+0x232>
   d9be6:	4681      	mov	r9, r0
   d9be8:	4639      	mov	r1, r7
   d9bea:	4628      	mov	r0, r5
   d9bec:	f7ff fe98 	bl	d9920 <rshift>
   d9bf0:	443c      	add	r4, r7
   d9bf2:	e00c      	b.n	d9c0e <__gethex+0x258>
   d9bf4:	da09      	bge.n	d9c0a <__gethex+0x254>
   d9bf6:	1a37      	subs	r7, r6, r0
   d9bf8:	4629      	mov	r1, r5
   d9bfa:	463a      	mov	r2, r7
   d9bfc:	9802      	ldr	r0, [sp, #8]
   d9bfe:	f000 fc87 	bl	da510 <__lshift>
   d9c02:	1be4      	subs	r4, r4, r7
   d9c04:	4605      	mov	r5, r0
   d9c06:	f100 0a14 	add.w	sl, r0, #20
   d9c0a:	f04f 0900 	mov.w	r9, #0
   d9c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9c12:	429c      	cmp	r4, r3
   d9c14:	dd08      	ble.n	d9c28 <__gethex+0x272>
   d9c16:	9802      	ldr	r0, [sp, #8]
   d9c18:	4629      	mov	r1, r5
   d9c1a:	f000 fab4 	bl	da186 <_Bfree>
   d9c1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9c20:	2300      	movs	r3, #0
   d9c22:	6013      	str	r3, [r2, #0]
   d9c24:	20a3      	movs	r0, #163	; 0xa3
   d9c26:	e0e2      	b.n	d9dee <__gethex+0x438>
   d9c28:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9c2c:	4284      	cmp	r4, r0
   d9c2e:	da53      	bge.n	d9cd8 <__gethex+0x322>
   d9c30:	1b04      	subs	r4, r0, r4
   d9c32:	42a6      	cmp	r6, r4
   d9c34:	dc2e      	bgt.n	d9c94 <__gethex+0x2de>
   d9c36:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9c3a:	2b02      	cmp	r3, #2
   d9c3c:	d01a      	beq.n	d9c74 <__gethex+0x2be>
   d9c3e:	2b03      	cmp	r3, #3
   d9c40:	d01c      	beq.n	d9c7c <__gethex+0x2c6>
   d9c42:	2b01      	cmp	r3, #1
   d9c44:	d11d      	bne.n	d9c82 <__gethex+0x2cc>
   d9c46:	42a6      	cmp	r6, r4
   d9c48:	d11b      	bne.n	d9c82 <__gethex+0x2cc>
   d9c4a:	2e01      	cmp	r6, #1
   d9c4c:	dc0b      	bgt.n	d9c66 <__gethex+0x2b0>
   d9c4e:	9a06      	ldr	r2, [sp, #24]
   d9c50:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9c54:	6013      	str	r3, [r2, #0]
   d9c56:	2301      	movs	r3, #1
   d9c58:	612b      	str	r3, [r5, #16]
   d9c5a:	f8ca 3000 	str.w	r3, [sl]
   d9c5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9c60:	2062      	movs	r0, #98	; 0x62
   d9c62:	601d      	str	r5, [r3, #0]
   d9c64:	e0c3      	b.n	d9dee <__gethex+0x438>
   d9c66:	1e71      	subs	r1, r6, #1
   d9c68:	4628      	mov	r0, r5
   d9c6a:	f000 fe24 	bl	da8b6 <__any_on>
   d9c6e:	2800      	cmp	r0, #0
   d9c70:	d1ed      	bne.n	d9c4e <__gethex+0x298>
   d9c72:	e006      	b.n	d9c82 <__gethex+0x2cc>
   d9c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9c76:	2b00      	cmp	r3, #0
   d9c78:	d0e9      	beq.n	d9c4e <__gethex+0x298>
   d9c7a:	e002      	b.n	d9c82 <__gethex+0x2cc>
   d9c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9c7e:	2b00      	cmp	r3, #0
   d9c80:	d1e5      	bne.n	d9c4e <__gethex+0x298>
   d9c82:	9802      	ldr	r0, [sp, #8]
   d9c84:	4629      	mov	r1, r5
   d9c86:	f000 fa7e 	bl	da186 <_Bfree>
   d9c8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9c8c:	2300      	movs	r3, #0
   d9c8e:	6013      	str	r3, [r2, #0]
   d9c90:	2050      	movs	r0, #80	; 0x50
   d9c92:	e0ac      	b.n	d9dee <__gethex+0x438>
   d9c94:	1e67      	subs	r7, r4, #1
   d9c96:	f1b9 0f00 	cmp.w	r9, #0
   d9c9a:	d106      	bne.n	d9caa <__gethex+0x2f4>
   d9c9c:	b13f      	cbz	r7, d9cae <__gethex+0x2f8>
   d9c9e:	4639      	mov	r1, r7
   d9ca0:	4628      	mov	r0, r5
   d9ca2:	f000 fe08 	bl	da8b6 <__any_on>
   d9ca6:	4681      	mov	r9, r0
   d9ca8:	e001      	b.n	d9cae <__gethex+0x2f8>
   d9caa:	f04f 0901 	mov.w	r9, #1
   d9cae:	117a      	asrs	r2, r7, #5
   d9cb0:	2301      	movs	r3, #1
   d9cb2:	f007 071f 	and.w	r7, r7, #31
   d9cb6:	fa03 f707 	lsl.w	r7, r3, r7
   d9cba:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d9cbe:	4621      	mov	r1, r4
   d9cc0:	421f      	tst	r7, r3
   d9cc2:	4628      	mov	r0, r5
   d9cc4:	bf18      	it	ne
   d9cc6:	f049 0902 	orrne.w	r9, r9, #2
   d9cca:	1b36      	subs	r6, r6, r4
   d9ccc:	f7ff fe28 	bl	d9920 <rshift>
   d9cd0:	2702      	movs	r7, #2
   d9cd2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d9cd6:	e000      	b.n	d9cda <__gethex+0x324>
   d9cd8:	2701      	movs	r7, #1
   d9cda:	f1b9 0f00 	cmp.w	r9, #0
   d9cde:	f000 8081 	beq.w	d9de4 <__gethex+0x42e>
   d9ce2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9ce6:	2b02      	cmp	r3, #2
   d9ce8:	d00e      	beq.n	d9d08 <__gethex+0x352>
   d9cea:	2b03      	cmp	r3, #3
   d9cec:	d010      	beq.n	d9d10 <__gethex+0x35a>
   d9cee:	2b01      	cmp	r3, #1
   d9cf0:	d176      	bne.n	d9de0 <__gethex+0x42a>
   d9cf2:	f019 0f02 	tst.w	r9, #2
   d9cf6:	d073      	beq.n	d9de0 <__gethex+0x42a>
   d9cf8:	f8da 0000 	ldr.w	r0, [sl]
   d9cfc:	ea49 0900 	orr.w	r9, r9, r0
   d9d00:	f019 0f01 	tst.w	r9, #1
   d9d04:	d107      	bne.n	d9d16 <__gethex+0x360>
   d9d06:	e06b      	b.n	d9de0 <__gethex+0x42a>
   d9d08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9d0a:	f1c3 0301 	rsb	r3, r3, #1
   d9d0e:	9315      	str	r3, [sp, #84]	; 0x54
   d9d10:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9d12:	2b00      	cmp	r3, #0
   d9d14:	d064      	beq.n	d9de0 <__gethex+0x42a>
   d9d16:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d9d1a:	f105 0314 	add.w	r3, r5, #20
   d9d1e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d9d22:	eb03 0109 	add.w	r1, r3, r9
   d9d26:	2000      	movs	r0, #0
   d9d28:	681a      	ldr	r2, [r3, #0]
   d9d2a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d9d2e:	d002      	beq.n	d9d36 <__gethex+0x380>
   d9d30:	3201      	adds	r2, #1
   d9d32:	601a      	str	r2, [r3, #0]
   d9d34:	e020      	b.n	d9d78 <__gethex+0x3c2>
   d9d36:	f843 0b04 	str.w	r0, [r3], #4
   d9d3a:	4299      	cmp	r1, r3
   d9d3c:	d8f4      	bhi.n	d9d28 <__gethex+0x372>
   d9d3e:	68ab      	ldr	r3, [r5, #8]
   d9d40:	459a      	cmp	sl, r3
   d9d42:	db12      	blt.n	d9d6a <__gethex+0x3b4>
   d9d44:	6869      	ldr	r1, [r5, #4]
   d9d46:	9802      	ldr	r0, [sp, #8]
   d9d48:	3101      	adds	r1, #1
   d9d4a:	f000 f9e7 	bl	da11c <_Balloc>
   d9d4e:	692a      	ldr	r2, [r5, #16]
   d9d50:	3202      	adds	r2, #2
   d9d52:	f105 010c 	add.w	r1, r5, #12
   d9d56:	4683      	mov	fp, r0
   d9d58:	0092      	lsls	r2, r2, #2
   d9d5a:	300c      	adds	r0, #12
   d9d5c:	f7fe fbc2 	bl	d84e4 <memcpy>
   d9d60:	4629      	mov	r1, r5
   d9d62:	9802      	ldr	r0, [sp, #8]
   d9d64:	f000 fa0f 	bl	da186 <_Bfree>
   d9d68:	465d      	mov	r5, fp
   d9d6a:	692b      	ldr	r3, [r5, #16]
   d9d6c:	1c5a      	adds	r2, r3, #1
   d9d6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d9d72:	612a      	str	r2, [r5, #16]
   d9d74:	2201      	movs	r2, #1
   d9d76:	615a      	str	r2, [r3, #20]
   d9d78:	2f02      	cmp	r7, #2
   d9d7a:	f105 0214 	add.w	r2, r5, #20
   d9d7e:	d111      	bne.n	d9da4 <__gethex+0x3ee>
   d9d80:	f8d8 3000 	ldr.w	r3, [r8]
   d9d84:	3b01      	subs	r3, #1
   d9d86:	429e      	cmp	r6, r3
   d9d88:	d127      	bne.n	d9dda <__gethex+0x424>
   d9d8a:	1171      	asrs	r1, r6, #5
   d9d8c:	2301      	movs	r3, #1
   d9d8e:	f006 061f 	and.w	r6, r6, #31
   d9d92:	fa03 f606 	lsl.w	r6, r3, r6
   d9d96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d9d9a:	421e      	tst	r6, r3
   d9d9c:	bf0c      	ite	eq
   d9d9e:	2702      	moveq	r7, #2
   d9da0:	2701      	movne	r7, #1
   d9da2:	e01a      	b.n	d9dda <__gethex+0x424>
   d9da4:	692b      	ldr	r3, [r5, #16]
   d9da6:	459a      	cmp	sl, r3
   d9da8:	da0a      	bge.n	d9dc0 <__gethex+0x40a>
   d9daa:	2101      	movs	r1, #1
   d9dac:	4628      	mov	r0, r5
   d9dae:	f7ff fdb7 	bl	d9920 <rshift>
   d9db2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9db6:	3401      	adds	r4, #1
   d9db8:	429c      	cmp	r4, r3
   d9dba:	f73f af2c 	bgt.w	d9c16 <__gethex+0x260>
   d9dbe:	e00b      	b.n	d9dd8 <__gethex+0x422>
   d9dc0:	f016 061f 	ands.w	r6, r6, #31
   d9dc4:	d008      	beq.n	d9dd8 <__gethex+0x422>
   d9dc6:	4491      	add	r9, r2
   d9dc8:	f1c6 0620 	rsb	r6, r6, #32
   d9dcc:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d9dd0:	f000 fa69 	bl	da2a6 <__hi0bits>
   d9dd4:	42b0      	cmp	r0, r6
   d9dd6:	dbe8      	blt.n	d9daa <__gethex+0x3f4>
   d9dd8:	2701      	movs	r7, #1
   d9dda:	f047 0720 	orr.w	r7, r7, #32
   d9dde:	e001      	b.n	d9de4 <__gethex+0x42e>
   d9de0:	f047 0710 	orr.w	r7, r7, #16
   d9de4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9de6:	601d      	str	r5, [r3, #0]
   d9de8:	9b06      	ldr	r3, [sp, #24]
   d9dea:	4638      	mov	r0, r7
   d9dec:	601c      	str	r4, [r3, #0]
   d9dee:	b00b      	add	sp, #44	; 0x2c
   d9df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9df4 <L_shift>:
   d9df4:	f1c2 0208 	rsb	r2, r2, #8
   d9df8:	0092      	lsls	r2, r2, #2
   d9dfa:	b570      	push	{r4, r5, r6, lr}
   d9dfc:	f1c2 0620 	rsb	r6, r2, #32
   d9e00:	6843      	ldr	r3, [r0, #4]
   d9e02:	6805      	ldr	r5, [r0, #0]
   d9e04:	fa03 f406 	lsl.w	r4, r3, r6
   d9e08:	432c      	orrs	r4, r5
   d9e0a:	40d3      	lsrs	r3, r2
   d9e0c:	6004      	str	r4, [r0, #0]
   d9e0e:	f840 3f04 	str.w	r3, [r0, #4]!
   d9e12:	4288      	cmp	r0, r1
   d9e14:	d3f4      	bcc.n	d9e00 <L_shift+0xc>
   d9e16:	bd70      	pop	{r4, r5, r6, pc}

000d9e18 <__match>:
   d9e18:	b530      	push	{r4, r5, lr}
   d9e1a:	6803      	ldr	r3, [r0, #0]
   d9e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9e20:	3301      	adds	r3, #1
   d9e22:	b14c      	cbz	r4, d9e38 <__match+0x20>
   d9e24:	781a      	ldrb	r2, [r3, #0]
   d9e26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9e2a:	2d19      	cmp	r5, #25
   d9e2c:	bf98      	it	ls
   d9e2e:	3220      	addls	r2, #32
   d9e30:	42a2      	cmp	r2, r4
   d9e32:	d0f3      	beq.n	d9e1c <__match+0x4>
   d9e34:	2000      	movs	r0, #0
   d9e36:	bd30      	pop	{r4, r5, pc}
   d9e38:	6003      	str	r3, [r0, #0]
   d9e3a:	2001      	movs	r0, #1
   d9e3c:	bd30      	pop	{r4, r5, pc}

000d9e3e <__hexnan>:
   d9e3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e42:	680b      	ldr	r3, [r1, #0]
   d9e44:	f8d0 b000 	ldr.w	fp, [r0]
   d9e48:	115e      	asrs	r6, r3, #5
   d9e4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9e4e:	f013 031f 	ands.w	r3, r3, #31
   d9e52:	b085      	sub	sp, #20
   d9e54:	bf18      	it	ne
   d9e56:	3604      	addne	r6, #4
   d9e58:	1f35      	subs	r5, r6, #4
   d9e5a:	4617      	mov	r7, r2
   d9e5c:	2200      	movs	r2, #0
   d9e5e:	4682      	mov	sl, r0
   d9e60:	9301      	str	r3, [sp, #4]
   d9e62:	f846 2c04 	str.w	r2, [r6, #-4]
   d9e66:	46a8      	mov	r8, r5
   d9e68:	462c      	mov	r4, r5
   d9e6a:	9200      	str	r2, [sp, #0]
   d9e6c:	4691      	mov	r9, r2
   d9e6e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d9e72:	2900      	cmp	r1, #0
   d9e74:	d03c      	beq.n	d9ef0 <__hexnan+0xb2>
   d9e76:	4608      	mov	r0, r1
   d9e78:	9203      	str	r2, [sp, #12]
   d9e7a:	9102      	str	r1, [sp, #8]
   d9e7c:	f7ff fd86 	bl	d998c <__hexdig_fun>
   d9e80:	9a03      	ldr	r2, [sp, #12]
   d9e82:	bb00      	cbnz	r0, d9ec6 <__hexnan+0x88>
   d9e84:	9902      	ldr	r1, [sp, #8]
   d9e86:	2920      	cmp	r1, #32
   d9e88:	d816      	bhi.n	d9eb8 <__hexnan+0x7a>
   d9e8a:	9b00      	ldr	r3, [sp, #0]
   d9e8c:	4599      	cmp	r9, r3
   d9e8e:	ddee      	ble.n	d9e6e <__hexnan+0x30>
   d9e90:	4544      	cmp	r4, r8
   d9e92:	d205      	bcs.n	d9ea0 <__hexnan+0x62>
   d9e94:	2a07      	cmp	r2, #7
   d9e96:	dc03      	bgt.n	d9ea0 <__hexnan+0x62>
   d9e98:	4641      	mov	r1, r8
   d9e9a:	4620      	mov	r0, r4
   d9e9c:	f7ff ffaa 	bl	d9df4 <L_shift>
   d9ea0:	42bc      	cmp	r4, r7
   d9ea2:	d923      	bls.n	d9eec <__hexnan+0xae>
   d9ea4:	2300      	movs	r3, #0
   d9ea6:	f1a4 0804 	sub.w	r8, r4, #4
   d9eaa:	f844 3c04 	str.w	r3, [r4, #-4]
   d9eae:	f8cd 9000 	str.w	r9, [sp]
   d9eb2:	4644      	mov	r4, r8
   d9eb4:	461a      	mov	r2, r3
   d9eb6:	e7da      	b.n	d9e6e <__hexnan+0x30>
   d9eb8:	2929      	cmp	r1, #41	; 0x29
   d9eba:	d148      	bne.n	d9f4e <__hexnan+0x110>
   d9ebc:	f10b 0301 	add.w	r3, fp, #1
   d9ec0:	f8ca 3000 	str.w	r3, [sl]
   d9ec4:	e014      	b.n	d9ef0 <__hexnan+0xb2>
   d9ec6:	3201      	adds	r2, #1
   d9ec8:	2a08      	cmp	r2, #8
   d9eca:	f109 0901 	add.w	r9, r9, #1
   d9ece:	dd06      	ble.n	d9ede <__hexnan+0xa0>
   d9ed0:	42bc      	cmp	r4, r7
   d9ed2:	d9cc      	bls.n	d9e6e <__hexnan+0x30>
   d9ed4:	2300      	movs	r3, #0
   d9ed6:	f844 3c04 	str.w	r3, [r4, #-4]
   d9eda:	2201      	movs	r2, #1
   d9edc:	3c04      	subs	r4, #4
   d9ede:	6821      	ldr	r1, [r4, #0]
   d9ee0:	f000 000f 	and.w	r0, r0, #15
   d9ee4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9ee8:	6020      	str	r0, [r4, #0]
   d9eea:	e7c0      	b.n	d9e6e <__hexnan+0x30>
   d9eec:	2208      	movs	r2, #8
   d9eee:	e7be      	b.n	d9e6e <__hexnan+0x30>
   d9ef0:	f1b9 0f00 	cmp.w	r9, #0
   d9ef4:	d02b      	beq.n	d9f4e <__hexnan+0x110>
   d9ef6:	4544      	cmp	r4, r8
   d9ef8:	d205      	bcs.n	d9f06 <__hexnan+0xc8>
   d9efa:	2a07      	cmp	r2, #7
   d9efc:	dc03      	bgt.n	d9f06 <__hexnan+0xc8>
   d9efe:	4641      	mov	r1, r8
   d9f00:	4620      	mov	r0, r4
   d9f02:	f7ff ff77 	bl	d9df4 <L_shift>
   d9f06:	42bc      	cmp	r4, r7
   d9f08:	d90c      	bls.n	d9f24 <__hexnan+0xe6>
   d9f0a:	463b      	mov	r3, r7
   d9f0c:	f854 2b04 	ldr.w	r2, [r4], #4
   d9f10:	f843 2b04 	str.w	r2, [r3], #4
   d9f14:	42a5      	cmp	r5, r4
   d9f16:	d2f9      	bcs.n	d9f0c <__hexnan+0xce>
   d9f18:	2200      	movs	r2, #0
   d9f1a:	f843 2b04 	str.w	r2, [r3], #4
   d9f1e:	429d      	cmp	r5, r3
   d9f20:	d2fb      	bcs.n	d9f1a <__hexnan+0xdc>
   d9f22:	e00b      	b.n	d9f3c <__hexnan+0xfe>
   d9f24:	9b01      	ldr	r3, [sp, #4]
   d9f26:	b14b      	cbz	r3, d9f3c <__hexnan+0xfe>
   d9f28:	f1c3 0220 	rsb	r2, r3, #32
   d9f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9f30:	40d3      	lsrs	r3, r2
   d9f32:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9f36:	4013      	ands	r3, r2
   d9f38:	f846 3c04 	str.w	r3, [r6, #-4]
   d9f3c:	682b      	ldr	r3, [r5, #0]
   d9f3e:	b943      	cbnz	r3, d9f52 <__hexnan+0x114>
   d9f40:	42bd      	cmp	r5, r7
   d9f42:	d102      	bne.n	d9f4a <__hexnan+0x10c>
   d9f44:	2301      	movs	r3, #1
   d9f46:	602b      	str	r3, [r5, #0]
   d9f48:	e003      	b.n	d9f52 <__hexnan+0x114>
   d9f4a:	3d04      	subs	r5, #4
   d9f4c:	e7f6      	b.n	d9f3c <__hexnan+0xfe>
   d9f4e:	2004      	movs	r0, #4
   d9f50:	e000      	b.n	d9f54 <__hexnan+0x116>
   d9f52:	2005      	movs	r0, #5
   d9f54:	b005      	add	sp, #20
   d9f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d9f5c <_findenv_r>:
   d9f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9f60:	4607      	mov	r7, r0
   d9f62:	468b      	mov	fp, r1
   d9f64:	4690      	mov	r8, r2
   d9f66:	f000 fcdd 	bl	da924 <__env_lock>
   d9f6a:	4b19      	ldr	r3, [pc, #100]	; (d9fd0 <_findenv_r+0x74>)
   d9f6c:	681d      	ldr	r5, [r3, #0]
   d9f6e:	469a      	mov	sl, r3
   d9f70:	b13d      	cbz	r5, d9f82 <_findenv_r+0x26>
   d9f72:	465c      	mov	r4, fp
   d9f74:	4623      	mov	r3, r4
   d9f76:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9f7a:	b142      	cbz	r2, d9f8e <_findenv_r+0x32>
   d9f7c:	2a3d      	cmp	r2, #61	; 0x3d
   d9f7e:	461c      	mov	r4, r3
   d9f80:	d1f8      	bne.n	d9f74 <_findenv_r+0x18>
   d9f82:	4638      	mov	r0, r7
   d9f84:	f000 fccf 	bl	da926 <__env_unlock>
   d9f88:	2000      	movs	r0, #0
   d9f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9f8e:	ebcb 0404 	rsb	r4, fp, r4
   d9f92:	46a9      	mov	r9, r5
   d9f94:	f859 0b04 	ldr.w	r0, [r9], #4
   d9f98:	2800      	cmp	r0, #0
   d9f9a:	d0f2      	beq.n	d9f82 <_findenv_r+0x26>
   d9f9c:	4622      	mov	r2, r4
   d9f9e:	4659      	mov	r1, fp
   d9fa0:	f7fe fb11 	bl	d85c6 <strncmp>
   d9fa4:	b988      	cbnz	r0, d9fca <_findenv_r+0x6e>
   d9fa6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d9faa:	191e      	adds	r6, r3, r4
   d9fac:	5d1b      	ldrb	r3, [r3, r4]
   d9fae:	2b3d      	cmp	r3, #61	; 0x3d
   d9fb0:	d10b      	bne.n	d9fca <_findenv_r+0x6e>
   d9fb2:	f8da 3000 	ldr.w	r3, [sl]
   d9fb6:	1aed      	subs	r5, r5, r3
   d9fb8:	10ad      	asrs	r5, r5, #2
   d9fba:	4638      	mov	r0, r7
   d9fbc:	f8c8 5000 	str.w	r5, [r8]
   d9fc0:	f000 fcb1 	bl	da926 <__env_unlock>
   d9fc4:	1c70      	adds	r0, r6, #1
   d9fc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9fca:	464d      	mov	r5, r9
   d9fcc:	e7e1      	b.n	d9f92 <_findenv_r+0x36>
   d9fce:	bf00      	nop
   d9fd0:	2003e1fc 	.word	0x2003e1fc

000d9fd4 <_getenv_r>:
   d9fd4:	b507      	push	{r0, r1, r2, lr}
   d9fd6:	aa01      	add	r2, sp, #4
   d9fd8:	f7ff ffc0 	bl	d9f5c <_findenv_r>
   d9fdc:	b003      	add	sp, #12
   d9fde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9fe4 <__gettzinfo>:
   d9fe4:	4800      	ldr	r0, [pc, #0]	; (d9fe8 <__gettzinfo+0x4>)
   d9fe6:	4770      	bx	lr
   d9fe8:	2003e1bc 	.word	0x2003e1bc

000d9fec <gmtime_r>:
   d9fec:	6802      	ldr	r2, [r0, #0]
   d9fee:	4b47      	ldr	r3, [pc, #284]	; (da10c <gmtime_r+0x120>)
   d9ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9ff2:	fb92 f4f3 	sdiv	r4, r2, r3
   d9ff6:	fb03 2214 	mls	r2, r3, r4, r2
   d9ffa:	2a00      	cmp	r2, #0
   d9ffc:	bfbc      	itt	lt
   d9ffe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   da002:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   da006:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   da00a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   da00e:	fb92 f3f0 	sdiv	r3, r2, r0
   da012:	fb00 2213 	mls	r2, r0, r3, r2
   da016:	f04f 003c 	mov.w	r0, #60	; 0x3c
   da01a:	bfac      	ite	ge
   da01c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   da020:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   da024:	608b      	str	r3, [r1, #8]
   da026:	fb92 f3f0 	sdiv	r3, r2, r0
   da02a:	fb00 2213 	mls	r2, r0, r3, r2
   da02e:	604b      	str	r3, [r1, #4]
   da030:	600a      	str	r2, [r1, #0]
   da032:	2307      	movs	r3, #7
   da034:	1ce2      	adds	r2, r4, #3
   da036:	fb92 f3f3 	sdiv	r3, r2, r3
   da03a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da03e:	1ad3      	subs	r3, r2, r3
   da040:	618b      	str	r3, [r1, #24]
   da042:	4b33      	ldr	r3, [pc, #204]	; (da110 <gmtime_r+0x124>)
   da044:	4d33      	ldr	r5, [pc, #204]	; (da114 <gmtime_r+0x128>)
   da046:	fb94 f5f5 	sdiv	r5, r4, r5
   da04a:	fb03 4405 	mla	r4, r3, r5, r4
   da04e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   da052:	fbb4 f2f2 	udiv	r2, r4, r2
   da056:	4422      	add	r2, r4
   da058:	f240 57b4 	movw	r7, #1460	; 0x5b4
   da05c:	fbb4 f3f7 	udiv	r3, r4, r7
   da060:	1ad2      	subs	r2, r2, r3
   da062:	482d      	ldr	r0, [pc, #180]	; (da118 <gmtime_r+0x12c>)
   da064:	fbb4 f0f0 	udiv	r0, r4, r0
   da068:	f648 6694 	movw	r6, #36500	; 0x8e94
   da06c:	1a13      	subs	r3, r2, r0
   da06e:	fbb3 f6f6 	udiv	r6, r3, r6
   da072:	4434      	add	r4, r6
   da074:	f240 126d 	movw	r2, #365	; 0x16d
   da078:	fbb3 f0f2 	udiv	r0, r3, r2
   da07c:	fbb3 f3f7 	udiv	r3, r3, r7
   da080:	1ae3      	subs	r3, r4, r3
   da082:	fb02 3310 	mls	r3, r2, r0, r3
   da086:	2499      	movs	r4, #153	; 0x99
   da088:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   da08c:	3202      	adds	r2, #2
   da08e:	fbb2 f2f4 	udiv	r2, r2, r4
   da092:	2a0a      	cmp	r2, #10
   da094:	fb04 f402 	mul.w	r4, r4, r2
   da098:	f104 0602 	add.w	r6, r4, #2
   da09c:	f04f 0405 	mov.w	r4, #5
   da0a0:	fbb6 f4f4 	udiv	r4, r6, r4
   da0a4:	bf34      	ite	cc
   da0a6:	2602      	movcc	r6, #2
   da0a8:	f06f 0609 	mvncs.w	r6, #9
   da0ac:	4416      	add	r6, r2
   da0ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da0b2:	fb02 0505 	mla	r5, r2, r5, r0
   da0b6:	1c5f      	adds	r7, r3, #1
   da0b8:	2e01      	cmp	r6, #1
   da0ba:	bf98      	it	ls
   da0bc:	3501      	addls	r5, #1
   da0be:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   da0c2:	eba7 0704 	sub.w	r7, r7, r4
   da0c6:	d302      	bcc.n	da0ce <gmtime_r+0xe2>
   da0c8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   da0cc:	e014      	b.n	da0f8 <gmtime_r+0x10c>
   da0ce:	0782      	lsls	r2, r0, #30
   da0d0:	d105      	bne.n	da0de <gmtime_r+0xf2>
   da0d2:	2464      	movs	r4, #100	; 0x64
   da0d4:	fbb0 f2f4 	udiv	r2, r0, r4
   da0d8:	fb04 0212 	mls	r2, r4, r2, r0
   da0dc:	b94a      	cbnz	r2, da0f2 <gmtime_r+0x106>
   da0de:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da0e2:	fbb0 f4f2 	udiv	r4, r0, r2
   da0e6:	fb02 0014 	mls	r0, r2, r4, r0
   da0ea:	fab0 f280 	clz	r2, r0
   da0ee:	0952      	lsrs	r2, r2, #5
   da0f0:	e000      	b.n	da0f4 <gmtime_r+0x108>
   da0f2:	2201      	movs	r2, #1
   da0f4:	333b      	adds	r3, #59	; 0x3b
   da0f6:	441a      	add	r2, r3
   da0f8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   da0fc:	2300      	movs	r3, #0
   da0fe:	61ca      	str	r2, [r1, #28]
   da100:	614d      	str	r5, [r1, #20]
   da102:	610e      	str	r6, [r1, #16]
   da104:	60cf      	str	r7, [r1, #12]
   da106:	620b      	str	r3, [r1, #32]
   da108:	4608      	mov	r0, r1
   da10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da10c:	00015180 	.word	0x00015180
   da110:	fffdc54f 	.word	0xfffdc54f
   da114:	00023ab1 	.word	0x00023ab1
   da118:	00023ab0 	.word	0x00023ab0

000da11c <_Balloc>:
   da11c:	b570      	push	{r4, r5, r6, lr}
   da11e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   da120:	4604      	mov	r4, r0
   da122:	460e      	mov	r6, r1
   da124:	b93d      	cbnz	r5, da136 <_Balloc+0x1a>
   da126:	2010      	movs	r0, #16
   da128:	f7fb fc52 	bl	d59d0 <malloc>
   da12c:	6260      	str	r0, [r4, #36]	; 0x24
   da12e:	6045      	str	r5, [r0, #4]
   da130:	6085      	str	r5, [r0, #8]
   da132:	6005      	str	r5, [r0, #0]
   da134:	60c5      	str	r5, [r0, #12]
   da136:	6a65      	ldr	r5, [r4, #36]	; 0x24
   da138:	68eb      	ldr	r3, [r5, #12]
   da13a:	b143      	cbz	r3, da14e <_Balloc+0x32>
   da13c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da13e:	68db      	ldr	r3, [r3, #12]
   da140:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   da144:	b178      	cbz	r0, da166 <_Balloc+0x4a>
   da146:	6802      	ldr	r2, [r0, #0]
   da148:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   da14c:	e017      	b.n	da17e <_Balloc+0x62>
   da14e:	2221      	movs	r2, #33	; 0x21
   da150:	2104      	movs	r1, #4
   da152:	4620      	mov	r0, r4
   da154:	f000 fbd1 	bl	da8fa <_calloc_r>
   da158:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da15a:	60e8      	str	r0, [r5, #12]
   da15c:	68db      	ldr	r3, [r3, #12]
   da15e:	2b00      	cmp	r3, #0
   da160:	d1ec      	bne.n	da13c <_Balloc+0x20>
   da162:	2000      	movs	r0, #0
   da164:	bd70      	pop	{r4, r5, r6, pc}
   da166:	2101      	movs	r1, #1
   da168:	fa01 f506 	lsl.w	r5, r1, r6
   da16c:	1d6a      	adds	r2, r5, #5
   da16e:	0092      	lsls	r2, r2, #2
   da170:	4620      	mov	r0, r4
   da172:	f000 fbc2 	bl	da8fa <_calloc_r>
   da176:	2800      	cmp	r0, #0
   da178:	d0f3      	beq.n	da162 <_Balloc+0x46>
   da17a:	6046      	str	r6, [r0, #4]
   da17c:	6085      	str	r5, [r0, #8]
   da17e:	2300      	movs	r3, #0
   da180:	6103      	str	r3, [r0, #16]
   da182:	60c3      	str	r3, [r0, #12]
   da184:	bd70      	pop	{r4, r5, r6, pc}

000da186 <_Bfree>:
   da186:	b570      	push	{r4, r5, r6, lr}
   da188:	6a44      	ldr	r4, [r0, #36]	; 0x24
   da18a:	4606      	mov	r6, r0
   da18c:	460d      	mov	r5, r1
   da18e:	b93c      	cbnz	r4, da1a0 <_Bfree+0x1a>
   da190:	2010      	movs	r0, #16
   da192:	f7fb fc1d 	bl	d59d0 <malloc>
   da196:	6270      	str	r0, [r6, #36]	; 0x24
   da198:	6044      	str	r4, [r0, #4]
   da19a:	6084      	str	r4, [r0, #8]
   da19c:	6004      	str	r4, [r0, #0]
   da19e:	60c4      	str	r4, [r0, #12]
   da1a0:	b13d      	cbz	r5, da1b2 <_Bfree+0x2c>
   da1a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   da1a4:	686a      	ldr	r2, [r5, #4]
   da1a6:	68db      	ldr	r3, [r3, #12]
   da1a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da1ac:	6029      	str	r1, [r5, #0]
   da1ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   da1b2:	bd70      	pop	{r4, r5, r6, pc}

000da1b4 <__multadd>:
   da1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da1b8:	690d      	ldr	r5, [r1, #16]
   da1ba:	461f      	mov	r7, r3
   da1bc:	4606      	mov	r6, r0
   da1be:	460c      	mov	r4, r1
   da1c0:	f101 0e14 	add.w	lr, r1, #20
   da1c4:	2300      	movs	r3, #0
   da1c6:	f8de 0000 	ldr.w	r0, [lr]
   da1ca:	b281      	uxth	r1, r0
   da1cc:	fb02 7101 	mla	r1, r2, r1, r7
   da1d0:	0c0f      	lsrs	r7, r1, #16
   da1d2:	0c00      	lsrs	r0, r0, #16
   da1d4:	fb02 7000 	mla	r0, r2, r0, r7
   da1d8:	b289      	uxth	r1, r1
   da1da:	3301      	adds	r3, #1
   da1dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   da1e0:	429d      	cmp	r5, r3
   da1e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   da1e6:	f84e 1b04 	str.w	r1, [lr], #4
   da1ea:	dcec      	bgt.n	da1c6 <__multadd+0x12>
   da1ec:	b1d7      	cbz	r7, da224 <__multadd+0x70>
   da1ee:	68a3      	ldr	r3, [r4, #8]
   da1f0:	429d      	cmp	r5, r3
   da1f2:	db12      	blt.n	da21a <__multadd+0x66>
   da1f4:	6861      	ldr	r1, [r4, #4]
   da1f6:	4630      	mov	r0, r6
   da1f8:	3101      	adds	r1, #1
   da1fa:	f7ff ff8f 	bl	da11c <_Balloc>
   da1fe:	6922      	ldr	r2, [r4, #16]
   da200:	3202      	adds	r2, #2
   da202:	f104 010c 	add.w	r1, r4, #12
   da206:	4680      	mov	r8, r0
   da208:	0092      	lsls	r2, r2, #2
   da20a:	300c      	adds	r0, #12
   da20c:	f7fe f96a 	bl	d84e4 <memcpy>
   da210:	4621      	mov	r1, r4
   da212:	4630      	mov	r0, r6
   da214:	f7ff ffb7 	bl	da186 <_Bfree>
   da218:	4644      	mov	r4, r8
   da21a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   da21e:	3501      	adds	r5, #1
   da220:	615f      	str	r7, [r3, #20]
   da222:	6125      	str	r5, [r4, #16]
   da224:	4620      	mov	r0, r4
   da226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da22a <__s2b>:
   da22a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da22e:	460c      	mov	r4, r1
   da230:	4615      	mov	r5, r2
   da232:	461f      	mov	r7, r3
   da234:	2209      	movs	r2, #9
   da236:	3308      	adds	r3, #8
   da238:	4606      	mov	r6, r0
   da23a:	fb93 f3f2 	sdiv	r3, r3, r2
   da23e:	2100      	movs	r1, #0
   da240:	2201      	movs	r2, #1
   da242:	429a      	cmp	r2, r3
   da244:	da02      	bge.n	da24c <__s2b+0x22>
   da246:	0052      	lsls	r2, r2, #1
   da248:	3101      	adds	r1, #1
   da24a:	e7fa      	b.n	da242 <__s2b+0x18>
   da24c:	4630      	mov	r0, r6
   da24e:	f7ff ff65 	bl	da11c <_Balloc>
   da252:	9b08      	ldr	r3, [sp, #32]
   da254:	6143      	str	r3, [r0, #20]
   da256:	2d09      	cmp	r5, #9
   da258:	f04f 0301 	mov.w	r3, #1
   da25c:	6103      	str	r3, [r0, #16]
   da25e:	dd11      	ble.n	da284 <__s2b+0x5a>
   da260:	f104 0809 	add.w	r8, r4, #9
   da264:	46c1      	mov	r9, r8
   da266:	442c      	add	r4, r5
   da268:	f819 3b01 	ldrb.w	r3, [r9], #1
   da26c:	4601      	mov	r1, r0
   da26e:	3b30      	subs	r3, #48	; 0x30
   da270:	220a      	movs	r2, #10
   da272:	4630      	mov	r0, r6
   da274:	f7ff ff9e 	bl	da1b4 <__multadd>
   da278:	45a1      	cmp	r9, r4
   da27a:	d1f5      	bne.n	da268 <__s2b+0x3e>
   da27c:	eb08 0405 	add.w	r4, r8, r5
   da280:	3c08      	subs	r4, #8
   da282:	e001      	b.n	da288 <__s2b+0x5e>
   da284:	340a      	adds	r4, #10
   da286:	2509      	movs	r5, #9
   da288:	1b2d      	subs	r5, r5, r4
   da28a:	1963      	adds	r3, r4, r5
   da28c:	429f      	cmp	r7, r3
   da28e:	dd08      	ble.n	da2a2 <__s2b+0x78>
   da290:	f814 3b01 	ldrb.w	r3, [r4], #1
   da294:	4601      	mov	r1, r0
   da296:	3b30      	subs	r3, #48	; 0x30
   da298:	220a      	movs	r2, #10
   da29a:	4630      	mov	r0, r6
   da29c:	f7ff ff8a 	bl	da1b4 <__multadd>
   da2a0:	e7f3      	b.n	da28a <__s2b+0x60>
   da2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da2a6 <__hi0bits>:
   da2a6:	0c03      	lsrs	r3, r0, #16
   da2a8:	041b      	lsls	r3, r3, #16
   da2aa:	b913      	cbnz	r3, da2b2 <__hi0bits+0xc>
   da2ac:	0400      	lsls	r0, r0, #16
   da2ae:	2310      	movs	r3, #16
   da2b0:	e000      	b.n	da2b4 <__hi0bits+0xe>
   da2b2:	2300      	movs	r3, #0
   da2b4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da2b8:	bf04      	itt	eq
   da2ba:	0200      	lsleq	r0, r0, #8
   da2bc:	3308      	addeq	r3, #8
   da2be:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da2c2:	bf04      	itt	eq
   da2c4:	0100      	lsleq	r0, r0, #4
   da2c6:	3304      	addeq	r3, #4
   da2c8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da2cc:	bf04      	itt	eq
   da2ce:	0080      	lsleq	r0, r0, #2
   da2d0:	3302      	addeq	r3, #2
   da2d2:	2800      	cmp	r0, #0
   da2d4:	db03      	blt.n	da2de <__hi0bits+0x38>
   da2d6:	0042      	lsls	r2, r0, #1
   da2d8:	d503      	bpl.n	da2e2 <__hi0bits+0x3c>
   da2da:	1c58      	adds	r0, r3, #1
   da2dc:	4770      	bx	lr
   da2de:	4618      	mov	r0, r3
   da2e0:	4770      	bx	lr
   da2e2:	2020      	movs	r0, #32
   da2e4:	4770      	bx	lr

000da2e6 <__lo0bits>:
   da2e6:	6803      	ldr	r3, [r0, #0]
   da2e8:	f013 0207 	ands.w	r2, r3, #7
   da2ec:	d00b      	beq.n	da306 <__lo0bits+0x20>
   da2ee:	07d9      	lsls	r1, r3, #31
   da2f0:	d422      	bmi.n	da338 <__lo0bits+0x52>
   da2f2:	079a      	lsls	r2, r3, #30
   da2f4:	bf4b      	itete	mi
   da2f6:	085b      	lsrmi	r3, r3, #1
   da2f8:	089b      	lsrpl	r3, r3, #2
   da2fa:	6003      	strmi	r3, [r0, #0]
   da2fc:	6003      	strpl	r3, [r0, #0]
   da2fe:	bf4c      	ite	mi
   da300:	2001      	movmi	r0, #1
   da302:	2002      	movpl	r0, #2
   da304:	4770      	bx	lr
   da306:	b299      	uxth	r1, r3
   da308:	b909      	cbnz	r1, da30e <__lo0bits+0x28>
   da30a:	0c1b      	lsrs	r3, r3, #16
   da30c:	2210      	movs	r2, #16
   da30e:	f013 0fff 	tst.w	r3, #255	; 0xff
   da312:	bf04      	itt	eq
   da314:	0a1b      	lsreq	r3, r3, #8
   da316:	3208      	addeq	r2, #8
   da318:	0719      	lsls	r1, r3, #28
   da31a:	bf04      	itt	eq
   da31c:	091b      	lsreq	r3, r3, #4
   da31e:	3204      	addeq	r2, #4
   da320:	0799      	lsls	r1, r3, #30
   da322:	bf04      	itt	eq
   da324:	089b      	lsreq	r3, r3, #2
   da326:	3202      	addeq	r2, #2
   da328:	07d9      	lsls	r1, r3, #31
   da32a:	d402      	bmi.n	da332 <__lo0bits+0x4c>
   da32c:	085b      	lsrs	r3, r3, #1
   da32e:	d005      	beq.n	da33c <__lo0bits+0x56>
   da330:	3201      	adds	r2, #1
   da332:	6003      	str	r3, [r0, #0]
   da334:	4610      	mov	r0, r2
   da336:	4770      	bx	lr
   da338:	2000      	movs	r0, #0
   da33a:	4770      	bx	lr
   da33c:	2020      	movs	r0, #32
   da33e:	4770      	bx	lr

000da340 <__i2b>:
   da340:	b510      	push	{r4, lr}
   da342:	460c      	mov	r4, r1
   da344:	2101      	movs	r1, #1
   da346:	f7ff fee9 	bl	da11c <_Balloc>
   da34a:	2201      	movs	r2, #1
   da34c:	6144      	str	r4, [r0, #20]
   da34e:	6102      	str	r2, [r0, #16]
   da350:	bd10      	pop	{r4, pc}

000da352 <__multiply>:
   da352:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da356:	4614      	mov	r4, r2
   da358:	690a      	ldr	r2, [r1, #16]
   da35a:	6923      	ldr	r3, [r4, #16]
   da35c:	429a      	cmp	r2, r3
   da35e:	bfb8      	it	lt
   da360:	460b      	movlt	r3, r1
   da362:	4688      	mov	r8, r1
   da364:	bfbc      	itt	lt
   da366:	46a0      	movlt	r8, r4
   da368:	461c      	movlt	r4, r3
   da36a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   da36e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da372:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da376:	f8d8 1004 	ldr.w	r1, [r8, #4]
   da37a:	eb07 0609 	add.w	r6, r7, r9
   da37e:	429e      	cmp	r6, r3
   da380:	bfc8      	it	gt
   da382:	3101      	addgt	r1, #1
   da384:	f7ff feca 	bl	da11c <_Balloc>
   da388:	f100 0514 	add.w	r5, r0, #20
   da38c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   da390:	462b      	mov	r3, r5
   da392:	2200      	movs	r2, #0
   da394:	4563      	cmp	r3, ip
   da396:	d202      	bcs.n	da39e <__multiply+0x4c>
   da398:	f843 2b04 	str.w	r2, [r3], #4
   da39c:	e7fa      	b.n	da394 <__multiply+0x42>
   da39e:	f104 0214 	add.w	r2, r4, #20
   da3a2:	f108 0114 	add.w	r1, r8, #20
   da3a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da3aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   da3ae:	9300      	str	r3, [sp, #0]
   da3b0:	9b00      	ldr	r3, [sp, #0]
   da3b2:	9201      	str	r2, [sp, #4]
   da3b4:	4293      	cmp	r3, r2
   da3b6:	d957      	bls.n	da468 <__multiply+0x116>
   da3b8:	f8b2 b000 	ldrh.w	fp, [r2]
   da3bc:	f1bb 0f00 	cmp.w	fp, #0
   da3c0:	d023      	beq.n	da40a <__multiply+0xb8>
   da3c2:	4689      	mov	r9, r1
   da3c4:	46ae      	mov	lr, r5
   da3c6:	f04f 0800 	mov.w	r8, #0
   da3ca:	f859 4b04 	ldr.w	r4, [r9], #4
   da3ce:	f8be a000 	ldrh.w	sl, [lr]
   da3d2:	b2a3      	uxth	r3, r4
   da3d4:	fb0b a303 	mla	r3, fp, r3, sl
   da3d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   da3dc:	f8de 4000 	ldr.w	r4, [lr]
   da3e0:	4443      	add	r3, r8
   da3e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   da3e6:	fb0b 840a 	mla	r4, fp, sl, r8
   da3ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   da3ee:	46f2      	mov	sl, lr
   da3f0:	b29b      	uxth	r3, r3
   da3f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   da3f6:	454f      	cmp	r7, r9
   da3f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   da3fc:	f84a 3b04 	str.w	r3, [sl], #4
   da400:	d901      	bls.n	da406 <__multiply+0xb4>
   da402:	46d6      	mov	lr, sl
   da404:	e7e1      	b.n	da3ca <__multiply+0x78>
   da406:	f8ce 8004 	str.w	r8, [lr, #4]
   da40a:	9b01      	ldr	r3, [sp, #4]
   da40c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   da410:	3204      	adds	r2, #4
   da412:	f1ba 0f00 	cmp.w	sl, #0
   da416:	d021      	beq.n	da45c <__multiply+0x10a>
   da418:	682b      	ldr	r3, [r5, #0]
   da41a:	462c      	mov	r4, r5
   da41c:	4689      	mov	r9, r1
   da41e:	f04f 0800 	mov.w	r8, #0
   da422:	f8b9 e000 	ldrh.w	lr, [r9]
   da426:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   da42a:	fb0a be0e 	mla	lr, sl, lr, fp
   da42e:	44f0      	add	r8, lr
   da430:	46a3      	mov	fp, r4
   da432:	b29b      	uxth	r3, r3
   da434:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   da438:	f84b 3b04 	str.w	r3, [fp], #4
   da43c:	f859 3b04 	ldr.w	r3, [r9], #4
   da440:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   da444:	0c1b      	lsrs	r3, r3, #16
   da446:	fb0a e303 	mla	r3, sl, r3, lr
   da44a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   da44e:	454f      	cmp	r7, r9
   da450:	ea4f 4813 	mov.w	r8, r3, lsr #16
   da454:	d901      	bls.n	da45a <__multiply+0x108>
   da456:	465c      	mov	r4, fp
   da458:	e7e3      	b.n	da422 <__multiply+0xd0>
   da45a:	6063      	str	r3, [r4, #4]
   da45c:	3504      	adds	r5, #4
   da45e:	e7a7      	b.n	da3b0 <__multiply+0x5e>
   da460:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   da464:	b913      	cbnz	r3, da46c <__multiply+0x11a>
   da466:	3e01      	subs	r6, #1
   da468:	2e00      	cmp	r6, #0
   da46a:	dcf9      	bgt.n	da460 <__multiply+0x10e>
   da46c:	6106      	str	r6, [r0, #16]
   da46e:	b003      	add	sp, #12
   da470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da474 <__pow5mult>:
   da474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da478:	4615      	mov	r5, r2
   da47a:	f012 0203 	ands.w	r2, r2, #3
   da47e:	4606      	mov	r6, r0
   da480:	460f      	mov	r7, r1
   da482:	d007      	beq.n	da494 <__pow5mult+0x20>
   da484:	3a01      	subs	r2, #1
   da486:	4c21      	ldr	r4, [pc, #132]	; (da50c <__pow5mult+0x98>)
   da488:	2300      	movs	r3, #0
   da48a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da48e:	f7ff fe91 	bl	da1b4 <__multadd>
   da492:	4607      	mov	r7, r0
   da494:	10ad      	asrs	r5, r5, #2
   da496:	d036      	beq.n	da506 <__pow5mult+0x92>
   da498:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da49a:	b93c      	cbnz	r4, da4ac <__pow5mult+0x38>
   da49c:	2010      	movs	r0, #16
   da49e:	f7fb fa97 	bl	d59d0 <malloc>
   da4a2:	6270      	str	r0, [r6, #36]	; 0x24
   da4a4:	6044      	str	r4, [r0, #4]
   da4a6:	6084      	str	r4, [r0, #8]
   da4a8:	6004      	str	r4, [r0, #0]
   da4aa:	60c4      	str	r4, [r0, #12]
   da4ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da4b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da4b4:	b94c      	cbnz	r4, da4ca <__pow5mult+0x56>
   da4b6:	f240 2171 	movw	r1, #625	; 0x271
   da4ba:	4630      	mov	r0, r6
   da4bc:	f7ff ff40 	bl	da340 <__i2b>
   da4c0:	2300      	movs	r3, #0
   da4c2:	f8c8 0008 	str.w	r0, [r8, #8]
   da4c6:	4604      	mov	r4, r0
   da4c8:	6003      	str	r3, [r0, #0]
   da4ca:	f04f 0800 	mov.w	r8, #0
   da4ce:	07eb      	lsls	r3, r5, #31
   da4d0:	d50a      	bpl.n	da4e8 <__pow5mult+0x74>
   da4d2:	4639      	mov	r1, r7
   da4d4:	4622      	mov	r2, r4
   da4d6:	4630      	mov	r0, r6
   da4d8:	f7ff ff3b 	bl	da352 <__multiply>
   da4dc:	4639      	mov	r1, r7
   da4de:	4681      	mov	r9, r0
   da4e0:	4630      	mov	r0, r6
   da4e2:	f7ff fe50 	bl	da186 <_Bfree>
   da4e6:	464f      	mov	r7, r9
   da4e8:	106d      	asrs	r5, r5, #1
   da4ea:	d00c      	beq.n	da506 <__pow5mult+0x92>
   da4ec:	6820      	ldr	r0, [r4, #0]
   da4ee:	b108      	cbz	r0, da4f4 <__pow5mult+0x80>
   da4f0:	4604      	mov	r4, r0
   da4f2:	e7ec      	b.n	da4ce <__pow5mult+0x5a>
   da4f4:	4622      	mov	r2, r4
   da4f6:	4621      	mov	r1, r4
   da4f8:	4630      	mov	r0, r6
   da4fa:	f7ff ff2a 	bl	da352 <__multiply>
   da4fe:	6020      	str	r0, [r4, #0]
   da500:	f8c0 8000 	str.w	r8, [r0]
   da504:	e7f4      	b.n	da4f0 <__pow5mult+0x7c>
   da506:	4638      	mov	r0, r7
   da508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da50c:	000db3a0 	.word	0x000db3a0

000da510 <__lshift>:
   da510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da514:	460c      	mov	r4, r1
   da516:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da51a:	6926      	ldr	r6, [r4, #16]
   da51c:	6849      	ldr	r1, [r1, #4]
   da51e:	68a3      	ldr	r3, [r4, #8]
   da520:	4456      	add	r6, sl
   da522:	4607      	mov	r7, r0
   da524:	4691      	mov	r9, r2
   da526:	1c75      	adds	r5, r6, #1
   da528:	42ab      	cmp	r3, r5
   da52a:	da02      	bge.n	da532 <__lshift+0x22>
   da52c:	3101      	adds	r1, #1
   da52e:	005b      	lsls	r3, r3, #1
   da530:	e7fa      	b.n	da528 <__lshift+0x18>
   da532:	4638      	mov	r0, r7
   da534:	f7ff fdf2 	bl	da11c <_Balloc>
   da538:	2300      	movs	r3, #0
   da53a:	4680      	mov	r8, r0
   da53c:	f100 0114 	add.w	r1, r0, #20
   da540:	461a      	mov	r2, r3
   da542:	4553      	cmp	r3, sl
   da544:	da03      	bge.n	da54e <__lshift+0x3e>
   da546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   da54a:	3301      	adds	r3, #1
   da54c:	e7f9      	b.n	da542 <__lshift+0x32>
   da54e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   da552:	6920      	ldr	r0, [r4, #16]
   da554:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   da558:	f019 091f 	ands.w	r9, r9, #31
   da55c:	f104 0114 	add.w	r1, r4, #20
   da560:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   da564:	d014      	beq.n	da590 <__lshift+0x80>
   da566:	f1c9 0c20 	rsb	ip, r9, #32
   da56a:	2200      	movs	r2, #0
   da56c:	6808      	ldr	r0, [r1, #0]
   da56e:	fa00 f009 	lsl.w	r0, r0, r9
   da572:	4302      	orrs	r2, r0
   da574:	469a      	mov	sl, r3
   da576:	f843 2b04 	str.w	r2, [r3], #4
   da57a:	f851 2b04 	ldr.w	r2, [r1], #4
   da57e:	458e      	cmp	lr, r1
   da580:	fa22 f20c 	lsr.w	r2, r2, ip
   da584:	d8f2      	bhi.n	da56c <__lshift+0x5c>
   da586:	f8ca 2004 	str.w	r2, [sl, #4]
   da58a:	b142      	cbz	r2, da59e <__lshift+0x8e>
   da58c:	1cb5      	adds	r5, r6, #2
   da58e:	e006      	b.n	da59e <__lshift+0x8e>
   da590:	3b04      	subs	r3, #4
   da592:	f851 2b04 	ldr.w	r2, [r1], #4
   da596:	f843 2f04 	str.w	r2, [r3, #4]!
   da59a:	458e      	cmp	lr, r1
   da59c:	d8f9      	bhi.n	da592 <__lshift+0x82>
   da59e:	3d01      	subs	r5, #1
   da5a0:	4638      	mov	r0, r7
   da5a2:	f8c8 5010 	str.w	r5, [r8, #16]
   da5a6:	4621      	mov	r1, r4
   da5a8:	f7ff fded 	bl	da186 <_Bfree>
   da5ac:	4640      	mov	r0, r8
   da5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da5b2 <__mcmp>:
   da5b2:	6903      	ldr	r3, [r0, #16]
   da5b4:	690a      	ldr	r2, [r1, #16]
   da5b6:	1a9b      	subs	r3, r3, r2
   da5b8:	b510      	push	{r4, lr}
   da5ba:	d111      	bne.n	da5e0 <__mcmp+0x2e>
   da5bc:	0092      	lsls	r2, r2, #2
   da5be:	3014      	adds	r0, #20
   da5c0:	3114      	adds	r1, #20
   da5c2:	1883      	adds	r3, r0, r2
   da5c4:	440a      	add	r2, r1
   da5c6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   da5ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   da5ce:	428c      	cmp	r4, r1
   da5d0:	d002      	beq.n	da5d8 <__mcmp+0x26>
   da5d2:	d307      	bcc.n	da5e4 <__mcmp+0x32>
   da5d4:	2001      	movs	r0, #1
   da5d6:	bd10      	pop	{r4, pc}
   da5d8:	4298      	cmp	r0, r3
   da5da:	d3f4      	bcc.n	da5c6 <__mcmp+0x14>
   da5dc:	2000      	movs	r0, #0
   da5de:	bd10      	pop	{r4, pc}
   da5e0:	4618      	mov	r0, r3
   da5e2:	bd10      	pop	{r4, pc}
   da5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da5e8:	bd10      	pop	{r4, pc}

000da5ea <__mdiff>:
   da5ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da5ee:	460c      	mov	r4, r1
   da5f0:	4607      	mov	r7, r0
   da5f2:	4611      	mov	r1, r2
   da5f4:	4620      	mov	r0, r4
   da5f6:	4615      	mov	r5, r2
   da5f8:	f7ff ffdb 	bl	da5b2 <__mcmp>
   da5fc:	1e06      	subs	r6, r0, #0
   da5fe:	d108      	bne.n	da612 <__mdiff+0x28>
   da600:	4631      	mov	r1, r6
   da602:	4638      	mov	r0, r7
   da604:	f7ff fd8a 	bl	da11c <_Balloc>
   da608:	2301      	movs	r3, #1
   da60a:	6103      	str	r3, [r0, #16]
   da60c:	6146      	str	r6, [r0, #20]
   da60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da612:	bfbc      	itt	lt
   da614:	4623      	movlt	r3, r4
   da616:	462c      	movlt	r4, r5
   da618:	4638      	mov	r0, r7
   da61a:	6861      	ldr	r1, [r4, #4]
   da61c:	bfba      	itte	lt
   da61e:	461d      	movlt	r5, r3
   da620:	2601      	movlt	r6, #1
   da622:	2600      	movge	r6, #0
   da624:	f7ff fd7a 	bl	da11c <_Balloc>
   da628:	692b      	ldr	r3, [r5, #16]
   da62a:	60c6      	str	r6, [r0, #12]
   da62c:	6926      	ldr	r6, [r4, #16]
   da62e:	f105 0914 	add.w	r9, r5, #20
   da632:	3414      	adds	r4, #20
   da634:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   da638:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   da63c:	f100 0514 	add.w	r5, r0, #20
   da640:	f04f 0c00 	mov.w	ip, #0
   da644:	f854 3b04 	ldr.w	r3, [r4], #4
   da648:	f859 2b04 	ldr.w	r2, [r9], #4
   da64c:	fa1c f183 	uxtah	r1, ip, r3
   da650:	fa1f fe82 	uxth.w	lr, r2
   da654:	0c12      	lsrs	r2, r2, #16
   da656:	ebce 0101 	rsb	r1, lr, r1
   da65a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   da65e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   da662:	b289      	uxth	r1, r1
   da664:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da668:	45c8      	cmp	r8, r9
   da66a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   da66e:	46a6      	mov	lr, r4
   da670:	f845 3b04 	str.w	r3, [r5], #4
   da674:	d8e6      	bhi.n	da644 <__mdiff+0x5a>
   da676:	45be      	cmp	lr, r7
   da678:	d20e      	bcs.n	da698 <__mdiff+0xae>
   da67a:	f85e 1b04 	ldr.w	r1, [lr], #4
   da67e:	fa1c f281 	uxtah	r2, ip, r1
   da682:	1413      	asrs	r3, r2, #16
   da684:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   da688:	b292      	uxth	r2, r2
   da68a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   da68e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da692:	f845 2b04 	str.w	r2, [r5], #4
   da696:	e7ee      	b.n	da676 <__mdiff+0x8c>
   da698:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   da69c:	b90b      	cbnz	r3, da6a2 <__mdiff+0xb8>
   da69e:	3e01      	subs	r6, #1
   da6a0:	e7fa      	b.n	da698 <__mdiff+0xae>
   da6a2:	6106      	str	r6, [r0, #16]
   da6a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da6a8 <__ulp>:
   da6a8:	4b12      	ldr	r3, [pc, #72]	; (da6f4 <__ulp+0x4c>)
   da6aa:	ee10 2a90 	vmov	r2, s1
   da6ae:	401a      	ands	r2, r3
   da6b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   da6b4:	2b00      	cmp	r3, #0
   da6b6:	dd02      	ble.n	da6be <__ulp+0x16>
   da6b8:	2000      	movs	r0, #0
   da6ba:	4619      	mov	r1, r3
   da6bc:	e017      	b.n	da6ee <__ulp+0x46>
   da6be:	425b      	negs	r3, r3
   da6c0:	151b      	asrs	r3, r3, #20
   da6c2:	2b13      	cmp	r3, #19
   da6c4:	f04f 0000 	mov.w	r0, #0
   da6c8:	f04f 0100 	mov.w	r1, #0
   da6cc:	dc04      	bgt.n	da6d8 <__ulp+0x30>
   da6ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   da6d2:	fa42 f103 	asr.w	r1, r2, r3
   da6d6:	e00a      	b.n	da6ee <__ulp+0x46>
   da6d8:	3b14      	subs	r3, #20
   da6da:	2b1e      	cmp	r3, #30
   da6dc:	f04f 0201 	mov.w	r2, #1
   da6e0:	bfda      	itte	le
   da6e2:	f1c3 031f 	rsble	r3, r3, #31
   da6e6:	fa02 f303 	lslle.w	r3, r2, r3
   da6ea:	4613      	movgt	r3, r2
   da6ec:	4618      	mov	r0, r3
   da6ee:	ec41 0b10 	vmov	d0, r0, r1
   da6f2:	4770      	bx	lr
   da6f4:	7ff00000 	.word	0x7ff00000

000da6f8 <__b2d>:
   da6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da6fa:	6905      	ldr	r5, [r0, #16]
   da6fc:	f100 0614 	add.w	r6, r0, #20
   da700:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   da704:	1f2f      	subs	r7, r5, #4
   da706:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da70a:	4620      	mov	r0, r4
   da70c:	f7ff fdcb 	bl	da2a6 <__hi0bits>
   da710:	f1c0 0320 	rsb	r3, r0, #32
   da714:	280a      	cmp	r0, #10
   da716:	600b      	str	r3, [r1, #0]
   da718:	dc14      	bgt.n	da744 <__b2d+0x4c>
   da71a:	f1c0 0e0b 	rsb	lr, r0, #11
   da71e:	fa24 f10e 	lsr.w	r1, r4, lr
   da722:	42be      	cmp	r6, r7
   da724:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   da728:	bf34      	ite	cc
   da72a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da72e:	2100      	movcs	r1, #0
   da730:	3015      	adds	r0, #21
   da732:	fa04 f000 	lsl.w	r0, r4, r0
   da736:	fa21 f10e 	lsr.w	r1, r1, lr
   da73a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da73e:	ea40 0201 	orr.w	r2, r0, r1
   da742:	e023      	b.n	da78c <__b2d+0x94>
   da744:	42be      	cmp	r6, r7
   da746:	bf3a      	itte	cc
   da748:	f1a5 0708 	subcc.w	r7, r5, #8
   da74c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da750:	2100      	movcs	r1, #0
   da752:	380b      	subs	r0, #11
   da754:	d015      	beq.n	da782 <__b2d+0x8a>
   da756:	4084      	lsls	r4, r0
   da758:	f1c0 0520 	rsb	r5, r0, #32
   da75c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   da760:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   da764:	42b7      	cmp	r7, r6
   da766:	fa21 fe05 	lsr.w	lr, r1, r5
   da76a:	ea44 030e 	orr.w	r3, r4, lr
   da76e:	bf8c      	ite	hi
   da770:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   da774:	2400      	movls	r4, #0
   da776:	fa01 f000 	lsl.w	r0, r1, r0
   da77a:	40ec      	lsrs	r4, r5
   da77c:	ea40 0204 	orr.w	r2, r0, r4
   da780:	e004      	b.n	da78c <__b2d+0x94>
   da782:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   da786:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da78a:	460a      	mov	r2, r1
   da78c:	ec43 2b10 	vmov	d0, r2, r3
   da790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da792 <__d2b>:
   da792:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da796:	460e      	mov	r6, r1
   da798:	2101      	movs	r1, #1
   da79a:	ec59 8b10 	vmov	r8, r9, d0
   da79e:	4615      	mov	r5, r2
   da7a0:	f7ff fcbc 	bl	da11c <_Balloc>
   da7a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   da7a8:	4607      	mov	r7, r0
   da7aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   da7ae:	b10c      	cbz	r4, da7b4 <__d2b+0x22>
   da7b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da7b4:	9301      	str	r3, [sp, #4]
   da7b6:	f1b8 0f00 	cmp.w	r8, #0
   da7ba:	d019      	beq.n	da7f0 <__d2b+0x5e>
   da7bc:	a802      	add	r0, sp, #8
   da7be:	f840 8d08 	str.w	r8, [r0, #-8]!
   da7c2:	f7ff fd90 	bl	da2e6 <__lo0bits>
   da7c6:	9b00      	ldr	r3, [sp, #0]
   da7c8:	b148      	cbz	r0, da7de <__d2b+0x4c>
   da7ca:	9a01      	ldr	r2, [sp, #4]
   da7cc:	f1c0 0120 	rsb	r1, r0, #32
   da7d0:	fa02 f101 	lsl.w	r1, r2, r1
   da7d4:	430b      	orrs	r3, r1
   da7d6:	40c2      	lsrs	r2, r0
   da7d8:	617b      	str	r3, [r7, #20]
   da7da:	9201      	str	r2, [sp, #4]
   da7dc:	e000      	b.n	da7e0 <__d2b+0x4e>
   da7de:	617b      	str	r3, [r7, #20]
   da7e0:	9b01      	ldr	r3, [sp, #4]
   da7e2:	61bb      	str	r3, [r7, #24]
   da7e4:	2b00      	cmp	r3, #0
   da7e6:	bf14      	ite	ne
   da7e8:	2102      	movne	r1, #2
   da7ea:	2101      	moveq	r1, #1
   da7ec:	6139      	str	r1, [r7, #16]
   da7ee:	e007      	b.n	da800 <__d2b+0x6e>
   da7f0:	a801      	add	r0, sp, #4
   da7f2:	f7ff fd78 	bl	da2e6 <__lo0bits>
   da7f6:	9b01      	ldr	r3, [sp, #4]
   da7f8:	617b      	str	r3, [r7, #20]
   da7fa:	2101      	movs	r1, #1
   da7fc:	6139      	str	r1, [r7, #16]
   da7fe:	3020      	adds	r0, #32
   da800:	b134      	cbz	r4, da810 <__d2b+0x7e>
   da802:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   da806:	4404      	add	r4, r0
   da808:	6034      	str	r4, [r6, #0]
   da80a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da80e:	e009      	b.n	da824 <__d2b+0x92>
   da810:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   da814:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da818:	6030      	str	r0, [r6, #0]
   da81a:	6918      	ldr	r0, [r3, #16]
   da81c:	f7ff fd43 	bl	da2a6 <__hi0bits>
   da820:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   da824:	6028      	str	r0, [r5, #0]
   da826:	4638      	mov	r0, r7
   da828:	b003      	add	sp, #12
   da82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da82e <__ratio>:
   da82e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da832:	4688      	mov	r8, r1
   da834:	4669      	mov	r1, sp
   da836:	4681      	mov	r9, r0
   da838:	f7ff ff5e 	bl	da6f8 <__b2d>
   da83c:	a901      	add	r1, sp, #4
   da83e:	4640      	mov	r0, r8
   da840:	ec55 4b10 	vmov	r4, r5, d0
   da844:	f7ff ff58 	bl	da6f8 <__b2d>
   da848:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da84c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da850:	1a9a      	subs	r2, r3, r2
   da852:	e89d 000a 	ldmia.w	sp, {r1, r3}
   da856:	1ac9      	subs	r1, r1, r3
   da858:	ec57 6b10 	vmov	r6, r7, d0
   da85c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   da860:	2b00      	cmp	r3, #0
   da862:	bfcc      	ite	gt
   da864:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   da868:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   da86c:	4632      	mov	r2, r6
   da86e:	463b      	mov	r3, r7
   da870:	4620      	mov	r0, r4
   da872:	4629      	mov	r1, r5
   da874:	f7fd fb0a 	bl	d7e8c <__aeabi_ddiv>
   da878:	ec41 0b10 	vmov	d0, r0, r1
   da87c:	b003      	add	sp, #12
   da87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da882 <__copybits>:
   da882:	3901      	subs	r1, #1
   da884:	b510      	push	{r4, lr}
   da886:	1149      	asrs	r1, r1, #5
   da888:	6914      	ldr	r4, [r2, #16]
   da88a:	3101      	adds	r1, #1
   da88c:	f102 0314 	add.w	r3, r2, #20
   da890:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da894:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da898:	42a3      	cmp	r3, r4
   da89a:	4602      	mov	r2, r0
   da89c:	d204      	bcs.n	da8a8 <__copybits+0x26>
   da89e:	f853 2b04 	ldr.w	r2, [r3], #4
   da8a2:	f840 2b04 	str.w	r2, [r0], #4
   da8a6:	e7f7      	b.n	da898 <__copybits+0x16>
   da8a8:	2300      	movs	r3, #0
   da8aa:	428a      	cmp	r2, r1
   da8ac:	d202      	bcs.n	da8b4 <__copybits+0x32>
   da8ae:	f842 3b04 	str.w	r3, [r2], #4
   da8b2:	e7fa      	b.n	da8aa <__copybits+0x28>
   da8b4:	bd10      	pop	{r4, pc}

000da8b6 <__any_on>:
   da8b6:	f100 0214 	add.w	r2, r0, #20
   da8ba:	6900      	ldr	r0, [r0, #16]
   da8bc:	114b      	asrs	r3, r1, #5
   da8be:	4298      	cmp	r0, r3
   da8c0:	b510      	push	{r4, lr}
   da8c2:	db0c      	blt.n	da8de <__any_on+0x28>
   da8c4:	dd0c      	ble.n	da8e0 <__any_on+0x2a>
   da8c6:	f011 011f 	ands.w	r1, r1, #31
   da8ca:	d009      	beq.n	da8e0 <__any_on+0x2a>
   da8cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da8d0:	fa24 f001 	lsr.w	r0, r4, r1
   da8d4:	fa00 f101 	lsl.w	r1, r0, r1
   da8d8:	428c      	cmp	r4, r1
   da8da:	d10c      	bne.n	da8f6 <__any_on+0x40>
   da8dc:	e000      	b.n	da8e0 <__any_on+0x2a>
   da8de:	4603      	mov	r3, r0
   da8e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da8e4:	4293      	cmp	r3, r2
   da8e6:	d904      	bls.n	da8f2 <__any_on+0x3c>
   da8e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da8ec:	2900      	cmp	r1, #0
   da8ee:	d0f9      	beq.n	da8e4 <__any_on+0x2e>
   da8f0:	e001      	b.n	da8f6 <__any_on+0x40>
   da8f2:	2000      	movs	r0, #0
   da8f4:	bd10      	pop	{r4, pc}
   da8f6:	2001      	movs	r0, #1
   da8f8:	bd10      	pop	{r4, pc}

000da8fa <_calloc_r>:
   da8fa:	b538      	push	{r3, r4, r5, lr}
   da8fc:	fb02 f401 	mul.w	r4, r2, r1
   da900:	4621      	mov	r1, r4
   da902:	f7fb f895 	bl	d5a30 <_malloc_r>
   da906:	4605      	mov	r5, r0
   da908:	b118      	cbz	r0, da912 <_calloc_r+0x18>
   da90a:	4622      	mov	r2, r4
   da90c:	2100      	movs	r1, #0
   da90e:	f7fd fdf4 	bl	d84fa <memset>
   da912:	4628      	mov	r0, r5
   da914:	bd38      	pop	{r3, r4, r5, pc}
	...

000da918 <nanf>:
   da918:	ed9f 0a01 	vldr	s0, [pc, #4]	; da920 <nanf+0x8>
   da91c:	4770      	bx	lr
   da91e:	bf00      	nop
   da920:	7fc00000 	.word	0x7fc00000

000da924 <__env_lock>:
   da924:	4770      	bx	lr

000da926 <__env_unlock>:
   da926:	4770      	bx	lr

000da928 <dynalib_user>:
   da928:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da938:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   da948:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...

000da97c <_ZL16MemVersionNumber>:
   da97c:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   da98c:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   da99c:	4643 4e55 313d 0d36 000a 227b 6554 706d     CFUN=16...{"Temp
   da9ac:	7265 7461 7275 2265 253a 2e34 6631 202c     erature":%4.1f, 
   da9bc:	4822 6d75 6469 7469 2279 253a 2e34 6631     "Humidity":%4.1f
   da9cc:	202c 5322 696f 6d6c 696f 7473 7275 3165     , "Soilmoisture1
   da9dc:	3a22 6925 202c 5322 696f 6d6c 696f 7473     ":%i, "Soilmoist
   da9ec:	7275 3265 3a22 6925 202c 7722 7461 7265     ure2":%i, "water
   da9fc:	7250 7365 7573 6572 3a22 6925 202c 5322     Pressure":%i, "S
   daa0c:	6c6f 6e65 696f 2264 253a 2c69 2220 6142     olenoid":%i, "Ba
   daa1c:	7474 7265 2279 253a 2c69 2220 6552 6573     ttery":%i, "Rese
   daa2c:	7374 3a22 6925 202c 4122 656c 7472 2273     ts":%i, "Alerts"
   daa3c:	253a 7d69 5200 6177 646e 2d61 6553 736e     :%i}.Rwanda-Sens
   daa4c:	2d65 6e41 2d64 6f43 746e 6f72 006c 6f4e     e-And-Control.No
   daa5c:	4420 7461 0061 6255 6469 746f 2073 6f48      Data.Ubidots Ho
   daa6c:	6b6f 5200 7365 6f70 736e 2065 6552 6563     ok.Response Rece
   daa7c:	7669 6465 5500 6b6e 6f6e 6e77 7220 7365     ived.Unknown res
   daa8c:	6f70 736e 2065 6572 6563 6976 6465 2520     ponse recevied %
   daa9c:	0069 3425 312e 2066 0043 3425 312e 2066     i.%4.1f C.%4.1f 
   daaac:	2525 2500 2069 2525 4300 6768 4420 7369     %%.%i %%.Chg Dis
   daabc:	6261 656c 2064 6554 706d 4300 6168 6772     abled Temp.Charg
   daacc:	6e69 2067 6964 6173 6c62 6465 5420 6d65     ing disabled Tem
   daadc:	6570 6172 7574 6572 4100 656c 7472 5300     perature.Alert.S
   daaec:	7465 5320 6c6f 7261 5020 776f 7265 6465     et Solar Powered
   daafc:	4d20 646f 0065 0030 6c43 6165 6572 2064      Mode.0.Cleared 
   dab0c:	6f53 616c 2072 6f50 6577 6572 2064 6f4d     Solar Powered Mo
   dab1c:	6564 5300 7465 5620 7265 6f62 6573 4d20     de.Set Verbose M
   dab2c:	646f 0065 6c43 6165 6572 2064 6556 6272     ode.Cleared Verb
   dab3c:	736f 2065 6f4d 6564 4c00 776f 5020 776f     ose Mode.Low Pow
   dab4c:	7265 4e00 726f 616d 206c 704f 7265 7461     er.Normal Operat
   dab5c:	6f69 736e 4f00 6570 206e 6874 2065 6156     ions.Open the Va
   dab6c:	766c 0065 6156 756c 2065 6f43 746e 6f72     lve.Value Contro
   dab7c:	206c 6944 6173 6c62 6465 2d00 0031 6c43     l Disabled.-1.Cl
   dab8c:	736f 2065 6874 2065 6176 766c 0065 6925     ose the valve.%i
   dab9c:	6d20 6553 0063 7246 6d6f 2520 2073 6f74      mSec.From %s to
   dabac:	2520 0073 7453 7461 2065 7254 6e61 6973      %s.State Transi
   dabbc:	6974 6e6f 7300 6170 6b72 642f 7665 6369     tion.spark/devic
   dabcc:	2f65 6573 7373 6f69 2f6e 6e65 0064 6f47     e/session/end.Go
   dabdc:	6e69 2067 6f74 5320 656c 7065 5300 6174     ing to Sleep.Sta
   dabec:	6574 4c00 776f 4220 7461 6574 7972 2d20     te.Low Battery -
   dabfc:	5320 656c 7065 6e69 0067 7245 6f72 2072      Sleeping.Error 
   dac0c:	7453 7461 2065 202d 6552 6573 0074 7245     State - Reset.Er
   dac1c:	6f72 2072 7453 7461 2065 202d 6f50 6577     ror State - Powe
   dac2c:	2072 7943 6c63 0065 7245 6f72 2072 7453     r Cycle.Error St
   dac3c:	7461 2065 202d 7546 6c6c 4d20 646f 6d65     ate - Full Modem
   dac4c:	5220 7365 7465 4500 7272 726f 7420 6b61      Reset.Error tak
   dac5c:	6e69 2067 654d 7361 7275 6d65 6e65 7374     ing Measurements
   dac6c:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
   dac7c:	746e 5200 6c65 6165 6573 5300 6174 6574     nt.Release.State
   dac8c:	664f 6843 0067 6f50 6577 4372 6e6f 6574     OfChg.PowerConte
   dac9c:	7478 4c00 776f 6f50 6577 4d72 646f 0065     xt.LowPowerMode.
   dacac:	7548 696d 6964 7974 5300 696f 4d6c 696f     Humidity.SoilMoi
   dacbc:	7473 7275 3165 5300 696f 4d6c 696f 7473     sture1.SoilMoist
   daccc:	7275 3265 5000 6572 7373 7275 0065 654d     ure2.Pressure.Me
   dacdc:	7361 7275 2d65 6f4e 0077 6f53 616c 2d72     asure-Now.Solar-
   dacec:	6f4d 6564 5600 7265 6f62 6573 4d2d 646f     Mode.Verbose-Mod
   dacfc:	0065 6553 5374 6c6f 6e65 696f 0064 6553     e.SetSolenoid.Se
   dad0c:	4874 6c6f 5464 6d69 0065 6f43 6c75 2064     tHoldTime.Could 
   dad1c:	6f6e 2074 6966 646e 5320 5448 3133 4600     not find SHT31.F
   dad2c:	6961 656c 2064 6f74 6320 6e6f 656e 7463     ailed to connect
   dad3c:	5300 6174 7472 7075 5500 6b6e 6f6e 6e77     .Startup.Unknown
   dad4c:	4e00 6e6f 0065 6957 6946 4700 4d53 5500     .None.WiFi.GSM.U
   dad5c:	544d 0053 4443 414d 4c00 4554 4900 4545     MTS.CDMA.LTE.IEE
   dad6c:	3845 3230 3531 0034                         E802154.

000dad74 <_ZL13releaseNumber>:
   dad74:	3231 0000 0000 0000                         12......

000dad7c <_ZTVN5spark13CellularClassE>:
	...
   dad84:	5b03 000d 5af9 000d 5aef 000d 5aa5 000d     .[...Z...Z...Z..
   dad94:	5ae3 000d 5ad7 000d 5acb 000d 5ac3 000d     .Z...Z...Z...Z..
   dada4:	5ab9 000d 5aaf 000d 67f9 000d               .Z...Z...g..

000dadb0 <_ZTV14CellularSignal>:
	...
   dadb8:	5bb1 000d 5c43 000d 5bb3 000d 5c85 000d     .[..C\...[...\..
   dadc8:	5bb9 000d 5c51 000d 5be5 000d 5c11 000d     .[..Q\...[...\..
   dadd8:	fffc ffff 0000 0000 5c3b 000d               ........;\..

000dade4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dadec:	5cd1 000d 5cd7 000d 5d2d 000d 5ce5 000d     .\...\..-]...\..
   dadfc:	5cd3 000d                                   .\..

000dae00 <_ZTVN5spark13EthernetClassE>:
	...
   dae08:	6343 000d 6339 000d 632f 000d 6325 000d     Cc..9c../c..%c..
   dae18:	6319 000d 630d 000d 6301 000d 62f9 000d     .c...c...c...b..
   dae28:	62ef 000d 62e5 000d 67f9 000d               .b...b...g..

000dae34 <_ZTV7TwoWire>:
	...
   dae3c:	6445 000d 648f 000d 6467 000d 6447 000d     Ed...d..gd..Gd..
   dae4c:	646f 000d 6477 000d 647f 000d 6487 000d     od..wd...d...d..

000dae5c <_ZTV9IPAddress>:
	...
   dae64:	6547 000d 6537 000d 6539 000d 6162 6475     Ge..7e..9e..baud
   dae74:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dae84:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dae94:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   daea4:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   daeb4:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   daec4:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   daed4:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   daee4:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
   daef4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   daf04:	6564 6174 6c69 2073 203d 6c00 006e 6e66     details = .ln.fn
   daf14:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
   daf24:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   daf34:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   daf44:	006c 0000                                   l...

000daf48 <_ZTVN5spark9MeshClassE>:
	...
   daf50:	668b 000d 6681 000d 6677 000d 666d 000d     .f...f..wf..mf..
   daf60:	6661 000d 6655 000d 6649 000d 6641 000d     af..Uf..If..Af..
   daf70:	6637 000d 662d 000d 67f9 000d               7f..-f...g..

000daf7c <_ZTVN5spark12NetworkClassE>:
	...
   daf84:	6791 000d 679b 000d 67a5 000d 67af 000d     .g...g...g...g..
   daf94:	67b9 000d 67c5 000d 67d1 000d 67dd 000d     .g...g...g...g..
   dafa4:	67e5 000d 67ef 000d 67f9 000d               .g...g...g..

000dafb0 <_ZTV8SPIClass>:
	...
   dafb8:	6ddd 000d 6ddf 000d 2b25 3330 3a64 3025     .m...m..%+03d:%0
   dafc8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dafd8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dafe8 <_ZTV11USARTSerial>:
	...
   daff0:	7139 000d 7189 000d 7197 000d 6c8f 000d     9q...q...q...l..
   db000:	714d 000d 716f 000d 715b 000d 7183 000d     Mq..oq..[q...q..
   db010:	713b 000d 713f 000d                         ;q..?q..

000db018 <_ZTV9USBSerial>:
	...
   db020:	7241 000d 7291 000d 729f 000d 6c8f 000d     Ar...r...r...l..
   db030:	727d 000d 7243 000d 7259 000d 728b 000d     }r..Cr..Yr...r..
   db040:	726f 000d 723d 000d                         or..=r..

000db048 <_ctype_>:
   db048:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db058:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db068:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db078:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db088:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db098:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db0a8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db0b8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db0c8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db14c <__sf_fake_stdin>:
	...

000db16c <__sf_fake_stdout>:
	...

000db18c <__sf_fake_stderr>:
	...
   db1ac:	4f50 4953 0058 002e                         POSIX...

000db1b4 <__month_lengths>:
   db1b4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   db1c4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db1d4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db1e4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   db1f4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db204:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000db214 <fpi.5344>:
   db214:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db224:	0000 0000                                   ....

000db228 <fpinan.5380>:
   db228:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   db238:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000db248 <tinytens>:
   db248:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db258:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db268:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   db278:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   db288:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   db298:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   db2a8:	2575 006e 0000 0000                         u%n.....

000db2b0 <__mprec_tens>:
   db2b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db2c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db2d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db2e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db2f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db300:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db310:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db320:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db330:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db340:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db350:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db360:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db370:	9db4 79d9 7843 44ea                         ...yCx.D

000db378 <__mprec_bigtens>:
   db378:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db388:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db398:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db3a0 <p05.5387>:
   db3a0:	0005 0000 0019 0000 007d 0000               ........}...

000db3ac <link_const_variable_data_end>:
   db3ac:	000d5189 	.word	0x000d5189
   db3b0:	000d53f1 	.word	0x000d53f1
   db3b4:	000d5a95 	.word	0x000d5a95
   db3b8:	000d5b81 	.word	0x000d5b81
   db3bc:	000d634d 	.word	0x000d634d
   db3c0:	000d661d 	.word	0x000d661d
   db3c4:	000d6741 	.word	0x000d6741
   db3c8:	000d68c5 	.word	0x000d68c5
   db3cc:	000d6dc1 	.word	0x000d6dc1
   db3d0:	000d7015 	.word	0x000d7015
   db3d4:	000d7125 	.word	0x000d7125
   db3d8:	000d75e1 	.word	0x000d75e1
   db3dc:	000d7639 	.word	0x000d7639
   db3e0:	000d76fd 	.word	0x000d76fd
   db3e4:	000d7781 	.word	0x000d7781
   db3e8:	000d7805 	.word	0x000d7805

000db3ec <link_constructors_end>:
   db3ec:	00000000 	.word	0x00000000
