
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.4.4/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005790  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001992c  2**0
                  CONTENTS
  4 .data         0000014c  2003e0e8  000d97b0  0000e0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005bc  2003e234  2003e234  0001e234  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000d98fc  000d98fc  000198fc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d9928  000d9928  00019928  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f58ec  00000000  00000000  0001992c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013ac8  00000000  00000000  0010f218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000226f4  00000000  00000000  00122ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c78  00000000  00000000  001453d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050b8  00000000  00000000  0014804c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000390fb  00000000  00000000  0014d104  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030a95  00000000  00000000  001861ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001052c2  00000000  00000000  001b6c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e440  00000000  00000000  002bbf58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fa17 	bl	d8464 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fa1c 	bl	d847a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0e8 	.word	0x2003e0e8
   d404c:	000d97b0 	.word	0x000d97b0
   d4050:	2003e234 	.word	0x2003e234
   d4054:	2003e234 	.word	0x2003e234
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fa2f 	bl	d74c0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d97a8 	.word	0x000d97a8
   d4084:	000d9768 	.word	0x000d9768

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 beec 	b.w	d4e64 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fce7 	bl	d4a60 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b9e1 	b.w	d745c <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bcc1 	b.w	d5a20 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bcc7 	b.w	d5a30 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bcc5 	b.w	d5a30 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z10measureNow6String>:
inline void softDelay(uint32_t t) {
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
}

int measureNow(String command) // Function to force sending data in current hour
{
   d40b8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	4904      	ldr	r1, [pc, #16]	; (d40cc <_Z10measureNow6String+0x14>)
   d40bc:	f002 ff51 	bl	d6f62 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40c0:	b118      	cbz	r0, d40ca <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d40c2:	4b03      	ldr	r3, [pc, #12]	; (d40d0 <_Z10measureNow6String+0x18>)
   d40c4:	2203      	movs	r2, #3
   d40c6:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c8:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	000d9048 	.word	0x000d9048
   d40d0:	2003e275 	.word	0x2003e275

000d40d4 <_ZN11EEPROMClass4readEi.isra.16>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d40d4:	f001 ba36 	b.w	d5544 <HAL_EEPROM_Read>

000d40d8 <_ZN11EEPROMClass5writeEih.isra.17>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d40d8:	f001 ba3c 	b.w	d5554 <HAL_EEPROM_Write>

000d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40de:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40e2:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e4:	f88d 3000 	strb.w	r3, [sp]
   d40e8:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40ea:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ec:	f001 ffa8 	bl	d6040 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40f0:	4628      	mov	r0, r5
   d40f2:	b003      	add	sp, #12
   d40f4:	bd30      	pop	{r4, r5, pc}
	...

000d40f8 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
   d40f8:	b530      	push	{r4, r5, lr}
   d40fa:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d40fc:	4912      	ldr	r1, [pc, #72]	; (d4148 <_Z17getSignalStrengthv+0x50>)
   d40fe:	a804      	add	r0, sp, #16
   d4100:	f001 fd34 	bl	d5b6c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4104:	a804      	add	r0, sp, #16
   d4106:	f001 fd84 	bl	d5c12 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d410a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d410c:	a804      	add	r0, sp, #16
   d410e:	f001 fde9 	bl	d5ce4 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4112:	a804      	add	r0, sp, #16
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4114:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4118:	f001 fdca 	bl	d5cb0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d411c:	ee10 0a10 	vmov	r0, s0
   d4120:	f003 fda4 	bl	d7c6c <__aeabi_f2d>
   d4124:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4128:	4628      	mov	r0, r5
   d412a:	f003 fd9f 	bl	d7c6c <__aeabi_f2d>
   d412e:	e9cd 0100 	strd	r0, r1, [sp]
   d4132:	4b06      	ldr	r3, [pc, #24]	; (d414c <_Z17getSignalStrengthv+0x54>)
   d4134:	4a06      	ldr	r2, [pc, #24]	; (d4150 <_Z17getSignalStrengthv+0x58>)
   d4136:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   d413a:	4806      	ldr	r0, [pc, #24]	; (d4154 <_Z17getSignalStrengthv+0x5c>)
   d413c:	2140      	movs	r1, #64	; 0x40
   d413e:	f001 fc97 	bl	d5a70 <snprintf>
}
   d4142:	b00f      	add	sp, #60	; 0x3c
   d4144:	bd30      	pop	{r4, r5, pc}
   d4146:	bf00      	nop
   d4148:	2003e32c 	.word	0x2003e32c
   d414c:	2003e15c 	.word	0x2003e15c
   d4150:	000d8e40 	.word	0x000d8e40
   d4154:	2003e290 	.word	0x2003e290

000d4158 <_Z17connectToParticlev>:


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4158:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d415c:	481a      	ldr	r0, [pc, #104]	; (d41c8 <_Z17connectToParticlev+0x70>)
   d415e:	2300      	movs	r3, #0
   d4160:	461a      	mov	r2, r3
   d4162:	4619      	mov	r1, r3
   d4164:	6840      	ldr	r0, [r0, #4]
   d4166:	f001 fc2b 	bl	d59c0 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d416a:	f001 fbc1 	bl	d58f0 <spark_cloud_flag_connect>
   d416e:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4172:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4176:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4178:	2000      	movs	r0, #0
   d417a:	f001 fa03 	bl	d5584 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d417e:	f04f 0900 	mov.w	r9, #0
   d4182:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4184:	2000      	movs	r0, #0
   d4186:	f001 f9fd 	bl	d5584 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d418a:	ebb0 0008 	subs.w	r0, r0, r8
   d418e:	eb61 0109 	sbc.w	r1, r1, r9
   d4192:	428f      	cmp	r7, r1
   d4194:	bf08      	it	eq
   d4196:	4286      	cmpeq	r6, r0
   d4198:	d305      	bcc.n	d41a6 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d419a:	f001 fbb9 	bl	d5910 <spark_cloud_flag_connected>
   d419e:	b910      	cbnz	r0, d41a6 <_Z17connectToParticlev+0x4e>
            spark_process();
   d41a0:	f001 fb9e 	bl	d58e0 <spark_process>
   d41a4:	e7ee      	b.n	d4184 <_Z17connectToParticlev+0x2c>
   d41a6:	f001 fbb3 	bl	d5910 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41aa:	b118      	cbz	r0, d41b4 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d41ac:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d41b0:	f001 bbae 	b.w	d5910 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41b4:	f001 f9ae 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41b8:	4b04      	ldr	r3, [pc, #16]	; (d41cc <_Z17connectToParticlev+0x74>)
   d41ba:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d41bc:	f001 fb90 	bl	d58e0 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41c0:	3c01      	subs	r4, #1
   d41c2:	d0f3      	beq.n	d41ac <_Z17connectToParticlev+0x54>
   d41c4:	e7d8      	b.n	d4178 <_Z17connectToParticlev+0x20>
   d41c6:	bf00      	nop
   d41c8:	2003e32c 	.word	0x2003e32c
   d41cc:	2003e6cc 	.word	0x2003e6cc

000d41d0 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d41d0:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d2:	f001 fb9d 	bl	d5910 <spark_cloud_flag_connected>
    return !Particle.connected();
   d41d6:	f080 0001 	eor.w	r0, r0, #1
}
   d41da:	b2c0      	uxtb	r0, r0
   d41dc:	bd08      	pop	{r3, pc}
	...

000d41e0 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d41e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d41e2:	f001 fb8d 	bl	d5900 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41e6:	2000      	movs	r0, #0
   d41e8:	f001 f9cc 	bl	d5584 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41ec:	2500      	movs	r5, #0
   d41ee:	4604      	mov	r4, r0
   d41f0:	f643 2697 	movw	r6, #14999	; 0x3a97
   d41f4:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41f6:	2000      	movs	r0, #0
   d41f8:	f001 f9c4 	bl	d5584 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41fc:	1b00      	subs	r0, r0, r4
   d41fe:	eb61 0105 	sbc.w	r1, r1, r5
   d4202:	428f      	cmp	r7, r1
   d4204:	bf08      	it	eq
   d4206:	4286      	cmpeq	r6, r0
   d4208:	d305      	bcc.n	d4216 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem                              
   d420a:	f7ff ffe1 	bl	d41d0 <_Z12notConnectedv>
   d420e:	b910      	cbnz	r0, d4216 <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d4210:	f001 fb66 	bl	d58e0 <spark_process>
   d4214:	e7ef      	b.n	d41f6 <_Z22disconnectFromParticlev+0x16>
   d4216:	f7ff ffdb 	bl	d41d0 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d421a:	4806      	ldr	r0, [pc, #24]	; (d4234 <_Z22disconnectFromParticlev+0x54>)
   d421c:	2300      	movs	r3, #0
   d421e:	461a      	mov	r2, r3
   d4220:	4619      	mov	r1, r3
   d4222:	6840      	ldr	r0, [r0, #4]
   d4224:	f001 fbd4 	bl	d59d0 <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4228:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d422c:	f001 fc44 	bl	d5ab8 <delay>
  return true;
}
   d4230:	2001      	movs	r0, #1
   d4232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4234:	2003e32c 	.word	0x2003e32c

000d4238 <_Z9PMICresetv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
    return !Particle.connected();
}

// Power Management function
void PMICreset() {
   d4238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
   d423a:	481f      	ldr	r0, [pc, #124]	; (d42b8 <_Z9PMICresetv+0x80>)
   d423c:	f002 fb7c 	bl	d6938 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
   d4240:	481d      	ldr	r0, [pc, #116]	; (d42b8 <_Z9PMICresetv+0x80>)
   d4242:	f002 fd3d 	bl	d6cc0 <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
   d4246:	4b1d      	ldr	r3, [pc, #116]	; (d42bc <_Z9PMICresetv+0x84>)
   d4248:	781c      	ldrb	r4, [r3, #0]
   d424a:	4b1d      	ldr	r3, [pc, #116]	; (d42c0 <_Z9PMICresetv+0x88>)
   d424c:	b1bc      	cbz	r4, d427e <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
   d424e:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
   d4250:	f241 21e8 	movw	r1, #4840	; 0x12e8
   d4254:	4818      	ldr	r0, [pc, #96]	; (d42b8 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
   d4256:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
   d4258:	f002 fbf0 	bl	d6a3c <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
   d425c:	f44f 7161 	mov.w	r1, #900	; 0x384
   d4260:	4815      	ldr	r0, [pc, #84]	; (d42b8 <_Z9PMICresetv+0x80>)
   d4262:	f002 fc75 	bl	d6b50 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
   d4266:	2200      	movs	r2, #0
   d4268:	4611      	mov	r1, r2
   d426a:	9202      	str	r2, [sp, #8]
   d426c:	9201      	str	r2, [sp, #4]
   d426e:	9200      	str	r2, [sp, #0]
   d4270:	2301      	movs	r3, #1
   d4272:	4811      	ldr	r0, [pc, #68]	; (d42b8 <_Z9PMICresetv+0x80>)
   d4274:	f002 fccb 	bl	d6c0e <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
   d4278:	f241 0170 	movw	r1, #4208	; 0x1070
   d427c:	e016      	b.n	d42ac <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
   d427e:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
   d4280:	f241 0170 	movw	r1, #4208	; 0x1070
   d4284:	480c      	ldr	r0, [pc, #48]	; (d42b8 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
   d4286:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
   d4288:	f002 fbd8 	bl	d6a3c <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
   d428c:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d4290:	4809      	ldr	r0, [pc, #36]	; (d42b8 <_Z9PMICresetv+0x80>)
   d4292:	f002 fc5d 	bl	d6b50 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
   d4296:	2301      	movs	r3, #1
   d4298:	4621      	mov	r1, r4
   d429a:	9402      	str	r4, [sp, #8]
   d429c:	9401      	str	r4, [sp, #4]
   d429e:	9400      	str	r4, [sp, #0]
   d42a0:	461a      	mov	r2, r3
   d42a2:	4805      	ldr	r0, [pc, #20]	; (d42b8 <_Z9PMICresetv+0x80>)
   d42a4:	f002 fcb3 	bl	d6c0e <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
   d42a8:	f241 0110 	movw	r1, #4112	; 0x1010
   d42ac:	4802      	ldr	r0, [pc, #8]	; (d42b8 <_Z9PMICresetv+0x80>)
  }
}
   d42ae:	b004      	add	sp, #16
   d42b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
   d42b4:	f002 bcde 	b.w	d6c74 <_ZN4PMIC16setChargeVoltageEt>
   d42b8:	2003e276 	.word	0x2003e276
   d42bc:	2003e310 	.word	0x2003e310
   d42c0:	2003e248 	.word	0x2003e248

000d42c4 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d42c4:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d42c6:	4c07      	ldr	r4, [pc, #28]	; (d42e4 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42c8:	f001 f924 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
   d42cc:	6823      	ldr	r3, [r4, #0]
   d42ce:	1ac0      	subs	r0, r0, r3
   d42d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d42d4:	d304      	bcc.n	d42e0 <_Z20meterParticlePublishv+0x1c>
   d42d6:	f001 f91d 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d42da:	6020      	str	r0, [r4, #0]
   d42dc:	2001      	movs	r0, #1
   d42de:	bd10      	pop	{r4, pc}
    return 1;
  } 
  else return 0;
   d42e0:	2000      	movs	r0, #0
}
   d42e2:	bd10      	pop	{r4, pc}
   d42e4:	2003e2f8 	.word	0x2003e2f8

000d42e8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d42e8:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d42ea:	f7ff ffeb 	bl	d42c4 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d42ee:	b118      	cbz	r0, d42f8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d42f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d42f4:	f7ff bfe6 	b.w	d42c4 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d42f8:	f001 faf2 	bl	d58e0 <spark_process>
   d42fc:	e7f5      	b.n	d42ea <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34+0x2>
	...

000d4300 <_Z14fullModemResetv>:
    return 1;
  } 
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4300:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4302:	f001 fafd 	bl	d5900 <spark_cloud_flag_disconnect>
   d4306:	f001 f905 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d430a:	f643 2597 	movw	r5, #14999	; 0x3a97
   d430e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4310:	f001 fafe 	bl	d5910 <spark_cloud_flag_connected>
   d4314:	b140      	cbz	r0, d4328 <_Z14fullModemResetv+0x28>
   d4316:	f001 f8fd 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
   d431a:	1b00      	subs	r0, r0, r4
   d431c:	42a8      	cmp	r0, r5
   d431e:	d803      	bhi.n	d4328 <_Z14fullModemResetv+0x28>
		delay(100);
   d4320:	2064      	movs	r0, #100	; 0x64
   d4322:	f001 fbc9 	bl	d5ab8 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4326:	e7f3      	b.n	d4310 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4328:	2100      	movs	r1, #0
   d432a:	4b09      	ldr	r3, [pc, #36]	; (d4350 <_Z14fullModemResetv+0x50>)
   d432c:	f247 5230 	movw	r2, #30000	; 0x7530
   d4330:	4608      	mov	r0, r1
   d4332:	f001 f89f 	bl	d5474 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d4336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d433a:	f001 fbbd 	bl	d5ab8 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d433e:	4b05      	ldr	r3, [pc, #20]	; (d4354 <_Z14fullModemResetv+0x54>)
   d4340:	220a      	movs	r2, #10
   d4342:	681b      	ldr	r3, [r3, #0]
   d4344:	2101      	movs	r1, #1
   d4346:	4668      	mov	r0, sp
   d4348:	f002 fe3e 	bl	d6fc8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d434c:	b003      	add	sp, #12
   d434e:	bd30      	pop	{r4, r5, pc}
   d4350:	000d8e59 	.word	0x000d8e59
   d4354:	2003e2e0 	.word	0x2003e2e0

000d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4358:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d435a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d435c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d435e:	b17c      	cbz	r4, d4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4360:	6863      	ldr	r3, [r4, #4]
   d4362:	3b01      	subs	r3, #1
   d4364:	6063      	str	r3, [r4, #4]
   d4366:	b95b      	cbnz	r3, d4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4368:	6823      	ldr	r3, [r4, #0]
   d436a:	4620      	mov	r0, r4
   d436c:	689b      	ldr	r3, [r3, #8]
   d436e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4370:	68a3      	ldr	r3, [r4, #8]
   d4372:	3b01      	subs	r3, #1
   d4374:	60a3      	str	r3, [r4, #8]
   d4376:	b91b      	cbnz	r3, d4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4378:	6823      	ldr	r3, [r4, #0]
   d437a:	4620      	mov	r0, r4
   d437c:	68db      	ldr	r3, [r3, #12]
   d437e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4380:	4628      	mov	r0, r5
   d4382:	bd38      	pop	{r3, r4, r5, pc}

000d4384 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d4384:	b500      	push	{lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilMoisture1, soilMoisture2, waterPressure, solenoidState, stateOfCharge, resetCount, alertCount);
   d4386:	4b21      	ldr	r3, [pc, #132]	; (d440c <_Z9sendEventv+0x88>)
    break;
  }
}

void sendEvent()
{
   d4388:	b0cf      	sub	sp, #316	; 0x13c
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilMoisture1, soilMoisture2, waterPressure, solenoidState, stateOfCharge, resetCount, alertCount);
   d438a:	681b      	ldr	r3, [r3, #0]
   d438c:	930a      	str	r3, [sp, #40]	; 0x28
   d438e:	4b20      	ldr	r3, [pc, #128]	; (d4410 <_Z9sendEventv+0x8c>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	9309      	str	r3, [sp, #36]	; 0x24
   d4394:	4b1f      	ldr	r3, [pc, #124]	; (d4414 <_Z9sendEventv+0x90>)
   d4396:	681b      	ldr	r3, [r3, #0]
   d4398:	9308      	str	r3, [sp, #32]
   d439a:	4b1f      	ldr	r3, [pc, #124]	; (d4418 <_Z9sendEventv+0x94>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	9307      	str	r3, [sp, #28]
   d43a0:	4b1e      	ldr	r3, [pc, #120]	; (d441c <_Z9sendEventv+0x98>)
   d43a2:	681b      	ldr	r3, [r3, #0]
   d43a4:	9306      	str	r3, [sp, #24]
   d43a6:	4b1e      	ldr	r3, [pc, #120]	; (d4420 <_Z9sendEventv+0x9c>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	9305      	str	r3, [sp, #20]
   d43ac:	4b1d      	ldr	r3, [pc, #116]	; (d4424 <_Z9sendEventv+0xa0>)
   d43ae:	681b      	ldr	r3, [r3, #0]
   d43b0:	9304      	str	r3, [sp, #16]
   d43b2:	4b1d      	ldr	r3, [pc, #116]	; (d4428 <_Z9sendEventv+0xa4>)
   d43b4:	6818      	ldr	r0, [r3, #0]
   d43b6:	f003 fc59 	bl	d7c6c <__aeabi_f2d>
   d43ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43be:	4b1b      	ldr	r3, [pc, #108]	; (d442c <_Z9sendEventv+0xa8>)
   d43c0:	6818      	ldr	r0, [r3, #0]
   d43c2:	f003 fc53 	bl	d7c6c <__aeabi_f2d>
   d43c6:	4a1a      	ldr	r2, [pc, #104]	; (d4430 <_Z9sendEventv+0xac>)
   d43c8:	e9cd 0100 	strd	r0, r1, [sp]
   d43cc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d43d0:	a80e      	add	r0, sp, #56	; 0x38
   d43d2:	f001 fb4d 	bl	d5a70 <snprintf>
   d43d6:	4b17      	ldr	r3, [pc, #92]	; (d4434 <_Z9sendEventv+0xb0>)
  Particle.publish("Rwanda_Irrigation_Hook", data, PRIVATE);
   d43d8:	4917      	ldr	r1, [pc, #92]	; (d4438 <_Z9sendEventv+0xb4>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d43da:	781b      	ldrb	r3, [r3, #0]
   d43dc:	2200      	movs	r2, #0
   d43de:	f88d 2000 	strb.w	r2, [sp]
   d43e2:	a80c      	add	r0, sp, #48	; 0x30
   d43e4:	aa0e      	add	r2, sp, #56	; 0x38
   d43e6:	f7ff fe79 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43ea:	a80d      	add	r0, sp, #52	; 0x34
   d43ec:	f7ff ffb4 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d43f0:	f002 fef2 	bl	d71d8 <_ZN9TimeClass4hourEv>
   d43f4:	4b11      	ldr	r3, [pc, #68]	; (d443c <_Z9sendEventv+0xb8>)
   d43f6:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d43f8:	4b11      	ldr	r3, [pc, #68]	; (d4440 <_Z9sendEventv+0xbc>)
   d43fa:	2201      	movs	r2, #1
   d43fc:	701a      	strb	r2, [r3, #0]
   d43fe:	f001 f889 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4402:	4b10      	ldr	r3, [pc, #64]	; (d4444 <_Z9sendEventv+0xc0>)
   d4404:	6018      	str	r0, [r3, #0]
}
   d4406:	b04f      	add	sp, #316	; 0x13c
   d4408:	f85d fb04 	ldr.w	pc, [sp], #4
   d440c:	2003e278 	.word	0x2003e278
   d4410:	2003e2d0 	.word	0x2003e2d0
   d4414:	2003e288 	.word	0x2003e288
   d4418:	2003e2e4 	.word	0x2003e2e4
   d441c:	2003e324 	.word	0x2003e324
   d4420:	2003e2dc 	.word	0x2003e2dc
   d4424:	2003e2d8 	.word	0x2003e2d8
   d4428:	2003e28c 	.word	0x2003e28c
   d442c:	2003e2f4 	.word	0x2003e2f4
   d4430:	000d8e66 	.word	0x000d8e66
   d4434:	2003e250 	.word	0x2003e250
   d4438:	000d8f01 	.word	0x000d8f01
   d443c:	2003e2d4 	.word	0x2003e2d4
   d4440:	2003e158 	.word	0x2003e158
   d4444:	2003e24c 	.word	0x2003e24c

000d4448 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4448:	b5f0      	push	{r4, r5, r6, r7, lr}
   d444a:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d444c:	4608      	mov	r0, r1
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d444e:	af02      	add	r7, sp, #8
   d4450:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d4452:	f004 f870 	bl	d8536 <strlen>
   d4456:	f100 0308 	add.w	r3, r0, #8
   d445a:	f023 0307 	bic.w	r3, r3, #7
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d445e:	466d      	mov	r5, sp
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d4460:	ebad 0d03 	sub.w	sp, sp, r3
   d4464:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
   d4466:	1c42      	adds	r2, r0, #1
   d4468:	4631      	mov	r1, r6
   d446a:	4620      	mov	r0, r4
   d446c:	f004 f880 	bl	d8570 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
   d4470:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d4474:	b94e      	cbnz	r6, d448a <_Z14UbidotsHandlerPKcS0_+0x42>
   d4476:	f001 fa4b 	bl	d5910 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d447a:	2800      	cmp	r0, #0
   d447c:	d037      	beq.n	d44ee <_Z14UbidotsHandlerPKcS0_+0xa6>
   d447e:	4b1e      	ldr	r3, [pc, #120]	; (d44f8 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d4480:	4a1e      	ldr	r2, [pc, #120]	; (d44fc <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d4482:	781b      	ldrb	r3, [r3, #0]
   d4484:	f88d 6000 	strb.w	r6, [sp]
   d4488:	e02a      	b.n	d44e0 <_Z14UbidotsHandlerPKcS0_+0x98>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
   d448a:	4620      	mov	r0, r4
   d448c:	f003 fee0 	bl	d8250 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4490:	38c8      	subs	r0, #200	; 0xc8
   d4492:	2801      	cmp	r0, #1
   d4494:	d81b      	bhi.n	d44ce <_Z14UbidotsHandlerPKcS0_+0x86>
   d4496:	f001 fa3b 	bl	d5910 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
   d449a:	b160      	cbz	r0, d44b6 <_Z14UbidotsHandlerPKcS0_+0x6e>
   d449c:	4b16      	ldr	r3, [pc, #88]	; (d44f8 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d449e:	4918      	ldr	r1, [pc, #96]	; (d4500 <_Z14UbidotsHandlerPKcS0_+0xb8>)
   d44a0:	781b      	ldrb	r3, [r3, #0]
   d44a2:	2200      	movs	r2, #0
   d44a4:	f88d 2000 	strb.w	r2, [sp]
   d44a8:	4638      	mov	r0, r7
   d44aa:	4a16      	ldr	r2, [pc, #88]	; (d4504 <_Z14UbidotsHandlerPKcS0_+0xbc>)
   d44ac:	f7ff fe16 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d44b0:	1d38      	adds	r0, r7, #4
   d44b2:	f7ff ff51 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
   d44b6:	f003 f8ad 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d44ba:	f002 fe86 	bl	d71ca <_ZN9TimeClass3nowEv>
   d44be:	b2c1      	uxtb	r1, r0
   d44c0:	2005      	movs	r0, #5
   d44c2:	f7ff fe09 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
    dataInFlight = false;                                             // Data has been received
   d44c6:	4b10      	ldr	r3, [pc, #64]	; (d4508 <_Z14UbidotsHandlerPKcS0_+0xc0>)
   d44c8:	2200      	movs	r2, #0
   d44ca:	701a      	strb	r2, [r3, #0]
   d44cc:	e00f      	b.n	d44ee <_Z14UbidotsHandlerPKcS0_+0xa6>
   d44ce:	f001 fa1f 	bl	d5910 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d44d2:	b160      	cbz	r0, d44ee <_Z14UbidotsHandlerPKcS0_+0xa6>
   d44d4:	4b08      	ldr	r3, [pc, #32]	; (d44f8 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d44d6:	2200      	movs	r2, #0
   d44d8:	781b      	ldrb	r3, [r3, #0]
   d44da:	f88d 2000 	strb.w	r2, [sp]
   d44de:	4622      	mov	r2, r4
   d44e0:	4638      	mov	r0, r7
   d44e2:	490a      	ldr	r1, [pc, #40]	; (d450c <_Z14UbidotsHandlerPKcS0_+0xc4>)
   d44e4:	f7ff fdfa 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d44e8:	1d38      	adds	r0, r7, #4
   d44ea:	f7ff ff35 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d44ee:	370c      	adds	r7, #12
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
   d44f0:	46ad      	mov	sp, r5
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
   d44f2:	46bd      	mov	sp, r7
   d44f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44f6:	bf00      	nop
   d44f8:	2003e250 	.word	0x2003e250
   d44fc:	000d8f18 	.word	0x000d8f18
   d4500:	000d8f3f 	.word	0x000d8f3f
   d4504:	000d8f2d 	.word	0x000d8f2d
   d4508:	2003e158 	.word	0x2003e158
   d450c:	000d8f20 	.word	0x000d8f20

000d4510 <_Z16takeMeasurementsv>:

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4510:	b530      	push	{r4, r5, lr}
  // Read values from the sensor
  temperatureInC = sht31.readTemperature();
   d4512:	4846      	ldr	r0, [pc, #280]	; (d462c <_Z16takeMeasurementsv+0x11c>)
   d4514:	4c46      	ldr	r4, [pc, #280]	; (d4630 <_Z16takeMeasurementsv+0x120>)
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4516:	b085      	sub	sp, #20
  // Read values from the sensor
  temperatureInC = sht31.readTemperature();
   d4518:	f000 ff86 	bl	d5428 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d451c:	ee10 0a10 	vmov	r0, s0
   d4520:	ed84 0a00 	vstr	s0, [r4]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", temperatureInC);
   d4524:	f003 fba2 	bl	d7c6c <__aeabi_f2d>
   d4528:	4a42      	ldr	r2, [pc, #264]	; (d4634 <_Z16takeMeasurementsv+0x124>)
   d452a:	e9cd 0100 	strd	r0, r1, [sp]
   d452e:	2110      	movs	r1, #16
   d4530:	4841      	ldr	r0, [pc, #260]	; (d4638 <_Z16takeMeasurementsv+0x128>)
   d4532:	f001 fa9d 	bl	d5a70 <snprintf>

  relativeHumidity = sht31.readHumidity();
   d4536:	483d      	ldr	r0, [pc, #244]	; (d462c <_Z16takeMeasurementsv+0x11c>)
   d4538:	f000 ff84 	bl	d5444 <_ZN14Adafruit_SHT3112readHumidityEv>
   d453c:	4b3f      	ldr	r3, [pc, #252]	; (d463c <_Z16takeMeasurementsv+0x12c>)
   d453e:	ee10 0a10 	vmov	r0, s0
   d4542:	ed83 0a00 	vstr	s0, [r3]
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", relativeHumidity);
   d4546:	f003 fb91 	bl	d7c6c <__aeabi_f2d>
   d454a:	4a3d      	ldr	r2, [pc, #244]	; (d4640 <_Z16takeMeasurementsv+0x130>)
   d454c:	e9cd 0100 	strd	r0, r1, [sp]
   d4550:	2110      	movs	r1, #16
   d4552:	483c      	ldr	r0, [pc, #240]	; (d4644 <_Z16takeMeasurementsv+0x134>)
   d4554:	f001 fa8c 	bl	d5a70 <snprintf>

  soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4558:	2013      	movs	r0, #19
   d455a:	f003 f844 	bl	d75e6 <analogRead>
   d455e:	2564      	movs	r5, #100	; 0x64
   d4560:	2300      	movs	r3, #0
   d4562:	4619      	mov	r1, r3
   d4564:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4568:	9500      	str	r5, [sp, #0]
   d456a:	f001 fa99 	bl	d5aa0 <_Z3mapiiiii>
   d456e:	4b36      	ldr	r3, [pc, #216]	; (d4648 <_Z16takeMeasurementsv+0x138>)
   d4570:	6018      	str	r0, [r3, #0]
  soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d4572:	2012      	movs	r0, #18
   d4574:	f003 f837 	bl	d75e6 <analogRead>
   d4578:	2300      	movs	r3, #0
   d457a:	4619      	mov	r1, r3
   d457c:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4580:	9500      	str	r5, [sp, #0]
   d4582:	f001 fa8d 	bl	d5aa0 <_Z3mapiiiii>
   d4586:	4b31      	ldr	r3, [pc, #196]	; (d464c <_Z16takeMeasurementsv+0x13c>)
   d4588:	6018      	str	r0, [r3, #0]
  waterPressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d458a:	2011      	movs	r0, #17
   d458c:	f003 f82b 	bl	d75e6 <analogRead>
   d4590:	231e      	movs	r3, #30
   d4592:	9300      	str	r3, [sp, #0]
   d4594:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d4598:	2300      	movs	r3, #0
   d459a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d459e:	f001 fa7f 	bl	d5aa0 <_Z3mapiiiii>
   d45a2:	4b2b      	ldr	r3, [pc, #172]	; (d4650 <_Z16takeMeasurementsv+0x140>)
   d45a4:	6018      	str	r0, [r3, #0]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d45a6:	4b2b      	ldr	r3, [pc, #172]	; (d4654 <_Z16takeMeasurementsv+0x144>)
   d45a8:	2200      	movs	r2, #0
   d45aa:	4611      	mov	r1, r2
   d45ac:	6858      	ldr	r0, [r3, #4]
   d45ae:	f001 f9ff 	bl	d59b0 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d45b2:	b108      	cbz	r0, d45b8 <_Z16takeMeasurementsv+0xa8>
   d45b4:	f7ff fda0 	bl	d40f8 <_Z17getSignalStrengthv>
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d45b8:	4827      	ldr	r0, [pc, #156]	; (d4658 <_Z16takeMeasurementsv+0x148>)
   d45ba:	f001 ff4d 	bl	d6458 <_ZN9FuelGauge6getSoCEv>
   d45be:	4a27      	ldr	r2, [pc, #156]	; (d465c <_Z16takeMeasurementsv+0x14c>)
  snprintf(batteryString, sizeof(batteryString), "%i %%", stateOfCharge);
   d45c0:	4827      	ldr	r0, [pc, #156]	; (d4660 <_Z16takeMeasurementsv+0x150>)
  soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
  soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
  waterPressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d45c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  snprintf(batteryString, sizeof(batteryString), "%i %%", stateOfCharge);
   d45c6:	2110      	movs	r1, #16
  soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
  soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
  waterPressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d45c8:	edc2 7a00 	vstr	s15, [r2]
   d45cc:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", stateOfCharge);
   d45d0:	4a24      	ldr	r2, [pc, #144]	; (d4664 <_Z16takeMeasurementsv+0x154>)
   d45d2:	f001 fa4d 	bl	d5a70 <snprintf>

  if (temperatureInC < 0 || temperatureInC > 45) {                      // Need to add temp charging controls - 
   d45d6:	edd4 7a00 	vldr	s15, [r4]
   d45da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d45de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45e2:	d406      	bmi.n	d45f2 <_Z16takeMeasurementsv+0xe2>
   d45e4:	ed9f 7a20 	vldr	s14, [pc, #128]	; d4668 <_Z16takeMeasurementsv+0x158>
   d45e8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d45ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45f0:	dd18      	ble.n	d4624 <_Z16takeMeasurementsv+0x114>
    snprintf(powerContext, sizeof(powerContext), "Chg Disabled Temp");
   d45f2:	491e      	ldr	r1, [pc, #120]	; (d466c <_Z16takeMeasurementsv+0x15c>)
   d45f4:	481e      	ldr	r0, [pc, #120]	; (d4670 <_Z16takeMeasurementsv+0x160>)
   d45f6:	f003 ff7b 	bl	d84f0 <strcpy>
    power.disableCharging();                                          // Disable Charging if temp is too low or too high
   d45fa:	481e      	ldr	r0, [pc, #120]	; (d4674 <_Z16takeMeasurementsv+0x164>)
   d45fc:	f002 faf0 	bl	d6be0 <_ZN4PMIC15disableChargingEv>
    waitUntil(meterParticlePublish);
   d4600:	f7ff fe72 	bl	d42e8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34>
   d4604:	f001 f984 	bl	d5910 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Alert", "Charging disabled Temperature",PRIVATE);
   d4608:	b160      	cbz	r0, d4624 <_Z16takeMeasurementsv+0x114>
   d460a:	4b1b      	ldr	r3, [pc, #108]	; (d4678 <_Z16takeMeasurementsv+0x168>)
   d460c:	491b      	ldr	r1, [pc, #108]	; (d467c <_Z16takeMeasurementsv+0x16c>)
   d460e:	781b      	ldrb	r3, [r3, #0]
   d4610:	2200      	movs	r2, #0
   d4612:	f88d 2000 	strb.w	r2, [sp]
   d4616:	a802      	add	r0, sp, #8
   d4618:	4a19      	ldr	r2, [pc, #100]	; (d4680 <_Z16takeMeasurementsv+0x170>)
   d461a:	f7ff fd5f 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d461e:	a803      	add	r0, sp, #12
   d4620:	f7ff fe9a 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

  return 1;
}
   d4624:	2001      	movs	r0, #1
   d4626:	b005      	add	sp, #20
   d4628:	bd30      	pop	{r4, r5, pc}
   d462a:	bf00      	nop
   d462c:	2003e27c 	.word	0x2003e27c
   d4630:	2003e2f4 	.word	0x2003e2f4
   d4634:	000d8f45 	.word	0x000d8f45
   d4638:	2003e238 	.word	0x2003e238
   d463c:	2003e28c 	.word	0x2003e28c
   d4640:	000d8f4d 	.word	0x000d8f4d
   d4644:	2003e300 	.word	0x2003e300
   d4648:	2003e2d8 	.word	0x2003e2d8
   d464c:	2003e2dc 	.word	0x2003e2dc
   d4650:	2003e324 	.word	0x2003e324
   d4654:	2003e32c 	.word	0x2003e32c
   d4658:	2003e26c 	.word	0x2003e26c
   d465c:	2003e288 	.word	0x2003e288
   d4660:	2003e311 	.word	0x2003e311
   d4664:	000d8f56 	.word	0x000d8f56
   d4668:	42340000 	.word	0x42340000
   d466c:	000d8f5c 	.word	0x000d8f5c
   d4670:	2003e251 	.word	0x2003e251
   d4674:	2003e276 	.word	0x2003e276
   d4678:	2003e250 	.word	0x2003e250
   d467c:	000d8f8c 	.word	0x000d8f8c
   d4680:	000d8f6e 	.word	0x000d8f6e

000d4684 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4684:	b530      	push	{r4, r5, lr}
   d4686:	4924      	ldr	r1, [pc, #144]	; (d4718 <_Z12setSolarMode6String+0x94>)
   d4688:	b085      	sub	sp, #20
   d468a:	4605      	mov	r5, r0
   d468c:	f002 fc69 	bl	d6f62 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4690:	4604      	mov	r4, r0
   d4692:	b1d0      	cbz	r0, d46ca <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
   d4694:	4b21      	ldr	r3, [pc, #132]	; (d471c <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
   d4696:	4d22      	ldr	r5, [pc, #136]	; (d4720 <_Z12setSolarMode6String+0x9c>)

int setSolarMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    solarPowerMode = true;
   d4698:	2401      	movs	r4, #1
   d469a:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d469c:	f002 ffba 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d46a0:	2004      	movs	r0, #4
   d46a2:	f7ff fd17 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
   d46a6:	f040 0004 	orr.w	r0, r0, #4
   d46aa:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
   d46ac:	f002 ffb2 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d46b0:	7829      	ldrb	r1, [r5, #0]
   d46b2:	2004      	movs	r0, #4
   d46b4:	f7ff fd10 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
    PMICreset();                                               // Change the power management Settings
   d46b8:	f7ff fdbe 	bl	d4238 <_Z9PMICresetv>
   d46bc:	4b19      	ldr	r3, [pc, #100]	; (d4724 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
   d46be:	2200      	movs	r2, #0
   d46c0:	781b      	ldrb	r3, [r3, #0]
   d46c2:	f88d 2000 	strb.w	r2, [sp]
   d46c6:	4a18      	ldr	r2, [pc, #96]	; (d4728 <_Z12setSolarMode6String+0xa4>)
   d46c8:	e01c      	b.n	d4704 <_Z12setSolarMode6String+0x80>
   d46ca:	4918      	ldr	r1, [pc, #96]	; (d472c <_Z12setSolarMode6String+0xa8>)
   d46cc:	4628      	mov	r0, r5
   d46ce:	f002 fc48 	bl	d6f62 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d46d2:	b1f8      	cbz	r0, d4714 <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
   d46d4:	4b11      	ldr	r3, [pc, #68]	; (d471c <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
   d46d6:	4d12      	ldr	r5, [pc, #72]	; (d4720 <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
   d46d8:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d46da:	f002 ff9b 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d46de:	2004      	movs	r0, #4
   d46e0:	f7ff fcf8 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
   d46e4:	f020 0004 	bic.w	r0, r0, #4
   d46e8:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d46ea:	f002 ff93 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d46ee:	7829      	ldrb	r1, [r5, #0]
   d46f0:	2004      	movs	r0, #4
   d46f2:	f7ff fcf1 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
    PMICreset();                                                // Change the power management settings
   d46f6:	f7ff fd9f 	bl	d4238 <_Z9PMICresetv>
   d46fa:	4b0a      	ldr	r3, [pc, #40]	; (d4724 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
   d46fc:	4a0c      	ldr	r2, [pc, #48]	; (d4730 <_Z12setSolarMode6String+0xac>)
   d46fe:	781b      	ldrb	r3, [r3, #0]
   d4700:	f88d 4000 	strb.w	r4, [sp]
   d4704:	490b      	ldr	r1, [pc, #44]	; (d4734 <_Z12setSolarMode6String+0xb0>)
   d4706:	a802      	add	r0, sp, #8
   d4708:	f7ff fce8 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d470c:	a803      	add	r0, sp, #12
   d470e:	f7ff fe23 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4712:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4714:	b005      	add	sp, #20
   d4716:	bd30      	pop	{r4, r5, pc}
   d4718:	000d9048 	.word	0x000d9048
   d471c:	2003e310 	.word	0x2003e310
   d4720:	2003e321 	.word	0x2003e321
   d4724:	2003e250 	.word	0x2003e250
   d4728:	000d8f92 	.word	0x000d8f92
   d472c:	000d8fa9 	.word	0x000d8fa9
   d4730:	000d8fab 	.word	0x000d8fab
   d4734:	000d8fc1 	.word	0x000d8fc1

000d4738 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4738:	b530      	push	{r4, r5, lr}
   d473a:	4922      	ldr	r1, [pc, #136]	; (d47c4 <_Z14setVerboseMode6String+0x8c>)
   d473c:	b085      	sub	sp, #20
   d473e:	4605      	mov	r5, r0
   d4740:	f002 fc0f 	bl	d6f62 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4744:	4604      	mov	r4, r0
   d4746:	b1c0      	cbz	r0, d477a <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
   d4748:	4b1f      	ldr	r3, [pc, #124]	; (d47c8 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
   d474a:	4d20      	ldr	r5, [pc, #128]	; (d47cc <_Z14setVerboseMode6String+0x94>)

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
   d474c:	2401      	movs	r4, #1
   d474e:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d4750:	f002 ff60 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4754:	2004      	movs	r0, #4
   d4756:	f7ff fcbd 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
   d475a:	f040 0008 	orr.w	r0, r0, #8
   d475e:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d4760:	f002 ff58 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4764:	7829      	ldrb	r1, [r5, #0]
   d4766:	2004      	movs	r0, #4
   d4768:	f7ff fcb6 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
   d476c:	4b18      	ldr	r3, [pc, #96]	; (d47d0 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d476e:	2200      	movs	r2, #0
   d4770:	781b      	ldrb	r3, [r3, #0]
   d4772:	f88d 2000 	strb.w	r2, [sp]
   d4776:	4a17      	ldr	r2, [pc, #92]	; (d47d4 <_Z14setVerboseMode6String+0x9c>)
   d4778:	e01a      	b.n	d47b0 <_Z14setVerboseMode6String+0x78>
   d477a:	4917      	ldr	r1, [pc, #92]	; (d47d8 <_Z14setVerboseMode6String+0xa0>)
   d477c:	4628      	mov	r0, r5
   d477e:	f002 fbf0 	bl	d6f62 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4782:	b1e8      	cbz	r0, d47c0 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
   d4784:	4b10      	ldr	r3, [pc, #64]	; (d47c8 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
   d4786:	4d11      	ldr	r5, [pc, #68]	; (d47cc <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
   d4788:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d478a:	f002 ff43 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d478e:	2004      	movs	r0, #4
   d4790:	f7ff fca0 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
   d4794:	f020 0008 	bic.w	r0, r0, #8
   d4798:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d479a:	f002 ff3b 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d479e:	7829      	ldrb	r1, [r5, #0]
   d47a0:	2004      	movs	r0, #4
   d47a2:	f7ff fc99 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
   d47a6:	4b0a      	ldr	r3, [pc, #40]	; (d47d0 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d47a8:	4a0c      	ldr	r2, [pc, #48]	; (d47dc <_Z14setVerboseMode6String+0xa4>)
   d47aa:	781b      	ldrb	r3, [r3, #0]
   d47ac:	f88d 4000 	strb.w	r4, [sp]
   d47b0:	490b      	ldr	r1, [pc, #44]	; (d47e0 <_Z14setVerboseMode6String+0xa8>)
   d47b2:	a802      	add	r0, sp, #8
   d47b4:	f7ff fc92 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d47b8:	a803      	add	r0, sp, #12
   d47ba:	f7ff fdcd 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d47be:	2001      	movs	r0, #1
  }
  else return 0;
}
   d47c0:	b005      	add	sp, #20
   d47c2:	bd30      	pop	{r4, r5, pc}
   d47c4:	000d9048 	.word	0x000d9048
   d47c8:	2003e2ef 	.word	0x2003e2ef
   d47cc:	2003e321 	.word	0x2003e321
   d47d0:	2003e250 	.word	0x2003e250
   d47d4:	000d8fc6 	.word	0x000d8fc6
   d47d8:	000d8fa9 	.word	0x000d8fa9
   d47dc:	000d8fd7 	.word	0x000d8fd7
   d47e0:	000d8fc1 	.word	0x000d8fc1

000d47e4 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d47e4:	b530      	push	{r4, r5, lr}
   d47e6:	b0cd      	sub	sp, #308	; 0x134
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d47e8:	220a      	movs	r2, #10
   d47ea:	a905      	add	r1, sp, #20
   d47ec:	6800      	ldr	r0, [r0, #0]
   d47ee:	f003 ff59 	bl	d86a4 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d47f2:	b2c4      	uxtb	r4, r0
   d47f4:	f104 030c 	add.w	r3, r4, #12
   d47f8:	b2db      	uxtb	r3, r3
   d47fa:	2b18      	cmp	r3, #24
   d47fc:	d83d      	bhi.n	d487a <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d47fe:	b243      	sxtb	r3, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
   d4800:	ee07 3a90 	vmov	s15, r3
   d4804:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4808:	9303      	str	r3, [sp, #12]
   d480a:	4d1d      	ldr	r5, [pc, #116]	; (d4880 <_Z11setTimeZone6String+0x9c>)
   d480c:	f002 fc7e 	bl	d710c <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
   d4810:	f002 ff00 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4814:	4621      	mov	r1, r4
   d4816:	2003      	movs	r0, #3
   d4818:	f7ff fc5e 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d481c:	2400      	movs	r4, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d481e:	9b03      	ldr	r3, [sp, #12]
   d4820:	4a18      	ldr	r2, [pc, #96]	; (d4884 <_Z11setTimeZone6String+0xa0>)
   d4822:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4826:	a80c      	add	r0, sp, #48	; 0x30
   d4828:	f001 f922 	bl	d5a70 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d482c:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
   d482e:	4916      	ldr	r1, [pc, #88]	; (d4888 <_Z11setTimeZone6String+0xa4>)
   d4830:	f88d 4000 	strb.w	r4, [sp]
   d4834:	aa0c      	add	r2, sp, #48	; 0x30
   d4836:	a808      	add	r0, sp, #32
   d4838:	f7ff fc50 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d483c:	a809      	add	r0, sp, #36	; 0x24
   d483e:	f7ff fd8b 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
   d4842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4846:	f001 f937 	bl	d5ab8 <delay>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d484a:	f002 fcbe 	bl	d71ca <_ZN9TimeClass3nowEv>
   d484e:	4601      	mov	r1, r0
   d4850:	a808      	add	r0, sp, #32
   d4852:	f002 fc77 	bl	d7144 <_ZN9TimeClass7timeStrEl>
   d4856:	9b08      	ldr	r3, [sp, #32]
   d4858:	9303      	str	r3, [sp, #12]
  Particle.publish("Time",Time.timeStr(),PRIVATE);
   d485a:	9a03      	ldr	r2, [sp, #12]
   d485c:	782b      	ldrb	r3, [r5, #0]
   d485e:	490a      	ldr	r1, [pc, #40]	; (d4888 <_Z11setTimeZone6String+0xa4>)
   d4860:	f88d 4000 	strb.w	r4, [sp]
   d4864:	a806      	add	r0, sp, #24
   d4866:	f7ff fc39 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d486a:	a807      	add	r0, sp, #28
   d486c:	f7ff fd74 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4870:	a808      	add	r0, sp, #32
   d4872:	f002 fb02 	bl	d6e7a <_ZN6StringD1Ev>
  return 1;
   d4876:	2001      	movs	r0, #1
   d4878:	e000      	b.n	d487c <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d487a:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(),PRIVATE);
  return 1;
}
   d487c:	b04d      	add	sp, #308	; 0x134
   d487e:	bd30      	pop	{r4, r5, pc}
   d4880:	2003e250 	.word	0x2003e250
   d4884:	000d8fec 	.word	0x000d8fec
   d4888:	000d9000 	.word	0x000d9000

000d488c <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d488c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d488e:	4926      	ldr	r1, [pc, #152]	; (d4928 <_Z15setLowPowerMode6String+0x9c>)
   d4890:	4605      	mov	r5, r0
   d4892:	f002 fb66 	bl	d6f62 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4896:	b928      	cbnz	r0, d48a4 <_Z15setLowPowerMode6String+0x18>
   d4898:	4924      	ldr	r1, [pc, #144]	; (d492c <_Z15setLowPowerMode6String+0xa0>)
   d489a:	4628      	mov	r0, r5
   d489c:	f002 fb61 	bl	d6f62 <_ZNK6String6equalsEPKc>
   d48a0:	2800      	cmp	r0, #0
   d48a2:	d03f      	beq.n	d4924 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d48a4:	f002 feb6 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d48a8:	2004      	movs	r0, #4
   d48aa:	f7ff fc13 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
   d48ae:	4c20      	ldr	r4, [pc, #128]	; (d4930 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d48b0:	491d      	ldr	r1, [pc, #116]	; (d4928 <_Z15setLowPowerMode6String+0x9c>)
   d48b2:	7020      	strb	r0, [r4, #0]
   d48b4:	4628      	mov	r0, r5
   d48b6:	f002 fb54 	bl	d6f62 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d48ba:	4606      	mov	r6, r0
   d48bc:	b1a0      	cbz	r0, d48e8 <_Z15setLowPowerMode6String+0x5c>
   d48be:	4b1d      	ldr	r3, [pc, #116]	; (d4934 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
   d48c0:	491d      	ldr	r1, [pc, #116]	; (d4938 <_Z15setLowPowerMode6String+0xac>)
   d48c2:	781b      	ldrb	r3, [r3, #0]
   d48c4:	2200      	movs	r2, #0
   d48c6:	f88d 2000 	strb.w	r2, [sp]
   d48ca:	a802      	add	r0, sp, #8
   d48cc:	4a1b      	ldr	r2, [pc, #108]	; (d493c <_Z15setLowPowerMode6String+0xb0>)
   d48ce:	f7ff fc05 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d48d2:	a803      	add	r0, sp, #12
   d48d4:	f7ff fd40 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
   d48d8:	7823      	ldrb	r3, [r4, #0]
   d48da:	f043 0301 	orr.w	r3, r3, #1
   d48de:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
   d48e0:	4b17      	ldr	r3, [pc, #92]	; (d4940 <_Z15setLowPowerMode6String+0xb4>)
   d48e2:	2201      	movs	r2, #1
   d48e4:	701a      	strb	r2, [r3, #0]
   d48e6:	e016      	b.n	d4916 <_Z15setLowPowerMode6String+0x8a>
   d48e8:	4910      	ldr	r1, [pc, #64]	; (d492c <_Z15setLowPowerMode6String+0xa0>)
   d48ea:	4628      	mov	r0, r5
   d48ec:	f002 fb39 	bl	d6f62 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d48f0:	b188      	cbz	r0, d4916 <_Z15setLowPowerMode6String+0x8a>
   d48f2:	4b10      	ldr	r3, [pc, #64]	; (d4934 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
   d48f4:	4a13      	ldr	r2, [pc, #76]	; (d4944 <_Z15setLowPowerMode6String+0xb8>)
   d48f6:	781b      	ldrb	r3, [r3, #0]
   d48f8:	490f      	ldr	r1, [pc, #60]	; (d4938 <_Z15setLowPowerMode6String+0xac>)
   d48fa:	f88d 6000 	strb.w	r6, [sp]
   d48fe:	a802      	add	r0, sp, #8
   d4900:	f7ff fbec 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4904:	a803      	add	r0, sp, #12
   d4906:	f7ff fd27 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
   d490a:	7823      	ldrb	r3, [r4, #0]
   d490c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   d4910:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
   d4912:	4b0b      	ldr	r3, [pc, #44]	; (d4940 <_Z15setLowPowerMode6String+0xb4>)
   d4914:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d4916:	f002 fe7d 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d491a:	2004      	movs	r0, #4
   d491c:	7821      	ldrb	r1, [r4, #0]
   d491e:	f7ff fbdb 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
   d4922:	2001      	movs	r0, #1
  return 1;
}
   d4924:	b004      	add	sp, #16
   d4926:	bd70      	pop	{r4, r5, r6, pc}
   d4928:	000d9048 	.word	0x000d9048
   d492c:	000d8fa9 	.word	0x000d8fa9
   d4930:	2003e321 	.word	0x2003e321
   d4934:	2003e250 	.word	0x2003e250
   d4938:	000d8fc1 	.word	0x000d8fc1
   d493c:	000d9005 	.word	0x000d9005
   d4940:	2003e2ee 	.word	0x2003e2ee
   d4944:	000d900f 	.word	0x000d900f

000d4948 <_Z11setSolenoid6String>:

int setSolenoid(String command) // Function to force sending data in current hour
{
   d4948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d494a:	4920      	ldr	r1, [pc, #128]	; (d49cc <_Z11setSolenoid6String+0x84>)
   d494c:	4605      	mov	r5, r0
   d494e:	f002 fb08 	bl	d6f62 <_ZNK6String6equalsEPKc>
  if (command == "1") {                               // Open the water valve
   d4952:	4606      	mov	r6, r0
   d4954:	b170      	cbz	r0, d4974 <_Z11setSolenoid6String+0x2c>
    digitalWrite(solEnablePin,LOW);                       // Enable the solenoid
   d4956:	2100      	movs	r1, #0
   d4958:	2003      	movs	r0, #3
   d495a:	f002 fe18 	bl	d758e <digitalWrite>
    digitalWrite(solDirection,HIGH);                         // Open the valve
   d495e:	2101      	movs	r1, #1
   d4960:	2002      	movs	r0, #2
   d4962:	f002 fe14 	bl	d758e <digitalWrite>
   d4966:	4b1a      	ldr	r3, [pc, #104]	; (d49d0 <_Z11setSolenoid6String+0x88>)
    Particle.publish("Solenoid","Open the Valve",PRIVATE);
   d4968:	2200      	movs	r2, #0
   d496a:	781b      	ldrb	r3, [r3, #0]
   d496c:	f88d 2000 	strb.w	r2, [sp]
   d4970:	4a18      	ldr	r2, [pc, #96]	; (d49d4 <_Z11setSolenoid6String+0x8c>)
   d4972:	e021      	b.n	d49b8 <_Z11setSolenoid6String+0x70>
   d4974:	4918      	ldr	r1, [pc, #96]	; (d49d8 <_Z11setSolenoid6String+0x90>)
   d4976:	4628      	mov	r0, r5
   d4978:	f002 faf3 	bl	d6f62 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0") {                          // Disable Solenoid (neither opens or closes)
   d497c:	4604      	mov	r4, r0
   d497e:	b148      	cbz	r0, d4994 <_Z11setSolenoid6String+0x4c>
    digitalWrite(solEnablePin,HIGH);                       // disable the solenoid
   d4980:	2101      	movs	r1, #1
   d4982:	2003      	movs	r0, #3
   d4984:	f002 fe03 	bl	d758e <digitalWrite>
   d4988:	4b11      	ldr	r3, [pc, #68]	; (d49d0 <_Z11setSolenoid6String+0x88>)
    Particle.publish("Solenoid","Value Control Disabled",PRIVATE);
   d498a:	4a14      	ldr	r2, [pc, #80]	; (d49dc <_Z11setSolenoid6String+0x94>)
   d498c:	781b      	ldrb	r3, [r3, #0]
   d498e:	f88d 6000 	strb.w	r6, [sp]
   d4992:	e011      	b.n	d49b8 <_Z11setSolenoid6String+0x70>
   d4994:	4912      	ldr	r1, [pc, #72]	; (d49e0 <_Z11setSolenoid6String+0x98>)
   d4996:	4628      	mov	r0, r5
   d4998:	f002 fae3 	bl	d6f62 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "-1") {                         // Close the water valve
   d499c:	b1a0      	cbz	r0, d49c8 <_Z11setSolenoid6String+0x80>
    digitalWrite(solEnablePin,LOW);                       // Enable the solenoid
   d499e:	4621      	mov	r1, r4
   d49a0:	2003      	movs	r0, #3
   d49a2:	f002 fdf4 	bl	d758e <digitalWrite>
    digitalWrite(solDirection,LOW);                         // Open the valve
   d49a6:	4621      	mov	r1, r4
   d49a8:	2002      	movs	r0, #2
   d49aa:	f002 fdf0 	bl	d758e <digitalWrite>
   d49ae:	4b08      	ldr	r3, [pc, #32]	; (d49d0 <_Z11setSolenoid6String+0x88>)
    Particle.publish("Solenoid","Close the valve",PRIVATE);
   d49b0:	4a0c      	ldr	r2, [pc, #48]	; (d49e4 <_Z11setSolenoid6String+0x9c>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	f88d 4000 	strb.w	r4, [sp]
   d49b8:	490b      	ldr	r1, [pc, #44]	; (d49e8 <_Z11setSolenoid6String+0xa0>)
   d49ba:	a802      	add	r0, sp, #8
   d49bc:	f7ff fb8e 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d49c0:	a803      	add	r0, sp, #12
   d49c2:	f7ff fcc9 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d49c6:	2001      	movs	r0, #1
  }
  else return 0;
}
   d49c8:	b004      	add	sp, #16
   d49ca:	bd70      	pop	{r4, r5, r6, pc}
   d49cc:	000d9048 	.word	0x000d9048
   d49d0:	2003e250 	.word	0x2003e250
   d49d4:	000d9021 	.word	0x000d9021
   d49d8:	000d8fa9 	.word	0x000d8fa9
   d49dc:	000d9030 	.word	0x000d9030
   d49e0:	000d9047 	.word	0x000d9047
   d49e4:	000d904a 	.word	0x000d904a
   d49e8:	000d91bf 	.word	0x000d91bf

000d49ec <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
   d49ec:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49ee:	4d16      	ldr	r5, [pc, #88]	; (d4a48 <_Z22publishStateTransitionv+0x5c>)
   d49f0:	4c16      	ldr	r4, [pc, #88]	; (d4a4c <_Z22publishStateTransitionv+0x60>)
   d49f2:	4917      	ldr	r1, [pc, #92]	; (d4a50 <_Z22publishStateTransitionv+0x64>)
   d49f4:	782a      	ldrb	r2, [r5, #0]
   d49f6:	7820      	ldrb	r0, [r4, #0]
  }
  else return 0;
}

void publishStateTransition(void)
{
   d49f8:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49fa:	230e      	movs	r3, #14
   d49fc:	fb03 1202 	mla	r2, r3, r2, r1
   d4a00:	9200      	str	r2, [sp, #0]
   d4a02:	fb03 1300 	mla	r3, r3, r0, r1
   d4a06:	4a13      	ldr	r2, [pc, #76]	; (d4a54 <_Z22publishStateTransitionv+0x68>)
   d4a08:	2128      	movs	r1, #40	; 0x28
   d4a0a:	a804      	add	r0, sp, #16
   d4a0c:	f001 f830 	bl	d5a70 <snprintf>
  oldState = state;
   d4a10:	782b      	ldrb	r3, [r5, #0]
   d4a12:	7023      	strb	r3, [r4, #0]
   d4a14:	f000 ff7c 	bl	d5910 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4a18:	b170      	cbz	r0, d4a38 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d4a1a:	f7ff fc65 	bl	d42e8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34>
   d4a1e:	4b0e      	ldr	r3, [pc, #56]	; (d4a58 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4a20:	490e      	ldr	r1, [pc, #56]	; (d4a5c <_Z22publishStateTransitionv+0x70>)
   d4a22:	781b      	ldrb	r3, [r3, #0]
   d4a24:	2200      	movs	r2, #0
   d4a26:	f88d 2000 	strb.w	r2, [sp]
   d4a2a:	a802      	add	r0, sp, #8
   d4a2c:	aa04      	add	r2, sp, #16
   d4a2e:	f7ff fb55 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4a32:	a803      	add	r0, sp, #12
   d4a34:	f7ff fc90 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d4a38:	f002 fccc 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4a3c:	a904      	add	r1, sp, #16
   d4a3e:	f002 f98b 	bl	d6d58 <_ZN5Print7printlnEPKc>
}
   d4a42:	b00f      	add	sp, #60	; 0x3c
   d4a44:	bd30      	pop	{r4, r5, pc}
   d4a46:	bf00      	nop
   d4a48:	2003e275 	.word	0x2003e275
   d4a4c:	2003e274 	.word	0x2003e274
   d4a50:	2003e0e8 	.word	0x2003e0e8
   d4a54:	000d905a 	.word	0x000d905a
   d4a58:	2003e250 	.word	0x2003e250
   d4a5c:	000d9068 	.word	0x000d9068

000d4a60 <loop>:
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
    Serial.println(StartupMessage);
}

void loop()
{
   d4a60:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d4a62:	4ca1      	ldr	r4, [pc, #644]	; (d4ce8 <loop+0x288>)
   d4a64:	7823      	ldrb	r3, [r4, #0]
   d4a66:	3b01      	subs	r3, #1
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
    Serial.println(StartupMessage);
}

void loop()
{
   d4a68:	b088      	sub	sp, #32
  switch(state) {
   d4a6a:	2b06      	cmp	r3, #6
   d4a6c:	f200 81d8 	bhi.w	d4e20 <loop+0x3c0>
   d4a70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4a74:	00070162 	.word	0x00070162
   d4a78:	005c002d 	.word	0x005c002d
   d4a7c:	00af007d 	.word	0x00af007d
   d4a80:	00f7      	.short	0x00f7
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4a82:	4b9a      	ldr	r3, [pc, #616]	; (d4cec <loop+0x28c>)
   d4a84:	781b      	ldrb	r3, [r3, #0]
   d4a86:	b12b      	cbz	r3, d4a94 <loop+0x34>
   d4a88:	4b99      	ldr	r3, [pc, #612]	; (d4cf0 <loop+0x290>)
   d4a8a:	781b      	ldrb	r3, [r3, #0]
   d4a8c:	2b02      	cmp	r3, #2
   d4a8e:	d001      	beq.n	d4a94 <loop+0x34>
   d4a90:	f7ff ffac 	bl	d49ec <_Z22publishStateTransitionv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
   d4a94:	4b97      	ldr	r3, [pc, #604]	; (d4cf4 <loop+0x294>)
   d4a96:	781b      	ldrb	r3, [r3, #0]
   d4a98:	b143      	cbz	r3, d4aac <loop+0x4c>
   d4a9a:	f000 fd3b 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
   d4a9e:	4b96      	ldr	r3, [pc, #600]	; (d4cf8 <loop+0x298>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	1ac0      	subs	r0, r0, r3
   d4aa4:	4b95      	ldr	r3, [pc, #596]	; (d4cfc <loop+0x29c>)
   d4aa6:	4298      	cmp	r0, r3
   d4aa8:	f200 81b7 	bhi.w	d4e1a <loop+0x3ba>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;     // We want to report on the hour but not after bedtime
   d4aac:	f002 fb94 	bl	d71d8 <_ZN9TimeClass4hourEv>
   d4ab0:	4b93      	ldr	r3, [pc, #588]	; (d4d00 <loop+0x2a0>)
   d4ab2:	781b      	ldrb	r3, [r3, #0]
   d4ab4:	4298      	cmp	r0, r3
   d4ab6:	bf1c      	itt	ne
   d4ab8:	2303      	movne	r3, #3
   d4aba:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
   d4abc:	4b91      	ldr	r3, [pc, #580]	; (d4d04 <loop+0x2a4>)
   d4abe:	681a      	ldr	r2, [r3, #0]
   d4ac0:	4b91      	ldr	r3, [pc, #580]	; (d4d08 <loop+0x2a8>)
   d4ac2:	681b      	ldr	r3, [r3, #0]
   d4ac4:	429a      	cmp	r2, r3
   d4ac6:	f300 81ab 	bgt.w	d4e20 <loop+0x3c0>
   d4aca:	2307      	movs	r3, #7
   d4acc:	e02c      	b.n	d4b28 <loop+0xc8>
    break;

  case MEASURING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4ace:	4b87      	ldr	r3, [pc, #540]	; (d4cec <loop+0x28c>)
   d4ad0:	781a      	ldrb	r2, [r3, #0]
   d4ad2:	461d      	mov	r5, r3
   d4ad4:	b12a      	cbz	r2, d4ae2 <loop+0x82>
   d4ad6:	4b86      	ldr	r3, [pc, #536]	; (d4cf0 <loop+0x290>)
   d4ad8:	781b      	ldrb	r3, [r3, #0]
   d4ada:	2b03      	cmp	r3, #3
   d4adc:	d001      	beq.n	d4ae2 <loop+0x82>
   d4ade:	f7ff ff85 	bl	d49ec <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4ae2:	f7ff fd15 	bl	d4510 <_Z16takeMeasurementsv>
   d4ae6:	4606      	mov	r6, r0
   d4ae8:	b9e8      	cbnz	r0, d4b26 <loop+0xc6>
    {
      state = ERROR_STATE;
   d4aea:	2301      	movs	r3, #1
   d4aec:	7023      	strb	r3, [r4, #0]
   d4aee:	f000 fd11 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4af2:	4b86      	ldr	r3, [pc, #536]	; (d4d0c <loop+0x2ac>)
   d4af4:	6018      	str	r0, [r3, #0]
      if (verboseMode && Particle.connected()) {
   d4af6:	782b      	ldrb	r3, [r5, #0]
   d4af8:	2b00      	cmp	r3, #0
   d4afa:	f000 8191 	beq.w	d4e20 <loop+0x3c0>
   d4afe:	f000 ff07 	bl	d5910 <spark_cloud_flag_connected>
   d4b02:	2800      	cmp	r0, #0
   d4b04:	f000 818c 	beq.w	d4e20 <loop+0x3c0>
        waitUntil(meterParticlePublish);
   d4b08:	f7ff fbee 	bl	d42e8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34>
   d4b0c:	4b80      	ldr	r3, [pc, #512]	; (d4d10 <loop+0x2b0>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4b0e:	4a81      	ldr	r2, [pc, #516]	; (d4d14 <loop+0x2b4>)
   d4b10:	781b      	ldrb	r3, [r3, #0]
   d4b12:	4981      	ldr	r1, [pc, #516]	; (d4d18 <loop+0x2b8>)
   d4b14:	f88d 6000 	strb.w	r6, [sp]
   d4b18:	a806      	add	r0, sp, #24
   d4b1a:	f7ff fadf 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4b1e:	a807      	add	r0, sp, #28
   d4b20:	f7ff fc1a 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b24:	e17c      	b.n	d4e20 <loop+0x3c0>
      }
    }
    else state = REPORTING_STATE;
   d4b26:	2304      	movs	r3, #4
   d4b28:	7023      	strb	r3, [r4, #0]
   d4b2a:	e179      	b.n	d4e20 <loop+0x3c0>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4b2c:	4b6f      	ldr	r3, [pc, #444]	; (d4cec <loop+0x28c>)
   d4b2e:	781b      	ldrb	r3, [r3, #0]
   d4b30:	b12b      	cbz	r3, d4b3e <loop+0xde>
   d4b32:	4b6f      	ldr	r3, [pc, #444]	; (d4cf0 <loop+0x290>)
   d4b34:	781b      	ldrb	r3, [r3, #0]
   d4b36:	2b04      	cmp	r3, #4
   d4b38:	d001      	beq.n	d4b3e <loop+0xde>
   d4b3a:	f7ff ff57 	bl	d49ec <_Z22publishStateTransitionv>
   d4b3e:	f000 fee7 	bl	d5910 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4b42:	b168      	cbz	r0, d4b60 <loop+0x100>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
   d4b44:	f002 fb48 	bl	d71d8 <_ZN9TimeClass4hourEv>
   d4b48:	280c      	cmp	r0, #12
   d4b4a:	d105      	bne.n	d4b58 <loop+0xf8>
   d4b4c:	f000 fee0 	bl	d5910 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4b50:	b110      	cbz	r0, d4b58 <loop+0xf8>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4b52:	2000      	movs	r0, #0
   d4b54:	f000 fefc 	bl	d5950 <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
   d4b58:	f7ff fc14 	bl	d4384 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d4b5c:	2305      	movs	r3, #5
   d4b5e:	e7e3      	b.n	d4b28 <loop+0xc8>
    }
    else if (!connectToParticle()) state = ERROR_STATE;                   // In case we timed out on our 1st attempt to connect
   d4b60:	f7ff fafa 	bl	d4158 <_Z17connectToParticlev>
   d4b64:	2800      	cmp	r0, #0
   d4b66:	f040 815b 	bne.w	d4e20 <loop+0x3c0>
   d4b6a:	2301      	movs	r3, #1
   d4b6c:	e7dc      	b.n	d4b28 <loop+0xc8>
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4b6e:	4b5f      	ldr	r3, [pc, #380]	; (d4cec <loop+0x28c>)
   d4b70:	781b      	ldrb	r3, [r3, #0]
   d4b72:	b12b      	cbz	r3, d4b80 <loop+0x120>
   d4b74:	4b5e      	ldr	r3, [pc, #376]	; (d4cf0 <loop+0x290>)
   d4b76:	781b      	ldrb	r3, [r3, #0]
   d4b78:	2b05      	cmp	r3, #5
   d4b7a:	d001      	beq.n	d4b80 <loop+0x120>
   d4b7c:	f7ff ff36 	bl	d49ec <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4b80:	4b66      	ldr	r3, [pc, #408]	; (d4d1c <loop+0x2bc>)
   d4b82:	781b      	ldrb	r3, [r3, #0]
   d4b84:	b92b      	cbnz	r3, d4b92 <loop+0x132>
   d4b86:	f000 fcc5 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d4b8a:	4b5b      	ldr	r3, [pc, #364]	; (d4cf8 <loop+0x298>)
   d4b8c:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d4b8e:	2302      	movs	r3, #2
   d4b90:	e7ca      	b.n	d4b28 <loop+0xc8>
   d4b92:	f000 fcbf 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4b96:	4b62      	ldr	r3, [pc, #392]	; (d4d20 <loop+0x2c0>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	1ac0      	subs	r0, r0, r3
   d4b9c:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4ba0:	4298      	cmp	r0, r3
   d4ba2:	f240 813d 	bls.w	d4e20 <loop+0x3c0>
   d4ba6:	f000 fcb5 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4baa:	4b58      	ldr	r3, [pc, #352]	; (d4d0c <loop+0x2ac>)
   d4bac:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bae:	f000 feaf 	bl	d5910 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4bb2:	2800      	cmp	r0, #0
   d4bb4:	d0d9      	beq.n	d4b6a <loop+0x10a>
   d4bb6:	4b56      	ldr	r3, [pc, #344]	; (d4d10 <loop+0x2b0>)
   d4bb8:	495a      	ldr	r1, [pc, #360]	; (d4d24 <loop+0x2c4>)
   d4bba:	781b      	ldrb	r3, [r3, #0]
   d4bbc:	2200      	movs	r2, #0
   d4bbe:	f88d 2000 	strb.w	r2, [sp]
   d4bc2:	a806      	add	r0, sp, #24
   d4bc4:	4a58      	ldr	r2, [pc, #352]	; (d4d28 <loop+0x2c8>)
   d4bc6:	f7ff fa89 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4bca:	a807      	add	r0, sp, #28
   d4bcc:	f7ff fbc4 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bd0:	e7cb      	b.n	d4b6a <loop+0x10a>
      state = ERROR_STATE;                                            // Response timed out
    }
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
   d4bd2:	4b46      	ldr	r3, [pc, #280]	; (d4cec <loop+0x28c>)
   d4bd4:	781a      	ldrb	r2, [r3, #0]
   d4bd6:	461d      	mov	r5, r3
   d4bd8:	b12a      	cbz	r2, d4be6 <loop+0x186>
   d4bda:	4b45      	ldr	r3, [pc, #276]	; (d4cf0 <loop+0x290>)
   d4bdc:	781b      	ldrb	r3, [r3, #0]
   d4bde:	2b06      	cmp	r3, #6
   d4be0:	d001      	beq.n	d4be6 <loop+0x186>
   d4be2:	f7ff ff03 	bl	d49ec <_Z22publishStateTransitionv>
   d4be6:	f000 fe93 	bl	d5910 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4bea:	b1b0      	cbz	r0, d4c1a <loop+0x1ba>
      if (verboseMode) {
   d4bec:	782b      	ldrb	r3, [r5, #0]
   d4bee:	b173      	cbz	r3, d4c0e <loop+0x1ae>
        waitUntil(meterParticlePublish);
   d4bf0:	f7ff fb7a 	bl	d42e8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34>
   d4bf4:	4b46      	ldr	r3, [pc, #280]	; (d4d10 <loop+0x2b0>)
        Particle.publish("State","Going to Sleep",PRIVATE);
   d4bf6:	4948      	ldr	r1, [pc, #288]	; (d4d18 <loop+0x2b8>)
   d4bf8:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4bfa:	2200      	movs	r2, #0
   d4bfc:	f88d 2000 	strb.w	r2, [sp]
   d4c00:	a806      	add	r0, sp, #24
   d4c02:	4a4a      	ldr	r2, [pc, #296]	; (d4d2c <loop+0x2cc>)
   d4c04:	f7ff fa6a 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4c08:	a807      	add	r0, sp, #28
   d4c0a:	f7ff fba5 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d4c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4c12:	f000 ff51 	bl	d5ab8 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d4c16:	f7ff fae3 	bl	d41e0 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d4c1a:	2100      	movs	r1, #0
   d4c1c:	2007      	movs	r0, #7
   d4c1e:	f002 fcb6 	bl	d758e <digitalWrite>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d4c22:	f002 fae3 	bl	d71ec <_ZN9TimeClass6minuteEv>
   d4c26:	4b42      	ldr	r3, [pc, #264]	; (d4d30 <loop+0x2d0>)
   d4c28:	681a      	ldr	r2, [r3, #0]
   d4c2a:	2304      	movs	r3, #4
   d4c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
   d4c30:	ab08      	add	r3, sp, #32
   d4c32:	2602      	movs	r6, #2
   d4c34:	f803 6d0e 	strb.w	r6, [r3, #-14]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4c38:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4c3c:	9202      	str	r2, [sp, #8]
   d4c3e:	223c      	movs	r2, #60	; 0x3c
   d4c40:	4350      	muls	r0, r2
   d4c42:	2501      	movs	r5, #1
   d4c44:	462a      	mov	r2, r5
   d4c46:	9001      	str	r0, [sp, #4]
   d4c48:	a905      	add	r1, sp, #20
   d4c4a:	a806      	add	r0, sp, #24
   d4c4c:	9500      	str	r5, [sp, #0]
   d4c4e:	f002 f9eb 	bl	d7028 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch, FALLING, secondsToHour);                   // Sleep till the next hour, then wakes and continues execution - Stop mode
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d4c52:	4629      	mov	r1, r5
   d4c54:	2007      	movs	r0, #7
   d4c56:	f002 fc9a 	bl	d758e <digitalWrite>
    connectToParticle();                                                // Wakey Wakey and get connected.
   d4c5a:	f7ff fa7d 	bl	d4158 <_Z17connectToParticlev>
    state = IDLE_STATE;                                                 // Awake now, we need to go back to the IDLE state for next tasking
   d4c5e:	7026      	strb	r6, [r4, #0]
    } break;
   d4c60:	e0de      	b.n	d4e20 <loop+0x3c0>

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (verboseMode && state != oldState) publishStateTransition();
   d4c62:	4b22      	ldr	r3, [pc, #136]	; (d4cec <loop+0x28c>)
   d4c64:	781a      	ldrb	r2, [r3, #0]
   d4c66:	461d      	mov	r5, r3
   d4c68:	b12a      	cbz	r2, d4c76 <loop+0x216>
   d4c6a:	4b21      	ldr	r3, [pc, #132]	; (d4cf0 <loop+0x290>)
   d4c6c:	781b      	ldrb	r3, [r3, #0]
   d4c6e:	2b07      	cmp	r3, #7
   d4c70:	d001      	beq.n	d4c76 <loop+0x216>
   d4c72:	f7ff febb 	bl	d49ec <_Z22publishStateTransitionv>
   d4c76:	f000 fe4b 	bl	d5910 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c7a:	b1b0      	cbz	r0, d4caa <loop+0x24a>
      if (verboseMode) {
   d4c7c:	782b      	ldrb	r3, [r5, #0]
   d4c7e:	b173      	cbz	r3, d4c9e <loop+0x23e>
        waitUntil(meterParticlePublish);
   d4c80:	f7ff fb32 	bl	d42e8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.34>
   d4c84:	4b22      	ldr	r3, [pc, #136]	; (d4d10 <loop+0x2b0>)
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d4c86:	4924      	ldr	r1, [pc, #144]	; (d4d18 <loop+0x2b8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4c88:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4c8a:	2200      	movs	r2, #0
   d4c8c:	f88d 2000 	strb.w	r2, [sp]
   d4c90:	a806      	add	r0, sp, #24
   d4c92:	4a28      	ldr	r2, [pc, #160]	; (d4d34 <loop+0x2d4>)
   d4c94:	f7ff fa22 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4c98:	a807      	add	r0, sp, #28
   d4c9a:	f7ff fb5d 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d4c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ca2:	f000 ff09 	bl	d5ab8 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d4ca6:	f7ff fa9b 	bl	d41e0 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d4caa:	2100      	movs	r1, #0
   d4cac:	2007      	movs	r0, #7
   d4cae:	f002 fc6e 	bl	d758e <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
   d4cb2:	f002 fa9b 	bl	d71ec <_ZN9TimeClass6minuteEv>
   d4cb6:	4b1e      	ldr	r3, [pc, #120]	; (d4d30 <loop+0x2d0>)
   d4cb8:	681a      	ldr	r2, [r3, #0]
   d4cba:	2304      	movs	r3, #4
   d4cbc:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4cc0:	ab08      	add	r3, sp, #32
   d4cc2:	2502      	movs	r5, #2
   d4cc4:	f803 5d0d 	strb.w	r5, [r3, #-13]!
   d4cc8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4ccc:	9202      	str	r2, [sp, #8]
   d4cce:	223c      	movs	r2, #60	; 0x3c
   d4cd0:	4350      	muls	r0, r2
   d4cd2:	2201      	movs	r2, #1
   d4cd4:	9001      	str	r0, [sp, #4]
   d4cd6:	9200      	str	r2, [sp, #0]
   d4cd8:	f10d 0116 	add.w	r1, sp, #22
   d4cdc:	a806      	add	r0, sp, #24
   d4cde:	f002 f9a3 	bl	d7028 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch,FALLING,secondsToHour);                     // Very deep sleep till the next hour - then resets
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d4ce2:	7025      	strb	r5, [r4, #0]
    } break;
   d4ce4:	e09c      	b.n	d4e20 <loop+0x3c0>
   d4ce6:	bf00      	nop
   d4ce8:	2003e275 	.word	0x2003e275
   d4cec:	2003e2ef 	.word	0x2003e2ef
   d4cf0:	2003e274 	.word	0x2003e274
   d4cf4:	2003e2ee 	.word	0x2003e2ee
   d4cf8:	2003e2f0 	.word	0x2003e2f0
   d4cfc:	00015f90 	.word	0x00015f90
   d4d00:	2003e2d4 	.word	0x2003e2d4
   d4d04:	2003e288 	.word	0x2003e288
   d4d08:	2003e248 	.word	0x2003e248
   d4d0c:	2003e2fc 	.word	0x2003e2fc
   d4d10:	2003e250 	.word	0x2003e250
   d4d14:	000d9105 	.word	0x000d9105
   d4d18:	000d8f3f 	.word	0x000d8f3f
   d4d1c:	2003e158 	.word	0x2003e158
   d4d20:	2003e24c 	.word	0x2003e24c
   d4d24:	000d9079 	.word	0x000d9079
   d4d28:	000d8e65 	.word	0x000d8e65
   d4d2c:	000d9092 	.word	0x000d9092
   d4d30:	2003e2e0 	.word	0x2003e2e0
   d4d34:	000d90a1 	.word	0x000d90a1

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
   d4d38:	4b3a      	ldr	r3, [pc, #232]	; (d4e24 <loop+0x3c4>)
   d4d3a:	781b      	ldrb	r3, [r3, #0]
   d4d3c:	b12b      	cbz	r3, d4d4a <loop+0x2ea>
   d4d3e:	4b3a      	ldr	r3, [pc, #232]	; (d4e28 <loop+0x3c8>)
   d4d40:	781b      	ldrb	r3, [r3, #0]
   d4d42:	2b01      	cmp	r3, #1
   d4d44:	d001      	beq.n	d4d4a <loop+0x2ea>
   d4d46:	f7ff fe51 	bl	d49ec <_Z22publishStateTransitionv>
   d4d4a:	f000 fbe3 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4d4e:	4b37      	ldr	r3, [pc, #220]	; (d4e2c <loop+0x3cc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d4d56:	3330      	adds	r3, #48	; 0x30
   d4d58:	4298      	cmp	r0, r3
   d4d5a:	d961      	bls.n	d4e20 <loop+0x3c0>
    {
      if (resetCount <= 3) {                                          // First try simple reset
   d4d5c:	4b34      	ldr	r3, [pc, #208]	; (d4e30 <loop+0x3d0>)
   d4d5e:	681b      	ldr	r3, [r3, #0]
   d4d60:	2b03      	cmp	r3, #3
   d4d62:	dc14      	bgt.n	d4d8e <loop+0x32e>
   d4d64:	f000 fdd4 	bl	d5910 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4d68:	b160      	cbz	r0, d4d84 <loop+0x324>
   d4d6a:	4b32      	ldr	r3, [pc, #200]	; (d4e34 <loop+0x3d4>)
   d4d6c:	4932      	ldr	r1, [pc, #200]	; (d4e38 <loop+0x3d8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4d6e:	781b      	ldrb	r3, [r3, #0]
   d4d70:	2200      	movs	r2, #0
   d4d72:	f88d 2000 	strb.w	r2, [sp]
   d4d76:	a806      	add	r0, sp, #24
   d4d78:	4a30      	ldr	r2, [pc, #192]	; (d4e3c <loop+0x3dc>)
   d4d7a:	f7ff f9af 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4d7e:	a807      	add	r0, sp, #28
   d4d80:	f7ff faea 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4d84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d88:	f000 fe96 	bl	d5ab8 <delay>
   d4d8c:	e025      	b.n	d4dda <loop+0x37a>
        System.reset();
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
   d4d8e:	f002 fa1c 	bl	d71ca <_ZN9TimeClass3nowEv>
   d4d92:	4604      	mov	r4, r0
   d4d94:	f002 fc3e 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4d98:	2005      	movs	r0, #5
   d4d9a:	f7ff f99b 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
   d4d9e:	1a20      	subs	r0, r4, r0
   d4da0:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d4da4:	dd1c      	ble.n	d4de0 <loop+0x380>
   d4da6:	f000 fdb3 	bl	d5910 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d4daa:	b160      	cbz	r0, d4dc6 <loop+0x366>
   d4dac:	4b21      	ldr	r3, [pc, #132]	; (d4e34 <loop+0x3d4>)
   d4dae:	4922      	ldr	r1, [pc, #136]	; (d4e38 <loop+0x3d8>)
   d4db0:	781b      	ldrb	r3, [r3, #0]
   d4db2:	2200      	movs	r2, #0
   d4db4:	f88d 2000 	strb.w	r2, [sp]
   d4db8:	a806      	add	r0, sp, #24
   d4dba:	4a21      	ldr	r2, [pc, #132]	; (d4e40 <loop+0x3e0>)
   d4dbc:	f7ff f98e 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4dc0:	a807      	add	r0, sp, #28
   d4dc2:	f7ff fac9 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4dc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4dca:	f000 fe75 	bl	d5ab8 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
   d4dce:	f002 fc21 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4dd2:	2100      	movs	r1, #0
   d4dd4:	2002      	movs	r0, #2
   d4dd6:	f7ff f97f 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
        System.reset();
   d4dda:	f002 f8f1 	bl	d6fc0 <_ZN11SystemClass5resetEv>
   d4dde:	e01f      	b.n	d4e20 <loop+0x3c0>
   d4de0:	f000 fd96 	bl	d5910 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d4de4:	b160      	cbz	r0, d4e00 <loop+0x3a0>
   d4de6:	4b13      	ldr	r3, [pc, #76]	; (d4e34 <loop+0x3d4>)
   d4de8:	4913      	ldr	r1, [pc, #76]	; (d4e38 <loop+0x3d8>)
   d4dea:	781b      	ldrb	r3, [r3, #0]
   d4dec:	2200      	movs	r2, #0
   d4dee:	f88d 2000 	strb.w	r2, [sp]
   d4df2:	a806      	add	r0, sp, #24
   d4df4:	4a13      	ldr	r2, [pc, #76]	; (d4e44 <loop+0x3e4>)
   d4df6:	f7ff f971 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d4dfa:	a807      	add	r0, sp, #28
   d4dfc:	f7ff faac 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4e00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4e04:	f000 fe58 	bl	d5ab8 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
   d4e08:	f002 fc04 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4e0c:	2100      	movs	r1, #0
   d4e0e:	2002      	movs	r0, #2
   d4e10:	f7ff f962 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
        fullModemReset();                                             // Full Modem reset and reboots
   d4e14:	f7ff fa74 	bl	d4300 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d4e18:	e002      	b.n	d4e20 <loop+0x3c0>
void loop()
{
  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
   d4e1a:	2306      	movs	r3, #6
   d4e1c:	7023      	strb	r3, [r4, #0]
   d4e1e:	e645      	b.n	d4aac <loop+0x4c>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d4e20:	b008      	add	sp, #32
   d4e22:	bd70      	pop	{r4, r5, r6, pc}
   d4e24:	2003e2ef 	.word	0x2003e2ef
   d4e28:	2003e274 	.word	0x2003e274
   d4e2c:	2003e2fc 	.word	0x2003e2fc
   d4e30:	2003e2d0 	.word	0x2003e2d0
   d4e34:	2003e250 	.word	0x2003e250
   d4e38:	000d8f3f 	.word	0x000d8f3f
   d4e3c:	000d90b8 	.word	0x000d90b8
   d4e40:	000d90cc 	.word	0x000d90cc
   d4e44:	000d90e6 	.word	0x000d90e6

000d4e48 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4e48:	2300      	movs	r3, #0
   d4e4a:	2204      	movs	r2, #4
   d4e4c:	f000 bd38 	b.w	d58c0 <spark_variable>

000d4e50 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>:
   d4e50:	2300      	movs	r3, #0
   d4e52:	2202      	movs	r2, #2
   d4e54:	f000 bd34 	b.w	d58c0 <spark_variable>

000d4e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4e58:	4602      	mov	r2, r0
   d4e5a:	4801      	ldr	r0, [pc, #4]	; (d4e60 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4e5c:	f000 bfcf 	b.w	d5dfe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4e60:	000d5dd3 	.word	0x000d5dd3

000d4e64 <setup>:
int soilMoisture2 = 0;                               // Soil sensor variables
int waterPressure = 0;                               // Water Pressure Value (0-5PSI)
int solenoidState = 0;                               // Solenoid State (-1 close, 0 disabled, 1 open)

void setup()                                                      // Note: Disconnected Setup()
{
   d4e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e68:	4bb4      	ldr	r3, [pc, #720]	; (d513c <setup+0x2d8>)
int soilMoisture2 = 0;                               // Soil sensor variables
int waterPressure = 0;                               // Water Pressure Value (0-5PSI)
int solenoidState = 0;                               // Solenoid State (-1 close, 0 disabled, 1 open)

void setup()                                                      // Note: Disconnected Setup()
{
   d4e6a:	b0b8      	sub	sp, #224	; 0xe0
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e6c:	aa08      	add	r2, sp, #32
   d4e6e:	f103 0510 	add.w	r5, r3, #16
   d4e72:	4616      	mov	r6, r2
   d4e74:	6818      	ldr	r0, [r3, #0]
   d4e76:	6859      	ldr	r1, [r3, #4]
   d4e78:	4614      	mov	r4, r2
   d4e7a:	c403      	stmia	r4!, {r0, r1}
   d4e7c:	3308      	adds	r3, #8
   d4e7e:	42ab      	cmp	r3, r5
   d4e80:	4622      	mov	r2, r4
   d4e82:	d1f7      	bne.n	d4e74 <setup+0x10>
   d4e84:	8819      	ldrh	r1, [r3, #0]
   d4e86:	789b      	ldrb	r3, [r3, #2]
   d4e88:	70a3      	strb	r3, [r4, #2]
   d4e8a:	222d      	movs	r2, #45	; 0x2d
   d4e8c:	8021      	strh	r1, [r4, #0]
   d4e8e:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d4e92:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4e94:	4faa      	ldr	r7, [pc, #680]	; (d5140 <setup+0x2dc>)

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
  pinMode(soilMoisture1, INPUT);
   d4e96:	f8df 8360 	ldr.w	r8, [pc, #864]	; d51f8 <setup+0x394>
  pinMode(soilMoisture2, INPUT);
   d4e9a:	4daa      	ldr	r5, [pc, #680]	; (d5144 <setup+0x2e0>)
int waterPressure = 0;                               // Water Pressure Value (0-5PSI)
int solenoidState = 0;                               // Solenoid State (-1 close, 0 disabled, 1 open)

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e9c:	f003 faed 	bl	d847a <memset>
  state = IDLE_STATE;
   d4ea0:	2402      	movs	r4, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4ea2:	2101      	movs	r1, #1
   d4ea4:	2007      	movs	r0, #7
int solenoidState = 0;                               // Solenoid State (-1 close, 0 disabled, 1 open)

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
   d4ea6:	703c      	strb	r4, [r7, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4ea8:	f002 fb60 	bl	d756c <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d4eac:	2100      	movs	r1, #0
   d4eae:	2004      	movs	r0, #4
   d4eb0:	f002 fb5c 	bl	d756c <pinMode>
  pinMode(soilMoisture1, INPUT);
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	f8b8 0000 	ldrh.w	r0, [r8]
   d4eba:	f002 fb57 	bl	d756c <pinMode>
  pinMode(soilMoisture2, INPUT);
   d4ebe:	2100      	movs	r1, #0
   d4ec0:	8828      	ldrh	r0, [r5, #0]
   d4ec2:	f002 fb53 	bl	d756c <pinMode>
  pinMode(pressurePin, INPUT);
   d4ec6:	2100      	movs	r1, #0
   d4ec8:	2011      	movs	r0, #17
   d4eca:	f002 fb4f 	bl	d756c <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d4ece:	2101      	movs	r1, #1
   d4ed0:	200e      	movs	r0, #14
   d4ed2:	f002 fb4b 	bl	d756c <pinMode>
  digitalWrite(sensorShutdown,HIGH);
   d4ed6:	2101      	movs	r1, #1
   d4ed8:	200e      	movs	r0, #14
   d4eda:	f002 fb58 	bl	d758e <digitalWrite>
  pinMode(solEnablePin,OUTPUT);                                     
   d4ede:	2101      	movs	r1, #1
   d4ee0:	2003      	movs	r0, #3
   d4ee2:	f002 fb43 	bl	d756c <pinMode>
  pinMode(solDirection,OUTPUT);                                      
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	2101      	movs	r1, #1
   d4eea:	f002 fb3f 	bl	d756c <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d4eee:	2101      	movs	r1, #1
   d4ef0:	2003      	movs	r0, #3
   d4ef2:	f002 fb4c 	bl	d758e <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d4ef6:	2100      	movs	r1, #0
   d4ef8:	4620      	mov	r0, r4
   d4efa:	f002 fb48 	bl	d758e <digitalWrite>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4efe:	a804      	add	r0, sp, #16
   d4f00:	f000 fd0e 	bl	d5920 <spark_deviceID>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4f04:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4f06:	2300      	movs	r3, #0
   d4f08:	227d      	movs	r2, #125	; 0x7d
   d4f0a:	a918      	add	r1, sp, #96	; 0x60
   d4f0c:	a804      	add	r0, sp, #16
   d4f0e:	f002 f83a 	bl	d6f86 <_ZNK6String8getBytesEPhjj>
   d4f12:	4623      	mov	r3, r4
   d4f14:	4622      	mov	r2, r4
   d4f16:	498c      	ldr	r1, [pc, #560]	; (d5148 <setup+0x2e4>)
   d4f18:	9401      	str	r4, [sp, #4]
   d4f1a:	9400      	str	r4, [sp, #0]
   d4f1c:	a818      	add	r0, sp, #96	; 0x60
   d4f1e:	f000 fd0f 	bl	d5940 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d4f22:	498a      	ldr	r1, [pc, #552]	; (d514c <setup+0x2e8>)
   d4f24:	488a      	ldr	r0, [pc, #552]	; (d5150 <setup+0x2ec>)
   d4f26:	f7ff ff8f 	bl	d4e48 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("ResetCount", resetCount);
   d4f2a:	498a      	ldr	r1, [pc, #552]	; (d5154 <setup+0x2f0>)
   d4f2c:	488a      	ldr	r0, [pc, #552]	; (d5158 <setup+0x2f4>)
   d4f2e:	f7ff ff8f 	bl	d4e50 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Release",releaseNumber);
   d4f32:	498a      	ldr	r1, [pc, #552]	; (d515c <setup+0x2f8>)
   d4f34:	488a      	ldr	r0, [pc, #552]	; (d5160 <setup+0x2fc>)
   d4f36:	f7ff ff87 	bl	d4e48 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("StateOfChg", batteryString);
   d4f3a:	498a      	ldr	r1, [pc, #552]	; (d5164 <setup+0x300>)
   d4f3c:	488a      	ldr	r0, [pc, #552]	; (d5168 <setup+0x304>)
   d4f3e:	f7ff ff83 	bl	d4e48 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("PowerContext",powerContext);
   d4f42:	498a      	ldr	r1, [pc, #552]	; (d516c <setup+0x308>)
   d4f44:	488a      	ldr	r0, [pc, #552]	; (d5170 <setup+0x30c>)
   d4f46:	f7ff ff7f 	bl	d4e48 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4f4a:	4623      	mov	r3, r4
   d4f4c:	2201      	movs	r2, #1
   d4f4e:	4989      	ldr	r1, [pc, #548]	; (d5174 <setup+0x310>)
   d4f50:	4889      	ldr	r0, [pc, #548]	; (d5178 <setup+0x314>)
   d4f52:	f000 fcb5 	bl	d58c0 <spark_variable>
  Particle.variable("LowPowerMode",lowPowerMode);
  Particle.variable("Temperature", temperatureString);
   d4f56:	4989      	ldr	r1, [pc, #548]	; (d517c <setup+0x318>)
   d4f58:	4889      	ldr	r0, [pc, #548]	; (d5180 <setup+0x31c>)
   d4f5a:	f7ff ff75 	bl	d4e48 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Humidity", humidityString);
   d4f5e:	4989      	ldr	r1, [pc, #548]	; (d5184 <setup+0x320>)
   d4f60:	4889      	ldr	r0, [pc, #548]	; (d5188 <setup+0x324>)
   d4f62:	f7ff ff71 	bl	d4e48 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture1", soilMoisture1);
   d4f66:	4641      	mov	r1, r8
   d4f68:	4888      	ldr	r0, [pc, #544]	; (d518c <setup+0x328>)
   d4f6a:	f7ff ff71 	bl	d4e50 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture2", soilMoisture2);
   d4f6e:	4629      	mov	r1, r5
   d4f70:	4887      	ldr	r0, [pc, #540]	; (d5190 <setup+0x32c>)
   d4f72:	f7ff ff6d 	bl	d4e50 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Pressure", waterPressure);
   d4f76:	4987      	ldr	r1, [pc, #540]	; (d5194 <setup+0x330>)
   d4f78:	4887      	ldr	r0, [pc, #540]	; (d5198 <setup+0x334>)
   d4f7a:	f7ff ff69 	bl	d4e50 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>

  Particle.function("Measure-Now",measureNow);
   d4f7e:	4987      	ldr	r1, [pc, #540]	; (d519c <setup+0x338>)
   d4f80:	4887      	ldr	r0, [pc, #540]	; (d51a0 <setup+0x33c>)
   d4f82:	f7ff ff69 	bl	d4e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d4f86:	4987      	ldr	r1, [pc, #540]	; (d51a4 <setup+0x340>)
   d4f88:	487b      	ldr	r0, [pc, #492]	; (d5178 <setup+0x314>)
   d4f8a:	f7ff ff65 	bl	d4e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d4f8e:	4986      	ldr	r1, [pc, #536]	; (d51a8 <setup+0x344>)
   d4f90:	4886      	ldr	r0, [pc, #536]	; (d51ac <setup+0x348>)
   d4f92:	f7ff ff61 	bl	d4e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d4f96:	4986      	ldr	r1, [pc, #536]	; (d51b0 <setup+0x34c>)
   d4f98:	4886      	ldr	r0, [pc, #536]	; (d51b4 <setup+0x350>)
   d4f9a:	f7ff ff5d 	bl	d4e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
   d4f9e:	4986      	ldr	r1, [pc, #536]	; (d51b8 <setup+0x354>)
   d4fa0:	4886      	ldr	r0, [pc, #536]	; (d51bc <setup+0x358>)
   d4fa2:	f7ff ff59 	bl	d4e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSolenoid",setSolenoid);
   d4fa6:	4986      	ldr	r1, [pc, #536]	; (d51c0 <setup+0x35c>)
   d4fa8:	4886      	ldr	r0, [pc, #536]	; (d51c4 <setup+0x360>)
   d4faa:	f7ff ff55 	bl	d4e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d4fae:	f002 fb31 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	f7ff f88e 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
   d4fb8:	2801      	cmp	r0, #1
   d4fba:	d10f      	bne.n	d4fdc <setup+0x178>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  if (!sht31.begin(0x44)) {                                             // Set to 0x45 for alternate i2c addr
   d4fbc:	2144      	movs	r1, #68	; 0x44
   d4fbe:	4882      	ldr	r0, [pc, #520]	; (d51c8 <setup+0x364>)
   d4fc0:	f000 f99b 	bl	d52fa <_ZN14Adafruit_SHT315beginEh>
   d4fc4:	b9f8      	cbnz	r0, d5006 <setup+0x1a2>
    snprintf(StartupMessage,sizeof(StartupMessage),"Could not find SHT31");
   d4fc6:	4981      	ldr	r1, [pc, #516]	; (d51cc <setup+0x368>)
   d4fc8:	4630      	mov	r0, r6
   d4fca:	f003 fa91 	bl	d84f0 <strcpy>
   d4fce:	f000 faa1 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4fd2:	4b7f      	ldr	r3, [pc, #508]	; (d51d0 <setup+0x36c>)
   d4fd4:	6018      	str	r0, [r3, #0]
    state = ERROR_STATE;
   d4fd6:	2301      	movs	r3, #1
   d4fd8:	703b      	strb	r3, [r7, #0]
   d4fda:	e014      	b.n	d5006 <setup+0x1a2>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);
  Particle.function("SetSolenoid",setSolenoid);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
   d4fdc:	f002 fb1a 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4fe0:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4fe2:	2204      	movs	r2, #4
   d4fe4:	a902      	add	r1, sp, #8
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	9502      	str	r5, [sp, #8]
   d4fea:	f000 fabb 	bl	d5564 <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d4fee:	f002 fb11 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d4ff2:	4628      	mov	r0, r5
   d4ff4:	2204      	movs	r2, #4
   d4ff6:	a902      	add	r1, sp, #8
  Particle.function("SetTimeZone",setTimeZone);
  Particle.function("SetSolenoid",setSolenoid);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
   d4ff8:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d4ffa:	9402      	str	r4, [sp, #8]
   d4ffc:	f000 fab2 	bl	d5564 <HAL_EEPROM_Put>
  Particle.function("SetTimeZone",setTimeZone);
  Particle.function("SetSolenoid",setSolenoid);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
   d5000:	2d0a      	cmp	r5, #10
   d5002:	d1f4      	bne.n	d4fee <setup+0x18a>
   d5004:	e7da      	b.n	d4fbc <setup+0x158>
    snprintf(StartupMessage,sizeof(StartupMessage),"Could not find SHT31");
    resetTimeStamp = millis();
    state = ERROR_STATE;
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
   d5006:	f002 fb05 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d500a:	2002      	movs	r0, #2
   d500c:	f7ff f862 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
   d5010:	4c50      	ldr	r4, [pc, #320]	; (d5154 <setup+0x2f0>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5012:	2200      	movs	r2, #0
   d5014:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5016:	4611      	mov	r1, r2
   d5018:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d501a:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d501c:	f000 fa6a 	bl	d54f4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5020:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
   d5022:	2b14      	cmp	r3, #20
   d5024:	d108      	bne.n	d5038 <setup+0x1d4>
  {
    resetCount++;
   d5026:	6823      	ldr	r3, [r4, #0]
   d5028:	3301      	adds	r3, #1
   d502a:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
   d502c:	f002 faf2 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d5030:	7821      	ldrb	r1, [r4, #0]
   d5032:	2002      	movs	r0, #2
   d5034:	f7ff f850 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
   d5038:	6823      	ldr	r3, [r4, #0]
   d503a:	2b05      	cmp	r3, #5
   d503c:	dd07      	ble.n	d504e <setup+0x1ea>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d503e:	f002 fae9 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d5042:	2104      	movs	r1, #4
   d5044:	2002      	movs	r0, #2
   d5046:	f7ff f847 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d504a:	f7ff f959 	bl	d4300 <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
   d504e:	f002 fae1 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d5052:	2003      	movs	r0, #3
   d5054:	f7ff f83e 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
   d5058:	f100 030c 	add.w	r3, r0, #12
   d505c:	b2db      	uxtb	r3, r3
   d505e:	2b18      	cmp	r3, #24
   d5060:	bf9a      	itte	ls
   d5062:	b243      	sxtbls	r3, r0
   d5064:	ee00 3a10 	vmovls	s0, r3
  else Time.zone(0.0);                                                    // Default is GMT in case proper value not in EEPROM
   d5068:	ed9f 0a5a 	vldrhi	s0, [pc, #360]	; d51d4 <setup+0x370>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
   d506c:	4c41      	ldr	r4, [pc, #260]	; (d5174 <setup+0x310>)
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0.0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
   d506e:	f8df 818c 	ldr.w	r8, [pc, #396]	; d51fc <setup+0x398>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d5072:	4d59      	ldr	r5, [pc, #356]	; (d51d8 <setup+0x374>)
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
    fullModemReset();                                                   // This will reset the modem and the device will reboot
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
   d5074:	bf98      	it	ls
   d5076:	eeb8 0ac0 	vcvtls.f32.s32	s0, s0
  else Time.zone(0.0);                                                    // Default is GMT in case proper value not in EEPROM
   d507a:	f002 f847 	bl	d710c <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
   d507e:	f002 fac9 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d5082:	2004      	movs	r0, #4
   d5084:	f7ff f826 	bl	d40d4 <_ZN11EEPROMClass4readEi.isra.16>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
   d5088:	f000 0301 	and.w	r3, r0, #1
   d508c:	7023      	strb	r3, [r4, #0]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
   d508e:	4b53      	ldr	r3, [pc, #332]	; (d51dc <setup+0x378>)
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0.0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
   d5090:	f888 0000 	strb.w	r0, [r8]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
   d5094:	f3c0 0280 	ubfx	r2, r0, #2, #1
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d5098:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d509c:	7028      	strb	r0, [r5, #0]
  else Time.zone(0.0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
   d509e:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
  
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d50a0:	f7ff f8ca 	bl	d4238 <_Z9PMICresetv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
   d50a4:	2004      	movs	r0, #4
   d50a6:	f002 fa8b 	bl	d75c0 <digitalRead>
   d50aa:	b988      	cbnz	r0, d50d0 <setup+0x26c>
    lowPowerMode = false;                                               // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
   d50ac:	f898 3000 	ldrb.w	r3, [r8]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
  
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                               // Press the user switch while resetting the device
   d50b0:	7020      	strb	r0, [r4, #0]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
   d50b2:	f023 0301 	bic.w	r3, r3, #1
   d50b6:	f888 3000 	strb.w	r3, [r8]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
   d50ba:	f002 faab 	bl	d7614 <_Z21__fetch_global_EEPROMv>
   d50be:	2104      	movs	r1, #4
   d50c0:	f898 0000 	ldrb.w	r0, [r8]
   d50c4:	f7ff f808 	bl	d40d8 <_ZN11EEPROMClass5writeEih.isra.17>
    snprintf(StartupMessage, sizeof(StartupMessage), "User Button - Detected");
   d50c8:	4945      	ldr	r1, [pc, #276]	; (d51e0 <setup+0x37c>)
   d50ca:	4630      	mov	r0, r6
   d50cc:	f003 fa10 	bl	d84f0 <strcpy>
  }

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d50d0:	f7ff fa1e 	bl	d4510 <_Z16takeMeasurementsv>

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d50d4:	4b43      	ldr	r3, [pc, #268]	; (d51e4 <setup+0x380>)
   d50d6:	681a      	ldr	r2, [r3, #0]
   d50d8:	4b43      	ldr	r3, [pc, #268]	; (d51e8 <setup+0x384>)
   d50da:	681b      	ldr	r3, [r3, #0]
   d50dc:	429a      	cmp	r2, r3
   d50de:	dc02      	bgt.n	d50e6 <setup+0x282>
   d50e0:	2307      	movs	r3, #7
   d50e2:	703b      	strb	r3, [r7, #0]
   d50e4:	e00c      	b.n	d5100 <setup+0x29c>
  else if(!connectToParticle()) {
   d50e6:	f7ff f837 	bl	d4158 <_Z17connectToParticlev>
   d50ea:	b948      	cbnz	r0, d5100 <setup+0x29c>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d50ec:	2301      	movs	r3, #1
   d50ee:	703b      	strb	r3, [r7, #0]
   d50f0:	f000 fa10 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d50f4:	4b36      	ldr	r3, [pc, #216]	; (d51d0 <setup+0x36c>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d50f6:	493d      	ldr	r1, [pc, #244]	; (d51ec <setup+0x388>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d50f8:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d50fa:	4630      	mov	r0, r6
   d50fc:	f003 f9f8 	bl	d84f0 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5100:	f000 fc06 	bl	d5910 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5104:	b108      	cbz	r0, d510a <setup+0x2a6>
   d5106:	782b      	ldrb	r3, [r5, #0]
   d5108:	b953      	cbnz	r3, d5120 <setup+0x2bc>
    Serial.println(StartupMessage);
   d510a:	f002 f963 	bl	d73d4 <_Z16_fetch_usbserialv>
   d510e:	4631      	mov	r1, r6
   d5110:	f001 fe22 	bl	d6d58 <_ZN5Print7printlnEPKc>
  pinMode(solDirection,OUTPUT);                                      
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d5114:	a804      	add	r0, sp, #16
   d5116:	f001 feb0 	bl	d6e7a <_ZN6StringD1Ev>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
    Serial.println(StartupMessage);
}
   d511a:	b038      	add	sp, #224	; 0xe0
   d511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5120:	4b33      	ldr	r3, [pc, #204]	; (d51f0 <setup+0x38c>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5122:	4934      	ldr	r1, [pc, #208]	; (d51f4 <setup+0x390>)
   d5124:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5126:	2200      	movs	r2, #0
   d5128:	f88d 2000 	strb.w	r2, [sp]
   d512c:	a802      	add	r0, sp, #8
   d512e:	4632      	mov	r2, r6
   d5130:	f7fe ffd4 	bl	d40dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43.constprop.53>
   d5134:	a803      	add	r0, sp, #12
   d5136:	f7ff f90f 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d513a:	e7e6      	b.n	d510a <setup+0x2a6>
   d513c:	000d8e00 	.word	0x000d8e00
   d5140:	2003e275 	.word	0x2003e275
   d5144:	2003e2dc 	.word	0x2003e2dc
   d5148:	000d4449 	.word	0x000d4449
   d514c:	2003e290 	.word	0x2003e290
   d5150:	000d911f 	.word	0x000d911f
   d5154:	2003e2d0 	.word	0x2003e2d0
   d5158:	000d9126 	.word	0x000d9126
   d515c:	000d923d 	.word	0x000d923d
   d5160:	000d9131 	.word	0x000d9131
   d5164:	2003e311 	.word	0x2003e311
   d5168:	000d9139 	.word	0x000d9139
   d516c:	2003e251 	.word	0x2003e251
   d5170:	000d9144 	.word	0x000d9144
   d5174:	2003e2ee 	.word	0x2003e2ee
   d5178:	000d9151 	.word	0x000d9151
   d517c:	2003e238 	.word	0x2003e238
   d5180:	000d8f80 	.word	0x000d8f80
   d5184:	2003e300 	.word	0x2003e300
   d5188:	000d915e 	.word	0x000d915e
   d518c:	000d9167 	.word	0x000d9167
   d5190:	000d9175 	.word	0x000d9175
   d5194:	2003e324 	.word	0x2003e324
   d5198:	000d9183 	.word	0x000d9183
   d519c:	000d40b9 	.word	0x000d40b9
   d51a0:	000d918c 	.word	0x000d918c
   d51a4:	000d488d 	.word	0x000d488d
   d51a8:	000d4685 	.word	0x000d4685
   d51ac:	000d9198 	.word	0x000d9198
   d51b0:	000d4739 	.word	0x000d4739
   d51b4:	000d91a3 	.word	0x000d91a3
   d51b8:	000d47e5 	.word	0x000d47e5
   d51bc:	000d91b0 	.word	0x000d91b0
   d51c0:	000d4949 	.word	0x000d4949
   d51c4:	000d91bc 	.word	0x000d91bc
   d51c8:	2003e27c 	.word	0x2003e27c
   d51cc:	000d91c8 	.word	0x000d91c8
   d51d0:	2003e2fc 	.word	0x2003e2fc
   d51d4:	00000000 	.word	0x00000000
   d51d8:	2003e2ef 	.word	0x2003e2ef
   d51dc:	2003e310 	.word	0x2003e310
   d51e0:	000d91dd 	.word	0x000d91dd
   d51e4:	2003e288 	.word	0x2003e288
   d51e8:	2003e248 	.word	0x2003e248
   d51ec:	000d91f4 	.word	0x000d91f4
   d51f0:	2003e250 	.word	0x2003e250
   d51f4:	000d9206 	.word	0x000d9206
   d51f8:	2003e2d8 	.word	0x2003e2d8
   d51fc:	2003e321 	.word	0x2003e321

000d5200 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5200:	4b21      	ldr	r3, [pc, #132]	; (d5288 <_GLOBAL__sub_I___appProductID+0x88>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5202:	b570      	push	{r4, r5, r6, lr}
   d5204:	2400      	movs	r4, #0
   d5206:	601c      	str	r4, [r3, #0]
   d5208:	4b20      	ldr	r3, [pc, #128]	; (d528c <_GLOBAL__sub_I___appProductID+0x8c>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
   d520a:	4e21      	ldr	r6, [pc, #132]	; (d5290 <_GLOBAL__sub_I___appProductID+0x90>)
   d520c:	2501      	movs	r5, #1
   d520e:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5210:	f000 f9c0 	bl	d5594 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5214:	f002 f96e 	bl	d74f4 <spark_protocol_instance>
   d5218:	4623      	mov	r3, r4
   d521a:	4622      	mov	r2, r4
   d521c:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5220:	f002 f970 	bl	d7504 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5224:	f002 f966 	bl	d74f4 <spark_protocol_instance>
   d5228:	4623      	mov	r3, r4
   d522a:	4622      	mov	r2, r4
   d522c:	210b      	movs	r1, #11
   d522e:	f002 f971 	bl	d7514 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5232:	4b18      	ldr	r3, [pc, #96]	; (d5294 <_GLOBAL__sub_I___appProductID+0x94>)
   d5234:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5238:	701c      	strb	r4, [r3, #0]
   d523a:	805c      	strh	r4, [r3, #2]
   d523c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d523e:	2002      	movs	r0, #2
   d5240:	f000 fae8 	bl	d5814 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
   d5244:	4621      	mov	r1, r4
   d5246:	4628      	mov	r0, r5
   d5248:	f000 fafc 	bl	d5844 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d524c:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
   d524e:	4d12      	ldr	r5, [pc, #72]	; (d5298 <_GLOBAL__sub_I___appProductID+0x98>)
   d5250:	2004      	movs	r0, #4
   d5252:	f000 f93f 	bl	d54d4 <HAL_Feature_Set>
   d5256:	4621      	mov	r1, r4
   d5258:	4628      	mov	r0, r5
   d525a:	f001 f8bd 	bl	d63d8 <_ZN9FuelGaugeC1Eb>
   d525e:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
   d5260:	4d0e      	ldr	r5, [pc, #56]	; (d529c <_GLOBAL__sub_I___appProductID+0x9c>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
   d5262:	490f      	ldr	r1, [pc, #60]	; (d52a0 <_GLOBAL__sub_I___appProductID+0xa0>)
   d5264:	4632      	mov	r2, r6
   d5266:	f002 fa4b 	bl	d7700 <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
   d526a:	4621      	mov	r1, r4
   d526c:	4628      	mov	r0, r5
   d526e:	f001 fb7a 	bl	d6966 <_ZN4PMICC1Eb>
   d5272:	4632      	mov	r2, r6
   d5274:	4628      	mov	r0, r5
   d5276:	490b      	ldr	r1, [pc, #44]	; (d52a4 <_GLOBAL__sub_I___appProductID+0xa4>)
   d5278:	f002 fa42 	bl	d7700 <__aeabi_atexit>
Adafruit_SHT31 sht31 = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d527c:	480a      	ldr	r0, [pc, #40]	; (d52a8 <_GLOBAL__sub_I___appProductID+0xa8>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d527e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
Adafruit_SHT31 sht31 = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5282:	f000 b817 	b.w	d52b4 <_ZN14Adafruit_SHT31C1Ev>
   d5286:	bf00      	nop
   d5288:	2003e2e0 	.word	0x2003e2e0
   d528c:	2003e250 	.word	0x2003e250
   d5290:	2003e234 	.word	0x2003e234
   d5294:	2003e2e8 	.word	0x2003e2e8
   d5298:	2003e26c 	.word	0x2003e26c
   d529c:	2003e276 	.word	0x2003e276
   d52a0:	000d63f7 	.word	0x000d63f7
   d52a4:	000d6985 	.word	0x000d6985
   d52a8:	2003e27c 	.word	0x2003e27c

000d52ac <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d52ac:	6803      	ldr	r3, [r0, #0]
   d52ae:	b2c9      	uxtb	r1, r1
   d52b0:	689b      	ldr	r3, [r3, #8]
   d52b2:	4718      	bx	r3

000d52b4 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d52b4:	4770      	bx	lr

000d52b6 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d52b6:	b538      	push	{r3, r4, r5, lr}
   d52b8:	4605      	mov	r5, r0
   d52ba:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d52bc:	f002 f9be 	bl	d763c <_Z19__fetch_global_Wirev>
   d52c0:	7829      	ldrb	r1, [r5, #0]
   d52c2:	f001 f944 	bl	d654e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d52c6:	f002 f9b9 	bl	d763c <_Z19__fetch_global_Wirev>
   d52ca:	0a21      	lsrs	r1, r4, #8
   d52cc:	f7ff ffee 	bl	d52ac <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d52d0:	f002 f9b4 	bl	d763c <_Z19__fetch_global_Wirev>
   d52d4:	b2e1      	uxtb	r1, r4
   d52d6:	f7ff ffe9 	bl	d52ac <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d52da:	f002 f9af 	bl	d763c <_Z19__fetch_global_Wirev>
}
   d52de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d52e2:	f001 b93f 	b.w	d6564 <_ZN7TwoWire15endTransmissionEv>

000d52e6 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d52e6:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d52e8:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d52ec:	f7ff ffe3 	bl	d52b6 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d52f0:	200a      	movs	r0, #10
}
   d52f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d52f6:	f000 bbdf 	b.w	d5ab8 <delay>

000d52fa <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d52fa:	b538      	push	{r3, r4, r5, lr}
   d52fc:	4604      	mov	r4, r0
   d52fe:	460d      	mov	r5, r1
  Wire.begin();
   d5300:	f002 f99c 	bl	d763c <_Z19__fetch_global_Wirev>
   d5304:	f001 f90c 	bl	d6520 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d5308:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d530a:	7025      	strb	r5, [r4, #0]
  reset();
   d530c:	f7ff ffeb 	bl	d52e6 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d5310:	2001      	movs	r0, #1
   d5312:	bd38      	pop	{r3, r4, r5, pc}

000d5314 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d5314:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d5316:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d5318:	4291      	cmp	r1, r2
   d531a:	d00e      	beq.n	d533a <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d531c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5320:	4058      	eors	r0, r3
   d5322:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5324:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5328:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d532c:	bf18      	it	ne
   d532e:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5332:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5334:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5336:	d1f5      	bne.n	d5324 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5338:	e7ee      	b.n	d5318 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d533a:	4770      	bx	lr
   d533c:	0000      	movs	r0, r0
	...

000d5340 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5340:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5342:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5346:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5348:	f7ff ffb5 	bl	d52b6 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d534c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5350:	f000 fbb2 	bl	d5ab8 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d5354:	f002 f972 	bl	d763c <_Z19__fetch_global_Wirev>
   d5358:	2206      	movs	r2, #6
   d535a:	7821      	ldrb	r1, [r4, #0]
   d535c:	f001 f8ef 	bl	d653e <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
   d5360:	f002 f96c 	bl	d763c <_Z19__fetch_global_Wirev>
   d5364:	6803      	ldr	r3, [r0, #0]
   d5366:	691b      	ldr	r3, [r3, #16]
   d5368:	4798      	blx	r3
   d536a:	2806      	cmp	r0, #6
   d536c:	d14a      	bne.n	d5404 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d536e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d5370:	f002 f964 	bl	d763c <_Z19__fetch_global_Wirev>
   d5374:	6803      	ldr	r3, [r0, #0]
   d5376:	695b      	ldr	r3, [r3, #20]
   d5378:	4798      	blx	r3
   d537a:	f80d 0005 	strb.w	r0, [sp, r5]
   d537e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d5380:	2d06      	cmp	r5, #6
   d5382:	d1f5      	bne.n	d5370 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5384:	2202      	movs	r2, #2
   d5386:	4669      	mov	r1, sp
   d5388:	4620      	mov	r0, r4
   d538a:	f7ff ffc3 	bl	d5314 <_ZN14Adafruit_SHT314crc8EPKhi>
   d538e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d5392:	4285      	cmp	r5, r0
   d5394:	d136      	bne.n	d5404 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5396:	2202      	movs	r2, #2
   d5398:	f10d 0103 	add.w	r1, sp, #3
   d539c:	4620      	mov	r0, r4
   d539e:	f7ff ffb9 	bl	d5314 <_ZN14Adafruit_SHT314crc8EPKhi>
   d53a2:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d53a6:	4285      	cmp	r5, r0
   d53a8:	d12c      	bne.n	d5404 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d53aa:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d53ae:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d53b2:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d53b6:	ba40      	rev16	r0, r0
   d53b8:	b280      	uxth	r0, r0
   d53ba:	f002 fc35 	bl	d7c28 <__aeabi_ui2d>
  stemp *= 175;
   d53be:	a318      	add	r3, pc, #96	; (adr r3, d5420 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d53c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53c4:	f002 fca6 	bl	d7d14 <__aeabi_dmul>
  stemp /= 0xffff;
   d53c8:	a311      	add	r3, pc, #68	; (adr r3, d5410 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d53ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53ce:	f002 fdcb 	bl	d7f68 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d53d2:	2200      	movs	r2, #0
   d53d4:	4b10      	ldr	r3, [pc, #64]	; (d5418 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d53d6:	f002 fae9 	bl	d79ac <__aeabi_dsub>
   d53da:	f002 fead 	bl	d8138 <__aeabi_d2f>
   d53de:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d53e0:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d53e4:	f002 fc20 	bl	d7c28 <__aeabi_ui2d>
  shum *= 100;
   d53e8:	2200      	movs	r2, #0
   d53ea:	4b0c      	ldr	r3, [pc, #48]	; (d541c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d53ec:	f002 fc92 	bl	d7d14 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d53f0:	a307      	add	r3, pc, #28	; (adr r3, d5410 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d53f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53f6:	f002 fdb7 	bl	d7f68 <__aeabi_ddiv>
   d53fa:	f002 fe9d 	bl	d8138 <__aeabi_d2f>
   d53fe:	6060      	str	r0, [r4, #4]
  
  return true;
   d5400:	2001      	movs	r0, #1
   d5402:	e000      	b.n	d5406 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d5404:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d5406:	b002      	add	sp, #8
   d5408:	bd70      	pop	{r4, r5, r6, pc}
   d540a:	bf00      	nop
   d540c:	f3af 8000 	nop.w
   d5410:	00000000 	.word	0x00000000
   d5414:	40efffe0 	.word	0x40efffe0
   d5418:	40468000 	.word	0x40468000
   d541c:	40590000 	.word	0x40590000
   d5420:	00000000 	.word	0x00000000
   d5424:	4065e000 	.word	0x4065e000

000d5428 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d5428:	b510      	push	{r4, lr}
   d542a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d542c:	f7ff ff88 	bl	d5340 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5430:	b110      	cbz	r0, d5438 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d5432:	ed94 0a02 	vldr	s0, [r4, #8]
   d5436:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d5438:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5440 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d543c:	bd10      	pop	{r4, pc}
   d543e:	bf00      	nop
   d5440:	7fc00000 	.word	0x7fc00000

000d5444 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5448:	f7ff ff7a 	bl	d5340 <_ZN14Adafruit_SHT3111readTempHumEv>
   d544c:	b110      	cbz	r0, d5454 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d544e:	ed94 0a01 	vldr	s0, [r4, #4]
   d5452:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d5454:	ed9f 0a01 	vldr	s0, [pc, #4]	; d545c <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d5458:	bd10      	pop	{r4, pc}
   d545a:	bf00      	nop
   d545c:	7fc00000 	.word	0x7fc00000

000d5460 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d5460:	f000 b898 	b.w	d5594 <HAL_Pin_Map>

000d5464 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <cellular_signal+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030274 	.word	0x00030274

000d5474 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <cellular_command+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030274 	.word	0x00030274

000d5484 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <os_thread_is_current+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	689b      	ldr	r3, [r3, #8]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030248 	.word	0x00030248

000d5494 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <os_thread_join+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	691b      	ldr	r3, [r3, #16]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030248 	.word	0x00030248

000d54a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <os_thread_cleanup+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	695b      	ldr	r3, [r3, #20]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030248 	.word	0x00030248

000d54b4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <os_mutex_create+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030248 	.word	0x00030248

000d54c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <os_mutex_recursive_create+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030248 	.word	0x00030248

000d54d4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <HAL_Feature_Set+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030234 	.word	0x00030234

000d54e4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <HAL_Core_System_Reset_Ex+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030234 	.word	0x00030234

000d54f4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030234 	.word	0x00030234

000d5504 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <HAL_RNG_GetRandomNumber+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	685b      	ldr	r3, [r3, #4]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030218 	.word	0x00030218

000d5514 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	695b      	ldr	r3, [r3, #20]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030218 	.word	0x00030218

000d5524 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <HAL_RTC_Get_UnixTime+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	69db      	ldr	r3, [r3, #28]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030218 	.word	0x00030218

000d5534 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <HAL_EEPROM_Init+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030218 	.word	0x00030218

000d5544 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <HAL_EEPROM_Read+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030218 	.word	0x00030218

000d5554 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <HAL_EEPROM_Write+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030218 	.word	0x00030218

000d5564 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <HAL_EEPROM_Put+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030218 	.word	0x00030218

000d5574 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <HAL_RTC_Time_Is_Valid+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030218 	.word	0x00030218

000d5584 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <hal_timer_millis+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030218 	.word	0x00030218

000d5594 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_Pin_Map+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	681b      	ldr	r3, [r3, #0]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	0003022c 	.word	0x0003022c

000d55a4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_Validate_Pin_Function+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	685b      	ldr	r3, [r3, #4]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	0003022c 	.word	0x0003022c

000d55b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <HAL_Pin_Mode+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	689b      	ldr	r3, [r3, #8]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	0003022c 	.word	0x0003022c

000d55c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <HAL_Get_Pin_Mode+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	68db      	ldr	r3, [r3, #12]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	0003022c 	.word	0x0003022c

000d55d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <HAL_GPIO_Write+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	691b      	ldr	r3, [r3, #16]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	0003022c 	.word	0x0003022c

000d55e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <HAL_GPIO_Read+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	695b      	ldr	r3, [r3, #20]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	0003022c 	.word	0x0003022c

000d55f4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <HAL_ADC_Read+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	0003022c 	.word	0x0003022c

000d5604 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <HAL_I2C_Begin+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	68db      	ldr	r3, [r3, #12]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030228 	.word	0x00030228

000d5614 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <HAL_I2C_Request_Data+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	695b      	ldr	r3, [r3, #20]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030228 	.word	0x00030228

000d5624 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <HAL_I2C_Begin_Transmission+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	699b      	ldr	r3, [r3, #24]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030228 	.word	0x00030228

000d5634 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <HAL_I2C_End_Transmission+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	69db      	ldr	r3, [r3, #28]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030228 	.word	0x00030228

000d5644 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <HAL_I2C_Write_Data+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	6a1b      	ldr	r3, [r3, #32]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030228 	.word	0x00030228

000d5654 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_I2C_Available_Data+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030228 	.word	0x00030228

000d5664 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_I2C_Read_Data+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030228 	.word	0x00030228

000d5674 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <HAL_I2C_Peek_Data+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030228 	.word	0x00030228

000d5684 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <HAL_I2C_Flush_Data+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030228 	.word	0x00030228

000d5694 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <HAL_I2C_Is_Enabled+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030228 	.word	0x00030228

000d56a4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <HAL_I2C_Init+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030228 	.word	0x00030228

000d56b4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <HAL_I2C_Acquire+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030228 	.word	0x00030228

000d56c4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_I2C_Release+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030228 	.word	0x00030228

000d56d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <inet_inet_ntop+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	695b      	ldr	r3, [r3, #20]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030264 	.word	0x00030264

000d56e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <netdb_freeaddrinfo+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	689b      	ldr	r3, [r3, #8]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030268 	.word	0x00030268

000d56f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <netdb_getaddrinfo+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	68db      	ldr	r3, [r3, #12]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030268 	.word	0x00030268

000d5704 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_SPI_Init+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	69db      	ldr	r3, [r3, #28]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030230 	.word	0x00030230

000d5714 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_SPI_Is_Enabled+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6a1b      	ldr	r3, [r3, #32]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030230 	.word	0x00030230

000d5724 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_USART_Init+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	681b      	ldr	r3, [r3, #0]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003023c 	.word	0x0003023c

000d5734 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_USART_Write_Data+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	68db      	ldr	r3, [r3, #12]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003023c 	.word	0x0003023c

000d5744 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_USART_Available_Data+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	691b      	ldr	r3, [r3, #16]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003023c 	.word	0x0003023c

000d5754 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_USART_Read_Data+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	695b      	ldr	r3, [r3, #20]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003023c 	.word	0x0003023c

000d5764 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_USART_Peek_Data+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	699b      	ldr	r3, [r3, #24]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003023c 	.word	0x0003023c

000d5774 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_USART_Flush_Data+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	69db      	ldr	r3, [r3, #28]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003023c 	.word	0x0003023c

000d5784 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <HAL_USART_Is_Enabled+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	6a1b      	ldr	r3, [r3, #32]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	0003023c 	.word	0x0003023c

000d5794 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <HAL_USART_Available_Data_For_Write+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	0003023c 	.word	0x0003023c

000d57a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <HAL_USB_USART_Init+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	681b      	ldr	r3, [r3, #0]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	0003024c 	.word	0x0003024c

000d57b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <HAL_USB_USART_Available_Data+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	691b      	ldr	r3, [r3, #16]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	0003024c 	.word	0x0003024c

000d57c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	695b      	ldr	r3, [r3, #20]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	0003024c 	.word	0x0003024c

000d57d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <HAL_USB_USART_Receive_Data+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	699b      	ldr	r3, [r3, #24]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	0003024c 	.word	0x0003024c

000d57e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <HAL_USB_USART_Send_Data+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	69db      	ldr	r3, [r3, #28]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	0003024c 	.word	0x0003024c

000d57f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <HAL_USB_USART_Flush_Data+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6a1b      	ldr	r3, [r3, #32]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	0003024c 	.word	0x0003024c

000d5804 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <system_mode+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	681b      	ldr	r3, [r3, #0]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030220 	.word	0x00030220

000d5814 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <set_system_mode+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	685b      	ldr	r3, [r3, #4]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030220 	.word	0x00030220

000d5824 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <system_delay_ms+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	695b      	ldr	r3, [r3, #20]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030220 	.word	0x00030220

000d5834 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <system_sleep+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	699b      	ldr	r3, [r3, #24]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030220 	.word	0x00030220

000d5844 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <system_thread_set_state+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030220 	.word	0x00030220

000d5854 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <application_thread_current+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030220 	.word	0x00030220

000d5864 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <application_thread_invoke+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	00030220 	.word	0x00030220

000d5874 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <system_thread_get_state+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	00030220 	.word	0x00030220

000d5884 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b03      	ldr	r3, [pc, #12]	; (d5894 <system_ctrl_set_app_request_handler+0x10>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d588e:	9301      	str	r3, [sp, #4]
   d5890:	bd08      	pop	{r3, pc}
   d5892:	0000      	.short	0x0000
   d5894:	00030220 	.word	0x00030220

000d5898 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b03      	ldr	r3, [pc, #12]	; (d58a8 <system_ctrl_set_result+0x10>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d58a2:	9301      	str	r3, [sp, #4]
   d58a4:	bd08      	pop	{r3, pc}
   d58a6:	0000      	.short	0x0000
   d58a8:	00030220 	.word	0x00030220

000d58ac <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b03      	ldr	r3, [pc, #12]	; (d58bc <system_sleep_pins+0x10>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d58b6:	9301      	str	r3, [sp, #4]
   d58b8:	bd08      	pop	{r3, pc}
   d58ba:	0000      	.short	0x0000
   d58bc:	00030220 	.word	0x00030220

000d58c0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <spark_variable+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	681b      	ldr	r3, [r3, #0]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030244 	.word	0x00030244

000d58d0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <spark_function+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	685b      	ldr	r3, [r3, #4]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030244 	.word	0x00030244

000d58e0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <spark_process+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	689b      	ldr	r3, [r3, #8]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030244 	.word	0x00030244

000d58f0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <spark_cloud_flag_connect+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	68db      	ldr	r3, [r3, #12]
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030244 	.word	0x00030244

000d5900 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <spark_cloud_flag_disconnect+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	691b      	ldr	r3, [r3, #16]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	00030244 	.word	0x00030244

000d5910 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <spark_cloud_flag_connected+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	695b      	ldr	r3, [r3, #20]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030244 	.word	0x00030244

000d5920 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <spark_deviceID+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	69db      	ldr	r3, [r3, #28]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	00030244 	.word	0x00030244

000d5930 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <spark_send_event+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	6a1b      	ldr	r3, [r3, #32]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	00030244 	.word	0x00030244

000d5940 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <spark_subscribe+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	00030244 	.word	0x00030244

000d5950 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <spark_sync_time+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030244 	.word	0x00030244

000d5960 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <spark_sync_time_pending+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030244 	.word	0x00030244

000d5970 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030244 	.word	0x00030244

000d5980 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <network_connect+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	685b      	ldr	r3, [r3, #4]
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030240 	.word	0x00030240

000d5990 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <network_connecting+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	689b      	ldr	r3, [r3, #8]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030240 	.word	0x00030240

000d59a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <network_disconnect+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	68db      	ldr	r3, [r3, #12]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030240 	.word	0x00030240

000d59b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <network_ready+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	691b      	ldr	r3, [r3, #16]
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030240 	.word	0x00030240

000d59c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <network_on+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	695b      	ldr	r3, [r3, #20]
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030240 	.word	0x00030240

000d59d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <network_off+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	699b      	ldr	r3, [r3, #24]
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030240 	.word	0x00030240

000d59e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <network_listen+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	69db      	ldr	r3, [r3, #28]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030240 	.word	0x00030240

000d59f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <network_listening+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	6a1b      	ldr	r3, [r3, #32]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030240 	.word	0x00030240

000d5a00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <network_set_listen_timeout+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030240 	.word	0x00030240

000d5a10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <network_get_listen_timeout+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030240 	.word	0x00030240

000d5a20 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <malloc+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	681b      	ldr	r3, [r3, #0]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	0003021c 	.word	0x0003021c

000d5a30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <free+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	685b      	ldr	r3, [r3, #4]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	0003021c 	.word	0x0003021c

000d5a40 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <realloc+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	689b      	ldr	r3, [r3, #8]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	0003021c 	.word	0x0003021c

000d5a50 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <siprintf+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	691b      	ldr	r3, [r3, #16]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	0003021c 	.word	0x0003021c

000d5a60 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <siscanf+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	699b      	ldr	r3, [r3, #24]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	0003021c 	.word	0x0003021c

000d5a70 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <snprintf+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	69db      	ldr	r3, [r3, #28]
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	0003021c 	.word	0x0003021c

000d5a80 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <abort+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	0003021c 	.word	0x0003021c

000d5a90 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <_malloc_r+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	0003021c 	.word	0x0003021c

000d5aa0 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d5aa0:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d5aa2:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d5aa4:	d007      	beq.n	d5ab6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d5aa6:	9d03      	ldr	r5, [sp, #12]
   d5aa8:	1a44      	subs	r4, r0, r1
   d5aaa:	1aed      	subs	r5, r5, r3
   d5aac:	436c      	muls	r4, r5
   d5aae:	1a52      	subs	r2, r2, r1
   d5ab0:	fb94 f4f2 	sdiv	r4, r4, r2
   d5ab4:	18e0      	adds	r0, r4, r3
}
   d5ab6:	bd30      	pop	{r4, r5, pc}

000d5ab8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5ab8:	2100      	movs	r1, #0
   d5aba:	f7ff beb3 	b.w	d5824 <system_delay_ms>

000d5abe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5abe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ac0:	6883      	ldr	r3, [r0, #8]
   d5ac2:	4604      	mov	r4, r0
   d5ac4:	b90b      	cbnz	r3, d5aca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5ac6:	f001 fe22 	bl	d770e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5aca:	68c3      	ldr	r3, [r0, #12]
   d5acc:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5ace:	68a3      	ldr	r3, [r4, #8]
   d5ad0:	b11b      	cbz	r3, d5ada <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ad2:	2203      	movs	r2, #3
   d5ad4:	4621      	mov	r1, r4
   d5ad6:	4620      	mov	r0, r4
   d5ad8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5ada:	4620      	mov	r0, r4
   d5adc:	2110      	movs	r1, #16
}
   d5ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5ae2:	f001 be12 	b.w	d770a <_ZdlPvj>

000d5ae6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5ae6:	680b      	ldr	r3, [r1, #0]
   d5ae8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5aea:	b113      	cbz	r3, d5af2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5aec:	685a      	ldr	r2, [r3, #4]
   d5aee:	3201      	adds	r2, #1
   d5af0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5af2:	4770      	bx	lr

000d5af4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5af4:	4802      	ldr	r0, [pc, #8]	; (d5b00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5af6:	2300      	movs	r3, #0
   d5af8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5afa:	f7ff bce3 	b.w	d54c4 <os_mutex_recursive_create>
   d5afe:	bf00      	nop
   d5b00:	2003e328 	.word	0x2003e328

000d5b04 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5b04:	2200      	movs	r2, #0
   d5b06:	4611      	mov	r1, r2
   d5b08:	6840      	ldr	r0, [r0, #4]
   d5b0a:	f7ff bf51 	b.w	d59b0 <network_ready>

000d5b0e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b0e:	2200      	movs	r2, #0
   d5b10:	4611      	mov	r1, r2
   d5b12:	6840      	ldr	r0, [r0, #4]
   d5b14:	f7ff bf6c 	b.w	d59f0 <network_listening>

000d5b18 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b18:	2200      	movs	r2, #0
   d5b1a:	4611      	mov	r1, r2
   d5b1c:	6840      	ldr	r0, [r0, #4]
   d5b1e:	f7ff bf77 	b.w	d5a10 <network_get_listen_timeout>

000d5b22 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b22:	2200      	movs	r2, #0
   d5b24:	6840      	ldr	r0, [r0, #4]
   d5b26:	f7ff bf6b 	b.w	d5a00 <network_set_listen_timeout>

000d5b2a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b2a:	2200      	movs	r2, #0
   d5b2c:	f081 0101 	eor.w	r1, r1, #1
   d5b30:	6840      	ldr	r0, [r0, #4]
   d5b32:	f7ff bf55 	b.w	d59e0 <network_listen>

000d5b36 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5b36:	2300      	movs	r3, #0
   d5b38:	461a      	mov	r2, r3
   d5b3a:	4619      	mov	r1, r3
   d5b3c:	6840      	ldr	r0, [r0, #4]
   d5b3e:	f7ff bf47 	b.w	d59d0 <network_off>

000d5b42 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5b42:	2300      	movs	r3, #0
   d5b44:	461a      	mov	r2, r3
   d5b46:	4619      	mov	r1, r3
   d5b48:	6840      	ldr	r0, [r0, #4]
   d5b4a:	f7ff bf39 	b.w	d59c0 <network_on>

000d5b4e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b4e:	2200      	movs	r2, #0
   d5b50:	4611      	mov	r1, r2
   d5b52:	6840      	ldr	r0, [r0, #4]
   d5b54:	f7ff bf1c 	b.w	d5990 <network_connecting>

000d5b58 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b58:	2200      	movs	r2, #0
   d5b5a:	2102      	movs	r1, #2
   d5b5c:	6840      	ldr	r0, [r0, #4]
   d5b5e:	f7ff bf1f 	b.w	d59a0 <network_disconnect>

000d5b62 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b62:	2300      	movs	r3, #0
   d5b64:	461a      	mov	r2, r3
   d5b66:	6840      	ldr	r0, [r0, #4]
   d5b68:	f7ff bf0a 	b.w	d5980 <network_connect>

000d5b6c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5b6e:	4b1b      	ldr	r3, [pc, #108]	; (d5bdc <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5b70:	6003      	str	r3, [r0, #0]
   d5b72:	2500      	movs	r5, #0
   d5b74:	460f      	mov	r7, r1
   d5b76:	3328      	adds	r3, #40	; 0x28
   d5b78:	2618      	movs	r6, #24
   d5b7a:	b089      	sub	sp, #36	; 0x24
   d5b7c:	6043      	str	r3, [r0, #4]
   d5b7e:	6085      	str	r5, [r0, #8]
   d5b80:	60c5      	str	r5, [r0, #12]
   d5b82:	4632      	mov	r2, r6
   d5b84:	4629      	mov	r1, r5
   d5b86:	4604      	mov	r4, r0
   d5b88:	3010      	adds	r0, #16
   d5b8a:	f002 fc76 	bl	d847a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5b8e:	462a      	mov	r2, r5
   d5b90:	4629      	mov	r1, r5
   d5b92:	6878      	ldr	r0, [r7, #4]
   d5b94:	f7ff ff0c 	bl	d59b0 <network_ready>
   d5b98:	b908      	cbnz	r0, d5b9e <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5b9a:	60a0      	str	r0, [r4, #8]
            return sig;
   d5b9c:	e01b      	b.n	d5bd6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5b9e:	4629      	mov	r1, r5
   d5ba0:	4632      	mov	r2, r6
   d5ba2:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5ba4:	9500      	str	r5, [sp, #0]
   d5ba6:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5ba8:	f002 fc67 	bl	d847a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5bac:	a902      	add	r1, sp, #8
   d5bae:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5bb0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5bb4:	f7ff fc56 	bl	d5464 <cellular_signal>
   d5bb8:	b110      	cbz	r0, d5bc0 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5bba:	2301      	movs	r3, #1
   d5bbc:	60a3      	str	r3, [r4, #8]
            return sig;
   d5bbe:	e00a      	b.n	d5bd6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d5bc0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5bc2:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5bc4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5bc6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5bc8:	b90b      	cbnz	r3, d5bce <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5bca:	2302      	movs	r3, #2
   d5bcc:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d5bce:	a902      	add	r1, sp, #8
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	f000 f8a1 	bl	d5d18 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	b009      	add	sp, #36	; 0x24
   d5bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5bdc:	000d9280 	.word	0x000d9280

000d5be0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5be0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5be2:	4c08      	ldr	r4, [pc, #32]	; (d5c04 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5be4:	2528      	movs	r5, #40	; 0x28
   d5be6:	462a      	mov	r2, r5
   d5be8:	2100      	movs	r1, #0
   d5bea:	4620      	mov	r0, r4
   d5bec:	f002 fc45 	bl	d847a <memset>
        cid = -1;
   d5bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5bf4:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5bf6:	4b04      	ldr	r3, [pc, #16]	; (d5c08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5bf8:	8025      	strh	r5, [r4, #0]
   d5bfa:	2204      	movs	r2, #4
   d5bfc:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5bfe:	4a03      	ldr	r2, [pc, #12]	; (d5c0c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5c00:	601a      	str	r2, [r3, #0]
   d5c02:	bd38      	pop	{r3, r4, r5, pc}
   d5c04:	2003e334 	.word	0x2003e334
   d5c08:	2003e32c 	.word	0x2003e32c
   d5c0c:	000d924c 	.word	0x000d924c

000d5c10 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5c10:	4770      	bx	lr

000d5c12 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5c12:	7d00      	ldrb	r0, [r0, #20]
   d5c14:	4770      	bx	lr
	...

000d5c18 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5c18:	7d03      	ldrb	r3, [r0, #20]
   d5c1a:	b11b      	cbz	r3, d5c24 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5c1c:	6983      	ldr	r3, [r0, #24]
   d5c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5c22:	d102      	bne.n	d5c2a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d5c24:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5c3c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5c28:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d5c2a:	ee07 3a90 	vmov	s15, r3
   d5c2e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5c40 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d5c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5c36:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5c3a:	4770      	bx	lr
   d5c3c:	00000000 	.word	0x00000000
   d5c40:	42c80000 	.word	0x42c80000

000d5c44 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5c44:	7d03      	ldrb	r3, [r0, #20]
   d5c46:	b11b      	cbz	r3, d5c50 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5c48:	6a03      	ldr	r3, [r0, #32]
   d5c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5c4e:	d102      	bne.n	d5c56 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5c50:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5c68 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5c54:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d5c56:	ee07 3a90 	vmov	s15, r3
   d5c5a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5c6c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5c62:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5c66:	4770      	bx	lr
   d5c68:	00000000 	.word	0x00000000
   d5c6c:	42c80000 	.word	0x42c80000

000d5c70 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5c70:	b570      	push	{r4, r5, r6, lr}
   d5c72:	460d      	mov	r5, r1
   d5c74:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5c76:	220a      	movs	r2, #10
   d5c78:	6881      	ldr	r1, [r0, #8]
   d5c7a:	4628      	mov	r0, r5
   d5c7c:	f001 f8c7 	bl	d6e0e <_ZN5Print5printEii>
    n += p.print(',');
   d5c80:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5c82:	4604      	mov	r4, r0
    n += p.print(',');
   d5c84:	4628      	mov	r0, r5
   d5c86:	f001 f858 	bl	d6d3a <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d5c8a:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5c8c:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5c8e:	68f1      	ldr	r1, [r6, #12]
   d5c90:	4628      	mov	r0, r5
   d5c92:	f001 f8bc 	bl	d6e0e <_ZN5Print5printEii>
    return n;
}
   d5c96:	4420      	add	r0, r4
   d5c98:	bd70      	pop	{r4, r5, r6, pc}

000d5c9a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d5c9a:	f1a0 0004 	sub.w	r0, r0, #4
   d5c9e:	f7ff bfe7 	b.w	d5c70 <_ZNK14CellularSignal7printToER5Print>

000d5ca2 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5ca2:	b510      	push	{r4, lr}
   d5ca4:	2128      	movs	r1, #40	; 0x28
   d5ca6:	4604      	mov	r4, r0
   d5ca8:	f001 fd2f 	bl	d770a <_ZdlPvj>
   d5cac:	4620      	mov	r0, r4
   d5cae:	bd10      	pop	{r4, pc}

000d5cb0 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5cb0:	7d03      	ldrb	r3, [r0, #20]
   d5cb2:	b17b      	cbz	r3, d5cd4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5cb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5cb6:	2b00      	cmp	r3, #0
   d5cb8:	db0c      	blt.n	d5cd4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d5cba:	ee07 3a90 	vmov	s15, r3
   d5cbe:	eddf 6a07 	vldr	s13, [pc, #28]	; d5cdc <_ZNK14CellularSignal10getQualityEv+0x2c>
   d5cc2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5ce0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d5cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5cce:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5cd2:	4770      	bx	lr
    }

    return -1.0f;
   d5cd4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5cd8:	4770      	bx	lr
   d5cda:	bf00      	nop
   d5cdc:	477fff00 	.word	0x477fff00
   d5ce0:	42c80000 	.word	0x42c80000

000d5ce4 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5ce4:	7d03      	ldrb	r3, [r0, #20]
   d5ce6:	b17b      	cbz	r3, d5d08 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5ce8:	69c3      	ldr	r3, [r0, #28]
   d5cea:	2b00      	cmp	r3, #0
   d5cec:	db0c      	blt.n	d5d08 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5cee:	ee07 3a90 	vmov	s15, r3
   d5cf2:	eddf 6a07 	vldr	s13, [pc, #28]	; d5d10 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d5cf6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5d14 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5cfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5d02:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5d06:	4770      	bx	lr
    }

    return -1.0f;
   d5d08:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5d0c:	4770      	bx	lr
   d5d0e:	bf00      	nop
   d5d10:	477fff00 	.word	0x477fff00
   d5d14:	42c80000 	.word	0x42c80000

000d5d18 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d5d18:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d5d1a:	460d      	mov	r5, r1
   d5d1c:	f100 0410 	add.w	r4, r0, #16
   d5d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d24:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5d28:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5d2c:	2001      	movs	r0, #1
   d5d2e:	bd30      	pop	{r4, r5, pc}

000d5d30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d30:	4770      	bx	lr

000d5d32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5d32:	2000      	movs	r0, #0
   d5d34:	4770      	bx	lr

000d5d36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d36:	b510      	push	{r4, lr}
   d5d38:	2110      	movs	r1, #16
   d5d3a:	4604      	mov	r4, r0
   d5d3c:	f001 fce5 	bl	d770a <_ZdlPvj>
   d5d40:	4620      	mov	r0, r4
   d5d42:	bd10      	pop	{r4, pc}

000d5d44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5d44:	b508      	push	{r3, lr}
      { delete this; }
   d5d46:	b108      	cbz	r0, d5d4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5d48:	f7ff fff5 	bl	d5d36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5d4c:	bd08      	pop	{r3, pc}

000d5d4e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d4e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d50:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d52:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5d54:	b113      	cbz	r3, d5d5c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d56:	2203      	movs	r2, #3
   d5d58:	4601      	mov	r1, r0
   d5d5a:	4798      	blx	r3
    }
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	bd10      	pop	{r4, pc}

000d5d60 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d60:	2200      	movs	r2, #0
   d5d62:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5d64:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d66:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5d6a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d6c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5d70:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d72:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d74:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d76:	680c      	ldr	r4, [r1, #0]
   d5d78:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d7a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5d7c:	bd10      	pop	{r4, pc}

000d5d7e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5d7e:	b510      	push	{r4, lr}
   d5d80:	4604      	mov	r4, r0
    free((void*)msg_);
   d5d82:	6800      	ldr	r0, [r0, #0]
   d5d84:	f7ff fe54 	bl	d5a30 <free>
}
   d5d88:	4620      	mov	r0, r4
   d5d8a:	bd10      	pop	{r4, pc}

000d5d8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5d8c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5d8e:	68c4      	ldr	r4, [r0, #12]
   d5d90:	b1f4      	cbz	r4, d5dd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5d92:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5d94:	2b02      	cmp	r3, #2
   d5d96:	d103      	bne.n	d5da0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5d98:	f104 000c 	add.w	r0, r4, #12
   d5d9c:	f7ff ffef 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5da0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5da2:	b135      	cbz	r5, d5db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5da4:	4628      	mov	r0, r5
   d5da6:	f7ff ffd2 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>
   d5daa:	2110      	movs	r1, #16
   d5dac:	4628      	mov	r0, r5
   d5dae:	f001 fcac 	bl	d770a <_ZdlPvj>
   d5db2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5db4:	b135      	cbz	r5, d5dc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5db6:	4628      	mov	r0, r5
   d5db8:	f7ff ffc9 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>
   d5dbc:	2110      	movs	r1, #16
   d5dbe:	4628      	mov	r0, r5
   d5dc0:	f001 fca3 	bl	d770a <_ZdlPvj>
   d5dc4:	4620      	mov	r0, r4
   d5dc6:	2114      	movs	r1, #20
   d5dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5dcc:	f001 bc9d 	b.w	d770a <_ZdlPvj>
   d5dd0:	bd38      	pop	{r3, r4, r5, pc}

000d5dd2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5dd2:	b510      	push	{r4, lr}
   d5dd4:	b088      	sub	sp, #32
   d5dd6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5dd8:	4668      	mov	r0, sp
   d5dda:	f001 f895 	bl	d6f08 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5dde:	4669      	mov	r1, sp
   d5de0:	a804      	add	r0, sp, #16
   d5de2:	f001 f8b3 	bl	d6f4c <_ZN6StringC1ERKS_>
   d5de6:	a804      	add	r0, sp, #16
   d5de8:	47a0      	blx	r4
   d5dea:	4604      	mov	r4, r0
   d5dec:	a804      	add	r0, sp, #16
   d5dee:	f001 f844 	bl	d6e7a <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5df2:	4668      	mov	r0, sp
   d5df4:	f001 f841 	bl	d6e7a <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5df8:	4620      	mov	r0, r4
   d5dfa:	b008      	add	sp, #32
   d5dfc:	bd10      	pop	{r4, pc}

000d5dfe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5e00:	2410      	movs	r4, #16
   d5e02:	b085      	sub	sp, #20
   d5e04:	4607      	mov	r7, r0
   d5e06:	460e      	mov	r6, r1
   d5e08:	4615      	mov	r5, r2
   d5e0a:	2100      	movs	r1, #0
   d5e0c:	4622      	mov	r2, r4
   d5e0e:	4668      	mov	r0, sp
   d5e10:	f002 fb33 	bl	d847a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5e14:	2200      	movs	r2, #0
   d5e16:	4669      	mov	r1, sp
   d5e18:	4610      	mov	r0, r2
         size = sizeof(*this);
   d5e1a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d5e1e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5e20:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5e22:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5e24:	f7ff fd54 	bl	d58d0 <spark_function>
}
   d5e28:	b005      	add	sp, #20
   d5e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e2c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5e2c:	b513      	push	{r0, r1, r4, lr}
   d5e2e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e30:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5e34:	2300      	movs	r3, #0
   d5e36:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5e38:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5e3a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5e3c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e3e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5e40:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5e42:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e44:	f7fe fa88 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e48:	4620      	mov	r0, r4
   d5e4a:	b002      	add	sp, #8
   d5e4c:	bd10      	pop	{r4, pc}

000d5e4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e50:	460c      	mov	r4, r1
   d5e52:	ad02      	add	r5, sp, #8
   d5e54:	f854 3b04 	ldr.w	r3, [r4], #4
   d5e58:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5e5c:	4606      	mov	r6, r0
   d5e5e:	460f      	mov	r7, r1
   d5e60:	a801      	add	r0, sp, #4
   d5e62:	4621      	mov	r1, r4
   d5e64:	f7ff fe3f 	bl	d5ae6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5e68:	4629      	mov	r1, r5
   d5e6a:	4630      	mov	r0, r6
   d5e6c:	f7ff ffde 	bl	d5e2c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e70:	a801      	add	r0, sp, #4
   d5e72:	f7fe fa71 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e76:	4620      	mov	r0, r4
   d5e78:	f7fe fa6e 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5e7c:	4638      	mov	r0, r7
   d5e7e:	2108      	movs	r1, #8
   d5e80:	f001 fc43 	bl	d770a <_ZdlPvj>
        return p;
    }
   d5e84:	4630      	mov	r0, r6
   d5e86:	b003      	add	sp, #12
   d5e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e8a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5e8a:	b513      	push	{r0, r1, r4, lr}
   d5e8c:	460b      	mov	r3, r1
   d5e8e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e90:	c803      	ldmia	r0, {r0, r1}
   d5e92:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e96:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e9a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e9e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5ea2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5ea6:	b002      	add	sp, #8
   d5ea8:	bd10      	pop	{r4, pc}
	...

000d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5eac:	b538      	push	{r3, r4, r5, lr}
   d5eae:	2300      	movs	r3, #0
   d5eb0:	4604      	mov	r4, r0
   d5eb2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5eb4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5eb6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5eb8:	f7fe f8ef 	bl	d409a <_Znwj>
   d5ebc:	b128      	cbz	r0, d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5ebe:	2301      	movs	r3, #1
   d5ec0:	6043      	str	r3, [r0, #4]
   d5ec2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5ec4:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5ec6:	6003      	str	r3, [r0, #0]
   d5ec8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5eca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5ecc:	4620      	mov	r0, r4
   d5ece:	bd38      	pop	{r3, r4, r5, pc}
   d5ed0:	000d92b4 	.word	0x000d92b4

000d5ed4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ed4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5ed6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ed8:	b90a      	cbnz	r2, d5ede <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5eda:	f001 fc18 	bl	d770e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ede:	68c3      	ldr	r3, [r0, #12]
    }
   d5ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ee4:	4718      	bx	r3

000d5ee6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5ee6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5ee8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5eea:	f100 0110 	add.w	r1, r0, #16
   d5eee:	f7ff fff1 	bl	d5ed4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5ef2:	bd08      	pop	{r3, pc}

000d5ef4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ef4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5ef6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ef8:	b90a      	cbnz	r2, d5efe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5efa:	f001 fc08 	bl	d770e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5efe:	68c3      	ldr	r3, [r0, #12]
    }
   d5f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f04:	4718      	bx	r3

000d5f06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f06:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5f08:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5f0a:	f100 0110 	add.w	r1, r0, #16
   d5f0e:	f7ff fff1 	bl	d5ef4 <_ZNKSt8functionIFvRKbEEclES1_>
   d5f12:	bd08      	pop	{r3, pc}

000d5f14 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5f14:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f16:	2300      	movs	r3, #0
   d5f18:	6083      	str	r3, [r0, #8]
   d5f1a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5f1c:	4604      	mov	r4, r0
   d5f1e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5f20:	b12b      	cbz	r3, d5f2e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5f22:	2202      	movs	r2, #2
   d5f24:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5f26:	68eb      	ldr	r3, [r5, #12]
   d5f28:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5f2a:	68ab      	ldr	r3, [r5, #8]
   d5f2c:	60a3      	str	r3, [r4, #8]
	}
    }
   d5f2e:	4620      	mov	r0, r4
   d5f30:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5f34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f36:	b089      	sub	sp, #36	; 0x24
   d5f38:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5f3a:	4668      	mov	r0, sp
   d5f3c:	f7ff ff10 	bl	d5d60 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5f40:	2300      	movs	r3, #0
   d5f42:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5f46:	f04f 0202 	mov.w	r2, #2
   d5f4a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5f4e:	2b00      	cmp	r3, #0
   d5f50:	d103      	bne.n	d5f5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5f52:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5f56:	2900      	cmp	r1, #0
   d5f58:	d1f7      	bne.n	d5f4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5f5a:	d002      	beq.n	d5f62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5f5c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f60:	e063      	b.n	d602a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5f62:	f114 050c 	adds.w	r5, r4, #12
   d5f66:	d003      	beq.n	d5f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5f68:	4669      	mov	r1, sp
   d5f6a:	4628      	mov	r0, r5
   d5f6c:	f7ff fef8 	bl	d5d60 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5f70:	f3bf 8f5f 	dmb	sy
   d5f74:	2301      	movs	r3, #1
   d5f76:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5f78:	2000      	movs	r0, #0
   d5f7a:	f104 0308 	add.w	r3, r4, #8
   d5f7e:	f3bf 8f5f 	dmb	sy
   d5f82:	e853 6f00 	ldrex	r6, [r3]
   d5f86:	e843 0200 	strex	r2, r0, [r3]
   d5f8a:	2a00      	cmp	r2, #0
   d5f8c:	d1f9      	bne.n	d5f82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5f8e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5f92:	2e00      	cmp	r6, #0
   d5f94:	d049      	beq.n	d602a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5f96:	f7ff fc5d 	bl	d5854 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5f9a:	b120      	cbz	r0, d5fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5f9c:	4629      	mov	r1, r5
   d5f9e:	4630      	mov	r0, r6
   d5fa0:	f7ff ff98 	bl	d5ed4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5fa4:	e03a      	b.n	d601c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5fa6:	4631      	mov	r1, r6
   d5fa8:	a802      	add	r0, sp, #8
   d5faa:	f7ff ffb3 	bl	d5f14 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5fae:	68e0      	ldr	r0, [r4, #12]
   d5fb0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5fb4:	b108      	cbz	r0, d5fba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5fb6:	f002 faa3 	bl	d8500 <strdup>
   d5fba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5fbc:	2010      	movs	r0, #16
   d5fbe:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5fc2:	f7fe f86a 	bl	d409a <_Znwj>
   d5fc6:	4605      	mov	r5, r0
   d5fc8:	b1e8      	cbz	r0, d6006 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5fca:	2700      	movs	r7, #0
   d5fcc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5fce:	2018      	movs	r0, #24
   d5fd0:	f7fe f863 	bl	d409a <_Znwj>
   d5fd4:	4604      	mov	r4, r0
   d5fd6:	b188      	cbz	r0, d5ffc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5fd8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5fda:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5fdc:	a802      	add	r0, sp, #8
   d5fde:	f7ff ff54 	bl	d5e8a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fe2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5fe4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fe6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fe8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5fea:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5fec:	a906      	add	r1, sp, #24
   d5fee:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ff0:	60e3      	str	r3, [r4, #12]
   d5ff2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ff6:	9205      	str	r2, [sp, #20]
   d5ff8:	f7ff feb2 	bl	d5d60 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5ffc:	4b0d      	ldr	r3, [pc, #52]	; (d6034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5ffe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6000:	4b0d      	ldr	r3, [pc, #52]	; (d6038 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6002:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6004:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6006:	a806      	add	r0, sp, #24
   d6008:	f7ff feb9 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d600c:	a802      	add	r0, sp, #8
   d600e:	f7ff fe9e 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6012:	2200      	movs	r2, #0
   d6014:	4629      	mov	r1, r5
   d6016:	4809      	ldr	r0, [pc, #36]	; (d603c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6018:	f7ff fc24 	bl	d5864 <application_thread_invoke>
   d601c:	4630      	mov	r0, r6
   d601e:	f7ff fe96 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6022:	2110      	movs	r1, #16
   d6024:	4630      	mov	r0, r6
   d6026:	f001 fb70 	bl	d770a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d602a:	4668      	mov	r0, sp
   d602c:	f7ff fea7 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
    }
   d6030:	b009      	add	sp, #36	; 0x24
   d6032:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6034:	000d5ee7 	.word	0x000d5ee7
   d6038:	000d615d 	.word	0x000d615d
   d603c:	000d5abf 	.word	0x000d5abf

000d6040 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6044:	b08b      	sub	sp, #44	; 0x2c
   d6046:	4606      	mov	r6, r0
   d6048:	460f      	mov	r7, r1
   d604a:	4690      	mov	r8, r2
   d604c:	4699      	mov	r9, r3
   d604e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6052:	f7ff fc5d 	bl	d5910 <spark_cloud_flag_connected>
   d6056:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d6058:	4683      	mov	fp, r0
   d605a:	bb30      	cbnz	r0, d60aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d605c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6060:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6062:	a905      	add	r1, sp, #20
   d6064:	4628      	mov	r0, r5
   d6066:	f8ad 3018 	strh.w	r3, [sp, #24]
   d606a:	f7ff fe79 	bl	d5d60 <_ZN8particle5ErrorC1EOS0_>
   d606e:	2014      	movs	r0, #20
   d6070:	f7fe f813 	bl	d409a <_Znwj>
   d6074:	4604      	mov	r4, r0
   d6076:	b158      	cbz	r0, d6090 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6078:	2302      	movs	r3, #2
   d607a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d607c:	2301      	movs	r3, #1
   d607e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6080:	f8c0 b004 	str.w	fp, [r0, #4]
   d6084:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6088:	4629      	mov	r1, r5
   d608a:	300c      	adds	r0, #12
   d608c:	f7ff fe68 	bl	d5d60 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6090:	4630      	mov	r0, r6
   d6092:	4621      	mov	r1, r4
   d6094:	f840 4b04 	str.w	r4, [r0], #4
   d6098:	f7ff ff08 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d609c:	4628      	mov	r0, r5
   d609e:	f7ff fe6e 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d60a2:	a805      	add	r0, sp, #20
   d60a4:	f7ff fe6b 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
   d60a8:	e052      	b.n	d6150 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d60aa:	2400      	movs	r4, #0
   d60ac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d60ae:	2014      	movs	r0, #20
   d60b0:	606c      	str	r4, [r5, #4]
   d60b2:	60ac      	str	r4, [r5, #8]
   d60b4:	9307      	str	r3, [sp, #28]
   d60b6:	f7fd fff0 	bl	d409a <_Znwj>
   d60ba:	4601      	mov	r1, r0
   d60bc:	b118      	cbz	r0, d60c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d60be:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60c0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d60c2:	6044      	str	r4, [r0, #4]
   d60c4:	6084      	str	r4, [r0, #8]
   d60c6:	a804      	add	r0, sp, #16
   d60c8:	9103      	str	r1, [sp, #12]
   d60ca:	f7ff feef 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d60ce:	4b22      	ldr	r3, [pc, #136]	; (d6158 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d60d0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d60d2:	2008      	movs	r0, #8
   d60d4:	f7fd ffe1 	bl	d409a <_Znwj>
   d60d8:	4604      	mov	r4, r0
   d60da:	b128      	cbz	r0, d60e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60dc:	9b03      	ldr	r3, [sp, #12]
   d60de:	f840 3b04 	str.w	r3, [r0], #4
   d60e2:	a904      	add	r1, sp, #16
   d60e4:	f7ff fcff 	bl	d5ae6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d60e8:	9500      	str	r5, [sp, #0]
   d60ea:	fa5f f38a 	uxtb.w	r3, sl
   d60ee:	464a      	mov	r2, r9
   d60f0:	4641      	mov	r1, r8
   d60f2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d60f4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d60f6:	f7ff fc1b 	bl	d5930 <spark_send_event>
   d60fa:	b920      	cbnz	r0, d6106 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d60fc:	9b03      	ldr	r3, [sp, #12]
   d60fe:	785b      	ldrb	r3, [r3, #1]
   d6100:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6104:	b183      	cbz	r3, d6128 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6106:	9b03      	ldr	r3, [sp, #12]
   d6108:	9305      	str	r3, [sp, #20]
   d610a:	a904      	add	r1, sp, #16
   d610c:	a806      	add	r0, sp, #24
   d610e:	f7ff fcea 	bl	d5ae6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6112:	a905      	add	r1, sp, #20
   d6114:	4630      	mov	r0, r6
   d6116:	f7ff fe89 	bl	d5e2c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d611a:	a806      	add	r0, sp, #24
   d611c:	f7fe f91c 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6120:	a804      	add	r0, sp, #16
   d6122:	f7fe f919 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6126:	e013      	b.n	d6150 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6128:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d612c:	a905      	add	r1, sp, #20
   d612e:	a803      	add	r0, sp, #12
   d6130:	9205      	str	r2, [sp, #20]
   d6132:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6136:	f7ff fefd 	bl	d5f34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d613a:	a805      	add	r0, sp, #20
   d613c:	f7ff fe1f 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6140:	a805      	add	r0, sp, #20
   d6142:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6144:	f7ff fe83 	bl	d5e4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6148:	a806      	add	r0, sp, #24
   d614a:	f7fe f905 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d614e:	e7da      	b.n	d6106 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6150:	4630      	mov	r0, r6
   d6152:	b00b      	add	sp, #44	; 0x2c
   d6154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6158:	000d62cd 	.word	0x000d62cd

000d615c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d615c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d615e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6160:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6162:	d006      	beq.n	d6172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6164:	2a03      	cmp	r2, #3
   d6166:	d017      	beq.n	d6198 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6168:	2a01      	cmp	r2, #1
   d616a:	d122      	bne.n	d61b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d616c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d616e:	6003      	str	r3, [r0, #0]
	      break;
   d6170:	e01f      	b.n	d61b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6172:	2018      	movs	r0, #24
   d6174:	680e      	ldr	r6, [r1, #0]
   d6176:	f7fd ff90 	bl	d409a <_Znwj>
   d617a:	4605      	mov	r5, r0
   d617c:	b150      	cbz	r0, d6194 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d617e:	4631      	mov	r1, r6
   d6180:	f7ff fec8 	bl	d5f14 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6184:	6930      	ldr	r0, [r6, #16]
   d6186:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d618a:	b108      	cbz	r0, d6190 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d618c:	f002 f9b8 	bl	d8500 <strdup>
   d6190:	6128      	str	r0, [r5, #16]
   d6192:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6194:	6025      	str	r5, [r4, #0]
   d6196:	e00c      	b.n	d61b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6198:	6804      	ldr	r4, [r0, #0]
   d619a:	b154      	cbz	r4, d61b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d619c:	f104 0010 	add.w	r0, r4, #16
   d61a0:	f7ff fded 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61a4:	4620      	mov	r0, r4
   d61a6:	f7ff fdd2 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d61aa:	2118      	movs	r1, #24
   d61ac:	4620      	mov	r0, r4
   d61ae:	f001 faac 	bl	d770a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d61b2:	2000      	movs	r0, #0
   d61b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d61b6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61b8:	2300      	movs	r3, #0
   d61ba:	6083      	str	r3, [r0, #8]
   d61bc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d61be:	4604      	mov	r4, r0
   d61c0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d61c2:	b12b      	cbz	r3, d61d0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d61c4:	2202      	movs	r2, #2
   d61c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d61c8:	68eb      	ldr	r3, [r5, #12]
   d61ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d61cc:	68ab      	ldr	r3, [r5, #8]
   d61ce:	60a3      	str	r3, [r4, #8]
	}
    }
   d61d0:	4620      	mov	r0, r4
   d61d2:	bd38      	pop	{r3, r4, r5, pc}

000d61d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d61d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d61d6:	b570      	push	{r4, r5, r6, lr}
   d61d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d61da:	d006      	beq.n	d61ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d61dc:	2a03      	cmp	r2, #3
   d61de:	d011      	beq.n	d6204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d61e0:	2a01      	cmp	r2, #1
   d61e2:	d118      	bne.n	d6216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d61e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d61e6:	6003      	str	r3, [r0, #0]
	      break;
   d61e8:	e015      	b.n	d6216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d61ea:	2014      	movs	r0, #20
   d61ec:	680e      	ldr	r6, [r1, #0]
   d61ee:	f7fd ff54 	bl	d409a <_Znwj>
   d61f2:	4605      	mov	r5, r0
   d61f4:	b120      	cbz	r0, d6200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d61f6:	4631      	mov	r1, r6
   d61f8:	f7ff ffdd 	bl	d61b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d61fc:	7c33      	ldrb	r3, [r6, #16]
   d61fe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6200:	6025      	str	r5, [r4, #0]
   d6202:	e008      	b.n	d6216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6204:	6804      	ldr	r4, [r0, #0]
   d6206:	b134      	cbz	r4, d6216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6208:	4620      	mov	r0, r4
   d620a:	f7ff fda0 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d620e:	2114      	movs	r1, #20
   d6210:	4620      	mov	r0, r4
   d6212:	f001 fa7a 	bl	d770a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6216:	2000      	movs	r0, #0
   d6218:	bd70      	pop	{r4, r5, r6, pc}
	...

000d621c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d621c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d621e:	2300      	movs	r3, #0
   d6220:	b087      	sub	sp, #28
   d6222:	460c      	mov	r4, r1
   d6224:	f3bf 8f5f 	dmb	sy
   d6228:	e850 6f00 	ldrex	r6, [r0]
   d622c:	e840 3200 	strex	r2, r3, [r0]
   d6230:	2a00      	cmp	r2, #0
   d6232:	d1f9      	bne.n	d6228 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6234:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6238:	2e00      	cmp	r6, #0
   d623a:	d03f      	beq.n	d62bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d623c:	4618      	mov	r0, r3
   d623e:	f7ff fb09 	bl	d5854 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6242:	4607      	mov	r7, r0
   d6244:	b120      	cbz	r0, d6250 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6246:	4621      	mov	r1, r4
   d6248:	4630      	mov	r0, r6
   d624a:	f7ff fe53 	bl	d5ef4 <_ZNKSt8functionIFvRKbEEclES1_>
   d624e:	e02e      	b.n	d62ae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6250:	4631      	mov	r1, r6
   d6252:	a801      	add	r0, sp, #4
   d6254:	f7ff ffaf 	bl	d61b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6258:	7823      	ldrb	r3, [r4, #0]
   d625a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d625e:	2010      	movs	r0, #16
   d6260:	f7fd ff1b 	bl	d409a <_Znwj>
   d6264:	4605      	mov	r5, r0
   d6266:	b1d0      	cbz	r0, d629e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6268:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d626a:	2014      	movs	r0, #20
   d626c:	f7fd ff15 	bl	d409a <_Znwj>
   d6270:	4604      	mov	r4, r0
   d6272:	b178      	cbz	r0, d6294 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6274:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6276:	4601      	mov	r1, r0
   d6278:	a801      	add	r0, sp, #4
   d627a:	f7ff fe06 	bl	d5e8a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d627e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6280:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6282:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6284:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6286:	9203      	str	r2, [sp, #12]
   d6288:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d628a:	60e3      	str	r3, [r4, #12]
   d628c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6290:	9204      	str	r2, [sp, #16]
   d6292:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6294:	4b0a      	ldr	r3, [pc, #40]	; (d62c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6296:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6298:	4b0a      	ldr	r3, [pc, #40]	; (d62c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d629a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d629c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d629e:	a801      	add	r0, sp, #4
   d62a0:	f7ff fd55 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d62a4:	2200      	movs	r2, #0
   d62a6:	4629      	mov	r1, r5
   d62a8:	4807      	ldr	r0, [pc, #28]	; (d62c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d62aa:	f7ff fadb 	bl	d5864 <application_thread_invoke>
   d62ae:	4630      	mov	r0, r6
   d62b0:	f7ff fd4d 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d62b4:	2110      	movs	r1, #16
   d62b6:	4630      	mov	r0, r6
   d62b8:	f001 fa27 	bl	d770a <_ZdlPvj>
        }
    }
   d62bc:	b007      	add	sp, #28
   d62be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d62c0:	000d5f07 	.word	0x000d5f07
   d62c4:	000d61d5 	.word	0x000d61d5
   d62c8:	000d5abf 	.word	0x000d5abf

000d62cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d62cc:	b530      	push	{r4, r5, lr}
   d62ce:	b085      	sub	sp, #20
   d62d0:	4604      	mov	r4, r0
   d62d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d62d4:	4668      	mov	r0, sp
   d62d6:	4611      	mov	r1, r2
   d62d8:	f7ff fdb9 	bl	d5e4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d62dc:	b17c      	cbz	r4, d62fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d62de:	b224      	sxth	r4, r4
   d62e0:	4628      	mov	r0, r5
   d62e2:	b10d      	cbz	r5, d62e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d62e4:	f002 f90c 	bl	d8500 <strdup>
   d62e8:	9002      	str	r0, [sp, #8]
   d62ea:	a902      	add	r1, sp, #8
   d62ec:	4668      	mov	r0, sp
   d62ee:	f8ad 400c 	strh.w	r4, [sp, #12]
   d62f2:	f7ff fe1f 	bl	d5f34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d62f6:	a802      	add	r0, sp, #8
   d62f8:	f7ff fd41 	bl	d5d7e <_ZN8particle5ErrorD1Ev>
   d62fc:	e01d      	b.n	d633a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d62fe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6300:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6304:	f04f 0201 	mov.w	r2, #1
   d6308:	e8d0 3f4f 	ldrexb	r3, [r0]
   d630c:	42a3      	cmp	r3, r4
   d630e:	d103      	bne.n	d6318 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6310:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6314:	2900      	cmp	r1, #0
   d6316:	d1f7      	bne.n	d6308 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6318:	d002      	beq.n	d6320 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d631a:	f88d 3008 	strb.w	r3, [sp, #8]
   d631e:	e00c      	b.n	d633a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6320:	f110 010c 	adds.w	r1, r0, #12
   d6324:	f04f 0301 	mov.w	r3, #1
   d6328:	bf18      	it	ne
   d632a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d632c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6330:	3004      	adds	r0, #4
   d6332:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6336:	f7ff ff71 	bl	d621c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d633a:	a801      	add	r0, sp, #4
   d633c:	f7fe f80c 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6340:	b005      	add	sp, #20
   d6342:	bd30      	pop	{r4, r5, pc}

000d6344 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6344:	2200      	movs	r2, #0
   d6346:	4611      	mov	r1, r2
   d6348:	6840      	ldr	r0, [r0, #4]
   d634a:	f7ff bb51 	b.w	d59f0 <network_listening>

000d634e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d634e:	2200      	movs	r2, #0
   d6350:	4611      	mov	r1, r2
   d6352:	6840      	ldr	r0, [r0, #4]
   d6354:	f7ff bb5c 	b.w	d5a10 <network_get_listen_timeout>

000d6358 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6358:	2200      	movs	r2, #0
   d635a:	6840      	ldr	r0, [r0, #4]
   d635c:	f7ff bb50 	b.w	d5a00 <network_set_listen_timeout>

000d6360 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6360:	2200      	movs	r2, #0
   d6362:	f081 0101 	eor.w	r1, r1, #1
   d6366:	6840      	ldr	r0, [r0, #4]
   d6368:	f7ff bb3a 	b.w	d59e0 <network_listen>

000d636c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d636c:	2300      	movs	r3, #0
   d636e:	461a      	mov	r2, r3
   d6370:	4619      	mov	r1, r3
   d6372:	6840      	ldr	r0, [r0, #4]
   d6374:	f7ff bb2c 	b.w	d59d0 <network_off>

000d6378 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6378:	2300      	movs	r3, #0
   d637a:	461a      	mov	r2, r3
   d637c:	4619      	mov	r1, r3
   d637e:	6840      	ldr	r0, [r0, #4]
   d6380:	f7ff bb1e 	b.w	d59c0 <network_on>

000d6384 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6384:	2200      	movs	r2, #0
   d6386:	4611      	mov	r1, r2
   d6388:	6840      	ldr	r0, [r0, #4]
   d638a:	f7ff bb11 	b.w	d59b0 <network_ready>

000d638e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d638e:	2200      	movs	r2, #0
   d6390:	4611      	mov	r1, r2
   d6392:	6840      	ldr	r0, [r0, #4]
   d6394:	f7ff bafc 	b.w	d5990 <network_connecting>

000d6398 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6398:	2200      	movs	r2, #0
   d639a:	2102      	movs	r1, #2
   d639c:	6840      	ldr	r0, [r0, #4]
   d639e:	f7ff baff 	b.w	d59a0 <network_disconnect>

000d63a2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d63a2:	2300      	movs	r3, #0
   d63a4:	461a      	mov	r2, r3
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	f7ff baea 	b.w	d5980 <network_connect>

000d63ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d63ac:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d63ae:	2203      	movs	r2, #3
   d63b0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d63b2:	4a02      	ldr	r2, [pc, #8]	; (d63bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d63b4:	601a      	str	r2, [r3, #0]
   d63b6:	4770      	bx	lr
   d63b8:	2003e35c 	.word	0x2003e35c
   d63bc:	000d92d0 	.word	0x000d92d0

000d63c0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d63c0:	6800      	ldr	r0, [r0, #0]
   d63c2:	f000 b8d6 	b.w	d6572 <_ZN7TwoWire4lockEv>

000d63c6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d63c6:	b510      	push	{r4, lr}
   d63c8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d63ca:	6001      	str	r1, [r0, #0]
   d63cc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d63ce:	b10a      	cbz	r2, d63d4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d63d0:	f7ff fff6 	bl	d63c0 <_ZN9FuelGauge4lockEv>
    }
}
   d63d4:	4620      	mov	r0, r4
   d63d6:	bd10      	pop	{r4, pc}

000d63d8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d63d8:	b538      	push	{r3, r4, r5, lr}
   d63da:	4604      	mov	r4, r0
   d63dc:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d63de:	f001 f94d 	bl	d767c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d63e2:	462a      	mov	r2, r5
   d63e4:	4601      	mov	r1, r0
   d63e6:	4620      	mov	r0, r4
   d63e8:	f7ff ffed 	bl	d63c6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d63ec:	4620      	mov	r0, r4
   d63ee:	bd38      	pop	{r3, r4, r5, pc}

000d63f0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d63f0:	6800      	ldr	r0, [r0, #0]
   d63f2:	f000 b8c7 	b.w	d6584 <_ZN7TwoWire6unlockEv>

000d63f6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d63f6:	b510      	push	{r4, lr}
{
    if (lock_) {
   d63f8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d63fa:	4604      	mov	r4, r0
{
    if (lock_) {
   d63fc:	b10b      	cbz	r3, d6402 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d63fe:	f7ff fff7 	bl	d63f0 <_ZN9FuelGauge6unlockEv>
    }
}
   d6402:	4620      	mov	r0, r4
   d6404:	bd10      	pop	{r4, pc}

000d6406 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6408:	4604      	mov	r4, r0
   d640a:	4616      	mov	r6, r2
   d640c:	461d      	mov	r5, r3
   d640e:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6410:	f7ff ffd6 	bl	d63c0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d6414:	6820      	ldr	r0, [r4, #0]
   d6416:	2136      	movs	r1, #54	; 0x36
   d6418:	f000 f89d 	bl	d6556 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d641c:	6820      	ldr	r0, [r4, #0]
   d641e:	6803      	ldr	r3, [r0, #0]
   d6420:	4639      	mov	r1, r7
   d6422:	689b      	ldr	r3, [r3, #8]
   d6424:	4798      	blx	r3
    i2c_.endTransmission(true);
   d6426:	2101      	movs	r1, #1
   d6428:	6820      	ldr	r0, [r4, #0]
   d642a:	f000 f897 	bl	d655c <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d642e:	2202      	movs	r2, #2
   d6430:	2136      	movs	r1, #54	; 0x36
   d6432:	2301      	movs	r3, #1
   d6434:	6820      	ldr	r0, [r4, #0]
   d6436:	f000 f885 	bl	d6544 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d643a:	6820      	ldr	r0, [r4, #0]
   d643c:	6803      	ldr	r3, [r0, #0]
   d643e:	695b      	ldr	r3, [r3, #20]
   d6440:	4798      	blx	r3
   d6442:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d6444:	6820      	ldr	r0, [r4, #0]
   d6446:	6803      	ldr	r3, [r0, #0]
   d6448:	695b      	ldr	r3, [r3, #20]
   d644a:	4798      	blx	r3
   d644c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d644e:	4620      	mov	r0, r4
}
   d6450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d6454:	f7ff bfcc 	b.w	d63f0 <_ZN9FuelGauge6unlockEv>

000d6458 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d6458:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d645a:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d645c:	2200      	movs	r2, #0
	byte LSB = 0;
   d645e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6462:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d6466:	2104      	movs	r1, #4
   d6468:	f10d 0206 	add.w	r2, sp, #6
   d646c:	f7ff ffcb 	bl	d6406 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6470:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6474:	f001 fbe8 	bl	d7c48 <__aeabi_i2d>
   d6478:	2200      	movs	r2, #0
   d647a:	4b09      	ldr	r3, [pc, #36]	; (d64a0 <_ZN9FuelGauge6getSoCEv+0x48>)
   d647c:	f001 fc4a 	bl	d7d14 <__aeabi_dmul>
   d6480:	f001 fe5a 	bl	d8138 <__aeabi_d2f>
   d6484:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6488:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d648c:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6490:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6494:	ee37 0a80 	vadd.f32	s0, s15, s0
   d6498:	b003      	add	sp, #12
   d649a:	f85d fb04 	ldr.w	pc, [sp], #4
   d649e:	bf00      	nop
   d64a0:	3f700000 	.word	0x3f700000

000d64a4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d64a4:	4770      	bx	lr

000d64a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d64a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64a8:	4606      	mov	r6, r0
   d64aa:	4615      	mov	r5, r2
   d64ac:	460c      	mov	r4, r1
   d64ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d64b0:	42bc      	cmp	r4, r7
   d64b2:	d006      	beq.n	d64c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d64b4:	6833      	ldr	r3, [r6, #0]
   d64b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d64ba:	689b      	ldr	r3, [r3, #8]
   d64bc:	4630      	mov	r0, r6
   d64be:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d64c0:	e7f6      	b.n	d64b0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d64c2:	4628      	mov	r0, r5
   d64c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64c6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d64c6:	2200      	movs	r2, #0
   d64c8:	7c00      	ldrb	r0, [r0, #16]
   d64ca:	f7ff b8bb 	b.w	d5644 <HAL_I2C_Write_Data>

000d64ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d64ce:	2100      	movs	r1, #0
   d64d0:	7c00      	ldrb	r0, [r0, #16]
   d64d2:	f7ff b8bf 	b.w	d5654 <HAL_I2C_Available_Data>

000d64d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d64d6:	2100      	movs	r1, #0
   d64d8:	7c00      	ldrb	r0, [r0, #16]
   d64da:	f7ff b8c3 	b.w	d5664 <HAL_I2C_Read_Data>

000d64de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d64de:	2100      	movs	r1, #0
   d64e0:	7c00      	ldrb	r0, [r0, #16]
   d64e2:	f7ff b8c7 	b.w	d5674 <HAL_I2C_Peek_Data>

000d64e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d64e6:	2100      	movs	r1, #0
   d64e8:	7c00      	ldrb	r0, [r0, #16]
   d64ea:	f7ff b8cb 	b.w	d5684 <HAL_I2C_Flush_Data>

000d64ee <_ZN7TwoWireD0Ev>:
   d64ee:	b510      	push	{r4, lr}
   d64f0:	2114      	movs	r1, #20
   d64f2:	4604      	mov	r4, r0
   d64f4:	f001 f909 	bl	d770a <_ZdlPvj>
   d64f8:	4620      	mov	r0, r4
   d64fa:	bd10      	pop	{r4, pc}

000d64fc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d64fc:	b510      	push	{r4, lr}
   d64fe:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6504:	4608      	mov	r0, r1
   d6506:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6508:	2100      	movs	r1, #0
   d650a:	4b04      	ldr	r3, [pc, #16]	; (d651c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d650c:	7420      	strb	r0, [r4, #16]
   d650e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6510:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6512:	f7ff f8c7 	bl	d56a4 <HAL_I2C_Init>

}
   d6516:	4620      	mov	r0, r4
   d6518:	bd10      	pop	{r4, pc}
   d651a:	bf00      	nop
   d651c:	000d9304 	.word	0x000d9304

000d6520 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6520:	2300      	movs	r3, #0
   d6522:	461a      	mov	r2, r3
   d6524:	4619      	mov	r1, r3
   d6526:	7c00      	ldrb	r0, [r0, #16]
   d6528:	f7ff b86c 	b.w	d5604 <HAL_I2C_Begin>

000d652c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d652c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d652e:	2400      	movs	r4, #0
   d6530:	7c00      	ldrb	r0, [r0, #16]
   d6532:	9400      	str	r4, [sp, #0]
   d6534:	f7ff f86e 	bl	d5614 <HAL_I2C_Request_Data>
  return result;
}
   d6538:	b2c0      	uxtb	r0, r0
   d653a:	b002      	add	sp, #8
   d653c:	bd10      	pop	{r4, pc}

000d653e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d653e:	2301      	movs	r3, #1
   d6540:	f7ff bff4 	b.w	d652c <_ZN7TwoWire11requestFromEhhh>

000d6544 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d6544:	b2db      	uxtb	r3, r3
   d6546:	b2d2      	uxtb	r2, r2
   d6548:	b2c9      	uxtb	r1, r1
   d654a:	f7ff bfef 	b.w	d652c <_ZN7TwoWire11requestFromEhhh>

000d654e <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d654e:	2200      	movs	r2, #0
   d6550:	7c00      	ldrb	r0, [r0, #16]
   d6552:	f7ff b867 	b.w	d5624 <HAL_I2C_Begin_Transmission>

000d6556 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6556:	b2c9      	uxtb	r1, r1
   d6558:	f7ff bff9 	b.w	d654e <_ZN7TwoWire17beginTransmissionEh>

000d655c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d655c:	2200      	movs	r2, #0
   d655e:	7c00      	ldrb	r0, [r0, #16]
   d6560:	f7ff b868 	b.w	d5634 <HAL_I2C_End_Transmission>

000d6564 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6564:	2101      	movs	r1, #1
   d6566:	f7ff bff9 	b.w	d655c <_ZN7TwoWire15endTransmissionEh>

000d656a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d656a:	2100      	movs	r1, #0
   d656c:	7c00      	ldrb	r0, [r0, #16]
   d656e:	f7ff b891 	b.w	d5694 <HAL_I2C_Is_Enabled>

000d6572 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6572:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6574:	2100      	movs	r1, #0
   d6576:	7c00      	ldrb	r0, [r0, #16]
   d6578:	f7ff f89c 	bl	d56b4 <HAL_I2C_Acquire>
}
   d657c:	fab0 f080 	clz	r0, r0
   d6580:	0940      	lsrs	r0, r0, #5
   d6582:	bd08      	pop	{r3, pc}

000d6584 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6584:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6586:	2100      	movs	r1, #0
   d6588:	7c00      	ldrb	r0, [r0, #16]
   d658a:	f7ff f89b 	bl	d56c4 <HAL_I2C_Release>
}
   d658e:	fab0 f080 	clz	r0, r0
   d6592:	0940      	lsrs	r0, r0, #5
   d6594:	bd08      	pop	{r3, pc}

000d6596 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6596:	4770      	bx	lr

000d6598 <_ZN9IPAddressD0Ev>:
   d6598:	b510      	push	{r4, lr}
   d659a:	2118      	movs	r1, #24
   d659c:	4604      	mov	r4, r0
   d659e:	f001 f8b4 	bl	d770a <_ZdlPvj>
   d65a2:	4620      	mov	r0, r4
   d65a4:	bd10      	pop	{r4, pc}

000d65a6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d65a6:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d65a8:	7d03      	ldrb	r3, [r0, #20]
   d65aa:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d65ac:	b08d      	sub	sp, #52	; 0x34
   d65ae:	460e      	mov	r6, r1
   d65b0:	f100 0704 	add.w	r7, r0, #4
   d65b4:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d65b8:	d002      	beq.n	d65c0 <_ZNK9IPAddress7printToER5Print+0x1a>
   d65ba:	f100 0508 	add.w	r5, r0, #8
   d65be:	e018      	b.n	d65f2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d65c0:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d65c2:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d65c4:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d65c8:	232f      	movs	r3, #47	; 0x2f
   d65ca:	462a      	mov	r2, r5
   d65cc:	200a      	movs	r0, #10
   d65ce:	f7ff f881 	bl	d56d4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d65d2:	4628      	mov	r0, r5
   d65d4:	f001 ffaf 	bl	d8536 <strlen>
   d65d8:	6833      	ldr	r3, [r6, #0]
   d65da:	4602      	mov	r2, r0
   d65dc:	68db      	ldr	r3, [r3, #12]
   d65de:	4629      	mov	r1, r5
   d65e0:	4630      	mov	r0, r6
   d65e2:	4798      	blx	r3
   d65e4:	e00f      	b.n	d6606 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d65e6:	b124      	cbz	r4, d65f2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d65e8:	212e      	movs	r1, #46	; 0x2e
   d65ea:	4630      	mov	r0, r6
   d65ec:	f000 fba5 	bl	d6d3a <_ZN5Print5printEc>
   d65f0:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d65f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d65f6:	220a      	movs	r2, #10
   d65f8:	4630      	mov	r0, r6
   d65fa:	f000 fbe4 	bl	d6dc6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d65fe:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6600:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6602:	d1f0      	bne.n	d65e6 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6604:	4620      	mov	r0, r4
    }
    return n;
}
   d6606:	b00d      	add	sp, #52	; 0x34
   d6608:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d660c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d660c:	b510      	push	{r4, lr}
   d660e:	4b05      	ldr	r3, [pc, #20]	; (d6624 <_ZN9IPAddressC1Ev+0x18>)
   d6610:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6612:	2211      	movs	r2, #17
   d6614:	f840 3b04 	str.w	r3, [r0], #4
   d6618:	2100      	movs	r1, #0
   d661a:	f001 ff2e 	bl	d847a <memset>
{
    clear();
}
   d661e:	4620      	mov	r0, r4
   d6620:	bd10      	pop	{r4, pc}
   d6622:	bf00      	nop
   d6624:	000d932c 	.word	0x000d932c

000d6628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6628:	4603      	mov	r3, r0
   d662a:	4a07      	ldr	r2, [pc, #28]	; (d6648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d662c:	b510      	push	{r4, lr}
   d662e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6632:	f101 0210 	add.w	r2, r1, #16
   d6636:	f851 4b04 	ldr.w	r4, [r1], #4
   d663a:	f843 4b04 	str.w	r4, [r3], #4
   d663e:	4291      	cmp	r1, r2
   d6640:	d1f9      	bne.n	d6636 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6642:	780a      	ldrb	r2, [r1, #0]
   d6644:	701a      	strb	r2, [r3, #0]
}
   d6646:	bd10      	pop	{r4, pc}
   d6648:	000d932c 	.word	0x000d932c

000d664c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d664c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d664e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6652:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6656:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d665a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d665e:	2304      	movs	r3, #4
   d6660:	6041      	str	r1, [r0, #4]
   d6662:	7503      	strb	r3, [r0, #20]
   d6664:	bd10      	pop	{r4, pc}

000d6666 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6666:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6668:	780d      	ldrb	r5, [r1, #0]
   d666a:	788b      	ldrb	r3, [r1, #2]
   d666c:	784a      	ldrb	r2, [r1, #1]
   d666e:	78c9      	ldrb	r1, [r1, #3]
   d6670:	9100      	str	r1, [sp, #0]
   d6672:	4629      	mov	r1, r5
   d6674:	f7ff ffea 	bl	d664c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6678:	b003      	add	sp, #12
   d667a:	bd30      	pop	{r4, r5, pc}

000d667c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d667c:	4b01      	ldr	r3, [pc, #4]	; (d6684 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d667e:	4a02      	ldr	r2, [pc, #8]	; (d6688 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6680:	601a      	str	r2, [r3, #0]
   d6682:	4770      	bx	lr
   d6684:	2003e364 	.word	0x2003e364
   d6688:	000d93a8 	.word	0x000d93a8

000d668c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d668c:	2200      	movs	r2, #0
   d668e:	4611      	mov	r1, r2
   d6690:	6840      	ldr	r0, [r0, #4]
   d6692:	f7ff b9ad 	b.w	d59f0 <network_listening>

000d6696 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6696:	2200      	movs	r2, #0
   d6698:	4611      	mov	r1, r2
   d669a:	6840      	ldr	r0, [r0, #4]
   d669c:	f7ff b9b8 	b.w	d5a10 <network_get_listen_timeout>

000d66a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d66a0:	2200      	movs	r2, #0
   d66a2:	6840      	ldr	r0, [r0, #4]
   d66a4:	f7ff b9ac 	b.w	d5a00 <network_set_listen_timeout>

000d66a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d66a8:	2200      	movs	r2, #0
   d66aa:	f081 0101 	eor.w	r1, r1, #1
   d66ae:	6840      	ldr	r0, [r0, #4]
   d66b0:	f7ff b996 	b.w	d59e0 <network_listen>

000d66b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d66b4:	2300      	movs	r3, #0
   d66b6:	461a      	mov	r2, r3
   d66b8:	2101      	movs	r1, #1
   d66ba:	6840      	ldr	r0, [r0, #4]
   d66bc:	f7ff b988 	b.w	d59d0 <network_off>

000d66c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d66c0:	2300      	movs	r3, #0
   d66c2:	461a      	mov	r2, r3
   d66c4:	4619      	mov	r1, r3
   d66c6:	6840      	ldr	r0, [r0, #4]
   d66c8:	f7ff b97a 	b.w	d59c0 <network_on>

000d66cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d66cc:	2200      	movs	r2, #0
   d66ce:	4611      	mov	r1, r2
   d66d0:	6840      	ldr	r0, [r0, #4]
   d66d2:	f7ff b96d 	b.w	d59b0 <network_ready>

000d66d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d66d6:	2200      	movs	r2, #0
   d66d8:	4611      	mov	r1, r2
   d66da:	6840      	ldr	r0, [r0, #4]
   d66dc:	f7ff b958 	b.w	d5990 <network_connecting>

000d66e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d66e0:	2200      	movs	r2, #0
   d66e2:	2102      	movs	r1, #2
   d66e4:	6840      	ldr	r0, [r0, #4]
   d66e6:	f7ff b95b 	b.w	d59a0 <network_disconnect>

000d66ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d66ea:	2300      	movs	r3, #0
   d66ec:	461a      	mov	r2, r3
   d66ee:	6840      	ldr	r0, [r0, #4]
   d66f0:	f7ff b946 	b.w	d5980 <network_connect>

000d66f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d66f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66f6:	4605      	mov	r5, r0
   d66f8:	b188      	cbz	r0, d671e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66fa:	6804      	ldr	r4, [r0, #0]
   d66fc:	b14c      	cbz	r4, d6712 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d66fe:	68a3      	ldr	r3, [r4, #8]
   d6700:	b11b      	cbz	r3, d670a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6702:	2203      	movs	r2, #3
   d6704:	4621      	mov	r1, r4
   d6706:	4620      	mov	r0, r4
   d6708:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d670a:	2110      	movs	r1, #16
   d670c:	4620      	mov	r0, r4
   d670e:	f000 fffc 	bl	d770a <_ZdlPvj>
   d6712:	4628      	mov	r0, r5
   d6714:	2114      	movs	r1, #20
      }
   d6716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d671a:	f000 bff6 	b.w	d770a <_ZdlPvj>
   d671e:	bd38      	pop	{r3, r4, r5, pc}

000d6720 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6720:	b110      	cbz	r0, d6728 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6722:	6803      	ldr	r3, [r0, #0]
   d6724:	685b      	ldr	r3, [r3, #4]
   d6726:	4718      	bx	r3
   d6728:	4770      	bx	lr

000d672a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d672a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d672c:	6803      	ldr	r3, [r0, #0]
   d672e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6730:	b1bb      	cbz	r3, d6762 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6732:	6858      	ldr	r0, [r3, #4]
   d6734:	f7fe fea6 	bl	d5484 <os_thread_is_current>
   d6738:	b978      	cbnz	r0, d675a <_ZN6ThreadD1Ev+0x30>
   d673a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d673c:	7c5a      	ldrb	r2, [r3, #17]
   d673e:	b912      	cbnz	r2, d6746 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6740:	6858      	ldr	r0, [r3, #4]
   d6742:	f7fe fea7 	bl	d5494 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6746:	6823      	ldr	r3, [r4, #0]
   d6748:	6858      	ldr	r0, [r3, #4]
   d674a:	f7fe feab 	bl	d54a4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d674e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6750:	2300      	movs	r3, #0
   d6752:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6754:	b128      	cbz	r0, d6762 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6756:	f7ff ffcd 	bl	d66f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d675a:	6820      	ldr	r0, [r4, #0]
   d675c:	b108      	cbz	r0, d6762 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d675e:	f7ff ffc9 	bl	d66f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6762:	4620      	mov	r0, r4
   d6764:	bd10      	pop	{r4, pc}
	...

000d6768 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6768:	b538      	push	{r3, r4, r5, lr}
   d676a:	4b0c      	ldr	r3, [pc, #48]	; (d679c <_ZN5spark9MeshClassD1Ev+0x34>)
   d676c:	6003      	str	r3, [r0, #0]
   d676e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6770:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6774:	b108      	cbz	r0, d677a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6776:	f7fd fc94 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d677a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d677e:	b135      	cbz	r5, d678e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6780:	4628      	mov	r0, r5
   d6782:	f7ff ffd2 	bl	d672a <_ZN6ThreadD1Ev>
   d6786:	2104      	movs	r1, #4
   d6788:	4628      	mov	r0, r5
   d678a:	f000 ffbe 	bl	d770a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d678e:	68a0      	ldr	r0, [r4, #8]
   d6790:	b108      	cbz	r0, d6796 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6792:	f7ff ffc5 	bl	d6720 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6796:	4620      	mov	r0, r4
   d6798:	bd38      	pop	{r3, r4, r5, pc}
   d679a:	bf00      	nop
   d679c:	000d9418 	.word	0x000d9418

000d67a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d67a0:	b538      	push	{r3, r4, r5, lr}
   d67a2:	4c0e      	ldr	r4, [pc, #56]	; (d67dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d67a4:	4b0e      	ldr	r3, [pc, #56]	; (d67e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d67a6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d67a8:	2500      	movs	r5, #0
   d67aa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d67ac:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d67b0:	6063      	str	r3, [r4, #4]
   d67b2:	60a5      	str	r5, [r4, #8]
   d67b4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d67b8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d67bc:	f7fe fe82 	bl	d54c4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d67c0:	4b08      	ldr	r3, [pc, #32]	; (d67e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d67c2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d67c6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d67ca:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d67cc:	4620      	mov	r0, r4
   d67ce:	4a06      	ldr	r2, [pc, #24]	; (d67e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d67d0:	4906      	ldr	r1, [pc, #24]	; (d67ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d67d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d67d6:	f000 bf93 	b.w	d7700 <__aeabi_atexit>
   d67da:	bf00      	nop
   d67dc:	2003e368 	.word	0x2003e368
   d67e0:	000d944c 	.word	0x000d944c
   d67e4:	000d9418 	.word	0x000d9418
   d67e8:	2003e234 	.word	0x2003e234
   d67ec:	000d6769 	.word	0x000d6769

000d67f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d67f0:	2300      	movs	r3, #0
   d67f2:	461a      	mov	r2, r3
   d67f4:	6840      	ldr	r0, [r0, #4]
   d67f6:	f7ff b8c3 	b.w	d5980 <network_connect>

000d67fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d67fa:	2200      	movs	r2, #0
   d67fc:	2102      	movs	r1, #2
   d67fe:	6840      	ldr	r0, [r0, #4]
   d6800:	f7ff b8ce 	b.w	d59a0 <network_disconnect>

000d6804 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6804:	2200      	movs	r2, #0
   d6806:	4611      	mov	r1, r2
   d6808:	6840      	ldr	r0, [r0, #4]
   d680a:	f7ff b8c1 	b.w	d5990 <network_connecting>

000d680e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d680e:	2200      	movs	r2, #0
   d6810:	4611      	mov	r1, r2
   d6812:	6840      	ldr	r0, [r0, #4]
   d6814:	f7ff b8cc 	b.w	d59b0 <network_ready>

000d6818 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6818:	2300      	movs	r3, #0
   d681a:	461a      	mov	r2, r3
   d681c:	4619      	mov	r1, r3
   d681e:	6840      	ldr	r0, [r0, #4]
   d6820:	f7ff b8ce 	b.w	d59c0 <network_on>

000d6824 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6824:	2300      	movs	r3, #0
   d6826:	461a      	mov	r2, r3
   d6828:	4619      	mov	r1, r3
   d682a:	6840      	ldr	r0, [r0, #4]
   d682c:	f7ff b8d0 	b.w	d59d0 <network_off>

000d6830 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6830:	2200      	movs	r2, #0
   d6832:	f081 0101 	eor.w	r1, r1, #1
   d6836:	6840      	ldr	r0, [r0, #4]
   d6838:	f7ff b8d2 	b.w	d59e0 <network_listen>

000d683c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d683c:	2200      	movs	r2, #0
   d683e:	6840      	ldr	r0, [r0, #4]
   d6840:	f7ff b8de 	b.w	d5a00 <network_set_listen_timeout>

000d6844 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6844:	2200      	movs	r2, #0
   d6846:	4611      	mov	r1, r2
   d6848:	6840      	ldr	r0, [r0, #4]
   d684a:	f7ff b8e1 	b.w	d5a10 <network_get_listen_timeout>

000d684e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d684e:	2200      	movs	r2, #0
   d6850:	4611      	mov	r1, r2
   d6852:	6840      	ldr	r0, [r0, #4]
   d6854:	f7ff b8cc 	b.w	d59f0 <network_listening>

000d6858 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d685c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d685e:	b095      	sub	sp, #84	; 0x54
   d6860:	4616      	mov	r6, r2
   d6862:	460d      	mov	r5, r1
   d6864:	4607      	mov	r7, r0
    IPAddress addr;
   d6866:	f7ff fed1 	bl	d660c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d686a:	4621      	mov	r1, r4
   d686c:	2220      	movs	r2, #32
   d686e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6870:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6872:	f001 fe02 	bl	d847a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6876:	2340      	movs	r3, #64	; 0x40
   d6878:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d687a:	4621      	mov	r1, r4
   d687c:	466b      	mov	r3, sp
   d687e:	aa0c      	add	r2, sp, #48	; 0x30
   d6880:	4630      	mov	r0, r6
   d6882:	f7fe ff37 	bl	d56f4 <netdb_getaddrinfo>
    if (!r) {
   d6886:	4604      	mov	r4, r0
   d6888:	2800      	cmp	r0, #0
   d688a:	d144      	bne.n	d6916 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d688c:	4602      	mov	r2, r0
   d688e:	2101      	movs	r1, #1
   d6890:	6868      	ldr	r0, [r5, #4]
   d6892:	f7ff f88d 	bl	d59b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6896:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6898:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d689a:	4622      	mov	r2, r4
   d689c:	6868      	ldr	r0, [r5, #4]
   d689e:	f7ff f887 	bl	d59b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d68a2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d68a4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d68a6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d68a8:	2e00      	cmp	r6, #0
   d68aa:	d034      	beq.n	d6916 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d68ac:	2900      	cmp	r1, #0
   d68ae:	d132      	bne.n	d6916 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d68b0:	6873      	ldr	r3, [r6, #4]
   d68b2:	2b02      	cmp	r3, #2
   d68b4:	d002      	beq.n	d68bc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d68b6:	2b0a      	cmp	r3, #10
   d68b8:	d009      	beq.n	d68ce <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d68ba:	e02a      	b.n	d6912 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d68bc:	f1b8 0f00 	cmp.w	r8, #0
   d68c0:	d027      	beq.n	d6912 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d68c2:	6971      	ldr	r1, [r6, #20]
   d68c4:	4638      	mov	r0, r7
   d68c6:	3104      	adds	r1, #4
   d68c8:	f7ff fecd 	bl	d6666 <_ZN9IPAddressaSEPKh>
   d68cc:	e020      	b.n	d6910 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d68ce:	f1b9 0f00 	cmp.w	r9, #0
   d68d2:	d01e      	beq.n	d6912 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d68d4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d68d6:	2211      	movs	r2, #17
   d68d8:	a801      	add	r0, sp, #4
   d68da:	f001 fdce 	bl	d847a <memset>
                    a.v = 6;
   d68de:	2306      	movs	r3, #6
   d68e0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d68e4:	ad01      	add	r5, sp, #4
   d68e6:	f104 0308 	add.w	r3, r4, #8
   d68ea:	3418      	adds	r4, #24
   d68ec:	6818      	ldr	r0, [r3, #0]
   d68ee:	6859      	ldr	r1, [r3, #4]
   d68f0:	462a      	mov	r2, r5
   d68f2:	c203      	stmia	r2!, {r0, r1}
   d68f4:	3308      	adds	r3, #8
   d68f6:	42a3      	cmp	r3, r4
   d68f8:	4615      	mov	r5, r2
   d68fa:	d1f7      	bne.n	d68ec <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d68fc:	a901      	add	r1, sp, #4
   d68fe:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6900:	ad07      	add	r5, sp, #28
   d6902:	f7ff fe91 	bl	d6628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6908:	1d3c      	adds	r4, r7, #4
   d690a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d690c:	682b      	ldr	r3, [r5, #0]
   d690e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6910:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6912:	69f6      	ldr	r6, [r6, #28]
   d6914:	e7c8      	b.n	d68a8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6916:	9800      	ldr	r0, [sp, #0]
   d6918:	f7fe fee4 	bl	d56e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d691c:	4638      	mov	r0, r7
   d691e:	b015      	add	sp, #84	; 0x54
   d6920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6924 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6924:	4b02      	ldr	r3, [pc, #8]	; (d6930 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6926:	4a03      	ldr	r2, [pc, #12]	; (d6934 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6928:	601a      	str	r2, [r3, #0]
   d692a:	2200      	movs	r2, #0
   d692c:	605a      	str	r2, [r3, #4]
   d692e:	4770      	bx	lr
   d6930:	2003e53c 	.word	0x2003e53c
   d6934:	000d944c 	.word	0x000d944c

000d6938 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
   d6938:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d693a:	f000 fe9f 	bl	d767c <_Z20__fetch_global_Wire1v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
   d693e:	f7ff fe14 	bl	d656a <_ZN7TwoWire9isEnabledEv>
   d6942:	b918      	cbnz	r0, d694c <_ZN4PMIC5beginEv+0x14>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6944:	f000 fe9a 	bl	d767c <_Z20__fetch_global_Wire1v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
   d6948:	f7ff fdea 	bl	d6520 <_ZN7TwoWire5beginEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d694c:	f000 fe96 	bl	d767c <_Z20__fetch_global_Wire1v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
   d6950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
   d6954:	f7ff be09 	b.w	d656a <_ZN7TwoWire9isEnabledEv>

000d6958 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d6958:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d695a:	f000 fe8f 	bl	d767c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d695e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d6962:	f7ff be06 	b.w	d6572 <_ZN7TwoWire4lockEv>

000d6966 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d6966:	b510      	push	{r4, lr}
   d6968:	4604      	mov	r4, r0
    lock_(_lock)
   d696a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d696c:	b109      	cbz	r1, d6972 <_ZN4PMICC1Eb+0xc>
        lock();
   d696e:	f7ff fff3 	bl	d6958 <_ZN4PMIC4lockEv>
    }
}
   d6972:	4620      	mov	r0, r4
   d6974:	bd10      	pop	{r4, pc}

000d6976 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d6976:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6978:	f000 fe80 	bl	d767c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d697c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d6980:	f7ff be00 	b.w	d6584 <_ZN7TwoWire6unlockEv>

000d6984 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6984:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6986:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6988:	4604      	mov	r4, r0
{
    if (lock_) {
   d698a:	b10b      	cbz	r3, d6990 <_ZN4PMICD1Ev+0xc>
        unlock();
   d698c:	f7ff fff3 	bl	d6976 <_ZN4PMIC6unlockEv>
    }
}
   d6990:	4620      	mov	r0, r4
   d6992:	bd10      	pop	{r4, pc}

000d6994 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6994:	b510      	push	{r4, lr}
   d6996:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6998:	6800      	ldr	r0, [r0, #0]
   d699a:	f7ff ffec 	bl	d6976 <_ZN4PMIC6unlockEv>
   d699e:	4620      	mov	r0, r4
   d69a0:	bd10      	pop	{r4, pc}

000d69a2 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d69a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d69a4:	ac02      	add	r4, sp, #8
   d69a6:	460d      	mov	r5, r1
   d69a8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d69ac:	f7ff ffd4 	bl	d6958 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69b0:	f000 fe64 	bl	d767c <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d69b4:	216b      	movs	r1, #107	; 0x6b
   d69b6:	f7ff fdce 	bl	d6556 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69ba:	f000 fe5f 	bl	d767c <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d69be:	6803      	ldr	r3, [r0, #0]
   d69c0:	4629      	mov	r1, r5
   d69c2:	689b      	ldr	r3, [r3, #8]
   d69c4:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69c6:	f000 fe59 	bl	d767c <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d69ca:	2101      	movs	r1, #1
   d69cc:	f7ff fdc6 	bl	d655c <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69d0:	f000 fe54 	bl	d767c <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d69d4:	2301      	movs	r3, #1
   d69d6:	461a      	mov	r2, r3
   d69d8:	216b      	movs	r1, #107	; 0x6b
   d69da:	f7ff fdb3 	bl	d6544 <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d69de:	f000 fe4d 	bl	d767c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d69e2:	6803      	ldr	r3, [r0, #0]
   d69e4:	695b      	ldr	r3, [r3, #20]
   d69e6:	4798      	blx	r3
   d69e8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d69ea:	4620      	mov	r0, r4
   d69ec:	f7ff ffd2 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d69f0:	b2e8      	uxtb	r0, r5
   d69f2:	b003      	add	sp, #12
   d69f4:	bd30      	pop	{r4, r5, pc}

000d69f6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d69f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d69f8:	ac02      	add	r4, sp, #8
   d69fa:	4615      	mov	r5, r2
   d69fc:	460e      	mov	r6, r1
   d69fe:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d6a02:	f7ff ffa9 	bl	d6958 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6a06:	f000 fe39 	bl	d767c <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d6a0a:	216b      	movs	r1, #107	; 0x6b
   d6a0c:	f7ff fda3 	bl	d6556 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6a10:	f000 fe34 	bl	d767c <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d6a14:	6803      	ldr	r3, [r0, #0]
   d6a16:	4631      	mov	r1, r6
   d6a18:	689b      	ldr	r3, [r3, #8]
   d6a1a:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6a1c:	f000 fe2e 	bl	d767c <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d6a20:	6803      	ldr	r3, [r0, #0]
   d6a22:	4629      	mov	r1, r5
   d6a24:	689b      	ldr	r3, [r3, #8]
   d6a26:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6a28:	f000 fe28 	bl	d767c <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d6a2c:	2101      	movs	r1, #1
   d6a2e:	f7ff fd95 	bl	d655c <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d6a32:	4620      	mov	r0, r4
   d6a34:	f7ff ffae 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d6a38:	b002      	add	sp, #8
   d6a3a:	bd70      	pop	{r4, r5, r6, pc}

000d6a3c <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
   d6a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a3e:	4604      	mov	r4, r0
   d6a40:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6a42:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6a44:	f7ff ff88 	bl	d6958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d6a48:	2100      	movs	r1, #0
   d6a4a:	4620      	mov	r0, r4
   d6a4c:	f7ff ffa9 	bl	d69a2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d6a50:	f241 1358 	movw	r3, #4440	; 0x1158
   d6a54:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
   d6a56:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
   d6a5a:	d05b      	beq.n	d6b14 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
   d6a5c:	d820      	bhi.n	d6aa0 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
   d6a5e:	f241 0318 	movw	r3, #4120	; 0x1018
   d6a62:	429d      	cmp	r5, r3
   d6a64:	d04d      	beq.n	d6b02 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
   d6a66:	d80c      	bhi.n	d6a82 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
   d6a68:	f640 7378 	movw	r3, #3960	; 0xf78
   d6a6c:	429d      	cmp	r5, r3
   d6a6e:	d042      	beq.n	d6af6 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
   d6a70:	f640 73c8 	movw	r3, #4040	; 0xfc8
   d6a74:	429d      	cmp	r5, r3
   d6a76:	d041      	beq.n	d6afc <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
   d6a78:	f640 7328 	movw	r3, #3880	; 0xf28
   d6a7c:	429d      	cmp	r5, r3
   d6a7e:	d160      	bne.n	d6b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
   d6a80:	e059      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
   d6a82:	f241 03b8 	movw	r3, #4280	; 0x10b8
   d6a86:	429d      	cmp	r5, r3
   d6a88:	d03e      	beq.n	d6b08 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
   d6a8a:	f241 1308 	movw	r3, #4360	; 0x1108
   d6a8e:	429d      	cmp	r5, r3
   d6a90:	d03d      	beq.n	d6b0e <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
   d6a92:	f241 0368 	movw	r3, #4200	; 0x1068
   d6a96:	429d      	cmp	r5, r3
   d6a98:	d153      	bne.n	d6b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
   d6a9a:	f042 0220 	orr.w	r2, r2, #32
   d6a9e:	e04a      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d6aa0:	f241 2398 	movw	r3, #4760	; 0x1298
   d6aa4:	429d      	cmp	r5, r3
   d6aa6:	d03e      	beq.n	d6b26 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
   d6aa8:	d80e      	bhi.n	d6ac8 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
   d6aaa:	f241 13f8 	movw	r3, #4600	; 0x11f8
   d6aae:	429d      	cmp	r5, r3
   d6ab0:	d033      	beq.n	d6b1a <_ZN4PMIC20setInputVoltageLimitEt+0xde>
   d6ab2:	f241 2348 	movw	r3, #4680	; 0x1248
   d6ab6:	429d      	cmp	r5, r3
   d6ab8:	d032      	beq.n	d6b20 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
   d6aba:	f241 13a8 	movw	r3, #4520	; 0x11a8
   d6abe:	429d      	cmp	r5, r3
   d6ac0:	d13f      	bne.n	d6b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
   d6ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   d6ac6:	e036      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d6ac8:	f241 3338 	movw	r3, #4920	; 0x1338
   d6acc:	429d      	cmp	r5, r3
   d6ace:	d02d      	beq.n	d6b2c <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
   d6ad0:	d806      	bhi.n	d6ae0 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
   d6ad2:	f241 23e8 	movw	r3, #4840	; 0x12e8
   d6ad6:	429d      	cmp	r5, r3
   d6ad8:	d133      	bne.n	d6b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
   d6ada:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d6ade:	e02a      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d6ae0:	f241 3388 	movw	r3, #5000	; 0x1388
   d6ae4:	429d      	cmp	r5, r3
   d6ae6:	d024      	beq.n	d6b32 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
   d6ae8:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d6aec:	429d      	cmp	r5, r3
   d6aee:	d128      	bne.n	d6b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
   d6af0:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   d6af4:	e01f      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
   d6af6:	f042 0208 	orr.w	r2, r2, #8
   d6afa:	e01c      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
   d6afc:	f042 0210 	orr.w	r2, r2, #16
   d6b00:	e019      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
   d6b02:	f042 0218 	orr.w	r2, r2, #24
   d6b06:	e016      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
   d6b08:	f042 0228 	orr.w	r2, r2, #40	; 0x28
   d6b0c:	e013      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
   d6b0e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   d6b12:	e010      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
   d6b14:	f042 0238 	orr.w	r2, r2, #56	; 0x38
   d6b18:	e00d      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
   d6b1a:	f042 0248 	orr.w	r2, r2, #72	; 0x48
   d6b1e:	e00a      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
   d6b20:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   d6b24:	e007      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
   d6b26:	f042 0258 	orr.w	r2, r2, #88	; 0x58
   d6b2a:	e004      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
   d6b2c:	f042 0268 	orr.w	r2, r2, #104	; 0x68
   d6b30:	e001      	b.n	d6b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
   d6b32:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d6b36:	4620      	mov	r0, r4
   d6b38:	2100      	movs	r1, #0
   d6b3a:	f7ff ff5c 	bl	d69f6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d6b3e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
   d6b40:	e000      	b.n	d6b44 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d6b42:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d6b44:	a801      	add	r0, sp, #4
   d6b46:	f7ff ff25 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	b003      	add	sp, #12
   d6b4e:	bd30      	pop	{r4, r5, pc}

000d6b50 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
   d6b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6b52:	4604      	mov	r4, r0
   d6b54:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b56:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6b58:	f7ff fefe 	bl	d6958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d6b5c:	2100      	movs	r1, #0
   d6b5e:	4620      	mov	r0, r4
   d6b60:	f7ff ff1f 	bl	d69a2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
   d6b64:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
   d6b68:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
   d6b6c:	d023      	beq.n	d6bb6 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
   d6b6e:	d807      	bhi.n	d6b80 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
   d6b70:	2d96      	cmp	r5, #150	; 0x96
   d6b72:	d01a      	beq.n	d6baa <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
   d6b74:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   d6b78:	d01a      	beq.n	d6bb0 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
   d6b7a:	2d64      	cmp	r5, #100	; 0x64
   d6b7c:	d129      	bne.n	d6bd2 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
   d6b7e:	e022      	b.n	d6bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
   d6b80:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d6b84:	429d      	cmp	r5, r3
   d6b86:	d019      	beq.n	d6bbc <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
   d6b88:	d805      	bhi.n	d6b96 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
   d6b8a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   d6b8e:	d120      	bne.n	d6bd2 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
   d6b90:	f042 0204 	orr.w	r2, r2, #4
   d6b94:	e017      	b.n	d6bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
   d6b96:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
   d6b9a:	d012      	beq.n	d6bc2 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
   d6b9c:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d6ba0:	429d      	cmp	r5, r3
   d6ba2:	d116      	bne.n	d6bd2 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
   d6ba4:	f042 0207 	orr.w	r2, r2, #7
   d6ba8:	e00d      	b.n	d6bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
   d6baa:	f042 0201 	orr.w	r2, r2, #1
   d6bae:	e00a      	b.n	d6bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
   d6bb0:	f042 0202 	orr.w	r2, r2, #2
   d6bb4:	e007      	b.n	d6bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
   d6bb6:	f042 0203 	orr.w	r2, r2, #3
   d6bba:	e004      	b.n	d6bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
   d6bbc:	f042 0205 	orr.w	r2, r2, #5
   d6bc0:	e001      	b.n	d6bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
   d6bc2:	f042 0206 	orr.w	r2, r2, #6
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	2100      	movs	r1, #0
   d6bca:	f7ff ff14 	bl	d69f6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d6bce:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
   d6bd0:	e000      	b.n	d6bd4 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d6bd2:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
   d6bd4:	a801      	add	r0, sp, #4
   d6bd6:	f7ff fedd 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d6bda:	4620      	mov	r0, r4
   d6bdc:	b003      	add	sp, #12
   d6bde:	bd30      	pop	{r4, r5, pc}

000d6be0 <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
   d6be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6be2:	ac02      	add	r4, sp, #8
   d6be4:	4605      	mov	r5, r0
   d6be6:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d6bea:	f7ff feb5 	bl	d6958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d6bee:	2101      	movs	r1, #1
   d6bf0:	4628      	mov	r0, r5
   d6bf2:	f7ff fed6 	bl	d69a2 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d6bf6:	2101      	movs	r1, #1
   d6bf8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d6bfc:	4628      	mov	r0, r5
   d6bfe:	f7ff fefa 	bl	d69f6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
   d6c02:	4620      	mov	r0, r4
   d6c04:	f7ff fec6 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
   d6c08:	2001      	movs	r0, #1
   d6c0a:	b003      	add	sp, #12
   d6c0c:	bd30      	pop	{r4, r5, pc}

000d6c0e <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
   d6c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6c10:	460c      	mov	r4, r1
   d6c12:	4605      	mov	r5, r0
   d6c14:	4617      	mov	r7, r2
   d6c16:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c18:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6c1a:	f7ff fe9d 	bl	d6958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
   d6c1e:	2c00      	cmp	r4, #0
   d6c20:	bf0c      	ite	eq
   d6c22:	2400      	moveq	r4, #0
   d6c24:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
   d6c26:	b117      	cbz	r7, d6c2e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
   d6c28:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   d6c2c:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
   d6c2e:	b10e      	cbz	r6, d6c34 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
   d6c30:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
   d6c34:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d6c38:	b10b      	cbz	r3, d6c3e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
   d6c3a:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
   d6c3e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d6c42:	b10b      	cbz	r3, d6c48 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
   d6c44:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
   d6c48:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d6c4c:	b10b      	cbz	r3, d6c52 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
   d6c4e:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d6c52:	2102      	movs	r1, #2
   d6c54:	4628      	mov	r0, r5
   d6c56:	f7ff fea4 	bl	d69a2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
   d6c5a:	f000 0201 	and.w	r2, r0, #1
   d6c5e:	4322      	orrs	r2, r4
   d6c60:	2102      	movs	r1, #2
   d6c62:	4628      	mov	r0, r5
   d6c64:	f7ff fec7 	bl	d69f6 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
   d6c68:	a801      	add	r0, sp, #4
   d6c6a:	f7ff fe93 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
   d6c6e:	2001      	movs	r0, #1
   d6c70:	b003      	add	sp, #12
   d6c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c74 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
   d6c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c76:	4604      	mov	r4, r0
   d6c78:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c7a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6c7c:	f7ff fe6c 	bl	d6958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d6c80:	2104      	movs	r1, #4
   d6c82:	4620      	mov	r0, r4
   d6c84:	f7ff fe8d 	bl	d69a2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
   d6c88:	f241 0310 	movw	r3, #4112	; 0x1010
   d6c8c:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
   d6c8e:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
   d6c92:	d006      	beq.n	d6ca2 <_ZN4PMIC16setChargeVoltageEt+0x2e>
   d6c94:	f241 0370 	movw	r3, #4208	; 0x1070
   d6c98:	429d      	cmp	r5, r3
   d6c9a:	d10a      	bne.n	d6cb2 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d6c9c:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
   d6ca0:	e001      	b.n	d6ca6 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
   d6ca2:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	2104      	movs	r1, #4
   d6caa:	f7ff fea4 	bl	d69f6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d6cae:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
   d6cb0:	e000      	b.n	d6cb4 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
   d6cb2:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d6cb4:	a801      	add	r0, sp, #4
   d6cb6:	f7ff fe6d 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d6cba:	4620      	mov	r0, r4
   d6cbc:	b003      	add	sp, #12
   d6cbe:	bd30      	pop	{r4, r5, pc}

000d6cc0 <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
   d6cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6cc2:	ac02      	add	r4, sp, #8
   d6cc4:	4605      	mov	r5, r0
   d6cc6:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d6cca:	f7ff fe45 	bl	d6958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
   d6cce:	2105      	movs	r1, #5
   d6cd0:	4628      	mov	r0, r5
   d6cd2:	f7ff fe66 	bl	d69a2 <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
   d6cd6:	2105      	movs	r1, #5
   d6cd8:	f000 02ce 	and.w	r2, r0, #206	; 0xce
   d6cdc:	4628      	mov	r0, r5
   d6cde:	f7ff fe8a 	bl	d69f6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
   d6ce2:	4620      	mov	r0, r4
   d6ce4:	f7ff fe56 	bl	d6994 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
   d6ce8:	2001      	movs	r0, #1
   d6cea:	b003      	add	sp, #12
   d6cec:	bd30      	pop	{r4, r5, pc}

000d6cee <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cf0:	4606      	mov	r6, r0
   d6cf2:	460d      	mov	r5, r1
   d6cf4:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6cf6:	2400      	movs	r4, #0
  while (size--) {
   d6cf8:	42bd      	cmp	r5, r7
   d6cfa:	d00c      	beq.n	d6d16 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6cfc:	6833      	ldr	r3, [r6, #0]
   d6cfe:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6d02:	689b      	ldr	r3, [r3, #8]
   d6d04:	4630      	mov	r0, r6
   d6d06:	4798      	blx	r3
     if (chunk>=0)
   d6d08:	2800      	cmp	r0, #0
   d6d0a:	db01      	blt.n	d6d10 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6d0c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6d0e:	e7f3      	b.n	d6cf8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6d10:	2c00      	cmp	r4, #0
   d6d12:	bf08      	it	eq
   d6d14:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6d16:	4620      	mov	r0, r4
   d6d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d1a <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6d1a:	b570      	push	{r4, r5, r6, lr}
   d6d1c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6d1e:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6d20:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6d22:	b149      	cbz	r1, d6d38 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6d24:	f001 fc07 	bl	d8536 <strlen>
   d6d28:	682b      	ldr	r3, [r5, #0]
   d6d2a:	4602      	mov	r2, r0
   d6d2c:	4621      	mov	r1, r4
   d6d2e:	4628      	mov	r0, r5
   d6d30:	68db      	ldr	r3, [r3, #12]
    }
   d6d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6d36:	4718      	bx	r3
    }
   d6d38:	bd70      	pop	{r4, r5, r6, pc}

000d6d3a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6d3a:	6803      	ldr	r3, [r0, #0]
   d6d3c:	689b      	ldr	r3, [r3, #8]
   d6d3e:	4718      	bx	r3

000d6d40 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6d40:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6d42:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6d44:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6d46:	f7ff fff8 	bl	d6d3a <_ZN5Print5printEc>
  n += print('\n');
   d6d4a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6d4c:	4604      	mov	r4, r0
  n += print('\n');
   d6d4e:	4628      	mov	r0, r5
   d6d50:	f7ff fff3 	bl	d6d3a <_ZN5Print5printEc>
  return n;
}
   d6d54:	4420      	add	r0, r4
   d6d56:	bd38      	pop	{r3, r4, r5, pc}

000d6d58 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6d58:	b538      	push	{r3, r4, r5, lr}
   d6d5a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d5c:	f7ff ffdd 	bl	d6d1a <_ZN5Print5writeEPKc>
   d6d60:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6d62:	4628      	mov	r0, r5
   d6d64:	f7ff ffec 	bl	d6d40 <_ZN5Print7printlnEv>
  return n;
}
   d6d68:	4420      	add	r0, r4
   d6d6a:	bd38      	pop	{r3, r4, r5, pc}

000d6d6c <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d6c:	b530      	push	{r4, r5, lr}
   d6d6e:	b08b      	sub	sp, #44	; 0x2c
   d6d70:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6d72:	2100      	movs	r1, #0
   d6d74:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6d78:	2a01      	cmp	r2, #1
   d6d7a:	bf98      	it	ls
   d6d7c:	220a      	movls	r2, #10
   d6d7e:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6d82:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6d86:	fb05 3312 	mls	r3, r5, r2, r3
   d6d8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6d8e:	2b09      	cmp	r3, #9
   d6d90:	bf94      	ite	ls
   d6d92:	3330      	addls	r3, #48	; 0x30
   d6d94:	3337      	addhi	r3, #55	; 0x37
   d6d96:	b2db      	uxtb	r3, r3
   d6d98:	4621      	mov	r1, r4
   d6d9a:	f804 3901 	strb.w	r3, [r4], #-1
   d6d9e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6da0:	2d00      	cmp	r5, #0
   d6da2:	d1ee      	bne.n	d6d82 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6da4:	f7ff ffb9 	bl	d6d1a <_ZN5Print5writeEPKc>
}
   d6da8:	b00b      	add	sp, #44	; 0x2c
   d6daa:	bd30      	pop	{r4, r5, pc}

000d6dac <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6dac:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6dae:	b92a      	cbnz	r2, d6dbc <_ZN5Print5printEmi+0x10>
   d6db0:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6db2:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6db6:	689b      	ldr	r3, [r3, #8]
   d6db8:	b2c9      	uxtb	r1, r1
   d6dba:	4718      	bx	r3
  else return printNumber(n, base);
   d6dbc:	b2d2      	uxtb	r2, r2
}
   d6dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6dc2:	f7ff bfd3 	b.w	d6d6c <_ZN5Print11printNumberEmh>

000d6dc6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6dc6:	f7ff bff1 	b.w	d6dac <_ZN5Print5printEmi>

000d6dca <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6dce:	4607      	mov	r7, r0
   d6dd0:	460e      	mov	r6, r1
  if (base == 0) {
   d6dd2:	4615      	mov	r5, r2
   d6dd4:	b92a      	cbnz	r2, d6de2 <_ZN5Print5printEli+0x18>
    return write(n);
   d6dd6:	6803      	ldr	r3, [r0, #0]
   d6dd8:	b2c9      	uxtb	r1, r1
   d6dda:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6de0:	4718      	bx	r3
  } else if (base == 10) {
   d6de2:	2a0a      	cmp	r2, #10
   d6de4:	d102      	bne.n	d6dec <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6de6:	2900      	cmp	r1, #0
   d6de8:	da01      	bge.n	d6dee <_ZN5Print5printEli+0x24>
   d6dea:	e004      	b.n	d6df6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6dec:	b2d2      	uxtb	r2, r2
  }
}
   d6dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6df2:	f7ff bfbb 	b.w	d6d6c <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6df6:	212d      	movs	r1, #45	; 0x2d
   d6df8:	f7ff ff9f 	bl	d6d3a <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6dfc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6dfe:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6e00:	4271      	negs	r1, r6
   d6e02:	4638      	mov	r0, r7
   d6e04:	f7ff ffb2 	bl	d6d6c <_ZN5Print11printNumberEmh>
   d6e08:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e0e <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6e0e:	f7ff bfdc 	b.w	d6dca <_ZN5Print5printEli>

000d6e12 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6e12:	b510      	push	{r4, lr}
   d6e14:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e16:	f7fe ff9a 	bl	d5d4e <_ZNSt14_Function_baseD1Ev>
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	bd10      	pop	{r4, pc}
	...

000d6e20 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e20:	4803      	ldr	r0, [pc, #12]	; (d6e30 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6e22:	4a04      	ldr	r2, [pc, #16]	; (d6e34 <_GLOBAL__sub_I_RGB+0x14>)
   d6e24:	4904      	ldr	r1, [pc, #16]	; (d6e38 <_GLOBAL__sub_I_RGB+0x18>)
   d6e26:	2300      	movs	r3, #0
   d6e28:	6083      	str	r3, [r0, #8]
   d6e2a:	f000 bc69 	b.w	d7700 <__aeabi_atexit>
   d6e2e:	bf00      	nop
   d6e30:	2003e544 	.word	0x2003e544
   d6e34:	2003e234 	.word	0x2003e234
   d6e38:	000d6e13 	.word	0x000d6e13

000d6e3c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6e3c:	4770      	bx	lr

000d6e3e <_ZN8SPIClassD0Ev>:
   d6e3e:	b510      	push	{r4, lr}
   d6e40:	2110      	movs	r1, #16
   d6e42:	4604      	mov	r4, r0
   d6e44:	f000 fc61 	bl	d770a <_ZdlPvj>
   d6e48:	4620      	mov	r0, r4
   d6e4a:	bd10      	pop	{r4, pc}

000d6e4c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6e4c:	b570      	push	{r4, r5, r6, lr}
   d6e4e:	4b08      	ldr	r3, [pc, #32]	; (d6e70 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6e50:	6003      	str	r3, [r0, #0]
   d6e52:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6e54:	2500      	movs	r5, #0
   d6e56:	460e      	mov	r6, r1
   d6e58:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6e5c:	f7fe fb2a 	bl	d54b4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6e60:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6e62:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6e64:	f7fe fc4e 	bl	d5704 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6e68:	60a5      	str	r5, [r4, #8]
}
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	bd70      	pop	{r4, r5, r6, pc}
   d6e6e:	bf00      	nop
   d6e70:	000d9480 	.word	0x000d9480

000d6e74 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6e74:	7900      	ldrb	r0, [r0, #4]
   d6e76:	f7fe bc4d 	b.w	d5714 <HAL_SPI_Is_Enabled>

000d6e7a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6e7a:	b510      	push	{r4, lr}
   d6e7c:	4604      	mov	r4, r0
{
	free(buffer);
   d6e7e:	6800      	ldr	r0, [r0, #0]
   d6e80:	f7fe fdd6 	bl	d5a30 <free>
}
   d6e84:	4620      	mov	r0, r4
   d6e86:	bd10      	pop	{r4, pc}

000d6e88 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6e88:	b510      	push	{r4, lr}
   d6e8a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6e8c:	6800      	ldr	r0, [r0, #0]
   d6e8e:	b108      	cbz	r0, d6e94 <_ZN6String10invalidateEv+0xc>
   d6e90:	f7fe fdce 	bl	d5a30 <free>
	buffer = NULL;
   d6e94:	2300      	movs	r3, #0
   d6e96:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6e98:	60a3      	str	r3, [r4, #8]
   d6e9a:	6063      	str	r3, [r4, #4]
   d6e9c:	bd10      	pop	{r4, pc}

000d6e9e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6e9e:	b538      	push	{r3, r4, r5, lr}
   d6ea0:	4604      	mov	r4, r0
   d6ea2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6ea4:	6800      	ldr	r0, [r0, #0]
   d6ea6:	3101      	adds	r1, #1
   d6ea8:	f7fe fdca 	bl	d5a40 <realloc>
	if (newbuffer) {
   d6eac:	b110      	cbz	r0, d6eb4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6eae:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6eb2:	2001      	movs	r0, #1
	}
	return 0;
}
   d6eb4:	bd38      	pop	{r3, r4, r5, pc}

000d6eb6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6eb6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6eb8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6eba:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6ebc:	b113      	cbz	r3, d6ec4 <_ZN6String7reserveEj+0xe>
   d6ebe:	6843      	ldr	r3, [r0, #4]
   d6ec0:	428b      	cmp	r3, r1
   d6ec2:	d207      	bcs.n	d6ed4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	f7ff ffea 	bl	d6e9e <_ZN6String12changeBufferEj>
   d6eca:	b120      	cbz	r0, d6ed6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6ecc:	68a3      	ldr	r3, [r4, #8]
   d6ece:	b90b      	cbnz	r3, d6ed4 <_ZN6String7reserveEj+0x1e>
   d6ed0:	6822      	ldr	r2, [r4, #0]
   d6ed2:	7013      	strb	r3, [r2, #0]
   d6ed4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6ed6:	bd10      	pop	{r4, pc}

000d6ed8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6ed8:	b570      	push	{r4, r5, r6, lr}
   d6eda:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6edc:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6ede:	4604      	mov	r4, r0
   d6ee0:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6ee2:	f7ff ffe8 	bl	d6eb6 <_ZN6String7reserveEj>
   d6ee6:	b918      	cbnz	r0, d6ef0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6ee8:	4620      	mov	r0, r4
   d6eea:	f7ff ffcd 	bl	d6e88 <_ZN6String10invalidateEv>
		return *this;
   d6eee:	e009      	b.n	d6f04 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6ef0:	462a      	mov	r2, r5
   d6ef2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6ef4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6ef6:	6820      	ldr	r0, [r4, #0]
   d6ef8:	f001 fab4 	bl	d8464 <memcpy>
	buffer[len] = 0;
   d6efc:	6822      	ldr	r2, [r4, #0]
   d6efe:	68a3      	ldr	r3, [r4, #8]
   d6f00:	2100      	movs	r1, #0
   d6f02:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6f04:	4620      	mov	r0, r4
   d6f06:	bd70      	pop	{r4, r5, r6, pc}

000d6f08 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f08:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f0a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f0c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f0e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f10:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f12:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f14:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6f16:	460d      	mov	r5, r1
   d6f18:	b139      	cbz	r1, d6f2a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6f1a:	4608      	mov	r0, r1
   d6f1c:	f001 fb0b 	bl	d8536 <strlen>
   d6f20:	4629      	mov	r1, r5
   d6f22:	4602      	mov	r2, r0
   d6f24:	4620      	mov	r0, r4
   d6f26:	f7ff ffd7 	bl	d6ed8 <_ZN6String4copyEPKcj>
}
   d6f2a:	4620      	mov	r0, r4
   d6f2c:	bd38      	pop	{r3, r4, r5, pc}

000d6f2e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6f2e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6f30:	b510      	push	{r4, lr}
   d6f32:	460b      	mov	r3, r1
   d6f34:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6f36:	d007      	beq.n	d6f48 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6f38:	6809      	ldr	r1, [r1, #0]
   d6f3a:	b119      	cbz	r1, d6f44 <_ZN6StringaSERKS_+0x16>
   d6f3c:	689a      	ldr	r2, [r3, #8]
   d6f3e:	f7ff ffcb 	bl	d6ed8 <_ZN6String4copyEPKcj>
   d6f42:	e001      	b.n	d6f48 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6f44:	f7ff ffa0 	bl	d6e88 <_ZN6String10invalidateEv>

	return *this;
}
   d6f48:	4620      	mov	r0, r4
   d6f4a:	bd10      	pop	{r4, pc}

000d6f4c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f4c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f4e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f50:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f52:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f54:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f56:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f58:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6f5a:	f7ff ffe8 	bl	d6f2e <_ZN6StringaSERKS_>
}
   d6f5e:	4620      	mov	r0, r4
   d6f60:	bd10      	pop	{r4, pc}

000d6f62 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f62:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f64:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f66:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f68:	b912      	cbnz	r2, d6f70 <_ZNK6String6equalsEPKc+0xe>
   d6f6a:	b919      	cbnz	r1, d6f74 <_ZNK6String6equalsEPKc+0x12>
   d6f6c:	2001      	movs	r0, #1
   d6f6e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6f70:	b911      	cbnz	r1, d6f78 <_ZNK6String6equalsEPKc+0x16>
   d6f72:	6803      	ldr	r3, [r0, #0]
   d6f74:	7818      	ldrb	r0, [r3, #0]
   d6f76:	e002      	b.n	d6f7e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6f78:	6800      	ldr	r0, [r0, #0]
   d6f7a:	f001 faaf 	bl	d84dc <strcmp>
   d6f7e:	fab0 f080 	clz	r0, r0
   d6f82:	0940      	lsrs	r0, r0, #5
}
   d6f84:	bd08      	pop	{r3, pc}

000d6f86 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6f86:	b570      	push	{r4, r5, r6, lr}
   d6f88:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6f8a:	b19a      	cbz	r2, d6fb4 <_ZNK6String8getBytesEPhjj+0x2e>
   d6f8c:	b191      	cbz	r1, d6fb4 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6f8e:	6885      	ldr	r5, [r0, #8]
   d6f90:	429d      	cmp	r5, r3
   d6f92:	d802      	bhi.n	d6f9a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6f94:	2300      	movs	r3, #0
   d6f96:	700b      	strb	r3, [r1, #0]
		return;
   d6f98:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6f9a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6f9c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6f9e:	6801      	ldr	r1, [r0, #0]
   d6fa0:	42ac      	cmp	r4, r5
   d6fa2:	bf28      	it	cs
   d6fa4:	462c      	movcs	r4, r5
   d6fa6:	4419      	add	r1, r3
   d6fa8:	4622      	mov	r2, r4
   d6faa:	4630      	mov	r0, r6
   d6fac:	f001 fae0 	bl	d8570 <strncpy>
	buf[n] = 0;
   d6fb0:	2300      	movs	r3, #0
   d6fb2:	5533      	strb	r3, [r6, r4]
   d6fb4:	bd70      	pop	{r4, r5, r6, pc}

000d6fb6 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d6fb6:	4601      	mov	r1, r0
   d6fb8:	2200      	movs	r2, #0
   d6fba:	208c      	movs	r0, #140	; 0x8c
   d6fbc:	f7fe ba92 	b.w	d54e4 <HAL_Core_System_Reset_Ex>

000d6fc0 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6fc0:	2000      	movs	r0, #0
   d6fc2:	f7ff bff8 	b.w	d6fb6 <_ZN11SystemClass5resetEm>
	...

000d6fc8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d6fc8:	b510      	push	{r4, lr}
   d6fca:	4604      	mov	r4, r0
   d6fcc:	4608      	mov	r0, r1
   d6fce:	4611      	mov	r1, r2
   d6fd0:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d6fd2:	2300      	movs	r3, #0
   d6fd4:	f7fe fc2e 	bl	d5834 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d6fd8:	4b06      	ldr	r3, [pc, #24]	; (d6ff4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d6fda:	2200      	movs	r2, #0
   d6fdc:	701a      	strb	r2, [r3, #0]
   d6fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6fe2:	8058      	strh	r0, [r3, #2]
   d6fe4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d6fe6:	681a      	ldr	r2, [r3, #0]
   d6fe8:	889b      	ldrh	r3, [r3, #4]
   d6fea:	6022      	str	r2, [r4, #0]
   d6fec:	80a3      	strh	r3, [r4, #4]
}
   d6fee:	4620      	mov	r0, r4
   d6ff0:	bd10      	pop	{r4, pc}
   d6ff2:	bf00      	nop
   d6ff4:	2003e554 	.word	0x2003e554

000d6ff8 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d6ff8:	b510      	push	{r4, lr}
   d6ffa:	2400      	movs	r4, #0
   d6ffc:	7004      	strb	r4, [r0, #0]
   d6ffe:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d7000:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7002:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d7006:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d7008:	dd07      	ble.n	d701a <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d700a:	3901      	subs	r1, #1
   d700c:	4299      	cmp	r1, r3
   d700e:	d209      	bcs.n	d7024 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d7010:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d7014:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d7016:	2301      	movs	r3, #1
   d7018:	e001      	b.n	d701e <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d701a:	d102      	bne.n	d7022 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d701c:	2302      	movs	r3, #2
   d701e:	7003      	strb	r3, [r0, #0]
   d7020:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d7022:	8041      	strh	r1, [r0, #2]
    }
}
   d7024:	bd10      	pop	{r4, pc}
	...

000d7028 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7028:	b570      	push	{r4, r5, r6, lr}
   d702a:	b086      	sub	sp, #24
   d702c:	4616      	mov	r6, r2
   d702e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7030:	2300      	movs	r3, #0
   d7032:	9302      	str	r3, [sp, #8]
   d7034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7036:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7038:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d703a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d703c:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d703e:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7042:	4631      	mov	r1, r6
   d7044:	4628      	mov	r0, r5
   d7046:	f7fe fc31 	bl	d58ac <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d704a:	4633      	mov	r3, r6
   d704c:	462a      	mov	r2, r5
   d704e:	4601      	mov	r1, r0
   d7050:	a804      	add	r0, sp, #16
   d7052:	f7ff ffd1 	bl	d6ff8 <_ZN11SleepResultC1EiPKtj>
   d7056:	4b06      	ldr	r3, [pc, #24]	; (d7070 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d7058:	9804      	ldr	r0, [sp, #16]
   d705a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d705e:	6018      	str	r0, [r3, #0]
   d7060:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d7062:	681a      	ldr	r2, [r3, #0]
   d7064:	889b      	ldrh	r3, [r3, #4]
   d7066:	6022      	str	r2, [r4, #0]
}
   d7068:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d706a:	80a3      	strh	r3, [r4, #4]
}
   d706c:	b006      	add	sp, #24
   d706e:	bd70      	pop	{r4, r5, r6, pc}
   d7070:	2003e554 	.word	0x2003e554

000d7074 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7074:	4b04      	ldr	r3, [pc, #16]	; (d7088 <_GLOBAL__sub_I_System+0x14>)
   d7076:	2000      	movs	r0, #0
   d7078:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d707c:	7018      	strb	r0, [r3, #0]
   d707e:	8058      	strh	r0, [r3, #2]
   d7080:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7082:	f7fe bbc7 	b.w	d5814 <set_system_mode>
   d7086:	bf00      	nop
   d7088:	2003e554 	.word	0x2003e554

000d708c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d708c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d708e:	4b14      	ldr	r3, [pc, #80]	; (d70e0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7090:	4f14      	ldr	r7, [pc, #80]	; (d70e4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7092:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7094:	4b14      	ldr	r3, [pc, #80]	; (d70e8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7096:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7098:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d709a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d709c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d709e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d70a0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d70a2:	d01b      	beq.n	d70dc <_ZL22Refresh_UnixTime_Cachel+0x50>
   d70a4:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d70a6:	ad01      	add	r5, sp, #4
   d70a8:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d70ac:	f001 f8e2 	bl	d8274 <localtime>
	calendar_time->tm_year += 1900;
   d70b0:	6943      	ldr	r3, [r0, #20]
   d70b2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d70b6:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d70b8:	4604      	mov	r4, r0
   d70ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d70bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d70be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d70c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d70c2:	f8d4 e000 	ldr.w	lr, [r4]
   d70c6:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d70ca:	ad01      	add	r5, sp, #4
   d70cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70ce:	4c07      	ldr	r4, [pc, #28]	; (d70ec <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d70d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d70d6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d70d8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d70dc:	b00b      	add	sp, #44	; 0x2c
   d70de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d70e0:	2003e58c 	.word	0x2003e58c
   d70e4:	2003e588 	.word	0x2003e588
   d70e8:	2003e584 	.word	0x2003e584
   d70ec:	2003e55c 	.word	0x2003e55c

000d70f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d70f0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d70f2:	2000      	movs	r0, #0
   d70f4:	f7fe fc34 	bl	d5960 <spark_sync_time_pending>
   d70f8:	b128      	cbz	r0, d7106 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d70fa:	f7fe fc09 	bl	d5910 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d70fe:	f080 0001 	eor.w	r0, r0, #1
   d7102:	b2c0      	uxtb	r0, r0
   d7104:	bd08      	pop	{r3, pc}
   d7106:	2001      	movs	r0, #1
    }
   d7108:	bd08      	pop	{r3, pc}
	...

000d710c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d710c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7110:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7118:	d40f      	bmi.n	d713a <_ZN9TimeClass4zoneEf+0x2e>
   d711a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d711e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7126:	dc08      	bgt.n	d713a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7128:	eddf 7a04 	vldr	s15, [pc, #16]	; d713c <_ZN9TimeClass4zoneEf+0x30>
   d712c:	4b04      	ldr	r3, [pc, #16]	; (d7140 <_ZN9TimeClass4zoneEf+0x34>)
   d712e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7132:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d7136:	ed83 0a00 	vstr	s0, [r3]
   d713a:	4770      	bx	lr
   d713c:	45610000 	.word	0x45610000
   d7140:	2003e58c 	.word	0x2003e58c

000d7144 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7144:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d7146:	4b0e      	ldr	r3, [pc, #56]	; (d7180 <_ZN9TimeClass7timeStrEl+0x3c>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	4419      	add	r1, r3
   d714c:	4b0d      	ldr	r3, [pc, #52]	; (d7184 <_ZN9TimeClass7timeStrEl+0x40>)
   d714e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7150:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d7152:	a802      	add	r0, sp, #8
   d7154:	4419      	add	r1, r3
   d7156:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d715a:	f001 f88b 	bl	d8274 <localtime>
        char* ascstr = asctime(calendar_time);
   d715e:	f001 f83b 	bl	d81d8 <asctime>
   d7162:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d7164:	f001 f9e7 	bl	d8536 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d7168:	4428      	add	r0, r5
   d716a:	2300      	movs	r3, #0
   d716c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7170:	4629      	mov	r1, r5
   d7172:	4620      	mov	r0, r4
   d7174:	f7ff fec8 	bl	d6f08 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7178:	4620      	mov	r0, r4
   d717a:	b003      	add	sp, #12
   d717c:	bd30      	pop	{r4, r5, pc}
   d717e:	bf00      	nop
   d7180:	2003e58c 	.word	0x2003e58c
   d7184:	2003e584 	.word	0x2003e584

000d7188 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7188:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d718a:	2000      	movs	r0, #0
   d718c:	f7fe f9f2 	bl	d5574 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7190:	4604      	mov	r4, r0
   d7192:	b968      	cbnz	r0, d71b0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7194:	f7fe fb36 	bl	d5804 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7198:	2801      	cmp	r0, #1
   d719a:	d10b      	bne.n	d71b4 <_ZN9TimeClass7isValidEv+0x2c>
   d719c:	4620      	mov	r0, r4
   d719e:	f7fe fb69 	bl	d5874 <system_thread_get_state>
   d71a2:	b938      	cbnz	r0, d71b4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d71a4:	f7ff ffa4 	bl	d70f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d71a8:	b930      	cbnz	r0, d71b8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d71aa:	f7fe fb99 	bl	d58e0 <spark_process>
   d71ae:	e7f9      	b.n	d71a4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d71b0:	2001      	movs	r0, #1
   d71b2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d71b4:	2000      	movs	r0, #0
   d71b6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d71b8:	f7ff ff9a 	bl	d70f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d71bc:	2000      	movs	r0, #0
   d71be:	f7fe f9d9 	bl	d5574 <HAL_RTC_Time_Is_Valid>
   d71c2:	3000      	adds	r0, #0
   d71c4:	bf18      	it	ne
   d71c6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d71c8:	bd10      	pop	{r4, pc}

000d71ca <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d71ca:	b508      	push	{r3, lr}
    (void)isValid();
   d71cc:	f7ff ffdc 	bl	d7188 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d71d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d71d4:	f7fe b9a6 	b.w	d5524 <HAL_RTC_Get_UnixTime>

000d71d8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d71d8:	b508      	push	{r3, lr}
	return hour(now());
   d71da:	f7ff fff6 	bl	d71ca <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d71de:	f7ff ff55 	bl	d708c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d71e2:	4b01      	ldr	r3, [pc, #4]	; (d71e8 <_ZN9TimeClass4hourEv+0x10>)
   d71e4:	6898      	ldr	r0, [r3, #8]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	2003e55c 	.word	0x2003e55c

000d71ec <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d71ec:	b508      	push	{r3, lr}
	return minute(now());
   d71ee:	f7ff ffec 	bl	d71ca <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d71f2:	f7ff ff4b 	bl	d708c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d71f6:	4b01      	ldr	r3, [pc, #4]	; (d71fc <_ZN9TimeClass6minuteEv+0x10>)
   d71f8:	6858      	ldr	r0, [r3, #4]
   d71fa:	bd08      	pop	{r3, pc}
   d71fc:	2003e55c 	.word	0x2003e55c

000d7200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7200:	4b02      	ldr	r3, [pc, #8]	; (d720c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7202:	681a      	ldr	r2, [r3, #0]
   d7204:	4b02      	ldr	r3, [pc, #8]	; (d7210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7206:	601a      	str	r2, [r3, #0]
   d7208:	4770      	bx	lr
   d720a:	bf00      	nop
   d720c:	2003e17c 	.word	0x2003e17c
   d7210:	2003e580 	.word	0x2003e580

000d7214 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7214:	4770      	bx	lr

000d7216 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7216:	7441      	strb	r1, [r0, #17]
   d7218:	4770      	bx	lr

000d721a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d721a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d721c:	7c00      	ldrb	r0, [r0, #16]
   d721e:	f7fe fab9 	bl	d5794 <HAL_USART_Available_Data_For_Write>
}
   d7222:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7226:	bd08      	pop	{r3, pc}

000d7228 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7228:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d722a:	7c00      	ldrb	r0, [r0, #16]
   d722c:	f7fe fa8a 	bl	d5744 <HAL_USART_Available_Data>
}
   d7230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7234:	bd08      	pop	{r3, pc}

000d7236 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7236:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7238:	7c00      	ldrb	r0, [r0, #16]
   d723a:	f7fe fa93 	bl	d5764 <HAL_USART_Peek_Data>
}
   d723e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7242:	bf28      	it	cs
   d7244:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7248:	bd08      	pop	{r3, pc}

000d724a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d724a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d724c:	7c00      	ldrb	r0, [r0, #16]
   d724e:	f7fe fa81 	bl	d5754 <HAL_USART_Read_Data>
}
   d7252:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7256:	bf28      	it	cs
   d7258:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d725c:	bd08      	pop	{r3, pc}

000d725e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d725e:	7c00      	ldrb	r0, [r0, #16]
   d7260:	f7fe ba88 	b.w	d5774 <HAL_USART_Flush_Data>

000d7264 <_ZN11USARTSerialD0Ev>:
   d7264:	b510      	push	{r4, lr}
   d7266:	2114      	movs	r1, #20
   d7268:	4604      	mov	r4, r0
   d726a:	f000 fa4e 	bl	d770a <_ZdlPvj>
   d726e:	4620      	mov	r0, r4
   d7270:	bd10      	pop	{r4, pc}

000d7272 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7272:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7274:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7276:	4604      	mov	r4, r0
   d7278:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d727a:	b925      	cbnz	r5, d7286 <_ZN11USARTSerial5writeEh+0x14>
   d727c:	7c00      	ldrb	r0, [r0, #16]
   d727e:	f7fe fa89 	bl	d5794 <HAL_USART_Available_Data_For_Write>
   d7282:	2800      	cmp	r0, #0
   d7284:	dd05      	ble.n	d7292 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7286:	4631      	mov	r1, r6
   d7288:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d728a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d728e:	f7fe ba51 	b.w	d5734 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7292:	4628      	mov	r0, r5
   d7294:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7298 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7298:	b510      	push	{r4, lr}
   d729a:	4604      	mov	r4, r0
   d729c:	4608      	mov	r0, r1
   d729e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d72a0:	2200      	movs	r2, #0
   d72a2:	6062      	str	r2, [r4, #4]
   d72a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d72a8:	60a2      	str	r2, [r4, #8]
   d72aa:	4a05      	ldr	r2, [pc, #20]	; (d72c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d72ac:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d72ae:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d72b0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d72b2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d72b4:	461a      	mov	r2, r3
   d72b6:	f7fe fa35 	bl	d5724 <HAL_USART_Init>
}
   d72ba:	4620      	mov	r0, r4
   d72bc:	bd10      	pop	{r4, pc}
   d72be:	bf00      	nop
   d72c0:	000d94b8 	.word	0x000d94b8

000d72c4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d72c4:	7c00      	ldrb	r0, [r0, #16]
   d72c6:	f7fe ba5d 	b.w	d5784 <HAL_USART_Is_Enabled>
	...

000d72cc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d72cc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d72ce:	4d0c      	ldr	r5, [pc, #48]	; (d7300 <_Z22__fetch_global_Serial1v+0x34>)
   d72d0:	6829      	ldr	r1, [r5, #0]
   d72d2:	f011 0401 	ands.w	r4, r1, #1
   d72d6:	d111      	bne.n	d72fc <_Z22__fetch_global_Serial1v+0x30>
   d72d8:	4628      	mov	r0, r5
   d72da:	f7fc fee4 	bl	d40a6 <__cxa_guard_acquire>
   d72de:	b168      	cbz	r0, d72fc <_Z22__fetch_global_Serial1v+0x30>
   d72e0:	4a08      	ldr	r2, [pc, #32]	; (d7304 <_Z22__fetch_global_Serial1v+0x38>)
   d72e2:	4b09      	ldr	r3, [pc, #36]	; (d7308 <_Z22__fetch_global_Serial1v+0x3c>)
   d72e4:	4809      	ldr	r0, [pc, #36]	; (d730c <_Z22__fetch_global_Serial1v+0x40>)
   d72e6:	4621      	mov	r1, r4
   d72e8:	f7ff ffd6 	bl	d7298 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d72ec:	4628      	mov	r0, r5
   d72ee:	f7fc fedf 	bl	d40b0 <__cxa_guard_release>
   d72f2:	4a07      	ldr	r2, [pc, #28]	; (d7310 <_Z22__fetch_global_Serial1v+0x44>)
   d72f4:	4907      	ldr	r1, [pc, #28]	; (d7314 <_Z22__fetch_global_Serial1v+0x48>)
   d72f6:	4805      	ldr	r0, [pc, #20]	; (d730c <_Z22__fetch_global_Serial1v+0x40>)
   d72f8:	f000 fa02 	bl	d7700 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d72fc:	4803      	ldr	r0, [pc, #12]	; (d730c <_Z22__fetch_global_Serial1v+0x40>)
   d72fe:	bd38      	pop	{r3, r4, r5, pc}
   d7300:	2003e628 	.word	0x2003e628
   d7304:	2003e62c 	.word	0x2003e62c
   d7308:	2003e5a4 	.word	0x2003e5a4
   d730c:	2003e590 	.word	0x2003e590
   d7310:	2003e234 	.word	0x2003e234
   d7314:	000d7215 	.word	0x000d7215

000d7318 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7318:	7441      	strb	r1, [r0, #17]
   d731a:	4770      	bx	lr

000d731c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d731c:	4770      	bx	lr

000d731e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d731e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7320:	2100      	movs	r1, #0
   d7322:	7c00      	ldrb	r0, [r0, #16]
   d7324:	f7fe fa56 	bl	d57d4 <HAL_USB_USART_Receive_Data>
}
   d7328:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d732c:	bf28      	it	cs
   d732e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7332:	bd08      	pop	{r3, pc}

000d7334 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7334:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7336:	2101      	movs	r1, #1
   d7338:	7c00      	ldrb	r0, [r0, #16]
   d733a:	f7fe fa4b 	bl	d57d4 <HAL_USB_USART_Receive_Data>
}
   d733e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7342:	bf28      	it	cs
   d7344:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7348:	bd08      	pop	{r3, pc}

000d734a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d734a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d734c:	7c00      	ldrb	r0, [r0, #16]
   d734e:	f7fe fa39 	bl	d57c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7352:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7356:	bd08      	pop	{r3, pc}

000d7358 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7358:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d735a:	7c00      	ldrb	r0, [r0, #16]
   d735c:	f7fe fa2a 	bl	d57b4 <HAL_USB_USART_Available_Data>
}
   d7360:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7364:	bd08      	pop	{r3, pc}

000d7366 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7366:	7c00      	ldrb	r0, [r0, #16]
   d7368:	f7fe ba44 	b.w	d57f4 <HAL_USB_USART_Flush_Data>

000d736c <_ZN9USBSerialD0Ev>:
   d736c:	b510      	push	{r4, lr}
   d736e:	2114      	movs	r1, #20
   d7370:	4604      	mov	r4, r0
   d7372:	f000 f9ca 	bl	d770a <_ZdlPvj>
   d7376:	4620      	mov	r0, r4
   d7378:	bd10      	pop	{r4, pc}

000d737a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d737a:	b538      	push	{r3, r4, r5, lr}
   d737c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d737e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7380:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7382:	f7fe fa1f 	bl	d57c4 <HAL_USB_USART_Available_Data_For_Write>
   d7386:	2800      	cmp	r0, #0
   d7388:	dc01      	bgt.n	d738e <_ZN9USBSerial5writeEh+0x14>
   d738a:	7c60      	ldrb	r0, [r4, #17]
   d738c:	b128      	cbz	r0, d739a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d738e:	4629      	mov	r1, r5
   d7390:	7c20      	ldrb	r0, [r4, #16]
   d7392:	f7fe fa27 	bl	d57e4 <HAL_USB_USART_Send_Data>
   d7396:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d739a:	bd38      	pop	{r3, r4, r5, pc}

000d739c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d739c:	b510      	push	{r4, lr}
   d739e:	4604      	mov	r4, r0
   d73a0:	2300      	movs	r3, #0
   d73a2:	6063      	str	r3, [r4, #4]
   d73a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d73a8:	60a3      	str	r3, [r4, #8]
   d73aa:	4b05      	ldr	r3, [pc, #20]	; (d73c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d73ac:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d73ae:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d73b0:	4608      	mov	r0, r1
{
  _serial = serial;
   d73b2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d73b4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d73b6:	4611      	mov	r1, r2
   d73b8:	f7fe f9f4 	bl	d57a4 <HAL_USB_USART_Init>
}
   d73bc:	4620      	mov	r0, r4
   d73be:	bd10      	pop	{r4, pc}
   d73c0:	000d94e8 	.word	0x000d94e8

000d73c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d73c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d73c6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d73c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d73ca:	2100      	movs	r1, #0
   d73cc:	f001 f855 	bl	d847a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d73d0:	4620      	mov	r0, r4
   d73d2:	bd10      	pop	{r4, pc}

000d73d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d73d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73d6:	4d0e      	ldr	r5, [pc, #56]	; (d7410 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d73d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d73da:	a801      	add	r0, sp, #4
   d73dc:	f7ff fff2 	bl	d73c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73e0:	6829      	ldr	r1, [r5, #0]
   d73e2:	f011 0401 	ands.w	r4, r1, #1
   d73e6:	d110      	bne.n	d740a <_Z16_fetch_usbserialv+0x36>
   d73e8:	4628      	mov	r0, r5
   d73ea:	f7fc fe5c 	bl	d40a6 <__cxa_guard_acquire>
   d73ee:	b160      	cbz	r0, d740a <_Z16_fetch_usbserialv+0x36>
   d73f0:	aa01      	add	r2, sp, #4
   d73f2:	4621      	mov	r1, r4
   d73f4:	4807      	ldr	r0, [pc, #28]	; (d7414 <_Z16_fetch_usbserialv+0x40>)
   d73f6:	f7ff ffd1 	bl	d739c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d73fa:	4628      	mov	r0, r5
   d73fc:	f7fc fe58 	bl	d40b0 <__cxa_guard_release>
   d7400:	4a05      	ldr	r2, [pc, #20]	; (d7418 <_Z16_fetch_usbserialv+0x44>)
   d7402:	4906      	ldr	r1, [pc, #24]	; (d741c <_Z16_fetch_usbserialv+0x48>)
   d7404:	4803      	ldr	r0, [pc, #12]	; (d7414 <_Z16_fetch_usbserialv+0x40>)
   d7406:	f000 f97b 	bl	d7700 <__aeabi_atexit>
	return _usbserial;
}
   d740a:	4802      	ldr	r0, [pc, #8]	; (d7414 <_Z16_fetch_usbserialv+0x40>)
   d740c:	b007      	add	sp, #28
   d740e:	bd30      	pop	{r4, r5, pc}
   d7410:	2003e6b0 	.word	0x2003e6b0
   d7414:	2003e6b4 	.word	0x2003e6b4
   d7418:	2003e234 	.word	0x2003e234
   d741c:	000d731d 	.word	0x000d731d

000d7420 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7420:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7422:	4b0c      	ldr	r3, [pc, #48]	; (d7454 <serialEventRun+0x34>)
   d7424:	b133      	cbz	r3, d7434 <serialEventRun+0x14>
   d7426:	f7ff ffd5 	bl	d73d4 <_Z16_fetch_usbserialv>
   d742a:	6803      	ldr	r3, [r0, #0]
   d742c:	691b      	ldr	r3, [r3, #16]
   d742e:	4798      	blx	r3
   d7430:	2800      	cmp	r0, #0
   d7432:	dc09      	bgt.n	d7448 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7434:	4b08      	ldr	r3, [pc, #32]	; (d7458 <serialEventRun+0x38>)
   d7436:	b163      	cbz	r3, d7452 <serialEventRun+0x32>
   d7438:	f7ff ff48 	bl	d72cc <_Z22__fetch_global_Serial1v>
   d743c:	6803      	ldr	r3, [r0, #0]
   d743e:	691b      	ldr	r3, [r3, #16]
   d7440:	4798      	blx	r3
   d7442:	2800      	cmp	r0, #0
   d7444:	dc03      	bgt.n	d744e <serialEventRun+0x2e>
   d7446:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7448:	f3af 8000 	nop.w
   d744c:	e7f2      	b.n	d7434 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d744e:	f3af 8000 	nop.w
   d7452:	bd08      	pop	{r3, pc}
	...

000d745c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d745c:	b508      	push	{r3, lr}
	serialEventRun();
   d745e:	f7ff ffdf 	bl	d7420 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7462:	f7fe f857 	bl	d5514 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7466:	4b01      	ldr	r3, [pc, #4]	; (d746c <_post_loop+0x10>)
   d7468:	6018      	str	r0, [r3, #0]
   d746a:	bd08      	pop	{r3, pc}
   d746c:	2003e6cc 	.word	0x2003e6cc

000d7470 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7470:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7472:	2300      	movs	r3, #0
   d7474:	9300      	str	r3, [sp, #0]
   d7476:	461a      	mov	r2, r3
   d7478:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d747c:	f7fe fa0c 	bl	d5898 <system_ctrl_set_result>
}
   d7480:	b003      	add	sp, #12
   d7482:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7488 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7488:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d748a:	8843      	ldrh	r3, [r0, #2]
   d748c:	2b0a      	cmp	r3, #10
   d748e:	d008      	beq.n	d74a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7490:	2b50      	cmp	r3, #80	; 0x50
   d7492:	d109      	bne.n	d74a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7494:	4b09      	ldr	r3, [pc, #36]	; (d74bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7496:	681b      	ldr	r3, [r3, #0]
   d7498:	b13b      	cbz	r3, d74aa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d749a:	b003      	add	sp, #12
   d749c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d74a0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d74a2:	f7ff ffe5 	bl	d7470 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d74a6:	e006      	b.n	d74b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d74a8:	2300      	movs	r3, #0
   d74aa:	9300      	str	r3, [sp, #0]
   d74ac:	461a      	mov	r2, r3
   d74ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d74b2:	f7fe f9f1 	bl	d5898 <system_ctrl_set_result>
        break;
    }
}
   d74b6:	b003      	add	sp, #12
   d74b8:	f85d fb04 	ldr.w	pc, [sp], #4
   d74bc:	2003e6c8 	.word	0x2003e6c8

000d74c0 <module_user_init_hook>:

void module_user_init_hook()
{
   d74c0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d74c2:	f7fe f81f 	bl	d5504 <HAL_RNG_GetRandomNumber>
   d74c6:	4604      	mov	r4, r0
    srand(seed);
   d74c8:	f000 ffe0 	bl	d848c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d74cc:	4b07      	ldr	r3, [pc, #28]	; (d74ec <module_user_init_hook+0x2c>)
   d74ce:	b113      	cbz	r3, d74d6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d74d0:	4620      	mov	r0, r4
   d74d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d74d6:	2100      	movs	r1, #0
   d74d8:	4804      	ldr	r0, [pc, #16]	; (d74ec <module_user_init_hook+0x2c>)
   d74da:	f7fe fa49 	bl	d5970 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d74de:	2100      	movs	r1, #0
   d74e0:	4803      	ldr	r0, [pc, #12]	; (d74f0 <module_user_init_hook+0x30>)
}
   d74e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d74e6:	f7fe b9cd 	b.w	d5884 <system_ctrl_set_app_request_handler>
   d74ea:	bf00      	nop
   d74ec:	00000000 	.word	0x00000000
   d74f0:	000d7489 	.word	0x000d7489

000d74f4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d74f4:	b508      	push	{r3, lr}
   d74f6:	4b02      	ldr	r3, [pc, #8]	; (d7500 <spark_protocol_instance+0xc>)
   d74f8:	681b      	ldr	r3, [r3, #0]
   d74fa:	681b      	ldr	r3, [r3, #0]
   d74fc:	9301      	str	r3, [sp, #4]
   d74fe:	bd08      	pop	{r3, pc}
   d7500:	0003025c 	.word	0x0003025c

000d7504 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7504:	b508      	push	{r3, lr}
   d7506:	4b02      	ldr	r3, [pc, #8]	; (d7510 <spark_protocol_set_product_id+0xc>)
   d7508:	681b      	ldr	r3, [r3, #0]
   d750a:	685b      	ldr	r3, [r3, #4]
   d750c:	9301      	str	r3, [sp, #4]
   d750e:	bd08      	pop	{r3, pc}
   d7510:	0003025c 	.word	0x0003025c

000d7514 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7514:	b508      	push	{r3, lr}
   d7516:	4b02      	ldr	r3, [pc, #8]	; (d7520 <spark_protocol_set_product_firmware_version+0xc>)
   d7518:	681b      	ldr	r3, [r3, #0]
   d751a:	689b      	ldr	r3, [r3, #8]
   d751c:	9301      	str	r3, [sp, #4]
   d751e:	bd08      	pop	{r3, pc}
   d7520:	0003025c 	.word	0x0003025c

000d7524 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7524:	b510      	push	{r4, lr}
   d7526:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7528:	480f      	ldr	r0, [pc, #60]	; (d7568 <pinAvailable+0x44>)
   d752a:	f7ff fca3 	bl	d6e74 <_ZN8SPIClass9isEnabledEv>
   d752e:	b128      	cbz	r0, d753c <pinAvailable+0x18>
   d7530:	f1a4 030b 	sub.w	r3, r4, #11
   d7534:	2b02      	cmp	r3, #2
   d7536:	d801      	bhi.n	d753c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7538:	2000      	movs	r0, #0
   d753a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d753c:	f000 f87e 	bl	d763c <_Z19__fetch_global_Wirev>
   d7540:	f7ff f813 	bl	d656a <_ZN7TwoWire9isEnabledEv>
   d7544:	b108      	cbz	r0, d754a <pinAvailable+0x26>
   d7546:	2c01      	cmp	r4, #1
   d7548:	d9f6      	bls.n	d7538 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d754a:	f7ff febf 	bl	d72cc <_Z22__fetch_global_Serial1v>
   d754e:	f7ff feb9 	bl	d72c4 <_ZN11USARTSerial9isEnabledEv>
   d7552:	b118      	cbz	r0, d755c <pinAvailable+0x38>
   d7554:	f1a4 0309 	sub.w	r3, r4, #9
   d7558:	2b01      	cmp	r3, #1
   d755a:	d9ed      	bls.n	d7538 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d755c:	2c23      	cmp	r4, #35	; 0x23
   d755e:	bf8c      	ite	hi
   d7560:	2000      	movhi	r0, #0
   d7562:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7564:	bd10      	pop	{r4, pc}
   d7566:	bf00      	nop
   d7568:	2003e708 	.word	0x2003e708

000d756c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d756c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d756e:	b538      	push	{r3, r4, r5, lr}
   d7570:	4604      	mov	r4, r0
   d7572:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7574:	d80a      	bhi.n	d758c <pinMode+0x20>
   d7576:	29ff      	cmp	r1, #255	; 0xff
   d7578:	d008      	beq.n	d758c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d757a:	f7ff ffd3 	bl	d7524 <pinAvailable>
   d757e:	b128      	cbz	r0, d758c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7580:	4629      	mov	r1, r5
   d7582:	4620      	mov	r0, r4
}
   d7584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7588:	f7fe b814 	b.w	d55b4 <HAL_Pin_Mode>
   d758c:	bd38      	pop	{r3, r4, r5, pc}

000d758e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d758e:	b538      	push	{r3, r4, r5, lr}
   d7590:	4604      	mov	r4, r0
   d7592:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7594:	f7fe f816 	bl	d55c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7598:	28ff      	cmp	r0, #255	; 0xff
   d759a:	d010      	beq.n	d75be <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d759c:	2806      	cmp	r0, #6
   d759e:	d804      	bhi.n	d75aa <digitalWrite+0x1c>
   d75a0:	234d      	movs	r3, #77	; 0x4d
   d75a2:	fa23 f000 	lsr.w	r0, r3, r0
   d75a6:	07c3      	lsls	r3, r0, #31
   d75a8:	d409      	bmi.n	d75be <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d75aa:	4620      	mov	r0, r4
   d75ac:	f7ff ffba 	bl	d7524 <pinAvailable>
   d75b0:	b128      	cbz	r0, d75be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d75b2:	4629      	mov	r1, r5
   d75b4:	4620      	mov	r0, r4
}
   d75b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d75ba:	f7fe b80b 	b.w	d55d4 <HAL_GPIO_Write>
   d75be:	bd38      	pop	{r3, r4, r5, pc}

000d75c0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d75c0:	b510      	push	{r4, lr}
   d75c2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d75c4:	f7fd fffe 	bl	d55c4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d75c8:	3804      	subs	r0, #4
   d75ca:	b2c0      	uxtb	r0, r0
   d75cc:	2801      	cmp	r0, #1
   d75ce:	d908      	bls.n	d75e2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d75d0:	4620      	mov	r0, r4
   d75d2:	f7ff ffa7 	bl	d7524 <pinAvailable>
   d75d6:	b120      	cbz	r0, d75e2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d75d8:	4620      	mov	r0, r4
}
   d75da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d75de:	f7fe b801 	b.w	d55e4 <HAL_GPIO_Read>
}
   d75e2:	2000      	movs	r0, #0
   d75e4:	bd10      	pop	{r4, pc}

000d75e6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d75e6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d75e8:	b510      	push	{r4, lr}
   d75ea:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d75ec:	bf9c      	itt	ls
   d75ee:	340e      	addls	r4, #14
   d75f0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d75f2:	4620      	mov	r0, r4
   d75f4:	f7ff ff96 	bl	d7524 <pinAvailable>
   d75f8:	b150      	cbz	r0, d7610 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d75fa:	2103      	movs	r1, #3
   d75fc:	4620      	mov	r0, r4
   d75fe:	f7fd ffd1 	bl	d55a4 <HAL_Validate_Pin_Function>
   d7602:	2803      	cmp	r0, #3
   d7604:	d104      	bne.n	d7610 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7606:	4620      	mov	r0, r4
}
   d7608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d760c:	f7fd bff2 	b.w	d55f4 <HAL_ADC_Read>
}
   d7610:	2000      	movs	r0, #0
   d7612:	bd10      	pop	{r4, pc}

000d7614 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7614:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7616:	4c07      	ldr	r4, [pc, #28]	; (d7634 <_Z21__fetch_global_EEPROMv+0x20>)
   d7618:	6823      	ldr	r3, [r4, #0]
   d761a:	07db      	lsls	r3, r3, #31
   d761c:	d408      	bmi.n	d7630 <_Z21__fetch_global_EEPROMv+0x1c>
   d761e:	4620      	mov	r0, r4
   d7620:	f7fc fd41 	bl	d40a6 <__cxa_guard_acquire>
   d7624:	b120      	cbz	r0, d7630 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7626:	f7fd ff85 	bl	d5534 <HAL_EEPROM_Init>
   d762a:	4620      	mov	r0, r4
   d762c:	f7fc fd40 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7630:	4801      	ldr	r0, [pc, #4]	; (d7638 <_Z21__fetch_global_EEPROMv+0x24>)
   d7632:	bd10      	pop	{r4, pc}
   d7634:	2003e6d0 	.word	0x2003e6d0
   d7638:	2003e6d4 	.word	0x2003e6d4

000d763c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d763c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d763e:	4d0b      	ldr	r5, [pc, #44]	; (d766c <_Z19__fetch_global_Wirev+0x30>)
   d7640:	6829      	ldr	r1, [r5, #0]
   d7642:	f011 0401 	ands.w	r4, r1, #1
   d7646:	d10f      	bne.n	d7668 <_Z19__fetch_global_Wirev+0x2c>
   d7648:	4628      	mov	r0, r5
   d764a:	f7fc fd2c 	bl	d40a6 <__cxa_guard_acquire>
   d764e:	b158      	cbz	r0, d7668 <_Z19__fetch_global_Wirev+0x2c>
   d7650:	4621      	mov	r1, r4
   d7652:	4807      	ldr	r0, [pc, #28]	; (d7670 <_Z19__fetch_global_Wirev+0x34>)
   d7654:	f7fe ff52 	bl	d64fc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7658:	4628      	mov	r0, r5
   d765a:	f7fc fd29 	bl	d40b0 <__cxa_guard_release>
   d765e:	4a05      	ldr	r2, [pc, #20]	; (d7674 <_Z19__fetch_global_Wirev+0x38>)
   d7660:	4905      	ldr	r1, [pc, #20]	; (d7678 <_Z19__fetch_global_Wirev+0x3c>)
   d7662:	4803      	ldr	r0, [pc, #12]	; (d7670 <_Z19__fetch_global_Wirev+0x34>)
   d7664:	f000 f84c 	bl	d7700 <__aeabi_atexit>
	return wire;
}
   d7668:	4801      	ldr	r0, [pc, #4]	; (d7670 <_Z19__fetch_global_Wirev+0x34>)
   d766a:	bd38      	pop	{r3, r4, r5, pc}
   d766c:	2003e6d8 	.word	0x2003e6d8
   d7670:	2003e6f0 	.word	0x2003e6f0
   d7674:	2003e234 	.word	0x2003e234
   d7678:	000d64a5 	.word	0x000d64a5

000d767c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d767c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d767e:	4c0b      	ldr	r4, [pc, #44]	; (d76ac <_Z20__fetch_global_Wire1v+0x30>)
   d7680:	6823      	ldr	r3, [r4, #0]
   d7682:	07db      	lsls	r3, r3, #31
   d7684:	d40f      	bmi.n	d76a6 <_Z20__fetch_global_Wire1v+0x2a>
   d7686:	4620      	mov	r0, r4
   d7688:	f7fc fd0d 	bl	d40a6 <__cxa_guard_acquire>
   d768c:	b158      	cbz	r0, d76a6 <_Z20__fetch_global_Wire1v+0x2a>
   d768e:	2101      	movs	r1, #1
   d7690:	4807      	ldr	r0, [pc, #28]	; (d76b0 <_Z20__fetch_global_Wire1v+0x34>)
   d7692:	f7fe ff33 	bl	d64fc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7696:	4620      	mov	r0, r4
   d7698:	f7fc fd0a 	bl	d40b0 <__cxa_guard_release>
   d769c:	4a05      	ldr	r2, [pc, #20]	; (d76b4 <_Z20__fetch_global_Wire1v+0x38>)
   d769e:	4906      	ldr	r1, [pc, #24]	; (d76b8 <_Z20__fetch_global_Wire1v+0x3c>)
   d76a0:	4803      	ldr	r0, [pc, #12]	; (d76b0 <_Z20__fetch_global_Wire1v+0x34>)
   d76a2:	f000 f82d 	bl	d7700 <__aeabi_atexit>
	return wire;
}
   d76a6:	4802      	ldr	r0, [pc, #8]	; (d76b0 <_Z20__fetch_global_Wire1v+0x34>)
   d76a8:	bd10      	pop	{r4, pc}
   d76aa:	bf00      	nop
   d76ac:	2003e704 	.word	0x2003e704
   d76b0:	2003e6dc 	.word	0x2003e6dc
   d76b4:	2003e234 	.word	0x2003e234
   d76b8:	000d64a5 	.word	0x000d64a5

000d76bc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d76bc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d76be:	4c0c      	ldr	r4, [pc, #48]	; (d76f0 <_GLOBAL__sub_I_SPI+0x34>)
   d76c0:	4e0c      	ldr	r6, [pc, #48]	; (d76f4 <_GLOBAL__sub_I_SPI+0x38>)
   d76c2:	4d0d      	ldr	r5, [pc, #52]	; (d76f8 <_GLOBAL__sub_I_SPI+0x3c>)
   d76c4:	2100      	movs	r1, #0
   d76c6:	4620      	mov	r0, r4
   d76c8:	f7ff fbc0 	bl	d6e4c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d76cc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d76ce:	4c0b      	ldr	r4, [pc, #44]	; (d76fc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d76d0:	4632      	mov	r2, r6
   d76d2:	4629      	mov	r1, r5
   d76d4:	f000 f814 	bl	d7700 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d76d8:	2101      	movs	r1, #1
   d76da:	4620      	mov	r0, r4
   d76dc:	f7ff fbb6 	bl	d6e4c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d76e0:	4632      	mov	r2, r6
   d76e2:	4629      	mov	r1, r5
   d76e4:	4620      	mov	r0, r4
   d76e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d76ea:	f000 b809 	b.w	d7700 <__aeabi_atexit>
   d76ee:	bf00      	nop
   d76f0:	2003e708 	.word	0x2003e708
   d76f4:	2003e234 	.word	0x2003e234
   d76f8:	000d6e3d 	.word	0x000d6e3d
   d76fc:	2003e718 	.word	0x2003e718

000d7700 <__aeabi_atexit>:
   d7700:	460b      	mov	r3, r1
   d7702:	4601      	mov	r1, r0
   d7704:	4618      	mov	r0, r3
   d7706:	f000 bda7 	b.w	d8258 <__cxa_atexit>

000d770a <_ZdlPvj>:
   d770a:	f7fc bcc8 	b.w	d409e <_ZdlPv>

000d770e <_ZSt25__throw_bad_function_callv>:
   d770e:	b508      	push	{r3, lr}
   d7710:	f7fe f9b6 	bl	d5a80 <abort>

000d7714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7714:	4b24      	ldr	r3, [pc, #144]	; (d77a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7716:	681a      	ldr	r2, [r3, #0]
   d7718:	07d0      	lsls	r0, r2, #31
   d771a:	bf5c      	itt	pl
   d771c:	2201      	movpl	r2, #1
   d771e:	601a      	strpl	r2, [r3, #0]
   d7720:	4b22      	ldr	r3, [pc, #136]	; (d77ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7722:	681a      	ldr	r2, [r3, #0]
   d7724:	07d1      	lsls	r1, r2, #31
   d7726:	bf5c      	itt	pl
   d7728:	2201      	movpl	r2, #1
   d772a:	601a      	strpl	r2, [r3, #0]
   d772c:	4b20      	ldr	r3, [pc, #128]	; (d77b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d772e:	681a      	ldr	r2, [r3, #0]
   d7730:	07d2      	lsls	r2, r2, #31
   d7732:	bf5c      	itt	pl
   d7734:	2201      	movpl	r2, #1
   d7736:	601a      	strpl	r2, [r3, #0]
   d7738:	4b1e      	ldr	r3, [pc, #120]	; (d77b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d773a:	681a      	ldr	r2, [r3, #0]
   d773c:	07d0      	lsls	r0, r2, #31
   d773e:	bf5c      	itt	pl
   d7740:	2201      	movpl	r2, #1
   d7742:	601a      	strpl	r2, [r3, #0]
   d7744:	4b1c      	ldr	r3, [pc, #112]	; (d77b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7746:	681a      	ldr	r2, [r3, #0]
   d7748:	07d1      	lsls	r1, r2, #31
   d774a:	bf5c      	itt	pl
   d774c:	2201      	movpl	r2, #1
   d774e:	601a      	strpl	r2, [r3, #0]
   d7750:	4b1a      	ldr	r3, [pc, #104]	; (d77bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7752:	681a      	ldr	r2, [r3, #0]
   d7754:	07d2      	lsls	r2, r2, #31
   d7756:	bf5c      	itt	pl
   d7758:	2201      	movpl	r2, #1
   d775a:	601a      	strpl	r2, [r3, #0]
   d775c:	4b18      	ldr	r3, [pc, #96]	; (d77c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d775e:	681a      	ldr	r2, [r3, #0]
   d7760:	07d0      	lsls	r0, r2, #31
   d7762:	bf5c      	itt	pl
   d7764:	2201      	movpl	r2, #1
   d7766:	601a      	strpl	r2, [r3, #0]
   d7768:	4b16      	ldr	r3, [pc, #88]	; (d77c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d776a:	681a      	ldr	r2, [r3, #0]
   d776c:	07d1      	lsls	r1, r2, #31
   d776e:	bf5c      	itt	pl
   d7770:	2201      	movpl	r2, #1
   d7772:	601a      	strpl	r2, [r3, #0]
   d7774:	4b14      	ldr	r3, [pc, #80]	; (d77c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7776:	681a      	ldr	r2, [r3, #0]
   d7778:	07d2      	lsls	r2, r2, #31
   d777a:	bf5c      	itt	pl
   d777c:	2201      	movpl	r2, #1
   d777e:	601a      	strpl	r2, [r3, #0]
   d7780:	4b12      	ldr	r3, [pc, #72]	; (d77cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	07d0      	lsls	r0, r2, #31
   d7786:	bf5c      	itt	pl
   d7788:	2201      	movpl	r2, #1
   d778a:	601a      	strpl	r2, [r3, #0]
   d778c:	4b10      	ldr	r3, [pc, #64]	; (d77d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d778e:	681a      	ldr	r2, [r3, #0]
   d7790:	07d1      	lsls	r1, r2, #31
   d7792:	bf5c      	itt	pl
   d7794:	2201      	movpl	r2, #1
   d7796:	601a      	strpl	r2, [r3, #0]
   d7798:	4b0e      	ldr	r3, [pc, #56]	; (d77d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d779a:	681a      	ldr	r2, [r3, #0]
   d779c:	07d2      	lsls	r2, r2, #31
   d779e:	bf5c      	itt	pl
   d77a0:	2201      	movpl	r2, #1
   d77a2:	601a      	strpl	r2, [r3, #0]
   d77a4:	4770      	bx	lr
   d77a6:	bf00      	nop
   d77a8:	2003e754 	.word	0x2003e754
   d77ac:	2003e750 	.word	0x2003e750
   d77b0:	2003e74c 	.word	0x2003e74c
   d77b4:	2003e748 	.word	0x2003e748
   d77b8:	2003e744 	.word	0x2003e744
   d77bc:	2003e740 	.word	0x2003e740
   d77c0:	2003e73c 	.word	0x2003e73c
   d77c4:	2003e738 	.word	0x2003e738
   d77c8:	2003e734 	.word	0x2003e734
   d77cc:	2003e730 	.word	0x2003e730
   d77d0:	2003e72c 	.word	0x2003e72c
   d77d4:	2003e728 	.word	0x2003e728

000d77d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d77d8:	4b18      	ldr	r3, [pc, #96]	; (d783c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d77da:	681a      	ldr	r2, [r3, #0]
   d77dc:	07d1      	lsls	r1, r2, #31
   d77de:	bf5c      	itt	pl
   d77e0:	2201      	movpl	r2, #1
   d77e2:	601a      	strpl	r2, [r3, #0]
   d77e4:	4b16      	ldr	r3, [pc, #88]	; (d7840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d77e6:	681a      	ldr	r2, [r3, #0]
   d77e8:	07d2      	lsls	r2, r2, #31
   d77ea:	bf5c      	itt	pl
   d77ec:	2201      	movpl	r2, #1
   d77ee:	601a      	strpl	r2, [r3, #0]
   d77f0:	4b14      	ldr	r3, [pc, #80]	; (d7844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d77f2:	681a      	ldr	r2, [r3, #0]
   d77f4:	07d0      	lsls	r0, r2, #31
   d77f6:	bf5c      	itt	pl
   d77f8:	2201      	movpl	r2, #1
   d77fa:	601a      	strpl	r2, [r3, #0]
   d77fc:	4b12      	ldr	r3, [pc, #72]	; (d7848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d77fe:	681a      	ldr	r2, [r3, #0]
   d7800:	07d1      	lsls	r1, r2, #31
   d7802:	bf5c      	itt	pl
   d7804:	2201      	movpl	r2, #1
   d7806:	601a      	strpl	r2, [r3, #0]
   d7808:	4b10      	ldr	r3, [pc, #64]	; (d784c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d780a:	681a      	ldr	r2, [r3, #0]
   d780c:	07d2      	lsls	r2, r2, #31
   d780e:	bf5c      	itt	pl
   d7810:	2201      	movpl	r2, #1
   d7812:	601a      	strpl	r2, [r3, #0]
   d7814:	4b0e      	ldr	r3, [pc, #56]	; (d7850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7816:	681a      	ldr	r2, [r3, #0]
   d7818:	07d0      	lsls	r0, r2, #31
   d781a:	bf5c      	itt	pl
   d781c:	2201      	movpl	r2, #1
   d781e:	601a      	strpl	r2, [r3, #0]
   d7820:	4b0c      	ldr	r3, [pc, #48]	; (d7854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7822:	681a      	ldr	r2, [r3, #0]
   d7824:	07d1      	lsls	r1, r2, #31
   d7826:	bf5c      	itt	pl
   d7828:	2201      	movpl	r2, #1
   d782a:	601a      	strpl	r2, [r3, #0]
   d782c:	4b0a      	ldr	r3, [pc, #40]	; (d7858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d782e:	681a      	ldr	r2, [r3, #0]
   d7830:	07d2      	lsls	r2, r2, #31
   d7832:	bf5c      	itt	pl
   d7834:	2201      	movpl	r2, #1
   d7836:	601a      	strpl	r2, [r3, #0]
   d7838:	4770      	bx	lr
   d783a:	bf00      	nop
   d783c:	2003e774 	.word	0x2003e774
   d7840:	2003e770 	.word	0x2003e770
   d7844:	2003e76c 	.word	0x2003e76c
   d7848:	2003e768 	.word	0x2003e768
   d784c:	2003e764 	.word	0x2003e764
   d7850:	2003e760 	.word	0x2003e760
   d7854:	2003e75c 	.word	0x2003e75c
   d7858:	2003e758 	.word	0x2003e758

000d785c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d785c:	4b18      	ldr	r3, [pc, #96]	; (d78c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d785e:	681a      	ldr	r2, [r3, #0]
   d7860:	07d1      	lsls	r1, r2, #31
   d7862:	bf5c      	itt	pl
   d7864:	2201      	movpl	r2, #1
   d7866:	601a      	strpl	r2, [r3, #0]
   d7868:	4b16      	ldr	r3, [pc, #88]	; (d78c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d786a:	681a      	ldr	r2, [r3, #0]
   d786c:	07d2      	lsls	r2, r2, #31
   d786e:	bf5c      	itt	pl
   d7870:	2201      	movpl	r2, #1
   d7872:	601a      	strpl	r2, [r3, #0]
   d7874:	4b14      	ldr	r3, [pc, #80]	; (d78c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7876:	681a      	ldr	r2, [r3, #0]
   d7878:	07d0      	lsls	r0, r2, #31
   d787a:	bf5c      	itt	pl
   d787c:	2201      	movpl	r2, #1
   d787e:	601a      	strpl	r2, [r3, #0]
   d7880:	4b12      	ldr	r3, [pc, #72]	; (d78cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7882:	681a      	ldr	r2, [r3, #0]
   d7884:	07d1      	lsls	r1, r2, #31
   d7886:	bf5c      	itt	pl
   d7888:	2201      	movpl	r2, #1
   d788a:	601a      	strpl	r2, [r3, #0]
   d788c:	4b10      	ldr	r3, [pc, #64]	; (d78d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d788e:	681a      	ldr	r2, [r3, #0]
   d7890:	07d2      	lsls	r2, r2, #31
   d7892:	bf5c      	itt	pl
   d7894:	2201      	movpl	r2, #1
   d7896:	601a      	strpl	r2, [r3, #0]
   d7898:	4b0e      	ldr	r3, [pc, #56]	; (d78d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d789a:	681a      	ldr	r2, [r3, #0]
   d789c:	07d0      	lsls	r0, r2, #31
   d789e:	bf5c      	itt	pl
   d78a0:	2201      	movpl	r2, #1
   d78a2:	601a      	strpl	r2, [r3, #0]
   d78a4:	4b0c      	ldr	r3, [pc, #48]	; (d78d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d78a6:	681a      	ldr	r2, [r3, #0]
   d78a8:	07d1      	lsls	r1, r2, #31
   d78aa:	bf5c      	itt	pl
   d78ac:	2201      	movpl	r2, #1
   d78ae:	601a      	strpl	r2, [r3, #0]
   d78b0:	4b0a      	ldr	r3, [pc, #40]	; (d78dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d78b2:	681a      	ldr	r2, [r3, #0]
   d78b4:	07d2      	lsls	r2, r2, #31
   d78b6:	bf5c      	itt	pl
   d78b8:	2201      	movpl	r2, #1
   d78ba:	601a      	strpl	r2, [r3, #0]
   d78bc:	4770      	bx	lr
   d78be:	bf00      	nop
   d78c0:	2003e794 	.word	0x2003e794
   d78c4:	2003e790 	.word	0x2003e790
   d78c8:	2003e78c 	.word	0x2003e78c
   d78cc:	2003e788 	.word	0x2003e788
   d78d0:	2003e784 	.word	0x2003e784
   d78d4:	2003e780 	.word	0x2003e780
   d78d8:	2003e77c 	.word	0x2003e77c
   d78dc:	2003e778 	.word	0x2003e778

000d78e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d78e0:	4b24      	ldr	r3, [pc, #144]	; (d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d78e2:	681a      	ldr	r2, [r3, #0]
   d78e4:	07d0      	lsls	r0, r2, #31
   d78e6:	bf5c      	itt	pl
   d78e8:	2201      	movpl	r2, #1
   d78ea:	601a      	strpl	r2, [r3, #0]
   d78ec:	4b22      	ldr	r3, [pc, #136]	; (d7978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d78ee:	681a      	ldr	r2, [r3, #0]
   d78f0:	07d1      	lsls	r1, r2, #31
   d78f2:	bf5c      	itt	pl
   d78f4:	2201      	movpl	r2, #1
   d78f6:	601a      	strpl	r2, [r3, #0]
   d78f8:	4b20      	ldr	r3, [pc, #128]	; (d797c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d78fa:	681a      	ldr	r2, [r3, #0]
   d78fc:	07d2      	lsls	r2, r2, #31
   d78fe:	bf5c      	itt	pl
   d7900:	2201      	movpl	r2, #1
   d7902:	601a      	strpl	r2, [r3, #0]
   d7904:	4b1e      	ldr	r3, [pc, #120]	; (d7980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7906:	681a      	ldr	r2, [r3, #0]
   d7908:	07d0      	lsls	r0, r2, #31
   d790a:	bf5c      	itt	pl
   d790c:	2201      	movpl	r2, #1
   d790e:	601a      	strpl	r2, [r3, #0]
   d7910:	4b1c      	ldr	r3, [pc, #112]	; (d7984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7912:	681a      	ldr	r2, [r3, #0]
   d7914:	07d1      	lsls	r1, r2, #31
   d7916:	bf5c      	itt	pl
   d7918:	2201      	movpl	r2, #1
   d791a:	601a      	strpl	r2, [r3, #0]
   d791c:	4b1a      	ldr	r3, [pc, #104]	; (d7988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d791e:	681a      	ldr	r2, [r3, #0]
   d7920:	07d2      	lsls	r2, r2, #31
   d7922:	bf5c      	itt	pl
   d7924:	2201      	movpl	r2, #1
   d7926:	601a      	strpl	r2, [r3, #0]
   d7928:	4b18      	ldr	r3, [pc, #96]	; (d798c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d792a:	681a      	ldr	r2, [r3, #0]
   d792c:	07d0      	lsls	r0, r2, #31
   d792e:	bf5c      	itt	pl
   d7930:	2201      	movpl	r2, #1
   d7932:	601a      	strpl	r2, [r3, #0]
   d7934:	4b16      	ldr	r3, [pc, #88]	; (d7990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7936:	681a      	ldr	r2, [r3, #0]
   d7938:	07d1      	lsls	r1, r2, #31
   d793a:	bf5c      	itt	pl
   d793c:	2201      	movpl	r2, #1
   d793e:	601a      	strpl	r2, [r3, #0]
   d7940:	4b14      	ldr	r3, [pc, #80]	; (d7994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7942:	681a      	ldr	r2, [r3, #0]
   d7944:	07d2      	lsls	r2, r2, #31
   d7946:	bf5c      	itt	pl
   d7948:	2201      	movpl	r2, #1
   d794a:	601a      	strpl	r2, [r3, #0]
   d794c:	4b12      	ldr	r3, [pc, #72]	; (d7998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d794e:	681a      	ldr	r2, [r3, #0]
   d7950:	07d0      	lsls	r0, r2, #31
   d7952:	bf5c      	itt	pl
   d7954:	2201      	movpl	r2, #1
   d7956:	601a      	strpl	r2, [r3, #0]
   d7958:	4b10      	ldr	r3, [pc, #64]	; (d799c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d795a:	681a      	ldr	r2, [r3, #0]
   d795c:	07d1      	lsls	r1, r2, #31
   d795e:	bf5c      	itt	pl
   d7960:	2201      	movpl	r2, #1
   d7962:	601a      	strpl	r2, [r3, #0]
   d7964:	4b0e      	ldr	r3, [pc, #56]	; (d79a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7966:	681a      	ldr	r2, [r3, #0]
   d7968:	07d2      	lsls	r2, r2, #31
   d796a:	bf5c      	itt	pl
   d796c:	2201      	movpl	r2, #1
   d796e:	601a      	strpl	r2, [r3, #0]
   d7970:	4770      	bx	lr
   d7972:	bf00      	nop
   d7974:	2003e7c4 	.word	0x2003e7c4
   d7978:	2003e7c0 	.word	0x2003e7c0
   d797c:	2003e7bc 	.word	0x2003e7bc
   d7980:	2003e7b8 	.word	0x2003e7b8
   d7984:	2003e7b4 	.word	0x2003e7b4
   d7988:	2003e7b0 	.word	0x2003e7b0
   d798c:	2003e7ac 	.word	0x2003e7ac
   d7990:	2003e7a8 	.word	0x2003e7a8
   d7994:	2003e7a4 	.word	0x2003e7a4
   d7998:	2003e7a0 	.word	0x2003e7a0
   d799c:	2003e79c 	.word	0x2003e79c
   d79a0:	2003e798 	.word	0x2003e798

000d79a4 <__aeabi_drsub>:
   d79a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d79a8:	e002      	b.n	d79b0 <__adddf3>
   d79aa:	bf00      	nop

000d79ac <__aeabi_dsub>:
   d79ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d79b0 <__adddf3>:
   d79b0:	b530      	push	{r4, r5, lr}
   d79b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d79b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d79ba:	ea94 0f05 	teq	r4, r5
   d79be:	bf08      	it	eq
   d79c0:	ea90 0f02 	teqeq	r0, r2
   d79c4:	bf1f      	itttt	ne
   d79c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d79ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   d79ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d79d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d79d6:	f000 80e2 	beq.w	d7b9e <__adddf3+0x1ee>
   d79da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d79de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d79e2:	bfb8      	it	lt
   d79e4:	426d      	neglt	r5, r5
   d79e6:	dd0c      	ble.n	d7a02 <__adddf3+0x52>
   d79e8:	442c      	add	r4, r5
   d79ea:	ea80 0202 	eor.w	r2, r0, r2
   d79ee:	ea81 0303 	eor.w	r3, r1, r3
   d79f2:	ea82 0000 	eor.w	r0, r2, r0
   d79f6:	ea83 0101 	eor.w	r1, r3, r1
   d79fa:	ea80 0202 	eor.w	r2, r0, r2
   d79fe:	ea81 0303 	eor.w	r3, r1, r3
   d7a02:	2d36      	cmp	r5, #54	; 0x36
   d7a04:	bf88      	it	hi
   d7a06:	bd30      	pophi	{r4, r5, pc}
   d7a08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7a0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7a10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7a14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7a18:	d002      	beq.n	d7a20 <__adddf3+0x70>
   d7a1a:	4240      	negs	r0, r0
   d7a1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7a20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7a24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7a2c:	d002      	beq.n	d7a34 <__adddf3+0x84>
   d7a2e:	4252      	negs	r2, r2
   d7a30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7a34:	ea94 0f05 	teq	r4, r5
   d7a38:	f000 80a7 	beq.w	d7b8a <__adddf3+0x1da>
   d7a3c:	f1a4 0401 	sub.w	r4, r4, #1
   d7a40:	f1d5 0e20 	rsbs	lr, r5, #32
   d7a44:	db0d      	blt.n	d7a62 <__adddf3+0xb2>
   d7a46:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7a4a:	fa22 f205 	lsr.w	r2, r2, r5
   d7a4e:	1880      	adds	r0, r0, r2
   d7a50:	f141 0100 	adc.w	r1, r1, #0
   d7a54:	fa03 f20e 	lsl.w	r2, r3, lr
   d7a58:	1880      	adds	r0, r0, r2
   d7a5a:	fa43 f305 	asr.w	r3, r3, r5
   d7a5e:	4159      	adcs	r1, r3
   d7a60:	e00e      	b.n	d7a80 <__adddf3+0xd0>
   d7a62:	f1a5 0520 	sub.w	r5, r5, #32
   d7a66:	f10e 0e20 	add.w	lr, lr, #32
   d7a6a:	2a01      	cmp	r2, #1
   d7a6c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7a70:	bf28      	it	cs
   d7a72:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7a76:	fa43 f305 	asr.w	r3, r3, r5
   d7a7a:	18c0      	adds	r0, r0, r3
   d7a7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7a80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7a84:	d507      	bpl.n	d7a96 <__adddf3+0xe6>
   d7a86:	f04f 0e00 	mov.w	lr, #0
   d7a8a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7a8e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7a92:	eb6e 0101 	sbc.w	r1, lr, r1
   d7a96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7a9a:	d31b      	bcc.n	d7ad4 <__adddf3+0x124>
   d7a9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7aa0:	d30c      	bcc.n	d7abc <__adddf3+0x10c>
   d7aa2:	0849      	lsrs	r1, r1, #1
   d7aa4:	ea5f 0030 	movs.w	r0, r0, rrx
   d7aa8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7aac:	f104 0401 	add.w	r4, r4, #1
   d7ab0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7ab4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7ab8:	f080 809a 	bcs.w	d7bf0 <__adddf3+0x240>
   d7abc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7ac0:	bf08      	it	eq
   d7ac2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7ac6:	f150 0000 	adcs.w	r0, r0, #0
   d7aca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7ace:	ea41 0105 	orr.w	r1, r1, r5
   d7ad2:	bd30      	pop	{r4, r5, pc}
   d7ad4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7ad8:	4140      	adcs	r0, r0
   d7ada:	eb41 0101 	adc.w	r1, r1, r1
   d7ade:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ae2:	f1a4 0401 	sub.w	r4, r4, #1
   d7ae6:	d1e9      	bne.n	d7abc <__adddf3+0x10c>
   d7ae8:	f091 0f00 	teq	r1, #0
   d7aec:	bf04      	itt	eq
   d7aee:	4601      	moveq	r1, r0
   d7af0:	2000      	moveq	r0, #0
   d7af2:	fab1 f381 	clz	r3, r1
   d7af6:	bf08      	it	eq
   d7af8:	3320      	addeq	r3, #32
   d7afa:	f1a3 030b 	sub.w	r3, r3, #11
   d7afe:	f1b3 0220 	subs.w	r2, r3, #32
   d7b02:	da0c      	bge.n	d7b1e <__adddf3+0x16e>
   d7b04:	320c      	adds	r2, #12
   d7b06:	dd08      	ble.n	d7b1a <__adddf3+0x16a>
   d7b08:	f102 0c14 	add.w	ip, r2, #20
   d7b0c:	f1c2 020c 	rsb	r2, r2, #12
   d7b10:	fa01 f00c 	lsl.w	r0, r1, ip
   d7b14:	fa21 f102 	lsr.w	r1, r1, r2
   d7b18:	e00c      	b.n	d7b34 <__adddf3+0x184>
   d7b1a:	f102 0214 	add.w	r2, r2, #20
   d7b1e:	bfd8      	it	le
   d7b20:	f1c2 0c20 	rsble	ip, r2, #32
   d7b24:	fa01 f102 	lsl.w	r1, r1, r2
   d7b28:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7b2c:	bfdc      	itt	le
   d7b2e:	ea41 010c 	orrle.w	r1, r1, ip
   d7b32:	4090      	lslle	r0, r2
   d7b34:	1ae4      	subs	r4, r4, r3
   d7b36:	bfa2      	ittt	ge
   d7b38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7b3c:	4329      	orrge	r1, r5
   d7b3e:	bd30      	popge	{r4, r5, pc}
   d7b40:	ea6f 0404 	mvn.w	r4, r4
   d7b44:	3c1f      	subs	r4, #31
   d7b46:	da1c      	bge.n	d7b82 <__adddf3+0x1d2>
   d7b48:	340c      	adds	r4, #12
   d7b4a:	dc0e      	bgt.n	d7b6a <__adddf3+0x1ba>
   d7b4c:	f104 0414 	add.w	r4, r4, #20
   d7b50:	f1c4 0220 	rsb	r2, r4, #32
   d7b54:	fa20 f004 	lsr.w	r0, r0, r4
   d7b58:	fa01 f302 	lsl.w	r3, r1, r2
   d7b5c:	ea40 0003 	orr.w	r0, r0, r3
   d7b60:	fa21 f304 	lsr.w	r3, r1, r4
   d7b64:	ea45 0103 	orr.w	r1, r5, r3
   d7b68:	bd30      	pop	{r4, r5, pc}
   d7b6a:	f1c4 040c 	rsb	r4, r4, #12
   d7b6e:	f1c4 0220 	rsb	r2, r4, #32
   d7b72:	fa20 f002 	lsr.w	r0, r0, r2
   d7b76:	fa01 f304 	lsl.w	r3, r1, r4
   d7b7a:	ea40 0003 	orr.w	r0, r0, r3
   d7b7e:	4629      	mov	r1, r5
   d7b80:	bd30      	pop	{r4, r5, pc}
   d7b82:	fa21 f004 	lsr.w	r0, r1, r4
   d7b86:	4629      	mov	r1, r5
   d7b88:	bd30      	pop	{r4, r5, pc}
   d7b8a:	f094 0f00 	teq	r4, #0
   d7b8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7b92:	bf06      	itte	eq
   d7b94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7b98:	3401      	addeq	r4, #1
   d7b9a:	3d01      	subne	r5, #1
   d7b9c:	e74e      	b.n	d7a3c <__adddf3+0x8c>
   d7b9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7ba2:	bf18      	it	ne
   d7ba4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ba8:	d029      	beq.n	d7bfe <__adddf3+0x24e>
   d7baa:	ea94 0f05 	teq	r4, r5
   d7bae:	bf08      	it	eq
   d7bb0:	ea90 0f02 	teqeq	r0, r2
   d7bb4:	d005      	beq.n	d7bc2 <__adddf3+0x212>
   d7bb6:	ea54 0c00 	orrs.w	ip, r4, r0
   d7bba:	bf04      	itt	eq
   d7bbc:	4619      	moveq	r1, r3
   d7bbe:	4610      	moveq	r0, r2
   d7bc0:	bd30      	pop	{r4, r5, pc}
   d7bc2:	ea91 0f03 	teq	r1, r3
   d7bc6:	bf1e      	ittt	ne
   d7bc8:	2100      	movne	r1, #0
   d7bca:	2000      	movne	r0, #0
   d7bcc:	bd30      	popne	{r4, r5, pc}
   d7bce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7bd2:	d105      	bne.n	d7be0 <__adddf3+0x230>
   d7bd4:	0040      	lsls	r0, r0, #1
   d7bd6:	4149      	adcs	r1, r1
   d7bd8:	bf28      	it	cs
   d7bda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7bde:	bd30      	pop	{r4, r5, pc}
   d7be0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7be4:	bf3c      	itt	cc
   d7be6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7bea:	bd30      	popcc	{r4, r5, pc}
   d7bec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7bf0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7bf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7bf8:	f04f 0000 	mov.w	r0, #0
   d7bfc:	bd30      	pop	{r4, r5, pc}
   d7bfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7c02:	bf1a      	itte	ne
   d7c04:	4619      	movne	r1, r3
   d7c06:	4610      	movne	r0, r2
   d7c08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7c0c:	bf1c      	itt	ne
   d7c0e:	460b      	movne	r3, r1
   d7c10:	4602      	movne	r2, r0
   d7c12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7c16:	bf06      	itte	eq
   d7c18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7c1c:	ea91 0f03 	teqeq	r1, r3
   d7c20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7c24:	bd30      	pop	{r4, r5, pc}
   d7c26:	bf00      	nop

000d7c28 <__aeabi_ui2d>:
   d7c28:	f090 0f00 	teq	r0, #0
   d7c2c:	bf04      	itt	eq
   d7c2e:	2100      	moveq	r1, #0
   d7c30:	4770      	bxeq	lr
   d7c32:	b530      	push	{r4, r5, lr}
   d7c34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c3c:	f04f 0500 	mov.w	r5, #0
   d7c40:	f04f 0100 	mov.w	r1, #0
   d7c44:	e750      	b.n	d7ae8 <__adddf3+0x138>
   d7c46:	bf00      	nop

000d7c48 <__aeabi_i2d>:
   d7c48:	f090 0f00 	teq	r0, #0
   d7c4c:	bf04      	itt	eq
   d7c4e:	2100      	moveq	r1, #0
   d7c50:	4770      	bxeq	lr
   d7c52:	b530      	push	{r4, r5, lr}
   d7c54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7c60:	bf48      	it	mi
   d7c62:	4240      	negmi	r0, r0
   d7c64:	f04f 0100 	mov.w	r1, #0
   d7c68:	e73e      	b.n	d7ae8 <__adddf3+0x138>
   d7c6a:	bf00      	nop

000d7c6c <__aeabi_f2d>:
   d7c6c:	0042      	lsls	r2, r0, #1
   d7c6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7c72:	ea4f 0131 	mov.w	r1, r1, rrx
   d7c76:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7c7a:	bf1f      	itttt	ne
   d7c7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7c80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7c88:	4770      	bxne	lr
   d7c8a:	f092 0f00 	teq	r2, #0
   d7c8e:	bf14      	ite	ne
   d7c90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c94:	4770      	bxeq	lr
   d7c96:	b530      	push	{r4, r5, lr}
   d7c98:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7c9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ca0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7ca4:	e720      	b.n	d7ae8 <__adddf3+0x138>
   d7ca6:	bf00      	nop

000d7ca8 <__aeabi_ul2d>:
   d7ca8:	ea50 0201 	orrs.w	r2, r0, r1
   d7cac:	bf08      	it	eq
   d7cae:	4770      	bxeq	lr
   d7cb0:	b530      	push	{r4, r5, lr}
   d7cb2:	f04f 0500 	mov.w	r5, #0
   d7cb6:	e00a      	b.n	d7cce <__aeabi_l2d+0x16>

000d7cb8 <__aeabi_l2d>:
   d7cb8:	ea50 0201 	orrs.w	r2, r0, r1
   d7cbc:	bf08      	it	eq
   d7cbe:	4770      	bxeq	lr
   d7cc0:	b530      	push	{r4, r5, lr}
   d7cc2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7cc6:	d502      	bpl.n	d7cce <__aeabi_l2d+0x16>
   d7cc8:	4240      	negs	r0, r0
   d7cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7cce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7cd2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7cd6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7cda:	f43f aedc 	beq.w	d7a96 <__adddf3+0xe6>
   d7cde:	f04f 0203 	mov.w	r2, #3
   d7ce2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7ce6:	bf18      	it	ne
   d7ce8:	3203      	addne	r2, #3
   d7cea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7cee:	bf18      	it	ne
   d7cf0:	3203      	addne	r2, #3
   d7cf2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7cf6:	f1c2 0320 	rsb	r3, r2, #32
   d7cfa:	fa00 fc03 	lsl.w	ip, r0, r3
   d7cfe:	fa20 f002 	lsr.w	r0, r0, r2
   d7d02:	fa01 fe03 	lsl.w	lr, r1, r3
   d7d06:	ea40 000e 	orr.w	r0, r0, lr
   d7d0a:	fa21 f102 	lsr.w	r1, r1, r2
   d7d0e:	4414      	add	r4, r2
   d7d10:	e6c1      	b.n	d7a96 <__adddf3+0xe6>
   d7d12:	bf00      	nop

000d7d14 <__aeabi_dmul>:
   d7d14:	b570      	push	{r4, r5, r6, lr}
   d7d16:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7d1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7d1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7d22:	bf1d      	ittte	ne
   d7d24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7d28:	ea94 0f0c 	teqne	r4, ip
   d7d2c:	ea95 0f0c 	teqne	r5, ip
   d7d30:	f000 f8de 	bleq	d7ef0 <__aeabi_dmul+0x1dc>
   d7d34:	442c      	add	r4, r5
   d7d36:	ea81 0603 	eor.w	r6, r1, r3
   d7d3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7d3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7d42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7d46:	bf18      	it	ne
   d7d48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7d54:	d038      	beq.n	d7dc8 <__aeabi_dmul+0xb4>
   d7d56:	fba0 ce02 	umull	ip, lr, r0, r2
   d7d5a:	f04f 0500 	mov.w	r5, #0
   d7d5e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7d62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7d66:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7d6a:	f04f 0600 	mov.w	r6, #0
   d7d6e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7d72:	f09c 0f00 	teq	ip, #0
   d7d76:	bf18      	it	ne
   d7d78:	f04e 0e01 	orrne.w	lr, lr, #1
   d7d7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7d80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7d84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7d88:	d204      	bcs.n	d7d94 <__aeabi_dmul+0x80>
   d7d8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7d8e:	416d      	adcs	r5, r5
   d7d90:	eb46 0606 	adc.w	r6, r6, r6
   d7d94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7d98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7d9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7da0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7da4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7da8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7dac:	bf88      	it	hi
   d7dae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7db2:	d81e      	bhi.n	d7df2 <__aeabi_dmul+0xde>
   d7db4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7db8:	bf08      	it	eq
   d7dba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7dbe:	f150 0000 	adcs.w	r0, r0, #0
   d7dc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7dc6:	bd70      	pop	{r4, r5, r6, pc}
   d7dc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7dcc:	ea46 0101 	orr.w	r1, r6, r1
   d7dd0:	ea40 0002 	orr.w	r0, r0, r2
   d7dd4:	ea81 0103 	eor.w	r1, r1, r3
   d7dd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7ddc:	bfc2      	ittt	gt
   d7dde:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7de2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7de6:	bd70      	popgt	{r4, r5, r6, pc}
   d7de8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7dec:	f04f 0e00 	mov.w	lr, #0
   d7df0:	3c01      	subs	r4, #1
   d7df2:	f300 80ab 	bgt.w	d7f4c <__aeabi_dmul+0x238>
   d7df6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7dfa:	bfde      	ittt	le
   d7dfc:	2000      	movle	r0, #0
   d7dfe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7e02:	bd70      	pople	{r4, r5, r6, pc}
   d7e04:	f1c4 0400 	rsb	r4, r4, #0
   d7e08:	3c20      	subs	r4, #32
   d7e0a:	da35      	bge.n	d7e78 <__aeabi_dmul+0x164>
   d7e0c:	340c      	adds	r4, #12
   d7e0e:	dc1b      	bgt.n	d7e48 <__aeabi_dmul+0x134>
   d7e10:	f104 0414 	add.w	r4, r4, #20
   d7e14:	f1c4 0520 	rsb	r5, r4, #32
   d7e18:	fa00 f305 	lsl.w	r3, r0, r5
   d7e1c:	fa20 f004 	lsr.w	r0, r0, r4
   d7e20:	fa01 f205 	lsl.w	r2, r1, r5
   d7e24:	ea40 0002 	orr.w	r0, r0, r2
   d7e28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7e2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e34:	fa21 f604 	lsr.w	r6, r1, r4
   d7e38:	eb42 0106 	adc.w	r1, r2, r6
   d7e3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e40:	bf08      	it	eq
   d7e42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e46:	bd70      	pop	{r4, r5, r6, pc}
   d7e48:	f1c4 040c 	rsb	r4, r4, #12
   d7e4c:	f1c4 0520 	rsb	r5, r4, #32
   d7e50:	fa00 f304 	lsl.w	r3, r0, r4
   d7e54:	fa20 f005 	lsr.w	r0, r0, r5
   d7e58:	fa01 f204 	lsl.w	r2, r1, r4
   d7e5c:	ea40 0002 	orr.w	r0, r0, r2
   d7e60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e68:	f141 0100 	adc.w	r1, r1, #0
   d7e6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e70:	bf08      	it	eq
   d7e72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e76:	bd70      	pop	{r4, r5, r6, pc}
   d7e78:	f1c4 0520 	rsb	r5, r4, #32
   d7e7c:	fa00 f205 	lsl.w	r2, r0, r5
   d7e80:	ea4e 0e02 	orr.w	lr, lr, r2
   d7e84:	fa20 f304 	lsr.w	r3, r0, r4
   d7e88:	fa01 f205 	lsl.w	r2, r1, r5
   d7e8c:	ea43 0302 	orr.w	r3, r3, r2
   d7e90:	fa21 f004 	lsr.w	r0, r1, r4
   d7e94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e98:	fa21 f204 	lsr.w	r2, r1, r4
   d7e9c:	ea20 0002 	bic.w	r0, r0, r2
   d7ea0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7ea4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ea8:	bf08      	it	eq
   d7eaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7eae:	bd70      	pop	{r4, r5, r6, pc}
   d7eb0:	f094 0f00 	teq	r4, #0
   d7eb4:	d10f      	bne.n	d7ed6 <__aeabi_dmul+0x1c2>
   d7eb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7eba:	0040      	lsls	r0, r0, #1
   d7ebc:	eb41 0101 	adc.w	r1, r1, r1
   d7ec0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ec4:	bf08      	it	eq
   d7ec6:	3c01      	subeq	r4, #1
   d7ec8:	d0f7      	beq.n	d7eba <__aeabi_dmul+0x1a6>
   d7eca:	ea41 0106 	orr.w	r1, r1, r6
   d7ece:	f095 0f00 	teq	r5, #0
   d7ed2:	bf18      	it	ne
   d7ed4:	4770      	bxne	lr
   d7ed6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7eda:	0052      	lsls	r2, r2, #1
   d7edc:	eb43 0303 	adc.w	r3, r3, r3
   d7ee0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7ee4:	bf08      	it	eq
   d7ee6:	3d01      	subeq	r5, #1
   d7ee8:	d0f7      	beq.n	d7eda <__aeabi_dmul+0x1c6>
   d7eea:	ea43 0306 	orr.w	r3, r3, r6
   d7eee:	4770      	bx	lr
   d7ef0:	ea94 0f0c 	teq	r4, ip
   d7ef4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ef8:	bf18      	it	ne
   d7efa:	ea95 0f0c 	teqne	r5, ip
   d7efe:	d00c      	beq.n	d7f1a <__aeabi_dmul+0x206>
   d7f00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7f04:	bf18      	it	ne
   d7f06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f0a:	d1d1      	bne.n	d7eb0 <__aeabi_dmul+0x19c>
   d7f0c:	ea81 0103 	eor.w	r1, r1, r3
   d7f10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f14:	f04f 0000 	mov.w	r0, #0
   d7f18:	bd70      	pop	{r4, r5, r6, pc}
   d7f1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7f1e:	bf06      	itte	eq
   d7f20:	4610      	moveq	r0, r2
   d7f22:	4619      	moveq	r1, r3
   d7f24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f28:	d019      	beq.n	d7f5e <__aeabi_dmul+0x24a>
   d7f2a:	ea94 0f0c 	teq	r4, ip
   d7f2e:	d102      	bne.n	d7f36 <__aeabi_dmul+0x222>
   d7f30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7f34:	d113      	bne.n	d7f5e <__aeabi_dmul+0x24a>
   d7f36:	ea95 0f0c 	teq	r5, ip
   d7f3a:	d105      	bne.n	d7f48 <__aeabi_dmul+0x234>
   d7f3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7f40:	bf1c      	itt	ne
   d7f42:	4610      	movne	r0, r2
   d7f44:	4619      	movne	r1, r3
   d7f46:	d10a      	bne.n	d7f5e <__aeabi_dmul+0x24a>
   d7f48:	ea81 0103 	eor.w	r1, r1, r3
   d7f4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7f58:	f04f 0000 	mov.w	r0, #0
   d7f5c:	bd70      	pop	{r4, r5, r6, pc}
   d7f5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7f66:	bd70      	pop	{r4, r5, r6, pc}

000d7f68 <__aeabi_ddiv>:
   d7f68:	b570      	push	{r4, r5, r6, lr}
   d7f6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7f6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7f72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f76:	bf1d      	ittte	ne
   d7f78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7f7c:	ea94 0f0c 	teqne	r4, ip
   d7f80:	ea95 0f0c 	teqne	r5, ip
   d7f84:	f000 f8a7 	bleq	d80d6 <__aeabi_ddiv+0x16e>
   d7f88:	eba4 0405 	sub.w	r4, r4, r5
   d7f8c:	ea81 0e03 	eor.w	lr, r1, r3
   d7f90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7f94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f98:	f000 8088 	beq.w	d80ac <__aeabi_ddiv+0x144>
   d7f9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7fa0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7fa4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7fa8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7fac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7fb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7fb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7fb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7fbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7fc0:	429d      	cmp	r5, r3
   d7fc2:	bf08      	it	eq
   d7fc4:	4296      	cmpeq	r6, r2
   d7fc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7fca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7fce:	d202      	bcs.n	d7fd6 <__aeabi_ddiv+0x6e>
   d7fd0:	085b      	lsrs	r3, r3, #1
   d7fd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fd6:	1ab6      	subs	r6, r6, r2
   d7fd8:	eb65 0503 	sbc.w	r5, r5, r3
   d7fdc:	085b      	lsrs	r3, r3, #1
   d7fde:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fe2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7fe6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7fea:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ff2:	bf22      	ittt	cs
   d7ff4:	1ab6      	subcs	r6, r6, r2
   d7ff6:	4675      	movcs	r5, lr
   d7ff8:	ea40 000c 	orrcs.w	r0, r0, ip
   d7ffc:	085b      	lsrs	r3, r3, #1
   d7ffe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8002:	ebb6 0e02 	subs.w	lr, r6, r2
   d8006:	eb75 0e03 	sbcs.w	lr, r5, r3
   d800a:	bf22      	ittt	cs
   d800c:	1ab6      	subcs	r6, r6, r2
   d800e:	4675      	movcs	r5, lr
   d8010:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8014:	085b      	lsrs	r3, r3, #1
   d8016:	ea4f 0232 	mov.w	r2, r2, rrx
   d801a:	ebb6 0e02 	subs.w	lr, r6, r2
   d801e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8022:	bf22      	ittt	cs
   d8024:	1ab6      	subcs	r6, r6, r2
   d8026:	4675      	movcs	r5, lr
   d8028:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d802c:	085b      	lsrs	r3, r3, #1
   d802e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8032:	ebb6 0e02 	subs.w	lr, r6, r2
   d8036:	eb75 0e03 	sbcs.w	lr, r5, r3
   d803a:	bf22      	ittt	cs
   d803c:	1ab6      	subcs	r6, r6, r2
   d803e:	4675      	movcs	r5, lr
   d8040:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8044:	ea55 0e06 	orrs.w	lr, r5, r6
   d8048:	d018      	beq.n	d807c <__aeabi_ddiv+0x114>
   d804a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d804e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8052:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8056:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d805a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d805e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8062:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8066:	d1c0      	bne.n	d7fea <__aeabi_ddiv+0x82>
   d8068:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d806c:	d10b      	bne.n	d8086 <__aeabi_ddiv+0x11e>
   d806e:	ea41 0100 	orr.w	r1, r1, r0
   d8072:	f04f 0000 	mov.w	r0, #0
   d8076:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d807a:	e7b6      	b.n	d7fea <__aeabi_ddiv+0x82>
   d807c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8080:	bf04      	itt	eq
   d8082:	4301      	orreq	r1, r0
   d8084:	2000      	moveq	r0, #0
   d8086:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d808a:	bf88      	it	hi
   d808c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8090:	f63f aeaf 	bhi.w	d7df2 <__aeabi_dmul+0xde>
   d8094:	ebb5 0c03 	subs.w	ip, r5, r3
   d8098:	bf04      	itt	eq
   d809a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d809e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d80a2:	f150 0000 	adcs.w	r0, r0, #0
   d80a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d80aa:	bd70      	pop	{r4, r5, r6, pc}
   d80ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d80b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d80b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d80b8:	bfc2      	ittt	gt
   d80ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d80be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d80c2:	bd70      	popgt	{r4, r5, r6, pc}
   d80c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80c8:	f04f 0e00 	mov.w	lr, #0
   d80cc:	3c01      	subs	r4, #1
   d80ce:	e690      	b.n	d7df2 <__aeabi_dmul+0xde>
   d80d0:	ea45 0e06 	orr.w	lr, r5, r6
   d80d4:	e68d      	b.n	d7df2 <__aeabi_dmul+0xde>
   d80d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d80da:	ea94 0f0c 	teq	r4, ip
   d80de:	bf08      	it	eq
   d80e0:	ea95 0f0c 	teqeq	r5, ip
   d80e4:	f43f af3b 	beq.w	d7f5e <__aeabi_dmul+0x24a>
   d80e8:	ea94 0f0c 	teq	r4, ip
   d80ec:	d10a      	bne.n	d8104 <__aeabi_ddiv+0x19c>
   d80ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d80f2:	f47f af34 	bne.w	d7f5e <__aeabi_dmul+0x24a>
   d80f6:	ea95 0f0c 	teq	r5, ip
   d80fa:	f47f af25 	bne.w	d7f48 <__aeabi_dmul+0x234>
   d80fe:	4610      	mov	r0, r2
   d8100:	4619      	mov	r1, r3
   d8102:	e72c      	b.n	d7f5e <__aeabi_dmul+0x24a>
   d8104:	ea95 0f0c 	teq	r5, ip
   d8108:	d106      	bne.n	d8118 <__aeabi_ddiv+0x1b0>
   d810a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d810e:	f43f aefd 	beq.w	d7f0c <__aeabi_dmul+0x1f8>
   d8112:	4610      	mov	r0, r2
   d8114:	4619      	mov	r1, r3
   d8116:	e722      	b.n	d7f5e <__aeabi_dmul+0x24a>
   d8118:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d811c:	bf18      	it	ne
   d811e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8122:	f47f aec5 	bne.w	d7eb0 <__aeabi_dmul+0x19c>
   d8126:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d812a:	f47f af0d 	bne.w	d7f48 <__aeabi_dmul+0x234>
   d812e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8132:	f47f aeeb 	bne.w	d7f0c <__aeabi_dmul+0x1f8>
   d8136:	e712      	b.n	d7f5e <__aeabi_dmul+0x24a>

000d8138 <__aeabi_d2f>:
   d8138:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d813c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8140:	bf24      	itt	cs
   d8142:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8146:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d814a:	d90d      	bls.n	d8168 <__aeabi_d2f+0x30>
   d814c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8150:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8154:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8158:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d815c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8160:	bf08      	it	eq
   d8162:	f020 0001 	biceq.w	r0, r0, #1
   d8166:	4770      	bx	lr
   d8168:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d816c:	d121      	bne.n	d81b2 <__aeabi_d2f+0x7a>
   d816e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8172:	bfbc      	itt	lt
   d8174:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8178:	4770      	bxlt	lr
   d817a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d817e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8182:	f1c2 0218 	rsb	r2, r2, #24
   d8186:	f1c2 0c20 	rsb	ip, r2, #32
   d818a:	fa10 f30c 	lsls.w	r3, r0, ip
   d818e:	fa20 f002 	lsr.w	r0, r0, r2
   d8192:	bf18      	it	ne
   d8194:	f040 0001 	orrne.w	r0, r0, #1
   d8198:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d819c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d81a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d81a4:	ea40 000c 	orr.w	r0, r0, ip
   d81a8:	fa23 f302 	lsr.w	r3, r3, r2
   d81ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d81b0:	e7cc      	b.n	d814c <__aeabi_d2f+0x14>
   d81b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d81b6:	d107      	bne.n	d81c8 <__aeabi_d2f+0x90>
   d81b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d81bc:	bf1e      	ittt	ne
   d81be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d81c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d81c6:	4770      	bxne	lr
   d81c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d81cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d81d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d81d4:	4770      	bx	lr
   d81d6:	bf00      	nop

000d81d8 <asctime>:
   d81d8:	4b09      	ldr	r3, [pc, #36]	; (d8200 <asctime+0x28>)
   d81da:	b570      	push	{r4, r5, r6, lr}
   d81dc:	681c      	ldr	r4, [r3, #0]
   d81de:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d81e0:	4606      	mov	r6, r0
   d81e2:	b93d      	cbnz	r5, d81f4 <asctime+0x1c>
   d81e4:	201a      	movs	r0, #26
   d81e6:	f7fd fc1b 	bl	d5a20 <malloc>
   d81ea:	221a      	movs	r2, #26
   d81ec:	6420      	str	r0, [r4, #64]	; 0x40
   d81ee:	4629      	mov	r1, r5
   d81f0:	f000 f943 	bl	d847a <memset>
   d81f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d81f6:	4630      	mov	r0, r6
   d81f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d81fc:	f000 b802 	b.w	d8204 <asctime_r>
   d8200:	2003e1e4 	.word	0x2003e1e4

000d8204 <asctime_r>:
   d8204:	b510      	push	{r4, lr}
   d8206:	460c      	mov	r4, r1
   d8208:	6941      	ldr	r1, [r0, #20]
   d820a:	6903      	ldr	r3, [r0, #16]
   d820c:	6982      	ldr	r2, [r0, #24]
   d820e:	b086      	sub	sp, #24
   d8210:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8214:	9104      	str	r1, [sp, #16]
   d8216:	6801      	ldr	r1, [r0, #0]
   d8218:	9103      	str	r1, [sp, #12]
   d821a:	6841      	ldr	r1, [r0, #4]
   d821c:	9102      	str	r1, [sp, #8]
   d821e:	6881      	ldr	r1, [r0, #8]
   d8220:	9101      	str	r1, [sp, #4]
   d8222:	68c1      	ldr	r1, [r0, #12]
   d8224:	9100      	str	r1, [sp, #0]
   d8226:	4907      	ldr	r1, [pc, #28]	; (d8244 <asctime_r+0x40>)
   d8228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d822c:	440b      	add	r3, r1
   d822e:	4906      	ldr	r1, [pc, #24]	; (d8248 <asctime_r+0x44>)
   d8230:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8234:	440a      	add	r2, r1
   d8236:	4620      	mov	r0, r4
   d8238:	4904      	ldr	r1, [pc, #16]	; (d824c <asctime_r+0x48>)
   d823a:	f7fd fc09 	bl	d5a50 <siprintf>
   d823e:	4620      	mov	r0, r4
   d8240:	b006      	add	sp, #24
   d8242:	bd10      	pop	{r4, pc}
   d8244:	000d9525 	.word	0x000d9525
   d8248:	000d9510 	.word	0x000d9510
   d824c:	000d9549 	.word	0x000d9549

000d8250 <atoi>:
   d8250:	220a      	movs	r2, #10
   d8252:	2100      	movs	r1, #0
   d8254:	f000 ba26 	b.w	d86a4 <strtol>

000d8258 <__cxa_atexit>:
   d8258:	b510      	push	{r4, lr}
   d825a:	4c05      	ldr	r4, [pc, #20]	; (d8270 <__cxa_atexit+0x18>)
   d825c:	4613      	mov	r3, r2
   d825e:	b12c      	cbz	r4, d826c <__cxa_atexit+0x14>
   d8260:	460a      	mov	r2, r1
   d8262:	4601      	mov	r1, r0
   d8264:	2002      	movs	r0, #2
   d8266:	f3af 8000 	nop.w
   d826a:	bd10      	pop	{r4, pc}
   d826c:	4620      	mov	r0, r4
   d826e:	bd10      	pop	{r4, pc}
   d8270:	00000000 	.word	0x00000000

000d8274 <localtime>:
   d8274:	b538      	push	{r3, r4, r5, lr}
   d8276:	4b07      	ldr	r3, [pc, #28]	; (d8294 <localtime+0x20>)
   d8278:	681c      	ldr	r4, [r3, #0]
   d827a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d827c:	4605      	mov	r5, r0
   d827e:	b91b      	cbnz	r3, d8288 <localtime+0x14>
   d8280:	2024      	movs	r0, #36	; 0x24
   d8282:	f7fd fbcd 	bl	d5a20 <malloc>
   d8286:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8288:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d828a:	4628      	mov	r0, r5
   d828c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8290:	f000 b802 	b.w	d8298 <localtime_r>
   d8294:	2003e1e4 	.word	0x2003e1e4

000d8298 <localtime_r>:
   d8298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d829c:	460c      	mov	r4, r1
   d829e:	4680      	mov	r8, r0
   d82a0:	f000 fd06 	bl	d8cb0 <__gettzinfo>
   d82a4:	4621      	mov	r1, r4
   d82a6:	4607      	mov	r7, r0
   d82a8:	4640      	mov	r0, r8
   d82aa:	f000 fd05 	bl	d8cb8 <gmtime_r>
   d82ae:	6946      	ldr	r6, [r0, #20]
   d82b0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d82b4:	07b3      	lsls	r3, r6, #30
   d82b6:	4604      	mov	r4, r0
   d82b8:	d105      	bne.n	d82c6 <localtime_r+0x2e>
   d82ba:	2264      	movs	r2, #100	; 0x64
   d82bc:	fb96 f3f2 	sdiv	r3, r6, r2
   d82c0:	fb02 6313 	mls	r3, r2, r3, r6
   d82c4:	b94b      	cbnz	r3, d82da <localtime_r+0x42>
   d82c6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d82ca:	fb96 f3f5 	sdiv	r3, r6, r5
   d82ce:	fb05 6513 	mls	r5, r5, r3, r6
   d82d2:	fab5 f385 	clz	r3, r5
   d82d6:	095b      	lsrs	r3, r3, #5
   d82d8:	e000      	b.n	d82dc <localtime_r+0x44>
   d82da:	2301      	movs	r3, #1
   d82dc:	4a5f      	ldr	r2, [pc, #380]	; (d845c <localtime_r+0x1c4>)
   d82de:	2530      	movs	r5, #48	; 0x30
   d82e0:	fb05 2503 	mla	r5, r5, r3, r2
   d82e4:	f000 fb18 	bl	d8918 <__tz_lock>
   d82e8:	f000 fb18 	bl	d891c <_tzset_unlocked>
   d82ec:	4b5c      	ldr	r3, [pc, #368]	; (d8460 <localtime_r+0x1c8>)
   d82ee:	681b      	ldr	r3, [r3, #0]
   d82f0:	b1f3      	cbz	r3, d8330 <localtime_r+0x98>
   d82f2:	687b      	ldr	r3, [r7, #4]
   d82f4:	429e      	cmp	r6, r3
   d82f6:	d105      	bne.n	d8304 <localtime_r+0x6c>
   d82f8:	6839      	ldr	r1, [r7, #0]
   d82fa:	f8d8 3000 	ldr.w	r3, [r8]
   d82fe:	69fa      	ldr	r2, [r7, #28]
   d8300:	b941      	cbnz	r1, d8314 <localtime_r+0x7c>
   d8302:	e00a      	b.n	d831a <localtime_r+0x82>
   d8304:	4630      	mov	r0, r6
   d8306:	f000 fa5f 	bl	d87c8 <__tzcalc_limits>
   d830a:	2800      	cmp	r0, #0
   d830c:	d1f4      	bne.n	d82f8 <localtime_r+0x60>
   d830e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8312:	e00d      	b.n	d8330 <localtime_r+0x98>
   d8314:	4293      	cmp	r3, r2
   d8316:	db08      	blt.n	d832a <localtime_r+0x92>
   d8318:	e001      	b.n	d831e <localtime_r+0x86>
   d831a:	4293      	cmp	r3, r2
   d831c:	da07      	bge.n	d832e <localtime_r+0x96>
   d831e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8320:	4293      	cmp	r3, r2
   d8322:	bfac      	ite	ge
   d8324:	2300      	movge	r3, #0
   d8326:	2301      	movlt	r3, #1
   d8328:	e002      	b.n	d8330 <localtime_r+0x98>
   d832a:	2300      	movs	r3, #0
   d832c:	e000      	b.n	d8330 <localtime_r+0x98>
   d832e:	2301      	movs	r3, #1
   d8330:	6223      	str	r3, [r4, #32]
   d8332:	6a23      	ldr	r3, [r4, #32]
   d8334:	2b01      	cmp	r3, #1
   d8336:	bf0c      	ite	eq
   d8338:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d833a:	6a39      	ldrne	r1, [r7, #32]
   d833c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8340:	203c      	movs	r0, #60	; 0x3c
   d8342:	fb91 f6f3 	sdiv	r6, r1, r3
   d8346:	fb03 1316 	mls	r3, r3, r6, r1
   d834a:	6861      	ldr	r1, [r4, #4]
   d834c:	fb93 f2f0 	sdiv	r2, r3, r0
   d8350:	fb00 3012 	mls	r0, r0, r2, r3
   d8354:	6823      	ldr	r3, [r4, #0]
   d8356:	1a89      	subs	r1, r1, r2
   d8358:	68a2      	ldr	r2, [r4, #8]
   d835a:	6061      	str	r1, [r4, #4]
   d835c:	1a1b      	subs	r3, r3, r0
   d835e:	1b92      	subs	r2, r2, r6
   d8360:	2b3b      	cmp	r3, #59	; 0x3b
   d8362:	6023      	str	r3, [r4, #0]
   d8364:	60a2      	str	r2, [r4, #8]
   d8366:	dd03      	ble.n	d8370 <localtime_r+0xd8>
   d8368:	3101      	adds	r1, #1
   d836a:	6061      	str	r1, [r4, #4]
   d836c:	3b3c      	subs	r3, #60	; 0x3c
   d836e:	e004      	b.n	d837a <localtime_r+0xe2>
   d8370:	2b00      	cmp	r3, #0
   d8372:	da03      	bge.n	d837c <localtime_r+0xe4>
   d8374:	3901      	subs	r1, #1
   d8376:	6061      	str	r1, [r4, #4]
   d8378:	333c      	adds	r3, #60	; 0x3c
   d837a:	6023      	str	r3, [r4, #0]
   d837c:	6863      	ldr	r3, [r4, #4]
   d837e:	2b3b      	cmp	r3, #59	; 0x3b
   d8380:	dd03      	ble.n	d838a <localtime_r+0xf2>
   d8382:	3201      	adds	r2, #1
   d8384:	60a2      	str	r2, [r4, #8]
   d8386:	3b3c      	subs	r3, #60	; 0x3c
   d8388:	e004      	b.n	d8394 <localtime_r+0xfc>
   d838a:	2b00      	cmp	r3, #0
   d838c:	da03      	bge.n	d8396 <localtime_r+0xfe>
   d838e:	3a01      	subs	r2, #1
   d8390:	60a2      	str	r2, [r4, #8]
   d8392:	333c      	adds	r3, #60	; 0x3c
   d8394:	6063      	str	r3, [r4, #4]
   d8396:	68a3      	ldr	r3, [r4, #8]
   d8398:	2b17      	cmp	r3, #23
   d839a:	dd22      	ble.n	d83e2 <localtime_r+0x14a>
   d839c:	69e2      	ldr	r2, [r4, #28]
   d839e:	3201      	adds	r2, #1
   d83a0:	61e2      	str	r2, [r4, #28]
   d83a2:	69a2      	ldr	r2, [r4, #24]
   d83a4:	3201      	adds	r2, #1
   d83a6:	2a06      	cmp	r2, #6
   d83a8:	bfc8      	it	gt
   d83aa:	2200      	movgt	r2, #0
   d83ac:	61a2      	str	r2, [r4, #24]
   d83ae:	68e2      	ldr	r2, [r4, #12]
   d83b0:	3b18      	subs	r3, #24
   d83b2:	3201      	adds	r2, #1
   d83b4:	60a3      	str	r3, [r4, #8]
   d83b6:	6923      	ldr	r3, [r4, #16]
   d83b8:	60e2      	str	r2, [r4, #12]
   d83ba:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d83be:	428a      	cmp	r2, r1
   d83c0:	dd46      	ble.n	d8450 <localtime_r+0x1b8>
   d83c2:	3301      	adds	r3, #1
   d83c4:	2b0c      	cmp	r3, #12
   d83c6:	bf0c      	ite	eq
   d83c8:	6963      	ldreq	r3, [r4, #20]
   d83ca:	6123      	strne	r3, [r4, #16]
   d83cc:	eba2 0201 	sub.w	r2, r2, r1
   d83d0:	60e2      	str	r2, [r4, #12]
   d83d2:	bf01      	itttt	eq
   d83d4:	3301      	addeq	r3, #1
   d83d6:	2200      	moveq	r2, #0
   d83d8:	6122      	streq	r2, [r4, #16]
   d83da:	6163      	streq	r3, [r4, #20]
   d83dc:	bf08      	it	eq
   d83de:	61e2      	streq	r2, [r4, #28]
   d83e0:	e036      	b.n	d8450 <localtime_r+0x1b8>
   d83e2:	2b00      	cmp	r3, #0
   d83e4:	da34      	bge.n	d8450 <localtime_r+0x1b8>
   d83e6:	69e2      	ldr	r2, [r4, #28]
   d83e8:	3a01      	subs	r2, #1
   d83ea:	61e2      	str	r2, [r4, #28]
   d83ec:	69a2      	ldr	r2, [r4, #24]
   d83ee:	3a01      	subs	r2, #1
   d83f0:	bf48      	it	mi
   d83f2:	2206      	movmi	r2, #6
   d83f4:	61a2      	str	r2, [r4, #24]
   d83f6:	68e2      	ldr	r2, [r4, #12]
   d83f8:	3318      	adds	r3, #24
   d83fa:	3a01      	subs	r2, #1
   d83fc:	60e2      	str	r2, [r4, #12]
   d83fe:	60a3      	str	r3, [r4, #8]
   d8400:	bb32      	cbnz	r2, d8450 <localtime_r+0x1b8>
   d8402:	6923      	ldr	r3, [r4, #16]
   d8404:	3b01      	subs	r3, #1
   d8406:	d401      	bmi.n	d840c <localtime_r+0x174>
   d8408:	6123      	str	r3, [r4, #16]
   d840a:	e01d      	b.n	d8448 <localtime_r+0x1b0>
   d840c:	230b      	movs	r3, #11
   d840e:	6123      	str	r3, [r4, #16]
   d8410:	6963      	ldr	r3, [r4, #20]
   d8412:	1e5a      	subs	r2, r3, #1
   d8414:	f012 0f03 	tst.w	r2, #3
   d8418:	6162      	str	r2, [r4, #20]
   d841a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d841e:	d105      	bne.n	d842c <localtime_r+0x194>
   d8420:	2164      	movs	r1, #100	; 0x64
   d8422:	fb93 f2f1 	sdiv	r2, r3, r1
   d8426:	fb01 3212 	mls	r2, r1, r2, r3
   d842a:	b94a      	cbnz	r2, d8440 <localtime_r+0x1a8>
   d842c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8430:	fb93 f2f1 	sdiv	r2, r3, r1
   d8434:	fb01 3312 	mls	r3, r1, r2, r3
   d8438:	fab3 f383 	clz	r3, r3
   d843c:	095b      	lsrs	r3, r3, #5
   d843e:	e000      	b.n	d8442 <localtime_r+0x1aa>
   d8440:	2301      	movs	r3, #1
   d8442:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8446:	61e3      	str	r3, [r4, #28]
   d8448:	6923      	ldr	r3, [r4, #16]
   d844a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d844e:	60e3      	str	r3, [r4, #12]
   d8450:	f000 fa63 	bl	d891a <__tz_unlock>
   d8454:	4620      	mov	r0, r4
   d8456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d845a:	bf00      	nop
   d845c:	000d96cc 	.word	0x000d96cc
   d8460:	2003e7e4 	.word	0x2003e7e4

000d8464 <memcpy>:
   d8464:	b510      	push	{r4, lr}
   d8466:	1e43      	subs	r3, r0, #1
   d8468:	440a      	add	r2, r1
   d846a:	4291      	cmp	r1, r2
   d846c:	d004      	beq.n	d8478 <memcpy+0x14>
   d846e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8472:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8476:	e7f8      	b.n	d846a <memcpy+0x6>
   d8478:	bd10      	pop	{r4, pc}

000d847a <memset>:
   d847a:	4402      	add	r2, r0
   d847c:	4603      	mov	r3, r0
   d847e:	4293      	cmp	r3, r2
   d8480:	d002      	beq.n	d8488 <memset+0xe>
   d8482:	f803 1b01 	strb.w	r1, [r3], #1
   d8486:	e7fa      	b.n	d847e <memset+0x4>
   d8488:	4770      	bx	lr
	...

000d848c <srand>:
   d848c:	b538      	push	{r3, r4, r5, lr}
   d848e:	4b12      	ldr	r3, [pc, #72]	; (d84d8 <srand+0x4c>)
   d8490:	681c      	ldr	r4, [r3, #0]
   d8492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8494:	4605      	mov	r5, r0
   d8496:	b9d3      	cbnz	r3, d84ce <srand+0x42>
   d8498:	2018      	movs	r0, #24
   d849a:	f7fd fac1 	bl	d5a20 <malloc>
   d849e:	f243 330e 	movw	r3, #13070	; 0x330e
   d84a2:	63a0      	str	r0, [r4, #56]	; 0x38
   d84a4:	8003      	strh	r3, [r0, #0]
   d84a6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d84aa:	8043      	strh	r3, [r0, #2]
   d84ac:	f241 2334 	movw	r3, #4660	; 0x1234
   d84b0:	8083      	strh	r3, [r0, #4]
   d84b2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d84b6:	80c3      	strh	r3, [r0, #6]
   d84b8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d84bc:	8103      	strh	r3, [r0, #8]
   d84be:	2305      	movs	r3, #5
   d84c0:	8143      	strh	r3, [r0, #10]
   d84c2:	230b      	movs	r3, #11
   d84c4:	8183      	strh	r3, [r0, #12]
   d84c6:	2201      	movs	r2, #1
   d84c8:	2300      	movs	r3, #0
   d84ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d84ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d84d0:	2200      	movs	r2, #0
   d84d2:	611d      	str	r5, [r3, #16]
   d84d4:	615a      	str	r2, [r3, #20]
   d84d6:	bd38      	pop	{r3, r4, r5, pc}
   d84d8:	2003e1e4 	.word	0x2003e1e4

000d84dc <strcmp>:
   d84dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d84e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d84e4:	2a01      	cmp	r2, #1
   d84e6:	bf28      	it	cs
   d84e8:	429a      	cmpcs	r2, r3
   d84ea:	d0f7      	beq.n	d84dc <strcmp>
   d84ec:	1ad0      	subs	r0, r2, r3
   d84ee:	4770      	bx	lr

000d84f0 <strcpy>:
   d84f0:	4603      	mov	r3, r0
   d84f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d84f6:	f803 2b01 	strb.w	r2, [r3], #1
   d84fa:	2a00      	cmp	r2, #0
   d84fc:	d1f9      	bne.n	d84f2 <strcpy+0x2>
   d84fe:	4770      	bx	lr

000d8500 <strdup>:
   d8500:	4b02      	ldr	r3, [pc, #8]	; (d850c <strdup+0xc>)
   d8502:	4601      	mov	r1, r0
   d8504:	6818      	ldr	r0, [r3, #0]
   d8506:	f000 b803 	b.w	d8510 <_strdup_r>
   d850a:	bf00      	nop
   d850c:	2003e1e4 	.word	0x2003e1e4

000d8510 <_strdup_r>:
   d8510:	b570      	push	{r4, r5, r6, lr}
   d8512:	4606      	mov	r6, r0
   d8514:	4608      	mov	r0, r1
   d8516:	460c      	mov	r4, r1
   d8518:	f000 f80d 	bl	d8536 <strlen>
   d851c:	1c45      	adds	r5, r0, #1
   d851e:	4629      	mov	r1, r5
   d8520:	4630      	mov	r0, r6
   d8522:	f7fd fab5 	bl	d5a90 <_malloc_r>
   d8526:	4606      	mov	r6, r0
   d8528:	b118      	cbz	r0, d8532 <_strdup_r+0x22>
   d852a:	462a      	mov	r2, r5
   d852c:	4621      	mov	r1, r4
   d852e:	f7ff ff99 	bl	d8464 <memcpy>
   d8532:	4630      	mov	r0, r6
   d8534:	bd70      	pop	{r4, r5, r6, pc}

000d8536 <strlen>:
   d8536:	4603      	mov	r3, r0
   d8538:	f813 2b01 	ldrb.w	r2, [r3], #1
   d853c:	2a00      	cmp	r2, #0
   d853e:	d1fb      	bne.n	d8538 <strlen+0x2>
   d8540:	1a18      	subs	r0, r3, r0
   d8542:	3801      	subs	r0, #1
   d8544:	4770      	bx	lr

000d8546 <strncmp>:
   d8546:	b530      	push	{r4, r5, lr}
   d8548:	b182      	cbz	r2, d856c <strncmp+0x26>
   d854a:	1e45      	subs	r5, r0, #1
   d854c:	3901      	subs	r1, #1
   d854e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8552:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8556:	42a3      	cmp	r3, r4
   d8558:	d106      	bne.n	d8568 <strncmp+0x22>
   d855a:	43ec      	mvns	r4, r5
   d855c:	4414      	add	r4, r2
   d855e:	42e0      	cmn	r0, r4
   d8560:	d001      	beq.n	d8566 <strncmp+0x20>
   d8562:	2b00      	cmp	r3, #0
   d8564:	d1f3      	bne.n	d854e <strncmp+0x8>
   d8566:	461c      	mov	r4, r3
   d8568:	1b18      	subs	r0, r3, r4
   d856a:	bd30      	pop	{r4, r5, pc}
   d856c:	4610      	mov	r0, r2
   d856e:	bd30      	pop	{r4, r5, pc}

000d8570 <strncpy>:
   d8570:	b510      	push	{r4, lr}
   d8572:	4603      	mov	r3, r0
   d8574:	b142      	cbz	r2, d8588 <strncpy+0x18>
   d8576:	f811 4b01 	ldrb.w	r4, [r1], #1
   d857a:	f803 4b01 	strb.w	r4, [r3], #1
   d857e:	3a01      	subs	r2, #1
   d8580:	2c00      	cmp	r4, #0
   d8582:	d1f7      	bne.n	d8574 <strncpy+0x4>
   d8584:	441a      	add	r2, r3
   d8586:	e000      	b.n	d858a <strncpy+0x1a>
   d8588:	bd10      	pop	{r4, pc}
   d858a:	4293      	cmp	r3, r2
   d858c:	d002      	beq.n	d8594 <strncpy+0x24>
   d858e:	f803 4b01 	strb.w	r4, [r3], #1
   d8592:	e7fa      	b.n	d858a <strncpy+0x1a>
   d8594:	bd10      	pop	{r4, pc}
	...

000d8598 <_strtol_r>:
   d8598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d859c:	4680      	mov	r8, r0
   d859e:	4840      	ldr	r0, [pc, #256]	; (d86a0 <_strtol_r+0x108>)
   d85a0:	f8d0 9000 	ldr.w	r9, [r0]
   d85a4:	460f      	mov	r7, r1
   d85a6:	463d      	mov	r5, r7
   d85a8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d85ac:	eb09 0004 	add.w	r0, r9, r4
   d85b0:	7840      	ldrb	r0, [r0, #1]
   d85b2:	f000 0008 	and.w	r0, r0, #8
   d85b6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d85ba:	b108      	cbz	r0, d85c0 <_strtol_r+0x28>
   d85bc:	462f      	mov	r7, r5
   d85be:	e7f2      	b.n	d85a6 <_strtol_r+0xe>
   d85c0:	2c2d      	cmp	r4, #45	; 0x2d
   d85c2:	d103      	bne.n	d85cc <_strtol_r+0x34>
   d85c4:	1cbd      	adds	r5, r7, #2
   d85c6:	787c      	ldrb	r4, [r7, #1]
   d85c8:	2601      	movs	r6, #1
   d85ca:	e003      	b.n	d85d4 <_strtol_r+0x3c>
   d85cc:	2c2b      	cmp	r4, #43	; 0x2b
   d85ce:	bf04      	itt	eq
   d85d0:	787c      	ldrbeq	r4, [r7, #1]
   d85d2:	1cbd      	addeq	r5, r7, #2
   d85d4:	b113      	cbz	r3, d85dc <_strtol_r+0x44>
   d85d6:	2b10      	cmp	r3, #16
   d85d8:	d10a      	bne.n	d85f0 <_strtol_r+0x58>
   d85da:	e05b      	b.n	d8694 <_strtol_r+0xfc>
   d85dc:	2c30      	cmp	r4, #48	; 0x30
   d85de:	d157      	bne.n	d8690 <_strtol_r+0xf8>
   d85e0:	7828      	ldrb	r0, [r5, #0]
   d85e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d85e6:	2858      	cmp	r0, #88	; 0x58
   d85e8:	d14d      	bne.n	d8686 <_strtol_r+0xee>
   d85ea:	786c      	ldrb	r4, [r5, #1]
   d85ec:	2310      	movs	r3, #16
   d85ee:	3502      	adds	r5, #2
   d85f0:	2e00      	cmp	r6, #0
   d85f2:	bf14      	ite	ne
   d85f4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d85f8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d85fc:	2700      	movs	r7, #0
   d85fe:	fbbc faf3 	udiv	sl, ip, r3
   d8602:	4638      	mov	r0, r7
   d8604:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8608:	eb09 0e04 	add.w	lr, r9, r4
   d860c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8610:	f01e 0f04 	tst.w	lr, #4
   d8614:	d001      	beq.n	d861a <_strtol_r+0x82>
   d8616:	3c30      	subs	r4, #48	; 0x30
   d8618:	e00b      	b.n	d8632 <_strtol_r+0x9a>
   d861a:	f01e 0e03 	ands.w	lr, lr, #3
   d861e:	d01b      	beq.n	d8658 <_strtol_r+0xc0>
   d8620:	f1be 0f01 	cmp.w	lr, #1
   d8624:	bf0c      	ite	eq
   d8626:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d862a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d862e:	ebce 0404 	rsb	r4, lr, r4
   d8632:	42a3      	cmp	r3, r4
   d8634:	dd10      	ble.n	d8658 <_strtol_r+0xc0>
   d8636:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d863a:	d00a      	beq.n	d8652 <_strtol_r+0xba>
   d863c:	4550      	cmp	r0, sl
   d863e:	d806      	bhi.n	d864e <_strtol_r+0xb6>
   d8640:	d101      	bne.n	d8646 <_strtol_r+0xae>
   d8642:	4564      	cmp	r4, ip
   d8644:	dc03      	bgt.n	d864e <_strtol_r+0xb6>
   d8646:	fb03 4000 	mla	r0, r3, r0, r4
   d864a:	2701      	movs	r7, #1
   d864c:	e001      	b.n	d8652 <_strtol_r+0xba>
   d864e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8652:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8656:	e7d7      	b.n	d8608 <_strtol_r+0x70>
   d8658:	1c7b      	adds	r3, r7, #1
   d865a:	d10c      	bne.n	d8676 <_strtol_r+0xde>
   d865c:	2e00      	cmp	r6, #0
   d865e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8662:	bf14      	ite	ne
   d8664:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8668:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d866c:	f8c8 3000 	str.w	r3, [r8]
   d8670:	b92a      	cbnz	r2, d867e <_strtol_r+0xe6>
   d8672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8676:	b106      	cbz	r6, d867a <_strtol_r+0xe2>
   d8678:	4240      	negs	r0, r0
   d867a:	b172      	cbz	r2, d869a <_strtol_r+0x102>
   d867c:	b107      	cbz	r7, d8680 <_strtol_r+0xe8>
   d867e:	1e69      	subs	r1, r5, #1
   d8680:	6011      	str	r1, [r2, #0]
   d8682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8686:	2430      	movs	r4, #48	; 0x30
   d8688:	2b00      	cmp	r3, #0
   d868a:	d1b1      	bne.n	d85f0 <_strtol_r+0x58>
   d868c:	2308      	movs	r3, #8
   d868e:	e7af      	b.n	d85f0 <_strtol_r+0x58>
   d8690:	230a      	movs	r3, #10
   d8692:	e7ad      	b.n	d85f0 <_strtol_r+0x58>
   d8694:	2c30      	cmp	r4, #48	; 0x30
   d8696:	d0a3      	beq.n	d85e0 <_strtol_r+0x48>
   d8698:	e7aa      	b.n	d85f0 <_strtol_r+0x58>
   d869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d869e:	bf00      	nop
   d86a0:	2003e180 	.word	0x2003e180

000d86a4 <strtol>:
   d86a4:	4613      	mov	r3, r2
   d86a6:	460a      	mov	r2, r1
   d86a8:	4601      	mov	r1, r0
   d86aa:	4802      	ldr	r0, [pc, #8]	; (d86b4 <strtol+0x10>)
   d86ac:	6800      	ldr	r0, [r0, #0]
   d86ae:	f7ff bf73 	b.w	d8598 <_strtol_r>
   d86b2:	bf00      	nop
   d86b4:	2003e1e4 	.word	0x2003e1e4

000d86b8 <_strtoul_r>:
   d86b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d86bc:	4680      	mov	r8, r0
   d86be:	483c      	ldr	r0, [pc, #240]	; (d87b0 <_strtoul_r+0xf8>)
   d86c0:	f8d0 9000 	ldr.w	r9, [r0]
   d86c4:	460e      	mov	r6, r1
   d86c6:	4635      	mov	r5, r6
   d86c8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d86cc:	eb09 0004 	add.w	r0, r9, r4
   d86d0:	7840      	ldrb	r0, [r0, #1]
   d86d2:	f000 0008 	and.w	r0, r0, #8
   d86d6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d86da:	b108      	cbz	r0, d86e0 <_strtoul_r+0x28>
   d86dc:	462e      	mov	r6, r5
   d86de:	e7f2      	b.n	d86c6 <_strtoul_r+0xe>
   d86e0:	2c2d      	cmp	r4, #45	; 0x2d
   d86e2:	d103      	bne.n	d86ec <_strtoul_r+0x34>
   d86e4:	1cb5      	adds	r5, r6, #2
   d86e6:	7874      	ldrb	r4, [r6, #1]
   d86e8:	2701      	movs	r7, #1
   d86ea:	e003      	b.n	d86f4 <_strtoul_r+0x3c>
   d86ec:	2c2b      	cmp	r4, #43	; 0x2b
   d86ee:	bf04      	itt	eq
   d86f0:	7874      	ldrbeq	r4, [r6, #1]
   d86f2:	1cb5      	addeq	r5, r6, #2
   d86f4:	b113      	cbz	r3, d86fc <_strtoul_r+0x44>
   d86f6:	2b10      	cmp	r3, #16
   d86f8:	d10a      	bne.n	d8710 <_strtoul_r+0x58>
   d86fa:	e053      	b.n	d87a4 <_strtoul_r+0xec>
   d86fc:	2c30      	cmp	r4, #48	; 0x30
   d86fe:	d14f      	bne.n	d87a0 <_strtoul_r+0xe8>
   d8700:	7828      	ldrb	r0, [r5, #0]
   d8702:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8706:	2858      	cmp	r0, #88	; 0x58
   d8708:	d145      	bne.n	d8796 <_strtoul_r+0xde>
   d870a:	786c      	ldrb	r4, [r5, #1]
   d870c:	2310      	movs	r3, #16
   d870e:	3502      	adds	r5, #2
   d8710:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8714:	2600      	movs	r6, #0
   d8716:	fbbc fcf3 	udiv	ip, ip, r3
   d871a:	fb03 fa0c 	mul.w	sl, r3, ip
   d871e:	ea6f 0a0a 	mvn.w	sl, sl
   d8722:	4630      	mov	r0, r6
   d8724:	eb09 0e04 	add.w	lr, r9, r4
   d8728:	f89e e001 	ldrb.w	lr, [lr, #1]
   d872c:	f01e 0f04 	tst.w	lr, #4
   d8730:	d001      	beq.n	d8736 <_strtoul_r+0x7e>
   d8732:	3c30      	subs	r4, #48	; 0x30
   d8734:	e00b      	b.n	d874e <_strtoul_r+0x96>
   d8736:	f01e 0e03 	ands.w	lr, lr, #3
   d873a:	d01a      	beq.n	d8772 <_strtoul_r+0xba>
   d873c:	f1be 0f01 	cmp.w	lr, #1
   d8740:	bf0c      	ite	eq
   d8742:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8746:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d874a:	ebce 0404 	rsb	r4, lr, r4
   d874e:	42a3      	cmp	r3, r4
   d8750:	dd0f      	ble.n	d8772 <_strtoul_r+0xba>
   d8752:	2e00      	cmp	r6, #0
   d8754:	db08      	blt.n	d8768 <_strtoul_r+0xb0>
   d8756:	4560      	cmp	r0, ip
   d8758:	d806      	bhi.n	d8768 <_strtoul_r+0xb0>
   d875a:	d101      	bne.n	d8760 <_strtoul_r+0xa8>
   d875c:	4554      	cmp	r4, sl
   d875e:	dc03      	bgt.n	d8768 <_strtoul_r+0xb0>
   d8760:	fb03 4000 	mla	r0, r3, r0, r4
   d8764:	2601      	movs	r6, #1
   d8766:	e001      	b.n	d876c <_strtoul_r+0xb4>
   d8768:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d876c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8770:	e7d8      	b.n	d8724 <_strtoul_r+0x6c>
   d8772:	2e00      	cmp	r6, #0
   d8774:	da07      	bge.n	d8786 <_strtoul_r+0xce>
   d8776:	2322      	movs	r3, #34	; 0x22
   d8778:	f8c8 3000 	str.w	r3, [r8]
   d877c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8780:	b92a      	cbnz	r2, d878e <_strtoul_r+0xd6>
   d8782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8786:	b107      	cbz	r7, d878a <_strtoul_r+0xd2>
   d8788:	4240      	negs	r0, r0
   d878a:	b172      	cbz	r2, d87aa <_strtoul_r+0xf2>
   d878c:	b106      	cbz	r6, d8790 <_strtoul_r+0xd8>
   d878e:	1e69      	subs	r1, r5, #1
   d8790:	6011      	str	r1, [r2, #0]
   d8792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8796:	2430      	movs	r4, #48	; 0x30
   d8798:	2b00      	cmp	r3, #0
   d879a:	d1b9      	bne.n	d8710 <_strtoul_r+0x58>
   d879c:	2308      	movs	r3, #8
   d879e:	e7b7      	b.n	d8710 <_strtoul_r+0x58>
   d87a0:	230a      	movs	r3, #10
   d87a2:	e7b5      	b.n	d8710 <_strtoul_r+0x58>
   d87a4:	2c30      	cmp	r4, #48	; 0x30
   d87a6:	d0ab      	beq.n	d8700 <_strtoul_r+0x48>
   d87a8:	e7b2      	b.n	d8710 <_strtoul_r+0x58>
   d87aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d87ae:	bf00      	nop
   d87b0:	2003e180 	.word	0x2003e180

000d87b4 <strtoul>:
   d87b4:	4613      	mov	r3, r2
   d87b6:	460a      	mov	r2, r1
   d87b8:	4601      	mov	r1, r0
   d87ba:	4802      	ldr	r0, [pc, #8]	; (d87c4 <strtoul+0x10>)
   d87bc:	6800      	ldr	r0, [r0, #0]
   d87be:	f7ff bf7b 	b.w	d86b8 <_strtoul_r>
   d87c2:	bf00      	nop
   d87c4:	2003e1e4 	.word	0x2003e1e4

000d87c8 <__tzcalc_limits>:
   d87c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87cc:	4604      	mov	r4, r0
   d87ce:	f000 fa6f 	bl	d8cb0 <__gettzinfo>
   d87d2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d87d6:	429c      	cmp	r4, r3
   d87d8:	f340 8096 	ble.w	d8908 <__tzcalc_limits+0x140>
   d87dc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d87e0:	18e3      	adds	r3, r4, r3
   d87e2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d87e6:	109b      	asrs	r3, r3, #2
   d87e8:	f240 156d 	movw	r5, #365	; 0x16d
   d87ec:	fb05 3502 	mla	r5, r5, r2, r3
   d87f0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d87f4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d87f8:	fb92 f3f3 	sdiv	r3, r2, r3
   d87fc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8800:	442b      	add	r3, r5
   d8802:	18a5      	adds	r5, r4, r2
   d8804:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8808:	fb95 f5f2 	sdiv	r5, r5, r2
   d880c:	441d      	add	r5, r3
   d880e:	2364      	movs	r3, #100	; 0x64
   d8810:	fb94 f7f2 	sdiv	r7, r4, r2
   d8814:	fb94 f6f3 	sdiv	r6, r4, r3
   d8818:	fb02 4717 	mls	r7, r2, r7, r4
   d881c:	fb03 4616 	mls	r6, r3, r6, r4
   d8820:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8824:	fab7 fe87 	clz	lr, r7
   d8828:	9301      	str	r3, [sp, #4]
   d882a:	f004 0303 	and.w	r3, r4, #3
   d882e:	6044      	str	r4, [r0, #4]
   d8830:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8834:	4601      	mov	r1, r0
   d8836:	9300      	str	r3, [sp, #0]
   d8838:	f04f 0c07 	mov.w	ip, #7
   d883c:	7a0b      	ldrb	r3, [r1, #8]
   d883e:	2b4a      	cmp	r3, #74	; 0x4a
   d8840:	d10e      	bne.n	d8860 <__tzcalc_limits+0x98>
   d8842:	694b      	ldr	r3, [r1, #20]
   d8844:	9a00      	ldr	r2, [sp, #0]
   d8846:	18ec      	adds	r4, r5, r3
   d8848:	b902      	cbnz	r2, d884c <__tzcalc_limits+0x84>
   d884a:	b906      	cbnz	r6, d884e <__tzcalc_limits+0x86>
   d884c:	b927      	cbnz	r7, d8858 <__tzcalc_limits+0x90>
   d884e:	2b3b      	cmp	r3, #59	; 0x3b
   d8850:	bfd4      	ite	le
   d8852:	2300      	movle	r3, #0
   d8854:	2301      	movgt	r3, #1
   d8856:	e000      	b.n	d885a <__tzcalc_limits+0x92>
   d8858:	2300      	movs	r3, #0
   d885a:	4423      	add	r3, r4
   d885c:	3b01      	subs	r3, #1
   d885e:	e03f      	b.n	d88e0 <__tzcalc_limits+0x118>
   d8860:	2b44      	cmp	r3, #68	; 0x44
   d8862:	d102      	bne.n	d886a <__tzcalc_limits+0xa2>
   d8864:	694b      	ldr	r3, [r1, #20]
   d8866:	442b      	add	r3, r5
   d8868:	e03a      	b.n	d88e0 <__tzcalc_limits+0x118>
   d886a:	9b00      	ldr	r3, [sp, #0]
   d886c:	b92b      	cbnz	r3, d887a <__tzcalc_limits+0xb2>
   d886e:	2e00      	cmp	r6, #0
   d8870:	bf0c      	ite	eq
   d8872:	46f0      	moveq	r8, lr
   d8874:	f04f 0801 	movne.w	r8, #1
   d8878:	e000      	b.n	d887c <__tzcalc_limits+0xb4>
   d887a:	46f0      	mov	r8, lr
   d887c:	4b24      	ldr	r3, [pc, #144]	; (d8910 <__tzcalc_limits+0x148>)
   d887e:	68cc      	ldr	r4, [r1, #12]
   d8880:	2230      	movs	r2, #48	; 0x30
   d8882:	fb02 3808 	mla	r8, r2, r8, r3
   d8886:	f1a8 0a04 	sub.w	sl, r8, #4
   d888a:	46a9      	mov	r9, r5
   d888c:	2301      	movs	r3, #1
   d888e:	42a3      	cmp	r3, r4
   d8890:	da04      	bge.n	d889c <__tzcalc_limits+0xd4>
   d8892:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d8896:	3301      	adds	r3, #1
   d8898:	44d9      	add	r9, fp
   d889a:	e7f8      	b.n	d888e <__tzcalc_limits+0xc6>
   d889c:	f109 0304 	add.w	r3, r9, #4
   d88a0:	fb93 fbfc 	sdiv	fp, r3, ip
   d88a4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d88a8:	2c01      	cmp	r4, #1
   d88aa:	ebca 0a03 	rsb	sl, sl, r3
   d88ae:	694b      	ldr	r3, [r1, #20]
   d88b0:	bfb8      	it	lt
   d88b2:	2401      	movlt	r4, #1
   d88b4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d88b8:	ebb3 0a0a 	subs.w	sl, r3, sl
   d88bc:	690b      	ldr	r3, [r1, #16]
   d88be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d88c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d88c6:	bf48      	it	mi
   d88c8:	f10a 0a07 	addmi.w	sl, sl, #7
   d88cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d88d0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d88d4:	4453      	add	r3, sl
   d88d6:	42a3      	cmp	r3, r4
   d88d8:	db01      	blt.n	d88de <__tzcalc_limits+0x116>
   d88da:	3b07      	subs	r3, #7
   d88dc:	e7fb      	b.n	d88d6 <__tzcalc_limits+0x10e>
   d88de:	444b      	add	r3, r9
   d88e0:	698c      	ldr	r4, [r1, #24]
   d88e2:	4a0c      	ldr	r2, [pc, #48]	; (d8914 <__tzcalc_limits+0x14c>)
   d88e4:	fb02 4303 	mla	r3, r2, r3, r4
   d88e8:	6a0c      	ldr	r4, [r1, #32]
   d88ea:	4423      	add	r3, r4
   d88ec:	f841 3f1c 	str.w	r3, [r1, #28]!
   d88f0:	9b01      	ldr	r3, [sp, #4]
   d88f2:	4299      	cmp	r1, r3
   d88f4:	d1a2      	bne.n	d883c <__tzcalc_limits+0x74>
   d88f6:	69c3      	ldr	r3, [r0, #28]
   d88f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d88fa:	4293      	cmp	r3, r2
   d88fc:	bfac      	ite	ge
   d88fe:	2300      	movge	r3, #0
   d8900:	2301      	movlt	r3, #1
   d8902:	6003      	str	r3, [r0, #0]
   d8904:	2001      	movs	r0, #1
   d8906:	e000      	b.n	d890a <__tzcalc_limits+0x142>
   d8908:	2000      	movs	r0, #0
   d890a:	b003      	add	sp, #12
   d890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8910:	000d96cc 	.word	0x000d96cc
   d8914:	00015180 	.word	0x00015180

000d8918 <__tz_lock>:
   d8918:	4770      	bx	lr

000d891a <__tz_unlock>:
   d891a:	4770      	bx	lr

000d891c <_tzset_unlocked>:
   d891c:	4b01      	ldr	r3, [pc, #4]	; (d8924 <_tzset_unlocked+0x8>)
   d891e:	6818      	ldr	r0, [r3, #0]
   d8920:	f000 b802 	b.w	d8928 <_tzset_unlocked_r>
   d8924:	2003e1e4 	.word	0x2003e1e4

000d8928 <_tzset_unlocked_r>:
   d8928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d892c:	b08d      	sub	sp, #52	; 0x34
   d892e:	4607      	mov	r7, r0
   d8930:	f000 f9be 	bl	d8cb0 <__gettzinfo>
   d8934:	49b0      	ldr	r1, [pc, #704]	; (d8bf8 <_tzset_unlocked_r+0x2d0>)
   d8936:	4eb1      	ldr	r6, [pc, #708]	; (d8bfc <_tzset_unlocked_r+0x2d4>)
   d8938:	4604      	mov	r4, r0
   d893a:	4638      	mov	r0, r7
   d893c:	f000 f9b0 	bl	d8ca0 <_getenv_r>
   d8940:	4605      	mov	r5, r0
   d8942:	b960      	cbnz	r0, d895e <_tzset_unlocked_r+0x36>
   d8944:	4bae      	ldr	r3, [pc, #696]	; (d8c00 <_tzset_unlocked_r+0x2d8>)
   d8946:	4aaf      	ldr	r2, [pc, #700]	; (d8c04 <_tzset_unlocked_r+0x2dc>)
   d8948:	6018      	str	r0, [r3, #0]
   d894a:	4baf      	ldr	r3, [pc, #700]	; (d8c08 <_tzset_unlocked_r+0x2e0>)
   d894c:	6018      	str	r0, [r3, #0]
   d894e:	4baf      	ldr	r3, [pc, #700]	; (d8c0c <_tzset_unlocked_r+0x2e4>)
   d8950:	6830      	ldr	r0, [r6, #0]
   d8952:	601a      	str	r2, [r3, #0]
   d8954:	605a      	str	r2, [r3, #4]
   d8956:	f7fd f86b 	bl	d5a30 <free>
   d895a:	6035      	str	r5, [r6, #0]
   d895c:	e148      	b.n	d8bf0 <_tzset_unlocked_r+0x2c8>
   d895e:	6831      	ldr	r1, [r6, #0]
   d8960:	b979      	cbnz	r1, d8982 <_tzset_unlocked_r+0x5a>
   d8962:	6830      	ldr	r0, [r6, #0]
   d8964:	f7fd f864 	bl	d5a30 <free>
   d8968:	4628      	mov	r0, r5
   d896a:	f7ff fde4 	bl	d8536 <strlen>
   d896e:	1c41      	adds	r1, r0, #1
   d8970:	4638      	mov	r0, r7
   d8972:	f7fd f88d 	bl	d5a90 <_malloc_r>
   d8976:	6030      	str	r0, [r6, #0]
   d8978:	b148      	cbz	r0, d898e <_tzset_unlocked_r+0x66>
   d897a:	4629      	mov	r1, r5
   d897c:	f7ff fdb8 	bl	d84f0 <strcpy>
   d8980:	e005      	b.n	d898e <_tzset_unlocked_r+0x66>
   d8982:	f7ff fdab 	bl	d84dc <strcmp>
   d8986:	2800      	cmp	r0, #0
   d8988:	f000 8132 	beq.w	d8bf0 <_tzset_unlocked_r+0x2c8>
   d898c:	e7e9      	b.n	d8962 <_tzset_unlocked_r+0x3a>
   d898e:	782b      	ldrb	r3, [r5, #0]
   d8990:	4a9f      	ldr	r2, [pc, #636]	; (d8c10 <_tzset_unlocked_r+0x2e8>)
   d8992:	49a0      	ldr	r1, [pc, #640]	; (d8c14 <_tzset_unlocked_r+0x2ec>)
   d8994:	2b3a      	cmp	r3, #58	; 0x3a
   d8996:	bf08      	it	eq
   d8998:	3501      	addeq	r5, #1
   d899a:	ae0a      	add	r6, sp, #40	; 0x28
   d899c:	4633      	mov	r3, r6
   d899e:	4628      	mov	r0, r5
   d89a0:	f7fd f85e 	bl	d5a60 <siscanf>
   d89a4:	2800      	cmp	r0, #0
   d89a6:	f340 8123 	ble.w	d8bf0 <_tzset_unlocked_r+0x2c8>
   d89aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d89ac:	18ef      	adds	r7, r5, r3
   d89ae:	5ceb      	ldrb	r3, [r5, r3]
   d89b0:	2b2d      	cmp	r3, #45	; 0x2d
   d89b2:	d103      	bne.n	d89bc <_tzset_unlocked_r+0x94>
   d89b4:	3701      	adds	r7, #1
   d89b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d89ba:	e003      	b.n	d89c4 <_tzset_unlocked_r+0x9c>
   d89bc:	2b2b      	cmp	r3, #43	; 0x2b
   d89be:	bf08      	it	eq
   d89c0:	3701      	addeq	r7, #1
   d89c2:	2501      	movs	r5, #1
   d89c4:	f10d 0a20 	add.w	sl, sp, #32
   d89c8:	f10d 0b1e 	add.w	fp, sp, #30
   d89cc:	f04f 0800 	mov.w	r8, #0
   d89d0:	9603      	str	r6, [sp, #12]
   d89d2:	f8cd a008 	str.w	sl, [sp, #8]
   d89d6:	9601      	str	r6, [sp, #4]
   d89d8:	f8cd b000 	str.w	fp, [sp]
   d89dc:	4633      	mov	r3, r6
   d89de:	aa07      	add	r2, sp, #28
   d89e0:	498d      	ldr	r1, [pc, #564]	; (d8c18 <_tzset_unlocked_r+0x2f0>)
   d89e2:	f8ad 801e 	strh.w	r8, [sp, #30]
   d89e6:	4638      	mov	r0, r7
   d89e8:	f8ad 8020 	strh.w	r8, [sp, #32]
   d89ec:	f7fd f838 	bl	d5a60 <siscanf>
   d89f0:	4540      	cmp	r0, r8
   d89f2:	f340 80fd 	ble.w	d8bf0 <_tzset_unlocked_r+0x2c8>
   d89f6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d89fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d89fe:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8c24 <_tzset_unlocked_r+0x2fc>
   d8a02:	213c      	movs	r1, #60	; 0x3c
   d8a04:	fb01 3302 	mla	r3, r1, r2, r3
   d8a08:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8a0c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8a10:	fb01 3302 	mla	r3, r1, r2, r3
   d8a14:	435d      	muls	r5, r3
   d8a16:	6225      	str	r5, [r4, #32]
   d8a18:	4d7c      	ldr	r5, [pc, #496]	; (d8c0c <_tzset_unlocked_r+0x2e4>)
   d8a1a:	4b7d      	ldr	r3, [pc, #500]	; (d8c10 <_tzset_unlocked_r+0x2e8>)
   d8a1c:	602b      	str	r3, [r5, #0]
   d8a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a20:	497c      	ldr	r1, [pc, #496]	; (d8c14 <_tzset_unlocked_r+0x2ec>)
   d8a22:	441f      	add	r7, r3
   d8a24:	464a      	mov	r2, r9
   d8a26:	4633      	mov	r3, r6
   d8a28:	4638      	mov	r0, r7
   d8a2a:	f7fd f819 	bl	d5a60 <siscanf>
   d8a2e:	4540      	cmp	r0, r8
   d8a30:	dc08      	bgt.n	d8a44 <_tzset_unlocked_r+0x11c>
   d8a32:	682b      	ldr	r3, [r5, #0]
   d8a34:	606b      	str	r3, [r5, #4]
   d8a36:	4b72      	ldr	r3, [pc, #456]	; (d8c00 <_tzset_unlocked_r+0x2d8>)
   d8a38:	6a22      	ldr	r2, [r4, #32]
   d8a3a:	601a      	str	r2, [r3, #0]
   d8a3c:	4b72      	ldr	r3, [pc, #456]	; (d8c08 <_tzset_unlocked_r+0x2e0>)
   d8a3e:	f8c3 8000 	str.w	r8, [r3]
   d8a42:	e0d5      	b.n	d8bf0 <_tzset_unlocked_r+0x2c8>
   d8a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a46:	f8c5 9004 	str.w	r9, [r5, #4]
   d8a4a:	18fd      	adds	r5, r7, r3
   d8a4c:	5cfb      	ldrb	r3, [r7, r3]
   d8a4e:	2b2d      	cmp	r3, #45	; 0x2d
   d8a50:	d103      	bne.n	d8a5a <_tzset_unlocked_r+0x132>
   d8a52:	3501      	adds	r5, #1
   d8a54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8a58:	e003      	b.n	d8a62 <_tzset_unlocked_r+0x13a>
   d8a5a:	2b2b      	cmp	r3, #43	; 0x2b
   d8a5c:	bf08      	it	eq
   d8a5e:	3501      	addeq	r5, #1
   d8a60:	2701      	movs	r7, #1
   d8a62:	2300      	movs	r3, #0
   d8a64:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8a68:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8a6c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8a70:	930a      	str	r3, [sp, #40]	; 0x28
   d8a72:	9603      	str	r6, [sp, #12]
   d8a74:	f8cd a008 	str.w	sl, [sp, #8]
   d8a78:	9601      	str	r6, [sp, #4]
   d8a7a:	f8cd b000 	str.w	fp, [sp]
   d8a7e:	4633      	mov	r3, r6
   d8a80:	aa07      	add	r2, sp, #28
   d8a82:	4965      	ldr	r1, [pc, #404]	; (d8c18 <_tzset_unlocked_r+0x2f0>)
   d8a84:	4628      	mov	r0, r5
   d8a86:	f7fc ffeb 	bl	d5a60 <siscanf>
   d8a8a:	2800      	cmp	r0, #0
   d8a8c:	dc04      	bgt.n	d8a98 <_tzset_unlocked_r+0x170>
   d8a8e:	6a23      	ldr	r3, [r4, #32]
   d8a90:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8a94:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8a96:	e00e      	b.n	d8ab6 <_tzset_unlocked_r+0x18e>
   d8a98:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8a9c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8aa0:	213c      	movs	r1, #60	; 0x3c
   d8aa2:	fb01 3302 	mla	r3, r1, r2, r3
   d8aa6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8aaa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8aae:	fb01 3302 	mla	r3, r1, r2, r3
   d8ab2:	435f      	muls	r7, r3
   d8ab4:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8ab8:	4627      	mov	r7, r4
   d8aba:	441d      	add	r5, r3
   d8abc:	f04f 0900 	mov.w	r9, #0
   d8ac0:	782b      	ldrb	r3, [r5, #0]
   d8ac2:	2b2c      	cmp	r3, #44	; 0x2c
   d8ac4:	bf08      	it	eq
   d8ac6:	3501      	addeq	r5, #1
   d8ac8:	f895 8000 	ldrb.w	r8, [r5]
   d8acc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8ad0:	d126      	bne.n	d8b20 <_tzset_unlocked_r+0x1f8>
   d8ad2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8ad6:	9302      	str	r3, [sp, #8]
   d8ad8:	ab09      	add	r3, sp, #36	; 0x24
   d8ada:	9300      	str	r3, [sp, #0]
   d8adc:	9603      	str	r6, [sp, #12]
   d8ade:	9601      	str	r6, [sp, #4]
   d8ae0:	4633      	mov	r3, r6
   d8ae2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8ae6:	494d      	ldr	r1, [pc, #308]	; (d8c1c <_tzset_unlocked_r+0x2f4>)
   d8ae8:	4628      	mov	r0, r5
   d8aea:	f7fc ffb9 	bl	d5a60 <siscanf>
   d8aee:	2803      	cmp	r0, #3
   d8af0:	d17e      	bne.n	d8bf0 <_tzset_unlocked_r+0x2c8>
   d8af2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8af6:	1e4b      	subs	r3, r1, #1
   d8af8:	2b0b      	cmp	r3, #11
   d8afa:	d879      	bhi.n	d8bf0 <_tzset_unlocked_r+0x2c8>
   d8afc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8b00:	1e53      	subs	r3, r2, #1
   d8b02:	2b04      	cmp	r3, #4
   d8b04:	d874      	bhi.n	d8bf0 <_tzset_unlocked_r+0x2c8>
   d8b06:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8b0a:	2b06      	cmp	r3, #6
   d8b0c:	d870      	bhi.n	d8bf0 <_tzset_unlocked_r+0x2c8>
   d8b0e:	f887 8008 	strb.w	r8, [r7, #8]
   d8b12:	60f9      	str	r1, [r7, #12]
   d8b14:	613a      	str	r2, [r7, #16]
   d8b16:	617b      	str	r3, [r7, #20]
   d8b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8b1a:	eb05 0803 	add.w	r8, r5, r3
   d8b1e:	e02a      	b.n	d8b76 <_tzset_unlocked_r+0x24e>
   d8b20:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8b24:	bf06      	itte	eq
   d8b26:	3501      	addeq	r5, #1
   d8b28:	4643      	moveq	r3, r8
   d8b2a:	2344      	movne	r3, #68	; 0x44
   d8b2c:	220a      	movs	r2, #10
   d8b2e:	a90b      	add	r1, sp, #44	; 0x2c
   d8b30:	4628      	mov	r0, r5
   d8b32:	9305      	str	r3, [sp, #20]
   d8b34:	f7ff fe3e 	bl	d87b4 <strtoul>
   d8b38:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8b3c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8b40:	4545      	cmp	r5, r8
   d8b42:	9b05      	ldr	r3, [sp, #20]
   d8b44:	d114      	bne.n	d8b70 <_tzset_unlocked_r+0x248>
   d8b46:	234d      	movs	r3, #77	; 0x4d
   d8b48:	f1b9 0f00 	cmp.w	r9, #0
   d8b4c:	d107      	bne.n	d8b5e <_tzset_unlocked_r+0x236>
   d8b4e:	7223      	strb	r3, [r4, #8]
   d8b50:	2303      	movs	r3, #3
   d8b52:	60e3      	str	r3, [r4, #12]
   d8b54:	2302      	movs	r3, #2
   d8b56:	6123      	str	r3, [r4, #16]
   d8b58:	f8c4 9014 	str.w	r9, [r4, #20]
   d8b5c:	e00b      	b.n	d8b76 <_tzset_unlocked_r+0x24e>
   d8b5e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8b62:	230b      	movs	r3, #11
   d8b64:	62a3      	str	r3, [r4, #40]	; 0x28
   d8b66:	2301      	movs	r3, #1
   d8b68:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8b6a:	2300      	movs	r3, #0
   d8b6c:	6323      	str	r3, [r4, #48]	; 0x30
   d8b6e:	e002      	b.n	d8b76 <_tzset_unlocked_r+0x24e>
   d8b70:	b280      	uxth	r0, r0
   d8b72:	723b      	strb	r3, [r7, #8]
   d8b74:	6178      	str	r0, [r7, #20]
   d8b76:	2302      	movs	r3, #2
   d8b78:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8b7c:	2300      	movs	r3, #0
   d8b7e:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8b82:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8b86:	930a      	str	r3, [sp, #40]	; 0x28
   d8b88:	f898 3000 	ldrb.w	r3, [r8]
   d8b8c:	2b2f      	cmp	r3, #47	; 0x2f
   d8b8e:	d10b      	bne.n	d8ba8 <_tzset_unlocked_r+0x280>
   d8b90:	9603      	str	r6, [sp, #12]
   d8b92:	f8cd a008 	str.w	sl, [sp, #8]
   d8b96:	9601      	str	r6, [sp, #4]
   d8b98:	f8cd b000 	str.w	fp, [sp]
   d8b9c:	4633      	mov	r3, r6
   d8b9e:	aa07      	add	r2, sp, #28
   d8ba0:	491f      	ldr	r1, [pc, #124]	; (d8c20 <_tzset_unlocked_r+0x2f8>)
   d8ba2:	4640      	mov	r0, r8
   d8ba4:	f7fc ff5c 	bl	d5a60 <siscanf>
   d8ba8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8bac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8bb0:	213c      	movs	r1, #60	; 0x3c
   d8bb2:	fb01 3302 	mla	r3, r1, r2, r3
   d8bb6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8bba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8bbe:	fb01 3302 	mla	r3, r1, r2, r3
   d8bc2:	61bb      	str	r3, [r7, #24]
   d8bc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8bc6:	f109 0901 	add.w	r9, r9, #1
   d8bca:	f1b9 0f02 	cmp.w	r9, #2
   d8bce:	4445      	add	r5, r8
   d8bd0:	f107 071c 	add.w	r7, r7, #28
   d8bd4:	f47f af74 	bne.w	d8ac0 <_tzset_unlocked_r+0x198>
   d8bd8:	6860      	ldr	r0, [r4, #4]
   d8bda:	f7ff fdf5 	bl	d87c8 <__tzcalc_limits>
   d8bde:	4b08      	ldr	r3, [pc, #32]	; (d8c00 <_tzset_unlocked_r+0x2d8>)
   d8be0:	6a22      	ldr	r2, [r4, #32]
   d8be2:	601a      	str	r2, [r3, #0]
   d8be4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8be6:	1a9b      	subs	r3, r3, r2
   d8be8:	4a07      	ldr	r2, [pc, #28]	; (d8c08 <_tzset_unlocked_r+0x2e0>)
   d8bea:	bf18      	it	ne
   d8bec:	2301      	movne	r3, #1
   d8bee:	6013      	str	r3, [r2, #0]
   d8bf0:	b00d      	add	sp, #52	; 0x34
   d8bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8bf6:	bf00      	nop
   d8bf8:	000d972c 	.word	0x000d972c
   d8bfc:	2003e7e0 	.word	0x2003e7e0
   d8c00:	2003e7e8 	.word	0x2003e7e8
   d8c04:	000d972f 	.word	0x000d972f
   d8c08:	2003e7e4 	.word	0x2003e7e4
   d8c0c:	2003e1e8 	.word	0x2003e1e8
   d8c10:	2003e7d3 	.word	0x2003e7d3
   d8c14:	000d9733 	.word	0x000d9733
   d8c18:	000d9756 	.word	0x000d9756
   d8c1c:	000d9742 	.word	0x000d9742
   d8c20:	000d9755 	.word	0x000d9755
   d8c24:	2003e7c8 	.word	0x2003e7c8

000d8c28 <_findenv_r>:
   d8c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c2c:	4607      	mov	r7, r0
   d8c2e:	468b      	mov	fp, r1
   d8c30:	4690      	mov	r8, r2
   d8c32:	f000 f8d9 	bl	d8de8 <__env_lock>
   d8c36:	4b19      	ldr	r3, [pc, #100]	; (d8c9c <_findenv_r+0x74>)
   d8c38:	681d      	ldr	r5, [r3, #0]
   d8c3a:	469a      	mov	sl, r3
   d8c3c:	b13d      	cbz	r5, d8c4e <_findenv_r+0x26>
   d8c3e:	465c      	mov	r4, fp
   d8c40:	4623      	mov	r3, r4
   d8c42:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8c46:	b142      	cbz	r2, d8c5a <_findenv_r+0x32>
   d8c48:	2a3d      	cmp	r2, #61	; 0x3d
   d8c4a:	461c      	mov	r4, r3
   d8c4c:	d1f8      	bne.n	d8c40 <_findenv_r+0x18>
   d8c4e:	4638      	mov	r0, r7
   d8c50:	f000 f8cb 	bl	d8dea <__env_unlock>
   d8c54:	2000      	movs	r0, #0
   d8c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c5a:	ebcb 0404 	rsb	r4, fp, r4
   d8c5e:	46a9      	mov	r9, r5
   d8c60:	f859 0b04 	ldr.w	r0, [r9], #4
   d8c64:	2800      	cmp	r0, #0
   d8c66:	d0f2      	beq.n	d8c4e <_findenv_r+0x26>
   d8c68:	4622      	mov	r2, r4
   d8c6a:	4659      	mov	r1, fp
   d8c6c:	f7ff fc6b 	bl	d8546 <strncmp>
   d8c70:	b988      	cbnz	r0, d8c96 <_findenv_r+0x6e>
   d8c72:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d8c76:	191e      	adds	r6, r3, r4
   d8c78:	5d1b      	ldrb	r3, [r3, r4]
   d8c7a:	2b3d      	cmp	r3, #61	; 0x3d
   d8c7c:	d10b      	bne.n	d8c96 <_findenv_r+0x6e>
   d8c7e:	f8da 3000 	ldr.w	r3, [sl]
   d8c82:	1aed      	subs	r5, r5, r3
   d8c84:	10ad      	asrs	r5, r5, #2
   d8c86:	4638      	mov	r0, r7
   d8c88:	f8c8 5000 	str.w	r5, [r8]
   d8c8c:	f000 f8ad 	bl	d8dea <__env_unlock>
   d8c90:	1c70      	adds	r0, r6, #1
   d8c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c96:	464d      	mov	r5, r9
   d8c98:	e7e1      	b.n	d8c5e <_findenv_r+0x36>
   d8c9a:	bf00      	nop
   d8c9c:	2003e230 	.word	0x2003e230

000d8ca0 <_getenv_r>:
   d8ca0:	b507      	push	{r0, r1, r2, lr}
   d8ca2:	aa01      	add	r2, sp, #4
   d8ca4:	f7ff ffc0 	bl	d8c28 <_findenv_r>
   d8ca8:	b003      	add	sp, #12
   d8caa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8cb0 <__gettzinfo>:
   d8cb0:	4800      	ldr	r0, [pc, #0]	; (d8cb4 <__gettzinfo+0x4>)
   d8cb2:	4770      	bx	lr
   d8cb4:	2003e1f0 	.word	0x2003e1f0

000d8cb8 <gmtime_r>:
   d8cb8:	6802      	ldr	r2, [r0, #0]
   d8cba:	4b47      	ldr	r3, [pc, #284]	; (d8dd8 <gmtime_r+0x120>)
   d8cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8cbe:	fb92 f4f3 	sdiv	r4, r2, r3
   d8cc2:	fb03 2214 	mls	r2, r3, r4, r2
   d8cc6:	2a00      	cmp	r2, #0
   d8cc8:	bfbc      	itt	lt
   d8cca:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8cce:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8cd2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8cd6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8cda:	fb92 f3f0 	sdiv	r3, r2, r0
   d8cde:	fb00 2213 	mls	r2, r0, r3, r2
   d8ce2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8ce6:	bfac      	ite	ge
   d8ce8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8cec:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8cf0:	608b      	str	r3, [r1, #8]
   d8cf2:	fb92 f3f0 	sdiv	r3, r2, r0
   d8cf6:	fb00 2213 	mls	r2, r0, r3, r2
   d8cfa:	604b      	str	r3, [r1, #4]
   d8cfc:	600a      	str	r2, [r1, #0]
   d8cfe:	2307      	movs	r3, #7
   d8d00:	1ce2      	adds	r2, r4, #3
   d8d02:	fb92 f3f3 	sdiv	r3, r2, r3
   d8d06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8d0a:	1ad3      	subs	r3, r2, r3
   d8d0c:	618b      	str	r3, [r1, #24]
   d8d0e:	4b33      	ldr	r3, [pc, #204]	; (d8ddc <gmtime_r+0x124>)
   d8d10:	4d33      	ldr	r5, [pc, #204]	; (d8de0 <gmtime_r+0x128>)
   d8d12:	fb94 f5f5 	sdiv	r5, r4, r5
   d8d16:	fb03 4405 	mla	r4, r3, r5, r4
   d8d1a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8d1e:	fbb4 f2f2 	udiv	r2, r4, r2
   d8d22:	4422      	add	r2, r4
   d8d24:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8d28:	fbb4 f3f7 	udiv	r3, r4, r7
   d8d2c:	1ad2      	subs	r2, r2, r3
   d8d2e:	482d      	ldr	r0, [pc, #180]	; (d8de4 <gmtime_r+0x12c>)
   d8d30:	fbb4 f0f0 	udiv	r0, r4, r0
   d8d34:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8d38:	1a13      	subs	r3, r2, r0
   d8d3a:	fbb3 f6f6 	udiv	r6, r3, r6
   d8d3e:	4434      	add	r4, r6
   d8d40:	f240 126d 	movw	r2, #365	; 0x16d
   d8d44:	fbb3 f0f2 	udiv	r0, r3, r2
   d8d48:	fbb3 f3f7 	udiv	r3, r3, r7
   d8d4c:	1ae3      	subs	r3, r4, r3
   d8d4e:	fb02 3310 	mls	r3, r2, r0, r3
   d8d52:	2499      	movs	r4, #153	; 0x99
   d8d54:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8d58:	3202      	adds	r2, #2
   d8d5a:	fbb2 f2f4 	udiv	r2, r2, r4
   d8d5e:	2a0a      	cmp	r2, #10
   d8d60:	fb04 f402 	mul.w	r4, r4, r2
   d8d64:	f104 0602 	add.w	r6, r4, #2
   d8d68:	f04f 0405 	mov.w	r4, #5
   d8d6c:	fbb6 f4f4 	udiv	r4, r6, r4
   d8d70:	bf34      	ite	cc
   d8d72:	2602      	movcc	r6, #2
   d8d74:	f06f 0609 	mvncs.w	r6, #9
   d8d78:	4416      	add	r6, r2
   d8d7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8d7e:	fb02 0505 	mla	r5, r2, r5, r0
   d8d82:	1c5f      	adds	r7, r3, #1
   d8d84:	2e01      	cmp	r6, #1
   d8d86:	bf98      	it	ls
   d8d88:	3501      	addls	r5, #1
   d8d8a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8d8e:	eba7 0704 	sub.w	r7, r7, r4
   d8d92:	d302      	bcc.n	d8d9a <gmtime_r+0xe2>
   d8d94:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8d98:	e014      	b.n	d8dc4 <gmtime_r+0x10c>
   d8d9a:	0782      	lsls	r2, r0, #30
   d8d9c:	d105      	bne.n	d8daa <gmtime_r+0xf2>
   d8d9e:	2464      	movs	r4, #100	; 0x64
   d8da0:	fbb0 f2f4 	udiv	r2, r0, r4
   d8da4:	fb04 0212 	mls	r2, r4, r2, r0
   d8da8:	b94a      	cbnz	r2, d8dbe <gmtime_r+0x106>
   d8daa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8dae:	fbb0 f4f2 	udiv	r4, r0, r2
   d8db2:	fb02 0014 	mls	r0, r2, r4, r0
   d8db6:	fab0 f280 	clz	r2, r0
   d8dba:	0952      	lsrs	r2, r2, #5
   d8dbc:	e000      	b.n	d8dc0 <gmtime_r+0x108>
   d8dbe:	2201      	movs	r2, #1
   d8dc0:	333b      	adds	r3, #59	; 0x3b
   d8dc2:	441a      	add	r2, r3
   d8dc4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8dc8:	2300      	movs	r3, #0
   d8dca:	61ca      	str	r2, [r1, #28]
   d8dcc:	614d      	str	r5, [r1, #20]
   d8dce:	610e      	str	r6, [r1, #16]
   d8dd0:	60cf      	str	r7, [r1, #12]
   d8dd2:	620b      	str	r3, [r1, #32]
   d8dd4:	4608      	mov	r0, r1
   d8dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8dd8:	00015180 	.word	0x00015180
   d8ddc:	fffdc54f 	.word	0xfffdc54f
   d8de0:	00023ab1 	.word	0x00023ab1
   d8de4:	00023ab0 	.word	0x00023ab0

000d8de8 <__env_lock>:
   d8de8:	4770      	bx	lr

000d8dea <__env_unlock>:
   d8dea:	4770      	bx	lr

000d8dec <dynalib_user>:
   d8dec:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d8dfc:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d8e0c:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
   d8e40:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   d8e50:	3225 302e 2566 2025 4100 2b54 4643 4e55     %2.0f%% .AT+CFUN
   d8e60:	313d 0d36 000a 227b 6554 706d 7265 7461     =16...{"Temperat
   d8e70:	7275 2265 253a 2e34 6631 202c 4822 6d75     ure":%4.1f, "Hum
   d8e80:	6469 7469 2279 253a 2e34 6631 202c 5322     idity":%4.1f, "S
   d8e90:	696f 6d6c 696f 7473 7275 3165 3a22 6925     oilmoisture1":%i
   d8ea0:	202c 5322 696f 6d6c 696f 7473 7275 3265     , "Soilmoisture2
   d8eb0:	3a22 6925 202c 7722 7461 7265 7250 7365     ":%i, "waterPres
   d8ec0:	7573 6572 3a22 6925 202c 5322 6c6f 6e65     sure":%i, "Solen
   d8ed0:	696f 2264 253a 2c69 2220 6142 7474 7265     oid":%i, "Batter
   d8ee0:	2279 253a 2c69 2220 6552 6573 7374 3a22     y":%i, "Resets":
   d8ef0:	6925 202c 4122 656c 7472 2273 253a 7d69     %i, "Alerts":%i}
   d8f00:	5200 6177 646e 5f61 7249 6972 6167 6974     .Rwanda_Irrigati
   d8f10:	6e6f 485f 6f6f 006b 6f4e 4420 7461 0061     on_Hook.No Data.
   d8f20:	6255 6469 746f 2073 6f48 6b6f 5200 7365     Ubidots Hook.Res
   d8f30:	6f70 736e 2065 6552 6563 7669 6465 5300     ponse Received.S
   d8f40:	6174 6574 2500 2e34 6631 4320 2500 2e34     tate.%4.1f C.%4.
   d8f50:	6631 2520 0025 6925 2520 0025 6843 2067     1f %%.%i %%.Chg 
   d8f60:	6944 6173 6c62 6465 5420 6d65 0070 6843     Disabled Temp.Ch
   d8f70:	7261 6967 676e 6420 7369 6261 656c 2064     arging disabled 
   d8f80:	6554 706d 7265 7461 7275 0065 6c41 7265     Temperature.Aler
   d8f90:	0074 6553 2074 6f53 616c 2072 6f50 6577     t.Set Solar Powe
   d8fa0:	6572 2064 6f4d 6564 3000 4300 656c 7261     red Mode.0.Clear
   d8fb0:	6465 5320 6c6f 7261 5020 776f 7265 6465     ed Solar Powered
   d8fc0:	4d20 646f 0065 6553 2074 6556 6272 736f      Mode.Set Verbos
   d8fd0:	2065 6f4d 6564 4300 656c 7261 6465 5620     e Mode.Cleared V
   d8fe0:	7265 6f62 6573 4d20 646f 0065 6954 656d     erbose Mode.Time
   d8ff0:	7a20 6e6f 2065 666f 7366 7465 2520 0069      zone offset %i.
   d9000:	6954 656d 4c00 776f 5020 776f 7265 4e00     Time.Low Power.N
   d9010:	726f 616d 206c 704f 7265 7461 6f69 736e     ormal Operations
   d9020:	4f00 6570 206e 6874 2065 6156 766c 0065     .Open the Valve.
   d9030:	6156 756c 2065 6f43 746e 6f72 206c 6944     Value Control Di
   d9040:	6173 6c62 6465 2d00 0031 6c43 736f 2065     sabled.-1.Close 
   d9050:	6874 2065 6176 766c 0065 7246 6d6f 2520     the valve.From %
   d9060:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
   d9070:	6e61 6973 6974 6e6f 7300 6170 6b72 642f     ansition.spark/d
   d9080:	7665 6369 2f65 6573 7373 6f69 2f6e 6e65     evice/session/en
   d9090:	0064 6f47 6e69 2067 6f74 5320 656c 7065     d.Going to Sleep
   d90a0:	4c00 776f 4220 7461 6574 7972 2d20 5320     .Low Battery - S
   d90b0:	656c 7065 6e69 0067 7245 6f72 2072 7453     leeping.Error St
   d90c0:	7461 2065 202d 6552 6573 0074 7245 6f72     ate - Reset.Erro
   d90d0:	2072 7453 7461 2065 202d 6f50 6577 2072     r State - Power 
   d90e0:	7943 6c63 0065 7245 6f72 2072 7453 7461     Cycle.Error Stat
   d90f0:	2065 202d 7546 6c6c 4d20 646f 6d65 5220     e - Full Modem R
   d9100:	7365 7465 4500 7272 726f 7420 6b61 6e69     eset.Error takin
   d9110:	2067 654d 7361 7275 6d65 6e65 7374 5300     g Measurements.S
   d9120:	6769 616e 006c 6552 6573 4374 756f 746e     ignal.ResetCount
   d9130:	5200 6c65 6165 6573 5300 6174 6574 664f     .Release.StateOf
   d9140:	6843 0067 6f50 6577 4372 6e6f 6574 7478     Chg.PowerContext
   d9150:	4c00 776f 6f50 6577 4d72 646f 0065 7548     .LowPowerMode.Hu
   d9160:	696d 6964 7974 5300 696f 4d6c 696f 7473     midity.SoilMoist
   d9170:	7275 3165 5300 696f 4d6c 696f 7473 7275     ure1.SoilMoistur
   d9180:	3265 5000 6572 7373 7275 0065 654d 7361     e2.Pressure.Meas
   d9190:	7275 2d65 6f4e 0077 6f53 616c 2d72 6f4d     ure-Now.Solar-Mo
   d91a0:	6564 5600 7265 6f62 6573 4d2d 646f 0065     de.Verbose-Mode.
   d91b0:	6553 5474 6d69 5a65 6e6f 0065 6553 5374     SetTimeZone.SetS
   d91c0:	6c6f 6e65 696f 0064 6f43 6c75 2064 6f6e     olenoid.Could no
   d91d0:	2074 6966 646e 5320 5448 3133 5500 6573     t find SHT31.Use
   d91e0:	2072 7542 7474 6e6f 2d20 4420 7465 6365     r Button - Detec
   d91f0:	6574 0064 6146 6c69 6465 7420 206f 6f63     ted.Failed to co
   d9200:	6e6e 6365 0074 7453 7261 7574 0070 6e55     nnect.Startup.Un
   d9210:	6e6b 776f 006e 6f4e 656e 5700 4669 0069     known.None.WiFi.
   d9220:	5347 004d 4d55 5354 4300 4d44 0041 544c     GSM.UMTS.CDMA.LT
   d9230:	0045 4549 4545 3038 3132 3435 3100               E.IEEE802154.

000d923d <_ZL13releaseNumber>:
   d923d:	3131 0000 0000 0000                              11.....

000d9244 <_ZTVN5spark13CellularClassE>:
	...
   d924c:	5b63 000d 5b59 000d 5b4f 000d 5b05 000d     c[..Y[..O[...[..
   d925c:	5b43 000d 5b37 000d 5b2b 000d 5b23 000d     C[..7[..+[..#[..
   d926c:	5b19 000d 5b0f 000d 6859 000d               .[...[..Yh..

000d9278 <_ZTV14CellularSignal>:
	...
   d9280:	5c11 000d 5ca3 000d 5c13 000d 5ce5 000d     .\...\...\...\..
   d9290:	5c19 000d 5cb1 000d 5c45 000d 5c71 000d     .\...\..E\..q\..
   d92a0:	fffc ffff 0000 0000 5c9b 000d               .........\..

000d92ac <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d92b4:	5d31 000d 5d37 000d 5d8d 000d 5d45 000d     1]..7]...]..E]..
   d92c4:	5d33 000d                                   3]..

000d92c8 <_ZTVN5spark13EthernetClassE>:
	...
   d92d0:	63a3 000d 6399 000d 638f 000d 6385 000d     .c...c...c...c..
   d92e0:	6379 000d 636d 000d 6361 000d 6359 000d     yc..mc..ac..Yc..
   d92f0:	634f 000d 6345 000d 6859 000d               Oc..Ec..Yh..

000d92fc <_ZTV7TwoWire>:
	...
   d9304:	64a5 000d 64ef 000d 64c7 000d 64a7 000d     .d...d...d...d..
   d9314:	64cf 000d 64d7 000d 64df 000d 64e7 000d     .d...d...d...d..

000d9324 <_ZTV9IPAddress>:
	...
   d932c:	65a7 000d 6597 000d 6599 000d 6162 6475     .e...e...e..baud
   d933c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d934c:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   d935c:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   d936c:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   d937c:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   d938c:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   d939c:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   d93ac:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
   d93bc:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d93cc:	6564 6174 6c69 2073 203d 6600 6c00 006e     details = .f.ln.
   d93dc:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d93ec:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d93fc:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d940c:	6c61 006c                                   all.

000d9410 <_ZTVN5spark9MeshClassE>:
	...
   d9418:	66eb 000d 66e1 000d 66d7 000d 66cd 000d     .f...f...f...f..
   d9428:	66c1 000d 66b5 000d 66a9 000d 66a1 000d     .f...f...f...f..
   d9438:	6697 000d 668d 000d 6859 000d               .f...f..Yh..

000d9444 <_ZTVN5spark12NetworkClassE>:
	...
   d944c:	67f1 000d 67fb 000d 6805 000d 680f 000d     .g...g...h...h..
   d945c:	6819 000d 6825 000d 6831 000d 683d 000d     .h..%h..1h..=h..
   d946c:	6845 000d 684f 000d 6859 000d               Eh..Oh..Yh..

000d9478 <_ZTV8SPIClass>:
	...
   d9480:	6e3d 000d 6e3f 000d 2b25 3330 3a64 3025     =n..?n..%+03d:%0
   d9490:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d94a0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d94b0 <_ZTV11USARTSerial>:
	...
   d94b8:	7215 000d 7265 000d 7273 000d 6cef 000d     .r..er..sr...l..
   d94c8:	7229 000d 724b 000d 7237 000d 725f 000d     )r..Kr..7r.._r..
   d94d8:	7217 000d 721b 000d                         .r...r..

000d94e0 <_ZTV9USBSerial>:
	...
   d94e8:	731d 000d 736d 000d 737b 000d 6cef 000d     .s..ms..{s...l..
   d94f8:	7359 000d 731f 000d 7335 000d 7367 000d     Ys...s..5s..gs..
   d9508:	734b 000d 7319 000d                         Ks...s..

000d9510 <day_name.4725>:
   d9510:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d9520:	6972 6153 4a74                                   riSat

000d9525 <mon_name.4726>:
   d9525:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d9535:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d9545:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d9555:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d9565:	6425 000a                                   %d..

000d9569 <_ctype_>:
   d9569:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9579:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9589:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9599:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d95a9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d95b9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d95c9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d95d9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d95e9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d966c <__sf_fake_stdin>:
	...

000d968c <__sf_fake_stdout>:
	...

000d96ac <__sf_fake_stderr>:
	...

000d96cc <__month_lengths>:
   d96cc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d96dc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d96ec:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d96fc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d970c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d971c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d972c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d973c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d974c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d975c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d9768 <link_const_variable_data_end>:
   d9768:	000d5201 	.word	0x000d5201
   d976c:	000d5461 	.word	0x000d5461
   d9770:	000d5af5 	.word	0x000d5af5
   d9774:	000d5be1 	.word	0x000d5be1
   d9778:	000d63ad 	.word	0x000d63ad
   d977c:	000d667d 	.word	0x000d667d
   d9780:	000d67a1 	.word	0x000d67a1
   d9784:	000d6925 	.word	0x000d6925
   d9788:	000d6e21 	.word	0x000d6e21
   d978c:	000d7075 	.word	0x000d7075
   d9790:	000d7201 	.word	0x000d7201
   d9794:	000d76bd 	.word	0x000d76bd
   d9798:	000d7715 	.word	0x000d7715
   d979c:	000d77d9 	.word	0x000d77d9
   d97a0:	000d785d 	.word	0x000d785d
   d97a4:	000d78e1 	.word	0x000d78e1

000d97a8 <link_constructors_end>:
	...
