
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.4.4/electron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000058a0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080858c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000014c  20000000  080858c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000071c  2000014c  2000014c  0004014c  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  08085a10  08085a10  00035a10  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  08085a3c  08085a3c  00035a3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c0ce1  00000000  00000000  00035a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001213e  00000000  00000000  000f6721  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016a44  00000000  00000000  0010885f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002438  00000000  00000000  0011f2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003878  00000000  00000000  001216db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028802  00000000  00000000  00124f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a938  00000000  00000000  0014d755  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a9b5e  00000000  00000000  0017808d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c978  00000000  00000000  00221bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f004 fb23 	bl	808467c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f004 fb28 	bl	8084692 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	080858c4 	.word	0x080858c4
 8080050:	2000014c 	.word	0x2000014c
 8080054:	2000014c 	.word	0x2000014c
 8080058:	20000868 	.word	0x20000868
 808005c:	20000868 	.word	0x20000868

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f003 f809 	bl	8083078 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08085884 	.word	0x08085884
 8080088:	080858c0 	.word	0x080858c0

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 be5c 	b.w	8080d48 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fc67 	bl	8080964 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f002 bfaf 	b.w	8082ffc <_post_loop>

0808009e <_Znwj>:
 808009e:	f001 bba5 	b.w	80817ec <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f001 bbab 	b.w	80817fc <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr
	...

080800b8 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
 80800b8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800ba:	4904      	ldr	r1, [pc, #16]	; (80800cc <_Z10measureNow6String+0x14>)
 80800bc:	f002 fceb 	bl	8082a96 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800c0:	b118      	cbz	r0, 80800ca <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 80800c2:	4b03      	ldr	r3, [pc, #12]	; (80800d0 <_Z10measureNow6String+0x18>)
 80800c4:	2203      	movs	r2, #3
 80800c6:	701a      	strb	r2, [r3, #0]
    return 1;
 80800c8:	2001      	movs	r0, #1
  }
  else return 0;
}
 80800ca:	bd08      	pop	{r3, pc}
 80800cc:	0808536f 	.word	0x0808536f
 80800d0:	2000018e 	.word	0x2000018e

080800d4 <_ZN11EEPROMClass4readEi.isra.15>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80800d4:	f001 b93e 	b.w	8081354 <HAL_EEPROM_Read>

080800d8 <_ZN11EEPROMClass5writeEih.isra.16>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80800d8:	f001 b944 	b.w	8081364 <HAL_EEPROM_Write>

080800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800de:	4605      	mov	r5, r0
 80800e0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800e4:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800e6:	f88d 3000 	strb.w	r3, [sp]
 80800ea:	233c      	movs	r3, #60	; 0x3c
 80800ec:	f001 fe9c 	bl	8081e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80800f0:	4628      	mov	r0, r5
 80800f2:	b003      	add	sp, #12
 80800f4:	bd30      	pop	{r4, r5, pc}
	...

080800f8 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
 80800f8:	b530      	push	{r4, r5, lr}
 80800fa:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 80800fc:	4910      	ldr	r1, [pc, #64]	; (8080140 <_Z17getSignalStrengthv+0x48>)
 80800fe:	a804      	add	r0, sp, #16
 8080100:	f001 fc2e 	bl	8081960 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 8080104:	a804      	add	r0, sp, #16
 8080106:	f001 fc7e 	bl	8081a06 <_ZNK14CellularSignal19getAccessTechnologyEv>
 808010a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 808010c:	a804      	add	r0, sp, #16
 808010e:	f001 fcd9 	bl	8081ac4 <_ZNK14CellularSignal11getStrengthEv>
 8080112:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 8080114:	a804      	add	r0, sp, #16
 8080116:	f001 fcbd 	bl	8081a94 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 808011a:	f003 fbb9 	bl	8083890 <__aeabi_f2d>
 808011e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080122:	4628      	mov	r0, r5
 8080124:	f003 fbb4 	bl	8083890 <__aeabi_f2d>
 8080128:	e9cd 0100 	strd	r0, r1, [sp]
 808012c:	4b05      	ldr	r3, [pc, #20]	; (8080144 <_Z17getSignalStrengthv+0x4c>)
 808012e:	4a06      	ldr	r2, [pc, #24]	; (8080148 <_Z17getSignalStrengthv+0x50>)
 8080130:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8080134:	2140      	movs	r1, #64	; 0x40
 8080136:	4805      	ldr	r0, [pc, #20]	; (808014c <_Z17getSignalStrengthv+0x54>)
 8080138:	f001 fb80 	bl	808183c <snprintf>
}
 808013c:	b00f      	add	sp, #60	; 0x3c
 808013e:	bd30      	pop	{r4, r5, pc}
 8080140:	20000240 	.word	0x20000240
 8080144:	20000074 	.word	0x20000074
 8080148:	08085054 	.word	0x08085054
 808014c:	200001b0 	.word	0x200001b0

08080150 <_Z17connectToParticlev>:


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 8080150:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080154:	481a      	ldr	r0, [pc, #104]	; (80801c0 <_Z17connectToParticlev+0x70>)
 8080156:	2300      	movs	r3, #0
 8080158:	461a      	mov	r2, r3
 808015a:	4619      	mov	r1, r3
 808015c:	6840      	ldr	r0, [r0, #4]
 808015e:	f001 fb15 	bl	808178c <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080162:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080166:	f001 faa9 	bl	80816bc <spark_cloud_flag_connect>
 808016a:	f44f 7496 	mov.w	r4, #300	; 0x12c
 808016e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080170:	2000      	movs	r0, #0
 8080172:	f001 f90f 	bl	8081394 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080176:	4680      	mov	r8, r0
 8080178:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808017c:	2000      	movs	r0, #0
 808017e:	f001 f909 	bl	8081394 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080182:	ebb0 0008 	subs.w	r0, r0, r8
 8080186:	eb61 0109 	sbc.w	r1, r1, r9
 808018a:	428f      	cmp	r7, r1
 808018c:	bf08      	it	eq
 808018e:	4286      	cmpeq	r6, r0
 8080190:	d305      	bcc.n	808019e <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080192:	f001 faa3 	bl	80816dc <spark_cloud_flag_connected>
 8080196:	b910      	cbnz	r0, 808019e <_Z17connectToParticlev+0x4e>
            spark_process();
 8080198:	f001 fa88 	bl	80816ac <spark_process>
 808019c:	e7ee      	b.n	808017c <_Z17connectToParticlev+0x2c>
 808019e:	f001 fa9d 	bl	80816dc <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80801a2:	b118      	cbz	r0, 80801ac <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80801a4:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80801a8:	f001 ba98 	b.w	80816dc <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801ac:	f001 f8ba 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80801b0:	4b04      	ldr	r3, [pc, #16]	; (80801c4 <_Z17connectToParticlev+0x74>)
 80801b2:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80801b4:	f001 fa7a 	bl	80816ac <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80801b8:	3c01      	subs	r4, #1
 80801ba:	d0f3      	beq.n	80801a4 <_Z17connectToParticlev+0x54>
 80801bc:	e7d8      	b.n	8080170 <_Z17connectToParticlev+0x20>
 80801be:	bf00      	nop
 80801c0:	20000240 	.word	0x20000240
 80801c4:	2000072c 	.word	0x2000072c

080801c8 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
 80801c8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801ca:	f001 fa87 	bl	80816dc <spark_cloud_flag_connected>
    return !Particle.connected();
 80801ce:	f080 0001 	eor.w	r0, r0, #1
}
 80801d2:	b2c0      	uxtb	r0, r0
 80801d4:	bd08      	pop	{r3, pc}
	...

080801d8 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
 80801d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 80801da:	f001 fa77 	bl	80816cc <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801de:	2000      	movs	r0, #0
 80801e0:	f001 f8d8 	bl	8081394 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801e4:	f643 2697 	movw	r6, #14999	; 0x3a97
 80801e8:	4604      	mov	r4, r0
 80801ea:	2500      	movs	r5, #0
 80801ec:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801ee:	2000      	movs	r0, #0
 80801f0:	f001 f8d0 	bl	8081394 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801f4:	1b00      	subs	r0, r0, r4
 80801f6:	eb61 0105 	sbc.w	r1, r1, r5
 80801fa:	428f      	cmp	r7, r1
 80801fc:	bf08      	it	eq
 80801fe:	4286      	cmpeq	r6, r0
 8080200:	d305      	bcc.n	808020e <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem                              
 8080202:	f7ff ffe1 	bl	80801c8 <_Z12notConnectedv>
 8080206:	b910      	cbnz	r0, 808020e <_Z22disconnectFromParticlev+0x36>
            spark_process();
 8080208:	f001 fa50 	bl	80816ac <spark_process>
 808020c:	e7ef      	b.n	80801ee <_Z22disconnectFromParticlev+0x16>
 808020e:	f7ff ffdb 	bl	80801c8 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080212:	4806      	ldr	r0, [pc, #24]	; (808022c <_Z22disconnectFromParticlev+0x54>)
 8080214:	2300      	movs	r3, #0
 8080216:	461a      	mov	r2, r3
 8080218:	4619      	mov	r1, r3
 808021a:	6840      	ldr	r0, [r0, #4]
 808021c:	f001 fabe 	bl	808179c <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
 8080220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080224:	f001 fb2e 	bl	8081884 <delay>
  return true;
}
 8080228:	2001      	movs	r0, #1
 808022a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808022c:	20000240 	.word	0x20000240

08080230 <_Z9PMICresetv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
    return !Particle.connected();
}

// Power Management function
void PMICreset() {
 8080230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 8080232:	481f      	ldr	r0, [pc, #124]	; (80802b0 <_Z9PMICresetv+0x80>)
 8080234:	f002 f91e 	bl	8082474 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 8080238:	481d      	ldr	r0, [pc, #116]	; (80802b0 <_Z9PMICresetv+0x80>)
 808023a:	f002 fadf 	bl	80827fc <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 808023e:	4b1d      	ldr	r3, [pc, #116]	; (80802b4 <_Z9PMICresetv+0x84>)
 8080240:	781c      	ldrb	r4, [r3, #0]
 8080242:	4b1d      	ldr	r3, [pc, #116]	; (80802b8 <_Z9PMICresetv+0x88>)
 8080244:	b1bc      	cbz	r4, 8080276 <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080246:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080248:	f241 21e8 	movw	r1, #4840	; 0x12e8
 808024c:	4818      	ldr	r0, [pc, #96]	; (80802b0 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 808024e:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080250:	f002 f992 	bl	8082578 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 8080254:	f44f 7161 	mov.w	r1, #900	; 0x384
 8080258:	4815      	ldr	r0, [pc, #84]	; (80802b0 <_Z9PMICresetv+0x80>)
 808025a:	f002 fa17 	bl	808268c <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 808025e:	2200      	movs	r2, #0
 8080260:	4611      	mov	r1, r2
 8080262:	9202      	str	r2, [sp, #8]
 8080264:	9201      	str	r2, [sp, #4]
 8080266:	9200      	str	r2, [sp, #0]
 8080268:	2301      	movs	r3, #1
 808026a:	4811      	ldr	r0, [pc, #68]	; (80802b0 <_Z9PMICresetv+0x80>)
 808026c:	f002 fa6d 	bl	808274a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 8080270:	f241 0170 	movw	r1, #4208	; 0x1070
 8080274:	e016      	b.n	80802a4 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080276:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080278:	f241 0170 	movw	r1, #4208	; 0x1070
 808027c:	480c      	ldr	r0, [pc, #48]	; (80802b0 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 808027e:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080280:	f002 f97a 	bl	8082578 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 8080284:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8080288:	4809      	ldr	r0, [pc, #36]	; (80802b0 <_Z9PMICresetv+0x80>)
 808028a:	f002 f9ff 	bl	808268c <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 808028e:	2301      	movs	r3, #1
 8080290:	4621      	mov	r1, r4
 8080292:	9402      	str	r4, [sp, #8]
 8080294:	9401      	str	r4, [sp, #4]
 8080296:	9400      	str	r4, [sp, #0]
 8080298:	461a      	mov	r2, r3
 808029a:	4805      	ldr	r0, [pc, #20]	; (80802b0 <_Z9PMICresetv+0x80>)
 808029c:	f002 fa55 	bl	808274a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 80802a0:	f241 0110 	movw	r1, #4112	; 0x1010
 80802a4:	4802      	ldr	r0, [pc, #8]	; (80802b0 <_Z9PMICresetv+0x80>)
  }
}
 80802a6:	b004      	add	sp, #16
 80802a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 80802ac:	f002 ba80 	b.w	80827b0 <_ZN4PMIC16setChargeVoltageEt>
 80802b0:	2000018f 	.word	0x2000018f
 80802b4:	2000022c 	.word	0x2000022c
 80802b8:	20000160 	.word	0x20000160

080802bc <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
 80802bc:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80802be:	f001 f831 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 80802c2:	4b04      	ldr	r3, [pc, #16]	; (80802d4 <_Z20meterParticlePublishv+0x18>)
 80802c4:	681b      	ldr	r3, [r3, #0]
 80802c6:	1ac0      	subs	r0, r0, r3
  else return 0;
}
 80802c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80802cc:	bf34      	ite	cc
 80802ce:	2000      	movcc	r0, #0
 80802d0:	2001      	movcs	r0, #1
 80802d2:	bd08      	pop	{r3, pc}
 80802d4:	20000194 	.word	0x20000194

080802d8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80802d8:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
 80802da:	f7ff ffef 	bl	80802bc <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802de:	b118      	cbz	r0, 80802e8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80802e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80802e4:	f7ff bfea 	b.w	80802bc <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80802e8:	f001 f9e0 	bl	80816ac <spark_process>
 80802ec:	e7f5      	b.n	80802da <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32+0x2>
	...

080802f0 <_Z14fullModemResetv>:
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 80802f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80802f2:	f001 f9eb 	bl	80816cc <spark_cloud_flag_disconnect>
 80802f6:	f001 f815 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80802fa:	f643 2597 	movw	r5, #14999	; 0x3a97
 80802fe:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080300:	f001 f9ec 	bl	80816dc <spark_cloud_flag_connected>
 8080304:	b140      	cbz	r0, 8080318 <_Z14fullModemResetv+0x28>
 8080306:	f001 f80d 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
 808030a:	1b00      	subs	r0, r0, r4
 808030c:	42a8      	cmp	r0, r5
 808030e:	d803      	bhi.n	8080318 <_Z14fullModemResetv+0x28>
		delay(100);
 8080310:	2064      	movs	r0, #100	; 0x64
 8080312:	f001 fab7 	bl	8081884 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080316:	e7f3      	b.n	8080300 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080318:	2100      	movs	r1, #0
 808031a:	4b09      	ldr	r3, [pc, #36]	; (8080340 <_Z14fullModemResetv+0x50>)
 808031c:	f247 5230 	movw	r2, #30000	; 0x7530
 8080320:	4608      	mov	r0, r1
 8080322:	f000 ffcf 	bl	80812c4 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808032a:	f001 faab 	bl	8081884 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808032e:	4b05      	ldr	r3, [pc, #20]	; (8080344 <_Z14fullModemResetv+0x54>)
 8080330:	220a      	movs	r2, #10
 8080332:	681b      	ldr	r3, [r3, #0]
 8080334:	2101      	movs	r1, #1
 8080336:	4668      	mov	r0, sp
 8080338:	f002 fbe0 	bl	8082afc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 808033c:	b003      	add	sp, #12
 808033e:	bd30      	pop	{r4, r5, pc}
 8080340:	0808506d 	.word	0x0808506d
 8080344:	20000204 	.word	0x20000204

08080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080348:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808034a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808034c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808034e:	b17c      	cbz	r4, 8080370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080350:	6863      	ldr	r3, [r4, #4]
 8080352:	3b01      	subs	r3, #1
 8080354:	6063      	str	r3, [r4, #4]
 8080356:	b95b      	cbnz	r3, 8080370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080358:	6823      	ldr	r3, [r4, #0]
 808035a:	4620      	mov	r0, r4
 808035c:	689b      	ldr	r3, [r3, #8]
 808035e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080360:	68a3      	ldr	r3, [r4, #8]
 8080362:	3b01      	subs	r3, #1
 8080364:	60a3      	str	r3, [r4, #8]
 8080366:	b91b      	cbnz	r3, 8080370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080368:	6823      	ldr	r3, [r4, #0]
 808036a:	4620      	mov	r0, r4
 808036c:	68db      	ldr	r3, [r3, #12]
 808036e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080370:	4628      	mov	r0, r5
 8080372:	bd38      	pop	{r3, r4, r5, pc}

08080374 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 8080374:	b500      	push	{lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilmoisture\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilMoisture, stateOfCharge, resetCount, alertCount);
 8080376:	4b1f      	ldr	r3, [pc, #124]	; (80803f4 <_Z9sendEventv+0x80>)
    break;
  }
}

void sendEvent()
{
 8080378:	b0cb      	sub	sp, #300	; 0x12c
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilmoisture\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilMoisture, stateOfCharge, resetCount, alertCount);
 808037a:	681b      	ldr	r3, [r3, #0]
 808037c:	9307      	str	r3, [sp, #28]
 808037e:	4b1e      	ldr	r3, [pc, #120]	; (80803f8 <_Z9sendEventv+0x84>)
 8080380:	681b      	ldr	r3, [r3, #0]
 8080382:	9306      	str	r3, [sp, #24]
 8080384:	4b1d      	ldr	r3, [pc, #116]	; (80803fc <_Z9sendEventv+0x88>)
 8080386:	681b      	ldr	r3, [r3, #0]
 8080388:	9305      	str	r3, [sp, #20]
 808038a:	4b1d      	ldr	r3, [pc, #116]	; (8080400 <_Z9sendEventv+0x8c>)
 808038c:	681b      	ldr	r3, [r3, #0]
 808038e:	9304      	str	r3, [sp, #16]
 8080390:	4b1c      	ldr	r3, [pc, #112]	; (8080404 <_Z9sendEventv+0x90>)
 8080392:	6818      	ldr	r0, [r3, #0]
 8080394:	f003 fa7c 	bl	8083890 <__aeabi_f2d>
 8080398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808039c:	4b1a      	ldr	r3, [pc, #104]	; (8080408 <_Z9sendEventv+0x94>)
 808039e:	6818      	ldr	r0, [r3, #0]
 80803a0:	f003 fa76 	bl	8083890 <__aeabi_f2d>
 80803a4:	4a19      	ldr	r2, [pc, #100]	; (808040c <_Z9sendEventv+0x98>)
 80803a6:	e9cd 0100 	strd	r0, r1, [sp]
 80803aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80803ae:	a80a      	add	r0, sp, #40	; 0x28
 80803b0:	f001 fa44 	bl	808183c <snprintf>
 80803b4:	4b16      	ldr	r3, [pc, #88]	; (8080410 <_Z9sendEventv+0x9c>)
  Particle.publish("Cellular_Soil_Hook", data, PRIVATE);
 80803b6:	2200      	movs	r2, #0
 80803b8:	4916      	ldr	r1, [pc, #88]	; (8080414 <_Z9sendEventv+0xa0>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80803ba:	781b      	ldrb	r3, [r3, #0]
 80803bc:	a808      	add	r0, sp, #32
 80803be:	f88d 2000 	strb.w	r2, [sp]
 80803c2:	aa0a      	add	r2, sp, #40	; 0x28
 80803c4:	f7ff fe8a 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80803c8:	a809      	add	r0, sp, #36	; 0x24
 80803ca:	f7ff ffbd 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 80803ce:	f002 fc5f 	bl	8082c90 <_ZN9TimeClass4hourEv>
 80803d2:	4b11      	ldr	r3, [pc, #68]	; (8080418 <_Z9sendEventv+0xa4>)
 80803d4:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 80803d6:	f002 fc6f 	bl	8082cb8 <_ZN9TimeClass3dayEv>
 80803da:	4b10      	ldr	r3, [pc, #64]	; (808041c <_Z9sendEventv+0xa8>)
  dataInFlight = true;                                                // set the data inflight flag
 80803dc:	2201      	movs	r2, #1
{
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilmoisture\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilMoisture, stateOfCharge, resetCount, alertCount);
  Particle.publish("Cellular_Soil_Hook", data, PRIVATE);
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  currentDailyPeriod = Time.day();
 80803de:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                // set the data inflight flag
 80803e0:	4b0f      	ldr	r3, [pc, #60]	; (8080420 <_Z9sendEventv+0xac>)
 80803e2:	701a      	strb	r2, [r3, #0]
 80803e4:	f000 ff9e 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80803e8:	4b0e      	ldr	r3, [pc, #56]	; (8080424 <_Z9sendEventv+0xb0>)
 80803ea:	6018      	str	r0, [r3, #0]
}
 80803ec:	b04b      	add	sp, #300	; 0x12c
 80803ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80803f2:	bf00      	nop
 80803f4:	20000198 	.word	0x20000198
 80803f8:	200001f0 	.word	0x200001f0
 80803fc:	200001a8 	.word	0x200001a8
 8080400:	200001f4 	.word	0x200001f4
 8080404:	200001ac 	.word	0x200001ac
 8080408:	20000214 	.word	0x20000214
 808040c:	0808507a 	.word	0x0808507a
 8080410:	20000168 	.word	0x20000168
 8080414:	080850dd 	.word	0x080850dd
 8080418:	200001fc 	.word	0x200001fc
 808041c:	20000190 	.word	0x20000190
 8080420:	20000070 	.word	0x20000070
 8080424:	20000164 	.word	0x20000164

08080428 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 8080428:	b5f0      	push	{r4, r5, r6, r7, lr}
 808042a:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 808042c:	4608      	mov	r0, r1
  dataInFlight = true;                                                // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 808042e:	af02      	add	r7, sp, #8
 8080430:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8080432:	f004 f98c 	bl	808474e <strlen>
 8080436:	f100 0308 	add.w	r3, r0, #8
 808043a:	f023 0307 	bic.w	r3, r3, #7
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 808043e:	466d      	mov	r5, sp
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8080440:	ebad 0d03 	sub.w	sp, sp, r3
 8080444:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
 8080446:	1c42      	adds	r2, r0, #1
 8080448:	4631      	mov	r1, r6
 808044a:	4620      	mov	r0, r4
 808044c:	f004 f99c 	bl	8084788 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
 8080450:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8080454:	b94e      	cbnz	r6, 808046a <_Z14UbidotsHandlerPKcS0_+0x42>
 8080456:	f001 f941 	bl	80816dc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 808045a:	2800      	cmp	r0, #0
 808045c:	d03b      	beq.n	80804d6 <_Z14UbidotsHandlerPKcS0_+0xae>
 808045e:	4b20      	ldr	r3, [pc, #128]	; (80804e0 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8080460:	4a20      	ldr	r2, [pc, #128]	; (80804e4 <_Z14UbidotsHandlerPKcS0_+0xbc>)
 8080462:	781b      	ldrb	r3, [r3, #0]
 8080464:	f88d 6000 	strb.w	r6, [sp]
 8080468:	e02e      	b.n	80804c8 <_Z14UbidotsHandlerPKcS0_+0xa0>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
 808046a:	4620      	mov	r0, r4
 808046c:	f003 fffc 	bl	8084468 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080470:	38c8      	subs	r0, #200	; 0xc8
 8080472:	2801      	cmp	r0, #1
 8080474:	d81f      	bhi.n	80804b6 <_Z14UbidotsHandlerPKcS0_+0x8e>
 8080476:	f001 f931 	bl	80816dc <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
 808047a:	b160      	cbz	r0, 8080496 <_Z14UbidotsHandlerPKcS0_+0x6e>
 808047c:	4b18      	ldr	r3, [pc, #96]	; (80804e0 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 808047e:	2200      	movs	r2, #0
 8080480:	781b      	ldrb	r3, [r3, #0]
 8080482:	4638      	mov	r0, r7
 8080484:	f88d 2000 	strb.w	r2, [sp]
 8080488:	4917      	ldr	r1, [pc, #92]	; (80804e8 <_Z14UbidotsHandlerPKcS0_+0xc0>)
 808048a:	4a18      	ldr	r2, [pc, #96]	; (80804ec <_Z14UbidotsHandlerPKcS0_+0xc4>)
 808048c:	f7ff fe26 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080490:	1d38      	adds	r0, r7, #4
 8080492:	f7ff ff59 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080496:	f000 ff45 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 808049a:	4b15      	ldr	r3, [pc, #84]	; (80804f0 <_Z14UbidotsHandlerPKcS0_+0xc8>)
 808049c:	6018      	str	r0, [r3, #0]
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
 808049e:	f002 fea7 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 80804a2:	f002 fbee 	bl	8082c82 <_ZN9TimeClass3nowEv>
 80804a6:	b2c1      	uxtb	r1, r0
 80804a8:	2005      	movs	r0, #5
 80804aa:	f7ff fe15 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
    dataInFlight = false;                                             // Data has been received
 80804ae:	4b11      	ldr	r3, [pc, #68]	; (80804f4 <_Z14UbidotsHandlerPKcS0_+0xcc>)
 80804b0:	2200      	movs	r2, #0
 80804b2:	701a      	strb	r2, [r3, #0]
 80804b4:	e00f      	b.n	80804d6 <_Z14UbidotsHandlerPKcS0_+0xae>
 80804b6:	f001 f911 	bl	80816dc <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 80804ba:	b160      	cbz	r0, 80804d6 <_Z14UbidotsHandlerPKcS0_+0xae>
 80804bc:	4b08      	ldr	r3, [pc, #32]	; (80804e0 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 80804be:	2200      	movs	r2, #0
 80804c0:	781b      	ldrb	r3, [r3, #0]
 80804c2:	f88d 2000 	strb.w	r2, [sp]
 80804c6:	4622      	mov	r2, r4
 80804c8:	4638      	mov	r0, r7
 80804ca:	490b      	ldr	r1, [pc, #44]	; (80804f8 <_Z14UbidotsHandlerPKcS0_+0xd0>)
 80804cc:	f7ff fe06 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 80804d0:	1d38      	adds	r0, r7, #4
 80804d2:	f7ff ff39 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
 80804d6:	46ad      	mov	sp, r5
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
 80804d8:	370c      	adds	r7, #12
 80804da:	46bd      	mov	sp, r7
 80804dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80804de:	bf00      	nop
 80804e0:	20000168 	.word	0x20000168
 80804e4:	080850f0 	.word	0x080850f0
 80804e8:	08085117 	.word	0x08085117
 80804ec:	08085105 	.word	0x08085105
 80804f0:	20000194 	.word	0x20000194
 80804f4:	20000070 	.word	0x20000070
 80804f8:	080850f8 	.word	0x080850f8

080804fc <_Z16takeMeasurementsv>:

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 80804fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Read values from the sensor
  temperatureInC = sht31.readTemperature();
 80804fe:	4833      	ldr	r0, [pc, #204]	; (80805cc <_Z16takeMeasurementsv+0xd0>)
 8080500:	f000 feb6 	bl	8081270 <_ZN14Adafruit_SHT3115readTemperatureEv>
 8080504:	4c32      	ldr	r4, [pc, #200]	; (80805d0 <_Z16takeMeasurementsv+0xd4>)
 8080506:	6020      	str	r0, [r4, #0]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", temperatureInC);
 8080508:	f003 f9c2 	bl	8083890 <__aeabi_f2d>
 808050c:	4a31      	ldr	r2, [pc, #196]	; (80805d4 <_Z16takeMeasurementsv+0xd8>)
 808050e:	e9cd 0100 	strd	r0, r1, [sp]
 8080512:	2110      	movs	r1, #16
 8080514:	4830      	ldr	r0, [pc, #192]	; (80805d8 <_Z16takeMeasurementsv+0xdc>)
 8080516:	f001 f991 	bl	808183c <snprintf>

  relativeHumidity = sht31.readHumidity();
 808051a:	482c      	ldr	r0, [pc, #176]	; (80805cc <_Z16takeMeasurementsv+0xd0>)
 808051c:	f000 feb4 	bl	8081288 <_ZN14Adafruit_SHT3112readHumidityEv>
 8080520:	4b2e      	ldr	r3, [pc, #184]	; (80805dc <_Z16takeMeasurementsv+0xe0>)
 8080522:	6018      	str	r0, [r3, #0]
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", relativeHumidity);
 8080524:	f003 f9b4 	bl	8083890 <__aeabi_f2d>
 8080528:	4a2d      	ldr	r2, [pc, #180]	; (80805e0 <_Z16takeMeasurementsv+0xe4>)
 808052a:	e9cd 0100 	strd	r0, r1, [sp]
 808052e:	2110      	movs	r1, #16
 8080530:	482c      	ldr	r0, [pc, #176]	; (80805e4 <_Z16takeMeasurementsv+0xe8>)
 8080532:	f001 f983 	bl	808183c <snprintf>

  soilMoisture = map(analogRead(A0),0,3722,0,100);
 8080536:	200a      	movs	r0, #10
 8080538:	f002 fe43 	bl	80831c2 <analogRead>
 808053c:	2364      	movs	r3, #100	; 0x64
 808053e:	9300      	str	r3, [sp, #0]
 8080540:	2300      	movs	r3, #0
 8080542:	4619      	mov	r1, r3
 8080544:	f640 628a 	movw	r2, #3722	; 0xe8a
 8080548:	f001 f990 	bl	808186c <_Z3mapiiiii>
 808054c:	4b26      	ldr	r3, [pc, #152]	; (80805e8 <_Z16takeMeasurementsv+0xec>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808054e:	2200      	movs	r2, #0
 8080550:	6018      	str	r0, [r3, #0]
 8080552:	4b26      	ldr	r3, [pc, #152]	; (80805ec <_Z16takeMeasurementsv+0xf0>)
 8080554:	4611      	mov	r1, r2
 8080556:	6858      	ldr	r0, [r3, #4]
 8080558:	f001 f910 	bl	808177c <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 808055c:	b108      	cbz	r0, 8080562 <_Z16takeMeasurementsv+0x66>
 808055e:	f7ff fdcb 	bl	80800f8 <_Z17getSignalStrengthv>
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
 8080562:	4823      	ldr	r0, [pc, #140]	; (80805f0 <_Z16takeMeasurementsv+0xf4>)
 8080564:	f001 fe2e 	bl	80821c4 <_ZN9FuelGauge6getSoCEv>
 8080568:	f003 ff1c 	bl	80843a4 <__aeabi_f2iz>
 808056c:	4a21      	ldr	r2, [pc, #132]	; (80805f4 <_Z16takeMeasurementsv+0xf8>)
 808056e:	4603      	mov	r3, r0
 8080570:	6010      	str	r0, [r2, #0]
  snprintf(batteryString, sizeof(batteryString), "%i %%", stateOfCharge);
 8080572:	2110      	movs	r1, #16
 8080574:	4a20      	ldr	r2, [pc, #128]	; (80805f8 <_Z16takeMeasurementsv+0xfc>)
 8080576:	4821      	ldr	r0, [pc, #132]	; (80805fc <_Z16takeMeasurementsv+0x100>)
 8080578:	f001 f960 	bl	808183c <snprintf>

  if (temperatureInC < 0 || temperatureInC > 45) {                      // Need to add temp charging controls - 
 808057c:	6824      	ldr	r4, [r4, #0]
 808057e:	2100      	movs	r1, #0
 8080580:	4620      	mov	r0, r4
 8080582:	f003 fee7 	bl	8084354 <__aeabi_fcmplt>
 8080586:	b920      	cbnz	r0, 8080592 <_Z16takeMeasurementsv+0x96>
 8080588:	491d      	ldr	r1, [pc, #116]	; (8080600 <_Z16takeMeasurementsv+0x104>)
 808058a:	4620      	mov	r0, r4
 808058c:	f003 ff00 	bl	8084390 <__aeabi_fcmpgt>
 8080590:	b1c0      	cbz	r0, 80805c4 <_Z16takeMeasurementsv+0xc8>
    snprintf(powerContext, sizeof(powerContext), "Chg Disabled Temp");
 8080592:	491c      	ldr	r1, [pc, #112]	; (8080604 <_Z16takeMeasurementsv+0x108>)
 8080594:	481c      	ldr	r0, [pc, #112]	; (8080608 <_Z16takeMeasurementsv+0x10c>)
 8080596:	f004 f8b7 	bl	8084708 <strcpy>
    power.disableCharging();                                          // Disable Charging if temp is too low or too high
 808059a:	481c      	ldr	r0, [pc, #112]	; (808060c <_Z16takeMeasurementsv+0x110>)
 808059c:	f002 f8be 	bl	808271c <_ZN4PMIC15disableChargingEv>
    waitUntil(meterParticlePublish);
 80805a0:	f7ff fe9a 	bl	80802d8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32>
 80805a4:	f001 f89a 	bl	80816dc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Alert", "Charging disabled Temperature",PRIVATE);
 80805a8:	b160      	cbz	r0, 80805c4 <_Z16takeMeasurementsv+0xc8>
 80805aa:	4b19      	ldr	r3, [pc, #100]	; (8080610 <_Z16takeMeasurementsv+0x114>)
 80805ac:	2200      	movs	r2, #0
 80805ae:	781b      	ldrb	r3, [r3, #0]
 80805b0:	a802      	add	r0, sp, #8
 80805b2:	f88d 2000 	strb.w	r2, [sp]
 80805b6:	4917      	ldr	r1, [pc, #92]	; (8080614 <_Z16takeMeasurementsv+0x118>)
 80805b8:	4a17      	ldr	r2, [pc, #92]	; (8080618 <_Z16takeMeasurementsv+0x11c>)
 80805ba:	f7ff fd8f 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 80805be:	a803      	add	r0, sp, #12
 80805c0:	f7ff fec2 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;                                                           // Return to avoid the enableCharging command at the end of the IF statement
  }

  return 1;
}
 80805c4:	2001      	movs	r0, #1
 80805c6:	b004      	add	sp, #16
 80805c8:	bd10      	pop	{r4, pc}
 80805ca:	bf00      	nop
 80805cc:	2000019c 	.word	0x2000019c
 80805d0:	20000214 	.word	0x20000214
 80805d4:	0808511d 	.word	0x0808511d
 80805d8:	20000150 	.word	0x20000150
 80805dc:	200001ac 	.word	0x200001ac
 80805e0:	08085125 	.word	0x08085125
 80805e4:	2000021c 	.word	0x2000021c
 80805e8:	200001f4 	.word	0x200001f4
 80805ec:	20000240 	.word	0x20000240
 80805f0:	20000184 	.word	0x20000184
 80805f4:	200001a8 	.word	0x200001a8
 80805f8:	0808512e 	.word	0x0808512e
 80805fc:	2000022d 	.word	0x2000022d
 8080600:	42340000 	.word	0x42340000
 8080604:	08085134 	.word	0x08085134
 8080608:	20000169 	.word	0x20000169
 808060c:	2000018f 	.word	0x2000018f
 8080610:	20000168 	.word	0x20000168
 8080614:	08085164 	.word	0x08085164
 8080618:	08085146 	.word	0x08085146

0808061c <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 808061c:	b530      	push	{r4, r5, lr}
 808061e:	4924      	ldr	r1, [pc, #144]	; (80806b0 <_Z12setSolarMode6String+0x94>)
 8080620:	b085      	sub	sp, #20
 8080622:	4605      	mov	r5, r0
 8080624:	f002 fa37 	bl	8082a96 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080628:	4604      	mov	r4, r0
 808062a:	b1d0      	cbz	r0, 8080662 <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
 808062c:	4b21      	ldr	r3, [pc, #132]	; (80806b4 <_Z12setSolarMode6String+0x98>)
 808062e:	2401      	movs	r4, #1
 8080630:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080632:	f002 fddd 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080636:	2004      	movs	r0, #4
 8080638:	f7ff fd4c 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 808063c:	4d1e      	ldr	r5, [pc, #120]	; (80806b8 <_Z12setSolarMode6String+0x9c>)
 808063e:	f040 0004 	orr.w	r0, r0, #4
 8080642:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
 8080644:	f002 fdd4 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080648:	7829      	ldrb	r1, [r5, #0]
 808064a:	2004      	movs	r0, #4
 808064c:	f7ff fd44 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
    PMICreset();                                               // Change the power management Settings
 8080650:	f7ff fdee 	bl	8080230 <_Z9PMICresetv>
 8080654:	4b19      	ldr	r3, [pc, #100]	; (80806bc <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
 8080656:	2200      	movs	r2, #0
 8080658:	781b      	ldrb	r3, [r3, #0]
 808065a:	f88d 2000 	strb.w	r2, [sp]
 808065e:	4a18      	ldr	r2, [pc, #96]	; (80806c0 <_Z12setSolarMode6String+0xa4>)
 8080660:	e01c      	b.n	808069c <_Z12setSolarMode6String+0x80>
 8080662:	4918      	ldr	r1, [pc, #96]	; (80806c4 <_Z12setSolarMode6String+0xa8>)
 8080664:	4628      	mov	r0, r5
 8080666:	f002 fa16 	bl	8082a96 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808066a:	b1f8      	cbz	r0, 80806ac <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
 808066c:	4b11      	ldr	r3, [pc, #68]	; (80806b4 <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 808066e:	4d12      	ldr	r5, [pc, #72]	; (80806b8 <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 8080670:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080672:	f002 fdbd 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080676:	2004      	movs	r0, #4
 8080678:	f7ff fd2c 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 808067c:	f020 0004 	bic.w	r0, r0, #4
 8080680:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080682:	f002 fdb5 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080686:	7829      	ldrb	r1, [r5, #0]
 8080688:	2004      	movs	r0, #4
 808068a:	f7ff fd25 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
    PMICreset();                                                // Change the power management settings
 808068e:	f7ff fdcf 	bl	8080230 <_Z9PMICresetv>
 8080692:	4b0a      	ldr	r3, [pc, #40]	; (80806bc <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
 8080694:	4a0c      	ldr	r2, [pc, #48]	; (80806c8 <_Z12setSolarMode6String+0xac>)
 8080696:	781b      	ldrb	r3, [r3, #0]
 8080698:	f88d 4000 	strb.w	r4, [sp]
 808069c:	490b      	ldr	r1, [pc, #44]	; (80806cc <_Z12setSolarMode6String+0xb0>)
 808069e:	a802      	add	r0, sp, #8
 80806a0:	f7ff fd1c 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 80806a4:	a803      	add	r0, sp, #12
 80806a6:	f7ff fe4f 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 80806aa:	2001      	movs	r0, #1
  }
  else return 0;
}
 80806ac:	b005      	add	sp, #20
 80806ae:	bd30      	pop	{r4, r5, pc}
 80806b0:	0808536f 	.word	0x0808536f
 80806b4:	2000022c 	.word	0x2000022c
 80806b8:	2000023d 	.word	0x2000023d
 80806bc:	20000168 	.word	0x20000168
 80806c0:	0808516a 	.word	0x0808516a
 80806c4:	08085181 	.word	0x08085181
 80806c8:	08085183 	.word	0x08085183
 80806cc:	08085199 	.word	0x08085199

080806d0 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 80806d0:	b530      	push	{r4, r5, lr}
 80806d2:	4922      	ldr	r1, [pc, #136]	; (808075c <_Z14setVerboseMode6String+0x8c>)
 80806d4:	b085      	sub	sp, #20
 80806d6:	4605      	mov	r5, r0
 80806d8:	f002 f9dd 	bl	8082a96 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80806dc:	4604      	mov	r4, r0
 80806de:	b1c0      	cbz	r0, 8080712 <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 80806e0:	4b1f      	ldr	r3, [pc, #124]	; (8080760 <_Z14setVerboseMode6String+0x90>)
 80806e2:	2401      	movs	r4, #1
 80806e4:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80806e6:	f002 fd83 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 80806ea:	2004      	movs	r0, #4
 80806ec:	f7ff fcf2 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 80806f0:	4d1c      	ldr	r5, [pc, #112]	; (8080764 <_Z14setVerboseMode6String+0x94>)
 80806f2:	f040 0008 	orr.w	r0, r0, #8
 80806f6:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80806f8:	f002 fd7a 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 80806fc:	7829      	ldrb	r1, [r5, #0]
 80806fe:	2004      	movs	r0, #4
 8080700:	f7ff fcea 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
 8080704:	4b18      	ldr	r3, [pc, #96]	; (8080768 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8080706:	2200      	movs	r2, #0
 8080708:	781b      	ldrb	r3, [r3, #0]
 808070a:	f88d 2000 	strb.w	r2, [sp]
 808070e:	4a17      	ldr	r2, [pc, #92]	; (808076c <_Z14setVerboseMode6String+0x9c>)
 8080710:	e01a      	b.n	8080748 <_Z14setVerboseMode6String+0x78>
 8080712:	4917      	ldr	r1, [pc, #92]	; (8080770 <_Z14setVerboseMode6String+0xa0>)
 8080714:	4628      	mov	r0, r5
 8080716:	f002 f9be 	bl	8082a96 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808071a:	b1e8      	cbz	r0, 8080758 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 808071c:	4b10      	ldr	r3, [pc, #64]	; (8080760 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808071e:	4d11      	ldr	r5, [pc, #68]	; (8080764 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080720:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080722:	f002 fd65 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080726:	2004      	movs	r0, #4
 8080728:	f7ff fcd4 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808072c:	f020 0008 	bic.w	r0, r0, #8
 8080730:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080732:	f002 fd5d 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080736:	7829      	ldrb	r1, [r5, #0]
 8080738:	2004      	movs	r0, #4
 808073a:	f7ff fccd 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
 808073e:	4b0a      	ldr	r3, [pc, #40]	; (8080768 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080740:	4a0c      	ldr	r2, [pc, #48]	; (8080774 <_Z14setVerboseMode6String+0xa4>)
 8080742:	781b      	ldrb	r3, [r3, #0]
 8080744:	f88d 4000 	strb.w	r4, [sp]
 8080748:	490b      	ldr	r1, [pc, #44]	; (8080778 <_Z14setVerboseMode6String+0xa8>)
 808074a:	a802      	add	r0, sp, #8
 808074c:	f7ff fcc6 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080750:	a803      	add	r0, sp, #12
 8080752:	f7ff fdf9 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080756:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080758:	b005      	add	sp, #20
 808075a:	bd30      	pop	{r4, r5, pc}
 808075c:	0808536f 	.word	0x0808536f
 8080760:	2000020f 	.word	0x2000020f
 8080764:	2000023d 	.word	0x2000023d
 8080768:	20000168 	.word	0x20000168
 808076c:	0808519e 	.word	0x0808519e
 8080770:	08085181 	.word	0x08085181
 8080774:	080851af 	.word	0x080851af
 8080778:	08085199 	.word	0x08085199

0808077c <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 808077c:	b570      	push	{r4, r5, r6, lr}
 808077e:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080780:	220a      	movs	r2, #10
 8080782:	a905      	add	r1, sp, #20
 8080784:	6800      	ldr	r0, [r0, #0]
 8080786:	f004 f899 	bl	80848bc <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808078a:	b2c5      	uxtb	r5, r0
 808078c:	f105 030c 	add.w	r3, r5, #12
 8080790:	b2db      	uxtb	r3, r3
 8080792:	2b18      	cmp	r3, #24
 8080794:	d83d      	bhi.n	8080812 <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080796:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 8080798:	4620      	mov	r0, r4
 808079a:	f003 fbe9 	bl	8083f70 <__aeabi_i2f>
 808079e:	f002 fa11 	bl	8082bc4 <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 80807a2:	f002 fd25 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 80807a6:	4629      	mov	r1, r5
 80807a8:	2003      	movs	r0, #3
 80807aa:	f7ff fc95 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
  t = Time.now();
 80807ae:	f002 fa68 	bl	8082c82 <_ZN9TimeClass3nowEv>
 80807b2:	4e19      	ldr	r6, [pc, #100]	; (8080818 <_Z11setTimeZone6String+0x9c>)
 80807b4:	4d19      	ldr	r5, [pc, #100]	; (808081c <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80807b6:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 80807b8:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80807ba:	4a19      	ldr	r2, [pc, #100]	; (8080820 <_Z11setTimeZone6String+0xa4>)
 80807bc:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80807c0:	2400      	movs	r4, #0
 80807c2:	a80c      	add	r0, sp, #48	; 0x30
 80807c4:	f001 f83a 	bl	808183c <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80807c8:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 80807ca:	aa0c      	add	r2, sp, #48	; 0x30
 80807cc:	4915      	ldr	r1, [pc, #84]	; (8080824 <_Z11setTimeZone6String+0xa8>)
 80807ce:	a808      	add	r0, sp, #32
 80807d0:	f88d 4000 	strb.w	r4, [sp]
 80807d4:	f7ff fc82 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 80807d8:	a809      	add	r0, sp, #36	; 0x24
 80807da:	f7ff fdb5 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80807de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80807e2:	f001 f84f 	bl	8081884 <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 80807e6:	6831      	ldr	r1, [r6, #0]
 80807e8:	a808      	add	r0, sp, #32
 80807ea:	f002 fa07 	bl	8082bfc <_ZN9TimeClass7timeStrEl>
 80807ee:	9b08      	ldr	r3, [sp, #32]
 80807f0:	490c      	ldr	r1, [pc, #48]	; (8080824 <_Z11setTimeZone6String+0xa8>)
 80807f2:	9303      	str	r3, [sp, #12]
 80807f4:	9a03      	ldr	r2, [sp, #12]
 80807f6:	782b      	ldrb	r3, [r5, #0]
 80807f8:	a806      	add	r0, sp, #24
 80807fa:	f88d 4000 	strb.w	r4, [sp]
 80807fe:	f7ff fc6d 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080802:	a807      	add	r0, sp, #28
 8080804:	f7ff fda0 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080808:	a808      	add	r0, sp, #32
 808080a:	f002 f8d0 	bl	80829ae <_ZN6StringD1Ev>
  return 1;
 808080e:	2001      	movs	r0, #1
 8080810:	e000      	b.n	8080814 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080812:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 8080814:	b04c      	add	sp, #304	; 0x130
 8080816:	bd70      	pop	{r4, r5, r6, pc}
 8080818:	200001f8 	.word	0x200001f8
 808081c:	20000168 	.word	0x20000168
 8080820:	080851c4 	.word	0x080851c4
 8080824:	080851d8 	.word	0x080851d8

08080828 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8080828:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 808082a:	4926      	ldr	r1, [pc, #152]	; (80808c4 <_Z15setLowPowerMode6String+0x9c>)
 808082c:	4605      	mov	r5, r0
 808082e:	f002 f932 	bl	8082a96 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 8080832:	b928      	cbnz	r0, 8080840 <_Z15setLowPowerMode6String+0x18>
 8080834:	4924      	ldr	r1, [pc, #144]	; (80808c8 <_Z15setLowPowerMode6String+0xa0>)
 8080836:	4628      	mov	r0, r5
 8080838:	f002 f92d 	bl	8082a96 <_ZNK6String6equalsEPKc>
 808083c:	2800      	cmp	r0, #0
 808083e:	d03f      	beq.n	80808c0 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080840:	f002 fcd6 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080844:	2004      	movs	r0, #4
 8080846:	f7ff fc45 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
 808084a:	4c20      	ldr	r4, [pc, #128]	; (80808cc <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808084c:	491d      	ldr	r1, [pc, #116]	; (80808c4 <_Z15setLowPowerMode6String+0x9c>)
 808084e:	7020      	strb	r0, [r4, #0]
 8080850:	4628      	mov	r0, r5
 8080852:	f002 f920 	bl	8082a96 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 8080856:	4606      	mov	r6, r0
 8080858:	b1a0      	cbz	r0, 8080884 <_Z15setLowPowerMode6String+0x5c>
 808085a:	4b1d      	ldr	r3, [pc, #116]	; (80808d0 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 808085c:	2200      	movs	r2, #0
 808085e:	781b      	ldrb	r3, [r3, #0]
 8080860:	491c      	ldr	r1, [pc, #112]	; (80808d4 <_Z15setLowPowerMode6String+0xac>)
 8080862:	f88d 2000 	strb.w	r2, [sp]
 8080866:	a802      	add	r0, sp, #8
 8080868:	4a1b      	ldr	r2, [pc, #108]	; (80808d8 <_Z15setLowPowerMode6String+0xb0>)
 808086a:	f7ff fc37 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 808086e:	a803      	add	r0, sp, #12
 8080870:	f7ff fd6a 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8080874:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 8080876:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8080878:	f043 0301 	orr.w	r3, r3, #1
 808087c:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 808087e:	4b17      	ldr	r3, [pc, #92]	; (80808dc <_Z15setLowPowerMode6String+0xb4>)
 8080880:	701a      	strb	r2, [r3, #0]
 8080882:	e016      	b.n	80808b2 <_Z15setLowPowerMode6String+0x8a>
 8080884:	4910      	ldr	r1, [pc, #64]	; (80808c8 <_Z15setLowPowerMode6String+0xa0>)
 8080886:	4628      	mov	r0, r5
 8080888:	f002 f905 	bl	8082a96 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 808088c:	b188      	cbz	r0, 80808b2 <_Z15setLowPowerMode6String+0x8a>
 808088e:	4b10      	ldr	r3, [pc, #64]	; (80808d0 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 8080890:	4a13      	ldr	r2, [pc, #76]	; (80808e0 <_Z15setLowPowerMode6String+0xb8>)
 8080892:	781b      	ldrb	r3, [r3, #0]
 8080894:	490f      	ldr	r1, [pc, #60]	; (80808d4 <_Z15setLowPowerMode6String+0xac>)
 8080896:	a802      	add	r0, sp, #8
 8080898:	f88d 6000 	strb.w	r6, [sp]
 808089c:	f7ff fc1e 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 80808a0:	a803      	add	r0, sp, #12
 80808a2:	f7ff fd51 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 80808a6:	7823      	ldrb	r3, [r4, #0]
 80808a8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80808ac:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 80808ae:	4b0b      	ldr	r3, [pc, #44]	; (80808dc <_Z15setLowPowerMode6String+0xb4>)
 80808b0:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80808b2:	f002 fc9d 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 80808b6:	2004      	movs	r0, #4
 80808b8:	7821      	ldrb	r1, [r4, #0]
 80808ba:	f7ff fc0d 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
 80808be:	2001      	movs	r0, #1
  return 1;
}
 80808c0:	b004      	add	sp, #16
 80808c2:	bd70      	pop	{r4, r5, r6, pc}
 80808c4:	0808536f 	.word	0x0808536f
 80808c8:	08085181 	.word	0x08085181
 80808cc:	2000023d 	.word	0x2000023d
 80808d0:	20000168 	.word	0x20000168
 80808d4:	08085199 	.word	0x08085199
 80808d8:	080851dd 	.word	0x080851dd
 80808dc:	2000020e 	.word	0x2000020e
 80808e0:	080851e7 	.word	0x080851e7

080808e4 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
 80808e4:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80808e6:	4d18      	ldr	r5, [pc, #96]	; (8080948 <_Z22publishStateTransitionv+0x64>)
 80808e8:	4918      	ldr	r1, [pc, #96]	; (808094c <_Z22publishStateTransitionv+0x68>)
 80808ea:	782a      	ldrb	r2, [r5, #0]
 80808ec:	230e      	movs	r3, #14
 80808ee:	fb03 1202 	mla	r2, r3, r2, r1
 80808f2:	4c17      	ldr	r4, [pc, #92]	; (8080950 <_Z22publishStateTransitionv+0x6c>)
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
  return 1;
}

void publishStateTransition(void)
{
 80808f4:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80808f6:	7820      	ldrb	r0, [r4, #0]
 80808f8:	9200      	str	r2, [sp, #0]
 80808fa:	fb03 1300 	mla	r3, r3, r0, r1
 80808fe:	4a15      	ldr	r2, [pc, #84]	; (8080954 <_Z22publishStateTransitionv+0x70>)
 8080900:	2128      	movs	r1, #40	; 0x28
 8080902:	a804      	add	r0, sp, #16
 8080904:	f000 ff9a 	bl	808183c <snprintf>
  oldState = state;
 8080908:	782b      	ldrb	r3, [r5, #0]
 808090a:	7023      	strb	r3, [r4, #0]
 808090c:	f000 fee6 	bl	80816dc <spark_cloud_flag_connected>
  if(Particle.connected()) {
 8080910:	b190      	cbz	r0, 8080938 <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
 8080912:	f7ff fce1 	bl	80802d8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32>
 8080916:	4b10      	ldr	r3, [pc, #64]	; (8080958 <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 8080918:	2200      	movs	r2, #0
 808091a:	781b      	ldrb	r3, [r3, #0]
 808091c:	490f      	ldr	r1, [pc, #60]	; (808095c <_Z22publishStateTransitionv+0x78>)
 808091e:	f88d 2000 	strb.w	r2, [sp]
 8080922:	a802      	add	r0, sp, #8
 8080924:	aa04      	add	r2, sp, #16
 8080926:	f7ff fbd9 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 808092a:	a803      	add	r0, sp, #12
 808092c:	f7ff fd0c 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080930:	f000 fcf8 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080934:	4b0a      	ldr	r3, [pc, #40]	; (8080960 <_Z22publishStateTransitionv+0x7c>)
 8080936:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
 8080938:	f002 fac0 	bl	8082ebc <_Z16_fetch_usbserialv>
 808093c:	a904      	add	r1, sp, #16
 808093e:	f001 ffa9 	bl	8082894 <_ZN5Print7printlnEPKc>
}
 8080942:	b00f      	add	sp, #60	; 0x3c
 8080944:	bd30      	pop	{r4, r5, pc}
 8080946:	bf00      	nop
 8080948:	2000018e 	.word	0x2000018e
 808094c:	20000000 	.word	0x20000000
 8080950:	2000018d 	.word	0x2000018d
 8080954:	080851f9 	.word	0x080851f9
 8080958:	20000168 	.word	0x20000168
 808095c:	08085207 	.word	0x08085207
 8080960:	20000194 	.word	0x20000194

08080964 <loop>:
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
 8080964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
 8080966:	4c96      	ldr	r4, [pc, #600]	; (8080bc0 <loop+0x25c>)
 8080968:	7823      	ldrb	r3, [r4, #0]
 808096a:	3b01      	subs	r3, #1
 808096c:	2b06      	cmp	r3, #6
 808096e:	f200 81cd 	bhi.w	8080d0c <loop+0x3a8>
 8080972:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080976:	0157      	.short	0x0157
 8080978:	002e0007 	.word	0x002e0007
 808097c:	00720057 	.word	0x00720057
 8080980:	00e900a5 	.word	0x00e900a5
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080984:	4b8f      	ldr	r3, [pc, #572]	; (8080bc4 <loop+0x260>)
 8080986:	781b      	ldrb	r3, [r3, #0]
 8080988:	b12b      	cbz	r3, 8080996 <loop+0x32>
 808098a:	4b8f      	ldr	r3, [pc, #572]	; (8080bc8 <loop+0x264>)
 808098c:	781b      	ldrb	r3, [r3, #0]
 808098e:	2b02      	cmp	r3, #2
 8080990:	d001      	beq.n	8080996 <loop+0x32>
 8080992:	f7ff ffa7 	bl	80808e4 <_Z22publishStateTransitionv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8080996:	4b8d      	ldr	r3, [pc, #564]	; (8080bcc <loop+0x268>)
 8080998:	781b      	ldrb	r3, [r3, #0]
 808099a:	b14b      	cbz	r3, 80809b0 <loop+0x4c>
 808099c:	f000 fcc2 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
 80809a0:	4b8b      	ldr	r3, [pc, #556]	; (8080bd0 <loop+0x26c>)
 80809a2:	681b      	ldr	r3, [r3, #0]
 80809a4:	1ac0      	subs	r0, r0, r3
 80809a6:	4b8b      	ldr	r3, [pc, #556]	; (8080bd4 <loop+0x270>)
 80809a8:	681b      	ldr	r3, [r3, #0]
 80809aa:	4298      	cmp	r0, r3
 80809ac:	f200 81ab 	bhi.w	8080d06 <loop+0x3a2>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;     // We want to report on the hour but not after bedtime
 80809b0:	f002 f96e 	bl	8082c90 <_ZN9TimeClass4hourEv>
 80809b4:	4b88      	ldr	r3, [pc, #544]	; (8080bd8 <loop+0x274>)
 80809b6:	781b      	ldrb	r3, [r3, #0]
 80809b8:	4298      	cmp	r0, r3
 80809ba:	bf1c      	itt	ne
 80809bc:	2303      	movne	r3, #3
 80809be:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
 80809c0:	4b86      	ldr	r3, [pc, #536]	; (8080bdc <loop+0x278>)
 80809c2:	681a      	ldr	r2, [r3, #0]
 80809c4:	4b86      	ldr	r3, [pc, #536]	; (8080be0 <loop+0x27c>)
 80809c6:	681b      	ldr	r3, [r3, #0]
 80809c8:	429a      	cmp	r2, r3
 80809ca:	f300 819f 	bgt.w	8080d0c <loop+0x3a8>
 80809ce:	2307      	movs	r3, #7
 80809d0:	e026      	b.n	8080a20 <loop+0xbc>
    break;

  case MEASURING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 80809d2:	4b7c      	ldr	r3, [pc, #496]	; (8080bc4 <loop+0x260>)
 80809d4:	781a      	ldrb	r2, [r3, #0]
 80809d6:	461d      	mov	r5, r3
 80809d8:	b12a      	cbz	r2, 80809e6 <loop+0x82>
 80809da:	4b7b      	ldr	r3, [pc, #492]	; (8080bc8 <loop+0x264>)
 80809dc:	781b      	ldrb	r3, [r3, #0]
 80809de:	2b03      	cmp	r3, #3
 80809e0:	d001      	beq.n	80809e6 <loop+0x82>
 80809e2:	f7ff ff7f 	bl	80808e4 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
 80809e6:	f7ff fd89 	bl	80804fc <_Z16takeMeasurementsv>
 80809ea:	4606      	mov	r6, r0
 80809ec:	b9b8      	cbnz	r0, 8080a1e <loop+0xba>
    {
      state = ERROR_STATE;
 80809ee:	2301      	movs	r3, #1
 80809f0:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 80809f2:	782b      	ldrb	r3, [r5, #0]
 80809f4:	2b00      	cmp	r3, #0
 80809f6:	f000 8189 	beq.w	8080d0c <loop+0x3a8>
        waitUntil(meterParticlePublish);
 80809fa:	f7ff fc6d 	bl	80802d8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32>
 80809fe:	4b79      	ldr	r3, [pc, #484]	; (8080be4 <loop+0x280>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 8080a00:	4a79      	ldr	r2, [pc, #484]	; (8080be8 <loop+0x284>)
 8080a02:	781b      	ldrb	r3, [r3, #0]
 8080a04:	4979      	ldr	r1, [pc, #484]	; (8080bec <loop+0x288>)
 8080a06:	a802      	add	r0, sp, #8
 8080a08:	f88d 6000 	strb.w	r6, [sp]
 8080a0c:	f7ff fb66 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080a10:	a803      	add	r0, sp, #12
 8080a12:	f7ff fc99 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a16:	f000 fc85 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080a1a:	4b75      	ldr	r3, [pc, #468]	; (8080bf0 <loop+0x28c>)
 8080a1c:	e031      	b.n	8080a82 <loop+0x11e>
      }
    }
    else state = REPORTING_STATE;
 8080a1e:	2304      	movs	r3, #4
 8080a20:	7023      	strb	r3, [r4, #0]
 8080a22:	e173      	b.n	8080d0c <loop+0x3a8>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a24:	4b67      	ldr	r3, [pc, #412]	; (8080bc4 <loop+0x260>)
 8080a26:	781b      	ldrb	r3, [r3, #0]
 8080a28:	b12b      	cbz	r3, 8080a36 <loop+0xd2>
 8080a2a:	4b67      	ldr	r3, [pc, #412]	; (8080bc8 <loop+0x264>)
 8080a2c:	781b      	ldrb	r3, [r3, #0]
 8080a2e:	2b04      	cmp	r3, #4
 8080a30:	d001      	beq.n	8080a36 <loop+0xd2>
 8080a32:	f7ff ff57 	bl	80808e4 <_Z22publishStateTransitionv>
 8080a36:	f000 fe51 	bl	80816dc <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080a3a:	2800      	cmp	r0, #0
 8080a3c:	d03e      	beq.n	8080abc <loop+0x158>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
 8080a3e:	f002 f927 	bl	8082c90 <_ZN9TimeClass4hourEv>
 8080a42:	280c      	cmp	r0, #12
 8080a44:	d105      	bne.n	8080a52 <loop+0xee>
 8080a46:	f000 fe49 	bl	80816dc <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 8080a4a:	b110      	cbz	r0, 8080a52 <loop+0xee>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
 8080a4c:	2000      	movs	r0, #0
 8080a4e:	f000 fe65 	bl	808171c <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
 8080a52:	f7ff fc8f 	bl	8080374 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
 8080a56:	2305      	movs	r3, #5
 8080a58:	e7e2      	b.n	8080a20 <loop+0xbc>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a5a:	4b5a      	ldr	r3, [pc, #360]	; (8080bc4 <loop+0x260>)
 8080a5c:	781b      	ldrb	r3, [r3, #0]
 8080a5e:	b12b      	cbz	r3, 8080a6c <loop+0x108>
 8080a60:	4b59      	ldr	r3, [pc, #356]	; (8080bc8 <loop+0x264>)
 8080a62:	781b      	ldrb	r3, [r3, #0]
 8080a64:	2b05      	cmp	r3, #5
 8080a66:	d001      	beq.n	8080a6c <loop+0x108>
 8080a68:	f7ff ff3c 	bl	80808e4 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
 8080a6c:	4b61      	ldr	r3, [pc, #388]	; (8080bf4 <loop+0x290>)
 8080a6e:	781b      	ldrb	r3, [r3, #0]
 8080a70:	b94b      	cbnz	r3, 8080a86 <loop+0x122>
    {
      state = IDLE_STATE;
 8080a72:	2302      	movs	r3, #2
 8080a74:	7023      	strb	r3, [r4, #0]
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
 8080a76:	4a60      	ldr	r2, [pc, #384]	; (8080bf8 <loop+0x294>)
 8080a78:	4b56      	ldr	r3, [pc, #344]	; (8080bd4 <loop+0x270>)
 8080a7a:	601a      	str	r2, [r3, #0]
 8080a7c:	f000 fc52 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
 8080a80:	4b53      	ldr	r3, [pc, #332]	; (8080bd0 <loop+0x26c>)
 8080a82:	6018      	str	r0, [r3, #0]
 8080a84:	e142      	b.n	8080d0c <loop+0x3a8>
 8080a86:	f000 fc4d 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 8080a8a:	4b5c      	ldr	r3, [pc, #368]	; (8080bfc <loop+0x298>)
 8080a8c:	681b      	ldr	r3, [r3, #0]
 8080a8e:	1ac0      	subs	r0, r0, r3
 8080a90:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8080a94:	4298      	cmp	r0, r3
 8080a96:	f240 8139 	bls.w	8080d0c <loop+0x3a8>
 8080a9a:	f000 fc43 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080a9e:	4b58      	ldr	r3, [pc, #352]	; (8080c00 <loop+0x29c>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080aa0:	2200      	movs	r2, #0
      state = IDLE_STATE;
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
      stayAwakeTimeStamp = millis();
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
 8080aa2:	6018      	str	r0, [r3, #0]
 8080aa4:	4b4f      	ldr	r3, [pc, #316]	; (8080be4 <loop+0x280>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080aa6:	a802      	add	r0, sp, #8
 8080aa8:	781b      	ldrb	r3, [r3, #0]
 8080aaa:	4956      	ldr	r1, [pc, #344]	; (8080c04 <loop+0x2a0>)
 8080aac:	f88d 2000 	strb.w	r2, [sp]
 8080ab0:	4a55      	ldr	r2, [pc, #340]	; (8080c08 <loop+0x2a4>)
 8080ab2:	f7ff fb13 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080ab6:	a803      	add	r0, sp, #12
 8080ab8:	f7ff fc46 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
 8080abc:	2301      	movs	r3, #1
 8080abe:	e7af      	b.n	8080a20 <loop+0xbc>
    }
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
 8080ac0:	4b40      	ldr	r3, [pc, #256]	; (8080bc4 <loop+0x260>)
 8080ac2:	781a      	ldrb	r2, [r3, #0]
 8080ac4:	461c      	mov	r4, r3
 8080ac6:	b12a      	cbz	r2, 8080ad4 <loop+0x170>
 8080ac8:	4b3f      	ldr	r3, [pc, #252]	; (8080bc8 <loop+0x264>)
 8080aca:	781b      	ldrb	r3, [r3, #0]
 8080acc:	2b06      	cmp	r3, #6
 8080ace:	d001      	beq.n	8080ad4 <loop+0x170>
 8080ad0:	f7ff ff08 	bl	80808e4 <_Z22publishStateTransitionv>
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 8080ad4:	4b4d      	ldr	r3, [pc, #308]	; (8080c0c <loop+0x2a8>)
 8080ad6:	781d      	ldrb	r5, [r3, #0]
 8080ad8:	461e      	mov	r6, r3
 8080ada:	bb5d      	cbnz	r5, 8080b34 <loop+0x1d0>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080adc:	f000 fdfe 	bl	80816dc <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 8080ae0:	b1c8      	cbz	r0, 8080b16 <loop+0x1b2>
        if (verboseMode) {
 8080ae2:	7823      	ldrb	r3, [r4, #0]
 8080ae4:	b18b      	cbz	r3, 8080b0a <loop+0x1a6>
          waitUntil(meterParticlePublish);
 8080ae6:	f7ff fbf7 	bl	80802d8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32>
 8080aea:	4b3e      	ldr	r3, [pc, #248]	; (8080be4 <loop+0x280>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 8080aec:	4a48      	ldr	r2, [pc, #288]	; (8080c10 <loop+0x2ac>)
 8080aee:	781b      	ldrb	r3, [r3, #0]
 8080af0:	493e      	ldr	r1, [pc, #248]	; (8080bec <loop+0x288>)
 8080af2:	a802      	add	r0, sp, #8
 8080af4:	f88d 5000 	strb.w	r5, [sp]
 8080af8:	f7ff faf0 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080afc:	a803      	add	r0, sp, #12
 8080afe:	f7ff fc23 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b02:	f000 fc0f 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8080b06:	4b3a      	ldr	r3, [pc, #232]	; (8080bf0 <loop+0x28c>)
 8080b08:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8080b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080b0e:	f000 feb9 	bl	8081884 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080b12:	f7ff fb61 	bl	80801d8 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 8080b16:	f002 fb6b 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080b1a:	4b3e      	ldr	r3, [pc, #248]	; (8080c14 <loop+0x2b0>)
 8080b1c:	2002      	movs	r0, #2
 8080b1e:	7819      	ldrb	r1, [r3, #0]
 8080b20:	f7ff fada 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
      ledState = false;
 8080b24:	4b3c      	ldr	r3, [pc, #240]	; (8080c18 <loop+0x2b4>)
 8080b26:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b28:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 8080b2a:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b2c:	f002 fb1d 	bl	808316a <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 8080b30:	2301      	movs	r3, #1
 8080b32:	7033      	strb	r3, [r6, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8080b34:	f002 f8b6 	bl	8082ca4 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8080b38:	4b38      	ldr	r3, [pc, #224]	; (8080c1c <loop+0x2b8>)
 8080b3a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080b3e:	223c      	movs	r2, #60	; 0x3c
 8080b40:	681b      	ldr	r3, [r3, #0]
 8080b42:	4342      	muls	r2, r0
 8080b44:	2102      	movs	r1, #2
 8080b46:	e036      	b.n	8080bb6 <loop+0x252>
    } break;


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (verboseMode && state != oldState) publishStateTransition();
 8080b48:	4b1e      	ldr	r3, [pc, #120]	; (8080bc4 <loop+0x260>)
 8080b4a:	781a      	ldrb	r2, [r3, #0]
 8080b4c:	461c      	mov	r4, r3
 8080b4e:	b12a      	cbz	r2, 8080b5c <loop+0x1f8>
 8080b50:	4b1d      	ldr	r3, [pc, #116]	; (8080bc8 <loop+0x264>)
 8080b52:	781b      	ldrb	r3, [r3, #0]
 8080b54:	2b07      	cmp	r3, #7
 8080b56:	d001      	beq.n	8080b5c <loop+0x1f8>
 8080b58:	f7ff fec4 	bl	80808e4 <_Z22publishStateTransitionv>
 8080b5c:	f000 fdbe 	bl	80816dc <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080b60:	b1d0      	cbz	r0, 8080b98 <loop+0x234>
      if (verboseMode) {
 8080b62:	7823      	ldrb	r3, [r4, #0]
 8080b64:	b193      	cbz	r3, 8080b8c <loop+0x228>
        waitUntil(meterParticlePublish);
 8080b66:	f7ff fbb7 	bl	80802d8 <_ZN11SystemClass13waitConditionIZ16takeMeasurementsvEUlvE_EEbT_.isra.32>
 8080b6a:	4b1e      	ldr	r3, [pc, #120]	; (8080be4 <loop+0x280>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080b6c:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080b6e:	781b      	ldrb	r3, [r3, #0]
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 8080b70:	491e      	ldr	r1, [pc, #120]	; (8080bec <loop+0x288>)
 8080b72:	f88d 2000 	strb.w	r2, [sp]
 8080b76:	a802      	add	r0, sp, #8
 8080b78:	4a29      	ldr	r2, [pc, #164]	; (8080c20 <loop+0x2bc>)
 8080b7a:	f7ff faaf 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080b7e:	a803      	add	r0, sp, #12
 8080b80:	f7ff fbe2 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b84:	f000 fbce 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080b88:	4b19      	ldr	r3, [pc, #100]	; (8080bf0 <loop+0x28c>)
 8080b8a:	6018      	str	r0, [r3, #0]
      }
      delay(1000);                                                    // Time to send last update
 8080b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080b90:	f000 fe78 	bl	8081884 <delay>
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080b94:	f7ff fb20 	bl	80801d8 <_Z22disconnectFromParticlev>
    }
    ledState = false;
 8080b98:	4b1f      	ldr	r3, [pc, #124]	; (8080c18 <loop+0x2b4>)
 8080b9a:	2100      	movs	r1, #0
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b9c:	2007      	movs	r0, #7
        lastPublish = millis();
      }
      delay(1000);                                                    // Time to send last update
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
    }
    ledState = false;
 8080b9e:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080ba0:	f002 fae3 	bl	808316a <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8080ba4:	f002 f87e 	bl	8082ca4 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8080ba8:	223c      	movs	r2, #60	; 0x3c
 8080baa:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080bae:	4b1b      	ldr	r3, [pc, #108]	; (8080c1c <loop+0x2b8>)
 8080bb0:	4342      	muls	r2, r0
 8080bb2:	681b      	ldr	r3, [r3, #0]
 8080bb4:	2101      	movs	r1, #1
 8080bb6:	a802      	add	r0, sp, #8
 8080bb8:	f001 ffa0 	bl	8082afc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8080bbc:	e0a6      	b.n	8080d0c <loop+0x3a8>
 8080bbe:	bf00      	nop
 8080bc0:	2000018e 	.word	0x2000018e
 8080bc4:	2000020f 	.word	0x2000020f
 8080bc8:	2000018d 	.word	0x2000018d
 8080bcc:	2000020e 	.word	0x2000020e
 8080bd0:	20000210 	.word	0x20000210
 8080bd4:	20000200 	.word	0x20000200
 8080bd8:	200001fc 	.word	0x200001fc
 8080bdc:	200001a8 	.word	0x200001a8
 8080be0:	20000160 	.word	0x20000160
 8080be4:	20000168 	.word	0x20000168
 8080be8:	08085218 	.word	0x08085218
 8080bec:	08085117 	.word	0x08085117
 8080bf0:	20000194 	.word	0x20000194
 8080bf4:	20000070 	.word	0x20000070
 8080bf8:	00015f90 	.word	0x00015f90
 8080bfc:	20000164 	.word	0x20000164
 8080c00:	20000218 	.word	0x20000218
 8080c04:	08085232 	.word	0x08085232
 8080c08:	08085079 	.word	0x08085079
 8080c0c:	2000023e 	.word	0x2000023e
 8080c10:	0808524b 	.word	0x0808524b
 8080c14:	200001f0 	.word	0x200001f0
 8080c18:	2000018c 	.word	0x2000018c
 8080c1c:	20000204 	.word	0x20000204
 8080c20:	0808525a 	.word	0x0808525a

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 8080c24:	4b3a      	ldr	r3, [pc, #232]	; (8080d10 <loop+0x3ac>)
 8080c26:	781b      	ldrb	r3, [r3, #0]
 8080c28:	b12b      	cbz	r3, 8080c36 <loop+0x2d2>
 8080c2a:	4b3a      	ldr	r3, [pc, #232]	; (8080d14 <loop+0x3b0>)
 8080c2c:	781b      	ldrb	r3, [r3, #0]
 8080c2e:	2b01      	cmp	r3, #1
 8080c30:	d001      	beq.n	8080c36 <loop+0x2d2>
 8080c32:	f7ff fe57 	bl	80808e4 <_Z22publishStateTransitionv>
 8080c36:	f000 fb75 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
 8080c3a:	4b37      	ldr	r3, [pc, #220]	; (8080d18 <loop+0x3b4>)
 8080c3c:	681b      	ldr	r3, [r3, #0]
 8080c3e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8080c42:	3330      	adds	r3, #48	; 0x30
 8080c44:	4298      	cmp	r0, r3
 8080c46:	d961      	bls.n	8080d0c <loop+0x3a8>
    {
      if (resetCount <= 3) {                                          // First try simple reset
 8080c48:	4b34      	ldr	r3, [pc, #208]	; (8080d1c <loop+0x3b8>)
 8080c4a:	681b      	ldr	r3, [r3, #0]
 8080c4c:	2b03      	cmp	r3, #3
 8080c4e:	dc14      	bgt.n	8080c7a <loop+0x316>
 8080c50:	f000 fd44 	bl	80816dc <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8080c54:	b160      	cbz	r0, 8080c70 <loop+0x30c>
 8080c56:	4b32      	ldr	r3, [pc, #200]	; (8080d20 <loop+0x3bc>)
 8080c58:	2200      	movs	r2, #0
 8080c5a:	781b      	ldrb	r3, [r3, #0]
 8080c5c:	a802      	add	r0, sp, #8
 8080c5e:	f88d 2000 	strb.w	r2, [sp]
 8080c62:	4930      	ldr	r1, [pc, #192]	; (8080d24 <loop+0x3c0>)
 8080c64:	4a30      	ldr	r2, [pc, #192]	; (8080d28 <loop+0x3c4>)
 8080c66:	f7ff fa39 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080c6a:	a803      	add	r0, sp, #12
 8080c6c:	f7ff fb6c 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080c70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080c74:	f000 fe06 	bl	8081884 <delay>
 8080c78:	e025      	b.n	8080cc6 <loop+0x362>
        System.reset();
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
 8080c7a:	f002 f802 	bl	8082c82 <_ZN9TimeClass3nowEv>
 8080c7e:	4604      	mov	r4, r0
 8080c80:	f002 fab6 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080c84:	2005      	movs	r0, #5
 8080c86:	f7ff fa25 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
 8080c8a:	1a20      	subs	r0, r4, r0
 8080c8c:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8080c90:	dd1c      	ble.n	8080ccc <loop+0x368>
 8080c92:	f000 fd23 	bl	80816dc <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8080c96:	b160      	cbz	r0, 8080cb2 <loop+0x34e>
 8080c98:	4b21      	ldr	r3, [pc, #132]	; (8080d20 <loop+0x3bc>)
 8080c9a:	2200      	movs	r2, #0
 8080c9c:	781b      	ldrb	r3, [r3, #0]
 8080c9e:	a802      	add	r0, sp, #8
 8080ca0:	f88d 2000 	strb.w	r2, [sp]
 8080ca4:	491f      	ldr	r1, [pc, #124]	; (8080d24 <loop+0x3c0>)
 8080ca6:	4a21      	ldr	r2, [pc, #132]	; (8080d2c <loop+0x3c8>)
 8080ca8:	f7ff fa18 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080cac:	a803      	add	r0, sp, #12
 8080cae:	f7ff fb4b 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080cb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080cb6:	f000 fde5 	bl	8081884 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080cba:	f002 fa99 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080cbe:	2100      	movs	r1, #0
 8080cc0:	2002      	movs	r0, #2
 8080cc2:	f7ff fa09 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
        System.reset();
 8080cc6:	f001 ff15 	bl	8082af4 <_ZN11SystemClass5resetEv>
 8080cca:	e01f      	b.n	8080d0c <loop+0x3a8>
 8080ccc:	f000 fd06 	bl	80816dc <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8080cd0:	b160      	cbz	r0, 8080cec <loop+0x388>
 8080cd2:	4b13      	ldr	r3, [pc, #76]	; (8080d20 <loop+0x3bc>)
 8080cd4:	2200      	movs	r2, #0
 8080cd6:	781b      	ldrb	r3, [r3, #0]
 8080cd8:	a802      	add	r0, sp, #8
 8080cda:	f88d 2000 	strb.w	r2, [sp]
 8080cde:	4911      	ldr	r1, [pc, #68]	; (8080d24 <loop+0x3c0>)
 8080ce0:	4a13      	ldr	r2, [pc, #76]	; (8080d30 <loop+0x3cc>)
 8080ce2:	f7ff f9fb 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080ce6:	a803      	add	r0, sp, #12
 8080ce8:	f7ff fb2e 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080cf0:	f000 fdc8 	bl	8081884 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080cf4:	f002 fa7c 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080cf8:	2100      	movs	r1, #0
 8080cfa:	2002      	movs	r0, #2
 8080cfc:	f7ff f9ec 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
        fullModemReset();                                             // Full Modem reset and reboots
 8080d00:	f7ff faf6 	bl	80802f0 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8080d04:	e002      	b.n	8080d0c <loop+0x3a8>
{

  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8080d06:	2306      	movs	r3, #6
 8080d08:	7023      	strb	r3, [r4, #0]
 8080d0a:	e651      	b.n	80809b0 <loop+0x4c>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
 8080d0c:	b004      	add	sp, #16
 8080d0e:	bd70      	pop	{r4, r5, r6, pc}
 8080d10:	2000020f 	.word	0x2000020f
 8080d14:	2000018d 	.word	0x2000018d
 8080d18:	20000218 	.word	0x20000218
 8080d1c:	200001f0 	.word	0x200001f0
 8080d20:	20000168 	.word	0x20000168
 8080d24:	08085117 	.word	0x08085117
 8080d28:	08085271 	.word	0x08085271
 8080d2c:	08085285 	.word	0x08085285
 8080d30:	0808529f 	.word	0x0808529f

08080d34 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080d34:	2300      	movs	r3, #0
 8080d36:	2204      	movs	r2, #4
 8080d38:	f000 bca8 	b.w	808168c <spark_variable>

08080d3c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080d3c:	4602      	mov	r2, r0
 8080d3e:	4801      	ldr	r0, [pc, #4]	; (8080d44 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080d40:	f000 bf4b 	b.w	8081bda <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080d44:	08081baf 	.word	0x08081baf

08080d48 <setup>:
float temperatureInC = 0;                           // Temp / Humidity Sensor variables
float relativeHumidity = 0;
int soilMoisture = 0;                               // Soil sensor variables

void setup()                                                      // Note: Disconnected Setup()
{
 8080d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080d4c:	b0b8      	sub	sp, #224	; 0xe0
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080d4e:	aa08      	add	r2, sp, #32
 8080d50:	4616      	mov	r6, r2
 8080d52:	4b93      	ldr	r3, [pc, #588]	; (8080fa0 <setup+0x258>)
 8080d54:	f103 0510 	add.w	r5, r3, #16
 8080d58:	4614      	mov	r4, r2
 8080d5a:	6818      	ldr	r0, [r3, #0]
 8080d5c:	6859      	ldr	r1, [r3, #4]
 8080d5e:	3308      	adds	r3, #8
 8080d60:	c403      	stmia	r4!, {r0, r1}
 8080d62:	42ab      	cmp	r3, r5
 8080d64:	4622      	mov	r2, r4
 8080d66:	d1f7      	bne.n	8080d58 <setup+0x10>
 8080d68:	8819      	ldrh	r1, [r3, #0]
 8080d6a:	789b      	ldrb	r3, [r3, #2]
 8080d6c:	222d      	movs	r2, #45	; 0x2d
 8080d6e:	70a3      	strb	r3, [r4, #2]
 8080d70:	8021      	strh	r1, [r4, #0]
 8080d72:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8080d76:	2100      	movs	r1, #0
  state = IDLE_STATE;
 8080d78:	4f8a      	ldr	r7, [pc, #552]	; (8080fa4 <setup+0x25c>)
float relativeHumidity = 0;
int soilMoisture = 0;                               // Soil sensor variables

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080d7a:	f003 fc8a 	bl	8084692 <memset>
  state = IDLE_STATE;
 8080d7e:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080d80:	2101      	movs	r1, #1
 8080d82:	2007      	movs	r0, #7
int soilMoisture = 0;                               // Soil sensor variables

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 8080d84:	703d      	strb	r5, [r7, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080d86:	f002 f9df 	bl	8083148 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080d8a:	2100      	movs	r1, #0
 8080d8c:	2005      	movs	r0, #5
 8080d8e:	f002 f9db 	bl	8083148 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080d92:	a804      	add	r0, sp, #16
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080d94:	2400      	movs	r4, #0
 8080d96:	f000 fca9 	bl	80816ec <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080d9a:	2300      	movs	r3, #0
 8080d9c:	227d      	movs	r2, #125	; 0x7d
 8080d9e:	a918      	add	r1, sp, #96	; 0x60
 8080da0:	a804      	add	r0, sp, #16
 8080da2:	f001 fe8a 	bl	8082aba <_ZNK6String8getBytesEPhjj>
 8080da6:	4623      	mov	r3, r4
 8080da8:	4622      	mov	r2, r4
 8080daa:	497f      	ldr	r1, [pc, #508]	; (8080fa8 <setup+0x260>)
 8080dac:	9401      	str	r4, [sp, #4]
 8080dae:	9400      	str	r4, [sp, #0]
 8080db0:	a818      	add	r0, sp, #96	; 0x60
 8080db2:	f000 fcab 	bl	808170c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 8080db6:	497d      	ldr	r1, [pc, #500]	; (8080fac <setup+0x264>)
 8080db8:	487d      	ldr	r0, [pc, #500]	; (8080fb0 <setup+0x268>)
 8080dba:	f7ff ffbb 	bl	8080d34 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080dbe:	4623      	mov	r3, r4
 8080dc0:	462a      	mov	r2, r5
 8080dc2:	497c      	ldr	r1, [pc, #496]	; (8080fb4 <setup+0x26c>)
 8080dc4:	487c      	ldr	r0, [pc, #496]	; (8080fb8 <setup+0x270>)
 8080dc6:	f000 fc61 	bl	808168c <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
 8080dca:	497c      	ldr	r1, [pc, #496]	; (8080fbc <setup+0x274>)
 8080dcc:	487c      	ldr	r0, [pc, #496]	; (8080fc0 <setup+0x278>)
 8080dce:	f7ff ffb1 	bl	8080d34 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("stateOfChg", batteryString);
 8080dd2:	497c      	ldr	r1, [pc, #496]	; (8080fc4 <setup+0x27c>)
 8080dd4:	487c      	ldr	r0, [pc, #496]	; (8080fc8 <setup+0x280>)
 8080dd6:	f7ff ffad 	bl	8080d34 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("PowerContext",powerContext);
 8080dda:	497c      	ldr	r1, [pc, #496]	; (8080fcc <setup+0x284>)
 8080ddc:	487c      	ldr	r0, [pc, #496]	; (8080fd0 <setup+0x288>)
 8080dde:	f7ff ffa9 	bl	8080d34 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
 8080de2:	4623      	mov	r3, r4
 8080de4:	2201      	movs	r2, #1
 8080de6:	497b      	ldr	r1, [pc, #492]	; (8080fd4 <setup+0x28c>)
 8080de8:	487b      	ldr	r0, [pc, #492]	; (8080fd8 <setup+0x290>)
 8080dea:	f000 fc4f 	bl	808168c <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8080dee:	497b      	ldr	r1, [pc, #492]	; (8080fdc <setup+0x294>)
 8080df0:	487b      	ldr	r0, [pc, #492]	; (8080fe0 <setup+0x298>)
 8080df2:	f7ff ff9f 	bl	8080d34 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
 8080df6:	497b      	ldr	r1, [pc, #492]	; (8080fe4 <setup+0x29c>)
 8080df8:	487b      	ldr	r0, [pc, #492]	; (8080fe8 <setup+0x2a0>)
 8080dfa:	f7ff ff9b 	bl	8080d34 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
 8080dfe:	4623      	mov	r3, r4
 8080e00:	462a      	mov	r2, r5
 8080e02:	497a      	ldr	r1, [pc, #488]	; (8080fec <setup+0x2a4>)
 8080e04:	487a      	ldr	r0, [pc, #488]	; (8080ff0 <setup+0x2a8>)
 8080e06:	f000 fc41 	bl	808168c <spark_variable>
  Particle.variable("SoilMoisture", soilMoisture);

  
  Particle.function("Measure-Now",measureNow);
 8080e0a:	497a      	ldr	r1, [pc, #488]	; (8080ff4 <setup+0x2ac>)
 8080e0c:	487a      	ldr	r0, [pc, #488]	; (8080ff8 <setup+0x2b0>)
 8080e0e:	f7ff ff95 	bl	8080d3c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8080e12:	497a      	ldr	r1, [pc, #488]	; (8080ffc <setup+0x2b4>)
 8080e14:	487a      	ldr	r0, [pc, #488]	; (8081000 <setup+0x2b8>)
 8080e16:	f7ff ff91 	bl	8080d3c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8080e1a:	497a      	ldr	r1, [pc, #488]	; (8081004 <setup+0x2bc>)
 8080e1c:	487a      	ldr	r0, [pc, #488]	; (8081008 <setup+0x2c0>)
 8080e1e:	f7ff ff8d 	bl	8080d3c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080e22:	497a      	ldr	r1, [pc, #488]	; (808100c <setup+0x2c4>)
 8080e24:	487a      	ldr	r0, [pc, #488]	; (8081010 <setup+0x2c8>)
 8080e26:	f7ff ff89 	bl	8080d3c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8080e2a:	497a      	ldr	r1, [pc, #488]	; (8081014 <setup+0x2cc>)
 8080e2c:	487a      	ldr	r0, [pc, #488]	; (8081018 <setup+0x2d0>)
 8080e2e:	f7ff ff85 	bl	8080d3c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>


  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8080e32:	f002 f9dd 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080e36:	4620      	mov	r0, r4
 8080e38:	f7ff f94c 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
 8080e3c:	2801      	cmp	r0, #1
 8080e3e:	d10b      	bne.n	8080e58 <setup+0x110>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  if (! sht31.begin(0x44)) {   // Set to 0x45 for alternate i2c addr
 8080e40:	2144      	movs	r1, #68	; 0x44
 8080e42:	4876      	ldr	r0, [pc, #472]	; (808101c <setup+0x2d4>)
 8080e44:	f000 f97f 	bl	8081146 <_ZN14Adafruit_SHT315beginEh>
 8080e48:	b9d8      	cbnz	r0, 8080e82 <setup+0x13a>
    snprintf(StartupMessage,sizeof(StartupMessage),"Could not find SHT31");
 8080e4a:	4975      	ldr	r1, [pc, #468]	; (8081020 <setup+0x2d8>)
 8080e4c:	4630      	mov	r0, r6
 8080e4e:	f003 fc5b 	bl	8084708 <strcpy>
    state = ERROR_STATE;
 8080e52:	2301      	movs	r3, #1
 8080e54:	703b      	strb	r3, [r7, #0]
 8080e56:	e014      	b.n	8080e82 <setup+0x13a>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);


  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8080e58:	f002 f9ca 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080e5c:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080e5e:	2204      	movs	r2, #4
 8080e60:	a902      	add	r1, sp, #8
 8080e62:	4620      	mov	r0, r4
 8080e64:	9502      	str	r5, [sp, #8]
 8080e66:	f000 fa85 	bl	8081374 <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080e6a:	f002 f9c1 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080e6e:	4628      	mov	r0, r5
 8080e70:	2204      	movs	r2, #4
 8080e72:	a902      	add	r1, sp, #8
  Particle.function("SetTimeZone",setTimeZone);


  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080e74:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080e76:	9402      	str	r4, [sp, #8]
 8080e78:	f000 fa7c 	bl	8081374 <HAL_EEPROM_Put>
  Particle.function("SetTimeZone",setTimeZone);


  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080e7c:	2d0a      	cmp	r5, #10
 8080e7e:	d1f4      	bne.n	8080e6a <setup+0x122>
 8080e80:	e7de      	b.n	8080e40 <setup+0xf8>
  if (! sht31.begin(0x44)) {   // Set to 0x45 for alternate i2c addr
    snprintf(StartupMessage,sizeof(StartupMessage),"Could not find SHT31");
    state = ERROR_STATE;
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
 8080e82:	f002 f9b5 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080e86:	2002      	movs	r0, #2
 8080e88:	f7ff f924 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
 8080e8c:	4c49      	ldr	r4, [pc, #292]	; (8080fb4 <setup+0x26c>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080e8e:	2200      	movs	r2, #0
 8080e90:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080e92:	4611      	mov	r1, r2
 8080e94:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080e96:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080e98:	f000 fa34 	bl	8081304 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080e9c:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080e9e:	2b14      	cmp	r3, #20
 8080ea0:	d108      	bne.n	8080eb4 <setup+0x16c>
  {
    resetCount++;
 8080ea2:	6823      	ldr	r3, [r4, #0]
 8080ea4:	3301      	adds	r3, #1
 8080ea6:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
 8080ea8:	f002 f9a2 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080eac:	7821      	ldrb	r1, [r4, #0]
 8080eae:	2002      	movs	r0, #2
 8080eb0:	f7ff f912 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080eb4:	6823      	ldr	r3, [r4, #0]
 8080eb6:	2b05      	cmp	r3, #5
 8080eb8:	dd07      	ble.n	8080eca <setup+0x182>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080eba:	f002 f999 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080ebe:	2104      	movs	r1, #4
 8080ec0:	2002      	movs	r0, #2
 8080ec2:	f7ff f909 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080ec6:	f7ff fa13 	bl	80802f0 <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
 8080eca:	f002 f991 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080ece:	2003      	movs	r0, #3
 8080ed0:	f7ff f900 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8080ed4:	f100 030c 	add.w	r3, r0, #12
 8080ed8:	b2db      	uxtb	r3, r3
 8080eda:	2b18      	cmp	r3, #24
 8080edc:	d803      	bhi.n	8080ee6 <setup+0x19e>
 8080ede:	b240      	sxtb	r0, r0
 8080ee0:	f003 f846 	bl	8083f70 <__aeabi_i2f>
 8080ee4:	e000      	b.n	8080ee8 <setup+0x1a0>
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
 8080ee6:	2000      	movs	r0, #0
 8080ee8:	f001 fe6c 	bl	8082bc4 <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080eec:	f002 f980 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080ef0:	2004      	movs	r0, #4
 8080ef2:	f7ff f8ef 	bl	80800d4 <_ZN11EEPROMClass4readEi.isra.15>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080ef6:	4c37      	ldr	r4, [pc, #220]	; (8080fd4 <setup+0x28c>)
 8080ef8:	f000 0301 	and.w	r3, r0, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080efc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8081044 <setup+0x2fc>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080f00:	7023      	strb	r3, [r4, #0]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080f02:	4d48      	ldr	r5, [pc, #288]	; (8081024 <setup+0x2dc>)
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080f04:	4b48      	ldr	r3, [pc, #288]	; (8081028 <setup+0x2e0>)
 8080f06:	f3c0 0280 	ubfx	r2, r0, #2, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080f0a:	f888 0000 	strb.w	r0, [r8]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080f0e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080f12:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080f14:	7028      	strb	r0, [r5, #0]
                                            
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 8080f16:	f7ff f98b 	bl	8080230 <_Z9PMICresetv>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8080f1a:	f7ff faef 	bl	80804fc <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8080f1e:	2005      	movs	r0, #5
 8080f20:	f002 f93c 	bl	808319c <digitalRead>
 8080f24:	b968      	cbnz	r0, 8080f42 <setup+0x1fa>
    lowPowerMode = false;                                               // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080f26:	f898 3000 	ldrb.w	r3, [r8]
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                               // Press the user switch while resetting the device
 8080f2a:	7020      	strb	r0, [r4, #0]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080f2c:	f023 0301 	bic.w	r3, r3, #1
 8080f30:	f888 3000 	strb.w	r3, [r8]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8080f34:	f002 f95c 	bl	80831f0 <_Z21__fetch_global_EEPROMv>
 8080f38:	2104      	movs	r1, #4
 8080f3a:	f898 0000 	ldrb.w	r0, [r8]
 8080f3e:	f7ff f8cb 	bl	80800d8 <_ZN11EEPROMClass5writeEih.isra.16>
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
 8080f42:	4b3a      	ldr	r3, [pc, #232]	; (808102c <setup+0x2e4>)
 8080f44:	681a      	ldr	r2, [r3, #0]
 8080f46:	4b3a      	ldr	r3, [pc, #232]	; (8081030 <setup+0x2e8>)
 8080f48:	681b      	ldr	r3, [r3, #0]
 8080f4a:	429a      	cmp	r2, r3
 8080f4c:	dc02      	bgt.n	8080f54 <setup+0x20c>
 8080f4e:	2307      	movs	r3, #7
 8080f50:	703b      	strb	r3, [r7, #0]
 8080f52:	e008      	b.n	8080f66 <setup+0x21e>
  else if(!connectToParticle()) {
 8080f54:	f7ff f8fc 	bl	8080150 <_Z17connectToParticlev>
 8080f58:	b928      	cbnz	r0, 8080f66 <setup+0x21e>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080f5a:	2301      	movs	r3, #1
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080f5c:	4935      	ldr	r1, [pc, #212]	; (8081034 <setup+0x2ec>)
 8080f5e:	4630      	mov	r0, r6
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080f60:	703b      	strb	r3, [r7, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080f62:	f003 fbd1 	bl	8084708 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080f66:	f000 fbb9 	bl	80816dc <spark_cloud_flag_connected>
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8080f6a:	b108      	cbz	r0, 8080f70 <setup+0x228>
 8080f6c:	782b      	ldrb	r3, [r5, #0]
 8080f6e:	b94b      	cbnz	r3, 8080f84 <setup+0x23c>
 8080f70:	f000 f9d8 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080f74:	4b30      	ldr	r3, [pc, #192]	; (8081038 <setup+0x2f0>)
 8080f76:	6018      	str	r0, [r3, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8080f78:	a804      	add	r0, sp, #16
 8080f7a:	f001 fd18 	bl	80829ae <_ZN6StringD1Ev>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}
 8080f7e:	b038      	add	sp, #224	; 0xe0
 8080f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080f84:	4b2d      	ldr	r3, [pc, #180]	; (808103c <setup+0x2f4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080f86:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080f88:	781b      	ldrb	r3, [r3, #0]
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8080f8a:	a802      	add	r0, sp, #8
 8080f8c:	f88d 2000 	strb.w	r2, [sp]
 8080f90:	492b      	ldr	r1, [pc, #172]	; (8081040 <setup+0x2f8>)
 8080f92:	4632      	mov	r2, r6
 8080f94:	f7ff f8a2 	bl	80800dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41.constprop.47>
 8080f98:	a803      	add	r0, sp, #12
 8080f9a:	f7ff f9d5 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f9e:	e7e7      	b.n	8080f70 <setup+0x228>
 8080fa0:	08085014 	.word	0x08085014
 8080fa4:	2000018e 	.word	0x2000018e
 8080fa8:	08080429 	.word	0x08080429
 8080fac:	200001b0 	.word	0x200001b0
 8080fb0:	080852be 	.word	0x080852be
 8080fb4:	200001f0 	.word	0x200001f0
 8080fb8:	080852c5 	.word	0x080852c5
 8080fbc:	080853ba 	.word	0x080853ba
 8080fc0:	080852d0 	.word	0x080852d0
 8080fc4:	2000022d 	.word	0x2000022d
 8080fc8:	080852d8 	.word	0x080852d8
 8080fcc:	20000169 	.word	0x20000169
 8080fd0:	080852e3 	.word	0x080852e3
 8080fd4:	2000020e 	.word	0x2000020e
 8080fd8:	080852f0 	.word	0x080852f0
 8080fdc:	20000150 	.word	0x20000150
 8080fe0:	080852fd 	.word	0x080852fd
 8080fe4:	2000021c 	.word	0x2000021c
 8080fe8:	08085309 	.word	0x08085309
 8080fec:	200001f4 	.word	0x200001f4
 8080ff0:	08085312 	.word	0x08085312
 8080ff4:	080800b9 	.word	0x080800b9
 8080ff8:	0808531f 	.word	0x0808531f
 8080ffc:	08080829 	.word	0x08080829
 8081000:	0808532b 	.word	0x0808532b
 8081004:	0808061d 	.word	0x0808061d
 8081008:	08085338 	.word	0x08085338
 808100c:	080806d1 	.word	0x080806d1
 8081010:	08085343 	.word	0x08085343
 8081014:	0808077d 	.word	0x0808077d
 8081018:	08085350 	.word	0x08085350
 808101c:	2000019c 	.word	0x2000019c
 8081020:	0808535c 	.word	0x0808535c
 8081024:	2000020f 	.word	0x2000020f
 8081028:	2000022c 	.word	0x2000022c
 808102c:	200001a8 	.word	0x200001a8
 8081030:	20000160 	.word	0x20000160
 8081034:	08085371 	.word	0x08085371
 8081038:	20000194 	.word	0x20000194
 808103c:	20000168 	.word	0x20000168
 8081040:	08085383 	.word	0x08085383
 8081044:	2000023d 	.word	0x2000023d

08081048 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081048:	4b21      	ldr	r3, [pc, #132]	; (80810d0 <_GLOBAL__sub_I___appProductID+0x88>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 808104a:	b570      	push	{r4, r5, r6, lr}
 808104c:	2400      	movs	r4, #0
 808104e:	601c      	str	r4, [r3, #0]
 8081050:	4b20      	ldr	r3, [pc, #128]	; (80810d4 <_GLOBAL__sub_I___appProductID+0x8c>)
 8081052:	2501      	movs	r5, #1
 8081054:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8081056:	f000 f9a5 	bl	80813a4 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 808105a:	f002 f839 	bl	80830d0 <spark_protocol_instance>
 808105e:	4623      	mov	r3, r4
 8081060:	4622      	mov	r2, r4
 8081062:	f642 11d5 	movw	r1, #10709	; 0x29d5
 8081066:	f002 f83b 	bl	80830e0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 808106a:	f002 f831 	bl	80830d0 <spark_protocol_instance>
 808106e:	4629      	mov	r1, r5
 8081070:	4623      	mov	r3, r4
 8081072:	4622      	mov	r2, r4
 8081074:	f002 f83c 	bl	80830f0 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808107c:	4b16      	ldr	r3, [pc, #88]	; (80810d8 <_GLOBAL__sub_I___appProductID+0x90>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808107e:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081080:	701c      	strb	r4, [r3, #0]
 8081082:	805c      	strh	r4, [r3, #2]
 8081084:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081086:	f000 fab5 	bl	80815f4 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 808108a:	4621      	mov	r1, r4
 808108c:	4628      	mov	r0, r5
 808108e:	f000 fac9 	bl	8081624 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081092:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081094:	4d11      	ldr	r5, [pc, #68]	; (80810dc <_GLOBAL__sub_I___appProductID+0x94>)
 8081096:	2004      	movs	r0, #4
 8081098:	f000 f924 	bl	80812e4 <HAL_Feature_Set>
 808109c:	4e10      	ldr	r6, [pc, #64]	; (80810e0 <_GLOBAL__sub_I___appProductID+0x98>)
 808109e:	4621      	mov	r1, r4
 80810a0:	4628      	mov	r0, r5
 80810a2:	f001 f84f 	bl	8082144 <_ZN9FuelGaugeC1Eb>
 80810a6:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 80810a8:	4d0e      	ldr	r5, [pc, #56]	; (80810e4 <_GLOBAL__sub_I___appProductID+0x9c>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 80810aa:	4632      	mov	r2, r6
 80810ac:	490e      	ldr	r1, [pc, #56]	; (80810e8 <_GLOBAL__sub_I___appProductID+0xa0>)
 80810ae:	f002 f939 	bl	8083324 <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 80810b2:	4621      	mov	r1, r4
 80810b4:	4628      	mov	r0, r5
 80810b6:	f001 f9f4 	bl	80824a2 <_ZN4PMICC1Eb>
 80810ba:	4632      	mov	r2, r6
 80810bc:	4628      	mov	r0, r5
 80810be:	490b      	ldr	r1, [pc, #44]	; (80810ec <_GLOBAL__sub_I___appProductID+0xa4>)
 80810c0:	f002 f930 	bl	8083324 <__aeabi_atexit>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 80810c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
Adafruit_SHT31 sht31 = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
 80810c8:	4809      	ldr	r0, [pc, #36]	; (80810f0 <_GLOBAL__sub_I___appProductID+0xa8>)
 80810ca:	f000 b819 	b.w	8081100 <_ZN14Adafruit_SHT31C1Ev>
 80810ce:	bf00      	nop
 80810d0:	20000204 	.word	0x20000204
 80810d4:	20000168 	.word	0x20000168
 80810d8:	20000208 	.word	0x20000208
 80810dc:	20000184 	.word	0x20000184
 80810e0:	2000014c 	.word	0x2000014c
 80810e4:	2000018f 	.word	0x2000018f
 80810e8:	08082163 	.word	0x08082163
 80810ec:	080824c1 	.word	0x080824c1
 80810f0:	2000019c 	.word	0x2000019c

080810f4 <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 80810f4:	f000 b956 	b.w	80813a4 <HAL_Pin_Map>

080810f8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80810f8:	6803      	ldr	r3, [r0, #0]
 80810fa:	b2c9      	uxtb	r1, r1
 80810fc:	689b      	ldr	r3, [r3, #8]
 80810fe:	4718      	bx	r3

08081100 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
 8081100:	4770      	bx	lr

08081102 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
 8081102:	b538      	push	{r3, r4, r5, lr}
 8081104:	4605      	mov	r5, r0
 8081106:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
 8081108:	f002 f886 	bl	8083218 <_Z19__fetch_global_Wirev>
 808110c:	7829      	ldrb	r1, [r5, #0]
 808110e:	f001 f8d2 	bl	80822b6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
 8081112:	f002 f881 	bl	8083218 <_Z19__fetch_global_Wirev>
 8081116:	0a21      	lsrs	r1, r4, #8
 8081118:	f7ff ffee 	bl	80810f8 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
 808111c:	f002 f87c 	bl	8083218 <_Z19__fetch_global_Wirev>
 8081120:	b2e1      	uxtb	r1, r4
 8081122:	f7ff ffe9 	bl	80810f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
 8081126:	f002 f877 	bl	8083218 <_Z19__fetch_global_Wirev>
}
 808112a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
 808112e:	f001 b8cd 	b.w	80822cc <_ZN7TwoWire15endTransmissionEv>

08081132 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
 8081132:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 8081134:	f243 01a2 	movw	r1, #12450	; 0x30a2
 8081138:	f7ff ffe3 	bl	8081102 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
}
 808113c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
 8081140:	200a      	movs	r0, #10
 8081142:	f000 bb9f 	b.w	8081884 <delay>

08081146 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
 8081146:	b538      	push	{r3, r4, r5, lr}
 8081148:	460d      	mov	r5, r1
 808114a:	4604      	mov	r4, r0
  Wire.begin();
 808114c:	f002 f864 	bl	8083218 <_Z19__fetch_global_Wirev>
 8081150:	f001 f89a 	bl	8082288 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
 8081154:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
 8081156:	7025      	strb	r5, [r4, #0]
  reset();
 8081158:	f7ff ffeb 	bl	8081132 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
 808115c:	2001      	movs	r0, #1
 808115e:	bd38      	pop	{r3, r4, r5, pc}

08081160 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
 8081160:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
 8081162:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
 8081164:	4291      	cmp	r1, r2
 8081166:	d00e      	beq.n	8081186 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
 8081168:	f811 3b01 	ldrb.w	r3, [r1], #1
 808116c:	4058      	eors	r0, r3
 808116e:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 8081170:	f010 0f80 	tst.w	r0, #128	; 0x80
 8081174:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8081178:	bf18      	it	ne
 808117a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 808117e:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 8081180:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 8081182:	d1f5      	bne.n	8081170 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
 8081184:	e7ee      	b.n	8081164 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
 8081186:	4770      	bx	lr

08081188 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
 8081188:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808118a:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
 808118c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8081190:	f7ff ffb7 	bl	8081102 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
 8081194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081198:	f000 fb74 	bl	8081884 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
 808119c:	f002 f83c 	bl	8083218 <_Z19__fetch_global_Wirev>
 80811a0:	2206      	movs	r2, #6
 80811a2:	7821      	ldrb	r1, [r4, #0]
 80811a4:	f001 f87f 	bl	80822a6 <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
 80811a8:	f002 f836 	bl	8083218 <_Z19__fetch_global_Wirev>
 80811ac:	6803      	ldr	r3, [r0, #0]
 80811ae:	691b      	ldr	r3, [r3, #16]
 80811b0:	4798      	blx	r3
 80811b2:	2806      	cmp	r0, #6
 80811b4:	d14a      	bne.n	808124c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
 80811b6:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
 80811b8:	f002 f82e 	bl	8083218 <_Z19__fetch_global_Wirev>
 80811bc:	6803      	ldr	r3, [r0, #0]
 80811be:	695b      	ldr	r3, [r3, #20]
 80811c0:	4798      	blx	r3
 80811c2:	f80d 0005 	strb.w	r0, [sp, r5]
 80811c6:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
 80811c8:	2d06      	cmp	r5, #6
 80811ca:	d1f5      	bne.n	80811b8 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
 80811cc:	2202      	movs	r2, #2
 80811ce:	4669      	mov	r1, sp
 80811d0:	4620      	mov	r0, r4
 80811d2:	f7ff ffc5 	bl	8081160 <_ZN14Adafruit_SHT314crc8EPKhi>
 80811d6:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80811da:	4285      	cmp	r5, r0
 80811dc:	d136      	bne.n	808124c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
 80811de:	2202      	movs	r2, #2
 80811e0:	f10d 0103 	add.w	r1, sp, #3
 80811e4:	4620      	mov	r0, r4
 80811e6:	f7ff ffbb 	bl	8081160 <_ZN14Adafruit_SHT314crc8EPKhi>
 80811ea:	f89d 5005 	ldrb.w	r5, [sp, #5]
 80811ee:	4285      	cmp	r5, r0
 80811f0:	d12c      	bne.n	808124c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
 80811f2:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
 80811f6:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
 80811fa:	ba40      	rev16	r0, r0
 80811fc:	b280      	uxth	r0, r0
 80811fe:	f002 fb25 	bl	808384c <__aeabi_ui2d>
  stemp *= 175;
 8081202:	a315      	add	r3, pc, #84	; (adr r3, 8081258 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
 8081204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081208:	f002 fb96 	bl	8083938 <__aeabi_dmul>
  stemp /= 0xffff;
 808120c:	a314      	add	r3, pc, #80	; (adr r3, 8081260 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
 808120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081212:	f002 fcbb 	bl	8083b8c <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
 8081216:	2200      	movs	r2, #0
 8081218:	4b13      	ldr	r3, [pc, #76]	; (8081268 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
 808121a:	f002 f9d9 	bl	80835d0 <__aeabi_dsub>
 808121e:	f002 fd9d 	bl	8083d5c <__aeabi_d2f>

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];
 8081222:	f89d 5004 	ldrb.w	r5, [sp, #4]
 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
  stemp *= 175;
  stemp /= 0xffff;
  stemp = -45 + stemp;
  temp = stemp;
 8081226:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
 8081228:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 808122c:	f002 fb0e 	bl	808384c <__aeabi_ui2d>
  shum *= 100;
 8081230:	2200      	movs	r2, #0
 8081232:	4b0e      	ldr	r3, [pc, #56]	; (808126c <_ZN14Adafruit_SHT3111readTempHumEv+0xe4>)
 8081234:	f002 fb80 	bl	8083938 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
 8081238:	a309      	add	r3, pc, #36	; (adr r3, 8081260 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
 808123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808123e:	f002 fca5 	bl	8083b8c <__aeabi_ddiv>
 8081242:	f002 fd8b 	bl	8083d5c <__aeabi_d2f>
 8081246:	6060      	str	r0, [r4, #4]
  
  return true;
 8081248:	2001      	movs	r0, #1
 808124a:	e000      	b.n	808124e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
 808124c:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
 808124e:	b002      	add	sp, #8
 8081250:	bd70      	pop	{r4, r5, r6, pc}
 8081252:	bf00      	nop
 8081254:	f3af 8000 	nop.w
 8081258:	00000000 	.word	0x00000000
 808125c:	4065e000 	.word	0x4065e000
 8081260:	00000000 	.word	0x00000000
 8081264:	40efffe0 	.word	0x40efffe0
 8081268:	40468000 	.word	0x40468000
 808126c:	40590000 	.word	0x40590000

08081270 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
 8081270:	b510      	push	{r4, lr}
 8081272:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
 8081274:	f7ff ff88 	bl	8081188 <_ZN14Adafruit_SHT3111readTempHumEv>
 8081278:	b108      	cbz	r0, 808127e <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>

  return temp;
 808127a:	68a0      	ldr	r0, [r4, #8]
 808127c:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
 808127e:	4801      	ldr	r0, [pc, #4]	; (8081284 <_ZN14Adafruit_SHT3115readTemperatureEv+0x14>)

  return temp;
}
 8081280:	bd10      	pop	{r4, pc}
 8081282:	bf00      	nop
 8081284:	7fc00000 	.word	0x7fc00000

08081288 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
 8081288:	b510      	push	{r4, lr}
 808128a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
 808128c:	f7ff ff7c 	bl	8081188 <_ZN14Adafruit_SHT3111readTempHumEv>
 8081290:	b108      	cbz	r0, 8081296 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>

  return humidity;
 8081292:	6860      	ldr	r0, [r4, #4]
 8081294:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
 8081296:	4801      	ldr	r0, [pc, #4]	; (808129c <_ZN14Adafruit_SHT3112readHumidityEv+0x14>)

  return humidity;
}
 8081298:	bd10      	pop	{r4, pc}
 808129a:	bf00      	nop
 808129c:	7fc00000 	.word	0x7fc00000

080812a0 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
 80812a0:	f000 b880 	b.w	80813a4 <HAL_Pin_Map>

080812a4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80812a4:	b508      	push	{r3, lr}
 80812a6:	4b02      	ldr	r3, [pc, #8]	; (80812b0 <inet_gethostbyname+0xc>)
 80812a8:	681b      	ldr	r3, [r3, #0]
 80812aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80812ac:	9301      	str	r3, [sp, #4]
 80812ae:	bd08      	pop	{r3, pc}
 80812b0:	08060020 	.word	0x08060020

080812b4 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 80812b4:	b508      	push	{r3, lr}
 80812b6:	4b02      	ldr	r3, [pc, #8]	; (80812c0 <cellular_signal+0xc>)
 80812b8:	681b      	ldr	r3, [r3, #0]
 80812ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80812bc:	9301      	str	r3, [sp, #4]
 80812be:	bd08      	pop	{r3, pc}
 80812c0:	08060020 	.word	0x08060020

080812c4 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 80812c4:	b508      	push	{r3, lr}
 80812c6:	4b02      	ldr	r3, [pc, #8]	; (80812d0 <cellular_command+0xc>)
 80812c8:	681b      	ldr	r3, [r3, #0]
 80812ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80812cc:	9301      	str	r3, [sp, #4]
 80812ce:	bd08      	pop	{r3, pc}
 80812d0:	08060020 	.word	0x08060020

080812d4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80812d4:	b508      	push	{r3, lr}
 80812d6:	4b02      	ldr	r3, [pc, #8]	; (80812e0 <os_mutex_create+0xc>)
 80812d8:	681b      	ldr	r3, [r3, #0]
 80812da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80812dc:	9301      	str	r3, [sp, #4]
 80812de:	bd08      	pop	{r3, pc}
 80812e0:	080401d0 	.word	0x080401d0

080812e4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80812e4:	b508      	push	{r3, lr}
 80812e6:	4b02      	ldr	r3, [pc, #8]	; (80812f0 <HAL_Feature_Set+0xc>)
 80812e8:	681b      	ldr	r3, [r3, #0]
 80812ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80812ec:	9301      	str	r3, [sp, #4]
 80812ee:	bd08      	pop	{r3, pc}
 80812f0:	080401b8 	.word	0x080401b8

080812f4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80812f4:	b508      	push	{r3, lr}
 80812f6:	4b02      	ldr	r3, [pc, #8]	; (8081300 <HAL_Core_System_Reset_Ex+0xc>)
 80812f8:	681b      	ldr	r3, [r3, #0]
 80812fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80812fc:	9301      	str	r3, [sp, #4]
 80812fe:	bd08      	pop	{r3, pc}
 8081300:	080401b8 	.word	0x080401b8

08081304 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081304:	b508      	push	{r3, lr}
 8081306:	4b02      	ldr	r3, [pc, #8]	; (8081310 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081308:	681b      	ldr	r3, [r3, #0]
 808130a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808130c:	9301      	str	r3, [sp, #4]
 808130e:	bd08      	pop	{r3, pc}
 8081310:	080401b8 	.word	0x080401b8

08081314 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081314:	b508      	push	{r3, lr}
 8081316:	4b02      	ldr	r3, [pc, #8]	; (8081320 <HAL_RNG_GetRandomNumber+0xc>)
 8081318:	681b      	ldr	r3, [r3, #0]
 808131a:	685b      	ldr	r3, [r3, #4]
 808131c:	9301      	str	r3, [sp, #4]
 808131e:	bd08      	pop	{r3, pc}
 8081320:	0804019c 	.word	0x0804019c

08081324 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081324:	b508      	push	{r3, lr}
 8081326:	4b02      	ldr	r3, [pc, #8]	; (8081330 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081328:	681b      	ldr	r3, [r3, #0]
 808132a:	695b      	ldr	r3, [r3, #20]
 808132c:	9301      	str	r3, [sp, #4]
 808132e:	bd08      	pop	{r3, pc}
 8081330:	0804019c 	.word	0x0804019c

08081334 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081334:	b508      	push	{r3, lr}
 8081336:	4b02      	ldr	r3, [pc, #8]	; (8081340 <HAL_RTC_Get_UnixTime+0xc>)
 8081338:	681b      	ldr	r3, [r3, #0]
 808133a:	69db      	ldr	r3, [r3, #28]
 808133c:	9301      	str	r3, [sp, #4]
 808133e:	bd08      	pop	{r3, pc}
 8081340:	0804019c 	.word	0x0804019c

08081344 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8081344:	b508      	push	{r3, lr}
 8081346:	4b02      	ldr	r3, [pc, #8]	; (8081350 <HAL_EEPROM_Init+0xc>)
 8081348:	681b      	ldr	r3, [r3, #0]
 808134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808134c:	9301      	str	r3, [sp, #4]
 808134e:	bd08      	pop	{r3, pc}
 8081350:	0804019c 	.word	0x0804019c

08081354 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 8081354:	b508      	push	{r3, lr}
 8081356:	4b02      	ldr	r3, [pc, #8]	; (8081360 <HAL_EEPROM_Read+0xc>)
 8081358:	681b      	ldr	r3, [r3, #0]
 808135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808135c:	9301      	str	r3, [sp, #4]
 808135e:	bd08      	pop	{r3, pc}
 8081360:	0804019c 	.word	0x0804019c

08081364 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 8081364:	b508      	push	{r3, lr}
 8081366:	4b02      	ldr	r3, [pc, #8]	; (8081370 <HAL_EEPROM_Write+0xc>)
 8081368:	681b      	ldr	r3, [r3, #0]
 808136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808136c:	9301      	str	r3, [sp, #4]
 808136e:	bd08      	pop	{r3, pc}
 8081370:	0804019c 	.word	0x0804019c

08081374 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 8081374:	b508      	push	{r3, lr}
 8081376:	4b02      	ldr	r3, [pc, #8]	; (8081380 <HAL_EEPROM_Put+0xc>)
 8081378:	681b      	ldr	r3, [r3, #0]
 808137a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808137c:	9301      	str	r3, [sp, #4]
 808137e:	bd08      	pop	{r3, pc}
 8081380:	0804019c 	.word	0x0804019c

08081384 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081384:	b508      	push	{r3, lr}
 8081386:	4b02      	ldr	r3, [pc, #8]	; (8081390 <HAL_RTC_Time_Is_Valid+0xc>)
 8081388:	681b      	ldr	r3, [r3, #0]
 808138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808138c:	9301      	str	r3, [sp, #4]
 808138e:	bd08      	pop	{r3, pc}
 8081390:	0804019c 	.word	0x0804019c

08081394 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081394:	b508      	push	{r3, lr}
 8081396:	4b02      	ldr	r3, [pc, #8]	; (80813a0 <hal_timer_millis+0xc>)
 8081398:	681b      	ldr	r3, [r3, #0]
 808139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808139c:	9301      	str	r3, [sp, #4]
 808139e:	bd08      	pop	{r3, pc}
 80813a0:	0804019c 	.word	0x0804019c

080813a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80813a4:	b508      	push	{r3, lr}
 80813a6:	4b02      	ldr	r3, [pc, #8]	; (80813b0 <HAL_Pin_Map+0xc>)
 80813a8:	681b      	ldr	r3, [r3, #0]
 80813aa:	681b      	ldr	r3, [r3, #0]
 80813ac:	9301      	str	r3, [sp, #4]
 80813ae:	bd08      	pop	{r3, pc}
 80813b0:	080401b0 	.word	0x080401b0

080813b4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80813b4:	b508      	push	{r3, lr}
 80813b6:	4b02      	ldr	r3, [pc, #8]	; (80813c0 <HAL_Validate_Pin_Function+0xc>)
 80813b8:	681b      	ldr	r3, [r3, #0]
 80813ba:	685b      	ldr	r3, [r3, #4]
 80813bc:	9301      	str	r3, [sp, #4]
 80813be:	bd08      	pop	{r3, pc}
 80813c0:	080401b0 	.word	0x080401b0

080813c4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80813c4:	b508      	push	{r3, lr}
 80813c6:	4b02      	ldr	r3, [pc, #8]	; (80813d0 <HAL_Pin_Mode+0xc>)
 80813c8:	681b      	ldr	r3, [r3, #0]
 80813ca:	689b      	ldr	r3, [r3, #8]
 80813cc:	9301      	str	r3, [sp, #4]
 80813ce:	bd08      	pop	{r3, pc}
 80813d0:	080401b0 	.word	0x080401b0

080813d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80813d4:	b508      	push	{r3, lr}
 80813d6:	4b02      	ldr	r3, [pc, #8]	; (80813e0 <HAL_Get_Pin_Mode+0xc>)
 80813d8:	681b      	ldr	r3, [r3, #0]
 80813da:	68db      	ldr	r3, [r3, #12]
 80813dc:	9301      	str	r3, [sp, #4]
 80813de:	bd08      	pop	{r3, pc}
 80813e0:	080401b0 	.word	0x080401b0

080813e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80813e4:	b508      	push	{r3, lr}
 80813e6:	4b02      	ldr	r3, [pc, #8]	; (80813f0 <HAL_GPIO_Write+0xc>)
 80813e8:	681b      	ldr	r3, [r3, #0]
 80813ea:	691b      	ldr	r3, [r3, #16]
 80813ec:	9301      	str	r3, [sp, #4]
 80813ee:	bd08      	pop	{r3, pc}
 80813f0:	080401b0 	.word	0x080401b0

080813f4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80813f4:	b508      	push	{r3, lr}
 80813f6:	4b02      	ldr	r3, [pc, #8]	; (8081400 <HAL_GPIO_Read+0xc>)
 80813f8:	681b      	ldr	r3, [r3, #0]
 80813fa:	695b      	ldr	r3, [r3, #20]
 80813fc:	9301      	str	r3, [sp, #4]
 80813fe:	bd08      	pop	{r3, pc}
 8081400:	080401b0 	.word	0x080401b0

08081404 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8081404:	b508      	push	{r3, lr}
 8081406:	4b02      	ldr	r3, [pc, #8]	; (8081410 <HAL_ADC_Read+0xc>)
 8081408:	681b      	ldr	r3, [r3, #0]
 808140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808140c:	9301      	str	r3, [sp, #4]
 808140e:	bd08      	pop	{r3, pc}
 8081410:	080401b0 	.word	0x080401b0

08081414 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8081414:	b508      	push	{r3, lr}
 8081416:	4b02      	ldr	r3, [pc, #8]	; (8081420 <HAL_I2C_Begin+0xc>)
 8081418:	681b      	ldr	r3, [r3, #0]
 808141a:	68db      	ldr	r3, [r3, #12]
 808141c:	9301      	str	r3, [sp, #4]
 808141e:	bd08      	pop	{r3, pc}
 8081420:	080401ac 	.word	0x080401ac

08081424 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8081424:	b508      	push	{r3, lr}
 8081426:	4b02      	ldr	r3, [pc, #8]	; (8081430 <HAL_I2C_Request_Data+0xc>)
 8081428:	681b      	ldr	r3, [r3, #0]
 808142a:	695b      	ldr	r3, [r3, #20]
 808142c:	9301      	str	r3, [sp, #4]
 808142e:	bd08      	pop	{r3, pc}
 8081430:	080401ac 	.word	0x080401ac

08081434 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081434:	b508      	push	{r3, lr}
 8081436:	4b02      	ldr	r3, [pc, #8]	; (8081440 <HAL_I2C_Begin_Transmission+0xc>)
 8081438:	681b      	ldr	r3, [r3, #0]
 808143a:	699b      	ldr	r3, [r3, #24]
 808143c:	9301      	str	r3, [sp, #4]
 808143e:	bd08      	pop	{r3, pc}
 8081440:	080401ac 	.word	0x080401ac

08081444 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081444:	b508      	push	{r3, lr}
 8081446:	4b02      	ldr	r3, [pc, #8]	; (8081450 <HAL_I2C_End_Transmission+0xc>)
 8081448:	681b      	ldr	r3, [r3, #0]
 808144a:	69db      	ldr	r3, [r3, #28]
 808144c:	9301      	str	r3, [sp, #4]
 808144e:	bd08      	pop	{r3, pc}
 8081450:	080401ac 	.word	0x080401ac

08081454 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081454:	b508      	push	{r3, lr}
 8081456:	4b02      	ldr	r3, [pc, #8]	; (8081460 <HAL_I2C_Write_Data+0xc>)
 8081458:	681b      	ldr	r3, [r3, #0]
 808145a:	6a1b      	ldr	r3, [r3, #32]
 808145c:	9301      	str	r3, [sp, #4]
 808145e:	bd08      	pop	{r3, pc}
 8081460:	080401ac 	.word	0x080401ac

08081464 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081464:	b508      	push	{r3, lr}
 8081466:	4b02      	ldr	r3, [pc, #8]	; (8081470 <HAL_I2C_Available_Data+0xc>)
 8081468:	681b      	ldr	r3, [r3, #0]
 808146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808146c:	9301      	str	r3, [sp, #4]
 808146e:	bd08      	pop	{r3, pc}
 8081470:	080401ac 	.word	0x080401ac

08081474 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081474:	b508      	push	{r3, lr}
 8081476:	4b02      	ldr	r3, [pc, #8]	; (8081480 <HAL_I2C_Read_Data+0xc>)
 8081478:	681b      	ldr	r3, [r3, #0]
 808147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808147c:	9301      	str	r3, [sp, #4]
 808147e:	bd08      	pop	{r3, pc}
 8081480:	080401ac 	.word	0x080401ac

08081484 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081484:	b508      	push	{r3, lr}
 8081486:	4b02      	ldr	r3, [pc, #8]	; (8081490 <HAL_I2C_Peek_Data+0xc>)
 8081488:	681b      	ldr	r3, [r3, #0]
 808148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808148c:	9301      	str	r3, [sp, #4]
 808148e:	bd08      	pop	{r3, pc}
 8081490:	080401ac 	.word	0x080401ac

08081494 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081494:	b508      	push	{r3, lr}
 8081496:	4b02      	ldr	r3, [pc, #8]	; (80814a0 <HAL_I2C_Flush_Data+0xc>)
 8081498:	681b      	ldr	r3, [r3, #0]
 808149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808149c:	9301      	str	r3, [sp, #4]
 808149e:	bd08      	pop	{r3, pc}
 80814a0:	080401ac 	.word	0x080401ac

080814a4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80814a4:	b508      	push	{r3, lr}
 80814a6:	4b02      	ldr	r3, [pc, #8]	; (80814b0 <HAL_I2C_Is_Enabled+0xc>)
 80814a8:	681b      	ldr	r3, [r3, #0]
 80814aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80814ac:	9301      	str	r3, [sp, #4]
 80814ae:	bd08      	pop	{r3, pc}
 80814b0:	080401ac 	.word	0x080401ac

080814b4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80814b4:	b508      	push	{r3, lr}
 80814b6:	4b02      	ldr	r3, [pc, #8]	; (80814c0 <HAL_I2C_Init+0xc>)
 80814b8:	681b      	ldr	r3, [r3, #0]
 80814ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80814bc:	9301      	str	r3, [sp, #4]
 80814be:	bd08      	pop	{r3, pc}
 80814c0:	080401ac 	.word	0x080401ac

080814c4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80814c4:	b508      	push	{r3, lr}
 80814c6:	4b02      	ldr	r3, [pc, #8]	; (80814d0 <HAL_I2C_Acquire+0xc>)
 80814c8:	681b      	ldr	r3, [r3, #0]
 80814ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80814cc:	9301      	str	r3, [sp, #4]
 80814ce:	bd08      	pop	{r3, pc}
 80814d0:	080401ac 	.word	0x080401ac

080814d4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80814d4:	b508      	push	{r3, lr}
 80814d6:	4b02      	ldr	r3, [pc, #8]	; (80814e0 <HAL_I2C_Release+0xc>)
 80814d8:	681b      	ldr	r3, [r3, #0]
 80814da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80814dc:	9301      	str	r3, [sp, #4]
 80814de:	bd08      	pop	{r3, pc}
 80814e0:	080401ac 	.word	0x080401ac

080814e4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80814e4:	b508      	push	{r3, lr}
 80814e6:	4b02      	ldr	r3, [pc, #8]	; (80814f0 <HAL_SPI_Init+0xc>)
 80814e8:	681b      	ldr	r3, [r3, #0]
 80814ea:	69db      	ldr	r3, [r3, #28]
 80814ec:	9301      	str	r3, [sp, #4]
 80814ee:	bd08      	pop	{r3, pc}
 80814f0:	080401b4 	.word	0x080401b4

080814f4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80814f4:	b508      	push	{r3, lr}
 80814f6:	4b02      	ldr	r3, [pc, #8]	; (8081500 <HAL_SPI_Is_Enabled+0xc>)
 80814f8:	681b      	ldr	r3, [r3, #0]
 80814fa:	6a1b      	ldr	r3, [r3, #32]
 80814fc:	9301      	str	r3, [sp, #4]
 80814fe:	bd08      	pop	{r3, pc}
 8081500:	080401b4 	.word	0x080401b4

08081504 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081504:	b508      	push	{r3, lr}
 8081506:	4b02      	ldr	r3, [pc, #8]	; (8081510 <HAL_USART_Init+0xc>)
 8081508:	681b      	ldr	r3, [r3, #0]
 808150a:	699b      	ldr	r3, [r3, #24]
 808150c:	9301      	str	r3, [sp, #4]
 808150e:	bd08      	pop	{r3, pc}
 8081510:	080401c4 	.word	0x080401c4

08081514 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081514:	b508      	push	{r3, lr}
 8081516:	4b02      	ldr	r3, [pc, #8]	; (8081520 <HAL_USART_Write_Data+0xc>)
 8081518:	681b      	ldr	r3, [r3, #0]
 808151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808151c:	9301      	str	r3, [sp, #4]
 808151e:	bd08      	pop	{r3, pc}
 8081520:	080401c4 	.word	0x080401c4

08081524 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081524:	b508      	push	{r3, lr}
 8081526:	4b02      	ldr	r3, [pc, #8]	; (8081530 <HAL_USART_Available_Data+0xc>)
 8081528:	681b      	ldr	r3, [r3, #0]
 808152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808152c:	9301      	str	r3, [sp, #4]
 808152e:	bd08      	pop	{r3, pc}
 8081530:	080401c4 	.word	0x080401c4

08081534 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081534:	b508      	push	{r3, lr}
 8081536:	4b02      	ldr	r3, [pc, #8]	; (8081540 <HAL_USART_Read_Data+0xc>)
 8081538:	681b      	ldr	r3, [r3, #0]
 808153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808153c:	9301      	str	r3, [sp, #4]
 808153e:	bd08      	pop	{r3, pc}
 8081540:	080401c4 	.word	0x080401c4

08081544 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081544:	b508      	push	{r3, lr}
 8081546:	4b02      	ldr	r3, [pc, #8]	; (8081550 <HAL_USART_Peek_Data+0xc>)
 8081548:	681b      	ldr	r3, [r3, #0]
 808154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808154c:	9301      	str	r3, [sp, #4]
 808154e:	bd08      	pop	{r3, pc}
 8081550:	080401c4 	.word	0x080401c4

08081554 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081554:	b508      	push	{r3, lr}
 8081556:	4b02      	ldr	r3, [pc, #8]	; (8081560 <HAL_USART_Flush_Data+0xc>)
 8081558:	681b      	ldr	r3, [r3, #0]
 808155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808155c:	9301      	str	r3, [sp, #4]
 808155e:	bd08      	pop	{r3, pc}
 8081560:	080401c4 	.word	0x080401c4

08081564 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081564:	b508      	push	{r3, lr}
 8081566:	4b02      	ldr	r3, [pc, #8]	; (8081570 <HAL_USART_Is_Enabled+0xc>)
 8081568:	681b      	ldr	r3, [r3, #0]
 808156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808156c:	9301      	str	r3, [sp, #4]
 808156e:	bd08      	pop	{r3, pc}
 8081570:	080401c4 	.word	0x080401c4

08081574 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081574:	b508      	push	{r3, lr}
 8081576:	4b02      	ldr	r3, [pc, #8]	; (8081580 <HAL_USART_Available_Data_For_Write+0xc>)
 8081578:	681b      	ldr	r3, [r3, #0]
 808157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808157c:	9301      	str	r3, [sp, #4]
 808157e:	bd08      	pop	{r3, pc}
 8081580:	080401c4 	.word	0x080401c4

08081584 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081584:	b508      	push	{r3, lr}
 8081586:	4b02      	ldr	r3, [pc, #8]	; (8081590 <HAL_USB_USART_Init+0xc>)
 8081588:	681b      	ldr	r3, [r3, #0]
 808158a:	681b      	ldr	r3, [r3, #0]
 808158c:	9301      	str	r3, [sp, #4]
 808158e:	bd08      	pop	{r3, pc}
 8081590:	0806001c 	.word	0x0806001c

08081594 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081594:	b508      	push	{r3, lr}
 8081596:	4b02      	ldr	r3, [pc, #8]	; (80815a0 <HAL_USB_USART_Available_Data+0xc>)
 8081598:	681b      	ldr	r3, [r3, #0]
 808159a:	691b      	ldr	r3, [r3, #16]
 808159c:	9301      	str	r3, [sp, #4]
 808159e:	bd08      	pop	{r3, pc}
 80815a0:	0806001c 	.word	0x0806001c

080815a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80815a4:	b508      	push	{r3, lr}
 80815a6:	4b02      	ldr	r3, [pc, #8]	; (80815b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80815a8:	681b      	ldr	r3, [r3, #0]
 80815aa:	695b      	ldr	r3, [r3, #20]
 80815ac:	9301      	str	r3, [sp, #4]
 80815ae:	bd08      	pop	{r3, pc}
 80815b0:	0806001c 	.word	0x0806001c

080815b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80815b4:	b508      	push	{r3, lr}
 80815b6:	4b02      	ldr	r3, [pc, #8]	; (80815c0 <HAL_USB_USART_Receive_Data+0xc>)
 80815b8:	681b      	ldr	r3, [r3, #0]
 80815ba:	699b      	ldr	r3, [r3, #24]
 80815bc:	9301      	str	r3, [sp, #4]
 80815be:	bd08      	pop	{r3, pc}
 80815c0:	0806001c 	.word	0x0806001c

080815c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80815c4:	b508      	push	{r3, lr}
 80815c6:	4b02      	ldr	r3, [pc, #8]	; (80815d0 <HAL_USB_USART_Send_Data+0xc>)
 80815c8:	681b      	ldr	r3, [r3, #0]
 80815ca:	69db      	ldr	r3, [r3, #28]
 80815cc:	9301      	str	r3, [sp, #4]
 80815ce:	bd08      	pop	{r3, pc}
 80815d0:	0806001c 	.word	0x0806001c

080815d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80815d4:	b508      	push	{r3, lr}
 80815d6:	4b02      	ldr	r3, [pc, #8]	; (80815e0 <HAL_USB_USART_Flush_Data+0xc>)
 80815d8:	681b      	ldr	r3, [r3, #0]
 80815da:	6a1b      	ldr	r3, [r3, #32]
 80815dc:	9301      	str	r3, [sp, #4]
 80815de:	bd08      	pop	{r3, pc}
 80815e0:	0806001c 	.word	0x0806001c

080815e4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80815e4:	b508      	push	{r3, lr}
 80815e6:	4b02      	ldr	r3, [pc, #8]	; (80815f0 <system_mode+0xc>)
 80815e8:	681b      	ldr	r3, [r3, #0]
 80815ea:	681b      	ldr	r3, [r3, #0]
 80815ec:	9301      	str	r3, [sp, #4]
 80815ee:	bd08      	pop	{r3, pc}
 80815f0:	080401a4 	.word	0x080401a4

080815f4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80815f4:	b508      	push	{r3, lr}
 80815f6:	4b02      	ldr	r3, [pc, #8]	; (8081600 <set_system_mode+0xc>)
 80815f8:	681b      	ldr	r3, [r3, #0]
 80815fa:	685b      	ldr	r3, [r3, #4]
 80815fc:	9301      	str	r3, [sp, #4]
 80815fe:	bd08      	pop	{r3, pc}
 8081600:	080401a4 	.word	0x080401a4

08081604 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081604:	b508      	push	{r3, lr}
 8081606:	4b02      	ldr	r3, [pc, #8]	; (8081610 <system_delay_ms+0xc>)
 8081608:	681b      	ldr	r3, [r3, #0]
 808160a:	695b      	ldr	r3, [r3, #20]
 808160c:	9301      	str	r3, [sp, #4]
 808160e:	bd08      	pop	{r3, pc}
 8081610:	080401a4 	.word	0x080401a4

08081614 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081614:	b508      	push	{r3, lr}
 8081616:	4b02      	ldr	r3, [pc, #8]	; (8081620 <system_sleep+0xc>)
 8081618:	681b      	ldr	r3, [r3, #0]
 808161a:	699b      	ldr	r3, [r3, #24]
 808161c:	9301      	str	r3, [sp, #4]
 808161e:	bd08      	pop	{r3, pc}
 8081620:	080401a4 	.word	0x080401a4

08081624 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081624:	b508      	push	{r3, lr}
 8081626:	4b02      	ldr	r3, [pc, #8]	; (8081630 <system_thread_set_state+0xc>)
 8081628:	681b      	ldr	r3, [r3, #0]
 808162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808162c:	9301      	str	r3, [sp, #4]
 808162e:	bd08      	pop	{r3, pc}
 8081630:	080401a4 	.word	0x080401a4

08081634 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081634:	b508      	push	{r3, lr}
 8081636:	4b02      	ldr	r3, [pc, #8]	; (8081640 <application_thread_current+0xc>)
 8081638:	681b      	ldr	r3, [r3, #0]
 808163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808163c:	9301      	str	r3, [sp, #4]
 808163e:	bd08      	pop	{r3, pc}
 8081640:	080401a4 	.word	0x080401a4

08081644 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081644:	b508      	push	{r3, lr}
 8081646:	4b02      	ldr	r3, [pc, #8]	; (8081650 <application_thread_invoke+0xc>)
 8081648:	681b      	ldr	r3, [r3, #0]
 808164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808164c:	9301      	str	r3, [sp, #4]
 808164e:	bd08      	pop	{r3, pc}
 8081650:	080401a4 	.word	0x080401a4

08081654 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081654:	b508      	push	{r3, lr}
 8081656:	4b02      	ldr	r3, [pc, #8]	; (8081660 <system_thread_get_state+0xc>)
 8081658:	681b      	ldr	r3, [r3, #0]
 808165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808165c:	9301      	str	r3, [sp, #4]
 808165e:	bd08      	pop	{r3, pc}
 8081660:	080401a4 	.word	0x080401a4

08081664 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081664:	b508      	push	{r3, lr}
 8081666:	4b03      	ldr	r3, [pc, #12]	; (8081674 <system_ctrl_set_app_request_handler+0x10>)
 8081668:	681b      	ldr	r3, [r3, #0]
 808166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808166e:	9301      	str	r3, [sp, #4]
 8081670:	bd08      	pop	{r3, pc}
 8081672:	0000      	.short	0x0000
 8081674:	080401a4 	.word	0x080401a4

08081678 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081678:	b508      	push	{r3, lr}
 808167a:	4b03      	ldr	r3, [pc, #12]	; (8081688 <system_ctrl_set_result+0x10>)
 808167c:	681b      	ldr	r3, [r3, #0]
 808167e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081682:	9301      	str	r3, [sp, #4]
 8081684:	bd08      	pop	{r3, pc}
 8081686:	0000      	.short	0x0000
 8081688:	080401a4 	.word	0x080401a4

0808168c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808168c:	b508      	push	{r3, lr}
 808168e:	4b02      	ldr	r3, [pc, #8]	; (8081698 <spark_variable+0xc>)
 8081690:	681b      	ldr	r3, [r3, #0]
 8081692:	681b      	ldr	r3, [r3, #0]
 8081694:	9301      	str	r3, [sp, #4]
 8081696:	bd08      	pop	{r3, pc}
 8081698:	080401cc 	.word	0x080401cc

0808169c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808169c:	b508      	push	{r3, lr}
 808169e:	4b02      	ldr	r3, [pc, #8]	; (80816a8 <spark_function+0xc>)
 80816a0:	681b      	ldr	r3, [r3, #0]
 80816a2:	685b      	ldr	r3, [r3, #4]
 80816a4:	9301      	str	r3, [sp, #4]
 80816a6:	bd08      	pop	{r3, pc}
 80816a8:	080401cc 	.word	0x080401cc

080816ac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80816ac:	b508      	push	{r3, lr}
 80816ae:	4b02      	ldr	r3, [pc, #8]	; (80816b8 <spark_process+0xc>)
 80816b0:	681b      	ldr	r3, [r3, #0]
 80816b2:	689b      	ldr	r3, [r3, #8]
 80816b4:	9301      	str	r3, [sp, #4]
 80816b6:	bd08      	pop	{r3, pc}
 80816b8:	080401cc 	.word	0x080401cc

080816bc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80816bc:	b508      	push	{r3, lr}
 80816be:	4b02      	ldr	r3, [pc, #8]	; (80816c8 <spark_cloud_flag_connect+0xc>)
 80816c0:	681b      	ldr	r3, [r3, #0]
 80816c2:	68db      	ldr	r3, [r3, #12]
 80816c4:	9301      	str	r3, [sp, #4]
 80816c6:	bd08      	pop	{r3, pc}
 80816c8:	080401cc 	.word	0x080401cc

080816cc <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 80816cc:	b508      	push	{r3, lr}
 80816ce:	4b02      	ldr	r3, [pc, #8]	; (80816d8 <spark_cloud_flag_disconnect+0xc>)
 80816d0:	681b      	ldr	r3, [r3, #0]
 80816d2:	691b      	ldr	r3, [r3, #16]
 80816d4:	9301      	str	r3, [sp, #4]
 80816d6:	bd08      	pop	{r3, pc}
 80816d8:	080401cc 	.word	0x080401cc

080816dc <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80816dc:	b508      	push	{r3, lr}
 80816de:	4b02      	ldr	r3, [pc, #8]	; (80816e8 <spark_cloud_flag_connected+0xc>)
 80816e0:	681b      	ldr	r3, [r3, #0]
 80816e2:	695b      	ldr	r3, [r3, #20]
 80816e4:	9301      	str	r3, [sp, #4]
 80816e6:	bd08      	pop	{r3, pc}
 80816e8:	080401cc 	.word	0x080401cc

080816ec <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80816ec:	b508      	push	{r3, lr}
 80816ee:	4b02      	ldr	r3, [pc, #8]	; (80816f8 <spark_deviceID+0xc>)
 80816f0:	681b      	ldr	r3, [r3, #0]
 80816f2:	69db      	ldr	r3, [r3, #28]
 80816f4:	9301      	str	r3, [sp, #4]
 80816f6:	bd08      	pop	{r3, pc}
 80816f8:	080401cc 	.word	0x080401cc

080816fc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80816fc:	b508      	push	{r3, lr}
 80816fe:	4b02      	ldr	r3, [pc, #8]	; (8081708 <spark_send_event+0xc>)
 8081700:	681b      	ldr	r3, [r3, #0]
 8081702:	6a1b      	ldr	r3, [r3, #32]
 8081704:	9301      	str	r3, [sp, #4]
 8081706:	bd08      	pop	{r3, pc}
 8081708:	080401cc 	.word	0x080401cc

0808170c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808170c:	b508      	push	{r3, lr}
 808170e:	4b02      	ldr	r3, [pc, #8]	; (8081718 <spark_subscribe+0xc>)
 8081710:	681b      	ldr	r3, [r3, #0]
 8081712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081714:	9301      	str	r3, [sp, #4]
 8081716:	bd08      	pop	{r3, pc}
 8081718:	080401cc 	.word	0x080401cc

0808171c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 808171c:	b508      	push	{r3, lr}
 808171e:	4b02      	ldr	r3, [pc, #8]	; (8081728 <spark_sync_time+0xc>)
 8081720:	681b      	ldr	r3, [r3, #0]
 8081722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081724:	9301      	str	r3, [sp, #4]
 8081726:	bd08      	pop	{r3, pc}
 8081728:	080401cc 	.word	0x080401cc

0808172c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808172c:	b508      	push	{r3, lr}
 808172e:	4b02      	ldr	r3, [pc, #8]	; (8081738 <spark_sync_time_pending+0xc>)
 8081730:	681b      	ldr	r3, [r3, #0]
 8081732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081734:	9301      	str	r3, [sp, #4]
 8081736:	bd08      	pop	{r3, pc}
 8081738:	080401cc 	.word	0x080401cc

0808173c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808173c:	b508      	push	{r3, lr}
 808173e:	4b02      	ldr	r3, [pc, #8]	; (8081748 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081740:	681b      	ldr	r3, [r3, #0]
 8081742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081744:	9301      	str	r3, [sp, #4]
 8081746:	bd08      	pop	{r3, pc}
 8081748:	080401cc 	.word	0x080401cc

0808174c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808174c:	b508      	push	{r3, lr}
 808174e:	4b02      	ldr	r3, [pc, #8]	; (8081758 <network_connect+0xc>)
 8081750:	681b      	ldr	r3, [r3, #0]
 8081752:	685b      	ldr	r3, [r3, #4]
 8081754:	9301      	str	r3, [sp, #4]
 8081756:	bd08      	pop	{r3, pc}
 8081758:	080401c8 	.word	0x080401c8

0808175c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808175c:	b508      	push	{r3, lr}
 808175e:	4b02      	ldr	r3, [pc, #8]	; (8081768 <network_connecting+0xc>)
 8081760:	681b      	ldr	r3, [r3, #0]
 8081762:	689b      	ldr	r3, [r3, #8]
 8081764:	9301      	str	r3, [sp, #4]
 8081766:	bd08      	pop	{r3, pc}
 8081768:	080401c8 	.word	0x080401c8

0808176c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808176c:	b508      	push	{r3, lr}
 808176e:	4b02      	ldr	r3, [pc, #8]	; (8081778 <network_disconnect+0xc>)
 8081770:	681b      	ldr	r3, [r3, #0]
 8081772:	68db      	ldr	r3, [r3, #12]
 8081774:	9301      	str	r3, [sp, #4]
 8081776:	bd08      	pop	{r3, pc}
 8081778:	080401c8 	.word	0x080401c8

0808177c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808177c:	b508      	push	{r3, lr}
 808177e:	4b02      	ldr	r3, [pc, #8]	; (8081788 <network_ready+0xc>)
 8081780:	681b      	ldr	r3, [r3, #0]
 8081782:	691b      	ldr	r3, [r3, #16]
 8081784:	9301      	str	r3, [sp, #4]
 8081786:	bd08      	pop	{r3, pc}
 8081788:	080401c8 	.word	0x080401c8

0808178c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808178c:	b508      	push	{r3, lr}
 808178e:	4b02      	ldr	r3, [pc, #8]	; (8081798 <network_on+0xc>)
 8081790:	681b      	ldr	r3, [r3, #0]
 8081792:	695b      	ldr	r3, [r3, #20]
 8081794:	9301      	str	r3, [sp, #4]
 8081796:	bd08      	pop	{r3, pc}
 8081798:	080401c8 	.word	0x080401c8

0808179c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808179c:	b508      	push	{r3, lr}
 808179e:	4b02      	ldr	r3, [pc, #8]	; (80817a8 <network_off+0xc>)
 80817a0:	681b      	ldr	r3, [r3, #0]
 80817a2:	699b      	ldr	r3, [r3, #24]
 80817a4:	9301      	str	r3, [sp, #4]
 80817a6:	bd08      	pop	{r3, pc}
 80817a8:	080401c8 	.word	0x080401c8

080817ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80817ac:	b508      	push	{r3, lr}
 80817ae:	4b02      	ldr	r3, [pc, #8]	; (80817b8 <network_listen+0xc>)
 80817b0:	681b      	ldr	r3, [r3, #0]
 80817b2:	69db      	ldr	r3, [r3, #28]
 80817b4:	9301      	str	r3, [sp, #4]
 80817b6:	bd08      	pop	{r3, pc}
 80817b8:	080401c8 	.word	0x080401c8

080817bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80817bc:	b508      	push	{r3, lr}
 80817be:	4b02      	ldr	r3, [pc, #8]	; (80817c8 <network_listening+0xc>)
 80817c0:	681b      	ldr	r3, [r3, #0]
 80817c2:	6a1b      	ldr	r3, [r3, #32]
 80817c4:	9301      	str	r3, [sp, #4]
 80817c6:	bd08      	pop	{r3, pc}
 80817c8:	080401c8 	.word	0x080401c8

080817cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80817cc:	b508      	push	{r3, lr}
 80817ce:	4b02      	ldr	r3, [pc, #8]	; (80817d8 <network_set_listen_timeout+0xc>)
 80817d0:	681b      	ldr	r3, [r3, #0]
 80817d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80817d4:	9301      	str	r3, [sp, #4]
 80817d6:	bd08      	pop	{r3, pc}
 80817d8:	080401c8 	.word	0x080401c8

080817dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80817dc:	b508      	push	{r3, lr}
 80817de:	4b02      	ldr	r3, [pc, #8]	; (80817e8 <network_get_listen_timeout+0xc>)
 80817e0:	681b      	ldr	r3, [r3, #0]
 80817e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80817e4:	9301      	str	r3, [sp, #4]
 80817e6:	bd08      	pop	{r3, pc}
 80817e8:	080401c8 	.word	0x080401c8

080817ec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80817ec:	b508      	push	{r3, lr}
 80817ee:	4b02      	ldr	r3, [pc, #8]	; (80817f8 <malloc+0xc>)
 80817f0:	681b      	ldr	r3, [r3, #0]
 80817f2:	681b      	ldr	r3, [r3, #0]
 80817f4:	9301      	str	r3, [sp, #4]
 80817f6:	bd08      	pop	{r3, pc}
 80817f8:	080401a0 	.word	0x080401a0

080817fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80817fc:	b508      	push	{r3, lr}
 80817fe:	4b02      	ldr	r3, [pc, #8]	; (8081808 <free+0xc>)
 8081800:	681b      	ldr	r3, [r3, #0]
 8081802:	685b      	ldr	r3, [r3, #4]
 8081804:	9301      	str	r3, [sp, #4]
 8081806:	bd08      	pop	{r3, pc}
 8081808:	080401a0 	.word	0x080401a0

0808180c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808180c:	b508      	push	{r3, lr}
 808180e:	4b02      	ldr	r3, [pc, #8]	; (8081818 <realloc+0xc>)
 8081810:	681b      	ldr	r3, [r3, #0]
 8081812:	689b      	ldr	r3, [r3, #8]
 8081814:	9301      	str	r3, [sp, #4]
 8081816:	bd08      	pop	{r3, pc}
 8081818:	080401a0 	.word	0x080401a0

0808181c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808181c:	b508      	push	{r3, lr}
 808181e:	4b02      	ldr	r3, [pc, #8]	; (8081828 <siprintf+0xc>)
 8081820:	681b      	ldr	r3, [r3, #0]
 8081822:	691b      	ldr	r3, [r3, #16]
 8081824:	9301      	str	r3, [sp, #4]
 8081826:	bd08      	pop	{r3, pc}
 8081828:	080401a0 	.word	0x080401a0

0808182c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808182c:	b508      	push	{r3, lr}
 808182e:	4b02      	ldr	r3, [pc, #8]	; (8081838 <siscanf+0xc>)
 8081830:	681b      	ldr	r3, [r3, #0]
 8081832:	699b      	ldr	r3, [r3, #24]
 8081834:	9301      	str	r3, [sp, #4]
 8081836:	bd08      	pop	{r3, pc}
 8081838:	080401a0 	.word	0x080401a0

0808183c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808183c:	b508      	push	{r3, lr}
 808183e:	4b02      	ldr	r3, [pc, #8]	; (8081848 <snprintf+0xc>)
 8081840:	681b      	ldr	r3, [r3, #0]
 8081842:	69db      	ldr	r3, [r3, #28]
 8081844:	9301      	str	r3, [sp, #4]
 8081846:	bd08      	pop	{r3, pc}
 8081848:	080401a0 	.word	0x080401a0

0808184c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808184c:	b508      	push	{r3, lr}
 808184e:	4b02      	ldr	r3, [pc, #8]	; (8081858 <abort+0xc>)
 8081850:	681b      	ldr	r3, [r3, #0]
 8081852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081854:	9301      	str	r3, [sp, #4]
 8081856:	bd08      	pop	{r3, pc}
 8081858:	080401a0 	.word	0x080401a0

0808185c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808185c:	b508      	push	{r3, lr}
 808185e:	4b02      	ldr	r3, [pc, #8]	; (8081868 <_malloc_r+0xc>)
 8081860:	681b      	ldr	r3, [r3, #0]
 8081862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081864:	9301      	str	r3, [sp, #4]
 8081866:	bd08      	pop	{r3, pc}
 8081868:	080401a0 	.word	0x080401a0

0808186c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 808186c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 808186e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 8081870:	d007      	beq.n	8081882 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 8081872:	9d03      	ldr	r5, [sp, #12]
 8081874:	1a44      	subs	r4, r0, r1
 8081876:	1aed      	subs	r5, r5, r3
 8081878:	436c      	muls	r4, r5
 808187a:	1a52      	subs	r2, r2, r1
 808187c:	fb94 f4f2 	sdiv	r4, r4, r2
 8081880:	18e0      	adds	r0, r4, r3
}
 8081882:	bd30      	pop	{r4, r5, pc}

08081884 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081884:	2100      	movs	r1, #0
 8081886:	f7ff bebd 	b.w	8081604 <system_delay_ms>

0808188a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808188a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808188c:	6883      	ldr	r3, [r0, #8]
 808188e:	4604      	mov	r4, r0
 8081890:	b90b      	cbnz	r3, 8081896 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081892:	f001 fd4e 	bl	8083332 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081896:	68c3      	ldr	r3, [r0, #12]
 8081898:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808189a:	68a3      	ldr	r3, [r4, #8]
 808189c:	b11b      	cbz	r3, 80818a6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808189e:	2203      	movs	r2, #3
 80818a0:	4621      	mov	r1, r4
 80818a2:	4620      	mov	r0, r4
 80818a4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80818a6:	4620      	mov	r0, r4
}
 80818a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80818ac:	2110      	movs	r1, #16
 80818ae:	f001 bd3e 	b.w	808332e <_ZdlPvj>

080818b2 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80818b2:	2200      	movs	r2, #0
 80818b4:	4611      	mov	r1, r2
 80818b6:	6840      	ldr	r0, [r0, #4]
 80818b8:	f7ff bf60 	b.w	808177c <network_ready>

080818bc <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80818bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80818c0:	2600      	movs	r6, #0
 80818c2:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80818c4:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80818c6:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80818c8:	4688      	mov	r8, r1
 80818ca:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80818cc:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80818d0:	f002 ff3d 	bl	808474e <strlen>
 80818d4:	9600      	str	r6, [sp, #0]
 80818d6:	b281      	uxth	r1, r0
 80818d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80818dc:	4622      	mov	r2, r4
 80818de:	4638      	mov	r0, r7
 80818e0:	f7ff fce0 	bl	80812a4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80818e4:	b120      	cbz	r0, 80818f0 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80818e6:	4631      	mov	r1, r6
 80818e8:	4628      	mov	r0, r5
 80818ea:	f000 fd39 	bl	8082360 <_ZN9IPAddressC1Em>
 80818ee:	e003      	b.n	80818f8 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80818f0:	4621      	mov	r1, r4
 80818f2:	4628      	mov	r0, r5
 80818f4:	f000 fd2c 	bl	8082350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80818f8:	4628      	mov	r0, r5
 80818fa:	b004      	add	sp, #16
 80818fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081900 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081900:	2200      	movs	r2, #0
 8081902:	4611      	mov	r1, r2
 8081904:	6840      	ldr	r0, [r0, #4]
 8081906:	f7ff bf59 	b.w	80817bc <network_listening>

0808190a <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808190a:	2200      	movs	r2, #0
 808190c:	4611      	mov	r1, r2
 808190e:	6840      	ldr	r0, [r0, #4]
 8081910:	f7ff bf64 	b.w	80817dc <network_get_listen_timeout>

08081914 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081914:	2200      	movs	r2, #0
 8081916:	6840      	ldr	r0, [r0, #4]
 8081918:	f7ff bf58 	b.w	80817cc <network_set_listen_timeout>

0808191c <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808191c:	2200      	movs	r2, #0
 808191e:	f081 0101 	eor.w	r1, r1, #1
 8081922:	6840      	ldr	r0, [r0, #4]
 8081924:	f7ff bf42 	b.w	80817ac <network_listen>

08081928 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081928:	2300      	movs	r3, #0
 808192a:	461a      	mov	r2, r3
 808192c:	4619      	mov	r1, r3
 808192e:	6840      	ldr	r0, [r0, #4]
 8081930:	f7ff bf34 	b.w	808179c <network_off>

08081934 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081934:	2300      	movs	r3, #0
 8081936:	461a      	mov	r2, r3
 8081938:	4619      	mov	r1, r3
 808193a:	6840      	ldr	r0, [r0, #4]
 808193c:	f7ff bf26 	b.w	808178c <network_on>

08081940 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081940:	2200      	movs	r2, #0
 8081942:	4611      	mov	r1, r2
 8081944:	6840      	ldr	r0, [r0, #4]
 8081946:	f7ff bf09 	b.w	808175c <network_connecting>

0808194a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808194a:	2200      	movs	r2, #0
 808194c:	2102      	movs	r1, #2
 808194e:	6840      	ldr	r0, [r0, #4]
 8081950:	f7ff bf0c 	b.w	808176c <network_disconnect>

08081954 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081954:	2300      	movs	r3, #0
 8081956:	461a      	mov	r2, r3
 8081958:	6840      	ldr	r0, [r0, #4]
 808195a:	f7ff bef7 	b.w	808174c <network_connect>
	...

08081960 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081962:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081964:	4b1a      	ldr	r3, [pc, #104]	; (80819d0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081966:	2500      	movs	r5, #0
 8081968:	6003      	str	r3, [r0, #0]
 808196a:	2618      	movs	r6, #24
 808196c:	3328      	adds	r3, #40	; 0x28
 808196e:	b089      	sub	sp, #36	; 0x24
 8081970:	6043      	str	r3, [r0, #4]
 8081972:	6085      	str	r5, [r0, #8]
 8081974:	60c5      	str	r5, [r0, #12]
 8081976:	4632      	mov	r2, r6
 8081978:	4629      	mov	r1, r5
 808197a:	4604      	mov	r4, r0
 808197c:	3010      	adds	r0, #16
 808197e:	f002 fe88 	bl	8084692 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081982:	462a      	mov	r2, r5
 8081984:	4629      	mov	r1, r5
 8081986:	6878      	ldr	r0, [r7, #4]
 8081988:	f7ff fef8 	bl	808177c <network_ready>
 808198c:	b908      	cbnz	r0, 8081992 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 808198e:	60a0      	str	r0, [r4, #8]
            return sig;
 8081990:	e01b      	b.n	80819ca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8081992:	4629      	mov	r1, r5
 8081994:	4632      	mov	r2, r6
 8081996:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8081998:	9500      	str	r5, [sp, #0]
 808199a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 808199c:	f002 fe79 	bl	8084692 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80819a0:	a902      	add	r1, sp, #8
 80819a2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 80819a4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80819a8:	f7ff fc84 	bl	80812b4 <cellular_signal>
 80819ac:	b110      	cbz	r0, 80819b4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 80819ae:	2301      	movs	r3, #1
 80819b0:	60a3      	str	r3, [r4, #8]
            return sig;
 80819b2:	e00a      	b.n	80819ca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 80819b4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80819b6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 80819b8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80819ba:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80819bc:	b90b      	cbnz	r3, 80819c2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 80819be:	2302      	movs	r3, #2
 80819c0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 80819c2:	a902      	add	r1, sp, #8
 80819c4:	4620      	mov	r0, r4
 80819c6:	f000 f895 	bl	8081af4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 80819ca:	4620      	mov	r0, r4
 80819cc:	b009      	add	sp, #36	; 0x24
 80819ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80819d0:	080853fc 	.word	0x080853fc

080819d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80819d4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80819d6:	4c08      	ldr	r4, [pc, #32]	; (80819f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80819d8:	2528      	movs	r5, #40	; 0x28
 80819da:	462a      	mov	r2, r5
 80819dc:	2100      	movs	r1, #0
 80819de:	4620      	mov	r0, r4
 80819e0:	f002 fe57 	bl	8084692 <memset>
        cid = -1;
 80819e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80819e8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80819ea:	4b04      	ldr	r3, [pc, #16]	; (80819fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 80819ec:	2204      	movs	r2, #4
 80819ee:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80819f0:	4a03      	ldr	r2, [pc, #12]	; (8081a00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 80819f2:	8025      	strh	r5, [r4, #0]
 80819f4:	601a      	str	r2, [r3, #0]
 80819f6:	bd38      	pop	{r3, r4, r5, pc}
 80819f8:	20000248 	.word	0x20000248
 80819fc:	20000240 	.word	0x20000240
 8081a00:	080853c8 	.word	0x080853c8

08081a04 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081a04:	4770      	bx	lr

08081a06 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081a06:	7d00      	ldrb	r0, [r0, #20]
 8081a08:	4770      	bx	lr
	...

08081a0c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8081a0c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081a0e:	7d03      	ldrb	r3, [r0, #20]
 8081a10:	b11b      	cbz	r3, 8081a1a <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081a12:	6980      	ldr	r0, [r0, #24]
 8081a14:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081a18:	d101      	bne.n	8081a1e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8081a1a:	2000      	movs	r0, #0
 8081a1c:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8081a1e:	f002 faa7 	bl	8083f70 <__aeabi_i2f>
 8081a22:	4902      	ldr	r1, [pc, #8]	; (8081a2c <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081a24:	f002 fbac 	bl	8084180 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081a28:	bd08      	pop	{r3, pc}
 8081a2a:	bf00      	nop
 8081a2c:	42c80000 	.word	0x42c80000

08081a30 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081a30:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081a32:	7d03      	ldrb	r3, [r0, #20]
 8081a34:	b11b      	cbz	r3, 8081a3e <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081a36:	6a00      	ldr	r0, [r0, #32]
 8081a38:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081a3c:	d101      	bne.n	8081a42 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8081a3e:	2000      	movs	r0, #0
 8081a40:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081a42:	f002 fa95 	bl	8083f70 <__aeabi_i2f>
 8081a46:	4902      	ldr	r1, [pc, #8]	; (8081a50 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081a48:	f002 fb9a 	bl	8084180 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081a4c:	bd08      	pop	{r3, pc}
 8081a4e:	bf00      	nop
 8081a50:	42c80000 	.word	0x42c80000

08081a54 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081a54:	b570      	push	{r4, r5, r6, lr}
 8081a56:	460d      	mov	r5, r1
 8081a58:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081a5a:	220a      	movs	r2, #10
 8081a5c:	6881      	ldr	r1, [r0, #8]
 8081a5e:	4628      	mov	r0, r5
 8081a60:	f000 ff70 	bl	8082944 <_ZN5Print5printEii>
    n += p.print(',');
 8081a64:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081a66:	4604      	mov	r4, r0
    n += p.print(',');
 8081a68:	4628      	mov	r0, r5
 8081a6a:	f000 ff04 	bl	8082876 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081a6e:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081a70:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8081a72:	68f1      	ldr	r1, [r6, #12]
 8081a74:	4628      	mov	r0, r5
 8081a76:	f000 ff65 	bl	8082944 <_ZN5Print5printEii>
    return n;
}
 8081a7a:	4420      	add	r0, r4
 8081a7c:	bd70      	pop	{r4, r5, r6, pc}

08081a7e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081a7e:	f1a0 0004 	sub.w	r0, r0, #4
 8081a82:	f7ff bfe7 	b.w	8081a54 <_ZNK14CellularSignal7printToER5Print>

08081a86 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081a86:	b510      	push	{r4, lr}
 8081a88:	4604      	mov	r4, r0
 8081a8a:	2128      	movs	r1, #40	; 0x28
 8081a8c:	f001 fc4f 	bl	808332e <_ZdlPvj>
 8081a90:	4620      	mov	r0, r4
 8081a92:	bd10      	pop	{r4, pc}

08081a94 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8081a94:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081a96:	7d03      	ldrb	r3, [r0, #20]
 8081a98:	b15b      	cbz	r3, 8081ab2 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081a9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081a9c:	2800      	cmp	r0, #0
 8081a9e:	db08      	blt.n	8081ab2 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081aa0:	f002 fa66 	bl	8083f70 <__aeabi_i2f>
 8081aa4:	4904      	ldr	r1, [pc, #16]	; (8081ab8 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081aa6:	f002 fb6b 	bl	8084180 <__aeabi_fdiv>
 8081aaa:	4904      	ldr	r1, [pc, #16]	; (8081abc <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081aac:	f002 fab4 	bl	8084018 <__aeabi_fmul>
 8081ab0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081ab2:	4803      	ldr	r0, [pc, #12]	; (8081ac0 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8081ab4:	bd08      	pop	{r3, pc}
 8081ab6:	bf00      	nop
 8081ab8:	477fff00 	.word	0x477fff00
 8081abc:	42c80000 	.word	0x42c80000
 8081ac0:	bf800000 	.word	0xbf800000

08081ac4 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8081ac4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081ac6:	7d03      	ldrb	r3, [r0, #20]
 8081ac8:	b15b      	cbz	r3, 8081ae2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081aca:	69c0      	ldr	r0, [r0, #28]
 8081acc:	2800      	cmp	r0, #0
 8081ace:	db08      	blt.n	8081ae2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081ad0:	f002 fa4e 	bl	8083f70 <__aeabi_i2f>
 8081ad4:	4904      	ldr	r1, [pc, #16]	; (8081ae8 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081ad6:	f002 fb53 	bl	8084180 <__aeabi_fdiv>
 8081ada:	4904      	ldr	r1, [pc, #16]	; (8081aec <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081adc:	f002 fa9c 	bl	8084018 <__aeabi_fmul>
 8081ae0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081ae2:	4803      	ldr	r0, [pc, #12]	; (8081af0 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8081ae4:	bd08      	pop	{r3, pc}
 8081ae6:	bf00      	nop
 8081ae8:	477fff00 	.word	0x477fff00
 8081aec:	42c80000 	.word	0x42c80000
 8081af0:	bf800000 	.word	0xbf800000

08081af4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8081af4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081af6:	460d      	mov	r5, r1
 8081af8:	f100 0410 	add.w	r4, r0, #16
 8081afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081b00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081b04:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081b08:	2001      	movs	r0, #1
 8081b0a:	bd30      	pop	{r4, r5, pc}

08081b0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081b0c:	4770      	bx	lr

08081b0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081b0e:	2000      	movs	r0, #0
 8081b10:	4770      	bx	lr

08081b12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081b12:	b510      	push	{r4, lr}
 8081b14:	4604      	mov	r4, r0
 8081b16:	2110      	movs	r1, #16
 8081b18:	f001 fc09 	bl	808332e <_ZdlPvj>
 8081b1c:	4620      	mov	r0, r4
 8081b1e:	bd10      	pop	{r4, pc}

08081b20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081b20:	b508      	push	{r3, lr}
      { delete this; }
 8081b22:	b108      	cbz	r0, 8081b28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081b24:	f7ff fff5 	bl	8081b12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081b28:	bd08      	pop	{r3, pc}

08081b2a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081b2a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081b2c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081b2e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081b30:	b113      	cbz	r3, 8081b38 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081b32:	2203      	movs	r2, #3
 8081b34:	4601      	mov	r1, r0
 8081b36:	4798      	blx	r3
    }
 8081b38:	4620      	mov	r0, r4
 8081b3a:	bd10      	pop	{r4, pc}

08081b3c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081b3c:	2200      	movs	r2, #0
 8081b3e:	6002      	str	r2, [r0, #0]
 8081b40:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8081b44:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081b46:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b48:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8081b4c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b4e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081b50:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081b52:	680c      	ldr	r4, [r1, #0]
 8081b54:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b56:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081b58:	bd10      	pop	{r4, pc}

08081b5a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081b5a:	b510      	push	{r4, lr}
 8081b5c:	4604      	mov	r4, r0
    free((void*)msg_);
 8081b5e:	6800      	ldr	r0, [r0, #0]
 8081b60:	f7ff fe4c 	bl	80817fc <free>
}
 8081b64:	4620      	mov	r0, r4
 8081b66:	bd10      	pop	{r4, pc}

08081b68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081b68:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081b6a:	68c4      	ldr	r4, [r0, #12]
 8081b6c:	b1f4      	cbz	r4, 8081bac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081b6e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081b70:	2b02      	cmp	r3, #2
 8081b72:	d103      	bne.n	8081b7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081b74:	f104 000c 	add.w	r0, r4, #12
 8081b78:	f7ff ffef 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081b7c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081b7e:	b135      	cbz	r5, 8081b8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081b80:	4628      	mov	r0, r5
 8081b82:	f7ff ffd2 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>
 8081b86:	2110      	movs	r1, #16
 8081b88:	4628      	mov	r0, r5
 8081b8a:	f001 fbd0 	bl	808332e <_ZdlPvj>
 8081b8e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081b90:	b135      	cbz	r5, 8081ba0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081b92:	4628      	mov	r0, r5
 8081b94:	f7ff ffc9 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>
 8081b98:	2110      	movs	r1, #16
 8081b9a:	4628      	mov	r0, r5
 8081b9c:	f001 fbc7 	bl	808332e <_ZdlPvj>
 8081ba0:	4620      	mov	r0, r4
 8081ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081ba6:	2114      	movs	r1, #20
 8081ba8:	f001 bbc1 	b.w	808332e <_ZdlPvj>
 8081bac:	bd38      	pop	{r3, r4, r5, pc}

08081bae <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081bae:	b510      	push	{r4, lr}
 8081bb0:	b088      	sub	sp, #32
 8081bb2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081bb4:	4668      	mov	r0, sp
 8081bb6:	f000 ff41 	bl	8082a3c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8081bba:	4669      	mov	r1, sp
 8081bbc:	a804      	add	r0, sp, #16
 8081bbe:	f000 ff5f 	bl	8082a80 <_ZN6StringC1ERKS_>
 8081bc2:	a804      	add	r0, sp, #16
 8081bc4:	47a0      	blx	r4
 8081bc6:	4604      	mov	r4, r0
 8081bc8:	a804      	add	r0, sp, #16
 8081bca:	f000 fef0 	bl	80829ae <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081bce:	4668      	mov	r0, sp
 8081bd0:	f000 feed 	bl	80829ae <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081bd4:	4620      	mov	r0, r4
 8081bd6:	b008      	add	sp, #32
 8081bd8:	bd10      	pop	{r4, pc}

08081bda <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081bda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081bdc:	4607      	mov	r7, r0
 8081bde:	460e      	mov	r6, r1
 8081be0:	4615      	mov	r5, r2
 8081be2:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8081be4:	2410      	movs	r4, #16
 8081be6:	4622      	mov	r2, r4
 8081be8:	2100      	movs	r1, #0
 8081bea:	4668      	mov	r0, sp
 8081bec:	f002 fd51 	bl	8084692 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081bf0:	2200      	movs	r2, #0
 8081bf2:	4669      	mov	r1, sp
 8081bf4:	4610      	mov	r0, r2
         size = sizeof(*this);
 8081bf6:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8081bfa:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8081bfc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8081bfe:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081c00:	f7ff fd4c 	bl	808169c <spark_function>
}
 8081c04:	b005      	add	sp, #20
 8081c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081c08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081c08:	b513      	push	{r0, r1, r4, lr}
 8081c0a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081c0c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081c10:	2300      	movs	r3, #0
 8081c12:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081c14:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081c16:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081c18:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c1a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081c1c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081c1e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c20:	f7fe fb92 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081c24:	4620      	mov	r0, r4
 8081c26:	b002      	add	sp, #8
 8081c28:	bd10      	pop	{r4, pc}

08081c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081c2a:	680b      	ldr	r3, [r1, #0]
 8081c2c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081c2e:	b113      	cbz	r3, 8081c36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081c30:	685a      	ldr	r2, [r3, #4]
 8081c32:	3201      	adds	r2, #1
 8081c34:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081c36:	4770      	bx	lr

08081c38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081c3a:	460c      	mov	r4, r1
 8081c3c:	4606      	mov	r6, r0
 8081c3e:	460f      	mov	r7, r1
 8081c40:	f854 3b04 	ldr.w	r3, [r4], #4
 8081c44:	ad02      	add	r5, sp, #8
 8081c46:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081c4a:	4621      	mov	r1, r4
 8081c4c:	a801      	add	r0, sp, #4
 8081c4e:	f7ff ffec 	bl	8081c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081c52:	4629      	mov	r1, r5
 8081c54:	4630      	mov	r0, r6
 8081c56:	f7ff ffd7 	bl	8081c08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c5a:	a801      	add	r0, sp, #4
 8081c5c:	f7fe fb74 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081c60:	4620      	mov	r0, r4
 8081c62:	f7fe fb71 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081c66:	4638      	mov	r0, r7
 8081c68:	2108      	movs	r1, #8
 8081c6a:	f001 fb60 	bl	808332e <_ZdlPvj>
        return p;
    }
 8081c6e:	4630      	mov	r0, r6
 8081c70:	b003      	add	sp, #12
 8081c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081c74 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081c74:	b513      	push	{r0, r1, r4, lr}
 8081c76:	460b      	mov	r3, r1
 8081c78:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081c7a:	c803      	ldmia	r0, {r0, r1}
 8081c7c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081c84:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081c88:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081c8c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081c90:	b002      	add	sp, #8
 8081c92:	bd10      	pop	{r4, pc}

08081c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081c94:	b538      	push	{r3, r4, r5, lr}
 8081c96:	2300      	movs	r3, #0
 8081c98:	4604      	mov	r4, r0
 8081c9a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081c9c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081c9e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081ca0:	f7fe f9fd 	bl	808009e <_Znwj>
 8081ca4:	b128      	cbz	r0, 8081cb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081ca6:	2301      	movs	r3, #1
 8081ca8:	6043      	str	r3, [r0, #4]
 8081caa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081cac:	4b02      	ldr	r3, [pc, #8]	; (8081cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081cae:	60c5      	str	r5, [r0, #12]
 8081cb0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081cb2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8081cb4:	4620      	mov	r0, r4
 8081cb6:	bd38      	pop	{r3, r4, r5, pc}
 8081cb8:	08085430 	.word	0x08085430

08081cbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081cbc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081cbe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081cc0:	b90a      	cbnz	r2, 8081cc6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081cc2:	f001 fb36 	bl	8083332 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081cc6:	68c3      	ldr	r3, [r0, #12]
    }
 8081cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081ccc:	4718      	bx	r3

08081cce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081cce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081cd0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081cd2:	f100 0110 	add.w	r1, r0, #16
 8081cd6:	f7ff fff1 	bl	8081cbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081cda:	bd08      	pop	{r3, pc}

08081cdc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081cdc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081cde:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081ce0:	b90a      	cbnz	r2, 8081ce6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081ce2:	f001 fb26 	bl	8083332 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081ce6:	68c3      	ldr	r3, [r0, #12]
    }
 8081ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081cec:	4718      	bx	r3

08081cee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081cee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081cf0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081cf2:	f100 0110 	add.w	r1, r0, #16
 8081cf6:	f7ff fff1 	bl	8081cdc <_ZNKSt8functionIFvRKbEEclES1_>
 8081cfa:	bd08      	pop	{r3, pc}

08081cfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081cfc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081cfe:	2300      	movs	r3, #0
 8081d00:	6083      	str	r3, [r0, #8]
 8081d02:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081d04:	4604      	mov	r4, r0
 8081d06:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081d08:	b12b      	cbz	r3, 8081d16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081d0a:	2202      	movs	r2, #2
 8081d0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081d0e:	68eb      	ldr	r3, [r5, #12]
 8081d10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081d12:	68ab      	ldr	r3, [r5, #8]
 8081d14:	60a3      	str	r3, [r4, #8]
	}
    }
 8081d16:	4620      	mov	r0, r4
 8081d18:	bd38      	pop	{r3, r4, r5, pc}
	...

08081d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081d1e:	b089      	sub	sp, #36	; 0x24
 8081d20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081d22:	4668      	mov	r0, sp
 8081d24:	f7ff ff0a 	bl	8081b3c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081d28:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081d2c:	2300      	movs	r3, #0
 8081d2e:	f88d 3008 	strb.w	r3, [sp, #8]
 8081d32:	e8d4 3f4f 	ldrexb	r3, [r4]
 8081d36:	2b00      	cmp	r3, #0
 8081d38:	d103      	bne.n	8081d42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8081d3a:	e8c4 2f41 	strexb	r1, r2, [r4]
 8081d3e:	2900      	cmp	r1, #0
 8081d40:	d1f7      	bne.n	8081d32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8081d42:	d002      	beq.n	8081d4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8081d44:	f88d 3008 	strb.w	r3, [sp, #8]
 8081d48:	e063      	b.n	8081e12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081d4a:	f114 050c 	adds.w	r5, r4, #12
 8081d4e:	d003      	beq.n	8081d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8081d50:	4669      	mov	r1, sp
 8081d52:	4628      	mov	r0, r5
 8081d54:	f7ff fef2 	bl	8081b3c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081d58:	f3bf 8f5f 	dmb	sy
 8081d5c:	2301      	movs	r3, #1
 8081d5e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081d60:	f3bf 8f5f 	dmb	sy
 8081d64:	f104 0308 	add.w	r3, r4, #8
 8081d68:	2000      	movs	r0, #0
 8081d6a:	e853 6f00 	ldrex	r6, [r3]
 8081d6e:	e843 0200 	strex	r2, r0, [r3]
 8081d72:	2a00      	cmp	r2, #0
 8081d74:	d1f9      	bne.n	8081d6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8081d76:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081d7a:	2e00      	cmp	r6, #0
 8081d7c:	d049      	beq.n	8081e12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081d7e:	f7ff fc59 	bl	8081634 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081d82:	b120      	cbz	r0, 8081d8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081d84:	4629      	mov	r1, r5
 8081d86:	4630      	mov	r0, r6
 8081d88:	f7ff ff98 	bl	8081cbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081d8c:	e03a      	b.n	8081e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081d8e:	4631      	mov	r1, r6
 8081d90:	a802      	add	r0, sp, #8
 8081d92:	f7ff ffb3 	bl	8081cfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081d96:	68e0      	ldr	r0, [r4, #12]
 8081d98:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081d9c:	b108      	cbz	r0, 8081da2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8081d9e:	f002 fcbb 	bl	8084718 <strdup>
 8081da2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081da4:	2010      	movs	r0, #16
 8081da6:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081daa:	f7fe f978 	bl	808009e <_Znwj>
 8081dae:	4605      	mov	r5, r0
 8081db0:	b1e8      	cbz	r0, 8081dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081db2:	2700      	movs	r7, #0
 8081db4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081db6:	2018      	movs	r0, #24
 8081db8:	f7fe f971 	bl	808009e <_Znwj>
 8081dbc:	4604      	mov	r4, r0
 8081dbe:	b188      	cbz	r0, 8081de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081dc0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081dc2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081dc4:	a802      	add	r0, sp, #8
 8081dc6:	f7ff ff55 	bl	8081c74 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081dca:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081dcc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081dce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081dd0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081dd2:	9204      	str	r2, [sp, #16]
 8081dd4:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081dd6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081dd8:	60e3      	str	r3, [r4, #12]
 8081dda:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081dde:	9205      	str	r2, [sp, #20]
 8081de0:	f7ff feac 	bl	8081b3c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081de4:	4b0d      	ldr	r3, [pc, #52]	; (8081e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081de6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081de8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081dea:	4b0d      	ldr	r3, [pc, #52]	; (8081e20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8081dec:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8081dee:	a806      	add	r0, sp, #24
 8081df0:	f7ff feb3 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081df4:	a802      	add	r0, sp, #8
 8081df6:	f7ff fe98 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081dfa:	2200      	movs	r2, #0
 8081dfc:	4629      	mov	r1, r5
 8081dfe:	4809      	ldr	r0, [pc, #36]	; (8081e24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081e00:	f7ff fc20 	bl	8081644 <application_thread_invoke>
 8081e04:	4630      	mov	r0, r6
 8081e06:	f7ff fe90 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081e0a:	2110      	movs	r1, #16
 8081e0c:	4630      	mov	r0, r6
 8081e0e:	f001 fa8e 	bl	808332e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8081e12:	4668      	mov	r0, sp
 8081e14:	f7ff fea1 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
    }
 8081e18:	b009      	add	sp, #36	; 0x24
 8081e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081e1c:	08081ccf 	.word	0x08081ccf
 8081e20:	08081f45 	.word	0x08081f45
 8081e24:	0808188b 	.word	0x0808188b

08081e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081e2c:	b08b      	sub	sp, #44	; 0x2c
 8081e2e:	4606      	mov	r6, r0
 8081e30:	460f      	mov	r7, r1
 8081e32:	4690      	mov	r8, r2
 8081e34:	4699      	mov	r9, r3
 8081e36:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081e3a:	f7ff fc4f 	bl	80816dc <spark_cloud_flag_connected>
 8081e3e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8081e40:	4683      	mov	fp, r0
 8081e42:	bb30      	cbnz	r0, 8081e92 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081e44:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081e48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081e4a:	a905      	add	r1, sp, #20
 8081e4c:	4628      	mov	r0, r5
 8081e4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081e52:	f7ff fe73 	bl	8081b3c <_ZN8particle5ErrorC1EOS0_>
 8081e56:	2014      	movs	r0, #20
 8081e58:	f7fe f921 	bl	808009e <_Znwj>
 8081e5c:	4604      	mov	r4, r0
 8081e5e:	b158      	cbz	r0, 8081e78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081e60:	2302      	movs	r3, #2
 8081e62:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081e64:	2301      	movs	r3, #1
 8081e66:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081e68:	f8c0 b004 	str.w	fp, [r0, #4]
 8081e6c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8081e70:	4629      	mov	r1, r5
 8081e72:	300c      	adds	r0, #12
 8081e74:	f7ff fe62 	bl	8081b3c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081e78:	4630      	mov	r0, r6
 8081e7a:	4621      	mov	r1, r4
 8081e7c:	f840 4b04 	str.w	r4, [r0], #4
 8081e80:	f7ff ff08 	bl	8081c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081e84:	4628      	mov	r0, r5
 8081e86:	f7ff fe68 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8081e8a:	a805      	add	r0, sp, #20
 8081e8c:	f7ff fe65 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
 8081e90:	e052      	b.n	8081f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081e92:	2400      	movs	r4, #0
 8081e94:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081e96:	2014      	movs	r0, #20
 8081e98:	606c      	str	r4, [r5, #4]
 8081e9a:	60ac      	str	r4, [r5, #8]
 8081e9c:	9307      	str	r3, [sp, #28]
 8081e9e:	f7fe f8fe 	bl	808009e <_Znwj>
 8081ea2:	4601      	mov	r1, r0
 8081ea4:	b118      	cbz	r0, 8081eae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8081ea6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081ea8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081eaa:	6044      	str	r4, [r0, #4]
 8081eac:	6084      	str	r4, [r0, #8]
 8081eae:	a804      	add	r0, sp, #16
 8081eb0:	9103      	str	r1, [sp, #12]
 8081eb2:	f7ff feef 	bl	8081c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081eb6:	4b22      	ldr	r3, [pc, #136]	; (8081f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081eb8:	2008      	movs	r0, #8
 8081eba:	9308      	str	r3, [sp, #32]
 8081ebc:	f7fe f8ef 	bl	808009e <_Znwj>
 8081ec0:	4604      	mov	r4, r0
 8081ec2:	b128      	cbz	r0, 8081ed0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081ec4:	9b03      	ldr	r3, [sp, #12]
 8081ec6:	a904      	add	r1, sp, #16
 8081ec8:	f840 3b04 	str.w	r3, [r0], #4
 8081ecc:	f7ff fead 	bl	8081c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081ed0:	9500      	str	r5, [sp, #0]
 8081ed2:	fa5f f38a 	uxtb.w	r3, sl
 8081ed6:	464a      	mov	r2, r9
 8081ed8:	4641      	mov	r1, r8
 8081eda:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081edc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081ede:	f7ff fc0d 	bl	80816fc <spark_send_event>
 8081ee2:	b920      	cbnz	r0, 8081eee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081ee4:	9b03      	ldr	r3, [sp, #12]
 8081ee6:	785b      	ldrb	r3, [r3, #1]
 8081ee8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081eec:	b183      	cbz	r3, 8081f10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8081eee:	9b03      	ldr	r3, [sp, #12]
 8081ef0:	a904      	add	r1, sp, #16
 8081ef2:	a806      	add	r0, sp, #24
 8081ef4:	9305      	str	r3, [sp, #20]
 8081ef6:	f7ff fe98 	bl	8081c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081efa:	a905      	add	r1, sp, #20
 8081efc:	4630      	mov	r0, r6
 8081efe:	f7ff fe83 	bl	8081c08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081f02:	a806      	add	r0, sp, #24
 8081f04:	f7fe fa20 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f08:	a804      	add	r0, sp, #16
 8081f0a:	f7fe fa1d 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f0e:	e013      	b.n	8081f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8081f10:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081f14:	a905      	add	r1, sp, #20
 8081f16:	a803      	add	r0, sp, #12
 8081f18:	9205      	str	r2, [sp, #20]
 8081f1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081f1e:	f7ff fefd 	bl	8081d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081f22:	a805      	add	r0, sp, #20
 8081f24:	f7ff fe19 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081f28:	a805      	add	r0, sp, #20
 8081f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081f2c:	f7ff fe84 	bl	8081c38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8081f30:	a806      	add	r0, sp, #24
 8081f32:	f7fe fa09 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f36:	e7da      	b.n	8081eee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081f38:	4630      	mov	r0, r6
 8081f3a:	b00b      	add	sp, #44	; 0x2c
 8081f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081f40:	080820b5 	.word	0x080820b5

08081f44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081f44:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f48:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081f4a:	d006      	beq.n	8081f5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081f4c:	2a03      	cmp	r2, #3
 8081f4e:	d017      	beq.n	8081f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081f50:	2a01      	cmp	r2, #1
 8081f52:	d122      	bne.n	8081f9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081f54:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081f56:	6003      	str	r3, [r0, #0]
	      break;
 8081f58:	e01f      	b.n	8081f9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081f5a:	2018      	movs	r0, #24
 8081f5c:	680e      	ldr	r6, [r1, #0]
 8081f5e:	f7fe f89e 	bl	808009e <_Znwj>
 8081f62:	4605      	mov	r5, r0
 8081f64:	b150      	cbz	r0, 8081f7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081f66:	4631      	mov	r1, r6
 8081f68:	f7ff fec8 	bl	8081cfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081f6c:	6930      	ldr	r0, [r6, #16]
 8081f6e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081f72:	b108      	cbz	r0, 8081f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081f74:	f002 fbd0 	bl	8084718 <strdup>
 8081f78:	6128      	str	r0, [r5, #16]
 8081f7a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081f7c:	6025      	str	r5, [r4, #0]
 8081f7e:	e00c      	b.n	8081f9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081f80:	6804      	ldr	r4, [r0, #0]
 8081f82:	b154      	cbz	r4, 8081f9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8081f84:	f104 0010 	add.w	r0, r4, #16
 8081f88:	f7ff fde7 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081f8c:	4620      	mov	r0, r4
 8081f8e:	f7ff fdcc 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081f92:	2118      	movs	r1, #24
 8081f94:	4620      	mov	r0, r4
 8081f96:	f001 f9ca 	bl	808332e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081f9a:	2000      	movs	r0, #0
 8081f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081f9e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081f9e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081fa0:	2300      	movs	r3, #0
 8081fa2:	6083      	str	r3, [r0, #8]
 8081fa4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081fa6:	4604      	mov	r4, r0
 8081fa8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081faa:	b12b      	cbz	r3, 8081fb8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081fac:	2202      	movs	r2, #2
 8081fae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081fb0:	68eb      	ldr	r3, [r5, #12]
 8081fb2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081fb4:	68ab      	ldr	r3, [r5, #8]
 8081fb6:	60a3      	str	r3, [r4, #8]
	}
    }
 8081fb8:	4620      	mov	r0, r4
 8081fba:	bd38      	pop	{r3, r4, r5, pc}

08081fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081fbc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081fbe:	b570      	push	{r4, r5, r6, lr}
 8081fc0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081fc2:	d006      	beq.n	8081fd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081fc4:	2a03      	cmp	r2, #3
 8081fc6:	d011      	beq.n	8081fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8081fc8:	2a01      	cmp	r2, #1
 8081fca:	d118      	bne.n	8081ffe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081fcc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081fce:	6003      	str	r3, [r0, #0]
	      break;
 8081fd0:	e015      	b.n	8081ffe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081fd2:	2014      	movs	r0, #20
 8081fd4:	680e      	ldr	r6, [r1, #0]
 8081fd6:	f7fe f862 	bl	808009e <_Znwj>
 8081fda:	4605      	mov	r5, r0
 8081fdc:	b120      	cbz	r0, 8081fe8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081fde:	4631      	mov	r1, r6
 8081fe0:	f7ff ffdd 	bl	8081f9e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081fe4:	7c33      	ldrb	r3, [r6, #16]
 8081fe6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081fe8:	6025      	str	r5, [r4, #0]
 8081fea:	e008      	b.n	8081ffe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081fec:	6804      	ldr	r4, [r0, #0]
 8081fee:	b134      	cbz	r4, 8081ffe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081ff0:	4620      	mov	r0, r4
 8081ff2:	f7ff fd9a 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081ff6:	2114      	movs	r1, #20
 8081ff8:	4620      	mov	r0, r4
 8081ffa:	f001 f998 	bl	808332e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081ffe:	2000      	movs	r0, #0
 8082000:	bd70      	pop	{r4, r5, r6, pc}
	...

08082004 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082006:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082008:	f3bf 8f5f 	dmb	sy
 808200c:	b087      	sub	sp, #28
 808200e:	2300      	movs	r3, #0
 8082010:	e850 6f00 	ldrex	r6, [r0]
 8082014:	e840 3200 	strex	r2, r3, [r0]
 8082018:	2a00      	cmp	r2, #0
 808201a:	d1f9      	bne.n	8082010 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808201c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082020:	2e00      	cmp	r6, #0
 8082022:	d03f      	beq.n	80820a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082024:	4618      	mov	r0, r3
 8082026:	f7ff fb05 	bl	8081634 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808202a:	4607      	mov	r7, r0
 808202c:	b120      	cbz	r0, 8082038 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808202e:	4621      	mov	r1, r4
 8082030:	4630      	mov	r0, r6
 8082032:	f7ff fe53 	bl	8081cdc <_ZNKSt8functionIFvRKbEEclES1_>
 8082036:	e02e      	b.n	8082096 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082038:	4631      	mov	r1, r6
 808203a:	a801      	add	r0, sp, #4
 808203c:	f7ff ffaf 	bl	8081f9e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082040:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082042:	2010      	movs	r0, #16
 8082044:	f88d 3014 	strb.w	r3, [sp, #20]
 8082048:	f7fe f829 	bl	808009e <_Znwj>
 808204c:	4605      	mov	r5, r0
 808204e:	b1d0      	cbz	r0, 8082086 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082050:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082052:	2014      	movs	r0, #20
 8082054:	f7fe f823 	bl	808009e <_Znwj>
 8082058:	4604      	mov	r4, r0
 808205a:	b178      	cbz	r0, 808207c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808205c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808205e:	4601      	mov	r1, r0
 8082060:	a801      	add	r0, sp, #4
 8082062:	f7ff fe07 	bl	8081c74 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082066:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082068:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808206a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808206c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808206e:	9203      	str	r2, [sp, #12]
 8082070:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082072:	60e3      	str	r3, [r4, #12]
 8082074:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082078:	9204      	str	r2, [sp, #16]
 808207a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808207c:	4b0a      	ldr	r3, [pc, #40]	; (80820a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808207e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082080:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082082:	4b0a      	ldr	r3, [pc, #40]	; (80820ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082084:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082086:	a801      	add	r0, sp, #4
 8082088:	f7ff fd4f 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808208c:	2200      	movs	r2, #0
 808208e:	4629      	mov	r1, r5
 8082090:	4807      	ldr	r0, [pc, #28]	; (80820b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082092:	f7ff fad7 	bl	8081644 <application_thread_invoke>
 8082096:	4630      	mov	r0, r6
 8082098:	f7ff fd47 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808209c:	2110      	movs	r1, #16
 808209e:	4630      	mov	r0, r6
 80820a0:	f001 f945 	bl	808332e <_ZdlPvj>
        }
    }
 80820a4:	b007      	add	sp, #28
 80820a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80820a8:	08081cef 	.word	0x08081cef
 80820ac:	08081fbd 	.word	0x08081fbd
 80820b0:	0808188b 	.word	0x0808188b

080820b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80820b4:	b530      	push	{r4, r5, lr}
 80820b6:	4604      	mov	r4, r0
 80820b8:	b085      	sub	sp, #20
 80820ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80820bc:	4668      	mov	r0, sp
 80820be:	4611      	mov	r1, r2
 80820c0:	f7ff fdba 	bl	8081c38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80820c4:	b17c      	cbz	r4, 80820e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80820c6:	b224      	sxth	r4, r4
 80820c8:	4628      	mov	r0, r5
 80820ca:	b10d      	cbz	r5, 80820d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80820cc:	f002 fb24 	bl	8084718 <strdup>
 80820d0:	9002      	str	r0, [sp, #8]
 80820d2:	a902      	add	r1, sp, #8
 80820d4:	4668      	mov	r0, sp
 80820d6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80820da:	f7ff fe1f 	bl	8081d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80820de:	a802      	add	r0, sp, #8
 80820e0:	f7ff fd3b 	bl	8081b5a <_ZN8particle5ErrorD1Ev>
 80820e4:	e01d      	b.n	8082122 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80820e6:	f04f 0201 	mov.w	r2, #1
 80820ea:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80820ec:	f88d 4008 	strb.w	r4, [sp, #8]
 80820f0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80820f4:	42a3      	cmp	r3, r4
 80820f6:	d103      	bne.n	8082100 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80820f8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80820fc:	2900      	cmp	r1, #0
 80820fe:	d1f7      	bne.n	80820f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082100:	d002      	beq.n	8082108 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082102:	f88d 3008 	strb.w	r3, [sp, #8]
 8082106:	e00c      	b.n	8082122 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8082108:	f110 010c 	adds.w	r1, r0, #12
 808210c:	f04f 0301 	mov.w	r3, #1
 8082110:	bf18      	it	ne
 8082112:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082114:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082118:	3004      	adds	r0, #4
 808211a:	f800 3c03 	strb.w	r3, [r0, #-3]
 808211e:	f7ff ff71 	bl	8082004 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082122:	a801      	add	r0, sp, #4
 8082124:	f7fe f910 	bl	8080348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082128:	b005      	add	sp, #20
 808212a:	bd30      	pop	{r4, r5, pc}

0808212c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808212c:	6800      	ldr	r0, [r0, #0]
 808212e:	f000 b8d4 	b.w	80822da <_ZN7TwoWire4lockEv>

08082132 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8082132:	b510      	push	{r4, lr}
 8082134:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8082136:	6001      	str	r1, [r0, #0]
 8082138:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808213a:	b10a      	cbz	r2, 8082140 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808213c:	f7ff fff6 	bl	808212c <_ZN9FuelGauge4lockEv>
    }
}
 8082140:	4620      	mov	r0, r4
 8082142:	bd10      	pop	{r4, pc}

08082144 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8082144:	b538      	push	{r3, r4, r5, lr}
 8082146:	4604      	mov	r4, r0
 8082148:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808214a:	f001 f885 	bl	8083258 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808214e:	462a      	mov	r2, r5
 8082150:	4601      	mov	r1, r0
 8082152:	4620      	mov	r0, r4
 8082154:	f7ff ffed 	bl	8082132 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8082158:	4620      	mov	r0, r4
 808215a:	bd38      	pop	{r3, r4, r5, pc}

0808215c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808215c:	6800      	ldr	r0, [r0, #0]
 808215e:	f000 b8c5 	b.w	80822ec <_ZN7TwoWire6unlockEv>

08082162 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082162:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082164:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082166:	4604      	mov	r4, r0
{
    if (lock_) {
 8082168:	b10b      	cbz	r3, 808216e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808216a:	f7ff fff7 	bl	808215c <_ZN9FuelGauge6unlockEv>
    }
}
 808216e:	4620      	mov	r0, r4
 8082170:	bd10      	pop	{r4, pc}

08082172 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8082172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082174:	4604      	mov	r4, r0
 8082176:	460f      	mov	r7, r1
 8082178:	4616      	mov	r6, r2
 808217a:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 808217c:	f7ff ffd6 	bl	808212c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8082180:	6820      	ldr	r0, [r4, #0]
 8082182:	2136      	movs	r1, #54	; 0x36
 8082184:	f000 f89b 	bl	80822be <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8082188:	6820      	ldr	r0, [r4, #0]
 808218a:	4639      	mov	r1, r7
 808218c:	6803      	ldr	r3, [r0, #0]
 808218e:	689b      	ldr	r3, [r3, #8]
 8082190:	4798      	blx	r3
    i2c_.endTransmission(true);
 8082192:	2101      	movs	r1, #1
 8082194:	6820      	ldr	r0, [r4, #0]
 8082196:	f000 f895 	bl	80822c4 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808219a:	2202      	movs	r2, #2
 808219c:	2136      	movs	r1, #54	; 0x36
 808219e:	2301      	movs	r3, #1
 80821a0:	6820      	ldr	r0, [r4, #0]
 80821a2:	f000 f883 	bl	80822ac <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80821a6:	6820      	ldr	r0, [r4, #0]
 80821a8:	6803      	ldr	r3, [r0, #0]
 80821aa:	695b      	ldr	r3, [r3, #20]
 80821ac:	4798      	blx	r3
 80821ae:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80821b0:	6820      	ldr	r0, [r4, #0]
 80821b2:	6803      	ldr	r3, [r0, #0]
 80821b4:	695b      	ldr	r3, [r3, #20]
 80821b6:	4798      	blx	r3
 80821b8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80821ba:	4620      	mov	r0, r4
}
 80821bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80821c0:	f7ff bfcc 	b.w	808215c <_ZN9FuelGauge6unlockEv>

080821c4 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80821c4:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80821c6:	2200      	movs	r2, #0
	byte LSB = 0;
 80821c8:	ab02      	add	r3, sp, #8
 80821ca:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80821ce:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80821d2:	2104      	movs	r1, #4
 80821d4:	f10d 0206 	add.w	r2, sp, #6
 80821d8:	f7ff ffcb 	bl	8082172 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80821dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80821e0:	f001 fb44 	bl	808386c <__aeabi_i2d>
 80821e4:	2200      	movs	r2, #0
 80821e6:	4b08      	ldr	r3, [pc, #32]	; (8082208 <_ZN9FuelGauge6getSoCEv+0x44>)
 80821e8:	f001 fba6 	bl	8083938 <__aeabi_dmul>
 80821ec:	f001 fdb6 	bl	8083d5c <__aeabi_d2f>
 80821f0:	4604      	mov	r4, r0
 80821f2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80821f6:	f001 febb 	bl	8083f70 <__aeabi_i2f>
 80821fa:	4601      	mov	r1, r0
 80821fc:	4620      	mov	r0, r4
 80821fe:	f001 fe03 	bl	8083e08 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8082202:	b002      	add	sp, #8
 8082204:	bd10      	pop	{r4, pc}
 8082206:	bf00      	nop
 8082208:	3f700000 	.word	0x3f700000

0808220c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808220c:	4770      	bx	lr

0808220e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808220e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082210:	4606      	mov	r6, r0
 8082212:	4615      	mov	r5, r2
 8082214:	460c      	mov	r4, r1
 8082216:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082218:	42bc      	cmp	r4, r7
 808221a:	d006      	beq.n	808222a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808221c:	6833      	ldr	r3, [r6, #0]
 808221e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082222:	689b      	ldr	r3, [r3, #8]
 8082224:	4630      	mov	r0, r6
 8082226:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082228:	e7f6      	b.n	8082218 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808222a:	4628      	mov	r0, r5
 808222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808222e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808222e:	2200      	movs	r2, #0
 8082230:	7c00      	ldrb	r0, [r0, #16]
 8082232:	f7ff b90f 	b.w	8081454 <HAL_I2C_Write_Data>

08082236 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082236:	2100      	movs	r1, #0
 8082238:	7c00      	ldrb	r0, [r0, #16]
 808223a:	f7ff b913 	b.w	8081464 <HAL_I2C_Available_Data>

0808223e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808223e:	2100      	movs	r1, #0
 8082240:	7c00      	ldrb	r0, [r0, #16]
 8082242:	f7ff b917 	b.w	8081474 <HAL_I2C_Read_Data>

08082246 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082246:	2100      	movs	r1, #0
 8082248:	7c00      	ldrb	r0, [r0, #16]
 808224a:	f7ff b91b 	b.w	8081484 <HAL_I2C_Peek_Data>

0808224e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808224e:	2100      	movs	r1, #0
 8082250:	7c00      	ldrb	r0, [r0, #16]
 8082252:	f7ff b91f 	b.w	8081494 <HAL_I2C_Flush_Data>

08082256 <_ZN7TwoWireD0Ev>:
 8082256:	b510      	push	{r4, lr}
 8082258:	4604      	mov	r4, r0
 808225a:	2114      	movs	r1, #20
 808225c:	f001 f867 	bl	808332e <_ZdlPvj>
 8082260:	4620      	mov	r0, r4
 8082262:	bd10      	pop	{r4, pc}

08082264 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082264:	b510      	push	{r4, lr}
 8082266:	4604      	mov	r4, r0
 8082268:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808226a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808226e:	60a3      	str	r3, [r4, #8]
 8082270:	4b04      	ldr	r3, [pc, #16]	; (8082284 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082272:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082274:	7420      	strb	r0, [r4, #16]
 8082276:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082278:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808227a:	f7ff f91b 	bl	80814b4 <HAL_I2C_Init>

}
 808227e:	4620      	mov	r0, r4
 8082280:	bd10      	pop	{r4, pc}
 8082282:	bf00      	nop
 8082284:	0808544c 	.word	0x0808544c

08082288 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082288:	2300      	movs	r3, #0
 808228a:	461a      	mov	r2, r3
 808228c:	4619      	mov	r1, r3
 808228e:	7c00      	ldrb	r0, [r0, #16]
 8082290:	f7ff b8c0 	b.w	8081414 <HAL_I2C_Begin>

08082294 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082294:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8082296:	2400      	movs	r4, #0
 8082298:	7c00      	ldrb	r0, [r0, #16]
 808229a:	9400      	str	r4, [sp, #0]
 808229c:	f7ff f8c2 	bl	8081424 <HAL_I2C_Request_Data>
  return result;
}
 80822a0:	b2c0      	uxtb	r0, r0
 80822a2:	b002      	add	sp, #8
 80822a4:	bd10      	pop	{r4, pc}

080822a6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80822a6:	2301      	movs	r3, #1
 80822a8:	f7ff bff4 	b.w	8082294 <_ZN7TwoWire11requestFromEhhh>

080822ac <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80822ac:	b2db      	uxtb	r3, r3
 80822ae:	b2d2      	uxtb	r2, r2
 80822b0:	b2c9      	uxtb	r1, r1
 80822b2:	f7ff bfef 	b.w	8082294 <_ZN7TwoWire11requestFromEhhh>

080822b6 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80822b6:	2200      	movs	r2, #0
 80822b8:	7c00      	ldrb	r0, [r0, #16]
 80822ba:	f7ff b8bb 	b.w	8081434 <HAL_I2C_Begin_Transmission>

080822be <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80822be:	b2c9      	uxtb	r1, r1
 80822c0:	f7ff bff9 	b.w	80822b6 <_ZN7TwoWire17beginTransmissionEh>

080822c4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80822c4:	2200      	movs	r2, #0
 80822c6:	7c00      	ldrb	r0, [r0, #16]
 80822c8:	f7ff b8bc 	b.w	8081444 <HAL_I2C_End_Transmission>

080822cc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80822cc:	2101      	movs	r1, #1
 80822ce:	f7ff bff9 	b.w	80822c4 <_ZN7TwoWire15endTransmissionEh>

080822d2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80822d2:	2100      	movs	r1, #0
 80822d4:	7c00      	ldrb	r0, [r0, #16]
 80822d6:	f7ff b8e5 	b.w	80814a4 <HAL_I2C_Is_Enabled>

080822da <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80822da:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80822dc:	2100      	movs	r1, #0
 80822de:	7c00      	ldrb	r0, [r0, #16]
 80822e0:	f7ff f8f0 	bl	80814c4 <HAL_I2C_Acquire>
}
 80822e4:	fab0 f080 	clz	r0, r0
 80822e8:	0940      	lsrs	r0, r0, #5
 80822ea:	bd08      	pop	{r3, pc}

080822ec <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80822ec:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80822ee:	2100      	movs	r1, #0
 80822f0:	7c00      	ldrb	r0, [r0, #16]
 80822f2:	f7ff f8ef 	bl	80814d4 <HAL_I2C_Release>
}
 80822f6:	fab0 f080 	clz	r0, r0
 80822fa:	0940      	lsrs	r0, r0, #5
 80822fc:	bd08      	pop	{r3, pc}

080822fe <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80822fe:	4770      	bx	lr

08082300 <_ZN9IPAddressD0Ev>:
 8082300:	b510      	push	{r4, lr}
 8082302:	4604      	mov	r4, r0
 8082304:	2108      	movs	r1, #8
 8082306:	f001 f812 	bl	808332e <_ZdlPvj>
 808230a:	4620      	mov	r0, r4
 808230c:	bd10      	pop	{r4, pc}

0808230e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808230e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082310:	460f      	mov	r7, r1
 8082312:	f100 0608 	add.w	r6, r0, #8
 8082316:	1d05      	adds	r5, r0, #4
 8082318:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808231a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808231e:	220a      	movs	r2, #10
 8082320:	4638      	mov	r0, r7
 8082322:	f000 faeb 	bl	80828fc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082326:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082328:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808232a:	d007      	beq.n	808233c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808232c:	2c00      	cmp	r4, #0
 808232e:	d0f4      	beq.n	808231a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082330:	212e      	movs	r1, #46	; 0x2e
 8082332:	4638      	mov	r0, r7
 8082334:	f000 fa9f 	bl	8082876 <_ZN5Print5printEc>
 8082338:	4404      	add	r4, r0
 808233a:	e7ee      	b.n	808231a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808233c:	4620      	mov	r0, r4
 808233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082340 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082340:	4a02      	ldr	r2, [pc, #8]	; (808234c <_ZN9IPAddressC1Ev+0xc>)
 8082342:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082344:	2200      	movs	r2, #0
 8082346:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082348:	4770      	bx	lr
 808234a:	bf00      	nop
 808234c:	08085474 	.word	0x08085474

08082350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082350:	4a02      	ldr	r2, [pc, #8]	; (808235c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082352:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082354:	680a      	ldr	r2, [r1, #0]
 8082356:	6042      	str	r2, [r0, #4]
}
 8082358:	4770      	bx	lr
 808235a:	bf00      	nop
 808235c:	08085474 	.word	0x08085474

08082360 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082360:	4a01      	ldr	r2, [pc, #4]	; (8082368 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082362:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082364:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082366:	4770      	bx	lr
 8082368:	08085474 	.word	0x08085474

0808236c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808236c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808236e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082372:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082376:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808237a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808237e:	6041      	str	r1, [r0, #4]
 8082380:	bd10      	pop	{r4, pc}
	...

08082384 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082386:	4d04      	ldr	r5, [pc, #16]	; (8082398 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082388:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808238a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808238e:	9500      	str	r5, [sp, #0]
 8082390:	f7ff ffec 	bl	808236c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082394:	b003      	add	sp, #12
 8082396:	bd30      	pop	{r4, r5, pc}
 8082398:	08085474 	.word	0x08085474

0808239c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808239c:	4a01      	ldr	r2, [pc, #4]	; (80823a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808239e:	4b02      	ldr	r3, [pc, #8]	; (80823a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80823a0:	601a      	str	r2, [r3, #0]
 80823a2:	4770      	bx	lr
 80823a4:	080854f6 	.word	0x080854f6
 80823a8:	20000270 	.word	0x20000270

080823ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80823ac:	2300      	movs	r3, #0
 80823ae:	461a      	mov	r2, r3
 80823b0:	6840      	ldr	r0, [r0, #4]
 80823b2:	f7ff b9cb 	b.w	808174c <network_connect>

080823b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80823b6:	2200      	movs	r2, #0
 80823b8:	2102      	movs	r1, #2
 80823ba:	6840      	ldr	r0, [r0, #4]
 80823bc:	f7ff b9d6 	b.w	808176c <network_disconnect>

080823c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80823c0:	2200      	movs	r2, #0
 80823c2:	4611      	mov	r1, r2
 80823c4:	6840      	ldr	r0, [r0, #4]
 80823c6:	f7ff b9c9 	b.w	808175c <network_connecting>

080823ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80823ca:	2200      	movs	r2, #0
 80823cc:	4611      	mov	r1, r2
 80823ce:	6840      	ldr	r0, [r0, #4]
 80823d0:	f7ff b9d4 	b.w	808177c <network_ready>

080823d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80823d4:	2300      	movs	r3, #0
 80823d6:	461a      	mov	r2, r3
 80823d8:	4619      	mov	r1, r3
 80823da:	6840      	ldr	r0, [r0, #4]
 80823dc:	f7ff b9d6 	b.w	808178c <network_on>

080823e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80823e0:	2300      	movs	r3, #0
 80823e2:	461a      	mov	r2, r3
 80823e4:	4619      	mov	r1, r3
 80823e6:	6840      	ldr	r0, [r0, #4]
 80823e8:	f7ff b9d8 	b.w	808179c <network_off>

080823ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80823ec:	2200      	movs	r2, #0
 80823ee:	f081 0101 	eor.w	r1, r1, #1
 80823f2:	6840      	ldr	r0, [r0, #4]
 80823f4:	f7ff b9da 	b.w	80817ac <network_listen>

080823f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80823f8:	2200      	movs	r2, #0
 80823fa:	6840      	ldr	r0, [r0, #4]
 80823fc:	f7ff b9e6 	b.w	80817cc <network_set_listen_timeout>

08082400 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082400:	2200      	movs	r2, #0
 8082402:	4611      	mov	r1, r2
 8082404:	6840      	ldr	r0, [r0, #4]
 8082406:	f7ff b9e9 	b.w	80817dc <network_get_listen_timeout>

0808240a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808240a:	2200      	movs	r2, #0
 808240c:	4611      	mov	r1, r2
 808240e:	6840      	ldr	r0, [r0, #4]
 8082410:	f7ff b9d4 	b.w	80817bc <network_listening>

08082414 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082416:	4617      	mov	r7, r2
 8082418:	b087      	sub	sp, #28
 808241a:	4605      	mov	r5, r0
    IPAddress addr;
 808241c:	a804      	add	r0, sp, #16
 808241e:	f7ff ff8f 	bl	8082340 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082422:	2600      	movs	r6, #0
 8082424:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082426:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082428:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808242c:	f002 f98f 	bl	808474e <strlen>
 8082430:	4b0a      	ldr	r3, [pc, #40]	; (808245c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082432:	9600      	str	r6, [sp, #0]
 8082434:	b281      	uxth	r1, r0
 8082436:	685b      	ldr	r3, [r3, #4]
 8082438:	4622      	mov	r2, r4
 808243a:	4638      	mov	r0, r7
 808243c:	f7fe ff32 	bl	80812a4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082440:	b120      	cbz	r0, 808244c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082442:	4631      	mov	r1, r6
 8082444:	4628      	mov	r0, r5
 8082446:	f7ff ff8b 	bl	8082360 <_ZN9IPAddressC1Em>
 808244a:	e003      	b.n	8082454 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808244c:	4621      	mov	r1, r4
 808244e:	4628      	mov	r0, r5
 8082450:	f7ff ff7e 	bl	8082350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082454:	4628      	mov	r0, r5
 8082456:	b007      	add	sp, #28
 8082458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808245a:	bf00      	nop
 808245c:	20000240 	.word	0x20000240

08082460 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082460:	4b02      	ldr	r3, [pc, #8]	; (808246c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082462:	4a03      	ldr	r2, [pc, #12]	; (8082470 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082464:	601a      	str	r2, [r3, #0]
 8082466:	2200      	movs	r2, #0
 8082468:	605a      	str	r2, [r3, #4]
 808246a:	4770      	bx	lr
 808246c:	20000274 	.word	0x20000274
 8082470:	08085568 	.word	0x08085568

08082474 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 8082474:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082476:	f000 feef 	bl	8083258 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 808247a:	f7ff ff2a 	bl	80822d2 <_ZN7TwoWire9isEnabledEv>
 808247e:	b918      	cbnz	r0, 8082488 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082480:	f000 feea 	bl	8083258 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8082484:	f7ff ff00 	bl	8082288 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082488:	f000 fee6 	bl	8083258 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 808248c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 8082490:	f7ff bf1f 	b.w	80822d2 <_ZN7TwoWire9isEnabledEv>

08082494 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8082494:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082496:	f000 fedf 	bl	8083258 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808249a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808249e:	f7ff bf1c 	b.w	80822da <_ZN7TwoWire4lockEv>

080824a2 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80824a2:	b510      	push	{r4, lr}
 80824a4:	4604      	mov	r4, r0
    lock_(_lock)
 80824a6:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80824a8:	b109      	cbz	r1, 80824ae <_ZN4PMICC1Eb+0xc>
        lock();
 80824aa:	f7ff fff3 	bl	8082494 <_ZN4PMIC4lockEv>
    }
}
 80824ae:	4620      	mov	r0, r4
 80824b0:	bd10      	pop	{r4, pc}

080824b2 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 80824b2:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80824b4:	f000 fed0 	bl	8083258 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 80824b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 80824bc:	f7ff bf16 	b.w	80822ec <_ZN7TwoWire6unlockEv>

080824c0 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80824c0:	b510      	push	{r4, lr}
{
    if (lock_) {
 80824c2:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80824c4:	4604      	mov	r4, r0
{
    if (lock_) {
 80824c6:	b10b      	cbz	r3, 80824cc <_ZN4PMICD1Ev+0xc>
        unlock();
 80824c8:	f7ff fff3 	bl	80824b2 <_ZN4PMIC6unlockEv>
    }
}
 80824cc:	4620      	mov	r0, r4
 80824ce:	bd10      	pop	{r4, pc}

080824d0 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80824d0:	b510      	push	{r4, lr}
 80824d2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80824d4:	6800      	ldr	r0, [r0, #0]
 80824d6:	f7ff ffec 	bl	80824b2 <_ZN4PMIC6unlockEv>
 80824da:	4620      	mov	r0, r4
 80824dc:	bd10      	pop	{r4, pc}

080824de <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80824de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80824e0:	ac02      	add	r4, sp, #8
 80824e2:	460d      	mov	r5, r1
 80824e4:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80824e8:	f7ff ffd4 	bl	8082494 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80824ec:	f000 feb4 	bl	8083258 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80824f0:	216b      	movs	r1, #107	; 0x6b
 80824f2:	f7ff fee4 	bl	80822be <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80824f6:	f000 feaf 	bl	8083258 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 80824fa:	6803      	ldr	r3, [r0, #0]
 80824fc:	4629      	mov	r1, r5
 80824fe:	689b      	ldr	r3, [r3, #8]
 8082500:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082502:	f000 fea9 	bl	8083258 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8082506:	2101      	movs	r1, #1
 8082508:	f7ff fedc 	bl	80822c4 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808250c:	f000 fea4 	bl	8083258 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8082510:	2301      	movs	r3, #1
 8082512:	461a      	mov	r2, r3
 8082514:	216b      	movs	r1, #107	; 0x6b
 8082516:	f7ff fec9 	bl	80822ac <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808251a:	f000 fe9d 	bl	8083258 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808251e:	6803      	ldr	r3, [r0, #0]
 8082520:	695b      	ldr	r3, [r3, #20]
 8082522:	4798      	blx	r3
 8082524:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8082526:	4620      	mov	r0, r4
 8082528:	f7ff ffd2 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 808252c:	b2e8      	uxtb	r0, r5
 808252e:	b003      	add	sp, #12
 8082530:	bd30      	pop	{r4, r5, pc}

08082532 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8082532:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082534:	ac02      	add	r4, sp, #8
 8082536:	4615      	mov	r5, r2
 8082538:	460e      	mov	r6, r1
 808253a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808253e:	f7ff ffa9 	bl	8082494 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082542:	f000 fe89 	bl	8083258 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082546:	216b      	movs	r1, #107	; 0x6b
 8082548:	f7ff feb9 	bl	80822be <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808254c:	f000 fe84 	bl	8083258 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8082550:	6803      	ldr	r3, [r0, #0]
 8082552:	4631      	mov	r1, r6
 8082554:	689b      	ldr	r3, [r3, #8]
 8082556:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082558:	f000 fe7e 	bl	8083258 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 808255c:	6803      	ldr	r3, [r0, #0]
 808255e:	4629      	mov	r1, r5
 8082560:	689b      	ldr	r3, [r3, #8]
 8082562:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082564:	f000 fe78 	bl	8083258 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8082568:	2101      	movs	r1, #1
 808256a:	f7ff feab 	bl	80822c4 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 808256e:	4620      	mov	r0, r4
 8082570:	f7ff ffae 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8082574:	b002      	add	sp, #8
 8082576:	bd70      	pop	{r4, r5, r6, pc}

08082578 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 8082578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808257a:	4604      	mov	r4, r0
 808257c:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808257e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082580:	f7ff ff88 	bl	8082494 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8082584:	2100      	movs	r1, #0
 8082586:	4620      	mov	r0, r4
 8082588:	f7ff ffa9 	bl	80824de <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808258c:	f241 1358 	movw	r3, #4440	; 0x1158
 8082590:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8082592:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8082596:	d05b      	beq.n	8082650 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 8082598:	d820      	bhi.n	80825dc <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 808259a:	f241 0318 	movw	r3, #4120	; 0x1018
 808259e:	429d      	cmp	r5, r3
 80825a0:	d04d      	beq.n	808263e <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 80825a2:	d80c      	bhi.n	80825be <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 80825a4:	f640 7378 	movw	r3, #3960	; 0xf78
 80825a8:	429d      	cmp	r5, r3
 80825aa:	d042      	beq.n	8082632 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 80825ac:	f640 73c8 	movw	r3, #4040	; 0xfc8
 80825b0:	429d      	cmp	r5, r3
 80825b2:	d041      	beq.n	8082638 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 80825b4:	f640 7328 	movw	r3, #3880	; 0xf28
 80825b8:	429d      	cmp	r5, r3
 80825ba:	d160      	bne.n	808267e <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 80825bc:	e059      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 80825be:	f241 03b8 	movw	r3, #4280	; 0x10b8
 80825c2:	429d      	cmp	r5, r3
 80825c4:	d03e      	beq.n	8082644 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 80825c6:	f241 1308 	movw	r3, #4360	; 0x1108
 80825ca:	429d      	cmp	r5, r3
 80825cc:	d03d      	beq.n	808264a <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 80825ce:	f241 0368 	movw	r3, #4200	; 0x1068
 80825d2:	429d      	cmp	r5, r3
 80825d4:	d153      	bne.n	808267e <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 80825d6:	f042 0220 	orr.w	r2, r2, #32
 80825da:	e04a      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80825dc:	f241 2398 	movw	r3, #4760	; 0x1298
 80825e0:	429d      	cmp	r5, r3
 80825e2:	d03e      	beq.n	8082662 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 80825e4:	d80e      	bhi.n	8082604 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 80825e6:	f241 13f8 	movw	r3, #4600	; 0x11f8
 80825ea:	429d      	cmp	r5, r3
 80825ec:	d033      	beq.n	8082656 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 80825ee:	f241 2348 	movw	r3, #4680	; 0x1248
 80825f2:	429d      	cmp	r5, r3
 80825f4:	d032      	beq.n	808265c <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 80825f6:	f241 13a8 	movw	r3, #4520	; 0x11a8
 80825fa:	429d      	cmp	r5, r3
 80825fc:	d13f      	bne.n	808267e <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 80825fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8082602:	e036      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082604:	f241 3338 	movw	r3, #4920	; 0x1338
 8082608:	429d      	cmp	r5, r3
 808260a:	d02d      	beq.n	8082668 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 808260c:	d806      	bhi.n	808261c <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 808260e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8082612:	429d      	cmp	r5, r3
 8082614:	d133      	bne.n	808267e <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8082616:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 808261a:	e02a      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808261c:	f241 3388 	movw	r3, #5000	; 0x1388
 8082620:	429d      	cmp	r5, r3
 8082622:	d024      	beq.n	808266e <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8082624:	f241 33d8 	movw	r3, #5080	; 0x13d8
 8082628:	429d      	cmp	r5, r3
 808262a:	d128      	bne.n	808267e <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 808262c:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8082630:	e01f      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8082632:	f042 0208 	orr.w	r2, r2, #8
 8082636:	e01c      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 8082638:	f042 0210 	orr.w	r2, r2, #16
 808263c:	e019      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 808263e:	f042 0218 	orr.w	r2, r2, #24
 8082642:	e016      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8082644:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8082648:	e013      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 808264a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 808264e:	e010      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 8082650:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8082654:	e00d      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 8082656:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 808265a:	e00a      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 808265c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8082660:	e007      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 8082662:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8082666:	e004      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 8082668:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 808266c:	e001      	b.n	8082672 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 808266e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8082672:	4620      	mov	r0, r4
 8082674:	2100      	movs	r1, #0
 8082676:	f7ff ff5c 	bl	8082532 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808267a:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 808267c:	e000      	b.n	8082680 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 808267e:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082680:	a801      	add	r0, sp, #4
 8082682:	f7ff ff25 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082686:	4620      	mov	r0, r4
 8082688:	b003      	add	sp, #12
 808268a:	bd30      	pop	{r4, r5, pc}

0808268c <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808268c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808268e:	4604      	mov	r4, r0
 8082690:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082692:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082694:	f7ff fefe 	bl	8082494 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8082698:	2100      	movs	r1, #0
 808269a:	4620      	mov	r0, r4
 808269c:	f7ff ff1f 	bl	80824de <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 80826a0:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 80826a4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 80826a8:	d023      	beq.n	80826f2 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 80826aa:	d807      	bhi.n	80826bc <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 80826ac:	2d96      	cmp	r5, #150	; 0x96
 80826ae:	d01a      	beq.n	80826e6 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 80826b0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 80826b4:	d01a      	beq.n	80826ec <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 80826b6:	2d64      	cmp	r5, #100	; 0x64
 80826b8:	d129      	bne.n	808270e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 80826ba:	e022      	b.n	8082702 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 80826bc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80826c0:	429d      	cmp	r5, r3
 80826c2:	d019      	beq.n	80826f8 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 80826c4:	d805      	bhi.n	80826d2 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 80826c6:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80826ca:	d120      	bne.n	808270e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 80826cc:	f042 0204 	orr.w	r2, r2, #4
 80826d0:	e017      	b.n	8082702 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 80826d2:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80826d6:	d012      	beq.n	80826fe <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 80826d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80826dc:	429d      	cmp	r5, r3
 80826de:	d116      	bne.n	808270e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 80826e0:	f042 0207 	orr.w	r2, r2, #7
 80826e4:	e00d      	b.n	8082702 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 80826e6:	f042 0201 	orr.w	r2, r2, #1
 80826ea:	e00a      	b.n	8082702 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 80826ec:	f042 0202 	orr.w	r2, r2, #2
 80826f0:	e007      	b.n	8082702 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 80826f2:	f042 0203 	orr.w	r2, r2, #3
 80826f6:	e004      	b.n	8082702 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 80826f8:	f042 0205 	orr.w	r2, r2, #5
 80826fc:	e001      	b.n	8082702 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 80826fe:	f042 0206 	orr.w	r2, r2, #6
 8082702:	4620      	mov	r0, r4
 8082704:	2100      	movs	r1, #0
 8082706:	f7ff ff14 	bl	8082532 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808270a:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 808270c:	e000      	b.n	8082710 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 808270e:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8082710:	a801      	add	r0, sp, #4
 8082712:	f7ff fedd 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082716:	4620      	mov	r0, r4
 8082718:	b003      	add	sp, #12
 808271a:	bd30      	pop	{r4, r5, pc}

0808271c <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
 808271c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808271e:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082720:	ac02      	add	r4, sp, #8
 8082722:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082726:	f7ff feb5 	bl	8082494 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808272a:	2101      	movs	r1, #1
 808272c:	4628      	mov	r0, r5
 808272e:	f7ff fed6 	bl	80824de <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
 8082732:	2101      	movs	r1, #1
 8082734:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
 8082738:	4628      	mov	r0, r5
 808273a:	f7ff fefa 	bl	8082532 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
 808273e:	4620      	mov	r0, r4
 8082740:	f7ff fec6 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
 8082744:	2001      	movs	r0, #1
 8082746:	b003      	add	sp, #12
 8082748:	bd30      	pop	{r4, r5, pc}

0808274a <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808274a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808274c:	460c      	mov	r4, r1
 808274e:	4617      	mov	r7, r2
 8082750:	4605      	mov	r5, r0
 8082752:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082754:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082756:	f7ff fe9d 	bl	8082494 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 808275a:	2c00      	cmp	r4, #0
 808275c:	bf0c      	ite	eq
 808275e:	2400      	moveq	r4, #0
 8082760:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8082762:	b117      	cbz	r7, 808276a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8082764:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8082768:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 808276a:	b10e      	cbz	r6, 8082770 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 808276c:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8082770:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8082774:	b10b      	cbz	r3, 808277a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8082776:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808277a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808277e:	b10b      	cbz	r3, 8082784 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8082780:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8082784:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8082788:	b10b      	cbz	r3, 808278e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 808278a:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808278e:	2102      	movs	r1, #2
 8082790:	4628      	mov	r0, r5
 8082792:	f7ff fea4 	bl	80824de <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8082796:	f000 0201 	and.w	r2, r0, #1
 808279a:	4322      	orrs	r2, r4
 808279c:	2102      	movs	r1, #2
 808279e:	4628      	mov	r0, r5
 80827a0:	f7ff fec7 	bl	8082532 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 80827a4:	a801      	add	r0, sp, #4
 80827a6:	f7ff fe93 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 80827aa:	2001      	movs	r0, #1
 80827ac:	b003      	add	sp, #12
 80827ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080827b0 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 80827b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80827b2:	4604      	mov	r4, r0
 80827b4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80827b6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80827b8:	f7ff fe6c 	bl	8082494 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 80827bc:	2104      	movs	r1, #4
 80827be:	4620      	mov	r0, r4
 80827c0:	f7ff fe8d 	bl	80824de <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 80827c4:	f241 0310 	movw	r3, #4112	; 0x1010
 80827c8:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 80827ca:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 80827ce:	d006      	beq.n	80827de <_ZN4PMIC16setChargeVoltageEt+0x2e>
 80827d0:	f241 0370 	movw	r3, #4208	; 0x1070
 80827d4:	429d      	cmp	r5, r3
 80827d6:	d10a      	bne.n	80827ee <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80827d8:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 80827dc:	e001      	b.n	80827e2 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 80827de:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80827e2:	4620      	mov	r0, r4
 80827e4:	2104      	movs	r1, #4
 80827e6:	f7ff fea4 	bl	8082532 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80827ea:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 80827ec:	e000      	b.n	80827f0 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 80827ee:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 80827f0:	a801      	add	r0, sp, #4
 80827f2:	f7ff fe6d 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80827f6:	4620      	mov	r0, r4
 80827f8:	b003      	add	sp, #12
 80827fa:	bd30      	pop	{r4, r5, pc}

080827fc <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 80827fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80827fe:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082800:	ac02      	add	r4, sp, #8
 8082802:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082806:	f7ff fe45 	bl	8082494 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 808280a:	2105      	movs	r1, #5
 808280c:	4628      	mov	r0, r5
 808280e:	f7ff fe66 	bl	80824de <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 8082812:	2105      	movs	r1, #5
 8082814:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 8082818:	4628      	mov	r0, r5
 808281a:	f7ff fe8a 	bl	8082532 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 808281e:	4620      	mov	r0, r4
 8082820:	f7ff fe56 	bl	80824d0 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 8082824:	2001      	movs	r0, #1
 8082826:	b003      	add	sp, #12
 8082828:	bd30      	pop	{r4, r5, pc}

0808282a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808282a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808282c:	4606      	mov	r6, r0
 808282e:	460d      	mov	r5, r1
 8082830:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082832:	2400      	movs	r4, #0
  while (size--) {
 8082834:	42bd      	cmp	r5, r7
 8082836:	d00c      	beq.n	8082852 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082838:	6833      	ldr	r3, [r6, #0]
 808283a:	f815 1b01 	ldrb.w	r1, [r5], #1
 808283e:	689b      	ldr	r3, [r3, #8]
 8082840:	4630      	mov	r0, r6
 8082842:	4798      	blx	r3
     if (chunk>=0)
 8082844:	2800      	cmp	r0, #0
 8082846:	db01      	blt.n	808284c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082848:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808284a:	e7f3      	b.n	8082834 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808284c:	2c00      	cmp	r4, #0
 808284e:	bf08      	it	eq
 8082850:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082852:	4620      	mov	r0, r4
 8082854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082856 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082856:	b570      	push	{r4, r5, r6, lr}
 8082858:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808285a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808285c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 808285e:	b149      	cbz	r1, 8082874 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082860:	f001 ff75 	bl	808474e <strlen>
 8082864:	682b      	ldr	r3, [r5, #0]
 8082866:	4602      	mov	r2, r0
 8082868:	4621      	mov	r1, r4
 808286a:	4628      	mov	r0, r5
    }
 808286c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082870:	68db      	ldr	r3, [r3, #12]
 8082872:	4718      	bx	r3
    }
 8082874:	bd70      	pop	{r4, r5, r6, pc}

08082876 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082876:	6803      	ldr	r3, [r0, #0]
 8082878:	689b      	ldr	r3, [r3, #8]
 808287a:	4718      	bx	r3

0808287c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808287c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808287e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082880:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082882:	f7ff fff8 	bl	8082876 <_ZN5Print5printEc>
  n += print('\n');
 8082886:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8082888:	4604      	mov	r4, r0
  n += print('\n');
 808288a:	4628      	mov	r0, r5
 808288c:	f7ff fff3 	bl	8082876 <_ZN5Print5printEc>
  return n;
}
 8082890:	4420      	add	r0, r4
 8082892:	bd38      	pop	{r3, r4, r5, pc}

08082894 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082894:	b538      	push	{r3, r4, r5, lr}
 8082896:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8082898:	f7ff ffdd 	bl	8082856 <_ZN5Print5writeEPKc>
 808289c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808289e:	4628      	mov	r0, r5
 80828a0:	f7ff ffec 	bl	808287c <_ZN5Print7printlnEv>
  return n;
}
 80828a4:	4420      	add	r0, r4
 80828a6:	bd38      	pop	{r3, r4, r5, pc}

080828a8 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80828a8:	2a01      	cmp	r2, #1
 80828aa:	bf98      	it	ls
 80828ac:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80828ae:	b530      	push	{r4, r5, lr}
 80828b0:	460b      	mov	r3, r1
 80828b2:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80828b4:	2100      	movs	r1, #0
 80828b6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80828ba:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80828be:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80828c2:	fb05 3312 	mls	r3, r5, r2, r3
 80828c6:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80828c8:	2b09      	cmp	r3, #9
 80828ca:	bf94      	ite	ls
 80828cc:	3330      	addls	r3, #48	; 0x30
 80828ce:	3337      	addhi	r3, #55	; 0x37
 80828d0:	b2db      	uxtb	r3, r3
 80828d2:	4621      	mov	r1, r4
 80828d4:	f804 3901 	strb.w	r3, [r4], #-1
 80828d8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80828da:	2d00      	cmp	r5, #0
 80828dc:	d1ef      	bne.n	80828be <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80828de:	f7ff ffba 	bl	8082856 <_ZN5Print5writeEPKc>
}
 80828e2:	b00b      	add	sp, #44	; 0x2c
 80828e4:	bd30      	pop	{r4, r5, pc}

080828e6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80828e6:	b410      	push	{r4}
  if (base == 0) return write(n);
 80828e8:	b922      	cbnz	r2, 80828f4 <_ZN5Print5printEmi+0xe>
 80828ea:	6803      	ldr	r3, [r0, #0]
 80828ec:	b2c9      	uxtb	r1, r1
 80828ee:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80828f0:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80828f2:	4718      	bx	r3
  else return printNumber(n, base);
 80828f4:	b2d2      	uxtb	r2, r2
}
 80828f6:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80828f8:	f7ff bfd6 	b.w	80828a8 <_ZN5Print11printNumberEmh>

080828fc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80828fc:	f7ff bff3 	b.w	80828e6 <_ZN5Print5printEmi>

08082900 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8082900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082904:	4607      	mov	r7, r0
 8082906:	460e      	mov	r6, r1
  if (base == 0) {
 8082908:	4615      	mov	r5, r2
 808290a:	b92a      	cbnz	r2, 8082918 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808290c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8082910:	6803      	ldr	r3, [r0, #0]
 8082912:	b2c9      	uxtb	r1, r1
 8082914:	689b      	ldr	r3, [r3, #8]
 8082916:	4718      	bx	r3
  } else if (base == 10) {
 8082918:	2a0a      	cmp	r2, #10
 808291a:	d102      	bne.n	8082922 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808291c:	2900      	cmp	r1, #0
 808291e:	da01      	bge.n	8082924 <_ZN5Print5printEli+0x24>
 8082920:	e004      	b.n	808292c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082922:	b2d2      	uxtb	r2, r2
  }
}
 8082924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082928:	f7ff bfbe 	b.w	80828a8 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808292c:	212d      	movs	r1, #45	; 0x2d
 808292e:	f7ff ffa2 	bl	8082876 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8082932:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082934:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8082936:	4271      	negs	r1, r6
 8082938:	4638      	mov	r0, r7
 808293a:	f7ff ffb5 	bl	80828a8 <_ZN5Print11printNumberEmh>
 808293e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082944 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8082944:	f7ff bfdc 	b.w	8082900 <_ZN5Print5printEli>

08082948 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082948:	b510      	push	{r4, lr}
 808294a:	4604      	mov	r4, r0
 808294c:	f7ff f8ed 	bl	8081b2a <_ZNSt14_Function_baseD1Ev>
 8082950:	4620      	mov	r0, r4
 8082952:	bd10      	pop	{r4, pc}

08082954 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082954:	4803      	ldr	r0, [pc, #12]	; (8082964 <_GLOBAL__sub_I_RGB+0x10>)
 8082956:	2300      	movs	r3, #0
 8082958:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808295a:	4a03      	ldr	r2, [pc, #12]	; (8082968 <_GLOBAL__sub_I_RGB+0x14>)
 808295c:	4903      	ldr	r1, [pc, #12]	; (808296c <_GLOBAL__sub_I_RGB+0x18>)
 808295e:	f000 bce1 	b.w	8083324 <__aeabi_atexit>
 8082962:	bf00      	nop
 8082964:	2000027c 	.word	0x2000027c
 8082968:	2000014c 	.word	0x2000014c
 808296c:	08082949 	.word	0x08082949

08082970 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082970:	4770      	bx	lr

08082972 <_ZN8SPIClassD0Ev>:
 8082972:	b510      	push	{r4, lr}
 8082974:	4604      	mov	r4, r0
 8082976:	2110      	movs	r1, #16
 8082978:	f000 fcd9 	bl	808332e <_ZdlPvj>
 808297c:	4620      	mov	r0, r4
 808297e:	bd10      	pop	{r4, pc}

08082980 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082980:	b570      	push	{r4, r5, r6, lr}
 8082982:	4604      	mov	r4, r0
 8082984:	460e      	mov	r6, r1
 8082986:	4b07      	ldr	r3, [pc, #28]	; (80829a4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8082988:	2500      	movs	r5, #0
 808298a:	6003      	str	r3, [r0, #0]
 808298c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082990:	f7fe fca0 	bl	80812d4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082994:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8082996:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082998:	f7fe fda4 	bl	80814e4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 808299c:	60a5      	str	r5, [r4, #8]
}
 808299e:	4620      	mov	r0, r4
 80829a0:	bd70      	pop	{r4, r5, r6, pc}
 80829a2:	bf00      	nop
 80829a4:	0808559c 	.word	0x0808559c

080829a8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80829a8:	7900      	ldrb	r0, [r0, #4]
 80829aa:	f7fe bda3 	b.w	80814f4 <HAL_SPI_Is_Enabled>

080829ae <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80829ae:	b510      	push	{r4, lr}
 80829b0:	4604      	mov	r4, r0
{
	free(buffer);
 80829b2:	6800      	ldr	r0, [r0, #0]
 80829b4:	f7fe ff22 	bl	80817fc <free>
}
 80829b8:	4620      	mov	r0, r4
 80829ba:	bd10      	pop	{r4, pc}

080829bc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80829bc:	b510      	push	{r4, lr}
 80829be:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80829c0:	6800      	ldr	r0, [r0, #0]
 80829c2:	b108      	cbz	r0, 80829c8 <_ZN6String10invalidateEv+0xc>
 80829c4:	f7fe ff1a 	bl	80817fc <free>
	buffer = NULL;
 80829c8:	2300      	movs	r3, #0
 80829ca:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80829cc:	60a3      	str	r3, [r4, #8]
 80829ce:	6063      	str	r3, [r4, #4]
 80829d0:	bd10      	pop	{r4, pc}

080829d2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80829d2:	b538      	push	{r3, r4, r5, lr}
 80829d4:	4604      	mov	r4, r0
 80829d6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80829d8:	6800      	ldr	r0, [r0, #0]
 80829da:	3101      	adds	r1, #1
 80829dc:	f7fe ff16 	bl	808180c <realloc>
	if (newbuffer) {
 80829e0:	b110      	cbz	r0, 80829e8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80829e2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80829e6:	2001      	movs	r0, #1
	}
	return 0;
}
 80829e8:	bd38      	pop	{r3, r4, r5, pc}

080829ea <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80829ea:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80829ec:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80829ee:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80829f0:	b113      	cbz	r3, 80829f8 <_ZN6String7reserveEj+0xe>
 80829f2:	6843      	ldr	r3, [r0, #4]
 80829f4:	428b      	cmp	r3, r1
 80829f6:	d207      	bcs.n	8082a08 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80829f8:	4620      	mov	r0, r4
 80829fa:	f7ff ffea 	bl	80829d2 <_ZN6String12changeBufferEj>
 80829fe:	b120      	cbz	r0, 8082a0a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082a00:	68a3      	ldr	r3, [r4, #8]
 8082a02:	b90b      	cbnz	r3, 8082a08 <_ZN6String7reserveEj+0x1e>
 8082a04:	6822      	ldr	r2, [r4, #0]
 8082a06:	7013      	strb	r3, [r2, #0]
 8082a08:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082a0a:	bd10      	pop	{r4, pc}

08082a0c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082a0c:	b570      	push	{r4, r5, r6, lr}
 8082a0e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082a10:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082a12:	4604      	mov	r4, r0
 8082a14:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082a16:	f7ff ffe8 	bl	80829ea <_ZN6String7reserveEj>
 8082a1a:	b918      	cbnz	r0, 8082a24 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082a1c:	4620      	mov	r0, r4
 8082a1e:	f7ff ffcd 	bl	80829bc <_ZN6String10invalidateEv>
		return *this;
 8082a22:	e009      	b.n	8082a38 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082a24:	462a      	mov	r2, r5
 8082a26:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082a28:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082a2a:	6820      	ldr	r0, [r4, #0]
 8082a2c:	f001 fe26 	bl	808467c <memcpy>
	buffer[len] = 0;
 8082a30:	6822      	ldr	r2, [r4, #0]
 8082a32:	68a3      	ldr	r3, [r4, #8]
 8082a34:	2100      	movs	r1, #0
 8082a36:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082a38:	4620      	mov	r0, r4
 8082a3a:	bd70      	pop	{r4, r5, r6, pc}

08082a3c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082a3c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082a3e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082a40:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082a42:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082a44:	6043      	str	r3, [r0, #4]
	len = 0;
 8082a46:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082a48:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082a4a:	460d      	mov	r5, r1
 8082a4c:	b139      	cbz	r1, 8082a5e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082a4e:	4608      	mov	r0, r1
 8082a50:	f001 fe7d 	bl	808474e <strlen>
 8082a54:	4629      	mov	r1, r5
 8082a56:	4602      	mov	r2, r0
 8082a58:	4620      	mov	r0, r4
 8082a5a:	f7ff ffd7 	bl	8082a0c <_ZN6String4copyEPKcj>
}
 8082a5e:	4620      	mov	r0, r4
 8082a60:	bd38      	pop	{r3, r4, r5, pc}

08082a62 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082a62:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082a64:	b510      	push	{r4, lr}
 8082a66:	460b      	mov	r3, r1
 8082a68:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082a6a:	d007      	beq.n	8082a7c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082a6c:	6809      	ldr	r1, [r1, #0]
 8082a6e:	b119      	cbz	r1, 8082a78 <_ZN6StringaSERKS_+0x16>
 8082a70:	689a      	ldr	r2, [r3, #8]
 8082a72:	f7ff ffcb 	bl	8082a0c <_ZN6String4copyEPKcj>
 8082a76:	e001      	b.n	8082a7c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8082a78:	f7ff ffa0 	bl	80829bc <_ZN6String10invalidateEv>

	return *this;
}
 8082a7c:	4620      	mov	r0, r4
 8082a7e:	bd10      	pop	{r4, pc}

08082a80 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082a80:	b510      	push	{r4, lr}
 8082a82:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082a84:	2300      	movs	r3, #0
 8082a86:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082a88:	6043      	str	r3, [r0, #4]
	len = 0;
 8082a8a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082a8c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082a8e:	f7ff ffe8 	bl	8082a62 <_ZN6StringaSERKS_>
}
 8082a92:	4620      	mov	r0, r4
 8082a94:	bd10      	pop	{r4, pc}

08082a96 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082a96:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082a98:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082a9a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082a9c:	b912      	cbnz	r2, 8082aa4 <_ZNK6String6equalsEPKc+0xe>
 8082a9e:	b919      	cbnz	r1, 8082aa8 <_ZNK6String6equalsEPKc+0x12>
 8082aa0:	2001      	movs	r0, #1
 8082aa2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082aa4:	b911      	cbnz	r1, 8082aac <_ZNK6String6equalsEPKc+0x16>
 8082aa6:	6803      	ldr	r3, [r0, #0]
 8082aa8:	7818      	ldrb	r0, [r3, #0]
 8082aaa:	e002      	b.n	8082ab2 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082aac:	6800      	ldr	r0, [r0, #0]
 8082aae:	f001 fe21 	bl	80846f4 <strcmp>
 8082ab2:	fab0 f080 	clz	r0, r0
 8082ab6:	0940      	lsrs	r0, r0, #5
}
 8082ab8:	bd08      	pop	{r3, pc}

08082aba <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082aba:	b570      	push	{r4, r5, r6, lr}
 8082abc:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082abe:	b19a      	cbz	r2, 8082ae8 <_ZNK6String8getBytesEPhjj+0x2e>
 8082ac0:	b191      	cbz	r1, 8082ae8 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8082ac2:	6885      	ldr	r5, [r0, #8]
 8082ac4:	429d      	cmp	r5, r3
 8082ac6:	d802      	bhi.n	8082ace <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082ac8:	2300      	movs	r3, #0
 8082aca:	700b      	strb	r3, [r1, #0]
		return;
 8082acc:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082ace:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082ad0:	1aed      	subs	r5, r5, r3
 8082ad2:	42ac      	cmp	r4, r5
 8082ad4:	bf28      	it	cs
 8082ad6:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082ad8:	6801      	ldr	r1, [r0, #0]
 8082ada:	4622      	mov	r2, r4
 8082adc:	4419      	add	r1, r3
 8082ade:	4630      	mov	r0, r6
 8082ae0:	f001 fe52 	bl	8084788 <strncpy>
	buf[n] = 0;
 8082ae4:	2300      	movs	r3, #0
 8082ae6:	5533      	strb	r3, [r6, r4]
 8082ae8:	bd70      	pop	{r4, r5, r6, pc}

08082aea <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082aea:	4601      	mov	r1, r0
 8082aec:	2200      	movs	r2, #0
 8082aee:	208c      	movs	r0, #140	; 0x8c
 8082af0:	f7fe bc00 	b.w	80812f4 <HAL_Core_System_Reset_Ex>

08082af4 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8082af4:	2000      	movs	r0, #0
 8082af6:	f7ff bff8 	b.w	8082aea <_ZN11SystemClass5resetEm>
	...

08082afc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082afc:	b510      	push	{r4, lr}
 8082afe:	4604      	mov	r4, r0
 8082b00:	4608      	mov	r0, r1
 8082b02:	4611      	mov	r1, r2
 8082b04:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8082b06:	2300      	movs	r3, #0
 8082b08:	f7fe fd84 	bl	8081614 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8082b0c:	4b06      	ldr	r3, [pc, #24]	; (8082b28 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8082b0e:	2200      	movs	r2, #0
 8082b10:	701a      	strb	r2, [r3, #0]
 8082b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082b16:	8058      	strh	r0, [r3, #2]
 8082b18:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8082b1a:	681a      	ldr	r2, [r3, #0]
 8082b1c:	889b      	ldrh	r3, [r3, #4]
 8082b1e:	6022      	str	r2, [r4, #0]
 8082b20:	80a3      	strh	r3, [r4, #4]
}
 8082b22:	4620      	mov	r0, r4
 8082b24:	bd10      	pop	{r4, pc}
 8082b26:	bf00      	nop
 8082b28:	2000028c 	.word	0x2000028c

08082b2c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082b30:	4b03      	ldr	r3, [pc, #12]	; (8082b40 <_GLOBAL__sub_I_System+0x14>)
 8082b32:	2000      	movs	r0, #0
 8082b34:	7018      	strb	r0, [r3, #0]
 8082b36:	8058      	strh	r0, [r3, #2]
 8082b38:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082b3a:	f7fe bd5b 	b.w	80815f4 <set_system_mode>
 8082b3e:	bf00      	nop
 8082b40:	2000028c 	.word	0x2000028c

08082b44 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8082b46:	4b14      	ldr	r3, [pc, #80]	; (8082b98 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082b48:	4f14      	ldr	r7, [pc, #80]	; (8082b9c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082b4a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8082b4c:	4b14      	ldr	r3, [pc, #80]	; (8082ba0 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082b4e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8082b50:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8082b52:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8082b54:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8082b56:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082b58:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082b5a:	d01b      	beq.n	8082b94 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082b5c:	a80a      	add	r0, sp, #40	; 0x28
 8082b5e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082b62:	f001 fc93 	bl	808448c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082b66:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082b68:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8082b6a:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082b6c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082b70:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082b7a:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082b7e:	4c09      	ldr	r4, [pc, #36]	; (8082ba4 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082b80:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082b84:	ad01      	add	r5, sp, #4
 8082b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082b8e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082b90:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082b94:	b00b      	add	sp, #44	; 0x2c
 8082b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082b98:	200002c4 	.word	0x200002c4
 8082b9c:	200002c0 	.word	0x200002c0
 8082ba0:	200002bc 	.word	0x200002bc
 8082ba4:	20000294 	.word	0x20000294

08082ba8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8082ba8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082baa:	2000      	movs	r0, #0
 8082bac:	f7fe fdbe 	bl	808172c <spark_sync_time_pending>
 8082bb0:	b128      	cbz	r0, 8082bbe <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082bb2:	f7fe fd93 	bl	80816dc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082bb6:	f080 0001 	eor.w	r0, r0, #1
 8082bba:	b2c0      	uxtb	r0, r0
 8082bbc:	bd08      	pop	{r3, pc}
 8082bbe:	2001      	movs	r0, #1
    }
 8082bc0:	bd08      	pop	{r3, pc}
	...

08082bc4 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082bc4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082bc6:	4909      	ldr	r1, [pc, #36]	; (8082bec <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082bc8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082bca:	f001 fbc3 	bl	8084354 <__aeabi_fcmplt>
 8082bce:	b960      	cbnz	r0, 8082bea <_ZN9TimeClass4zoneEf+0x26>
 8082bd0:	4907      	ldr	r1, [pc, #28]	; (8082bf0 <_ZN9TimeClass4zoneEf+0x2c>)
 8082bd2:	4620      	mov	r0, r4
 8082bd4:	f001 fbdc 	bl	8084390 <__aeabi_fcmpgt>
 8082bd8:	b938      	cbnz	r0, 8082bea <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8082bda:	4906      	ldr	r1, [pc, #24]	; (8082bf4 <_ZN9TimeClass4zoneEf+0x30>)
 8082bdc:	4620      	mov	r0, r4
 8082bde:	f001 fa1b 	bl	8084018 <__aeabi_fmul>
 8082be2:	f001 fbdf 	bl	80843a4 <__aeabi_f2iz>
 8082be6:	4b04      	ldr	r3, [pc, #16]	; (8082bf8 <_ZN9TimeClass4zoneEf+0x34>)
 8082be8:	6018      	str	r0, [r3, #0]
 8082bea:	bd10      	pop	{r4, pc}
 8082bec:	c1400000 	.word	0xc1400000
 8082bf0:	41600000 	.word	0x41600000
 8082bf4:	45610000 	.word	0x45610000
 8082bf8:	200002c4 	.word	0x200002c4

08082bfc <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8082bfe:	4b0e      	ldr	r3, [pc, #56]	; (8082c38 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082c00:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8082c02:	681b      	ldr	r3, [r3, #0]
 8082c04:	a802      	add	r0, sp, #8
 8082c06:	4419      	add	r1, r3
 8082c08:	4b0c      	ldr	r3, [pc, #48]	; (8082c3c <_ZN9TimeClass7timeStrEl+0x40>)
 8082c0a:	681b      	ldr	r3, [r3, #0]
 8082c0c:	4419      	add	r1, r3
 8082c0e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8082c12:	f001 fc3b 	bl	808448c <localtime>
        char* ascstr = asctime(calendar_time);
 8082c16:	f001 fbeb 	bl	80843f0 <asctime>
 8082c1a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8082c1c:	f001 fd97 	bl	808474e <strlen>
        ascstr[len-1] = 0; // remove final newline
 8082c20:	2300      	movs	r3, #0
 8082c22:	4428      	add	r0, r5
 8082c24:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8082c28:	4629      	mov	r1, r5
 8082c2a:	4620      	mov	r0, r4
 8082c2c:	f7ff ff06 	bl	8082a3c <_ZN6StringC1EPK19__FlashStringHelper>
}
 8082c30:	4620      	mov	r0, r4
 8082c32:	b003      	add	sp, #12
 8082c34:	bd30      	pop	{r4, r5, pc}
 8082c36:	bf00      	nop
 8082c38:	200002c4 	.word	0x200002c4
 8082c3c:	200002bc 	.word	0x200002bc

08082c40 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082c40:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8082c42:	2000      	movs	r0, #0
 8082c44:	f7fe fb9e 	bl	8081384 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8082c48:	4604      	mov	r4, r0
 8082c4a:	b968      	cbnz	r0, 8082c68 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082c4c:	f7fe fcca 	bl	80815e4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082c50:	2801      	cmp	r0, #1
 8082c52:	d10b      	bne.n	8082c6c <_ZN9TimeClass7isValidEv+0x2c>
 8082c54:	4620      	mov	r0, r4
 8082c56:	f7fe fcfd 	bl	8081654 <system_thread_get_state>
 8082c5a:	b938      	cbnz	r0, 8082c6c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8082c5c:	f7ff ffa4 	bl	8082ba8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082c60:	b930      	cbnz	r0, 8082c70 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8082c62:	f7fe fd23 	bl	80816ac <spark_process>
 8082c66:	e7f9      	b.n	8082c5c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8082c68:	2001      	movs	r0, #1
 8082c6a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082c6c:	2000      	movs	r0, #0
 8082c6e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082c70:	f7ff ff9a 	bl	8082ba8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082c74:	2000      	movs	r0, #0
 8082c76:	f7fe fb85 	bl	8081384 <HAL_RTC_Time_Is_Valid>
 8082c7a:	3000      	adds	r0, #0
 8082c7c:	bf18      	it	ne
 8082c7e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082c80:	bd10      	pop	{r4, pc}

08082c82 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082c82:	b508      	push	{r3, lr}
    (void)isValid();
 8082c84:	f7ff ffdc 	bl	8082c40 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082c88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082c8c:	f7fe bb52 	b.w	8081334 <HAL_RTC_Get_UnixTime>

08082c90 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082c90:	b508      	push	{r3, lr}
	return hour(now());
 8082c92:	f7ff fff6 	bl	8082c82 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082c96:	f7ff ff55 	bl	8082b44 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8082c9a:	4b01      	ldr	r3, [pc, #4]	; (8082ca0 <_ZN9TimeClass4hourEv+0x10>)
 8082c9c:	6898      	ldr	r0, [r3, #8]
 8082c9e:	bd08      	pop	{r3, pc}
 8082ca0:	20000294 	.word	0x20000294

08082ca4 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8082ca4:	b508      	push	{r3, lr}
	return minute(now());
 8082ca6:	f7ff ffec 	bl	8082c82 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082caa:	f7ff ff4b 	bl	8082b44 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8082cae:	4b01      	ldr	r3, [pc, #4]	; (8082cb4 <_ZN9TimeClass6minuteEv+0x10>)
 8082cb0:	6858      	ldr	r0, [r3, #4]
 8082cb2:	bd08      	pop	{r3, pc}
 8082cb4:	20000294 	.word	0x20000294

08082cb8 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8082cb8:	b508      	push	{r3, lr}
	return day(now());
 8082cba:	f7ff ffe2 	bl	8082c82 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082cbe:	f7ff ff41 	bl	8082b44 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8082cc2:	4b01      	ldr	r3, [pc, #4]	; (8082cc8 <_ZN9TimeClass3dayEv+0x10>)
 8082cc4:	68d8      	ldr	r0, [r3, #12]
 8082cc6:	bd08      	pop	{r3, pc}
 8082cc8:	20000294 	.word	0x20000294

08082ccc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082ccc:	4b02      	ldr	r3, [pc, #8]	; (8082cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082cce:	681a      	ldr	r2, [r3, #0]
 8082cd0:	4b02      	ldr	r3, [pc, #8]	; (8082cdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082cd2:	601a      	str	r2, [r3, #0]
 8082cd4:	4770      	bx	lr
 8082cd6:	bf00      	nop
 8082cd8:	20000094 	.word	0x20000094
 8082cdc:	200002b8 	.word	0x200002b8

08082ce0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082ce0:	4770      	bx	lr

08082ce2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082ce2:	7441      	strb	r1, [r0, #17]
 8082ce4:	4770      	bx	lr

08082ce6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8082ce6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8082ce8:	7c00      	ldrb	r0, [r0, #16]
 8082cea:	f7fe fc43 	bl	8081574 <HAL_USART_Available_Data_For_Write>
}
 8082cee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082cf2:	bd08      	pop	{r3, pc}

08082cf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082cf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8082cf6:	7c00      	ldrb	r0, [r0, #16]
 8082cf8:	f7fe fc14 	bl	8081524 <HAL_USART_Available_Data>
}
 8082cfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082d00:	bd08      	pop	{r3, pc}

08082d02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082d02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8082d04:	7c00      	ldrb	r0, [r0, #16]
 8082d06:	f7fe fc1d 	bl	8081544 <HAL_USART_Peek_Data>
}
 8082d0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082d0e:	bf28      	it	cs
 8082d10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082d14:	bd08      	pop	{r3, pc}

08082d16 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8082d16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8082d18:	7c00      	ldrb	r0, [r0, #16]
 8082d1a:	f7fe fc0b 	bl	8081534 <HAL_USART_Read_Data>
}
 8082d1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082d22:	bf28      	it	cs
 8082d24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082d28:	bd08      	pop	{r3, pc}

08082d2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082d2a:	7c00      	ldrb	r0, [r0, #16]
 8082d2c:	f7fe bc12 	b.w	8081554 <HAL_USART_Flush_Data>

08082d30 <_ZN11USARTSerialD0Ev>:
 8082d30:	b510      	push	{r4, lr}
 8082d32:	4604      	mov	r4, r0
 8082d34:	2114      	movs	r1, #20
 8082d36:	f000 fafa 	bl	808332e <_ZdlPvj>
 8082d3a:	4620      	mov	r0, r4
 8082d3c:	bd10      	pop	{r4, pc}

08082d3e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082d3e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082d40:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8082d42:	4604      	mov	r4, r0
 8082d44:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082d46:	b925      	cbnz	r5, 8082d52 <_ZN11USARTSerial5writeEh+0x14>
 8082d48:	7c00      	ldrb	r0, [r0, #16]
 8082d4a:	f7fe fc13 	bl	8081574 <HAL_USART_Available_Data_For_Write>
 8082d4e:	2800      	cmp	r0, #0
 8082d50:	dd05      	ble.n	8082d5e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082d52:	4631      	mov	r1, r6
 8082d54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8082d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082d5a:	f7fe bbdb 	b.w	8081514 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082d5e:	4628      	mov	r0, r5
 8082d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08082d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082d64:	b510      	push	{r4, lr}
 8082d66:	4604      	mov	r4, r0
 8082d68:	4608      	mov	r0, r1
 8082d6a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082d6c:	2200      	movs	r2, #0
 8082d6e:	6062      	str	r2, [r4, #4]
 8082d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082d74:	60a2      	str	r2, [r4, #8]
 8082d76:	4a05      	ldr	r2, [pc, #20]	; (8082d8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8082d78:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082d7a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8082d7c:	2201      	movs	r2, #1
 8082d7e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8082d80:	461a      	mov	r2, r3
 8082d82:	f7fe fbbf 	bl	8081504 <HAL_USART_Init>
}
 8082d86:	4620      	mov	r0, r4
 8082d88:	bd10      	pop	{r4, pc}
 8082d8a:	bf00      	nop
 8082d8c:	080855d4 	.word	0x080855d4

08082d90 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8082d90:	7c00      	ldrb	r0, [r0, #16]
 8082d92:	f7fe bbe7 	b.w	8081564 <HAL_USART_Is_Enabled>
	...

08082d98 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082d98:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082d9a:	4d0c      	ldr	r5, [pc, #48]	; (8082dcc <_Z22__fetch_global_Serial1v+0x34>)
 8082d9c:	6829      	ldr	r1, [r5, #0]
 8082d9e:	f011 0401 	ands.w	r4, r1, #1
 8082da2:	d111      	bne.n	8082dc8 <_Z22__fetch_global_Serial1v+0x30>
 8082da4:	4628      	mov	r0, r5
 8082da6:	f7fd f97e 	bl	80800a6 <__cxa_guard_acquire>
 8082daa:	b168      	cbz	r0, 8082dc8 <_Z22__fetch_global_Serial1v+0x30>
 8082dac:	4a08      	ldr	r2, [pc, #32]	; (8082dd0 <_Z22__fetch_global_Serial1v+0x38>)
 8082dae:	4621      	mov	r1, r4
 8082db0:	4b08      	ldr	r3, [pc, #32]	; (8082dd4 <_Z22__fetch_global_Serial1v+0x3c>)
 8082db2:	4809      	ldr	r0, [pc, #36]	; (8082dd8 <_Z22__fetch_global_Serial1v+0x40>)
 8082db4:	f7ff ffd6 	bl	8082d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082db8:	4628      	mov	r0, r5
 8082dba:	f7fd f979 	bl	80800b0 <__cxa_guard_release>
 8082dbe:	4a07      	ldr	r2, [pc, #28]	; (8082ddc <_Z22__fetch_global_Serial1v+0x44>)
 8082dc0:	4907      	ldr	r1, [pc, #28]	; (8082de0 <_Z22__fetch_global_Serial1v+0x48>)
 8082dc2:	4805      	ldr	r0, [pc, #20]	; (8082dd8 <_Z22__fetch_global_Serial1v+0x40>)
 8082dc4:	f000 faae 	bl	8083324 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082dc8:	4803      	ldr	r0, [pc, #12]	; (8082dd8 <_Z22__fetch_global_Serial1v+0x40>)
 8082dca:	bd38      	pop	{r3, r4, r5, pc}
 8082dcc:	20000360 	.word	0x20000360
 8082dd0:	20000364 	.word	0x20000364
 8082dd4:	200002dc 	.word	0x200002dc
 8082dd8:	200002c8 	.word	0x200002c8
 8082ddc:	2000014c 	.word	0x2000014c
 8082de0:	08082ce1 	.word	0x08082ce1

08082de4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082de4:	7441      	strb	r1, [r0, #17]
 8082de6:	4770      	bx	lr

08082de8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082de8:	4770      	bx	lr

08082dea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8082dea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082dec:	2100      	movs	r1, #0
 8082dee:	7c00      	ldrb	r0, [r0, #16]
 8082df0:	f7fe fbe0 	bl	80815b4 <HAL_USB_USART_Receive_Data>
}
 8082df4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082df8:	bf28      	it	cs
 8082dfa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082dfe:	bd08      	pop	{r3, pc}

08082e00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8082e00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082e02:	2101      	movs	r1, #1
 8082e04:	7c00      	ldrb	r0, [r0, #16]
 8082e06:	f7fe fbd5 	bl	80815b4 <HAL_USB_USART_Receive_Data>
}
 8082e0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082e0e:	bf28      	it	cs
 8082e10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082e14:	bd08      	pop	{r3, pc}

08082e16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8082e16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082e18:	7c00      	ldrb	r0, [r0, #16]
 8082e1a:	f7fe fbc3 	bl	80815a4 <HAL_USB_USART_Available_Data_For_Write>
}
 8082e1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082e22:	bd08      	pop	{r3, pc}

08082e24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8082e24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082e26:	7c00      	ldrb	r0, [r0, #16]
 8082e28:	f7fe fbb4 	bl	8081594 <HAL_USB_USART_Available_Data>
}
 8082e2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082e30:	bd08      	pop	{r3, pc}

08082e32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082e32:	7c00      	ldrb	r0, [r0, #16]
 8082e34:	f7fe bbce 	b.w	80815d4 <HAL_USB_USART_Flush_Data>

08082e38 <_ZN9USBSerialD0Ev>:
 8082e38:	b510      	push	{r4, lr}
 8082e3a:	4604      	mov	r4, r0
 8082e3c:	2114      	movs	r1, #20
 8082e3e:	f000 fa76 	bl	808332e <_ZdlPvj>
 8082e42:	4620      	mov	r0, r4
 8082e44:	bd10      	pop	{r4, pc}

08082e46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082e46:	b538      	push	{r3, r4, r5, lr}
 8082e48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082e4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082e4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082e4e:	f7fe fba9 	bl	80815a4 <HAL_USB_USART_Available_Data_For_Write>
 8082e52:	2800      	cmp	r0, #0
 8082e54:	dc01      	bgt.n	8082e5a <_ZN9USBSerial5writeEh+0x14>
 8082e56:	7c60      	ldrb	r0, [r4, #17]
 8082e58:	b128      	cbz	r0, 8082e66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082e5a:	4629      	mov	r1, r5
 8082e5c:	7c20      	ldrb	r0, [r4, #16]
 8082e5e:	f7fe fbb1 	bl	80815c4 <HAL_USB_USART_Send_Data>
 8082e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082e66:	bd38      	pop	{r3, r4, r5, pc}

08082e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082e68:	b510      	push	{r4, lr}
 8082e6a:	4604      	mov	r4, r0
 8082e6c:	2300      	movs	r3, #0
 8082e6e:	6063      	str	r3, [r4, #4]
 8082e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082e74:	60a3      	str	r3, [r4, #8]
 8082e76:	4b05      	ldr	r3, [pc, #20]	; (8082e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082e78:	4608      	mov	r0, r1
 8082e7a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8082e7c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8082e7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082e80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082e82:	4611      	mov	r1, r2
 8082e84:	f7fe fb7e 	bl	8081584 <HAL_USB_USART_Init>
}
 8082e88:	4620      	mov	r0, r4
 8082e8a:	bd10      	pop	{r4, pc}
 8082e8c:	08085604 	.word	0x08085604

08082e90 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082e90:	b510      	push	{r4, lr}
 8082e92:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082e94:	2214      	movs	r2, #20
 8082e96:	2100      	movs	r1, #0
 8082e98:	f001 fbfb 	bl	8084692 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082e9c:	4b05      	ldr	r3, [pc, #20]	; (8082eb4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082e9e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082ea0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082ea2:	4b05      	ldr	r3, [pc, #20]	; (8082eb8 <_Z19acquireSerialBufferv+0x28>)
 8082ea4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082ea6:	f240 1301 	movw	r3, #257	; 0x101
 8082eaa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082eac:	2381      	movs	r3, #129	; 0x81
 8082eae:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082eb0:	bd10      	pop	{r4, pc}
 8082eb2:	bf00      	nop
 8082eb4:	2000046d 	.word	0x2000046d
 8082eb8:	200003ec 	.word	0x200003ec

08082ebc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082ebc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082ebe:	4d0e      	ldr	r5, [pc, #56]	; (8082ef8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082ec0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082ec2:	a801      	add	r0, sp, #4
 8082ec4:	f7ff ffe4 	bl	8082e90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082ec8:	6829      	ldr	r1, [r5, #0]
 8082eca:	f011 0401 	ands.w	r4, r1, #1
 8082ece:	d110      	bne.n	8082ef2 <_Z16_fetch_usbserialv+0x36>
 8082ed0:	4628      	mov	r0, r5
 8082ed2:	f7fd f8e8 	bl	80800a6 <__cxa_guard_acquire>
 8082ed6:	b160      	cbz	r0, 8082ef2 <_Z16_fetch_usbserialv+0x36>
 8082ed8:	aa01      	add	r2, sp, #4
 8082eda:	4621      	mov	r1, r4
 8082edc:	4807      	ldr	r0, [pc, #28]	; (8082efc <_Z16_fetch_usbserialv+0x40>)
 8082ede:	f7ff ffc3 	bl	8082e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082ee2:	4628      	mov	r0, r5
 8082ee4:	f7fd f8e4 	bl	80800b0 <__cxa_guard_release>
 8082ee8:	4a05      	ldr	r2, [pc, #20]	; (8082f00 <_Z16_fetch_usbserialv+0x44>)
 8082eea:	4906      	ldr	r1, [pc, #24]	; (8082f04 <_Z16_fetch_usbserialv+0x48>)
 8082eec:	4803      	ldr	r0, [pc, #12]	; (8082efc <_Z16_fetch_usbserialv+0x40>)
 8082eee:	f000 fa19 	bl	8083324 <__aeabi_atexit>
	return _usbserial;
}
 8082ef2:	4802      	ldr	r0, [pc, #8]	; (8082efc <_Z16_fetch_usbserialv+0x40>)
 8082ef4:	b007      	add	sp, #28
 8082ef6:	bd30      	pop	{r4, r5, pc}
 8082ef8:	200003e8 	.word	0x200003e8
 8082efc:	20000570 	.word	0x20000570
 8082f00:	2000014c 	.word	0x2000014c
 8082f04:	08082de9 	.word	0x08082de9

08082f08 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082f08:	b510      	push	{r4, lr}
 8082f0a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082f0c:	2214      	movs	r2, #20
 8082f0e:	2100      	movs	r1, #0
 8082f10:	f001 fbbf 	bl	8084692 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082f14:	4b05      	ldr	r3, [pc, #20]	; (8082f2c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082f16:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082f18:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082f1a:	4b05      	ldr	r3, [pc, #20]	; (8082f30 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082f1c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082f1e:	f240 1301 	movw	r3, #257	; 0x101
 8082f22:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082f24:	2381      	movs	r3, #129	; 0x81
 8082f26:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082f28:	bd10      	pop	{r4, pc}
 8082f2a:	bf00      	nop
 8082f2c:	20000620 	.word	0x20000620
 8082f30:	20000588 	.word	0x20000588

08082f34 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082f34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f36:	4c0e      	ldr	r4, [pc, #56]	; (8082f70 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082f38:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082f3a:	a801      	add	r0, sp, #4
 8082f3c:	f7ff ffe4 	bl	8082f08 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f40:	6823      	ldr	r3, [r4, #0]
 8082f42:	07db      	lsls	r3, r3, #31
 8082f44:	d410      	bmi.n	8082f68 <_Z17_fetch_usbserial1v+0x34>
 8082f46:	4620      	mov	r0, r4
 8082f48:	f7fd f8ad 	bl	80800a6 <__cxa_guard_acquire>
 8082f4c:	b160      	cbz	r0, 8082f68 <_Z17_fetch_usbserial1v+0x34>
 8082f4e:	aa01      	add	r2, sp, #4
 8082f50:	2101      	movs	r1, #1
 8082f52:	4808      	ldr	r0, [pc, #32]	; (8082f74 <_Z17_fetch_usbserial1v+0x40>)
 8082f54:	f7ff ff88 	bl	8082e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082f58:	4620      	mov	r0, r4
 8082f5a:	f7fd f8a9 	bl	80800b0 <__cxa_guard_release>
 8082f5e:	4a06      	ldr	r2, [pc, #24]	; (8082f78 <_Z17_fetch_usbserial1v+0x44>)
 8082f60:	4906      	ldr	r1, [pc, #24]	; (8082f7c <_Z17_fetch_usbserial1v+0x48>)
 8082f62:	4804      	ldr	r0, [pc, #16]	; (8082f74 <_Z17_fetch_usbserial1v+0x40>)
 8082f64:	f000 f9de 	bl	8083324 <__aeabi_atexit>
  return _usbserial1;
}
 8082f68:	4802      	ldr	r0, [pc, #8]	; (8082f74 <_Z17_fetch_usbserial1v+0x40>)
 8082f6a:	b006      	add	sp, #24
 8082f6c:	bd10      	pop	{r4, pc}
 8082f6e:	bf00      	nop
 8082f70:	20000584 	.word	0x20000584
 8082f74:	2000060c 	.word	0x2000060c
 8082f78:	2000014c 	.word	0x2000014c
 8082f7c:	08082de9 	.word	0x08082de9

08082f80 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082f80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082f82:	4b18      	ldr	r3, [pc, #96]	; (8082fe4 <serialEventRun+0x64>)
 8082f84:	b133      	cbz	r3, 8082f94 <serialEventRun+0x14>
 8082f86:	f7ff ff99 	bl	8082ebc <_Z16_fetch_usbserialv>
 8082f8a:	6803      	ldr	r3, [r0, #0]
 8082f8c:	691b      	ldr	r3, [r3, #16]
 8082f8e:	4798      	blx	r3
 8082f90:	2800      	cmp	r0, #0
 8082f92:	dc1e      	bgt.n	8082fd2 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082f94:	4b14      	ldr	r3, [pc, #80]	; (8082fe8 <serialEventRun+0x68>)
 8082f96:	b133      	cbz	r3, 8082fa6 <serialEventRun+0x26>
 8082f98:	f7ff fefe 	bl	8082d98 <_Z22__fetch_global_Serial1v>
 8082f9c:	6803      	ldr	r3, [r0, #0]
 8082f9e:	691b      	ldr	r3, [r3, #16]
 8082fa0:	4798      	blx	r3
 8082fa2:	2800      	cmp	r0, #0
 8082fa4:	dc18      	bgt.n	8082fd8 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082fa6:	4b11      	ldr	r3, [pc, #68]	; (8082fec <serialEventRun+0x6c>)
 8082fa8:	b10b      	cbz	r3, 8082fae <serialEventRun+0x2e>
 8082faa:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082fae:	4b10      	ldr	r3, [pc, #64]	; (8082ff0 <serialEventRun+0x70>)
 8082fb0:	b10b      	cbz	r3, 8082fb6 <serialEventRun+0x36>
 8082fb2:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082fb6:	4b0f      	ldr	r3, [pc, #60]	; (8082ff4 <serialEventRun+0x74>)
 8082fb8:	b10b      	cbz	r3, 8082fbe <serialEventRun+0x3e>
 8082fba:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082fbe:	4b0e      	ldr	r3, [pc, #56]	; (8082ff8 <serialEventRun+0x78>)
 8082fc0:	b17b      	cbz	r3, 8082fe2 <serialEventRun+0x62>
 8082fc2:	f7ff ffb7 	bl	8082f34 <_Z17_fetch_usbserial1v>
 8082fc6:	6803      	ldr	r3, [r0, #0]
 8082fc8:	691b      	ldr	r3, [r3, #16]
 8082fca:	4798      	blx	r3
 8082fcc:	2800      	cmp	r0, #0
 8082fce:	dc06      	bgt.n	8082fde <serialEventRun+0x5e>
 8082fd0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082fd2:	f3af 8000 	nop.w
 8082fd6:	e7dd      	b.n	8082f94 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082fd8:	f3af 8000 	nop.w
 8082fdc:	e7e3      	b.n	8082fa6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082fde:	f3af 8000 	nop.w
 8082fe2:	bd08      	pop	{r3, pc}
	...

08082ffc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082ffc:	b508      	push	{r3, lr}
	serialEventRun();
 8082ffe:	f7ff ffbf 	bl	8082f80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083002:	f7fe f98f 	bl	8081324 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083006:	4b01      	ldr	r3, [pc, #4]	; (808300c <_post_loop+0x10>)
 8083008:	6018      	str	r0, [r3, #0]
 808300a:	bd08      	pop	{r3, pc}
 808300c:	2000072c 	.word	0x2000072c

08083010 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8083010:	4802      	ldr	r0, [pc, #8]	; (808301c <_Z33system_initialize_user_backup_ramv+0xc>)
 8083012:	4a03      	ldr	r2, [pc, #12]	; (8083020 <_Z33system_initialize_user_backup_ramv+0x10>)
 8083014:	4903      	ldr	r1, [pc, #12]	; (8083024 <_Z33system_initialize_user_backup_ramv+0x14>)
 8083016:	1a12      	subs	r2, r2, r0
 8083018:	f001 bb30 	b.w	808467c <memcpy>
 808301c:	40024000 	.word	0x40024000
 8083020:	40024004 	.word	0x40024004
 8083024:	080858c0 	.word	0x080858c0

08083028 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8083028:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808302a:	2300      	movs	r3, #0
 808302c:	9300      	str	r3, [sp, #0]
 808302e:	461a      	mov	r2, r3
 8083030:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083034:	f7fe fb20 	bl	8081678 <system_ctrl_set_result>
}
 8083038:	b003      	add	sp, #12
 808303a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083040 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8083040:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8083042:	8843      	ldrh	r3, [r0, #2]
 8083044:	2b0a      	cmp	r3, #10
 8083046:	d008      	beq.n	808305a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083048:	2b50      	cmp	r3, #80	; 0x50
 808304a:	d109      	bne.n	8083060 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808304c:	4b09      	ldr	r3, [pc, #36]	; (8083074 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808304e:	681b      	ldr	r3, [r3, #0]
 8083050:	b13b      	cbz	r3, 8083062 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8083052:	b003      	add	sp, #12
 8083054:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083058:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808305a:	f7ff ffe5 	bl	8083028 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808305e:	e006      	b.n	808306e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083060:	2300      	movs	r3, #0
 8083062:	9300      	str	r3, [sp, #0]
 8083064:	461a      	mov	r2, r3
 8083066:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808306a:	f7fe fb05 	bl	8081678 <system_ctrl_set_result>
        break;
    }
}
 808306e:	b003      	add	sp, #12
 8083070:	f85d fb04 	ldr.w	pc, [sp], #4
 8083074:	20000724 	.word	0x20000724

08083078 <module_user_init_hook>:

void module_user_init_hook()
{
 8083078:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808307a:	4c10      	ldr	r4, [pc, #64]	; (80830bc <module_user_init_hook+0x44>)
 808307c:	4d10      	ldr	r5, [pc, #64]	; (80830c0 <module_user_init_hook+0x48>)
 808307e:	6823      	ldr	r3, [r4, #0]
 8083080:	42ab      	cmp	r3, r5
 8083082:	4b10      	ldr	r3, [pc, #64]	; (80830c4 <module_user_init_hook+0x4c>)
 8083084:	bf0c      	ite	eq
 8083086:	2201      	moveq	r2, #1
 8083088:	2200      	movne	r2, #0
 808308a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808308c:	d002      	beq.n	8083094 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808308e:	f7ff ffbf 	bl	8083010 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8083092:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8083094:	f7fe f93e 	bl	8081314 <HAL_RNG_GetRandomNumber>
 8083098:	4604      	mov	r4, r0
    srand(seed);
 808309a:	f001 fb03 	bl	80846a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808309e:	4b0a      	ldr	r3, [pc, #40]	; (80830c8 <module_user_init_hook+0x50>)
 80830a0:	b113      	cbz	r3, 80830a8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80830a2:	4620      	mov	r0, r4
 80830a4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80830a8:	2100      	movs	r1, #0
 80830aa:	4807      	ldr	r0, [pc, #28]	; (80830c8 <module_user_init_hook+0x50>)
 80830ac:	f7fe fb46 	bl	808173c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80830b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80830b4:	2100      	movs	r1, #0
 80830b6:	4805      	ldr	r0, [pc, #20]	; (80830cc <module_user_init_hook+0x54>)
 80830b8:	f7fe bad4 	b.w	8081664 <system_ctrl_set_app_request_handler>
 80830bc:	40024000 	.word	0x40024000
 80830c0:	9a271c1e 	.word	0x9a271c1e
 80830c4:	20000728 	.word	0x20000728
 80830c8:	00000000 	.word	0x00000000
 80830cc:	08083041 	.word	0x08083041

080830d0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 80830d0:	b508      	push	{r3, lr}
 80830d2:	4b02      	ldr	r3, [pc, #8]	; (80830dc <spark_protocol_instance+0xc>)
 80830d4:	681b      	ldr	r3, [r3, #0]
 80830d6:	681b      	ldr	r3, [r3, #0]
 80830d8:	9301      	str	r3, [sp, #4]
 80830da:	bd08      	pop	{r3, pc}
 80830dc:	0802019c 	.word	0x0802019c

080830e0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 80830e0:	b508      	push	{r3, lr}
 80830e2:	4b02      	ldr	r3, [pc, #8]	; (80830ec <spark_protocol_set_product_id+0xc>)
 80830e4:	681b      	ldr	r3, [r3, #0]
 80830e6:	685b      	ldr	r3, [r3, #4]
 80830e8:	9301      	str	r3, [sp, #4]
 80830ea:	bd08      	pop	{r3, pc}
 80830ec:	0802019c 	.word	0x0802019c

080830f0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 80830f0:	b508      	push	{r3, lr}
 80830f2:	4b02      	ldr	r3, [pc, #8]	; (80830fc <spark_protocol_set_product_firmware_version+0xc>)
 80830f4:	681b      	ldr	r3, [r3, #0]
 80830f6:	689b      	ldr	r3, [r3, #8]
 80830f8:	9301      	str	r3, [sp, #4]
 80830fa:	bd08      	pop	{r3, pc}
 80830fc:	0802019c 	.word	0x0802019c

08083100 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083100:	b510      	push	{r4, lr}
 8083102:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083104:	480f      	ldr	r0, [pc, #60]	; (8083144 <pinAvailable+0x44>)
 8083106:	f7ff fc4f 	bl	80829a8 <_ZN8SPIClass9isEnabledEv>
 808310a:	b128      	cbz	r0, 8083118 <pinAvailable+0x18>
 808310c:	f1a4 030d 	sub.w	r3, r4, #13
 8083110:	2b02      	cmp	r3, #2
 8083112:	d801      	bhi.n	8083118 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8083114:	2000      	movs	r0, #0
 8083116:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8083118:	f000 f87e 	bl	8083218 <_Z19__fetch_global_Wirev>
 808311c:	f7ff f8d9 	bl	80822d2 <_ZN7TwoWire9isEnabledEv>
 8083120:	b108      	cbz	r0, 8083126 <pinAvailable+0x26>
 8083122:	2c01      	cmp	r4, #1
 8083124:	d9f6      	bls.n	8083114 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8083126:	f7ff fe37 	bl	8082d98 <_Z22__fetch_global_Serial1v>
 808312a:	f7ff fe31 	bl	8082d90 <_ZN11USARTSerial9isEnabledEv>
 808312e:	b118      	cbz	r0, 8083138 <pinAvailable+0x38>
 8083130:	f1a4 0312 	sub.w	r3, r4, #18
 8083134:	2b01      	cmp	r3, #1
 8083136:	d9ed      	bls.n	8083114 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8083138:	2c2e      	cmp	r4, #46	; 0x2e
 808313a:	bf8c      	ite	hi
 808313c:	2000      	movhi	r0, #0
 808313e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8083140:	bd10      	pop	{r4, pc}
 8083142:	bf00      	nop
 8083144:	20000770 	.word	0x20000770

08083148 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083148:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808314a:	b538      	push	{r3, r4, r5, lr}
 808314c:	4604      	mov	r4, r0
 808314e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083150:	d80a      	bhi.n	8083168 <pinMode+0x20>
 8083152:	29ff      	cmp	r1, #255	; 0xff
 8083154:	d008      	beq.n	8083168 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083156:	f7ff ffd3 	bl	8083100 <pinAvailable>
 808315a:	b128      	cbz	r0, 8083168 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808315c:	4629      	mov	r1, r5
 808315e:	4620      	mov	r0, r4
}
 8083160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083164:	f7fe b92e 	b.w	80813c4 <HAL_Pin_Mode>
 8083168:	bd38      	pop	{r3, r4, r5, pc}

0808316a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808316a:	b538      	push	{r3, r4, r5, lr}
 808316c:	4604      	mov	r4, r0
 808316e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083170:	f7fe f930 	bl	80813d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083174:	28ff      	cmp	r0, #255	; 0xff
 8083176:	d010      	beq.n	808319a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083178:	2806      	cmp	r0, #6
 808317a:	d804      	bhi.n	8083186 <digitalWrite+0x1c>
 808317c:	234d      	movs	r3, #77	; 0x4d
 808317e:	fa23 f000 	lsr.w	r0, r3, r0
 8083182:	07c3      	lsls	r3, r0, #31
 8083184:	d409      	bmi.n	808319a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083186:	4620      	mov	r0, r4
 8083188:	f7ff ffba 	bl	8083100 <pinAvailable>
 808318c:	b128      	cbz	r0, 808319a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808318e:	4629      	mov	r1, r5
 8083190:	4620      	mov	r0, r4
}
 8083192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083196:	f7fe b925 	b.w	80813e4 <HAL_GPIO_Write>
 808319a:	bd38      	pop	{r3, r4, r5, pc}

0808319c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808319c:	b510      	push	{r4, lr}
 808319e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80831a0:	f7fe f918 	bl	80813d4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80831a4:	3804      	subs	r0, #4
 80831a6:	b2c0      	uxtb	r0, r0
 80831a8:	2801      	cmp	r0, #1
 80831aa:	d908      	bls.n	80831be <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80831ac:	4620      	mov	r0, r4
 80831ae:	f7ff ffa7 	bl	8083100 <pinAvailable>
 80831b2:	b120      	cbz	r0, 80831be <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80831b4:	4620      	mov	r0, r4
}
 80831b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80831ba:	f7fe b91b 	b.w	80813f4 <HAL_GPIO_Read>
}
 80831be:	2000      	movs	r0, #0
 80831c0:	bd10      	pop	{r4, pc}

080831c2 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80831c2:	b510      	push	{r4, lr}
 80831c4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80831c6:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80831c8:	bf9c      	itt	ls
 80831ca:	340a      	addls	r4, #10
 80831cc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80831ce:	4620      	mov	r0, r4
 80831d0:	f7ff ff96 	bl	8083100 <pinAvailable>
 80831d4:	b150      	cbz	r0, 80831ec <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80831d6:	2103      	movs	r1, #3
 80831d8:	4620      	mov	r0, r4
 80831da:	f7fe f8eb 	bl	80813b4 <HAL_Validate_Pin_Function>
 80831de:	2803      	cmp	r0, #3
 80831e0:	d104      	bne.n	80831ec <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80831e2:	4620      	mov	r0, r4
}
 80831e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80831e8:	f7fe b90c 	b.w	8081404 <HAL_ADC_Read>
}
 80831ec:	2000      	movs	r0, #0
 80831ee:	bd10      	pop	{r4, pc}

080831f0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80831f0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80831f2:	4c07      	ldr	r4, [pc, #28]	; (8083210 <_Z21__fetch_global_EEPROMv+0x20>)
 80831f4:	6823      	ldr	r3, [r4, #0]
 80831f6:	07db      	lsls	r3, r3, #31
 80831f8:	d408      	bmi.n	808320c <_Z21__fetch_global_EEPROMv+0x1c>
 80831fa:	4620      	mov	r0, r4
 80831fc:	f7fc ff53 	bl	80800a6 <__cxa_guard_acquire>
 8083200:	b120      	cbz	r0, 808320c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 8083202:	f7fe f89f 	bl	8081344 <HAL_EEPROM_Init>
 8083206:	4620      	mov	r0, r4
 8083208:	f7fc ff52 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808320c:	4801      	ldr	r0, [pc, #4]	; (8083214 <_Z21__fetch_global_EEPROMv+0x24>)
 808320e:	bd10      	pop	{r4, pc}
 8083210:	20000730 	.word	0x20000730
 8083214:	20000734 	.word	0x20000734

08083218 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8083218:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808321a:	4d0b      	ldr	r5, [pc, #44]	; (8083248 <_Z19__fetch_global_Wirev+0x30>)
 808321c:	6829      	ldr	r1, [r5, #0]
 808321e:	f011 0401 	ands.w	r4, r1, #1
 8083222:	d10f      	bne.n	8083244 <_Z19__fetch_global_Wirev+0x2c>
 8083224:	4628      	mov	r0, r5
 8083226:	f7fc ff3e 	bl	80800a6 <__cxa_guard_acquire>
 808322a:	b158      	cbz	r0, 8083244 <_Z19__fetch_global_Wirev+0x2c>
 808322c:	4621      	mov	r1, r4
 808322e:	4807      	ldr	r0, [pc, #28]	; (808324c <_Z19__fetch_global_Wirev+0x34>)
 8083230:	f7ff f818 	bl	8082264 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8083234:	4628      	mov	r0, r5
 8083236:	f7fc ff3b 	bl	80800b0 <__cxa_guard_release>
 808323a:	4a05      	ldr	r2, [pc, #20]	; (8083250 <_Z19__fetch_global_Wirev+0x38>)
 808323c:	4905      	ldr	r1, [pc, #20]	; (8083254 <_Z19__fetch_global_Wirev+0x3c>)
 808323e:	4803      	ldr	r0, [pc, #12]	; (808324c <_Z19__fetch_global_Wirev+0x34>)
 8083240:	f000 f870 	bl	8083324 <__aeabi_atexit>
	return wire;
}
 8083244:	4801      	ldr	r0, [pc, #4]	; (808324c <_Z19__fetch_global_Wirev+0x34>)
 8083246:	bd38      	pop	{r3, r4, r5, pc}
 8083248:	20000738 	.word	0x20000738
 808324c:	20000750 	.word	0x20000750
 8083250:	2000014c 	.word	0x2000014c
 8083254:	0808220d 	.word	0x0808220d

08083258 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083258:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808325a:	4c0b      	ldr	r4, [pc, #44]	; (8083288 <_Z20__fetch_global_Wire3v+0x30>)
 808325c:	6823      	ldr	r3, [r4, #0]
 808325e:	07db      	lsls	r3, r3, #31
 8083260:	d40f      	bmi.n	8083282 <_Z20__fetch_global_Wire3v+0x2a>
 8083262:	4620      	mov	r0, r4
 8083264:	f7fc ff1f 	bl	80800a6 <__cxa_guard_acquire>
 8083268:	b158      	cbz	r0, 8083282 <_Z20__fetch_global_Wire3v+0x2a>
 808326a:	2102      	movs	r1, #2
 808326c:	4807      	ldr	r0, [pc, #28]	; (808328c <_Z20__fetch_global_Wire3v+0x34>)
 808326e:	f7fe fff9 	bl	8082264 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8083272:	4620      	mov	r0, r4
 8083274:	f7fc ff1c 	bl	80800b0 <__cxa_guard_release>
 8083278:	4a05      	ldr	r2, [pc, #20]	; (8083290 <_Z20__fetch_global_Wire3v+0x38>)
 808327a:	4906      	ldr	r1, [pc, #24]	; (8083294 <_Z20__fetch_global_Wire3v+0x3c>)
 808327c:	4803      	ldr	r0, [pc, #12]	; (808328c <_Z20__fetch_global_Wire3v+0x34>)
 808327e:	f000 f851 	bl	8083324 <__aeabi_atexit>
	return wire;
}
 8083282:	4802      	ldr	r0, [pc, #8]	; (808328c <_Z20__fetch_global_Wire3v+0x34>)
 8083284:	bd10      	pop	{r4, pc}
 8083286:	bf00      	nop
 8083288:	20000764 	.word	0x20000764
 808328c:	2000073c 	.word	0x2000073c
 8083290:	2000014c 	.word	0x2000014c
 8083294:	0808220d 	.word	0x0808220d

08083298 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083298:	b513      	push	{r0, r1, r4, lr}
 808329a:	4c08      	ldr	r4, [pc, #32]	; (80832bc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808329c:	2300      	movs	r3, #0
 808329e:	461a      	mov	r2, r3
 80832a0:	4619      	mov	r1, r3
 80832a2:	9300      	str	r3, [sp, #0]
 80832a4:	4620      	mov	r0, r4
 80832a6:	f7ff f86d 	bl	8082384 <_ZN9IPAddressC1Ehhhh>
 80832aa:	4620      	mov	r0, r4
 80832ac:	4a04      	ldr	r2, [pc, #16]	; (80832c0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80832ae:	4905      	ldr	r1, [pc, #20]	; (80832c4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80832b0:	b002      	add	sp, #8
 80832b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80832b6:	f000 b835 	b.w	8083324 <__aeabi_atexit>
 80832ba:	bf00      	nop
 80832bc:	20000768 	.word	0x20000768
 80832c0:	2000014c 	.word	0x2000014c
 80832c4:	080822ff 	.word	0x080822ff

080832c8 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832c8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80832ca:	4e11      	ldr	r6, [pc, #68]	; (8083310 <_GLOBAL__sub_I_SPI+0x48>)
 80832cc:	4d11      	ldr	r5, [pc, #68]	; (8083314 <_GLOBAL__sub_I_SPI+0x4c>)
 80832ce:	4c12      	ldr	r4, [pc, #72]	; (8083318 <_GLOBAL__sub_I_SPI+0x50>)
 80832d0:	2100      	movs	r1, #0
 80832d2:	4630      	mov	r0, r6
 80832d4:	f7ff fb54 	bl	8082980 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80832d8:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80832da:	4e10      	ldr	r6, [pc, #64]	; (808331c <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80832dc:	462a      	mov	r2, r5
 80832de:	4621      	mov	r1, r4
 80832e0:	f000 f820 	bl	8083324 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80832e4:	2101      	movs	r1, #1
 80832e6:	4630      	mov	r0, r6
 80832e8:	f7ff fb4a 	bl	8082980 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80832ec:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832ee:	4e0c      	ldr	r6, [pc, #48]	; (8083320 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80832f0:	462a      	mov	r2, r5
 80832f2:	4621      	mov	r1, r4
 80832f4:	f000 f816 	bl	8083324 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832f8:	2102      	movs	r1, #2
 80832fa:	4630      	mov	r0, r6
 80832fc:	f7ff fb40 	bl	8082980 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083300:	462a      	mov	r2, r5
 8083302:	4621      	mov	r1, r4
 8083304:	4630      	mov	r0, r6
 8083306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808330a:	f000 b80b 	b.w	8083324 <__aeabi_atexit>
 808330e:	bf00      	nop
 8083310:	20000770 	.word	0x20000770
 8083314:	2000014c 	.word	0x2000014c
 8083318:	08082971 	.word	0x08082971
 808331c:	20000780 	.word	0x20000780
 8083320:	20000790 	.word	0x20000790

08083324 <__aeabi_atexit>:
 8083324:	460b      	mov	r3, r1
 8083326:	4601      	mov	r1, r0
 8083328:	4618      	mov	r0, r3
 808332a:	f001 b8a1 	b.w	8084470 <__cxa_atexit>

0808332e <_ZdlPvj>:
 808332e:	f7fc beb8 	b.w	80800a2 <_ZdlPv>

08083332 <_ZSt25__throw_bad_function_callv>:
 8083332:	b508      	push	{r3, lr}
 8083334:	f7fe fa8a 	bl	808184c <abort>

08083338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083338:	4b24      	ldr	r3, [pc, #144]	; (80833cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808333a:	681a      	ldr	r2, [r3, #0]
 808333c:	07d0      	lsls	r0, r2, #31
 808333e:	bf5c      	itt	pl
 8083340:	2201      	movpl	r2, #1
 8083342:	601a      	strpl	r2, [r3, #0]
 8083344:	4b22      	ldr	r3, [pc, #136]	; (80833d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8083346:	681a      	ldr	r2, [r3, #0]
 8083348:	07d1      	lsls	r1, r2, #31
 808334a:	bf5c      	itt	pl
 808334c:	2201      	movpl	r2, #1
 808334e:	601a      	strpl	r2, [r3, #0]
 8083350:	4b20      	ldr	r3, [pc, #128]	; (80833d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083352:	681a      	ldr	r2, [r3, #0]
 8083354:	07d2      	lsls	r2, r2, #31
 8083356:	bf5c      	itt	pl
 8083358:	2201      	movpl	r2, #1
 808335a:	601a      	strpl	r2, [r3, #0]
 808335c:	4b1e      	ldr	r3, [pc, #120]	; (80833d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808335e:	681a      	ldr	r2, [r3, #0]
 8083360:	07d0      	lsls	r0, r2, #31
 8083362:	bf5c      	itt	pl
 8083364:	2201      	movpl	r2, #1
 8083366:	601a      	strpl	r2, [r3, #0]
 8083368:	4b1c      	ldr	r3, [pc, #112]	; (80833dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808336a:	681a      	ldr	r2, [r3, #0]
 808336c:	07d1      	lsls	r1, r2, #31
 808336e:	bf5c      	itt	pl
 8083370:	2201      	movpl	r2, #1
 8083372:	601a      	strpl	r2, [r3, #0]
 8083374:	4b1a      	ldr	r3, [pc, #104]	; (80833e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8083376:	681a      	ldr	r2, [r3, #0]
 8083378:	07d2      	lsls	r2, r2, #31
 808337a:	bf5c      	itt	pl
 808337c:	2201      	movpl	r2, #1
 808337e:	601a      	strpl	r2, [r3, #0]
 8083380:	4b18      	ldr	r3, [pc, #96]	; (80833e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8083382:	681a      	ldr	r2, [r3, #0]
 8083384:	07d0      	lsls	r0, r2, #31
 8083386:	bf5c      	itt	pl
 8083388:	2201      	movpl	r2, #1
 808338a:	601a      	strpl	r2, [r3, #0]
 808338c:	4b16      	ldr	r3, [pc, #88]	; (80833e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808338e:	681a      	ldr	r2, [r3, #0]
 8083390:	07d1      	lsls	r1, r2, #31
 8083392:	bf5c      	itt	pl
 8083394:	2201      	movpl	r2, #1
 8083396:	601a      	strpl	r2, [r3, #0]
 8083398:	4b14      	ldr	r3, [pc, #80]	; (80833ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808339a:	681a      	ldr	r2, [r3, #0]
 808339c:	07d2      	lsls	r2, r2, #31
 808339e:	bf5c      	itt	pl
 80833a0:	2201      	movpl	r2, #1
 80833a2:	601a      	strpl	r2, [r3, #0]
 80833a4:	4b12      	ldr	r3, [pc, #72]	; (80833f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80833a6:	681a      	ldr	r2, [r3, #0]
 80833a8:	07d0      	lsls	r0, r2, #31
 80833aa:	bf5c      	itt	pl
 80833ac:	2201      	movpl	r2, #1
 80833ae:	601a      	strpl	r2, [r3, #0]
 80833b0:	4b10      	ldr	r3, [pc, #64]	; (80833f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80833b2:	681a      	ldr	r2, [r3, #0]
 80833b4:	07d1      	lsls	r1, r2, #31
 80833b6:	bf5c      	itt	pl
 80833b8:	2201      	movpl	r2, #1
 80833ba:	601a      	strpl	r2, [r3, #0]
 80833bc:	4b0e      	ldr	r3, [pc, #56]	; (80833f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80833be:	681a      	ldr	r2, [r3, #0]
 80833c0:	07d2      	lsls	r2, r2, #31
 80833c2:	bf5c      	itt	pl
 80833c4:	2201      	movpl	r2, #1
 80833c6:	601a      	strpl	r2, [r3, #0]
 80833c8:	4770      	bx	lr
 80833ca:	bf00      	nop
 80833cc:	200007cc 	.word	0x200007cc
 80833d0:	200007c8 	.word	0x200007c8
 80833d4:	200007c4 	.word	0x200007c4
 80833d8:	200007c0 	.word	0x200007c0
 80833dc:	200007bc 	.word	0x200007bc
 80833e0:	200007b8 	.word	0x200007b8
 80833e4:	200007b4 	.word	0x200007b4
 80833e8:	200007b0 	.word	0x200007b0
 80833ec:	200007ac 	.word	0x200007ac
 80833f0:	200007a8 	.word	0x200007a8
 80833f4:	200007a4 	.word	0x200007a4
 80833f8:	200007a0 	.word	0x200007a0

080833fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80833fc:	4b18      	ldr	r3, [pc, #96]	; (8083460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80833fe:	681a      	ldr	r2, [r3, #0]
 8083400:	07d1      	lsls	r1, r2, #31
 8083402:	bf5c      	itt	pl
 8083404:	2201      	movpl	r2, #1
 8083406:	601a      	strpl	r2, [r3, #0]
 8083408:	4b16      	ldr	r3, [pc, #88]	; (8083464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808340a:	681a      	ldr	r2, [r3, #0]
 808340c:	07d2      	lsls	r2, r2, #31
 808340e:	bf5c      	itt	pl
 8083410:	2201      	movpl	r2, #1
 8083412:	601a      	strpl	r2, [r3, #0]
 8083414:	4b14      	ldr	r3, [pc, #80]	; (8083468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083416:	681a      	ldr	r2, [r3, #0]
 8083418:	07d0      	lsls	r0, r2, #31
 808341a:	bf5c      	itt	pl
 808341c:	2201      	movpl	r2, #1
 808341e:	601a      	strpl	r2, [r3, #0]
 8083420:	4b12      	ldr	r3, [pc, #72]	; (808346c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083422:	681a      	ldr	r2, [r3, #0]
 8083424:	07d1      	lsls	r1, r2, #31
 8083426:	bf5c      	itt	pl
 8083428:	2201      	movpl	r2, #1
 808342a:	601a      	strpl	r2, [r3, #0]
 808342c:	4b10      	ldr	r3, [pc, #64]	; (8083470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808342e:	681a      	ldr	r2, [r3, #0]
 8083430:	07d2      	lsls	r2, r2, #31
 8083432:	bf5c      	itt	pl
 8083434:	2201      	movpl	r2, #1
 8083436:	601a      	strpl	r2, [r3, #0]
 8083438:	4b0e      	ldr	r3, [pc, #56]	; (8083474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808343a:	681a      	ldr	r2, [r3, #0]
 808343c:	07d0      	lsls	r0, r2, #31
 808343e:	bf5c      	itt	pl
 8083440:	2201      	movpl	r2, #1
 8083442:	601a      	strpl	r2, [r3, #0]
 8083444:	4b0c      	ldr	r3, [pc, #48]	; (8083478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083446:	681a      	ldr	r2, [r3, #0]
 8083448:	07d1      	lsls	r1, r2, #31
 808344a:	bf5c      	itt	pl
 808344c:	2201      	movpl	r2, #1
 808344e:	601a      	strpl	r2, [r3, #0]
 8083450:	4b0a      	ldr	r3, [pc, #40]	; (808347c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083452:	681a      	ldr	r2, [r3, #0]
 8083454:	07d2      	lsls	r2, r2, #31
 8083456:	bf5c      	itt	pl
 8083458:	2201      	movpl	r2, #1
 808345a:	601a      	strpl	r2, [r3, #0]
 808345c:	4770      	bx	lr
 808345e:	bf00      	nop
 8083460:	200007ec 	.word	0x200007ec
 8083464:	200007e8 	.word	0x200007e8
 8083468:	200007e4 	.word	0x200007e4
 808346c:	200007e0 	.word	0x200007e0
 8083470:	200007dc 	.word	0x200007dc
 8083474:	200007d8 	.word	0x200007d8
 8083478:	200007d4 	.word	0x200007d4
 808347c:	200007d0 	.word	0x200007d0

08083480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083480:	4b18      	ldr	r3, [pc, #96]	; (80834e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083482:	681a      	ldr	r2, [r3, #0]
 8083484:	07d1      	lsls	r1, r2, #31
 8083486:	bf5c      	itt	pl
 8083488:	2201      	movpl	r2, #1
 808348a:	601a      	strpl	r2, [r3, #0]
 808348c:	4b16      	ldr	r3, [pc, #88]	; (80834e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808348e:	681a      	ldr	r2, [r3, #0]
 8083490:	07d2      	lsls	r2, r2, #31
 8083492:	bf5c      	itt	pl
 8083494:	2201      	movpl	r2, #1
 8083496:	601a      	strpl	r2, [r3, #0]
 8083498:	4b14      	ldr	r3, [pc, #80]	; (80834ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808349a:	681a      	ldr	r2, [r3, #0]
 808349c:	07d0      	lsls	r0, r2, #31
 808349e:	bf5c      	itt	pl
 80834a0:	2201      	movpl	r2, #1
 80834a2:	601a      	strpl	r2, [r3, #0]
 80834a4:	4b12      	ldr	r3, [pc, #72]	; (80834f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80834a6:	681a      	ldr	r2, [r3, #0]
 80834a8:	07d1      	lsls	r1, r2, #31
 80834aa:	bf5c      	itt	pl
 80834ac:	2201      	movpl	r2, #1
 80834ae:	601a      	strpl	r2, [r3, #0]
 80834b0:	4b10      	ldr	r3, [pc, #64]	; (80834f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80834b2:	681a      	ldr	r2, [r3, #0]
 80834b4:	07d2      	lsls	r2, r2, #31
 80834b6:	bf5c      	itt	pl
 80834b8:	2201      	movpl	r2, #1
 80834ba:	601a      	strpl	r2, [r3, #0]
 80834bc:	4b0e      	ldr	r3, [pc, #56]	; (80834f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80834be:	681a      	ldr	r2, [r3, #0]
 80834c0:	07d0      	lsls	r0, r2, #31
 80834c2:	bf5c      	itt	pl
 80834c4:	2201      	movpl	r2, #1
 80834c6:	601a      	strpl	r2, [r3, #0]
 80834c8:	4b0c      	ldr	r3, [pc, #48]	; (80834fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80834ca:	681a      	ldr	r2, [r3, #0]
 80834cc:	07d1      	lsls	r1, r2, #31
 80834ce:	bf5c      	itt	pl
 80834d0:	2201      	movpl	r2, #1
 80834d2:	601a      	strpl	r2, [r3, #0]
 80834d4:	4b0a      	ldr	r3, [pc, #40]	; (8083500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80834d6:	681a      	ldr	r2, [r3, #0]
 80834d8:	07d2      	lsls	r2, r2, #31
 80834da:	bf5c      	itt	pl
 80834dc:	2201      	movpl	r2, #1
 80834de:	601a      	strpl	r2, [r3, #0]
 80834e0:	4770      	bx	lr
 80834e2:	bf00      	nop
 80834e4:	2000080c 	.word	0x2000080c
 80834e8:	20000808 	.word	0x20000808
 80834ec:	20000804 	.word	0x20000804
 80834f0:	20000800 	.word	0x20000800
 80834f4:	200007fc 	.word	0x200007fc
 80834f8:	200007f8 	.word	0x200007f8
 80834fc:	200007f4 	.word	0x200007f4
 8083500:	200007f0 	.word	0x200007f0

08083504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083504:	4b24      	ldr	r3, [pc, #144]	; (8083598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8083506:	681a      	ldr	r2, [r3, #0]
 8083508:	07d0      	lsls	r0, r2, #31
 808350a:	bf5c      	itt	pl
 808350c:	2201      	movpl	r2, #1
 808350e:	601a      	strpl	r2, [r3, #0]
 8083510:	4b22      	ldr	r3, [pc, #136]	; (808359c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083512:	681a      	ldr	r2, [r3, #0]
 8083514:	07d1      	lsls	r1, r2, #31
 8083516:	bf5c      	itt	pl
 8083518:	2201      	movpl	r2, #1
 808351a:	601a      	strpl	r2, [r3, #0]
 808351c:	4b20      	ldr	r3, [pc, #128]	; (80835a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808351e:	681a      	ldr	r2, [r3, #0]
 8083520:	07d2      	lsls	r2, r2, #31
 8083522:	bf5c      	itt	pl
 8083524:	2201      	movpl	r2, #1
 8083526:	601a      	strpl	r2, [r3, #0]
 8083528:	4b1e      	ldr	r3, [pc, #120]	; (80835a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808352a:	681a      	ldr	r2, [r3, #0]
 808352c:	07d0      	lsls	r0, r2, #31
 808352e:	bf5c      	itt	pl
 8083530:	2201      	movpl	r2, #1
 8083532:	601a      	strpl	r2, [r3, #0]
 8083534:	4b1c      	ldr	r3, [pc, #112]	; (80835a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8083536:	681a      	ldr	r2, [r3, #0]
 8083538:	07d1      	lsls	r1, r2, #31
 808353a:	bf5c      	itt	pl
 808353c:	2201      	movpl	r2, #1
 808353e:	601a      	strpl	r2, [r3, #0]
 8083540:	4b1a      	ldr	r3, [pc, #104]	; (80835ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8083542:	681a      	ldr	r2, [r3, #0]
 8083544:	07d2      	lsls	r2, r2, #31
 8083546:	bf5c      	itt	pl
 8083548:	2201      	movpl	r2, #1
 808354a:	601a      	strpl	r2, [r3, #0]
 808354c:	4b18      	ldr	r3, [pc, #96]	; (80835b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808354e:	681a      	ldr	r2, [r3, #0]
 8083550:	07d0      	lsls	r0, r2, #31
 8083552:	bf5c      	itt	pl
 8083554:	2201      	movpl	r2, #1
 8083556:	601a      	strpl	r2, [r3, #0]
 8083558:	4b16      	ldr	r3, [pc, #88]	; (80835b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808355a:	681a      	ldr	r2, [r3, #0]
 808355c:	07d1      	lsls	r1, r2, #31
 808355e:	bf5c      	itt	pl
 8083560:	2201      	movpl	r2, #1
 8083562:	601a      	strpl	r2, [r3, #0]
 8083564:	4b14      	ldr	r3, [pc, #80]	; (80835b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8083566:	681a      	ldr	r2, [r3, #0]
 8083568:	07d2      	lsls	r2, r2, #31
 808356a:	bf5c      	itt	pl
 808356c:	2201      	movpl	r2, #1
 808356e:	601a      	strpl	r2, [r3, #0]
 8083570:	4b12      	ldr	r3, [pc, #72]	; (80835bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8083572:	681a      	ldr	r2, [r3, #0]
 8083574:	07d0      	lsls	r0, r2, #31
 8083576:	bf5c      	itt	pl
 8083578:	2201      	movpl	r2, #1
 808357a:	601a      	strpl	r2, [r3, #0]
 808357c:	4b10      	ldr	r3, [pc, #64]	; (80835c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808357e:	681a      	ldr	r2, [r3, #0]
 8083580:	07d1      	lsls	r1, r2, #31
 8083582:	bf5c      	itt	pl
 8083584:	2201      	movpl	r2, #1
 8083586:	601a      	strpl	r2, [r3, #0]
 8083588:	4b0e      	ldr	r3, [pc, #56]	; (80835c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808358a:	681a      	ldr	r2, [r3, #0]
 808358c:	07d2      	lsls	r2, r2, #31
 808358e:	bf5c      	itt	pl
 8083590:	2201      	movpl	r2, #1
 8083592:	601a      	strpl	r2, [r3, #0]
 8083594:	4770      	bx	lr
 8083596:	bf00      	nop
 8083598:	2000083c 	.word	0x2000083c
 808359c:	20000838 	.word	0x20000838
 80835a0:	20000834 	.word	0x20000834
 80835a4:	20000830 	.word	0x20000830
 80835a8:	2000082c 	.word	0x2000082c
 80835ac:	20000828 	.word	0x20000828
 80835b0:	20000824 	.word	0x20000824
 80835b4:	20000820 	.word	0x20000820
 80835b8:	2000081c 	.word	0x2000081c
 80835bc:	20000818 	.word	0x20000818
 80835c0:	20000814 	.word	0x20000814
 80835c4:	20000810 	.word	0x20000810

080835c8 <__aeabi_drsub>:
 80835c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80835cc:	e002      	b.n	80835d4 <__adddf3>
 80835ce:	bf00      	nop

080835d0 <__aeabi_dsub>:
 80835d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080835d4 <__adddf3>:
 80835d4:	b530      	push	{r4, r5, lr}
 80835d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80835da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80835de:	ea94 0f05 	teq	r4, r5
 80835e2:	bf08      	it	eq
 80835e4:	ea90 0f02 	teqeq	r0, r2
 80835e8:	bf1f      	itttt	ne
 80835ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80835ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80835f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80835f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80835fa:	f000 80e2 	beq.w	80837c2 <__adddf3+0x1ee>
 80835fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083602:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8083606:	bfb8      	it	lt
 8083608:	426d      	neglt	r5, r5
 808360a:	dd0c      	ble.n	8083626 <__adddf3+0x52>
 808360c:	442c      	add	r4, r5
 808360e:	ea80 0202 	eor.w	r2, r0, r2
 8083612:	ea81 0303 	eor.w	r3, r1, r3
 8083616:	ea82 0000 	eor.w	r0, r2, r0
 808361a:	ea83 0101 	eor.w	r1, r3, r1
 808361e:	ea80 0202 	eor.w	r2, r0, r2
 8083622:	ea81 0303 	eor.w	r3, r1, r3
 8083626:	2d36      	cmp	r5, #54	; 0x36
 8083628:	bf88      	it	hi
 808362a:	bd30      	pophi	{r4, r5, pc}
 808362c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083630:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083634:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083638:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808363c:	d002      	beq.n	8083644 <__adddf3+0x70>
 808363e:	4240      	negs	r0, r0
 8083640:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083644:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083648:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808364c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083650:	d002      	beq.n	8083658 <__adddf3+0x84>
 8083652:	4252      	negs	r2, r2
 8083654:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083658:	ea94 0f05 	teq	r4, r5
 808365c:	f000 80a7 	beq.w	80837ae <__adddf3+0x1da>
 8083660:	f1a4 0401 	sub.w	r4, r4, #1
 8083664:	f1d5 0e20 	rsbs	lr, r5, #32
 8083668:	db0d      	blt.n	8083686 <__adddf3+0xb2>
 808366a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808366e:	fa22 f205 	lsr.w	r2, r2, r5
 8083672:	1880      	adds	r0, r0, r2
 8083674:	f141 0100 	adc.w	r1, r1, #0
 8083678:	fa03 f20e 	lsl.w	r2, r3, lr
 808367c:	1880      	adds	r0, r0, r2
 808367e:	fa43 f305 	asr.w	r3, r3, r5
 8083682:	4159      	adcs	r1, r3
 8083684:	e00e      	b.n	80836a4 <__adddf3+0xd0>
 8083686:	f1a5 0520 	sub.w	r5, r5, #32
 808368a:	f10e 0e20 	add.w	lr, lr, #32
 808368e:	2a01      	cmp	r2, #1
 8083690:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083694:	bf28      	it	cs
 8083696:	f04c 0c02 	orrcs.w	ip, ip, #2
 808369a:	fa43 f305 	asr.w	r3, r3, r5
 808369e:	18c0      	adds	r0, r0, r3
 80836a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80836a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80836a8:	d507      	bpl.n	80836ba <__adddf3+0xe6>
 80836aa:	f04f 0e00 	mov.w	lr, #0
 80836ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80836b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80836b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80836ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80836be:	d31b      	bcc.n	80836f8 <__adddf3+0x124>
 80836c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80836c4:	d30c      	bcc.n	80836e0 <__adddf3+0x10c>
 80836c6:	0849      	lsrs	r1, r1, #1
 80836c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80836cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80836d0:	f104 0401 	add.w	r4, r4, #1
 80836d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80836d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80836dc:	f080 809a 	bcs.w	8083814 <__adddf3+0x240>
 80836e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80836e4:	bf08      	it	eq
 80836e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80836ea:	f150 0000 	adcs.w	r0, r0, #0
 80836ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80836f2:	ea41 0105 	orr.w	r1, r1, r5
 80836f6:	bd30      	pop	{r4, r5, pc}
 80836f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80836fc:	4140      	adcs	r0, r0
 80836fe:	eb41 0101 	adc.w	r1, r1, r1
 8083702:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083706:	f1a4 0401 	sub.w	r4, r4, #1
 808370a:	d1e9      	bne.n	80836e0 <__adddf3+0x10c>
 808370c:	f091 0f00 	teq	r1, #0
 8083710:	bf04      	itt	eq
 8083712:	4601      	moveq	r1, r0
 8083714:	2000      	moveq	r0, #0
 8083716:	fab1 f381 	clz	r3, r1
 808371a:	bf08      	it	eq
 808371c:	3320      	addeq	r3, #32
 808371e:	f1a3 030b 	sub.w	r3, r3, #11
 8083722:	f1b3 0220 	subs.w	r2, r3, #32
 8083726:	da0c      	bge.n	8083742 <__adddf3+0x16e>
 8083728:	320c      	adds	r2, #12
 808372a:	dd08      	ble.n	808373e <__adddf3+0x16a>
 808372c:	f102 0c14 	add.w	ip, r2, #20
 8083730:	f1c2 020c 	rsb	r2, r2, #12
 8083734:	fa01 f00c 	lsl.w	r0, r1, ip
 8083738:	fa21 f102 	lsr.w	r1, r1, r2
 808373c:	e00c      	b.n	8083758 <__adddf3+0x184>
 808373e:	f102 0214 	add.w	r2, r2, #20
 8083742:	bfd8      	it	le
 8083744:	f1c2 0c20 	rsble	ip, r2, #32
 8083748:	fa01 f102 	lsl.w	r1, r1, r2
 808374c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083750:	bfdc      	itt	le
 8083752:	ea41 010c 	orrle.w	r1, r1, ip
 8083756:	4090      	lslle	r0, r2
 8083758:	1ae4      	subs	r4, r4, r3
 808375a:	bfa2      	ittt	ge
 808375c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083760:	4329      	orrge	r1, r5
 8083762:	bd30      	popge	{r4, r5, pc}
 8083764:	ea6f 0404 	mvn.w	r4, r4
 8083768:	3c1f      	subs	r4, #31
 808376a:	da1c      	bge.n	80837a6 <__adddf3+0x1d2>
 808376c:	340c      	adds	r4, #12
 808376e:	dc0e      	bgt.n	808378e <__adddf3+0x1ba>
 8083770:	f104 0414 	add.w	r4, r4, #20
 8083774:	f1c4 0220 	rsb	r2, r4, #32
 8083778:	fa20 f004 	lsr.w	r0, r0, r4
 808377c:	fa01 f302 	lsl.w	r3, r1, r2
 8083780:	ea40 0003 	orr.w	r0, r0, r3
 8083784:	fa21 f304 	lsr.w	r3, r1, r4
 8083788:	ea45 0103 	orr.w	r1, r5, r3
 808378c:	bd30      	pop	{r4, r5, pc}
 808378e:	f1c4 040c 	rsb	r4, r4, #12
 8083792:	f1c4 0220 	rsb	r2, r4, #32
 8083796:	fa20 f002 	lsr.w	r0, r0, r2
 808379a:	fa01 f304 	lsl.w	r3, r1, r4
 808379e:	ea40 0003 	orr.w	r0, r0, r3
 80837a2:	4629      	mov	r1, r5
 80837a4:	bd30      	pop	{r4, r5, pc}
 80837a6:	fa21 f004 	lsr.w	r0, r1, r4
 80837aa:	4629      	mov	r1, r5
 80837ac:	bd30      	pop	{r4, r5, pc}
 80837ae:	f094 0f00 	teq	r4, #0
 80837b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80837b6:	bf06      	itte	eq
 80837b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80837bc:	3401      	addeq	r4, #1
 80837be:	3d01      	subne	r5, #1
 80837c0:	e74e      	b.n	8083660 <__adddf3+0x8c>
 80837c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80837c6:	bf18      	it	ne
 80837c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80837cc:	d029      	beq.n	8083822 <__adddf3+0x24e>
 80837ce:	ea94 0f05 	teq	r4, r5
 80837d2:	bf08      	it	eq
 80837d4:	ea90 0f02 	teqeq	r0, r2
 80837d8:	d005      	beq.n	80837e6 <__adddf3+0x212>
 80837da:	ea54 0c00 	orrs.w	ip, r4, r0
 80837de:	bf04      	itt	eq
 80837e0:	4619      	moveq	r1, r3
 80837e2:	4610      	moveq	r0, r2
 80837e4:	bd30      	pop	{r4, r5, pc}
 80837e6:	ea91 0f03 	teq	r1, r3
 80837ea:	bf1e      	ittt	ne
 80837ec:	2100      	movne	r1, #0
 80837ee:	2000      	movne	r0, #0
 80837f0:	bd30      	popne	{r4, r5, pc}
 80837f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80837f6:	d105      	bne.n	8083804 <__adddf3+0x230>
 80837f8:	0040      	lsls	r0, r0, #1
 80837fa:	4149      	adcs	r1, r1
 80837fc:	bf28      	it	cs
 80837fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083802:	bd30      	pop	{r4, r5, pc}
 8083804:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083808:	bf3c      	itt	cc
 808380a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808380e:	bd30      	popcc	{r4, r5, pc}
 8083810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083814:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808381c:	f04f 0000 	mov.w	r0, #0
 8083820:	bd30      	pop	{r4, r5, pc}
 8083822:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083826:	bf1a      	itte	ne
 8083828:	4619      	movne	r1, r3
 808382a:	4610      	movne	r0, r2
 808382c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083830:	bf1c      	itt	ne
 8083832:	460b      	movne	r3, r1
 8083834:	4602      	movne	r2, r0
 8083836:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808383a:	bf06      	itte	eq
 808383c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083840:	ea91 0f03 	teqeq	r1, r3
 8083844:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083848:	bd30      	pop	{r4, r5, pc}
 808384a:	bf00      	nop

0808384c <__aeabi_ui2d>:
 808384c:	f090 0f00 	teq	r0, #0
 8083850:	bf04      	itt	eq
 8083852:	2100      	moveq	r1, #0
 8083854:	4770      	bxeq	lr
 8083856:	b530      	push	{r4, r5, lr}
 8083858:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808385c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083860:	f04f 0500 	mov.w	r5, #0
 8083864:	f04f 0100 	mov.w	r1, #0
 8083868:	e750      	b.n	808370c <__adddf3+0x138>
 808386a:	bf00      	nop

0808386c <__aeabi_i2d>:
 808386c:	f090 0f00 	teq	r0, #0
 8083870:	bf04      	itt	eq
 8083872:	2100      	moveq	r1, #0
 8083874:	4770      	bxeq	lr
 8083876:	b530      	push	{r4, r5, lr}
 8083878:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808387c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083880:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083884:	bf48      	it	mi
 8083886:	4240      	negmi	r0, r0
 8083888:	f04f 0100 	mov.w	r1, #0
 808388c:	e73e      	b.n	808370c <__adddf3+0x138>
 808388e:	bf00      	nop

08083890 <__aeabi_f2d>:
 8083890:	0042      	lsls	r2, r0, #1
 8083892:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083896:	ea4f 0131 	mov.w	r1, r1, rrx
 808389a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808389e:	bf1f      	itttt	ne
 80838a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80838a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80838a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80838ac:	4770      	bxne	lr
 80838ae:	f092 0f00 	teq	r2, #0
 80838b2:	bf14      	ite	ne
 80838b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80838b8:	4770      	bxeq	lr
 80838ba:	b530      	push	{r4, r5, lr}
 80838bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80838c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80838c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80838c8:	e720      	b.n	808370c <__adddf3+0x138>
 80838ca:	bf00      	nop

080838cc <__aeabi_ul2d>:
 80838cc:	ea50 0201 	orrs.w	r2, r0, r1
 80838d0:	bf08      	it	eq
 80838d2:	4770      	bxeq	lr
 80838d4:	b530      	push	{r4, r5, lr}
 80838d6:	f04f 0500 	mov.w	r5, #0
 80838da:	e00a      	b.n	80838f2 <__aeabi_l2d+0x16>

080838dc <__aeabi_l2d>:
 80838dc:	ea50 0201 	orrs.w	r2, r0, r1
 80838e0:	bf08      	it	eq
 80838e2:	4770      	bxeq	lr
 80838e4:	b530      	push	{r4, r5, lr}
 80838e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80838ea:	d502      	bpl.n	80838f2 <__aeabi_l2d+0x16>
 80838ec:	4240      	negs	r0, r0
 80838ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80838f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80838f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80838fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80838fe:	f43f aedc 	beq.w	80836ba <__adddf3+0xe6>
 8083902:	f04f 0203 	mov.w	r2, #3
 8083906:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808390a:	bf18      	it	ne
 808390c:	3203      	addne	r2, #3
 808390e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083912:	bf18      	it	ne
 8083914:	3203      	addne	r2, #3
 8083916:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808391a:	f1c2 0320 	rsb	r3, r2, #32
 808391e:	fa00 fc03 	lsl.w	ip, r0, r3
 8083922:	fa20 f002 	lsr.w	r0, r0, r2
 8083926:	fa01 fe03 	lsl.w	lr, r1, r3
 808392a:	ea40 000e 	orr.w	r0, r0, lr
 808392e:	fa21 f102 	lsr.w	r1, r1, r2
 8083932:	4414      	add	r4, r2
 8083934:	e6c1      	b.n	80836ba <__adddf3+0xe6>
 8083936:	bf00      	nop

08083938 <__aeabi_dmul>:
 8083938:	b570      	push	{r4, r5, r6, lr}
 808393a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808393e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083942:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083946:	bf1d      	ittte	ne
 8083948:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808394c:	ea94 0f0c 	teqne	r4, ip
 8083950:	ea95 0f0c 	teqne	r5, ip
 8083954:	f000 f8de 	bleq	8083b14 <__aeabi_dmul+0x1dc>
 8083958:	442c      	add	r4, r5
 808395a:	ea81 0603 	eor.w	r6, r1, r3
 808395e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083962:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083966:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808396a:	bf18      	it	ne
 808396c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083978:	d038      	beq.n	80839ec <__aeabi_dmul+0xb4>
 808397a:	fba0 ce02 	umull	ip, lr, r0, r2
 808397e:	f04f 0500 	mov.w	r5, #0
 8083982:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083986:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808398a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808398e:	f04f 0600 	mov.w	r6, #0
 8083992:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083996:	f09c 0f00 	teq	ip, #0
 808399a:	bf18      	it	ne
 808399c:	f04e 0e01 	orrne.w	lr, lr, #1
 80839a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80839a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80839a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80839ac:	d204      	bcs.n	80839b8 <__aeabi_dmul+0x80>
 80839ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80839b2:	416d      	adcs	r5, r5
 80839b4:	eb46 0606 	adc.w	r6, r6, r6
 80839b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80839bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80839c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80839c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80839c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80839cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80839d0:	bf88      	it	hi
 80839d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80839d6:	d81e      	bhi.n	8083a16 <__aeabi_dmul+0xde>
 80839d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80839dc:	bf08      	it	eq
 80839de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80839e2:	f150 0000 	adcs.w	r0, r0, #0
 80839e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80839ea:	bd70      	pop	{r4, r5, r6, pc}
 80839ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80839f0:	ea46 0101 	orr.w	r1, r6, r1
 80839f4:	ea40 0002 	orr.w	r0, r0, r2
 80839f8:	ea81 0103 	eor.w	r1, r1, r3
 80839fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083a00:	bfc2      	ittt	gt
 8083a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8083a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083a10:	f04f 0e00 	mov.w	lr, #0
 8083a14:	3c01      	subs	r4, #1
 8083a16:	f300 80ab 	bgt.w	8083b70 <__aeabi_dmul+0x238>
 8083a1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083a1e:	bfde      	ittt	le
 8083a20:	2000      	movle	r0, #0
 8083a22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083a26:	bd70      	pople	{r4, r5, r6, pc}
 8083a28:	f1c4 0400 	rsb	r4, r4, #0
 8083a2c:	3c20      	subs	r4, #32
 8083a2e:	da35      	bge.n	8083a9c <__aeabi_dmul+0x164>
 8083a30:	340c      	adds	r4, #12
 8083a32:	dc1b      	bgt.n	8083a6c <__aeabi_dmul+0x134>
 8083a34:	f104 0414 	add.w	r4, r4, #20
 8083a38:	f1c4 0520 	rsb	r5, r4, #32
 8083a3c:	fa00 f305 	lsl.w	r3, r0, r5
 8083a40:	fa20 f004 	lsr.w	r0, r0, r4
 8083a44:	fa01 f205 	lsl.w	r2, r1, r5
 8083a48:	ea40 0002 	orr.w	r0, r0, r2
 8083a4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083a50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083a54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083a58:	fa21 f604 	lsr.w	r6, r1, r4
 8083a5c:	eb42 0106 	adc.w	r1, r2, r6
 8083a60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083a64:	bf08      	it	eq
 8083a66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083a6a:	bd70      	pop	{r4, r5, r6, pc}
 8083a6c:	f1c4 040c 	rsb	r4, r4, #12
 8083a70:	f1c4 0520 	rsb	r5, r4, #32
 8083a74:	fa00 f304 	lsl.w	r3, r0, r4
 8083a78:	fa20 f005 	lsr.w	r0, r0, r5
 8083a7c:	fa01 f204 	lsl.w	r2, r1, r4
 8083a80:	ea40 0002 	orr.w	r0, r0, r2
 8083a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083a88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083a8c:	f141 0100 	adc.w	r1, r1, #0
 8083a90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083a94:	bf08      	it	eq
 8083a96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083a9a:	bd70      	pop	{r4, r5, r6, pc}
 8083a9c:	f1c4 0520 	rsb	r5, r4, #32
 8083aa0:	fa00 f205 	lsl.w	r2, r0, r5
 8083aa4:	ea4e 0e02 	orr.w	lr, lr, r2
 8083aa8:	fa20 f304 	lsr.w	r3, r0, r4
 8083aac:	fa01 f205 	lsl.w	r2, r1, r5
 8083ab0:	ea43 0302 	orr.w	r3, r3, r2
 8083ab4:	fa21 f004 	lsr.w	r0, r1, r4
 8083ab8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083abc:	fa21 f204 	lsr.w	r2, r1, r4
 8083ac0:	ea20 0002 	bic.w	r0, r0, r2
 8083ac4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083ac8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083acc:	bf08      	it	eq
 8083ace:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083ad2:	bd70      	pop	{r4, r5, r6, pc}
 8083ad4:	f094 0f00 	teq	r4, #0
 8083ad8:	d10f      	bne.n	8083afa <__aeabi_dmul+0x1c2>
 8083ada:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083ade:	0040      	lsls	r0, r0, #1
 8083ae0:	eb41 0101 	adc.w	r1, r1, r1
 8083ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ae8:	bf08      	it	eq
 8083aea:	3c01      	subeq	r4, #1
 8083aec:	d0f7      	beq.n	8083ade <__aeabi_dmul+0x1a6>
 8083aee:	ea41 0106 	orr.w	r1, r1, r6
 8083af2:	f095 0f00 	teq	r5, #0
 8083af6:	bf18      	it	ne
 8083af8:	4770      	bxne	lr
 8083afa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083afe:	0052      	lsls	r2, r2, #1
 8083b00:	eb43 0303 	adc.w	r3, r3, r3
 8083b04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083b08:	bf08      	it	eq
 8083b0a:	3d01      	subeq	r5, #1
 8083b0c:	d0f7      	beq.n	8083afe <__aeabi_dmul+0x1c6>
 8083b0e:	ea43 0306 	orr.w	r3, r3, r6
 8083b12:	4770      	bx	lr
 8083b14:	ea94 0f0c 	teq	r4, ip
 8083b18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083b1c:	bf18      	it	ne
 8083b1e:	ea95 0f0c 	teqne	r5, ip
 8083b22:	d00c      	beq.n	8083b3e <__aeabi_dmul+0x206>
 8083b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083b28:	bf18      	it	ne
 8083b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083b2e:	d1d1      	bne.n	8083ad4 <__aeabi_dmul+0x19c>
 8083b30:	ea81 0103 	eor.w	r1, r1, r3
 8083b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b38:	f04f 0000 	mov.w	r0, #0
 8083b3c:	bd70      	pop	{r4, r5, r6, pc}
 8083b3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083b42:	bf06      	itte	eq
 8083b44:	4610      	moveq	r0, r2
 8083b46:	4619      	moveq	r1, r3
 8083b48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083b4c:	d019      	beq.n	8083b82 <__aeabi_dmul+0x24a>
 8083b4e:	ea94 0f0c 	teq	r4, ip
 8083b52:	d102      	bne.n	8083b5a <__aeabi_dmul+0x222>
 8083b54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083b58:	d113      	bne.n	8083b82 <__aeabi_dmul+0x24a>
 8083b5a:	ea95 0f0c 	teq	r5, ip
 8083b5e:	d105      	bne.n	8083b6c <__aeabi_dmul+0x234>
 8083b60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083b64:	bf1c      	itt	ne
 8083b66:	4610      	movne	r0, r2
 8083b68:	4619      	movne	r1, r3
 8083b6a:	d10a      	bne.n	8083b82 <__aeabi_dmul+0x24a>
 8083b6c:	ea81 0103 	eor.w	r1, r1, r3
 8083b70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083b78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083b7c:	f04f 0000 	mov.w	r0, #0
 8083b80:	bd70      	pop	{r4, r5, r6, pc}
 8083b82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083b86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083b8a:	bd70      	pop	{r4, r5, r6, pc}

08083b8c <__aeabi_ddiv>:
 8083b8c:	b570      	push	{r4, r5, r6, lr}
 8083b8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083b92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083b96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083b9a:	bf1d      	ittte	ne
 8083b9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083ba0:	ea94 0f0c 	teqne	r4, ip
 8083ba4:	ea95 0f0c 	teqne	r5, ip
 8083ba8:	f000 f8a7 	bleq	8083cfa <__aeabi_ddiv+0x16e>
 8083bac:	eba4 0405 	sub.w	r4, r4, r5
 8083bb0:	ea81 0e03 	eor.w	lr, r1, r3
 8083bb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083bb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083bbc:	f000 8088 	beq.w	8083cd0 <__aeabi_ddiv+0x144>
 8083bc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083bc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083bc8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083bcc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083bd0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083bd4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083bd8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083bdc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083be0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083be4:	429d      	cmp	r5, r3
 8083be6:	bf08      	it	eq
 8083be8:	4296      	cmpeq	r6, r2
 8083bea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083bee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083bf2:	d202      	bcs.n	8083bfa <__aeabi_ddiv+0x6e>
 8083bf4:	085b      	lsrs	r3, r3, #1
 8083bf6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083bfa:	1ab6      	subs	r6, r6, r2
 8083bfc:	eb65 0503 	sbc.w	r5, r5, r3
 8083c00:	085b      	lsrs	r3, r3, #1
 8083c02:	ea4f 0232 	mov.w	r2, r2, rrx
 8083c06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083c0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083c0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c16:	bf22      	ittt	cs
 8083c18:	1ab6      	subcs	r6, r6, r2
 8083c1a:	4675      	movcs	r5, lr
 8083c1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8083c20:	085b      	lsrs	r3, r3, #1
 8083c22:	ea4f 0232 	mov.w	r2, r2, rrx
 8083c26:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c2e:	bf22      	ittt	cs
 8083c30:	1ab6      	subcs	r6, r6, r2
 8083c32:	4675      	movcs	r5, lr
 8083c34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083c38:	085b      	lsrs	r3, r3, #1
 8083c3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083c3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c46:	bf22      	ittt	cs
 8083c48:	1ab6      	subcs	r6, r6, r2
 8083c4a:	4675      	movcs	r5, lr
 8083c4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083c50:	085b      	lsrs	r3, r3, #1
 8083c52:	ea4f 0232 	mov.w	r2, r2, rrx
 8083c56:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c5e:	bf22      	ittt	cs
 8083c60:	1ab6      	subcs	r6, r6, r2
 8083c62:	4675      	movcs	r5, lr
 8083c64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083c68:	ea55 0e06 	orrs.w	lr, r5, r6
 8083c6c:	d018      	beq.n	8083ca0 <__aeabi_ddiv+0x114>
 8083c6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083c72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083c76:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083c7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083c7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083c82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083c86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083c8a:	d1c0      	bne.n	8083c0e <__aeabi_ddiv+0x82>
 8083c8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083c90:	d10b      	bne.n	8083caa <__aeabi_ddiv+0x11e>
 8083c92:	ea41 0100 	orr.w	r1, r1, r0
 8083c96:	f04f 0000 	mov.w	r0, #0
 8083c9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083c9e:	e7b6      	b.n	8083c0e <__aeabi_ddiv+0x82>
 8083ca0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ca4:	bf04      	itt	eq
 8083ca6:	4301      	orreq	r1, r0
 8083ca8:	2000      	moveq	r0, #0
 8083caa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083cae:	bf88      	it	hi
 8083cb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083cb4:	f63f aeaf 	bhi.w	8083a16 <__aeabi_dmul+0xde>
 8083cb8:	ebb5 0c03 	subs.w	ip, r5, r3
 8083cbc:	bf04      	itt	eq
 8083cbe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083cc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083cc6:	f150 0000 	adcs.w	r0, r0, #0
 8083cca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083cce:	bd70      	pop	{r4, r5, r6, pc}
 8083cd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083cd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083cd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083cdc:	bfc2      	ittt	gt
 8083cde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083ce2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083ce6:	bd70      	popgt	{r4, r5, r6, pc}
 8083ce8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083cec:	f04f 0e00 	mov.w	lr, #0
 8083cf0:	3c01      	subs	r4, #1
 8083cf2:	e690      	b.n	8083a16 <__aeabi_dmul+0xde>
 8083cf4:	ea45 0e06 	orr.w	lr, r5, r6
 8083cf8:	e68d      	b.n	8083a16 <__aeabi_dmul+0xde>
 8083cfa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083cfe:	ea94 0f0c 	teq	r4, ip
 8083d02:	bf08      	it	eq
 8083d04:	ea95 0f0c 	teqeq	r5, ip
 8083d08:	f43f af3b 	beq.w	8083b82 <__aeabi_dmul+0x24a>
 8083d0c:	ea94 0f0c 	teq	r4, ip
 8083d10:	d10a      	bne.n	8083d28 <__aeabi_ddiv+0x19c>
 8083d12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083d16:	f47f af34 	bne.w	8083b82 <__aeabi_dmul+0x24a>
 8083d1a:	ea95 0f0c 	teq	r5, ip
 8083d1e:	f47f af25 	bne.w	8083b6c <__aeabi_dmul+0x234>
 8083d22:	4610      	mov	r0, r2
 8083d24:	4619      	mov	r1, r3
 8083d26:	e72c      	b.n	8083b82 <__aeabi_dmul+0x24a>
 8083d28:	ea95 0f0c 	teq	r5, ip
 8083d2c:	d106      	bne.n	8083d3c <__aeabi_ddiv+0x1b0>
 8083d2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083d32:	f43f aefd 	beq.w	8083b30 <__aeabi_dmul+0x1f8>
 8083d36:	4610      	mov	r0, r2
 8083d38:	4619      	mov	r1, r3
 8083d3a:	e722      	b.n	8083b82 <__aeabi_dmul+0x24a>
 8083d3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083d40:	bf18      	it	ne
 8083d42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083d46:	f47f aec5 	bne.w	8083ad4 <__aeabi_dmul+0x19c>
 8083d4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083d4e:	f47f af0d 	bne.w	8083b6c <__aeabi_dmul+0x234>
 8083d52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083d56:	f47f aeeb 	bne.w	8083b30 <__aeabi_dmul+0x1f8>
 8083d5a:	e712      	b.n	8083b82 <__aeabi_dmul+0x24a>

08083d5c <__aeabi_d2f>:
 8083d5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083d60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083d64:	bf24      	itt	cs
 8083d66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083d6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083d6e:	d90d      	bls.n	8083d8c <__aeabi_d2f+0x30>
 8083d70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083d74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083d78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083d7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083d80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083d84:	bf08      	it	eq
 8083d86:	f020 0001 	biceq.w	r0, r0, #1
 8083d8a:	4770      	bx	lr
 8083d8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083d90:	d121      	bne.n	8083dd6 <__aeabi_d2f+0x7a>
 8083d92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083d96:	bfbc      	itt	lt
 8083d98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083d9c:	4770      	bxlt	lr
 8083d9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083da2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083da6:	f1c2 0218 	rsb	r2, r2, #24
 8083daa:	f1c2 0c20 	rsb	ip, r2, #32
 8083dae:	fa10 f30c 	lsls.w	r3, r0, ip
 8083db2:	fa20 f002 	lsr.w	r0, r0, r2
 8083db6:	bf18      	it	ne
 8083db8:	f040 0001 	orrne.w	r0, r0, #1
 8083dbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083dc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083dc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8083dc8:	ea40 000c 	orr.w	r0, r0, ip
 8083dcc:	fa23 f302 	lsr.w	r3, r3, r2
 8083dd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083dd4:	e7cc      	b.n	8083d70 <__aeabi_d2f+0x14>
 8083dd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8083dda:	d107      	bne.n	8083dec <__aeabi_d2f+0x90>
 8083ddc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8083de0:	bf1e      	ittt	ne
 8083de2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8083de6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8083dea:	4770      	bxne	lr
 8083dec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083df0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083df8:	4770      	bx	lr
 8083dfa:	bf00      	nop

08083dfc <__aeabi_frsub>:
 8083dfc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083e00:	e002      	b.n	8083e08 <__addsf3>
 8083e02:	bf00      	nop

08083e04 <__aeabi_fsub>:
 8083e04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08083e08 <__addsf3>:
 8083e08:	0042      	lsls	r2, r0, #1
 8083e0a:	bf1f      	itttt	ne
 8083e0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083e10:	ea92 0f03 	teqne	r2, r3
 8083e14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083e18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083e1c:	d06a      	beq.n	8083ef4 <__addsf3+0xec>
 8083e1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8083e22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8083e26:	bfc1      	itttt	gt
 8083e28:	18d2      	addgt	r2, r2, r3
 8083e2a:	4041      	eorgt	r1, r0
 8083e2c:	4048      	eorgt	r0, r1
 8083e2e:	4041      	eorgt	r1, r0
 8083e30:	bfb8      	it	lt
 8083e32:	425b      	neglt	r3, r3
 8083e34:	2b19      	cmp	r3, #25
 8083e36:	bf88      	it	hi
 8083e38:	4770      	bxhi	lr
 8083e3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083e3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083e42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083e46:	bf18      	it	ne
 8083e48:	4240      	negne	r0, r0
 8083e4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083e4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083e52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083e56:	bf18      	it	ne
 8083e58:	4249      	negne	r1, r1
 8083e5a:	ea92 0f03 	teq	r2, r3
 8083e5e:	d03f      	beq.n	8083ee0 <__addsf3+0xd8>
 8083e60:	f1a2 0201 	sub.w	r2, r2, #1
 8083e64:	fa41 fc03 	asr.w	ip, r1, r3
 8083e68:	eb10 000c 	adds.w	r0, r0, ip
 8083e6c:	f1c3 0320 	rsb	r3, r3, #32
 8083e70:	fa01 f103 	lsl.w	r1, r1, r3
 8083e74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083e78:	d502      	bpl.n	8083e80 <__addsf3+0x78>
 8083e7a:	4249      	negs	r1, r1
 8083e7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083e80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083e84:	d313      	bcc.n	8083eae <__addsf3+0xa6>
 8083e86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083e8a:	d306      	bcc.n	8083e9a <__addsf3+0x92>
 8083e8c:	0840      	lsrs	r0, r0, #1
 8083e8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8083e92:	f102 0201 	add.w	r2, r2, #1
 8083e96:	2afe      	cmp	r2, #254	; 0xfe
 8083e98:	d251      	bcs.n	8083f3e <__addsf3+0x136>
 8083e9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083e9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083ea2:	bf08      	it	eq
 8083ea4:	f020 0001 	biceq.w	r0, r0, #1
 8083ea8:	ea40 0003 	orr.w	r0, r0, r3
 8083eac:	4770      	bx	lr
 8083eae:	0049      	lsls	r1, r1, #1
 8083eb0:	eb40 0000 	adc.w	r0, r0, r0
 8083eb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8083eb8:	f1a2 0201 	sub.w	r2, r2, #1
 8083ebc:	d1ed      	bne.n	8083e9a <__addsf3+0x92>
 8083ebe:	fab0 fc80 	clz	ip, r0
 8083ec2:	f1ac 0c08 	sub.w	ip, ip, #8
 8083ec6:	ebb2 020c 	subs.w	r2, r2, ip
 8083eca:	fa00 f00c 	lsl.w	r0, r0, ip
 8083ece:	bfaa      	itet	ge
 8083ed0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083ed4:	4252      	neglt	r2, r2
 8083ed6:	4318      	orrge	r0, r3
 8083ed8:	bfbc      	itt	lt
 8083eda:	40d0      	lsrlt	r0, r2
 8083edc:	4318      	orrlt	r0, r3
 8083ede:	4770      	bx	lr
 8083ee0:	f092 0f00 	teq	r2, #0
 8083ee4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083ee8:	bf06      	itte	eq
 8083eea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083eee:	3201      	addeq	r2, #1
 8083ef0:	3b01      	subne	r3, #1
 8083ef2:	e7b5      	b.n	8083e60 <__addsf3+0x58>
 8083ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083efc:	bf18      	it	ne
 8083efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083f02:	d021      	beq.n	8083f48 <__addsf3+0x140>
 8083f04:	ea92 0f03 	teq	r2, r3
 8083f08:	d004      	beq.n	8083f14 <__addsf3+0x10c>
 8083f0a:	f092 0f00 	teq	r2, #0
 8083f0e:	bf08      	it	eq
 8083f10:	4608      	moveq	r0, r1
 8083f12:	4770      	bx	lr
 8083f14:	ea90 0f01 	teq	r0, r1
 8083f18:	bf1c      	itt	ne
 8083f1a:	2000      	movne	r0, #0
 8083f1c:	4770      	bxne	lr
 8083f1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083f22:	d104      	bne.n	8083f2e <__addsf3+0x126>
 8083f24:	0040      	lsls	r0, r0, #1
 8083f26:	bf28      	it	cs
 8083f28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083f2c:	4770      	bx	lr
 8083f2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083f32:	bf3c      	itt	cc
 8083f34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083f38:	4770      	bxcc	lr
 8083f3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083f3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083f42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083f46:	4770      	bx	lr
 8083f48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083f4c:	bf16      	itet	ne
 8083f4e:	4608      	movne	r0, r1
 8083f50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083f54:	4601      	movne	r1, r0
 8083f56:	0242      	lsls	r2, r0, #9
 8083f58:	bf06      	itte	eq
 8083f5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083f5e:	ea90 0f01 	teqeq	r0, r1
 8083f62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083f66:	4770      	bx	lr

08083f68 <__aeabi_ui2f>:
 8083f68:	f04f 0300 	mov.w	r3, #0
 8083f6c:	e004      	b.n	8083f78 <__aeabi_i2f+0x8>
 8083f6e:	bf00      	nop

08083f70 <__aeabi_i2f>:
 8083f70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083f74:	bf48      	it	mi
 8083f76:	4240      	negmi	r0, r0
 8083f78:	ea5f 0c00 	movs.w	ip, r0
 8083f7c:	bf08      	it	eq
 8083f7e:	4770      	bxeq	lr
 8083f80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083f84:	4601      	mov	r1, r0
 8083f86:	f04f 0000 	mov.w	r0, #0
 8083f8a:	e01c      	b.n	8083fc6 <__aeabi_l2f+0x2a>

08083f8c <__aeabi_ul2f>:
 8083f8c:	ea50 0201 	orrs.w	r2, r0, r1
 8083f90:	bf08      	it	eq
 8083f92:	4770      	bxeq	lr
 8083f94:	f04f 0300 	mov.w	r3, #0
 8083f98:	e00a      	b.n	8083fb0 <__aeabi_l2f+0x14>
 8083f9a:	bf00      	nop

08083f9c <__aeabi_l2f>:
 8083f9c:	ea50 0201 	orrs.w	r2, r0, r1
 8083fa0:	bf08      	it	eq
 8083fa2:	4770      	bxeq	lr
 8083fa4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083fa8:	d502      	bpl.n	8083fb0 <__aeabi_l2f+0x14>
 8083faa:	4240      	negs	r0, r0
 8083fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083fb0:	ea5f 0c01 	movs.w	ip, r1
 8083fb4:	bf02      	ittt	eq
 8083fb6:	4684      	moveq	ip, r0
 8083fb8:	4601      	moveq	r1, r0
 8083fba:	2000      	moveq	r0, #0
 8083fbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083fc0:	bf08      	it	eq
 8083fc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083fc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083fca:	fabc f28c 	clz	r2, ip
 8083fce:	3a08      	subs	r2, #8
 8083fd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083fd4:	db10      	blt.n	8083ff8 <__aeabi_l2f+0x5c>
 8083fd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8083fda:	4463      	add	r3, ip
 8083fdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8083fe0:	f1c2 0220 	rsb	r2, r2, #32
 8083fe4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083fe8:	fa20 f202 	lsr.w	r2, r0, r2
 8083fec:	eb43 0002 	adc.w	r0, r3, r2
 8083ff0:	bf08      	it	eq
 8083ff2:	f020 0001 	biceq.w	r0, r0, #1
 8083ff6:	4770      	bx	lr
 8083ff8:	f102 0220 	add.w	r2, r2, #32
 8083ffc:	fa01 fc02 	lsl.w	ip, r1, r2
 8084000:	f1c2 0220 	rsb	r2, r2, #32
 8084004:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084008:	fa21 f202 	lsr.w	r2, r1, r2
 808400c:	eb43 0002 	adc.w	r0, r3, r2
 8084010:	bf08      	it	eq
 8084012:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084016:	4770      	bx	lr

08084018 <__aeabi_fmul>:
 8084018:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808401c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084020:	bf1e      	ittt	ne
 8084022:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084026:	ea92 0f0c 	teqne	r2, ip
 808402a:	ea93 0f0c 	teqne	r3, ip
 808402e:	d06f      	beq.n	8084110 <__aeabi_fmul+0xf8>
 8084030:	441a      	add	r2, r3
 8084032:	ea80 0c01 	eor.w	ip, r0, r1
 8084036:	0240      	lsls	r0, r0, #9
 8084038:	bf18      	it	ne
 808403a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808403e:	d01e      	beq.n	808407e <__aeabi_fmul+0x66>
 8084040:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084044:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8084048:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808404c:	fba0 3101 	umull	r3, r1, r0, r1
 8084050:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084054:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084058:	bf3e      	ittt	cc
 808405a:	0049      	lslcc	r1, r1, #1
 808405c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084060:	005b      	lslcc	r3, r3, #1
 8084062:	ea40 0001 	orr.w	r0, r0, r1
 8084066:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808406a:	2afd      	cmp	r2, #253	; 0xfd
 808406c:	d81d      	bhi.n	80840aa <__aeabi_fmul+0x92>
 808406e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084072:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084076:	bf08      	it	eq
 8084078:	f020 0001 	biceq.w	r0, r0, #1
 808407c:	4770      	bx	lr
 808407e:	f090 0f00 	teq	r0, #0
 8084082:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084086:	bf08      	it	eq
 8084088:	0249      	lsleq	r1, r1, #9
 808408a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808408e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084092:	3a7f      	subs	r2, #127	; 0x7f
 8084094:	bfc2      	ittt	gt
 8084096:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808409a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808409e:	4770      	bxgt	lr
 80840a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80840a4:	f04f 0300 	mov.w	r3, #0
 80840a8:	3a01      	subs	r2, #1
 80840aa:	dc5d      	bgt.n	8084168 <__aeabi_fmul+0x150>
 80840ac:	f112 0f19 	cmn.w	r2, #25
 80840b0:	bfdc      	itt	le
 80840b2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80840b6:	4770      	bxle	lr
 80840b8:	f1c2 0200 	rsb	r2, r2, #0
 80840bc:	0041      	lsls	r1, r0, #1
 80840be:	fa21 f102 	lsr.w	r1, r1, r2
 80840c2:	f1c2 0220 	rsb	r2, r2, #32
 80840c6:	fa00 fc02 	lsl.w	ip, r0, r2
 80840ca:	ea5f 0031 	movs.w	r0, r1, rrx
 80840ce:	f140 0000 	adc.w	r0, r0, #0
 80840d2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80840d6:	bf08      	it	eq
 80840d8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80840dc:	4770      	bx	lr
 80840de:	f092 0f00 	teq	r2, #0
 80840e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80840e6:	bf02      	ittt	eq
 80840e8:	0040      	lsleq	r0, r0, #1
 80840ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80840ee:	3a01      	subeq	r2, #1
 80840f0:	d0f9      	beq.n	80840e6 <__aeabi_fmul+0xce>
 80840f2:	ea40 000c 	orr.w	r0, r0, ip
 80840f6:	f093 0f00 	teq	r3, #0
 80840fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80840fe:	bf02      	ittt	eq
 8084100:	0049      	lsleq	r1, r1, #1
 8084102:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084106:	3b01      	subeq	r3, #1
 8084108:	d0f9      	beq.n	80840fe <__aeabi_fmul+0xe6>
 808410a:	ea41 010c 	orr.w	r1, r1, ip
 808410e:	e78f      	b.n	8084030 <__aeabi_fmul+0x18>
 8084110:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084114:	ea92 0f0c 	teq	r2, ip
 8084118:	bf18      	it	ne
 808411a:	ea93 0f0c 	teqne	r3, ip
 808411e:	d00a      	beq.n	8084136 <__aeabi_fmul+0x11e>
 8084120:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084124:	bf18      	it	ne
 8084126:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808412a:	d1d8      	bne.n	80840de <__aeabi_fmul+0xc6>
 808412c:	ea80 0001 	eor.w	r0, r0, r1
 8084130:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084134:	4770      	bx	lr
 8084136:	f090 0f00 	teq	r0, #0
 808413a:	bf17      	itett	ne
 808413c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084140:	4608      	moveq	r0, r1
 8084142:	f091 0f00 	teqne	r1, #0
 8084146:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808414a:	d014      	beq.n	8084176 <__aeabi_fmul+0x15e>
 808414c:	ea92 0f0c 	teq	r2, ip
 8084150:	d101      	bne.n	8084156 <__aeabi_fmul+0x13e>
 8084152:	0242      	lsls	r2, r0, #9
 8084154:	d10f      	bne.n	8084176 <__aeabi_fmul+0x15e>
 8084156:	ea93 0f0c 	teq	r3, ip
 808415a:	d103      	bne.n	8084164 <__aeabi_fmul+0x14c>
 808415c:	024b      	lsls	r3, r1, #9
 808415e:	bf18      	it	ne
 8084160:	4608      	movne	r0, r1
 8084162:	d108      	bne.n	8084176 <__aeabi_fmul+0x15e>
 8084164:	ea80 0001 	eor.w	r0, r0, r1
 8084168:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808416c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084170:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084174:	4770      	bx	lr
 8084176:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808417a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808417e:	4770      	bx	lr

08084180 <__aeabi_fdiv>:
 8084180:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084188:	bf1e      	ittt	ne
 808418a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808418e:	ea92 0f0c 	teqne	r2, ip
 8084192:	ea93 0f0c 	teqne	r3, ip
 8084196:	d069      	beq.n	808426c <__aeabi_fdiv+0xec>
 8084198:	eba2 0203 	sub.w	r2, r2, r3
 808419c:	ea80 0c01 	eor.w	ip, r0, r1
 80841a0:	0249      	lsls	r1, r1, #9
 80841a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80841a6:	d037      	beq.n	8084218 <__aeabi_fdiv+0x98>
 80841a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80841ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80841b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80841b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80841b8:	428b      	cmp	r3, r1
 80841ba:	bf38      	it	cc
 80841bc:	005b      	lslcc	r3, r3, #1
 80841be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80841c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80841c6:	428b      	cmp	r3, r1
 80841c8:	bf24      	itt	cs
 80841ca:	1a5b      	subcs	r3, r3, r1
 80841cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80841d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80841d4:	bf24      	itt	cs
 80841d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80841da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80841de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80841e2:	bf24      	itt	cs
 80841e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80841e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80841ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80841f0:	bf24      	itt	cs
 80841f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80841f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80841fa:	011b      	lsls	r3, r3, #4
 80841fc:	bf18      	it	ne
 80841fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084202:	d1e0      	bne.n	80841c6 <__aeabi_fdiv+0x46>
 8084204:	2afd      	cmp	r2, #253	; 0xfd
 8084206:	f63f af50 	bhi.w	80840aa <__aeabi_fmul+0x92>
 808420a:	428b      	cmp	r3, r1
 808420c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084210:	bf08      	it	eq
 8084212:	f020 0001 	biceq.w	r0, r0, #1
 8084216:	4770      	bx	lr
 8084218:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808421c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084220:	327f      	adds	r2, #127	; 0x7f
 8084222:	bfc2      	ittt	gt
 8084224:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084228:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808422c:	4770      	bxgt	lr
 808422e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084232:	f04f 0300 	mov.w	r3, #0
 8084236:	3a01      	subs	r2, #1
 8084238:	e737      	b.n	80840aa <__aeabi_fmul+0x92>
 808423a:	f092 0f00 	teq	r2, #0
 808423e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084242:	bf02      	ittt	eq
 8084244:	0040      	lsleq	r0, r0, #1
 8084246:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808424a:	3a01      	subeq	r2, #1
 808424c:	d0f9      	beq.n	8084242 <__aeabi_fdiv+0xc2>
 808424e:	ea40 000c 	orr.w	r0, r0, ip
 8084252:	f093 0f00 	teq	r3, #0
 8084256:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808425a:	bf02      	ittt	eq
 808425c:	0049      	lsleq	r1, r1, #1
 808425e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084262:	3b01      	subeq	r3, #1
 8084264:	d0f9      	beq.n	808425a <__aeabi_fdiv+0xda>
 8084266:	ea41 010c 	orr.w	r1, r1, ip
 808426a:	e795      	b.n	8084198 <__aeabi_fdiv+0x18>
 808426c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084270:	ea92 0f0c 	teq	r2, ip
 8084274:	d108      	bne.n	8084288 <__aeabi_fdiv+0x108>
 8084276:	0242      	lsls	r2, r0, #9
 8084278:	f47f af7d 	bne.w	8084176 <__aeabi_fmul+0x15e>
 808427c:	ea93 0f0c 	teq	r3, ip
 8084280:	f47f af70 	bne.w	8084164 <__aeabi_fmul+0x14c>
 8084284:	4608      	mov	r0, r1
 8084286:	e776      	b.n	8084176 <__aeabi_fmul+0x15e>
 8084288:	ea93 0f0c 	teq	r3, ip
 808428c:	d104      	bne.n	8084298 <__aeabi_fdiv+0x118>
 808428e:	024b      	lsls	r3, r1, #9
 8084290:	f43f af4c 	beq.w	808412c <__aeabi_fmul+0x114>
 8084294:	4608      	mov	r0, r1
 8084296:	e76e      	b.n	8084176 <__aeabi_fmul+0x15e>
 8084298:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808429c:	bf18      	it	ne
 808429e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80842a2:	d1ca      	bne.n	808423a <__aeabi_fdiv+0xba>
 80842a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80842a8:	f47f af5c 	bne.w	8084164 <__aeabi_fmul+0x14c>
 80842ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80842b0:	f47f af3c 	bne.w	808412c <__aeabi_fmul+0x114>
 80842b4:	e75f      	b.n	8084176 <__aeabi_fmul+0x15e>
 80842b6:	bf00      	nop

080842b8 <__gesf2>:
 80842b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80842bc:	e006      	b.n	80842cc <__cmpsf2+0x4>
 80842be:	bf00      	nop

080842c0 <__lesf2>:
 80842c0:	f04f 0c01 	mov.w	ip, #1
 80842c4:	e002      	b.n	80842cc <__cmpsf2+0x4>
 80842c6:	bf00      	nop

080842c8 <__cmpsf2>:
 80842c8:	f04f 0c01 	mov.w	ip, #1
 80842cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80842d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80842d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80842d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80842dc:	bf18      	it	ne
 80842de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80842e2:	d011      	beq.n	8084308 <__cmpsf2+0x40>
 80842e4:	b001      	add	sp, #4
 80842e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80842ea:	bf18      	it	ne
 80842ec:	ea90 0f01 	teqne	r0, r1
 80842f0:	bf58      	it	pl
 80842f2:	ebb2 0003 	subspl.w	r0, r2, r3
 80842f6:	bf88      	it	hi
 80842f8:	17c8      	asrhi	r0, r1, #31
 80842fa:	bf38      	it	cc
 80842fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084300:	bf18      	it	ne
 8084302:	f040 0001 	orrne.w	r0, r0, #1
 8084306:	4770      	bx	lr
 8084308:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808430c:	d102      	bne.n	8084314 <__cmpsf2+0x4c>
 808430e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8084312:	d105      	bne.n	8084320 <__cmpsf2+0x58>
 8084314:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8084318:	d1e4      	bne.n	80842e4 <__cmpsf2+0x1c>
 808431a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808431e:	d0e1      	beq.n	80842e4 <__cmpsf2+0x1c>
 8084320:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084324:	4770      	bx	lr
 8084326:	bf00      	nop

08084328 <__aeabi_cfrcmple>:
 8084328:	4684      	mov	ip, r0
 808432a:	4608      	mov	r0, r1
 808432c:	4661      	mov	r1, ip
 808432e:	e7ff      	b.n	8084330 <__aeabi_cfcmpeq>

08084330 <__aeabi_cfcmpeq>:
 8084330:	b50f      	push	{r0, r1, r2, r3, lr}
 8084332:	f7ff ffc9 	bl	80842c8 <__cmpsf2>
 8084336:	2800      	cmp	r0, #0
 8084338:	bf48      	it	mi
 808433a:	f110 0f00 	cmnmi.w	r0, #0
 808433e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08084340 <__aeabi_fcmpeq>:
 8084340:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084344:	f7ff fff4 	bl	8084330 <__aeabi_cfcmpeq>
 8084348:	bf0c      	ite	eq
 808434a:	2001      	moveq	r0, #1
 808434c:	2000      	movne	r0, #0
 808434e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084352:	bf00      	nop

08084354 <__aeabi_fcmplt>:
 8084354:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084358:	f7ff ffea 	bl	8084330 <__aeabi_cfcmpeq>
 808435c:	bf34      	ite	cc
 808435e:	2001      	movcc	r0, #1
 8084360:	2000      	movcs	r0, #0
 8084362:	f85d fb08 	ldr.w	pc, [sp], #8
 8084366:	bf00      	nop

08084368 <__aeabi_fcmple>:
 8084368:	f84d ed08 	str.w	lr, [sp, #-8]!
 808436c:	f7ff ffe0 	bl	8084330 <__aeabi_cfcmpeq>
 8084370:	bf94      	ite	ls
 8084372:	2001      	movls	r0, #1
 8084374:	2000      	movhi	r0, #0
 8084376:	f85d fb08 	ldr.w	pc, [sp], #8
 808437a:	bf00      	nop

0808437c <__aeabi_fcmpge>:
 808437c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084380:	f7ff ffd2 	bl	8084328 <__aeabi_cfrcmple>
 8084384:	bf94      	ite	ls
 8084386:	2001      	movls	r0, #1
 8084388:	2000      	movhi	r0, #0
 808438a:	f85d fb08 	ldr.w	pc, [sp], #8
 808438e:	bf00      	nop

08084390 <__aeabi_fcmpgt>:
 8084390:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084394:	f7ff ffc8 	bl	8084328 <__aeabi_cfrcmple>
 8084398:	bf34      	ite	cc
 808439a:	2001      	movcc	r0, #1
 808439c:	2000      	movcs	r0, #0
 808439e:	f85d fb08 	ldr.w	pc, [sp], #8
 80843a2:	bf00      	nop

080843a4 <__aeabi_f2iz>:
 80843a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80843a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80843ac:	d30f      	bcc.n	80843ce <__aeabi_f2iz+0x2a>
 80843ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80843b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80843b6:	d90d      	bls.n	80843d4 <__aeabi_f2iz+0x30>
 80843b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80843bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80843c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80843c4:	fa23 f002 	lsr.w	r0, r3, r2
 80843c8:	bf18      	it	ne
 80843ca:	4240      	negne	r0, r0
 80843cc:	4770      	bx	lr
 80843ce:	f04f 0000 	mov.w	r0, #0
 80843d2:	4770      	bx	lr
 80843d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80843d8:	d101      	bne.n	80843de <__aeabi_f2iz+0x3a>
 80843da:	0242      	lsls	r2, r0, #9
 80843dc:	d105      	bne.n	80843ea <__aeabi_f2iz+0x46>
 80843de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80843e2:	bf08      	it	eq
 80843e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80843e8:	4770      	bx	lr
 80843ea:	f04f 0000 	mov.w	r0, #0
 80843ee:	4770      	bx	lr

080843f0 <asctime>:
 80843f0:	4b09      	ldr	r3, [pc, #36]	; (8084418 <asctime+0x28>)
 80843f2:	b570      	push	{r4, r5, r6, lr}
 80843f4:	681c      	ldr	r4, [r3, #0]
 80843f6:	4606      	mov	r6, r0
 80843f8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80843fa:	b93d      	cbnz	r5, 808440c <asctime+0x1c>
 80843fc:	201a      	movs	r0, #26
 80843fe:	f7fd f9f5 	bl	80817ec <malloc>
 8084402:	221a      	movs	r2, #26
 8084404:	6420      	str	r0, [r4, #64]	; 0x40
 8084406:	4629      	mov	r1, r5
 8084408:	f000 f943 	bl	8084692 <memset>
 808440c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808440e:	4630      	mov	r0, r6
 8084410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084414:	f000 b802 	b.w	808441c <asctime_r>
 8084418:	200000fc 	.word	0x200000fc

0808441c <asctime_r>:
 808441c:	b510      	push	{r4, lr}
 808441e:	460c      	mov	r4, r1
 8084420:	6941      	ldr	r1, [r0, #20]
 8084422:	b086      	sub	sp, #24
 8084424:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8084428:	6903      	ldr	r3, [r0, #16]
 808442a:	6982      	ldr	r2, [r0, #24]
 808442c:	9104      	str	r1, [sp, #16]
 808442e:	6801      	ldr	r1, [r0, #0]
 8084430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8084434:	9103      	str	r1, [sp, #12]
 8084436:	6841      	ldr	r1, [r0, #4]
 8084438:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808443c:	9102      	str	r1, [sp, #8]
 808443e:	6881      	ldr	r1, [r0, #8]
 8084440:	9101      	str	r1, [sp, #4]
 8084442:	68c1      	ldr	r1, [r0, #12]
 8084444:	4620      	mov	r0, r4
 8084446:	9100      	str	r1, [sp, #0]
 8084448:	4904      	ldr	r1, [pc, #16]	; (808445c <asctime_r+0x40>)
 808444a:	440b      	add	r3, r1
 808444c:	4904      	ldr	r1, [pc, #16]	; (8084460 <asctime_r+0x44>)
 808444e:	440a      	add	r2, r1
 8084450:	4904      	ldr	r1, [pc, #16]	; (8084464 <asctime_r+0x48>)
 8084452:	f7fd f9e3 	bl	808181c <siprintf>
 8084456:	4620      	mov	r0, r4
 8084458:	b006      	add	sp, #24
 808445a:	bd10      	pop	{r4, pc}
 808445c:	08085641 	.word	0x08085641
 8084460:	0808562c 	.word	0x0808562c
 8084464:	08085665 	.word	0x08085665

08084468 <atoi>:
 8084468:	220a      	movs	r2, #10
 808446a:	2100      	movs	r1, #0
 808446c:	f000 ba26 	b.w	80848bc <strtol>

08084470 <__cxa_atexit>:
 8084470:	b510      	push	{r4, lr}
 8084472:	4c05      	ldr	r4, [pc, #20]	; (8084488 <__cxa_atexit+0x18>)
 8084474:	4613      	mov	r3, r2
 8084476:	b12c      	cbz	r4, 8084484 <__cxa_atexit+0x14>
 8084478:	460a      	mov	r2, r1
 808447a:	4601      	mov	r1, r0
 808447c:	2002      	movs	r0, #2
 808447e:	f3af 8000 	nop.w
 8084482:	bd10      	pop	{r4, pc}
 8084484:	4620      	mov	r0, r4
 8084486:	bd10      	pop	{r4, pc}
 8084488:	00000000 	.word	0x00000000

0808448c <localtime>:
 808448c:	b538      	push	{r3, r4, r5, lr}
 808448e:	4b07      	ldr	r3, [pc, #28]	; (80844ac <localtime+0x20>)
 8084490:	4605      	mov	r5, r0
 8084492:	681c      	ldr	r4, [r3, #0]
 8084494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084496:	b91b      	cbnz	r3, 80844a0 <localtime+0x14>
 8084498:	2024      	movs	r0, #36	; 0x24
 808449a:	f7fd f9a7 	bl	80817ec <malloc>
 808449e:	63e0      	str	r0, [r4, #60]	; 0x3c
 80844a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80844a2:	4628      	mov	r0, r5
 80844a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80844a8:	f000 b802 	b.w	80844b0 <localtime_r>
 80844ac:	200000fc 	.word	0x200000fc

080844b0 <localtime_r>:
 80844b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80844b4:	460c      	mov	r4, r1
 80844b6:	4680      	mov	r8, r0
 80844b8:	f000 fd06 	bl	8084ec8 <__gettzinfo>
 80844bc:	4621      	mov	r1, r4
 80844be:	4607      	mov	r7, r0
 80844c0:	4640      	mov	r0, r8
 80844c2:	f000 fd05 	bl	8084ed0 <gmtime_r>
 80844c6:	6946      	ldr	r6, [r0, #20]
 80844c8:	4604      	mov	r4, r0
 80844ca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80844ce:	07b3      	lsls	r3, r6, #30
 80844d0:	d105      	bne.n	80844de <localtime_r+0x2e>
 80844d2:	2264      	movs	r2, #100	; 0x64
 80844d4:	fb96 f3f2 	sdiv	r3, r6, r2
 80844d8:	fb02 6313 	mls	r3, r2, r3, r6
 80844dc:	b94b      	cbnz	r3, 80844f2 <localtime_r+0x42>
 80844de:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80844e2:	fb96 f3f5 	sdiv	r3, r6, r5
 80844e6:	fb05 6513 	mls	r5, r5, r3, r6
 80844ea:	fab5 f385 	clz	r3, r5
 80844ee:	095b      	lsrs	r3, r3, #5
 80844f0:	e000      	b.n	80844f4 <localtime_r+0x44>
 80844f2:	2301      	movs	r3, #1
 80844f4:	4a5f      	ldr	r2, [pc, #380]	; (8084674 <localtime_r+0x1c4>)
 80844f6:	2530      	movs	r5, #48	; 0x30
 80844f8:	fb05 2503 	mla	r5, r5, r3, r2
 80844fc:	f000 fb18 	bl	8084b30 <__tz_lock>
 8084500:	f000 fb18 	bl	8084b34 <_tzset_unlocked>
 8084504:	4b5c      	ldr	r3, [pc, #368]	; (8084678 <localtime_r+0x1c8>)
 8084506:	681b      	ldr	r3, [r3, #0]
 8084508:	b1f3      	cbz	r3, 8084548 <localtime_r+0x98>
 808450a:	687b      	ldr	r3, [r7, #4]
 808450c:	429e      	cmp	r6, r3
 808450e:	d105      	bne.n	808451c <localtime_r+0x6c>
 8084510:	6839      	ldr	r1, [r7, #0]
 8084512:	f8d8 3000 	ldr.w	r3, [r8]
 8084516:	69fa      	ldr	r2, [r7, #28]
 8084518:	b941      	cbnz	r1, 808452c <localtime_r+0x7c>
 808451a:	e00a      	b.n	8084532 <localtime_r+0x82>
 808451c:	4630      	mov	r0, r6
 808451e:	f000 fa5f 	bl	80849e0 <__tzcalc_limits>
 8084522:	2800      	cmp	r0, #0
 8084524:	d1f4      	bne.n	8084510 <localtime_r+0x60>
 8084526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808452a:	e00d      	b.n	8084548 <localtime_r+0x98>
 808452c:	4293      	cmp	r3, r2
 808452e:	db08      	blt.n	8084542 <localtime_r+0x92>
 8084530:	e001      	b.n	8084536 <localtime_r+0x86>
 8084532:	4293      	cmp	r3, r2
 8084534:	da07      	bge.n	8084546 <localtime_r+0x96>
 8084536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8084538:	4293      	cmp	r3, r2
 808453a:	bfac      	ite	ge
 808453c:	2300      	movge	r3, #0
 808453e:	2301      	movlt	r3, #1
 8084540:	e002      	b.n	8084548 <localtime_r+0x98>
 8084542:	2300      	movs	r3, #0
 8084544:	e000      	b.n	8084548 <localtime_r+0x98>
 8084546:	2301      	movs	r3, #1
 8084548:	6223      	str	r3, [r4, #32]
 808454a:	6a23      	ldr	r3, [r4, #32]
 808454c:	203c      	movs	r0, #60	; 0x3c
 808454e:	2b01      	cmp	r3, #1
 8084550:	bf0c      	ite	eq
 8084552:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8084554:	6a39      	ldrne	r1, [r7, #32]
 8084556:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808455a:	fb91 f6f3 	sdiv	r6, r1, r3
 808455e:	fb03 1316 	mls	r3, r3, r6, r1
 8084562:	fb93 f2f0 	sdiv	r2, r3, r0
 8084566:	fb00 3012 	mls	r0, r0, r2, r3
 808456a:	6861      	ldr	r1, [r4, #4]
 808456c:	6823      	ldr	r3, [r4, #0]
 808456e:	1a89      	subs	r1, r1, r2
 8084570:	68a2      	ldr	r2, [r4, #8]
 8084572:	1a1b      	subs	r3, r3, r0
 8084574:	1b92      	subs	r2, r2, r6
 8084576:	2b3b      	cmp	r3, #59	; 0x3b
 8084578:	6023      	str	r3, [r4, #0]
 808457a:	6061      	str	r1, [r4, #4]
 808457c:	60a2      	str	r2, [r4, #8]
 808457e:	dd03      	ble.n	8084588 <localtime_r+0xd8>
 8084580:	3101      	adds	r1, #1
 8084582:	6061      	str	r1, [r4, #4]
 8084584:	3b3c      	subs	r3, #60	; 0x3c
 8084586:	e004      	b.n	8084592 <localtime_r+0xe2>
 8084588:	2b00      	cmp	r3, #0
 808458a:	da03      	bge.n	8084594 <localtime_r+0xe4>
 808458c:	3901      	subs	r1, #1
 808458e:	6061      	str	r1, [r4, #4]
 8084590:	333c      	adds	r3, #60	; 0x3c
 8084592:	6023      	str	r3, [r4, #0]
 8084594:	6863      	ldr	r3, [r4, #4]
 8084596:	2b3b      	cmp	r3, #59	; 0x3b
 8084598:	dd03      	ble.n	80845a2 <localtime_r+0xf2>
 808459a:	3201      	adds	r2, #1
 808459c:	60a2      	str	r2, [r4, #8]
 808459e:	3b3c      	subs	r3, #60	; 0x3c
 80845a0:	e004      	b.n	80845ac <localtime_r+0xfc>
 80845a2:	2b00      	cmp	r3, #0
 80845a4:	da03      	bge.n	80845ae <localtime_r+0xfe>
 80845a6:	3a01      	subs	r2, #1
 80845a8:	60a2      	str	r2, [r4, #8]
 80845aa:	333c      	adds	r3, #60	; 0x3c
 80845ac:	6063      	str	r3, [r4, #4]
 80845ae:	68a3      	ldr	r3, [r4, #8]
 80845b0:	2b17      	cmp	r3, #23
 80845b2:	dd22      	ble.n	80845fa <localtime_r+0x14a>
 80845b4:	69e2      	ldr	r2, [r4, #28]
 80845b6:	3b18      	subs	r3, #24
 80845b8:	3201      	adds	r2, #1
 80845ba:	61e2      	str	r2, [r4, #28]
 80845bc:	69a2      	ldr	r2, [r4, #24]
 80845be:	60a3      	str	r3, [r4, #8]
 80845c0:	3201      	adds	r2, #1
 80845c2:	2a06      	cmp	r2, #6
 80845c4:	bfc8      	it	gt
 80845c6:	2200      	movgt	r2, #0
 80845c8:	61a2      	str	r2, [r4, #24]
 80845ca:	68e2      	ldr	r2, [r4, #12]
 80845cc:	6923      	ldr	r3, [r4, #16]
 80845ce:	3201      	adds	r2, #1
 80845d0:	60e2      	str	r2, [r4, #12]
 80845d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80845d6:	428a      	cmp	r2, r1
 80845d8:	dd46      	ble.n	8084668 <localtime_r+0x1b8>
 80845da:	3301      	adds	r3, #1
 80845dc:	2b0c      	cmp	r3, #12
 80845de:	bf08      	it	eq
 80845e0:	6963      	ldreq	r3, [r4, #20]
 80845e2:	eba2 0201 	sub.w	r2, r2, r1
 80845e6:	60e2      	str	r2, [r4, #12]
 80845e8:	bf05      	ittet	eq
 80845ea:	3301      	addeq	r3, #1
 80845ec:	2200      	moveq	r2, #0
 80845ee:	6123      	strne	r3, [r4, #16]
 80845f0:	6122      	streq	r2, [r4, #16]
 80845f2:	bf04      	itt	eq
 80845f4:	6163      	streq	r3, [r4, #20]
 80845f6:	61e2      	streq	r2, [r4, #28]
 80845f8:	e036      	b.n	8084668 <localtime_r+0x1b8>
 80845fa:	2b00      	cmp	r3, #0
 80845fc:	da34      	bge.n	8084668 <localtime_r+0x1b8>
 80845fe:	69e2      	ldr	r2, [r4, #28]
 8084600:	3318      	adds	r3, #24
 8084602:	3a01      	subs	r2, #1
 8084604:	61e2      	str	r2, [r4, #28]
 8084606:	69a2      	ldr	r2, [r4, #24]
 8084608:	60a3      	str	r3, [r4, #8]
 808460a:	3a01      	subs	r2, #1
 808460c:	bf48      	it	mi
 808460e:	2206      	movmi	r2, #6
 8084610:	61a2      	str	r2, [r4, #24]
 8084612:	68e2      	ldr	r2, [r4, #12]
 8084614:	3a01      	subs	r2, #1
 8084616:	60e2      	str	r2, [r4, #12]
 8084618:	bb32      	cbnz	r2, 8084668 <localtime_r+0x1b8>
 808461a:	6923      	ldr	r3, [r4, #16]
 808461c:	3b01      	subs	r3, #1
 808461e:	d401      	bmi.n	8084624 <localtime_r+0x174>
 8084620:	6123      	str	r3, [r4, #16]
 8084622:	e01d      	b.n	8084660 <localtime_r+0x1b0>
 8084624:	230b      	movs	r3, #11
 8084626:	6123      	str	r3, [r4, #16]
 8084628:	6963      	ldr	r3, [r4, #20]
 808462a:	1e5a      	subs	r2, r3, #1
 808462c:	f012 0f03 	tst.w	r2, #3
 8084630:	6162      	str	r2, [r4, #20]
 8084632:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8084636:	d105      	bne.n	8084644 <localtime_r+0x194>
 8084638:	2164      	movs	r1, #100	; 0x64
 808463a:	fb93 f2f1 	sdiv	r2, r3, r1
 808463e:	fb01 3212 	mls	r2, r1, r2, r3
 8084642:	b94a      	cbnz	r2, 8084658 <localtime_r+0x1a8>
 8084644:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8084648:	fb93 f2f1 	sdiv	r2, r3, r1
 808464c:	fb01 3312 	mls	r3, r1, r2, r3
 8084650:	fab3 f383 	clz	r3, r3
 8084654:	095b      	lsrs	r3, r3, #5
 8084656:	e000      	b.n	808465a <localtime_r+0x1aa>
 8084658:	2301      	movs	r3, #1
 808465a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808465e:	61e3      	str	r3, [r4, #28]
 8084660:	6923      	ldr	r3, [r4, #16]
 8084662:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8084666:	60e3      	str	r3, [r4, #12]
 8084668:	f000 fa63 	bl	8084b32 <__tz_unlock>
 808466c:	4620      	mov	r0, r4
 808466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084672:	bf00      	nop
 8084674:	080857e8 	.word	0x080857e8
 8084678:	2000085c 	.word	0x2000085c

0808467c <memcpy>:
 808467c:	b510      	push	{r4, lr}
 808467e:	1e43      	subs	r3, r0, #1
 8084680:	440a      	add	r2, r1
 8084682:	4291      	cmp	r1, r2
 8084684:	d004      	beq.n	8084690 <memcpy+0x14>
 8084686:	f811 4b01 	ldrb.w	r4, [r1], #1
 808468a:	f803 4f01 	strb.w	r4, [r3, #1]!
 808468e:	e7f8      	b.n	8084682 <memcpy+0x6>
 8084690:	bd10      	pop	{r4, pc}

08084692 <memset>:
 8084692:	4603      	mov	r3, r0
 8084694:	4402      	add	r2, r0
 8084696:	4293      	cmp	r3, r2
 8084698:	d002      	beq.n	80846a0 <memset+0xe>
 808469a:	f803 1b01 	strb.w	r1, [r3], #1
 808469e:	e7fa      	b.n	8084696 <memset+0x4>
 80846a0:	4770      	bx	lr
	...

080846a4 <srand>:
 80846a4:	b538      	push	{r3, r4, r5, lr}
 80846a6:	4b12      	ldr	r3, [pc, #72]	; (80846f0 <srand+0x4c>)
 80846a8:	4605      	mov	r5, r0
 80846aa:	681c      	ldr	r4, [r3, #0]
 80846ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80846ae:	b9d3      	cbnz	r3, 80846e6 <srand+0x42>
 80846b0:	2018      	movs	r0, #24
 80846b2:	f7fd f89b 	bl	80817ec <malloc>
 80846b6:	f243 330e 	movw	r3, #13070	; 0x330e
 80846ba:	63a0      	str	r0, [r4, #56]	; 0x38
 80846bc:	8003      	strh	r3, [r0, #0]
 80846be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80846c2:	8043      	strh	r3, [r0, #2]
 80846c4:	f241 2334 	movw	r3, #4660	; 0x1234
 80846c8:	8083      	strh	r3, [r0, #4]
 80846ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80846ce:	80c3      	strh	r3, [r0, #6]
 80846d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80846d4:	8103      	strh	r3, [r0, #8]
 80846d6:	2305      	movs	r3, #5
 80846d8:	8143      	strh	r3, [r0, #10]
 80846da:	230b      	movs	r3, #11
 80846dc:	8183      	strh	r3, [r0, #12]
 80846de:	2201      	movs	r2, #1
 80846e0:	2300      	movs	r3, #0
 80846e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80846e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80846e8:	2200      	movs	r2, #0
 80846ea:	611d      	str	r5, [r3, #16]
 80846ec:	615a      	str	r2, [r3, #20]
 80846ee:	bd38      	pop	{r3, r4, r5, pc}
 80846f0:	200000fc 	.word	0x200000fc

080846f4 <strcmp>:
 80846f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80846f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80846fc:	2a01      	cmp	r2, #1
 80846fe:	bf28      	it	cs
 8084700:	429a      	cmpcs	r2, r3
 8084702:	d0f7      	beq.n	80846f4 <strcmp>
 8084704:	1ad0      	subs	r0, r2, r3
 8084706:	4770      	bx	lr

08084708 <strcpy>:
 8084708:	4603      	mov	r3, r0
 808470a:	f811 2b01 	ldrb.w	r2, [r1], #1
 808470e:	f803 2b01 	strb.w	r2, [r3], #1
 8084712:	2a00      	cmp	r2, #0
 8084714:	d1f9      	bne.n	808470a <strcpy+0x2>
 8084716:	4770      	bx	lr

08084718 <strdup>:
 8084718:	4b02      	ldr	r3, [pc, #8]	; (8084724 <strdup+0xc>)
 808471a:	4601      	mov	r1, r0
 808471c:	6818      	ldr	r0, [r3, #0]
 808471e:	f000 b803 	b.w	8084728 <_strdup_r>
 8084722:	bf00      	nop
 8084724:	200000fc 	.word	0x200000fc

08084728 <_strdup_r>:
 8084728:	b570      	push	{r4, r5, r6, lr}
 808472a:	4606      	mov	r6, r0
 808472c:	4608      	mov	r0, r1
 808472e:	460c      	mov	r4, r1
 8084730:	f000 f80d 	bl	808474e <strlen>
 8084734:	1c45      	adds	r5, r0, #1
 8084736:	4629      	mov	r1, r5
 8084738:	4630      	mov	r0, r6
 808473a:	f7fd f88f 	bl	808185c <_malloc_r>
 808473e:	4606      	mov	r6, r0
 8084740:	b118      	cbz	r0, 808474a <_strdup_r+0x22>
 8084742:	462a      	mov	r2, r5
 8084744:	4621      	mov	r1, r4
 8084746:	f7ff ff99 	bl	808467c <memcpy>
 808474a:	4630      	mov	r0, r6
 808474c:	bd70      	pop	{r4, r5, r6, pc}

0808474e <strlen>:
 808474e:	4603      	mov	r3, r0
 8084750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084754:	2a00      	cmp	r2, #0
 8084756:	d1fb      	bne.n	8084750 <strlen+0x2>
 8084758:	1a18      	subs	r0, r3, r0
 808475a:	3801      	subs	r0, #1
 808475c:	4770      	bx	lr

0808475e <strncmp>:
 808475e:	b530      	push	{r4, r5, lr}
 8084760:	b182      	cbz	r2, 8084784 <strncmp+0x26>
 8084762:	1e45      	subs	r5, r0, #1
 8084764:	3901      	subs	r1, #1
 8084766:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808476a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808476e:	42a3      	cmp	r3, r4
 8084770:	d106      	bne.n	8084780 <strncmp+0x22>
 8084772:	43ec      	mvns	r4, r5
 8084774:	4414      	add	r4, r2
 8084776:	42e0      	cmn	r0, r4
 8084778:	d001      	beq.n	808477e <strncmp+0x20>
 808477a:	2b00      	cmp	r3, #0
 808477c:	d1f3      	bne.n	8084766 <strncmp+0x8>
 808477e:	461c      	mov	r4, r3
 8084780:	1b18      	subs	r0, r3, r4
 8084782:	bd30      	pop	{r4, r5, pc}
 8084784:	4610      	mov	r0, r2
 8084786:	bd30      	pop	{r4, r5, pc}

08084788 <strncpy>:
 8084788:	4603      	mov	r3, r0
 808478a:	b510      	push	{r4, lr}
 808478c:	b142      	cbz	r2, 80847a0 <strncpy+0x18>
 808478e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084792:	3a01      	subs	r2, #1
 8084794:	f803 4b01 	strb.w	r4, [r3], #1
 8084798:	2c00      	cmp	r4, #0
 808479a:	d1f7      	bne.n	808478c <strncpy+0x4>
 808479c:	441a      	add	r2, r3
 808479e:	e000      	b.n	80847a2 <strncpy+0x1a>
 80847a0:	bd10      	pop	{r4, pc}
 80847a2:	4293      	cmp	r3, r2
 80847a4:	d002      	beq.n	80847ac <strncpy+0x24>
 80847a6:	f803 4b01 	strb.w	r4, [r3], #1
 80847aa:	e7fa      	b.n	80847a2 <strncpy+0x1a>
 80847ac:	bd10      	pop	{r4, pc}
	...

080847b0 <_strtol_r>:
 80847b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80847b4:	460f      	mov	r7, r1
 80847b6:	4680      	mov	r8, r0
 80847b8:	483f      	ldr	r0, [pc, #252]	; (80848b8 <_strtol_r+0x108>)
 80847ba:	f8d0 9000 	ldr.w	r9, [r0]
 80847be:	463d      	mov	r5, r7
 80847c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80847c4:	eb09 0004 	add.w	r0, r9, r4
 80847c8:	7840      	ldrb	r0, [r0, #1]
 80847ca:	f000 0008 	and.w	r0, r0, #8
 80847ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80847d2:	b108      	cbz	r0, 80847d8 <_strtol_r+0x28>
 80847d4:	462f      	mov	r7, r5
 80847d6:	e7f2      	b.n	80847be <_strtol_r+0xe>
 80847d8:	2c2d      	cmp	r4, #45	; 0x2d
 80847da:	d103      	bne.n	80847e4 <_strtol_r+0x34>
 80847dc:	1cbd      	adds	r5, r7, #2
 80847de:	787c      	ldrb	r4, [r7, #1]
 80847e0:	2601      	movs	r6, #1
 80847e2:	e003      	b.n	80847ec <_strtol_r+0x3c>
 80847e4:	2c2b      	cmp	r4, #43	; 0x2b
 80847e6:	bf04      	itt	eq
 80847e8:	787c      	ldrbeq	r4, [r7, #1]
 80847ea:	1cbd      	addeq	r5, r7, #2
 80847ec:	b113      	cbz	r3, 80847f4 <_strtol_r+0x44>
 80847ee:	2b10      	cmp	r3, #16
 80847f0:	d10a      	bne.n	8084808 <_strtol_r+0x58>
 80847f2:	e05b      	b.n	80848ac <_strtol_r+0xfc>
 80847f4:	2c30      	cmp	r4, #48	; 0x30
 80847f6:	d157      	bne.n	80848a8 <_strtol_r+0xf8>
 80847f8:	7828      	ldrb	r0, [r5, #0]
 80847fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80847fe:	2858      	cmp	r0, #88	; 0x58
 8084800:	d14d      	bne.n	808489e <_strtol_r+0xee>
 8084802:	786c      	ldrb	r4, [r5, #1]
 8084804:	2310      	movs	r3, #16
 8084806:	3502      	adds	r5, #2
 8084808:	2e00      	cmp	r6, #0
 808480a:	bf14      	ite	ne
 808480c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8084810:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8084814:	fbbc faf3 	udiv	sl, ip, r3
 8084818:	2700      	movs	r7, #0
 808481a:	4638      	mov	r0, r7
 808481c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8084820:	eb09 0e04 	add.w	lr, r9, r4
 8084824:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084828:	f01e 0f04 	tst.w	lr, #4
 808482c:	d001      	beq.n	8084832 <_strtol_r+0x82>
 808482e:	3c30      	subs	r4, #48	; 0x30
 8084830:	e00b      	b.n	808484a <_strtol_r+0x9a>
 8084832:	f01e 0e03 	ands.w	lr, lr, #3
 8084836:	d01b      	beq.n	8084870 <_strtol_r+0xc0>
 8084838:	f1be 0f01 	cmp.w	lr, #1
 808483c:	bf0c      	ite	eq
 808483e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084842:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084846:	ebce 0404 	rsb	r4, lr, r4
 808484a:	42a3      	cmp	r3, r4
 808484c:	dd10      	ble.n	8084870 <_strtol_r+0xc0>
 808484e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8084852:	d00a      	beq.n	808486a <_strtol_r+0xba>
 8084854:	4550      	cmp	r0, sl
 8084856:	d806      	bhi.n	8084866 <_strtol_r+0xb6>
 8084858:	d101      	bne.n	808485e <_strtol_r+0xae>
 808485a:	4564      	cmp	r4, ip
 808485c:	dc03      	bgt.n	8084866 <_strtol_r+0xb6>
 808485e:	fb03 4000 	mla	r0, r3, r0, r4
 8084862:	2701      	movs	r7, #1
 8084864:	e001      	b.n	808486a <_strtol_r+0xba>
 8084866:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808486a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808486e:	e7d7      	b.n	8084820 <_strtol_r+0x70>
 8084870:	1c7b      	adds	r3, r7, #1
 8084872:	d10c      	bne.n	808488e <_strtol_r+0xde>
 8084874:	2e00      	cmp	r6, #0
 8084876:	f04f 0322 	mov.w	r3, #34	; 0x22
 808487a:	bf14      	ite	ne
 808487c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084880:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084884:	f8c8 3000 	str.w	r3, [r8]
 8084888:	b92a      	cbnz	r2, 8084896 <_strtol_r+0xe6>
 808488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808488e:	b106      	cbz	r6, 8084892 <_strtol_r+0xe2>
 8084890:	4240      	negs	r0, r0
 8084892:	b172      	cbz	r2, 80848b2 <_strtol_r+0x102>
 8084894:	b107      	cbz	r7, 8084898 <_strtol_r+0xe8>
 8084896:	1e69      	subs	r1, r5, #1
 8084898:	6011      	str	r1, [r2, #0]
 808489a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808489e:	2430      	movs	r4, #48	; 0x30
 80848a0:	2b00      	cmp	r3, #0
 80848a2:	d1b1      	bne.n	8084808 <_strtol_r+0x58>
 80848a4:	2308      	movs	r3, #8
 80848a6:	e7af      	b.n	8084808 <_strtol_r+0x58>
 80848a8:	230a      	movs	r3, #10
 80848aa:	e7ad      	b.n	8084808 <_strtol_r+0x58>
 80848ac:	2c30      	cmp	r4, #48	; 0x30
 80848ae:	d0a3      	beq.n	80847f8 <_strtol_r+0x48>
 80848b0:	e7aa      	b.n	8084808 <_strtol_r+0x58>
 80848b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80848b6:	bf00      	nop
 80848b8:	20000098 	.word	0x20000098

080848bc <strtol>:
 80848bc:	4613      	mov	r3, r2
 80848be:	460a      	mov	r2, r1
 80848c0:	4601      	mov	r1, r0
 80848c2:	4802      	ldr	r0, [pc, #8]	; (80848cc <strtol+0x10>)
 80848c4:	6800      	ldr	r0, [r0, #0]
 80848c6:	f7ff bf73 	b.w	80847b0 <_strtol_r>
 80848ca:	bf00      	nop
 80848cc:	200000fc 	.word	0x200000fc

080848d0 <_strtoul_r>:
 80848d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80848d4:	460e      	mov	r6, r1
 80848d6:	4680      	mov	r8, r0
 80848d8:	483b      	ldr	r0, [pc, #236]	; (80849c8 <_strtoul_r+0xf8>)
 80848da:	f8d0 9000 	ldr.w	r9, [r0]
 80848de:	4635      	mov	r5, r6
 80848e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80848e4:	eb09 0004 	add.w	r0, r9, r4
 80848e8:	7840      	ldrb	r0, [r0, #1]
 80848ea:	f000 0008 	and.w	r0, r0, #8
 80848ee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80848f2:	b108      	cbz	r0, 80848f8 <_strtoul_r+0x28>
 80848f4:	462e      	mov	r6, r5
 80848f6:	e7f2      	b.n	80848de <_strtoul_r+0xe>
 80848f8:	2c2d      	cmp	r4, #45	; 0x2d
 80848fa:	d103      	bne.n	8084904 <_strtoul_r+0x34>
 80848fc:	1cb5      	adds	r5, r6, #2
 80848fe:	7874      	ldrb	r4, [r6, #1]
 8084900:	2701      	movs	r7, #1
 8084902:	e003      	b.n	808490c <_strtoul_r+0x3c>
 8084904:	2c2b      	cmp	r4, #43	; 0x2b
 8084906:	bf04      	itt	eq
 8084908:	7874      	ldrbeq	r4, [r6, #1]
 808490a:	1cb5      	addeq	r5, r6, #2
 808490c:	b113      	cbz	r3, 8084914 <_strtoul_r+0x44>
 808490e:	2b10      	cmp	r3, #16
 8084910:	d10a      	bne.n	8084928 <_strtoul_r+0x58>
 8084912:	e053      	b.n	80849bc <_strtoul_r+0xec>
 8084914:	2c30      	cmp	r4, #48	; 0x30
 8084916:	d14f      	bne.n	80849b8 <_strtoul_r+0xe8>
 8084918:	7828      	ldrb	r0, [r5, #0]
 808491a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808491e:	2858      	cmp	r0, #88	; 0x58
 8084920:	d145      	bne.n	80849ae <_strtoul_r+0xde>
 8084922:	786c      	ldrb	r4, [r5, #1]
 8084924:	2310      	movs	r3, #16
 8084926:	3502      	adds	r5, #2
 8084928:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808492c:	fbbc fcf3 	udiv	ip, ip, r3
 8084930:	fb03 fa0c 	mul.w	sl, r3, ip
 8084934:	2600      	movs	r6, #0
 8084936:	ea6f 0a0a 	mvn.w	sl, sl
 808493a:	4630      	mov	r0, r6
 808493c:	eb09 0e04 	add.w	lr, r9, r4
 8084940:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084944:	f01e 0f04 	tst.w	lr, #4
 8084948:	d001      	beq.n	808494e <_strtoul_r+0x7e>
 808494a:	3c30      	subs	r4, #48	; 0x30
 808494c:	e00b      	b.n	8084966 <_strtoul_r+0x96>
 808494e:	f01e 0e03 	ands.w	lr, lr, #3
 8084952:	d01a      	beq.n	808498a <_strtoul_r+0xba>
 8084954:	f1be 0f01 	cmp.w	lr, #1
 8084958:	bf0c      	ite	eq
 808495a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808495e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084962:	ebce 0404 	rsb	r4, lr, r4
 8084966:	42a3      	cmp	r3, r4
 8084968:	dd0f      	ble.n	808498a <_strtoul_r+0xba>
 808496a:	2e00      	cmp	r6, #0
 808496c:	db08      	blt.n	8084980 <_strtoul_r+0xb0>
 808496e:	4560      	cmp	r0, ip
 8084970:	d806      	bhi.n	8084980 <_strtoul_r+0xb0>
 8084972:	d101      	bne.n	8084978 <_strtoul_r+0xa8>
 8084974:	4554      	cmp	r4, sl
 8084976:	dc03      	bgt.n	8084980 <_strtoul_r+0xb0>
 8084978:	fb03 4000 	mla	r0, r3, r0, r4
 808497c:	2601      	movs	r6, #1
 808497e:	e001      	b.n	8084984 <_strtoul_r+0xb4>
 8084980:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084984:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084988:	e7d8      	b.n	808493c <_strtoul_r+0x6c>
 808498a:	2e00      	cmp	r6, #0
 808498c:	da07      	bge.n	808499e <_strtoul_r+0xce>
 808498e:	2322      	movs	r3, #34	; 0x22
 8084990:	f8c8 3000 	str.w	r3, [r8]
 8084994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084998:	b92a      	cbnz	r2, 80849a6 <_strtoul_r+0xd6>
 808499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808499e:	b107      	cbz	r7, 80849a2 <_strtoul_r+0xd2>
 80849a0:	4240      	negs	r0, r0
 80849a2:	b172      	cbz	r2, 80849c2 <_strtoul_r+0xf2>
 80849a4:	b106      	cbz	r6, 80849a8 <_strtoul_r+0xd8>
 80849a6:	1e69      	subs	r1, r5, #1
 80849a8:	6011      	str	r1, [r2, #0]
 80849aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80849ae:	2430      	movs	r4, #48	; 0x30
 80849b0:	2b00      	cmp	r3, #0
 80849b2:	d1b9      	bne.n	8084928 <_strtoul_r+0x58>
 80849b4:	2308      	movs	r3, #8
 80849b6:	e7b7      	b.n	8084928 <_strtoul_r+0x58>
 80849b8:	230a      	movs	r3, #10
 80849ba:	e7b5      	b.n	8084928 <_strtoul_r+0x58>
 80849bc:	2c30      	cmp	r4, #48	; 0x30
 80849be:	d0ab      	beq.n	8084918 <_strtoul_r+0x48>
 80849c0:	e7b2      	b.n	8084928 <_strtoul_r+0x58>
 80849c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80849c6:	bf00      	nop
 80849c8:	20000098 	.word	0x20000098

080849cc <strtoul>:
 80849cc:	4613      	mov	r3, r2
 80849ce:	460a      	mov	r2, r1
 80849d0:	4601      	mov	r1, r0
 80849d2:	4802      	ldr	r0, [pc, #8]	; (80849dc <strtoul+0x10>)
 80849d4:	6800      	ldr	r0, [r0, #0]
 80849d6:	f7ff bf7b 	b.w	80848d0 <_strtoul_r>
 80849da:	bf00      	nop
 80849dc:	200000fc 	.word	0x200000fc

080849e0 <__tzcalc_limits>:
 80849e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80849e4:	4604      	mov	r4, r0
 80849e6:	f000 fa6f 	bl	8084ec8 <__gettzinfo>
 80849ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80849ee:	429c      	cmp	r4, r3
 80849f0:	f340 8096 	ble.w	8084b20 <__tzcalc_limits+0x140>
 80849f4:	f240 156d 	movw	r5, #365	; 0x16d
 80849f8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80849fc:	18e3      	adds	r3, r4, r3
 80849fe:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8084a02:	109b      	asrs	r3, r3, #2
 8084a04:	fb05 3502 	mla	r5, r5, r2, r3
 8084a08:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8084a0c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8084a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8084a14:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8084a18:	442b      	add	r3, r5
 8084a1a:	18a5      	adds	r5, r4, r2
 8084a1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084a20:	fb94 f7f2 	sdiv	r7, r4, r2
 8084a24:	fb95 f5f2 	sdiv	r5, r5, r2
 8084a28:	fb02 4717 	mls	r7, r2, r7, r4
 8084a2c:	441d      	add	r5, r3
 8084a2e:	2364      	movs	r3, #100	; 0x64
 8084a30:	fb94 f6f3 	sdiv	r6, r4, r3
 8084a34:	fab7 fe87 	clz	lr, r7
 8084a38:	4601      	mov	r1, r0
 8084a3a:	fb03 4616 	mls	r6, r3, r6, r4
 8084a3e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8084a42:	9301      	str	r3, [sp, #4]
 8084a44:	f004 0303 	and.w	r3, r4, #3
 8084a48:	6044      	str	r4, [r0, #4]
 8084a4a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8084a4e:	9300      	str	r3, [sp, #0]
 8084a50:	f04f 0c07 	mov.w	ip, #7
 8084a54:	7a0b      	ldrb	r3, [r1, #8]
 8084a56:	2b4a      	cmp	r3, #74	; 0x4a
 8084a58:	d10e      	bne.n	8084a78 <__tzcalc_limits+0x98>
 8084a5a:	694b      	ldr	r3, [r1, #20]
 8084a5c:	9a00      	ldr	r2, [sp, #0]
 8084a5e:	18ec      	adds	r4, r5, r3
 8084a60:	b902      	cbnz	r2, 8084a64 <__tzcalc_limits+0x84>
 8084a62:	b906      	cbnz	r6, 8084a66 <__tzcalc_limits+0x86>
 8084a64:	b927      	cbnz	r7, 8084a70 <__tzcalc_limits+0x90>
 8084a66:	2b3b      	cmp	r3, #59	; 0x3b
 8084a68:	bfd4      	ite	le
 8084a6a:	2300      	movle	r3, #0
 8084a6c:	2301      	movgt	r3, #1
 8084a6e:	e000      	b.n	8084a72 <__tzcalc_limits+0x92>
 8084a70:	2300      	movs	r3, #0
 8084a72:	4423      	add	r3, r4
 8084a74:	3b01      	subs	r3, #1
 8084a76:	e03f      	b.n	8084af8 <__tzcalc_limits+0x118>
 8084a78:	2b44      	cmp	r3, #68	; 0x44
 8084a7a:	d102      	bne.n	8084a82 <__tzcalc_limits+0xa2>
 8084a7c:	694b      	ldr	r3, [r1, #20]
 8084a7e:	442b      	add	r3, r5
 8084a80:	e03a      	b.n	8084af8 <__tzcalc_limits+0x118>
 8084a82:	9b00      	ldr	r3, [sp, #0]
 8084a84:	b92b      	cbnz	r3, 8084a92 <__tzcalc_limits+0xb2>
 8084a86:	2e00      	cmp	r6, #0
 8084a88:	bf0c      	ite	eq
 8084a8a:	46f0      	moveq	r8, lr
 8084a8c:	f04f 0801 	movne.w	r8, #1
 8084a90:	e000      	b.n	8084a94 <__tzcalc_limits+0xb4>
 8084a92:	46f0      	mov	r8, lr
 8084a94:	46a9      	mov	r9, r5
 8084a96:	4b24      	ldr	r3, [pc, #144]	; (8084b28 <__tzcalc_limits+0x148>)
 8084a98:	2230      	movs	r2, #48	; 0x30
 8084a9a:	fb02 3808 	mla	r8, r2, r8, r3
 8084a9e:	68cc      	ldr	r4, [r1, #12]
 8084aa0:	f1a8 0a04 	sub.w	sl, r8, #4
 8084aa4:	2301      	movs	r3, #1
 8084aa6:	42a3      	cmp	r3, r4
 8084aa8:	da04      	bge.n	8084ab4 <__tzcalc_limits+0xd4>
 8084aaa:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8084aae:	3301      	adds	r3, #1
 8084ab0:	44d9      	add	r9, fp
 8084ab2:	e7f8      	b.n	8084aa6 <__tzcalc_limits+0xc6>
 8084ab4:	f109 0304 	add.w	r3, r9, #4
 8084ab8:	fb93 fbfc 	sdiv	fp, r3, ip
 8084abc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8084ac0:	ebca 0a03 	rsb	sl, sl, r3
 8084ac4:	694b      	ldr	r3, [r1, #20]
 8084ac6:	2c01      	cmp	r4, #1
 8084ac8:	bfb8      	it	lt
 8084aca:	2401      	movlt	r4, #1
 8084acc:	ebb3 0a0a 	subs.w	sl, r3, sl
 8084ad0:	690b      	ldr	r3, [r1, #16]
 8084ad2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8084ad6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8084ada:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8084ade:	bf48      	it	mi
 8084ae0:	f10a 0a07 	addmi.w	sl, sl, #7
 8084ae4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084ae8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8084aec:	4453      	add	r3, sl
 8084aee:	42a3      	cmp	r3, r4
 8084af0:	db01      	blt.n	8084af6 <__tzcalc_limits+0x116>
 8084af2:	3b07      	subs	r3, #7
 8084af4:	e7fb      	b.n	8084aee <__tzcalc_limits+0x10e>
 8084af6:	444b      	add	r3, r9
 8084af8:	698c      	ldr	r4, [r1, #24]
 8084afa:	4a0c      	ldr	r2, [pc, #48]	; (8084b2c <__tzcalc_limits+0x14c>)
 8084afc:	fb02 4303 	mla	r3, r2, r3, r4
 8084b00:	6a0c      	ldr	r4, [r1, #32]
 8084b02:	4423      	add	r3, r4
 8084b04:	f841 3f1c 	str.w	r3, [r1, #28]!
 8084b08:	9b01      	ldr	r3, [sp, #4]
 8084b0a:	4299      	cmp	r1, r3
 8084b0c:	d1a2      	bne.n	8084a54 <__tzcalc_limits+0x74>
 8084b0e:	69c3      	ldr	r3, [r0, #28]
 8084b10:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8084b12:	4293      	cmp	r3, r2
 8084b14:	bfac      	ite	ge
 8084b16:	2300      	movge	r3, #0
 8084b18:	2301      	movlt	r3, #1
 8084b1a:	6003      	str	r3, [r0, #0]
 8084b1c:	2001      	movs	r0, #1
 8084b1e:	e000      	b.n	8084b22 <__tzcalc_limits+0x142>
 8084b20:	2000      	movs	r0, #0
 8084b22:	b003      	add	sp, #12
 8084b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084b28:	080857e8 	.word	0x080857e8
 8084b2c:	00015180 	.word	0x00015180

08084b30 <__tz_lock>:
 8084b30:	4770      	bx	lr

08084b32 <__tz_unlock>:
 8084b32:	4770      	bx	lr

08084b34 <_tzset_unlocked>:
 8084b34:	4b01      	ldr	r3, [pc, #4]	; (8084b3c <_tzset_unlocked+0x8>)
 8084b36:	6818      	ldr	r0, [r3, #0]
 8084b38:	f000 b802 	b.w	8084b40 <_tzset_unlocked_r>
 8084b3c:	200000fc 	.word	0x200000fc

08084b40 <_tzset_unlocked_r>:
 8084b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084b44:	b08d      	sub	sp, #52	; 0x34
 8084b46:	4607      	mov	r7, r0
 8084b48:	f000 f9be 	bl	8084ec8 <__gettzinfo>
 8084b4c:	49b0      	ldr	r1, [pc, #704]	; (8084e10 <_tzset_unlocked_r+0x2d0>)
 8084b4e:	4604      	mov	r4, r0
 8084b50:	4638      	mov	r0, r7
 8084b52:	f000 f9b1 	bl	8084eb8 <_getenv_r>
 8084b56:	4eaf      	ldr	r6, [pc, #700]	; (8084e14 <_tzset_unlocked_r+0x2d4>)
 8084b58:	4605      	mov	r5, r0
 8084b5a:	b960      	cbnz	r0, 8084b76 <_tzset_unlocked_r+0x36>
 8084b5c:	4bae      	ldr	r3, [pc, #696]	; (8084e18 <_tzset_unlocked_r+0x2d8>)
 8084b5e:	4aaf      	ldr	r2, [pc, #700]	; (8084e1c <_tzset_unlocked_r+0x2dc>)
 8084b60:	6018      	str	r0, [r3, #0]
 8084b62:	4baf      	ldr	r3, [pc, #700]	; (8084e20 <_tzset_unlocked_r+0x2e0>)
 8084b64:	6018      	str	r0, [r3, #0]
 8084b66:	4baf      	ldr	r3, [pc, #700]	; (8084e24 <_tzset_unlocked_r+0x2e4>)
 8084b68:	6830      	ldr	r0, [r6, #0]
 8084b6a:	601a      	str	r2, [r3, #0]
 8084b6c:	605a      	str	r2, [r3, #4]
 8084b6e:	f7fc fe45 	bl	80817fc <free>
 8084b72:	6035      	str	r5, [r6, #0]
 8084b74:	e148      	b.n	8084e08 <_tzset_unlocked_r+0x2c8>
 8084b76:	6831      	ldr	r1, [r6, #0]
 8084b78:	b979      	cbnz	r1, 8084b9a <_tzset_unlocked_r+0x5a>
 8084b7a:	6830      	ldr	r0, [r6, #0]
 8084b7c:	f7fc fe3e 	bl	80817fc <free>
 8084b80:	4628      	mov	r0, r5
 8084b82:	f7ff fde4 	bl	808474e <strlen>
 8084b86:	1c41      	adds	r1, r0, #1
 8084b88:	4638      	mov	r0, r7
 8084b8a:	f7fc fe67 	bl	808185c <_malloc_r>
 8084b8e:	6030      	str	r0, [r6, #0]
 8084b90:	b148      	cbz	r0, 8084ba6 <_tzset_unlocked_r+0x66>
 8084b92:	4629      	mov	r1, r5
 8084b94:	f7ff fdb8 	bl	8084708 <strcpy>
 8084b98:	e005      	b.n	8084ba6 <_tzset_unlocked_r+0x66>
 8084b9a:	f7ff fdab 	bl	80846f4 <strcmp>
 8084b9e:	2800      	cmp	r0, #0
 8084ba0:	f000 8132 	beq.w	8084e08 <_tzset_unlocked_r+0x2c8>
 8084ba4:	e7e9      	b.n	8084b7a <_tzset_unlocked_r+0x3a>
 8084ba6:	782b      	ldrb	r3, [r5, #0]
 8084ba8:	ae0a      	add	r6, sp, #40	; 0x28
 8084baa:	2b3a      	cmp	r3, #58	; 0x3a
 8084bac:	bf08      	it	eq
 8084bae:	3501      	addeq	r5, #1
 8084bb0:	4633      	mov	r3, r6
 8084bb2:	4a9d      	ldr	r2, [pc, #628]	; (8084e28 <_tzset_unlocked_r+0x2e8>)
 8084bb4:	499d      	ldr	r1, [pc, #628]	; (8084e2c <_tzset_unlocked_r+0x2ec>)
 8084bb6:	4628      	mov	r0, r5
 8084bb8:	f7fc fe38 	bl	808182c <siscanf>
 8084bbc:	2800      	cmp	r0, #0
 8084bbe:	f340 8123 	ble.w	8084e08 <_tzset_unlocked_r+0x2c8>
 8084bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084bc4:	18ef      	adds	r7, r5, r3
 8084bc6:	5ceb      	ldrb	r3, [r5, r3]
 8084bc8:	2b2d      	cmp	r3, #45	; 0x2d
 8084bca:	d103      	bne.n	8084bd4 <_tzset_unlocked_r+0x94>
 8084bcc:	3701      	adds	r7, #1
 8084bce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084bd2:	e003      	b.n	8084bdc <_tzset_unlocked_r+0x9c>
 8084bd4:	2b2b      	cmp	r3, #43	; 0x2b
 8084bd6:	bf08      	it	eq
 8084bd8:	3701      	addeq	r7, #1
 8084bda:	2501      	movs	r5, #1
 8084bdc:	f10d 0a20 	add.w	sl, sp, #32
 8084be0:	f10d 0b1e 	add.w	fp, sp, #30
 8084be4:	f04f 0800 	mov.w	r8, #0
 8084be8:	9603      	str	r6, [sp, #12]
 8084bea:	f8cd a008 	str.w	sl, [sp, #8]
 8084bee:	9601      	str	r6, [sp, #4]
 8084bf0:	f8cd b000 	str.w	fp, [sp]
 8084bf4:	4633      	mov	r3, r6
 8084bf6:	aa07      	add	r2, sp, #28
 8084bf8:	498d      	ldr	r1, [pc, #564]	; (8084e30 <_tzset_unlocked_r+0x2f0>)
 8084bfa:	4638      	mov	r0, r7
 8084bfc:	f8ad 801e 	strh.w	r8, [sp, #30]
 8084c00:	f8ad 8020 	strh.w	r8, [sp, #32]
 8084c04:	f7fc fe12 	bl	808182c <siscanf>
 8084c08:	4540      	cmp	r0, r8
 8084c0a:	f340 80fd 	ble.w	8084e08 <_tzset_unlocked_r+0x2c8>
 8084c0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084c12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084c16:	213c      	movs	r1, #60	; 0x3c
 8084c18:	fb01 3302 	mla	r3, r1, r2, r3
 8084c1c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084c20:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084c24:	fb01 3302 	mla	r3, r1, r2, r3
 8084c28:	435d      	muls	r5, r3
 8084c2a:	4b7f      	ldr	r3, [pc, #508]	; (8084e28 <_tzset_unlocked_r+0x2e8>)
 8084c2c:	6225      	str	r5, [r4, #32]
 8084c2e:	4d7d      	ldr	r5, [pc, #500]	; (8084e24 <_tzset_unlocked_r+0x2e4>)
 8084c30:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8084e3c <_tzset_unlocked_r+0x2fc>
 8084c34:	602b      	str	r3, [r5, #0]
 8084c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084c38:	464a      	mov	r2, r9
 8084c3a:	441f      	add	r7, r3
 8084c3c:	497b      	ldr	r1, [pc, #492]	; (8084e2c <_tzset_unlocked_r+0x2ec>)
 8084c3e:	4633      	mov	r3, r6
 8084c40:	4638      	mov	r0, r7
 8084c42:	f7fc fdf3 	bl	808182c <siscanf>
 8084c46:	4540      	cmp	r0, r8
 8084c48:	dc08      	bgt.n	8084c5c <_tzset_unlocked_r+0x11c>
 8084c4a:	682b      	ldr	r3, [r5, #0]
 8084c4c:	6a22      	ldr	r2, [r4, #32]
 8084c4e:	606b      	str	r3, [r5, #4]
 8084c50:	4b71      	ldr	r3, [pc, #452]	; (8084e18 <_tzset_unlocked_r+0x2d8>)
 8084c52:	601a      	str	r2, [r3, #0]
 8084c54:	4b72      	ldr	r3, [pc, #456]	; (8084e20 <_tzset_unlocked_r+0x2e0>)
 8084c56:	f8c3 8000 	str.w	r8, [r3]
 8084c5a:	e0d5      	b.n	8084e08 <_tzset_unlocked_r+0x2c8>
 8084c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084c5e:	f8c5 9004 	str.w	r9, [r5, #4]
 8084c62:	18fd      	adds	r5, r7, r3
 8084c64:	5cfb      	ldrb	r3, [r7, r3]
 8084c66:	2b2d      	cmp	r3, #45	; 0x2d
 8084c68:	d103      	bne.n	8084c72 <_tzset_unlocked_r+0x132>
 8084c6a:	3501      	adds	r5, #1
 8084c6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084c70:	e003      	b.n	8084c7a <_tzset_unlocked_r+0x13a>
 8084c72:	2b2b      	cmp	r3, #43	; 0x2b
 8084c74:	bf08      	it	eq
 8084c76:	3501      	addeq	r5, #1
 8084c78:	2701      	movs	r7, #1
 8084c7a:	2300      	movs	r3, #0
 8084c7c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084c80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084c84:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084c88:	930a      	str	r3, [sp, #40]	; 0x28
 8084c8a:	9603      	str	r6, [sp, #12]
 8084c8c:	f8cd a008 	str.w	sl, [sp, #8]
 8084c90:	9601      	str	r6, [sp, #4]
 8084c92:	f8cd b000 	str.w	fp, [sp]
 8084c96:	4633      	mov	r3, r6
 8084c98:	aa07      	add	r2, sp, #28
 8084c9a:	4965      	ldr	r1, [pc, #404]	; (8084e30 <_tzset_unlocked_r+0x2f0>)
 8084c9c:	4628      	mov	r0, r5
 8084c9e:	f7fc fdc5 	bl	808182c <siscanf>
 8084ca2:	2800      	cmp	r0, #0
 8084ca4:	dc04      	bgt.n	8084cb0 <_tzset_unlocked_r+0x170>
 8084ca6:	6a23      	ldr	r3, [r4, #32]
 8084ca8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8084cac:	63e3      	str	r3, [r4, #60]	; 0x3c
 8084cae:	e00e      	b.n	8084cce <_tzset_unlocked_r+0x18e>
 8084cb0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084cb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084cb8:	213c      	movs	r1, #60	; 0x3c
 8084cba:	fb01 3302 	mla	r3, r1, r2, r3
 8084cbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084cc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084cc6:	fb01 3302 	mla	r3, r1, r2, r3
 8084cca:	435f      	muls	r7, r3
 8084ccc:	63e7      	str	r7, [r4, #60]	; 0x3c
 8084cce:	4627      	mov	r7, r4
 8084cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084cd2:	f04f 0900 	mov.w	r9, #0
 8084cd6:	441d      	add	r5, r3
 8084cd8:	782b      	ldrb	r3, [r5, #0]
 8084cda:	2b2c      	cmp	r3, #44	; 0x2c
 8084cdc:	bf08      	it	eq
 8084cde:	3501      	addeq	r5, #1
 8084ce0:	f895 8000 	ldrb.w	r8, [r5]
 8084ce4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084ce8:	d126      	bne.n	8084d38 <_tzset_unlocked_r+0x1f8>
 8084cea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8084cee:	9302      	str	r3, [sp, #8]
 8084cf0:	ab09      	add	r3, sp, #36	; 0x24
 8084cf2:	9300      	str	r3, [sp, #0]
 8084cf4:	9603      	str	r6, [sp, #12]
 8084cf6:	9601      	str	r6, [sp, #4]
 8084cf8:	4633      	mov	r3, r6
 8084cfa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8084cfe:	494d      	ldr	r1, [pc, #308]	; (8084e34 <_tzset_unlocked_r+0x2f4>)
 8084d00:	4628      	mov	r0, r5
 8084d02:	f7fc fd93 	bl	808182c <siscanf>
 8084d06:	2803      	cmp	r0, #3
 8084d08:	d17e      	bne.n	8084e08 <_tzset_unlocked_r+0x2c8>
 8084d0a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8084d0e:	1e4b      	subs	r3, r1, #1
 8084d10:	2b0b      	cmp	r3, #11
 8084d12:	d879      	bhi.n	8084e08 <_tzset_unlocked_r+0x2c8>
 8084d14:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084d18:	1e53      	subs	r3, r2, #1
 8084d1a:	2b04      	cmp	r3, #4
 8084d1c:	d874      	bhi.n	8084e08 <_tzset_unlocked_r+0x2c8>
 8084d1e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8084d22:	2b06      	cmp	r3, #6
 8084d24:	d870      	bhi.n	8084e08 <_tzset_unlocked_r+0x2c8>
 8084d26:	f887 8008 	strb.w	r8, [r7, #8]
 8084d2a:	60f9      	str	r1, [r7, #12]
 8084d2c:	613a      	str	r2, [r7, #16]
 8084d2e:	617b      	str	r3, [r7, #20]
 8084d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084d32:	eb05 0803 	add.w	r8, r5, r3
 8084d36:	e02a      	b.n	8084d8e <_tzset_unlocked_r+0x24e>
 8084d38:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8084d3c:	bf06      	itte	eq
 8084d3e:	4643      	moveq	r3, r8
 8084d40:	3501      	addeq	r5, #1
 8084d42:	2344      	movne	r3, #68	; 0x44
 8084d44:	220a      	movs	r2, #10
 8084d46:	a90b      	add	r1, sp, #44	; 0x2c
 8084d48:	4628      	mov	r0, r5
 8084d4a:	9305      	str	r3, [sp, #20]
 8084d4c:	f7ff fe3e 	bl	80849cc <strtoul>
 8084d50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8084d54:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084d58:	4545      	cmp	r5, r8
 8084d5a:	9b05      	ldr	r3, [sp, #20]
 8084d5c:	d114      	bne.n	8084d88 <_tzset_unlocked_r+0x248>
 8084d5e:	234d      	movs	r3, #77	; 0x4d
 8084d60:	f1b9 0f00 	cmp.w	r9, #0
 8084d64:	d107      	bne.n	8084d76 <_tzset_unlocked_r+0x236>
 8084d66:	7223      	strb	r3, [r4, #8]
 8084d68:	2303      	movs	r3, #3
 8084d6a:	60e3      	str	r3, [r4, #12]
 8084d6c:	2302      	movs	r3, #2
 8084d6e:	6123      	str	r3, [r4, #16]
 8084d70:	f8c4 9014 	str.w	r9, [r4, #20]
 8084d74:	e00b      	b.n	8084d8e <_tzset_unlocked_r+0x24e>
 8084d76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8084d7a:	230b      	movs	r3, #11
 8084d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8084d7e:	2301      	movs	r3, #1
 8084d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8084d82:	2300      	movs	r3, #0
 8084d84:	6323      	str	r3, [r4, #48]	; 0x30
 8084d86:	e002      	b.n	8084d8e <_tzset_unlocked_r+0x24e>
 8084d88:	b280      	uxth	r0, r0
 8084d8a:	723b      	strb	r3, [r7, #8]
 8084d8c:	6178      	str	r0, [r7, #20]
 8084d8e:	2302      	movs	r3, #2
 8084d90:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084d94:	2300      	movs	r3, #0
 8084d96:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084d9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8084da0:	f898 3000 	ldrb.w	r3, [r8]
 8084da4:	2b2f      	cmp	r3, #47	; 0x2f
 8084da6:	d10b      	bne.n	8084dc0 <_tzset_unlocked_r+0x280>
 8084da8:	9603      	str	r6, [sp, #12]
 8084daa:	f8cd a008 	str.w	sl, [sp, #8]
 8084dae:	9601      	str	r6, [sp, #4]
 8084db0:	f8cd b000 	str.w	fp, [sp]
 8084db4:	4633      	mov	r3, r6
 8084db6:	aa07      	add	r2, sp, #28
 8084db8:	491f      	ldr	r1, [pc, #124]	; (8084e38 <_tzset_unlocked_r+0x2f8>)
 8084dba:	4640      	mov	r0, r8
 8084dbc:	f7fc fd36 	bl	808182c <siscanf>
 8084dc0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084dc4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084dc8:	213c      	movs	r1, #60	; 0x3c
 8084dca:	fb01 3302 	mla	r3, r1, r2, r3
 8084dce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084dd2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084dd6:	fb01 3302 	mla	r3, r1, r2, r3
 8084dda:	61bb      	str	r3, [r7, #24]
 8084ddc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8084dde:	f109 0901 	add.w	r9, r9, #1
 8084de2:	f1b9 0f02 	cmp.w	r9, #2
 8084de6:	4445      	add	r5, r8
 8084de8:	f107 071c 	add.w	r7, r7, #28
 8084dec:	f47f af74 	bne.w	8084cd8 <_tzset_unlocked_r+0x198>
 8084df0:	6860      	ldr	r0, [r4, #4]
 8084df2:	f7ff fdf5 	bl	80849e0 <__tzcalc_limits>
 8084df6:	6a22      	ldr	r2, [r4, #32]
 8084df8:	4b07      	ldr	r3, [pc, #28]	; (8084e18 <_tzset_unlocked_r+0x2d8>)
 8084dfa:	601a      	str	r2, [r3, #0]
 8084dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084dfe:	1a9b      	subs	r3, r3, r2
 8084e00:	4a07      	ldr	r2, [pc, #28]	; (8084e20 <_tzset_unlocked_r+0x2e0>)
 8084e02:	bf18      	it	ne
 8084e04:	2301      	movne	r3, #1
 8084e06:	6013      	str	r3, [r2, #0]
 8084e08:	b00d      	add	sp, #52	; 0x34
 8084e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084e0e:	bf00      	nop
 8084e10:	08085848 	.word	0x08085848
 8084e14:	20000858 	.word	0x20000858
 8084e18:	20000860 	.word	0x20000860
 8084e1c:	0808584b 	.word	0x0808584b
 8084e20:	2000085c 	.word	0x2000085c
 8084e24:	20000100 	.word	0x20000100
 8084e28:	2000084b 	.word	0x2000084b
 8084e2c:	0808584f 	.word	0x0808584f
 8084e30:	08085872 	.word	0x08085872
 8084e34:	0808585e 	.word	0x0808585e
 8084e38:	08085871 	.word	0x08085871
 8084e3c:	20000840 	.word	0x20000840

08084e40 <_findenv_r>:
 8084e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084e44:	4607      	mov	r7, r0
 8084e46:	468b      	mov	fp, r1
 8084e48:	4690      	mov	r8, r2
 8084e4a:	f000 f8d7 	bl	8084ffc <__env_lock>
 8084e4e:	4b19      	ldr	r3, [pc, #100]	; (8084eb4 <_findenv_r+0x74>)
 8084e50:	681d      	ldr	r5, [r3, #0]
 8084e52:	469a      	mov	sl, r3
 8084e54:	b13d      	cbz	r5, 8084e66 <_findenv_r+0x26>
 8084e56:	465c      	mov	r4, fp
 8084e58:	4623      	mov	r3, r4
 8084e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084e5e:	b142      	cbz	r2, 8084e72 <_findenv_r+0x32>
 8084e60:	2a3d      	cmp	r2, #61	; 0x3d
 8084e62:	461c      	mov	r4, r3
 8084e64:	d1f8      	bne.n	8084e58 <_findenv_r+0x18>
 8084e66:	4638      	mov	r0, r7
 8084e68:	f000 f8c9 	bl	8084ffe <__env_unlock>
 8084e6c:	2000      	movs	r0, #0
 8084e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084e72:	ebcb 0404 	rsb	r4, fp, r4
 8084e76:	46a9      	mov	r9, r5
 8084e78:	f859 0b04 	ldr.w	r0, [r9], #4
 8084e7c:	2800      	cmp	r0, #0
 8084e7e:	d0f2      	beq.n	8084e66 <_findenv_r+0x26>
 8084e80:	4622      	mov	r2, r4
 8084e82:	4659      	mov	r1, fp
 8084e84:	f7ff fc6b 	bl	808475e <strncmp>
 8084e88:	b988      	cbnz	r0, 8084eae <_findenv_r+0x6e>
 8084e8a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8084e8e:	191e      	adds	r6, r3, r4
 8084e90:	5d1b      	ldrb	r3, [r3, r4]
 8084e92:	2b3d      	cmp	r3, #61	; 0x3d
 8084e94:	d10b      	bne.n	8084eae <_findenv_r+0x6e>
 8084e96:	f8da 3000 	ldr.w	r3, [sl]
 8084e9a:	4638      	mov	r0, r7
 8084e9c:	1aed      	subs	r5, r5, r3
 8084e9e:	10ad      	asrs	r5, r5, #2
 8084ea0:	f8c8 5000 	str.w	r5, [r8]
 8084ea4:	f000 f8ab 	bl	8084ffe <__env_unlock>
 8084ea8:	1c70      	adds	r0, r6, #1
 8084eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084eae:	464d      	mov	r5, r9
 8084eb0:	e7e1      	b.n	8084e76 <_findenv_r+0x36>
 8084eb2:	bf00      	nop
 8084eb4:	20000148 	.word	0x20000148

08084eb8 <_getenv_r>:
 8084eb8:	b507      	push	{r0, r1, r2, lr}
 8084eba:	aa01      	add	r2, sp, #4
 8084ebc:	f7ff ffc0 	bl	8084e40 <_findenv_r>
 8084ec0:	b003      	add	sp, #12
 8084ec2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084ec8 <__gettzinfo>:
 8084ec8:	4800      	ldr	r0, [pc, #0]	; (8084ecc <__gettzinfo+0x4>)
 8084eca:	4770      	bx	lr
 8084ecc:	20000108 	.word	0x20000108

08084ed0 <gmtime_r>:
 8084ed0:	6802      	ldr	r2, [r0, #0]
 8084ed2:	4b46      	ldr	r3, [pc, #280]	; (8084fec <gmtime_r+0x11c>)
 8084ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084ed6:	fb92 f4f3 	sdiv	r4, r2, r3
 8084eda:	fb03 2214 	mls	r2, r3, r4, r2
 8084ede:	2a00      	cmp	r2, #0
 8084ee0:	bfbc      	itt	lt
 8084ee2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8084ee6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8084eea:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8084eee:	fb92 f3f0 	sdiv	r3, r2, r0
 8084ef2:	fb00 2213 	mls	r2, r0, r3, r2
 8084ef6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8084efa:	608b      	str	r3, [r1, #8]
 8084efc:	fb92 f3f0 	sdiv	r3, r2, r0
 8084f00:	fb00 2213 	mls	r2, r0, r3, r2
 8084f04:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8084f08:	bfac      	ite	ge
 8084f0a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8084f0e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8084f12:	604b      	str	r3, [r1, #4]
 8084f14:	600a      	str	r2, [r1, #0]
 8084f16:	2307      	movs	r3, #7
 8084f18:	1ce2      	adds	r2, r4, #3
 8084f1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8084f1e:	4d34      	ldr	r5, [pc, #208]	; (8084ff0 <gmtime_r+0x120>)
 8084f20:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084f24:	fb94 f5f5 	sdiv	r5, r4, r5
 8084f28:	1ad3      	subs	r3, r2, r3
 8084f2a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8084f2e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8084f32:	618b      	str	r3, [r1, #24]
 8084f34:	4b2f      	ldr	r3, [pc, #188]	; (8084ff4 <gmtime_r+0x124>)
 8084f36:	4830      	ldr	r0, [pc, #192]	; (8084ff8 <gmtime_r+0x128>)
 8084f38:	fb03 4405 	mla	r4, r3, r5, r4
 8084f3c:	fbb4 f2f2 	udiv	r2, r4, r2
 8084f40:	fbb4 f3f7 	udiv	r3, r4, r7
 8084f44:	fbb4 f0f0 	udiv	r0, r4, r0
 8084f48:	4422      	add	r2, r4
 8084f4a:	1ad2      	subs	r2, r2, r3
 8084f4c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084f50:	1a13      	subs	r3, r2, r0
 8084f52:	f240 126d 	movw	r2, #365	; 0x16d
 8084f56:	fbb3 f6f6 	udiv	r6, r3, r6
 8084f5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8084f5e:	fbb3 f3f7 	udiv	r3, r3, r7
 8084f62:	4434      	add	r4, r6
 8084f64:	1ae3      	subs	r3, r4, r3
 8084f66:	fb02 3310 	mls	r3, r2, r0, r3
 8084f6a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8084f6e:	2499      	movs	r4, #153	; 0x99
 8084f70:	3202      	adds	r2, #2
 8084f72:	fbb2 f2f4 	udiv	r2, r2, r4
 8084f76:	4354      	muls	r4, r2
 8084f78:	1ca6      	adds	r6, r4, #2
 8084f7a:	2405      	movs	r4, #5
 8084f7c:	fbb6 f4f4 	udiv	r4, r6, r4
 8084f80:	2a0a      	cmp	r2, #10
 8084f82:	bf34      	ite	cc
 8084f84:	2602      	movcc	r6, #2
 8084f86:	f06f 0609 	mvncs.w	r6, #9
 8084f8a:	4416      	add	r6, r2
 8084f8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084f90:	fb02 0505 	mla	r5, r2, r5, r0
 8084f94:	1c5f      	adds	r7, r3, #1
 8084f96:	2e01      	cmp	r6, #1
 8084f98:	bf98      	it	ls
 8084f9a:	3501      	addls	r5, #1
 8084f9c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8084fa0:	eba7 0704 	sub.w	r7, r7, r4
 8084fa4:	d302      	bcc.n	8084fac <gmtime_r+0xdc>
 8084fa6:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8084faa:	e014      	b.n	8084fd6 <gmtime_r+0x106>
 8084fac:	0782      	lsls	r2, r0, #30
 8084fae:	d105      	bne.n	8084fbc <gmtime_r+0xec>
 8084fb0:	2464      	movs	r4, #100	; 0x64
 8084fb2:	fbb0 f2f4 	udiv	r2, r0, r4
 8084fb6:	fb04 0212 	mls	r2, r4, r2, r0
 8084fba:	b94a      	cbnz	r2, 8084fd0 <gmtime_r+0x100>
 8084fbc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084fc0:	fbb0 f4f2 	udiv	r4, r0, r2
 8084fc4:	fb02 0014 	mls	r0, r2, r4, r0
 8084fc8:	fab0 f280 	clz	r2, r0
 8084fcc:	0952      	lsrs	r2, r2, #5
 8084fce:	e000      	b.n	8084fd2 <gmtime_r+0x102>
 8084fd0:	2201      	movs	r2, #1
 8084fd2:	333b      	adds	r3, #59	; 0x3b
 8084fd4:	441a      	add	r2, r3
 8084fd6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8084fda:	2300      	movs	r3, #0
 8084fdc:	61ca      	str	r2, [r1, #28]
 8084fde:	614d      	str	r5, [r1, #20]
 8084fe0:	610e      	str	r6, [r1, #16]
 8084fe2:	60cf      	str	r7, [r1, #12]
 8084fe4:	620b      	str	r3, [r1, #32]
 8084fe6:	4608      	mov	r0, r1
 8084fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084fea:	bf00      	nop
 8084fec:	00015180 	.word	0x00015180
 8084ff0:	00023ab1 	.word	0x00023ab1
 8084ff4:	fffdc54f 	.word	0xfffdc54f
 8084ff8:	00023ab0 	.word	0x00023ab0

08084ffc <__env_lock>:
 8084ffc:	4770      	bx	lr

08084ffe <__env_unlock>:
 8084ffe:	4770      	bx	lr

08085000 <dynalib_user>:
 8085000:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8085010:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 8085020:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 8085054:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
 8085064:	3225 302e 2566 2025 4100 2b54 4643 4e55     %2.0f%% .AT+CFUN
 8085074:	313d 0d36 000a 227b 6554 706d 7265 7461     =16...{"Temperat
 8085084:	7275 2265 253a 2e34 6631 202c 4822 6d75     ure":%4.1f, "Hum
 8085094:	6469 7469 2279 253a 2e34 6631 202c 5322     idity":%4.1f, "S
 80850a4:	696f 6d6c 696f 7473 7275 2265 253a 2c69     oilmoisture":%i,
 80850b4:	2220 6142 7474 7265 2279 253a 2c69 2220      "Battery":%i, "
 80850c4:	6552 6573 7374 3a22 6925 202c 4122 656c     Resets":%i, "Ale
 80850d4:	7472 2273 253a 7d69 4300 6c65 756c 616c     rts":%i}.Cellula
 80850e4:	5f72 6f53 6c69 485f 6f6f 006b 6f4e 4420     r_Soil_Hook.No D
 80850f4:	7461 0061 6255 6469 746f 2073 6f48 6b6f     ata.Ubidots Hook
 8085104:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
 8085114:	6465 5300 6174 6574 2500 2e34 6631 4320     ed.State.%4.1f C
 8085124:	2500 2e34 6631 2520 0025 6925 2520 0025     .%4.1f %%.%i %%.
 8085134:	6843 2067 6944 6173 6c62 6465 5420 6d65     Chg Disabled Tem
 8085144:	0070 6843 7261 6967 676e 6420 7369 6261     p.Charging disab
 8085154:	656c 2064 6554 706d 7265 7461 7275 0065     led Temperature.
 8085164:	6c41 7265 0074 6553 2074 6f53 616c 2072     Alert.Set Solar 
 8085174:	6f50 6577 6572 2064 6f4d 6564 3000 4300     Powered Mode.0.C
 8085184:	656c 7261 6465 5320 6c6f 7261 5020 776f     leared Solar Pow
 8085194:	7265 6465 4d20 646f 0065 6553 2074 6556     ered Mode.Set Ve
 80851a4:	6272 736f 2065 6f4d 6564 4300 656c 7261     rbose Mode.Clear
 80851b4:	6465 5620 7265 6f62 6573 4d20 646f 0065     ed Verbose Mode.
 80851c4:	6954 656d 7a20 6e6f 2065 666f 7366 7465     Time zone offset
 80851d4:	2520 0069 6954 656d 4c00 776f 5020 776f      %i.Time.Low Pow
 80851e4:	7265 4e00 726f 616d 206c 704f 7265 7461     er.Normal Operat
 80851f4:	6f69 736e 4600 6f72 206d 7325 7420 206f     ions.From %s to 
 8085204:	7325 5300 6174 6574 5420 6172 736e 7469     %s.State Transit
 8085214:	6f69 006e 7245 6f72 2072 6174 696b 676e     ion.Error taking
 8085224:	4d20 6165 7573 6572 656d 746e 0073 7073      Measurements.sp
 8085234:	7261 2f6b 6564 6976 6563 732f 7365 6973     ark/device/sessi
 8085244:	6e6f 652f 646e 4700 696f 676e 7420 206f     on/end.Going to 
 8085254:	6c53 6565 0070 6f4c 2077 6142 7474 7265     Sleep.Low Batter
 8085264:	2079 202d 6c53 6565 6970 676e 4500 7272     y - Sleeping.Err
 8085274:	726f 5320 6174 6574 2d20 5220 7365 7465     or State - Reset
 8085284:	4500 7272 726f 5320 6174 6574 2d20 5020     .Error State - P
 8085294:	776f 7265 4320 6379 656c 4500 7272 726f     ower Cycle.Error
 80852a4:	5320 6174 6574 2d20 4620 6c75 206c 6f4d      State - Full Mo
 80852b4:	6564 206d 6552 6573 0074 6953 6e67 6c61     dem Reset.Signal
 80852c4:	5200 7365 7465 6f43 6e75 0074 6552 656c     .ResetCount.Rele
 80852d4:	7361 0065 7473 7461 4f65 4366 6768 5000     ase.stateOfChg.P
 80852e4:	776f 7265 6f43 746e 7865 0074 6f6c 5077     owerContext.lowP
 80852f4:	776f 7265 6f4d 6564 7400 6d65 6570 6172     owerMode.tempera
 8085304:	7574 6572 6800 6d75 6469 7469 0079 6f53     ture.humidity.So
 8085314:	6c69 6f4d 7369 7574 6572 4d00 6165 7573     ilMoisture.Measu
 8085324:	6572 4e2d 776f 4c00 776f 6f50 6577 4d72     re-Now.LowPowerM
 8085334:	646f 0065 6f53 616c 2d72 6f4d 6564 5600     ode.Solar-Mode.V
 8085344:	7265 6f62 6573 4d2d 646f 0065 6553 5474     erbose-Mode.SetT
 8085354:	6d69 5a65 6e6f 0065 6f43 6c75 2064 6f6e     imeZone.Could no
 8085364:	2074 6966 646e 5320 5448 3133 4600 6961     t find SHT31.Fai
 8085374:	656c 2064 6f74 6320 6e6f 656e 7463 5300     led to connect.S
 8085384:	6174 7472 7075 5500 6b6e 6f6e 6e77 4e00     tartup.Unknown.N
 8085394:	6e6f 0065 6957 6946 4700 4d53 5500 544d     one.WiFi.GSM.UMT
 80853a4:	0053 4443 414d 4c00 4554 4900 4545 3845     S.CDMA.LTE.IEEE8
 80853b4:	3230 3531 0034                              02154.

080853ba <_ZL13releaseNumber>:
 80853ba:	0031 0000 0000                              1.....

080853c0 <_ZTVN5spark13CellularClassE>:
	...
 80853c8:	1955 0808 194b 0808 1941 0808 18b3 0808     U...K...A.......
 80853d8:	1935 0808 1929 0808 191d 0808 1915 0808     5...)...........
 80853e8:	190b 0808 1901 0808 18bd 0808               ............

080853f4 <_ZTV14CellularSignal>:
	...
 80853fc:	1a05 0808 1a87 0808 1a07 0808 1ac5 0808     ................
 808540c:	1a0d 0808 1a95 0808 1a31 0808 1a55 0808     ........1...U...
 808541c:	fffc ffff 0000 0000 1a7f 0808               ............

08085428 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085430:	1b0d 0808 1b13 0808 1b69 0808 1b21 0808     ........i...!...
 8085440:	1b0f 0808                                   ....

08085444 <_ZTV7TwoWire>:
	...
 808544c:	220d 0808 2257 0808 222f 0808 220f 0808     ."..W"../"..."..
 808545c:	2237 0808 223f 0808 2247 0808 224f 0808     7"..?"..G"..O"..

0808546c <_ZTV9IPAddress>:
	...
 8085474:	230f 0808 22ff 0808 2301 0808 6162 6475     .#..."...#..baud
 8085484:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8085494:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80854a4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80854b4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80854c4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80854d4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80854e4:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80854f4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 8085504:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 8085514:	6564 3d20 0020 6564 6174 6c69 2073 203d     de = .details = 
 8085524:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
 8085534:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
 8085544:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8085554:	6170 696e 0063 6c61 006c 0000               panic.all...

08085560 <_ZTVN5spark12NetworkClassE>:
	...
 8085568:	23ad 0808 23b7 0808 23c1 0808 23cb 0808     .#...#...#...#..
 8085578:	23d5 0808 23e1 0808 23ed 0808 23f9 0808     .#...#...#...#..
 8085588:	2401 0808 240b 0808 2415 0808               .$...$...$..

08085594 <_ZTV8SPIClass>:
	...
 808559c:	2971 0808 2973 0808 2b25 3330 3a64 3025     q)..s)..%+03d:%0
 80855ac:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80855bc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080855cc <_ZTV11USARTSerial>:
	...
 80855d4:	2ce1 0808 2d31 0808 2d3f 0808 282b 0808     .,..1-..?-..+(..
 80855e4:	2cf5 0808 2d17 0808 2d03 0808 2d2b 0808     .,...-...-..+-..
 80855f4:	2ce3 0808 2ce7 0808                         .,...,..

080855fc <_ZTV9USBSerial>:
	...
 8085604:	2de9 0808 2e39 0808 2e47 0808 282b 0808     .-..9...G...+(..
 8085614:	2e25 0808 2deb 0808 2e01 0808 2e33 0808     %....-......3...
 8085624:	2e17 0808 2de5 0808                         .....-..

0808562c <day_name.4723>:
 808562c:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808563c:	6972 6153 4a74                                   riSat

08085641 <mon_name.4724>:
 8085641:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8085651:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8085661:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8085671:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8085681:	6425 000a                                   %d..

08085685 <_ctype_>:
 8085685:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8085695:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80856a5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80856b5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80856c5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80856d5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80856e5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80856f5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8085705:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085788 <__sf_fake_stdin>:
	...

080857a8 <__sf_fake_stdout>:
	...

080857c8 <__sf_fake_stderr>:
	...

080857e8 <__month_lengths>:
 80857e8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80857f8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085808:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085818:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8085828:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085838:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085848:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8085858:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8085868:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8085878:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08085884 <link_const_variable_data_end>:
 8085884:	08081049 	.word	0x08081049
 8085888:	080810f5 	.word	0x080810f5
 808588c:	080812a1 	.word	0x080812a1
 8085890:	080819d5 	.word	0x080819d5
 8085894:	0808239d 	.word	0x0808239d
 8085898:	08082461 	.word	0x08082461
 808589c:	08082955 	.word	0x08082955
 80858a0:	08082b2d 	.word	0x08082b2d
 80858a4:	08082ccd 	.word	0x08082ccd
 80858a8:	08083299 	.word	0x08083299
 80858ac:	080832c9 	.word	0x080832c9
 80858b0:	08083339 	.word	0x08083339
 80858b4:	080833fd 	.word	0x080833fd
 80858b8:	08083481 	.word	0x08083481
 80858bc:	08083505 	.word	0x08083505
