
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.5.0/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006040  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da060  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000138  2003e078  000da064  0001e078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000640  2003e1b0  2003e1b0  0002e1b0  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000da19c  000da19c  0002a19c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000da1c8  000da1c8  0002a1c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010442b  00000000  00000000  0002a1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014ae7  00000000  00000000  0012e5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022e0b  00000000  00000000  001430de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e10  00000000  00000000  00165ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000054f8  00000000  00000000  00168cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a890  00000000  00000000  0016e1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032f71  00000000  00000000  001a8a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b32a  00000000  00000000  001db9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e89c  00000000  00000000  002e6d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fda9 	bl	d8b88 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fdae 	bl	d8b9e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e078 	.word	0x2003e078
   d404c:	000da064 	.word	0x000da064
   d4050:	2003e1b0 	.word	0x2003e1b0
   d4054:	2003e1b0 	.word	0x2003e1b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fd0d 	bl	d7a7c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da060 	.word	0x000da060
   d4084:	000da020 	.word	0x000da020

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b9b0 	b.w	d53ec <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fec5 	bl	d4e1c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bcb3 	b.w	d7a00 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b8ff 	b.w	d629c <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b905 	b.w	d62ac <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b903 	b.w	d62ac <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z16wateringTimerISRv>:
  currentStatusWriteNeeded = true;
  return true;
}

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z16wateringTimerISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e214 	.word	0x2003e214

000d40c4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40c4:	6803      	ldr	r3, [r0, #0]
   d40c6:	4718      	bx	r3

000d40c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40c8:	2a01      	cmp	r2, #1
   d40ca:	d002      	beq.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40cc:	2a02      	cmp	r2, #2
   d40ce:	d002      	beq.n	d40d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40d0:	e004      	b.n	d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40d2:	6001      	str	r1, [r0, #0]
	      break;
   d40d4:	e002      	b.n	d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40d6:	680b      	ldr	r3, [r1, #0]
   d40d8:	b100      	cbz	r0, d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40da:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40dc:	2000      	movs	r0, #0
   d40de:	4770      	bx	lr

000d40e0 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40e0:	b538      	push	{r3, r4, r5, lr}
   d40e2:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40e4:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40e6:	b128      	cbz	r0, d40f4 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40e8:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40ea:	210c      	movs	r1, #12
   d40ec:	f003 fe39 	bl	d7d62 <_ZdlPvj>
            wakeupSource = next;
   d40f0:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40f2:	e7f8      	b.n	d40e6 <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40f4:	4620      	mov	r0, r4
   d40f6:	bd38      	pop	{r3, r4, r5, pc}

000d40f8 <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d40f8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40fa:	4904      	ldr	r1, [pc, #16]	; (d410c <_Z10measureNow6String+0x14>)
   d40fc:	f003 f957 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4100:	b118      	cbz	r0, d410a <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4102:	4b03      	ldr	r3, [pc, #12]	; (d4110 <_Z10measureNow6String+0x18>)
   d4104:	2203      	movs	r2, #3
   d4106:	701a      	strb	r2, [r3, #0]
    return 1;
   d4108:	2001      	movs	r0, #1
  }
  else return 0;
}
   d410a:	bd08      	pop	{r3, pc}
   d410c:	000d9b18 	.word	0x000d9b18
   d4110:	2003e1f2 	.word	0x2003e1f2

000d4114 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4114:	6943      	ldr	r3, [r0, #20]
   d4116:	b113      	cbz	r3, d411e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4118:	6983      	ldr	r3, [r0, #24]
   d411a:	300c      	adds	r0, #12
   d411c:	4718      	bx	r3
   d411e:	4770      	bx	lr

000d4120 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4120:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4122:	2100      	movs	r1, #0
   d4124:	4604      	mov	r4, r0
   d4126:	4608      	mov	r0, r1
   d4128:	f001 fd9c 	bl	d5c64 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d412c:	a902      	add	r1, sp, #8
   d412e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4130:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4132:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4136:	f001 fdad 	bl	d5c94 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d413a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d413c:	b10c      	cbz	r4, d4142 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d413e:	2301      	movs	r3, #1
   d4140:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4142:	2100      	movs	r1, #0
   d4144:	2001      	movs	r0, #1
   d4146:	f001 fd8d 	bl	d5c64 <os_thread_scheduling>
            }
        }
        if (t) {
   d414a:	b12c      	cbz	r4, d4158 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d414c:	6823      	ldr	r3, [r4, #0]
   d414e:	4620      	mov	r0, r4
   d4150:	689b      	ldr	r3, [r3, #8]
   d4152:	4798      	blx	r3
            t->running = false;
   d4154:	2300      	movs	r3, #0
   d4156:	7123      	strb	r3, [r4, #4]
        }
    }
   d4158:	b002      	add	sp, #8
   d415a:	bd10      	pop	{r4, pc}

000d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d415c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d415e:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4162:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4164:	f88d 3000 	strb.w	r3, [sp]
   d4168:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d416a:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d416c:	f002 fbc8 	bl	d6900 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4170:	4628      	mov	r0, r5
   d4172:	b003      	add	sp, #12
   d4174:	bd30      	pop	{r4, r5, pc}

000d4176 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4176:	b510      	push	{r4, lr}
   d4178:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d417a:	6800      	ldr	r0, [r0, #0]
   d417c:	b108      	cbz	r0, d4182 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d417e:	f002 f895 	bl	d62ac <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4182:	4620      	mov	r0, r4
   d4184:	bd10      	pop	{r4, pc}

000d4186 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4186:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4188:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d418a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d418c:	b113      	cbz	r3, d4194 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d418e:	2203      	movs	r2, #3
   d4190:	4601      	mov	r1, r0
   d4192:	4798      	blx	r3
    }
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>:

inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractDiagnosticData(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
   d4198:	b530      	push	{r4, r5, lr}
   d419a:	b085      	sub	sp, #20
   d419c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d419e:	a904      	add	r1, sp, #16
   d41a0:	2200      	movs	r2, #0
   d41a2:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d41a6:	f001 ff4d 	bl	d6044 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41aa:	b9d8      	cbnz	r0, d41e4 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x4c>
        return ret;
    }
    return get(src, val);
   d41ac:	9c00      	ldr	r4, [sp, #0]
}

inline int AbstractIntegerDiagnosticData::get(const diag_source* src, IntType& val) {
    SPARK_ASSERT(src->type == DIAG_TYPE_INT);
   d41ae:	88e3      	ldrh	r3, [r4, #6]
   d41b0:	2b01      	cmp	r3, #1
   d41b2:	d004      	beq.n	d41be <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x26>
   d41b4:	4601      	mov	r1, r0
   d41b6:	4a0c      	ldr	r2, [pc, #48]	; (d41e8 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d41b8:	200a      	movs	r0, #10
   d41ba:	f001 ff33 	bl	d6024 <panic_>
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d41be:	6921      	ldr	r1, [r4, #16]
   d41c0:	b919      	cbnz	r1, d41ca <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x32>
   d41c2:	4a09      	ldr	r2, [pc, #36]	; (d41e8 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d41c4:	200a      	movs	r0, #10
   d41c6:	f001 ff2d 	bl	d6024 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d41ca:	2300      	movs	r3, #0
   d41cc:	9301      	str	r3, [sp, #4]
   d41ce:	230c      	movs	r3, #12
   d41d0:	f8ad 3004 	strh.w	r3, [sp, #4]
   d41d4:	2304      	movs	r3, #4
   d41d6:	9303      	str	r3, [sp, #12]
   d41d8:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d41da:	6923      	ldr	r3, [r4, #16]
   d41dc:	aa01      	add	r2, sp, #4
   d41de:	2101      	movs	r1, #1
   d41e0:	4620      	mov	r0, r4
   d41e2:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d41e4:	b005      	add	sp, #20
   d41e6:	bd30      	pop	{r4, r5, pc}
   d41e8:	000d5d25 	.word	0x000d5d25

000d41ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41ec:	6803      	ldr	r3, [r0, #0]
   d41ee:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41f0:	b120      	cbz	r0, d41fc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d41f2:	8883      	ldrh	r3, [r0, #4]
   d41f4:	428b      	cmp	r3, r1
   d41f6:	d001      	beq.n	d41fc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d41f8:	6880      	ldr	r0, [r0, #8]
   d41fa:	e7f9      	b.n	d41f0 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d41fc:	4770      	bx	lr

000d41fe <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d41fe:	b508      	push	{r3, lr}
   d4200:	ed2d 8b02 	vpush	{d8}
   d4204:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4208:	b128      	cbz	r0, d4216 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d420a:	3801      	subs	r0, #1
   d420c:	f7ff fff7 	bl	d41fe <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d4210:	ee28 0a00 	vmul.f32	s0, s16, s0
   d4214:	e001      	b.n	d421a <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d4216:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d421a:	ecbd 8b02 	vpop	{d8}
   d421e:	bd08      	pop	{r3, pc}

000d4220 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4220:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4222:	6880      	ldr	r0, [r0, #8]
   d4224:	2300      	movs	r3, #0
   d4226:	b138      	cbz	r0, d4238 <_ZN5Timer5_stopEjb+0x18>
   d4228:	e88d 000a 	stmia.w	sp, {r1, r3}
   d422c:	2102      	movs	r1, #2
   d422e:	f001 fd39 	bl	d5ca4 <os_timer_change>
   d4232:	fab0 f080 	clz	r0, r0
   d4236:	0940      	lsrs	r0, r0, #5
    }
   d4238:	b003      	add	sp, #12
   d423a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4240 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4240:	b538      	push	{r3, r4, r5, lr}
   d4242:	4b10      	ldr	r3, [pc, #64]	; (d4284 <_ZN5TimerD1Ev+0x44>)
   d4244:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4246:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4248:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d424a:	b1a3      	cbz	r3, d4276 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d424c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4250:	2200      	movs	r2, #0
   d4252:	f7ff ffe5 	bl	d4220 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4256:	2100      	movs	r1, #0
   d4258:	68a0      	ldr	r0, [r4, #8]
   d425a:	f001 fd3b 	bl	d5cd4 <os_timer_set_id>
            while (running) {
   d425e:	7923      	ldrb	r3, [r4, #4]
   d4260:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4264:	b113      	cbz	r3, d426c <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4266:	f001 fce5 	bl	d5c34 <os_thread_yield>
   d426a:	e7f8      	b.n	d425e <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d426c:	4629      	mov	r1, r5
   d426e:	68a0      	ldr	r0, [r4, #8]
   d4270:	f001 fd08 	bl	d5c84 <os_timer_destroy>
            handle = nullptr;
   d4274:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4276:	f104 000c 	add.w	r0, r4, #12
   d427a:	f7ff ff84 	bl	d4186 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d427e:	4620      	mov	r0, r4
   d4280:	bd38      	pop	{r3, r4, r5, pc}
   d4282:	bf00      	nop
   d4284:	000d952c 	.word	0x000d952c

000d4288 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4288:	b510      	push	{r4, lr}
   d428a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d428c:	f7ff ffd8 	bl	d4240 <_ZN5TimerD1Ev>
   d4290:	4620      	mov	r0, r4
   d4292:	211c      	movs	r1, #28
   d4294:	f003 fd65 	bl	d7d62 <_ZdlPvj>
   d4298:	4620      	mov	r0, r4
   d429a:	bd10      	pop	{r4, pc}

000d429c <_Z17getSignalStrengthv>:

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d429c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d429e:	4d19      	ldr	r5, [pc, #100]	; (d4304 <_Z17getSignalStrengthv+0x68>)
   d42a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d42a2:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d42a4:	ac04      	add	r4, sp, #16
   d42a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d42a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d42aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d42ac:	e895 0003 	ldmia.w	r5, {r0, r1}
   d42b0:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d42b4:	4914      	ldr	r1, [pc, #80]	; (d4308 <_Z17getSignalStrengthv+0x6c>)
   d42b6:	a80e      	add	r0, sp, #56	; 0x38
   d42b8:	f002 f8a2 	bl	d6400 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d42bc:	a80e      	add	r0, sp, #56	; 0x38
   d42be:	f002 f8f2 	bl	d64a6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d42c2:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d42c4:	a80e      	add	r0, sp, #56	; 0x38
   d42c6:	f002 f93f 	bl	d6548 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d42ca:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d42cc:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d42d0:	f002 f920 	bl	d6514 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d42d4:	ab18      	add	r3, sp, #96	; 0x60
   d42d6:	ee10 0a10 	vmov	r0, s0
   d42da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d42de:	f004 f80b 	bl	d82f8 <__aeabi_f2d>
   d42e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42e6:	4628      	mov	r0, r5
   d42e8:	f004 f806 	bl	d82f8 <__aeabi_f2d>
   d42ec:	e9cd 0100 	strd	r0, r1, [sp]
   d42f0:	4a06      	ldr	r2, [pc, #24]	; (d430c <_Z17getSignalStrengthv+0x70>)
   d42f2:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d42f6:	4806      	ldr	r0, [pc, #24]	; (d4310 <_Z17getSignalStrengthv+0x74>)
   d42f8:	2140      	movs	r1, #64	; 0x40
   d42fa:	f001 ffef 	bl	d62dc <snprintf>
}
   d42fe:	b019      	add	sp, #100	; 0x64
   d4300:	bd30      	pop	{r4, r5, pc}
   d4302:	bf00      	nop
   d4304:	000d9538 	.word	0x000d9538
   d4308:	2003e330 	.word	0x2003e330
   d430c:	000d95c0 	.word	0x000d95c0
   d4310:	2003e270 	.word	0x2003e270

000d4314 <_Z17getBatteryContextv>:


void getBatteryContext() {
   d4314:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4316:	4d0e      	ldr	r5, [pc, #56]	; (d4350 <_Z17getBatteryContextv+0x3c>)
   d4318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d431a:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d431c:	ac01      	add	r4, sp, #4
   d431e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d4328:	4669      	mov	r1, sp
   d432a:	2007      	movs	r0, #7
   d432c:	f7ff ff34 	bl	d4198 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
   d4330:	2800      	cmp	r0, #0
        return val;
   d4332:	bfa8      	it	ge
   d4334:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4336:	4a07      	ldr	r2, [pc, #28]	; (d4354 <_Z17getBatteryContextv+0x40>)
   d4338:	ab08      	add	r3, sp, #32
   d433a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d433e:	2110      	movs	r1, #16
   d4340:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4344:	4804      	ldr	r0, [pc, #16]	; (d4358 <_Z17getBatteryContextv+0x44>)
   d4346:	f001 ffc9 	bl	d62dc <snprintf>

}
   d434a:	b009      	add	sp, #36	; 0x24
   d434c:	bd30      	pop	{r4, r5, pc}
   d434e:	bf00      	nop
   d4350:	000d9560 	.word	0x000d9560
   d4354:	000d98c1 	.word	0x000d98c1
   d4358:	2003e1e1 	.word	0x2003e1e1

000d435c <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d435c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d435e:	4d55      	ldr	r5, [pc, #340]	; (d44b4 <_Z16takeMeasurementsv+0x158>)
   d4360:	4c55      	ldr	r4, [pc, #340]	; (d44b8 <_Z16takeMeasurementsv+0x15c>)
   d4362:	7b2b      	ldrb	r3, [r5, #12]
   d4364:	b153      	cbz	r3, d437c <_Z16takeMeasurementsv+0x20>
    current.temperature = tempHumidSensor.readTemperature();
   d4366:	4855      	ldr	r0, [pc, #340]	; (d44bc <_Z16takeMeasurementsv+0x160>)
   d4368:	f001 fc2e 	bl	d5bc8 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d436c:	4853      	ldr	r0, [pc, #332]	; (d44bc <_Z16takeMeasurementsv+0x160>)

bool takeMeasurements() {
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
    current.temperature = tempHumidSensor.readTemperature();
   d436e:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d4372:	f001 fc37 	bl	d5be4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d4376:	ed84 0a06 	vstr	s0, [r4, #24]
   d437a:	e002      	b.n	d4382 <_Z16takeMeasurementsv+0x26>
  }
  else current.temperature = current.humidity = 0.0;
   d437c:	2300      	movs	r3, #0
   d437e:	61a3      	str	r3, [r4, #24]
   d4380:	6163      	str	r3, [r4, #20]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4382:	6960      	ldr	r0, [r4, #20]
   d4384:	4e4c      	ldr	r6, [pc, #304]	; (d44b8 <_Z16takeMeasurementsv+0x15c>)
   d4386:	f003 ffb7 	bl	d82f8 <__aeabi_f2d>
   d438a:	4a4d      	ldr	r2, [pc, #308]	; (d44c0 <_Z16takeMeasurementsv+0x164>)
   d438c:	e9cd 0100 	strd	r0, r1, [sp]
   d4390:	2110      	movs	r1, #16
   d4392:	484c      	ldr	r0, [pc, #304]	; (d44c4 <_Z16takeMeasurementsv+0x168>)
   d4394:	f001 ffa2 	bl	d62dc <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d4398:	69a0      	ldr	r0, [r4, #24]
   d439a:	f003 ffad 	bl	d82f8 <__aeabi_f2d>
   d439e:	4a4a      	ldr	r2, [pc, #296]	; (d44c8 <_Z16takeMeasurementsv+0x16c>)
   d43a0:	e9cd 0100 	strd	r0, r1, [sp]
   d43a4:	2110      	movs	r1, #16
   d43a6:	4849      	ldr	r0, [pc, #292]	; (d44cc <_Z16takeMeasurementsv+0x170>)
   d43a8:	f001 ff98 	bl	d62dc <snprintf>

  if (sysStatus.lightSensorConfig) {
   d43ac:	7c2b      	ldrb	r3, [r5, #16]
   d43ae:	b143      	cbz	r3, d43c2 <_Z16takeMeasurementsv+0x66>
    lightSensor.make_forced_measurement();
   d43b0:	4847      	ldr	r0, [pc, #284]	; (d44d0 <_Z16takeMeasurementsv+0x174>)
   d43b2:	f001 fb33 	bl	d5a1c <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d43b6:	4846      	ldr	r0, [pc, #280]	; (d44d0 <_Z16takeMeasurementsv+0x174>)
   d43b8:	f001 faea 	bl	d5990 <_ZN6BH175015get_light_levelEv>
   d43bc:	ed86 0a07 	vstr	s0, [r6, #28]
   d43c0:	e001      	b.n	d43c6 <_Z16takeMeasurementsv+0x6a>
  }
  else current.lightLevel = 0.0;
   d43c2:	2300      	movs	r3, #0
   d43c4:	61f3      	str	r3, [r6, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d43c6:	69e0      	ldr	r0, [r4, #28]
   d43c8:	4e3b      	ldr	r6, [pc, #236]	; (d44b8 <_Z16takeMeasurementsv+0x15c>)
   d43ca:	f003 ff95 	bl	d82f8 <__aeabi_f2d>
   d43ce:	4a41      	ldr	r2, [pc, #260]	; (d44d4 <_Z16takeMeasurementsv+0x178>)
   d43d0:	e9cd 0100 	strd	r0, r1, [sp]
   d43d4:	2110      	movs	r1, #16
   d43d6:	4840      	ldr	r0, [pc, #256]	; (d44d8 <_Z16takeMeasurementsv+0x17c>)
   d43d8:	f001 ff80 	bl	d62dc <snprintf>

  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d43dc:	7bab      	ldrb	r3, [r5, #14]
   d43de:	b163      	cbz	r3, d43fa <_Z16takeMeasurementsv+0x9e>
   d43e0:	2013      	movs	r0, #19
   d43e2:	f003 fbee 	bl	d7bc2 <analogRead>
   d43e6:	2364      	movs	r3, #100	; 0x64
   d43e8:	9300      	str	r3, [sp, #0]
   d43ea:	2300      	movs	r3, #0
   d43ec:	f640 628a 	movw	r2, #3722	; 0xe8a
   d43f0:	4619      	mov	r1, r3
   d43f2:	f001 ff8b 	bl	d630c <_Z3mapiiiii>
   d43f6:	6030      	str	r0, [r6, #0]
   d43f8:	e000      	b.n	d43fc <_Z16takeMeasurementsv+0xa0>
  else current.soilMoisture1 = 0;
   d43fa:	6033      	str	r3, [r6, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d43fc:	7bab      	ldrb	r3, [r5, #14]
   d43fe:	2b02      	cmp	r3, #2
   d4400:	d10c      	bne.n	d441c <_Z16takeMeasurementsv+0xc0>
   d4402:	2012      	movs	r0, #18
   d4404:	f003 fbdd 	bl	d7bc2 <analogRead>
   d4408:	2364      	movs	r3, #100	; 0x64
   d440a:	9300      	str	r3, [sp, #0]
   d440c:	2300      	movs	r3, #0
   d440e:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4412:	4619      	mov	r1, r3
   d4414:	f001 ff7a 	bl	d630c <_Z3mapiiiii>
   d4418:	6060      	str	r0, [r4, #4]
   d441a:	e001      	b.n	d4420 <_Z16takeMeasurementsv+0xc4>
  else current.soilMoisture2 = 0;
   d441c:	2300      	movs	r3, #0
   d441e:	6063      	str	r3, [r4, #4]
  
  
  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d4420:	7beb      	ldrb	r3, [r5, #15]
   d4422:	2b01      	cmp	r3, #1
   d4424:	d10d      	bne.n	d4442 <_Z16takeMeasurementsv+0xe6>
   d4426:	2011      	movs	r0, #17
   d4428:	f003 fbcb 	bl	d7bc2 <analogRead>
   d442c:	231e      	movs	r3, #30
   d442e:	9300      	str	r3, [sp, #0]
   d4430:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d4434:	2300      	movs	r3, #0
   d4436:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d443a:	f001 ff67 	bl	d630c <_Z3mapiiiii>
   d443e:	60a0      	str	r0, [r4, #8]
   d4440:	e002      	b.n	d4448 <_Z16takeMeasurementsv+0xec>
  else sysStatus.pressureSensorConfig = 0;
   d4442:	4b1c      	ldr	r3, [pc, #112]	; (d44b4 <_Z16takeMeasurementsv+0x158>)
   d4444:	2200      	movs	r2, #0
   d4446:	73da      	strb	r2, [r3, #15]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4448:	4b24      	ldr	r3, [pc, #144]	; (d44dc <_Z16takeMeasurementsv+0x180>)
   d444a:	2200      	movs	r2, #0
   d444c:	4611      	mov	r1, r2
   d444e:	6858      	ldr	r0, [r3, #4]
   d4450:	f001 feec 	bl	d622c <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4454:	b108      	cbz	r0, d445a <_Z16takeMeasurementsv+0xfe>
   d4456:	f7ff ff21 	bl	d429c <_Z17getSignalStrengthv>
    float batteryCharge() const {
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
   d445a:	a903      	add	r1, sp, #12
   d445c:	2003      	movs	r0, #3
   d445e:	f7ff fe9b 	bl	d4198 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
        if (r) {
   d4462:	b988      	cbnz	r0, d4488 <_Z16takeMeasurementsv+0x12c>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4464:	2006      	movs	r0, #6
   d4466:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d446a:	f7ff fec8 	bl	d41fe <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d446e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4472:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4476:	ee07 3a10 	vmov	s14, r3
   d447a:	ee30 0a00 	vadd.f32	s0, s0, s0
   d447e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4482:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4486:	e001      	b.n	d448c <_Z16takeMeasurementsv+0x130>
            return -1.0f;
   d4488:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  
  sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
   d448c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4490:	4a13      	ldr	r2, [pc, #76]	; (d44e0 <_Z16takeMeasurementsv+0x184>)
   d4492:	4814      	ldr	r0, [pc, #80]	; (d44e4 <_Z16takeMeasurementsv+0x188>)
  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
  else sysStatus.pressureSensorConfig = 0;

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  
  sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
   d4494:	edc5 7a02 	vstr	s15, [r5, #8]
   d4498:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d449c:	2108      	movs	r1, #8
   d449e:	f001 ff1d 	bl	d62dc <snprintf>

  getBatteryContext();                                                 // What is the battery doing.
   d44a2:	f7ff ff37 	bl	d4314 <_Z17getBatteryContextv>

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d44a6:	4b10      	ldr	r3, [pc, #64]	; (d44e8 <_Z16takeMeasurementsv+0x18c>)
   d44a8:	2001      	movs	r0, #1
   d44aa:	7018      	strb	r0, [r3, #0]
   d44ac:	4b0f      	ldr	r3, [pc, #60]	; (d44ec <_Z16takeMeasurementsv+0x190>)
   d44ae:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d44b0:	b004      	add	sp, #16
   d44b2:	bd70      	pop	{r4, r5, r6, pc}
   d44b4:	2003e30c 	.word	0x2003e30c
   d44b8:	2003e2c0 	.word	0x2003e2c0
   d44bc:	2003e260 	.word	0x2003e260
   d44c0:	000d95d9 	.word	0x000d95d9
   d44c4:	2003e1b4 	.word	0x2003e1b4
   d44c8:	000d95e1 	.word	0x000d95e1
   d44cc:	2003e2e4 	.word	0x2003e2e4
   d44d0:	2003e1d0 	.word	0x2003e1d0
   d44d4:	000d95ea 	.word	0x000d95ea
   d44d8:	2003e2fc 	.word	0x2003e2fc
   d44dc:	2003e330 	.word	0x2003e330
   d44e0:	000d95f4 	.word	0x000d95f4
   d44e4:	2003e2f4 	.word	0x2003e2f4
   d44e8:	2003e1f3 	.word	0x2003e1f3
   d44ec:	2003e1f1 	.word	0x2003e1f1

000d44f0 <_Z17connectToParticlev>:

}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d44f0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d44f4:	481a      	ldr	r0, [pc, #104]	; (d4560 <_Z17connectToParticlev+0x70>)
   d44f6:	2300      	movs	r3, #0
   d44f8:	461a      	mov	r2, r3
   d44fa:	4619      	mov	r1, r3
   d44fc:	6840      	ldr	r0, [r0, #4]
   d44fe:	f001 fe9d 	bl	d623c <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4502:	f001 fe33 	bl	d616c <spark_cloud_flag_connect>
   d4506:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d450a:	f240 36e7 	movw	r6, #999	; 0x3e7
   d450e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4510:	2000      	movs	r0, #0
   d4512:	f001 fc47 	bl	d5da4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4516:	f04f 0900 	mov.w	r9, #0
   d451a:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d451c:	2000      	movs	r0, #0
   d451e:	f001 fc41 	bl	d5da4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4522:	ebb0 0008 	subs.w	r0, r0, r8
   d4526:	eb61 0109 	sbc.w	r1, r1, r9
   d452a:	428f      	cmp	r7, r1
   d452c:	bf08      	it	eq
   d452e:	4286      	cmpeq	r6, r0
   d4530:	d305      	bcc.n	d453e <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4532:	f001 fe2b 	bl	d618c <spark_cloud_flag_connected>
   d4536:	b910      	cbnz	r0, d453e <_Z17connectToParticlev+0x4e>
            spark_process();
   d4538:	f001 fe10 	bl	d615c <spark_process>
   d453c:	e7ee      	b.n	d451c <_Z17connectToParticlev+0x2c>
   d453e:	f001 fe25 	bl	d618c <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4542:	b118      	cbz	r0, d454c <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4544:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d4548:	f001 be20 	b.w	d618c <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d454c:	f001 fbf2 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4550:	4b04      	ldr	r3, [pc, #16]	; (d4564 <_Z17connectToParticlev+0x74>)
   d4552:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4554:	f001 fe02 	bl	d615c <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4558:	3c01      	subs	r4, #1
   d455a:	d0f3      	beq.n	d4544 <_Z17connectToParticlev+0x54>
   d455c:	e7d8      	b.n	d4510 <_Z17connectToParticlev+0x20>
   d455e:	bf00      	nop
   d4560:	2003e330 	.word	0x2003e330
   d4564:	2003e6d8 	.word	0x2003e6d8

000d4568 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4568:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d456a:	f001 fe0f 	bl	d618c <spark_cloud_flag_connected>
    return !Particle.connected();
   d456e:	f080 0001 	eor.w	r0, r0, #1
}
   d4572:	b2c0      	uxtb	r0, r0
   d4574:	bd08      	pop	{r3, pc}
	...

000d4578 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d457a:	f001 fdff 	bl	d617c <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d457e:	2000      	movs	r0, #0
   d4580:	f001 fc10 	bl	d5da4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4584:	2500      	movs	r5, #0
   d4586:	4604      	mov	r4, r0
   d4588:	f643 2697 	movw	r6, #14999	; 0x3a97
   d458c:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d458e:	2000      	movs	r0, #0
   d4590:	f001 fc08 	bl	d5da4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4594:	1b00      	subs	r0, r0, r4
   d4596:	eb61 0105 	sbc.w	r1, r1, r5
   d459a:	428f      	cmp	r7, r1
   d459c:	bf08      	it	eq
   d459e:	4286      	cmpeq	r6, r0
   d45a0:	d305      	bcc.n	d45ae <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem                              
   d45a2:	f7ff ffe1 	bl	d4568 <_Z12notConnectedv>
   d45a6:	b910      	cbnz	r0, d45ae <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d45a8:	f001 fdd8 	bl	d615c <spark_process>
   d45ac:	e7ef      	b.n	d458e <_Z22disconnectFromParticlev+0x16>
   d45ae:	f7ff ffdb 	bl	d4568 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d45b2:	4806      	ldr	r0, [pc, #24]	; (d45cc <_Z22disconnectFromParticlev+0x54>)
   d45b4:	2300      	movs	r3, #0
   d45b6:	461a      	mov	r2, r3
   d45b8:	4619      	mov	r1, r3
   d45ba:	6840      	ldr	r0, [r0, #4]
   d45bc:	f001 fe46 	bl	d624c <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d45c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d45c4:	f001 feae 	bl	d6324 <delay>
  return true;
}
   d45c8:	2001      	movs	r0, #1
   d45ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d45cc:	2003e330 	.word	0x2003e330

000d45d0 <_Z9PMICresetv>:
  else return 0;
}

// Power Management function
void PMICreset() {
  if (sysStatus.solarPowerMode) {
   d45d0:	4b15      	ldr	r3, [pc, #84]	; (d4628 <_Z9PMICresetv+0x58>)
   d45d2:	4816      	ldr	r0, [pc, #88]	; (d462c <_Z9PMICresetv+0x5c>)
   d45d4:	7959      	ldrb	r1, [r3, #5]
   d45d6:	b199      	cbz	r1, d4600 <_Z9PMICresetv+0x30>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d45d8:	f44f 7361 	mov.w	r3, #900	; 0x384
   d45dc:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45de:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d45e2:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d45e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d45e8:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45ea:	f241 0370 	movw	r3, #4208	; 0x1070
   d45ee:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45f0:	6803      	ldr	r3, [r0, #0]
   d45f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d45f6:	f043 0301 	orr.w	r3, r3, #1
   d45fa:	6003      	str	r3, [r0, #0]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d45fc:	2100      	movs	r1, #0
   d45fe:	e011      	b.n	d4624 <_Z9PMICresetv+0x54>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4600:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4604:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4606:	f241 0370 	movw	r3, #4208	; 0x1070
   d460a:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d460c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4610:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4612:	f241 0310 	movw	r3, #4112	; 0x1010
   d4616:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4618:	6803      	ldr	r3, [r0, #0]
   d461a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d461e:	f043 0301 	orr.w	r3, r3, #1
   d4622:	6003      	str	r3, [r0, #0]
   d4624:	f001 bd76 	b.w	d6114 <system_power_management_set_config>
   d4628:	2003e30c 	.word	0x2003e30c
   d462c:	2003e1f4 	.word	0x2003e1f4

000d4630 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d4630:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d4632:	4c07      	ldr	r4, [pc, #28]	; (d4650 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4634:	f001 fb7e 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
   d4638:	6823      	ldr	r3, [r4, #0]
   d463a:	1ac0      	subs	r0, r0, r3
   d463c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4640:	d304      	bcc.n	d464c <_Z20meterParticlePublishv+0x1c>
   d4642:	f001 fb77 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4646:	6020      	str	r0, [r4, #0]
   d4648:	2001      	movs	r0, #1
   d464a:	bd10      	pop	{r4, pc}
    return 1;
  } 
  else return 0;
   d464c:	2000      	movs	r0, #0
}
   d464e:	bd10      	pop	{r4, pc}
   d4650:	2003e2b0 	.word	0x2003e2b0

000d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4654:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d4656:	f7ff ffeb 	bl	d4630 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d465a:	b118      	cbz	r0, d4664 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d465c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4660:	f7ff bfe6 	b.w	d4630 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4664:	f001 fd7a 	bl	d615c <spark_process>
   d4668:	e7f5      	b.n	d4656 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43+0x2>
	...

000d466c <_Z14fullModemResetv>:
    return 1;
  } 
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d466c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d466e:	f001 fd85 	bl	d617c <spark_cloud_flag_disconnect>
   d4672:	f001 fb5f 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4676:	f643 2597 	movw	r5, #14999	; 0x3a97
   d467a:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d467c:	f001 fd86 	bl	d618c <spark_cloud_flag_connected>
   d4680:	b140      	cbz	r0, d4694 <_Z14fullModemResetv+0x28>
   d4682:	f001 fb57 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
   d4686:	1b00      	subs	r0, r0, r4
   d4688:	42a8      	cmp	r0, r5
   d468a:	d803      	bhi.n	d4694 <_Z14fullModemResetv+0x28>
		delay(100);
   d468c:	2064      	movs	r0, #100	; 0x64
   d468e:	f001 fe49 	bl	d6324 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4692:	e7f3      	b.n	d467c <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4694:	2100      	movs	r1, #0
   d4696:	4b09      	ldr	r3, [pc, #36]	; (d46bc <_Z14fullModemResetv+0x50>)
   d4698:	f247 5230 	movw	r2, #30000	; 0x7530
   d469c:	4608      	mov	r0, r1
   d469e:	f001 fab9 	bl	d5c14 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d46a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d46a6:	f001 fe3d 	bl	d6324 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d46aa:	4b05      	ldr	r3, [pc, #20]	; (d46c0 <_Z14fullModemResetv+0x54>)
   d46ac:	220a      	movs	r2, #10
   d46ae:	681b      	ldr	r3, [r3, #0]
   d46b0:	2101      	movs	r1, #1
   d46b2:	4668      	mov	r0, sp
   d46b4:	f002 ff6a 	bl	d758c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d46b8:	b003      	add	sp, #12
   d46ba:	bd30      	pop	{r4, r5, pc}
   d46bc:	000d95fa 	.word	0x000d95fa
   d46c0:	2003e24c 	.word	0x2003e24c

000d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d46c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d46c6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d46c8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d46ca:	b17c      	cbz	r4, d46ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d46cc:	6863      	ldr	r3, [r4, #4]
   d46ce:	3b01      	subs	r3, #1
   d46d0:	6063      	str	r3, [r4, #4]
   d46d2:	b95b      	cbnz	r3, d46ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d46d4:	6823      	ldr	r3, [r4, #0]
   d46d6:	4620      	mov	r0, r4
   d46d8:	689b      	ldr	r3, [r3, #8]
   d46da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46dc:	68a3      	ldr	r3, [r4, #8]
   d46de:	3b01      	subs	r3, #1
   d46e0:	60a3      	str	r3, [r4, #8]
   d46e2:	b91b      	cbnz	r3, d46ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d46e4:	6823      	ldr	r3, [r4, #0]
   d46e6:	4620      	mov	r0, r4
   d46e8:	68db      	ldr	r3, [r3, #12]
   d46ea:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d46ec:	4628      	mov	r0, r5
   d46ee:	bd38      	pop	{r3, r4, r5, pc}

000d46f0 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d46f0:	b530      	push	{r4, r5, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d46f2:	4c25      	ldr	r4, [pc, #148]	; (d4788 <_Z9sendEventv+0x98>)
   d46f4:	4d25      	ldr	r5, [pc, #148]	; (d478c <_Z9sendEventv+0x9c>)
   d46f6:	6a23      	ldr	r3, [r4, #32]
    break;
  }
}

void sendEvent()
{
   d46f8:	b0d1      	sub	sp, #324	; 0x144
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d46fa:	930c      	str	r3, [sp, #48]	; 0x30
   d46fc:	4b24      	ldr	r3, [pc, #144]	; (d4790 <_Z9sendEventv+0xa0>)
   d46fe:	699a      	ldr	r2, [r3, #24]
   d4700:	920b      	str	r2, [sp, #44]	; 0x2c
   d4702:	689b      	ldr	r3, [r3, #8]
   d4704:	930a      	str	r3, [sp, #40]	; 0x28
   d4706:	68e3      	ldr	r3, [r4, #12]
   d4708:	9309      	str	r3, [sp, #36]	; 0x24
   d470a:	68a3      	ldr	r3, [r4, #8]
   d470c:	9308      	str	r3, [sp, #32]
   d470e:	6863      	ldr	r3, [r4, #4]
   d4710:	9307      	str	r3, [sp, #28]
   d4712:	6823      	ldr	r3, [r4, #0]
   d4714:	9306      	str	r3, [sp, #24]
   d4716:	69e0      	ldr	r0, [r4, #28]
   d4718:	f003 fdee 	bl	d82f8 <__aeabi_f2d>
   d471c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4720:	69a0      	ldr	r0, [r4, #24]
   d4722:	f003 fde9 	bl	d82f8 <__aeabi_f2d>
   d4726:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d472a:	6960      	ldr	r0, [r4, #20]
   d472c:	f003 fde4 	bl	d82f8 <__aeabi_f2d>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4730:	2400      	movs	r4, #0
   d4732:	e9cd 0100 	strd	r0, r1, [sp]
   d4736:	4a17      	ldr	r2, [pc, #92]	; (d4794 <_Z9sendEventv+0xa4>)
   d4738:	f44f 7180 	mov.w	r1, #256	; 0x100
   d473c:	a810      	add	r0, sp, #64	; 0x40
   d473e:	f001 fdcd 	bl	d62dc <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4742:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d4744:	4914      	ldr	r1, [pc, #80]	; (d4798 <_Z9sendEventv+0xa8>)
   d4746:	f88d 4000 	strb.w	r4, [sp]
   d474a:	aa10      	add	r2, sp, #64	; 0x40
   d474c:	a80e      	add	r0, sp, #56	; 0x38
   d474e:	f7ff fd05 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4752:	a80f      	add	r0, sp, #60	; 0x3c
   d4754:	f7ff ffb6 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4758:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control-Elastic", data, PRIVATE);
   d475a:	4910      	ldr	r1, [pc, #64]	; (d479c <_Z9sendEventv+0xac>)
   d475c:	f88d 4000 	strb.w	r4, [sp]
   d4760:	aa10      	add	r2, sp, #64	; 0x40
   d4762:	a80e      	add	r0, sp, #56	; 0x38
   d4764:	f7ff fcfa 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4768:	a80f      	add	r0, sp, #60	; 0x3c
   d476a:	f7ff ffab 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  
  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d476e:	f003 f805 	bl	d777c <_ZN9TimeClass4hourEv>
   d4772:	4b0b      	ldr	r3, [pc, #44]	; (d47a0 <_Z9sendEventv+0xb0>)
   d4774:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d4776:	4b0b      	ldr	r3, [pc, #44]	; (d47a4 <_Z9sendEventv+0xb4>)
   d4778:	2201      	movs	r2, #1
   d477a:	701a      	strb	r2, [r3, #0]
   d477c:	f001 fada 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4780:	4b09      	ldr	r3, [pc, #36]	; (d47a8 <_Z9sendEventv+0xb8>)
   d4782:	6018      	str	r0, [r3, #0]
}
   d4784:	b051      	add	sp, #324	; 0x144
   d4786:	bd30      	pop	{r4, r5, pc}
   d4788:	2003e2c0 	.word	0x2003e2c0
   d478c:	2003e1cc 	.word	0x2003e1cc
   d4790:	2003e30c 	.word	0x2003e30c
   d4794:	000d9607 	.word	0x000d9607
   d4798:	000d96b6 	.word	0x000d96b6
   d479c:	000d96cf 	.word	0x000d96cf
   d47a0:	2003e215 	.word	0x2003e215
   d47a4:	2003e0f6 	.word	0x2003e0f6
   d47a8:	2003e1c8 	.word	0x2003e1c8

000d47ac <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d47ac:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d47ae:	780b      	ldrb	r3, [r1, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d47b0:	b094      	sub	sp, #80	; 0x50
   d47b2:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d47b4:	b923      	cbnz	r3, d47c0 <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d47b6:	491c      	ldr	r1, [pc, #112]	; (d4828 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d47b8:	a804      	add	r0, sp, #16
   d47ba:	f004 fa2b 	bl	d8c14 <strcpy>
   d47be:	e017      	b.n	d47f0 <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d47c0:	4608      	mov	r0, r1
   d47c2:	f004 f8d7 	bl	d8974 <atoi>
   d47c6:	28c8      	cmp	r0, #200	; 0xc8
   d47c8:	d004      	beq.n	d47d4 <_Z14UbidotsHandlerPKcS0_+0x28>
   d47ca:	4620      	mov	r0, r4
   d47cc:	f004 f8d2 	bl	d8974 <atoi>
   d47d0:	28c9      	cmp	r0, #201	; 0xc9
   d47d2:	d11e      	bne.n	d4812 <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d47d4:	4915      	ldr	r1, [pc, #84]	; (d482c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d47d6:	a804      	add	r0, sp, #16
   d47d8:	f004 fa1c 	bl	d8c14 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d47dc:	f002 ffc6 	bl	d776c <_ZN9TimeClass3nowEv>
   d47e0:	4b13      	ldr	r3, [pc, #76]	; (d4830 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d47e2:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d47e4:	4b13      	ldr	r3, [pc, #76]	; (d4834 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d47e6:	2201      	movs	r2, #1
   d47e8:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d47ea:	4b13      	ldr	r3, [pc, #76]	; (d4838 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d47ec:	2200      	movs	r2, #0
   d47ee:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d47f0:	f7ff ff30 	bl	d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>
   d47f4:	4b11      	ldr	r3, [pc, #68]	; (d483c <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d47f6:	4912      	ldr	r1, [pc, #72]	; (d4840 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d47f8:	781b      	ldrb	r3, [r3, #0]
   d47fa:	2200      	movs	r2, #0
   d47fc:	f88d 2000 	strb.w	r2, [sp]
   d4800:	a802      	add	r0, sp, #8
   d4802:	aa04      	add	r2, sp, #16
   d4804:	f7ff fcaa 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4808:	a803      	add	r0, sp, #12
   d480a:	f7ff ff5b 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d480e:	b014      	add	sp, #80	; 0x50
   d4810:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4812:	4620      	mov	r0, r4
   d4814:	f004 f8ae 	bl	d8974 <atoi>
   d4818:	4a0a      	ldr	r2, [pc, #40]	; (d4844 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d481a:	4603      	mov	r3, r0
   d481c:	2140      	movs	r1, #64	; 0x40
   d481e:	a804      	add	r0, sp, #16
   d4820:	f001 fd5c 	bl	d62dc <snprintf>
   d4824:	e7e4      	b.n	d47f0 <_Z14UbidotsHandlerPKcS0_+0x44>
   d4826:	bf00      	nop
   d4828:	000d96f0 	.word	0x000d96f0
   d482c:	000d9705 	.word	0x000d9705
   d4830:	2003e30c 	.word	0x2003e30c
   d4834:	2003e1f1 	.word	0x2003e1f1
   d4838:	2003e0f6 	.word	0x2003e0f6
   d483c:	2003e1cc 	.word	0x2003e1cc
   d4840:	000d96f8 	.word	0x000d96f8
   d4844:	000d9717 	.word	0x000d9717

000d4848 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4848:	b530      	push	{r4, r5, lr}
   d484a:	4918      	ldr	r1, [pc, #96]	; (d48ac <_Z12setSolarMode6String+0x64>)
   d484c:	b085      	sub	sp, #20
   d484e:	4604      	mov	r4, r0
   d4850:	f002 fdad 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4854:	4605      	mov	r5, r0
   d4856:	b168      	cbz	r0, d4874 <_Z12setSolarMode6String+0x2c>
  {
    sysStatus.solarPowerMode = true;
   d4858:	4b15      	ldr	r3, [pc, #84]	; (d48b0 <_Z12setSolarMode6String+0x68>)
   d485a:	2401      	movs	r4, #1
   d485c:	715c      	strb	r4, [r3, #5]
    systemStatusWriteNeeded = true;
   d485e:	4b15      	ldr	r3, [pc, #84]	; (d48b4 <_Z12setSolarMode6String+0x6c>)
   d4860:	701c      	strb	r4, [r3, #0]
    PMICreset();                                               // Change the power management Settings
   d4862:	f7ff feb5 	bl	d45d0 <_Z9PMICresetv>
   d4866:	4b14      	ldr	r3, [pc, #80]	; (d48b8 <_Z12setSolarMode6String+0x70>)
    Particle.publish("Config","Set Solar Powered Mode",PRIVATE);
   d4868:	2200      	movs	r2, #0
   d486a:	781b      	ldrb	r3, [r3, #0]
   d486c:	f88d 2000 	strb.w	r2, [sp]
   d4870:	4a12      	ldr	r2, [pc, #72]	; (d48bc <_Z12setSolarMode6String+0x74>)
   d4872:	e010      	b.n	d4896 <_Z12setSolarMode6String+0x4e>
   d4874:	4912      	ldr	r1, [pc, #72]	; (d48c0 <_Z12setSolarMode6String+0x78>)
   d4876:	4620      	mov	r0, r4
   d4878:	f002 fd99 	bl	d73ae <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d487c:	b198      	cbz	r0, d48a6 <_Z12setSolarMode6String+0x5e>
  {
    sysStatus.solarPowerMode = false;
   d487e:	4b0c      	ldr	r3, [pc, #48]	; (d48b0 <_Z12setSolarMode6String+0x68>)
   d4880:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded = true;
   d4882:	4b0c      	ldr	r3, [pc, #48]	; (d48b4 <_Z12setSolarMode6String+0x6c>)
   d4884:	2401      	movs	r4, #1
   d4886:	701c      	strb	r4, [r3, #0]
    PMICreset();                                                // Change the power management settings
   d4888:	f7ff fea2 	bl	d45d0 <_Z9PMICresetv>
   d488c:	4b0a      	ldr	r3, [pc, #40]	; (d48b8 <_Z12setSolarMode6String+0x70>)
    Particle.publish("Config","Cleared Solar Powered Mode",PRIVATE);
   d488e:	4a0d      	ldr	r2, [pc, #52]	; (d48c4 <_Z12setSolarMode6String+0x7c>)
   d4890:	781b      	ldrb	r3, [r3, #0]
   d4892:	f88d 5000 	strb.w	r5, [sp]
   d4896:	490c      	ldr	r1, [pc, #48]	; (d48c8 <_Z12setSolarMode6String+0x80>)
   d4898:	a802      	add	r0, sp, #8
   d489a:	f7ff fc5f 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d489e:	a803      	add	r0, sp, #12
   d48a0:	f7ff ff10 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48a4:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d48a6:	b005      	add	sp, #20
   d48a8:	bd30      	pop	{r4, r5, pc}
   d48aa:	bf00      	nop
   d48ac:	000d9b18 	.word	0x000d9b18
   d48b0:	2003e30c 	.word	0x2003e30c
   d48b4:	2003e1f1 	.word	0x2003e1f1
   d48b8:	2003e1cc 	.word	0x2003e1cc
   d48bc:	000d9734 	.word	0x000d9734
   d48c0:	000d9752 	.word	0x000d9752
   d48c4:	000d9754 	.word	0x000d9754
   d48c8:	000d974b 	.word	0x000d974b

000d48cc <_Z14setSoilSensors6String>:
    System.setPowerConfiguration(conf);
  }
}

int setSoilSensors (String command) // Function to force sending data in current hour
{
   d48cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d48ce:	491e      	ldr	r1, [pc, #120]	; (d4948 <_Z14setSoilSensors6String+0x7c>)
   d48d0:	4604      	mov	r4, r0
   d48d2:	f002 fd6c 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "0")
   d48d6:	4606      	mov	r6, r0
   d48d8:	b158      	cbz	r0, d48f2 <_Z14setSoilSensors6String+0x26>
  {
    sysStatus.soilSensorConfig = 0;
   d48da:	4b1c      	ldr	r3, [pc, #112]	; (d494c <_Z14setSoilSensors6String+0x80>)
   d48dc:	2200      	movs	r2, #0
   d48de:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d48e0:	4b1b      	ldr	r3, [pc, #108]	; (d4950 <_Z14setSoilSensors6String+0x84>)
   d48e2:	2401      	movs	r4, #1
   d48e4:	701c      	strb	r4, [r3, #0]
   d48e6:	4b1b      	ldr	r3, [pc, #108]	; (d4954 <_Z14setSoilSensors6String+0x88>)
   d48e8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d48ea:	f88d 2000 	strb.w	r2, [sp]
   d48ee:	4a1a      	ldr	r2, [pc, #104]	; (d4958 <_Z14setSoilSensors6String+0x8c>)
   d48f0:	e020      	b.n	d4934 <_Z14setSoilSensors6String+0x68>
   d48f2:	491a      	ldr	r1, [pc, #104]	; (d495c <_Z14setSoilSensors6String+0x90>)
   d48f4:	4620      	mov	r0, r4
   d48f6:	f002 fd5a 	bl	d73ae <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d48fa:	4605      	mov	r5, r0
   d48fc:	b150      	cbz	r0, d4914 <_Z14setSoilSensors6String+0x48>
  {
    sysStatus.soilSensorConfig = 1;
   d48fe:	4b13      	ldr	r3, [pc, #76]	; (d494c <_Z14setSoilSensors6String+0x80>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4900:	4a17      	ldr	r2, [pc, #92]	; (d4960 <_Z14setSoilSensors6String+0x94>)
    Particle.publish("Config","No Soil Sensors",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.soilSensorConfig = 1;
   d4902:	2401      	movs	r4, #1
   d4904:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d4906:	4b12      	ldr	r3, [pc, #72]	; (d4950 <_Z14setSoilSensors6String+0x84>)
   d4908:	701c      	strb	r4, [r3, #0]
   d490a:	4b12      	ldr	r3, [pc, #72]	; (d4954 <_Z14setSoilSensors6String+0x88>)
   d490c:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d490e:	f88d 6000 	strb.w	r6, [sp]
   d4912:	e00f      	b.n	d4934 <_Z14setSoilSensors6String+0x68>
   d4914:	4913      	ldr	r1, [pc, #76]	; (d4964 <_Z14setSoilSensors6String+0x98>)
   d4916:	4620      	mov	r0, r4
   d4918:	f002 fd49 	bl	d73ae <_ZNK6String6equalsEPKc>
    return 1;
  }
    else if (command == "2")
   d491c:	b190      	cbz	r0, d4944 <_Z14setSoilSensors6String+0x78>
  {
    sysStatus.soilSensorConfig = 2;
   d491e:	4b0b      	ldr	r3, [pc, #44]	; (d494c <_Z14setSoilSensors6String+0x80>)
   d4920:	2202      	movs	r2, #2
   d4922:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4924:	4b0a      	ldr	r3, [pc, #40]	; (d4950 <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4926:	4a10      	ldr	r2, [pc, #64]	; (d4968 <_Z14setSoilSensors6String+0x9c>)
    return 1;
  }
    else if (command == "2")
  {
    sysStatus.soilSensorConfig = 2;
    systemStatusWriteNeeded = true;
   d4928:	2401      	movs	r4, #1
   d492a:	701c      	strb	r4, [r3, #0]
   d492c:	4b09      	ldr	r3, [pc, #36]	; (d4954 <_Z14setSoilSensors6String+0x88>)
   d492e:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4930:	f88d 5000 	strb.w	r5, [sp]
   d4934:	490d      	ldr	r1, [pc, #52]	; (d496c <_Z14setSoilSensors6String+0xa0>)
   d4936:	a802      	add	r0, sp, #8
   d4938:	f7ff fc10 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d493c:	a803      	add	r0, sp, #12
   d493e:	f7ff fec1 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4942:	4620      	mov	r0, r4
  }
  else return 0;
}
   d4944:	b004      	add	sp, #16
   d4946:	bd70      	pop	{r4, r5, r6, pc}
   d4948:	000d9752 	.word	0x000d9752
   d494c:	2003e30c 	.word	0x2003e30c
   d4950:	2003e1f1 	.word	0x2003e1f1
   d4954:	2003e1cc 	.word	0x2003e1cc
   d4958:	000d976f 	.word	0x000d976f
   d495c:	000d9b18 	.word	0x000d9b18
   d4960:	000d977f 	.word	0x000d977f
   d4964:	000d99fa 	.word	0x000d99fa
   d4968:	000d978f 	.word	0x000d978f
   d496c:	000d974b 	.word	0x000d974b

000d4970 <_Z17setPressureSensor6String>:

int setPressureSensor (String command) // Function to force sending data in current hour
{
   d4970:	b530      	push	{r4, r5, lr}
   d4972:	4916      	ldr	r1, [pc, #88]	; (d49cc <_Z17setPressureSensor6String+0x5c>)
   d4974:	b085      	sub	sp, #20
   d4976:	4604      	mov	r4, r0
   d4978:	f002 fd19 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "0")
   d497c:	4605      	mov	r5, r0
   d497e:	b158      	cbz	r0, d4998 <_Z17setPressureSensor6String+0x28>
  {
    sysStatus.pressureSensorConfig = 0;
   d4980:	4b13      	ldr	r3, [pc, #76]	; (d49d0 <_Z17setPressureSensor6String+0x60>)
   d4982:	2200      	movs	r2, #0
   d4984:	73da      	strb	r2, [r3, #15]
    systemStatusWriteNeeded = true;
   d4986:	4b13      	ldr	r3, [pc, #76]	; (d49d4 <_Z17setPressureSensor6String+0x64>)
   d4988:	2401      	movs	r4, #1
   d498a:	701c      	strb	r4, [r3, #0]
   d498c:	4b12      	ldr	r3, [pc, #72]	; (d49d8 <_Z17setPressureSensor6String+0x68>)
   d498e:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d4990:	f88d 2000 	strb.w	r2, [sp]
   d4994:	4a11      	ldr	r2, [pc, #68]	; (d49dc <_Z17setPressureSensor6String+0x6c>)
   d4996:	e00e      	b.n	d49b6 <_Z17setPressureSensor6String+0x46>
   d4998:	4911      	ldr	r1, [pc, #68]	; (d49e0 <_Z17setPressureSensor6String+0x70>)
   d499a:	4620      	mov	r0, r4
   d499c:	f002 fd07 	bl	d73ae <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d49a0:	b188      	cbz	r0, d49c6 <_Z17setPressureSensor6String+0x56>
  {
    sysStatus.pressureSensorConfig = 1;
   d49a2:	4b0b      	ldr	r3, [pc, #44]	; (d49d0 <_Z17setPressureSensor6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d49a4:	4a0f      	ldr	r2, [pc, #60]	; (d49e4 <_Z17setPressureSensor6String+0x74>)
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.pressureSensorConfig = 1;
   d49a6:	2401      	movs	r4, #1
   d49a8:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d49aa:	4b0a      	ldr	r3, [pc, #40]	; (d49d4 <_Z17setPressureSensor6String+0x64>)
   d49ac:	701c      	strb	r4, [r3, #0]
   d49ae:	4b0a      	ldr	r3, [pc, #40]	; (d49d8 <_Z17setPressureSensor6String+0x68>)
   d49b0:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d49b2:	f88d 5000 	strb.w	r5, [sp]
   d49b6:	490c      	ldr	r1, [pc, #48]	; (d49e8 <_Z17setPressureSensor6String+0x78>)
   d49b8:	a802      	add	r0, sp, #8
   d49ba:	f7ff fbcf 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d49be:	a803      	add	r0, sp, #12
   d49c0:	f7ff fe80 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49c4:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d49c6:	b005      	add	sp, #20
   d49c8:	bd30      	pop	{r4, r5, pc}
   d49ca:	bf00      	nop
   d49cc:	000d9752 	.word	0x000d9752
   d49d0:	2003e30c 	.word	0x2003e30c
   d49d4:	2003e1f1 	.word	0x2003e1f1
   d49d8:	2003e1cc 	.word	0x2003e1cc
   d49dc:	000d97a0 	.word	0x000d97a0
   d49e0:	000d9b18 	.word	0x000d9b18
   d49e4:	000d97b3 	.word	0x000d97b3
   d49e8:	000d974b 	.word	0x000d974b

000d49ec <_Z14setLightSensor6String>:

int setLightSensor (String command) // Function to force sending data in current hour
{
   d49ec:	b530      	push	{r4, r5, lr}
   d49ee:	4919      	ldr	r1, [pc, #100]	; (d4a54 <_Z14setLightSensor6String+0x68>)
   d49f0:	b085      	sub	sp, #20
   d49f2:	4604      	mov	r4, r0
   d49f4:	f002 fcdb 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "0")
   d49f8:	4605      	mov	r5, r0
   d49fa:	b158      	cbz	r0, d4a14 <_Z14setLightSensor6String+0x28>
  {
    sysStatus.lightSensorConfig = 0;
   d49fc:	4b16      	ldr	r3, [pc, #88]	; (d4a58 <_Z14setLightSensor6String+0x6c>)
   d49fe:	2200      	movs	r2, #0
   d4a00:	741a      	strb	r2, [r3, #16]
    systemStatusWriteNeeded = true;
   d4a02:	4b16      	ldr	r3, [pc, #88]	; (d4a5c <_Z14setLightSensor6String+0x70>)
   d4a04:	2401      	movs	r4, #1
   d4a06:	701c      	strb	r4, [r3, #0]
   d4a08:	4b15      	ldr	r3, [pc, #84]	; (d4a60 <_Z14setLightSensor6String+0x74>)
   d4a0a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d4a0c:	f88d 2000 	strb.w	r2, [sp]
   d4a10:	4a14      	ldr	r2, [pc, #80]	; (d4a64 <_Z14setLightSensor6String+0x78>)
   d4a12:	e015      	b.n	d4a40 <_Z14setLightSensor6String+0x54>
   d4a14:	4914      	ldr	r1, [pc, #80]	; (d4a68 <_Z14setLightSensor6String+0x7c>)
   d4a16:	4620      	mov	r0, r4
   d4a18:	f002 fcc9 	bl	d73ae <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4a1c:	b1c0      	cbz	r0, d4a50 <_Z14setLightSensor6String+0x64>
  {
    sysStatus.lightSensorConfig = 1;
   d4a1e:	4b0e      	ldr	r3, [pc, #56]	; (d4a58 <_Z14setLightSensor6String+0x6c>)
    systemStatusWriteNeeded = true;
    lightSensor.begin();
   d4a20:	4812      	ldr	r0, [pc, #72]	; (d4a6c <_Z14setLightSensor6String+0x80>)
    Particle.publish("Config","No Light Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.lightSensorConfig = 1;
   d4a22:	2401      	movs	r4, #1
   d4a24:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d4a26:	4b0d      	ldr	r3, [pc, #52]	; (d4a5c <_Z14setLightSensor6String+0x70>)
   d4a28:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4a2a:	f000 ffa6 	bl	d597a <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4a2e:	2120      	movs	r1, #32
   d4a30:	480e      	ldr	r0, [pc, #56]	; (d4a6c <_Z14setLightSensor6String+0x80>)
   d4a32:	f000 ffde 	bl	d59f2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
   d4a36:	4b0a      	ldr	r3, [pc, #40]	; (d4a60 <_Z14setLightSensor6String+0x74>)
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4a38:	4a0d      	ldr	r2, [pc, #52]	; (d4a70 <_Z14setLightSensor6String+0x84>)
   d4a3a:	781b      	ldrb	r3, [r3, #0]
   d4a3c:	f88d 5000 	strb.w	r5, [sp]
   d4a40:	490c      	ldr	r1, [pc, #48]	; (d4a74 <_Z14setLightSensor6String+0x88>)
   d4a42:	a802      	add	r0, sp, #8
   d4a44:	f7ff fb8a 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4a48:	a803      	add	r0, sp, #12
   d4a4a:	f7ff fe3b 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a4e:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4a50:	b005      	add	sp, #20
   d4a52:	bd30      	pop	{r4, r5, pc}
   d4a54:	000d9752 	.word	0x000d9752
   d4a58:	2003e30c 	.word	0x2003e30c
   d4a5c:	2003e1f1 	.word	0x2003e1f1
   d4a60:	2003e1cc 	.word	0x2003e1cc
   d4a64:	000d97cb 	.word	0x000d97cb
   d4a68:	000d9b18 	.word	0x000d9b18
   d4a6c:	2003e1d0 	.word	0x2003e1d0
   d4a70:	000d97db 	.word	0x000d97db
   d4a74:	000d974b 	.word	0x000d974b

000d4a78 <_Z18setTempHumidSensor6String>:

int setTempHumidSensor (String command) // Function to force sending data in current hour
{
   d4a78:	b530      	push	{r4, r5, lr}
   d4a7a:	4918      	ldr	r1, [pc, #96]	; (d4adc <_Z18setTempHumidSensor6String+0x64>)
   d4a7c:	b085      	sub	sp, #20
   d4a7e:	4604      	mov	r4, r0
   d4a80:	f002 fc95 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4a84:	4605      	mov	r5, r0
   d4a86:	b158      	cbz	r0, d4aa0 <_Z18setTempHumidSensor6String+0x28>
  {
    sysStatus.TempHumidConfig = 0;
   d4a88:	4b15      	ldr	r3, [pc, #84]	; (d4ae0 <_Z18setTempHumidSensor6String+0x68>)
   d4a8a:	2200      	movs	r2, #0
   d4a8c:	731a      	strb	r2, [r3, #12]
    systemStatusWriteNeeded = true;
   d4a8e:	4b15      	ldr	r3, [pc, #84]	; (d4ae4 <_Z18setTempHumidSensor6String+0x6c>)
   d4a90:	2401      	movs	r4, #1
   d4a92:	701c      	strb	r4, [r3, #0]
   d4a94:	4b14      	ldr	r3, [pc, #80]	; (d4ae8 <_Z18setTempHumidSensor6String+0x70>)
   d4a96:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4a98:	f88d 2000 	strb.w	r2, [sp]
   d4a9c:	4a13      	ldr	r2, [pc, #76]	; (d4aec <_Z18setTempHumidSensor6String+0x74>)
   d4a9e:	e012      	b.n	d4ac6 <_Z18setTempHumidSensor6String+0x4e>
   d4aa0:	4913      	ldr	r1, [pc, #76]	; (d4af0 <_Z18setTempHumidSensor6String+0x78>)
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f002 fc83 	bl	d73ae <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4aa8:	b1a8      	cbz	r0, d4ad6 <_Z18setTempHumidSensor6String+0x5e>
  {
    sysStatus.TempHumidConfig = 1;
   d4aaa:	4b0d      	ldr	r3, [pc, #52]	; (d4ae0 <_Z18setTempHumidSensor6String+0x68>)
    systemStatusWriteNeeded = true;
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d4aac:	4811      	ldr	r0, [pc, #68]	; (d4af4 <_Z18setTempHumidSensor6String+0x7c>)
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
   d4aae:	2401      	movs	r4, #1
   d4ab0:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d4ab2:	4b0c      	ldr	r3, [pc, #48]	; (d4ae4 <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d4ab4:	2144      	movs	r1, #68	; 0x44
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
    systemStatusWriteNeeded = true;
   d4ab6:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d4ab8:	f000 fff0 	bl	d5a9c <_ZN14Adafruit_SHT315beginEh>
   d4abc:	4b0a      	ldr	r3, [pc, #40]	; (d4ae8 <_Z18setTempHumidSensor6String+0x70>)
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4abe:	4a0e      	ldr	r2, [pc, #56]	; (d4af8 <_Z18setTempHumidSensor6String+0x80>)
   d4ac0:	781b      	ldrb	r3, [r3, #0]
   d4ac2:	f88d 5000 	strb.w	r5, [sp]
   d4ac6:	490d      	ldr	r1, [pc, #52]	; (d4afc <_Z18setTempHumidSensor6String+0x84>)
   d4ac8:	a802      	add	r0, sp, #8
   d4aca:	f7ff fb47 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4ace:	a803      	add	r0, sp, #12
   d4ad0:	f7ff fdf8 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ad4:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4ad6:	b005      	add	sp, #20
   d4ad8:	bd30      	pop	{r4, r5, pc}
   d4ada:	bf00      	nop
   d4adc:	000d9752 	.word	0x000d9752
   d4ae0:	2003e30c 	.word	0x2003e30c
   d4ae4:	2003e1f1 	.word	0x2003e1f1
   d4ae8:	2003e1cc 	.word	0x2003e1cc
   d4aec:	000d97f0 	.word	0x000d97f0
   d4af0:	000d9b18 	.word	0x000d9b18
   d4af4:	2003e260 	.word	0x2003e260
   d4af8:	000d97f3 	.word	0x000d97f3
   d4afc:	000d974b 	.word	0x000d974b

000d4b00 <_Z18setSolenoidPresent6String>:

int setSolenoidPresent (String command) // Function to force sending data in current hour
{
   d4b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4b02:	491b      	ldr	r1, [pc, #108]	; (d4b70 <_Z18setSolenoidPresent6String+0x70>)
   d4b04:	4604      	mov	r4, r0
   d4b06:	f002 fc52 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "Yes" || command == "yes") {
   d4b0a:	b978      	cbnz	r0, d4b2c <_Z18setSolenoidPresent6String+0x2c>
   d4b0c:	4919      	ldr	r1, [pc, #100]	; (d4b74 <_Z18setSolenoidPresent6String+0x74>)
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f002 fc4d 	bl	d73ae <_ZNK6String6equalsEPKc>
   d4b14:	b950      	cbnz	r0, d4b2c <_Z18setSolenoidPresent6String+0x2c>
   d4b16:	4918      	ldr	r1, [pc, #96]	; (d4b78 <_Z18setSolenoidPresent6String+0x78>)
   d4b18:	4620      	mov	r0, r4
   d4b1a:	f002 fc48 	bl	d73ae <_ZNK6String6equalsEPKc>
    sysStatus.solenoidConfig = 1;
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Solenoid Attached",PRIVATE);
    return 1;
  }
  else if (command == "No" || command == "no") {
   d4b1e:	b988      	cbnz	r0, d4b44 <_Z18setSolenoidPresent6String+0x44>
   d4b20:	4916      	ldr	r1, [pc, #88]	; (d4b7c <_Z18setSolenoidPresent6String+0x7c>)
   d4b22:	4620      	mov	r0, r4
   d4b24:	f002 fc43 	bl	d73ae <_ZNK6String6equalsEPKc>
   d4b28:	b960      	cbnz	r0, d4b44 <_Z18setSolenoidPresent6String+0x44>
   d4b2a:	e01e      	b.n	d4b6a <_Z18setSolenoidPresent6String+0x6a>
}

int setSolenoidPresent (String command) // Function to force sending data in current hour
{
  if (command == "Yes" || command == "yes") {
    sysStatus.solenoidConfig = 1;
   d4b2c:	4b14      	ldr	r3, [pc, #80]	; (d4b80 <_Z18setSolenoidPresent6String+0x80>)
   d4b2e:	2401      	movs	r4, #1
   d4b30:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d4b32:	4b14      	ldr	r3, [pc, #80]	; (d4b84 <_Z18setSolenoidPresent6String+0x84>)
   d4b34:	701c      	strb	r4, [r3, #0]
   d4b36:	4b14      	ldr	r3, [pc, #80]	; (d4b88 <_Z18setSolenoidPresent6String+0x88>)
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d4b38:	2200      	movs	r2, #0
   d4b3a:	781b      	ldrb	r3, [r3, #0]
   d4b3c:	f88d 2000 	strb.w	r2, [sp]
   d4b40:	4a12      	ldr	r2, [pc, #72]	; (d4b8c <_Z18setSolenoidPresent6String+0x8c>)
   d4b42:	e00a      	b.n	d4b5a <_Z18setSolenoidPresent6String+0x5a>
    return 1;
  }
  else if (command == "No" || command == "no") {
    sysStatus.solenoidConfig = 0;
   d4b44:	4b0e      	ldr	r3, [pc, #56]	; (d4b80 <_Z18setSolenoidPresent6String+0x80>)
   d4b46:	2200      	movs	r2, #0
   d4b48:	745a      	strb	r2, [r3, #17]
    systemStatusWriteNeeded = true;
   d4b4a:	4b0e      	ldr	r3, [pc, #56]	; (d4b84 <_Z18setSolenoidPresent6String+0x84>)
   d4b4c:	2401      	movs	r4, #1
   d4b4e:	701c      	strb	r4, [r3, #0]
   d4b50:	4b0d      	ldr	r3, [pc, #52]	; (d4b88 <_Z18setSolenoidPresent6String+0x88>)
   d4b52:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d4b54:	f88d 2000 	strb.w	r2, [sp]
   d4b58:	4a0d      	ldr	r2, [pc, #52]	; (d4b90 <_Z18setSolenoidPresent6String+0x90>)
   d4b5a:	490e      	ldr	r1, [pc, #56]	; (d4b94 <_Z18setSolenoidPresent6String+0x94>)
   d4b5c:	a802      	add	r0, sp, #8
   d4b5e:	f7ff fafd 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4b62:	a803      	add	r0, sp, #12
   d4b64:	f7ff fdae 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4b68:	4620      	mov	r0, r4
  }
  else return 0;
}
   d4b6a:	b004      	add	sp, #16
   d4b6c:	bd10      	pop	{r4, pc}
   d4b6e:	bf00      	nop
   d4b70:	000d9812 	.word	0x000d9812
   d4b74:	000d9816 	.word	0x000d9816
   d4b78:	000d981d 	.word	0x000d981d
   d4b7c:	000d981a 	.word	0x000d981a
   d4b80:	2003e30c 	.word	0x2003e30c
   d4b84:	2003e1f1 	.word	0x2003e1f1
   d4b88:	2003e1cc 	.word	0x2003e1cc
   d4b8c:	000d9823 	.word	0x000d9823
   d4b90:	000d9820 	.word	0x000d9820
   d4b94:	000d974b 	.word	0x000d974b

000d4b98 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4b98:	b530      	push	{r4, r5, lr}
   d4b9a:	4916      	ldr	r1, [pc, #88]	; (d4bf4 <_Z14setVerboseMode6String+0x5c>)
   d4b9c:	b085      	sub	sp, #20
   d4b9e:	4604      	mov	r4, r0
   d4ba0:	f002 fc05 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4ba4:	4605      	mov	r5, r0
   d4ba6:	b158      	cbz	r0, d4bc0 <_Z14setVerboseMode6String+0x28>
  {
    sysStatus.verboseMode = true;
   d4ba8:	4b13      	ldr	r3, [pc, #76]	; (d4bf8 <_Z14setVerboseMode6String+0x60>)
   d4baa:	2401      	movs	r4, #1
   d4bac:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4bae:	4b13      	ldr	r3, [pc, #76]	; (d4bfc <_Z14setVerboseMode6String+0x64>)
   d4bb0:	701c      	strb	r4, [r3, #0]
   d4bb2:	4b13      	ldr	r3, [pc, #76]	; (d4c00 <_Z14setVerboseMode6String+0x68>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4bb4:	2200      	movs	r2, #0
   d4bb6:	781b      	ldrb	r3, [r3, #0]
   d4bb8:	f88d 2000 	strb.w	r2, [sp]
   d4bbc:	4a11      	ldr	r2, [pc, #68]	; (d4c04 <_Z14setVerboseMode6String+0x6c>)
   d4bbe:	e00e      	b.n	d4bde <_Z14setVerboseMode6String+0x46>
   d4bc0:	4911      	ldr	r1, [pc, #68]	; (d4c08 <_Z14setVerboseMode6String+0x70>)
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	f002 fbf3 	bl	d73ae <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4bc8:	b188      	cbz	r0, d4bee <_Z14setVerboseMode6String+0x56>
  {
    sysStatus.verboseMode = false;
   d4bca:	4b0b      	ldr	r3, [pc, #44]	; (d4bf8 <_Z14setVerboseMode6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4bcc:	4a0f      	ldr	r2, [pc, #60]	; (d4c0c <_Z14setVerboseMode6String+0x74>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
   d4bce:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4bd0:	4b0a      	ldr	r3, [pc, #40]	; (d4bfc <_Z14setVerboseMode6String+0x64>)
   d4bd2:	2401      	movs	r4, #1
   d4bd4:	701c      	strb	r4, [r3, #0]
   d4bd6:	4b0a      	ldr	r3, [pc, #40]	; (d4c00 <_Z14setVerboseMode6String+0x68>)
   d4bd8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4bda:	f88d 5000 	strb.w	r5, [sp]
   d4bde:	490c      	ldr	r1, [pc, #48]	; (d4c10 <_Z14setVerboseMode6String+0x78>)
   d4be0:	a802      	add	r0, sp, #8
   d4be2:	f7ff fabb 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4be6:	a803      	add	r0, sp, #12
   d4be8:	f7ff fd6c 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bec:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4bee:	b005      	add	sp, #20
   d4bf0:	bd30      	pop	{r4, r5, pc}
   d4bf2:	bf00      	nop
   d4bf4:	000d9b18 	.word	0x000d9b18
   d4bf8:	2003e30c 	.word	0x2003e30c
   d4bfc:	2003e1f1 	.word	0x2003e1f1
   d4c00:	2003e1cc 	.word	0x2003e1cc
   d4c04:	000d9835 	.word	0x000d9835
   d4c08:	000d9752 	.word	0x000d9752
   d4c0c:	000d9846 	.word	0x000d9846
   d4c10:	000d976a 	.word	0x000d976a

000d4c14 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4c14:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4c16:	4929      	ldr	r1, [pc, #164]	; (d4cbc <_Z15setLowPowerMode6String+0xa8>)
   d4c18:	b085      	sub	sp, #20
   d4c1a:	4604      	mov	r4, r0
   d4c1c:	f002 fbc7 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4c20:	b928      	cbnz	r0, d4c2e <_Z15setLowPowerMode6String+0x1a>
   d4c22:	4927      	ldr	r1, [pc, #156]	; (d4cc0 <_Z15setLowPowerMode6String+0xac>)
   d4c24:	4620      	mov	r0, r4
   d4c26:	f002 fbc2 	bl	d73ae <_ZNK6String6equalsEPKc>
   d4c2a:	2800      	cmp	r0, #0
   d4c2c:	d043      	beq.n	d4cb6 <_Z15setLowPowerMode6String+0xa2>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4c2e:	4923      	ldr	r1, [pc, #140]	; (d4cbc <_Z15setLowPowerMode6String+0xa8>)
   d4c30:	4620      	mov	r0, r4
   d4c32:	f002 fbbc 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4c36:	b1b0      	cbz	r0, d4c66 <_Z15setLowPowerMode6String+0x52>
   d4c38:	f001 faa8 	bl	d618c <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4c3c:	b170      	cbz	r0, d4c5c <_Z15setLowPowerMode6String+0x48>
      waitUntil(meterParticlePublish);
   d4c3e:	f7ff fd09 	bl	d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>
   d4c42:	4b20      	ldr	r3, [pc, #128]	; (d4cc4 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4c44:	4920      	ldr	r1, [pc, #128]	; (d4cc8 <_Z15setLowPowerMode6String+0xb4>)
   d4c46:	781b      	ldrb	r3, [r3, #0]
   d4c48:	2200      	movs	r2, #0
   d4c4a:	f88d 2000 	strb.w	r2, [sp]
   d4c4e:	a802      	add	r0, sp, #8
   d4c50:	4a1e      	ldr	r2, [pc, #120]	; (d4ccc <_Z15setLowPowerMode6String+0xb8>)
   d4c52:	f7ff fa83 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4c56:	a803      	add	r0, sp, #12
   d4c58:	f7ff fd34 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
   d4c5c:	4b1c      	ldr	r3, [pc, #112]	; (d4cd0 <_Z15setLowPowerMode6String+0xbc>)
    strcpy(lowPowerModeStr,"True");
   d4c5e:	491d      	ldr	r1, [pc, #116]	; (d4cd4 <_Z15setLowPowerMode6String+0xc0>)
  {
    if (Particle.connected()) {
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power Mode", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4c60:	2201      	movs	r2, #1
   d4c62:	719a      	strb	r2, [r3, #6]
   d4c64:	e021      	b.n	d4caa <_Z15setLowPowerMode6String+0x96>
   d4c66:	4916      	ldr	r1, [pc, #88]	; (d4cc0 <_Z15setLowPowerMode6String+0xac>)
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f002 fba0 	bl	d73ae <_ZNK6String6equalsEPKc>
    strcpy(lowPowerModeStr,"True");
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4c6e:	b1f8      	cbz	r0, d4cb0 <_Z15setLowPowerMode6String+0x9c>
   d4c70:	f001 fa8c 	bl	d618c <spark_cloud_flag_connected>
   d4c74:	4c16      	ldr	r4, [pc, #88]	; (d4cd0 <_Z15setLowPowerMode6String+0xbc>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4c76:	b918      	cbnz	r0, d4c80 <_Z15setLowPowerMode6String+0x6c>
      connectToParticle();
   d4c78:	f7ff fc3a 	bl	d44f0 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4c7c:	2301      	movs	r3, #1
   d4c7e:	70e3      	strb	r3, [r4, #3]
    } 
    waitUntil(meterParticlePublish);
   d4c80:	f7ff fce8 	bl	d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>
   d4c84:	4b0f      	ldr	r3, [pc, #60]	; (d4cc4 <_Z15setLowPowerMode6String+0xb0>)
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4c86:	4910      	ldr	r1, [pc, #64]	; (d4cc8 <_Z15setLowPowerMode6String+0xb4>)
   d4c88:	781b      	ldrb	r3, [r3, #0]
   d4c8a:	4a13      	ldr	r2, [pc, #76]	; (d4cd8 <_Z15setLowPowerMode6String+0xc4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4c8c:	2500      	movs	r5, #0
   d4c8e:	a802      	add	r0, sp, #8
   d4c90:	f88d 5000 	strb.w	r5, [sp]
   d4c94:	f7ff fa62 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4c98:	a803      	add	r0, sp, #12
   d4c9a:	f7ff fd13 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ca2:	f001 fb3f 	bl	d6324 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4ca6:	490d      	ldr	r1, [pc, #52]	; (d4cdc <_Z15setLowPowerMode6String+0xc8>)
      sysStatus.connectedStatus = true;
    } 
    waitUntil(meterParticlePublish);
    Particle.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4ca8:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4caa:	480d      	ldr	r0, [pc, #52]	; (d4ce0 <_Z15setLowPowerMode6String+0xcc>)
   d4cac:	f003 ffb2 	bl	d8c14 <strcpy>
  }
  systemStatusWriteNeeded = true;
   d4cb0:	4b0c      	ldr	r3, [pc, #48]	; (d4ce4 <_Z15setLowPowerMode6String+0xd0>)
   d4cb2:	2001      	movs	r0, #1
   d4cb4:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4cb6:	b005      	add	sp, #20
   d4cb8:	bd30      	pop	{r4, r5, pc}
   d4cba:	bf00      	nop
   d4cbc:	000d9b18 	.word	0x000d9b18
   d4cc0:	000d9752 	.word	0x000d9752
   d4cc4:	2003e1cc 	.word	0x2003e1cc
   d4cc8:	000d976a 	.word	0x000d976a
   d4ccc:	000d985b 	.word	0x000d985b
   d4cd0:	2003e30c 	.word	0x2003e30c
   d4cd4:	000d986a 	.word	0x000d986a
   d4cd8:	000d986f 	.word	0x000d986f
   d4cdc:	000d9881 	.word	0x000d9881
   d4ce0:	2003e2b8 	.word	0x2003e2b8
   d4ce4:	2003e1f1 	.word	0x2003e1f1

000d4ce8 <_Z12controlValve6String>:

int controlValve(String command)                                   // Function to force sending data in current hour
{
   d4ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4cea:	4926      	ldr	r1, [pc, #152]	; (d4d84 <_Z12controlValve6String+0x9c>)
   d4cec:	b085      	sub	sp, #20
   d4cee:	4604      	mov	r4, r0
   d4cf0:	f002 fb5d 	bl	d73ae <_ZNK6String6equalsEPKc>
  if (command != "On" && command != "Off") return 0;              // Before we begin, let's make sure we have a valid input
   d4cf4:	b928      	cbnz	r0, d4d02 <_Z12controlValve6String+0x1a>
   d4cf6:	4924      	ldr	r1, [pc, #144]	; (d4d88 <_Z12controlValve6String+0xa0>)
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	f002 fb58 	bl	d73ae <_ZNK6String6equalsEPKc>
   d4cfe:	2800      	cmp	r0, #0
   d4d00:	d03d      	beq.n	d4d7e <_Z12controlValve6String+0x96>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4d02:	4620      	mov	r0, r4
   d4d04:	491f      	ldr	r1, [pc, #124]	; (d4d84 <_Z12controlValve6String+0x9c>)
   d4d06:	4d21      	ldr	r5, [pc, #132]	; (d4d8c <_Z12controlValve6String+0xa4>)
   d4d08:	4e21      	ldr	r6, [pc, #132]	; (d4d90 <_Z12controlValve6String+0xa8>)
   d4d0a:	4f22      	ldr	r7, [pc, #136]	; (d4d94 <_Z12controlValve6String+0xac>)
   d4d0c:	f002 fb4f 	bl	d73ae <_ZNK6String6equalsEPKc>
  else if (command == "On") {                                     // Open the water valve
   d4d10:	4604      	mov	r4, r0
   d4d12:	b1b0      	cbz	r0, d4d42 <_Z12controlValve6String+0x5a>
    current.solenoidState = true;
   d4d14:	2401      	movs	r4, #1
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4d16:	4621      	mov	r1, r4
   d4d18:	2002      	movs	r0, #2

int controlValve(String command)                                   // Function to force sending data in current hour
{
  if (command != "On" && command != "Off") return 0;              // Before we begin, let's make sure we have a valid input
  else if (command == "On") {                                     // Open the water valve
    current.solenoidState = true;
   d4d1a:	60ec      	str	r4, [r5, #12]
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4d1c:	f002 ff25 	bl	d7b6a <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4d20:	2100      	movs	r1, #0
   d4d22:	2003      	movs	r0, #3
   d4d24:	f002 ff21 	bl	d7b6a <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4d28:	6970      	ldr	r0, [r6, #20]
   d4d2a:	f001 fafb 	bl	d6324 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4d2e:	4621      	mov	r1, r4
   d4d30:	2003      	movs	r0, #3
   d4d32:	f002 ff1a 	bl	d7b6a <digitalWrite>
   d4d36:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4d38:	783b      	ldrb	r3, [r7, #0]
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d4d3a:	f88d 2000 	strb.w	r2, [sp]
   d4d3e:	4a16      	ldr	r2, [pc, #88]	; (d4d98 <_Z12controlValve6String+0xb0>)
   d4d40:	e013      	b.n	d4d6a <_Z12controlValve6String+0x82>
  }
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
   d4d42:	4621      	mov	r1, r4
   d4d44:	2002      	movs	r0, #2
   d4d46:	f002 ff10 	bl	d7b6a <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4d4a:	4621      	mov	r1, r4
   d4d4c:	2003      	movs	r0, #3
   d4d4e:	f002 ff0c 	bl	d7b6a <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4d52:	6970      	ldr	r0, [r6, #20]
   d4d54:	f001 fae6 	bl	d6324 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4d58:	2101      	movs	r1, #1
   d4d5a:	2003      	movs	r0, #3
   d4d5c:	f002 ff05 	bl	d7b6a <digitalWrite>
    current.solenoidState = false;
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4d60:	4a0e      	ldr	r2, [pc, #56]	; (d4d9c <_Z12controlValve6String+0xb4>)
   d4d62:	783b      	ldrb	r3, [r7, #0]
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
    delay(sysStatus.solenoidHoldTime);
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
    current.solenoidState = false;
   d4d64:	60ec      	str	r4, [r5, #12]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4d66:	f88d 4000 	strb.w	r4, [sp]
   d4d6a:	490d      	ldr	r1, [pc, #52]	; (d4da0 <_Z12controlValve6String+0xb8>)
   d4d6c:	a802      	add	r0, sp, #8
   d4d6e:	f7ff f9f5 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4d72:	a803      	add	r0, sp, #12
   d4d74:	f7ff fca6 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  currentStatusWriteNeeded = true;
   d4d78:	4b0a      	ldr	r3, [pc, #40]	; (d4da4 <_Z12controlValve6String+0xbc>)
   d4d7a:	2001      	movs	r0, #1
   d4d7c:	7018      	strb	r0, [r3, #0]
  return true;
}
   d4d7e:	b005      	add	sp, #20
   d4d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d82:	bf00      	nop
   d4d84:	000d9887 	.word	0x000d9887
   d4d88:	000d988a 	.word	0x000d988a
   d4d8c:	2003e2c0 	.word	0x2003e2c0
   d4d90:	2003e30c 	.word	0x2003e30c
   d4d94:	2003e1cc 	.word	0x2003e1cc
   d4d98:	000d988e 	.word	0x000d988e
   d4d9c:	000d98a6 	.word	0x000d98a6
   d4da0:	000d989d 	.word	0x000d989d
   d4da4:	2003e1f3 	.word	0x2003e1f3

000d4da8 <_Z22publishStateTransitionv>:
  wateringTimerFlag = true;
}


void publishStateTransition(void)
{
   d4da8:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4daa:	4d16      	ldr	r5, [pc, #88]	; (d4e04 <_Z22publishStateTransitionv+0x5c>)
   d4dac:	4c16      	ldr	r4, [pc, #88]	; (d4e08 <_Z22publishStateTransitionv+0x60>)
   d4dae:	4917      	ldr	r1, [pc, #92]	; (d4e0c <_Z22publishStateTransitionv+0x64>)
   d4db0:	782a      	ldrb	r2, [r5, #0]
   d4db2:	7820      	ldrb	r0, [r4, #0]
  wateringTimerFlag = true;
}


void publishStateTransition(void)
{
   d4db4:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4db6:	230e      	movs	r3, #14
   d4db8:	fb03 1202 	mla	r2, r3, r2, r1
   d4dbc:	9200      	str	r2, [sp, #0]
   d4dbe:	fb03 1300 	mla	r3, r3, r0, r1
   d4dc2:	4a13      	ldr	r2, [pc, #76]	; (d4e10 <_Z22publishStateTransitionv+0x68>)
   d4dc4:	2128      	movs	r1, #40	; 0x28
   d4dc6:	a804      	add	r0, sp, #16
   d4dc8:	f001 fa88 	bl	d62dc <snprintf>
  oldState = state;
   d4dcc:	782b      	ldrb	r3, [r5, #0]
   d4dce:	7023      	strb	r3, [r4, #0]
   d4dd0:	f001 f9dc 	bl	d618c <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4dd4:	b170      	cbz	r0, d4df4 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d4dd6:	f7ff fc3d 	bl	d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>
   d4dda:	4b0e      	ldr	r3, [pc, #56]	; (d4e14 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4ddc:	490e      	ldr	r1, [pc, #56]	; (d4e18 <_Z22publishStateTransitionv+0x70>)
   d4dde:	781b      	ldrb	r3, [r3, #0]
   d4de0:	2200      	movs	r2, #0
   d4de2:	f88d 2000 	strb.w	r2, [sp]
   d4de6:	a802      	add	r0, sp, #8
   d4de8:	aa04      	add	r2, sp, #16
   d4dea:	f7ff f9b7 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4dee:	a803      	add	r0, sp, #12
   d4df0:	f7ff fc68 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d4df4:	f002 fdc0 	bl	d7978 <_Z16_fetch_usbserialv>
   d4df8:	a904      	add	r1, sp, #16
   d4dfa:	f002 fa0c 	bl	d7216 <_ZN5Print7printlnEPKc>
}
   d4dfe:	b00f      	add	sp, #60	; 0x3c
   d4e00:	bd30      	pop	{r4, r5, pc}
   d4e02:	bf00      	nop
   d4e04:	2003e1f2 	.word	0x2003e1f2
   d4e08:	2003e1e0 	.word	0x2003e1e0
   d4e0c:	2003e078 	.word	0x2003e078
   d4e10:	000d98b6 	.word	0x000d98b6
   d4e14:	2003e1cc 	.word	0x2003e1cc
   d4e18:	000d98c4 	.word	0x000d98c4

000d4e1c <loop>:

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d4e20:	4c8a      	ldr	r4, [pc, #552]	; (d504c <loop+0x230>)
   d4e22:	7823      	ldrb	r3, [r4, #0]
   d4e24:	3b01      	subs	r3, #1

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4e26:	b08d      	sub	sp, #52	; 0x34
  switch(state) {
   d4e28:	2b07      	cmp	r3, #7
   d4e2a:	f200 82c5 	bhi.w	d53b8 <loop+0x59c>
   d4e2e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4e32:	022c      	.short	0x022c
   d4e34:	004e0008 	.word	0x004e0008
   d4e38:	00b9007f 	.word	0x00b9007f
   d4e3c:	013b00da 	.word	0x013b00da
   d4e40:	01eb      	.short	0x01eb
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4e42:	4d83      	ldr	r5, [pc, #524]	; (d5050 <loop+0x234>)
   d4e44:	792b      	ldrb	r3, [r5, #4]
   d4e46:	b12b      	cbz	r3, d4e54 <loop+0x38>
   d4e48:	4b82      	ldr	r3, [pc, #520]	; (d5054 <loop+0x238>)
   d4e4a:	781b      	ldrb	r3, [r3, #0]
   d4e4c:	2b02      	cmp	r3, #2
   d4e4e:	d001      	beq.n	d4e54 <loop+0x38>
   d4e50:	f7ff ffaa 	bl	d4da8 <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d4e54:	4e80      	ldr	r6, [pc, #512]	; (d5058 <loop+0x23c>)
   d4e56:	7833      	ldrb	r3, [r6, #0]
   d4e58:	b143      	cbz	r3, d4e6c <loop+0x50>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d4e5a:	f002 fec9 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4e5e:	2220      	movs	r2, #32
   d4e60:	497b      	ldr	r1, [pc, #492]	; (d5050 <loop+0x234>)
   d4e62:	2001      	movs	r0, #1
   d4e64:	f000 ff8e 	bl	d5d84 <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d4e68:	2300      	movs	r3, #0
   d4e6a:	7033      	strb	r3, [r6, #0]
    } 
    if (currentStatusWriteNeeded) {
   d4e6c:	4e7b      	ldr	r6, [pc, #492]	; (d505c <loop+0x240>)
   d4e6e:	7833      	ldrb	r3, [r6, #0]
   d4e70:	b143      	cbz	r3, d4e84 <loop+0x68>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d4e72:	f002 febd 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
   d4e76:	2224      	movs	r2, #36	; 0x24
   d4e78:	4979      	ldr	r1, [pc, #484]	; (d5060 <loop+0x244>)
   d4e7a:	2050      	movs	r0, #80	; 0x50
   d4e7c:	f000 ff82 	bl	d5d84 <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d4e80:	2300      	movs	r3, #0
   d4e82:	7033      	strb	r3, [r6, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d4e84:	79ab      	ldrb	r3, [r5, #6]
   d4e86:	b163      	cbz	r3, d4ea2 <loop+0x86>
   d4e88:	f000 ff54 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
   d4e8c:	4b75      	ldr	r3, [pc, #468]	; (d5064 <loop+0x248>)
   d4e8e:	681b      	ldr	r3, [r3, #0]
   d4e90:	1ac0      	subs	r0, r0, r3
   d4e92:	4b75      	ldr	r3, [pc, #468]	; (d5068 <loop+0x24c>)
   d4e94:	4298      	cmp	r0, r3
   d4e96:	d904      	bls.n	d4ea2 <loop+0x86>
   d4e98:	4b71      	ldr	r3, [pc, #452]	; (d5060 <loop+0x244>)
   d4e9a:	68db      	ldr	r3, [r3, #12]
   d4e9c:	2b00      	cmp	r3, #0
   d4e9e:	f000 8283 	beq.w	d53a8 <loop+0x58c>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d4ea2:	f002 fc6b 	bl	d777c <_ZN9TimeClass4hourEv>
   d4ea6:	4b71      	ldr	r3, [pc, #452]	; (d506c <loop+0x250>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d4ea8:	68aa      	ldr	r2, [r5, #8]
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d4eaa:	781b      	ldrb	r3, [r3, #0]
   d4eac:	4298      	cmp	r0, r3
   d4eae:	bf1c      	itt	ne
   d4eb0:	2303      	movne	r3, #3
   d4eb2:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d4eb4:	4b6e      	ldr	r3, [pc, #440]	; (d5070 <loop+0x254>)
   d4eb6:	681b      	ldr	r3, [r3, #0]
   d4eb8:	429a      	cmp	r2, r3
   d4eba:	bfdc      	itt	le
   d4ebc:	2308      	movle	r3, #8
   d4ebe:	7023      	strble	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                 // Most important - turn off water when done!
   d4ec0:	4b6c      	ldr	r3, [pc, #432]	; (d5074 <loop+0x258>)
   d4ec2:	781b      	ldrb	r3, [r3, #0]
   d4ec4:	2b00      	cmp	r3, #0
   d4ec6:	f000 8277 	beq.w	d53b8 <loop+0x59c>
   d4eca:	2304      	movs	r3, #4
   d4ecc:	e02e      	b.n	d4f2c <loop+0x110>
    break;

  case MEASURING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ece:	4d60      	ldr	r5, [pc, #384]	; (d5050 <loop+0x234>)
   d4ed0:	792b      	ldrb	r3, [r5, #4]
   d4ed2:	b12b      	cbz	r3, d4ee0 <loop+0xc4>
   d4ed4:	4b5f      	ldr	r3, [pc, #380]	; (d5054 <loop+0x238>)
   d4ed6:	781b      	ldrb	r3, [r3, #0]
   d4ed8:	2b03      	cmp	r3, #3
   d4eda:	d001      	beq.n	d4ee0 <loop+0xc4>
   d4edc:	f7ff ff64 	bl	d4da8 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4ee0:	f7ff fa3c 	bl	d435c <_Z16takeMeasurementsv>
   d4ee4:	4606      	mov	r6, r0
   d4ee6:	b9e8      	cbnz	r0, d4f24 <loop+0x108>
    {
      state = ERROR_STATE;
   d4ee8:	2301      	movs	r3, #1
   d4eea:	7023      	strb	r3, [r4, #0]
   d4eec:	f000 ff22 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ef0:	4b61      	ldr	r3, [pc, #388]	; (d5078 <loop+0x25c>)
   d4ef2:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d4ef4:	792b      	ldrb	r3, [r5, #4]
   d4ef6:	2b00      	cmp	r3, #0
   d4ef8:	f000 825e 	beq.w	d53b8 <loop+0x59c>
   d4efc:	f001 f946 	bl	d618c <spark_cloud_flag_connected>
   d4f00:	2800      	cmp	r0, #0
   d4f02:	f000 8259 	beq.w	d53b8 <loop+0x59c>
        waitUntil(meterParticlePublish);
   d4f06:	f7ff fba5 	bl	d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>
   d4f0a:	4b5c      	ldr	r3, [pc, #368]	; (d507c <loop+0x260>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4f0c:	4a5c      	ldr	r2, [pc, #368]	; (d5080 <loop+0x264>)
   d4f0e:	781b      	ldrb	r3, [r3, #0]
   d4f10:	495c      	ldr	r1, [pc, #368]	; (d5084 <loop+0x268>)
   d4f12:	f88d 6000 	strb.w	r6, [sp]
   d4f16:	a808      	add	r0, sp, #32
   d4f18:	f7ff f920 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d4f1c:	a809      	add	r0, sp, #36	; 0x24
   d4f1e:	f7ff fbd1 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f22:	e249      	b.n	d53b8 <loop+0x59c>
      }
    }
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d4f24:	7c6b      	ldrb	r3, [r5, #17]
   d4f26:	2b00      	cmp	r3, #0
   d4f28:	d1cf      	bne.n	d4eca <loop+0xae>
    else state = REPORTING_STATE;
   d4f2a:	2305      	movs	r3, #5
   d4f2c:	7023      	strb	r3, [r4, #0]
   d4f2e:	e243      	b.n	d53b8 <loop+0x59c>
    break;

  case WATERING_STATE:                                                    // This state will examing soil values and decide on watering 
    if (wateringTimerFlag) {
   d4f30:	4d50      	ldr	r5, [pc, #320]	; (d5074 <loop+0x258>)
   d4f32:	782b      	ldrb	r3, [r5, #0]
   d4f34:	b163      	cbz	r3, d4f50 <loop+0x134>
      controlValve("Off");
   d4f36:	4954      	ldr	r1, [pc, #336]	; (d5088 <loop+0x26c>)
   d4f38:	a808      	add	r0, sp, #32
   d4f3a:	f002 fa0b 	bl	d7354 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f3e:	a808      	add	r0, sp, #32
   d4f40:	f7ff fed2 	bl	d4ce8 <_Z12controlValve6String>
   d4f44:	a808      	add	r0, sp, #32
   d4f46:	f002 f9be 	bl	d72c6 <_ZN6StringD1Ev>
      wateringTimerFlag = false;
   d4f4a:	2300      	movs	r3, #0
   d4f4c:	702b      	strb	r3, [r5, #0]
   d4f4e:	e7ec      	b.n	d4f2a <loop+0x10e>
    }
    else if (current.soilMoisture1 < 30.0 && !current.solenoidState) {  // Water if dry and if we are not already watering
   d4f50:	4d43      	ldr	r5, [pc, #268]	; (d5060 <loop+0x244>)
   d4f52:	6828      	ldr	r0, [r5, #0]
   d4f54:	f003 f9be 	bl	d82d4 <__aeabi_i2d>
   d4f58:	2200      	movs	r2, #0
   d4f5a:	4b4c      	ldr	r3, [pc, #304]	; (d508c <loop+0x270>)
   d4f5c:	f003 fc92 	bl	d8884 <__aeabi_dcmplt>
   d4f60:	2800      	cmp	r0, #0
   d4f62:	d0e2      	beq.n	d4f2a <loop+0x10e>
   d4f64:	68ed      	ldr	r5, [r5, #12]
   d4f66:	2d00      	cmp	r5, #0
   d4f68:	d1df      	bne.n	d4f2a <loop+0x10e>
      controlValve("On");
   d4f6a:	4949      	ldr	r1, [pc, #292]	; (d5090 <loop+0x274>)
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4f6c:	4e49      	ldr	r6, [pc, #292]	; (d5094 <loop+0x278>)
   d4f6e:	a808      	add	r0, sp, #32
   d4f70:	f002 f9f0 	bl	d7354 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f74:	a808      	add	r0, sp, #32
   d4f76:	f7ff feb7 	bl	d4ce8 <_Z12controlValve6String>
   d4f7a:	a808      	add	r0, sp, #32
   d4f7c:	f002 f9a3 	bl	d72c6 <_ZN6StringD1Ev>
   d4f80:	462a      	mov	r2, r5
   d4f82:	4629      	mov	r1, r5
   d4f84:	4630      	mov	r0, r6
   d4f86:	f7ff f94b 	bl	d4220 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4f8a:	68b0      	ldr	r0, [r6, #8]
   d4f8c:	2800      	cmp	r0, #0
   d4f8e:	d0cc      	beq.n	d4f2a <loop+0x10e>
   d4f90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4f94:	9300      	str	r3, [sp, #0]
   d4f96:	9501      	str	r5, [sp, #4]
   d4f98:	462b      	mov	r3, r5
   d4f9a:	462a      	mov	r2, r5
   d4f9c:	4629      	mov	r1, r5
   d4f9e:	f000 fe81 	bl	d5ca4 <os_timer_change>
   d4fa2:	e7c2      	b.n	d4f2a <loop+0x10e>
    }
    state = REPORTING_STATE;
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fa4:	4b2a      	ldr	r3, [pc, #168]	; (d5050 <loop+0x234>)
   d4fa6:	791b      	ldrb	r3, [r3, #4]
   d4fa8:	b12b      	cbz	r3, d4fb6 <loop+0x19a>
   d4faa:	4b2a      	ldr	r3, [pc, #168]	; (d5054 <loop+0x238>)
   d4fac:	781b      	ldrb	r3, [r3, #0]
   d4fae:	2b05      	cmp	r3, #5
   d4fb0:	d001      	beq.n	d4fb6 <loop+0x19a>
   d4fb2:	f7ff fef9 	bl	d4da8 <_Z22publishStateTransitionv>
   d4fb6:	f001 f8e9 	bl	d618c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4fba:	b168      	cbz	r0, d4fd8 <loop+0x1bc>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
   d4fbc:	f002 fbde 	bl	d777c <_ZN9TimeClass4hourEv>
   d4fc0:	280c      	cmp	r0, #12
   d4fc2:	d105      	bne.n	d4fd0 <loop+0x1b4>
   d4fc4:	f001 f8e2 	bl	d618c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4fc8:	b110      	cbz	r0, d4fd0 <loop+0x1b4>
            return false;
        }
        return spark_sync_time(NULL);
   d4fca:	2000      	movs	r0, #0
   d4fcc:	f001 f8fe 	bl	d61cc <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
   d4fd0:	f7ff fb8e 	bl	d46f0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d4fd4:	2306      	movs	r3, #6
   d4fd6:	e7a9      	b.n	d4f2c <loop+0x110>
    }
    else if (!connectToParticle()) state = ERROR_STATE;                   // In case we timed out on our 1st attempt to connect
   d4fd8:	f7ff fa8a 	bl	d44f0 <_Z17connectToParticlev>
   d4fdc:	2800      	cmp	r0, #0
   d4fde:	f040 81eb 	bne.w	d53b8 <loop+0x59c>
   d4fe2:	2301      	movs	r3, #1
   d4fe4:	e7a2      	b.n	d4f2c <loop+0x110>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fe6:	4b1a      	ldr	r3, [pc, #104]	; (d5050 <loop+0x234>)
   d4fe8:	791b      	ldrb	r3, [r3, #4]
   d4fea:	b12b      	cbz	r3, d4ff8 <loop+0x1dc>
   d4fec:	4b19      	ldr	r3, [pc, #100]	; (d5054 <loop+0x238>)
   d4fee:	781b      	ldrb	r3, [r3, #0]
   d4ff0:	2b06      	cmp	r3, #6
   d4ff2:	d001      	beq.n	d4ff8 <loop+0x1dc>
   d4ff4:	f7ff fed8 	bl	d4da8 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4ff8:	4b27      	ldr	r3, [pc, #156]	; (d5098 <loop+0x27c>)
   d4ffa:	781b      	ldrb	r3, [r3, #0]
   d4ffc:	b92b      	cbnz	r3, d500a <loop+0x1ee>
   d4ffe:	f000 fe99 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d5002:	4b18      	ldr	r3, [pc, #96]	; (d5064 <loop+0x248>)
   d5004:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d5006:	2302      	movs	r3, #2
   d5008:	e790      	b.n	d4f2c <loop+0x110>
   d500a:	f000 fe93 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d500e:	4b23      	ldr	r3, [pc, #140]	; (d509c <loop+0x280>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	1ac0      	subs	r0, r0, r3
   d5014:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5018:	4298      	cmp	r0, r3
   d501a:	f240 81cd 	bls.w	d53b8 <loop+0x59c>
   d501e:	f000 fe89 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5022:	4b15      	ldr	r3, [pc, #84]	; (d5078 <loop+0x25c>)
   d5024:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5026:	f001 f8b1 	bl	d618c <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d502a:	2800      	cmp	r0, #0
   d502c:	d0d9      	beq.n	d4fe2 <loop+0x1c6>
   d502e:	4b13      	ldr	r3, [pc, #76]	; (d507c <loop+0x260>)
   d5030:	491b      	ldr	r1, [pc, #108]	; (d50a0 <loop+0x284>)
   d5032:	781b      	ldrb	r3, [r3, #0]
   d5034:	2200      	movs	r2, #0
   d5036:	f88d 2000 	strb.w	r2, [sp]
   d503a:	a808      	add	r0, sp, #32
   d503c:	4a19      	ldr	r2, [pc, #100]	; (d50a4 <loop+0x288>)
   d503e:	f7ff f88d 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d5042:	a809      	add	r0, sp, #36	; 0x24
   d5044:	f7ff fb3e 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5048:	e7cb      	b.n	d4fe2 <loop+0x1c6>
   d504a:	bf00      	nop
   d504c:	2003e1f2 	.word	0x2003e1f2
   d5050:	2003e30c 	.word	0x2003e30c
   d5054:	2003e1e0 	.word	0x2003e1e0
   d5058:	2003e1f1 	.word	0x2003e1f1
   d505c:	2003e1f3 	.word	0x2003e1f3
   d5060:	2003e2c0 	.word	0x2003e2c0
   d5064:	2003e26c 	.word	0x2003e26c
   d5068:	00015f90 	.word	0x00015f90
   d506c:	2003e215 	.word	0x2003e215
   d5070:	2003e1c4 	.word	0x2003e1c4
   d5074:	2003e214 	.word	0x2003e214
   d5078:	2003e2b4 	.word	0x2003e2b4
   d507c:	2003e1cc 	.word	0x2003e1cc
   d5080:	000d9965 	.word	0x000d9965
   d5084:	000d98fb 	.word	0x000d98fb
   d5088:	000d988a 	.word	0x000d988a
   d508c:	403e0000 	.word	0x403e0000
   d5090:	000d9887 	.word	0x000d9887
   d5094:	2003e218 	.word	0x2003e218
   d5098:	2003e0f6 	.word	0x2003e0f6
   d509c:	2003e1c8 	.word	0x2003e1c8
   d50a0:	000d98d5 	.word	0x000d98d5
   d50a4:	000d9606 	.word	0x000d9606
      state = ERROR_STATE;                                            // Response timed out
    }
    break;

  case NAPPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50a8:	4ba2      	ldr	r3, [pc, #648]	; (d5334 <loop+0x518>)
   d50aa:	791a      	ldrb	r2, [r3, #4]
   d50ac:	461d      	mov	r5, r3
   d50ae:	b12a      	cbz	r2, d50bc <loop+0x2a0>
   d50b0:	4ba1      	ldr	r3, [pc, #644]	; (d5338 <loop+0x51c>)
   d50b2:	781b      	ldrb	r3, [r3, #0]
   d50b4:	2b07      	cmp	r3, #7
   d50b6:	d001      	beq.n	d50bc <loop+0x2a0>
   d50b8:	f7ff fe76 	bl	d4da8 <_Z22publishStateTransitionv>
   d50bc:	f001 f866 	bl	d618c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d50c0:	b1b0      	cbz	r0, d50f0 <loop+0x2d4>
      if (sysStatus.verboseMode) {
   d50c2:	792b      	ldrb	r3, [r5, #4]
   d50c4:	b173      	cbz	r3, d50e4 <loop+0x2c8>
        waitUntil(meterParticlePublish);
   d50c6:	f7ff fac5 	bl	d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>
   d50ca:	4b9c      	ldr	r3, [pc, #624]	; (d533c <loop+0x520>)
        Particle.publish("State","Taking a Nap",PRIVATE);
   d50cc:	499c      	ldr	r1, [pc, #624]	; (d5340 <loop+0x524>)
   d50ce:	781b      	ldrb	r3, [r3, #0]
   d50d0:	2200      	movs	r2, #0
   d50d2:	f88d 2000 	strb.w	r2, [sp]
   d50d6:	a808      	add	r0, sp, #32
   d50d8:	4a9a      	ldr	r2, [pc, #616]	; (d5344 <loop+0x528>)
   d50da:	f7ff f83f 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d50de:	a809      	add	r0, sp, #36	; 0x24
   d50e0:	f7ff faf0 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d50e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d50e8:	f001 f91c 	bl	d6324 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d50ec:	f7ff fa44 	bl	d4578 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d50f0:	2100      	movs	r1, #0
   d50f2:	2007      	movs	r0, #7
   d50f4:	f002 fd39 	bl	d7b6a <digitalWrite>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d50f8:	4d93      	ldr	r5, [pc, #588]	; (d5348 <loop+0x52c>)
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d50fa:	2100      	movs	r1, #0
   d50fc:	200e      	movs	r0, #14
   d50fe:	f002 fd34 	bl	d7b6a <digitalWrite>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5102:	f002 fb45 	bl	d7790 <_ZN9TimeClass6minuteEv>
   d5106:	7d2b      	ldrb	r3, [r5, #20]
   d5108:	4680      	mov	r8, r0
   d510a:	b343      	cbz	r3, d515e <loop+0x342>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d510c:	2101      	movs	r1, #1
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d510e:	4628      	mov	r0, r5
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5110:	7229      	strb	r1, [r5, #8]
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d5112:	f7ff f86b 	bl	d41ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d5116:	b158      	cbz	r0, d5130 <loop+0x314>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d5118:	8983      	ldrh	r3, [r0, #12]
   d511a:	2b04      	cmp	r3, #4
   d511c:	d105      	bne.n	d512a <loop+0x30e>
                    gpioWakeup->mode = mode;
   d511e:	2300      	movs	r3, #0
   d5120:	7383      	strb	r3, [r0, #14]
   d5122:	e01c      	b.n	d515e <loop+0x342>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d5124:	8883      	ldrh	r3, [r0, #4]
   d5126:	2b01      	cmp	r3, #1
   d5128:	d0f5      	beq.n	d5116 <loop+0x2fa>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d512a:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d512c:	2800      	cmp	r0, #0
   d512e:	d1f9      	bne.n	d5124 <loop+0x308>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d5130:	4986      	ldr	r1, [pc, #536]	; (d534c <loop+0x530>)
   d5132:	2010      	movs	r0, #16
   d5134:	f002 fe20 	bl	d7d78 <_ZnwjRKSt9nothrow_t>
   d5138:	4606      	mov	r6, r0
   d513a:	2800      	cmp	r0, #0
   d513c:	f000 8137 	beq.w	d53ae <loop+0x592>
   d5140:	2710      	movs	r7, #16
   d5142:	463a      	mov	r2, r7
   d5144:	2100      	movs	r1, #0
   d5146:	f003 fd2a 	bl	d8b9e <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d514a:	2302      	movs	r3, #2
   d514c:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d514e:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d5150:	8037      	strh	r7, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d5152:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d5154:	692b      	ldr	r3, [r5, #16]
   d5156:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   d5158:	2304      	movs	r3, #4
   d515a:	81b3      	strh	r3, [r6, #12]
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d515c:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d515e:	7d2b      	ldrb	r3, [r5, #20]
   d5160:	f8df 91e4 	ldr.w	r9, [pc, #484]	; d5348 <loop+0x52c>
   d5164:	b33b      	cbz	r3, d51b6 <loop+0x39a>
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5166:	f64e 2360 	movw	r3, #60000	; 0xea60
   d516a:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d516e:	2104      	movs	r1, #4
   d5170:	4648      	mov	r0, r9
   d5172:	fb08 f803 	mul.w	r8, r8, r3
   d5176:	f7ff f839 	bl	d41ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d517a:	4606      	mov	r6, r0
   d517c:	b110      	cbz	r0, d5184 <loop+0x368>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d517e:	f8c0 800c 	str.w	r8, [r0, #12]
   d5182:	e018      	b.n	d51b6 <loop+0x39a>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d5184:	4971      	ldr	r1, [pc, #452]	; (d534c <loop+0x530>)
   d5186:	2010      	movs	r0, #16
   d5188:	f002 fdf6 	bl	d7d78 <_ZnwjRKSt9nothrow_t>
   d518c:	4605      	mov	r5, r0
   d518e:	2800      	cmp	r0, #0
   d5190:	f000 810f 	beq.w	d53b2 <loop+0x596>
   d5194:	2710      	movs	r7, #16
   d5196:	463a      	mov	r2, r7
   d5198:	4631      	mov	r1, r6
   d519a:	f003 fd00 	bl	d8b9e <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d519e:	2302      	movs	r3, #2
   d51a0:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d51a2:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d51a4:	802f      	strh	r7, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d51a6:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d51a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d51ac:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d51ae:	f8c5 800c 	str.w	r8, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d51b2:	f8c9 5010 	str.w	r5, [r9, #16]
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d51b6:	4964      	ldr	r1, [pc, #400]	; (d5348 <loop+0x52c>)
   d51b8:	a805      	add	r0, sp, #20
   d51ba:	f002 f97f 	bl	d74bc <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d51be:	9b05      	ldr	r3, [sp, #20]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d51c0:	b17b      	cbz	r3, d51e2 <loop+0x3c6>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d51c2:	889a      	ldrh	r2, [r3, #4]
   d51c4:	2a01      	cmp	r2, #1
   d51c6:	d10c      	bne.n	d51e2 <loop+0x3c6>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d51c8:	899b      	ldrh	r3, [r3, #12]
   d51ca:	2b04      	cmp	r3, #4
   d51cc:	d109      	bne.n	d51e2 <loop+0x3c6>
   d51ce:	4960      	ldr	r1, [pc, #384]	; (d5350 <loop+0x534>)
   d51d0:	a808      	add	r0, sp, #32
   d51d2:	f002 f8bf 	bl	d7354 <_ZN6StringC1EPK19__FlashStringHelper>
   d51d6:	a808      	add	r0, sp, #32
   d51d8:	f7ff fd1c 	bl	d4c14 <_Z15setLowPowerMode6String>
   d51dc:	a808      	add	r0, sp, #32
   d51de:	f002 f872 	bl	d72c6 <_ZN6StringD1Ev>
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d51e2:	2101      	movs	r1, #1
   d51e4:	2007      	movs	r0, #7
   d51e6:	f002 fcc0 	bl	d7b6a <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d51ea:	2101      	movs	r1, #1
   d51ec:	200e      	movs	r0, #14
   d51ee:	f002 fcbc 	bl	d7b6a <digitalWrite>
    connectToParticle();                                                // Wakey Wakey and get connected.
   d51f2:	f7ff f97d 	bl	d44f0 <_Z17connectToParticlev>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d51f6:	9805      	ldr	r0, [sp, #20]
    state = IDLE_STATE;                                                 // Awake now, we need to go back to the IDLE state for next tasking
   d51f8:	2302      	movs	r3, #2
   d51fa:	7023      	strb	r3, [r4, #0]
   d51fc:	2800      	cmp	r0, #0
   d51fe:	f000 80db 	beq.w	d53b8 <loop+0x59c>
            free(wakeupSource_);
   d5202:	f001 f853 	bl	d62ac <free>
    } break;
   d5206:	e0d7      	b.n	d53b8 <loop+0x59c>

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5208:	4b4a      	ldr	r3, [pc, #296]	; (d5334 <loop+0x518>)
   d520a:	791a      	ldrb	r2, [r3, #4]
   d520c:	461d      	mov	r5, r3
   d520e:	b12a      	cbz	r2, d521c <loop+0x400>
   d5210:	4b49      	ldr	r3, [pc, #292]	; (d5338 <loop+0x51c>)
   d5212:	781b      	ldrb	r3, [r3, #0]
   d5214:	2b08      	cmp	r3, #8
   d5216:	d001      	beq.n	d521c <loop+0x400>
   d5218:	f7ff fdc6 	bl	d4da8 <_Z22publishStateTransitionv>
   d521c:	f000 ffb6 	bl	d618c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5220:	b1b0      	cbz	r0, d5250 <loop+0x434>
      if (sysStatus.verboseMode) {
   d5222:	792b      	ldrb	r3, [r5, #4]
   d5224:	b173      	cbz	r3, d5244 <loop+0x428>
        waitUntil(meterParticlePublish);
   d5226:	f7ff fa15 	bl	d4654 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.43>
   d522a:	4b44      	ldr	r3, [pc, #272]	; (d533c <loop+0x520>)
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d522c:	4944      	ldr	r1, [pc, #272]	; (d5340 <loop+0x524>)
   d522e:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5230:	2200      	movs	r2, #0
   d5232:	f88d 2000 	strb.w	r2, [sp]
   d5236:	a808      	add	r0, sp, #32
   d5238:	4a46      	ldr	r2, [pc, #280]	; (d5354 <loop+0x538>)
   d523a:	f7fe ff8f 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d523e:	a809      	add	r0, sp, #36	; 0x24
   d5240:	f7ff fa40 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d5244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5248:	f001 f86c 	bl	d6324 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d524c:	f7ff f994 	bl	d4578 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5250:	2100      	movs	r1, #0
   d5252:	2007      	movs	r0, #7
   d5254:	f002 fc89 	bl	d7b6a <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
   d5258:	f002 fa9a 	bl	d7790 <_ZN9TimeClass6minuteEv>
   d525c:	4b3e      	ldr	r3, [pc, #248]	; (d5358 <loop+0x53c>)
   d525e:	681a      	ldr	r2, [r3, #0]
   d5260:	2304      	movs	r3, #4
   d5262:	f8ad 3014 	strh.w	r3, [sp, #20]
   d5266:	ab0c      	add	r3, sp, #48	; 0x30
   d5268:	2502      	movs	r5, #2
   d526a:	f803 5d1d 	strb.w	r5, [r3, #-29]!
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d526e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d5272:	9202      	str	r2, [sp, #8]
   d5274:	223c      	movs	r2, #60	; 0x3c
   d5276:	4350      	muls	r0, r2
   d5278:	2201      	movs	r2, #1
   d527a:	9001      	str	r0, [sp, #4]
   d527c:	9200      	str	r2, [sp, #0]
   d527e:	a905      	add	r1, sp, #20
   d5280:	a808      	add	r0, sp, #32
   d5282:	f002 f9c1 	bl	d7608 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch,FALLING,secondsToHour);                     // Very deep sleep till the next hour - then resets
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d5286:	7025      	strb	r5, [r4, #0]
    } break;
   d5288:	e096      	b.n	d53b8 <loop+0x59c>

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d528a:	4b2a      	ldr	r3, [pc, #168]	; (d5334 <loop+0x518>)
   d528c:	791a      	ldrb	r2, [r3, #4]
   d528e:	461c      	mov	r4, r3
   d5290:	b12a      	cbz	r2, d529e <loop+0x482>
   d5292:	4b29      	ldr	r3, [pc, #164]	; (d5338 <loop+0x51c>)
   d5294:	781b      	ldrb	r3, [r3, #0]
   d5296:	2b01      	cmp	r3, #1
   d5298:	d001      	beq.n	d529e <loop+0x482>
   d529a:	f7ff fd85 	bl	d4da8 <_Z22publishStateTransitionv>
   d529e:	f000 fd49 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d52a2:	4b2e      	ldr	r3, [pc, #184]	; (d535c <loop+0x540>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d52aa:	3330      	adds	r3, #48	; 0x30
   d52ac:	4298      	cmp	r0, r3
   d52ae:	f240 8083 	bls.w	d53b8 <loop+0x59c>
    {
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d52b2:	69a3      	ldr	r3, [r4, #24]
   d52b4:	2b03      	cmp	r3, #3
   d52b6:	dc14      	bgt.n	d52e2 <loop+0x4c6>
   d52b8:	f000 ff68 	bl	d618c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d52bc:	b160      	cbz	r0, d52d8 <loop+0x4bc>
   d52be:	4b1f      	ldr	r3, [pc, #124]	; (d533c <loop+0x520>)
   d52c0:	491f      	ldr	r1, [pc, #124]	; (d5340 <loop+0x524>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d52c2:	781b      	ldrb	r3, [r3, #0]
   d52c4:	2200      	movs	r2, #0
   d52c6:	f88d 2000 	strb.w	r2, [sp]
   d52ca:	a808      	add	r0, sp, #32
   d52cc:	4a24      	ldr	r2, [pc, #144]	; (d5360 <loop+0x544>)
   d52ce:	f7fe ff45 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d52d2:	a809      	add	r0, sp, #36	; 0x24
   d52d4:	f7ff f9f6 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d52d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d52dc:	f001 f822 	bl	d6324 <delay>
   d52e0:	e024      	b.n	d532c <loop+0x510>
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d52e2:	f002 fa43 	bl	d776c <_ZN9TimeClass3nowEv>
   d52e6:	4b13      	ldr	r3, [pc, #76]	; (d5334 <loop+0x518>)
   d52e8:	69db      	ldr	r3, [r3, #28]
   d52ea:	1ac0      	subs	r0, r0, r3
   d52ec:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d52f0:	d93a      	bls.n	d5368 <loop+0x54c>
   d52f2:	f000 ff4b 	bl	d618c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d52f6:	b160      	cbz	r0, d5312 <loop+0x4f6>
   d52f8:	4b10      	ldr	r3, [pc, #64]	; (d533c <loop+0x520>)
   d52fa:	4911      	ldr	r1, [pc, #68]	; (d5340 <loop+0x524>)
   d52fc:	781b      	ldrb	r3, [r3, #0]
   d52fe:	2200      	movs	r2, #0
   d5300:	f88d 2000 	strb.w	r2, [sp]
   d5304:	a808      	add	r0, sp, #32
   d5306:	4a17      	ldr	r2, [pc, #92]	; (d5364 <loop+0x548>)
   d5308:	f7fe ff28 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d530c:	a809      	add	r0, sp, #36	; 0x24
   d530e:	f7ff f9d9 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5316:	f001 f805 	bl	d6324 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d531a:	2300      	movs	r3, #0
   d531c:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d531e:	f002 fc67 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
   d5322:	2220      	movs	r2, #32
   d5324:	4903      	ldr	r1, [pc, #12]	; (d5334 <loop+0x518>)
   d5326:	2001      	movs	r0, #1
   d5328:	f000 fd2c 	bl	d5d84 <HAL_EEPROM_Put>
        System.reset();
   d532c:	f002 f8c3 	bl	d74b6 <_ZN11SystemClass5resetEv>
   d5330:	e042      	b.n	d53b8 <loop+0x59c>
   d5332:	bf00      	nop
   d5334:	2003e30c 	.word	0x2003e30c
   d5338:	2003e1e0 	.word	0x2003e1e0
   d533c:	2003e1cc 	.word	0x2003e1cc
   d5340:	000d98fb 	.word	0x000d98fb
   d5344:	000d98ee 	.word	0x000d98ee
   d5348:	2003e234 	.word	0x2003e234
   d534c:	000d9e20 	.word	0x000d9e20
   d5350:	000d9752 	.word	0x000d9752
   d5354:	000d9901 	.word	0x000d9901
   d5358:	2003e24c 	.word	0x2003e24c
   d535c:	2003e2b4 	.word	0x2003e2b4
   d5360:	000d9918 	.word	0x000d9918
   d5364:	000d992c 	.word	0x000d992c
   d5368:	f000 ff10 	bl	d618c <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d536c:	b160      	cbz	r0, d5388 <loop+0x56c>
   d536e:	4b14      	ldr	r3, [pc, #80]	; (d53c0 <loop+0x5a4>)
   d5370:	4914      	ldr	r1, [pc, #80]	; (d53c4 <loop+0x5a8>)
   d5372:	781b      	ldrb	r3, [r3, #0]
   d5374:	2200      	movs	r2, #0
   d5376:	f88d 2000 	strb.w	r2, [sp]
   d537a:	a808      	add	r0, sp, #32
   d537c:	4a12      	ldr	r2, [pc, #72]	; (d53c8 <loop+0x5ac>)
   d537e:	f7fe feed 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d5382:	a809      	add	r0, sp, #36	; 0x24
   d5384:	f7ff f99e 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5388:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d538c:	f000 ffca 	bl	d6324 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d5390:	2300      	movs	r3, #0
   d5392:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5394:	f002 fc2c 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
   d5398:	2220      	movs	r2, #32
   d539a:	490c      	ldr	r1, [pc, #48]	; (d53cc <loop+0x5b0>)
   d539c:	2001      	movs	r0, #1
   d539e:	f000 fcf1 	bl	d5d84 <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d53a2:	f7ff f963 	bl	d466c <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d53a6:	e007      	b.n	d53b8 <loop+0x59c>
    } 
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d53a8:	2307      	movs	r3, #7
   d53aa:	7023      	strb	r3, [r4, #0]
   d53ac:	e579      	b.n	d4ea2 <loop+0x86>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d53ae:	7528      	strb	r0, [r5, #20]
   d53b0:	e6d5      	b.n	d515e <loop+0x342>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d53b2:	f889 0014 	strb.w	r0, [r9, #20]
   d53b6:	e6fe      	b.n	d51b6 <loop+0x39a>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d53b8:	b00d      	add	sp, #52	; 0x34
   d53ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d53be:	bf00      	nop
   d53c0:	2003e1cc 	.word	0x2003e1cc
   d53c4:	000d98fb 	.word	0x000d98fb
   d53c8:	000d9946 	.word	0x000d9946
   d53cc:	2003e30c 	.word	0x2003e30c

000d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53d0:	2300      	movs	r3, #0
   d53d2:	2204      	movs	r2, #4
   d53d4:	f000 beb2 	b.w	d613c <spark_variable>

000d53d8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>:
   d53d8:	2300      	movs	r3, #0
   d53da:	2202      	movs	r2, #2
   d53dc:	f000 beae 	b.w	d613c <spark_variable>

000d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d53e0:	4602      	mov	r2, r0
   d53e2:	4801      	ldr	r0, [pc, #4]	; (d53e8 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d53e4:	f001 b96c 	b.w	d66c0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d53e8:	000d6695 	.word	0x000d6695

000d53ec <setup>:

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d53ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d53ee:	4ba8      	ldr	r3, [pc, #672]	; (d5690 <setup+0x2a4>)

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d53f0:	b0bb      	sub	sp, #236	; 0xec
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d53f2:	aa0a      	add	r2, sp, #40	; 0x28
   d53f4:	f103 0510 	add.w	r5, r3, #16
   d53f8:	4616      	mov	r6, r2
   d53fa:	6818      	ldr	r0, [r3, #0]
   d53fc:	6859      	ldr	r1, [r3, #4]
   d53fe:	4614      	mov	r4, r2
   d5400:	c403      	stmia	r4!, {r0, r1}
   d5402:	3308      	adds	r3, #8
   d5404:	42ab      	cmp	r3, r5
   d5406:	4622      	mov	r2, r4
   d5408:	d1f7      	bne.n	d53fa <setup+0xe>
   d540a:	8819      	ldrh	r1, [r3, #0]
   d540c:	789b      	ldrb	r3, [r3, #2]
   d540e:	8021      	strh	r1, [r4, #0]
   d5410:	70a3      	strb	r3, [r4, #2]
   d5412:	222d      	movs	r2, #45	; 0x2d
   d5414:	2100      	movs	r1, #0
   d5416:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = IDLE_STATE;
   d541a:	4f9e      	ldr	r7, [pc, #632]	; (d5694 <setup+0x2a8>)
// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d541c:	f003 fbbf 	bl	d8b9e <memset>
  state = IDLE_STATE;
   d5420:	2302      	movs	r3, #2
   d5422:	703b      	strb	r3, [r7, #0]

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5424:	4b9c      	ldr	r3, [pc, #624]	; (d5698 <setup+0x2ac>)
   d5426:	681b      	ldr	r3, [r3, #0]
   d5428:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   d542c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d5430:	f003 031f 	and.w	r3, r3, #31
   d5434:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5438:	2d2f      	cmp	r5, #47	; 0x2f
   d543a:	dd05      	ble.n	d5448 <setup+0x5c>
   d543c:	4a97      	ldr	r2, [pc, #604]	; (d569c <setup+0x2b0>)
   d543e:	2100      	movs	r1, #0
   d5440:	200a      	movs	r0, #10
   d5442:	f000 fdef 	bl	d6024 <panic_>
   d5446:	e001      	b.n	d544c <setup+0x60>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d5448:	2d1f      	cmp	r5, #31
   d544a:	dd03      	ble.n	d5454 <setup+0x68>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d544c:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
   d5450:	4b93      	ldr	r3, [pc, #588]	; (d56a0 <setup+0x2b4>)
   d5452:	e001      	b.n	d5458 <setup+0x6c>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d5454:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d5458:	2401      	movs	r4, #1
   d545a:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d545e:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508

  pinSetFast(solEnablePin);                                       // Make sure the Solenoid is off
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d5462:	4621      	mov	r1, r4
   d5464:	2007      	movs	r0, #7
   d5466:	f002 fb6f 	bl	d7b48 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d546a:	2100      	movs	r1, #0
   d546c:	2004      	movs	r0, #4
   d546e:	f002 fb6b 	bl	d7b48 <pinMode>
  pinMode(soilPin1, INPUT);
   d5472:	2100      	movs	r1, #0
   d5474:	2013      	movs	r0, #19
   d5476:	f002 fb67 	bl	d7b48 <pinMode>
  pinMode(soilPin2, INPUT);
   d547a:	2100      	movs	r1, #0
   d547c:	2012      	movs	r0, #18
   d547e:	f002 fb63 	bl	d7b48 <pinMode>
  pinMode(pressurePin, INPUT);
   d5482:	2100      	movs	r1, #0
   d5484:	2011      	movs	r0, #17
   d5486:	f002 fb5f 	bl	d7b48 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d548a:	4621      	mov	r1, r4
   d548c:	200e      	movs	r0, #14
   d548e:	f002 fb5b 	bl	d7b48 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d5492:	4621      	mov	r1, r4
   d5494:	200e      	movs	r0, #14
   d5496:	f002 fb68 	bl	d7b6a <digitalWrite>
  pinMode(solEnablePin,OUTPUT);                                     
   d549a:	4621      	mov	r1, r4
   d549c:	2003      	movs	r0, #3
   d549e:	f002 fb53 	bl	d7b48 <pinMode>
  pinMode(solDirection,OUTPUT);                                      
   d54a2:	4621      	mov	r1, r4
   d54a4:	2002      	movs	r0, #2
   d54a6:	f002 fb4f 	bl	d7b48 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d54aa:	4621      	mov	r1, r4
   d54ac:	2003      	movs	r0, #3
   d54ae:	f002 fb5c 	bl	d7b6a <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d54b2:	2100      	movs	r1, #0
   d54b4:	2002      	movs	r0, #2
   d54b6:	f002 fb58 	bl	d7b6a <digitalWrite>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d54ba:	a802      	add	r0, sp, #8
   d54bc:	f000 fe6e 	bl	d619c <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d54c0:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d54c2:	2300      	movs	r3, #0
   d54c4:	227d      	movs	r2, #125	; 0x7d
   d54c6:	a91a      	add	r1, sp, #104	; 0x68
   d54c8:	a802      	add	r0, sp, #8
   d54ca:	f001 ff82 	bl	d73d2 <_ZNK6String8getBytesEPhjj>
   d54ce:	462b      	mov	r3, r5
   d54d0:	462a      	mov	r2, r5
   d54d2:	4974      	ldr	r1, [pc, #464]	; (d56a4 <setup+0x2b8>)
   d54d4:	9501      	str	r5, [sp, #4]
   d54d6:	9500      	str	r5, [sp, #0]
   d54d8:	a81a      	add	r0, sp, #104	; 0x68
   d54da:	f000 fe6f 	bl	d61bc <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d54de:	4972      	ldr	r1, [pc, #456]	; (d56a8 <setup+0x2bc>)
   d54e0:	4872      	ldr	r0, [pc, #456]	; (d56ac <setup+0x2c0>)
   d54e2:	f7ff ff75 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d54e6:	4972      	ldr	r1, [pc, #456]	; (d56b0 <setup+0x2c4>)
   d54e8:	4872      	ldr	r0, [pc, #456]	; (d56b4 <setup+0x2c8>)
   d54ea:	f7ff ff75 	bl	d53d8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",releaseNumber);
   d54ee:	4972      	ldr	r1, [pc, #456]	; (d56b8 <setup+0x2cc>)
   d54f0:	4872      	ldr	r0, [pc, #456]	; (d56bc <setup+0x2d0>)
   d54f2:	f7ff ff6d 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("StateOfChg", batteryString);
   d54f6:	4972      	ldr	r1, [pc, #456]	; (d56c0 <setup+0x2d4>)
   d54f8:	4872      	ldr	r0, [pc, #456]	; (d56c4 <setup+0x2d8>)
   d54fa:	f7ff ff69 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d54fe:	4972      	ldr	r1, [pc, #456]	; (d56c8 <setup+0x2dc>)
   d5500:	4872      	ldr	r0, [pc, #456]	; (d56cc <setup+0x2e0>)
   d5502:	f7ff ff65 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("LowPowerMode",lowPowerModeStr);
   d5506:	4972      	ldr	r1, [pc, #456]	; (d56d0 <setup+0x2e4>)
   d5508:	4872      	ldr	r0, [pc, #456]	; (d56d4 <setup+0x2e8>)
   d550a:	f7ff ff61 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Temperature", temperatureString);
   d550e:	4972      	ldr	r1, [pc, #456]	; (d56d8 <setup+0x2ec>)
   d5510:	4872      	ldr	r0, [pc, #456]	; (d56dc <setup+0x2f0>)
   d5512:	f7ff ff5d 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Humidity", humidityString);
   d5516:	4972      	ldr	r1, [pc, #456]	; (d56e0 <setup+0x2f4>)
   d5518:	4872      	ldr	r0, [pc, #456]	; (d56e4 <setup+0x2f8>)
   d551a:	f7ff ff59 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Luminosity",lightLevelString);
   d551e:	4972      	ldr	r1, [pc, #456]	; (d56e8 <setup+0x2fc>)
   d5520:	4872      	ldr	r0, [pc, #456]	; (d56ec <setup+0x300>)
   d5522:	f7ff ff55 	bl	d53d0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture1", current.soilMoisture1);
   d5526:	4972      	ldr	r1, [pc, #456]	; (d56f0 <setup+0x304>)
   d5528:	4872      	ldr	r0, [pc, #456]	; (d56f4 <setup+0x308>)
   d552a:	f7ff ff55 	bl	d53d8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture2", current.soilMoisture2);
   d552e:	4972      	ldr	r1, [pc, #456]	; (d56f8 <setup+0x30c>)
   d5530:	4872      	ldr	r0, [pc, #456]	; (d56fc <setup+0x310>)
   d5532:	f7ff ff51 	bl	d53d8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Pressure", current.pressure);
   d5536:	4972      	ldr	r1, [pc, #456]	; (d5700 <setup+0x314>)
   d5538:	4872      	ldr	r0, [pc, #456]	; (d5704 <setup+0x318>)
   d553a:	f7ff ff4d 	bl	d53d8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>

  Particle.function("Measure-Now",measureNow);
   d553e:	4972      	ldr	r1, [pc, #456]	; (d5708 <setup+0x31c>)
   d5540:	4872      	ldr	r0, [pc, #456]	; (d570c <setup+0x320>)
   d5542:	f7ff ff4d 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d5546:	4972      	ldr	r1, [pc, #456]	; (d5710 <setup+0x324>)
   d5548:	4862      	ldr	r0, [pc, #392]	; (d56d4 <setup+0x2e8>)
   d554a:	f7ff ff49 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d554e:	4971      	ldr	r1, [pc, #452]	; (d5714 <setup+0x328>)
   d5550:	4871      	ldr	r0, [pc, #452]	; (d5718 <setup+0x32c>)
   d5552:	f7ff ff45 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d5556:	4971      	ldr	r1, [pc, #452]	; (d571c <setup+0x330>)
   d5558:	4871      	ldr	r0, [pc, #452]	; (d5720 <setup+0x334>)
   d555a:	f7ff ff41 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Watering",controlValve);
   d555e:	4971      	ldr	r1, [pc, #452]	; (d5724 <setup+0x338>)
   d5560:	4871      	ldr	r0, [pc, #452]	; (d5728 <setup+0x33c>)
   d5562:	f7ff ff3d 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSoilSensors",setSoilSensors);
   d5566:	4971      	ldr	r1, [pc, #452]	; (d572c <setup+0x340>)
   d5568:	4871      	ldr	r0, [pc, #452]	; (d5730 <setup+0x344>)
   d556a:	f7ff ff39 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPressureSensor", setPressureSensor);
   d556e:	4971      	ldr	r1, [pc, #452]	; (d5734 <setup+0x348>)
   d5570:	4871      	ldr	r0, [pc, #452]	; (d5738 <setup+0x34c>)
   d5572:	f7ff ff35 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetLightSensor",setLightSensor);
   d5576:	4971      	ldr	r1, [pc, #452]	; (d573c <setup+0x350>)
   d5578:	4871      	ldr	r0, [pc, #452]	; (d5740 <setup+0x354>)
   d557a:	f7ff ff31 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SolenoidPresent",setSolenoidPresent);
   d557e:	4971      	ldr	r1, [pc, #452]	; (d5744 <setup+0x358>)
   d5580:	4871      	ldr	r0, [pc, #452]	; (d5748 <setup+0x35c>)
   d5582:	f7ff ff2d 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTempHumidSensor",setTempHumidSensor);
   d5586:	4971      	ldr	r1, [pc, #452]	; (d574c <setup+0x360>)
   d5588:	4871      	ldr	r0, [pc, #452]	; (d5750 <setup+0x364>)
   d558a:	f7ff ff29 	bl	d53e0 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d558e:	f002 fb2f 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d5592:	4628      	mov	r0, r5
   d5594:	f000 fbe6 	bl	d5d64 <HAL_EEPROM_Read>
   d5598:	2802      	cmp	r0, #2
   d559a:	d115      	bne.n	d55c8 <setup+0x1dc>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d559c:	4c6d      	ldr	r4, [pc, #436]	; (d5754 <setup+0x368>)
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d559e:	f002 fb27 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
   d55a2:	2220      	movs	r2, #32
   d55a4:	4621      	mov	r1, r4
   d55a6:	2001      	movs	r0, #1
   d55a8:	f000 fbe4 	bl	d5d74 <HAL_EEPROM_Get>
  EEPROM.get(MEM_MAP::currentStatusAddr,current);
   d55ac:	f002 fb20 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
   d55b0:	2224      	movs	r2, #36	; 0x24
   d55b2:	494f      	ldr	r1, [pc, #316]	; (d56f0 <setup+0x304>)
   d55b4:	2050      	movs	r0, #80	; 0x50
   d55b6:	f000 fbdd 	bl	d5d74 <HAL_EEPROM_Get>

  if (sysStatus.TempHumidConfig) {                                         // If there is a sensor present - initialize it   
   d55ba:	7b23      	ldrb	r3, [r4, #12]
   d55bc:	b1bb      	cbz	r3, d55ee <setup+0x202>
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d55be:	2144      	movs	r1, #68	; 0x44
   d55c0:	4865      	ldr	r0, [pc, #404]	; (d5758 <setup+0x36c>)
   d55c2:	f000 fa6b 	bl	d5a9c <_ZN14Adafruit_SHT315beginEh>
   d55c6:	e012      	b.n	d55ee <setup+0x202>
  Particle.function("SetLightSensor",setLightSensor);
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d55c8:	f002 fb12 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d55cc:	2204      	movs	r2, #4
   d55ce:	4963      	ldr	r1, [pc, #396]	; (d575c <setup+0x370>)
   d55d0:	4628      	mov	r0, r5
   d55d2:	f000 fbd7 	bl	d5d84 <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d55d6:	f002 fb0b 	bl	d7bf0 <_Z21__fetch_global_EEPROMv>
   d55da:	4620      	mov	r0, r4
   d55dc:	2204      	movs	r2, #4
   d55de:	a906      	add	r1, sp, #24
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d55e0:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d55e2:	9506      	str	r5, [sp, #24]
   d55e4:	f000 fbce 	bl	d5d84 <HAL_EEPROM_Put>
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d55e8:	2cf0      	cmp	r4, #240	; 0xf0
   d55ea:	d1f4      	bne.n	d55d6 <setup+0x1ea>
   d55ec:	e7d6      	b.n	d559c <setup+0x1b0>

  if (sysStatus.TempHumidConfig) {                                         // If there is a sensor present - initialize it   
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
  }

  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d55ee:	7c23      	ldrb	r3, [r4, #16]
   d55f0:	b133      	cbz	r3, d5600 <setup+0x214>
    lightSensor.begin();
   d55f2:	485b      	ldr	r0, [pc, #364]	; (d5760 <setup+0x374>)
   d55f4:	f000 f9c1 	bl	d597a <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d55f8:	2120      	movs	r1, #32
   d55fa:	4859      	ldr	r0, [pc, #356]	; (d5760 <setup+0x374>)
   d55fc:	f000 f9f9 	bl	d59f2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5600:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5602:	4611      	mov	r1, r2
   d5604:	a806      	add	r0, sp, #24
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5606:	9206      	str	r2, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5608:	f000 fb7c 	bl	d5d04 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d560c:	9b06      	ldr	r3, [sp, #24]
  }

  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d560e:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d5610:	bf02      	ittt	eq
   d5612:	69a3      	ldreq	r3, [r4, #24]
   d5614:	3301      	addeq	r3, #1
   d5616:	61a3      	streq	r3, [r4, #24]
  }
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d5618:	69a3      	ldr	r3, [r4, #24]
   d561a:	2b05      	cmp	r3, #5
   d561c:	dd04      	ble.n	d5628 <setup+0x23c>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d561e:	4b4d      	ldr	r3, [pc, #308]	; (d5754 <setup+0x368>)
   d5620:	2204      	movs	r2, #4
   d5622:	619a      	str	r2, [r3, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d5624:	f7ff f822 	bl	d466c <_Z14fullModemResetv>
  }

  (sysStatus.lowPowerMode) ? strcpy(lowPowerModeStr,"true") : strcpy(lowPowerModeStr,"false");
   d5628:	79a3      	ldrb	r3, [r4, #6]
   d562a:	b10b      	cbz	r3, d5630 <setup+0x244>
   d562c:	494d      	ldr	r1, [pc, #308]	; (d5764 <setup+0x378>)
   d562e:	e000      	b.n	d5632 <setup+0x246>
   d5630:	494d      	ldr	r1, [pc, #308]	; (d5768 <setup+0x37c>)
   d5632:	4827      	ldr	r0, [pc, #156]	; (d56d0 <setup+0x2e4>)
   d5634:	f003 faee 	bl	d8c14 <strcpy>
    
  sysStatus.solenoidHoldTime = 5;                                      // Set a reasonable value - based on testing 8mSec
   d5638:	2305      	movs	r3, #5
   d563a:	6163      	str	r3, [r4, #20]
  
  if (sysStatus.solenoidConfig && current.solenoidState) controlValve("Off");   // Can start watering until we get to the main loop
   d563c:	7c63      	ldrb	r3, [r4, #17]
   d563e:	b163      	cbz	r3, d565a <setup+0x26e>
   d5640:	4b2b      	ldr	r3, [pc, #172]	; (d56f0 <setup+0x304>)
   d5642:	68db      	ldr	r3, [r3, #12]
   d5644:	b14b      	cbz	r3, d565a <setup+0x26e>
   d5646:	4949      	ldr	r1, [pc, #292]	; (d576c <setup+0x380>)
   d5648:	a806      	add	r0, sp, #24
   d564a:	f001 fe83 	bl	d7354 <_ZN6StringC1EPK19__FlashStringHelper>
   d564e:	a806      	add	r0, sp, #24
   d5650:	f7ff fb4a 	bl	d4ce8 <_Z12controlValve6String>
   d5654:	a806      	add	r0, sp, #24
   d5656:	f001 fe36 	bl	d72c6 <_ZN6StringD1Ev>
  
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d565a:	f7fe ffb9 	bl	d45d0 <_Z9PMICresetv>

  if (!digitalRead(userSwitch)) setLowPowerMode("0");                   // Rescue mode to take out of low power mode and connect
   d565e:	2004      	movs	r0, #4
   d5660:	f002 fa9c 	bl	d7b9c <digitalRead>
   d5664:	b948      	cbnz	r0, d567a <setup+0x28e>
   d5666:	4942      	ldr	r1, [pc, #264]	; (d5770 <setup+0x384>)
   d5668:	a806      	add	r0, sp, #24
   d566a:	f001 fe73 	bl	d7354 <_ZN6StringC1EPK19__FlashStringHelper>
   d566e:	a806      	add	r0, sp, #24
   d5670:	f7ff fad0 	bl	d4c14 <_Z15setLowPowerMode6String>
   d5674:	a806      	add	r0, sp, #24
   d5676:	f001 fe26 	bl	d72c6 <_ZN6StringD1Ev>

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d567a:	f7fe fe6f 	bl	d435c <_Z16takeMeasurementsv>

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d567e:	4b3d      	ldr	r3, [pc, #244]	; (d5774 <setup+0x388>)
   d5680:	68a2      	ldr	r2, [r4, #8]
   d5682:	681b      	ldr	r3, [r3, #0]
   d5684:	429a      	cmp	r2, r3
   d5686:	dc77      	bgt.n	d5778 <setup+0x38c>
   d5688:	2308      	movs	r3, #8
   d568a:	703b      	strb	r3, [r7, #0]
   d568c:	e081      	b.n	d5792 <setup+0x3a6>
   d568e:	bf00      	nop
   d5690:	000d957c 	.word	0x000d957c
   d5694:	2003e1f2 	.word	0x2003e1f2
   d5698:	2003e25c 	.word	0x2003e25c
   d569c:	000d5d25 	.word	0x000d5d25
   d56a0:	50000300 	.word	0x50000300
   d56a4:	000d47ad 	.word	0x000d47ad
   d56a8:	2003e270 	.word	0x2003e270
   d56ac:	000d997f 	.word	0x000d997f
   d56b0:	2003e324 	.word	0x2003e324
   d56b4:	000d9986 	.word	0x000d9986
   d56b8:	000d9b1a 	.word	0x000d9b1a
   d56bc:	000d9991 	.word	0x000d9991
   d56c0:	2003e2f4 	.word	0x2003e2f4
   d56c4:	000d9999 	.word	0x000d9999
   d56c8:	2003e1e1 	.word	0x2003e1e1
   d56cc:	000d99a4 	.word	0x000d99a4
   d56d0:	2003e2b8 	.word	0x2003e2b8
   d56d4:	000d99b3 	.word	0x000d99b3
   d56d8:	2003e1b4 	.word	0x2003e1b4
   d56dc:	000d99c0 	.word	0x000d99c0
   d56e0:	2003e2e4 	.word	0x2003e2e4
   d56e4:	000d99cc 	.word	0x000d99cc
   d56e8:	2003e2fc 	.word	0x2003e2fc
   d56ec:	000d99d5 	.word	0x000d99d5
   d56f0:	2003e2c0 	.word	0x2003e2c0
   d56f4:	000d99e0 	.word	0x000d99e0
   d56f8:	2003e2c4 	.word	0x2003e2c4
   d56fc:	000d99ee 	.word	0x000d99ee
   d5700:	2003e2c8 	.word	0x2003e2c8
   d5704:	000d99fc 	.word	0x000d99fc
   d5708:	000d40f9 	.word	0x000d40f9
   d570c:	000d9a05 	.word	0x000d9a05
   d5710:	000d4c15 	.word	0x000d4c15
   d5714:	000d4849 	.word	0x000d4849
   d5718:	000d9a11 	.word	0x000d9a11
   d571c:	000d4b99 	.word	0x000d4b99
   d5720:	000d9a1c 	.word	0x000d9a1c
   d5724:	000d4ce9 	.word	0x000d4ce9
   d5728:	000d989d 	.word	0x000d989d
   d572c:	000d48cd 	.word	0x000d48cd
   d5730:	000d9a29 	.word	0x000d9a29
   d5734:	000d4971 	.word	0x000d4971
   d5738:	000d9a38 	.word	0x000d9a38
   d573c:	000d49ed 	.word	0x000d49ed
   d5740:	000d9a4a 	.word	0x000d9a4a
   d5744:	000d4b01 	.word	0x000d4b01
   d5748:	000d9a59 	.word	0x000d9a59
   d574c:	000d4a79 	.word	0x000d4a79
   d5750:	000d9a69 	.word	0x000d9a69
   d5754:	2003e30c 	.word	0x2003e30c
   d5758:	2003e260 	.word	0x2003e260
   d575c:	000d95bc 	.word	0x000d95bc
   d5760:	2003e1d0 	.word	0x2003e1d0
   d5764:	000d9a7c 	.word	0x000d9a7c
   d5768:	000d9a81 	.word	0x000d9a81
   d576c:	000d988a 	.word	0x000d988a
   d5770:	000d9752 	.word	0x000d9752
   d5774:	2003e1c4 	.word	0x2003e1c4
  else if(!connectToParticle()) {
   d5778:	f7fe feba 	bl	d44f0 <_Z17connectToParticlev>
   d577c:	b948      	cbnz	r0, d5792 <setup+0x3a6>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d577e:	2301      	movs	r3, #1
   d5780:	703b      	strb	r3, [r7, #0]
   d5782:	f000 fad7 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5786:	4b13      	ldr	r3, [pc, #76]	; (d57d4 <setup+0x3e8>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5788:	4913      	ldr	r1, [pc, #76]	; (d57d8 <setup+0x3ec>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d578a:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d578c:	4630      	mov	r0, r6
   d578e:	f003 fa41 	bl	d8c14 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5792:	f000 fcfb 	bl	d618c <spark_cloud_flag_connected>
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5796:	b108      	cbz	r0, d579c <setup+0x3b0>
   d5798:	7923      	ldrb	r3, [r4, #4]
   d579a:	b963      	cbnz	r3, d57b6 <setup+0x3ca>
  Serial.println(StartupMessage);
   d579c:	f002 f8ec 	bl	d7978 <_Z16_fetch_usbserialv>
   d57a0:	4631      	mov	r1, r6
   d57a2:	f001 fd38 	bl	d7216 <_ZN5Print7printlnEPKc>

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d57a6:	4b0d      	ldr	r3, [pc, #52]	; (d57dc <setup+0x3f0>)
   d57a8:	2201      	movs	r2, #1
  pinMode(solDirection,OUTPUT);                                      
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d57aa:	a802      	add	r0, sp, #8
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d57ac:	701a      	strb	r2, [r3, #0]
  pinMode(solDirection,OUTPUT);                                      
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d57ae:	f001 fd8a 	bl	d72c6 <_ZN6StringD1Ev>

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
}
   d57b2:	b03b      	add	sp, #236	; 0xec
   d57b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57b6:	4b0a      	ldr	r3, [pc, #40]	; (d57e0 <setup+0x3f4>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d57b8:	490a      	ldr	r1, [pc, #40]	; (d57e4 <setup+0x3f8>)
   d57ba:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d57bc:	2200      	movs	r2, #0
   d57be:	f88d 2000 	strb.w	r2, [sp]
   d57c2:	a806      	add	r0, sp, #24
   d57c4:	4632      	mov	r2, r6
   d57c6:	f7fe fcc9 	bl	d415c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.63.constprop.87>
   d57ca:	a807      	add	r0, sp, #28
   d57cc:	f7fe ff7a 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57d0:	e7e4      	b.n	d579c <setup+0x3b0>
   d57d2:	bf00      	nop
   d57d4:	2003e2b4 	.word	0x2003e2b4
   d57d8:	000d9a87 	.word	0x000d9a87
   d57dc:	2003e1f1 	.word	0x2003e1f1
   d57e0:	2003e1cc 	.word	0x2003e1cc
   d57e4:	000d9a99 	.word	0x000d9a99

000d57e8 <_GLOBAL__sub_I___appProductID>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d57e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d57ec:	4b49      	ldr	r3, [pc, #292]	; (d5914 <_GLOBAL__sub_I___appProductID+0x12c>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d57ee:	4d4a      	ldr	r5, [pc, #296]	; (d5918 <_GLOBAL__sub_I___appProductID+0x130>)
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d57f0:	f8df 8170 	ldr.w	r8, [pc, #368]	; d5964 <_GLOBAL__sub_I___appProductID+0x17c>
   d57f4:	2400      	movs	r4, #0
   d57f6:	601c      	str	r4, [r3, #0]
   d57f8:	4b48      	ldr	r3, [pc, #288]	; (d591c <_GLOBAL__sub_I___appProductID+0x134>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d57fa:	b088      	sub	sp, #32
   d57fc:	2701      	movs	r7, #1
   d57fe:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5800:	f000 fad8 	bl	d5db4 <HAL_Pin_Map>
   d5804:	4b46      	ldr	r3, [pc, #280]	; (d5920 <_GLOBAL__sub_I___appProductID+0x138>)
   d5806:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5808:	f002 f964 	bl	d7ad4 <spark_protocol_instance>
   d580c:	4623      	mov	r3, r4
   d580e:	4622      	mov	r2, r4
   d5810:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5814:	f002 f966 	bl	d7ae4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5818:	f002 f95c 	bl	d7ad4 <spark_protocol_instance>
   d581c:	4622      	mov	r2, r4
   d581e:	4623      	mov	r3, r4
   d5820:	2115      	movs	r1, #21
   d5822:	f002 f967 	bl	d7af4 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5826:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d582a:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d582c:	602c      	str	r4, [r5, #0]
   d582e:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5830:	71ac      	strb	r4, [r5, #6]
   d5832:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5834:	2002      	movs	r0, #2
   d5836:	f000 fc17 	bl	d6068 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d583a:	4642      	mov	r2, r8
   d583c:	4939      	ldr	r1, [pc, #228]	; (d5924 <_GLOBAL__sub_I___appProductID+0x13c>)
   d583e:	4628      	mov	r0, r5
   d5840:	f002 fa8a 	bl	d7d58 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5844:	4d38      	ldr	r5, [pc, #224]	; (d5928 <_GLOBAL__sub_I___appProductID+0x140>)
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5846:	4621      	mov	r1, r4
   d5848:	4638      	mov	r0, r7
   d584a:	f000 fc25 	bl	d6098 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d584e:	4639      	mov	r1, r7
   d5850:	2004      	movs	r0, #4
   d5852:	f000 fa47 	bl	d5ce4 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5856:	4621      	mov	r1, r4
   d5858:	4628      	mov	r0, r5
   d585a:	f001 fa1d 	bl	d6c98 <_ZN9FuelGaugeC1Eb>
   d585e:	4628      	mov	r0, r5

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d5860:	4d32      	ldr	r5, [pc, #200]	; (d592c <_GLOBAL__sub_I___appProductID+0x144>)
   d5862:	4933      	ldr	r1, [pc, #204]	; (d5930 <_GLOBAL__sub_I___appProductID+0x148>)
   d5864:	4642      	mov	r2, r8
   d5866:	2620      	movs	r6, #32
   d5868:	f002 fa76 	bl	d7d58 <__aeabi_atexit>
   d586c:	4632      	mov	r2, r6
   d586e:	4621      	mov	r1, r4
   d5870:	4628      	mov	r0, r5
   d5872:	f003 f994 	bl	d8b9e <memset>
        conf_.size = sizeof(conf_);
   d5876:	716e      	strb	r6, [r5, #5]
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5878:	4d2e      	ldr	r5, [pc, #184]	; (d5934 <_GLOBAL__sub_I___appProductID+0x14c>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d587a:	2610      	movs	r6, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d587c:	1d28      	adds	r0, r5, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d587e:	4632      	mov	r2, r6
   d5880:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5882:	6028      	str	r0, [r5, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5884:	f003 f98b 	bl	d8b9e <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5888:	2302      	movs	r3, #2
SystemPowerConfiguration conf;                      // Initalize the PMIC class so you can call the Power Management functions below.
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API 
   d588a:	4642      	mov	r2, r8
   d588c:	492a      	ldr	r1, [pc, #168]	; (d5938 <_GLOBAL__sub_I___appProductID+0x150>)
   d588e:	80eb      	strh	r3, [r5, #6]
   d5890:	4628      	mov	r0, r5
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5892:	752f      	strb	r7, [r5, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5894:	80ae      	strh	r6, [r5, #4]
   d5896:	f002 fa5f 	bl	d7d58 <__aeabi_atexit>
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();            // Temp and Humidity Sensor - Grove connected on i2c
   d589a:	4828      	ldr	r0, [pc, #160]	; (d593c <_GLOBAL__sub_I___appProductID+0x154>)
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d589c:	4d28      	ldr	r5, [pc, #160]	; (d5940 <_GLOBAL__sub_I___appProductID+0x158>)
   d589e:	f000 f8da 	bl	d5a56 <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                          // Light sensor measures light level in Lux    
   d58a2:	f002 f9ed 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d58a6:	2123      	movs	r1, #35	; 0x23
   d58a8:	4602      	mov	r2, r0
   d58aa:	4826      	ldr	r0, [pc, #152]	; (d5944 <_GLOBAL__sub_I___appProductID+0x15c>)
   d58ac:	f000 f860 	bl	d5970 <_ZN6BH1750C1EhR7TwoWire>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d58b0:	4b25      	ldr	r3, [pc, #148]	; (d5948 <_GLOBAL__sub_I___appProductID+0x160>)
   d58b2:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58b4:	446e      	add	r6, sp
   d58b6:	e896 0003 	ldmia.w	r6, {r0, r1}
   d58ba:	4b24      	ldr	r3, [pc, #144]	; (d594c <_GLOBAL__sub_I___appProductID+0x164>)
   d58bc:	602b      	str	r3, [r5, #0]
   d58be:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d58c0:	f105 030c 	add.w	r3, r5, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58c4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d58c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d58cc:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d58d0:	e892 0003 	ldmia.w	r2, {r0, r1}
   d58d4:	e883 0003 	stmia.w	r3, {r0, r1}
   d58d8:	4b1d      	ldr	r3, [pc, #116]	; (d5950 <_GLOBAL__sub_I___appProductID+0x168>)
   d58da:	616b      	str	r3, [r5, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d58dc:	69ab      	ldr	r3, [r5, #24]
   d58de:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d58e0:	4b1c      	ldr	r3, [pc, #112]	; (d5954 <_GLOBAL__sub_I___appProductID+0x16c>)
   d58e2:	61ab      	str	r3, [r5, #24]
   d58e4:	712c      	strb	r4, [r5, #4]
   d58e6:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d58e8:	462b      	mov	r3, r5
   d58ea:	4a1b      	ldr	r2, [pc, #108]	; (d5958 <_GLOBAL__sub_I___appProductID+0x170>)
   d58ec:	491b      	ldr	r1, [pc, #108]	; (d595c <_GLOBAL__sub_I___appProductID+0x174>)
   d58ee:	9401      	str	r4, [sp, #4]
   d58f0:	9700      	str	r7, [sp, #0]
   d58f2:	f105 0008 	add.w	r0, r5, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d58f6:	9406      	str	r4, [sp, #24]
   d58f8:	f000 f9bc 	bl	d5c74 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58fc:	4630      	mov	r0, r6
   d58fe:	f7fe fc42 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer timer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d5902:	4642      	mov	r2, r8
   d5904:	4916      	ldr	r1, [pc, #88]	; (d5960 <_GLOBAL__sub_I___appProductID+0x178>)
   d5906:	4628      	mov	r0, r5
   d5908:	f002 fa26 	bl	d7d58 <__aeabi_atexit>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d590c:	b008      	add	sp, #32
   d590e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5912:	bf00      	nop
   d5914:	2003e24c 	.word	0x2003e24c
   d5918:	2003e250 	.word	0x2003e250
   d591c:	2003e1cc 	.word	0x2003e1cc
   d5920:	2003e25c 	.word	0x2003e25c
   d5924:	000d4177 	.word	0x000d4177
   d5928:	2003e1d8 	.word	0x2003e1d8
   d592c:	2003e1f4 	.word	0x2003e1f4
   d5930:	000d6cb7 	.word	0x000d6cb7
   d5934:	2003e234 	.word	0x2003e234
   d5938:	000d40e1 	.word	0x000d40e1
   d593c:	2003e260 	.word	0x2003e260
   d5940:	2003e218 	.word	0x2003e218
   d5944:	2003e1d0 	.word	0x2003e1d0
   d5948:	000d40b9 	.word	0x000d40b9
   d594c:	000d952c 	.word	0x000d952c
   d5950:	000d40c9 	.word	0x000d40c9
   d5954:	000d40c5 	.word	0x000d40c5
   d5958:	000d4121 	.word	0x000d4121
   d595c:	00124f80 	.word	0x00124f80
   d5960:	000d4241 	.word	0x000d4241
   d5964:	2003e1b0 	.word	0x2003e1b0

000d5968 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5968:	6803      	ldr	r3, [r0, #0]
   d596a:	b2c9      	uxtb	r1, r1
   d596c:	689b      	ldr	r3, [r3, #8]
   d596e:	4718      	bx	r3

000d5970 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5970:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d5972:	2211      	movs	r2, #17
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5974:	7041      	strb	r1, [r0, #1]
{
  m_mode = continuous_high_res2;
   d5976:	7002      	strb	r2, [r0, #0]
}
   d5978:	4770      	bx	lr

000d597a <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d597a:	b510      	push	{r4, lr}
   d597c:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d597e:	6840      	ldr	r0, [r0, #4]
   d5980:	f001 fa22 	bl	d6dc8 <_ZN7TwoWire9isEnabledEv>
   d5984:	b910      	cbnz	r0, d598c <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d5986:	6860      	ldr	r0, [r4, #4]
   d5988:	f001 f9dc 	bl	d6d44 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d598c:	2001      	movs	r0, #1
   d598e:	bd10      	pop	{r4, pc}

000d5990 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d5990:	b570      	push	{r4, r5, r6, lr}
   d5992:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d5994:	7841      	ldrb	r1, [r0, #1]
   d5996:	6840      	ldr	r0, [r0, #4]
   d5998:	f001 fa0b 	bl	d6db2 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d599c:	2202      	movs	r2, #2
   d599e:	7869      	ldrb	r1, [r5, #1]
   d59a0:	6868      	ldr	r0, [r5, #4]
   d59a2:	f001 fa03 	bl	d6dac <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d59a6:	6868      	ldr	r0, [r5, #4]
   d59a8:	6803      	ldr	r3, [r0, #0]
   d59aa:	695b      	ldr	r3, [r3, #20]
   d59ac:	4798      	blx	r3
   d59ae:	4606      	mov	r6, r0
   d59b0:	6868      	ldr	r0, [r5, #4]
   d59b2:	6803      	ldr	r3, [r0, #0]
   d59b4:	695b      	ldr	r3, [r3, #20]
   d59b6:	4798      	blx	r3
   d59b8:	4604      	mov	r4, r0
  m_i2c.endTransmission();

  return (float)level / 1.2f; // convert to lux
   d59ba:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d59be:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   d59c0:	b2a4      	uxth	r4, r4
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d59c2:	f001 f9fe 	bl	d6dc2 <_ZN7TwoWire15endTransmissionEv>

  return (float)level / 1.2f; // convert to lux
   d59c6:	ee07 4a90 	vmov	s15, r4
   d59ca:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d59ce:	eddf 7a02 	vldr	s15, [pc, #8]	; d59d8 <_ZN6BH175015get_light_levelEv+0x48>
   d59d2:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d59d6:	bd70      	pop	{r4, r5, r6, pc}
   d59d8:	3f99999a 	.word	0x3f99999a

000d59dc <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d59dc:	7803      	ldrb	r3, [r0, #0]
   d59de:	2b23      	cmp	r3, #35	; 0x23
   d59e0:	d004      	beq.n	d59ec <_ZN6BH175020wait_for_measurementEv+0x10>
   d59e2:	2b13      	cmp	r3, #19
   d59e4:	bf0c      	ite	eq
   d59e6:	2018      	moveq	r0, #24
   d59e8:	20b4      	movne	r0, #180	; 0xb4
   d59ea:	e000      	b.n	d59ee <_ZN6BH175020wait_for_measurementEv+0x12>
   d59ec:	2018      	movs	r0, #24
         m_mode == continuous_low_res) ? 24 : 180); // max measurement time 24 for low res and 180 for high res
   d59ee:	f000 bc99 	b.w	d6324 <delay>

000d59f2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
  return m_mode;
}

void BH1750::set_sensor_mode(SensMode _mode)
{
   d59f2:	b538      	push	{r3, r4, r5, lr}
   d59f4:	4604      	mov	r4, r0
   d59f6:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d59f8:	7841      	ldrb	r1, [r0, #1]
   d59fa:	6840      	ldr	r0, [r0, #4]
   d59fc:	f001 f9d9 	bl	d6db2 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d5a00:	6860      	ldr	r0, [r4, #4]
   d5a02:	6803      	ldr	r3, [r0, #0]
   d5a04:	4629      	mov	r1, r5
   d5a06:	689b      	ldr	r3, [r3, #8]
   d5a08:	4798      	blx	r3
  m_i2c.endTransmission();
   d5a0a:	6860      	ldr	r0, [r4, #4]
   d5a0c:	f001 f9d9 	bl	d6dc2 <_ZN7TwoWire15endTransmissionEv>

  m_mode = _mode;
   d5a10:	7025      	strb	r5, [r4, #0]

  wait_for_measurement();
   d5a12:	4620      	mov	r0, r4
}
   d5a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  m_i2c.write((uint8_t)_mode);
  m_i2c.endTransmission();

  m_mode = _mode;

  wait_for_measurement();
   d5a18:	f7ff bfe0 	b.w	d59dc <_ZN6BH175020wait_for_measurementEv>

000d5a1c <_ZN6BH175023make_forced_measurementEv>:
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5a1c:	b510      	push	{r4, lr}
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5a1e:	7803      	ldrb	r3, [r0, #0]
   d5a20:	f1a3 0220 	sub.w	r2, r3, #32
   d5a24:	2a01      	cmp	r2, #1
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5a26:	4604      	mov	r4, r0
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5a28:	d901      	bls.n	d5a2e <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5a2a:	2b23      	cmp	r3, #35	; 0x23
   d5a2c:	d110      	bne.n	d5a50 <_ZN6BH175023make_forced_measurementEv+0x34>
      m_mode == forced_mode_low_res)
  {
    m_i2c.beginTransmission(m_i2c_addr);
   d5a2e:	7861      	ldrb	r1, [r4, #1]
   d5a30:	6860      	ldr	r0, [r4, #4]
   d5a32:	f001 f9be 	bl	d6db2 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d5a36:	6860      	ldr	r0, [r4, #4]
   d5a38:	7821      	ldrb	r1, [r4, #0]
   d5a3a:	6803      	ldr	r3, [r0, #0]
   d5a3c:	689b      	ldr	r3, [r3, #8]
   d5a3e:	4798      	blx	r3
    m_i2c.endTransmission();
   d5a40:	6860      	ldr	r0, [r4, #4]
   d5a42:	f001 f9be 	bl	d6dc2 <_ZN7TwoWire15endTransmissionEv>

    wait_for_measurement();
   d5a46:	4620      	mov	r0, r4
  }
}
   d5a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    m_i2c.beginTransmission(m_i2c_addr);
    m_i2c.write((uint8_t)m_mode);
    m_i2c.endTransmission();

    wait_for_measurement();
   d5a4c:	f7ff bfc6 	b.w	d59dc <_ZN6BH175020wait_for_measurementEv>
   d5a50:	bd10      	pop	{r4, pc}

000d5a52 <_GLOBAL__sub_I__ZN6BH1750C2EhR7TwoWire>:
   d5a52:	f000 b9af 	b.w	d5db4 <HAL_Pin_Map>

000d5a56 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5a56:	4770      	bx	lr

000d5a58 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5a58:	b538      	push	{r3, r4, r5, lr}
   d5a5a:	4605      	mov	r5, r0
   d5a5c:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5a5e:	f002 f90f 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d5a62:	7829      	ldrb	r1, [r5, #0]
   d5a64:	f001 f9a5 	bl	d6db2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5a68:	f002 f90a 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d5a6c:	0a21      	lsrs	r1, r4, #8
   d5a6e:	f7ff ff7b 	bl	d5968 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5a72:	f002 f905 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d5a76:	b2e1      	uxtb	r1, r4
   d5a78:	f7ff ff76 	bl	d5968 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5a7c:	f002 f900 	bl	d7c80 <_Z19__fetch_global_Wirev>
}
   d5a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d5a84:	f001 b99d 	b.w	d6dc2 <_ZN7TwoWire15endTransmissionEv>

000d5a88 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d5a88:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5a8a:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5a8e:	f7ff ffe3 	bl	d5a58 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d5a92:	200a      	movs	r0, #10
}
   d5a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d5a98:	f000 bc44 	b.w	d6324 <delay>

000d5a9c <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5a9c:	b538      	push	{r3, r4, r5, lr}
   d5a9e:	4604      	mov	r4, r0
   d5aa0:	460d      	mov	r5, r1
  Wire.begin();
   d5aa2:	f002 f8ed 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d5aa6:	f001 f94d 	bl	d6d44 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d5aaa:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d5aac:	7025      	strb	r5, [r4, #0]
  reset();
   d5aae:	f7ff ffeb 	bl	d5a88 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d5ab2:	2001      	movs	r0, #1
   d5ab4:	bd38      	pop	{r3, r4, r5, pc}

000d5ab6 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d5ab6:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d5ab8:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d5aba:	4291      	cmp	r1, r2
   d5abc:	d00e      	beq.n	d5adc <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d5abe:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5ac2:	4058      	eors	r0, r3
   d5ac4:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5ac6:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5aca:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d5ace:	bf18      	it	ne
   d5ad0:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5ad4:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5ad6:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5ad8:	d1f5      	bne.n	d5ac6 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5ada:	e7ee      	b.n	d5aba <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d5adc:	4770      	bx	lr
	...

000d5ae0 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5ae2:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5ae6:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5ae8:	f7ff ffb6 	bl	d5a58 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d5aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5af0:	f000 fc18 	bl	d6324 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d5af4:	f002 f8c4 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d5af8:	2206      	movs	r2, #6
   d5afa:	7821      	ldrb	r1, [r4, #0]
   d5afc:	f001 f956 	bl	d6dac <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5b00:	f002 f8be 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d5b04:	6803      	ldr	r3, [r0, #0]
   d5b06:	691b      	ldr	r3, [r3, #16]
   d5b08:	4798      	blx	r3
   d5b0a:	2806      	cmp	r0, #6
   d5b0c:	d14a      	bne.n	d5ba4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d5b0e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d5b10:	f002 f8b6 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d5b14:	6803      	ldr	r3, [r0, #0]
   d5b16:	695b      	ldr	r3, [r3, #20]
   d5b18:	4798      	blx	r3
   d5b1a:	f80d 0005 	strb.w	r0, [sp, r5]
   d5b1e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d5b20:	2d06      	cmp	r5, #6
   d5b22:	d1f5      	bne.n	d5b10 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5b24:	2202      	movs	r2, #2
   d5b26:	4669      	mov	r1, sp
   d5b28:	4620      	mov	r0, r4
   d5b2a:	f7ff ffc4 	bl	d5ab6 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5b2e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d5b32:	4285      	cmp	r5, r0
   d5b34:	d136      	bne.n	d5ba4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5b36:	2202      	movs	r2, #2
   d5b38:	f10d 0103 	add.w	r1, sp, #3
   d5b3c:	4620      	mov	r0, r4
   d5b3e:	f7ff ffba 	bl	d5ab6 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5b42:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d5b46:	4285      	cmp	r5, r0
   d5b48:	d12c      	bne.n	d5ba4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5b4a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d5b4e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d5b52:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5b56:	ba40      	rev16	r0, r0
   d5b58:	b280      	uxth	r0, r0
   d5b5a:	f002 fbab 	bl	d82b4 <__aeabi_ui2d>
  stemp *= 175;
   d5b5e:	a318      	add	r3, pc, #96	; (adr r3, d5bc0 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5b60:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b64:	f002 fc1c 	bl	d83a0 <__aeabi_dmul>
  stemp /= 0xffff;
   d5b68:	a311      	add	r3, pc, #68	; (adr r3, d5bb0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b6e:	f002 fd41 	bl	d85f4 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d5b72:	2200      	movs	r2, #0
   d5b74:	4b10      	ldr	r3, [pc, #64]	; (d5bb8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d5b76:	f002 fa5f 	bl	d8038 <__aeabi_dsub>
   d5b7a:	f002 feab 	bl	d88d4 <__aeabi_d2f>
   d5b7e:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d5b80:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d5b84:	f002 fb96 	bl	d82b4 <__aeabi_ui2d>
  shum *= 100;
   d5b88:	2200      	movs	r2, #0
   d5b8a:	4b0c      	ldr	r3, [pc, #48]	; (d5bbc <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5b8c:	f002 fc08 	bl	d83a0 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d5b90:	a307      	add	r3, pc, #28	; (adr r3, d5bb0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5b92:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b96:	f002 fd2d 	bl	d85f4 <__aeabi_ddiv>
   d5b9a:	f002 fe9b 	bl	d88d4 <__aeabi_d2f>
   d5b9e:	6060      	str	r0, [r4, #4]
  
  return true;
   d5ba0:	2001      	movs	r0, #1
   d5ba2:	e000      	b.n	d5ba6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d5ba4:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d5ba6:	b002      	add	sp, #8
   d5ba8:	bd70      	pop	{r4, r5, r6, pc}
   d5baa:	bf00      	nop
   d5bac:	f3af 8000 	nop.w
   d5bb0:	00000000 	.word	0x00000000
   d5bb4:	40efffe0 	.word	0x40efffe0
   d5bb8:	40468000 	.word	0x40468000
   d5bbc:	40590000 	.word	0x40590000
   d5bc0:	00000000 	.word	0x00000000
   d5bc4:	4065e000 	.word	0x4065e000

000d5bc8 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d5bc8:	b510      	push	{r4, lr}
   d5bca:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5bcc:	f7ff ff88 	bl	d5ae0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5bd0:	b110      	cbz	r0, d5bd8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d5bd2:	ed94 0a02 	vldr	s0, [r4, #8]
   d5bd6:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d5bd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5be0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d5bdc:	bd10      	pop	{r4, pc}
   d5bde:	bf00      	nop
   d5be0:	7fc00000 	.word	0x7fc00000

000d5be4 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d5be4:	b510      	push	{r4, lr}
   d5be6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5be8:	f7ff ff7a 	bl	d5ae0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5bec:	b110      	cbz	r0, d5bf4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d5bee:	ed94 0a01 	vldr	s0, [r4, #4]
   d5bf2:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d5bf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5bfc <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d5bf8:	bd10      	pop	{r4, pc}
   d5bfa:	bf00      	nop
   d5bfc:	7fc00000 	.word	0x7fc00000

000d5c00 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d5c00:	f000 b8d8 	b.w	d5db4 <HAL_Pin_Map>

000d5c04 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <cellular_signal+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030274 	.word	0x00030274

000d5c14 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <cellular_command+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030274 	.word	0x00030274

000d5c24 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <os_thread_is_current+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	689b      	ldr	r3, [r3, #8]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030248 	.word	0x00030248

000d5c34 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <os_thread_yield+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	68db      	ldr	r3, [r3, #12]
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030248 	.word	0x00030248

000d5c44 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <os_thread_join+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	691b      	ldr	r3, [r3, #16]
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030248 	.word	0x00030248

000d5c54 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <os_thread_cleanup+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	695b      	ldr	r3, [r3, #20]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030248 	.word	0x00030248

000d5c64 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <os_thread_scheduling+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	69db      	ldr	r3, [r3, #28]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030248 	.word	0x00030248

000d5c74 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <os_timer_create+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	6a1b      	ldr	r3, [r3, #32]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030248 	.word	0x00030248

000d5c84 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <os_timer_destroy+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030248 	.word	0x00030248

000d5c94 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <os_timer_get_id+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030248 	.word	0x00030248

000d5ca4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <os_timer_change+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030248 	.word	0x00030248

000d5cb4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <os_mutex_recursive_create+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030248 	.word	0x00030248

000d5cc4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <os_mutex_recursive_destroy+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030248 	.word	0x00030248

000d5cd4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <os_timer_set_id+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030248 	.word	0x00030248

000d5ce4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <HAL_Feature_Set+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030234 	.word	0x00030234

000d5cf4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <HAL_Core_System_Reset_Ex+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030234 	.word	0x00030234

000d5d04 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030234 	.word	0x00030234

000d5d14 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <HAL_RNG_GetRandomNumber+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	685b      	ldr	r3, [r3, #4]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030218 	.word	0x00030218

000d5d24 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <HAL_Delay_Microseconds+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	68db      	ldr	r3, [r3, #12]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030218 	.word	0x00030218

000d5d34 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	695b      	ldr	r3, [r3, #20]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030218 	.word	0x00030218

000d5d44 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <HAL_RTC_Get_UnixTime+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	69db      	ldr	r3, [r3, #28]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030218 	.word	0x00030218

000d5d54 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <HAL_EEPROM_Init+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030218 	.word	0x00030218

000d5d64 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <HAL_EEPROM_Read+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030218 	.word	0x00030218

000d5d74 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <HAL_EEPROM_Get+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030218 	.word	0x00030218

000d5d84 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <HAL_EEPROM_Put+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030218 	.word	0x00030218

000d5d94 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <HAL_RTC_Time_Is_Valid+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030218 	.word	0x00030218

000d5da4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <hal_timer_millis+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030218 	.word	0x00030218

000d5db4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <HAL_Pin_Map+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	681b      	ldr	r3, [r3, #0]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	0003022c 	.word	0x0003022c

000d5dc4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <HAL_Validate_Pin_Function+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	685b      	ldr	r3, [r3, #4]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	0003022c 	.word	0x0003022c

000d5dd4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <HAL_Pin_Mode+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	689b      	ldr	r3, [r3, #8]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	0003022c 	.word	0x0003022c

000d5de4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <HAL_Get_Pin_Mode+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	68db      	ldr	r3, [r3, #12]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	0003022c 	.word	0x0003022c

000d5df4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <HAL_GPIO_Write+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	691b      	ldr	r3, [r3, #16]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	0003022c 	.word	0x0003022c

000d5e04 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <HAL_GPIO_Read+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	695b      	ldr	r3, [r3, #20]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	0003022c 	.word	0x0003022c

000d5e14 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <HAL_ADC_Read+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	0003022c 	.word	0x0003022c

000d5e24 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <HAL_I2C_Begin+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	68db      	ldr	r3, [r3, #12]
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030228 	.word	0x00030228

000d5e34 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <HAL_I2C_Begin_Transmission+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	699b      	ldr	r3, [r3, #24]
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030228 	.word	0x00030228

000d5e44 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <HAL_I2C_End_Transmission+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	69db      	ldr	r3, [r3, #28]
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	00030228 	.word	0x00030228

000d5e54 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <HAL_I2C_Write_Data+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	6a1b      	ldr	r3, [r3, #32]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030228 	.word	0x00030228

000d5e64 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <HAL_I2C_Available_Data+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030228 	.word	0x00030228

000d5e74 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <HAL_I2C_Read_Data+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030228 	.word	0x00030228

000d5e84 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <HAL_I2C_Peek_Data+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030228 	.word	0x00030228

000d5e94 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <HAL_I2C_Flush_Data+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	00030228 	.word	0x00030228

000d5ea4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <HAL_I2C_Is_Enabled+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	00030228 	.word	0x00030228

000d5eb4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <HAL_I2C_Init+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	00030228 	.word	0x00030228

000d5ec4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <HAL_I2C_Acquire+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	00030228 	.word	0x00030228

000d5ed4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <HAL_I2C_Release+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	00030228 	.word	0x00030228

000d5ee4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <HAL_I2C_Request_Data_Ex+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	00030228 	.word	0x00030228

000d5ef4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <inet_inet_ntop+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	695b      	ldr	r3, [r3, #20]
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030264 	.word	0x00030264

000d5f04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <netdb_freeaddrinfo+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	689b      	ldr	r3, [r3, #8]
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030268 	.word	0x00030268

000d5f14 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <netdb_getaddrinfo+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	68db      	ldr	r3, [r3, #12]
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	00030268 	.word	0x00030268

000d5f24 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <HAL_SPI_Init+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	69db      	ldr	r3, [r3, #28]
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	00030230 	.word	0x00030230

000d5f34 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <HAL_SPI_Is_Enabled+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	6a1b      	ldr	r3, [r3, #32]
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	00030230 	.word	0x00030230

000d5f44 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <HAL_USART_Init+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	681b      	ldr	r3, [r3, #0]
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	0003023c 	.word	0x0003023c

000d5f54 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <HAL_USART_Write_Data+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	68db      	ldr	r3, [r3, #12]
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	0003023c 	.word	0x0003023c

000d5f64 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <HAL_USART_Available_Data+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	691b      	ldr	r3, [r3, #16]
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	0003023c 	.word	0x0003023c

000d5f74 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <HAL_USART_Read_Data+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	695b      	ldr	r3, [r3, #20]
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	0003023c 	.word	0x0003023c

000d5f84 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <HAL_USART_Peek_Data+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	699b      	ldr	r3, [r3, #24]
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	0003023c 	.word	0x0003023c

000d5f94 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <HAL_USART_Flush_Data+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	69db      	ldr	r3, [r3, #28]
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	0003023c 	.word	0x0003023c

000d5fa4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <HAL_USART_Is_Enabled+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	6a1b      	ldr	r3, [r3, #32]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	0003023c 	.word	0x0003023c

000d5fb4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <HAL_USART_Available_Data_For_Write+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	0003023c 	.word	0x0003023c

000d5fc4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <HAL_USB_USART_Init+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	681b      	ldr	r3, [r3, #0]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	0003024c 	.word	0x0003024c

000d5fd4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <HAL_USB_USART_Available_Data+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	691b      	ldr	r3, [r3, #16]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	0003024c 	.word	0x0003024c

000d5fe4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	695b      	ldr	r3, [r3, #20]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	0003024c 	.word	0x0003024c

000d5ff4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <HAL_USB_USART_Receive_Data+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	699b      	ldr	r3, [r3, #24]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	0003024c 	.word	0x0003024c

000d6004 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <HAL_USB_USART_Send_Data+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	69db      	ldr	r3, [r3, #28]
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	0003024c 	.word	0x0003024c

000d6014 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <HAL_USB_USART_Flush_Data+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	6a1b      	ldr	r3, [r3, #32]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	0003024c 	.word	0x0003024c

000d6024 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <panic_+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	00030260 	.word	0x00030260

000d6034 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <log_message+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	00030260 	.word	0x00030260

000d6044 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b03      	ldr	r3, [pc, #12]	; (d6054 <diag_get_source+0x10>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d604e:	9301      	str	r3, [sp, #4]
   d6050:	bd08      	pop	{r3, pc}
   d6052:	0000      	.short	0x0000
   d6054:	00030260 	.word	0x00030260

000d6058 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <system_mode+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	681b      	ldr	r3, [r3, #0]
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	00030220 	.word	0x00030220

000d6068 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <set_system_mode+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	685b      	ldr	r3, [r3, #4]
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	00030220 	.word	0x00030220

000d6078 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <system_delay_ms+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	695b      	ldr	r3, [r3, #20]
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	00030220 	.word	0x00030220

000d6088 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <system_sleep+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	699b      	ldr	r3, [r3, #24]
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	00030220 	.word	0x00030220

000d6098 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <system_thread_set_state+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	00030220 	.word	0x00030220

000d60a8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <application_thread_current+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030220 	.word	0x00030220

000d60b8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <application_thread_invoke+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030220 	.word	0x00030220

000d60c8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <system_thread_get_state+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030220 	.word	0x00030220

000d60d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b03      	ldr	r3, [pc, #12]	; (d60e8 <system_ctrl_set_app_request_handler+0x10>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d60e2:	9301      	str	r3, [sp, #4]
   d60e4:	bd08      	pop	{r3, pc}
   d60e6:	0000      	.short	0x0000
   d60e8:	00030220 	.word	0x00030220

000d60ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b03      	ldr	r3, [pc, #12]	; (d60fc <system_ctrl_set_result+0x10>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d60f6:	9301      	str	r3, [sp, #4]
   d60f8:	bd08      	pop	{r3, pc}
   d60fa:	0000      	.short	0x0000
   d60fc:	00030220 	.word	0x00030220

000d6100 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b03      	ldr	r3, [pc, #12]	; (d6110 <system_sleep_pins+0x10>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d610a:	9301      	str	r3, [sp, #4]
   d610c:	bd08      	pop	{r3, pc}
   d610e:	0000      	.short	0x0000
   d6110:	00030220 	.word	0x00030220

000d6114 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d6114:	b508      	push	{r3, lr}
   d6116:	4b03      	ldr	r3, [pc, #12]	; (d6124 <system_power_management_set_config+0x10>)
   d6118:	681b      	ldr	r3, [r3, #0]
   d611a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d611e:	9301      	str	r3, [sp, #4]
   d6120:	bd08      	pop	{r3, pc}
   d6122:	0000      	.short	0x0000
   d6124:	00030220 	.word	0x00030220

000d6128 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b03      	ldr	r3, [pc, #12]	; (d6138 <system_sleep_ext+0x10>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6132:	9301      	str	r3, [sp, #4]
   d6134:	bd08      	pop	{r3, pc}
   d6136:	0000      	.short	0x0000
   d6138:	00030220 	.word	0x00030220

000d613c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <spark_variable+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	681b      	ldr	r3, [r3, #0]
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030244 	.word	0x00030244

000d614c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <spark_function+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	685b      	ldr	r3, [r3, #4]
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030244 	.word	0x00030244

000d615c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <spark_process+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	689b      	ldr	r3, [r3, #8]
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030244 	.word	0x00030244

000d616c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <spark_cloud_flag_connect+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	68db      	ldr	r3, [r3, #12]
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030244 	.word	0x00030244

000d617c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <spark_cloud_flag_disconnect+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	691b      	ldr	r3, [r3, #16]
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030244 	.word	0x00030244

000d618c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <spark_cloud_flag_connected+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	695b      	ldr	r3, [r3, #20]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030244 	.word	0x00030244

000d619c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <spark_deviceID+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	69db      	ldr	r3, [r3, #28]
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030244 	.word	0x00030244

000d61ac <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <spark_send_event+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	6a1b      	ldr	r3, [r3, #32]
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030244 	.word	0x00030244

000d61bc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <spark_subscribe+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030244 	.word	0x00030244

000d61cc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <spark_sync_time+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030244 	.word	0x00030244

000d61dc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <spark_sync_time_pending+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030244 	.word	0x00030244

000d61ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	00030244 	.word	0x00030244

000d61fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <network_connect+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	685b      	ldr	r3, [r3, #4]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	00030240 	.word	0x00030240

000d620c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <network_connecting+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	689b      	ldr	r3, [r3, #8]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	00030240 	.word	0x00030240

000d621c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <network_disconnect+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	68db      	ldr	r3, [r3, #12]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	00030240 	.word	0x00030240

000d622c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <network_ready+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	691b      	ldr	r3, [r3, #16]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	00030240 	.word	0x00030240

000d623c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <network_on+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	695b      	ldr	r3, [r3, #20]
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030240 	.word	0x00030240

000d624c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <network_off+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	699b      	ldr	r3, [r3, #24]
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	00030240 	.word	0x00030240

000d625c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <network_listen+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	69db      	ldr	r3, [r3, #28]
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030240 	.word	0x00030240

000d626c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <network_listening+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	6a1b      	ldr	r3, [r3, #32]
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030240 	.word	0x00030240

000d627c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <network_set_listen_timeout+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	00030240 	.word	0x00030240

000d628c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <network_get_listen_timeout+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	00030240 	.word	0x00030240

000d629c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <malloc+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	681b      	ldr	r3, [r3, #0]
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	0003021c 	.word	0x0003021c

000d62ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <free+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	685b      	ldr	r3, [r3, #4]
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	0003021c 	.word	0x0003021c

000d62bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <realloc+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	689b      	ldr	r3, [r3, #8]
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	0003021c 	.word	0x0003021c

000d62cc <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <siscanf+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	699b      	ldr	r3, [r3, #24]
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	0003021c 	.word	0x0003021c

000d62dc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <snprintf+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	69db      	ldr	r3, [r3, #28]
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	0003021c 	.word	0x0003021c

000d62ec <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <abort+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	0003021c 	.word	0x0003021c

000d62fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <_malloc_r+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	0003021c 	.word	0x0003021c

000d630c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d630c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d630e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d6310:	d007      	beq.n	d6322 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d6312:	9d03      	ldr	r5, [sp, #12]
   d6314:	1a44      	subs	r4, r0, r1
   d6316:	1aed      	subs	r5, r5, r3
   d6318:	436c      	muls	r4, r5
   d631a:	1a52      	subs	r2, r2, r1
   d631c:	fb94 f4f2 	sdiv	r4, r4, r2
   d6320:	18e0      	adds	r0, r4, r3
}
   d6322:	bd30      	pop	{r4, r5, pc}

000d6324 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6324:	2100      	movs	r1, #0
   d6326:	f7ff bea7 	b.w	d6078 <system_delay_ms>

000d632a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d632a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d632c:	6883      	ldr	r3, [r0, #8]
   d632e:	4604      	mov	r4, r0
   d6330:	b90b      	cbnz	r3, d6336 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6332:	f001 fd32 	bl	d7d9a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6336:	68c3      	ldr	r3, [r0, #12]
   d6338:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d633a:	68a3      	ldr	r3, [r4, #8]
   d633c:	b11b      	cbz	r3, d6346 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d633e:	2203      	movs	r2, #3
   d6340:	4621      	mov	r1, r4
   d6342:	4620      	mov	r0, r4
   d6344:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6346:	4620      	mov	r0, r4
   d6348:	2110      	movs	r1, #16
}
   d634a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d634e:	f001 bd08 	b.w	d7d62 <_ZdlPvj>

000d6352 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6352:	b510      	push	{r4, lr}
   d6354:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6356:	6800      	ldr	r0, [r0, #0]
   d6358:	b108      	cbz	r0, d635e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d635a:	f7ff fcb3 	bl	d5cc4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d635e:	4620      	mov	r0, r4
   d6360:	bd10      	pop	{r4, pc}

000d6362 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6362:	680b      	ldr	r3, [r1, #0]
   d6364:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6366:	b113      	cbz	r3, d636e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6368:	685a      	ldr	r2, [r3, #4]
   d636a:	3201      	adds	r2, #1
   d636c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d636e:	4770      	bx	lr

000d6370 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6370:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6372:	4c06      	ldr	r4, [pc, #24]	; (d638c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6374:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6376:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6378:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d637a:	f7ff fc9b 	bl	d5cb4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d637e:	4620      	mov	r0, r4
   d6380:	4a03      	ldr	r2, [pc, #12]	; (d6390 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6382:	4904      	ldr	r1, [pc, #16]	; (d6394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6388:	f001 bce6 	b.w	d7d58 <__aeabi_atexit>
   d638c:	2003e32c 	.word	0x2003e32c
   d6390:	2003e1b0 	.word	0x2003e1b0
   d6394:	000d6353 	.word	0x000d6353

000d6398 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6398:	2200      	movs	r2, #0
   d639a:	4611      	mov	r1, r2
   d639c:	6840      	ldr	r0, [r0, #4]
   d639e:	f7ff bf45 	b.w	d622c <network_ready>

000d63a2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63a2:	2200      	movs	r2, #0
   d63a4:	4611      	mov	r1, r2
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	f7ff bf60 	b.w	d626c <network_listening>

000d63ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d63ac:	2200      	movs	r2, #0
   d63ae:	4611      	mov	r1, r2
   d63b0:	6840      	ldr	r0, [r0, #4]
   d63b2:	f7ff bf6b 	b.w	d628c <network_get_listen_timeout>

000d63b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d63b6:	2200      	movs	r2, #0
   d63b8:	6840      	ldr	r0, [r0, #4]
   d63ba:	f7ff bf5f 	b.w	d627c <network_set_listen_timeout>

000d63be <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d63be:	2200      	movs	r2, #0
   d63c0:	f081 0101 	eor.w	r1, r1, #1
   d63c4:	6840      	ldr	r0, [r0, #4]
   d63c6:	f7ff bf49 	b.w	d625c <network_listen>

000d63ca <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d63ca:	2300      	movs	r3, #0
   d63cc:	461a      	mov	r2, r3
   d63ce:	4619      	mov	r1, r3
   d63d0:	6840      	ldr	r0, [r0, #4]
   d63d2:	f7ff bf3b 	b.w	d624c <network_off>

000d63d6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d63d6:	2300      	movs	r3, #0
   d63d8:	461a      	mov	r2, r3
   d63da:	4619      	mov	r1, r3
   d63dc:	6840      	ldr	r0, [r0, #4]
   d63de:	f7ff bf2d 	b.w	d623c <network_on>

000d63e2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d63e2:	2200      	movs	r2, #0
   d63e4:	4611      	mov	r1, r2
   d63e6:	6840      	ldr	r0, [r0, #4]
   d63e8:	f7ff bf10 	b.w	d620c <network_connecting>

000d63ec <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63ec:	2200      	movs	r2, #0
   d63ee:	2102      	movs	r1, #2
   d63f0:	6840      	ldr	r0, [r0, #4]
   d63f2:	f7ff bf13 	b.w	d621c <network_disconnect>

000d63f6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d63f6:	2300      	movs	r3, #0
   d63f8:	461a      	mov	r2, r3
   d63fa:	6840      	ldr	r0, [r0, #4]
   d63fc:	f7ff befe 	b.w	d61fc <network_connect>

000d6400 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6400:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6402:	4b1b      	ldr	r3, [pc, #108]	; (d6470 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6404:	6003      	str	r3, [r0, #0]
   d6406:	2500      	movs	r5, #0
   d6408:	460f      	mov	r7, r1
   d640a:	3328      	adds	r3, #40	; 0x28
   d640c:	2618      	movs	r6, #24
   d640e:	b089      	sub	sp, #36	; 0x24
   d6410:	6043      	str	r3, [r0, #4]
   d6412:	6085      	str	r5, [r0, #8]
   d6414:	60c5      	str	r5, [r0, #12]
   d6416:	4632      	mov	r2, r6
   d6418:	4629      	mov	r1, r5
   d641a:	4604      	mov	r4, r0
   d641c:	3010      	adds	r0, #16
   d641e:	f002 fbbe 	bl	d8b9e <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6422:	462a      	mov	r2, r5
   d6424:	4629      	mov	r1, r5
   d6426:	6878      	ldr	r0, [r7, #4]
   d6428:	f7ff ff00 	bl	d622c <network_ready>
   d642c:	b908      	cbnz	r0, d6432 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d642e:	60a0      	str	r0, [r4, #8]
            return sig;
   d6430:	e01b      	b.n	d646a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6432:	4629      	mov	r1, r5
   d6434:	4632      	mov	r2, r6
   d6436:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6438:	9500      	str	r5, [sp, #0]
   d643a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d643c:	f002 fbaf 	bl	d8b9e <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6440:	a902      	add	r1, sp, #8
   d6442:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6444:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6448:	f7ff fbdc 	bl	d5c04 <cellular_signal>
   d644c:	b110      	cbz	r0, d6454 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d644e:	2301      	movs	r3, #1
   d6450:	60a3      	str	r3, [r4, #8]
            return sig;
   d6452:	e00a      	b.n	d646a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6454:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6456:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6458:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d645a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d645c:	b90b      	cbnz	r3, d6462 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d645e:	2302      	movs	r3, #2
   d6460:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d6462:	a902      	add	r1, sp, #8
   d6464:	4620      	mov	r0, r4
   d6466:	f000 f889 	bl	d657c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d646a:	4620      	mov	r0, r4
   d646c:	b009      	add	sp, #36	; 0x24
   d646e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6470:	000d9b5c 	.word	0x000d9b5c

000d6474 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6474:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6476:	4c08      	ldr	r4, [pc, #32]	; (d6498 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6478:	2528      	movs	r5, #40	; 0x28
   d647a:	462a      	mov	r2, r5
   d647c:	2100      	movs	r1, #0
   d647e:	4620      	mov	r0, r4
   d6480:	f002 fb8d 	bl	d8b9e <memset>
        cid = -1;
   d6484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6488:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d648a:	4b04      	ldr	r3, [pc, #16]	; (d649c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d648c:	8025      	strh	r5, [r4, #0]
   d648e:	2204      	movs	r2, #4
   d6490:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6492:	4a03      	ldr	r2, [pc, #12]	; (d64a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6494:	601a      	str	r2, [r3, #0]
   d6496:	bd38      	pop	{r3, r4, r5, pc}
   d6498:	2003e338 	.word	0x2003e338
   d649c:	2003e330 	.word	0x2003e330
   d64a0:	000d9b28 	.word	0x000d9b28

000d64a4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d64a4:	4770      	bx	lr

000d64a6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d64a6:	7d00      	ldrb	r0, [r0, #20]
   d64a8:	4770      	bx	lr
	...

000d64ac <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d64ac:	7d03      	ldrb	r3, [r0, #20]
   d64ae:	b11b      	cbz	r3, d64b8 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d64b0:	6983      	ldr	r3, [r0, #24]
   d64b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d64b6:	d102      	bne.n	d64be <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d64b8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d64d0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d64bc:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d64be:	ee07 3a90 	vmov	s15, r3
   d64c2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d64d4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d64c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d64ca:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d64ce:	4770      	bx	lr
   d64d0:	00000000 	.word	0x00000000
   d64d4:	42c80000 	.word	0x42c80000

000d64d8 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d64d8:	7d03      	ldrb	r3, [r0, #20]
   d64da:	b11b      	cbz	r3, d64e4 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d64dc:	6a03      	ldr	r3, [r0, #32]
   d64de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d64e2:	d102      	bne.n	d64ea <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d64e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d64fc <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d64e8:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d64ea:	ee07 3a90 	vmov	s15, r3
   d64ee:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6500 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d64f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d64f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d64fa:	4770      	bx	lr
   d64fc:	00000000 	.word	0x00000000
   d6500:	42c80000 	.word	0x42c80000

000d6504 <_ZN14CellularSignalD0Ev>:
   d6504:	b510      	push	{r4, lr}
   d6506:	2128      	movs	r1, #40	; 0x28
   d6508:	4604      	mov	r4, r0
   d650a:	f001 fc2a 	bl	d7d62 <_ZdlPvj>
   d650e:	4620      	mov	r0, r4
   d6510:	bd10      	pop	{r4, pc}
	...

000d6514 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6514:	7d03      	ldrb	r3, [r0, #20]
   d6516:	b17b      	cbz	r3, d6538 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6518:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d651a:	2b00      	cmp	r3, #0
   d651c:	db0c      	blt.n	d6538 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d651e:	ee07 3a90 	vmov	s15, r3
   d6522:	eddf 6a07 	vldr	s13, [pc, #28]	; d6540 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6526:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6544 <_ZNK14CellularSignal10getQualityEv+0x30>
   d652a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d652e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6532:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6536:	4770      	bx	lr
    }

    return -1.0f;
   d6538:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d653c:	4770      	bx	lr
   d653e:	bf00      	nop
   d6540:	477fff00 	.word	0x477fff00
   d6544:	42c80000 	.word	0x42c80000

000d6548 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d6548:	7d03      	ldrb	r3, [r0, #20]
   d654a:	b17b      	cbz	r3, d656c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d654c:	69c3      	ldr	r3, [r0, #28]
   d654e:	2b00      	cmp	r3, #0
   d6550:	db0c      	blt.n	d656c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d6552:	ee07 3a90 	vmov	s15, r3
   d6556:	eddf 6a07 	vldr	s13, [pc, #28]	; d6574 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d655a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6578 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d655e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6562:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6566:	ee27 0a80 	vmul.f32	s0, s15, s0
   d656a:	4770      	bx	lr
    }

    return -1.0f;
   d656c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6570:	4770      	bx	lr
   d6572:	bf00      	nop
   d6574:	477fff00 	.word	0x477fff00
   d6578:	42c80000 	.word	0x42c80000

000d657c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d657c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d657e:	460d      	mov	r5, r1
   d6580:	f100 0410 	add.w	r4, r0, #16
   d6584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6588:	e895 0003 	ldmia.w	r5, {r0, r1}
   d658c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d6590:	2001      	movs	r0, #1
   d6592:	bd30      	pop	{r4, r5, pc}

000d6594 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d6594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6598:	4607      	mov	r7, r0
   d659a:	460c      	mov	r4, r1
{
    if (base == 0) {
   d659c:	4615      	mov	r5, r2
   d659e:	b92a      	cbnz	r2, d65ac <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d65a0:	6803      	ldr	r3, [r0, #0]
   d65a2:	b2c9      	uxtb	r1, r1
   d65a4:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d65a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d65aa:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d65ac:	2900      	cmp	r1, #0
   d65ae:	da07      	bge.n	d65c0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d65b0:	2a0a      	cmp	r2, #10
   d65b2:	d105      	bne.n	d65c0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d65b4:	212d      	movs	r1, #45	; 0x2d
   d65b6:	f000 fe1f 	bl	d71f8 <_ZN5Print5printEc>
            val = -n;
   d65ba:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d65bc:	4606      	mov	r6, r0
            val = -n;
   d65be:	e001      	b.n	d65c4 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d65c0:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d65c2:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d65c4:	b2ea      	uxtb	r2, r5
   d65c6:	4638      	mov	r0, r7
   d65c8:	f000 fe2f 	bl	d722a <_ZN5Print11printNumberEmh>
    }
}
   d65cc:	4430      	add	r0, r6
   d65ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65d2 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d65d2:	b570      	push	{r4, r5, r6, lr}
   d65d4:	460d      	mov	r5, r1
   d65d6:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d65d8:	220a      	movs	r2, #10
   d65da:	6881      	ldr	r1, [r0, #8]
   d65dc:	4628      	mov	r0, r5
   d65de:	f7ff ffd9 	bl	d6594 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d65e2:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d65e4:	4604      	mov	r4, r0
    n += p.print(',');
   d65e6:	4628      	mov	r0, r5
   d65e8:	f000 fe06 	bl	d71f8 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d65ec:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d65ee:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d65f0:	68f1      	ldr	r1, [r6, #12]
   d65f2:	4628      	mov	r0, r5
   d65f4:	f7ff ffce 	bl	d6594 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d65f8:	4420      	add	r0, r4
   d65fa:	bd70      	pop	{r4, r5, r6, pc}

000d65fc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d65fc:	f1a0 0004 	sub.w	r0, r0, #4
   d6600:	f7ff bfe7 	b.w	d65d2 <_ZNK14CellularSignal7printToER5Print>

000d6604 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6604:	4770      	bx	lr

000d6606 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6606:	2000      	movs	r0, #0
   d6608:	4770      	bx	lr

000d660a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d660a:	b510      	push	{r4, lr}
   d660c:	2110      	movs	r1, #16
   d660e:	4604      	mov	r4, r0
   d6610:	f001 fba7 	bl	d7d62 <_ZdlPvj>
   d6614:	4620      	mov	r0, r4
   d6616:	bd10      	pop	{r4, pc}

000d6618 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6618:	b508      	push	{r3, lr}
      { delete this; }
   d661a:	b108      	cbz	r0, d6620 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d661c:	f7ff fff5 	bl	d660a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6620:	bd08      	pop	{r3, pc}

000d6622 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6622:	2200      	movs	r2, #0
   d6624:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6626:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6628:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d662c:	8082      	strh	r2, [r0, #4]
   d662e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6632:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6634:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6636:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6638:	680c      	ldr	r4, [r1, #0]
   d663a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d663c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d663e:	bd10      	pop	{r4, pc}

000d6640 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6640:	b510      	push	{r4, lr}
   d6642:	4604      	mov	r4, r0
    free((void*)msg_);
   d6644:	6800      	ldr	r0, [r0, #0]
   d6646:	f7ff fe31 	bl	d62ac <free>
}
   d664a:	4620      	mov	r0, r4
   d664c:	bd10      	pop	{r4, pc}

000d664e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d664e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6650:	68c4      	ldr	r4, [r0, #12]
   d6652:	b1f4      	cbz	r4, d6692 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6654:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6656:	2b02      	cmp	r3, #2
   d6658:	d103      	bne.n	d6662 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d665a:	f104 000c 	add.w	r0, r4, #12
   d665e:	f7ff ffef 	bl	d6640 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6662:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6664:	b135      	cbz	r5, d6674 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6666:	4628      	mov	r0, r5
   d6668:	f7fd fd8d 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
   d666c:	2110      	movs	r1, #16
   d666e:	4628      	mov	r0, r5
   d6670:	f001 fb77 	bl	d7d62 <_ZdlPvj>
   d6674:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6676:	b135      	cbz	r5, d6686 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6678:	4628      	mov	r0, r5
   d667a:	f7fd fd84 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
   d667e:	2110      	movs	r1, #16
   d6680:	4628      	mov	r0, r5
   d6682:	f001 fb6e 	bl	d7d62 <_ZdlPvj>
   d6686:	4620      	mov	r0, r4
   d6688:	2114      	movs	r1, #20
   d668a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d668e:	f001 bb68 	b.w	d7d62 <_ZdlPvj>
   d6692:	bd38      	pop	{r3, r4, r5, pc}

000d6694 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6694:	b510      	push	{r4, lr}
   d6696:	b088      	sub	sp, #32
   d6698:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d669a:	4668      	mov	r0, sp
   d669c:	f000 fe5a 	bl	d7354 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d66a0:	4669      	mov	r1, sp
   d66a2:	a804      	add	r0, sp, #16
   d66a4:	f000 fe78 	bl	d7398 <_ZN6StringC1ERKS_>
   d66a8:	a804      	add	r0, sp, #16
   d66aa:	47a0      	blx	r4
   d66ac:	4604      	mov	r4, r0
   d66ae:	a804      	add	r0, sp, #16
   d66b0:	f000 fe09 	bl	d72c6 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d66b4:	4668      	mov	r0, sp
   d66b6:	f000 fe06 	bl	d72c6 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d66ba:	4620      	mov	r0, r4
   d66bc:	b008      	add	sp, #32
   d66be:	bd10      	pop	{r4, pc}

000d66c0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d66c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d66c2:	2410      	movs	r4, #16
   d66c4:	b085      	sub	sp, #20
   d66c6:	4607      	mov	r7, r0
   d66c8:	460e      	mov	r6, r1
   d66ca:	4615      	mov	r5, r2
   d66cc:	2100      	movs	r1, #0
   d66ce:	4622      	mov	r2, r4
   d66d0:	4668      	mov	r0, sp
   d66d2:	f002 fa64 	bl	d8b9e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d66d6:	2200      	movs	r2, #0
   d66d8:	4669      	mov	r1, sp
   d66da:	4610      	mov	r0, r2
         size = sizeof(*this);
   d66dc:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d66e0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d66e2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d66e4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d66e6:	f7ff fd31 	bl	d614c <spark_function>
}
   d66ea:	b005      	add	sp, #20
   d66ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66ee <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d66ee:	b513      	push	{r0, r1, r4, lr}
   d66f0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d66f2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d66f6:	2300      	movs	r3, #0
   d66f8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d66fa:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d66fc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d66fe:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6700:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6702:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6704:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6706:	f7fd ffdd 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d670a:	4620      	mov	r0, r4
   d670c:	b002      	add	sp, #8
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6712:	460c      	mov	r4, r1
   d6714:	ad02      	add	r5, sp, #8
   d6716:	f854 3b04 	ldr.w	r3, [r4], #4
   d671a:	f845 3d08 	str.w	r3, [r5, #-8]!
   d671e:	4606      	mov	r6, r0
   d6720:	460f      	mov	r7, r1
   d6722:	a801      	add	r0, sp, #4
   d6724:	4621      	mov	r1, r4
   d6726:	f7ff fe1c 	bl	d6362 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d672a:	4629      	mov	r1, r5
   d672c:	4630      	mov	r0, r6
   d672e:	f7ff ffde 	bl	d66ee <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6732:	a801      	add	r0, sp, #4
   d6734:	f7fd ffc6 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6738:	4620      	mov	r0, r4
   d673a:	f7fd ffc3 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d673e:	4638      	mov	r0, r7
   d6740:	2108      	movs	r1, #8
   d6742:	f001 fb0e 	bl	d7d62 <_ZdlPvj>
        return p;
    }
   d6746:	4630      	mov	r0, r6
   d6748:	b003      	add	sp, #12
   d674a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d674c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d674c:	b513      	push	{r0, r1, r4, lr}
   d674e:	460b      	mov	r3, r1
   d6750:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6752:	c803      	ldmia	r0, {r0, r1}
   d6754:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6758:	e893 0003 	ldmia.w	r3, {r0, r1}
   d675c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6760:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6764:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6768:	b002      	add	sp, #8
   d676a:	bd10      	pop	{r4, pc}

000d676c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d676c:	b538      	push	{r3, r4, r5, lr}
   d676e:	2300      	movs	r3, #0
   d6770:	4604      	mov	r4, r0
   d6772:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6774:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6776:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6778:	f7fd fc8f 	bl	d409a <_Znwj>
   d677c:	b128      	cbz	r0, d678a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d677e:	2301      	movs	r3, #1
   d6780:	6043      	str	r3, [r0, #4]
   d6782:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6784:	4b02      	ldr	r3, [pc, #8]	; (d6790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6786:	6003      	str	r3, [r0, #0]
   d6788:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d678a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d678c:	4620      	mov	r0, r4
   d678e:	bd38      	pop	{r3, r4, r5, pc}
   d6790:	000d9b90 	.word	0x000d9b90

000d6794 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6794:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6796:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6798:	b90a      	cbnz	r2, d679e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d679a:	f001 fafe 	bl	d7d9a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d679e:	68c3      	ldr	r3, [r0, #12]
    }
   d67a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67a4:	4718      	bx	r3

000d67a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d67a6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d67a8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d67aa:	f100 0110 	add.w	r1, r0, #16
   d67ae:	f7ff fff1 	bl	d6794 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d67b2:	bd08      	pop	{r3, pc}

000d67b4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d67b4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d67b6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d67b8:	b90a      	cbnz	r2, d67be <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d67ba:	f001 faee 	bl	d7d9a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67be:	68c3      	ldr	r3, [r0, #12]
    }
   d67c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67c4:	4718      	bx	r3

000d67c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d67c6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d67c8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d67ca:	f100 0110 	add.w	r1, r0, #16
   d67ce:	f7ff fff1 	bl	d67b4 <_ZNKSt8functionIFvRKbEEclES1_>
   d67d2:	bd08      	pop	{r3, pc}

000d67d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d67d4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67d6:	2300      	movs	r3, #0
   d67d8:	6083      	str	r3, [r0, #8]
   d67da:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d67dc:	4604      	mov	r4, r0
   d67de:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d67e0:	b12b      	cbz	r3, d67ee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d67e2:	2202      	movs	r2, #2
   d67e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d67e6:	68eb      	ldr	r3, [r5, #12]
   d67e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d67ea:	68ab      	ldr	r3, [r5, #8]
   d67ec:	60a3      	str	r3, [r4, #8]
	}
    }
   d67ee:	4620      	mov	r0, r4
   d67f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d67f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d67f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67f6:	b089      	sub	sp, #36	; 0x24
   d67f8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d67fa:	4668      	mov	r0, sp
   d67fc:	f7ff ff11 	bl	d6622 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6800:	2300      	movs	r3, #0
   d6802:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6806:	f04f 0202 	mov.w	r2, #2
   d680a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d680e:	2b00      	cmp	r3, #0
   d6810:	d103      	bne.n	d681a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6812:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6816:	2900      	cmp	r1, #0
   d6818:	d1f7      	bne.n	d680a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d681a:	d002      	beq.n	d6822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d681c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6820:	e063      	b.n	d68ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6822:	f114 050c 	adds.w	r5, r4, #12
   d6826:	d003      	beq.n	d6830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6828:	4669      	mov	r1, sp
   d682a:	4628      	mov	r0, r5
   d682c:	f7ff fef9 	bl	d6622 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6830:	f3bf 8f5f 	dmb	sy
   d6834:	2301      	movs	r3, #1
   d6836:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6838:	2000      	movs	r0, #0
   d683a:	f104 0308 	add.w	r3, r4, #8
   d683e:	f3bf 8f5f 	dmb	sy
   d6842:	e853 6f00 	ldrex	r6, [r3]
   d6846:	e843 0200 	strex	r2, r0, [r3]
   d684a:	2a00      	cmp	r2, #0
   d684c:	d1f9      	bne.n	d6842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d684e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6852:	2e00      	cmp	r6, #0
   d6854:	d049      	beq.n	d68ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6856:	f7ff fc27 	bl	d60a8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d685a:	b120      	cbz	r0, d6866 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d685c:	4629      	mov	r1, r5
   d685e:	4630      	mov	r0, r6
   d6860:	f7ff ff98 	bl	d6794 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6864:	e03a      	b.n	d68dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6866:	4631      	mov	r1, r6
   d6868:	a802      	add	r0, sp, #8
   d686a:	f7ff ffb3 	bl	d67d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d686e:	68e0      	ldr	r0, [r4, #12]
   d6870:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6874:	b108      	cbz	r0, d687a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6876:	f002 f9d5 	bl	d8c24 <strdup>
   d687a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d687c:	2010      	movs	r0, #16
   d687e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6882:	f7fd fc0a 	bl	d409a <_Znwj>
   d6886:	4605      	mov	r5, r0
   d6888:	b1e8      	cbz	r0, d68c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d688a:	2700      	movs	r7, #0
   d688c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d688e:	2018      	movs	r0, #24
   d6890:	f7fd fc03 	bl	d409a <_Znwj>
   d6894:	4604      	mov	r4, r0
   d6896:	b188      	cbz	r0, d68bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6898:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d689a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d689c:	a802      	add	r0, sp, #8
   d689e:	f7ff ff55 	bl	d674c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68a2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d68a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68a6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68a8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d68aa:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68ac:	a906      	add	r1, sp, #24
   d68ae:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d68b0:	60e3      	str	r3, [r4, #12]
   d68b2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d68b6:	9205      	str	r2, [sp, #20]
   d68b8:	f7ff feb3 	bl	d6622 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d68bc:	4b0d      	ldr	r3, [pc, #52]	; (d68f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d68be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d68c0:	4b0d      	ldr	r3, [pc, #52]	; (d68f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68c2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d68c4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d68c6:	a806      	add	r0, sp, #24
   d68c8:	f7ff feba 	bl	d6640 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68cc:	a802      	add	r0, sp, #8
   d68ce:	f7fd fc5a 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d68d2:	2200      	movs	r2, #0
   d68d4:	4629      	mov	r1, r5
   d68d6:	4809      	ldr	r0, [pc, #36]	; (d68fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d68d8:	f7ff fbee 	bl	d60b8 <application_thread_invoke>
   d68dc:	4630      	mov	r0, r6
   d68de:	f7fd fc52 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d68e2:	2110      	movs	r1, #16
   d68e4:	4630      	mov	r0, r6
   d68e6:	f001 fa3c 	bl	d7d62 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d68ea:	4668      	mov	r0, sp
   d68ec:	f7ff fea8 	bl	d6640 <_ZN8particle5ErrorD1Ev>
    }
   d68f0:	b009      	add	sp, #36	; 0x24
   d68f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68f4:	000d67a7 	.word	0x000d67a7
   d68f8:	000d6a1d 	.word	0x000d6a1d
   d68fc:	000d632b 	.word	0x000d632b

000d6900 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6904:	b08b      	sub	sp, #44	; 0x2c
   d6906:	4606      	mov	r6, r0
   d6908:	460f      	mov	r7, r1
   d690a:	4690      	mov	r8, r2
   d690c:	4699      	mov	r9, r3
   d690e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6912:	f7ff fc3b 	bl	d618c <spark_cloud_flag_connected>
   d6916:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6918:	4683      	mov	fp, r0
   d691a:	bb30      	cbnz	r0, d696a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d691c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6920:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6922:	a905      	add	r1, sp, #20
   d6924:	4628      	mov	r0, r5
   d6926:	f8ad 3018 	strh.w	r3, [sp, #24]
   d692a:	f7ff fe7a 	bl	d6622 <_ZN8particle5ErrorC1EOS0_>
   d692e:	2014      	movs	r0, #20
   d6930:	f7fd fbb3 	bl	d409a <_Znwj>
   d6934:	4604      	mov	r4, r0
   d6936:	b158      	cbz	r0, d6950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6938:	2302      	movs	r3, #2
   d693a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d693c:	2301      	movs	r3, #1
   d693e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6940:	f8c0 b004 	str.w	fp, [r0, #4]
   d6944:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6948:	4629      	mov	r1, r5
   d694a:	300c      	adds	r0, #12
   d694c:	f7ff fe69 	bl	d6622 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6950:	4630      	mov	r0, r6
   d6952:	4621      	mov	r1, r4
   d6954:	f840 4b04 	str.w	r4, [r0], #4
   d6958:	f7ff ff08 	bl	d676c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d695c:	4628      	mov	r0, r5
   d695e:	f7ff fe6f 	bl	d6640 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6962:	a805      	add	r0, sp, #20
   d6964:	f7ff fe6c 	bl	d6640 <_ZN8particle5ErrorD1Ev>
   d6968:	e052      	b.n	d6a10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d696a:	2400      	movs	r4, #0
   d696c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d696e:	2014      	movs	r0, #20
   d6970:	606c      	str	r4, [r5, #4]
   d6972:	60ac      	str	r4, [r5, #8]
   d6974:	9307      	str	r3, [sp, #28]
   d6976:	f7fd fb90 	bl	d409a <_Znwj>
   d697a:	4601      	mov	r1, r0
   d697c:	b118      	cbz	r0, d6986 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d697e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6980:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6982:	6044      	str	r4, [r0, #4]
   d6984:	6084      	str	r4, [r0, #8]
   d6986:	a804      	add	r0, sp, #16
   d6988:	9103      	str	r1, [sp, #12]
   d698a:	f7ff feef 	bl	d676c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d698e:	4b22      	ldr	r3, [pc, #136]	; (d6a18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6990:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6992:	2008      	movs	r0, #8
   d6994:	f7fd fb81 	bl	d409a <_Znwj>
   d6998:	4604      	mov	r4, r0
   d699a:	b128      	cbz	r0, d69a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d699c:	9b03      	ldr	r3, [sp, #12]
   d699e:	f840 3b04 	str.w	r3, [r0], #4
   d69a2:	a904      	add	r1, sp, #16
   d69a4:	f7ff fcdd 	bl	d6362 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d69a8:	9500      	str	r5, [sp, #0]
   d69aa:	fa5f f38a 	uxtb.w	r3, sl
   d69ae:	464a      	mov	r2, r9
   d69b0:	4641      	mov	r1, r8
   d69b2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d69b4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d69b6:	f7ff fbf9 	bl	d61ac <spark_send_event>
   d69ba:	b920      	cbnz	r0, d69c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d69bc:	9b03      	ldr	r3, [sp, #12]
   d69be:	785b      	ldrb	r3, [r3, #1]
   d69c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d69c4:	b183      	cbz	r3, d69e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d69c6:	9b03      	ldr	r3, [sp, #12]
   d69c8:	9305      	str	r3, [sp, #20]
   d69ca:	a904      	add	r1, sp, #16
   d69cc:	a806      	add	r0, sp, #24
   d69ce:	f7ff fcc8 	bl	d6362 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d69d2:	a905      	add	r1, sp, #20
   d69d4:	4630      	mov	r0, r6
   d69d6:	f7ff fe8a 	bl	d66ee <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d69da:	a806      	add	r0, sp, #24
   d69dc:	f7fd fe72 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69e0:	a804      	add	r0, sp, #16
   d69e2:	f7fd fe6f 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69e6:	e013      	b.n	d6a10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d69e8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d69ec:	a905      	add	r1, sp, #20
   d69ee:	a803      	add	r0, sp, #12
   d69f0:	9205      	str	r2, [sp, #20]
   d69f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d69f6:	f7ff fefd 	bl	d67f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d69fa:	a805      	add	r0, sp, #20
   d69fc:	f7ff fe20 	bl	d6640 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6a00:	a805      	add	r0, sp, #20
   d6a02:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6a04:	f7ff fe84 	bl	d6710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6a08:	a806      	add	r0, sp, #24
   d6a0a:	f7fd fe5b 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a0e:	e7da      	b.n	d69c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6a10:	4630      	mov	r0, r6
   d6a12:	b00b      	add	sp, #44	; 0x2c
   d6a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a18:	000d6b8d 	.word	0x000d6b8d

000d6a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a22:	d006      	beq.n	d6a32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6a24:	2a03      	cmp	r2, #3
   d6a26:	d017      	beq.n	d6a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6a28:	2a01      	cmp	r2, #1
   d6a2a:	d122      	bne.n	d6a72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6a2c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6a2e:	6003      	str	r3, [r0, #0]
	      break;
   d6a30:	e01f      	b.n	d6a72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6a32:	2018      	movs	r0, #24
   d6a34:	680e      	ldr	r6, [r1, #0]
   d6a36:	f7fd fb30 	bl	d409a <_Znwj>
   d6a3a:	4605      	mov	r5, r0
   d6a3c:	b150      	cbz	r0, d6a54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6a3e:	4631      	mov	r1, r6
   d6a40:	f7ff fec8 	bl	d67d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6a44:	6930      	ldr	r0, [r6, #16]
   d6a46:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6a4a:	b108      	cbz	r0, d6a50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6a4c:	f002 f8ea 	bl	d8c24 <strdup>
   d6a50:	6128      	str	r0, [r5, #16]
   d6a52:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6a54:	6025      	str	r5, [r4, #0]
   d6a56:	e00c      	b.n	d6a72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6a58:	6804      	ldr	r4, [r0, #0]
   d6a5a:	b154      	cbz	r4, d6a72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6a5c:	f104 0010 	add.w	r0, r4, #16
   d6a60:	f7ff fdee 	bl	d6640 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6a64:	4620      	mov	r0, r4
   d6a66:	f7fd fb8e 	bl	d4186 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6a6a:	2118      	movs	r1, #24
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	f001 f978 	bl	d7d62 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6a72:	2000      	movs	r0, #0
   d6a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a76 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6a76:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a78:	2300      	movs	r3, #0
   d6a7a:	6083      	str	r3, [r0, #8]
   d6a7c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6a7e:	4604      	mov	r4, r0
   d6a80:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6a82:	b12b      	cbz	r3, d6a90 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6a84:	2202      	movs	r2, #2
   d6a86:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6a88:	68eb      	ldr	r3, [r5, #12]
   d6a8a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6a8c:	68ab      	ldr	r3, [r5, #8]
   d6a8e:	60a3      	str	r3, [r4, #8]
	}
    }
   d6a90:	4620      	mov	r0, r4
   d6a92:	bd38      	pop	{r3, r4, r5, pc}

000d6a94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a94:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6a96:	b570      	push	{r4, r5, r6, lr}
   d6a98:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a9a:	d006      	beq.n	d6aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6a9c:	2a03      	cmp	r2, #3
   d6a9e:	d011      	beq.n	d6ac4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6aa0:	2a01      	cmp	r2, #1
   d6aa2:	d118      	bne.n	d6ad6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6aa4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6aa6:	6003      	str	r3, [r0, #0]
	      break;
   d6aa8:	e015      	b.n	d6ad6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6aaa:	2014      	movs	r0, #20
   d6aac:	680e      	ldr	r6, [r1, #0]
   d6aae:	f7fd faf4 	bl	d409a <_Znwj>
   d6ab2:	4605      	mov	r5, r0
   d6ab4:	b120      	cbz	r0, d6ac0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6ab6:	4631      	mov	r1, r6
   d6ab8:	f7ff ffdd 	bl	d6a76 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6abc:	7c33      	ldrb	r3, [r6, #16]
   d6abe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6ac0:	6025      	str	r5, [r4, #0]
   d6ac2:	e008      	b.n	d6ad6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6ac4:	6804      	ldr	r4, [r0, #0]
   d6ac6:	b134      	cbz	r4, d6ad6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ac8:	4620      	mov	r0, r4
   d6aca:	f7fd fb5c 	bl	d4186 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6ace:	2114      	movs	r1, #20
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	f001 f946 	bl	d7d62 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6ad6:	2000      	movs	r0, #0
   d6ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6adc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6adc:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6ade:	2300      	movs	r3, #0
   d6ae0:	b087      	sub	sp, #28
   d6ae2:	460c      	mov	r4, r1
   d6ae4:	f3bf 8f5f 	dmb	sy
   d6ae8:	e850 6f00 	ldrex	r6, [r0]
   d6aec:	e840 3200 	strex	r2, r3, [r0]
   d6af0:	2a00      	cmp	r2, #0
   d6af2:	d1f9      	bne.n	d6ae8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6af4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6af8:	2e00      	cmp	r6, #0
   d6afa:	d03f      	beq.n	d6b7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6afc:	4618      	mov	r0, r3
   d6afe:	f7ff fad3 	bl	d60a8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6b02:	4607      	mov	r7, r0
   d6b04:	b120      	cbz	r0, d6b10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6b06:	4621      	mov	r1, r4
   d6b08:	4630      	mov	r0, r6
   d6b0a:	f7ff fe53 	bl	d67b4 <_ZNKSt8functionIFvRKbEEclES1_>
   d6b0e:	e02e      	b.n	d6b6e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b10:	4631      	mov	r1, r6
   d6b12:	a801      	add	r0, sp, #4
   d6b14:	f7ff ffaf 	bl	d6a76 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6b18:	7823      	ldrb	r3, [r4, #0]
   d6b1a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6b1e:	2010      	movs	r0, #16
   d6b20:	f7fd fabb 	bl	d409a <_Znwj>
   d6b24:	4605      	mov	r5, r0
   d6b26:	b1d0      	cbz	r0, d6b5e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b28:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b2a:	2014      	movs	r0, #20
   d6b2c:	f7fd fab5 	bl	d409a <_Znwj>
   d6b30:	4604      	mov	r4, r0
   d6b32:	b178      	cbz	r0, d6b54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b34:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6b36:	4601      	mov	r1, r0
   d6b38:	a801      	add	r0, sp, #4
   d6b3a:	f7ff fe07 	bl	d674c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b3e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6b40:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b42:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b44:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6b46:	9203      	str	r2, [sp, #12]
   d6b48:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b4a:	60e3      	str	r3, [r4, #12]
   d6b4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6b50:	9204      	str	r2, [sp, #16]
   d6b52:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6b54:	4b0a      	ldr	r3, [pc, #40]	; (d6b80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6b56:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6b58:	4b0a      	ldr	r3, [pc, #40]	; (d6b84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b5a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6b5c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b5e:	a801      	add	r0, sp, #4
   d6b60:	f7fd fb11 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6b64:	2200      	movs	r2, #0
   d6b66:	4629      	mov	r1, r5
   d6b68:	4807      	ldr	r0, [pc, #28]	; (d6b88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6b6a:	f7ff faa5 	bl	d60b8 <application_thread_invoke>
   d6b6e:	4630      	mov	r0, r6
   d6b70:	f7fd fb09 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6b74:	2110      	movs	r1, #16
   d6b76:	4630      	mov	r0, r6
   d6b78:	f001 f8f3 	bl	d7d62 <_ZdlPvj>
        }
    }
   d6b7c:	b007      	add	sp, #28
   d6b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b80:	000d67c7 	.word	0x000d67c7
   d6b84:	000d6a95 	.word	0x000d6a95
   d6b88:	000d632b 	.word	0x000d632b

000d6b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6b8c:	b530      	push	{r4, r5, lr}
   d6b8e:	b085      	sub	sp, #20
   d6b90:	4604      	mov	r4, r0
   d6b92:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6b94:	4668      	mov	r0, sp
   d6b96:	4611      	mov	r1, r2
   d6b98:	f7ff fdba 	bl	d6710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6b9c:	b17c      	cbz	r4, d6bbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6b9e:	b224      	sxth	r4, r4
   d6ba0:	4628      	mov	r0, r5
   d6ba2:	b10d      	cbz	r5, d6ba8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6ba4:	f002 f83e 	bl	d8c24 <strdup>
   d6ba8:	9002      	str	r0, [sp, #8]
   d6baa:	a902      	add	r1, sp, #8
   d6bac:	4668      	mov	r0, sp
   d6bae:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6bb2:	f7ff fe1f 	bl	d67f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6bb6:	a802      	add	r0, sp, #8
   d6bb8:	f7ff fd42 	bl	d6640 <_ZN8particle5ErrorD1Ev>
   d6bbc:	e01d      	b.n	d6bfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6bbe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6bc0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6bc4:	f04f 0201 	mov.w	r2, #1
   d6bc8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6bcc:	42a3      	cmp	r3, r4
   d6bce:	d103      	bne.n	d6bd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6bd0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6bd4:	2900      	cmp	r1, #0
   d6bd6:	d1f7      	bne.n	d6bc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6bd8:	d002      	beq.n	d6be0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6bda:	f88d 3008 	strb.w	r3, [sp, #8]
   d6bde:	e00c      	b.n	d6bfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6be0:	f110 010c 	adds.w	r1, r0, #12
   d6be4:	f04f 0301 	mov.w	r3, #1
   d6be8:	bf18      	it	ne
   d6bea:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6bec:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6bf0:	3004      	adds	r0, #4
   d6bf2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6bf6:	f7ff ff71 	bl	d6adc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6bfa:	a801      	add	r0, sp, #4
   d6bfc:	f7fd fd62 	bl	d46c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6c00:	b005      	add	sp, #20
   d6c02:	bd30      	pop	{r4, r5, pc}

000d6c04 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c04:	2200      	movs	r2, #0
   d6c06:	4611      	mov	r1, r2
   d6c08:	6840      	ldr	r0, [r0, #4]
   d6c0a:	f7ff bb2f 	b.w	d626c <network_listening>

000d6c0e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c0e:	2200      	movs	r2, #0
   d6c10:	4611      	mov	r1, r2
   d6c12:	6840      	ldr	r0, [r0, #4]
   d6c14:	f7ff bb3a 	b.w	d628c <network_get_listen_timeout>

000d6c18 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c18:	2200      	movs	r2, #0
   d6c1a:	6840      	ldr	r0, [r0, #4]
   d6c1c:	f7ff bb2e 	b.w	d627c <network_set_listen_timeout>

000d6c20 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c20:	2200      	movs	r2, #0
   d6c22:	f081 0101 	eor.w	r1, r1, #1
   d6c26:	6840      	ldr	r0, [r0, #4]
   d6c28:	f7ff bb18 	b.w	d625c <network_listen>

000d6c2c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6c2c:	2300      	movs	r3, #0
   d6c2e:	461a      	mov	r2, r3
   d6c30:	4619      	mov	r1, r3
   d6c32:	6840      	ldr	r0, [r0, #4]
   d6c34:	f7ff bb0a 	b.w	d624c <network_off>

000d6c38 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6c38:	2300      	movs	r3, #0
   d6c3a:	461a      	mov	r2, r3
   d6c3c:	4619      	mov	r1, r3
   d6c3e:	6840      	ldr	r0, [r0, #4]
   d6c40:	f7ff bafc 	b.w	d623c <network_on>

000d6c44 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6c44:	2200      	movs	r2, #0
   d6c46:	4611      	mov	r1, r2
   d6c48:	6840      	ldr	r0, [r0, #4]
   d6c4a:	f7ff baef 	b.w	d622c <network_ready>

000d6c4e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6c4e:	2200      	movs	r2, #0
   d6c50:	4611      	mov	r1, r2
   d6c52:	6840      	ldr	r0, [r0, #4]
   d6c54:	f7ff bada 	b.w	d620c <network_connecting>

000d6c58 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6c58:	2200      	movs	r2, #0
   d6c5a:	2102      	movs	r1, #2
   d6c5c:	6840      	ldr	r0, [r0, #4]
   d6c5e:	f7ff badd 	b.w	d621c <network_disconnect>

000d6c62 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6c62:	2300      	movs	r3, #0
   d6c64:	461a      	mov	r2, r3
   d6c66:	6840      	ldr	r0, [r0, #4]
   d6c68:	f7ff bac8 	b.w	d61fc <network_connect>

000d6c6c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6c6c:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6c6e:	2203      	movs	r2, #3
   d6c70:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6c72:	4a02      	ldr	r2, [pc, #8]	; (d6c7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6c74:	601a      	str	r2, [r3, #0]
   d6c76:	4770      	bx	lr
   d6c78:	2003e360 	.word	0x2003e360
   d6c7c:	000d9bac 	.word	0x000d9bac

000d6c80 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6c80:	6800      	ldr	r0, [r0, #0]
   d6c82:	f000 b8a5 	b.w	d6dd0 <_ZN7TwoWire4lockEv>

000d6c86 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6c86:	b510      	push	{r4, lr}
   d6c88:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d6c8a:	6001      	str	r1, [r0, #0]
   d6c8c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d6c8e:	b10a      	cbz	r2, d6c94 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6c90:	f7ff fff6 	bl	d6c80 <_ZN9FuelGauge4lockEv>
    }
}
   d6c94:	4620      	mov	r0, r4
   d6c96:	bd10      	pop	{r4, pc}

000d6c98 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d6c98:	b538      	push	{r3, r4, r5, lr}
   d6c9a:	4604      	mov	r4, r0
   d6c9c:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6c9e:	f001 f815 	bl	d7ccc <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6ca2:	462a      	mov	r2, r5
   d6ca4:	4601      	mov	r1, r0
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	f7ff ffed 	bl	d6c86 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6cac:	4620      	mov	r0, r4
   d6cae:	bd38      	pop	{r3, r4, r5, pc}

000d6cb0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6cb0:	6800      	ldr	r0, [r0, #0]
   d6cb2:	f000 b896 	b.w	d6de2 <_ZN7TwoWire6unlockEv>

000d6cb6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6cb6:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6cb8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6cba:	4604      	mov	r4, r0
{
    if (lock_) {
   d6cbc:	b10b      	cbz	r3, d6cc2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6cbe:	f7ff fff7 	bl	d6cb0 <_ZN9FuelGauge6unlockEv>
    }
}
   d6cc2:	4620      	mov	r0, r4
   d6cc4:	bd10      	pop	{r4, pc}

000d6cc6 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6cc6:	4770      	bx	lr

000d6cc8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cca:	4606      	mov	r6, r0
   d6ccc:	4615      	mov	r5, r2
   d6cce:	460c      	mov	r4, r1
   d6cd0:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6cd2:	42bc      	cmp	r4, r7
   d6cd4:	d006      	beq.n	d6ce4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6cd6:	6833      	ldr	r3, [r6, #0]
   d6cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6cdc:	689b      	ldr	r3, [r3, #8]
   d6cde:	4630      	mov	r0, r6
   d6ce0:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6ce2:	e7f6      	b.n	d6cd2 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6ce4:	4628      	mov	r0, r5
   d6ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ce8 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6ce8:	2200      	movs	r2, #0
   d6cea:	7c00      	ldrb	r0, [r0, #16]
   d6cec:	f7ff b8b2 	b.w	d5e54 <HAL_I2C_Write_Data>

000d6cf0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6cf0:	2100      	movs	r1, #0
   d6cf2:	7c00      	ldrb	r0, [r0, #16]
   d6cf4:	f7ff b8b6 	b.w	d5e64 <HAL_I2C_Available_Data>

000d6cf8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6cf8:	2100      	movs	r1, #0
   d6cfa:	7c00      	ldrb	r0, [r0, #16]
   d6cfc:	f7ff b8ba 	b.w	d5e74 <HAL_I2C_Read_Data>

000d6d00 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d00:	2100      	movs	r1, #0
   d6d02:	7c00      	ldrb	r0, [r0, #16]
   d6d04:	f7ff b8be 	b.w	d5e84 <HAL_I2C_Peek_Data>

000d6d08 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d08:	2100      	movs	r1, #0
   d6d0a:	7c00      	ldrb	r0, [r0, #16]
   d6d0c:	f7ff b8c2 	b.w	d5e94 <HAL_I2C_Flush_Data>

000d6d10 <_ZN7TwoWireD0Ev>:
   d6d10:	b510      	push	{r4, lr}
   d6d12:	2114      	movs	r1, #20
   d6d14:	4604      	mov	r4, r0
   d6d16:	f001 f824 	bl	d7d62 <_ZdlPvj>
   d6d1a:	4620      	mov	r0, r4
   d6d1c:	bd10      	pop	{r4, pc}
	...

000d6d20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d20:	b510      	push	{r4, lr}
   d6d22:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6d24:	2300      	movs	r3, #0
   d6d26:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d2c:	60a3      	str	r3, [r4, #8]
   d6d2e:	4b04      	ldr	r3, [pc, #16]	; (d6d40 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6d30:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d32:	4608      	mov	r0, r1
   d6d34:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6d36:	4611      	mov	r1, r2
   d6d38:	f7ff f8bc 	bl	d5eb4 <HAL_I2C_Init>
}
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	bd10      	pop	{r4, pc}
   d6d40:	000d9be0 	.word	0x000d9be0

000d6d44 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6d44:	2300      	movs	r3, #0
   d6d46:	461a      	mov	r2, r3
   d6d48:	4619      	mov	r1, r3
   d6d4a:	7c00      	ldrb	r0, [r0, #16]
   d6d4c:	f7ff b86a 	b.w	d5e24 <HAL_I2C_Begin>

000d6d50 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6d50:	b570      	push	{r4, r5, r6, lr}
   d6d52:	460c      	mov	r4, r1
   d6d54:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6d56:	2514      	movs	r5, #20
   d6d58:	4606      	mov	r6, r0
   d6d5a:	462a      	mov	r2, r5
   d6d5c:	2100      	movs	r1, #0
   d6d5e:	a801      	add	r0, sp, #4
   d6d60:	f001 ff1d 	bl	d8b9e <memset>
   d6d64:	7823      	ldrb	r3, [r4, #0]
   d6d66:	f88d 3008 	strb.w	r3, [sp, #8]
   d6d6a:	6863      	ldr	r3, [r4, #4]
   d6d6c:	9303      	str	r3, [sp, #12]
   d6d6e:	68e3      	ldr	r3, [r4, #12]
   d6d70:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6d72:	2200      	movs	r2, #0
   d6d74:	7a23      	ldrb	r3, [r4, #8]
   d6d76:	7c30      	ldrb	r0, [r6, #16]
   d6d78:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6d7c:	a901      	add	r1, sp, #4
   d6d7e:	9305      	str	r3, [sp, #20]
   d6d80:	f7ff f8b0 	bl	d5ee4 <HAL_I2C_Request_Data_Ex>
}
   d6d84:	b006      	add	sp, #24
   d6d86:	bd70      	pop	{r4, r5, r6, pc}

000d6d88 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d8a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6d8c:	f88d 1000 	strb.w	r1, [sp]
   d6d90:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6d94:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d96:	bf18      	it	ne
   d6d98:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6d9a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6d9c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d9e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6da2:	f7ff ffd5 	bl	d6d50 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6da6:	b005      	add	sp, #20
   d6da8:	f85d fb04 	ldr.w	pc, [sp], #4

000d6dac <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6dac:	2301      	movs	r3, #1
   d6dae:	f7ff bfeb 	b.w	d6d88 <_ZN7TwoWire11requestFromEhjh>

000d6db2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6db2:	2200      	movs	r2, #0
   d6db4:	7c00      	ldrb	r0, [r0, #16]
   d6db6:	f7ff b83d 	b.w	d5e34 <HAL_I2C_Begin_Transmission>

000d6dba <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6dba:	2200      	movs	r2, #0
   d6dbc:	7c00      	ldrb	r0, [r0, #16]
   d6dbe:	f7ff b841 	b.w	d5e44 <HAL_I2C_End_Transmission>

000d6dc2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6dc2:	2101      	movs	r1, #1
   d6dc4:	f7ff bff9 	b.w	d6dba <_ZN7TwoWire15endTransmissionEh>

000d6dc8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6dc8:	2100      	movs	r1, #0
   d6dca:	7c00      	ldrb	r0, [r0, #16]
   d6dcc:	f7ff b86a 	b.w	d5ea4 <HAL_I2C_Is_Enabled>

000d6dd0 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6dd0:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6dd2:	2100      	movs	r1, #0
   d6dd4:	7c00      	ldrb	r0, [r0, #16]
   d6dd6:	f7ff f875 	bl	d5ec4 <HAL_I2C_Acquire>
}
   d6dda:	fab0 f080 	clz	r0, r0
   d6dde:	0940      	lsrs	r0, r0, #5
   d6de0:	bd08      	pop	{r3, pc}

000d6de2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6de2:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6de4:	2100      	movs	r1, #0
   d6de6:	7c00      	ldrb	r0, [r0, #16]
   d6de8:	f7ff f874 	bl	d5ed4 <HAL_I2C_Release>
}
   d6dec:	fab0 f080 	clz	r0, r0
   d6df0:	0940      	lsrs	r0, r0, #5
   d6df2:	bd08      	pop	{r3, pc}

000d6df4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6df4:	4770      	bx	lr

000d6df6 <_ZN9IPAddressD0Ev>:
   d6df6:	b510      	push	{r4, lr}
   d6df8:	2118      	movs	r1, #24
   d6dfa:	4604      	mov	r4, r0
   d6dfc:	f000 ffb1 	bl	d7d62 <_ZdlPvj>
   d6e00:	4620      	mov	r0, r4
   d6e02:	bd10      	pop	{r4, pc}

000d6e04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e06:	7d03      	ldrb	r3, [r0, #20]
   d6e08:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e0a:	b08d      	sub	sp, #52	; 0x34
   d6e0c:	460e      	mov	r6, r1
   d6e0e:	f100 0704 	add.w	r7, r0, #4
   d6e12:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e16:	d002      	beq.n	d6e1e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e18:	f100 0508 	add.w	r5, r0, #8
   d6e1c:	e018      	b.n	d6e50 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e1e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e20:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e22:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e26:	232f      	movs	r3, #47	; 0x2f
   d6e28:	462a      	mov	r2, r5
   d6e2a:	200a      	movs	r0, #10
   d6e2c:	f7ff f862 	bl	d5ef4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e30:	4628      	mov	r0, r5
   d6e32:	f001 ff12 	bl	d8c5a <strlen>
   d6e36:	6833      	ldr	r3, [r6, #0]
   d6e38:	4602      	mov	r2, r0
   d6e3a:	68db      	ldr	r3, [r3, #12]
   d6e3c:	4629      	mov	r1, r5
   d6e3e:	4630      	mov	r0, r6
   d6e40:	4798      	blx	r3
   d6e42:	e00f      	b.n	d6e64 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6e44:	b124      	cbz	r4, d6e50 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6e46:	212e      	movs	r1, #46	; 0x2e
   d6e48:	4630      	mov	r0, r6
   d6e4a:	f000 f9d5 	bl	d71f8 <_ZN5Print5printEc>
   d6e4e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6e50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6e54:	220a      	movs	r2, #10
   d6e56:	4630      	mov	r0, r6
   d6e58:	f000 f9e7 	bl	d722a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e5c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e5e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e60:	d1f0      	bne.n	d6e44 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e62:	4620      	mov	r0, r4
    }
    return n;
}
   d6e64:	b00d      	add	sp, #52	; 0x34
   d6e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e68 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6e68:	b510      	push	{r4, lr}
   d6e6a:	4b05      	ldr	r3, [pc, #20]	; (d6e80 <_ZN9IPAddressC1Ev+0x18>)
   d6e6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e6e:	2211      	movs	r2, #17
   d6e70:	f840 3b04 	str.w	r3, [r0], #4
   d6e74:	2100      	movs	r1, #0
   d6e76:	f001 fe92 	bl	d8b9e <memset>
{
    clear();
}
   d6e7a:	4620      	mov	r0, r4
   d6e7c:	bd10      	pop	{r4, pc}
   d6e7e:	bf00      	nop
   d6e80:	000d9c08 	.word	0x000d9c08

000d6e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6e84:	4603      	mov	r3, r0
   d6e86:	4a07      	ldr	r2, [pc, #28]	; (d6ea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6e88:	b510      	push	{r4, lr}
   d6e8a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6e8e:	f101 0210 	add.w	r2, r1, #16
   d6e92:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e96:	f843 4b04 	str.w	r4, [r3], #4
   d6e9a:	4291      	cmp	r1, r2
   d6e9c:	d1f9      	bne.n	d6e92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6e9e:	780a      	ldrb	r2, [r1, #0]
   d6ea0:	701a      	strb	r2, [r3, #0]
}
   d6ea2:	bd10      	pop	{r4, pc}
   d6ea4:	000d9c08 	.word	0x000d9c08

000d6ea8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6ea8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6eaa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6eae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6eb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6eb6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6eba:	2304      	movs	r3, #4
   d6ebc:	6041      	str	r1, [r0, #4]
   d6ebe:	7503      	strb	r3, [r0, #20]
   d6ec0:	bd10      	pop	{r4, pc}

000d6ec2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6ec2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6ec4:	780d      	ldrb	r5, [r1, #0]
   d6ec6:	788b      	ldrb	r3, [r1, #2]
   d6ec8:	784a      	ldrb	r2, [r1, #1]
   d6eca:	78c9      	ldrb	r1, [r1, #3]
   d6ecc:	9100      	str	r1, [sp, #0]
   d6ece:	4629      	mov	r1, r5
   d6ed0:	f7ff ffea 	bl	d6ea8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6ed4:	b003      	add	sp, #12
   d6ed6:	bd30      	pop	{r4, r5, pc}

000d6ed8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6ed8:	4b01      	ldr	r3, [pc, #4]	; (d6ee0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6eda:	4a02      	ldr	r2, [pc, #8]	; (d6ee4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6edc:	601a      	str	r2, [r3, #0]
   d6ede:	4770      	bx	lr
   d6ee0:	2003e368 	.word	0x2003e368
   d6ee4:	000d9c87 	.word	0x000d9c87

000d6ee8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ee8:	2200      	movs	r2, #0
   d6eea:	4611      	mov	r1, r2
   d6eec:	6840      	ldr	r0, [r0, #4]
   d6eee:	f7ff b9bd 	b.w	d626c <network_listening>

000d6ef2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ef2:	2200      	movs	r2, #0
   d6ef4:	4611      	mov	r1, r2
   d6ef6:	6840      	ldr	r0, [r0, #4]
   d6ef8:	f7ff b9c8 	b.w	d628c <network_get_listen_timeout>

000d6efc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6efc:	2200      	movs	r2, #0
   d6efe:	6840      	ldr	r0, [r0, #4]
   d6f00:	f7ff b9bc 	b.w	d627c <network_set_listen_timeout>

000d6f04 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f04:	2200      	movs	r2, #0
   d6f06:	f081 0101 	eor.w	r1, r1, #1
   d6f0a:	6840      	ldr	r0, [r0, #4]
   d6f0c:	f7ff b9a6 	b.w	d625c <network_listen>

000d6f10 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6f10:	2300      	movs	r3, #0
   d6f12:	461a      	mov	r2, r3
   d6f14:	2101      	movs	r1, #1
   d6f16:	6840      	ldr	r0, [r0, #4]
   d6f18:	f7ff b998 	b.w	d624c <network_off>

000d6f1c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f1c:	2300      	movs	r3, #0
   d6f1e:	461a      	mov	r2, r3
   d6f20:	4619      	mov	r1, r3
   d6f22:	6840      	ldr	r0, [r0, #4]
   d6f24:	f7ff b98a 	b.w	d623c <network_on>

000d6f28 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f28:	2200      	movs	r2, #0
   d6f2a:	4611      	mov	r1, r2
   d6f2c:	6840      	ldr	r0, [r0, #4]
   d6f2e:	f7ff b97d 	b.w	d622c <network_ready>

000d6f32 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f32:	2200      	movs	r2, #0
   d6f34:	4611      	mov	r1, r2
   d6f36:	6840      	ldr	r0, [r0, #4]
   d6f38:	f7ff b968 	b.w	d620c <network_connecting>

000d6f3c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f3c:	2200      	movs	r2, #0
   d6f3e:	2102      	movs	r1, #2
   d6f40:	6840      	ldr	r0, [r0, #4]
   d6f42:	f7ff b96b 	b.w	d621c <network_disconnect>

000d6f46 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f46:	2300      	movs	r3, #0
   d6f48:	461a      	mov	r2, r3
   d6f4a:	6840      	ldr	r0, [r0, #4]
   d6f4c:	f7ff b956 	b.w	d61fc <network_connect>

000d6f50 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6f50:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f52:	4605      	mov	r5, r0
   d6f54:	b188      	cbz	r0, d6f7a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f56:	6804      	ldr	r4, [r0, #0]
   d6f58:	b14c      	cbz	r4, d6f6e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6f5a:	68a3      	ldr	r3, [r4, #8]
   d6f5c:	b11b      	cbz	r3, d6f66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f5e:	2203      	movs	r2, #3
   d6f60:	4621      	mov	r1, r4
   d6f62:	4620      	mov	r0, r4
   d6f64:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f66:	2110      	movs	r1, #16
   d6f68:	4620      	mov	r0, r4
   d6f6a:	f000 fefa 	bl	d7d62 <_ZdlPvj>
   d6f6e:	4628      	mov	r0, r5
   d6f70:	2114      	movs	r1, #20
      }
   d6f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f76:	f000 bef4 	b.w	d7d62 <_ZdlPvj>
   d6f7a:	bd38      	pop	{r3, r4, r5, pc}

000d6f7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6f7c:	b110      	cbz	r0, d6f84 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6f7e:	6803      	ldr	r3, [r0, #0]
   d6f80:	685b      	ldr	r3, [r3, #4]
   d6f82:	4718      	bx	r3
   d6f84:	4770      	bx	lr

000d6f86 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6f86:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6f88:	6803      	ldr	r3, [r0, #0]
   d6f8a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6f8c:	b1bb      	cbz	r3, d6fbe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6f8e:	6858      	ldr	r0, [r3, #4]
   d6f90:	f7fe fe48 	bl	d5c24 <os_thread_is_current>
   d6f94:	b978      	cbnz	r0, d6fb6 <_ZN6ThreadD1Ev+0x30>
   d6f96:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6f98:	7c5a      	ldrb	r2, [r3, #17]
   d6f9a:	b912      	cbnz	r2, d6fa2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6f9c:	6858      	ldr	r0, [r3, #4]
   d6f9e:	f7fe fe51 	bl	d5c44 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6fa2:	6823      	ldr	r3, [r4, #0]
   d6fa4:	6858      	ldr	r0, [r3, #4]
   d6fa6:	f7fe fe55 	bl	d5c54 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6faa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6fac:	2300      	movs	r3, #0
   d6fae:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6fb0:	b128      	cbz	r0, d6fbe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6fb2:	f7ff ffcd 	bl	d6f50 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fb6:	6820      	ldr	r0, [r4, #0]
   d6fb8:	b108      	cbz	r0, d6fbe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6fba:	f7ff ffc9 	bl	d6f50 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6fbe:	4620      	mov	r0, r4
   d6fc0:	bd10      	pop	{r4, pc}

000d6fc2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6fc2:	b538      	push	{r3, r4, r5, lr}
   d6fc4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fc6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6fca:	b108      	cbz	r0, d6fd0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6fcc:	f7fd f869 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6fd0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6fd4:	b108      	cbz	r0, d6fda <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6fd6:	f7fe fe75 	bl	d5cc4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fda:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6fde:	b135      	cbz	r5, d6fee <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fe0:	4628      	mov	r0, r5
   d6fe2:	f7ff ffd0 	bl	d6f86 <_ZN6ThreadD1Ev>
   d6fe6:	2104      	movs	r1, #4
   d6fe8:	4628      	mov	r0, r5
   d6fea:	f000 feba 	bl	d7d62 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fee:	6820      	ldr	r0, [r4, #0]
   d6ff0:	b108      	cbz	r0, d6ff6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6ff2:	f7ff ffc3 	bl	d6f7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6ff6:	4620      	mov	r0, r4
   d6ff8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ffc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6ffc:	b510      	push	{r4, lr}
   d6ffe:	4b04      	ldr	r3, [pc, #16]	; (d7010 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7000:	4604      	mov	r4, r0
   d7002:	f840 3b08 	str.w	r3, [r0], #8
   d7006:	f7ff ffdc 	bl	d6fc2 <_ZN5spark11MeshPublishD1Ev>
   d700a:	4620      	mov	r0, r4
   d700c:	bd10      	pop	{r4, pc}
   d700e:	bf00      	nop
   d7010:	000d9cf8 	.word	0x000d9cf8

000d7014 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7014:	b538      	push	{r3, r4, r5, lr}
   d7016:	4c0e      	ldr	r4, [pc, #56]	; (d7050 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7018:	4b0e      	ldr	r3, [pc, #56]	; (d7054 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d701a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d701c:	2500      	movs	r5, #0
   d701e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7020:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7024:	6063      	str	r3, [r4, #4]
   d7026:	60a5      	str	r5, [r4, #8]
   d7028:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d702c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7030:	f7fe fe40 	bl	d5cb4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7034:	4b08      	ldr	r3, [pc, #32]	; (d7058 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7036:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d703a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d703e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7040:	4620      	mov	r0, r4
   d7042:	4a06      	ldr	r2, [pc, #24]	; (d705c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7044:	4906      	ldr	r1, [pc, #24]	; (d7060 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d704a:	f000 be85 	b.w	d7d58 <__aeabi_atexit>
   d704e:	bf00      	nop
   d7050:	2003e36c 	.word	0x2003e36c
   d7054:	000d9d2c 	.word	0x000d9d2c
   d7058:	000d9cf8 	.word	0x000d9cf8
   d705c:	2003e1b0 	.word	0x2003e1b0
   d7060:	000d6ffd 	.word	0x000d6ffd

000d7064 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7064:	2300      	movs	r3, #0
   d7066:	461a      	mov	r2, r3
   d7068:	6840      	ldr	r0, [r0, #4]
   d706a:	f7ff b8c7 	b.w	d61fc <network_connect>

000d706e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d706e:	2200      	movs	r2, #0
   d7070:	2102      	movs	r1, #2
   d7072:	6840      	ldr	r0, [r0, #4]
   d7074:	f7ff b8d2 	b.w	d621c <network_disconnect>

000d7078 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7078:	2200      	movs	r2, #0
   d707a:	4611      	mov	r1, r2
   d707c:	6840      	ldr	r0, [r0, #4]
   d707e:	f7ff b8c5 	b.w	d620c <network_connecting>

000d7082 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7082:	2200      	movs	r2, #0
   d7084:	4611      	mov	r1, r2
   d7086:	6840      	ldr	r0, [r0, #4]
   d7088:	f7ff b8d0 	b.w	d622c <network_ready>

000d708c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d708c:	2300      	movs	r3, #0
   d708e:	461a      	mov	r2, r3
   d7090:	4619      	mov	r1, r3
   d7092:	6840      	ldr	r0, [r0, #4]
   d7094:	f7ff b8d2 	b.w	d623c <network_on>

000d7098 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7098:	2300      	movs	r3, #0
   d709a:	461a      	mov	r2, r3
   d709c:	4619      	mov	r1, r3
   d709e:	6840      	ldr	r0, [r0, #4]
   d70a0:	f7ff b8d4 	b.w	d624c <network_off>

000d70a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d70a4:	2200      	movs	r2, #0
   d70a6:	f081 0101 	eor.w	r1, r1, #1
   d70aa:	6840      	ldr	r0, [r0, #4]
   d70ac:	f7ff b8d6 	b.w	d625c <network_listen>

000d70b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d70b0:	2200      	movs	r2, #0
   d70b2:	6840      	ldr	r0, [r0, #4]
   d70b4:	f7ff b8e2 	b.w	d627c <network_set_listen_timeout>

000d70b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d70b8:	2200      	movs	r2, #0
   d70ba:	4611      	mov	r1, r2
   d70bc:	6840      	ldr	r0, [r0, #4]
   d70be:	f7ff b8e5 	b.w	d628c <network_get_listen_timeout>

000d70c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d70c2:	2200      	movs	r2, #0
   d70c4:	4611      	mov	r1, r2
   d70c6:	6840      	ldr	r0, [r0, #4]
   d70c8:	f7ff b8d0 	b.w	d626c <network_listening>

000d70cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d70cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70d0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d70d2:	b095      	sub	sp, #84	; 0x54
   d70d4:	4616      	mov	r6, r2
   d70d6:	460d      	mov	r5, r1
   d70d8:	4607      	mov	r7, r0
    IPAddress addr;
   d70da:	f7ff fec5 	bl	d6e68 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d70de:	4621      	mov	r1, r4
   d70e0:	2220      	movs	r2, #32
   d70e2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d70e6:	f001 fd5a 	bl	d8b9e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d70ea:	2340      	movs	r3, #64	; 0x40
   d70ec:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d70ee:	4621      	mov	r1, r4
   d70f0:	466b      	mov	r3, sp
   d70f2:	aa0c      	add	r2, sp, #48	; 0x30
   d70f4:	4630      	mov	r0, r6
   d70f6:	f7fe ff0d 	bl	d5f14 <netdb_getaddrinfo>
    if (!r) {
   d70fa:	4604      	mov	r4, r0
   d70fc:	2800      	cmp	r0, #0
   d70fe:	d144      	bne.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7100:	4602      	mov	r2, r0
   d7102:	2101      	movs	r1, #1
   d7104:	6868      	ldr	r0, [r5, #4]
   d7106:	f7ff f891 	bl	d622c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d710a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d710c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d710e:	4622      	mov	r2, r4
   d7110:	6868      	ldr	r0, [r5, #4]
   d7112:	f7ff f88b 	bl	d622c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7116:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7118:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d711a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d711c:	2e00      	cmp	r6, #0
   d711e:	d034      	beq.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7120:	2900      	cmp	r1, #0
   d7122:	d132      	bne.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7124:	6873      	ldr	r3, [r6, #4]
   d7126:	2b02      	cmp	r3, #2
   d7128:	d002      	beq.n	d7130 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d712a:	2b0a      	cmp	r3, #10
   d712c:	d009      	beq.n	d7142 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d712e:	e02a      	b.n	d7186 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7130:	f1b8 0f00 	cmp.w	r8, #0
   d7134:	d027      	beq.n	d7186 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7136:	6971      	ldr	r1, [r6, #20]
   d7138:	4638      	mov	r0, r7
   d713a:	3104      	adds	r1, #4
   d713c:	f7ff fec1 	bl	d6ec2 <_ZN9IPAddressaSEPKh>
   d7140:	e020      	b.n	d7184 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7142:	f1b9 0f00 	cmp.w	r9, #0
   d7146:	d01e      	beq.n	d7186 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7148:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d714a:	2211      	movs	r2, #17
   d714c:	a801      	add	r0, sp, #4
   d714e:	f001 fd26 	bl	d8b9e <memset>
                    a.v = 6;
   d7152:	2306      	movs	r3, #6
   d7154:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7158:	ad01      	add	r5, sp, #4
   d715a:	f104 0308 	add.w	r3, r4, #8
   d715e:	3418      	adds	r4, #24
   d7160:	6818      	ldr	r0, [r3, #0]
   d7162:	6859      	ldr	r1, [r3, #4]
   d7164:	462a      	mov	r2, r5
   d7166:	c203      	stmia	r2!, {r0, r1}
   d7168:	3308      	adds	r3, #8
   d716a:	42a3      	cmp	r3, r4
   d716c:	4615      	mov	r5, r2
   d716e:	d1f7      	bne.n	d7160 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7170:	a901      	add	r1, sp, #4
   d7172:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7174:	ad07      	add	r5, sp, #28
   d7176:	f7ff fe85 	bl	d6e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d717a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d717c:	1d3c      	adds	r4, r7, #4
   d717e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7180:	682b      	ldr	r3, [r5, #0]
   d7182:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7184:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7186:	69f6      	ldr	r6, [r6, #28]
   d7188:	e7c8      	b.n	d711c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d718a:	9800      	ldr	r0, [sp, #0]
   d718c:	f7fe feba 	bl	d5f04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7190:	4638      	mov	r0, r7
   d7192:	b015      	add	sp, #84	; 0x54
   d7194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7198 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7198:	4b02      	ldr	r3, [pc, #8]	; (d71a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d719a:	4a03      	ldr	r2, [pc, #12]	; (d71a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d719c:	601a      	str	r2, [r3, #0]
   d719e:	2200      	movs	r2, #0
   d71a0:	605a      	str	r2, [r3, #4]
   d71a2:	4770      	bx	lr
   d71a4:	2003e540 	.word	0x2003e540
   d71a8:	000d9d2c 	.word	0x000d9d2c

000d71ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d71ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71ae:	4606      	mov	r6, r0
   d71b0:	460d      	mov	r5, r1
   d71b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d71b4:	2400      	movs	r4, #0
  while (size--) {
   d71b6:	42bd      	cmp	r5, r7
   d71b8:	d00c      	beq.n	d71d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d71ba:	6833      	ldr	r3, [r6, #0]
   d71bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d71c0:	689b      	ldr	r3, [r3, #8]
   d71c2:	4630      	mov	r0, r6
   d71c4:	4798      	blx	r3
     if (chunk>=0)
   d71c6:	2800      	cmp	r0, #0
   d71c8:	db01      	blt.n	d71ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d71ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d71cc:	e7f3      	b.n	d71b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d71ce:	2c00      	cmp	r4, #0
   d71d0:	bf08      	it	eq
   d71d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d71d4:	4620      	mov	r0, r4
   d71d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d71d8:	b570      	push	{r4, r5, r6, lr}
   d71da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d71dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d71de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d71e0:	b149      	cbz	r1, d71f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d71e2:	f001 fd3a 	bl	d8c5a <strlen>
   d71e6:	682b      	ldr	r3, [r5, #0]
   d71e8:	4602      	mov	r2, r0
   d71ea:	4621      	mov	r1, r4
   d71ec:	4628      	mov	r0, r5
   d71ee:	68db      	ldr	r3, [r3, #12]
    }
   d71f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d71f4:	4718      	bx	r3
    }
   d71f6:	bd70      	pop	{r4, r5, r6, pc}

000d71f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d71f8:	6803      	ldr	r3, [r0, #0]
   d71fa:	689b      	ldr	r3, [r3, #8]
   d71fc:	4718      	bx	r3

000d71fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d71fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7200:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7202:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7204:	f7ff fff8 	bl	d71f8 <_ZN5Print5printEc>
  n += print('\n');
   d7208:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d720a:	4604      	mov	r4, r0
  n += print('\n');
   d720c:	4628      	mov	r0, r5
   d720e:	f7ff fff3 	bl	d71f8 <_ZN5Print5printEc>
  return n;
}
   d7212:	4420      	add	r0, r4
   d7214:	bd38      	pop	{r3, r4, r5, pc}

000d7216 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7216:	b538      	push	{r3, r4, r5, lr}
   d7218:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d721a:	f7ff ffdd 	bl	d71d8 <_ZN5Print5writeEPKc>
   d721e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7220:	4628      	mov	r0, r5
   d7222:	f7ff ffec 	bl	d71fe <_ZN5Print7printlnEv>
  return n;
}
   d7226:	4420      	add	r0, r4
   d7228:	bd38      	pop	{r3, r4, r5, pc}

000d722a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d722a:	b530      	push	{r4, r5, lr}
   d722c:	b08b      	sub	sp, #44	; 0x2c
   d722e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7230:	2100      	movs	r1, #0
   d7232:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7236:	2a01      	cmp	r2, #1
   d7238:	bf98      	it	ls
   d723a:	220a      	movls	r2, #10
   d723c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7240:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7244:	fb05 3312 	mls	r3, r5, r2, r3
   d7248:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d724c:	2b09      	cmp	r3, #9
   d724e:	bf94      	ite	ls
   d7250:	3330      	addls	r3, #48	; 0x30
   d7252:	3337      	addhi	r3, #55	; 0x37
   d7254:	b2db      	uxtb	r3, r3
   d7256:	4621      	mov	r1, r4
   d7258:	f804 3901 	strb.w	r3, [r4], #-1
   d725c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d725e:	2d00      	cmp	r5, #0
   d7260:	d1ee      	bne.n	d7240 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7262:	f7ff ffb9 	bl	d71d8 <_ZN5Print5writeEPKc>
}
   d7266:	b00b      	add	sp, #44	; 0x2c
   d7268:	bd30      	pop	{r4, r5, pc}

000d726a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d726a:	b510      	push	{r4, lr}
   d726c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d726e:	f7fc ff8a 	bl	d4186 <_ZNSt14_Function_baseD1Ev>
   d7272:	4620      	mov	r0, r4
   d7274:	bd10      	pop	{r4, pc}
	...

000d7278 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7278:	4803      	ldr	r0, [pc, #12]	; (d7288 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d727a:	4a04      	ldr	r2, [pc, #16]	; (d728c <_GLOBAL__sub_I_RGB+0x14>)
   d727c:	4904      	ldr	r1, [pc, #16]	; (d7290 <_GLOBAL__sub_I_RGB+0x18>)
   d727e:	2300      	movs	r3, #0
   d7280:	6083      	str	r3, [r0, #8]
   d7282:	f000 bd69 	b.w	d7d58 <__aeabi_atexit>
   d7286:	bf00      	nop
   d7288:	2003e548 	.word	0x2003e548
   d728c:	2003e1b0 	.word	0x2003e1b0
   d7290:	000d726b 	.word	0x000d726b

000d7294 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7294:	4770      	bx	lr

000d7296 <_ZN8SPIClassD0Ev>:
   d7296:	b510      	push	{r4, lr}
   d7298:	210c      	movs	r1, #12
   d729a:	4604      	mov	r4, r0
   d729c:	f000 fd61 	bl	d7d62 <_ZdlPvj>
   d72a0:	4620      	mov	r0, r4
   d72a2:	bd10      	pop	{r4, pc}

000d72a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d72a4:	b510      	push	{r4, lr}
   d72a6:	4b05      	ldr	r3, [pc, #20]	; (d72bc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d72a8:	6003      	str	r3, [r0, #0]
   d72aa:	4604      	mov	r4, r0
{
    _spi = spi;
   d72ac:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d72ae:	4608      	mov	r0, r1
   d72b0:	f7fe fe38 	bl	d5f24 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d72b4:	2300      	movs	r3, #0
   d72b6:	60a3      	str	r3, [r4, #8]
}
   d72b8:	4620      	mov	r0, r4
   d72ba:	bd10      	pop	{r4, pc}
   d72bc:	000d9d60 	.word	0x000d9d60

000d72c0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d72c0:	7900      	ldrb	r0, [r0, #4]
   d72c2:	f7fe be37 	b.w	d5f34 <HAL_SPI_Is_Enabled>

000d72c6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d72c6:	b510      	push	{r4, lr}
   d72c8:	4604      	mov	r4, r0
{
	free(buffer);
   d72ca:	6800      	ldr	r0, [r0, #0]
   d72cc:	f7fe ffee 	bl	d62ac <free>
}
   d72d0:	4620      	mov	r0, r4
   d72d2:	bd10      	pop	{r4, pc}

000d72d4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d72d4:	b510      	push	{r4, lr}
   d72d6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d72d8:	6800      	ldr	r0, [r0, #0]
   d72da:	b108      	cbz	r0, d72e0 <_ZN6String10invalidateEv+0xc>
   d72dc:	f7fe ffe6 	bl	d62ac <free>
	buffer = NULL;
   d72e0:	2300      	movs	r3, #0
   d72e2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d72e4:	60a3      	str	r3, [r4, #8]
   d72e6:	6063      	str	r3, [r4, #4]
   d72e8:	bd10      	pop	{r4, pc}

000d72ea <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d72ea:	b538      	push	{r3, r4, r5, lr}
   d72ec:	4604      	mov	r4, r0
   d72ee:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d72f0:	6800      	ldr	r0, [r0, #0]
   d72f2:	3101      	adds	r1, #1
   d72f4:	f7fe ffe2 	bl	d62bc <realloc>
	if (newbuffer) {
   d72f8:	b110      	cbz	r0, d7300 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d72fa:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d72fe:	2001      	movs	r0, #1
	}
	return 0;
}
   d7300:	bd38      	pop	{r3, r4, r5, pc}

000d7302 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7302:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7304:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7306:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7308:	b113      	cbz	r3, d7310 <_ZN6String7reserveEj+0xe>
   d730a:	6843      	ldr	r3, [r0, #4]
   d730c:	428b      	cmp	r3, r1
   d730e:	d207      	bcs.n	d7320 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7310:	4620      	mov	r0, r4
   d7312:	f7ff ffea 	bl	d72ea <_ZN6String12changeBufferEj>
   d7316:	b120      	cbz	r0, d7322 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7318:	68a3      	ldr	r3, [r4, #8]
   d731a:	b90b      	cbnz	r3, d7320 <_ZN6String7reserveEj+0x1e>
   d731c:	6822      	ldr	r2, [r4, #0]
   d731e:	7013      	strb	r3, [r2, #0]
   d7320:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7322:	bd10      	pop	{r4, pc}

000d7324 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7324:	b570      	push	{r4, r5, r6, lr}
   d7326:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7328:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d732a:	4604      	mov	r4, r0
   d732c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d732e:	f7ff ffe8 	bl	d7302 <_ZN6String7reserveEj>
   d7332:	b918      	cbnz	r0, d733c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7334:	4620      	mov	r0, r4
   d7336:	f7ff ffcd 	bl	d72d4 <_ZN6String10invalidateEv>
		return *this;
   d733a:	e009      	b.n	d7350 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d733c:	462a      	mov	r2, r5
   d733e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7340:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7342:	6820      	ldr	r0, [r4, #0]
   d7344:	f001 fc20 	bl	d8b88 <memcpy>
	buffer[len] = 0;
   d7348:	6822      	ldr	r2, [r4, #0]
   d734a:	68a3      	ldr	r3, [r4, #8]
   d734c:	2100      	movs	r1, #0
   d734e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7350:	4620      	mov	r0, r4
   d7352:	bd70      	pop	{r4, r5, r6, pc}

000d7354 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7354:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7356:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7358:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d735a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d735c:	6043      	str	r3, [r0, #4]
	len = 0;
   d735e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7360:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7362:	460d      	mov	r5, r1
   d7364:	b139      	cbz	r1, d7376 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7366:	4608      	mov	r0, r1
   d7368:	f001 fc77 	bl	d8c5a <strlen>
   d736c:	4629      	mov	r1, r5
   d736e:	4602      	mov	r2, r0
   d7370:	4620      	mov	r0, r4
   d7372:	f7ff ffd7 	bl	d7324 <_ZN6String4copyEPKcj>
}
   d7376:	4620      	mov	r0, r4
   d7378:	bd38      	pop	{r3, r4, r5, pc}

000d737a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d737a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d737c:	b510      	push	{r4, lr}
   d737e:	460b      	mov	r3, r1
   d7380:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7382:	d007      	beq.n	d7394 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7384:	6809      	ldr	r1, [r1, #0]
   d7386:	b119      	cbz	r1, d7390 <_ZN6StringaSERKS_+0x16>
   d7388:	689a      	ldr	r2, [r3, #8]
   d738a:	f7ff ffcb 	bl	d7324 <_ZN6String4copyEPKcj>
   d738e:	e001      	b.n	d7394 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7390:	f7ff ffa0 	bl	d72d4 <_ZN6String10invalidateEv>

	return *this;
}
   d7394:	4620      	mov	r0, r4
   d7396:	bd10      	pop	{r4, pc}

000d7398 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7398:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d739a:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d739c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d739e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d73a0:	6043      	str	r3, [r0, #4]
	len = 0;
   d73a2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d73a4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d73a6:	f7ff ffe8 	bl	d737a <_ZN6StringaSERKS_>
}
   d73aa:	4620      	mov	r0, r4
   d73ac:	bd10      	pop	{r4, pc}

000d73ae <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d73ae:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d73b0:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d73b2:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d73b4:	b912      	cbnz	r2, d73bc <_ZNK6String6equalsEPKc+0xe>
   d73b6:	b919      	cbnz	r1, d73c0 <_ZNK6String6equalsEPKc+0x12>
   d73b8:	2001      	movs	r0, #1
   d73ba:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d73bc:	b911      	cbnz	r1, d73c4 <_ZNK6String6equalsEPKc+0x16>
   d73be:	6803      	ldr	r3, [r0, #0]
   d73c0:	7818      	ldrb	r0, [r3, #0]
   d73c2:	e002      	b.n	d73ca <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d73c4:	6800      	ldr	r0, [r0, #0]
   d73c6:	f001 fc1b 	bl	d8c00 <strcmp>
   d73ca:	fab0 f080 	clz	r0, r0
   d73ce:	0940      	lsrs	r0, r0, #5
}
   d73d0:	bd08      	pop	{r3, pc}

000d73d2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d73d2:	b570      	push	{r4, r5, r6, lr}
   d73d4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d73d6:	b19a      	cbz	r2, d7400 <_ZNK6String8getBytesEPhjj+0x2e>
   d73d8:	b191      	cbz	r1, d7400 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d73da:	6885      	ldr	r5, [r0, #8]
   d73dc:	429d      	cmp	r5, r3
   d73de:	d802      	bhi.n	d73e6 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d73e0:	2300      	movs	r3, #0
   d73e2:	700b      	strb	r3, [r1, #0]
		return;
   d73e4:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d73e6:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d73e8:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d73ea:	6801      	ldr	r1, [r0, #0]
   d73ec:	42ac      	cmp	r4, r5
   d73ee:	bf28      	it	cs
   d73f0:	462c      	movcs	r4, r5
   d73f2:	4419      	add	r1, r3
   d73f4:	4622      	mov	r2, r4
   d73f6:	4630      	mov	r0, r6
   d73f8:	f001 fc4c 	bl	d8c94 <strncpy>
	buf[n] = 0;
   d73fc:	2300      	movs	r3, #0
   d73fe:	5533      	strb	r3, [r6, r4]
   d7400:	bd70      	pop	{r4, r5, r6, pc}

000d7402 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7402:	b510      	push	{r4, lr}
   d7404:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7406:	6800      	ldr	r0, [r0, #0]
   d7408:	b118      	cbz	r0, d7412 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d740a:	f7fe ff4f 	bl	d62ac <free>
            wakeupSource_ = nullptr;
   d740e:	2300      	movs	r3, #0
   d7410:	6023      	str	r3, [r4, #0]
   d7412:	bd10      	pop	{r4, pc}

000d7414 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7414:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7416:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d741a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d741c:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d741e:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7420:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7424:	f8c0 2006 	str.w	r2, [r0, #6]
   d7428:	889b      	ldrh	r3, [r3, #4]
   d742a:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d742c:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d742e:	f7ff ffe8 	bl	d7402 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d7432:	682b      	ldr	r3, [r5, #0]
   d7434:	b113      	cbz	r3, d743c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7436:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7438:	2300      	movs	r3, #0
   d743a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d743c:	4620      	mov	r0, r4
   d743e:	bd38      	pop	{r3, r4, r5, pc}

000d7440 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d7440:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d7444:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d7446:	b90b      	cbnz	r3, d744c <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d7448:	680a      	ldr	r2, [r1, #0]
   d744a:	b19a      	cbz	r2, d7474 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d744c:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d744e:	b15c      	cbz	r4, d7468 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d7450:	88a2      	ldrh	r2, [r4, #4]
   d7452:	2a01      	cmp	r2, #1
   d7454:	d003      	beq.n	d745e <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d7456:	2a04      	cmp	r2, #4
   d7458:	d106      	bne.n	d7468 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d745a:	2202      	movs	r2, #2
   d745c:	e005      	b.n	d746a <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d745e:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d7460:	814c      	strh	r4, [r1, #10]
   d7462:	718a      	strb	r2, [r1, #6]
   d7464:	810b      	strh	r3, [r1, #8]
                    break;
   d7466:	e005      	b.n	d7474 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7468:	2204      	movs	r2, #4
   d746a:	810b      	strh	r3, [r1, #8]
   d746c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7470:	718a      	strb	r2, [r1, #6]
   d7472:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d7474:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d7478:	6003      	str	r3, [r0, #0]
   d747a:	888b      	ldrh	r3, [r1, #4]
   d747c:	8083      	strh	r3, [r0, #4]
    }
   d747e:	bd10      	pop	{r4, pc}

000d7480 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d7480:	b538      	push	{r3, r4, r5, lr}
   d7482:	460c      	mov	r4, r1
   d7484:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d7486:	f7ff ffbc 	bl	d7402 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d748a:	b144      	cbz	r4, d749e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d748c:	8820      	ldrh	r0, [r4, #0]
   d748e:	f7fe ff05 	bl	d629c <malloc>
   d7492:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7494:	b128      	cbz	r0, d74a2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7496:	8822      	ldrh	r2, [r4, #0]
   d7498:	4621      	mov	r1, r4
   d749a:	f001 fb75 	bl	d8b88 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d749e:	2000      	movs	r0, #0
   d74a0:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d74a2:	4801      	ldr	r0, [pc, #4]	; (d74a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d74a4:	bd38      	pop	{r3, r4, r5, pc}
   d74a6:	bf00      	nop
   d74a8:	fffffefc 	.word	0xfffffefc

000d74ac <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d74ac:	4601      	mov	r1, r0
   d74ae:	2200      	movs	r2, #0
   d74b0:	208c      	movs	r0, #140	; 0x8c
   d74b2:	f7fe bc1f 	b.w	d5cf4 <HAL_Core_System_Reset_Ex>

000d74b6 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d74b6:	2000      	movs	r0, #0
   d74b8:	f7ff bff8 	b.w	d74ac <_ZN11SystemClass5resetEm>

000d74bc <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d74bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d74be:	4d30      	ldr	r5, [pc, #192]	; (d7580 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d74c0:	7d0b      	ldrb	r3, [r1, #20]
   d74c2:	4604      	mov	r4, r0
   d74c4:	b08b      	sub	sp, #44	; 0x2c
   d74c6:	4608      	mov	r0, r1
   d74c8:	1daf      	adds	r7, r5, #6
   d74ca:	b313      	cbz	r3, d7512 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d74cc:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d74ce:	791b      	ldrb	r3, [r3, #4]
   d74d0:	b1fb      	cbz	r3, d7512 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d74d2:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d74d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d74d8:	a902      	add	r1, sp, #8
   d74da:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d74dc:	9202      	str	r2, [sp, #8]
   d74de:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d74e2:	f88d 200e 	strb.w	r2, [sp, #14]
   d74e6:	f8ad 2010 	strh.w	r2, [sp, #16]
   d74ea:	f8ad 3012 	strh.w	r3, [sp, #18]
   d74ee:	f7fe fe1b 	bl	d6128 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d74f2:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d74f4:	b200      	sxth	r0, r0
   d74f6:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d74fa:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d74fe:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d7500:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d7502:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d7506:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7508:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d750a:	4628      	mov	r0, r5
   d750c:	f7ff ffb8 	bl	d7480 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d7510:	e01c      	b.n	d754c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d7512:	2320      	movs	r3, #32
   d7514:	2600      	movs	r6, #0
   d7516:	9302      	str	r3, [sp, #8]
   d7518:	4b1a      	ldr	r3, [pc, #104]	; (d7584 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d751a:	9300      	str	r3, [sp, #0]
   d751c:	491a      	ldr	r1, [pc, #104]	; (d7588 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d751e:	9603      	str	r6, [sp, #12]
   d7520:	4633      	mov	r3, r6
   d7522:	2032      	movs	r0, #50	; 0x32
   d7524:	aa02      	add	r2, sp, #8
   d7526:	f7fe fd85 	bl	d6034 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d752a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d752e:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d7532:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7534:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d7538:	4811      	ldr	r0, [pc, #68]	; (d7580 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d753a:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d753c:	f88d 600e 	strb.w	r6, [sp, #14]
   d7540:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7544:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7548:	f7ff ff64 	bl	d7414 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d754c:	a802      	add	r0, sp, #8
   d754e:	f7ff ff58 	bl	d7402 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7552:	2300      	movs	r3, #0
   d7554:	6023      	str	r3, [r4, #0]
   d7556:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7558:	71a3      	strb	r3, [r4, #6]
   d755a:	8123      	strh	r3, [r4, #8]
   d755c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7560:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d7562:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d7566:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7568:	683b      	ldr	r3, [r7, #0]
   d756a:	f8c4 3006 	str.w	r3, [r4, #6]
   d756e:	88bb      	ldrh	r3, [r7, #4]
   d7570:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7572:	6829      	ldr	r1, [r5, #0]
   d7574:	4620      	mov	r0, r4
   d7576:	f7ff ff83 	bl	d7480 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d757a:	4620      	mov	r0, r4
   d757c:	b00b      	add	sp, #44	; 0x2c
   d757e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7580:	2003e558 	.word	0x2003e558
   d7584:	000d9d6f 	.word	0x000d9d6f
   d7588:	000d9d68 	.word	0x000d9d68

000d758c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d758c:	b530      	push	{r4, r5, lr}
   d758e:	4604      	mov	r4, r0
   d7590:	b085      	sub	sp, #20
   d7592:	4608      	mov	r0, r1
   d7594:	4611      	mov	r1, r2
   d7596:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d7598:	2300      	movs	r3, #0
   d759a:	f7fe fd75 	bl	d6088 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d759e:	4d0d      	ldr	r5, [pc, #52]	; (d75d4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d75a0:	f8ad 000c 	strh.w	r0, [sp, #12]
   d75a4:	2300      	movs	r3, #0
   d75a6:	a901      	add	r1, sp, #4
   d75a8:	9301      	str	r3, [sp, #4]
   d75aa:	f8ad 3008 	strh.w	r3, [sp, #8]
   d75ae:	f88d 300a 	strb.w	r3, [sp, #10]
   d75b2:	4628      	mov	r0, r5
   d75b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d75b8:	f8ad 300e 	strh.w	r3, [sp, #14]
   d75bc:	f7ff ff2a 	bl	d7414 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d75c0:	a801      	add	r0, sp, #4
   d75c2:	f7ff ff1e 	bl	d7402 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d75c6:	4620      	mov	r0, r4
   d75c8:	4629      	mov	r1, r5
   d75ca:	f7ff ff39 	bl	d7440 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d75ce:	4620      	mov	r0, r4
   d75d0:	b005      	add	sp, #20
   d75d2:	bd30      	pop	{r4, r5, pc}
   d75d4:	2003e558 	.word	0x2003e558

000d75d8 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d75d8:	b510      	push	{r4, lr}
   d75da:	2400      	movs	r4, #0
   d75dc:	7004      	strb	r4, [r0, #0]
   d75de:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d75e0:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d75e2:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d75e6:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d75e8:	dd07      	ble.n	d75fa <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d75ea:	3901      	subs	r1, #1
   d75ec:	4299      	cmp	r1, r3
   d75ee:	d209      	bcs.n	d7604 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d75f0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d75f4:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d75f6:	2301      	movs	r3, #1
   d75f8:	e001      	b.n	d75fe <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d75fa:	d102      	bne.n	d7602 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d75fc:	2302      	movs	r3, #2
   d75fe:	7003      	strb	r3, [r0, #0]
   d7600:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d7602:	8041      	strh	r1, [r0, #2]
    }
}
   d7604:	bd10      	pop	{r4, pc}
	...

000d7608 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7608:	b5f0      	push	{r4, r5, r6, r7, lr}
   d760a:	b08b      	sub	sp, #44	; 0x2c
   d760c:	4617      	mov	r7, r2
   d760e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7610:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7612:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7614:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7616:	2400      	movs	r4, #0
   d7618:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d761a:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d761c:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d761e:	9300      	str	r3, [sp, #0]
   d7620:	4639      	mov	r1, r7
   d7622:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7624:	4630      	mov	r0, r6
   d7626:	f7fe fd6b 	bl	d6100 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d762a:	463b      	mov	r3, r7
   d762c:	4632      	mov	r2, r6
   d762e:	4601      	mov	r1, r0
   d7630:	a805      	add	r0, sp, #20
   d7632:	f7ff ffd1 	bl	d75d8 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d7636:	9407      	str	r4, [sp, #28]
   d7638:	f8ad 4020 	strh.w	r4, [sp, #32]
   d763c:	4c0d      	ldr	r4, [pc, #52]	; (d7674 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d763e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d7642:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d7646:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d764a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d764e:	4620      	mov	r0, r4
   d7650:	a907      	add	r1, sp, #28
   d7652:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d7656:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d765a:	f7ff fedb 	bl	d7414 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d765e:	a807      	add	r0, sp, #28
   d7660:	f7ff fecf 	bl	d7402 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d7664:	4628      	mov	r0, r5
   d7666:	4621      	mov	r1, r4
   d7668:	f7ff feea 	bl	d7440 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d766c:	4628      	mov	r0, r5
   d766e:	b00b      	add	sp, #44	; 0x2c
   d7670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7672:	bf00      	nop
   d7674:	2003e558 	.word	0x2003e558

000d7678 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7678:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d767a:	4c09      	ldr	r4, [pc, #36]	; (d76a0 <_GLOBAL__sub_I_System+0x28>)
   d767c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d767e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7682:	6020      	str	r0, [r4, #0]
   d7684:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7686:	71a0      	strb	r0, [r4, #6]
   d7688:	8120      	strh	r0, [r4, #8]
   d768a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d768c:	f7fe fcec 	bl	d6068 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7690:	4620      	mov	r0, r4
   d7692:	4a04      	ldr	r2, [pc, #16]	; (d76a4 <_GLOBAL__sub_I_System+0x2c>)
   d7694:	4904      	ldr	r1, [pc, #16]	; (d76a8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d769a:	f000 bb5d 	b.w	d7d58 <__aeabi_atexit>
   d769e:	bf00      	nop
   d76a0:	2003e558 	.word	0x2003e558
   d76a4:	2003e1b0 	.word	0x2003e1b0
   d76a8:	000d4177 	.word	0x000d4177

000d76ac <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d76ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d76ae:	4b14      	ldr	r3, [pc, #80]	; (d7700 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d76b0:	4f14      	ldr	r7, [pc, #80]	; (d7704 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d76b2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d76b4:	4b14      	ldr	r3, [pc, #80]	; (d7708 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d76b6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d76b8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d76ba:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d76bc:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d76be:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d76c0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d76c2:	d01b      	beq.n	d76fc <_ZL22Refresh_UnixTime_Cachel+0x50>
   d76c4:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d76c6:	ad01      	add	r5, sp, #4
   d76c8:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d76cc:	f001 f964 	bl	d8998 <localtime>
	calendar_time->tm_year += 1900;
   d76d0:	6943      	ldr	r3, [r0, #20]
   d76d2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d76d6:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d76d8:	4604      	mov	r4, r0
   d76da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d76dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d76de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d76e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d76e2:	f8d4 e000 	ldr.w	lr, [r4]
   d76e6:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d76ea:	ad01      	add	r5, sp, #4
   d76ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76ee:	4c07      	ldr	r4, [pc, #28]	; (d770c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d76f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d76f6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d76f8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d76fc:	b00b      	add	sp, #44	; 0x2c
   d76fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7700:	2003e594 	.word	0x2003e594
   d7704:	2003e590 	.word	0x2003e590
   d7708:	2003e58c 	.word	0x2003e58c
   d770c:	2003e564 	.word	0x2003e564

000d7710 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7710:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7712:	2000      	movs	r0, #0
   d7714:	f7fe fd62 	bl	d61dc <spark_sync_time_pending>
   d7718:	b128      	cbz	r0, d7726 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d771a:	f7fe fd37 	bl	d618c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d771e:	f080 0001 	eor.w	r0, r0, #1
   d7722:	b2c0      	uxtb	r0, r0
   d7724:	bd08      	pop	{r3, pc}
   d7726:	2001      	movs	r0, #1
    }
   d7728:	bd08      	pop	{r3, pc}

000d772a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d772a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d772c:	2000      	movs	r0, #0
   d772e:	f7fe fb31 	bl	d5d94 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7732:	4604      	mov	r4, r0
   d7734:	b968      	cbnz	r0, d7752 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7736:	f7fe fc8f 	bl	d6058 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d773a:	2801      	cmp	r0, #1
   d773c:	d10b      	bne.n	d7756 <_ZN9TimeClass7isValidEv+0x2c>
   d773e:	4620      	mov	r0, r4
   d7740:	f7fe fcc2 	bl	d60c8 <system_thread_get_state>
   d7744:	b938      	cbnz	r0, d7756 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7746:	f7ff ffe3 	bl	d7710 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d774a:	b930      	cbnz	r0, d775a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d774c:	f7fe fd06 	bl	d615c <spark_process>
   d7750:	e7f9      	b.n	d7746 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7752:	2001      	movs	r0, #1
   d7754:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7756:	2000      	movs	r0, #0
   d7758:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d775a:	f7ff ffd9 	bl	d7710 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d775e:	2000      	movs	r0, #0
   d7760:	f7fe fb18 	bl	d5d94 <HAL_RTC_Time_Is_Valid>
   d7764:	3000      	adds	r0, #0
   d7766:	bf18      	it	ne
   d7768:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d776a:	bd10      	pop	{r4, pc}

000d776c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d776c:	b508      	push	{r3, lr}
    (void)isValid();
   d776e:	f7ff ffdc 	bl	d772a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7776:	f7fe bae5 	b.w	d5d44 <HAL_RTC_Get_UnixTime>
	...

000d777c <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d777c:	b508      	push	{r3, lr}
	return hour(now());
   d777e:	f7ff fff5 	bl	d776c <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7782:	f7ff ff93 	bl	d76ac <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d7786:	4b01      	ldr	r3, [pc, #4]	; (d778c <_ZN9TimeClass4hourEv+0x10>)
   d7788:	6898      	ldr	r0, [r3, #8]
   d778a:	bd08      	pop	{r3, pc}
   d778c:	2003e564 	.word	0x2003e564

000d7790 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d7790:	b508      	push	{r3, lr}
	return minute(now());
   d7792:	f7ff ffeb 	bl	d776c <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7796:	f7ff ff89 	bl	d76ac <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d779a:	4b01      	ldr	r3, [pc, #4]	; (d77a0 <_ZN9TimeClass6minuteEv+0x10>)
   d779c:	6858      	ldr	r0, [r3, #4]
   d779e:	bd08      	pop	{r3, pc}
   d77a0:	2003e564 	.word	0x2003e564

000d77a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d77a4:	4b02      	ldr	r3, [pc, #8]	; (d77b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d77a6:	681a      	ldr	r2, [r3, #0]
   d77a8:	4b02      	ldr	r3, [pc, #8]	; (d77b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d77aa:	601a      	str	r2, [r3, #0]
   d77ac:	4770      	bx	lr
   d77ae:	bf00      	nop
   d77b0:	2003e0f8 	.word	0x2003e0f8
   d77b4:	2003e588 	.word	0x2003e588

000d77b8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d77b8:	4770      	bx	lr

000d77ba <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d77ba:	7441      	strb	r1, [r0, #17]
   d77bc:	4770      	bx	lr

000d77be <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d77be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d77c0:	7c00      	ldrb	r0, [r0, #16]
   d77c2:	f7fe fbf7 	bl	d5fb4 <HAL_USART_Available_Data_For_Write>
}
   d77c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d77ca:	bd08      	pop	{r3, pc}

000d77cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d77cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d77ce:	7c00      	ldrb	r0, [r0, #16]
   d77d0:	f7fe fbc8 	bl	d5f64 <HAL_USART_Available_Data>
}
   d77d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d77d8:	bd08      	pop	{r3, pc}

000d77da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d77da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d77dc:	7c00      	ldrb	r0, [r0, #16]
   d77de:	f7fe fbd1 	bl	d5f84 <HAL_USART_Peek_Data>
}
   d77e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d77e6:	bf28      	it	cs
   d77e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d77ec:	bd08      	pop	{r3, pc}

000d77ee <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d77ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d77f0:	7c00      	ldrb	r0, [r0, #16]
   d77f2:	f7fe fbbf 	bl	d5f74 <HAL_USART_Read_Data>
}
   d77f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d77fa:	bf28      	it	cs
   d77fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7800:	bd08      	pop	{r3, pc}

000d7802 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7802:	7c00      	ldrb	r0, [r0, #16]
   d7804:	f7fe bbc6 	b.w	d5f94 <HAL_USART_Flush_Data>

000d7808 <_ZN11USARTSerialD0Ev>:
   d7808:	b510      	push	{r4, lr}
   d780a:	2114      	movs	r1, #20
   d780c:	4604      	mov	r4, r0
   d780e:	f000 faa8 	bl	d7d62 <_ZdlPvj>
   d7812:	4620      	mov	r0, r4
   d7814:	bd10      	pop	{r4, pc}

000d7816 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7816:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7818:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d781a:	4604      	mov	r4, r0
   d781c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d781e:	b925      	cbnz	r5, d782a <_ZN11USARTSerial5writeEh+0x14>
   d7820:	7c00      	ldrb	r0, [r0, #16]
   d7822:	f7fe fbc7 	bl	d5fb4 <HAL_USART_Available_Data_For_Write>
   d7826:	2800      	cmp	r0, #0
   d7828:	dd05      	ble.n	d7836 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d782a:	4631      	mov	r1, r6
   d782c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d782e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7832:	f7fe bb8f 	b.w	d5f54 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7836:	4628      	mov	r0, r5
   d7838:	bd70      	pop	{r4, r5, r6, pc}
	...

000d783c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d783c:	b510      	push	{r4, lr}
   d783e:	4604      	mov	r4, r0
   d7840:	4608      	mov	r0, r1
   d7842:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7844:	2200      	movs	r2, #0
   d7846:	6062      	str	r2, [r4, #4]
   d7848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d784c:	60a2      	str	r2, [r4, #8]
   d784e:	4a05      	ldr	r2, [pc, #20]	; (d7864 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7850:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7852:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7854:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7856:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7858:	461a      	mov	r2, r3
   d785a:	f7fe fb73 	bl	d5f44 <HAL_USART_Init>
}
   d785e:	4620      	mov	r0, r4
   d7860:	bd10      	pop	{r4, pc}
   d7862:	bf00      	nop
   d7864:	000d9dc8 	.word	0x000d9dc8

000d7868 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7868:	7c00      	ldrb	r0, [r0, #16]
   d786a:	f7fe bb9b 	b.w	d5fa4 <HAL_USART_Is_Enabled>
	...

000d7870 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7870:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7872:	4d0c      	ldr	r5, [pc, #48]	; (d78a4 <_Z22__fetch_global_Serial1v+0x34>)
   d7874:	6829      	ldr	r1, [r5, #0]
   d7876:	f011 0401 	ands.w	r4, r1, #1
   d787a:	d111      	bne.n	d78a0 <_Z22__fetch_global_Serial1v+0x30>
   d787c:	4628      	mov	r0, r5
   d787e:	f7fc fc12 	bl	d40a6 <__cxa_guard_acquire>
   d7882:	b168      	cbz	r0, d78a0 <_Z22__fetch_global_Serial1v+0x30>
   d7884:	4a08      	ldr	r2, [pc, #32]	; (d78a8 <_Z22__fetch_global_Serial1v+0x38>)
   d7886:	4b09      	ldr	r3, [pc, #36]	; (d78ac <_Z22__fetch_global_Serial1v+0x3c>)
   d7888:	4809      	ldr	r0, [pc, #36]	; (d78b0 <_Z22__fetch_global_Serial1v+0x40>)
   d788a:	4621      	mov	r1, r4
   d788c:	f7ff ffd6 	bl	d783c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7890:	4628      	mov	r0, r5
   d7892:	f7fc fc0d 	bl	d40b0 <__cxa_guard_release>
   d7896:	4a07      	ldr	r2, [pc, #28]	; (d78b4 <_Z22__fetch_global_Serial1v+0x44>)
   d7898:	4907      	ldr	r1, [pc, #28]	; (d78b8 <_Z22__fetch_global_Serial1v+0x48>)
   d789a:	4805      	ldr	r0, [pc, #20]	; (d78b0 <_Z22__fetch_global_Serial1v+0x40>)
   d789c:	f000 fa5c 	bl	d7d58 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78a0:	4803      	ldr	r0, [pc, #12]	; (d78b0 <_Z22__fetch_global_Serial1v+0x40>)
   d78a2:	bd38      	pop	{r3, r4, r5, pc}
   d78a4:	2003e630 	.word	0x2003e630
   d78a8:	2003e634 	.word	0x2003e634
   d78ac:	2003e5ac 	.word	0x2003e5ac
   d78b0:	2003e598 	.word	0x2003e598
   d78b4:	2003e1b0 	.word	0x2003e1b0
   d78b8:	000d77b9 	.word	0x000d77b9

000d78bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78bc:	7441      	strb	r1, [r0, #17]
   d78be:	4770      	bx	lr

000d78c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d78c0:	4770      	bx	lr

000d78c2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d78c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d78c4:	2100      	movs	r1, #0
   d78c6:	7c00      	ldrb	r0, [r0, #16]
   d78c8:	f7fe fb94 	bl	d5ff4 <HAL_USB_USART_Receive_Data>
}
   d78cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d78d0:	bf28      	it	cs
   d78d2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d78d6:	bd08      	pop	{r3, pc}

000d78d8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d78d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d78da:	2101      	movs	r1, #1
   d78dc:	7c00      	ldrb	r0, [r0, #16]
   d78de:	f7fe fb89 	bl	d5ff4 <HAL_USB_USART_Receive_Data>
}
   d78e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d78e6:	bf28      	it	cs
   d78e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d78ec:	bd08      	pop	{r3, pc}

000d78ee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d78ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d78f0:	7c00      	ldrb	r0, [r0, #16]
   d78f2:	f7fe fb77 	bl	d5fe4 <HAL_USB_USART_Available_Data_For_Write>
}
   d78f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78fa:	bd08      	pop	{r3, pc}

000d78fc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d78fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d78fe:	7c00      	ldrb	r0, [r0, #16]
   d7900:	f7fe fb68 	bl	d5fd4 <HAL_USB_USART_Available_Data>
}
   d7904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7908:	bd08      	pop	{r3, pc}

000d790a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d790a:	7c00      	ldrb	r0, [r0, #16]
   d790c:	f7fe bb82 	b.w	d6014 <HAL_USB_USART_Flush_Data>

000d7910 <_ZN9USBSerialD0Ev>:
   d7910:	b510      	push	{r4, lr}
   d7912:	2114      	movs	r1, #20
   d7914:	4604      	mov	r4, r0
   d7916:	f000 fa24 	bl	d7d62 <_ZdlPvj>
   d791a:	4620      	mov	r0, r4
   d791c:	bd10      	pop	{r4, pc}

000d791e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d791e:	b538      	push	{r3, r4, r5, lr}
   d7920:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7922:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7924:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7926:	f7fe fb5d 	bl	d5fe4 <HAL_USB_USART_Available_Data_For_Write>
   d792a:	2800      	cmp	r0, #0
   d792c:	dc01      	bgt.n	d7932 <_ZN9USBSerial5writeEh+0x14>
   d792e:	7c60      	ldrb	r0, [r4, #17]
   d7930:	b128      	cbz	r0, d793e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7932:	4629      	mov	r1, r5
   d7934:	7c20      	ldrb	r0, [r4, #16]
   d7936:	f7fe fb65 	bl	d6004 <HAL_USB_USART_Send_Data>
   d793a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d793e:	bd38      	pop	{r3, r4, r5, pc}

000d7940 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7940:	b510      	push	{r4, lr}
   d7942:	4604      	mov	r4, r0
   d7944:	2300      	movs	r3, #0
   d7946:	6063      	str	r3, [r4, #4]
   d7948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d794c:	60a3      	str	r3, [r4, #8]
   d794e:	4b05      	ldr	r3, [pc, #20]	; (d7964 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7950:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7952:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7954:	4608      	mov	r0, r1
{
  _serial = serial;
   d7956:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7958:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d795a:	4611      	mov	r1, r2
   d795c:	f7fe fb32 	bl	d5fc4 <HAL_USB_USART_Init>
}
   d7960:	4620      	mov	r0, r4
   d7962:	bd10      	pop	{r4, pc}
   d7964:	000d9df8 	.word	0x000d9df8

000d7968 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7968:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d796a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d796c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d796e:	2100      	movs	r1, #0
   d7970:	f001 f915 	bl	d8b9e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7974:	4620      	mov	r0, r4
   d7976:	bd10      	pop	{r4, pc}

000d7978 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7978:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d797a:	4d0e      	ldr	r5, [pc, #56]	; (d79b4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d797c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d797e:	a801      	add	r0, sp, #4
   d7980:	f7ff fff2 	bl	d7968 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7984:	6829      	ldr	r1, [r5, #0]
   d7986:	f011 0401 	ands.w	r4, r1, #1
   d798a:	d110      	bne.n	d79ae <_Z16_fetch_usbserialv+0x36>
   d798c:	4628      	mov	r0, r5
   d798e:	f7fc fb8a 	bl	d40a6 <__cxa_guard_acquire>
   d7992:	b160      	cbz	r0, d79ae <_Z16_fetch_usbserialv+0x36>
   d7994:	aa01      	add	r2, sp, #4
   d7996:	4621      	mov	r1, r4
   d7998:	4807      	ldr	r0, [pc, #28]	; (d79b8 <_Z16_fetch_usbserialv+0x40>)
   d799a:	f7ff ffd1 	bl	d7940 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d799e:	4628      	mov	r0, r5
   d79a0:	f7fc fb86 	bl	d40b0 <__cxa_guard_release>
   d79a4:	4a05      	ldr	r2, [pc, #20]	; (d79bc <_Z16_fetch_usbserialv+0x44>)
   d79a6:	4906      	ldr	r1, [pc, #24]	; (d79c0 <_Z16_fetch_usbserialv+0x48>)
   d79a8:	4803      	ldr	r0, [pc, #12]	; (d79b8 <_Z16_fetch_usbserialv+0x40>)
   d79aa:	f000 f9d5 	bl	d7d58 <__aeabi_atexit>
	return _usbserial;
}
   d79ae:	4802      	ldr	r0, [pc, #8]	; (d79b8 <_Z16_fetch_usbserialv+0x40>)
   d79b0:	b007      	add	sp, #28
   d79b2:	bd30      	pop	{r4, r5, pc}
   d79b4:	2003e6b8 	.word	0x2003e6b8
   d79b8:	2003e6bc 	.word	0x2003e6bc
   d79bc:	2003e1b0 	.word	0x2003e1b0
   d79c0:	000d78c1 	.word	0x000d78c1

000d79c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d79c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d79c6:	4b0c      	ldr	r3, [pc, #48]	; (d79f8 <serialEventRun+0x34>)
   d79c8:	b133      	cbz	r3, d79d8 <serialEventRun+0x14>
   d79ca:	f7ff ffd5 	bl	d7978 <_Z16_fetch_usbserialv>
   d79ce:	6803      	ldr	r3, [r0, #0]
   d79d0:	691b      	ldr	r3, [r3, #16]
   d79d2:	4798      	blx	r3
   d79d4:	2800      	cmp	r0, #0
   d79d6:	dc09      	bgt.n	d79ec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d79d8:	4b08      	ldr	r3, [pc, #32]	; (d79fc <serialEventRun+0x38>)
   d79da:	b163      	cbz	r3, d79f6 <serialEventRun+0x32>
   d79dc:	f7ff ff48 	bl	d7870 <_Z22__fetch_global_Serial1v>
   d79e0:	6803      	ldr	r3, [r0, #0]
   d79e2:	691b      	ldr	r3, [r3, #16]
   d79e4:	4798      	blx	r3
   d79e6:	2800      	cmp	r0, #0
   d79e8:	dc03      	bgt.n	d79f2 <serialEventRun+0x2e>
   d79ea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d79ec:	f3af 8000 	nop.w
   d79f0:	e7f2      	b.n	d79d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d79f2:	f3af 8000 	nop.w
   d79f6:	bd08      	pop	{r3, pc}
	...

000d7a00 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7a00:	b508      	push	{r3, lr}
	serialEventRun();
   d7a02:	f7ff ffdf 	bl	d79c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a06:	f7fe f995 	bl	d5d34 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a0a:	4b01      	ldr	r3, [pc, #4]	; (d7a10 <_post_loop+0x10>)
   d7a0c:	6018      	str	r0, [r3, #0]
   d7a0e:	bd08      	pop	{r3, pc}
   d7a10:	2003e6d8 	.word	0x2003e6d8

000d7a14 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a14:	4802      	ldr	r0, [pc, #8]	; (d7a20 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7a16:	4a03      	ldr	r2, [pc, #12]	; (d7a24 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7a18:	4903      	ldr	r1, [pc, #12]	; (d7a28 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7a1a:	1a12      	subs	r2, r2, r0
   d7a1c:	f001 b8b4 	b.w	d8b88 <memcpy>
   d7a20:	2003f400 	.word	0x2003f400
   d7a24:	2003f404 	.word	0x2003f404
   d7a28:	000da060 	.word	0x000da060

000d7a2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7a2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a2e:	2300      	movs	r3, #0
   d7a30:	9300      	str	r3, [sp, #0]
   d7a32:	461a      	mov	r2, r3
   d7a34:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a38:	f7fe fb58 	bl	d60ec <system_ctrl_set_result>
}
   d7a3c:	b003      	add	sp, #12
   d7a3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a44 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7a44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7a46:	8843      	ldrh	r3, [r0, #2]
   d7a48:	2b0a      	cmp	r3, #10
   d7a4a:	d008      	beq.n	d7a5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7a4c:	2b50      	cmp	r3, #80	; 0x50
   d7a4e:	d109      	bne.n	d7a64 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7a50:	4b09      	ldr	r3, [pc, #36]	; (d7a78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7a52:	681b      	ldr	r3, [r3, #0]
   d7a54:	b13b      	cbz	r3, d7a66 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7a56:	b003      	add	sp, #12
   d7a58:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7a5c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7a5e:	f7ff ffe5 	bl	d7a2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7a62:	e006      	b.n	d7a72 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a64:	2300      	movs	r3, #0
   d7a66:	9300      	str	r3, [sp, #0]
   d7a68:	461a      	mov	r2, r3
   d7a6a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a6e:	f7fe fb3d 	bl	d60ec <system_ctrl_set_result>
        break;
    }
}
   d7a72:	b003      	add	sp, #12
   d7a74:	f85d fb04 	ldr.w	pc, [sp], #4
   d7a78:	2003e6d0 	.word	0x2003e6d0

000d7a7c <module_user_init_hook>:

void module_user_init_hook()
{
   d7a7c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7a7e:	4c10      	ldr	r4, [pc, #64]	; (d7ac0 <module_user_init_hook+0x44>)
   d7a80:	4d10      	ldr	r5, [pc, #64]	; (d7ac4 <module_user_init_hook+0x48>)
   d7a82:	6823      	ldr	r3, [r4, #0]
   d7a84:	42ab      	cmp	r3, r5
   d7a86:	4b10      	ldr	r3, [pc, #64]	; (d7ac8 <module_user_init_hook+0x4c>)
   d7a88:	bf0c      	ite	eq
   d7a8a:	2201      	moveq	r2, #1
   d7a8c:	2200      	movne	r2, #0
   d7a8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7a90:	d002      	beq.n	d7a98 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7a92:	f7ff ffbf 	bl	d7a14 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7a96:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7a98:	f7fe f93c 	bl	d5d14 <HAL_RNG_GetRandomNumber>
   d7a9c:	4604      	mov	r4, r0
    srand(seed);
   d7a9e:	f001 f887 	bl	d8bb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7aa2:	4b0a      	ldr	r3, [pc, #40]	; (d7acc <module_user_init_hook+0x50>)
   d7aa4:	b113      	cbz	r3, d7aac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7aa6:	4620      	mov	r0, r4
   d7aa8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7aac:	2100      	movs	r1, #0
   d7aae:	4807      	ldr	r0, [pc, #28]	; (d7acc <module_user_init_hook+0x50>)
   d7ab0:	f7fe fb9c 	bl	d61ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7ab4:	2100      	movs	r1, #0
   d7ab6:	4806      	ldr	r0, [pc, #24]	; (d7ad0 <module_user_init_hook+0x54>)
}
   d7ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7abc:	f7fe bb0c 	b.w	d60d8 <system_ctrl_set_app_request_handler>
   d7ac0:	2003f400 	.word	0x2003f400
   d7ac4:	9a271c1e 	.word	0x9a271c1e
   d7ac8:	2003e6d4 	.word	0x2003e6d4
   d7acc:	00000000 	.word	0x00000000
   d7ad0:	000d7a45 	.word	0x000d7a45

000d7ad4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7ad4:	b508      	push	{r3, lr}
   d7ad6:	4b02      	ldr	r3, [pc, #8]	; (d7ae0 <spark_protocol_instance+0xc>)
   d7ad8:	681b      	ldr	r3, [r3, #0]
   d7ada:	681b      	ldr	r3, [r3, #0]
   d7adc:	9301      	str	r3, [sp, #4]
   d7ade:	bd08      	pop	{r3, pc}
   d7ae0:	0003025c 	.word	0x0003025c

000d7ae4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7ae4:	b508      	push	{r3, lr}
   d7ae6:	4b02      	ldr	r3, [pc, #8]	; (d7af0 <spark_protocol_set_product_id+0xc>)
   d7ae8:	681b      	ldr	r3, [r3, #0]
   d7aea:	685b      	ldr	r3, [r3, #4]
   d7aec:	9301      	str	r3, [sp, #4]
   d7aee:	bd08      	pop	{r3, pc}
   d7af0:	0003025c 	.word	0x0003025c

000d7af4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7af4:	b508      	push	{r3, lr}
   d7af6:	4b02      	ldr	r3, [pc, #8]	; (d7b00 <spark_protocol_set_product_firmware_version+0xc>)
   d7af8:	681b      	ldr	r3, [r3, #0]
   d7afa:	689b      	ldr	r3, [r3, #8]
   d7afc:	9301      	str	r3, [sp, #4]
   d7afe:	bd08      	pop	{r3, pc}
   d7b00:	0003025c 	.word	0x0003025c

000d7b04 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7b04:	b510      	push	{r4, lr}
   d7b06:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7b08:	f000 f906 	bl	d7d18 <_ZN8particle7globals11instanceSpiEv>
   d7b0c:	f7ff fbd8 	bl	d72c0 <_ZN8SPIClass9isEnabledEv>
   d7b10:	b128      	cbz	r0, d7b1e <pinAvailable+0x1a>
   d7b12:	f1a4 030b 	sub.w	r3, r4, #11
   d7b16:	2b02      	cmp	r3, #2
   d7b18:	d801      	bhi.n	d7b1e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d7b1a:	2000      	movs	r0, #0
   d7b1c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7b1e:	f000 f8af 	bl	d7c80 <_Z19__fetch_global_Wirev>
   d7b22:	f7ff f951 	bl	d6dc8 <_ZN7TwoWire9isEnabledEv>
   d7b26:	b108      	cbz	r0, d7b2c <pinAvailable+0x28>
   d7b28:	2c01      	cmp	r4, #1
   d7b2a:	d9f6      	bls.n	d7b1a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7b2c:	f7ff fea0 	bl	d7870 <_Z22__fetch_global_Serial1v>
   d7b30:	f7ff fe9a 	bl	d7868 <_ZN11USARTSerial9isEnabledEv>
   d7b34:	b118      	cbz	r0, d7b3e <pinAvailable+0x3a>
   d7b36:	f1a4 0309 	sub.w	r3, r4, #9
   d7b3a:	2b01      	cmp	r3, #1
   d7b3c:	d9ed      	bls.n	d7b1a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7b3e:	2c23      	cmp	r4, #35	; 0x23
   d7b40:	bf8c      	ite	hi
   d7b42:	2000      	movhi	r0, #0
   d7b44:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7b46:	bd10      	pop	{r4, pc}

000d7b48 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b48:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7b4a:	b538      	push	{r3, r4, r5, lr}
   d7b4c:	4604      	mov	r4, r0
   d7b4e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b50:	d80a      	bhi.n	d7b68 <pinMode+0x20>
   d7b52:	29ff      	cmp	r1, #255	; 0xff
   d7b54:	d008      	beq.n	d7b68 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7b56:	f7ff ffd5 	bl	d7b04 <pinAvailable>
   d7b5a:	b128      	cbz	r0, d7b68 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7b5c:	4629      	mov	r1, r5
   d7b5e:	4620      	mov	r0, r4
}
   d7b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7b64:	f7fe b936 	b.w	d5dd4 <HAL_Pin_Mode>
   d7b68:	bd38      	pop	{r3, r4, r5, pc}

000d7b6a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7b6a:	b538      	push	{r3, r4, r5, lr}
   d7b6c:	4604      	mov	r4, r0
   d7b6e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7b70:	f7fe f938 	bl	d5de4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7b74:	28ff      	cmp	r0, #255	; 0xff
   d7b76:	d010      	beq.n	d7b9a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7b78:	2806      	cmp	r0, #6
   d7b7a:	d804      	bhi.n	d7b86 <digitalWrite+0x1c>
   d7b7c:	234d      	movs	r3, #77	; 0x4d
   d7b7e:	fa23 f000 	lsr.w	r0, r3, r0
   d7b82:	07c3      	lsls	r3, r0, #31
   d7b84:	d409      	bmi.n	d7b9a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7b86:	4620      	mov	r0, r4
   d7b88:	f7ff ffbc 	bl	d7b04 <pinAvailable>
   d7b8c:	b128      	cbz	r0, d7b9a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7b8e:	4629      	mov	r1, r5
   d7b90:	4620      	mov	r0, r4
}
   d7b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7b96:	f7fe b92d 	b.w	d5df4 <HAL_GPIO_Write>
   d7b9a:	bd38      	pop	{r3, r4, r5, pc}

000d7b9c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7b9c:	b510      	push	{r4, lr}
   d7b9e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ba0:	f7fe f920 	bl	d5de4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7ba4:	3804      	subs	r0, #4
   d7ba6:	b2c0      	uxtb	r0, r0
   d7ba8:	2801      	cmp	r0, #1
   d7baa:	d908      	bls.n	d7bbe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7bac:	4620      	mov	r0, r4
   d7bae:	f7ff ffa9 	bl	d7b04 <pinAvailable>
   d7bb2:	b120      	cbz	r0, d7bbe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7bb4:	4620      	mov	r0, r4
}
   d7bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7bba:	f7fe b923 	b.w	d5e04 <HAL_GPIO_Read>
}
   d7bbe:	2000      	movs	r0, #0
   d7bc0:	bd10      	pop	{r4, pc}

000d7bc2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7bc2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7bc4:	b510      	push	{r4, lr}
   d7bc6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7bc8:	bf9c      	itt	ls
   d7bca:	340e      	addls	r4, #14
   d7bcc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7bce:	4620      	mov	r0, r4
   d7bd0:	f7ff ff98 	bl	d7b04 <pinAvailable>
   d7bd4:	b150      	cbz	r0, d7bec <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7bd6:	2103      	movs	r1, #3
   d7bd8:	4620      	mov	r0, r4
   d7bda:	f7fe f8f3 	bl	d5dc4 <HAL_Validate_Pin_Function>
   d7bde:	2803      	cmp	r0, #3
   d7be0:	d104      	bne.n	d7bec <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7be2:	4620      	mov	r0, r4
}
   d7be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7be8:	f7fe b914 	b.w	d5e14 <HAL_ADC_Read>
}
   d7bec:	2000      	movs	r0, #0
   d7bee:	bd10      	pop	{r4, pc}

000d7bf0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7bf0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7bf2:	4c07      	ldr	r4, [pc, #28]	; (d7c10 <_Z21__fetch_global_EEPROMv+0x20>)
   d7bf4:	6823      	ldr	r3, [r4, #0]
   d7bf6:	07db      	lsls	r3, r3, #31
   d7bf8:	d408      	bmi.n	d7c0c <_Z21__fetch_global_EEPROMv+0x1c>
   d7bfa:	4620      	mov	r0, r4
   d7bfc:	f7fc fa53 	bl	d40a6 <__cxa_guard_acquire>
   d7c00:	b120      	cbz	r0, d7c0c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7c02:	f7fe f8a7 	bl	d5d54 <HAL_EEPROM_Init>
   d7c06:	4620      	mov	r0, r4
   d7c08:	f7fc fa52 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7c0c:	4801      	ldr	r0, [pc, #4]	; (d7c14 <_Z21__fetch_global_EEPROMv+0x24>)
   d7c0e:	bd10      	pop	{r4, pc}
   d7c10:	2003e6dc 	.word	0x2003e6dc
   d7c14:	2003e6e0 	.word	0x2003e6e0

000d7c18 <_Z17acquireWireBufferv>:
   d7c18:	b570      	push	{r4, r5, r6, lr}
   d7c1a:	4604      	mov	r4, r0
   d7c1c:	2514      	movs	r5, #20
   d7c1e:	462a      	mov	r2, r5
   d7c20:	4e09      	ldr	r6, [pc, #36]	; (d7c48 <_Z17acquireWireBufferv+0x30>)
   d7c22:	2100      	movs	r1, #0
   d7c24:	f000 ffbb 	bl	d8b9e <memset>
   d7c28:	8025      	strh	r5, [r4, #0]
   d7c2a:	2520      	movs	r5, #32
   d7c2c:	4631      	mov	r1, r6
   d7c2e:	60a5      	str	r5, [r4, #8]
   d7c30:	6125      	str	r5, [r4, #16]
   d7c32:	4628      	mov	r0, r5
   d7c34:	f000 f8af 	bl	d7d96 <_ZnajRKSt9nothrow_t>
   d7c38:	4631      	mov	r1, r6
   d7c3a:	6060      	str	r0, [r4, #4]
   d7c3c:	4628      	mov	r0, r5
   d7c3e:	f000 f8aa 	bl	d7d96 <_ZnajRKSt9nothrow_t>
   d7c42:	60e0      	str	r0, [r4, #12]
   d7c44:	4620      	mov	r0, r4
   d7c46:	bd70      	pop	{r4, r5, r6, pc}
   d7c48:	000d9e20 	.word	0x000d9e20

000d7c4c <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d7c4c:	b570      	push	{r4, r5, r6, lr}
   d7c4e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7c50:	2514      	movs	r5, #20
   d7c52:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c54:	4e09      	ldr	r6, [pc, #36]	; (d7c7c <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7c56:	2100      	movs	r1, #0
   d7c58:	f000 ffa1 	bl	d8b9e <memset>
   d7c5c:	8025      	strh	r5, [r4, #0]
   d7c5e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c60:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7c62:	60a5      	str	r5, [r4, #8]
   d7c64:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c66:	4628      	mov	r0, r5
   d7c68:	f000 f895 	bl	d7d96 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c6c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7c6e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c70:	4628      	mov	r0, r5
   d7c72:	f000 f890 	bl	d7d96 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7c76:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d7c78:	4620      	mov	r0, r4
   d7c7a:	bd70      	pop	{r4, r5, r6, pc}
   d7c7c:	000d9e20 	.word	0x000d9e20

000d7c80 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c80:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c82:	4d0e      	ldr	r5, [pc, #56]	; (d7cbc <_Z19__fetch_global_Wirev+0x3c>)
   d7c84:	6829      	ldr	r1, [r5, #0]
   d7c86:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c8c:	d113      	bne.n	d7cb6 <_Z19__fetch_global_Wirev+0x36>
   d7c8e:	4628      	mov	r0, r5
   d7c90:	f7fc fa09 	bl	d40a6 <__cxa_guard_acquire>
   d7c94:	b178      	cbz	r0, d7cb6 <_Z19__fetch_global_Wirev+0x36>
   d7c96:	a801      	add	r0, sp, #4
   d7c98:	f7ff ffbe 	bl	d7c18 <_Z17acquireWireBufferv>
   d7c9c:	aa01      	add	r2, sp, #4
   d7c9e:	4621      	mov	r1, r4
   d7ca0:	4807      	ldr	r0, [pc, #28]	; (d7cc0 <_Z19__fetch_global_Wirev+0x40>)
   d7ca2:	f7ff f83d 	bl	d6d20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7ca6:	4628      	mov	r0, r5
   d7ca8:	f7fc fa02 	bl	d40b0 <__cxa_guard_release>
   d7cac:	4a05      	ldr	r2, [pc, #20]	; (d7cc4 <_Z19__fetch_global_Wirev+0x44>)
   d7cae:	4906      	ldr	r1, [pc, #24]	; (d7cc8 <_Z19__fetch_global_Wirev+0x48>)
   d7cb0:	4803      	ldr	r0, [pc, #12]	; (d7cc0 <_Z19__fetch_global_Wirev+0x40>)
   d7cb2:	f000 f851 	bl	d7d58 <__aeabi_atexit>
	return wire;
}
   d7cb6:	4802      	ldr	r0, [pc, #8]	; (d7cc0 <_Z19__fetch_global_Wirev+0x40>)
   d7cb8:	b007      	add	sp, #28
   d7cba:	bd30      	pop	{r4, r5, pc}
   d7cbc:	2003e6e4 	.word	0x2003e6e4
   d7cc0:	2003e6fc 	.word	0x2003e6fc
   d7cc4:	2003e1b0 	.word	0x2003e1b0
   d7cc8:	000d6cc7 	.word	0x000d6cc7

000d7ccc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7ccc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7cce:	4c0e      	ldr	r4, [pc, #56]	; (d7d08 <_Z20__fetch_global_Wire1v+0x3c>)
   d7cd0:	6823      	ldr	r3, [r4, #0]
   d7cd2:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7cd4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7cd6:	d413      	bmi.n	d7d00 <_Z20__fetch_global_Wire1v+0x34>
   d7cd8:	4620      	mov	r0, r4
   d7cda:	f7fc f9e4 	bl	d40a6 <__cxa_guard_acquire>
   d7cde:	b178      	cbz	r0, d7d00 <_Z20__fetch_global_Wire1v+0x34>
   d7ce0:	a801      	add	r0, sp, #4
   d7ce2:	f7ff ffb3 	bl	d7c4c <_Z18acquireWire1Bufferv>
   d7ce6:	aa01      	add	r2, sp, #4
   d7ce8:	2101      	movs	r1, #1
   d7cea:	4808      	ldr	r0, [pc, #32]	; (d7d0c <_Z20__fetch_global_Wire1v+0x40>)
   d7cec:	f7ff f818 	bl	d6d20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	f7fc f9dd 	bl	d40b0 <__cxa_guard_release>
   d7cf6:	4a06      	ldr	r2, [pc, #24]	; (d7d10 <_Z20__fetch_global_Wire1v+0x44>)
   d7cf8:	4906      	ldr	r1, [pc, #24]	; (d7d14 <_Z20__fetch_global_Wire1v+0x48>)
   d7cfa:	4804      	ldr	r0, [pc, #16]	; (d7d0c <_Z20__fetch_global_Wire1v+0x40>)
   d7cfc:	f000 f82c 	bl	d7d58 <__aeabi_atexit>
	return wire;
}
   d7d00:	4802      	ldr	r0, [pc, #8]	; (d7d0c <_Z20__fetch_global_Wire1v+0x40>)
   d7d02:	b006      	add	sp, #24
   d7d04:	bd10      	pop	{r4, pc}
   d7d06:	bf00      	nop
   d7d08:	2003e710 	.word	0x2003e710
   d7d0c:	2003e6e8 	.word	0x2003e6e8
   d7d10:	2003e1b0 	.word	0x2003e1b0
   d7d14:	000d6cc7 	.word	0x000d6cc7

000d7d18 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d7d18:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d7d1a:	4d0b      	ldr	r5, [pc, #44]	; (d7d48 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d7d1c:	6829      	ldr	r1, [r5, #0]
   d7d1e:	f011 0401 	ands.w	r4, r1, #1
   d7d22:	d10f      	bne.n	d7d44 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7d24:	4628      	mov	r0, r5
   d7d26:	f7fc f9be 	bl	d40a6 <__cxa_guard_acquire>
   d7d2a:	b158      	cbz	r0, d7d44 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7d2c:	4621      	mov	r1, r4
   d7d2e:	4807      	ldr	r0, [pc, #28]	; (d7d4c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7d30:	f7ff fab8 	bl	d72a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7d34:	4628      	mov	r0, r5
   d7d36:	f7fc f9bb 	bl	d40b0 <__cxa_guard_release>
   d7d3a:	4a05      	ldr	r2, [pc, #20]	; (d7d50 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d7d3c:	4905      	ldr	r1, [pc, #20]	; (d7d54 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d7d3e:	4803      	ldr	r0, [pc, #12]	; (d7d4c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7d40:	f000 f80a 	bl	d7d58 <__aeabi_atexit>
    return instance;
}
   d7d44:	4801      	ldr	r0, [pc, #4]	; (d7d4c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7d46:	bd38      	pop	{r3, r4, r5, pc}
   d7d48:	2003e720 	.word	0x2003e720
   d7d4c:	2003e714 	.word	0x2003e714
   d7d50:	2003e1b0 	.word	0x2003e1b0
   d7d54:	000d7295 	.word	0x000d7295

000d7d58 <__aeabi_atexit>:
   d7d58:	460b      	mov	r3, r1
   d7d5a:	4601      	mov	r1, r0
   d7d5c:	4618      	mov	r0, r3
   d7d5e:	f000 be0d 	b.w	d897c <__cxa_atexit>

000d7d62 <_ZdlPvj>:
   d7d62:	f7fc b99c 	b.w	d409e <_ZdlPv>
	...

000d7d68 <_ZSt15get_new_handlerv>:
   d7d68:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <_ZSt15get_new_handlerv+0xc>)
   d7d6a:	6818      	ldr	r0, [r3, #0]
   d7d6c:	f3bf 8f5f 	dmb	sy
   d7d70:	4770      	bx	lr
   d7d72:	bf00      	nop
   d7d74:	2003e724 	.word	0x2003e724

000d7d78 <_ZnwjRKSt9nothrow_t>:
   d7d78:	b510      	push	{r4, lr}
   d7d7a:	2800      	cmp	r0, #0
   d7d7c:	bf14      	ite	ne
   d7d7e:	4604      	movne	r4, r0
   d7d80:	2401      	moveq	r4, #1
   d7d82:	4620      	mov	r0, r4
   d7d84:	f7fe fa8a 	bl	d629c <malloc>
   d7d88:	b920      	cbnz	r0, d7d94 <_ZnwjRKSt9nothrow_t+0x1c>
   d7d8a:	f7ff ffed 	bl	d7d68 <_ZSt15get_new_handlerv>
   d7d8e:	b108      	cbz	r0, d7d94 <_ZnwjRKSt9nothrow_t+0x1c>
   d7d90:	4780      	blx	r0
   d7d92:	e7f6      	b.n	d7d82 <_ZnwjRKSt9nothrow_t+0xa>
   d7d94:	bd10      	pop	{r4, pc}

000d7d96 <_ZnajRKSt9nothrow_t>:
   d7d96:	f7ff bfef 	b.w	d7d78 <_ZnwjRKSt9nothrow_t>

000d7d9a <_ZSt25__throw_bad_function_callv>:
   d7d9a:	b508      	push	{r3, lr}
   d7d9c:	f7fe faa6 	bl	d62ec <abort>

000d7da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7da0:	4b24      	ldr	r3, [pc, #144]	; (d7e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7da2:	681a      	ldr	r2, [r3, #0]
   d7da4:	07d0      	lsls	r0, r2, #31
   d7da6:	bf5c      	itt	pl
   d7da8:	2201      	movpl	r2, #1
   d7daa:	601a      	strpl	r2, [r3, #0]
   d7dac:	4b22      	ldr	r3, [pc, #136]	; (d7e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7dae:	681a      	ldr	r2, [r3, #0]
   d7db0:	07d1      	lsls	r1, r2, #31
   d7db2:	bf5c      	itt	pl
   d7db4:	2201      	movpl	r2, #1
   d7db6:	601a      	strpl	r2, [r3, #0]
   d7db8:	4b20      	ldr	r3, [pc, #128]	; (d7e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7dba:	681a      	ldr	r2, [r3, #0]
   d7dbc:	07d2      	lsls	r2, r2, #31
   d7dbe:	bf5c      	itt	pl
   d7dc0:	2201      	movpl	r2, #1
   d7dc2:	601a      	strpl	r2, [r3, #0]
   d7dc4:	4b1e      	ldr	r3, [pc, #120]	; (d7e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7dc6:	681a      	ldr	r2, [r3, #0]
   d7dc8:	07d0      	lsls	r0, r2, #31
   d7dca:	bf5c      	itt	pl
   d7dcc:	2201      	movpl	r2, #1
   d7dce:	601a      	strpl	r2, [r3, #0]
   d7dd0:	4b1c      	ldr	r3, [pc, #112]	; (d7e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7dd2:	681a      	ldr	r2, [r3, #0]
   d7dd4:	07d1      	lsls	r1, r2, #31
   d7dd6:	bf5c      	itt	pl
   d7dd8:	2201      	movpl	r2, #1
   d7dda:	601a      	strpl	r2, [r3, #0]
   d7ddc:	4b1a      	ldr	r3, [pc, #104]	; (d7e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7dde:	681a      	ldr	r2, [r3, #0]
   d7de0:	07d2      	lsls	r2, r2, #31
   d7de2:	bf5c      	itt	pl
   d7de4:	2201      	movpl	r2, #1
   d7de6:	601a      	strpl	r2, [r3, #0]
   d7de8:	4b18      	ldr	r3, [pc, #96]	; (d7e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7dea:	681a      	ldr	r2, [r3, #0]
   d7dec:	07d0      	lsls	r0, r2, #31
   d7dee:	bf5c      	itt	pl
   d7df0:	2201      	movpl	r2, #1
   d7df2:	601a      	strpl	r2, [r3, #0]
   d7df4:	4b16      	ldr	r3, [pc, #88]	; (d7e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7df6:	681a      	ldr	r2, [r3, #0]
   d7df8:	07d1      	lsls	r1, r2, #31
   d7dfa:	bf5c      	itt	pl
   d7dfc:	2201      	movpl	r2, #1
   d7dfe:	601a      	strpl	r2, [r3, #0]
   d7e00:	4b14      	ldr	r3, [pc, #80]	; (d7e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7e02:	681a      	ldr	r2, [r3, #0]
   d7e04:	07d2      	lsls	r2, r2, #31
   d7e06:	bf5c      	itt	pl
   d7e08:	2201      	movpl	r2, #1
   d7e0a:	601a      	strpl	r2, [r3, #0]
   d7e0c:	4b12      	ldr	r3, [pc, #72]	; (d7e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7e0e:	681a      	ldr	r2, [r3, #0]
   d7e10:	07d0      	lsls	r0, r2, #31
   d7e12:	bf5c      	itt	pl
   d7e14:	2201      	movpl	r2, #1
   d7e16:	601a      	strpl	r2, [r3, #0]
   d7e18:	4b10      	ldr	r3, [pc, #64]	; (d7e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7e1a:	681a      	ldr	r2, [r3, #0]
   d7e1c:	07d1      	lsls	r1, r2, #31
   d7e1e:	bf5c      	itt	pl
   d7e20:	2201      	movpl	r2, #1
   d7e22:	601a      	strpl	r2, [r3, #0]
   d7e24:	4b0e      	ldr	r3, [pc, #56]	; (d7e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7e26:	681a      	ldr	r2, [r3, #0]
   d7e28:	07d2      	lsls	r2, r2, #31
   d7e2a:	bf5c      	itt	pl
   d7e2c:	2201      	movpl	r2, #1
   d7e2e:	601a      	strpl	r2, [r3, #0]
   d7e30:	4770      	bx	lr
   d7e32:	bf00      	nop
   d7e34:	2003e754 	.word	0x2003e754
   d7e38:	2003e750 	.word	0x2003e750
   d7e3c:	2003e74c 	.word	0x2003e74c
   d7e40:	2003e748 	.word	0x2003e748
   d7e44:	2003e744 	.word	0x2003e744
   d7e48:	2003e740 	.word	0x2003e740
   d7e4c:	2003e73c 	.word	0x2003e73c
   d7e50:	2003e738 	.word	0x2003e738
   d7e54:	2003e734 	.word	0x2003e734
   d7e58:	2003e730 	.word	0x2003e730
   d7e5c:	2003e72c 	.word	0x2003e72c
   d7e60:	2003e728 	.word	0x2003e728

000d7e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7e64:	4b18      	ldr	r3, [pc, #96]	; (d7ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7e66:	681a      	ldr	r2, [r3, #0]
   d7e68:	07d1      	lsls	r1, r2, #31
   d7e6a:	bf5c      	itt	pl
   d7e6c:	2201      	movpl	r2, #1
   d7e6e:	601a      	strpl	r2, [r3, #0]
   d7e70:	4b16      	ldr	r3, [pc, #88]	; (d7ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7e72:	681a      	ldr	r2, [r3, #0]
   d7e74:	07d2      	lsls	r2, r2, #31
   d7e76:	bf5c      	itt	pl
   d7e78:	2201      	movpl	r2, #1
   d7e7a:	601a      	strpl	r2, [r3, #0]
   d7e7c:	4b14      	ldr	r3, [pc, #80]	; (d7ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7e7e:	681a      	ldr	r2, [r3, #0]
   d7e80:	07d0      	lsls	r0, r2, #31
   d7e82:	bf5c      	itt	pl
   d7e84:	2201      	movpl	r2, #1
   d7e86:	601a      	strpl	r2, [r3, #0]
   d7e88:	4b12      	ldr	r3, [pc, #72]	; (d7ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7e8a:	681a      	ldr	r2, [r3, #0]
   d7e8c:	07d1      	lsls	r1, r2, #31
   d7e8e:	bf5c      	itt	pl
   d7e90:	2201      	movpl	r2, #1
   d7e92:	601a      	strpl	r2, [r3, #0]
   d7e94:	4b10      	ldr	r3, [pc, #64]	; (d7ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7e96:	681a      	ldr	r2, [r3, #0]
   d7e98:	07d2      	lsls	r2, r2, #31
   d7e9a:	bf5c      	itt	pl
   d7e9c:	2201      	movpl	r2, #1
   d7e9e:	601a      	strpl	r2, [r3, #0]
   d7ea0:	4b0e      	ldr	r3, [pc, #56]	; (d7edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7ea2:	681a      	ldr	r2, [r3, #0]
   d7ea4:	07d0      	lsls	r0, r2, #31
   d7ea6:	bf5c      	itt	pl
   d7ea8:	2201      	movpl	r2, #1
   d7eaa:	601a      	strpl	r2, [r3, #0]
   d7eac:	4b0c      	ldr	r3, [pc, #48]	; (d7ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7eae:	681a      	ldr	r2, [r3, #0]
   d7eb0:	07d1      	lsls	r1, r2, #31
   d7eb2:	bf5c      	itt	pl
   d7eb4:	2201      	movpl	r2, #1
   d7eb6:	601a      	strpl	r2, [r3, #0]
   d7eb8:	4b0a      	ldr	r3, [pc, #40]	; (d7ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7eba:	681a      	ldr	r2, [r3, #0]
   d7ebc:	07d2      	lsls	r2, r2, #31
   d7ebe:	bf5c      	itt	pl
   d7ec0:	2201      	movpl	r2, #1
   d7ec2:	601a      	strpl	r2, [r3, #0]
   d7ec4:	4770      	bx	lr
   d7ec6:	bf00      	nop
   d7ec8:	2003e774 	.word	0x2003e774
   d7ecc:	2003e770 	.word	0x2003e770
   d7ed0:	2003e76c 	.word	0x2003e76c
   d7ed4:	2003e768 	.word	0x2003e768
   d7ed8:	2003e764 	.word	0x2003e764
   d7edc:	2003e760 	.word	0x2003e760
   d7ee0:	2003e75c 	.word	0x2003e75c
   d7ee4:	2003e758 	.word	0x2003e758

000d7ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7ee8:	4b18      	ldr	r3, [pc, #96]	; (d7f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7eea:	681a      	ldr	r2, [r3, #0]
   d7eec:	07d1      	lsls	r1, r2, #31
   d7eee:	bf5c      	itt	pl
   d7ef0:	2201      	movpl	r2, #1
   d7ef2:	601a      	strpl	r2, [r3, #0]
   d7ef4:	4b16      	ldr	r3, [pc, #88]	; (d7f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7ef6:	681a      	ldr	r2, [r3, #0]
   d7ef8:	07d2      	lsls	r2, r2, #31
   d7efa:	bf5c      	itt	pl
   d7efc:	2201      	movpl	r2, #1
   d7efe:	601a      	strpl	r2, [r3, #0]
   d7f00:	4b14      	ldr	r3, [pc, #80]	; (d7f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f02:	681a      	ldr	r2, [r3, #0]
   d7f04:	07d0      	lsls	r0, r2, #31
   d7f06:	bf5c      	itt	pl
   d7f08:	2201      	movpl	r2, #1
   d7f0a:	601a      	strpl	r2, [r3, #0]
   d7f0c:	4b12      	ldr	r3, [pc, #72]	; (d7f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f0e:	681a      	ldr	r2, [r3, #0]
   d7f10:	07d1      	lsls	r1, r2, #31
   d7f12:	bf5c      	itt	pl
   d7f14:	2201      	movpl	r2, #1
   d7f16:	601a      	strpl	r2, [r3, #0]
   d7f18:	4b10      	ldr	r3, [pc, #64]	; (d7f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f1a:	681a      	ldr	r2, [r3, #0]
   d7f1c:	07d2      	lsls	r2, r2, #31
   d7f1e:	bf5c      	itt	pl
   d7f20:	2201      	movpl	r2, #1
   d7f22:	601a      	strpl	r2, [r3, #0]
   d7f24:	4b0e      	ldr	r3, [pc, #56]	; (d7f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f26:	681a      	ldr	r2, [r3, #0]
   d7f28:	07d0      	lsls	r0, r2, #31
   d7f2a:	bf5c      	itt	pl
   d7f2c:	2201      	movpl	r2, #1
   d7f2e:	601a      	strpl	r2, [r3, #0]
   d7f30:	4b0c      	ldr	r3, [pc, #48]	; (d7f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f32:	681a      	ldr	r2, [r3, #0]
   d7f34:	07d1      	lsls	r1, r2, #31
   d7f36:	bf5c      	itt	pl
   d7f38:	2201      	movpl	r2, #1
   d7f3a:	601a      	strpl	r2, [r3, #0]
   d7f3c:	4b0a      	ldr	r3, [pc, #40]	; (d7f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f3e:	681a      	ldr	r2, [r3, #0]
   d7f40:	07d2      	lsls	r2, r2, #31
   d7f42:	bf5c      	itt	pl
   d7f44:	2201      	movpl	r2, #1
   d7f46:	601a      	strpl	r2, [r3, #0]
   d7f48:	4770      	bx	lr
   d7f4a:	bf00      	nop
   d7f4c:	2003e794 	.word	0x2003e794
   d7f50:	2003e790 	.word	0x2003e790
   d7f54:	2003e78c 	.word	0x2003e78c
   d7f58:	2003e788 	.word	0x2003e788
   d7f5c:	2003e784 	.word	0x2003e784
   d7f60:	2003e780 	.word	0x2003e780
   d7f64:	2003e77c 	.word	0x2003e77c
   d7f68:	2003e778 	.word	0x2003e778

000d7f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7f6c:	4b24      	ldr	r3, [pc, #144]	; (d8000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7f6e:	681a      	ldr	r2, [r3, #0]
   d7f70:	07d0      	lsls	r0, r2, #31
   d7f72:	bf5c      	itt	pl
   d7f74:	2201      	movpl	r2, #1
   d7f76:	601a      	strpl	r2, [r3, #0]
   d7f78:	4b22      	ldr	r3, [pc, #136]	; (d8004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7f7a:	681a      	ldr	r2, [r3, #0]
   d7f7c:	07d1      	lsls	r1, r2, #31
   d7f7e:	bf5c      	itt	pl
   d7f80:	2201      	movpl	r2, #1
   d7f82:	601a      	strpl	r2, [r3, #0]
   d7f84:	4b20      	ldr	r3, [pc, #128]	; (d8008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7f86:	681a      	ldr	r2, [r3, #0]
   d7f88:	07d2      	lsls	r2, r2, #31
   d7f8a:	bf5c      	itt	pl
   d7f8c:	2201      	movpl	r2, #1
   d7f8e:	601a      	strpl	r2, [r3, #0]
   d7f90:	4b1e      	ldr	r3, [pc, #120]	; (d800c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7f92:	681a      	ldr	r2, [r3, #0]
   d7f94:	07d0      	lsls	r0, r2, #31
   d7f96:	bf5c      	itt	pl
   d7f98:	2201      	movpl	r2, #1
   d7f9a:	601a      	strpl	r2, [r3, #0]
   d7f9c:	4b1c      	ldr	r3, [pc, #112]	; (d8010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7f9e:	681a      	ldr	r2, [r3, #0]
   d7fa0:	07d1      	lsls	r1, r2, #31
   d7fa2:	bf5c      	itt	pl
   d7fa4:	2201      	movpl	r2, #1
   d7fa6:	601a      	strpl	r2, [r3, #0]
   d7fa8:	4b1a      	ldr	r3, [pc, #104]	; (d8014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7faa:	681a      	ldr	r2, [r3, #0]
   d7fac:	07d2      	lsls	r2, r2, #31
   d7fae:	bf5c      	itt	pl
   d7fb0:	2201      	movpl	r2, #1
   d7fb2:	601a      	strpl	r2, [r3, #0]
   d7fb4:	4b18      	ldr	r3, [pc, #96]	; (d8018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7fb6:	681a      	ldr	r2, [r3, #0]
   d7fb8:	07d0      	lsls	r0, r2, #31
   d7fba:	bf5c      	itt	pl
   d7fbc:	2201      	movpl	r2, #1
   d7fbe:	601a      	strpl	r2, [r3, #0]
   d7fc0:	4b16      	ldr	r3, [pc, #88]	; (d801c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7fc2:	681a      	ldr	r2, [r3, #0]
   d7fc4:	07d1      	lsls	r1, r2, #31
   d7fc6:	bf5c      	itt	pl
   d7fc8:	2201      	movpl	r2, #1
   d7fca:	601a      	strpl	r2, [r3, #0]
   d7fcc:	4b14      	ldr	r3, [pc, #80]	; (d8020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7fce:	681a      	ldr	r2, [r3, #0]
   d7fd0:	07d2      	lsls	r2, r2, #31
   d7fd2:	bf5c      	itt	pl
   d7fd4:	2201      	movpl	r2, #1
   d7fd6:	601a      	strpl	r2, [r3, #0]
   d7fd8:	4b12      	ldr	r3, [pc, #72]	; (d8024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7fda:	681a      	ldr	r2, [r3, #0]
   d7fdc:	07d0      	lsls	r0, r2, #31
   d7fde:	bf5c      	itt	pl
   d7fe0:	2201      	movpl	r2, #1
   d7fe2:	601a      	strpl	r2, [r3, #0]
   d7fe4:	4b10      	ldr	r3, [pc, #64]	; (d8028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7fe6:	681a      	ldr	r2, [r3, #0]
   d7fe8:	07d1      	lsls	r1, r2, #31
   d7fea:	bf5c      	itt	pl
   d7fec:	2201      	movpl	r2, #1
   d7fee:	601a      	strpl	r2, [r3, #0]
   d7ff0:	4b0e      	ldr	r3, [pc, #56]	; (d802c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7ff2:	681a      	ldr	r2, [r3, #0]
   d7ff4:	07d2      	lsls	r2, r2, #31
   d7ff6:	bf5c      	itt	pl
   d7ff8:	2201      	movpl	r2, #1
   d7ffa:	601a      	strpl	r2, [r3, #0]
   d7ffc:	4770      	bx	lr
   d7ffe:	bf00      	nop
   d8000:	2003e7c4 	.word	0x2003e7c4
   d8004:	2003e7c0 	.word	0x2003e7c0
   d8008:	2003e7bc 	.word	0x2003e7bc
   d800c:	2003e7b8 	.word	0x2003e7b8
   d8010:	2003e7b4 	.word	0x2003e7b4
   d8014:	2003e7b0 	.word	0x2003e7b0
   d8018:	2003e7ac 	.word	0x2003e7ac
   d801c:	2003e7a8 	.word	0x2003e7a8
   d8020:	2003e7a4 	.word	0x2003e7a4
   d8024:	2003e7a0 	.word	0x2003e7a0
   d8028:	2003e79c 	.word	0x2003e79c
   d802c:	2003e798 	.word	0x2003e798

000d8030 <__aeabi_drsub>:
   d8030:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8034:	e002      	b.n	d803c <__adddf3>
   d8036:	bf00      	nop

000d8038 <__aeabi_dsub>:
   d8038:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d803c <__adddf3>:
   d803c:	b530      	push	{r4, r5, lr}
   d803e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8042:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8046:	ea94 0f05 	teq	r4, r5
   d804a:	bf08      	it	eq
   d804c:	ea90 0f02 	teqeq	r0, r2
   d8050:	bf1f      	itttt	ne
   d8052:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8056:	ea55 0c02 	orrsne.w	ip, r5, r2
   d805a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d805e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8062:	f000 80e2 	beq.w	d822a <__adddf3+0x1ee>
   d8066:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d806a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d806e:	bfb8      	it	lt
   d8070:	426d      	neglt	r5, r5
   d8072:	dd0c      	ble.n	d808e <__adddf3+0x52>
   d8074:	442c      	add	r4, r5
   d8076:	ea80 0202 	eor.w	r2, r0, r2
   d807a:	ea81 0303 	eor.w	r3, r1, r3
   d807e:	ea82 0000 	eor.w	r0, r2, r0
   d8082:	ea83 0101 	eor.w	r1, r3, r1
   d8086:	ea80 0202 	eor.w	r2, r0, r2
   d808a:	ea81 0303 	eor.w	r3, r1, r3
   d808e:	2d36      	cmp	r5, #54	; 0x36
   d8090:	bf88      	it	hi
   d8092:	bd30      	pophi	{r4, r5, pc}
   d8094:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8098:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d809c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d80a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d80a4:	d002      	beq.n	d80ac <__adddf3+0x70>
   d80a6:	4240      	negs	r0, r0
   d80a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d80ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d80b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d80b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d80b8:	d002      	beq.n	d80c0 <__adddf3+0x84>
   d80ba:	4252      	negs	r2, r2
   d80bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d80c0:	ea94 0f05 	teq	r4, r5
   d80c4:	f000 80a7 	beq.w	d8216 <__adddf3+0x1da>
   d80c8:	f1a4 0401 	sub.w	r4, r4, #1
   d80cc:	f1d5 0e20 	rsbs	lr, r5, #32
   d80d0:	db0d      	blt.n	d80ee <__adddf3+0xb2>
   d80d2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d80d6:	fa22 f205 	lsr.w	r2, r2, r5
   d80da:	1880      	adds	r0, r0, r2
   d80dc:	f141 0100 	adc.w	r1, r1, #0
   d80e0:	fa03 f20e 	lsl.w	r2, r3, lr
   d80e4:	1880      	adds	r0, r0, r2
   d80e6:	fa43 f305 	asr.w	r3, r3, r5
   d80ea:	4159      	adcs	r1, r3
   d80ec:	e00e      	b.n	d810c <__adddf3+0xd0>
   d80ee:	f1a5 0520 	sub.w	r5, r5, #32
   d80f2:	f10e 0e20 	add.w	lr, lr, #32
   d80f6:	2a01      	cmp	r2, #1
   d80f8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d80fc:	bf28      	it	cs
   d80fe:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8102:	fa43 f305 	asr.w	r3, r3, r5
   d8106:	18c0      	adds	r0, r0, r3
   d8108:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d810c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8110:	d507      	bpl.n	d8122 <__adddf3+0xe6>
   d8112:	f04f 0e00 	mov.w	lr, #0
   d8116:	f1dc 0c00 	rsbs	ip, ip, #0
   d811a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d811e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8122:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8126:	d31b      	bcc.n	d8160 <__adddf3+0x124>
   d8128:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d812c:	d30c      	bcc.n	d8148 <__adddf3+0x10c>
   d812e:	0849      	lsrs	r1, r1, #1
   d8130:	ea5f 0030 	movs.w	r0, r0, rrx
   d8134:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8138:	f104 0401 	add.w	r4, r4, #1
   d813c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8140:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8144:	f080 809a 	bcs.w	d827c <__adddf3+0x240>
   d8148:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d814c:	bf08      	it	eq
   d814e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8152:	f150 0000 	adcs.w	r0, r0, #0
   d8156:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d815a:	ea41 0105 	orr.w	r1, r1, r5
   d815e:	bd30      	pop	{r4, r5, pc}
   d8160:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8164:	4140      	adcs	r0, r0
   d8166:	eb41 0101 	adc.w	r1, r1, r1
   d816a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d816e:	f1a4 0401 	sub.w	r4, r4, #1
   d8172:	d1e9      	bne.n	d8148 <__adddf3+0x10c>
   d8174:	f091 0f00 	teq	r1, #0
   d8178:	bf04      	itt	eq
   d817a:	4601      	moveq	r1, r0
   d817c:	2000      	moveq	r0, #0
   d817e:	fab1 f381 	clz	r3, r1
   d8182:	bf08      	it	eq
   d8184:	3320      	addeq	r3, #32
   d8186:	f1a3 030b 	sub.w	r3, r3, #11
   d818a:	f1b3 0220 	subs.w	r2, r3, #32
   d818e:	da0c      	bge.n	d81aa <__adddf3+0x16e>
   d8190:	320c      	adds	r2, #12
   d8192:	dd08      	ble.n	d81a6 <__adddf3+0x16a>
   d8194:	f102 0c14 	add.w	ip, r2, #20
   d8198:	f1c2 020c 	rsb	r2, r2, #12
   d819c:	fa01 f00c 	lsl.w	r0, r1, ip
   d81a0:	fa21 f102 	lsr.w	r1, r1, r2
   d81a4:	e00c      	b.n	d81c0 <__adddf3+0x184>
   d81a6:	f102 0214 	add.w	r2, r2, #20
   d81aa:	bfd8      	it	le
   d81ac:	f1c2 0c20 	rsble	ip, r2, #32
   d81b0:	fa01 f102 	lsl.w	r1, r1, r2
   d81b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d81b8:	bfdc      	itt	le
   d81ba:	ea41 010c 	orrle.w	r1, r1, ip
   d81be:	4090      	lslle	r0, r2
   d81c0:	1ae4      	subs	r4, r4, r3
   d81c2:	bfa2      	ittt	ge
   d81c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d81c8:	4329      	orrge	r1, r5
   d81ca:	bd30      	popge	{r4, r5, pc}
   d81cc:	ea6f 0404 	mvn.w	r4, r4
   d81d0:	3c1f      	subs	r4, #31
   d81d2:	da1c      	bge.n	d820e <__adddf3+0x1d2>
   d81d4:	340c      	adds	r4, #12
   d81d6:	dc0e      	bgt.n	d81f6 <__adddf3+0x1ba>
   d81d8:	f104 0414 	add.w	r4, r4, #20
   d81dc:	f1c4 0220 	rsb	r2, r4, #32
   d81e0:	fa20 f004 	lsr.w	r0, r0, r4
   d81e4:	fa01 f302 	lsl.w	r3, r1, r2
   d81e8:	ea40 0003 	orr.w	r0, r0, r3
   d81ec:	fa21 f304 	lsr.w	r3, r1, r4
   d81f0:	ea45 0103 	orr.w	r1, r5, r3
   d81f4:	bd30      	pop	{r4, r5, pc}
   d81f6:	f1c4 040c 	rsb	r4, r4, #12
   d81fa:	f1c4 0220 	rsb	r2, r4, #32
   d81fe:	fa20 f002 	lsr.w	r0, r0, r2
   d8202:	fa01 f304 	lsl.w	r3, r1, r4
   d8206:	ea40 0003 	orr.w	r0, r0, r3
   d820a:	4629      	mov	r1, r5
   d820c:	bd30      	pop	{r4, r5, pc}
   d820e:	fa21 f004 	lsr.w	r0, r1, r4
   d8212:	4629      	mov	r1, r5
   d8214:	bd30      	pop	{r4, r5, pc}
   d8216:	f094 0f00 	teq	r4, #0
   d821a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d821e:	bf06      	itte	eq
   d8220:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8224:	3401      	addeq	r4, #1
   d8226:	3d01      	subne	r5, #1
   d8228:	e74e      	b.n	d80c8 <__adddf3+0x8c>
   d822a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d822e:	bf18      	it	ne
   d8230:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8234:	d029      	beq.n	d828a <__adddf3+0x24e>
   d8236:	ea94 0f05 	teq	r4, r5
   d823a:	bf08      	it	eq
   d823c:	ea90 0f02 	teqeq	r0, r2
   d8240:	d005      	beq.n	d824e <__adddf3+0x212>
   d8242:	ea54 0c00 	orrs.w	ip, r4, r0
   d8246:	bf04      	itt	eq
   d8248:	4619      	moveq	r1, r3
   d824a:	4610      	moveq	r0, r2
   d824c:	bd30      	pop	{r4, r5, pc}
   d824e:	ea91 0f03 	teq	r1, r3
   d8252:	bf1e      	ittt	ne
   d8254:	2100      	movne	r1, #0
   d8256:	2000      	movne	r0, #0
   d8258:	bd30      	popne	{r4, r5, pc}
   d825a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d825e:	d105      	bne.n	d826c <__adddf3+0x230>
   d8260:	0040      	lsls	r0, r0, #1
   d8262:	4149      	adcs	r1, r1
   d8264:	bf28      	it	cs
   d8266:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d826a:	bd30      	pop	{r4, r5, pc}
   d826c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8270:	bf3c      	itt	cc
   d8272:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8276:	bd30      	popcc	{r4, r5, pc}
   d8278:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d827c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8280:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8284:	f04f 0000 	mov.w	r0, #0
   d8288:	bd30      	pop	{r4, r5, pc}
   d828a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d828e:	bf1a      	itte	ne
   d8290:	4619      	movne	r1, r3
   d8292:	4610      	movne	r0, r2
   d8294:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8298:	bf1c      	itt	ne
   d829a:	460b      	movne	r3, r1
   d829c:	4602      	movne	r2, r0
   d829e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d82a2:	bf06      	itte	eq
   d82a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d82a8:	ea91 0f03 	teqeq	r1, r3
   d82ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d82b0:	bd30      	pop	{r4, r5, pc}
   d82b2:	bf00      	nop

000d82b4 <__aeabi_ui2d>:
   d82b4:	f090 0f00 	teq	r0, #0
   d82b8:	bf04      	itt	eq
   d82ba:	2100      	moveq	r1, #0
   d82bc:	4770      	bxeq	lr
   d82be:	b530      	push	{r4, r5, lr}
   d82c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82c8:	f04f 0500 	mov.w	r5, #0
   d82cc:	f04f 0100 	mov.w	r1, #0
   d82d0:	e750      	b.n	d8174 <__adddf3+0x138>
   d82d2:	bf00      	nop

000d82d4 <__aeabi_i2d>:
   d82d4:	f090 0f00 	teq	r0, #0
   d82d8:	bf04      	itt	eq
   d82da:	2100      	moveq	r1, #0
   d82dc:	4770      	bxeq	lr
   d82de:	b530      	push	{r4, r5, lr}
   d82e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d82ec:	bf48      	it	mi
   d82ee:	4240      	negmi	r0, r0
   d82f0:	f04f 0100 	mov.w	r1, #0
   d82f4:	e73e      	b.n	d8174 <__adddf3+0x138>
   d82f6:	bf00      	nop

000d82f8 <__aeabi_f2d>:
   d82f8:	0042      	lsls	r2, r0, #1
   d82fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d82fe:	ea4f 0131 	mov.w	r1, r1, rrx
   d8302:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8306:	bf1f      	itttt	ne
   d8308:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d830c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8310:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8314:	4770      	bxne	lr
   d8316:	f092 0f00 	teq	r2, #0
   d831a:	bf14      	ite	ne
   d831c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8320:	4770      	bxeq	lr
   d8322:	b530      	push	{r4, r5, lr}
   d8324:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d832c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8330:	e720      	b.n	d8174 <__adddf3+0x138>
   d8332:	bf00      	nop

000d8334 <__aeabi_ul2d>:
   d8334:	ea50 0201 	orrs.w	r2, r0, r1
   d8338:	bf08      	it	eq
   d833a:	4770      	bxeq	lr
   d833c:	b530      	push	{r4, r5, lr}
   d833e:	f04f 0500 	mov.w	r5, #0
   d8342:	e00a      	b.n	d835a <__aeabi_l2d+0x16>

000d8344 <__aeabi_l2d>:
   d8344:	ea50 0201 	orrs.w	r2, r0, r1
   d8348:	bf08      	it	eq
   d834a:	4770      	bxeq	lr
   d834c:	b530      	push	{r4, r5, lr}
   d834e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8352:	d502      	bpl.n	d835a <__aeabi_l2d+0x16>
   d8354:	4240      	negs	r0, r0
   d8356:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d835a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d835e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8362:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8366:	f43f aedc 	beq.w	d8122 <__adddf3+0xe6>
   d836a:	f04f 0203 	mov.w	r2, #3
   d836e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8372:	bf18      	it	ne
   d8374:	3203      	addne	r2, #3
   d8376:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d837a:	bf18      	it	ne
   d837c:	3203      	addne	r2, #3
   d837e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8382:	f1c2 0320 	rsb	r3, r2, #32
   d8386:	fa00 fc03 	lsl.w	ip, r0, r3
   d838a:	fa20 f002 	lsr.w	r0, r0, r2
   d838e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8392:	ea40 000e 	orr.w	r0, r0, lr
   d8396:	fa21 f102 	lsr.w	r1, r1, r2
   d839a:	4414      	add	r4, r2
   d839c:	e6c1      	b.n	d8122 <__adddf3+0xe6>
   d839e:	bf00      	nop

000d83a0 <__aeabi_dmul>:
   d83a0:	b570      	push	{r4, r5, r6, lr}
   d83a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d83a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d83aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d83ae:	bf1d      	ittte	ne
   d83b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d83b4:	ea94 0f0c 	teqne	r4, ip
   d83b8:	ea95 0f0c 	teqne	r5, ip
   d83bc:	f000 f8de 	bleq	d857c <__aeabi_dmul+0x1dc>
   d83c0:	442c      	add	r4, r5
   d83c2:	ea81 0603 	eor.w	r6, r1, r3
   d83c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d83ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d83ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d83d2:	bf18      	it	ne
   d83d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d83d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d83dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d83e0:	d038      	beq.n	d8454 <__aeabi_dmul+0xb4>
   d83e2:	fba0 ce02 	umull	ip, lr, r0, r2
   d83e6:	f04f 0500 	mov.w	r5, #0
   d83ea:	fbe1 e502 	umlal	lr, r5, r1, r2
   d83ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d83f2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d83f6:	f04f 0600 	mov.w	r6, #0
   d83fa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d83fe:	f09c 0f00 	teq	ip, #0
   d8402:	bf18      	it	ne
   d8404:	f04e 0e01 	orrne.w	lr, lr, #1
   d8408:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d840c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8410:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8414:	d204      	bcs.n	d8420 <__aeabi_dmul+0x80>
   d8416:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d841a:	416d      	adcs	r5, r5
   d841c:	eb46 0606 	adc.w	r6, r6, r6
   d8420:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8424:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8428:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d842c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8430:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8434:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8438:	bf88      	it	hi
   d843a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d843e:	d81e      	bhi.n	d847e <__aeabi_dmul+0xde>
   d8440:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8444:	bf08      	it	eq
   d8446:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d844a:	f150 0000 	adcs.w	r0, r0, #0
   d844e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8452:	bd70      	pop	{r4, r5, r6, pc}
   d8454:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8458:	ea46 0101 	orr.w	r1, r6, r1
   d845c:	ea40 0002 	orr.w	r0, r0, r2
   d8460:	ea81 0103 	eor.w	r1, r1, r3
   d8464:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8468:	bfc2      	ittt	gt
   d846a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d846e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8472:	bd70      	popgt	{r4, r5, r6, pc}
   d8474:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8478:	f04f 0e00 	mov.w	lr, #0
   d847c:	3c01      	subs	r4, #1
   d847e:	f300 80ab 	bgt.w	d85d8 <__aeabi_dmul+0x238>
   d8482:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8486:	bfde      	ittt	le
   d8488:	2000      	movle	r0, #0
   d848a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d848e:	bd70      	pople	{r4, r5, r6, pc}
   d8490:	f1c4 0400 	rsb	r4, r4, #0
   d8494:	3c20      	subs	r4, #32
   d8496:	da35      	bge.n	d8504 <__aeabi_dmul+0x164>
   d8498:	340c      	adds	r4, #12
   d849a:	dc1b      	bgt.n	d84d4 <__aeabi_dmul+0x134>
   d849c:	f104 0414 	add.w	r4, r4, #20
   d84a0:	f1c4 0520 	rsb	r5, r4, #32
   d84a4:	fa00 f305 	lsl.w	r3, r0, r5
   d84a8:	fa20 f004 	lsr.w	r0, r0, r4
   d84ac:	fa01 f205 	lsl.w	r2, r1, r5
   d84b0:	ea40 0002 	orr.w	r0, r0, r2
   d84b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d84b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d84bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84c0:	fa21 f604 	lsr.w	r6, r1, r4
   d84c4:	eb42 0106 	adc.w	r1, r2, r6
   d84c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84cc:	bf08      	it	eq
   d84ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84d2:	bd70      	pop	{r4, r5, r6, pc}
   d84d4:	f1c4 040c 	rsb	r4, r4, #12
   d84d8:	f1c4 0520 	rsb	r5, r4, #32
   d84dc:	fa00 f304 	lsl.w	r3, r0, r4
   d84e0:	fa20 f005 	lsr.w	r0, r0, r5
   d84e4:	fa01 f204 	lsl.w	r2, r1, r4
   d84e8:	ea40 0002 	orr.w	r0, r0, r2
   d84ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d84f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84f4:	f141 0100 	adc.w	r1, r1, #0
   d84f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84fc:	bf08      	it	eq
   d84fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8502:	bd70      	pop	{r4, r5, r6, pc}
   d8504:	f1c4 0520 	rsb	r5, r4, #32
   d8508:	fa00 f205 	lsl.w	r2, r0, r5
   d850c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8510:	fa20 f304 	lsr.w	r3, r0, r4
   d8514:	fa01 f205 	lsl.w	r2, r1, r5
   d8518:	ea43 0302 	orr.w	r3, r3, r2
   d851c:	fa21 f004 	lsr.w	r0, r1, r4
   d8520:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8524:	fa21 f204 	lsr.w	r2, r1, r4
   d8528:	ea20 0002 	bic.w	r0, r0, r2
   d852c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8530:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8534:	bf08      	it	eq
   d8536:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d853a:	bd70      	pop	{r4, r5, r6, pc}
   d853c:	f094 0f00 	teq	r4, #0
   d8540:	d10f      	bne.n	d8562 <__aeabi_dmul+0x1c2>
   d8542:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8546:	0040      	lsls	r0, r0, #1
   d8548:	eb41 0101 	adc.w	r1, r1, r1
   d854c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8550:	bf08      	it	eq
   d8552:	3c01      	subeq	r4, #1
   d8554:	d0f7      	beq.n	d8546 <__aeabi_dmul+0x1a6>
   d8556:	ea41 0106 	orr.w	r1, r1, r6
   d855a:	f095 0f00 	teq	r5, #0
   d855e:	bf18      	it	ne
   d8560:	4770      	bxne	lr
   d8562:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8566:	0052      	lsls	r2, r2, #1
   d8568:	eb43 0303 	adc.w	r3, r3, r3
   d856c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8570:	bf08      	it	eq
   d8572:	3d01      	subeq	r5, #1
   d8574:	d0f7      	beq.n	d8566 <__aeabi_dmul+0x1c6>
   d8576:	ea43 0306 	orr.w	r3, r3, r6
   d857a:	4770      	bx	lr
   d857c:	ea94 0f0c 	teq	r4, ip
   d8580:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8584:	bf18      	it	ne
   d8586:	ea95 0f0c 	teqne	r5, ip
   d858a:	d00c      	beq.n	d85a6 <__aeabi_dmul+0x206>
   d858c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8590:	bf18      	it	ne
   d8592:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8596:	d1d1      	bne.n	d853c <__aeabi_dmul+0x19c>
   d8598:	ea81 0103 	eor.w	r1, r1, r3
   d859c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85a0:	f04f 0000 	mov.w	r0, #0
   d85a4:	bd70      	pop	{r4, r5, r6, pc}
   d85a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85aa:	bf06      	itte	eq
   d85ac:	4610      	moveq	r0, r2
   d85ae:	4619      	moveq	r1, r3
   d85b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d85b4:	d019      	beq.n	d85ea <__aeabi_dmul+0x24a>
   d85b6:	ea94 0f0c 	teq	r4, ip
   d85ba:	d102      	bne.n	d85c2 <__aeabi_dmul+0x222>
   d85bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d85c0:	d113      	bne.n	d85ea <__aeabi_dmul+0x24a>
   d85c2:	ea95 0f0c 	teq	r5, ip
   d85c6:	d105      	bne.n	d85d4 <__aeabi_dmul+0x234>
   d85c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d85cc:	bf1c      	itt	ne
   d85ce:	4610      	movne	r0, r2
   d85d0:	4619      	movne	r1, r3
   d85d2:	d10a      	bne.n	d85ea <__aeabi_dmul+0x24a>
   d85d4:	ea81 0103 	eor.w	r1, r1, r3
   d85d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d85e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d85e4:	f04f 0000 	mov.w	r0, #0
   d85e8:	bd70      	pop	{r4, r5, r6, pc}
   d85ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d85ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d85f2:	bd70      	pop	{r4, r5, r6, pc}

000d85f4 <__aeabi_ddiv>:
   d85f4:	b570      	push	{r4, r5, r6, lr}
   d85f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d85fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d85fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8602:	bf1d      	ittte	ne
   d8604:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8608:	ea94 0f0c 	teqne	r4, ip
   d860c:	ea95 0f0c 	teqne	r5, ip
   d8610:	f000 f8a7 	bleq	d8762 <__aeabi_ddiv+0x16e>
   d8614:	eba4 0405 	sub.w	r4, r4, r5
   d8618:	ea81 0e03 	eor.w	lr, r1, r3
   d861c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8620:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8624:	f000 8088 	beq.w	d8738 <__aeabi_ddiv+0x144>
   d8628:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d862c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8630:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8634:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8638:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d863c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8640:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8644:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8648:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d864c:	429d      	cmp	r5, r3
   d864e:	bf08      	it	eq
   d8650:	4296      	cmpeq	r6, r2
   d8652:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8656:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d865a:	d202      	bcs.n	d8662 <__aeabi_ddiv+0x6e>
   d865c:	085b      	lsrs	r3, r3, #1
   d865e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8662:	1ab6      	subs	r6, r6, r2
   d8664:	eb65 0503 	sbc.w	r5, r5, r3
   d8668:	085b      	lsrs	r3, r3, #1
   d866a:	ea4f 0232 	mov.w	r2, r2, rrx
   d866e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8672:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8676:	ebb6 0e02 	subs.w	lr, r6, r2
   d867a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d867e:	bf22      	ittt	cs
   d8680:	1ab6      	subcs	r6, r6, r2
   d8682:	4675      	movcs	r5, lr
   d8684:	ea40 000c 	orrcs.w	r0, r0, ip
   d8688:	085b      	lsrs	r3, r3, #1
   d868a:	ea4f 0232 	mov.w	r2, r2, rrx
   d868e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8692:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8696:	bf22      	ittt	cs
   d8698:	1ab6      	subcs	r6, r6, r2
   d869a:	4675      	movcs	r5, lr
   d869c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d86a0:	085b      	lsrs	r3, r3, #1
   d86a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d86a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d86aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86ae:	bf22      	ittt	cs
   d86b0:	1ab6      	subcs	r6, r6, r2
   d86b2:	4675      	movcs	r5, lr
   d86b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d86b8:	085b      	lsrs	r3, r3, #1
   d86ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d86be:	ebb6 0e02 	subs.w	lr, r6, r2
   d86c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86c6:	bf22      	ittt	cs
   d86c8:	1ab6      	subcs	r6, r6, r2
   d86ca:	4675      	movcs	r5, lr
   d86cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d86d0:	ea55 0e06 	orrs.w	lr, r5, r6
   d86d4:	d018      	beq.n	d8708 <__aeabi_ddiv+0x114>
   d86d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d86da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d86de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d86e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d86e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d86ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d86ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d86f2:	d1c0      	bne.n	d8676 <__aeabi_ddiv+0x82>
   d86f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86f8:	d10b      	bne.n	d8712 <__aeabi_ddiv+0x11e>
   d86fa:	ea41 0100 	orr.w	r1, r1, r0
   d86fe:	f04f 0000 	mov.w	r0, #0
   d8702:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8706:	e7b6      	b.n	d8676 <__aeabi_ddiv+0x82>
   d8708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d870c:	bf04      	itt	eq
   d870e:	4301      	orreq	r1, r0
   d8710:	2000      	moveq	r0, #0
   d8712:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8716:	bf88      	it	hi
   d8718:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d871c:	f63f aeaf 	bhi.w	d847e <__aeabi_dmul+0xde>
   d8720:	ebb5 0c03 	subs.w	ip, r5, r3
   d8724:	bf04      	itt	eq
   d8726:	ebb6 0c02 	subseq.w	ip, r6, r2
   d872a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d872e:	f150 0000 	adcs.w	r0, r0, #0
   d8732:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8736:	bd70      	pop	{r4, r5, r6, pc}
   d8738:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d873c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8740:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8744:	bfc2      	ittt	gt
   d8746:	ebd4 050c 	rsbsgt	r5, r4, ip
   d874a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d874e:	bd70      	popgt	{r4, r5, r6, pc}
   d8750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8754:	f04f 0e00 	mov.w	lr, #0
   d8758:	3c01      	subs	r4, #1
   d875a:	e690      	b.n	d847e <__aeabi_dmul+0xde>
   d875c:	ea45 0e06 	orr.w	lr, r5, r6
   d8760:	e68d      	b.n	d847e <__aeabi_dmul+0xde>
   d8762:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8766:	ea94 0f0c 	teq	r4, ip
   d876a:	bf08      	it	eq
   d876c:	ea95 0f0c 	teqeq	r5, ip
   d8770:	f43f af3b 	beq.w	d85ea <__aeabi_dmul+0x24a>
   d8774:	ea94 0f0c 	teq	r4, ip
   d8778:	d10a      	bne.n	d8790 <__aeabi_ddiv+0x19c>
   d877a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d877e:	f47f af34 	bne.w	d85ea <__aeabi_dmul+0x24a>
   d8782:	ea95 0f0c 	teq	r5, ip
   d8786:	f47f af25 	bne.w	d85d4 <__aeabi_dmul+0x234>
   d878a:	4610      	mov	r0, r2
   d878c:	4619      	mov	r1, r3
   d878e:	e72c      	b.n	d85ea <__aeabi_dmul+0x24a>
   d8790:	ea95 0f0c 	teq	r5, ip
   d8794:	d106      	bne.n	d87a4 <__aeabi_ddiv+0x1b0>
   d8796:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d879a:	f43f aefd 	beq.w	d8598 <__aeabi_dmul+0x1f8>
   d879e:	4610      	mov	r0, r2
   d87a0:	4619      	mov	r1, r3
   d87a2:	e722      	b.n	d85ea <__aeabi_dmul+0x24a>
   d87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87a8:	bf18      	it	ne
   d87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87ae:	f47f aec5 	bne.w	d853c <__aeabi_dmul+0x19c>
   d87b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d87b6:	f47f af0d 	bne.w	d85d4 <__aeabi_dmul+0x234>
   d87ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d87be:	f47f aeeb 	bne.w	d8598 <__aeabi_dmul+0x1f8>
   d87c2:	e712      	b.n	d85ea <__aeabi_dmul+0x24a>

000d87c4 <__gedf2>:
   d87c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d87c8:	e006      	b.n	d87d8 <__cmpdf2+0x4>
   d87ca:	bf00      	nop

000d87cc <__ledf2>:
   d87cc:	f04f 0c01 	mov.w	ip, #1
   d87d0:	e002      	b.n	d87d8 <__cmpdf2+0x4>
   d87d2:	bf00      	nop

000d87d4 <__cmpdf2>:
   d87d4:	f04f 0c01 	mov.w	ip, #1
   d87d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d87dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d87e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d87e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d87e8:	bf18      	it	ne
   d87ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d87ee:	d01b      	beq.n	d8828 <__cmpdf2+0x54>
   d87f0:	b001      	add	sp, #4
   d87f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d87f6:	bf0c      	ite	eq
   d87f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d87fc:	ea91 0f03 	teqne	r1, r3
   d8800:	bf02      	ittt	eq
   d8802:	ea90 0f02 	teqeq	r0, r2
   d8806:	2000      	moveq	r0, #0
   d8808:	4770      	bxeq	lr
   d880a:	f110 0f00 	cmn.w	r0, #0
   d880e:	ea91 0f03 	teq	r1, r3
   d8812:	bf58      	it	pl
   d8814:	4299      	cmppl	r1, r3
   d8816:	bf08      	it	eq
   d8818:	4290      	cmpeq	r0, r2
   d881a:	bf2c      	ite	cs
   d881c:	17d8      	asrcs	r0, r3, #31
   d881e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8822:	f040 0001 	orr.w	r0, r0, #1
   d8826:	4770      	bx	lr
   d8828:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d882c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8830:	d102      	bne.n	d8838 <__cmpdf2+0x64>
   d8832:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8836:	d107      	bne.n	d8848 <__cmpdf2+0x74>
   d8838:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d883c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8840:	d1d6      	bne.n	d87f0 <__cmpdf2+0x1c>
   d8842:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8846:	d0d3      	beq.n	d87f0 <__cmpdf2+0x1c>
   d8848:	f85d 0b04 	ldr.w	r0, [sp], #4
   d884c:	4770      	bx	lr
   d884e:	bf00      	nop

000d8850 <__aeabi_cdrcmple>:
   d8850:	4684      	mov	ip, r0
   d8852:	4610      	mov	r0, r2
   d8854:	4662      	mov	r2, ip
   d8856:	468c      	mov	ip, r1
   d8858:	4619      	mov	r1, r3
   d885a:	4663      	mov	r3, ip
   d885c:	e000      	b.n	d8860 <__aeabi_cdcmpeq>
   d885e:	bf00      	nop

000d8860 <__aeabi_cdcmpeq>:
   d8860:	b501      	push	{r0, lr}
   d8862:	f7ff ffb7 	bl	d87d4 <__cmpdf2>
   d8866:	2800      	cmp	r0, #0
   d8868:	bf48      	it	mi
   d886a:	f110 0f00 	cmnmi.w	r0, #0
   d886e:	bd01      	pop	{r0, pc}

000d8870 <__aeabi_dcmpeq>:
   d8870:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8874:	f7ff fff4 	bl	d8860 <__aeabi_cdcmpeq>
   d8878:	bf0c      	ite	eq
   d887a:	2001      	moveq	r0, #1
   d887c:	2000      	movne	r0, #0
   d887e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8882:	bf00      	nop

000d8884 <__aeabi_dcmplt>:
   d8884:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8888:	f7ff ffea 	bl	d8860 <__aeabi_cdcmpeq>
   d888c:	bf34      	ite	cc
   d888e:	2001      	movcc	r0, #1
   d8890:	2000      	movcs	r0, #0
   d8892:	f85d fb08 	ldr.w	pc, [sp], #8
   d8896:	bf00      	nop

000d8898 <__aeabi_dcmple>:
   d8898:	f84d ed08 	str.w	lr, [sp, #-8]!
   d889c:	f7ff ffe0 	bl	d8860 <__aeabi_cdcmpeq>
   d88a0:	bf94      	ite	ls
   d88a2:	2001      	movls	r0, #1
   d88a4:	2000      	movhi	r0, #0
   d88a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d88aa:	bf00      	nop

000d88ac <__aeabi_dcmpge>:
   d88ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88b0:	f7ff ffce 	bl	d8850 <__aeabi_cdrcmple>
   d88b4:	bf94      	ite	ls
   d88b6:	2001      	movls	r0, #1
   d88b8:	2000      	movhi	r0, #0
   d88ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d88be:	bf00      	nop

000d88c0 <__aeabi_dcmpgt>:
   d88c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88c4:	f7ff ffc4 	bl	d8850 <__aeabi_cdrcmple>
   d88c8:	bf34      	ite	cc
   d88ca:	2001      	movcc	r0, #1
   d88cc:	2000      	movcs	r0, #0
   d88ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d88d2:	bf00      	nop

000d88d4 <__aeabi_d2f>:
   d88d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d88d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d88dc:	bf24      	itt	cs
   d88de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d88e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d88e6:	d90d      	bls.n	d8904 <__aeabi_d2f+0x30>
   d88e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d88ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d88f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d88f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d88f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d88fc:	bf08      	it	eq
   d88fe:	f020 0001 	biceq.w	r0, r0, #1
   d8902:	4770      	bx	lr
   d8904:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8908:	d121      	bne.n	d894e <__aeabi_d2f+0x7a>
   d890a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d890e:	bfbc      	itt	lt
   d8910:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8914:	4770      	bxlt	lr
   d8916:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d891a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d891e:	f1c2 0218 	rsb	r2, r2, #24
   d8922:	f1c2 0c20 	rsb	ip, r2, #32
   d8926:	fa10 f30c 	lsls.w	r3, r0, ip
   d892a:	fa20 f002 	lsr.w	r0, r0, r2
   d892e:	bf18      	it	ne
   d8930:	f040 0001 	orrne.w	r0, r0, #1
   d8934:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8938:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d893c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8940:	ea40 000c 	orr.w	r0, r0, ip
   d8944:	fa23 f302 	lsr.w	r3, r3, r2
   d8948:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d894c:	e7cc      	b.n	d88e8 <__aeabi_d2f+0x14>
   d894e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8952:	d107      	bne.n	d8964 <__aeabi_d2f+0x90>
   d8954:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8958:	bf1e      	ittt	ne
   d895a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d895e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8962:	4770      	bxne	lr
   d8964:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8968:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d896c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8970:	4770      	bx	lr
   d8972:	bf00      	nop

000d8974 <atoi>:
   d8974:	220a      	movs	r2, #10
   d8976:	2100      	movs	r1, #0
   d8978:	f000 ba26 	b.w	d8dc8 <strtol>

000d897c <__cxa_atexit>:
   d897c:	b510      	push	{r4, lr}
   d897e:	4c05      	ldr	r4, [pc, #20]	; (d8994 <__cxa_atexit+0x18>)
   d8980:	4613      	mov	r3, r2
   d8982:	b12c      	cbz	r4, d8990 <__cxa_atexit+0x14>
   d8984:	460a      	mov	r2, r1
   d8986:	4601      	mov	r1, r0
   d8988:	2002      	movs	r0, #2
   d898a:	f3af 8000 	nop.w
   d898e:	bd10      	pop	{r4, pc}
   d8990:	4620      	mov	r0, r4
   d8992:	bd10      	pop	{r4, pc}
   d8994:	00000000 	.word	0x00000000

000d8998 <localtime>:
   d8998:	b538      	push	{r3, r4, r5, lr}
   d899a:	4b07      	ldr	r3, [pc, #28]	; (d89b8 <localtime+0x20>)
   d899c:	681c      	ldr	r4, [r3, #0]
   d899e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d89a0:	4605      	mov	r5, r0
   d89a2:	b91b      	cbnz	r3, d89ac <localtime+0x14>
   d89a4:	2024      	movs	r0, #36	; 0x24
   d89a6:	f7fd fc79 	bl	d629c <malloc>
   d89aa:	63e0      	str	r0, [r4, #60]	; 0x3c
   d89ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d89ae:	4628      	mov	r0, r5
   d89b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d89b4:	f000 b802 	b.w	d89bc <localtime_r>
   d89b8:	2003e160 	.word	0x2003e160

000d89bc <localtime_r>:
   d89bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d89c0:	460c      	mov	r4, r1
   d89c2:	4680      	mov	r8, r0
   d89c4:	f000 fd06 	bl	d93d4 <__gettzinfo>
   d89c8:	4621      	mov	r1, r4
   d89ca:	4607      	mov	r7, r0
   d89cc:	4640      	mov	r0, r8
   d89ce:	f000 fd05 	bl	d93dc <gmtime_r>
   d89d2:	6946      	ldr	r6, [r0, #20]
   d89d4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d89d8:	07b3      	lsls	r3, r6, #30
   d89da:	4604      	mov	r4, r0
   d89dc:	d105      	bne.n	d89ea <localtime_r+0x2e>
   d89de:	2264      	movs	r2, #100	; 0x64
   d89e0:	fb96 f3f2 	sdiv	r3, r6, r2
   d89e4:	fb02 6313 	mls	r3, r2, r3, r6
   d89e8:	b94b      	cbnz	r3, d89fe <localtime_r+0x42>
   d89ea:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d89ee:	fb96 f3f5 	sdiv	r3, r6, r5
   d89f2:	fb05 6513 	mls	r5, r5, r3, r6
   d89f6:	fab5 f385 	clz	r3, r5
   d89fa:	095b      	lsrs	r3, r3, #5
   d89fc:	e000      	b.n	d8a00 <localtime_r+0x44>
   d89fe:	2301      	movs	r3, #1
   d8a00:	4a5f      	ldr	r2, [pc, #380]	; (d8b80 <localtime_r+0x1c4>)
   d8a02:	2530      	movs	r5, #48	; 0x30
   d8a04:	fb05 2503 	mla	r5, r5, r3, r2
   d8a08:	f000 fb18 	bl	d903c <__tz_lock>
   d8a0c:	f000 fb18 	bl	d9040 <_tzset_unlocked>
   d8a10:	4b5c      	ldr	r3, [pc, #368]	; (d8b84 <localtime_r+0x1c8>)
   d8a12:	681b      	ldr	r3, [r3, #0]
   d8a14:	b1f3      	cbz	r3, d8a54 <localtime_r+0x98>
   d8a16:	687b      	ldr	r3, [r7, #4]
   d8a18:	429e      	cmp	r6, r3
   d8a1a:	d105      	bne.n	d8a28 <localtime_r+0x6c>
   d8a1c:	6839      	ldr	r1, [r7, #0]
   d8a1e:	f8d8 3000 	ldr.w	r3, [r8]
   d8a22:	69fa      	ldr	r2, [r7, #28]
   d8a24:	b941      	cbnz	r1, d8a38 <localtime_r+0x7c>
   d8a26:	e00a      	b.n	d8a3e <localtime_r+0x82>
   d8a28:	4630      	mov	r0, r6
   d8a2a:	f000 fa5f 	bl	d8eec <__tzcalc_limits>
   d8a2e:	2800      	cmp	r0, #0
   d8a30:	d1f4      	bne.n	d8a1c <localtime_r+0x60>
   d8a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8a36:	e00d      	b.n	d8a54 <localtime_r+0x98>
   d8a38:	4293      	cmp	r3, r2
   d8a3a:	db08      	blt.n	d8a4e <localtime_r+0x92>
   d8a3c:	e001      	b.n	d8a42 <localtime_r+0x86>
   d8a3e:	4293      	cmp	r3, r2
   d8a40:	da07      	bge.n	d8a52 <localtime_r+0x96>
   d8a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8a44:	4293      	cmp	r3, r2
   d8a46:	bfac      	ite	ge
   d8a48:	2300      	movge	r3, #0
   d8a4a:	2301      	movlt	r3, #1
   d8a4c:	e002      	b.n	d8a54 <localtime_r+0x98>
   d8a4e:	2300      	movs	r3, #0
   d8a50:	e000      	b.n	d8a54 <localtime_r+0x98>
   d8a52:	2301      	movs	r3, #1
   d8a54:	6223      	str	r3, [r4, #32]
   d8a56:	6a23      	ldr	r3, [r4, #32]
   d8a58:	2b01      	cmp	r3, #1
   d8a5a:	bf0c      	ite	eq
   d8a5c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8a5e:	6a39      	ldrne	r1, [r7, #32]
   d8a60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8a64:	203c      	movs	r0, #60	; 0x3c
   d8a66:	fb91 f6f3 	sdiv	r6, r1, r3
   d8a6a:	fb03 1316 	mls	r3, r3, r6, r1
   d8a6e:	6861      	ldr	r1, [r4, #4]
   d8a70:	fb93 f2f0 	sdiv	r2, r3, r0
   d8a74:	fb00 3012 	mls	r0, r0, r2, r3
   d8a78:	6823      	ldr	r3, [r4, #0]
   d8a7a:	1a89      	subs	r1, r1, r2
   d8a7c:	68a2      	ldr	r2, [r4, #8]
   d8a7e:	6061      	str	r1, [r4, #4]
   d8a80:	1a1b      	subs	r3, r3, r0
   d8a82:	1b92      	subs	r2, r2, r6
   d8a84:	2b3b      	cmp	r3, #59	; 0x3b
   d8a86:	6023      	str	r3, [r4, #0]
   d8a88:	60a2      	str	r2, [r4, #8]
   d8a8a:	dd03      	ble.n	d8a94 <localtime_r+0xd8>
   d8a8c:	3101      	adds	r1, #1
   d8a8e:	6061      	str	r1, [r4, #4]
   d8a90:	3b3c      	subs	r3, #60	; 0x3c
   d8a92:	e004      	b.n	d8a9e <localtime_r+0xe2>
   d8a94:	2b00      	cmp	r3, #0
   d8a96:	da03      	bge.n	d8aa0 <localtime_r+0xe4>
   d8a98:	3901      	subs	r1, #1
   d8a9a:	6061      	str	r1, [r4, #4]
   d8a9c:	333c      	adds	r3, #60	; 0x3c
   d8a9e:	6023      	str	r3, [r4, #0]
   d8aa0:	6863      	ldr	r3, [r4, #4]
   d8aa2:	2b3b      	cmp	r3, #59	; 0x3b
   d8aa4:	dd03      	ble.n	d8aae <localtime_r+0xf2>
   d8aa6:	3201      	adds	r2, #1
   d8aa8:	60a2      	str	r2, [r4, #8]
   d8aaa:	3b3c      	subs	r3, #60	; 0x3c
   d8aac:	e004      	b.n	d8ab8 <localtime_r+0xfc>
   d8aae:	2b00      	cmp	r3, #0
   d8ab0:	da03      	bge.n	d8aba <localtime_r+0xfe>
   d8ab2:	3a01      	subs	r2, #1
   d8ab4:	60a2      	str	r2, [r4, #8]
   d8ab6:	333c      	adds	r3, #60	; 0x3c
   d8ab8:	6063      	str	r3, [r4, #4]
   d8aba:	68a3      	ldr	r3, [r4, #8]
   d8abc:	2b17      	cmp	r3, #23
   d8abe:	dd22      	ble.n	d8b06 <localtime_r+0x14a>
   d8ac0:	69e2      	ldr	r2, [r4, #28]
   d8ac2:	3201      	adds	r2, #1
   d8ac4:	61e2      	str	r2, [r4, #28]
   d8ac6:	69a2      	ldr	r2, [r4, #24]
   d8ac8:	3201      	adds	r2, #1
   d8aca:	2a06      	cmp	r2, #6
   d8acc:	bfc8      	it	gt
   d8ace:	2200      	movgt	r2, #0
   d8ad0:	61a2      	str	r2, [r4, #24]
   d8ad2:	68e2      	ldr	r2, [r4, #12]
   d8ad4:	3b18      	subs	r3, #24
   d8ad6:	3201      	adds	r2, #1
   d8ad8:	60a3      	str	r3, [r4, #8]
   d8ada:	6923      	ldr	r3, [r4, #16]
   d8adc:	60e2      	str	r2, [r4, #12]
   d8ade:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8ae2:	428a      	cmp	r2, r1
   d8ae4:	dd46      	ble.n	d8b74 <localtime_r+0x1b8>
   d8ae6:	3301      	adds	r3, #1
   d8ae8:	2b0c      	cmp	r3, #12
   d8aea:	bf0c      	ite	eq
   d8aec:	6963      	ldreq	r3, [r4, #20]
   d8aee:	6123      	strne	r3, [r4, #16]
   d8af0:	eba2 0201 	sub.w	r2, r2, r1
   d8af4:	60e2      	str	r2, [r4, #12]
   d8af6:	bf01      	itttt	eq
   d8af8:	3301      	addeq	r3, #1
   d8afa:	2200      	moveq	r2, #0
   d8afc:	6122      	streq	r2, [r4, #16]
   d8afe:	6163      	streq	r3, [r4, #20]
   d8b00:	bf08      	it	eq
   d8b02:	61e2      	streq	r2, [r4, #28]
   d8b04:	e036      	b.n	d8b74 <localtime_r+0x1b8>
   d8b06:	2b00      	cmp	r3, #0
   d8b08:	da34      	bge.n	d8b74 <localtime_r+0x1b8>
   d8b0a:	69e2      	ldr	r2, [r4, #28]
   d8b0c:	3a01      	subs	r2, #1
   d8b0e:	61e2      	str	r2, [r4, #28]
   d8b10:	69a2      	ldr	r2, [r4, #24]
   d8b12:	3a01      	subs	r2, #1
   d8b14:	bf48      	it	mi
   d8b16:	2206      	movmi	r2, #6
   d8b18:	61a2      	str	r2, [r4, #24]
   d8b1a:	68e2      	ldr	r2, [r4, #12]
   d8b1c:	3318      	adds	r3, #24
   d8b1e:	3a01      	subs	r2, #1
   d8b20:	60e2      	str	r2, [r4, #12]
   d8b22:	60a3      	str	r3, [r4, #8]
   d8b24:	bb32      	cbnz	r2, d8b74 <localtime_r+0x1b8>
   d8b26:	6923      	ldr	r3, [r4, #16]
   d8b28:	3b01      	subs	r3, #1
   d8b2a:	d401      	bmi.n	d8b30 <localtime_r+0x174>
   d8b2c:	6123      	str	r3, [r4, #16]
   d8b2e:	e01d      	b.n	d8b6c <localtime_r+0x1b0>
   d8b30:	230b      	movs	r3, #11
   d8b32:	6123      	str	r3, [r4, #16]
   d8b34:	6963      	ldr	r3, [r4, #20]
   d8b36:	1e5a      	subs	r2, r3, #1
   d8b38:	f012 0f03 	tst.w	r2, #3
   d8b3c:	6162      	str	r2, [r4, #20]
   d8b3e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8b42:	d105      	bne.n	d8b50 <localtime_r+0x194>
   d8b44:	2164      	movs	r1, #100	; 0x64
   d8b46:	fb93 f2f1 	sdiv	r2, r3, r1
   d8b4a:	fb01 3212 	mls	r2, r1, r2, r3
   d8b4e:	b94a      	cbnz	r2, d8b64 <localtime_r+0x1a8>
   d8b50:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8b54:	fb93 f2f1 	sdiv	r2, r3, r1
   d8b58:	fb01 3312 	mls	r3, r1, r2, r3
   d8b5c:	fab3 f383 	clz	r3, r3
   d8b60:	095b      	lsrs	r3, r3, #5
   d8b62:	e000      	b.n	d8b66 <localtime_r+0x1aa>
   d8b64:	2301      	movs	r3, #1
   d8b66:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8b6a:	61e3      	str	r3, [r4, #28]
   d8b6c:	6923      	ldr	r3, [r4, #16]
   d8b6e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8b72:	60e3      	str	r3, [r4, #12]
   d8b74:	f000 fa63 	bl	d903e <__tz_unlock>
   d8b78:	4620      	mov	r0, r4
   d8b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b7e:	bf00      	nop
   d8b80:	000d9f84 	.word	0x000d9f84
   d8b84:	2003e7e4 	.word	0x2003e7e4

000d8b88 <memcpy>:
   d8b88:	b510      	push	{r4, lr}
   d8b8a:	1e43      	subs	r3, r0, #1
   d8b8c:	440a      	add	r2, r1
   d8b8e:	4291      	cmp	r1, r2
   d8b90:	d004      	beq.n	d8b9c <memcpy+0x14>
   d8b92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b9a:	e7f8      	b.n	d8b8e <memcpy+0x6>
   d8b9c:	bd10      	pop	{r4, pc}

000d8b9e <memset>:
   d8b9e:	4402      	add	r2, r0
   d8ba0:	4603      	mov	r3, r0
   d8ba2:	4293      	cmp	r3, r2
   d8ba4:	d002      	beq.n	d8bac <memset+0xe>
   d8ba6:	f803 1b01 	strb.w	r1, [r3], #1
   d8baa:	e7fa      	b.n	d8ba2 <memset+0x4>
   d8bac:	4770      	bx	lr
	...

000d8bb0 <srand>:
   d8bb0:	b538      	push	{r3, r4, r5, lr}
   d8bb2:	4b12      	ldr	r3, [pc, #72]	; (d8bfc <srand+0x4c>)
   d8bb4:	681c      	ldr	r4, [r3, #0]
   d8bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8bb8:	4605      	mov	r5, r0
   d8bba:	b9d3      	cbnz	r3, d8bf2 <srand+0x42>
   d8bbc:	2018      	movs	r0, #24
   d8bbe:	f7fd fb6d 	bl	d629c <malloc>
   d8bc2:	f243 330e 	movw	r3, #13070	; 0x330e
   d8bc6:	63a0      	str	r0, [r4, #56]	; 0x38
   d8bc8:	8003      	strh	r3, [r0, #0]
   d8bca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8bce:	8043      	strh	r3, [r0, #2]
   d8bd0:	f241 2334 	movw	r3, #4660	; 0x1234
   d8bd4:	8083      	strh	r3, [r0, #4]
   d8bd6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8bda:	80c3      	strh	r3, [r0, #6]
   d8bdc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8be0:	8103      	strh	r3, [r0, #8]
   d8be2:	2305      	movs	r3, #5
   d8be4:	8143      	strh	r3, [r0, #10]
   d8be6:	230b      	movs	r3, #11
   d8be8:	8183      	strh	r3, [r0, #12]
   d8bea:	2201      	movs	r2, #1
   d8bec:	2300      	movs	r3, #0
   d8bee:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8bf4:	2200      	movs	r2, #0
   d8bf6:	611d      	str	r5, [r3, #16]
   d8bf8:	615a      	str	r2, [r3, #20]
   d8bfa:	bd38      	pop	{r3, r4, r5, pc}
   d8bfc:	2003e160 	.word	0x2003e160

000d8c00 <strcmp>:
   d8c00:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8c04:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8c08:	2a01      	cmp	r2, #1
   d8c0a:	bf28      	it	cs
   d8c0c:	429a      	cmpcs	r2, r3
   d8c0e:	d0f7      	beq.n	d8c00 <strcmp>
   d8c10:	1ad0      	subs	r0, r2, r3
   d8c12:	4770      	bx	lr

000d8c14 <strcpy>:
   d8c14:	4603      	mov	r3, r0
   d8c16:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8c1a:	f803 2b01 	strb.w	r2, [r3], #1
   d8c1e:	2a00      	cmp	r2, #0
   d8c20:	d1f9      	bne.n	d8c16 <strcpy+0x2>
   d8c22:	4770      	bx	lr

000d8c24 <strdup>:
   d8c24:	4b02      	ldr	r3, [pc, #8]	; (d8c30 <strdup+0xc>)
   d8c26:	4601      	mov	r1, r0
   d8c28:	6818      	ldr	r0, [r3, #0]
   d8c2a:	f000 b803 	b.w	d8c34 <_strdup_r>
   d8c2e:	bf00      	nop
   d8c30:	2003e160 	.word	0x2003e160

000d8c34 <_strdup_r>:
   d8c34:	b570      	push	{r4, r5, r6, lr}
   d8c36:	4606      	mov	r6, r0
   d8c38:	4608      	mov	r0, r1
   d8c3a:	460c      	mov	r4, r1
   d8c3c:	f000 f80d 	bl	d8c5a <strlen>
   d8c40:	1c45      	adds	r5, r0, #1
   d8c42:	4629      	mov	r1, r5
   d8c44:	4630      	mov	r0, r6
   d8c46:	f7fd fb59 	bl	d62fc <_malloc_r>
   d8c4a:	4606      	mov	r6, r0
   d8c4c:	b118      	cbz	r0, d8c56 <_strdup_r+0x22>
   d8c4e:	462a      	mov	r2, r5
   d8c50:	4621      	mov	r1, r4
   d8c52:	f7ff ff99 	bl	d8b88 <memcpy>
   d8c56:	4630      	mov	r0, r6
   d8c58:	bd70      	pop	{r4, r5, r6, pc}

000d8c5a <strlen>:
   d8c5a:	4603      	mov	r3, r0
   d8c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8c60:	2a00      	cmp	r2, #0
   d8c62:	d1fb      	bne.n	d8c5c <strlen+0x2>
   d8c64:	1a18      	subs	r0, r3, r0
   d8c66:	3801      	subs	r0, #1
   d8c68:	4770      	bx	lr

000d8c6a <strncmp>:
   d8c6a:	b530      	push	{r4, r5, lr}
   d8c6c:	b182      	cbz	r2, d8c90 <strncmp+0x26>
   d8c6e:	1e45      	subs	r5, r0, #1
   d8c70:	3901      	subs	r1, #1
   d8c72:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8c76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8c7a:	42a3      	cmp	r3, r4
   d8c7c:	d106      	bne.n	d8c8c <strncmp+0x22>
   d8c7e:	43ec      	mvns	r4, r5
   d8c80:	4414      	add	r4, r2
   d8c82:	42e0      	cmn	r0, r4
   d8c84:	d001      	beq.n	d8c8a <strncmp+0x20>
   d8c86:	2b00      	cmp	r3, #0
   d8c88:	d1f3      	bne.n	d8c72 <strncmp+0x8>
   d8c8a:	461c      	mov	r4, r3
   d8c8c:	1b18      	subs	r0, r3, r4
   d8c8e:	bd30      	pop	{r4, r5, pc}
   d8c90:	4610      	mov	r0, r2
   d8c92:	bd30      	pop	{r4, r5, pc}

000d8c94 <strncpy>:
   d8c94:	b510      	push	{r4, lr}
   d8c96:	4603      	mov	r3, r0
   d8c98:	b142      	cbz	r2, d8cac <strncpy+0x18>
   d8c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8c9e:	f803 4b01 	strb.w	r4, [r3], #1
   d8ca2:	3a01      	subs	r2, #1
   d8ca4:	2c00      	cmp	r4, #0
   d8ca6:	d1f7      	bne.n	d8c98 <strncpy+0x4>
   d8ca8:	441a      	add	r2, r3
   d8caa:	e000      	b.n	d8cae <strncpy+0x1a>
   d8cac:	bd10      	pop	{r4, pc}
   d8cae:	4293      	cmp	r3, r2
   d8cb0:	d002      	beq.n	d8cb8 <strncpy+0x24>
   d8cb2:	f803 4b01 	strb.w	r4, [r3], #1
   d8cb6:	e7fa      	b.n	d8cae <strncpy+0x1a>
   d8cb8:	bd10      	pop	{r4, pc}
	...

000d8cbc <_strtol_r>:
   d8cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8cc0:	4680      	mov	r8, r0
   d8cc2:	4840      	ldr	r0, [pc, #256]	; (d8dc4 <_strtol_r+0x108>)
   d8cc4:	f8d0 9000 	ldr.w	r9, [r0]
   d8cc8:	460f      	mov	r7, r1
   d8cca:	463d      	mov	r5, r7
   d8ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8cd0:	eb09 0004 	add.w	r0, r9, r4
   d8cd4:	7840      	ldrb	r0, [r0, #1]
   d8cd6:	f000 0008 	and.w	r0, r0, #8
   d8cda:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8cde:	b108      	cbz	r0, d8ce4 <_strtol_r+0x28>
   d8ce0:	462f      	mov	r7, r5
   d8ce2:	e7f2      	b.n	d8cca <_strtol_r+0xe>
   d8ce4:	2c2d      	cmp	r4, #45	; 0x2d
   d8ce6:	d103      	bne.n	d8cf0 <_strtol_r+0x34>
   d8ce8:	1cbd      	adds	r5, r7, #2
   d8cea:	787c      	ldrb	r4, [r7, #1]
   d8cec:	2601      	movs	r6, #1
   d8cee:	e003      	b.n	d8cf8 <_strtol_r+0x3c>
   d8cf0:	2c2b      	cmp	r4, #43	; 0x2b
   d8cf2:	bf04      	itt	eq
   d8cf4:	787c      	ldrbeq	r4, [r7, #1]
   d8cf6:	1cbd      	addeq	r5, r7, #2
   d8cf8:	b113      	cbz	r3, d8d00 <_strtol_r+0x44>
   d8cfa:	2b10      	cmp	r3, #16
   d8cfc:	d10a      	bne.n	d8d14 <_strtol_r+0x58>
   d8cfe:	e05b      	b.n	d8db8 <_strtol_r+0xfc>
   d8d00:	2c30      	cmp	r4, #48	; 0x30
   d8d02:	d157      	bne.n	d8db4 <_strtol_r+0xf8>
   d8d04:	7828      	ldrb	r0, [r5, #0]
   d8d06:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8d0a:	2858      	cmp	r0, #88	; 0x58
   d8d0c:	d14d      	bne.n	d8daa <_strtol_r+0xee>
   d8d0e:	786c      	ldrb	r4, [r5, #1]
   d8d10:	2310      	movs	r3, #16
   d8d12:	3502      	adds	r5, #2
   d8d14:	2e00      	cmp	r6, #0
   d8d16:	bf14      	ite	ne
   d8d18:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8d1c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8d20:	2700      	movs	r7, #0
   d8d22:	fbbc faf3 	udiv	sl, ip, r3
   d8d26:	4638      	mov	r0, r7
   d8d28:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8d2c:	eb09 0e04 	add.w	lr, r9, r4
   d8d30:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8d34:	f01e 0f04 	tst.w	lr, #4
   d8d38:	d001      	beq.n	d8d3e <_strtol_r+0x82>
   d8d3a:	3c30      	subs	r4, #48	; 0x30
   d8d3c:	e00b      	b.n	d8d56 <_strtol_r+0x9a>
   d8d3e:	f01e 0e03 	ands.w	lr, lr, #3
   d8d42:	d01b      	beq.n	d8d7c <_strtol_r+0xc0>
   d8d44:	f1be 0f01 	cmp.w	lr, #1
   d8d48:	bf0c      	ite	eq
   d8d4a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8d4e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8d52:	ebce 0404 	rsb	r4, lr, r4
   d8d56:	42a3      	cmp	r3, r4
   d8d58:	dd10      	ble.n	d8d7c <_strtol_r+0xc0>
   d8d5a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8d5e:	d00a      	beq.n	d8d76 <_strtol_r+0xba>
   d8d60:	4550      	cmp	r0, sl
   d8d62:	d806      	bhi.n	d8d72 <_strtol_r+0xb6>
   d8d64:	d101      	bne.n	d8d6a <_strtol_r+0xae>
   d8d66:	4564      	cmp	r4, ip
   d8d68:	dc03      	bgt.n	d8d72 <_strtol_r+0xb6>
   d8d6a:	fb03 4000 	mla	r0, r3, r0, r4
   d8d6e:	2701      	movs	r7, #1
   d8d70:	e001      	b.n	d8d76 <_strtol_r+0xba>
   d8d72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8d76:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8d7a:	e7d7      	b.n	d8d2c <_strtol_r+0x70>
   d8d7c:	1c7b      	adds	r3, r7, #1
   d8d7e:	d10c      	bne.n	d8d9a <_strtol_r+0xde>
   d8d80:	2e00      	cmp	r6, #0
   d8d82:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8d86:	bf14      	ite	ne
   d8d88:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8d8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8d90:	f8c8 3000 	str.w	r3, [r8]
   d8d94:	b92a      	cbnz	r2, d8da2 <_strtol_r+0xe6>
   d8d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d9a:	b106      	cbz	r6, d8d9e <_strtol_r+0xe2>
   d8d9c:	4240      	negs	r0, r0
   d8d9e:	b172      	cbz	r2, d8dbe <_strtol_r+0x102>
   d8da0:	b107      	cbz	r7, d8da4 <_strtol_r+0xe8>
   d8da2:	1e69      	subs	r1, r5, #1
   d8da4:	6011      	str	r1, [r2, #0]
   d8da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8daa:	2430      	movs	r4, #48	; 0x30
   d8dac:	2b00      	cmp	r3, #0
   d8dae:	d1b1      	bne.n	d8d14 <_strtol_r+0x58>
   d8db0:	2308      	movs	r3, #8
   d8db2:	e7af      	b.n	d8d14 <_strtol_r+0x58>
   d8db4:	230a      	movs	r3, #10
   d8db6:	e7ad      	b.n	d8d14 <_strtol_r+0x58>
   d8db8:	2c30      	cmp	r4, #48	; 0x30
   d8dba:	d0a3      	beq.n	d8d04 <_strtol_r+0x48>
   d8dbc:	e7aa      	b.n	d8d14 <_strtol_r+0x58>
   d8dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8dc2:	bf00      	nop
   d8dc4:	2003e0fc 	.word	0x2003e0fc

000d8dc8 <strtol>:
   d8dc8:	4613      	mov	r3, r2
   d8dca:	460a      	mov	r2, r1
   d8dcc:	4601      	mov	r1, r0
   d8dce:	4802      	ldr	r0, [pc, #8]	; (d8dd8 <strtol+0x10>)
   d8dd0:	6800      	ldr	r0, [r0, #0]
   d8dd2:	f7ff bf73 	b.w	d8cbc <_strtol_r>
   d8dd6:	bf00      	nop
   d8dd8:	2003e160 	.word	0x2003e160

000d8ddc <_strtoul_r>:
   d8ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8de0:	4680      	mov	r8, r0
   d8de2:	483c      	ldr	r0, [pc, #240]	; (d8ed4 <_strtoul_r+0xf8>)
   d8de4:	f8d0 9000 	ldr.w	r9, [r0]
   d8de8:	460e      	mov	r6, r1
   d8dea:	4635      	mov	r5, r6
   d8dec:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8df0:	eb09 0004 	add.w	r0, r9, r4
   d8df4:	7840      	ldrb	r0, [r0, #1]
   d8df6:	f000 0008 	and.w	r0, r0, #8
   d8dfa:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d8dfe:	b108      	cbz	r0, d8e04 <_strtoul_r+0x28>
   d8e00:	462e      	mov	r6, r5
   d8e02:	e7f2      	b.n	d8dea <_strtoul_r+0xe>
   d8e04:	2c2d      	cmp	r4, #45	; 0x2d
   d8e06:	d103      	bne.n	d8e10 <_strtoul_r+0x34>
   d8e08:	1cb5      	adds	r5, r6, #2
   d8e0a:	7874      	ldrb	r4, [r6, #1]
   d8e0c:	2701      	movs	r7, #1
   d8e0e:	e003      	b.n	d8e18 <_strtoul_r+0x3c>
   d8e10:	2c2b      	cmp	r4, #43	; 0x2b
   d8e12:	bf04      	itt	eq
   d8e14:	7874      	ldrbeq	r4, [r6, #1]
   d8e16:	1cb5      	addeq	r5, r6, #2
   d8e18:	b113      	cbz	r3, d8e20 <_strtoul_r+0x44>
   d8e1a:	2b10      	cmp	r3, #16
   d8e1c:	d10a      	bne.n	d8e34 <_strtoul_r+0x58>
   d8e1e:	e053      	b.n	d8ec8 <_strtoul_r+0xec>
   d8e20:	2c30      	cmp	r4, #48	; 0x30
   d8e22:	d14f      	bne.n	d8ec4 <_strtoul_r+0xe8>
   d8e24:	7828      	ldrb	r0, [r5, #0]
   d8e26:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8e2a:	2858      	cmp	r0, #88	; 0x58
   d8e2c:	d145      	bne.n	d8eba <_strtoul_r+0xde>
   d8e2e:	786c      	ldrb	r4, [r5, #1]
   d8e30:	2310      	movs	r3, #16
   d8e32:	3502      	adds	r5, #2
   d8e34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8e38:	2600      	movs	r6, #0
   d8e3a:	fbbc fcf3 	udiv	ip, ip, r3
   d8e3e:	fb03 fa0c 	mul.w	sl, r3, ip
   d8e42:	ea6f 0a0a 	mvn.w	sl, sl
   d8e46:	4630      	mov	r0, r6
   d8e48:	eb09 0e04 	add.w	lr, r9, r4
   d8e4c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8e50:	f01e 0f04 	tst.w	lr, #4
   d8e54:	d001      	beq.n	d8e5a <_strtoul_r+0x7e>
   d8e56:	3c30      	subs	r4, #48	; 0x30
   d8e58:	e00b      	b.n	d8e72 <_strtoul_r+0x96>
   d8e5a:	f01e 0e03 	ands.w	lr, lr, #3
   d8e5e:	d01a      	beq.n	d8e96 <_strtoul_r+0xba>
   d8e60:	f1be 0f01 	cmp.w	lr, #1
   d8e64:	bf0c      	ite	eq
   d8e66:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8e6a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8e6e:	ebce 0404 	rsb	r4, lr, r4
   d8e72:	42a3      	cmp	r3, r4
   d8e74:	dd0f      	ble.n	d8e96 <_strtoul_r+0xba>
   d8e76:	2e00      	cmp	r6, #0
   d8e78:	db08      	blt.n	d8e8c <_strtoul_r+0xb0>
   d8e7a:	4560      	cmp	r0, ip
   d8e7c:	d806      	bhi.n	d8e8c <_strtoul_r+0xb0>
   d8e7e:	d101      	bne.n	d8e84 <_strtoul_r+0xa8>
   d8e80:	4554      	cmp	r4, sl
   d8e82:	dc03      	bgt.n	d8e8c <_strtoul_r+0xb0>
   d8e84:	fb03 4000 	mla	r0, r3, r0, r4
   d8e88:	2601      	movs	r6, #1
   d8e8a:	e001      	b.n	d8e90 <_strtoul_r+0xb4>
   d8e8c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8e90:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8e94:	e7d8      	b.n	d8e48 <_strtoul_r+0x6c>
   d8e96:	2e00      	cmp	r6, #0
   d8e98:	da07      	bge.n	d8eaa <_strtoul_r+0xce>
   d8e9a:	2322      	movs	r3, #34	; 0x22
   d8e9c:	f8c8 3000 	str.w	r3, [r8]
   d8ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ea4:	b92a      	cbnz	r2, d8eb2 <_strtoul_r+0xd6>
   d8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8eaa:	b107      	cbz	r7, d8eae <_strtoul_r+0xd2>
   d8eac:	4240      	negs	r0, r0
   d8eae:	b172      	cbz	r2, d8ece <_strtoul_r+0xf2>
   d8eb0:	b106      	cbz	r6, d8eb4 <_strtoul_r+0xd8>
   d8eb2:	1e69      	subs	r1, r5, #1
   d8eb4:	6011      	str	r1, [r2, #0]
   d8eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8eba:	2430      	movs	r4, #48	; 0x30
   d8ebc:	2b00      	cmp	r3, #0
   d8ebe:	d1b9      	bne.n	d8e34 <_strtoul_r+0x58>
   d8ec0:	2308      	movs	r3, #8
   d8ec2:	e7b7      	b.n	d8e34 <_strtoul_r+0x58>
   d8ec4:	230a      	movs	r3, #10
   d8ec6:	e7b5      	b.n	d8e34 <_strtoul_r+0x58>
   d8ec8:	2c30      	cmp	r4, #48	; 0x30
   d8eca:	d0ab      	beq.n	d8e24 <_strtoul_r+0x48>
   d8ecc:	e7b2      	b.n	d8e34 <_strtoul_r+0x58>
   d8ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ed2:	bf00      	nop
   d8ed4:	2003e0fc 	.word	0x2003e0fc

000d8ed8 <strtoul>:
   d8ed8:	4613      	mov	r3, r2
   d8eda:	460a      	mov	r2, r1
   d8edc:	4601      	mov	r1, r0
   d8ede:	4802      	ldr	r0, [pc, #8]	; (d8ee8 <strtoul+0x10>)
   d8ee0:	6800      	ldr	r0, [r0, #0]
   d8ee2:	f7ff bf7b 	b.w	d8ddc <_strtoul_r>
   d8ee6:	bf00      	nop
   d8ee8:	2003e160 	.word	0x2003e160

000d8eec <__tzcalc_limits>:
   d8eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ef0:	4604      	mov	r4, r0
   d8ef2:	f000 fa6f 	bl	d93d4 <__gettzinfo>
   d8ef6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d8efa:	429c      	cmp	r4, r3
   d8efc:	f340 8096 	ble.w	d902c <__tzcalc_limits+0x140>
   d8f00:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8f04:	18e3      	adds	r3, r4, r3
   d8f06:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d8f0a:	109b      	asrs	r3, r3, #2
   d8f0c:	f240 156d 	movw	r5, #365	; 0x16d
   d8f10:	fb05 3502 	mla	r5, r5, r2, r3
   d8f14:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8f18:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8f1c:	fb92 f3f3 	sdiv	r3, r2, r3
   d8f20:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8f24:	442b      	add	r3, r5
   d8f26:	18a5      	adds	r5, r4, r2
   d8f28:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8f2c:	fb95 f5f2 	sdiv	r5, r5, r2
   d8f30:	441d      	add	r5, r3
   d8f32:	2364      	movs	r3, #100	; 0x64
   d8f34:	fb94 f7f2 	sdiv	r7, r4, r2
   d8f38:	fb94 f6f3 	sdiv	r6, r4, r3
   d8f3c:	fb02 4717 	mls	r7, r2, r7, r4
   d8f40:	fb03 4616 	mls	r6, r3, r6, r4
   d8f44:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8f48:	fab7 fe87 	clz	lr, r7
   d8f4c:	9301      	str	r3, [sp, #4]
   d8f4e:	f004 0303 	and.w	r3, r4, #3
   d8f52:	6044      	str	r4, [r0, #4]
   d8f54:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8f58:	4601      	mov	r1, r0
   d8f5a:	9300      	str	r3, [sp, #0]
   d8f5c:	f04f 0c07 	mov.w	ip, #7
   d8f60:	7a0b      	ldrb	r3, [r1, #8]
   d8f62:	2b4a      	cmp	r3, #74	; 0x4a
   d8f64:	d10e      	bne.n	d8f84 <__tzcalc_limits+0x98>
   d8f66:	694b      	ldr	r3, [r1, #20]
   d8f68:	9a00      	ldr	r2, [sp, #0]
   d8f6a:	18ec      	adds	r4, r5, r3
   d8f6c:	b902      	cbnz	r2, d8f70 <__tzcalc_limits+0x84>
   d8f6e:	b906      	cbnz	r6, d8f72 <__tzcalc_limits+0x86>
   d8f70:	b927      	cbnz	r7, d8f7c <__tzcalc_limits+0x90>
   d8f72:	2b3b      	cmp	r3, #59	; 0x3b
   d8f74:	bfd4      	ite	le
   d8f76:	2300      	movle	r3, #0
   d8f78:	2301      	movgt	r3, #1
   d8f7a:	e000      	b.n	d8f7e <__tzcalc_limits+0x92>
   d8f7c:	2300      	movs	r3, #0
   d8f7e:	4423      	add	r3, r4
   d8f80:	3b01      	subs	r3, #1
   d8f82:	e03f      	b.n	d9004 <__tzcalc_limits+0x118>
   d8f84:	2b44      	cmp	r3, #68	; 0x44
   d8f86:	d102      	bne.n	d8f8e <__tzcalc_limits+0xa2>
   d8f88:	694b      	ldr	r3, [r1, #20]
   d8f8a:	442b      	add	r3, r5
   d8f8c:	e03a      	b.n	d9004 <__tzcalc_limits+0x118>
   d8f8e:	9b00      	ldr	r3, [sp, #0]
   d8f90:	b92b      	cbnz	r3, d8f9e <__tzcalc_limits+0xb2>
   d8f92:	2e00      	cmp	r6, #0
   d8f94:	bf0c      	ite	eq
   d8f96:	46f0      	moveq	r8, lr
   d8f98:	f04f 0801 	movne.w	r8, #1
   d8f9c:	e000      	b.n	d8fa0 <__tzcalc_limits+0xb4>
   d8f9e:	46f0      	mov	r8, lr
   d8fa0:	4b24      	ldr	r3, [pc, #144]	; (d9034 <__tzcalc_limits+0x148>)
   d8fa2:	68cc      	ldr	r4, [r1, #12]
   d8fa4:	2230      	movs	r2, #48	; 0x30
   d8fa6:	fb02 3808 	mla	r8, r2, r8, r3
   d8faa:	f1a8 0a04 	sub.w	sl, r8, #4
   d8fae:	46a9      	mov	r9, r5
   d8fb0:	2301      	movs	r3, #1
   d8fb2:	42a3      	cmp	r3, r4
   d8fb4:	da04      	bge.n	d8fc0 <__tzcalc_limits+0xd4>
   d8fb6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d8fba:	3301      	adds	r3, #1
   d8fbc:	44d9      	add	r9, fp
   d8fbe:	e7f8      	b.n	d8fb2 <__tzcalc_limits+0xc6>
   d8fc0:	f109 0304 	add.w	r3, r9, #4
   d8fc4:	fb93 fbfc 	sdiv	fp, r3, ip
   d8fc8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d8fcc:	2c01      	cmp	r4, #1
   d8fce:	ebca 0a03 	rsb	sl, sl, r3
   d8fd2:	694b      	ldr	r3, [r1, #20]
   d8fd4:	bfb8      	it	lt
   d8fd6:	2401      	movlt	r4, #1
   d8fd8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d8fdc:	ebb3 0a0a 	subs.w	sl, r3, sl
   d8fe0:	690b      	ldr	r3, [r1, #16]
   d8fe2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d8fe6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d8fea:	bf48      	it	mi
   d8fec:	f10a 0a07 	addmi.w	sl, sl, #7
   d8ff0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8ff4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d8ff8:	4453      	add	r3, sl
   d8ffa:	42a3      	cmp	r3, r4
   d8ffc:	db01      	blt.n	d9002 <__tzcalc_limits+0x116>
   d8ffe:	3b07      	subs	r3, #7
   d9000:	e7fb      	b.n	d8ffa <__tzcalc_limits+0x10e>
   d9002:	444b      	add	r3, r9
   d9004:	698c      	ldr	r4, [r1, #24]
   d9006:	4a0c      	ldr	r2, [pc, #48]	; (d9038 <__tzcalc_limits+0x14c>)
   d9008:	fb02 4303 	mla	r3, r2, r3, r4
   d900c:	6a0c      	ldr	r4, [r1, #32]
   d900e:	4423      	add	r3, r4
   d9010:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9014:	9b01      	ldr	r3, [sp, #4]
   d9016:	4299      	cmp	r1, r3
   d9018:	d1a2      	bne.n	d8f60 <__tzcalc_limits+0x74>
   d901a:	69c3      	ldr	r3, [r0, #28]
   d901c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d901e:	4293      	cmp	r3, r2
   d9020:	bfac      	ite	ge
   d9022:	2300      	movge	r3, #0
   d9024:	2301      	movlt	r3, #1
   d9026:	6003      	str	r3, [r0, #0]
   d9028:	2001      	movs	r0, #1
   d902a:	e000      	b.n	d902e <__tzcalc_limits+0x142>
   d902c:	2000      	movs	r0, #0
   d902e:	b003      	add	sp, #12
   d9030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9034:	000d9f84 	.word	0x000d9f84
   d9038:	00015180 	.word	0x00015180

000d903c <__tz_lock>:
   d903c:	4770      	bx	lr

000d903e <__tz_unlock>:
   d903e:	4770      	bx	lr

000d9040 <_tzset_unlocked>:
   d9040:	4b01      	ldr	r3, [pc, #4]	; (d9048 <_tzset_unlocked+0x8>)
   d9042:	6818      	ldr	r0, [r3, #0]
   d9044:	f000 b802 	b.w	d904c <_tzset_unlocked_r>
   d9048:	2003e160 	.word	0x2003e160

000d904c <_tzset_unlocked_r>:
   d904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9050:	b08d      	sub	sp, #52	; 0x34
   d9052:	4607      	mov	r7, r0
   d9054:	f000 f9be 	bl	d93d4 <__gettzinfo>
   d9058:	49b0      	ldr	r1, [pc, #704]	; (d931c <_tzset_unlocked_r+0x2d0>)
   d905a:	4eb1      	ldr	r6, [pc, #708]	; (d9320 <_tzset_unlocked_r+0x2d4>)
   d905c:	4604      	mov	r4, r0
   d905e:	4638      	mov	r0, r7
   d9060:	f000 f9b0 	bl	d93c4 <_getenv_r>
   d9064:	4605      	mov	r5, r0
   d9066:	b960      	cbnz	r0, d9082 <_tzset_unlocked_r+0x36>
   d9068:	4bae      	ldr	r3, [pc, #696]	; (d9324 <_tzset_unlocked_r+0x2d8>)
   d906a:	4aaf      	ldr	r2, [pc, #700]	; (d9328 <_tzset_unlocked_r+0x2dc>)
   d906c:	6018      	str	r0, [r3, #0]
   d906e:	4baf      	ldr	r3, [pc, #700]	; (d932c <_tzset_unlocked_r+0x2e0>)
   d9070:	6018      	str	r0, [r3, #0]
   d9072:	4baf      	ldr	r3, [pc, #700]	; (d9330 <_tzset_unlocked_r+0x2e4>)
   d9074:	6830      	ldr	r0, [r6, #0]
   d9076:	601a      	str	r2, [r3, #0]
   d9078:	605a      	str	r2, [r3, #4]
   d907a:	f7fd f917 	bl	d62ac <free>
   d907e:	6035      	str	r5, [r6, #0]
   d9080:	e148      	b.n	d9314 <_tzset_unlocked_r+0x2c8>
   d9082:	6831      	ldr	r1, [r6, #0]
   d9084:	b979      	cbnz	r1, d90a6 <_tzset_unlocked_r+0x5a>
   d9086:	6830      	ldr	r0, [r6, #0]
   d9088:	f7fd f910 	bl	d62ac <free>
   d908c:	4628      	mov	r0, r5
   d908e:	f7ff fde4 	bl	d8c5a <strlen>
   d9092:	1c41      	adds	r1, r0, #1
   d9094:	4638      	mov	r0, r7
   d9096:	f7fd f931 	bl	d62fc <_malloc_r>
   d909a:	6030      	str	r0, [r6, #0]
   d909c:	b148      	cbz	r0, d90b2 <_tzset_unlocked_r+0x66>
   d909e:	4629      	mov	r1, r5
   d90a0:	f7ff fdb8 	bl	d8c14 <strcpy>
   d90a4:	e005      	b.n	d90b2 <_tzset_unlocked_r+0x66>
   d90a6:	f7ff fdab 	bl	d8c00 <strcmp>
   d90aa:	2800      	cmp	r0, #0
   d90ac:	f000 8132 	beq.w	d9314 <_tzset_unlocked_r+0x2c8>
   d90b0:	e7e9      	b.n	d9086 <_tzset_unlocked_r+0x3a>
   d90b2:	782b      	ldrb	r3, [r5, #0]
   d90b4:	4a9f      	ldr	r2, [pc, #636]	; (d9334 <_tzset_unlocked_r+0x2e8>)
   d90b6:	49a0      	ldr	r1, [pc, #640]	; (d9338 <_tzset_unlocked_r+0x2ec>)
   d90b8:	2b3a      	cmp	r3, #58	; 0x3a
   d90ba:	bf08      	it	eq
   d90bc:	3501      	addeq	r5, #1
   d90be:	ae0a      	add	r6, sp, #40	; 0x28
   d90c0:	4633      	mov	r3, r6
   d90c2:	4628      	mov	r0, r5
   d90c4:	f7fd f902 	bl	d62cc <siscanf>
   d90c8:	2800      	cmp	r0, #0
   d90ca:	f340 8123 	ble.w	d9314 <_tzset_unlocked_r+0x2c8>
   d90ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d90d0:	18ef      	adds	r7, r5, r3
   d90d2:	5ceb      	ldrb	r3, [r5, r3]
   d90d4:	2b2d      	cmp	r3, #45	; 0x2d
   d90d6:	d103      	bne.n	d90e0 <_tzset_unlocked_r+0x94>
   d90d8:	3701      	adds	r7, #1
   d90da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d90de:	e003      	b.n	d90e8 <_tzset_unlocked_r+0x9c>
   d90e0:	2b2b      	cmp	r3, #43	; 0x2b
   d90e2:	bf08      	it	eq
   d90e4:	3701      	addeq	r7, #1
   d90e6:	2501      	movs	r5, #1
   d90e8:	f10d 0a20 	add.w	sl, sp, #32
   d90ec:	f10d 0b1e 	add.w	fp, sp, #30
   d90f0:	f04f 0800 	mov.w	r8, #0
   d90f4:	9603      	str	r6, [sp, #12]
   d90f6:	f8cd a008 	str.w	sl, [sp, #8]
   d90fa:	9601      	str	r6, [sp, #4]
   d90fc:	f8cd b000 	str.w	fp, [sp]
   d9100:	4633      	mov	r3, r6
   d9102:	aa07      	add	r2, sp, #28
   d9104:	498d      	ldr	r1, [pc, #564]	; (d933c <_tzset_unlocked_r+0x2f0>)
   d9106:	f8ad 801e 	strh.w	r8, [sp, #30]
   d910a:	4638      	mov	r0, r7
   d910c:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9110:	f7fd f8dc 	bl	d62cc <siscanf>
   d9114:	4540      	cmp	r0, r8
   d9116:	f340 80fd 	ble.w	d9314 <_tzset_unlocked_r+0x2c8>
   d911a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d911e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9122:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9348 <_tzset_unlocked_r+0x2fc>
   d9126:	213c      	movs	r1, #60	; 0x3c
   d9128:	fb01 3302 	mla	r3, r1, r2, r3
   d912c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9130:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9134:	fb01 3302 	mla	r3, r1, r2, r3
   d9138:	435d      	muls	r5, r3
   d913a:	6225      	str	r5, [r4, #32]
   d913c:	4d7c      	ldr	r5, [pc, #496]	; (d9330 <_tzset_unlocked_r+0x2e4>)
   d913e:	4b7d      	ldr	r3, [pc, #500]	; (d9334 <_tzset_unlocked_r+0x2e8>)
   d9140:	602b      	str	r3, [r5, #0]
   d9142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9144:	497c      	ldr	r1, [pc, #496]	; (d9338 <_tzset_unlocked_r+0x2ec>)
   d9146:	441f      	add	r7, r3
   d9148:	464a      	mov	r2, r9
   d914a:	4633      	mov	r3, r6
   d914c:	4638      	mov	r0, r7
   d914e:	f7fd f8bd 	bl	d62cc <siscanf>
   d9152:	4540      	cmp	r0, r8
   d9154:	dc08      	bgt.n	d9168 <_tzset_unlocked_r+0x11c>
   d9156:	682b      	ldr	r3, [r5, #0]
   d9158:	606b      	str	r3, [r5, #4]
   d915a:	4b72      	ldr	r3, [pc, #456]	; (d9324 <_tzset_unlocked_r+0x2d8>)
   d915c:	6a22      	ldr	r2, [r4, #32]
   d915e:	601a      	str	r2, [r3, #0]
   d9160:	4b72      	ldr	r3, [pc, #456]	; (d932c <_tzset_unlocked_r+0x2e0>)
   d9162:	f8c3 8000 	str.w	r8, [r3]
   d9166:	e0d5      	b.n	d9314 <_tzset_unlocked_r+0x2c8>
   d9168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d916a:	f8c5 9004 	str.w	r9, [r5, #4]
   d916e:	18fd      	adds	r5, r7, r3
   d9170:	5cfb      	ldrb	r3, [r7, r3]
   d9172:	2b2d      	cmp	r3, #45	; 0x2d
   d9174:	d103      	bne.n	d917e <_tzset_unlocked_r+0x132>
   d9176:	3501      	adds	r5, #1
   d9178:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d917c:	e003      	b.n	d9186 <_tzset_unlocked_r+0x13a>
   d917e:	2b2b      	cmp	r3, #43	; 0x2b
   d9180:	bf08      	it	eq
   d9182:	3501      	addeq	r5, #1
   d9184:	2701      	movs	r7, #1
   d9186:	2300      	movs	r3, #0
   d9188:	f8ad 301c 	strh.w	r3, [sp, #28]
   d918c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9190:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9194:	930a      	str	r3, [sp, #40]	; 0x28
   d9196:	9603      	str	r6, [sp, #12]
   d9198:	f8cd a008 	str.w	sl, [sp, #8]
   d919c:	9601      	str	r6, [sp, #4]
   d919e:	f8cd b000 	str.w	fp, [sp]
   d91a2:	4633      	mov	r3, r6
   d91a4:	aa07      	add	r2, sp, #28
   d91a6:	4965      	ldr	r1, [pc, #404]	; (d933c <_tzset_unlocked_r+0x2f0>)
   d91a8:	4628      	mov	r0, r5
   d91aa:	f7fd f88f 	bl	d62cc <siscanf>
   d91ae:	2800      	cmp	r0, #0
   d91b0:	dc04      	bgt.n	d91bc <_tzset_unlocked_r+0x170>
   d91b2:	6a23      	ldr	r3, [r4, #32]
   d91b4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d91b8:	63e3      	str	r3, [r4, #60]	; 0x3c
   d91ba:	e00e      	b.n	d91da <_tzset_unlocked_r+0x18e>
   d91bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d91c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d91c4:	213c      	movs	r1, #60	; 0x3c
   d91c6:	fb01 3302 	mla	r3, r1, r2, r3
   d91ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d91ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d91d2:	fb01 3302 	mla	r3, r1, r2, r3
   d91d6:	435f      	muls	r7, r3
   d91d8:	63e7      	str	r7, [r4, #60]	; 0x3c
   d91da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d91dc:	4627      	mov	r7, r4
   d91de:	441d      	add	r5, r3
   d91e0:	f04f 0900 	mov.w	r9, #0
   d91e4:	782b      	ldrb	r3, [r5, #0]
   d91e6:	2b2c      	cmp	r3, #44	; 0x2c
   d91e8:	bf08      	it	eq
   d91ea:	3501      	addeq	r5, #1
   d91ec:	f895 8000 	ldrb.w	r8, [r5]
   d91f0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d91f4:	d126      	bne.n	d9244 <_tzset_unlocked_r+0x1f8>
   d91f6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d91fa:	9302      	str	r3, [sp, #8]
   d91fc:	ab09      	add	r3, sp, #36	; 0x24
   d91fe:	9300      	str	r3, [sp, #0]
   d9200:	9603      	str	r6, [sp, #12]
   d9202:	9601      	str	r6, [sp, #4]
   d9204:	4633      	mov	r3, r6
   d9206:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d920a:	494d      	ldr	r1, [pc, #308]	; (d9340 <_tzset_unlocked_r+0x2f4>)
   d920c:	4628      	mov	r0, r5
   d920e:	f7fd f85d 	bl	d62cc <siscanf>
   d9212:	2803      	cmp	r0, #3
   d9214:	d17e      	bne.n	d9314 <_tzset_unlocked_r+0x2c8>
   d9216:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d921a:	1e4b      	subs	r3, r1, #1
   d921c:	2b0b      	cmp	r3, #11
   d921e:	d879      	bhi.n	d9314 <_tzset_unlocked_r+0x2c8>
   d9220:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9224:	1e53      	subs	r3, r2, #1
   d9226:	2b04      	cmp	r3, #4
   d9228:	d874      	bhi.n	d9314 <_tzset_unlocked_r+0x2c8>
   d922a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d922e:	2b06      	cmp	r3, #6
   d9230:	d870      	bhi.n	d9314 <_tzset_unlocked_r+0x2c8>
   d9232:	f887 8008 	strb.w	r8, [r7, #8]
   d9236:	60f9      	str	r1, [r7, #12]
   d9238:	613a      	str	r2, [r7, #16]
   d923a:	617b      	str	r3, [r7, #20]
   d923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d923e:	eb05 0803 	add.w	r8, r5, r3
   d9242:	e02a      	b.n	d929a <_tzset_unlocked_r+0x24e>
   d9244:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9248:	bf06      	itte	eq
   d924a:	3501      	addeq	r5, #1
   d924c:	4643      	moveq	r3, r8
   d924e:	2344      	movne	r3, #68	; 0x44
   d9250:	220a      	movs	r2, #10
   d9252:	a90b      	add	r1, sp, #44	; 0x2c
   d9254:	4628      	mov	r0, r5
   d9256:	9305      	str	r3, [sp, #20]
   d9258:	f7ff fe3e 	bl	d8ed8 <strtoul>
   d925c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9260:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9264:	4545      	cmp	r5, r8
   d9266:	9b05      	ldr	r3, [sp, #20]
   d9268:	d114      	bne.n	d9294 <_tzset_unlocked_r+0x248>
   d926a:	234d      	movs	r3, #77	; 0x4d
   d926c:	f1b9 0f00 	cmp.w	r9, #0
   d9270:	d107      	bne.n	d9282 <_tzset_unlocked_r+0x236>
   d9272:	7223      	strb	r3, [r4, #8]
   d9274:	2303      	movs	r3, #3
   d9276:	60e3      	str	r3, [r4, #12]
   d9278:	2302      	movs	r3, #2
   d927a:	6123      	str	r3, [r4, #16]
   d927c:	f8c4 9014 	str.w	r9, [r4, #20]
   d9280:	e00b      	b.n	d929a <_tzset_unlocked_r+0x24e>
   d9282:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d9286:	230b      	movs	r3, #11
   d9288:	62a3      	str	r3, [r4, #40]	; 0x28
   d928a:	2301      	movs	r3, #1
   d928c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d928e:	2300      	movs	r3, #0
   d9290:	6323      	str	r3, [r4, #48]	; 0x30
   d9292:	e002      	b.n	d929a <_tzset_unlocked_r+0x24e>
   d9294:	b280      	uxth	r0, r0
   d9296:	723b      	strb	r3, [r7, #8]
   d9298:	6178      	str	r0, [r7, #20]
   d929a:	2302      	movs	r3, #2
   d929c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d92a0:	2300      	movs	r3, #0
   d92a2:	f8ad 301e 	strh.w	r3, [sp, #30]
   d92a6:	f8ad 3020 	strh.w	r3, [sp, #32]
   d92aa:	930a      	str	r3, [sp, #40]	; 0x28
   d92ac:	f898 3000 	ldrb.w	r3, [r8]
   d92b0:	2b2f      	cmp	r3, #47	; 0x2f
   d92b2:	d10b      	bne.n	d92cc <_tzset_unlocked_r+0x280>
   d92b4:	9603      	str	r6, [sp, #12]
   d92b6:	f8cd a008 	str.w	sl, [sp, #8]
   d92ba:	9601      	str	r6, [sp, #4]
   d92bc:	f8cd b000 	str.w	fp, [sp]
   d92c0:	4633      	mov	r3, r6
   d92c2:	aa07      	add	r2, sp, #28
   d92c4:	491f      	ldr	r1, [pc, #124]	; (d9344 <_tzset_unlocked_r+0x2f8>)
   d92c6:	4640      	mov	r0, r8
   d92c8:	f7fd f800 	bl	d62cc <siscanf>
   d92cc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d92d0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d92d4:	213c      	movs	r1, #60	; 0x3c
   d92d6:	fb01 3302 	mla	r3, r1, r2, r3
   d92da:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d92de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d92e2:	fb01 3302 	mla	r3, r1, r2, r3
   d92e6:	61bb      	str	r3, [r7, #24]
   d92e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d92ea:	f109 0901 	add.w	r9, r9, #1
   d92ee:	f1b9 0f02 	cmp.w	r9, #2
   d92f2:	4445      	add	r5, r8
   d92f4:	f107 071c 	add.w	r7, r7, #28
   d92f8:	f47f af74 	bne.w	d91e4 <_tzset_unlocked_r+0x198>
   d92fc:	6860      	ldr	r0, [r4, #4]
   d92fe:	f7ff fdf5 	bl	d8eec <__tzcalc_limits>
   d9302:	4b08      	ldr	r3, [pc, #32]	; (d9324 <_tzset_unlocked_r+0x2d8>)
   d9304:	6a22      	ldr	r2, [r4, #32]
   d9306:	601a      	str	r2, [r3, #0]
   d9308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d930a:	1a9b      	subs	r3, r3, r2
   d930c:	4a07      	ldr	r2, [pc, #28]	; (d932c <_tzset_unlocked_r+0x2e0>)
   d930e:	bf18      	it	ne
   d9310:	2301      	movne	r3, #1
   d9312:	6013      	str	r3, [r2, #0]
   d9314:	b00d      	add	sp, #52	; 0x34
   d9316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d931a:	bf00      	nop
   d931c:	000d9fe4 	.word	0x000d9fe4
   d9320:	2003e7e0 	.word	0x2003e7e0
   d9324:	2003e7e8 	.word	0x2003e7e8
   d9328:	000d9fe7 	.word	0x000d9fe7
   d932c:	2003e7e4 	.word	0x2003e7e4
   d9330:	2003e164 	.word	0x2003e164
   d9334:	2003e7d3 	.word	0x2003e7d3
   d9338:	000d9feb 	.word	0x000d9feb
   d933c:	000da00e 	.word	0x000da00e
   d9340:	000d9ffa 	.word	0x000d9ffa
   d9344:	000da00d 	.word	0x000da00d
   d9348:	2003e7c8 	.word	0x2003e7c8

000d934c <_findenv_r>:
   d934c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9350:	4607      	mov	r7, r0
   d9352:	468b      	mov	fp, r1
   d9354:	4690      	mov	r8, r2
   d9356:	f000 f8d9 	bl	d950c <__env_lock>
   d935a:	4b19      	ldr	r3, [pc, #100]	; (d93c0 <_findenv_r+0x74>)
   d935c:	681d      	ldr	r5, [r3, #0]
   d935e:	469a      	mov	sl, r3
   d9360:	b13d      	cbz	r5, d9372 <_findenv_r+0x26>
   d9362:	465c      	mov	r4, fp
   d9364:	4623      	mov	r3, r4
   d9366:	f813 2b01 	ldrb.w	r2, [r3], #1
   d936a:	b142      	cbz	r2, d937e <_findenv_r+0x32>
   d936c:	2a3d      	cmp	r2, #61	; 0x3d
   d936e:	461c      	mov	r4, r3
   d9370:	d1f8      	bne.n	d9364 <_findenv_r+0x18>
   d9372:	4638      	mov	r0, r7
   d9374:	f000 f8cb 	bl	d950e <__env_unlock>
   d9378:	2000      	movs	r0, #0
   d937a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d937e:	ebcb 0404 	rsb	r4, fp, r4
   d9382:	46a9      	mov	r9, r5
   d9384:	f859 0b04 	ldr.w	r0, [r9], #4
   d9388:	2800      	cmp	r0, #0
   d938a:	d0f2      	beq.n	d9372 <_findenv_r+0x26>
   d938c:	4622      	mov	r2, r4
   d938e:	4659      	mov	r1, fp
   d9390:	f7ff fc6b 	bl	d8c6a <strncmp>
   d9394:	b988      	cbnz	r0, d93ba <_findenv_r+0x6e>
   d9396:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d939a:	191e      	adds	r6, r3, r4
   d939c:	5d1b      	ldrb	r3, [r3, r4]
   d939e:	2b3d      	cmp	r3, #61	; 0x3d
   d93a0:	d10b      	bne.n	d93ba <_findenv_r+0x6e>
   d93a2:	f8da 3000 	ldr.w	r3, [sl]
   d93a6:	1aed      	subs	r5, r5, r3
   d93a8:	10ad      	asrs	r5, r5, #2
   d93aa:	4638      	mov	r0, r7
   d93ac:	f8c8 5000 	str.w	r5, [r8]
   d93b0:	f000 f8ad 	bl	d950e <__env_unlock>
   d93b4:	1c70      	adds	r0, r6, #1
   d93b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93ba:	464d      	mov	r5, r9
   d93bc:	e7e1      	b.n	d9382 <_findenv_r+0x36>
   d93be:	bf00      	nop
   d93c0:	2003e1ac 	.word	0x2003e1ac

000d93c4 <_getenv_r>:
   d93c4:	b507      	push	{r0, r1, r2, lr}
   d93c6:	aa01      	add	r2, sp, #4
   d93c8:	f7ff ffc0 	bl	d934c <_findenv_r>
   d93cc:	b003      	add	sp, #12
   d93ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d93d4 <__gettzinfo>:
   d93d4:	4800      	ldr	r0, [pc, #0]	; (d93d8 <__gettzinfo+0x4>)
   d93d6:	4770      	bx	lr
   d93d8:	2003e16c 	.word	0x2003e16c

000d93dc <gmtime_r>:
   d93dc:	6802      	ldr	r2, [r0, #0]
   d93de:	4b47      	ldr	r3, [pc, #284]	; (d94fc <gmtime_r+0x120>)
   d93e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d93e2:	fb92 f4f3 	sdiv	r4, r2, r3
   d93e6:	fb03 2214 	mls	r2, r3, r4, r2
   d93ea:	2a00      	cmp	r2, #0
   d93ec:	bfbc      	itt	lt
   d93ee:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d93f2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d93f6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d93fa:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d93fe:	fb92 f3f0 	sdiv	r3, r2, r0
   d9402:	fb00 2213 	mls	r2, r0, r3, r2
   d9406:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d940a:	bfac      	ite	ge
   d940c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9410:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9414:	608b      	str	r3, [r1, #8]
   d9416:	fb92 f3f0 	sdiv	r3, r2, r0
   d941a:	fb00 2213 	mls	r2, r0, r3, r2
   d941e:	604b      	str	r3, [r1, #4]
   d9420:	600a      	str	r2, [r1, #0]
   d9422:	2307      	movs	r3, #7
   d9424:	1ce2      	adds	r2, r4, #3
   d9426:	fb92 f3f3 	sdiv	r3, r2, r3
   d942a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d942e:	1ad3      	subs	r3, r2, r3
   d9430:	618b      	str	r3, [r1, #24]
   d9432:	4b33      	ldr	r3, [pc, #204]	; (d9500 <gmtime_r+0x124>)
   d9434:	4d33      	ldr	r5, [pc, #204]	; (d9504 <gmtime_r+0x128>)
   d9436:	fb94 f5f5 	sdiv	r5, r4, r5
   d943a:	fb03 4405 	mla	r4, r3, r5, r4
   d943e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9442:	fbb4 f2f2 	udiv	r2, r4, r2
   d9446:	4422      	add	r2, r4
   d9448:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d944c:	fbb4 f3f7 	udiv	r3, r4, r7
   d9450:	1ad2      	subs	r2, r2, r3
   d9452:	482d      	ldr	r0, [pc, #180]	; (d9508 <gmtime_r+0x12c>)
   d9454:	fbb4 f0f0 	udiv	r0, r4, r0
   d9458:	f648 6694 	movw	r6, #36500	; 0x8e94
   d945c:	1a13      	subs	r3, r2, r0
   d945e:	fbb3 f6f6 	udiv	r6, r3, r6
   d9462:	4434      	add	r4, r6
   d9464:	f240 126d 	movw	r2, #365	; 0x16d
   d9468:	fbb3 f0f2 	udiv	r0, r3, r2
   d946c:	fbb3 f3f7 	udiv	r3, r3, r7
   d9470:	1ae3      	subs	r3, r4, r3
   d9472:	fb02 3310 	mls	r3, r2, r0, r3
   d9476:	2499      	movs	r4, #153	; 0x99
   d9478:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d947c:	3202      	adds	r2, #2
   d947e:	fbb2 f2f4 	udiv	r2, r2, r4
   d9482:	2a0a      	cmp	r2, #10
   d9484:	fb04 f402 	mul.w	r4, r4, r2
   d9488:	f104 0602 	add.w	r6, r4, #2
   d948c:	f04f 0405 	mov.w	r4, #5
   d9490:	fbb6 f4f4 	udiv	r4, r6, r4
   d9494:	bf34      	ite	cc
   d9496:	2602      	movcc	r6, #2
   d9498:	f06f 0609 	mvncs.w	r6, #9
   d949c:	4416      	add	r6, r2
   d949e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d94a2:	fb02 0505 	mla	r5, r2, r5, r0
   d94a6:	1c5f      	adds	r7, r3, #1
   d94a8:	2e01      	cmp	r6, #1
   d94aa:	bf98      	it	ls
   d94ac:	3501      	addls	r5, #1
   d94ae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d94b2:	eba7 0704 	sub.w	r7, r7, r4
   d94b6:	d302      	bcc.n	d94be <gmtime_r+0xe2>
   d94b8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d94bc:	e014      	b.n	d94e8 <gmtime_r+0x10c>
   d94be:	0782      	lsls	r2, r0, #30
   d94c0:	d105      	bne.n	d94ce <gmtime_r+0xf2>
   d94c2:	2464      	movs	r4, #100	; 0x64
   d94c4:	fbb0 f2f4 	udiv	r2, r0, r4
   d94c8:	fb04 0212 	mls	r2, r4, r2, r0
   d94cc:	b94a      	cbnz	r2, d94e2 <gmtime_r+0x106>
   d94ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d94d2:	fbb0 f4f2 	udiv	r4, r0, r2
   d94d6:	fb02 0014 	mls	r0, r2, r4, r0
   d94da:	fab0 f280 	clz	r2, r0
   d94de:	0952      	lsrs	r2, r2, #5
   d94e0:	e000      	b.n	d94e4 <gmtime_r+0x108>
   d94e2:	2201      	movs	r2, #1
   d94e4:	333b      	adds	r3, #59	; 0x3b
   d94e6:	441a      	add	r2, r3
   d94e8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d94ec:	2300      	movs	r3, #0
   d94ee:	61ca      	str	r2, [r1, #28]
   d94f0:	614d      	str	r5, [r1, #20]
   d94f2:	610e      	str	r6, [r1, #16]
   d94f4:	60cf      	str	r7, [r1, #12]
   d94f6:	620b      	str	r3, [r1, #32]
   d94f8:	4608      	mov	r0, r1
   d94fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d94fc:	00015180 	.word	0x00015180
   d9500:	fffdc54f 	.word	0xfffdc54f
   d9504:	00023ab1 	.word	0x00023ab1
   d9508:	00023ab0 	.word	0x00023ab0

000d950c <__env_lock>:
   d950c:	4770      	bx	lr

000d950e <__env_unlock>:
   d950e:	4770      	bx	lr

000d9510 <dynalib_user>:
   d9510:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9520:	0000 0000                                   ....

000d9524 <_ZTV5Timer>:
	...
   d952c:	4241 000d 4289 000d 4115 000d 9aa1 000d     AB...B...A......
   d953c:	9adc 000d 9ae1 000d 9ae6 000d 9aea 000d     ................
   d954c:	9aef 000d 9af4 000d 9af8 000d 9b03 000d     ................
   d955c:	9b0e 000d 9aa1 000d 9aa9 000d 9aad 000d     ................
   d956c:	9ab6 000d 9abe 000d 9aca 000d 9ad0 000d     ................
   d957c:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   d958c:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000d95bc <_ZL16MemVersionNumber>:
   d95bc:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   d95cc:	202c 3a51 3225 302e 2566 2025 2500 2e34     , Q:%2.0f%% .%4.
   d95dc:	6631 4320 2500 2e34 6631 2520 0025 3425     1f C.%4.1f %%.%4
   d95ec:	312e 2066 756c 0078 6925 2520 0025 5441     .1f lux.%i %%.AT
   d95fc:	432b 5546 3d4e 3631 0a0d 7b00 5422 6d65     +CFUN=16...{"Tem
   d960c:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
   d961c:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   d962c:	2c66 2220 694c 6867 4c74 7665 6c65 3a22     f, "LightLevel":
   d963c:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   d964c:	7574 6572 2231 253a 2c69 2220 6f53 6c69     ture1":%i, "Soil
   d965c:	6f6d 7369 7574 6572 2232 253a 2c69 2220     moisture2":%i, "
   d966c:	6177 6574 5072 6572 7373 7275 2265 253a     waterPressure":%
   d967c:	2c69 2220 6f53 656c 6f6e 6469 3a22 6925     i, "Solenoid":%i
   d968c:	202c 4222 7461 6574 7972 3a22 6925 202c     , "Battery":%i, 
   d969c:	5222 7365 7465 2273 253a 2c69 2220 6c41     "Resets":%i, "Al
   d96ac:	7265 7374 3a22 6925 007d 7752 6e61 6164     erts":%i}.Rwanda
   d96bc:	532d 6e65 6573 412d 646e 432d 6e6f 7274     -Sense-And-Contr
   d96cc:	6c6f 5200 6177 646e 2d61 6553 736e 2d65     ol.Rwanda-Sense-
   d96dc:	6e41 2d64 6f43 746e 6f72 2d6c 6c45 7361     And-Control-Elas
   d96ec:	6974 0063 6f4e 4420 7461 0061 6255 6469     tic.No Data.Ubid
   d96fc:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   d970c:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   d971c:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   d972c:	6976 6465 2520 0069 6553 2074 6f53 616c     vied %i.Set Sola
   d973c:	2072 6f50 6577 6572 2064 6f4d 6564 4300     r Powered Mode.C
   d974c:	6e6f 6966 0067 0030 6c43 6165 6572 2064     onfig.0.Cleared 
   d975c:	6f53 616c 2072 6f50 6577 6572 2064 6f4d     Solar Powered Mo
   d976c:	6564 4e00 206f 6f53 6c69 5320 6e65 6f73     de.No Soil Senso
   d977c:	7372 4f00 656e 5320 696f 206c 6553 736e     rs.One Soil Sens
   d978c:	726f 5400 6f77 5320 696f 206c 6553 736e     or.Two Soil Sens
   d979c:	726f 0073 6f4e 5020 6572 7373 7275 2065     ors.No Pressure 
   d97ac:	6553 736e 726f 5000 6572 7373 7275 2065     Sensor.Pressure 
   d97bc:	6553 736e 726f 5020 6572 6573 746e 4e00     Sensor Present.N
   d97cc:	206f 694c 6867 2074 6553 736e 726f 4c00     o Light Sensor.L
   d97dc:	6769 7468 5320 6e65 6f73 2072 7250 7365     ight Sensor Pres
   d97ec:	6e65 0074 6f4e 5420 6d65 2070 202f 7548     ent.No Temp / Hu
   d97fc:	696d 6964 7974 5320 6e65 6f73 2072 7250     midity Sensor Pr
   d980c:	7365 6e65 0074 6559 0073 6579 0073 6f6e     esent.Yes.yes.no
   d981c:	4e00 006f 6f4e 5320 6c6f 6e65 696f 2064     .No.No Solenoid 
   d982c:	7441 6174 6863 6465 5300 7465 5620 7265     Attached.Set Ver
   d983c:	6f62 6573 4d20 646f 0065 6c43 6165 6572     bose Mode.Cleare
   d984c:	2064 6556 6272 736f 2065 6f4d 6564 4c00     d Verbose Mode.L
   d985c:	776f 5020 776f 7265 4d20 646f 0065 7254     ow Power Mode.Tr
   d986c:	6575 4e00 726f 616d 206c 704f 7265 7461     ue.Normal Operat
   d987c:	6f69 736e 4600 6c61 6573 4f00 006e 664f     ions.False.On.Of
   d988c:	0066 704f 6e65 7420 6568 5620 6c61 6576     f.Open the Valve
   d989c:	5700 7461 7265 6e69 0067 6c43 736f 2065     .Watering.Close 
   d98ac:	6874 2065 6176 766c 0065 7246 6d6f 2520     the valve.From %
   d98bc:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
   d98cc:	6e61 6973 6974 6e6f 7300 6170 6b72 642f     ansition.spark/d
   d98dc:	7665 6369 2f65 6573 7373 6f69 2f6e 6e65     evice/session/en
   d98ec:	0064 6154 696b 676e 6120 4e20 7061 5300     d.Taking a Nap.S
   d98fc:	6174 6574 4c00 776f 4220 7461 6574 7972     tate.Low Battery
   d990c:	2d20 5320 656c 7065 6e69 0067 7245 6f72      - Sleeping.Erro
   d991c:	2072 7453 7461 2065 202d 6552 6573 0074     r State - Reset.
   d992c:	7245 6f72 2072 7453 7461 2065 202d 6f50     Error State - Po
   d993c:	6577 2072 7943 6c63 0065 7245 6f72 2072     wer Cycle.Error 
   d994c:	7453 7461 2065 202d 7546 6c6c 4d20 646f     State - Full Mod
   d995c:	6d65 5220 7365 7465 4500 7272 726f 7420     em Reset.Error t
   d996c:	6b61 6e69 2067 654d 7361 7275 6d65 6e65     aking Measuremen
   d997c:	7374 5300 6769 616e 006c 6552 6573 4374     ts.Signal.ResetC
   d998c:	756f 746e 5200 6c65 6165 6573 5300 6174     ount.Release.Sta
   d999c:	6574 664f 6843 0067 6142 7474 7265 4379     teOfChg.BatteryC
   d99ac:	6e6f 6574 7478 4c00 776f 6f50 6577 4d72     ontext.LowPowerM
   d99bc:	646f 0065 6554 706d 7265 7461 7275 0065     ode.Temperature.
   d99cc:	7548 696d 6964 7974 4c00 6d75 6e69 736f     Humidity.Luminos
   d99dc:	7469 0079 6f53 6c69 6f4d 7369 7574 6572     ity.SoilMoisture
   d99ec:	0031 6f53 6c69 6f4d 7369 7574 6572 0032     1.SoilMoisture2.
   d99fc:	7250 7365 7573 6572 4d00 6165 7573 6572     Pressure.Measure
   d9a0c:	4e2d 776f 5300 6c6f 7261 4d2d 646f 0065     -Now.Solar-Mode.
   d9a1c:	6556 6272 736f 2d65 6f4d 6564 5300 7465     Verbose-Mode.Set
   d9a2c:	6f53 6c69 6553 736e 726f 0073 6553 5074     SoilSensors.SetP
   d9a3c:	6572 7373 7275 5365 6e65 6f73 0072 6553     ressureSensor.Se
   d9a4c:	4c74 6769 7468 6553 736e 726f 5300 6c6f     tLightSensor.Sol
   d9a5c:	6e65 696f 5064 6572 6573 746e 5300 7465     enoidPresent.Set
   d9a6c:	6554 706d 7548 696d 5364 6e65 6f73 0072     TempHumidSensor.
   d9a7c:	7274 6575 6600 6c61 6573 4600 6961 656c     true.false.Faile
   d9a8c:	2064 6f74 6320 6e6f 656e 7463 5300 6174     d to connect.Sta
   d9a9c:	7472 7075 5500 6b6e 6f6e 6e77 4e00 746f     rtup.Unknown.Not
   d9aac:	4320 6168 6772 6e69 0067 6843 7261 6567      Charging.Charge
   d9abc:	0064 6944 6373 6168 6772 6e69 0067 6146     d.Discharging.Fa
   d9acc:	6c75 0074 6944 6f63 6e6e 6365 6574 0064     ult.Diconnected.
   d9adc:	6f4e 656e 5700 4669 0069 5347 004d 4d55     None.WiFi.GSM.UM
   d9aec:	5354 4300 4d44 0041 544c 0045 4549 4545     TS.CDMA.LTE.IEEE
   d9afc:	3038 3132 3435 4c00 4554 435f 5441 4d5f     802154.LTE_CAT_M
   d9b0c:	0031 544c 5f45 4143 5f54 424e 0031          1.LTE_CAT_NB1.

000d9b1a <_ZL13releaseNumber>:
   d9b1a:	3132 0000 0000                              21....

000d9b20 <_ZTVN5spark13CellularClassE>:
	...
   d9b28:	63f7 000d 63ed 000d 63e3 000d 6399 000d     .c...c...c...c..
   d9b38:	63d7 000d 63cb 000d 63bf 000d 63b7 000d     .c...c...c...c..
   d9b48:	63ad 000d 63a3 000d 70cd 000d               .c...c...p..

000d9b54 <_ZTV14CellularSignal>:
	...
   d9b5c:	64a5 000d 6505 000d 64a7 000d 6549 000d     .d...e...d..Ie..
   d9b6c:	64ad 000d 6515 000d 64d9 000d 65d3 000d     .d...e...d...e..
   d9b7c:	fffc ffff 0000 0000 65fd 000d               .........e..

000d9b88 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9b90:	6605 000d 660b 000d 664f 000d 6619 000d     .f...f..Of...f..
   d9ba0:	6607 000d                                   .f..

000d9ba4 <_ZTVN5spark13EthernetClassE>:
	...
   d9bac:	6c63 000d 6c59 000d 6c4f 000d 6c45 000d     cl..Yl..Ol..El..
   d9bbc:	6c39 000d 6c2d 000d 6c21 000d 6c19 000d     9l..-l..!l...l..
   d9bcc:	6c0f 000d 6c05 000d 70cd 000d               .l...l...p..

000d9bd8 <_ZTV7TwoWire>:
	...
   d9be0:	6cc7 000d 6d11 000d 6ce9 000d 6cc9 000d     .l...m...l...l..
   d9bf0:	6cf1 000d 6cf9 000d 6d01 000d 6d09 000d     .l...l...m...m..

000d9c00 <_ZTV9IPAddress>:
	...
   d9c08:	6e05 000d 6df5 000d 6df7 000d 6162 6475     .n...m...m..baud
   d9c18:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9c28:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9c38:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9c48:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9c58:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9c68:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9c78:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9c88:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d9c98:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d9ca8:	203d 6400 7465 6961 736c 3d20 0020 6e6c     = .details = .ln
   d9cb8:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d9cc8:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d9cd8:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d9ce8:	6100 6c6c 0000 0000                         .all....

000d9cf0 <_ZTVN5spark9MeshClassE>:
	...
   d9cf8:	6f47 000d 6f3d 000d 6f33 000d 6f29 000d     Go..=o..3o..)o..
   d9d08:	6f1d 000d 6f11 000d 6f05 000d 6efd 000d     .o...o...o...n..
   d9d18:	6ef3 000d 6ee9 000d 70cd 000d               .n...n...p..

000d9d24 <_ZTVN5spark12NetworkClassE>:
	...
   d9d2c:	7065 000d 706f 000d 7079 000d 7083 000d     ep..op..yp...p..
   d9d3c:	708d 000d 7099 000d 70a5 000d 70b1 000d     .p...p...p...p..
   d9d4c:	70b9 000d 70c3 000d 70cd 000d               .p...p...p..

000d9d58 <_ZTV8SPIClass>:
	...
   d9d60:	7295 000d 7297 000d 6977 6972 676e 5300     .r...r..wiring.S
   d9d70:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   d9d80:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   d9d90:	6c61 6469 002e 2b25 3330 3a64 3025 7532     alid..%+03d:%02u
   d9da0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d9db0:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d9dc0 <_ZTV11USARTSerial>:
	...
   d9dc8:	77b9 000d 7809 000d 7817 000d 71ad 000d     .w...x...x...q..
   d9dd8:	77cd 000d 77ef 000d 77db 000d 7803 000d     .w...w...w...x..
   d9de8:	77bb 000d 77bf 000d                         .w...w..

000d9df0 <_ZTV9USBSerial>:
	...
   d9df8:	78c1 000d 7911 000d 791f 000d 71ad 000d     .x...y...y...q..
   d9e08:	78fd 000d 78c3 000d 78d9 000d 790b 000d     .x...x...x...y..
   d9e18:	78ef 000d 78bd 000d                         .x...x..

000d9e20 <_ZSt7nothrow>:
	...

000d9e21 <_ctype_>:
   d9e21:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9e31:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9e41:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9e51:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9e61:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9e71:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9e81:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9e91:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9ea1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9f24 <__sf_fake_stdin>:
	...

000d9f44 <__sf_fake_stdout>:
	...

000d9f64 <__sf_fake_stderr>:
	...

000d9f84 <__month_lengths>:
   d9f84:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9f94:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9fa4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9fb4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9fc4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9fd4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9fe4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d9ff4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   da004:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   da014:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000da020 <link_const_variable_data_end>:
   da020:	000d57e9 	.word	0x000d57e9
   da024:	000d5a53 	.word	0x000d5a53
   da028:	000d5c01 	.word	0x000d5c01
   da02c:	000d6371 	.word	0x000d6371
   da030:	000d6475 	.word	0x000d6475
   da034:	000d6c6d 	.word	0x000d6c6d
   da038:	000d6ed9 	.word	0x000d6ed9
   da03c:	000d7015 	.word	0x000d7015
   da040:	000d7199 	.word	0x000d7199
   da044:	000d7279 	.word	0x000d7279
   da048:	000d7679 	.word	0x000d7679
   da04c:	000d77a5 	.word	0x000d77a5
   da050:	000d7da1 	.word	0x000d7da1
   da054:	000d7e65 	.word	0x000d7e65
   da058:	000d7ee9 	.word	0x000d7ee9
   da05c:	000d7f6d 	.word	0x000d7f6d
