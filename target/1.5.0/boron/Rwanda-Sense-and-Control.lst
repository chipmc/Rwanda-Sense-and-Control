
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.5.0/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006060  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da080  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000138  2003e058  000da084  0001e058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000660  2003e190  2003e190  0002e190  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000da1bc  000da1bc  0002a1bc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000da1e8  000da1e8  0002a1e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104bb2  00000000  00000000  0002a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014ae7  00000000  00000000  0012ed9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022f0d  00000000  00000000  00143885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e20  00000000  00000000  00166792  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005508  00000000  00000000  001695b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a890  00000000  00000000  0016eaba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032fa0  00000000  00000000  001a934a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b412  00000000  00000000  001dc2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e8cc  00000000  00000000  002e76fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fdd1 	bl	d8bd8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fdd6 	bl	d8bee <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e058 	.word	0x2003e058
   d404c:	000da084 	.word	0x000da084
   d4050:	2003e190 	.word	0x2003e190
   d4054:	2003e190 	.word	0x2003e190
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fd35 	bl	d7acc <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da080 	.word	0x000da080
   d4084:	000da040 	.word	0x000da040

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b9d2 	b.w	d5430 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 feef 	bl	d4e70 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bcdb 	b.w	d7a50 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b927 	b.w	d62ec <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b92d 	b.w	d62fc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b92b 	b.w	d62fc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z16wateringTimerISRv>:
  currentStatusWriteNeeded = true;
  return true;
}

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z16wateringTimerISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e230 	.word	0x2003e230

000d40c4 <_Z13awakeTimerISRv>:
}

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40c4:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z13awakeTimerISRv+0xc>)
   d40c6:	2301      	movs	r3, #1
   d40c8:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40ca:	4a02      	ldr	r2, [pc, #8]	; (d40d4 <_Z13awakeTimerISRv+0x10>)
   d40cc:	7013      	strb	r3, [r2, #0]
   d40ce:	4770      	bx	lr
   d40d0:	2003e30c 	.word	0x2003e30c
   d40d4:	2003e1d1 	.word	0x2003e1d1

000d40d8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d8:	6803      	ldr	r3, [r0, #0]
   d40da:	4718      	bx	r3

000d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40dc:	2a01      	cmp	r2, #1
   d40de:	d002      	beq.n	d40e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40e0:	2a02      	cmp	r2, #2
   d40e2:	d002      	beq.n	d40ea <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40e4:	e004      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e6:	6001      	str	r1, [r0, #0]
	      break;
   d40e8:	e002      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40ea:	680b      	ldr	r3, [r1, #0]
   d40ec:	b100      	cbz	r0, d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ee:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40f0:	2000      	movs	r0, #0
   d40f2:	4770      	bx	lr

000d40f4 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40f4:	b538      	push	{r3, r4, r5, lr}
   d40f6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40f8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40fa:	b128      	cbz	r0, d4108 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40fc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40fe:	210c      	movs	r1, #12
   d4100:	f003 fe57 	bl	d7db2 <_ZdlPvj>
            wakeupSource = next;
   d4104:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d4106:	e7f8      	b.n	d40fa <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4108:	4620      	mov	r0, r4
   d410a:	bd38      	pop	{r3, r4, r5, pc}

000d410c <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d410c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410e:	4904      	ldr	r1, [pc, #16]	; (d4120 <_Z10measureNow6String+0x14>)
   d4110:	f003 f975 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4114:	b118      	cbz	r0, d411e <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4116:	4b03      	ldr	r3, [pc, #12]	; (d4124 <_Z10measureNow6String+0x18>)
   d4118:	2203      	movs	r2, #3
   d411a:	701a      	strb	r2, [r3, #0]
    return 1;
   d411c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d411e:	bd08      	pop	{r3, pc}
   d4120:	000d9b38 	.word	0x000d9b38
   d4124:	2003e1d2 	.word	0x2003e1d2

000d4128 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4128:	6943      	ldr	r3, [r0, #20]
   d412a:	b113      	cbz	r3, d4132 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d412c:	6983      	ldr	r3, [r0, #24]
   d412e:	300c      	adds	r0, #12
   d4130:	4718      	bx	r3
   d4132:	4770      	bx	lr

000d4134 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4134:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4136:	2100      	movs	r1, #0
   d4138:	4604      	mov	r4, r0
   d413a:	4608      	mov	r0, r1
   d413c:	f001 fdba 	bl	d5cb4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4140:	a902      	add	r1, sp, #8
   d4142:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4144:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4146:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d414a:	f001 fdcb 	bl	d5ce4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d414e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4150:	b10c      	cbz	r4, d4156 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4152:	2301      	movs	r3, #1
   d4154:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4156:	2100      	movs	r1, #0
   d4158:	2001      	movs	r0, #1
   d415a:	f001 fdab 	bl	d5cb4 <os_thread_scheduling>
            }
        }
        if (t) {
   d415e:	b12c      	cbz	r4, d416c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4798      	blx	r3
            t->running = false;
   d4168:	2300      	movs	r3, #0
   d416a:	7123      	strb	r3, [r4, #4]
        }
    }
   d416c:	b002      	add	sp, #8
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4170:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4172:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4176:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4178:	f88d 3000 	strb.w	r3, [sp]
   d417c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d417e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4180:	f002 fbe6 	bl	d6950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4184:	4628      	mov	r0, r5
   d4186:	b003      	add	sp, #12
   d4188:	bd30      	pop	{r4, r5, pc}

000d418a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d418a:	b510      	push	{r4, lr}
   d418c:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d418e:	6800      	ldr	r0, [r0, #0]
   d4190:	b108      	cbz	r0, d4196 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4192:	f002 f8b3 	bl	d62fc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4196:	4620      	mov	r0, r4
   d4198:	bd10      	pop	{r4, pc}

000d419a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d419c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d41a0:	b113      	cbz	r3, d41a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41a2:	2203      	movs	r2, #3
   d41a4:	4601      	mov	r1, r0
   d41a6:	4798      	blx	r3
    }
   d41a8:	4620      	mov	r0, r4
   d41aa:	bd10      	pop	{r4, pc}

000d41ac <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>:

inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractDiagnosticData(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
   d41ac:	b530      	push	{r4, r5, lr}
   d41ae:	b085      	sub	sp, #20
   d41b0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d41b2:	a904      	add	r1, sp, #16
   d41b4:	2200      	movs	r2, #0
   d41b6:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d41ba:	f001 ff6b 	bl	d6094 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41be:	b9d8      	cbnz	r0, d41f8 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x4c>
        return ret;
    }
    return get(src, val);
   d41c0:	9c00      	ldr	r4, [sp, #0]
}

inline int AbstractIntegerDiagnosticData::get(const diag_source* src, IntType& val) {
    SPARK_ASSERT(src->type == DIAG_TYPE_INT);
   d41c2:	88e3      	ldrh	r3, [r4, #6]
   d41c4:	2b01      	cmp	r3, #1
   d41c6:	d004      	beq.n	d41d2 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x26>
   d41c8:	4601      	mov	r1, r0
   d41ca:	4a0c      	ldr	r2, [pc, #48]	; (d41fc <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d41cc:	200a      	movs	r0, #10
   d41ce:	f001 ff51 	bl	d6074 <panic_>
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d41d2:	6921      	ldr	r1, [r4, #16]
   d41d4:	b919      	cbnz	r1, d41de <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x32>
   d41d6:	4a09      	ldr	r2, [pc, #36]	; (d41fc <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d41d8:	200a      	movs	r0, #10
   d41da:	f001 ff4b 	bl	d6074 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d41de:	2300      	movs	r3, #0
   d41e0:	9301      	str	r3, [sp, #4]
   d41e2:	230c      	movs	r3, #12
   d41e4:	f8ad 3004 	strh.w	r3, [sp, #4]
   d41e8:	2304      	movs	r3, #4
   d41ea:	9303      	str	r3, [sp, #12]
   d41ec:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d41ee:	6923      	ldr	r3, [r4, #16]
   d41f0:	aa01      	add	r2, sp, #4
   d41f2:	2101      	movs	r1, #1
   d41f4:	4620      	mov	r0, r4
   d41f6:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d41f8:	b005      	add	sp, #20
   d41fa:	bd30      	pop	{r4, r5, pc}
   d41fc:	000d5d75 	.word	0x000d5d75

000d4200 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4200:	6803      	ldr	r3, [r0, #0]
   d4202:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d4204:	b120      	cbz	r0, d4210 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4206:	8883      	ldrh	r3, [r0, #4]
   d4208:	428b      	cmp	r3, r1
   d420a:	d001      	beq.n	d4210 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d420c:	6880      	ldr	r0, [r0, #8]
   d420e:	e7f9      	b.n	d4204 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d4210:	4770      	bx	lr

000d4212 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d4212:	b508      	push	{r3, lr}
   d4214:	ed2d 8b02 	vpush	{d8}
   d4218:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d421c:	b128      	cbz	r0, d422a <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d421e:	3801      	subs	r0, #1
   d4220:	f7ff fff7 	bl	d4212 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d4224:	ee28 0a00 	vmul.f32	s0, s16, s0
   d4228:	e001      	b.n	d422e <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d422a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d422e:	ecbd 8b02 	vpop	{d8}
   d4232:	bd08      	pop	{r3, pc}

000d4234 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4234:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4236:	2500      	movs	r5, #0
   d4238:	468e      	mov	lr, r1
   d423a:	4915      	ldr	r1, [pc, #84]	; (d4290 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d423c:	7105      	strb	r5, [r0, #4]
   d423e:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4240:	6145      	str	r5, [r0, #20]
   d4242:	6001      	str	r1, [r0, #0]
   d4244:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4246:	e892 0003 	ldmia.w	r2, {r0, r1}
   d424a:	b085      	sub	sp, #20
   d424c:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d424e:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4252:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4256:	e896 0003 	ldmia.w	r6, {r0, r1}
   d425a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d425e:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4262:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4266:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4268:	6960      	ldr	r0, [r4, #20]
   d426a:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d426c:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d426e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4270:	69a0      	ldr	r0, [r4, #24]
   d4272:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4274:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4276:	e88d 0028 	stmia.w	sp, {r3, r5}
   d427a:	4a06      	ldr	r2, [pc, #24]	; (d4294 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d427c:	4623      	mov	r3, r4
   d427e:	4671      	mov	r1, lr
   d4280:	f104 0008 	add.w	r0, r4, #8
   d4284:	f001 fd1e 	bl	d5cc4 <os_timer_create>
    }
   d4288:	4620      	mov	r0, r4
   d428a:	b005      	add	sp, #20
   d428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d428e:	bf00      	nop
   d4290:	000d957c 	.word	0x000d957c
   d4294:	000d4135 	.word	0x000d4135

000d4298 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4298:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d429a:	6880      	ldr	r0, [r0, #8]
   d429c:	2300      	movs	r3, #0
   d429e:	b138      	cbz	r0, d42b0 <_ZN5Timer5_stopEjb+0x18>
   d42a0:	e88d 000a 	stmia.w	sp, {r1, r3}
   d42a4:	2102      	movs	r1, #2
   d42a6:	f001 fd25 	bl	d5cf4 <os_timer_change>
   d42aa:	fab0 f080 	clz	r0, r0
   d42ae:	0940      	lsrs	r0, r0, #5
    }
   d42b0:	b003      	add	sp, #12
   d42b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d42b8 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d42b8:	b538      	push	{r3, r4, r5, lr}
   d42ba:	4b10      	ldr	r3, [pc, #64]	; (d42fc <_ZN5TimerD1Ev+0x44>)
   d42bc:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d42be:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d42c0:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d42c2:	b1a3      	cbz	r3, d42ee <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d42c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d42c8:	2200      	movs	r2, #0
   d42ca:	f7ff ffe5 	bl	d4298 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d42ce:	2100      	movs	r1, #0
   d42d0:	68a0      	ldr	r0, [r4, #8]
   d42d2:	f001 fd27 	bl	d5d24 <os_timer_set_id>
            while (running) {
   d42d6:	7923      	ldrb	r3, [r4, #4]
   d42d8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42dc:	b113      	cbz	r3, d42e4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d42de:	f001 fcd1 	bl	d5c84 <os_thread_yield>
   d42e2:	e7f8      	b.n	d42d6 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d42e4:	4629      	mov	r1, r5
   d42e6:	68a0      	ldr	r0, [r4, #8]
   d42e8:	f001 fcf4 	bl	d5cd4 <os_timer_destroy>
            handle = nullptr;
   d42ec:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d42ee:	f104 000c 	add.w	r0, r4, #12
   d42f2:	f7ff ff52 	bl	d419a <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d42f6:	4620      	mov	r0, r4
   d42f8:	bd38      	pop	{r3, r4, r5, pc}
   d42fa:	bf00      	nop
   d42fc:	000d957c 	.word	0x000d957c

000d4300 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4300:	b510      	push	{r4, lr}
   d4302:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4304:	f7ff ffd8 	bl	d42b8 <_ZN5TimerD1Ev>
   d4308:	4620      	mov	r0, r4
   d430a:	211c      	movs	r1, #28
   d430c:	f003 fd51 	bl	d7db2 <_ZdlPvj>
   d4310:	4620      	mov	r0, r4
   d4312:	bd10      	pop	{r4, pc}

000d4314 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4314:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4316:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4318:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d431a:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d431c:	4611      	mov	r1, r2
   d431e:	f7ff ffbb 	bl	d4298 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4322:	68a8      	ldr	r0, [r5, #8]
   d4324:	2300      	movs	r3, #0
   d4326:	b140      	cbz	r0, d433a <_ZN5Timer5startEj+0x26>
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	9400      	str	r4, [sp, #0]
   d432c:	461a      	mov	r2, r3
   d432e:	4619      	mov	r1, r3
   d4330:	f001 fce0 	bl	d5cf4 <os_timer_change>
   d4334:	fab0 f080 	clz	r0, r0
   d4338:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d433a:	b003      	add	sp, #12
   d433c:	bd30      	pop	{r4, r5, pc}
	...

000d4340 <_Z17getSignalStrengthv>:

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d4340:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4342:	4d19      	ldr	r5, [pc, #100]	; (d43a8 <_Z17getSignalStrengthv+0x68>)
   d4344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d4346:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4348:	ac04      	add	r4, sp, #16
   d434a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d434c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d434e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4350:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4354:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4358:	4914      	ldr	r1, [pc, #80]	; (d43ac <_Z17getSignalStrengthv+0x6c>)
   d435a:	a80e      	add	r0, sp, #56	; 0x38
   d435c:	f002 f878 	bl	d6450 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4360:	a80e      	add	r0, sp, #56	; 0x38
   d4362:	f002 f8c8 	bl	d64f6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4366:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4368:	a80e      	add	r0, sp, #56	; 0x38
   d436a:	f002 f915 	bl	d6598 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d436e:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4370:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4374:	f002 f8f6 	bl	d6564 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4378:	ab18      	add	r3, sp, #96	; 0x60
   d437a:	ee10 0a10 	vmov	r0, s0
   d437e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4382:	f003 ffe1 	bl	d8348 <__aeabi_f2d>
   d4386:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d438a:	4628      	mov	r0, r5
   d438c:	f003 ffdc 	bl	d8348 <__aeabi_f2d>
   d4390:	e9cd 0100 	strd	r0, r1, [sp]
   d4394:	4a06      	ldr	r2, [pc, #24]	; (d43b0 <_Z17getSignalStrengthv+0x70>)
   d4396:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d439a:	4806      	ldr	r0, [pc, #24]	; (d43b4 <_Z17getSignalStrengthv+0x74>)
   d439c:	2140      	movs	r1, #64	; 0x40
   d439e:	f001 ffc5 	bl	d632c <snprintf>
}
   d43a2:	b019      	add	sp, #100	; 0x64
   d43a4:	bd30      	pop	{r4, r5, pc}
   d43a6:	bf00      	nop
   d43a8:	000d9588 	.word	0x000d9588
   d43ac:	2003e330 	.word	0x2003e330
   d43b0:	000d9610 	.word	0x000d9610
   d43b4:	2003e270 	.word	0x2003e270

000d43b8 <_Z17getBatteryContextv>:


void getBatteryContext() {
   d43b8:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d43ba:	4d0e      	ldr	r5, [pc, #56]	; (d43f4 <_Z17getBatteryContextv+0x3c>)
   d43bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d43be:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d43c0:	ac01      	add	r4, sp, #4
   d43c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d43c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d43cc:	4669      	mov	r1, sp
   d43ce:	2007      	movs	r0, #7
   d43d0:	f7ff feec 	bl	d41ac <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
   d43d4:	2800      	cmp	r0, #0
        return val;
   d43d6:	bfa8      	it	ge
   d43d8:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d43da:	4a07      	ldr	r2, [pc, #28]	; (d43f8 <_Z17getBatteryContextv+0x40>)
   d43dc:	ab08      	add	r3, sp, #32
   d43de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d43e2:	2110      	movs	r1, #16
   d43e4:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d43e8:	4804      	ldr	r0, [pc, #16]	; (d43fc <_Z17getBatteryContextv+0x44>)
   d43ea:	f001 ff9f 	bl	d632c <snprintf>

}
   d43ee:	b009      	add	sp, #36	; 0x24
   d43f0:	bd30      	pop	{r4, r5, pc}
   d43f2:	bf00      	nop
   d43f4:	000d95b0 	.word	0x000d95b0
   d43f8:	000d98f7 	.word	0x000d98f7
   d43fc:	2003e1c1 	.word	0x2003e1c1

000d4400 <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d4402:	4d55      	ldr	r5, [pc, #340]	; (d4558 <_Z16takeMeasurementsv+0x158>)
   d4404:	4c55      	ldr	r4, [pc, #340]	; (d455c <_Z16takeMeasurementsv+0x15c>)
   d4406:	7b2b      	ldrb	r3, [r5, #12]
   d4408:	b153      	cbz	r3, d4420 <_Z16takeMeasurementsv+0x20>
    current.temperature = tempHumidSensor.readTemperature();
   d440a:	4855      	ldr	r0, [pc, #340]	; (d4560 <_Z16takeMeasurementsv+0x160>)
   d440c:	f001 fc04 	bl	d5c18 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d4410:	4853      	ldr	r0, [pc, #332]	; (d4560 <_Z16takeMeasurementsv+0x160>)

bool takeMeasurements() {
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
    current.temperature = tempHumidSensor.readTemperature();
   d4412:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d4416:	f001 fc0d 	bl	d5c34 <_ZN14Adafruit_SHT3112readHumidityEv>
   d441a:	ed84 0a06 	vstr	s0, [r4, #24]
   d441e:	e002      	b.n	d4426 <_Z16takeMeasurementsv+0x26>
  }
  else current.temperature = current.humidity = 0.0;
   d4420:	2300      	movs	r3, #0
   d4422:	61a3      	str	r3, [r4, #24]
   d4424:	6163      	str	r3, [r4, #20]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4426:	6960      	ldr	r0, [r4, #20]
   d4428:	4e4c      	ldr	r6, [pc, #304]	; (d455c <_Z16takeMeasurementsv+0x15c>)
   d442a:	f003 ff8d 	bl	d8348 <__aeabi_f2d>
   d442e:	4a4d      	ldr	r2, [pc, #308]	; (d4564 <_Z16takeMeasurementsv+0x164>)
   d4430:	e9cd 0100 	strd	r0, r1, [sp]
   d4434:	2110      	movs	r1, #16
   d4436:	484c      	ldr	r0, [pc, #304]	; (d4568 <_Z16takeMeasurementsv+0x168>)
   d4438:	f001 ff78 	bl	d632c <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d443c:	69a0      	ldr	r0, [r4, #24]
   d443e:	f003 ff83 	bl	d8348 <__aeabi_f2d>
   d4442:	4a4a      	ldr	r2, [pc, #296]	; (d456c <_Z16takeMeasurementsv+0x16c>)
   d4444:	e9cd 0100 	strd	r0, r1, [sp]
   d4448:	2110      	movs	r1, #16
   d444a:	4849      	ldr	r0, [pc, #292]	; (d4570 <_Z16takeMeasurementsv+0x170>)
   d444c:	f001 ff6e 	bl	d632c <snprintf>

  if (sysStatus.lightSensorConfig) {
   d4450:	7c2b      	ldrb	r3, [r5, #16]
   d4452:	b143      	cbz	r3, d4466 <_Z16takeMeasurementsv+0x66>
    lightSensor.make_forced_measurement();
   d4454:	4847      	ldr	r0, [pc, #284]	; (d4574 <_Z16takeMeasurementsv+0x174>)
   d4456:	f001 fb09 	bl	d5a6c <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d445a:	4846      	ldr	r0, [pc, #280]	; (d4574 <_Z16takeMeasurementsv+0x174>)
   d445c:	f001 fac0 	bl	d59e0 <_ZN6BH175015get_light_levelEv>
   d4460:	ed86 0a07 	vstr	s0, [r6, #28]
   d4464:	e001      	b.n	d446a <_Z16takeMeasurementsv+0x6a>
  }
  else current.lightLevel = 0.0;
   d4466:	2300      	movs	r3, #0
   d4468:	61f3      	str	r3, [r6, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d446a:	69e0      	ldr	r0, [r4, #28]
   d446c:	4e3b      	ldr	r6, [pc, #236]	; (d455c <_Z16takeMeasurementsv+0x15c>)
   d446e:	f003 ff6b 	bl	d8348 <__aeabi_f2d>
   d4472:	4a41      	ldr	r2, [pc, #260]	; (d4578 <_Z16takeMeasurementsv+0x178>)
   d4474:	e9cd 0100 	strd	r0, r1, [sp]
   d4478:	2110      	movs	r1, #16
   d447a:	4840      	ldr	r0, [pc, #256]	; (d457c <_Z16takeMeasurementsv+0x17c>)
   d447c:	f001 ff56 	bl	d632c <snprintf>

  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4480:	7bab      	ldrb	r3, [r5, #14]
   d4482:	b163      	cbz	r3, d449e <_Z16takeMeasurementsv+0x9e>
   d4484:	2013      	movs	r0, #19
   d4486:	f003 fbc4 	bl	d7c12 <analogRead>
   d448a:	2364      	movs	r3, #100	; 0x64
   d448c:	9300      	str	r3, [sp, #0]
   d448e:	2300      	movs	r3, #0
   d4490:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4494:	4619      	mov	r1, r3
   d4496:	f001 ff61 	bl	d635c <_Z3mapiiiii>
   d449a:	6030      	str	r0, [r6, #0]
   d449c:	e000      	b.n	d44a0 <_Z16takeMeasurementsv+0xa0>
  else current.soilMoisture1 = 0;
   d449e:	6033      	str	r3, [r6, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d44a0:	7bab      	ldrb	r3, [r5, #14]
   d44a2:	2b02      	cmp	r3, #2
   d44a4:	d10c      	bne.n	d44c0 <_Z16takeMeasurementsv+0xc0>
   d44a6:	2012      	movs	r0, #18
   d44a8:	f003 fbb3 	bl	d7c12 <analogRead>
   d44ac:	2364      	movs	r3, #100	; 0x64
   d44ae:	9300      	str	r3, [sp, #0]
   d44b0:	2300      	movs	r3, #0
   d44b2:	f640 628a 	movw	r2, #3722	; 0xe8a
   d44b6:	4619      	mov	r1, r3
   d44b8:	f001 ff50 	bl	d635c <_Z3mapiiiii>
   d44bc:	6060      	str	r0, [r4, #4]
   d44be:	e001      	b.n	d44c4 <_Z16takeMeasurementsv+0xc4>
  else current.soilMoisture2 = 0;
   d44c0:	2300      	movs	r3, #0
   d44c2:	6063      	str	r3, [r4, #4]


  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d44c4:	7beb      	ldrb	r3, [r5, #15]
   d44c6:	2b01      	cmp	r3, #1
   d44c8:	d10d      	bne.n	d44e6 <_Z16takeMeasurementsv+0xe6>
   d44ca:	2011      	movs	r0, #17
   d44cc:	f003 fba1 	bl	d7c12 <analogRead>
   d44d0:	231e      	movs	r3, #30
   d44d2:	9300      	str	r3, [sp, #0]
   d44d4:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d44d8:	2300      	movs	r3, #0
   d44da:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d44de:	f001 ff3d 	bl	d635c <_Z3mapiiiii>
   d44e2:	60a0      	str	r0, [r4, #8]
   d44e4:	e002      	b.n	d44ec <_Z16takeMeasurementsv+0xec>
  else sysStatus.pressureSensorConfig = 0;
   d44e6:	4b1c      	ldr	r3, [pc, #112]	; (d4558 <_Z16takeMeasurementsv+0x158>)
   d44e8:	2200      	movs	r2, #0
   d44ea:	73da      	strb	r2, [r3, #15]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d44ec:	4b24      	ldr	r3, [pc, #144]	; (d4580 <_Z16takeMeasurementsv+0x180>)
   d44ee:	2200      	movs	r2, #0
   d44f0:	4611      	mov	r1, r2
   d44f2:	6858      	ldr	r0, [r3, #4]
   d44f4:	f001 fec2 	bl	d627c <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d44f8:	b108      	cbz	r0, d44fe <_Z16takeMeasurementsv+0xfe>
   d44fa:	f7ff ff21 	bl	d4340 <_Z17getSignalStrengthv>
    float batteryCharge() const {
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
   d44fe:	a903      	add	r1, sp, #12
   d4500:	2003      	movs	r0, #3
   d4502:	f7ff fe53 	bl	d41ac <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
        if (r) {
   d4506:	b988      	cbnz	r0, d452c <_Z16takeMeasurementsv+0x12c>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4508:	2006      	movs	r0, #6
   d450a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d450e:	f7ff fe80 	bl	d4212 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4512:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4516:	ee30 0a00 	vadd.f32	s0, s0, s0
   d451a:	ee07 3a10 	vmov	s14, r3
   d451e:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4522:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4526:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d452a:	e001      	b.n	d4530 <_Z16takeMeasurementsv+0x130>
            return -1.0f;
   d452c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0

  sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
   d4530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4534:	4a13      	ldr	r2, [pc, #76]	; (d4584 <_Z16takeMeasurementsv+0x184>)
   d4536:	4814      	ldr	r0, [pc, #80]	; (d4588 <_Z16takeMeasurementsv+0x188>)
  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
  else sysStatus.pressureSensorConfig = 0;

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready

  sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
   d4538:	edc5 7a02 	vstr	s15, [r5, #8]
   d453c:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4540:	2108      	movs	r1, #8
   d4542:	f001 fef3 	bl	d632c <snprintf>

  getBatteryContext();                                                 // What is the battery doing.
   d4546:	f7ff ff37 	bl	d43b8 <_Z17getBatteryContextv>

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d454a:	4b10      	ldr	r3, [pc, #64]	; (d458c <_Z16takeMeasurementsv+0x18c>)
   d454c:	2001      	movs	r0, #1
   d454e:	7018      	strb	r0, [r3, #0]
   d4550:	4b0f      	ldr	r3, [pc, #60]	; (d4590 <_Z16takeMeasurementsv+0x190>)
   d4552:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4554:	b004      	add	sp, #16
   d4556:	bd70      	pop	{r4, r5, r6, pc}
   d4558:	2003e30c 	.word	0x2003e30c
   d455c:	2003e2c0 	.word	0x2003e2c0
   d4560:	2003e260 	.word	0x2003e260
   d4564:	000d9629 	.word	0x000d9629
   d4568:	2003e194 	.word	0x2003e194
   d456c:	000d9631 	.word	0x000d9631
   d4570:	2003e2e4 	.word	0x2003e2e4
   d4574:	2003e1b0 	.word	0x2003e1b0
   d4578:	000d963a 	.word	0x000d963a
   d457c:	2003e2fc 	.word	0x2003e2fc
   d4580:	2003e330 	.word	0x2003e330
   d4584:	000d9644 	.word	0x000d9644
   d4588:	2003e2f4 	.word	0x2003e2f4
   d458c:	2003e20c 	.word	0x2003e20c
   d4590:	2003e1d1 	.word	0x2003e1d1

000d4594 <_Z17connectToParticlev>:

}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4594:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4598:	481a      	ldr	r0, [pc, #104]	; (d4604 <_Z17connectToParticlev+0x70>)
   d459a:	2300      	movs	r3, #0
   d459c:	461a      	mov	r2, r3
   d459e:	4619      	mov	r1, r3
   d45a0:	6840      	ldr	r0, [r0, #4]
   d45a2:	f001 fe73 	bl	d628c <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d45a6:	f001 fe09 	bl	d61bc <spark_cloud_flag_connect>
   d45aa:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45ae:	f240 36e7 	movw	r6, #999	; 0x3e7
   d45b2:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d45b4:	2000      	movs	r0, #0
   d45b6:	f001 fc1d 	bl	d5df4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45ba:	f04f 0900 	mov.w	r9, #0
   d45be:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d45c0:	2000      	movs	r0, #0
   d45c2:	f001 fc17 	bl	d5df4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45c6:	ebb0 0008 	subs.w	r0, r0, r8
   d45ca:	eb61 0109 	sbc.w	r1, r1, r9
   d45ce:	428f      	cmp	r7, r1
   d45d0:	bf08      	it	eq
   d45d2:	4286      	cmpeq	r6, r0
   d45d4:	d305      	bcc.n	d45e2 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45d6:	f001 fe01 	bl	d61dc <spark_cloud_flag_connected>
   d45da:	b910      	cbnz	r0, d45e2 <_Z17connectToParticlev+0x4e>
            spark_process();
   d45dc:	f001 fde6 	bl	d61ac <spark_process>
   d45e0:	e7ee      	b.n	d45c0 <_Z17connectToParticlev+0x2c>
   d45e2:	f001 fdfb 	bl	d61dc <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d45e6:	b118      	cbz	r0, d45f0 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d45e8:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d45ec:	f001 bdf6 	b.w	d61dc <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d45f0:	f001 fbc8 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d45f4:	4b04      	ldr	r3, [pc, #16]	; (d4608 <_Z17connectToParticlev+0x74>)
   d45f6:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d45f8:	f001 fdd8 	bl	d61ac <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d45fc:	3c01      	subs	r4, #1
   d45fe:	d0f3      	beq.n	d45e8 <_Z17connectToParticlev+0x54>
   d4600:	e7d8      	b.n	d45b4 <_Z17connectToParticlev+0x20>
   d4602:	bf00      	nop
   d4604:	2003e330 	.word	0x2003e330
   d4608:	2003e6d8 	.word	0x2003e6d8

000d460c <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d460c:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d460e:	f001 fde5 	bl	d61dc <spark_cloud_flag_connected>
    return !Particle.connected();
   d4612:	f080 0001 	eor.w	r0, r0, #1
}
   d4616:	b2c0      	uxtb	r0, r0
   d4618:	bd08      	pop	{r3, pc}
	...

000d461c <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d461e:	f001 fdd5 	bl	d61cc <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4622:	2000      	movs	r0, #0
   d4624:	f001 fbe6 	bl	d5df4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4628:	2500      	movs	r5, #0
   d462a:	4604      	mov	r4, r0
   d462c:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4630:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4632:	2000      	movs	r0, #0
   d4634:	f001 fbde 	bl	d5df4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4638:	1b00      	subs	r0, r0, r4
   d463a:	eb61 0105 	sbc.w	r1, r1, r5
   d463e:	428f      	cmp	r7, r1
   d4640:	bf08      	it	eq
   d4642:	4286      	cmpeq	r6, r0
   d4644:	d305      	bcc.n	d4652 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4646:	f7ff ffe1 	bl	d460c <_Z12notConnectedv>
   d464a:	b910      	cbnz	r0, d4652 <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d464c:	f001 fdae 	bl	d61ac <spark_process>
   d4650:	e7ef      	b.n	d4632 <_Z22disconnectFromParticlev+0x16>
   d4652:	f7ff ffdb 	bl	d460c <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4656:	4806      	ldr	r0, [pc, #24]	; (d4670 <_Z22disconnectFromParticlev+0x54>)
   d4658:	2300      	movs	r3, #0
   d465a:	461a      	mov	r2, r3
   d465c:	4619      	mov	r1, r3
   d465e:	6840      	ldr	r0, [r0, #4]
   d4660:	f001 fe1c 	bl	d629c <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4664:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4668:	f001 fe84 	bl	d6374 <delay>
  return true;
}
   d466c:	2001      	movs	r0, #1
   d466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4670:	2003e330 	.word	0x2003e330

000d4674 <_Z9PMICresetv>:
  else return 0;
}

// Power Management function
void PMICreset() {
  if (sysStatus.solarPowerMode) {
   d4674:	4b15      	ldr	r3, [pc, #84]	; (d46cc <_Z9PMICresetv+0x58>)
   d4676:	4816      	ldr	r0, [pc, #88]	; (d46d0 <_Z9PMICresetv+0x5c>)
   d4678:	7959      	ldrb	r1, [r3, #5]
   d467a:	b199      	cbz	r1, d46a4 <_Z9PMICresetv+0x30>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d467c:	f44f 7361 	mov.w	r3, #900	; 0x384
   d4680:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4682:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4686:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4688:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d468c:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d468e:	f241 0370 	movw	r3, #4208	; 0x1070
   d4692:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4694:	6803      	ldr	r3, [r0, #0]
   d4696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d469a:	f043 0301 	orr.w	r3, r3, #1
   d469e:	6003      	str	r3, [r0, #0]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d46a0:	2100      	movs	r1, #0
   d46a2:	e011      	b.n	d46c8 <_Z9PMICresetv+0x54>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d46a4:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d46a8:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d46aa:	f241 0370 	movw	r3, #4208	; 0x1070
   d46ae:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d46b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d46b4:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d46b6:	f241 0310 	movw	r3, #4112	; 0x1010
   d46ba:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d46bc:	6803      	ldr	r3, [r0, #0]
   d46be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d46c2:	f043 0301 	orr.w	r3, r3, #1
   d46c6:	6003      	str	r3, [r0, #0]
   d46c8:	f001 bd4c 	b.w	d6164 <system_power_management_set_config>
   d46cc:	2003e30c 	.word	0x2003e30c
   d46d0:	2003e210 	.word	0x2003e210

000d46d4 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d46d4:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d46d6:	4c07      	ldr	r4, [pc, #28]	; (d46f4 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46d8:	f001 fb54 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
   d46dc:	6823      	ldr	r3, [r4, #0]
   d46de:	1ac0      	subs	r0, r0, r3
   d46e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d46e4:	d304      	bcc.n	d46f0 <_Z20meterParticlePublishv+0x1c>
   d46e6:	f001 fb4d 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d46ea:	6020      	str	r0, [r4, #0]
   d46ec:	2001      	movs	r0, #1
   d46ee:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d46f0:	2000      	movs	r0, #0
}
   d46f2:	bd10      	pop	{r4, pc}
   d46f4:	2003e2b0 	.word	0x2003e2b0

000d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d46f8:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d46fa:	f7ff ffeb 	bl	d46d4 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46fe:	b118      	cbz	r0, d4708 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4704:	f7ff bfe6 	b.w	d46d4 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4708:	f001 fd50 	bl	d61ac <spark_process>
   d470c:	e7f5      	b.n	d46fa <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55+0x2>
	...

000d4710 <_Z14fullModemResetv>:
    return 1;
  }
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4710:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4712:	f001 fd5b 	bl	d61cc <spark_cloud_flag_disconnect>
   d4716:	f001 fb35 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d471a:	f643 2597 	movw	r5, #14999	; 0x3a97
   d471e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4720:	f001 fd5c 	bl	d61dc <spark_cloud_flag_connected>
   d4724:	b140      	cbz	r0, d4738 <_Z14fullModemResetv+0x28>
   d4726:	f001 fb2d 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
   d472a:	1b00      	subs	r0, r0, r4
   d472c:	42a8      	cmp	r0, r5
   d472e:	d803      	bhi.n	d4738 <_Z14fullModemResetv+0x28>
		delay(100);
   d4730:	2064      	movs	r0, #100	; 0x64
   d4732:	f001 fe1f 	bl	d6374 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4736:	e7f3      	b.n	d4720 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4738:	2100      	movs	r1, #0
   d473a:	4b09      	ldr	r3, [pc, #36]	; (d4760 <_Z14fullModemResetv+0x50>)
   d473c:	f247 5230 	movw	r2, #30000	; 0x7530
   d4740:	4608      	mov	r0, r1
   d4742:	f001 fa8f 	bl	d5c64 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d4746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d474a:	f001 fe13 	bl	d6374 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d474e:	4b05      	ldr	r3, [pc, #20]	; (d4764 <_Z14fullModemResetv+0x54>)
   d4750:	220a      	movs	r2, #10
   d4752:	681b      	ldr	r3, [r3, #0]
   d4754:	2101      	movs	r1, #1
   d4756:	4668      	mov	r0, sp
   d4758:	f002 ff40 	bl	d75dc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d475c:	b003      	add	sp, #12
   d475e:	bd30      	pop	{r4, r5, pc}
   d4760:	000d964a 	.word	0x000d964a
   d4764:	2003e24c 	.word	0x2003e24c

000d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4768:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d476a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d476c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d476e:	b17c      	cbz	r4, d4790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4770:	6863      	ldr	r3, [r4, #4]
   d4772:	3b01      	subs	r3, #1
   d4774:	6063      	str	r3, [r4, #4]
   d4776:	b95b      	cbnz	r3, d4790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4778:	6823      	ldr	r3, [r4, #0]
   d477a:	4620      	mov	r0, r4
   d477c:	689b      	ldr	r3, [r3, #8]
   d477e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4780:	68a3      	ldr	r3, [r4, #8]
   d4782:	3b01      	subs	r3, #1
   d4784:	60a3      	str	r3, [r4, #8]
   d4786:	b91b      	cbnz	r3, d4790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4788:	6823      	ldr	r3, [r4, #0]
   d478a:	4620      	mov	r0, r4
   d478c:	68db      	ldr	r3, [r3, #12]
   d478e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4790:	4628      	mov	r0, r5
   d4792:	bd38      	pop	{r3, r4, r5, pc}

000d4794 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d4794:	b530      	push	{r4, r5, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d4796:	4c2e      	ldr	r4, [pc, #184]	; (d4850 <_Z9sendEventv+0xbc>)
   d4798:	4d2e      	ldr	r5, [pc, #184]	; (d4854 <_Z9sendEventv+0xc0>)
   d479a:	6a23      	ldr	r3, [r4, #32]
    break;
  }
}

void sendEvent()
{
   d479c:	b0d1      	sub	sp, #324	; 0x144
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d479e:	930c      	str	r3, [sp, #48]	; 0x30
   d47a0:	4b2d      	ldr	r3, [pc, #180]	; (d4858 <_Z9sendEventv+0xc4>)
   d47a2:	699a      	ldr	r2, [r3, #24]
   d47a4:	920b      	str	r2, [sp, #44]	; 0x2c
   d47a6:	689b      	ldr	r3, [r3, #8]
   d47a8:	930a      	str	r3, [sp, #40]	; 0x28
   d47aa:	68e3      	ldr	r3, [r4, #12]
   d47ac:	9309      	str	r3, [sp, #36]	; 0x24
   d47ae:	68a3      	ldr	r3, [r4, #8]
   d47b0:	9308      	str	r3, [sp, #32]
   d47b2:	6863      	ldr	r3, [r4, #4]
   d47b4:	9307      	str	r3, [sp, #28]
   d47b6:	6823      	ldr	r3, [r4, #0]
   d47b8:	9306      	str	r3, [sp, #24]
   d47ba:	69e0      	ldr	r0, [r4, #28]
   d47bc:	f003 fdc4 	bl	d8348 <__aeabi_f2d>
   d47c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d47c4:	69a0      	ldr	r0, [r4, #24]
   d47c6:	f003 fdbf 	bl	d8348 <__aeabi_f2d>
   d47ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47ce:	6960      	ldr	r0, [r4, #20]
   d47d0:	f003 fdba 	bl	d8348 <__aeabi_f2d>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d47d4:	2400      	movs	r4, #0
   d47d6:	e9cd 0100 	strd	r0, r1, [sp]
   d47da:	4a20      	ldr	r2, [pc, #128]	; (d485c <_Z9sendEventv+0xc8>)
   d47dc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d47e0:	a810      	add	r0, sp, #64	; 0x40
   d47e2:	f001 fda3 	bl	d632c <snprintf>
  waitUntil(meterParticlePublish);
   d47e6:	f7ff ff87 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d47ea:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control-Elastic", data, PRIVATE);
   d47ec:	491c      	ldr	r1, [pc, #112]	; (d4860 <_Z9sendEventv+0xcc>)
   d47ee:	f88d 4000 	strb.w	r4, [sp]
   d47f2:	aa10      	add	r2, sp, #64	; 0x40
   d47f4:	a80e      	add	r0, sp, #56	; 0x38
   d47f6:	f7ff fcbb 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d47fa:	a80f      	add	r0, sp, #60	; 0x3c
   d47fc:	f7ff ffb4 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4800:	f7ff ff7a 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d4804:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("agriculture-aws-webhook",data,PRIVATE);
   d4806:	4917      	ldr	r1, [pc, #92]	; (d4864 <_Z9sendEventv+0xd0>)
   d4808:	f88d 4000 	strb.w	r4, [sp]
   d480c:	aa10      	add	r2, sp, #64	; 0x40
   d480e:	a80e      	add	r0, sp, #56	; 0x38
   d4810:	f7ff fcae 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4814:	a80f      	add	r0, sp, #60	; 0x3c
   d4816:	f7ff ffa7 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d481a:	f7ff ff6d 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d481e:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d4820:	4911      	ldr	r1, [pc, #68]	; (d4868 <_Z9sendEventv+0xd4>)
   d4822:	f88d 4000 	strb.w	r4, [sp]
   d4826:	aa10      	add	r2, sp, #64	; 0x40
   d4828:	a80e      	add	r0, sp, #56	; 0x38
   d482a:	f7ff fca1 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d482e:	a80f      	add	r0, sp, #60	; 0x3c
   d4830:	f7ff ff9a 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d4834:	f002 ffca 	bl	d77cc <_ZN9TimeClass4hourEv>
   d4838:	4b0c      	ldr	r3, [pc, #48]	; (d486c <_Z9sendEventv+0xd8>)
   d483a:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d483c:	4b0c      	ldr	r3, [pc, #48]	; (d4870 <_Z9sendEventv+0xdc>)
   d483e:	2201      	movs	r2, #1
   d4840:	701a      	strb	r2, [r3, #0]
   d4842:	f001 fa9f 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4846:	4b0b      	ldr	r3, [pc, #44]	; (d4874 <_Z9sendEventv+0xe0>)
   d4848:	6018      	str	r0, [r3, #0]
}
   d484a:	b051      	add	sp, #324	; 0x144
   d484c:	bd30      	pop	{r4, r5, pc}
   d484e:	bf00      	nop
   d4850:	2003e2c0 	.word	0x2003e2c0
   d4854:	2003e1ac 	.word	0x2003e1ac
   d4858:	2003e30c 	.word	0x2003e30c
   d485c:	000d9657 	.word	0x000d9657
   d4860:	000d9706 	.word	0x000d9706
   d4864:	000d9727 	.word	0x000d9727
   d4868:	000d973f 	.word	0x000d973f
   d486c:	2003e231 	.word	0x2003e231
   d4870:	2003e0d6 	.word	0x2003e0d6
   d4874:	2003e1a8 	.word	0x2003e1a8

000d4878 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4878:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d487a:	780b      	ldrb	r3, [r1, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d487c:	b094      	sub	sp, #80	; 0x50
   d487e:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4880:	b923      	cbnz	r3, d488c <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4882:	491c      	ldr	r1, [pc, #112]	; (d48f4 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4884:	a804      	add	r0, sp, #16
   d4886:	f004 f9ed 	bl	d8c64 <strcpy>
   d488a:	e017      	b.n	d48bc <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d488c:	4608      	mov	r0, r1
   d488e:	f004 f899 	bl	d89c4 <atoi>
   d4892:	28c8      	cmp	r0, #200	; 0xc8
   d4894:	d004      	beq.n	d48a0 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4896:	4620      	mov	r0, r4
   d4898:	f004 f894 	bl	d89c4 <atoi>
   d489c:	28c9      	cmp	r0, #201	; 0xc9
   d489e:	d11e      	bne.n	d48de <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d48a0:	4915      	ldr	r1, [pc, #84]	; (d48f8 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d48a2:	a804      	add	r0, sp, #16
   d48a4:	f004 f9de 	bl	d8c64 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d48a8:	f002 ff88 	bl	d77bc <_ZN9TimeClass3nowEv>
   d48ac:	4b13      	ldr	r3, [pc, #76]	; (d48fc <_Z14UbidotsHandlerPKcS0_+0x84>)
   d48ae:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d48b0:	4b13      	ldr	r3, [pc, #76]	; (d4900 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d48b2:	2201      	movs	r2, #1
   d48b4:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d48b6:	4b13      	ldr	r3, [pc, #76]	; (d4904 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d48b8:	2200      	movs	r2, #0
   d48ba:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d48bc:	f7ff ff1c 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d48c0:	4b11      	ldr	r3, [pc, #68]	; (d4908 <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d48c2:	4912      	ldr	r1, [pc, #72]	; (d490c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d48c4:	781b      	ldrb	r3, [r3, #0]
   d48c6:	2200      	movs	r2, #0
   d48c8:	f88d 2000 	strb.w	r2, [sp]
   d48cc:	a802      	add	r0, sp, #8
   d48ce:	aa04      	add	r2, sp, #16
   d48d0:	f7ff fc4e 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d48d4:	a803      	add	r0, sp, #12
   d48d6:	f7ff ff47 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d48da:	b014      	add	sp, #80	; 0x50
   d48dc:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d48de:	4620      	mov	r0, r4
   d48e0:	f004 f870 	bl	d89c4 <atoi>
   d48e4:	4a0a      	ldr	r2, [pc, #40]	; (d4910 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d48e6:	4603      	mov	r3, r0
   d48e8:	2140      	movs	r1, #64	; 0x40
   d48ea:	a804      	add	r0, sp, #16
   d48ec:	f001 fd1e 	bl	d632c <snprintf>
   d48f0:	e7e4      	b.n	d48bc <_Z14UbidotsHandlerPKcS0_+0x44>
   d48f2:	bf00      	nop
   d48f4:	000d9758 	.word	0x000d9758
   d48f8:	000d976d 	.word	0x000d976d
   d48fc:	2003e30c 	.word	0x2003e30c
   d4900:	2003e1d1 	.word	0x2003e1d1
   d4904:	2003e0d6 	.word	0x2003e0d6
   d4908:	2003e1ac 	.word	0x2003e1ac
   d490c:	000d9760 	.word	0x000d9760
   d4910:	000d977f 	.word	0x000d977f

000d4914 <_Z14setSoilSensors6String>:
    System.setPowerConfiguration(conf);
  }
}

int setSoilSensors (String command) // Function to force sending data in current hour
{
   d4914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4916:	491e      	ldr	r1, [pc, #120]	; (d4990 <_Z14setSoilSensors6String+0x7c>)
   d4918:	4604      	mov	r4, r0
   d491a:	f002 fd70 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "0")
   d491e:	4606      	mov	r6, r0
   d4920:	b158      	cbz	r0, d493a <_Z14setSoilSensors6String+0x26>
  {
    sysStatus.soilSensorConfig = 0;
   d4922:	4b1c      	ldr	r3, [pc, #112]	; (d4994 <_Z14setSoilSensors6String+0x80>)
   d4924:	2200      	movs	r2, #0
   d4926:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4928:	4b1b      	ldr	r3, [pc, #108]	; (d4998 <_Z14setSoilSensors6String+0x84>)
   d492a:	2401      	movs	r4, #1
   d492c:	701c      	strb	r4, [r3, #0]
   d492e:	4b1b      	ldr	r3, [pc, #108]	; (d499c <_Z14setSoilSensors6String+0x88>)
   d4930:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d4932:	f88d 2000 	strb.w	r2, [sp]
   d4936:	4a1a      	ldr	r2, [pc, #104]	; (d49a0 <_Z14setSoilSensors6String+0x8c>)
   d4938:	e020      	b.n	d497c <_Z14setSoilSensors6String+0x68>
   d493a:	491a      	ldr	r1, [pc, #104]	; (d49a4 <_Z14setSoilSensors6String+0x90>)
   d493c:	4620      	mov	r0, r4
   d493e:	f002 fd5e 	bl	d73fe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4942:	4605      	mov	r5, r0
   d4944:	b150      	cbz	r0, d495c <_Z14setSoilSensors6String+0x48>
  {
    sysStatus.soilSensorConfig = 1;
   d4946:	4b13      	ldr	r3, [pc, #76]	; (d4994 <_Z14setSoilSensors6String+0x80>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4948:	4a17      	ldr	r2, [pc, #92]	; (d49a8 <_Z14setSoilSensors6String+0x94>)
    Particle.publish("Config","No Soil Sensors",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.soilSensorConfig = 1;
   d494a:	2401      	movs	r4, #1
   d494c:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d494e:	4b12      	ldr	r3, [pc, #72]	; (d4998 <_Z14setSoilSensors6String+0x84>)
   d4950:	701c      	strb	r4, [r3, #0]
   d4952:	4b12      	ldr	r3, [pc, #72]	; (d499c <_Z14setSoilSensors6String+0x88>)
   d4954:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4956:	f88d 6000 	strb.w	r6, [sp]
   d495a:	e00f      	b.n	d497c <_Z14setSoilSensors6String+0x68>
   d495c:	4913      	ldr	r1, [pc, #76]	; (d49ac <_Z14setSoilSensors6String+0x98>)
   d495e:	4620      	mov	r0, r4
   d4960:	f002 fd4d 	bl	d73fe <_ZNK6String6equalsEPKc>
    return 1;
  }
    else if (command == "2")
   d4964:	b190      	cbz	r0, d498c <_Z14setSoilSensors6String+0x78>
  {
    sysStatus.soilSensorConfig = 2;
   d4966:	4b0b      	ldr	r3, [pc, #44]	; (d4994 <_Z14setSoilSensors6String+0x80>)
   d4968:	2202      	movs	r2, #2
   d496a:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d496c:	4b0a      	ldr	r3, [pc, #40]	; (d4998 <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d496e:	4a10      	ldr	r2, [pc, #64]	; (d49b0 <_Z14setSoilSensors6String+0x9c>)
    return 1;
  }
    else if (command == "2")
  {
    sysStatus.soilSensorConfig = 2;
    systemStatusWriteNeeded = true;
   d4970:	2401      	movs	r4, #1
   d4972:	701c      	strb	r4, [r3, #0]
   d4974:	4b09      	ldr	r3, [pc, #36]	; (d499c <_Z14setSoilSensors6String+0x88>)
   d4976:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4978:	f88d 5000 	strb.w	r5, [sp]
   d497c:	490d      	ldr	r1, [pc, #52]	; (d49b4 <_Z14setSoilSensors6String+0xa0>)
   d497e:	a802      	add	r0, sp, #8
   d4980:	f7ff fbf6 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4984:	a803      	add	r0, sp, #12
   d4986:	f7ff feef 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d498a:	4620      	mov	r0, r4
  }
  else return 0;
}
   d498c:	b004      	add	sp, #16
   d498e:	bd70      	pop	{r4, r5, r6, pc}
   d4990:	000d979c 	.word	0x000d979c
   d4994:	2003e30c 	.word	0x2003e30c
   d4998:	2003e1d1 	.word	0x2003e1d1
   d499c:	2003e1ac 	.word	0x2003e1ac
   d49a0:	000d979e 	.word	0x000d979e
   d49a4:	000d9b38 	.word	0x000d9b38
   d49a8:	000d97b5 	.word	0x000d97b5
   d49ac:	000d9a30 	.word	0x000d9a30
   d49b0:	000d97c5 	.word	0x000d97c5
   d49b4:	000d97ae 	.word	0x000d97ae

000d49b8 <_Z17setPressureSensor6String>:

int setPressureSensor (String command) // Function to force sending data in current hour
{
   d49b8:	b530      	push	{r4, r5, lr}
   d49ba:	4916      	ldr	r1, [pc, #88]	; (d4a14 <_Z17setPressureSensor6String+0x5c>)
   d49bc:	b085      	sub	sp, #20
   d49be:	4604      	mov	r4, r0
   d49c0:	f002 fd1d 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "0")
   d49c4:	4605      	mov	r5, r0
   d49c6:	b158      	cbz	r0, d49e0 <_Z17setPressureSensor6String+0x28>
  {
    sysStatus.pressureSensorConfig = 0;
   d49c8:	4b13      	ldr	r3, [pc, #76]	; (d4a18 <_Z17setPressureSensor6String+0x60>)
   d49ca:	2200      	movs	r2, #0
   d49cc:	73da      	strb	r2, [r3, #15]
    systemStatusWriteNeeded = true;
   d49ce:	4b13      	ldr	r3, [pc, #76]	; (d4a1c <_Z17setPressureSensor6String+0x64>)
   d49d0:	2401      	movs	r4, #1
   d49d2:	701c      	strb	r4, [r3, #0]
   d49d4:	4b12      	ldr	r3, [pc, #72]	; (d4a20 <_Z17setPressureSensor6String+0x68>)
   d49d6:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d49d8:	f88d 2000 	strb.w	r2, [sp]
   d49dc:	4a11      	ldr	r2, [pc, #68]	; (d4a24 <_Z17setPressureSensor6String+0x6c>)
   d49de:	e00e      	b.n	d49fe <_Z17setPressureSensor6String+0x46>
   d49e0:	4911      	ldr	r1, [pc, #68]	; (d4a28 <_Z17setPressureSensor6String+0x70>)
   d49e2:	4620      	mov	r0, r4
   d49e4:	f002 fd0b 	bl	d73fe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d49e8:	b188      	cbz	r0, d4a0e <_Z17setPressureSensor6String+0x56>
  {
    sysStatus.pressureSensorConfig = 1;
   d49ea:	4b0b      	ldr	r3, [pc, #44]	; (d4a18 <_Z17setPressureSensor6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d49ec:	4a0f      	ldr	r2, [pc, #60]	; (d4a2c <_Z17setPressureSensor6String+0x74>)
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.pressureSensorConfig = 1;
   d49ee:	2401      	movs	r4, #1
   d49f0:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d49f2:	4b0a      	ldr	r3, [pc, #40]	; (d4a1c <_Z17setPressureSensor6String+0x64>)
   d49f4:	701c      	strb	r4, [r3, #0]
   d49f6:	4b0a      	ldr	r3, [pc, #40]	; (d4a20 <_Z17setPressureSensor6String+0x68>)
   d49f8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d49fa:	f88d 5000 	strb.w	r5, [sp]
   d49fe:	490c      	ldr	r1, [pc, #48]	; (d4a30 <_Z17setPressureSensor6String+0x78>)
   d4a00:	a802      	add	r0, sp, #8
   d4a02:	f7ff fbb5 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4a06:	a803      	add	r0, sp, #12
   d4a08:	f7ff feae 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a0c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4a0e:	b005      	add	sp, #20
   d4a10:	bd30      	pop	{r4, r5, pc}
   d4a12:	bf00      	nop
   d4a14:	000d979c 	.word	0x000d979c
   d4a18:	2003e30c 	.word	0x2003e30c
   d4a1c:	2003e1d1 	.word	0x2003e1d1
   d4a20:	2003e1ac 	.word	0x2003e1ac
   d4a24:	000d97d6 	.word	0x000d97d6
   d4a28:	000d9b38 	.word	0x000d9b38
   d4a2c:	000d97e9 	.word	0x000d97e9
   d4a30:	000d97ae 	.word	0x000d97ae

000d4a34 <_Z14setLightSensor6String>:

int setLightSensor (String command) // Function to force sending data in current hour
{
   d4a34:	b530      	push	{r4, r5, lr}
   d4a36:	4919      	ldr	r1, [pc, #100]	; (d4a9c <_Z14setLightSensor6String+0x68>)
   d4a38:	b085      	sub	sp, #20
   d4a3a:	4604      	mov	r4, r0
   d4a3c:	f002 fcdf 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4a40:	4605      	mov	r5, r0
   d4a42:	b158      	cbz	r0, d4a5c <_Z14setLightSensor6String+0x28>
  {
    sysStatus.lightSensorConfig = 0;
   d4a44:	4b16      	ldr	r3, [pc, #88]	; (d4aa0 <_Z14setLightSensor6String+0x6c>)
   d4a46:	2200      	movs	r2, #0
   d4a48:	741a      	strb	r2, [r3, #16]
    systemStatusWriteNeeded = true;
   d4a4a:	4b16      	ldr	r3, [pc, #88]	; (d4aa4 <_Z14setLightSensor6String+0x70>)
   d4a4c:	2401      	movs	r4, #1
   d4a4e:	701c      	strb	r4, [r3, #0]
   d4a50:	4b15      	ldr	r3, [pc, #84]	; (d4aa8 <_Z14setLightSensor6String+0x74>)
   d4a52:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d4a54:	f88d 2000 	strb.w	r2, [sp]
   d4a58:	4a14      	ldr	r2, [pc, #80]	; (d4aac <_Z14setLightSensor6String+0x78>)
   d4a5a:	e015      	b.n	d4a88 <_Z14setLightSensor6String+0x54>
   d4a5c:	4914      	ldr	r1, [pc, #80]	; (d4ab0 <_Z14setLightSensor6String+0x7c>)
   d4a5e:	4620      	mov	r0, r4
   d4a60:	f002 fccd 	bl	d73fe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4a64:	b1c0      	cbz	r0, d4a98 <_Z14setLightSensor6String+0x64>
  {
    sysStatus.lightSensorConfig = 1;
   d4a66:	4b0e      	ldr	r3, [pc, #56]	; (d4aa0 <_Z14setLightSensor6String+0x6c>)
    systemStatusWriteNeeded = true;
    lightSensor.begin();
   d4a68:	4812      	ldr	r0, [pc, #72]	; (d4ab4 <_Z14setLightSensor6String+0x80>)
    Particle.publish("Config","No Light Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.lightSensorConfig = 1;
   d4a6a:	2401      	movs	r4, #1
   d4a6c:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d4a6e:	4b0d      	ldr	r3, [pc, #52]	; (d4aa4 <_Z14setLightSensor6String+0x70>)
   d4a70:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4a72:	f000 ffaa 	bl	d59ca <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4a76:	2120      	movs	r1, #32
   d4a78:	480e      	ldr	r0, [pc, #56]	; (d4ab4 <_Z14setLightSensor6String+0x80>)
   d4a7a:	f000 ffe2 	bl	d5a42 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
   d4a7e:	4b0a      	ldr	r3, [pc, #40]	; (d4aa8 <_Z14setLightSensor6String+0x74>)
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4a80:	4a0d      	ldr	r2, [pc, #52]	; (d4ab8 <_Z14setLightSensor6String+0x84>)
   d4a82:	781b      	ldrb	r3, [r3, #0]
   d4a84:	f88d 5000 	strb.w	r5, [sp]
   d4a88:	490c      	ldr	r1, [pc, #48]	; (d4abc <_Z14setLightSensor6String+0x88>)
   d4a8a:	a802      	add	r0, sp, #8
   d4a8c:	f7ff fb70 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4a90:	a803      	add	r0, sp, #12
   d4a92:	f7ff fe69 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a96:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4a98:	b005      	add	sp, #20
   d4a9a:	bd30      	pop	{r4, r5, pc}
   d4a9c:	000d979c 	.word	0x000d979c
   d4aa0:	2003e30c 	.word	0x2003e30c
   d4aa4:	2003e1d1 	.word	0x2003e1d1
   d4aa8:	2003e1ac 	.word	0x2003e1ac
   d4aac:	000d9801 	.word	0x000d9801
   d4ab0:	000d9b38 	.word	0x000d9b38
   d4ab4:	2003e1b0 	.word	0x2003e1b0
   d4ab8:	000d9811 	.word	0x000d9811
   d4abc:	000d97ae 	.word	0x000d97ae

000d4ac0 <_Z18setTempHumidSensor6String>:

int setTempHumidSensor (String command) // Function to force sending data in current hour
{
   d4ac0:	b530      	push	{r4, r5, lr}
   d4ac2:	4918      	ldr	r1, [pc, #96]	; (d4b24 <_Z18setTempHumidSensor6String+0x64>)
   d4ac4:	b085      	sub	sp, #20
   d4ac6:	4604      	mov	r4, r0
   d4ac8:	f002 fc99 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4acc:	4605      	mov	r5, r0
   d4ace:	b158      	cbz	r0, d4ae8 <_Z18setTempHumidSensor6String+0x28>
  {
    sysStatus.TempHumidConfig = 0;
   d4ad0:	4b15      	ldr	r3, [pc, #84]	; (d4b28 <_Z18setTempHumidSensor6String+0x68>)
   d4ad2:	2200      	movs	r2, #0
   d4ad4:	731a      	strb	r2, [r3, #12]
    systemStatusWriteNeeded = true;
   d4ad6:	4b15      	ldr	r3, [pc, #84]	; (d4b2c <_Z18setTempHumidSensor6String+0x6c>)
   d4ad8:	2401      	movs	r4, #1
   d4ada:	701c      	strb	r4, [r3, #0]
   d4adc:	4b14      	ldr	r3, [pc, #80]	; (d4b30 <_Z18setTempHumidSensor6String+0x70>)
   d4ade:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4ae0:	f88d 2000 	strb.w	r2, [sp]
   d4ae4:	4a13      	ldr	r2, [pc, #76]	; (d4b34 <_Z18setTempHumidSensor6String+0x74>)
   d4ae6:	e012      	b.n	d4b0e <_Z18setTempHumidSensor6String+0x4e>
   d4ae8:	4913      	ldr	r1, [pc, #76]	; (d4b38 <_Z18setTempHumidSensor6String+0x78>)
   d4aea:	4620      	mov	r0, r4
   d4aec:	f002 fc87 	bl	d73fe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4af0:	b1a8      	cbz	r0, d4b1e <_Z18setTempHumidSensor6String+0x5e>
  {
    sysStatus.TempHumidConfig = 1;
   d4af2:	4b0d      	ldr	r3, [pc, #52]	; (d4b28 <_Z18setTempHumidSensor6String+0x68>)
    systemStatusWriteNeeded = true;
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4af4:	4811      	ldr	r0, [pc, #68]	; (d4b3c <_Z18setTempHumidSensor6String+0x7c>)
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
   d4af6:	2401      	movs	r4, #1
   d4af8:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d4afa:	4b0c      	ldr	r3, [pc, #48]	; (d4b2c <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4afc:	2144      	movs	r1, #68	; 0x44
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
    systemStatusWriteNeeded = true;
   d4afe:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4b00:	f000 fff4 	bl	d5aec <_ZN14Adafruit_SHT315beginEh>
   d4b04:	4b0a      	ldr	r3, [pc, #40]	; (d4b30 <_Z18setTempHumidSensor6String+0x70>)
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4b06:	4a0e      	ldr	r2, [pc, #56]	; (d4b40 <_Z18setTempHumidSensor6String+0x80>)
   d4b08:	781b      	ldrb	r3, [r3, #0]
   d4b0a:	f88d 5000 	strb.w	r5, [sp]
   d4b0e:	490d      	ldr	r1, [pc, #52]	; (d4b44 <_Z18setTempHumidSensor6String+0x84>)
   d4b10:	a802      	add	r0, sp, #8
   d4b12:	f7ff fb2d 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4b16:	a803      	add	r0, sp, #12
   d4b18:	f7ff fe26 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b1c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4b1e:	b005      	add	sp, #20
   d4b20:	bd30      	pop	{r4, r5, pc}
   d4b22:	bf00      	nop
   d4b24:	000d979c 	.word	0x000d979c
   d4b28:	2003e30c 	.word	0x2003e30c
   d4b2c:	2003e1d1 	.word	0x2003e1d1
   d4b30:	2003e1ac 	.word	0x2003e1ac
   d4b34:	000d9826 	.word	0x000d9826
   d4b38:	000d9b38 	.word	0x000d9b38
   d4b3c:	2003e260 	.word	0x2003e260
   d4b40:	000d9829 	.word	0x000d9829
   d4b44:	000d97ae 	.word	0x000d97ae

000d4b48 <_Z18setSolenoidPresent6String>:

int setSolenoidPresent (String command) // Function to force sending data in current hour
{
   d4b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4b4a:	491b      	ldr	r1, [pc, #108]	; (d4bb8 <_Z18setSolenoidPresent6String+0x70>)
   d4b4c:	4604      	mov	r4, r0
   d4b4e:	f002 fc56 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "Yes" || command == "yes") {
   d4b52:	b978      	cbnz	r0, d4b74 <_Z18setSolenoidPresent6String+0x2c>
   d4b54:	4919      	ldr	r1, [pc, #100]	; (d4bbc <_Z18setSolenoidPresent6String+0x74>)
   d4b56:	4620      	mov	r0, r4
   d4b58:	f002 fc51 	bl	d73fe <_ZNK6String6equalsEPKc>
   d4b5c:	b950      	cbnz	r0, d4b74 <_Z18setSolenoidPresent6String+0x2c>
   d4b5e:	4918      	ldr	r1, [pc, #96]	; (d4bc0 <_Z18setSolenoidPresent6String+0x78>)
   d4b60:	4620      	mov	r0, r4
   d4b62:	f002 fc4c 	bl	d73fe <_ZNK6String6equalsEPKc>
    sysStatus.solenoidConfig = 1;
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Solenoid Attached",PRIVATE);
    return 1;
  }
  else if (command == "No" || command == "no") {
   d4b66:	b988      	cbnz	r0, d4b8c <_Z18setSolenoidPresent6String+0x44>
   d4b68:	4916      	ldr	r1, [pc, #88]	; (d4bc4 <_Z18setSolenoidPresent6String+0x7c>)
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	f002 fc47 	bl	d73fe <_ZNK6String6equalsEPKc>
   d4b70:	b960      	cbnz	r0, d4b8c <_Z18setSolenoidPresent6String+0x44>
   d4b72:	e01e      	b.n	d4bb2 <_Z18setSolenoidPresent6String+0x6a>
}

int setSolenoidPresent (String command) // Function to force sending data in current hour
{
  if (command == "Yes" || command == "yes") {
    sysStatus.solenoidConfig = 1;
   d4b74:	4b14      	ldr	r3, [pc, #80]	; (d4bc8 <_Z18setSolenoidPresent6String+0x80>)
   d4b76:	2401      	movs	r4, #1
   d4b78:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d4b7a:	4b14      	ldr	r3, [pc, #80]	; (d4bcc <_Z18setSolenoidPresent6String+0x84>)
   d4b7c:	701c      	strb	r4, [r3, #0]
   d4b7e:	4b14      	ldr	r3, [pc, #80]	; (d4bd0 <_Z18setSolenoidPresent6String+0x88>)
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d4b80:	2200      	movs	r2, #0
   d4b82:	781b      	ldrb	r3, [r3, #0]
   d4b84:	f88d 2000 	strb.w	r2, [sp]
   d4b88:	4a12      	ldr	r2, [pc, #72]	; (d4bd4 <_Z18setSolenoidPresent6String+0x8c>)
   d4b8a:	e00a      	b.n	d4ba2 <_Z18setSolenoidPresent6String+0x5a>
    return 1;
  }
  else if (command == "No" || command == "no") {
    sysStatus.solenoidConfig = 0;
   d4b8c:	4b0e      	ldr	r3, [pc, #56]	; (d4bc8 <_Z18setSolenoidPresent6String+0x80>)
   d4b8e:	2200      	movs	r2, #0
   d4b90:	745a      	strb	r2, [r3, #17]
    systemStatusWriteNeeded = true;
   d4b92:	4b0e      	ldr	r3, [pc, #56]	; (d4bcc <_Z18setSolenoidPresent6String+0x84>)
   d4b94:	2401      	movs	r4, #1
   d4b96:	701c      	strb	r4, [r3, #0]
   d4b98:	4b0d      	ldr	r3, [pc, #52]	; (d4bd0 <_Z18setSolenoidPresent6String+0x88>)
   d4b9a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d4b9c:	f88d 2000 	strb.w	r2, [sp]
   d4ba0:	4a0d      	ldr	r2, [pc, #52]	; (d4bd8 <_Z18setSolenoidPresent6String+0x90>)
   d4ba2:	490e      	ldr	r1, [pc, #56]	; (d4bdc <_Z18setSolenoidPresent6String+0x94>)
   d4ba4:	a802      	add	r0, sp, #8
   d4ba6:	f7ff fae3 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4baa:	a803      	add	r0, sp, #12
   d4bac:	f7ff fddc 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4bb0:	4620      	mov	r0, r4
  }
  else return 0;
}
   d4bb2:	b004      	add	sp, #16
   d4bb4:	bd10      	pop	{r4, pc}
   d4bb6:	bf00      	nop
   d4bb8:	000d9848 	.word	0x000d9848
   d4bbc:	000d984c 	.word	0x000d984c
   d4bc0:	000d9853 	.word	0x000d9853
   d4bc4:	000d9850 	.word	0x000d9850
   d4bc8:	2003e30c 	.word	0x2003e30c
   d4bcc:	2003e1d1 	.word	0x2003e1d1
   d4bd0:	2003e1ac 	.word	0x2003e1ac
   d4bd4:	000d9859 	.word	0x000d9859
   d4bd8:	000d9856 	.word	0x000d9856
   d4bdc:	000d97ae 	.word	0x000d97ae

000d4be0 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4be0:	b530      	push	{r4, r5, lr}
   d4be2:	4916      	ldr	r1, [pc, #88]	; (d4c3c <_Z14setVerboseMode6String+0x5c>)
   d4be4:	b085      	sub	sp, #20
   d4be6:	4604      	mov	r4, r0
   d4be8:	f002 fc09 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4bec:	4605      	mov	r5, r0
   d4bee:	b158      	cbz	r0, d4c08 <_Z14setVerboseMode6String+0x28>
  {
    sysStatus.verboseMode = true;
   d4bf0:	4b13      	ldr	r3, [pc, #76]	; (d4c40 <_Z14setVerboseMode6String+0x60>)
   d4bf2:	2401      	movs	r4, #1
   d4bf4:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4bf6:	4b13      	ldr	r3, [pc, #76]	; (d4c44 <_Z14setVerboseMode6String+0x64>)
   d4bf8:	701c      	strb	r4, [r3, #0]
   d4bfa:	4b13      	ldr	r3, [pc, #76]	; (d4c48 <_Z14setVerboseMode6String+0x68>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4bfc:	2200      	movs	r2, #0
   d4bfe:	781b      	ldrb	r3, [r3, #0]
   d4c00:	f88d 2000 	strb.w	r2, [sp]
   d4c04:	4a11      	ldr	r2, [pc, #68]	; (d4c4c <_Z14setVerboseMode6String+0x6c>)
   d4c06:	e00e      	b.n	d4c26 <_Z14setVerboseMode6String+0x46>
   d4c08:	4911      	ldr	r1, [pc, #68]	; (d4c50 <_Z14setVerboseMode6String+0x70>)
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	f002 fbf7 	bl	d73fe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4c10:	b188      	cbz	r0, d4c36 <_Z14setVerboseMode6String+0x56>
  {
    sysStatus.verboseMode = false;
   d4c12:	4b0b      	ldr	r3, [pc, #44]	; (d4c40 <_Z14setVerboseMode6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4c14:	4a0f      	ldr	r2, [pc, #60]	; (d4c54 <_Z14setVerboseMode6String+0x74>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
   d4c16:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c18:	4b0a      	ldr	r3, [pc, #40]	; (d4c44 <_Z14setVerboseMode6String+0x64>)
   d4c1a:	2401      	movs	r4, #1
   d4c1c:	701c      	strb	r4, [r3, #0]
   d4c1e:	4b0a      	ldr	r3, [pc, #40]	; (d4c48 <_Z14setVerboseMode6String+0x68>)
   d4c20:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4c22:	f88d 5000 	strb.w	r5, [sp]
   d4c26:	490c      	ldr	r1, [pc, #48]	; (d4c58 <_Z14setVerboseMode6String+0x78>)
   d4c28:	a802      	add	r0, sp, #8
   d4c2a:	f7ff faa1 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4c2e:	a803      	add	r0, sp, #12
   d4c30:	f7ff fd9a 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c34:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c36:	b005      	add	sp, #20
   d4c38:	bd30      	pop	{r4, r5, pc}
   d4c3a:	bf00      	nop
   d4c3c:	000d9b38 	.word	0x000d9b38
   d4c40:	2003e30c 	.word	0x2003e30c
   d4c44:	2003e1d1 	.word	0x2003e1d1
   d4c48:	2003e1ac 	.word	0x2003e1ac
   d4c4c:	000d986b 	.word	0x000d986b
   d4c50:	000d979c 	.word	0x000d979c
   d4c54:	000d987c 	.word	0x000d987c
   d4c58:	000d988c 	.word	0x000d988c

000d4c5c <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4c5c:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4c5e:	492b      	ldr	r1, [pc, #172]	; (d4d0c <_Z15setLowPowerMode6String+0xb0>)
   d4c60:	b085      	sub	sp, #20
   d4c62:	4604      	mov	r4, r0
   d4c64:	f002 fbcb 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4c68:	b928      	cbnz	r0, d4c76 <_Z15setLowPowerMode6String+0x1a>
   d4c6a:	4929      	ldr	r1, [pc, #164]	; (d4d10 <_Z15setLowPowerMode6String+0xb4>)
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	f002 fbc6 	bl	d73fe <_ZNK6String6equalsEPKc>
   d4c72:	2800      	cmp	r0, #0
   d4c74:	d048      	beq.n	d4d08 <_Z15setLowPowerMode6String+0xac>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4c76:	4925      	ldr	r1, [pc, #148]	; (d4d0c <_Z15setLowPowerMode6String+0xb0>)
   d4c78:	4620      	mov	r0, r4
   d4c7a:	f002 fbc0 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4c7e:	b1b0      	cbz	r0, d4cae <_Z15setLowPowerMode6String+0x52>
   d4c80:	f001 faac 	bl	d61dc <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4c84:	b170      	cbz	r0, d4ca4 <_Z15setLowPowerMode6String+0x48>
      waitUntil(meterParticlePublish);
   d4c86:	f7ff fd37 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d4c8a:	4b22      	ldr	r3, [pc, #136]	; (d4d14 <_Z15setLowPowerMode6String+0xb8>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4c8c:	4922      	ldr	r1, [pc, #136]	; (d4d18 <_Z15setLowPowerMode6String+0xbc>)
   d4c8e:	781b      	ldrb	r3, [r3, #0]
   d4c90:	2200      	movs	r2, #0
   d4c92:	f88d 2000 	strb.w	r2, [sp]
   d4c96:	a802      	add	r0, sp, #8
   d4c98:	4a20      	ldr	r2, [pc, #128]	; (d4d1c <_Z15setLowPowerMode6String+0xc0>)
   d4c9a:	f7ff fa69 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4c9e:	a803      	add	r0, sp, #12
   d4ca0:	f7ff fd62 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
   d4ca4:	4b1e      	ldr	r3, [pc, #120]	; (d4d20 <_Z15setLowPowerMode6String+0xc4>)
    strcpy(lowPowerModeStr,"True");
   d4ca6:	491f      	ldr	r1, [pc, #124]	; (d4d24 <_Z15setLowPowerMode6String+0xc8>)
  {
    if (Particle.connected()) {
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power Mode", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4ca8:	2201      	movs	r2, #1
   d4caa:	719a      	strb	r2, [r3, #6]
   d4cac:	e026      	b.n	d4cfc <_Z15setLowPowerMode6String+0xa0>
   d4cae:	4918      	ldr	r1, [pc, #96]	; (d4d10 <_Z15setLowPowerMode6String+0xb4>)
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	f002 fba4 	bl	d73fe <_ZNK6String6equalsEPKc>
    strcpy(lowPowerModeStr,"True");
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4cb6:	b320      	cbz	r0, d4d02 <_Z15setLowPowerMode6String+0xa6>
   d4cb8:	f001 fa90 	bl	d61dc <spark_cloud_flag_connected>
   d4cbc:	4c18      	ldr	r4, [pc, #96]	; (d4d20 <_Z15setLowPowerMode6String+0xc4>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4cbe:	b918      	cbnz	r0, d4cc8 <_Z15setLowPowerMode6String+0x6c>
      connectToParticle();
   d4cc0:	f7ff fc68 	bl	d4594 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4cc4:	2301      	movs	r3, #1
   d4cc6:	70e3      	strb	r3, [r4, #3]
    }
    waitUntil(meterParticlePublish);
   d4cc8:	f7ff fd16 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d4ccc:	4b11      	ldr	r3, [pc, #68]	; (d4d14 <_Z15setLowPowerMode6String+0xb8>)
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4cce:	4a16      	ldr	r2, [pc, #88]	; (d4d28 <_Z15setLowPowerMode6String+0xcc>)
   d4cd0:	781b      	ldrb	r3, [r3, #0]
   d4cd2:	4911      	ldr	r1, [pc, #68]	; (d4d18 <_Z15setLowPowerMode6String+0xbc>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4cd4:	2500      	movs	r5, #0
   d4cd6:	a802      	add	r0, sp, #8
   d4cd8:	f88d 5000 	strb.w	r5, [sp]
   d4cdc:	f7ff fa48 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4ce0:	a803      	add	r0, sp, #12
   d4ce2:	f7ff fd41 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4cea:	f001 fb43 	bl	d6374 <delay>
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
   d4cee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4cf2:	480e      	ldr	r0, [pc, #56]	; (d4d2c <_Z15setLowPowerMode6String+0xd0>)
   d4cf4:	f7ff fb0e 	bl	d4314 <_ZN5Timer5startEj>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4cf8:	490d      	ldr	r1, [pc, #52]	; (d4d30 <_Z15setLowPowerMode6String+0xd4>)
    }
    waitUntil(meterParticlePublish);
    Particle.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4cfa:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4cfc:	480d      	ldr	r0, [pc, #52]	; (d4d34 <_Z15setLowPowerMode6String+0xd8>)
   d4cfe:	f003 ffb1 	bl	d8c64 <strcpy>
  }
  systemStatusWriteNeeded = true;
   d4d02:	4b0d      	ldr	r3, [pc, #52]	; (d4d38 <_Z15setLowPowerMode6String+0xdc>)
   d4d04:	2001      	movs	r0, #1
   d4d06:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4d08:	b005      	add	sp, #20
   d4d0a:	bd30      	pop	{r4, r5, pc}
   d4d0c:	000d9b38 	.word	0x000d9b38
   d4d10:	000d979c 	.word	0x000d979c
   d4d14:	2003e1ac 	.word	0x2003e1ac
   d4d18:	000d988c 	.word	0x000d988c
   d4d1c:	000d9891 	.word	0x000d9891
   d4d20:	2003e30c 	.word	0x2003e30c
   d4d24:	000d98a0 	.word	0x000d98a0
   d4d28:	000d98a5 	.word	0x000d98a5
   d4d2c:	2003e1d4 	.word	0x2003e1d4
   d4d30:	000d98b7 	.word	0x000d98b7
   d4d34:	2003e2b8 	.word	0x2003e2b8
   d4d38:	2003e1d1 	.word	0x2003e1d1

000d4d3c <_Z12controlValve6String>:

int controlValve(String command)                                   // Function to force sending data in current hour
{
   d4d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4d3e:	4926      	ldr	r1, [pc, #152]	; (d4dd8 <_Z12controlValve6String+0x9c>)
   d4d40:	b085      	sub	sp, #20
   d4d42:	4604      	mov	r4, r0
   d4d44:	f002 fb5b 	bl	d73fe <_ZNK6String6equalsEPKc>
  if (command != "On" && command != "Off") return 0;              // Before we begin, let's make sure we have a valid input
   d4d48:	b928      	cbnz	r0, d4d56 <_Z12controlValve6String+0x1a>
   d4d4a:	4924      	ldr	r1, [pc, #144]	; (d4ddc <_Z12controlValve6String+0xa0>)
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	f002 fb56 	bl	d73fe <_ZNK6String6equalsEPKc>
   d4d52:	2800      	cmp	r0, #0
   d4d54:	d03d      	beq.n	d4dd2 <_Z12controlValve6String+0x96>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4d56:	4620      	mov	r0, r4
   d4d58:	491f      	ldr	r1, [pc, #124]	; (d4dd8 <_Z12controlValve6String+0x9c>)
   d4d5a:	4d21      	ldr	r5, [pc, #132]	; (d4de0 <_Z12controlValve6String+0xa4>)
   d4d5c:	4e21      	ldr	r6, [pc, #132]	; (d4de4 <_Z12controlValve6String+0xa8>)
   d4d5e:	4f22      	ldr	r7, [pc, #136]	; (d4de8 <_Z12controlValve6String+0xac>)
   d4d60:	f002 fb4d 	bl	d73fe <_ZNK6String6equalsEPKc>
  else if (command == "On") {                                     // Open the water valve
   d4d64:	4604      	mov	r4, r0
   d4d66:	b1b0      	cbz	r0, d4d96 <_Z12controlValve6String+0x5a>
    current.solenoidState = true;
   d4d68:	2401      	movs	r4, #1
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4d6a:	4621      	mov	r1, r4
   d4d6c:	2002      	movs	r0, #2

int controlValve(String command)                                   // Function to force sending data in current hour
{
  if (command != "On" && command != "Off") return 0;              // Before we begin, let's make sure we have a valid input
  else if (command == "On") {                                     // Open the water valve
    current.solenoidState = true;
   d4d6e:	60ec      	str	r4, [r5, #12]
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4d70:	f002 ff23 	bl	d7bba <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4d74:	2100      	movs	r1, #0
   d4d76:	2003      	movs	r0, #3
   d4d78:	f002 ff1f 	bl	d7bba <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4d7c:	6970      	ldr	r0, [r6, #20]
   d4d7e:	f001 faf9 	bl	d6374 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4d82:	4621      	mov	r1, r4
   d4d84:	2003      	movs	r0, #3
   d4d86:	f002 ff18 	bl	d7bba <digitalWrite>
   d4d8a:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4d8c:	783b      	ldrb	r3, [r7, #0]
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d4d8e:	f88d 2000 	strb.w	r2, [sp]
   d4d92:	4a16      	ldr	r2, [pc, #88]	; (d4dec <_Z12controlValve6String+0xb0>)
   d4d94:	e013      	b.n	d4dbe <_Z12controlValve6String+0x82>
  }
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
   d4d96:	4621      	mov	r1, r4
   d4d98:	2002      	movs	r0, #2
   d4d9a:	f002 ff0e 	bl	d7bba <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4d9e:	4621      	mov	r1, r4
   d4da0:	2003      	movs	r0, #3
   d4da2:	f002 ff0a 	bl	d7bba <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4da6:	6970      	ldr	r0, [r6, #20]
   d4da8:	f001 fae4 	bl	d6374 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4dac:	2101      	movs	r1, #1
   d4dae:	2003      	movs	r0, #3
   d4db0:	f002 ff03 	bl	d7bba <digitalWrite>
    current.solenoidState = false;
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4db4:	4a0e      	ldr	r2, [pc, #56]	; (d4df0 <_Z12controlValve6String+0xb4>)
   d4db6:	783b      	ldrb	r3, [r7, #0]
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
    delay(sysStatus.solenoidHoldTime);
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
    current.solenoidState = false;
   d4db8:	60ec      	str	r4, [r5, #12]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4dba:	f88d 4000 	strb.w	r4, [sp]
   d4dbe:	490d      	ldr	r1, [pc, #52]	; (d4df4 <_Z12controlValve6String+0xb8>)
   d4dc0:	a802      	add	r0, sp, #8
   d4dc2:	f7ff f9d5 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4dc6:	a803      	add	r0, sp, #12
   d4dc8:	f7ff fcce 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  currentStatusWriteNeeded = true;
   d4dcc:	4b0a      	ldr	r3, [pc, #40]	; (d4df8 <_Z12controlValve6String+0xbc>)
   d4dce:	2001      	movs	r0, #1
   d4dd0:	7018      	strb	r0, [r3, #0]
  return true;
}
   d4dd2:	b005      	add	sp, #20
   d4dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4dd6:	bf00      	nop
   d4dd8:	000d98bd 	.word	0x000d98bd
   d4ddc:	000d98c0 	.word	0x000d98c0
   d4de0:	2003e2c0 	.word	0x2003e2c0
   d4de4:	2003e30c 	.word	0x2003e30c
   d4de8:	2003e1ac 	.word	0x2003e1ac
   d4dec:	000d98c4 	.word	0x000d98c4
   d4df0:	000d98dc 	.word	0x000d98dc
   d4df4:	000d98d3 	.word	0x000d98d3
   d4df8:	2003e20c 	.word	0x2003e20c

000d4dfc <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d4dfc:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4dfe:	4d16      	ldr	r5, [pc, #88]	; (d4e58 <_Z22publishStateTransitionv+0x5c>)
   d4e00:	4c16      	ldr	r4, [pc, #88]	; (d4e5c <_Z22publishStateTransitionv+0x60>)
   d4e02:	4917      	ldr	r1, [pc, #92]	; (d4e60 <_Z22publishStateTransitionv+0x64>)
   d4e04:	782a      	ldrb	r2, [r5, #0]
   d4e06:	7820      	ldrb	r0, [r4, #0]
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d4e08:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4e0a:	230e      	movs	r3, #14
   d4e0c:	fb03 1202 	mla	r2, r3, r2, r1
   d4e10:	9200      	str	r2, [sp, #0]
   d4e12:	fb03 1300 	mla	r3, r3, r0, r1
   d4e16:	4a13      	ldr	r2, [pc, #76]	; (d4e64 <_Z22publishStateTransitionv+0x68>)
   d4e18:	2128      	movs	r1, #40	; 0x28
   d4e1a:	a804      	add	r0, sp, #16
   d4e1c:	f001 fa86 	bl	d632c <snprintf>
  oldState = state;
   d4e20:	782b      	ldrb	r3, [r5, #0]
   d4e22:	7023      	strb	r3, [r4, #0]
   d4e24:	f001 f9da 	bl	d61dc <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4e28:	b170      	cbz	r0, d4e48 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d4e2a:	f7ff fc65 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d4e2e:	4b0e      	ldr	r3, [pc, #56]	; (d4e68 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4e30:	490e      	ldr	r1, [pc, #56]	; (d4e6c <_Z22publishStateTransitionv+0x70>)
   d4e32:	781b      	ldrb	r3, [r3, #0]
   d4e34:	2200      	movs	r2, #0
   d4e36:	f88d 2000 	strb.w	r2, [sp]
   d4e3a:	a802      	add	r0, sp, #8
   d4e3c:	aa04      	add	r2, sp, #16
   d4e3e:	f7ff f997 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4e42:	a803      	add	r0, sp, #12
   d4e44:	f7ff fc90 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d4e48:	f002 fdbe 	bl	d79c8 <_Z16_fetch_usbserialv>
   d4e4c:	a904      	add	r1, sp, #16
   d4e4e:	f002 fa0a 	bl	d7266 <_ZN5Print7printlnEPKc>
}
   d4e52:	b00f      	add	sp, #60	; 0x3c
   d4e54:	bd30      	pop	{r4, r5, pc}
   d4e56:	bf00      	nop
   d4e58:	2003e1d2 	.word	0x2003e1d2
   d4e5c:	2003e1c0 	.word	0x2003e1c0
   d4e60:	2003e058 	.word	0x2003e058
   d4e64:	000d98ec 	.word	0x000d98ec
   d4e68:	2003e1ac 	.word	0x2003e1ac
   d4e6c:	000d98fa 	.word	0x000d98fa

000d4e70 <loop>:

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d4e74:	4c86      	ldr	r4, [pc, #536]	; (d5090 <loop+0x220>)
   d4e76:	7823      	ldrb	r3, [r4, #0]
   d4e78:	3b01      	subs	r3, #1

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4e7a:	b08d      	sub	sp, #52	; 0x34
  switch(state) {
   d4e7c:	2b07      	cmp	r3, #7
   d4e7e:	f200 82bd 	bhi.w	d53fc <loop+0x58c>
   d4e82:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4e86:	0224      	.short	0x0224
   d4e88:	004e0008 	.word	0x004e0008
   d4e8c:	00ac007f 	.word	0x00ac007f
   d4e90:	013300d2 	.word	0x013300d2
   d4e94:	01e3      	.short	0x01e3
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4e96:	4d7f      	ldr	r5, [pc, #508]	; (d5094 <loop+0x224>)
   d4e98:	792b      	ldrb	r3, [r5, #4]
   d4e9a:	b12b      	cbz	r3, d4ea8 <loop+0x38>
   d4e9c:	4b7e      	ldr	r3, [pc, #504]	; (d5098 <loop+0x228>)
   d4e9e:	781b      	ldrb	r3, [r3, #0]
   d4ea0:	2b02      	cmp	r3, #2
   d4ea2:	d001      	beq.n	d4ea8 <loop+0x38>
   d4ea4:	f7ff ffaa 	bl	d4dfc <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d4ea8:	4e7c      	ldr	r6, [pc, #496]	; (d509c <loop+0x22c>)
   d4eaa:	7833      	ldrb	r3, [r6, #0]
   d4eac:	b143      	cbz	r3, d4ec0 <loop+0x50>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d4eae:	f002 fec7 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4eb2:	2220      	movs	r2, #32
   d4eb4:	4977      	ldr	r1, [pc, #476]	; (d5094 <loop+0x224>)
   d4eb6:	2001      	movs	r0, #1
   d4eb8:	f000 ff8c 	bl	d5dd4 <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d4ebc:	2300      	movs	r3, #0
   d4ebe:	7033      	strb	r3, [r6, #0]
    }
    if (currentStatusWriteNeeded) {
   d4ec0:	4e77      	ldr	r6, [pc, #476]	; (d50a0 <loop+0x230>)
   d4ec2:	7833      	ldrb	r3, [r6, #0]
   d4ec4:	b143      	cbz	r3, d4ed8 <loop+0x68>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d4ec6:	f002 febb 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
   d4eca:	2224      	movs	r2, #36	; 0x24
   d4ecc:	4975      	ldr	r1, [pc, #468]	; (d50a4 <loop+0x234>)
   d4ece:	2050      	movs	r0, #80	; 0x50
   d4ed0:	f000 ff80 	bl	d5dd4 <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	7033      	strb	r3, [r6, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d4ed8:	79ab      	ldrb	r3, [r5, #6]
   d4eda:	b163      	cbz	r3, d4ef6 <loop+0x86>
   d4edc:	f000 ff52 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
   d4ee0:	4b71      	ldr	r3, [pc, #452]	; (d50a8 <loop+0x238>)
   d4ee2:	681b      	ldr	r3, [r3, #0]
   d4ee4:	1ac0      	subs	r0, r0, r3
   d4ee6:	4b71      	ldr	r3, [pc, #452]	; (d50ac <loop+0x23c>)
   d4ee8:	4298      	cmp	r0, r3
   d4eea:	d904      	bls.n	d4ef6 <loop+0x86>
   d4eec:	4b6d      	ldr	r3, [pc, #436]	; (d50a4 <loop+0x234>)
   d4eee:	68db      	ldr	r3, [r3, #12]
   d4ef0:	2b00      	cmp	r3, #0
   d4ef2:	f000 827b 	beq.w	d53ec <loop+0x57c>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d4ef6:	f002 fc69 	bl	d77cc <_ZN9TimeClass4hourEv>
   d4efa:	4b6d      	ldr	r3, [pc, #436]	; (d50b0 <loop+0x240>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d4efc:	68aa      	ldr	r2, [r5, #8]
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d4efe:	781b      	ldrb	r3, [r3, #0]
   d4f00:	4298      	cmp	r0, r3
   d4f02:	bf1c      	itt	ne
   d4f04:	2303      	movne	r3, #3
   d4f06:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d4f08:	4b6a      	ldr	r3, [pc, #424]	; (d50b4 <loop+0x244>)
   d4f0a:	681b      	ldr	r3, [r3, #0]
   d4f0c:	429a      	cmp	r2, r3
   d4f0e:	bfdc      	itt	le
   d4f10:	2308      	movle	r3, #8
   d4f12:	7023      	strble	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                 // Most important - turn off water when done!
   d4f14:	4b68      	ldr	r3, [pc, #416]	; (d50b8 <loop+0x248>)
   d4f16:	781b      	ldrb	r3, [r3, #0]
   d4f18:	2b00      	cmp	r3, #0
   d4f1a:	f000 826f 	beq.w	d53fc <loop+0x58c>
   d4f1e:	2304      	movs	r3, #4
   d4f20:	e02e      	b.n	d4f80 <loop+0x110>
    break;

  case MEASURING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f22:	4d5c      	ldr	r5, [pc, #368]	; (d5094 <loop+0x224>)
   d4f24:	792b      	ldrb	r3, [r5, #4]
   d4f26:	b12b      	cbz	r3, d4f34 <loop+0xc4>
   d4f28:	4b5b      	ldr	r3, [pc, #364]	; (d5098 <loop+0x228>)
   d4f2a:	781b      	ldrb	r3, [r3, #0]
   d4f2c:	2b03      	cmp	r3, #3
   d4f2e:	d001      	beq.n	d4f34 <loop+0xc4>
   d4f30:	f7ff ff64 	bl	d4dfc <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4f34:	f7ff fa64 	bl	d4400 <_Z16takeMeasurementsv>
   d4f38:	4606      	mov	r6, r0
   d4f3a:	b9e8      	cbnz	r0, d4f78 <loop+0x108>
    {
      state = ERROR_STATE;
   d4f3c:	2301      	movs	r3, #1
   d4f3e:	7023      	strb	r3, [r4, #0]
   d4f40:	f000 ff20 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4f44:	4b5d      	ldr	r3, [pc, #372]	; (d50bc <loop+0x24c>)
   d4f46:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d4f48:	792b      	ldrb	r3, [r5, #4]
   d4f4a:	2b00      	cmp	r3, #0
   d4f4c:	f000 8256 	beq.w	d53fc <loop+0x58c>
   d4f50:	f001 f944 	bl	d61dc <spark_cloud_flag_connected>
   d4f54:	2800      	cmp	r0, #0
   d4f56:	f000 8251 	beq.w	d53fc <loop+0x58c>
        waitUntil(meterParticlePublish);
   d4f5a:	f7ff fbcd 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d4f5e:	4b58      	ldr	r3, [pc, #352]	; (d50c0 <loop+0x250>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4f60:	4a58      	ldr	r2, [pc, #352]	; (d50c4 <loop+0x254>)
   d4f62:	781b      	ldrb	r3, [r3, #0]
   d4f64:	4958      	ldr	r1, [pc, #352]	; (d50c8 <loop+0x258>)
   d4f66:	f88d 6000 	strb.w	r6, [sp]
   d4f6a:	a808      	add	r0, sp, #32
   d4f6c:	f7ff f900 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d4f70:	a809      	add	r0, sp, #36	; 0x24
   d4f72:	f7ff fbf9 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f76:	e241      	b.n	d53fc <loop+0x58c>
      }
    }
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d4f78:	7c6b      	ldrb	r3, [r5, #17]
   d4f7a:	2b00      	cmp	r3, #0
   d4f7c:	d1cf      	bne.n	d4f1e <loop+0xae>
    else state = REPORTING_STATE;
   d4f7e:	2305      	movs	r3, #5
   d4f80:	7023      	strb	r3, [r4, #0]
   d4f82:	e23b      	b.n	d53fc <loop+0x58c>
    break;

  case WATERING_STATE:                                                    // This state will examing soil values and decide on watering
    if (wateringTimerFlag) {
   d4f84:	4d4c      	ldr	r5, [pc, #304]	; (d50b8 <loop+0x248>)
   d4f86:	782b      	ldrb	r3, [r5, #0]
   d4f88:	b163      	cbz	r3, d4fa4 <loop+0x134>
      controlValve("Off");
   d4f8a:	4950      	ldr	r1, [pc, #320]	; (d50cc <loop+0x25c>)
   d4f8c:	a808      	add	r0, sp, #32
   d4f8e:	f002 fa09 	bl	d73a4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f92:	a808      	add	r0, sp, #32
   d4f94:	f7ff fed2 	bl	d4d3c <_Z12controlValve6String>
   d4f98:	a808      	add	r0, sp, #32
   d4f9a:	f002 f9bc 	bl	d7316 <_ZN6StringD1Ev>
      wateringTimerFlag = false;
   d4f9e:	2300      	movs	r3, #0
   d4fa0:	702b      	strb	r3, [r5, #0]
   d4fa2:	e7ec      	b.n	d4f7e <loop+0x10e>
    }
    else if (current.soilMoisture1 < 30.0 && !current.solenoidState) {  // Water if dry and if we are not already watering
   d4fa4:	4d3f      	ldr	r5, [pc, #252]	; (d50a4 <loop+0x234>)
   d4fa6:	6828      	ldr	r0, [r5, #0]
   d4fa8:	f003 f9bc 	bl	d8324 <__aeabi_i2d>
   d4fac:	2200      	movs	r2, #0
   d4fae:	4b48      	ldr	r3, [pc, #288]	; (d50d0 <loop+0x260>)
   d4fb0:	f003 fc90 	bl	d88d4 <__aeabi_dcmplt>
   d4fb4:	2800      	cmp	r0, #0
   d4fb6:	d0e2      	beq.n	d4f7e <loop+0x10e>
   d4fb8:	68eb      	ldr	r3, [r5, #12]
   d4fba:	2b00      	cmp	r3, #0
   d4fbc:	d1df      	bne.n	d4f7e <loop+0x10e>
      controlValve("On");
   d4fbe:	4945      	ldr	r1, [pc, #276]	; (d50d4 <loop+0x264>)
   d4fc0:	a808      	add	r0, sp, #32
   d4fc2:	f002 f9ef 	bl	d73a4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fc6:	a808      	add	r0, sp, #32
   d4fc8:	f7ff feb8 	bl	d4d3c <_Z12controlValve6String>
   d4fcc:	a808      	add	r0, sp, #32
   d4fce:	f002 f9a2 	bl	d7316 <_ZN6StringD1Ev>
      wateringTimer.start();                                                    // Start the timer to keep track of the watering time
   d4fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4fd6:	4840      	ldr	r0, [pc, #256]	; (d50d8 <loop+0x268>)
   d4fd8:	f7ff f99c 	bl	d4314 <_ZN5Timer5startEj>
   d4fdc:	e7cf      	b.n	d4f7e <loop+0x10e>
    }
    state = REPORTING_STATE;
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fde:	4d2d      	ldr	r5, [pc, #180]	; (d5094 <loop+0x224>)
   d4fe0:	792b      	ldrb	r3, [r5, #4]
   d4fe2:	b12b      	cbz	r3, d4ff0 <loop+0x180>
   d4fe4:	4b2c      	ldr	r3, [pc, #176]	; (d5098 <loop+0x228>)
   d4fe6:	781b      	ldrb	r3, [r3, #0]
   d4fe8:	2b05      	cmp	r3, #5
   d4fea:	d001      	beq.n	d4ff0 <loop+0x180>
   d4fec:	f7ff ff06 	bl	d4dfc <_Z22publishStateTransitionv>
   d4ff0:	f001 f8f4 	bl	d61dc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4ff4:	b190      	cbz	r0, d501c <loop+0x1ac>
      if (Time.hour() == 0) {
   d4ff6:	f002 fbe9 	bl	d77cc <_ZN9TimeClass4hourEv>
   d4ffa:	4606      	mov	r6, r0
   d4ffc:	b950      	cbnz	r0, d5014 <loop+0x1a4>
        sysStatus.verboseMode = false;                                    // Turn off Verbose mode
   d4ffe:	7128      	strb	r0, [r5, #4]
   d5000:	f001 f8ec 	bl	d61dc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5004:	b110      	cbz	r0, d500c <loop+0x19c>
            return false;
        }
        return spark_sync_time(NULL);
   d5006:	4630      	mov	r0, r6
   d5008:	f001 f908 	bl	d621c <spark_sync_time>
        Particle.syncTime();                                              // Set the clock each day
        current.alertCount = sysStatus.resetCount = 0;                    // Reset these each day as well
   d500c:	4a25      	ldr	r2, [pc, #148]	; (d50a4 <loop+0x234>)
   d500e:	2300      	movs	r3, #0
   d5010:	61ab      	str	r3, [r5, #24]
   d5012:	6213      	str	r3, [r2, #32]
      }
      sendEvent();                                                        // Send data to Ubidots
   d5014:	f7ff fbbe 	bl	d4794 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d5018:	2306      	movs	r3, #6
   d501a:	e7b1      	b.n	d4f80 <loop+0x110>
    }
    else if (!connectToParticle()) state = ERROR_STATE;                   // In case we timed out on our 1st attempt to connect
   d501c:	f7ff faba 	bl	d4594 <_Z17connectToParticlev>
   d5020:	2800      	cmp	r0, #0
   d5022:	f040 81eb 	bne.w	d53fc <loop+0x58c>
   d5026:	2301      	movs	r3, #1
   d5028:	e7aa      	b.n	d4f80 <loop+0x110>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d502a:	4b1a      	ldr	r3, [pc, #104]	; (d5094 <loop+0x224>)
   d502c:	791b      	ldrb	r3, [r3, #4]
   d502e:	b12b      	cbz	r3, d503c <loop+0x1cc>
   d5030:	4b19      	ldr	r3, [pc, #100]	; (d5098 <loop+0x228>)
   d5032:	781b      	ldrb	r3, [r3, #0]
   d5034:	2b06      	cmp	r3, #6
   d5036:	d001      	beq.n	d503c <loop+0x1cc>
   d5038:	f7ff fee0 	bl	d4dfc <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d503c:	4b27      	ldr	r3, [pc, #156]	; (d50dc <loop+0x26c>)
   d503e:	781b      	ldrb	r3, [r3, #0]
   d5040:	b92b      	cbnz	r3, d504e <loop+0x1de>
   d5042:	f000 fe9f 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d5046:	4b18      	ldr	r3, [pc, #96]	; (d50a8 <loop+0x238>)
   d5048:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d504a:	2302      	movs	r3, #2
   d504c:	e798      	b.n	d4f80 <loop+0x110>
   d504e:	f000 fe99 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5052:	4b23      	ldr	r3, [pc, #140]	; (d50e0 <loop+0x270>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	1ac0      	subs	r0, r0, r3
   d5058:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d505c:	4298      	cmp	r0, r3
   d505e:	f240 81cd 	bls.w	d53fc <loop+0x58c>
   d5062:	f000 fe8f 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5066:	4b15      	ldr	r3, [pc, #84]	; (d50bc <loop+0x24c>)
   d5068:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d506a:	f001 f8b7 	bl	d61dc <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d506e:	2800      	cmp	r0, #0
   d5070:	d0d9      	beq.n	d5026 <loop+0x1b6>
   d5072:	4b13      	ldr	r3, [pc, #76]	; (d50c0 <loop+0x250>)
   d5074:	491b      	ldr	r1, [pc, #108]	; (d50e4 <loop+0x274>)
   d5076:	781b      	ldrb	r3, [r3, #0]
   d5078:	2200      	movs	r2, #0
   d507a:	f88d 2000 	strb.w	r2, [sp]
   d507e:	a808      	add	r0, sp, #32
   d5080:	4a19      	ldr	r2, [pc, #100]	; (d50e8 <loop+0x278>)
   d5082:	f7ff f875 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d5086:	a809      	add	r0, sp, #36	; 0x24
   d5088:	f7ff fb6e 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d508c:	e7cb      	b.n	d5026 <loop+0x1b6>
   d508e:	bf00      	nop
   d5090:	2003e1d2 	.word	0x2003e1d2
   d5094:	2003e30c 	.word	0x2003e30c
   d5098:	2003e1c0 	.word	0x2003e1c0
   d509c:	2003e1d1 	.word	0x2003e1d1
   d50a0:	2003e20c 	.word	0x2003e20c
   d50a4:	2003e2c0 	.word	0x2003e2c0
   d50a8:	2003e26c 	.word	0x2003e26c
   d50ac:	00015f90 	.word	0x00015f90
   d50b0:	2003e231 	.word	0x2003e231
   d50b4:	2003e1a4 	.word	0x2003e1a4
   d50b8:	2003e230 	.word	0x2003e230
   d50bc:	2003e2b4 	.word	0x2003e2b4
   d50c0:	2003e1ac 	.word	0x2003e1ac
   d50c4:	000d999b 	.word	0x000d999b
   d50c8:	000d9931 	.word	0x000d9931
   d50cc:	000d98c0 	.word	0x000d98c0
   d50d0:	403e0000 	.word	0x403e0000
   d50d4:	000d98bd 	.word	0x000d98bd
   d50d8:	2003e1f0 	.word	0x2003e1f0
   d50dc:	2003e0d6 	.word	0x2003e0d6
   d50e0:	2003e1a8 	.word	0x2003e1a8
   d50e4:	000d990b 	.word	0x000d990b
   d50e8:	000d9656 	.word	0x000d9656
      state = ERROR_STATE;                                            // Response timed out
    }
    break;

  case NAPPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50ec:	4ba2      	ldr	r3, [pc, #648]	; (d5378 <loop+0x508>)
   d50ee:	791a      	ldrb	r2, [r3, #4]
   d50f0:	461d      	mov	r5, r3
   d50f2:	b12a      	cbz	r2, d5100 <loop+0x290>
   d50f4:	4ba1      	ldr	r3, [pc, #644]	; (d537c <loop+0x50c>)
   d50f6:	781b      	ldrb	r3, [r3, #0]
   d50f8:	2b07      	cmp	r3, #7
   d50fa:	d001      	beq.n	d5100 <loop+0x290>
   d50fc:	f7ff fe7e 	bl	d4dfc <_Z22publishStateTransitionv>
   d5100:	f001 f86c 	bl	d61dc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5104:	b1b0      	cbz	r0, d5134 <loop+0x2c4>
      if (sysStatus.verboseMode) {
   d5106:	792b      	ldrb	r3, [r5, #4]
   d5108:	b173      	cbz	r3, d5128 <loop+0x2b8>
        waitUntil(meterParticlePublish);
   d510a:	f7ff faf5 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d510e:	4b9c      	ldr	r3, [pc, #624]	; (d5380 <loop+0x510>)
        Particle.publish("State","Taking a Nap",PRIVATE);
   d5110:	499c      	ldr	r1, [pc, #624]	; (d5384 <loop+0x514>)
   d5112:	781b      	ldrb	r3, [r3, #0]
   d5114:	2200      	movs	r2, #0
   d5116:	f88d 2000 	strb.w	r2, [sp]
   d511a:	a808      	add	r0, sp, #32
   d511c:	4a9a      	ldr	r2, [pc, #616]	; (d5388 <loop+0x518>)
   d511e:	f7ff f827 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d5122:	a809      	add	r0, sp, #36	; 0x24
   d5124:	f7ff fb20 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d5128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d512c:	f001 f922 	bl	d6374 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d5130:	f7ff fa74 	bl	d461c <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5134:	2100      	movs	r1, #0
   d5136:	2007      	movs	r0, #7
   d5138:	f002 fd3f 	bl	d7bba <digitalWrite>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d513c:	4d93      	ldr	r5, [pc, #588]	; (d538c <loop+0x51c>)
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d513e:	2100      	movs	r1, #0
   d5140:	200e      	movs	r0, #14
   d5142:	f002 fd3a 	bl	d7bba <digitalWrite>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5146:	f002 fb4b 	bl	d77e0 <_ZN9TimeClass6minuteEv>
   d514a:	7d2b      	ldrb	r3, [r5, #20]
   d514c:	4680      	mov	r8, r0
   d514e:	b343      	cbz	r3, d51a2 <loop+0x332>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5150:	2101      	movs	r1, #1
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d5152:	4628      	mov	r0, r5
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5154:	7229      	strb	r1, [r5, #8]
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d5156:	f7ff f853 	bl	d4200 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d515a:	b158      	cbz	r0, d5174 <loop+0x304>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d515c:	8983      	ldrh	r3, [r0, #12]
   d515e:	2b04      	cmp	r3, #4
   d5160:	d105      	bne.n	d516e <loop+0x2fe>
                    gpioWakeup->mode = mode;
   d5162:	2300      	movs	r3, #0
   d5164:	7383      	strb	r3, [r0, #14]
   d5166:	e01c      	b.n	d51a2 <loop+0x332>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d5168:	8883      	ldrh	r3, [r0, #4]
   d516a:	2b01      	cmp	r3, #1
   d516c:	d0f5      	beq.n	d515a <loop+0x2ea>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d516e:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d5170:	2800      	cmp	r0, #0
   d5172:	d1f9      	bne.n	d5168 <loop+0x2f8>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d5174:	4986      	ldr	r1, [pc, #536]	; (d5390 <loop+0x520>)
   d5176:	2010      	movs	r0, #16
   d5178:	f002 fe26 	bl	d7dc8 <_ZnwjRKSt9nothrow_t>
   d517c:	4606      	mov	r6, r0
   d517e:	2800      	cmp	r0, #0
   d5180:	f000 8137 	beq.w	d53f2 <loop+0x582>
   d5184:	2710      	movs	r7, #16
   d5186:	463a      	mov	r2, r7
   d5188:	2100      	movs	r1, #0
   d518a:	f003 fd30 	bl	d8bee <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d518e:	2302      	movs	r3, #2
   d5190:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d5192:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d5194:	8037      	strh	r7, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d5196:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d5198:	692b      	ldr	r3, [r5, #16]
   d519a:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   d519c:	2304      	movs	r3, #4
   d519e:	81b3      	strh	r3, [r6, #12]
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d51a0:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d51a2:	7d2b      	ldrb	r3, [r5, #20]
   d51a4:	f8df 91e4 	ldr.w	r9, [pc, #484]	; d538c <loop+0x51c>
   d51a8:	b33b      	cbz	r3, d51fa <loop+0x38a>
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d51aa:	f64e 2360 	movw	r3, #60000	; 0xea60
   d51ae:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d51b2:	2104      	movs	r1, #4
   d51b4:	4648      	mov	r0, r9
   d51b6:	fb08 f803 	mul.w	r8, r8, r3
   d51ba:	f7ff f821 	bl	d4200 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d51be:	4606      	mov	r6, r0
   d51c0:	b110      	cbz	r0, d51c8 <loop+0x358>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d51c2:	f8c0 800c 	str.w	r8, [r0, #12]
   d51c6:	e018      	b.n	d51fa <loop+0x38a>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d51c8:	4971      	ldr	r1, [pc, #452]	; (d5390 <loop+0x520>)
   d51ca:	2010      	movs	r0, #16
   d51cc:	f002 fdfc 	bl	d7dc8 <_ZnwjRKSt9nothrow_t>
   d51d0:	4605      	mov	r5, r0
   d51d2:	2800      	cmp	r0, #0
   d51d4:	f000 810f 	beq.w	d53f6 <loop+0x586>
   d51d8:	2710      	movs	r7, #16
   d51da:	463a      	mov	r2, r7
   d51dc:	4631      	mov	r1, r6
   d51de:	f003 fd06 	bl	d8bee <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d51e2:	2302      	movs	r3, #2
   d51e4:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d51e6:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d51e8:	802f      	strh	r7, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d51ea:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d51ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d51f0:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d51f2:	f8c5 800c 	str.w	r8, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d51f6:	f8c9 5010 	str.w	r5, [r9, #16]
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d51fa:	4964      	ldr	r1, [pc, #400]	; (d538c <loop+0x51c>)
   d51fc:	a805      	add	r0, sp, #20
   d51fe:	f002 f985 	bl	d750c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d5202:	9b05      	ldr	r3, [sp, #20]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d5204:	b17b      	cbz	r3, d5226 <loop+0x3b6>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5206:	889a      	ldrh	r2, [r3, #4]
   d5208:	2a01      	cmp	r2, #1
   d520a:	d10c      	bne.n	d5226 <loop+0x3b6>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d520c:	899b      	ldrh	r3, [r3, #12]
   d520e:	2b04      	cmp	r3, #4
   d5210:	d109      	bne.n	d5226 <loop+0x3b6>
   d5212:	4960      	ldr	r1, [pc, #384]	; (d5394 <loop+0x524>)
   d5214:	a808      	add	r0, sp, #32
   d5216:	f002 f8c5 	bl	d73a4 <_ZN6StringC1EPK19__FlashStringHelper>
   d521a:	a808      	add	r0, sp, #32
   d521c:	f7ff fd1e 	bl	d4c5c <_Z15setLowPowerMode6String>
   d5220:	a808      	add	r0, sp, #32
   d5222:	f002 f878 	bl	d7316 <_ZN6StringD1Ev>
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d5226:	2101      	movs	r1, #1
   d5228:	2007      	movs	r0, #7
   d522a:	f002 fcc6 	bl	d7bba <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d522e:	2101      	movs	r1, #1
   d5230:	200e      	movs	r0, #14
   d5232:	f002 fcc2 	bl	d7bba <digitalWrite>
    connectToParticle();                                                // Wakey Wakey and get connected.
   d5236:	f7ff f9ad 	bl	d4594 <_Z17connectToParticlev>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d523a:	9805      	ldr	r0, [sp, #20]
    state = IDLE_STATE;                                                 // Awake now, we need to go back to the IDLE state for next tasking
   d523c:	2302      	movs	r3, #2
   d523e:	7023      	strb	r3, [r4, #0]
   d5240:	2800      	cmp	r0, #0
   d5242:	f000 80db 	beq.w	d53fc <loop+0x58c>
            free(wakeupSource_);
   d5246:	f001 f859 	bl	d62fc <free>
    } break;
   d524a:	e0d7      	b.n	d53fc <loop+0x58c>

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d524c:	4b4a      	ldr	r3, [pc, #296]	; (d5378 <loop+0x508>)
   d524e:	791a      	ldrb	r2, [r3, #4]
   d5250:	461d      	mov	r5, r3
   d5252:	b12a      	cbz	r2, d5260 <loop+0x3f0>
   d5254:	4b49      	ldr	r3, [pc, #292]	; (d537c <loop+0x50c>)
   d5256:	781b      	ldrb	r3, [r3, #0]
   d5258:	2b08      	cmp	r3, #8
   d525a:	d001      	beq.n	d5260 <loop+0x3f0>
   d525c:	f7ff fdce 	bl	d4dfc <_Z22publishStateTransitionv>
   d5260:	f000 ffbc 	bl	d61dc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5264:	b1b0      	cbz	r0, d5294 <loop+0x424>
      if (sysStatus.verboseMode) {
   d5266:	792b      	ldrb	r3, [r5, #4]
   d5268:	b173      	cbz	r3, d5288 <loop+0x418>
        waitUntil(meterParticlePublish);
   d526a:	f7ff fa45 	bl	d46f8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.55>
   d526e:	4b44      	ldr	r3, [pc, #272]	; (d5380 <loop+0x510>)
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d5270:	4944      	ldr	r1, [pc, #272]	; (d5384 <loop+0x514>)
   d5272:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5274:	2200      	movs	r2, #0
   d5276:	f88d 2000 	strb.w	r2, [sp]
   d527a:	a808      	add	r0, sp, #32
   d527c:	4a46      	ldr	r2, [pc, #280]	; (d5398 <loop+0x528>)
   d527e:	f7fe ff77 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d5282:	a809      	add	r0, sp, #36	; 0x24
   d5284:	f7ff fa70 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d5288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d528c:	f001 f872 	bl	d6374 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d5290:	f7ff f9c4 	bl	d461c <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5294:	2100      	movs	r1, #0
   d5296:	2007      	movs	r0, #7
   d5298:	f002 fc8f 	bl	d7bba <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
   d529c:	f002 faa0 	bl	d77e0 <_ZN9TimeClass6minuteEv>
   d52a0:	4b3e      	ldr	r3, [pc, #248]	; (d539c <loop+0x52c>)
   d52a2:	681a      	ldr	r2, [r3, #0]
   d52a4:	2304      	movs	r3, #4
   d52a6:	f8ad 3014 	strh.w	r3, [sp, #20]
   d52aa:	ab0c      	add	r3, sp, #48	; 0x30
   d52ac:	2502      	movs	r5, #2
   d52ae:	f803 5d1d 	strb.w	r5, [r3, #-29]!
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d52b2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d52b6:	9202      	str	r2, [sp, #8]
   d52b8:	223c      	movs	r2, #60	; 0x3c
   d52ba:	4350      	muls	r0, r2
   d52bc:	2201      	movs	r2, #1
   d52be:	9001      	str	r0, [sp, #4]
   d52c0:	9200      	str	r2, [sp, #0]
   d52c2:	a905      	add	r1, sp, #20
   d52c4:	a808      	add	r0, sp, #32
   d52c6:	f002 f9c7 	bl	d7658 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch,FALLING,secondsToHour);                     // Very deep sleep till the next hour - then resets
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d52ca:	7025      	strb	r5, [r4, #0]
    } break;
   d52cc:	e096      	b.n	d53fc <loop+0x58c>

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52ce:	4b2a      	ldr	r3, [pc, #168]	; (d5378 <loop+0x508>)
   d52d0:	791a      	ldrb	r2, [r3, #4]
   d52d2:	461c      	mov	r4, r3
   d52d4:	b12a      	cbz	r2, d52e2 <loop+0x472>
   d52d6:	4b29      	ldr	r3, [pc, #164]	; (d537c <loop+0x50c>)
   d52d8:	781b      	ldrb	r3, [r3, #0]
   d52da:	2b01      	cmp	r3, #1
   d52dc:	d001      	beq.n	d52e2 <loop+0x472>
   d52de:	f7ff fd8d 	bl	d4dfc <_Z22publishStateTransitionv>
   d52e2:	f000 fd4f 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d52e6:	4b2e      	ldr	r3, [pc, #184]	; (d53a0 <loop+0x530>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d52ee:	3330      	adds	r3, #48	; 0x30
   d52f0:	4298      	cmp	r0, r3
   d52f2:	f240 8083 	bls.w	d53fc <loop+0x58c>
    {
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d52f6:	69a3      	ldr	r3, [r4, #24]
   d52f8:	2b03      	cmp	r3, #3
   d52fa:	dc14      	bgt.n	d5326 <loop+0x4b6>
   d52fc:	f000 ff6e 	bl	d61dc <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5300:	b160      	cbz	r0, d531c <loop+0x4ac>
   d5302:	4b1f      	ldr	r3, [pc, #124]	; (d5380 <loop+0x510>)
   d5304:	491f      	ldr	r1, [pc, #124]	; (d5384 <loop+0x514>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5306:	781b      	ldrb	r3, [r3, #0]
   d5308:	2200      	movs	r2, #0
   d530a:	f88d 2000 	strb.w	r2, [sp]
   d530e:	a808      	add	r0, sp, #32
   d5310:	4a24      	ldr	r2, [pc, #144]	; (d53a4 <loop+0x534>)
   d5312:	f7fe ff2d 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d5316:	a809      	add	r0, sp, #36	; 0x24
   d5318:	f7ff fa26 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d531c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5320:	f001 f828 	bl	d6374 <delay>
   d5324:	e024      	b.n	d5370 <loop+0x500>
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5326:	f002 fa49 	bl	d77bc <_ZN9TimeClass3nowEv>
   d532a:	4b13      	ldr	r3, [pc, #76]	; (d5378 <loop+0x508>)
   d532c:	69db      	ldr	r3, [r3, #28]
   d532e:	1ac0      	subs	r0, r0, r3
   d5330:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5334:	d93a      	bls.n	d53ac <loop+0x53c>
   d5336:	f000 ff51 	bl	d61dc <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d533a:	b160      	cbz	r0, d5356 <loop+0x4e6>
   d533c:	4b10      	ldr	r3, [pc, #64]	; (d5380 <loop+0x510>)
   d533e:	4911      	ldr	r1, [pc, #68]	; (d5384 <loop+0x514>)
   d5340:	781b      	ldrb	r3, [r3, #0]
   d5342:	2200      	movs	r2, #0
   d5344:	f88d 2000 	strb.w	r2, [sp]
   d5348:	a808      	add	r0, sp, #32
   d534a:	4a17      	ldr	r2, [pc, #92]	; (d53a8 <loop+0x538>)
   d534c:	f7fe ff10 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d5350:	a809      	add	r0, sp, #36	; 0x24
   d5352:	f7ff fa09 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5356:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d535a:	f001 f80b 	bl	d6374 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d535e:	2300      	movs	r3, #0
   d5360:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5362:	f002 fc6d 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
   d5366:	2220      	movs	r2, #32
   d5368:	4903      	ldr	r1, [pc, #12]	; (d5378 <loop+0x508>)
   d536a:	2001      	movs	r0, #1
   d536c:	f000 fd32 	bl	d5dd4 <HAL_EEPROM_Put>
        System.reset();
   d5370:	f002 f8c9 	bl	d7506 <_ZN11SystemClass5resetEv>
   d5374:	e042      	b.n	d53fc <loop+0x58c>
   d5376:	bf00      	nop
   d5378:	2003e30c 	.word	0x2003e30c
   d537c:	2003e1c0 	.word	0x2003e1c0
   d5380:	2003e1ac 	.word	0x2003e1ac
   d5384:	000d9931 	.word	0x000d9931
   d5388:	000d9924 	.word	0x000d9924
   d538c:	2003e234 	.word	0x2003e234
   d5390:	000d9e40 	.word	0x000d9e40
   d5394:	000d979c 	.word	0x000d979c
   d5398:	000d9937 	.word	0x000d9937
   d539c:	2003e24c 	.word	0x2003e24c
   d53a0:	2003e2b4 	.word	0x2003e2b4
   d53a4:	000d994e 	.word	0x000d994e
   d53a8:	000d9962 	.word	0x000d9962
   d53ac:	f000 ff16 	bl	d61dc <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d53b0:	b160      	cbz	r0, d53cc <loop+0x55c>
   d53b2:	4b14      	ldr	r3, [pc, #80]	; (d5404 <loop+0x594>)
   d53b4:	4914      	ldr	r1, [pc, #80]	; (d5408 <loop+0x598>)
   d53b6:	781b      	ldrb	r3, [r3, #0]
   d53b8:	2200      	movs	r2, #0
   d53ba:	f88d 2000 	strb.w	r2, [sp]
   d53be:	a808      	add	r0, sp, #32
   d53c0:	4a12      	ldr	r2, [pc, #72]	; (d540c <loop+0x59c>)
   d53c2:	f7fe fed5 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d53c6:	a809      	add	r0, sp, #36	; 0x24
   d53c8:	f7ff f9ce 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d53cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d53d0:	f000 ffd0 	bl	d6374 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d53d4:	2300      	movs	r3, #0
   d53d6:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d53d8:	f002 fc32 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
   d53dc:	2220      	movs	r2, #32
   d53de:	490c      	ldr	r1, [pc, #48]	; (d5410 <loop+0x5a0>)
   d53e0:	2001      	movs	r0, #1
   d53e2:	f000 fcf7 	bl	d5dd4 <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d53e6:	f7ff f993 	bl	d4710 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d53ea:	e007      	b.n	d53fc <loop+0x58c>
    }
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d53ec:	2307      	movs	r3, #7
   d53ee:	7023      	strb	r3, [r4, #0]
   d53f0:	e581      	b.n	d4ef6 <loop+0x86>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d53f2:	7528      	strb	r0, [r5, #20]
   d53f4:	e6d5      	b.n	d51a2 <loop+0x332>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d53f6:	f889 0014 	strb.w	r0, [r9, #20]
   d53fa:	e6fe      	b.n	d51fa <loop+0x38a>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d53fc:	b00d      	add	sp, #52	; 0x34
   d53fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5402:	bf00      	nop
   d5404:	2003e1ac 	.word	0x2003e1ac
   d5408:	000d9931 	.word	0x000d9931
   d540c:	000d997c 	.word	0x000d997c
   d5410:	2003e30c 	.word	0x2003e30c

000d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5414:	2300      	movs	r3, #0
   d5416:	2204      	movs	r2, #4
   d5418:	f000 beb8 	b.w	d618c <spark_variable>

000d541c <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>:
   d541c:	2300      	movs	r3, #0
   d541e:	2202      	movs	r2, #2
   d5420:	f000 beb4 	b.w	d618c <spark_variable>

000d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5424:	4602      	mov	r2, r0
   d5426:	4801      	ldr	r0, [pc, #4]	; (d542c <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5428:	f001 b972 	b.w	d6710 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d542c:	000d66e5 	.word	0x000d66e5

000d5430 <setup>:

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d5430:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5432:	4bab      	ldr	r3, [pc, #684]	; (d56e0 <setup+0x2b0>)

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d5434:	b0bb      	sub	sp, #236	; 0xec
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5436:	aa0a      	add	r2, sp, #40	; 0x28
   d5438:	f103 0510 	add.w	r5, r3, #16
   d543c:	4616      	mov	r6, r2
   d543e:	6818      	ldr	r0, [r3, #0]
   d5440:	6859      	ldr	r1, [r3, #4]
   d5442:	4614      	mov	r4, r2
   d5444:	c403      	stmia	r4!, {r0, r1}
   d5446:	3308      	adds	r3, #8
   d5448:	42ab      	cmp	r3, r5
   d544a:	4622      	mov	r2, r4
   d544c:	d1f7      	bne.n	d543e <setup+0xe>
   d544e:	8819      	ldrh	r1, [r3, #0]
   d5450:	789b      	ldrb	r3, [r3, #2]
   d5452:	8021      	strh	r1, [r4, #0]
   d5454:	70a3      	strb	r3, [r4, #2]
   d5456:	222d      	movs	r2, #45	; 0x2d
   d5458:	2100      	movs	r1, #0
   d545a:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = IDLE_STATE;
   d545e:	4fa1      	ldr	r7, [pc, #644]	; (d56e4 <setup+0x2b4>)
// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5460:	f003 fbc5 	bl	d8bee <memset>
  state = IDLE_STATE;
   d5464:	2302      	movs	r3, #2
   d5466:	703b      	strb	r3, [r7, #0]

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5468:	4b9f      	ldr	r3, [pc, #636]	; (d56e8 <setup+0x2b8>)
   d546a:	681b      	ldr	r3, [r3, #0]
   d546c:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   d5470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d5474:	f003 031f 	and.w	r3, r3, #31
   d5478:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d547c:	2d2f      	cmp	r5, #47	; 0x2f
   d547e:	dd05      	ble.n	d548c <setup+0x5c>
   d5480:	4a9a      	ldr	r2, [pc, #616]	; (d56ec <setup+0x2bc>)
   d5482:	2100      	movs	r1, #0
   d5484:	200a      	movs	r0, #10
   d5486:	f000 fdf5 	bl	d6074 <panic_>
   d548a:	e001      	b.n	d5490 <setup+0x60>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d548c:	2d1f      	cmp	r5, #31
   d548e:	dd03      	ble.n	d5498 <setup+0x68>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d5490:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
   d5494:	4b96      	ldr	r3, [pc, #600]	; (d56f0 <setup+0x2c0>)
   d5496:	e001      	b.n	d549c <setup+0x6c>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d5498:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d549c:	2401      	movs	r4, #1
   d549e:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d54a2:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508

  pinSetFast(solEnablePin);                                       // Make sure the Solenoid is off
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d54a6:	4621      	mov	r1, r4
   d54a8:	2007      	movs	r0, #7
   d54aa:	f002 fb75 	bl	d7b98 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d54ae:	2100      	movs	r1, #0
   d54b0:	2004      	movs	r0, #4
   d54b2:	f002 fb71 	bl	d7b98 <pinMode>
  pinMode(soilPin1, INPUT);
   d54b6:	2100      	movs	r1, #0
   d54b8:	2013      	movs	r0, #19
   d54ba:	f002 fb6d 	bl	d7b98 <pinMode>
  pinMode(soilPin2, INPUT);
   d54be:	2100      	movs	r1, #0
   d54c0:	2012      	movs	r0, #18
   d54c2:	f002 fb69 	bl	d7b98 <pinMode>
  pinMode(pressurePin, INPUT);
   d54c6:	2100      	movs	r1, #0
   d54c8:	2011      	movs	r0, #17
   d54ca:	f002 fb65 	bl	d7b98 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d54ce:	4621      	mov	r1, r4
   d54d0:	200e      	movs	r0, #14
   d54d2:	f002 fb61 	bl	d7b98 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d54d6:	4621      	mov	r1, r4
   d54d8:	200e      	movs	r0, #14
   d54da:	f002 fb6e 	bl	d7bba <digitalWrite>
  pinMode(solEnablePin,OUTPUT);
   d54de:	4621      	mov	r1, r4
   d54e0:	2003      	movs	r0, #3
   d54e2:	f002 fb59 	bl	d7b98 <pinMode>
  pinMode(solDirection,OUTPUT);
   d54e6:	4621      	mov	r1, r4
   d54e8:	2002      	movs	r0, #2
   d54ea:	f002 fb55 	bl	d7b98 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d54ee:	4621      	mov	r1, r4
   d54f0:	2003      	movs	r0, #3
   d54f2:	f002 fb62 	bl	d7bba <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d54f6:	2100      	movs	r1, #0
   d54f8:	2002      	movs	r0, #2
   d54fa:	f002 fb5e 	bl	d7bba <digitalWrite>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d54fe:	a802      	add	r0, sp, #8
   d5500:	f000 fe74 	bl	d61ec <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5504:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5506:	2300      	movs	r3, #0
   d5508:	227d      	movs	r2, #125	; 0x7d
   d550a:	a91a      	add	r1, sp, #104	; 0x68
   d550c:	a802      	add	r0, sp, #8
   d550e:	f001 ff88 	bl	d7422 <_ZNK6String8getBytesEPhjj>
   d5512:	462b      	mov	r3, r5
   d5514:	462a      	mov	r2, r5
   d5516:	4977      	ldr	r1, [pc, #476]	; (d56f4 <setup+0x2c4>)
   d5518:	9501      	str	r5, [sp, #4]
   d551a:	9500      	str	r5, [sp, #0]
   d551c:	a81a      	add	r0, sp, #104	; 0x68
   d551e:	f000 fe75 	bl	d620c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d5522:	4975      	ldr	r1, [pc, #468]	; (d56f8 <setup+0x2c8>)
   d5524:	4875      	ldr	r0, [pc, #468]	; (d56fc <setup+0x2cc>)
   d5526:	f7ff ff75 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d552a:	4975      	ldr	r1, [pc, #468]	; (d5700 <setup+0x2d0>)
   d552c:	4875      	ldr	r0, [pc, #468]	; (d5704 <setup+0x2d4>)
   d552e:	f7ff ff75 	bl	d541c <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",releaseNumber);
   d5532:	4975      	ldr	r1, [pc, #468]	; (d5708 <setup+0x2d8>)
   d5534:	4875      	ldr	r0, [pc, #468]	; (d570c <setup+0x2dc>)
   d5536:	f7ff ff6d 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("StateOfChg", batteryString);
   d553a:	4975      	ldr	r1, [pc, #468]	; (d5710 <setup+0x2e0>)
   d553c:	4875      	ldr	r0, [pc, #468]	; (d5714 <setup+0x2e4>)
   d553e:	f7ff ff69 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d5542:	4975      	ldr	r1, [pc, #468]	; (d5718 <setup+0x2e8>)
   d5544:	4875      	ldr	r0, [pc, #468]	; (d571c <setup+0x2ec>)
   d5546:	f7ff ff65 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("LowPowerMode",lowPowerModeStr);
   d554a:	4975      	ldr	r1, [pc, #468]	; (d5720 <setup+0x2f0>)
   d554c:	4875      	ldr	r0, [pc, #468]	; (d5724 <setup+0x2f4>)
   d554e:	f7ff ff61 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Temperature", temperatureString);
   d5552:	4975      	ldr	r1, [pc, #468]	; (d5728 <setup+0x2f8>)
   d5554:	4875      	ldr	r0, [pc, #468]	; (d572c <setup+0x2fc>)
   d5556:	f7ff ff5d 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Humidity", humidityString);
   d555a:	4975      	ldr	r1, [pc, #468]	; (d5730 <setup+0x300>)
   d555c:	4875      	ldr	r0, [pc, #468]	; (d5734 <setup+0x304>)
   d555e:	f7ff ff59 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Luminosity",lightLevelString);
   d5562:	4975      	ldr	r1, [pc, #468]	; (d5738 <setup+0x308>)
   d5564:	4875      	ldr	r0, [pc, #468]	; (d573c <setup+0x30c>)
   d5566:	f7ff ff55 	bl	d5414 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture1", current.soilMoisture1);
   d556a:	4975      	ldr	r1, [pc, #468]	; (d5740 <setup+0x310>)
   d556c:	4875      	ldr	r0, [pc, #468]	; (d5744 <setup+0x314>)
   d556e:	f7ff ff55 	bl	d541c <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture2", current.soilMoisture2);
   d5572:	4975      	ldr	r1, [pc, #468]	; (d5748 <setup+0x318>)
   d5574:	4875      	ldr	r0, [pc, #468]	; (d574c <setup+0x31c>)
   d5576:	f7ff ff51 	bl	d541c <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Pressure", current.pressure);
   d557a:	4975      	ldr	r1, [pc, #468]	; (d5750 <setup+0x320>)
   d557c:	4875      	ldr	r0, [pc, #468]	; (d5754 <setup+0x324>)
   d557e:	f7ff ff4d 	bl	d541c <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>

  Particle.function("Measure-Now",measureNow);
   d5582:	4975      	ldr	r1, [pc, #468]	; (d5758 <setup+0x328>)
   d5584:	4875      	ldr	r0, [pc, #468]	; (d575c <setup+0x32c>)
   d5586:	f7ff ff4d 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d558a:	4975      	ldr	r1, [pc, #468]	; (d5760 <setup+0x330>)
   d558c:	4865      	ldr	r0, [pc, #404]	; (d5724 <setup+0x2f4>)
   d558e:	f7ff ff49 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d5592:	4974      	ldr	r1, [pc, #464]	; (d5764 <setup+0x334>)
   d5594:	4874      	ldr	r0, [pc, #464]	; (d5768 <setup+0x338>)
   d5596:	f7ff ff45 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Watering",controlValve);
   d559a:	4974      	ldr	r1, [pc, #464]	; (d576c <setup+0x33c>)
   d559c:	4874      	ldr	r0, [pc, #464]	; (d5770 <setup+0x340>)
   d559e:	f7ff ff41 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSoilSensors",setSoilSensors);
   d55a2:	4974      	ldr	r1, [pc, #464]	; (d5774 <setup+0x344>)
   d55a4:	4874      	ldr	r0, [pc, #464]	; (d5778 <setup+0x348>)
   d55a6:	f7ff ff3d 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPressureSensor", setPressureSensor);
   d55aa:	4974      	ldr	r1, [pc, #464]	; (d577c <setup+0x34c>)
   d55ac:	4874      	ldr	r0, [pc, #464]	; (d5780 <setup+0x350>)
   d55ae:	f7ff ff39 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetLightSensor",setLightSensor);
   d55b2:	4974      	ldr	r1, [pc, #464]	; (d5784 <setup+0x354>)
   d55b4:	4874      	ldr	r0, [pc, #464]	; (d5788 <setup+0x358>)
   d55b6:	f7ff ff35 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SolenoidPresent",setSolenoidPresent);
   d55ba:	4974      	ldr	r1, [pc, #464]	; (d578c <setup+0x35c>)
   d55bc:	4874      	ldr	r0, [pc, #464]	; (d5790 <setup+0x360>)
   d55be:	f7ff ff31 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTempHumidSensor",setTempHumidSensor);
   d55c2:	4974      	ldr	r1, [pc, #464]	; (d5794 <setup+0x364>)
   d55c4:	4874      	ldr	r0, [pc, #464]	; (d5798 <setup+0x368>)
   d55c6:	f7ff ff2d 	bl	d5424 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d55ca:	f002 fb39 	bl	d7c40 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d55ce:	4628      	mov	r0, r5
   d55d0:	f000 fbf0 	bl	d5db4 <HAL_EEPROM_Read>
   d55d4:	2802      	cmp	r0, #2
   d55d6:	d115      	bne.n	d5604 <setup+0x1d4>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d55d8:	4c70      	ldr	r4, [pc, #448]	; (d579c <setup+0x36c>)
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d55da:	f002 fb31 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
   d55de:	2220      	movs	r2, #32
   d55e0:	4621      	mov	r1, r4
   d55e2:	2001      	movs	r0, #1
   d55e4:	f000 fbee 	bl	d5dc4 <HAL_EEPROM_Get>
  EEPROM.get(MEM_MAP::currentStatusAddr,current);
   d55e8:	f002 fb2a 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
   d55ec:	2224      	movs	r2, #36	; 0x24
   d55ee:	4954      	ldr	r1, [pc, #336]	; (d5740 <setup+0x310>)
   d55f0:	2050      	movs	r0, #80	; 0x50
   d55f2:	f000 fbe7 	bl	d5dc4 <HAL_EEPROM_Get>

  if (sysStatus.TempHumidConfig) {                                         // If there is a sensor present - initialize it
   d55f6:	7b23      	ldrb	r3, [r4, #12]
   d55f8:	b1bb      	cbz	r3, d562a <setup+0x1fa>
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d55fa:	2144      	movs	r1, #68	; 0x44
   d55fc:	4868      	ldr	r0, [pc, #416]	; (d57a0 <setup+0x370>)
   d55fe:	f000 fa75 	bl	d5aec <_ZN14Adafruit_SHT315beginEh>
   d5602:	e012      	b.n	d562a <setup+0x1fa>
  Particle.function("SetLightSensor",setLightSensor);
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d5604:	f002 fb1c 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5608:	2204      	movs	r2, #4
   d560a:	4966      	ldr	r1, [pc, #408]	; (d57a4 <setup+0x374>)
   d560c:	4628      	mov	r0, r5
   d560e:	f000 fbe1 	bl	d5dd4 <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d5612:	f002 fb15 	bl	d7c40 <_Z21__fetch_global_EEPROMv>
   d5616:	4620      	mov	r0, r4
   d5618:	2204      	movs	r2, #4
   d561a:	a906      	add	r1, sp, #24
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d561c:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d561e:	9506      	str	r5, [sp, #24]
   d5620:	f000 fbd8 	bl	d5dd4 <HAL_EEPROM_Put>
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d5624:	2cf0      	cmp	r4, #240	; 0xf0
   d5626:	d1f4      	bne.n	d5612 <setup+0x1e2>
   d5628:	e7d6      	b.n	d55d8 <setup+0x1a8>

  if (sysStatus.TempHumidConfig) {                                         // If there is a sensor present - initialize it
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
  }

  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d562a:	7c23      	ldrb	r3, [r4, #16]
   d562c:	b133      	cbz	r3, d563c <setup+0x20c>
    lightSensor.begin();
   d562e:	485e      	ldr	r0, [pc, #376]	; (d57a8 <setup+0x378>)
   d5630:	f000 f9cb 	bl	d59ca <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d5634:	2120      	movs	r1, #32
   d5636:	485c      	ldr	r0, [pc, #368]	; (d57a8 <setup+0x378>)
   d5638:	f000 fa03 	bl	d5a42 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d563c:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d563e:	4611      	mov	r1, r2
   d5640:	a806      	add	r0, sp, #24
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5642:	9206      	str	r2, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5644:	f000 fb86 	bl	d5d54 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5648:	9b06      	ldr	r3, [sp, #24]
  }

  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d564a:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d564c:	bf02      	ittt	eq
   d564e:	69a3      	ldreq	r3, [r4, #24]
   d5650:	3301      	addeq	r3, #1
   d5652:	61a3      	streq	r3, [r4, #24]
  }
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d5654:	69a3      	ldr	r3, [r4, #24]
   d5656:	2b05      	cmp	r3, #5
   d5658:	dd04      	ble.n	d5664 <setup+0x234>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d565a:	4b50      	ldr	r3, [pc, #320]	; (d579c <setup+0x36c>)
   d565c:	2204      	movs	r2, #4
   d565e:	619a      	str	r2, [r3, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d5660:	f7ff f856 	bl	d4710 <_Z14fullModemResetv>
  }

  if(!sysStatus.lowPowerMode) {
   d5664:	79a3      	ldrb	r3, [r4, #6]
   d5666:	b94b      	cbnz	r3, d567c <setup+0x24c>
    strcpy(lowPowerModeStr,"False");
   d5668:	4950      	ldr	r1, [pc, #320]	; (d57ac <setup+0x37c>)
   d566a:	482d      	ldr	r0, [pc, #180]	; (d5720 <setup+0x2f0>)
   d566c:	f003 fafa 	bl	d8c64 <strcpy>
    awakeTimer.start();
   d5670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5674:	484e      	ldr	r0, [pc, #312]	; (d57b0 <setup+0x380>)
   d5676:	f7fe fe4d 	bl	d4314 <_ZN5Timer5startEj>
   d567a:	e003      	b.n	d5684 <setup+0x254>
  }
  else strcpy(lowPowerModeStr,"True");
   d567c:	494d      	ldr	r1, [pc, #308]	; (d57b4 <setup+0x384>)
   d567e:	4828      	ldr	r0, [pc, #160]	; (d5720 <setup+0x2f0>)
   d5680:	f003 faf0 	bl	d8c64 <strcpy>

  sysStatus.solenoidHoldTime = 5;                                      // Set a reasonable value - based on testing 8mSec
   d5684:	2305      	movs	r3, #5
   d5686:	6163      	str	r3, [r4, #20]

  if (sysStatus.solenoidConfig && current.solenoidState) controlValve("Off");   // Can start watering until we get to the main loop
   d5688:	7c63      	ldrb	r3, [r4, #17]
   d568a:	b163      	cbz	r3, d56a6 <setup+0x276>
   d568c:	4b2c      	ldr	r3, [pc, #176]	; (d5740 <setup+0x310>)
   d568e:	68db      	ldr	r3, [r3, #12]
   d5690:	b14b      	cbz	r3, d56a6 <setup+0x276>
   d5692:	4949      	ldr	r1, [pc, #292]	; (d57b8 <setup+0x388>)
   d5694:	a806      	add	r0, sp, #24
   d5696:	f001 fe85 	bl	d73a4 <_ZN6StringC1EPK19__FlashStringHelper>
   d569a:	a806      	add	r0, sp, #24
   d569c:	f7ff fb4e 	bl	d4d3c <_Z12controlValve6String>
   d56a0:	a806      	add	r0, sp, #24
   d56a2:	f001 fe38 	bl	d7316 <_ZN6StringD1Ev>

  sysStatus.solarPowerMode = true;                                      // Set this as a default
   d56a6:	2301      	movs	r3, #1
   d56a8:	7163      	strb	r3, [r4, #5]
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d56aa:	f7fe ffe3 	bl	d4674 <_Z9PMICresetv>

  if (!digitalRead(userSwitch)) setLowPowerMode("0");                   // Rescue mode to take out of low power mode and connect
   d56ae:	2004      	movs	r0, #4
   d56b0:	f002 fa9c 	bl	d7bec <digitalRead>
   d56b4:	b948      	cbnz	r0, d56ca <setup+0x29a>
   d56b6:	4941      	ldr	r1, [pc, #260]	; (d57bc <setup+0x38c>)
   d56b8:	a806      	add	r0, sp, #24
   d56ba:	f001 fe73 	bl	d73a4 <_ZN6StringC1EPK19__FlashStringHelper>
   d56be:	a806      	add	r0, sp, #24
   d56c0:	f7ff facc 	bl	d4c5c <_Z15setLowPowerMode6String>
   d56c4:	a806      	add	r0, sp, #24
   d56c6:	f001 fe26 	bl	d7316 <_ZN6StringD1Ev>

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d56ca:	f7fe fe99 	bl	d4400 <_Z16takeMeasurementsv>

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d56ce:	4b3c      	ldr	r3, [pc, #240]	; (d57c0 <setup+0x390>)
   d56d0:	68a2      	ldr	r2, [r4, #8]
   d56d2:	681b      	ldr	r3, [r3, #0]
   d56d4:	429a      	cmp	r2, r3
   d56d6:	dc75      	bgt.n	d57c4 <setup+0x394>
   d56d8:	2308      	movs	r3, #8
   d56da:	703b      	strb	r3, [r7, #0]
   d56dc:	e07f      	b.n	d57de <setup+0x3ae>
   d56de:	bf00      	nop
   d56e0:	000d95cc 	.word	0x000d95cc
   d56e4:	2003e1d2 	.word	0x2003e1d2
   d56e8:	2003e25c 	.word	0x2003e25c
   d56ec:	000d5d75 	.word	0x000d5d75
   d56f0:	50000300 	.word	0x50000300
   d56f4:	000d4879 	.word	0x000d4879
   d56f8:	2003e270 	.word	0x2003e270
   d56fc:	000d99b5 	.word	0x000d99b5
   d5700:	2003e324 	.word	0x2003e324
   d5704:	000d99bc 	.word	0x000d99bc
   d5708:	000d9b3a 	.word	0x000d9b3a
   d570c:	000d99c7 	.word	0x000d99c7
   d5710:	2003e2f4 	.word	0x2003e2f4
   d5714:	000d99cf 	.word	0x000d99cf
   d5718:	2003e1c1 	.word	0x2003e1c1
   d571c:	000d99da 	.word	0x000d99da
   d5720:	2003e2b8 	.word	0x2003e2b8
   d5724:	000d99e9 	.word	0x000d99e9
   d5728:	2003e194 	.word	0x2003e194
   d572c:	000d99f6 	.word	0x000d99f6
   d5730:	2003e2e4 	.word	0x2003e2e4
   d5734:	000d9a02 	.word	0x000d9a02
   d5738:	2003e2fc 	.word	0x2003e2fc
   d573c:	000d9a0b 	.word	0x000d9a0b
   d5740:	2003e2c0 	.word	0x2003e2c0
   d5744:	000d9a16 	.word	0x000d9a16
   d5748:	2003e2c4 	.word	0x2003e2c4
   d574c:	000d9a24 	.word	0x000d9a24
   d5750:	2003e2c8 	.word	0x2003e2c8
   d5754:	000d9a32 	.word	0x000d9a32
   d5758:	000d410d 	.word	0x000d410d
   d575c:	000d9a3b 	.word	0x000d9a3b
   d5760:	000d4c5d 	.word	0x000d4c5d
   d5764:	000d4be1 	.word	0x000d4be1
   d5768:	000d9a47 	.word	0x000d9a47
   d576c:	000d4d3d 	.word	0x000d4d3d
   d5770:	000d98d3 	.word	0x000d98d3
   d5774:	000d4915 	.word	0x000d4915
   d5778:	000d9a54 	.word	0x000d9a54
   d577c:	000d49b9 	.word	0x000d49b9
   d5780:	000d9a63 	.word	0x000d9a63
   d5784:	000d4a35 	.word	0x000d4a35
   d5788:	000d9a75 	.word	0x000d9a75
   d578c:	000d4b49 	.word	0x000d4b49
   d5790:	000d9a84 	.word	0x000d9a84
   d5794:	000d4ac1 	.word	0x000d4ac1
   d5798:	000d9a94 	.word	0x000d9a94
   d579c:	2003e30c 	.word	0x2003e30c
   d57a0:	2003e260 	.word	0x2003e260
   d57a4:	000d960c 	.word	0x000d960c
   d57a8:	2003e1b0 	.word	0x2003e1b0
   d57ac:	000d98b7 	.word	0x000d98b7
   d57b0:	2003e1d4 	.word	0x2003e1d4
   d57b4:	000d98a0 	.word	0x000d98a0
   d57b8:	000d98c0 	.word	0x000d98c0
   d57bc:	000d979c 	.word	0x000d979c
   d57c0:	2003e1a4 	.word	0x2003e1a4
  else if(!connectToParticle()) {
   d57c4:	f7fe fee6 	bl	d4594 <_Z17connectToParticlev>
   d57c8:	b948      	cbnz	r0, d57de <setup+0x3ae>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d57ca:	2301      	movs	r3, #1
   d57cc:	703b      	strb	r3, [r7, #0]
   d57ce:	f000 fad9 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d57d2:	4b13      	ldr	r3, [pc, #76]	; (d5820 <setup+0x3f0>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d57d4:	4913      	ldr	r1, [pc, #76]	; (d5824 <setup+0x3f4>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d57d6:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d57d8:	4630      	mov	r0, r6
   d57da:	f003 fa43 	bl	d8c64 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d57de:	f000 fcfd 	bl	d61dc <spark_cloud_flag_connected>
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d57e2:	b108      	cbz	r0, d57e8 <setup+0x3b8>
   d57e4:	7923      	ldrb	r3, [r4, #4]
   d57e6:	b963      	cbnz	r3, d5802 <setup+0x3d2>
  Serial.println(StartupMessage);
   d57e8:	f002 f8ee 	bl	d79c8 <_Z16_fetch_usbserialv>
   d57ec:	4631      	mov	r1, r6
   d57ee:	f001 fd3a 	bl	d7266 <_ZN5Print7printlnEPKc>

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d57f2:	4b0d      	ldr	r3, [pc, #52]	; (d5828 <setup+0x3f8>)
   d57f4:	2201      	movs	r2, #1
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d57f6:	a802      	add	r0, sp, #8
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d57f8:	701a      	strb	r2, [r3, #0]
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d57fa:	f001 fd8c 	bl	d7316 <_ZN6StringD1Ev>

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
}
   d57fe:	b03b      	add	sp, #236	; 0xec
   d5800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5802:	4b0a      	ldr	r3, [pc, #40]	; (d582c <setup+0x3fc>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5804:	490a      	ldr	r1, [pc, #40]	; (d5830 <setup+0x400>)
   d5806:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5808:	2200      	movs	r2, #0
   d580a:	f88d 2000 	strb.w	r2, [sp]
   d580e:	a806      	add	r0, sp, #24
   d5810:	4632      	mov	r2, r6
   d5812:	f7fe fcad 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.75.constprop.98>
   d5816:	a807      	add	r0, sp, #28
   d5818:	f7fe ffa6 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d581c:	e7e4      	b.n	d57e8 <setup+0x3b8>
   d581e:	bf00      	nop
   d5820:	2003e2b4 	.word	0x2003e2b4
   d5824:	000d9aa7 	.word	0x000d9aa7
   d5828:	2003e1d1 	.word	0x2003e1d1
   d582c:	2003e1ac 	.word	0x2003e1ac
   d5830:	000d9ab9 	.word	0x000d9ab9

000d5834 <_GLOBAL__sub_I___appProductID>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5838:	4b49      	ldr	r3, [pc, #292]	; (d5960 <_GLOBAL__sub_I___appProductID+0x12c>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d583a:	4e4a      	ldr	r6, [pc, #296]	; (d5964 <_GLOBAL__sub_I___appProductID+0x130>)
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d583c:	4f4a      	ldr	r7, [pc, #296]	; (d5968 <_GLOBAL__sub_I___appProductID+0x134>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d583e:	f8df 9170 	ldr.w	r9, [pc, #368]	; d59b0 <_GLOBAL__sub_I___appProductID+0x17c>
   d5842:	2400      	movs	r4, #0
   d5844:	601c      	str	r4, [r3, #0]
   d5846:	4b49      	ldr	r3, [pc, #292]	; (d596c <_GLOBAL__sub_I___appProductID+0x138>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5848:	b085      	sub	sp, #20
   d584a:	2501      	movs	r5, #1
   d584c:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d584e:	f000 fad9 	bl	d5e04 <HAL_Pin_Map>
   d5852:	4b47      	ldr	r3, [pc, #284]	; (d5970 <_GLOBAL__sub_I___appProductID+0x13c>)
   d5854:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5856:	f002 f965 	bl	d7b24 <spark_protocol_instance>
   d585a:	4623      	mov	r3, r4
   d585c:	4622      	mov	r2, r4
   d585e:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5862:	f002 f967 	bl	d7b34 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5866:	f002 f95d 	bl	d7b24 <spark_protocol_instance>
   d586a:	4622      	mov	r2, r4
   d586c:	4623      	mov	r3, r4
   d586e:	2116      	movs	r1, #22
   d5870:	f002 f968 	bl	d7b44 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5874:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5878:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d587a:	6034      	str	r4, [r6, #0]
   d587c:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d587e:	71b4      	strb	r4, [r6, #6]
   d5880:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5882:	2002      	movs	r0, #2
   d5884:	f000 fc18 	bl	d60b8 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5888:	463a      	mov	r2, r7
   d588a:	493a      	ldr	r1, [pc, #232]	; (d5974 <_GLOBAL__sub_I___appProductID+0x140>)
   d588c:	4630      	mov	r0, r6
   d588e:	f002 fa8b 	bl	d7da8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5892:	4e39      	ldr	r6, [pc, #228]	; (d5978 <_GLOBAL__sub_I___appProductID+0x144>)
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5894:	4621      	mov	r1, r4
   d5896:	4628      	mov	r0, r5
   d5898:	f000 fc26 	bl	d60e8 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d589c:	4629      	mov	r1, r5
   d589e:	2004      	movs	r0, #4
   d58a0:	f000 fa48 	bl	d5d34 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d58a4:	4621      	mov	r1, r4
   d58a6:	4630      	mov	r0, r6
   d58a8:	f001 fa1e 	bl	d6ce8 <_ZN9FuelGaugeC1Eb>
   d58ac:	4630      	mov	r0, r6

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d58ae:	4e33      	ldr	r6, [pc, #204]	; (d597c <_GLOBAL__sub_I___appProductID+0x148>)
   d58b0:	4933      	ldr	r1, [pc, #204]	; (d5980 <_GLOBAL__sub_I___appProductID+0x14c>)
   d58b2:	463a      	mov	r2, r7
   d58b4:	f04f 0820 	mov.w	r8, #32
   d58b8:	f002 fa76 	bl	d7da8 <__aeabi_atexit>
   d58bc:	4642      	mov	r2, r8
   d58be:	4621      	mov	r1, r4
   d58c0:	4630      	mov	r0, r6
   d58c2:	f003 f994 	bl	d8bee <memset>
        conf_.size = sizeof(conf_);
   d58c6:	f886 8005 	strb.w	r8, [r6, #5]
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d58ca:	4e2e      	ldr	r6, [pc, #184]	; (d5984 <_GLOBAL__sub_I___appProductID+0x150>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d58cc:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d58d0:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d58d2:	4642      	mov	r2, r8
   d58d4:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d58d6:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d58d8:	f003 f989 	bl	d8bee <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d58dc:	2302      	movs	r3, #2
SystemPowerConfiguration conf;                      // Initalize the PMIC class so you can call the Power Management functions below.
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
   d58de:	463a      	mov	r2, r7
   d58e0:	4929      	ldr	r1, [pc, #164]	; (d5988 <_GLOBAL__sub_I___appProductID+0x154>)
   d58e2:	80f3      	strh	r3, [r6, #6]
   d58e4:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d58e6:	7535      	strb	r5, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d58e8:	f8a6 8004 	strh.w	r8, [r6, #4]
   d58ec:	f002 fa5c 	bl	d7da8 <__aeabi_atexit>
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d58f0:	4826      	ldr	r0, [pc, #152]	; (d598c <_GLOBAL__sub_I___appProductID+0x158>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d58f2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d59b4 <_GLOBAL__sub_I___appProductID+0x180>
	    _M_manager = &_My_handler::_M_manager;
   d58f6:	4c26      	ldr	r4, [pc, #152]	; (d5990 <_GLOBAL__sub_I___appProductID+0x15c>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d58f8:	4e26      	ldr	r6, [pc, #152]	; (d5994 <_GLOBAL__sub_I___appProductID+0x160>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
SystemPowerConfiguration conf;                      // Initalize the PMIC class so you can call the Power Management functions below.
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d58fa:	f000 f8d4 	bl	d5aa6 <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                     // Light sensor measures light level in Lux
   d58fe:	f002 f9e7 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5902:	2123      	movs	r1, #35	; 0x23
   d5904:	4602      	mov	r2, r0
   d5906:	4824      	ldr	r0, [pc, #144]	; (d5998 <_GLOBAL__sub_I___appProductID+0x164>)
   d5908:	f000 f85a 	bl	d59c0 <_ZN6BH1750C1EhR7TwoWire>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d590c:	4b23      	ldr	r3, [pc, #140]	; (d599c <_GLOBAL__sub_I___appProductID+0x168>)
   d590e:	9300      	str	r3, [sp, #0]
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d5910:	466a      	mov	r2, sp
   d5912:	462b      	mov	r3, r5
   d5914:	4922      	ldr	r1, [pc, #136]	; (d59a0 <_GLOBAL__sub_I___appProductID+0x16c>)

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5916:	9402      	str	r4, [sp, #8]
   d5918:	4648      	mov	r0, r9
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d591a:	f8cd 800c 	str.w	r8, [sp, #12]
   d591e:	f7fe fc89 	bl	d4234 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5922:	4668      	mov	r0, sp
   d5924:	f7fe fc39 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d5928:	463a      	mov	r2, r7
   d592a:	4631      	mov	r1, r6
   d592c:	4648      	mov	r0, r9
   d592e:	f002 fa3b 	bl	d7da8 <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5932:	9402      	str	r4, [sp, #8]
Timer awakeTimer(1210000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5934:	4c1b      	ldr	r4, [pc, #108]	; (d59a4 <_GLOBAL__sub_I___appProductID+0x170>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5936:	4b1c      	ldr	r3, [pc, #112]	; (d59a8 <_GLOBAL__sub_I___appProductID+0x174>)
   d5938:	9300      	str	r3, [sp, #0]
   d593a:	466a      	mov	r2, sp
   d593c:	462b      	mov	r3, r5
   d593e:	491b      	ldr	r1, [pc, #108]	; (d59ac <_GLOBAL__sub_I___appProductID+0x178>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5940:	f8cd 800c 	str.w	r8, [sp, #12]
   d5944:	4620      	mov	r0, r4
   d5946:	f7fe fc75 	bl	d4234 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d594a:	4668      	mov	r0, sp
   d594c:	f7fe fc25 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d5950:	463a      	mov	r2, r7
   d5952:	4631      	mov	r1, r6
   d5954:	4620      	mov	r0, r4
   d5956:	f002 fa27 	bl	d7da8 <__aeabi_atexit>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d595a:	b005      	add	sp, #20
   d595c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5960:	2003e24c 	.word	0x2003e24c
   d5964:	2003e250 	.word	0x2003e250
   d5968:	2003e190 	.word	0x2003e190
   d596c:	2003e1ac 	.word	0x2003e1ac
   d5970:	2003e25c 	.word	0x2003e25c
   d5974:	000d418b 	.word	0x000d418b
   d5978:	2003e1b8 	.word	0x2003e1b8
   d597c:	2003e210 	.word	0x2003e210
   d5980:	000d6d07 	.word	0x000d6d07
   d5984:	2003e234 	.word	0x2003e234
   d5988:	000d40f5 	.word	0x000d40f5
   d598c:	2003e260 	.word	0x2003e260
   d5990:	000d40dd 	.word	0x000d40dd
   d5994:	000d42b9 	.word	0x000d42b9
   d5998:	2003e1b0 	.word	0x2003e1b0
   d599c:	000d40b9 	.word	0x000d40b9
   d59a0:	00124f80 	.word	0x00124f80
   d59a4:	2003e1d4 	.word	0x2003e1d4
   d59a8:	000d40c5 	.word	0x000d40c5
   d59ac:	00127690 	.word	0x00127690
   d59b0:	2003e1f0 	.word	0x2003e1f0
   d59b4:	000d40d9 	.word	0x000d40d9

000d59b8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d59b8:	6803      	ldr	r3, [r0, #0]
   d59ba:	b2c9      	uxtb	r1, r1
   d59bc:	689b      	ldr	r3, [r3, #8]
   d59be:	4718      	bx	r3

000d59c0 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d59c0:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d59c2:	2211      	movs	r2, #17
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d59c4:	7041      	strb	r1, [r0, #1]
{
  m_mode = continuous_high_res2;
   d59c6:	7002      	strb	r2, [r0, #0]
}
   d59c8:	4770      	bx	lr

000d59ca <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d59ca:	b510      	push	{r4, lr}
   d59cc:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d59ce:	6840      	ldr	r0, [r0, #4]
   d59d0:	f001 fa22 	bl	d6e18 <_ZN7TwoWire9isEnabledEv>
   d59d4:	b910      	cbnz	r0, d59dc <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d59d6:	6860      	ldr	r0, [r4, #4]
   d59d8:	f001 f9dc 	bl	d6d94 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d59dc:	2001      	movs	r0, #1
   d59de:	bd10      	pop	{r4, pc}

000d59e0 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d59e0:	b570      	push	{r4, r5, r6, lr}
   d59e2:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d59e4:	7841      	ldrb	r1, [r0, #1]
   d59e6:	6840      	ldr	r0, [r0, #4]
   d59e8:	f001 fa0b 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d59ec:	2202      	movs	r2, #2
   d59ee:	7869      	ldrb	r1, [r5, #1]
   d59f0:	6868      	ldr	r0, [r5, #4]
   d59f2:	f001 fa03 	bl	d6dfc <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d59f6:	6868      	ldr	r0, [r5, #4]
   d59f8:	6803      	ldr	r3, [r0, #0]
   d59fa:	695b      	ldr	r3, [r3, #20]
   d59fc:	4798      	blx	r3
   d59fe:	4606      	mov	r6, r0
   d5a00:	6868      	ldr	r0, [r5, #4]
   d5a02:	6803      	ldr	r3, [r0, #0]
   d5a04:	695b      	ldr	r3, [r3, #20]
   d5a06:	4798      	blx	r3
   d5a08:	4604      	mov	r4, r0
  m_i2c.endTransmission();

  return (float)level / 1.2f; // convert to lux
   d5a0a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5a0e:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   d5a10:	b2a4      	uxth	r4, r4
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5a12:	f001 f9fe 	bl	d6e12 <_ZN7TwoWire15endTransmissionEv>

  return (float)level / 1.2f; // convert to lux
   d5a16:	ee07 4a90 	vmov	s15, r4
   d5a1a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d5a1e:	eddf 7a02 	vldr	s15, [pc, #8]	; d5a28 <_ZN6BH175015get_light_levelEv+0x48>
   d5a22:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5a26:	bd70      	pop	{r4, r5, r6, pc}
   d5a28:	3f99999a 	.word	0x3f99999a

000d5a2c <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d5a2c:	7803      	ldrb	r3, [r0, #0]
   d5a2e:	2b23      	cmp	r3, #35	; 0x23
   d5a30:	d004      	beq.n	d5a3c <_ZN6BH175020wait_for_measurementEv+0x10>
   d5a32:	2b13      	cmp	r3, #19
   d5a34:	bf0c      	ite	eq
   d5a36:	2018      	moveq	r0, #24
   d5a38:	20b4      	movne	r0, #180	; 0xb4
   d5a3a:	e000      	b.n	d5a3e <_ZN6BH175020wait_for_measurementEv+0x12>
   d5a3c:	2018      	movs	r0, #24
         m_mode == continuous_low_res) ? 24 : 180); // max measurement time 24 for low res and 180 for high res
   d5a3e:	f000 bc99 	b.w	d6374 <delay>

000d5a42 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
  return m_mode;
}

void BH1750::set_sensor_mode(SensMode _mode)
{
   d5a42:	b538      	push	{r3, r4, r5, lr}
   d5a44:	4604      	mov	r4, r0
   d5a46:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d5a48:	7841      	ldrb	r1, [r0, #1]
   d5a4a:	6840      	ldr	r0, [r0, #4]
   d5a4c:	f001 f9d9 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d5a50:	6860      	ldr	r0, [r4, #4]
   d5a52:	6803      	ldr	r3, [r0, #0]
   d5a54:	4629      	mov	r1, r5
   d5a56:	689b      	ldr	r3, [r3, #8]
   d5a58:	4798      	blx	r3
  m_i2c.endTransmission();
   d5a5a:	6860      	ldr	r0, [r4, #4]
   d5a5c:	f001 f9d9 	bl	d6e12 <_ZN7TwoWire15endTransmissionEv>

  m_mode = _mode;
   d5a60:	7025      	strb	r5, [r4, #0]

  wait_for_measurement();
   d5a62:	4620      	mov	r0, r4
}
   d5a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  m_i2c.write((uint8_t)_mode);
  m_i2c.endTransmission();

  m_mode = _mode;

  wait_for_measurement();
   d5a68:	f7ff bfe0 	b.w	d5a2c <_ZN6BH175020wait_for_measurementEv>

000d5a6c <_ZN6BH175023make_forced_measurementEv>:
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5a6c:	b510      	push	{r4, lr}
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5a6e:	7803      	ldrb	r3, [r0, #0]
   d5a70:	f1a3 0220 	sub.w	r2, r3, #32
   d5a74:	2a01      	cmp	r2, #1
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5a76:	4604      	mov	r4, r0
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5a78:	d901      	bls.n	d5a7e <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5a7a:	2b23      	cmp	r3, #35	; 0x23
   d5a7c:	d110      	bne.n	d5aa0 <_ZN6BH175023make_forced_measurementEv+0x34>
      m_mode == forced_mode_low_res)
  {
    m_i2c.beginTransmission(m_i2c_addr);
   d5a7e:	7861      	ldrb	r1, [r4, #1]
   d5a80:	6860      	ldr	r0, [r4, #4]
   d5a82:	f001 f9be 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d5a86:	6860      	ldr	r0, [r4, #4]
   d5a88:	7821      	ldrb	r1, [r4, #0]
   d5a8a:	6803      	ldr	r3, [r0, #0]
   d5a8c:	689b      	ldr	r3, [r3, #8]
   d5a8e:	4798      	blx	r3
    m_i2c.endTransmission();
   d5a90:	6860      	ldr	r0, [r4, #4]
   d5a92:	f001 f9be 	bl	d6e12 <_ZN7TwoWire15endTransmissionEv>

    wait_for_measurement();
   d5a96:	4620      	mov	r0, r4
  }
}
   d5a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    m_i2c.beginTransmission(m_i2c_addr);
    m_i2c.write((uint8_t)m_mode);
    m_i2c.endTransmission();

    wait_for_measurement();
   d5a9c:	f7ff bfc6 	b.w	d5a2c <_ZN6BH175020wait_for_measurementEv>
   d5aa0:	bd10      	pop	{r4, pc}

000d5aa2 <_GLOBAL__sub_I__ZN6BH1750C2EhR7TwoWire>:
   d5aa2:	f000 b9af 	b.w	d5e04 <HAL_Pin_Map>

000d5aa6 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5aa6:	4770      	bx	lr

000d5aa8 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5aa8:	b538      	push	{r3, r4, r5, lr}
   d5aaa:	4605      	mov	r5, r0
   d5aac:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5aae:	f002 f90f 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5ab2:	7829      	ldrb	r1, [r5, #0]
   d5ab4:	f001 f9a5 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5ab8:	f002 f90a 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5abc:	0a21      	lsrs	r1, r4, #8
   d5abe:	f7ff ff7b 	bl	d59b8 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5ac2:	f002 f905 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5ac6:	b2e1      	uxtb	r1, r4
   d5ac8:	f7ff ff76 	bl	d59b8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5acc:	f002 f900 	bl	d7cd0 <_Z19__fetch_global_Wirev>
}
   d5ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d5ad4:	f001 b99d 	b.w	d6e12 <_ZN7TwoWire15endTransmissionEv>

000d5ad8 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d5ad8:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5ada:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5ade:	f7ff ffe3 	bl	d5aa8 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d5ae2:	200a      	movs	r0, #10
}
   d5ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d5ae8:	f000 bc44 	b.w	d6374 <delay>

000d5aec <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5aec:	b538      	push	{r3, r4, r5, lr}
   d5aee:	4604      	mov	r4, r0
   d5af0:	460d      	mov	r5, r1
  Wire.begin();
   d5af2:	f002 f8ed 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5af6:	f001 f94d 	bl	d6d94 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d5afa:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d5afc:	7025      	strb	r5, [r4, #0]
  reset();
   d5afe:	f7ff ffeb 	bl	d5ad8 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d5b02:	2001      	movs	r0, #1
   d5b04:	bd38      	pop	{r3, r4, r5, pc}

000d5b06 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d5b06:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d5b08:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d5b0a:	4291      	cmp	r1, r2
   d5b0c:	d00e      	beq.n	d5b2c <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d5b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5b12:	4058      	eors	r0, r3
   d5b14:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5b16:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5b1a:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d5b1e:	bf18      	it	ne
   d5b20:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5b24:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5b26:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5b28:	d1f5      	bne.n	d5b16 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5b2a:	e7ee      	b.n	d5b0a <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d5b2c:	4770      	bx	lr
	...

000d5b30 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5b32:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5b36:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5b38:	f7ff ffb6 	bl	d5aa8 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d5b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5b40:	f000 fc18 	bl	d6374 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d5b44:	f002 f8c4 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5b48:	2206      	movs	r2, #6
   d5b4a:	7821      	ldrb	r1, [r4, #0]
   d5b4c:	f001 f956 	bl	d6dfc <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5b50:	f002 f8be 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5b54:	6803      	ldr	r3, [r0, #0]
   d5b56:	691b      	ldr	r3, [r3, #16]
   d5b58:	4798      	blx	r3
   d5b5a:	2806      	cmp	r0, #6
   d5b5c:	d14a      	bne.n	d5bf4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d5b5e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d5b60:	f002 f8b6 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d5b64:	6803      	ldr	r3, [r0, #0]
   d5b66:	695b      	ldr	r3, [r3, #20]
   d5b68:	4798      	blx	r3
   d5b6a:	f80d 0005 	strb.w	r0, [sp, r5]
   d5b6e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d5b70:	2d06      	cmp	r5, #6
   d5b72:	d1f5      	bne.n	d5b60 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5b74:	2202      	movs	r2, #2
   d5b76:	4669      	mov	r1, sp
   d5b78:	4620      	mov	r0, r4
   d5b7a:	f7ff ffc4 	bl	d5b06 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5b7e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d5b82:	4285      	cmp	r5, r0
   d5b84:	d136      	bne.n	d5bf4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5b86:	2202      	movs	r2, #2
   d5b88:	f10d 0103 	add.w	r1, sp, #3
   d5b8c:	4620      	mov	r0, r4
   d5b8e:	f7ff ffba 	bl	d5b06 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5b92:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d5b96:	4285      	cmp	r5, r0
   d5b98:	d12c      	bne.n	d5bf4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5b9a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d5b9e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d5ba2:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5ba6:	ba40      	rev16	r0, r0
   d5ba8:	b280      	uxth	r0, r0
   d5baa:	f002 fbab 	bl	d8304 <__aeabi_ui2d>
  stemp *= 175;
   d5bae:	a318      	add	r3, pc, #96	; (adr r3, d5c10 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5bb4:	f002 fc1c 	bl	d83f0 <__aeabi_dmul>
  stemp /= 0xffff;
   d5bb8:	a311      	add	r3, pc, #68	; (adr r3, d5c00 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5bba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5bbe:	f002 fd41 	bl	d8644 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d5bc2:	2200      	movs	r2, #0
   d5bc4:	4b10      	ldr	r3, [pc, #64]	; (d5c08 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d5bc6:	f002 fa5f 	bl	d8088 <__aeabi_dsub>
   d5bca:	f002 feab 	bl	d8924 <__aeabi_d2f>
   d5bce:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d5bd0:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d5bd4:	f002 fb96 	bl	d8304 <__aeabi_ui2d>
  shum *= 100;
   d5bd8:	2200      	movs	r2, #0
   d5bda:	4b0c      	ldr	r3, [pc, #48]	; (d5c0c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5bdc:	f002 fc08 	bl	d83f0 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d5be0:	a307      	add	r3, pc, #28	; (adr r3, d5c00 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5be2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5be6:	f002 fd2d 	bl	d8644 <__aeabi_ddiv>
   d5bea:	f002 fe9b 	bl	d8924 <__aeabi_d2f>
   d5bee:	6060      	str	r0, [r4, #4]
  
  return true;
   d5bf0:	2001      	movs	r0, #1
   d5bf2:	e000      	b.n	d5bf6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d5bf4:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d5bf6:	b002      	add	sp, #8
   d5bf8:	bd70      	pop	{r4, r5, r6, pc}
   d5bfa:	bf00      	nop
   d5bfc:	f3af 8000 	nop.w
   d5c00:	00000000 	.word	0x00000000
   d5c04:	40efffe0 	.word	0x40efffe0
   d5c08:	40468000 	.word	0x40468000
   d5c0c:	40590000 	.word	0x40590000
   d5c10:	00000000 	.word	0x00000000
   d5c14:	4065e000 	.word	0x4065e000

000d5c18 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d5c18:	b510      	push	{r4, lr}
   d5c1a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5c1c:	f7ff ff88 	bl	d5b30 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5c20:	b110      	cbz	r0, d5c28 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d5c22:	ed94 0a02 	vldr	s0, [r4, #8]
   d5c26:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d5c28:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5c30 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d5c2c:	bd10      	pop	{r4, pc}
   d5c2e:	bf00      	nop
   d5c30:	7fc00000 	.word	0x7fc00000

000d5c34 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d5c34:	b510      	push	{r4, lr}
   d5c36:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5c38:	f7ff ff7a 	bl	d5b30 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5c3c:	b110      	cbz	r0, d5c44 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d5c3e:	ed94 0a01 	vldr	s0, [r4, #4]
   d5c42:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d5c44:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5c4c <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d5c48:	bd10      	pop	{r4, pc}
   d5c4a:	bf00      	nop
   d5c4c:	7fc00000 	.word	0x7fc00000

000d5c50 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d5c50:	f000 b8d8 	b.w	d5e04 <HAL_Pin_Map>

000d5c54 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <cellular_signal+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030274 	.word	0x00030274

000d5c64 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <cellular_command+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030274 	.word	0x00030274

000d5c74 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <os_thread_is_current+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	689b      	ldr	r3, [r3, #8]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030248 	.word	0x00030248

000d5c84 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <os_thread_yield+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	68db      	ldr	r3, [r3, #12]
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030248 	.word	0x00030248

000d5c94 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <os_thread_join+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	691b      	ldr	r3, [r3, #16]
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030248 	.word	0x00030248

000d5ca4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <os_thread_cleanup+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	695b      	ldr	r3, [r3, #20]
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030248 	.word	0x00030248

000d5cb4 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <os_thread_scheduling+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	69db      	ldr	r3, [r3, #28]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030248 	.word	0x00030248

000d5cc4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <os_timer_create+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	6a1b      	ldr	r3, [r3, #32]
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030248 	.word	0x00030248

000d5cd4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <os_timer_destroy+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030248 	.word	0x00030248

000d5ce4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <os_timer_get_id+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030248 	.word	0x00030248

000d5cf4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <os_timer_change+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030248 	.word	0x00030248

000d5d04 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <os_mutex_recursive_create+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030248 	.word	0x00030248

000d5d14 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <os_mutex_recursive_destroy+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030248 	.word	0x00030248

000d5d24 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <os_timer_set_id+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030248 	.word	0x00030248

000d5d34 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <HAL_Feature_Set+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030234 	.word	0x00030234

000d5d44 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <HAL_Core_System_Reset_Ex+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030234 	.word	0x00030234

000d5d54 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030234 	.word	0x00030234

000d5d64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <HAL_RNG_GetRandomNumber+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	685b      	ldr	r3, [r3, #4]
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030218 	.word	0x00030218

000d5d74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <HAL_Delay_Microseconds+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	68db      	ldr	r3, [r3, #12]
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030218 	.word	0x00030218

000d5d84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	695b      	ldr	r3, [r3, #20]
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030218 	.word	0x00030218

000d5d94 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <HAL_RTC_Get_UnixTime+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	69db      	ldr	r3, [r3, #28]
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030218 	.word	0x00030218

000d5da4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <HAL_EEPROM_Init+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030218 	.word	0x00030218

000d5db4 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <HAL_EEPROM_Read+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030218 	.word	0x00030218

000d5dc4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <HAL_EEPROM_Get+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030218 	.word	0x00030218

000d5dd4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <HAL_EEPROM_Put+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030218 	.word	0x00030218

000d5de4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <HAL_RTC_Time_Is_Valid+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030218 	.word	0x00030218

000d5df4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <hal_timer_millis+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030218 	.word	0x00030218

000d5e04 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <HAL_Pin_Map+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	681b      	ldr	r3, [r3, #0]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	0003022c 	.word	0x0003022c

000d5e14 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <HAL_Validate_Pin_Function+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	685b      	ldr	r3, [r3, #4]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	0003022c 	.word	0x0003022c

000d5e24 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <HAL_Pin_Mode+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	689b      	ldr	r3, [r3, #8]
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	0003022c 	.word	0x0003022c

000d5e34 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <HAL_Get_Pin_Mode+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	68db      	ldr	r3, [r3, #12]
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	0003022c 	.word	0x0003022c

000d5e44 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <HAL_GPIO_Write+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	691b      	ldr	r3, [r3, #16]
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	0003022c 	.word	0x0003022c

000d5e54 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <HAL_GPIO_Read+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	695b      	ldr	r3, [r3, #20]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	0003022c 	.word	0x0003022c

000d5e64 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <HAL_ADC_Read+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	0003022c 	.word	0x0003022c

000d5e74 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <HAL_I2C_Begin+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	68db      	ldr	r3, [r3, #12]
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030228 	.word	0x00030228

000d5e84 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <HAL_I2C_Begin_Transmission+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	699b      	ldr	r3, [r3, #24]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030228 	.word	0x00030228

000d5e94 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <HAL_I2C_End_Transmission+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	69db      	ldr	r3, [r3, #28]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	00030228 	.word	0x00030228

000d5ea4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <HAL_I2C_Write_Data+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	6a1b      	ldr	r3, [r3, #32]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	00030228 	.word	0x00030228

000d5eb4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <HAL_I2C_Available_Data+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	00030228 	.word	0x00030228

000d5ec4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <HAL_I2C_Read_Data+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	00030228 	.word	0x00030228

000d5ed4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <HAL_I2C_Peek_Data+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	00030228 	.word	0x00030228

000d5ee4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <HAL_I2C_Flush_Data+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	00030228 	.word	0x00030228

000d5ef4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <HAL_I2C_Is_Enabled+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030228 	.word	0x00030228

000d5f04 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <HAL_I2C_Init+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030228 	.word	0x00030228

000d5f14 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <HAL_I2C_Acquire+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	00030228 	.word	0x00030228

000d5f24 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <HAL_I2C_Release+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	00030228 	.word	0x00030228

000d5f34 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <HAL_I2C_Request_Data_Ex+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	00030228 	.word	0x00030228

000d5f44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <inet_inet_ntop+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	695b      	ldr	r3, [r3, #20]
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	00030264 	.word	0x00030264

000d5f54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <netdb_freeaddrinfo+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	689b      	ldr	r3, [r3, #8]
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	00030268 	.word	0x00030268

000d5f64 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <netdb_getaddrinfo+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	68db      	ldr	r3, [r3, #12]
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	00030268 	.word	0x00030268

000d5f74 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <HAL_SPI_Init+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	69db      	ldr	r3, [r3, #28]
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	00030230 	.word	0x00030230

000d5f84 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <HAL_SPI_Is_Enabled+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	6a1b      	ldr	r3, [r3, #32]
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	00030230 	.word	0x00030230

000d5f94 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <HAL_USART_Init+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	681b      	ldr	r3, [r3, #0]
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	0003023c 	.word	0x0003023c

000d5fa4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <HAL_USART_Write_Data+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	68db      	ldr	r3, [r3, #12]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	0003023c 	.word	0x0003023c

000d5fb4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <HAL_USART_Available_Data+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	691b      	ldr	r3, [r3, #16]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	0003023c 	.word	0x0003023c

000d5fc4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <HAL_USART_Read_Data+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	695b      	ldr	r3, [r3, #20]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	0003023c 	.word	0x0003023c

000d5fd4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <HAL_USART_Peek_Data+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	699b      	ldr	r3, [r3, #24]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	0003023c 	.word	0x0003023c

000d5fe4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <HAL_USART_Flush_Data+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	69db      	ldr	r3, [r3, #28]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	0003023c 	.word	0x0003023c

000d5ff4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <HAL_USART_Is_Enabled+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	6a1b      	ldr	r3, [r3, #32]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	0003023c 	.word	0x0003023c

000d6004 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <HAL_USART_Available_Data_For_Write+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	0003023c 	.word	0x0003023c

000d6014 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <HAL_USB_USART_Init+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	681b      	ldr	r3, [r3, #0]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	0003024c 	.word	0x0003024c

000d6024 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <HAL_USB_USART_Available_Data+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	691b      	ldr	r3, [r3, #16]
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	0003024c 	.word	0x0003024c

000d6034 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	695b      	ldr	r3, [r3, #20]
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	0003024c 	.word	0x0003024c

000d6044 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <HAL_USB_USART_Receive_Data+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	699b      	ldr	r3, [r3, #24]
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	0003024c 	.word	0x0003024c

000d6054 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <HAL_USB_USART_Send_Data+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	69db      	ldr	r3, [r3, #28]
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	0003024c 	.word	0x0003024c

000d6064 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <HAL_USB_USART_Flush_Data+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	6a1b      	ldr	r3, [r3, #32]
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	0003024c 	.word	0x0003024c

000d6074 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <panic_+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	00030260 	.word	0x00030260

000d6084 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <log_message+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	00030260 	.word	0x00030260

000d6094 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b03      	ldr	r3, [pc, #12]	; (d60a4 <diag_get_source+0x10>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d609e:	9301      	str	r3, [sp, #4]
   d60a0:	bd08      	pop	{r3, pc}
   d60a2:	0000      	.short	0x0000
   d60a4:	00030260 	.word	0x00030260

000d60a8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <system_mode+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	681b      	ldr	r3, [r3, #0]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030220 	.word	0x00030220

000d60b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <set_system_mode+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	685b      	ldr	r3, [r3, #4]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030220 	.word	0x00030220

000d60c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <system_delay_ms+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	695b      	ldr	r3, [r3, #20]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030220 	.word	0x00030220

000d60d8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <system_sleep+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	699b      	ldr	r3, [r3, #24]
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030220 	.word	0x00030220

000d60e8 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <system_thread_set_state+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030220 	.word	0x00030220

000d60f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <application_thread_current+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030220 	.word	0x00030220

000d6108 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <application_thread_invoke+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030220 	.word	0x00030220

000d6118 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <system_thread_get_state+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030220 	.word	0x00030220

000d6128 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b03      	ldr	r3, [pc, #12]	; (d6138 <system_ctrl_set_app_request_handler+0x10>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6132:	9301      	str	r3, [sp, #4]
   d6134:	bd08      	pop	{r3, pc}
   d6136:	0000      	.short	0x0000
   d6138:	00030220 	.word	0x00030220

000d613c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b03      	ldr	r3, [pc, #12]	; (d614c <system_ctrl_set_result+0x10>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6146:	9301      	str	r3, [sp, #4]
   d6148:	bd08      	pop	{r3, pc}
   d614a:	0000      	.short	0x0000
   d614c:	00030220 	.word	0x00030220

000d6150 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b03      	ldr	r3, [pc, #12]	; (d6160 <system_sleep_pins+0x10>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d615a:	9301      	str	r3, [sp, #4]
   d615c:	bd08      	pop	{r3, pc}
   d615e:	0000      	.short	0x0000
   d6160:	00030220 	.word	0x00030220

000d6164 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d6164:	b508      	push	{r3, lr}
   d6166:	4b03      	ldr	r3, [pc, #12]	; (d6174 <system_power_management_set_config+0x10>)
   d6168:	681b      	ldr	r3, [r3, #0]
   d616a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d616e:	9301      	str	r3, [sp, #4]
   d6170:	bd08      	pop	{r3, pc}
   d6172:	0000      	.short	0x0000
   d6174:	00030220 	.word	0x00030220

000d6178 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b03      	ldr	r3, [pc, #12]	; (d6188 <system_sleep_ext+0x10>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6182:	9301      	str	r3, [sp, #4]
   d6184:	bd08      	pop	{r3, pc}
   d6186:	0000      	.short	0x0000
   d6188:	00030220 	.word	0x00030220

000d618c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <spark_variable+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	681b      	ldr	r3, [r3, #0]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030244 	.word	0x00030244

000d619c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <spark_function+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	685b      	ldr	r3, [r3, #4]
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030244 	.word	0x00030244

000d61ac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <spark_process+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	689b      	ldr	r3, [r3, #8]
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030244 	.word	0x00030244

000d61bc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <spark_cloud_flag_connect+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	68db      	ldr	r3, [r3, #12]
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030244 	.word	0x00030244

000d61cc <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <spark_cloud_flag_disconnect+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	691b      	ldr	r3, [r3, #16]
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030244 	.word	0x00030244

000d61dc <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <spark_cloud_flag_connected+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	695b      	ldr	r3, [r3, #20]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030244 	.word	0x00030244

000d61ec <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <spark_deviceID+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	69db      	ldr	r3, [r3, #28]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	00030244 	.word	0x00030244

000d61fc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <spark_send_event+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	6a1b      	ldr	r3, [r3, #32]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	00030244 	.word	0x00030244

000d620c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <spark_subscribe+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	00030244 	.word	0x00030244

000d621c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <spark_sync_time+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	00030244 	.word	0x00030244

000d622c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <spark_sync_time_pending+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	00030244 	.word	0x00030244

000d623c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030244 	.word	0x00030244

000d624c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <network_connect+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	685b      	ldr	r3, [r3, #4]
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	00030240 	.word	0x00030240

000d625c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <network_connecting+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	689b      	ldr	r3, [r3, #8]
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030240 	.word	0x00030240

000d626c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <network_disconnect+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	68db      	ldr	r3, [r3, #12]
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030240 	.word	0x00030240

000d627c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <network_ready+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	691b      	ldr	r3, [r3, #16]
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	00030240 	.word	0x00030240

000d628c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <network_on+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	695b      	ldr	r3, [r3, #20]
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	00030240 	.word	0x00030240

000d629c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <network_off+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	699b      	ldr	r3, [r3, #24]
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	00030240 	.word	0x00030240

000d62ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <network_listen+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	69db      	ldr	r3, [r3, #28]
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	00030240 	.word	0x00030240

000d62bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <network_listening+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	6a1b      	ldr	r3, [r3, #32]
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	00030240 	.word	0x00030240

000d62cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <network_set_listen_timeout+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	00030240 	.word	0x00030240

000d62dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <network_get_listen_timeout+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	00030240 	.word	0x00030240

000d62ec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <malloc+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	681b      	ldr	r3, [r3, #0]
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	0003021c 	.word	0x0003021c

000d62fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <free+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	685b      	ldr	r3, [r3, #4]
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	0003021c 	.word	0x0003021c

000d630c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d630c:	b508      	push	{r3, lr}
   d630e:	4b02      	ldr	r3, [pc, #8]	; (d6318 <realloc+0xc>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	689b      	ldr	r3, [r3, #8]
   d6314:	9301      	str	r3, [sp, #4]
   d6316:	bd08      	pop	{r3, pc}
   d6318:	0003021c 	.word	0x0003021c

000d631c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b02      	ldr	r3, [pc, #8]	; (d6328 <siscanf+0xc>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	699b      	ldr	r3, [r3, #24]
   d6324:	9301      	str	r3, [sp, #4]
   d6326:	bd08      	pop	{r3, pc}
   d6328:	0003021c 	.word	0x0003021c

000d632c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d632c:	b508      	push	{r3, lr}
   d632e:	4b02      	ldr	r3, [pc, #8]	; (d6338 <snprintf+0xc>)
   d6330:	681b      	ldr	r3, [r3, #0]
   d6332:	69db      	ldr	r3, [r3, #28]
   d6334:	9301      	str	r3, [sp, #4]
   d6336:	bd08      	pop	{r3, pc}
   d6338:	0003021c 	.word	0x0003021c

000d633c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b02      	ldr	r3, [pc, #8]	; (d6348 <abort+0xc>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6344:	9301      	str	r3, [sp, #4]
   d6346:	bd08      	pop	{r3, pc}
   d6348:	0003021c 	.word	0x0003021c

000d634c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <_malloc_r+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	0003021c 	.word	0x0003021c

000d635c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d635c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d635e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d6360:	d007      	beq.n	d6372 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d6362:	9d03      	ldr	r5, [sp, #12]
   d6364:	1a44      	subs	r4, r0, r1
   d6366:	1aed      	subs	r5, r5, r3
   d6368:	436c      	muls	r4, r5
   d636a:	1a52      	subs	r2, r2, r1
   d636c:	fb94 f4f2 	sdiv	r4, r4, r2
   d6370:	18e0      	adds	r0, r4, r3
}
   d6372:	bd30      	pop	{r4, r5, pc}

000d6374 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6374:	2100      	movs	r1, #0
   d6376:	f7ff bea7 	b.w	d60c8 <system_delay_ms>

000d637a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d637a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d637c:	6883      	ldr	r3, [r0, #8]
   d637e:	4604      	mov	r4, r0
   d6380:	b90b      	cbnz	r3, d6386 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6382:	f001 fd32 	bl	d7dea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6386:	68c3      	ldr	r3, [r0, #12]
   d6388:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d638a:	68a3      	ldr	r3, [r4, #8]
   d638c:	b11b      	cbz	r3, d6396 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d638e:	2203      	movs	r2, #3
   d6390:	4621      	mov	r1, r4
   d6392:	4620      	mov	r0, r4
   d6394:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6396:	4620      	mov	r0, r4
   d6398:	2110      	movs	r1, #16
}
   d639a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d639e:	f001 bd08 	b.w	d7db2 <_ZdlPvj>

000d63a2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d63a2:	b510      	push	{r4, lr}
   d63a4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d63a6:	6800      	ldr	r0, [r0, #0]
   d63a8:	b108      	cbz	r0, d63ae <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d63aa:	f7ff fcb3 	bl	d5d14 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d63ae:	4620      	mov	r0, r4
   d63b0:	bd10      	pop	{r4, pc}

000d63b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d63b2:	680b      	ldr	r3, [r1, #0]
   d63b4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d63b6:	b113      	cbz	r3, d63be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d63b8:	685a      	ldr	r2, [r3, #4]
   d63ba:	3201      	adds	r2, #1
   d63bc:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d63be:	4770      	bx	lr

000d63c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d63c0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d63c2:	4c06      	ldr	r4, [pc, #24]	; (d63dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d63c4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d63c6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d63c8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d63ca:	f7ff fc9b 	bl	d5d04 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d63ce:	4620      	mov	r0, r4
   d63d0:	4a03      	ldr	r2, [pc, #12]	; (d63e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d63d2:	4904      	ldr	r1, [pc, #16]	; (d63e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d63d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d63d8:	f001 bce6 	b.w	d7da8 <__aeabi_atexit>
   d63dc:	2003e32c 	.word	0x2003e32c
   d63e0:	2003e190 	.word	0x2003e190
   d63e4:	000d63a3 	.word	0x000d63a3

000d63e8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d63e8:	2200      	movs	r2, #0
   d63ea:	4611      	mov	r1, r2
   d63ec:	6840      	ldr	r0, [r0, #4]
   d63ee:	f7ff bf45 	b.w	d627c <network_ready>

000d63f2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63f2:	2200      	movs	r2, #0
   d63f4:	4611      	mov	r1, r2
   d63f6:	6840      	ldr	r0, [r0, #4]
   d63f8:	f7ff bf60 	b.w	d62bc <network_listening>

000d63fc <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d63fc:	2200      	movs	r2, #0
   d63fe:	4611      	mov	r1, r2
   d6400:	6840      	ldr	r0, [r0, #4]
   d6402:	f7ff bf6b 	b.w	d62dc <network_get_listen_timeout>

000d6406 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6406:	2200      	movs	r2, #0
   d6408:	6840      	ldr	r0, [r0, #4]
   d640a:	f7ff bf5f 	b.w	d62cc <network_set_listen_timeout>

000d640e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d640e:	2200      	movs	r2, #0
   d6410:	f081 0101 	eor.w	r1, r1, #1
   d6414:	6840      	ldr	r0, [r0, #4]
   d6416:	f7ff bf49 	b.w	d62ac <network_listen>

000d641a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d641a:	2300      	movs	r3, #0
   d641c:	461a      	mov	r2, r3
   d641e:	4619      	mov	r1, r3
   d6420:	6840      	ldr	r0, [r0, #4]
   d6422:	f7ff bf3b 	b.w	d629c <network_off>

000d6426 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6426:	2300      	movs	r3, #0
   d6428:	461a      	mov	r2, r3
   d642a:	4619      	mov	r1, r3
   d642c:	6840      	ldr	r0, [r0, #4]
   d642e:	f7ff bf2d 	b.w	d628c <network_on>

000d6432 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6432:	2200      	movs	r2, #0
   d6434:	4611      	mov	r1, r2
   d6436:	6840      	ldr	r0, [r0, #4]
   d6438:	f7ff bf10 	b.w	d625c <network_connecting>

000d643c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d643c:	2200      	movs	r2, #0
   d643e:	2102      	movs	r1, #2
   d6440:	6840      	ldr	r0, [r0, #4]
   d6442:	f7ff bf13 	b.w	d626c <network_disconnect>

000d6446 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6446:	2300      	movs	r3, #0
   d6448:	461a      	mov	r2, r3
   d644a:	6840      	ldr	r0, [r0, #4]
   d644c:	f7ff befe 	b.w	d624c <network_connect>

000d6450 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6450:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6452:	4b1b      	ldr	r3, [pc, #108]	; (d64c0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6454:	6003      	str	r3, [r0, #0]
   d6456:	2500      	movs	r5, #0
   d6458:	460f      	mov	r7, r1
   d645a:	3328      	adds	r3, #40	; 0x28
   d645c:	2618      	movs	r6, #24
   d645e:	b089      	sub	sp, #36	; 0x24
   d6460:	6043      	str	r3, [r0, #4]
   d6462:	6085      	str	r5, [r0, #8]
   d6464:	60c5      	str	r5, [r0, #12]
   d6466:	4632      	mov	r2, r6
   d6468:	4629      	mov	r1, r5
   d646a:	4604      	mov	r4, r0
   d646c:	3010      	adds	r0, #16
   d646e:	f002 fbbe 	bl	d8bee <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6472:	462a      	mov	r2, r5
   d6474:	4629      	mov	r1, r5
   d6476:	6878      	ldr	r0, [r7, #4]
   d6478:	f7ff ff00 	bl	d627c <network_ready>
   d647c:	b908      	cbnz	r0, d6482 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d647e:	60a0      	str	r0, [r4, #8]
            return sig;
   d6480:	e01b      	b.n	d64ba <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6482:	4629      	mov	r1, r5
   d6484:	4632      	mov	r2, r6
   d6486:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6488:	9500      	str	r5, [sp, #0]
   d648a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d648c:	f002 fbaf 	bl	d8bee <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6490:	a902      	add	r1, sp, #8
   d6492:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6494:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6498:	f7ff fbdc 	bl	d5c54 <cellular_signal>
   d649c:	b110      	cbz	r0, d64a4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d649e:	2301      	movs	r3, #1
   d64a0:	60a3      	str	r3, [r4, #8]
            return sig;
   d64a2:	e00a      	b.n	d64ba <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d64a4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d64a6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d64a8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d64aa:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d64ac:	b90b      	cbnz	r3, d64b2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d64ae:	2302      	movs	r3, #2
   d64b0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d64b2:	a902      	add	r1, sp, #8
   d64b4:	4620      	mov	r0, r4
   d64b6:	f000 f889 	bl	d65cc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d64ba:	4620      	mov	r0, r4
   d64bc:	b009      	add	sp, #36	; 0x24
   d64be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d64c0:	000d9b7c 	.word	0x000d9b7c

000d64c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d64c4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d64c6:	4c08      	ldr	r4, [pc, #32]	; (d64e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d64c8:	2528      	movs	r5, #40	; 0x28
   d64ca:	462a      	mov	r2, r5
   d64cc:	2100      	movs	r1, #0
   d64ce:	4620      	mov	r0, r4
   d64d0:	f002 fb8d 	bl	d8bee <memset>
        cid = -1;
   d64d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d64d8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d64da:	4b04      	ldr	r3, [pc, #16]	; (d64ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d64dc:	8025      	strh	r5, [r4, #0]
   d64de:	2204      	movs	r2, #4
   d64e0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d64e2:	4a03      	ldr	r2, [pc, #12]	; (d64f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d64e4:	601a      	str	r2, [r3, #0]
   d64e6:	bd38      	pop	{r3, r4, r5, pc}
   d64e8:	2003e338 	.word	0x2003e338
   d64ec:	2003e330 	.word	0x2003e330
   d64f0:	000d9b48 	.word	0x000d9b48

000d64f4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d64f4:	4770      	bx	lr

000d64f6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d64f6:	7d00      	ldrb	r0, [r0, #20]
   d64f8:	4770      	bx	lr
	...

000d64fc <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d64fc:	7d03      	ldrb	r3, [r0, #20]
   d64fe:	b11b      	cbz	r3, d6508 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d6500:	6983      	ldr	r3, [r0, #24]
   d6502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6506:	d102      	bne.n	d650e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d6508:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6520 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d650c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d650e:	ee07 3a90 	vmov	s15, r3
   d6512:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6524 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d6516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d651a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d651e:	4770      	bx	lr
   d6520:	00000000 	.word	0x00000000
   d6524:	42c80000 	.word	0x42c80000

000d6528 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6528:	7d03      	ldrb	r3, [r0, #20]
   d652a:	b11b      	cbz	r3, d6534 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d652c:	6a03      	ldr	r3, [r0, #32]
   d652e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6532:	d102      	bne.n	d653a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d6534:	ed9f 0a05 	vldr	s0, [pc, #20]	; d654c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6538:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d653a:	ee07 3a90 	vmov	s15, r3
   d653e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6550 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d6542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6546:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d654a:	4770      	bx	lr
   d654c:	00000000 	.word	0x00000000
   d6550:	42c80000 	.word	0x42c80000

000d6554 <_ZN14CellularSignalD0Ev>:
   d6554:	b510      	push	{r4, lr}
   d6556:	2128      	movs	r1, #40	; 0x28
   d6558:	4604      	mov	r4, r0
   d655a:	f001 fc2a 	bl	d7db2 <_ZdlPvj>
   d655e:	4620      	mov	r0, r4
   d6560:	bd10      	pop	{r4, pc}
	...

000d6564 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6564:	7d03      	ldrb	r3, [r0, #20]
   d6566:	b17b      	cbz	r3, d6588 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6568:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d656a:	2b00      	cmp	r3, #0
   d656c:	db0c      	blt.n	d6588 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d656e:	ee07 3a90 	vmov	s15, r3
   d6572:	eddf 6a07 	vldr	s13, [pc, #28]	; d6590 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6576:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6594 <_ZNK14CellularSignal10getQualityEv+0x30>
   d657a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d657e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6582:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6586:	4770      	bx	lr
    }

    return -1.0f;
   d6588:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d658c:	4770      	bx	lr
   d658e:	bf00      	nop
   d6590:	477fff00 	.word	0x477fff00
   d6594:	42c80000 	.word	0x42c80000

000d6598 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d6598:	7d03      	ldrb	r3, [r0, #20]
   d659a:	b17b      	cbz	r3, d65bc <_ZNK14CellularSignal11getStrengthEv+0x24>
   d659c:	69c3      	ldr	r3, [r0, #28]
   d659e:	2b00      	cmp	r3, #0
   d65a0:	db0c      	blt.n	d65bc <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d65a2:	ee07 3a90 	vmov	s15, r3
   d65a6:	eddf 6a07 	vldr	s13, [pc, #28]	; d65c4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d65aa:	ed9f 0a07 	vldr	s0, [pc, #28]	; d65c8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d65ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d65b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d65b6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d65ba:	4770      	bx	lr
    }

    return -1.0f;
   d65bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d65c0:	4770      	bx	lr
   d65c2:	bf00      	nop
   d65c4:	477fff00 	.word	0x477fff00
   d65c8:	42c80000 	.word	0x42c80000

000d65cc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d65cc:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d65ce:	460d      	mov	r5, r1
   d65d0:	f100 0410 	add.w	r4, r0, #16
   d65d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65d8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d65dc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d65e0:	2001      	movs	r0, #1
   d65e2:	bd30      	pop	{r4, r5, pc}

000d65e4 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d65e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65e8:	4607      	mov	r7, r0
   d65ea:	460c      	mov	r4, r1
{
    if (base == 0) {
   d65ec:	4615      	mov	r5, r2
   d65ee:	b92a      	cbnz	r2, d65fc <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d65f0:	6803      	ldr	r3, [r0, #0]
   d65f2:	b2c9      	uxtb	r1, r1
   d65f4:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d65f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d65fa:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d65fc:	2900      	cmp	r1, #0
   d65fe:	da07      	bge.n	d6610 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d6600:	2a0a      	cmp	r2, #10
   d6602:	d105      	bne.n	d6610 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d6604:	212d      	movs	r1, #45	; 0x2d
   d6606:	f000 fe1f 	bl	d7248 <_ZN5Print5printEc>
            val = -n;
   d660a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d660c:	4606      	mov	r6, r0
            val = -n;
   d660e:	e001      	b.n	d6614 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d6610:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6612:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6614:	b2ea      	uxtb	r2, r5
   d6616:	4638      	mov	r0, r7
   d6618:	f000 fe2f 	bl	d727a <_ZN5Print11printNumberEmh>
    }
}
   d661c:	4430      	add	r0, r6
   d661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6622 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d6622:	b570      	push	{r4, r5, r6, lr}
   d6624:	460d      	mov	r5, r1
   d6626:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6628:	220a      	movs	r2, #10
   d662a:	6881      	ldr	r1, [r0, #8]
   d662c:	4628      	mov	r0, r5
   d662e:	f7ff ffd9 	bl	d65e4 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d6632:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6634:	4604      	mov	r4, r0
    n += p.print(',');
   d6636:	4628      	mov	r0, r5
   d6638:	f000 fe06 	bl	d7248 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d663c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d663e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d6640:	68f1      	ldr	r1, [r6, #12]
   d6642:	4628      	mov	r0, r5
   d6644:	f7ff ffce 	bl	d65e4 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d6648:	4420      	add	r0, r4
   d664a:	bd70      	pop	{r4, r5, r6, pc}

000d664c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d664c:	f1a0 0004 	sub.w	r0, r0, #4
   d6650:	f7ff bfe7 	b.w	d6622 <_ZNK14CellularSignal7printToER5Print>

000d6654 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6654:	4770      	bx	lr

000d6656 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6656:	2000      	movs	r0, #0
   d6658:	4770      	bx	lr

000d665a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d665a:	b510      	push	{r4, lr}
   d665c:	2110      	movs	r1, #16
   d665e:	4604      	mov	r4, r0
   d6660:	f001 fba7 	bl	d7db2 <_ZdlPvj>
   d6664:	4620      	mov	r0, r4
   d6666:	bd10      	pop	{r4, pc}

000d6668 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6668:	b508      	push	{r3, lr}
      { delete this; }
   d666a:	b108      	cbz	r0, d6670 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d666c:	f7ff fff5 	bl	d665a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6670:	bd08      	pop	{r3, pc}

000d6672 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6672:	2200      	movs	r2, #0
   d6674:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6676:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6678:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d667c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d667e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6682:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6684:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6686:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6688:	680c      	ldr	r4, [r1, #0]
   d668a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d668c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d668e:	bd10      	pop	{r4, pc}

000d6690 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6690:	b510      	push	{r4, lr}
   d6692:	4604      	mov	r4, r0
    free((void*)msg_);
   d6694:	6800      	ldr	r0, [r0, #0]
   d6696:	f7ff fe31 	bl	d62fc <free>
}
   d669a:	4620      	mov	r0, r4
   d669c:	bd10      	pop	{r4, pc}

000d669e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d669e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d66a0:	68c4      	ldr	r4, [r0, #12]
   d66a2:	b1f4      	cbz	r4, d66e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d66a4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d66a6:	2b02      	cmp	r3, #2
   d66a8:	d103      	bne.n	d66b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d66aa:	f104 000c 	add.w	r0, r4, #12
   d66ae:	f7ff ffef 	bl	d6690 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d66b2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d66b4:	b135      	cbz	r5, d66c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d66b6:	4628      	mov	r0, r5
   d66b8:	f7fd fd6f 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d66bc:	2110      	movs	r1, #16
   d66be:	4628      	mov	r0, r5
   d66c0:	f001 fb77 	bl	d7db2 <_ZdlPvj>
   d66c4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d66c6:	b135      	cbz	r5, d66d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d66c8:	4628      	mov	r0, r5
   d66ca:	f7fd fd66 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d66ce:	2110      	movs	r1, #16
   d66d0:	4628      	mov	r0, r5
   d66d2:	f001 fb6e 	bl	d7db2 <_ZdlPvj>
   d66d6:	4620      	mov	r0, r4
   d66d8:	2114      	movs	r1, #20
   d66da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d66de:	f001 bb68 	b.w	d7db2 <_ZdlPvj>
   d66e2:	bd38      	pop	{r3, r4, r5, pc}

000d66e4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d66e4:	b510      	push	{r4, lr}
   d66e6:	b088      	sub	sp, #32
   d66e8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d66ea:	4668      	mov	r0, sp
   d66ec:	f000 fe5a 	bl	d73a4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d66f0:	4669      	mov	r1, sp
   d66f2:	a804      	add	r0, sp, #16
   d66f4:	f000 fe78 	bl	d73e8 <_ZN6StringC1ERKS_>
   d66f8:	a804      	add	r0, sp, #16
   d66fa:	47a0      	blx	r4
   d66fc:	4604      	mov	r4, r0
   d66fe:	a804      	add	r0, sp, #16
   d6700:	f000 fe09 	bl	d7316 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6704:	4668      	mov	r0, sp
   d6706:	f000 fe06 	bl	d7316 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d670a:	4620      	mov	r0, r4
   d670c:	b008      	add	sp, #32
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6710:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6712:	2410      	movs	r4, #16
   d6714:	b085      	sub	sp, #20
   d6716:	4607      	mov	r7, r0
   d6718:	460e      	mov	r6, r1
   d671a:	4615      	mov	r5, r2
   d671c:	2100      	movs	r1, #0
   d671e:	4622      	mov	r2, r4
   d6720:	4668      	mov	r0, sp
   d6722:	f002 fa64 	bl	d8bee <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6726:	2200      	movs	r2, #0
   d6728:	4669      	mov	r1, sp
   d672a:	4610      	mov	r0, r2
         size = sizeof(*this);
   d672c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d6730:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d6732:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d6734:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6736:	f7ff fd31 	bl	d619c <spark_function>
}
   d673a:	b005      	add	sp, #20
   d673c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d673e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d673e:	b513      	push	{r0, r1, r4, lr}
   d6740:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6742:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6746:	2300      	movs	r3, #0
   d6748:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d674a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d674c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d674e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6750:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6752:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6754:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6756:	f7fe f807 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d675a:	4620      	mov	r0, r4
   d675c:	b002      	add	sp, #8
   d675e:	bd10      	pop	{r4, pc}

000d6760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6762:	460c      	mov	r4, r1
   d6764:	ad02      	add	r5, sp, #8
   d6766:	f854 3b04 	ldr.w	r3, [r4], #4
   d676a:	f845 3d08 	str.w	r3, [r5, #-8]!
   d676e:	4606      	mov	r6, r0
   d6770:	460f      	mov	r7, r1
   d6772:	a801      	add	r0, sp, #4
   d6774:	4621      	mov	r1, r4
   d6776:	f7ff fe1c 	bl	d63b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d677a:	4629      	mov	r1, r5
   d677c:	4630      	mov	r0, r6
   d677e:	f7ff ffde 	bl	d673e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6782:	a801      	add	r0, sp, #4
   d6784:	f7fd fff0 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6788:	4620      	mov	r0, r4
   d678a:	f7fd ffed 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d678e:	4638      	mov	r0, r7
   d6790:	2108      	movs	r1, #8
   d6792:	f001 fb0e 	bl	d7db2 <_ZdlPvj>
        return p;
    }
   d6796:	4630      	mov	r0, r6
   d6798:	b003      	add	sp, #12
   d679a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d679c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d679c:	b513      	push	{r0, r1, r4, lr}
   d679e:	460b      	mov	r3, r1
   d67a0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67a2:	c803      	ldmia	r0, {r0, r1}
   d67a4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d67a8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d67ac:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d67b0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d67b4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d67b8:	b002      	add	sp, #8
   d67ba:	bd10      	pop	{r4, pc}

000d67bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d67bc:	b538      	push	{r3, r4, r5, lr}
   d67be:	2300      	movs	r3, #0
   d67c0:	4604      	mov	r4, r0
   d67c2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d67c4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d67c6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d67c8:	f7fd fc67 	bl	d409a <_Znwj>
   d67cc:	b128      	cbz	r0, d67da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d67ce:	2301      	movs	r3, #1
   d67d0:	6043      	str	r3, [r0, #4]
   d67d2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d67d4:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d67d6:	6003      	str	r3, [r0, #0]
   d67d8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d67da:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d67dc:	4620      	mov	r0, r4
   d67de:	bd38      	pop	{r3, r4, r5, pc}
   d67e0:	000d9bb0 	.word	0x000d9bb0

000d67e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d67e4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d67e6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d67e8:	b90a      	cbnz	r2, d67ee <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d67ea:	f001 fafe 	bl	d7dea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67ee:	68c3      	ldr	r3, [r0, #12]
    }
   d67f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67f4:	4718      	bx	r3

000d67f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d67f6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d67f8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d67fa:	f100 0110 	add.w	r1, r0, #16
   d67fe:	f7ff fff1 	bl	d67e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6802:	bd08      	pop	{r3, pc}

000d6804 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6804:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6806:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6808:	b90a      	cbnz	r2, d680e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d680a:	f001 faee 	bl	d7dea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d680e:	68c3      	ldr	r3, [r0, #12]
    }
   d6810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6814:	4718      	bx	r3

000d6816 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6816:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6818:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d681a:	f100 0110 	add.w	r1, r0, #16
   d681e:	f7ff fff1 	bl	d6804 <_ZNKSt8functionIFvRKbEEclES1_>
   d6822:	bd08      	pop	{r3, pc}

000d6824 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6824:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6826:	2300      	movs	r3, #0
   d6828:	6083      	str	r3, [r0, #8]
   d682a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d682c:	4604      	mov	r4, r0
   d682e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6830:	b12b      	cbz	r3, d683e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6832:	2202      	movs	r2, #2
   d6834:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6836:	68eb      	ldr	r3, [r5, #12]
   d6838:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d683a:	68ab      	ldr	r3, [r5, #8]
   d683c:	60a3      	str	r3, [r4, #8]
	}
    }
   d683e:	4620      	mov	r0, r4
   d6840:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6844:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6846:	b089      	sub	sp, #36	; 0x24
   d6848:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d684a:	4668      	mov	r0, sp
   d684c:	f7ff ff11 	bl	d6672 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6850:	2300      	movs	r3, #0
   d6852:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6856:	f04f 0202 	mov.w	r2, #2
   d685a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d685e:	2b00      	cmp	r3, #0
   d6860:	d103      	bne.n	d686a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6862:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6866:	2900      	cmp	r1, #0
   d6868:	d1f7      	bne.n	d685a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d686a:	d002      	beq.n	d6872 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d686c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6870:	e063      	b.n	d693a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6872:	f114 050c 	adds.w	r5, r4, #12
   d6876:	d003      	beq.n	d6880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6878:	4669      	mov	r1, sp
   d687a:	4628      	mov	r0, r5
   d687c:	f7ff fef9 	bl	d6672 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6880:	f3bf 8f5f 	dmb	sy
   d6884:	2301      	movs	r3, #1
   d6886:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6888:	2000      	movs	r0, #0
   d688a:	f104 0308 	add.w	r3, r4, #8
   d688e:	f3bf 8f5f 	dmb	sy
   d6892:	e853 6f00 	ldrex	r6, [r3]
   d6896:	e843 0200 	strex	r2, r0, [r3]
   d689a:	2a00      	cmp	r2, #0
   d689c:	d1f9      	bne.n	d6892 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d689e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d68a2:	2e00      	cmp	r6, #0
   d68a4:	d049      	beq.n	d693a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d68a6:	f7ff fc27 	bl	d60f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d68aa:	b120      	cbz	r0, d68b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d68ac:	4629      	mov	r1, r5
   d68ae:	4630      	mov	r0, r6
   d68b0:	f7ff ff98 	bl	d67e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d68b4:	e03a      	b.n	d692c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d68b6:	4631      	mov	r1, r6
   d68b8:	a802      	add	r0, sp, #8
   d68ba:	f7ff ffb3 	bl	d6824 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d68be:	68e0      	ldr	r0, [r4, #12]
   d68c0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d68c4:	b108      	cbz	r0, d68ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d68c6:	f002 f9d5 	bl	d8c74 <strdup>
   d68ca:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d68cc:	2010      	movs	r0, #16
   d68ce:	f8ad 501c 	strh.w	r5, [sp, #28]
   d68d2:	f7fd fbe2 	bl	d409a <_Znwj>
   d68d6:	4605      	mov	r5, r0
   d68d8:	b1e8      	cbz	r0, d6916 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68da:	2700      	movs	r7, #0
   d68dc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68de:	2018      	movs	r0, #24
   d68e0:	f7fd fbdb 	bl	d409a <_Znwj>
   d68e4:	4604      	mov	r4, r0
   d68e6:	b188      	cbz	r0, d690c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d68e8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68ea:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d68ec:	a802      	add	r0, sp, #8
   d68ee:	f7ff ff55 	bl	d679c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68f2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d68f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68f6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68f8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d68fa:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68fc:	a906      	add	r1, sp, #24
   d68fe:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6900:	60e3      	str	r3, [r4, #12]
   d6902:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6906:	9205      	str	r2, [sp, #20]
   d6908:	f7ff feb3 	bl	d6672 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d690c:	4b0d      	ldr	r3, [pc, #52]	; (d6944 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d690e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6910:	4b0d      	ldr	r3, [pc, #52]	; (d6948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6912:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6914:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6916:	a806      	add	r0, sp, #24
   d6918:	f7ff feba 	bl	d6690 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d691c:	a802      	add	r0, sp, #8
   d691e:	f7fd fc3c 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6922:	2200      	movs	r2, #0
   d6924:	4629      	mov	r1, r5
   d6926:	4809      	ldr	r0, [pc, #36]	; (d694c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6928:	f7ff fbee 	bl	d6108 <application_thread_invoke>
   d692c:	4630      	mov	r0, r6
   d692e:	f7fd fc34 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6932:	2110      	movs	r1, #16
   d6934:	4630      	mov	r0, r6
   d6936:	f001 fa3c 	bl	d7db2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d693a:	4668      	mov	r0, sp
   d693c:	f7ff fea8 	bl	d6690 <_ZN8particle5ErrorD1Ev>
    }
   d6940:	b009      	add	sp, #36	; 0x24
   d6942:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6944:	000d67f7 	.word	0x000d67f7
   d6948:	000d6a6d 	.word	0x000d6a6d
   d694c:	000d637b 	.word	0x000d637b

000d6950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6954:	b08b      	sub	sp, #44	; 0x2c
   d6956:	4606      	mov	r6, r0
   d6958:	460f      	mov	r7, r1
   d695a:	4690      	mov	r8, r2
   d695c:	4699      	mov	r9, r3
   d695e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6962:	f7ff fc3b 	bl	d61dc <spark_cloud_flag_connected>
   d6966:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6968:	4683      	mov	fp, r0
   d696a:	bb30      	cbnz	r0, d69ba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d696c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6970:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6972:	a905      	add	r1, sp, #20
   d6974:	4628      	mov	r0, r5
   d6976:	f8ad 3018 	strh.w	r3, [sp, #24]
   d697a:	f7ff fe7a 	bl	d6672 <_ZN8particle5ErrorC1EOS0_>
   d697e:	2014      	movs	r0, #20
   d6980:	f7fd fb8b 	bl	d409a <_Znwj>
   d6984:	4604      	mov	r4, r0
   d6986:	b158      	cbz	r0, d69a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6988:	2302      	movs	r3, #2
   d698a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d698c:	2301      	movs	r3, #1
   d698e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6990:	f8c0 b004 	str.w	fp, [r0, #4]
   d6994:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6998:	4629      	mov	r1, r5
   d699a:	300c      	adds	r0, #12
   d699c:	f7ff fe69 	bl	d6672 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d69a0:	4630      	mov	r0, r6
   d69a2:	4621      	mov	r1, r4
   d69a4:	f840 4b04 	str.w	r4, [r0], #4
   d69a8:	f7ff ff08 	bl	d67bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d69ac:	4628      	mov	r0, r5
   d69ae:	f7ff fe6f 	bl	d6690 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d69b2:	a805      	add	r0, sp, #20
   d69b4:	f7ff fe6c 	bl	d6690 <_ZN8particle5ErrorD1Ev>
   d69b8:	e052      	b.n	d6a60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d69ba:	2400      	movs	r4, #0
   d69bc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d69be:	2014      	movs	r0, #20
   d69c0:	606c      	str	r4, [r5, #4]
   d69c2:	60ac      	str	r4, [r5, #8]
   d69c4:	9307      	str	r3, [sp, #28]
   d69c6:	f7fd fb68 	bl	d409a <_Znwj>
   d69ca:	4601      	mov	r1, r0
   d69cc:	b118      	cbz	r0, d69d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d69ce:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d69d0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d69d2:	6044      	str	r4, [r0, #4]
   d69d4:	6084      	str	r4, [r0, #8]
   d69d6:	a804      	add	r0, sp, #16
   d69d8:	9103      	str	r1, [sp, #12]
   d69da:	f7ff feef 	bl	d67bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d69de:	4b22      	ldr	r3, [pc, #136]	; (d6a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d69e0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d69e2:	2008      	movs	r0, #8
   d69e4:	f7fd fb59 	bl	d409a <_Znwj>
   d69e8:	4604      	mov	r4, r0
   d69ea:	b128      	cbz	r0, d69f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d69ec:	9b03      	ldr	r3, [sp, #12]
   d69ee:	f840 3b04 	str.w	r3, [r0], #4
   d69f2:	a904      	add	r1, sp, #16
   d69f4:	f7ff fcdd 	bl	d63b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d69f8:	9500      	str	r5, [sp, #0]
   d69fa:	fa5f f38a 	uxtb.w	r3, sl
   d69fe:	464a      	mov	r2, r9
   d6a00:	4641      	mov	r1, r8
   d6a02:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6a04:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6a06:	f7ff fbf9 	bl	d61fc <spark_send_event>
   d6a0a:	b920      	cbnz	r0, d6a16 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6a0c:	9b03      	ldr	r3, [sp, #12]
   d6a0e:	785b      	ldrb	r3, [r3, #1]
   d6a10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6a14:	b183      	cbz	r3, d6a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6a16:	9b03      	ldr	r3, [sp, #12]
   d6a18:	9305      	str	r3, [sp, #20]
   d6a1a:	a904      	add	r1, sp, #16
   d6a1c:	a806      	add	r0, sp, #24
   d6a1e:	f7ff fcc8 	bl	d63b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6a22:	a905      	add	r1, sp, #20
   d6a24:	4630      	mov	r0, r6
   d6a26:	f7ff fe8a 	bl	d673e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a2a:	a806      	add	r0, sp, #24
   d6a2c:	f7fd fe9c 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a30:	a804      	add	r0, sp, #16
   d6a32:	f7fd fe99 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a36:	e013      	b.n	d6a60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6a38:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6a3c:	a905      	add	r1, sp, #20
   d6a3e:	a803      	add	r0, sp, #12
   d6a40:	9205      	str	r2, [sp, #20]
   d6a42:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6a46:	f7ff fefd 	bl	d6844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6a4a:	a805      	add	r0, sp, #20
   d6a4c:	f7ff fe20 	bl	d6690 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6a50:	a805      	add	r0, sp, #20
   d6a52:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6a54:	f7ff fe84 	bl	d6760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6a58:	a806      	add	r0, sp, #24
   d6a5a:	f7fd fe85 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a5e:	e7da      	b.n	d6a16 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6a60:	4630      	mov	r0, r6
   d6a62:	b00b      	add	sp, #44	; 0x2c
   d6a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a68:	000d6bdd 	.word	0x000d6bdd

000d6a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a6c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a70:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a72:	d006      	beq.n	d6a82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6a74:	2a03      	cmp	r2, #3
   d6a76:	d017      	beq.n	d6aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6a78:	2a01      	cmp	r2, #1
   d6a7a:	d122      	bne.n	d6ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6a7c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6a7e:	6003      	str	r3, [r0, #0]
	      break;
   d6a80:	e01f      	b.n	d6ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6a82:	2018      	movs	r0, #24
   d6a84:	680e      	ldr	r6, [r1, #0]
   d6a86:	f7fd fb08 	bl	d409a <_Znwj>
   d6a8a:	4605      	mov	r5, r0
   d6a8c:	b150      	cbz	r0, d6aa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6a8e:	4631      	mov	r1, r6
   d6a90:	f7ff fec8 	bl	d6824 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6a94:	6930      	ldr	r0, [r6, #16]
   d6a96:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6a9a:	b108      	cbz	r0, d6aa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6a9c:	f002 f8ea 	bl	d8c74 <strdup>
   d6aa0:	6128      	str	r0, [r5, #16]
   d6aa2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6aa4:	6025      	str	r5, [r4, #0]
   d6aa6:	e00c      	b.n	d6ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6aa8:	6804      	ldr	r4, [r0, #0]
   d6aaa:	b154      	cbz	r4, d6ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6aac:	f104 0010 	add.w	r0, r4, #16
   d6ab0:	f7ff fdee 	bl	d6690 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	f7fd fb70 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6aba:	2118      	movs	r1, #24
   d6abc:	4620      	mov	r0, r4
   d6abe:	f001 f978 	bl	d7db2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6ac2:	2000      	movs	r0, #0
   d6ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ac6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ac6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ac8:	2300      	movs	r3, #0
   d6aca:	6083      	str	r3, [r0, #8]
   d6acc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ace:	4604      	mov	r4, r0
   d6ad0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6ad2:	b12b      	cbz	r3, d6ae0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6ad4:	2202      	movs	r2, #2
   d6ad6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6ad8:	68eb      	ldr	r3, [r5, #12]
   d6ada:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6adc:	68ab      	ldr	r3, [r5, #8]
   d6ade:	60a3      	str	r3, [r4, #8]
	}
    }
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	bd38      	pop	{r3, r4, r5, pc}

000d6ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ae4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6ae6:	b570      	push	{r4, r5, r6, lr}
   d6ae8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6aea:	d006      	beq.n	d6afa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6aec:	2a03      	cmp	r2, #3
   d6aee:	d011      	beq.n	d6b14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6af0:	2a01      	cmp	r2, #1
   d6af2:	d118      	bne.n	d6b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6af4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6af6:	6003      	str	r3, [r0, #0]
	      break;
   d6af8:	e015      	b.n	d6b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6afa:	2014      	movs	r0, #20
   d6afc:	680e      	ldr	r6, [r1, #0]
   d6afe:	f7fd facc 	bl	d409a <_Znwj>
   d6b02:	4605      	mov	r5, r0
   d6b04:	b120      	cbz	r0, d6b10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6b06:	4631      	mov	r1, r6
   d6b08:	f7ff ffdd 	bl	d6ac6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6b0c:	7c33      	ldrb	r3, [r6, #16]
   d6b0e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6b10:	6025      	str	r5, [r4, #0]
   d6b12:	e008      	b.n	d6b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b14:	6804      	ldr	r4, [r0, #0]
   d6b16:	b134      	cbz	r4, d6b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b18:	4620      	mov	r0, r4
   d6b1a:	f7fd fb3e 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b1e:	2114      	movs	r1, #20
   d6b20:	4620      	mov	r0, r4
   d6b22:	f001 f946 	bl	d7db2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6b26:	2000      	movs	r0, #0
   d6b28:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6b2c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6b2e:	2300      	movs	r3, #0
   d6b30:	b087      	sub	sp, #28
   d6b32:	460c      	mov	r4, r1
   d6b34:	f3bf 8f5f 	dmb	sy
   d6b38:	e850 6f00 	ldrex	r6, [r0]
   d6b3c:	e840 3200 	strex	r2, r3, [r0]
   d6b40:	2a00      	cmp	r2, #0
   d6b42:	d1f9      	bne.n	d6b38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6b44:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6b48:	2e00      	cmp	r6, #0
   d6b4a:	d03f      	beq.n	d6bcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6b4c:	4618      	mov	r0, r3
   d6b4e:	f7ff fad3 	bl	d60f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6b52:	4607      	mov	r7, r0
   d6b54:	b120      	cbz	r0, d6b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6b56:	4621      	mov	r1, r4
   d6b58:	4630      	mov	r0, r6
   d6b5a:	f7ff fe53 	bl	d6804 <_ZNKSt8functionIFvRKbEEclES1_>
   d6b5e:	e02e      	b.n	d6bbe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b60:	4631      	mov	r1, r6
   d6b62:	a801      	add	r0, sp, #4
   d6b64:	f7ff ffaf 	bl	d6ac6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6b68:	7823      	ldrb	r3, [r4, #0]
   d6b6a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6b6e:	2010      	movs	r0, #16
   d6b70:	f7fd fa93 	bl	d409a <_Znwj>
   d6b74:	4605      	mov	r5, r0
   d6b76:	b1d0      	cbz	r0, d6bae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b78:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b7a:	2014      	movs	r0, #20
   d6b7c:	f7fd fa8d 	bl	d409a <_Znwj>
   d6b80:	4604      	mov	r4, r0
   d6b82:	b178      	cbz	r0, d6ba4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b84:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6b86:	4601      	mov	r1, r0
   d6b88:	a801      	add	r0, sp, #4
   d6b8a:	f7ff fe07 	bl	d679c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b8e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6b90:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b92:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b94:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6b96:	9203      	str	r2, [sp, #12]
   d6b98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b9a:	60e3      	str	r3, [r4, #12]
   d6b9c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6ba0:	9204      	str	r2, [sp, #16]
   d6ba2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6ba4:	4b0a      	ldr	r3, [pc, #40]	; (d6bd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6ba6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6ba8:	4b0a      	ldr	r3, [pc, #40]	; (d6bd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6baa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6bac:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6bae:	a801      	add	r0, sp, #4
   d6bb0:	f7fd faf3 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6bb4:	2200      	movs	r2, #0
   d6bb6:	4629      	mov	r1, r5
   d6bb8:	4807      	ldr	r0, [pc, #28]	; (d6bd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6bba:	f7ff faa5 	bl	d6108 <application_thread_invoke>
   d6bbe:	4630      	mov	r0, r6
   d6bc0:	f7fd faeb 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6bc4:	2110      	movs	r1, #16
   d6bc6:	4630      	mov	r0, r6
   d6bc8:	f001 f8f3 	bl	d7db2 <_ZdlPvj>
        }
    }
   d6bcc:	b007      	add	sp, #28
   d6bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6bd0:	000d6817 	.word	0x000d6817
   d6bd4:	000d6ae5 	.word	0x000d6ae5
   d6bd8:	000d637b 	.word	0x000d637b

000d6bdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6bdc:	b530      	push	{r4, r5, lr}
   d6bde:	b085      	sub	sp, #20
   d6be0:	4604      	mov	r4, r0
   d6be2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6be4:	4668      	mov	r0, sp
   d6be6:	4611      	mov	r1, r2
   d6be8:	f7ff fdba 	bl	d6760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6bec:	b17c      	cbz	r4, d6c0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6bee:	b224      	sxth	r4, r4
   d6bf0:	4628      	mov	r0, r5
   d6bf2:	b10d      	cbz	r5, d6bf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6bf4:	f002 f83e 	bl	d8c74 <strdup>
   d6bf8:	9002      	str	r0, [sp, #8]
   d6bfa:	a902      	add	r1, sp, #8
   d6bfc:	4668      	mov	r0, sp
   d6bfe:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6c02:	f7ff fe1f 	bl	d6844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6c06:	a802      	add	r0, sp, #8
   d6c08:	f7ff fd42 	bl	d6690 <_ZN8particle5ErrorD1Ev>
   d6c0c:	e01d      	b.n	d6c4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6c0e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6c10:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6c14:	f04f 0201 	mov.w	r2, #1
   d6c18:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6c1c:	42a3      	cmp	r3, r4
   d6c1e:	d103      	bne.n	d6c28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6c20:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6c24:	2900      	cmp	r1, #0
   d6c26:	d1f7      	bne.n	d6c18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6c28:	d002      	beq.n	d6c30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6c2a:	f88d 3008 	strb.w	r3, [sp, #8]
   d6c2e:	e00c      	b.n	d6c4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6c30:	f110 010c 	adds.w	r1, r0, #12
   d6c34:	f04f 0301 	mov.w	r3, #1
   d6c38:	bf18      	it	ne
   d6c3a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6c3c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6c40:	3004      	adds	r0, #4
   d6c42:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6c46:	f7ff ff71 	bl	d6b2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6c4a:	a801      	add	r0, sp, #4
   d6c4c:	f7fd fd8c 	bl	d4768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6c50:	b005      	add	sp, #20
   d6c52:	bd30      	pop	{r4, r5, pc}

000d6c54 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c54:	2200      	movs	r2, #0
   d6c56:	4611      	mov	r1, r2
   d6c58:	6840      	ldr	r0, [r0, #4]
   d6c5a:	f7ff bb2f 	b.w	d62bc <network_listening>

000d6c5e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c5e:	2200      	movs	r2, #0
   d6c60:	4611      	mov	r1, r2
   d6c62:	6840      	ldr	r0, [r0, #4]
   d6c64:	f7ff bb3a 	b.w	d62dc <network_get_listen_timeout>

000d6c68 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c68:	2200      	movs	r2, #0
   d6c6a:	6840      	ldr	r0, [r0, #4]
   d6c6c:	f7ff bb2e 	b.w	d62cc <network_set_listen_timeout>

000d6c70 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c70:	2200      	movs	r2, #0
   d6c72:	f081 0101 	eor.w	r1, r1, #1
   d6c76:	6840      	ldr	r0, [r0, #4]
   d6c78:	f7ff bb18 	b.w	d62ac <network_listen>

000d6c7c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6c7c:	2300      	movs	r3, #0
   d6c7e:	461a      	mov	r2, r3
   d6c80:	4619      	mov	r1, r3
   d6c82:	6840      	ldr	r0, [r0, #4]
   d6c84:	f7ff bb0a 	b.w	d629c <network_off>

000d6c88 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6c88:	2300      	movs	r3, #0
   d6c8a:	461a      	mov	r2, r3
   d6c8c:	4619      	mov	r1, r3
   d6c8e:	6840      	ldr	r0, [r0, #4]
   d6c90:	f7ff bafc 	b.w	d628c <network_on>

000d6c94 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6c94:	2200      	movs	r2, #0
   d6c96:	4611      	mov	r1, r2
   d6c98:	6840      	ldr	r0, [r0, #4]
   d6c9a:	f7ff baef 	b.w	d627c <network_ready>

000d6c9e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6c9e:	2200      	movs	r2, #0
   d6ca0:	4611      	mov	r1, r2
   d6ca2:	6840      	ldr	r0, [r0, #4]
   d6ca4:	f7ff bada 	b.w	d625c <network_connecting>

000d6ca8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6ca8:	2200      	movs	r2, #0
   d6caa:	2102      	movs	r1, #2
   d6cac:	6840      	ldr	r0, [r0, #4]
   d6cae:	f7ff badd 	b.w	d626c <network_disconnect>

000d6cb2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6cb2:	2300      	movs	r3, #0
   d6cb4:	461a      	mov	r2, r3
   d6cb6:	6840      	ldr	r0, [r0, #4]
   d6cb8:	f7ff bac8 	b.w	d624c <network_connect>

000d6cbc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6cbc:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6cbe:	2203      	movs	r2, #3
   d6cc0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6cc2:	4a02      	ldr	r2, [pc, #8]	; (d6ccc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6cc4:	601a      	str	r2, [r3, #0]
   d6cc6:	4770      	bx	lr
   d6cc8:	2003e360 	.word	0x2003e360
   d6ccc:	000d9bcc 	.word	0x000d9bcc

000d6cd0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6cd0:	6800      	ldr	r0, [r0, #0]
   d6cd2:	f000 b8a5 	b.w	d6e20 <_ZN7TwoWire4lockEv>

000d6cd6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6cd6:	b510      	push	{r4, lr}
   d6cd8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d6cda:	6001      	str	r1, [r0, #0]
   d6cdc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d6cde:	b10a      	cbz	r2, d6ce4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6ce0:	f7ff fff6 	bl	d6cd0 <_ZN9FuelGauge4lockEv>
    }
}
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	bd10      	pop	{r4, pc}

000d6ce8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d6ce8:	b538      	push	{r3, r4, r5, lr}
   d6cea:	4604      	mov	r4, r0
   d6cec:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6cee:	f001 f815 	bl	d7d1c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6cf2:	462a      	mov	r2, r5
   d6cf4:	4601      	mov	r1, r0
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	f7ff ffed 	bl	d6cd6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	bd38      	pop	{r3, r4, r5, pc}

000d6d00 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6d00:	6800      	ldr	r0, [r0, #0]
   d6d02:	f000 b896 	b.w	d6e32 <_ZN7TwoWire6unlockEv>

000d6d06 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6d06:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6d08:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6d0a:	4604      	mov	r4, r0
{
    if (lock_) {
   d6d0c:	b10b      	cbz	r3, d6d12 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6d0e:	f7ff fff7 	bl	d6d00 <_ZN9FuelGauge6unlockEv>
    }
}
   d6d12:	4620      	mov	r0, r4
   d6d14:	bd10      	pop	{r4, pc}

000d6d16 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6d16:	4770      	bx	lr

000d6d18 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d1a:	4606      	mov	r6, r0
   d6d1c:	4615      	mov	r5, r2
   d6d1e:	460c      	mov	r4, r1
   d6d20:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d22:	42bc      	cmp	r4, r7
   d6d24:	d006      	beq.n	d6d34 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6d26:	6833      	ldr	r3, [r6, #0]
   d6d28:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6d2c:	689b      	ldr	r3, [r3, #8]
   d6d2e:	4630      	mov	r0, r6
   d6d30:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d32:	e7f6      	b.n	d6d22 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6d34:	4628      	mov	r0, r5
   d6d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d38 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6d38:	2200      	movs	r2, #0
   d6d3a:	7c00      	ldrb	r0, [r0, #16]
   d6d3c:	f7ff b8b2 	b.w	d5ea4 <HAL_I2C_Write_Data>

000d6d40 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6d40:	2100      	movs	r1, #0
   d6d42:	7c00      	ldrb	r0, [r0, #16]
   d6d44:	f7ff b8b6 	b.w	d5eb4 <HAL_I2C_Available_Data>

000d6d48 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6d48:	2100      	movs	r1, #0
   d6d4a:	7c00      	ldrb	r0, [r0, #16]
   d6d4c:	f7ff b8ba 	b.w	d5ec4 <HAL_I2C_Read_Data>

000d6d50 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d50:	2100      	movs	r1, #0
   d6d52:	7c00      	ldrb	r0, [r0, #16]
   d6d54:	f7ff b8be 	b.w	d5ed4 <HAL_I2C_Peek_Data>

000d6d58 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d58:	2100      	movs	r1, #0
   d6d5a:	7c00      	ldrb	r0, [r0, #16]
   d6d5c:	f7ff b8c2 	b.w	d5ee4 <HAL_I2C_Flush_Data>

000d6d60 <_ZN7TwoWireD0Ev>:
   d6d60:	b510      	push	{r4, lr}
   d6d62:	2114      	movs	r1, #20
   d6d64:	4604      	mov	r4, r0
   d6d66:	f001 f824 	bl	d7db2 <_ZdlPvj>
   d6d6a:	4620      	mov	r0, r4
   d6d6c:	bd10      	pop	{r4, pc}
	...

000d6d70 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d70:	b510      	push	{r4, lr}
   d6d72:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6d74:	2300      	movs	r3, #0
   d6d76:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d7c:	60a3      	str	r3, [r4, #8]
   d6d7e:	4b04      	ldr	r3, [pc, #16]	; (d6d90 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6d80:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d82:	4608      	mov	r0, r1
   d6d84:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6d86:	4611      	mov	r1, r2
   d6d88:	f7ff f8bc 	bl	d5f04 <HAL_I2C_Init>
}
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	bd10      	pop	{r4, pc}
   d6d90:	000d9c00 	.word	0x000d9c00

000d6d94 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6d94:	2300      	movs	r3, #0
   d6d96:	461a      	mov	r2, r3
   d6d98:	4619      	mov	r1, r3
   d6d9a:	7c00      	ldrb	r0, [r0, #16]
   d6d9c:	f7ff b86a 	b.w	d5e74 <HAL_I2C_Begin>

000d6da0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6da0:	b570      	push	{r4, r5, r6, lr}
   d6da2:	460c      	mov	r4, r1
   d6da4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6da6:	2514      	movs	r5, #20
   d6da8:	4606      	mov	r6, r0
   d6daa:	462a      	mov	r2, r5
   d6dac:	2100      	movs	r1, #0
   d6dae:	a801      	add	r0, sp, #4
   d6db0:	f001 ff1d 	bl	d8bee <memset>
   d6db4:	7823      	ldrb	r3, [r4, #0]
   d6db6:	f88d 3008 	strb.w	r3, [sp, #8]
   d6dba:	6863      	ldr	r3, [r4, #4]
   d6dbc:	9303      	str	r3, [sp, #12]
   d6dbe:	68e3      	ldr	r3, [r4, #12]
   d6dc0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6dc2:	2200      	movs	r2, #0
   d6dc4:	7a23      	ldrb	r3, [r4, #8]
   d6dc6:	7c30      	ldrb	r0, [r6, #16]
   d6dc8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6dcc:	a901      	add	r1, sp, #4
   d6dce:	9305      	str	r3, [sp, #20]
   d6dd0:	f7ff f8b0 	bl	d5f34 <HAL_I2C_Request_Data_Ex>
}
   d6dd4:	b006      	add	sp, #24
   d6dd6:	bd70      	pop	{r4, r5, r6, pc}

000d6dd8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dda:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6ddc:	f88d 1000 	strb.w	r1, [sp]
   d6de0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6de4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6de6:	bf18      	it	ne
   d6de8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6dea:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6dec:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dee:	f88d 3008 	strb.w	r3, [sp, #8]
   d6df2:	f7ff ffd5 	bl	d6da0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6df6:	b005      	add	sp, #20
   d6df8:	f85d fb04 	ldr.w	pc, [sp], #4

000d6dfc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6dfc:	2301      	movs	r3, #1
   d6dfe:	f7ff bfeb 	b.w	d6dd8 <_ZN7TwoWire11requestFromEhjh>

000d6e02 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6e02:	2200      	movs	r2, #0
   d6e04:	7c00      	ldrb	r0, [r0, #16]
   d6e06:	f7ff b83d 	b.w	d5e84 <HAL_I2C_Begin_Transmission>

000d6e0a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	7c00      	ldrb	r0, [r0, #16]
   d6e0e:	f7ff b841 	b.w	d5e94 <HAL_I2C_End_Transmission>

000d6e12 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6e12:	2101      	movs	r1, #1
   d6e14:	f7ff bff9 	b.w	d6e0a <_ZN7TwoWire15endTransmissionEh>

000d6e18 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6e18:	2100      	movs	r1, #0
   d6e1a:	7c00      	ldrb	r0, [r0, #16]
   d6e1c:	f7ff b86a 	b.w	d5ef4 <HAL_I2C_Is_Enabled>

000d6e20 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6e20:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6e22:	2100      	movs	r1, #0
   d6e24:	7c00      	ldrb	r0, [r0, #16]
   d6e26:	f7ff f875 	bl	d5f14 <HAL_I2C_Acquire>
}
   d6e2a:	fab0 f080 	clz	r0, r0
   d6e2e:	0940      	lsrs	r0, r0, #5
   d6e30:	bd08      	pop	{r3, pc}

000d6e32 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6e32:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6e34:	2100      	movs	r1, #0
   d6e36:	7c00      	ldrb	r0, [r0, #16]
   d6e38:	f7ff f874 	bl	d5f24 <HAL_I2C_Release>
}
   d6e3c:	fab0 f080 	clz	r0, r0
   d6e40:	0940      	lsrs	r0, r0, #5
   d6e42:	bd08      	pop	{r3, pc}

000d6e44 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6e44:	4770      	bx	lr

000d6e46 <_ZN9IPAddressD0Ev>:
   d6e46:	b510      	push	{r4, lr}
   d6e48:	2118      	movs	r1, #24
   d6e4a:	4604      	mov	r4, r0
   d6e4c:	f000 ffb1 	bl	d7db2 <_ZdlPvj>
   d6e50:	4620      	mov	r0, r4
   d6e52:	bd10      	pop	{r4, pc}

000d6e54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e56:	7d03      	ldrb	r3, [r0, #20]
   d6e58:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e5a:	b08d      	sub	sp, #52	; 0x34
   d6e5c:	460e      	mov	r6, r1
   d6e5e:	f100 0704 	add.w	r7, r0, #4
   d6e62:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e66:	d002      	beq.n	d6e6e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e68:	f100 0508 	add.w	r5, r0, #8
   d6e6c:	e018      	b.n	d6ea0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e6e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e70:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e72:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e76:	232f      	movs	r3, #47	; 0x2f
   d6e78:	462a      	mov	r2, r5
   d6e7a:	200a      	movs	r0, #10
   d6e7c:	f7ff f862 	bl	d5f44 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e80:	4628      	mov	r0, r5
   d6e82:	f001 ff12 	bl	d8caa <strlen>
   d6e86:	6833      	ldr	r3, [r6, #0]
   d6e88:	4602      	mov	r2, r0
   d6e8a:	68db      	ldr	r3, [r3, #12]
   d6e8c:	4629      	mov	r1, r5
   d6e8e:	4630      	mov	r0, r6
   d6e90:	4798      	blx	r3
   d6e92:	e00f      	b.n	d6eb4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6e94:	b124      	cbz	r4, d6ea0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6e96:	212e      	movs	r1, #46	; 0x2e
   d6e98:	4630      	mov	r0, r6
   d6e9a:	f000 f9d5 	bl	d7248 <_ZN5Print5printEc>
   d6e9e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6ea0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ea4:	220a      	movs	r2, #10
   d6ea6:	4630      	mov	r0, r6
   d6ea8:	f000 f9e7 	bl	d727a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6eac:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6eae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6eb0:	d1f0      	bne.n	d6e94 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6eb2:	4620      	mov	r0, r4
    }
    return n;
}
   d6eb4:	b00d      	add	sp, #52	; 0x34
   d6eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6eb8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6eb8:	b510      	push	{r4, lr}
   d6eba:	4b05      	ldr	r3, [pc, #20]	; (d6ed0 <_ZN9IPAddressC1Ev+0x18>)
   d6ebc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6ebe:	2211      	movs	r2, #17
   d6ec0:	f840 3b04 	str.w	r3, [r0], #4
   d6ec4:	2100      	movs	r1, #0
   d6ec6:	f001 fe92 	bl	d8bee <memset>
{
    clear();
}
   d6eca:	4620      	mov	r0, r4
   d6ecc:	bd10      	pop	{r4, pc}
   d6ece:	bf00      	nop
   d6ed0:	000d9c28 	.word	0x000d9c28

000d6ed4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6ed4:	4603      	mov	r3, r0
   d6ed6:	4a07      	ldr	r2, [pc, #28]	; (d6ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6ed8:	b510      	push	{r4, lr}
   d6eda:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6ede:	f101 0210 	add.w	r2, r1, #16
   d6ee2:	f851 4b04 	ldr.w	r4, [r1], #4
   d6ee6:	f843 4b04 	str.w	r4, [r3], #4
   d6eea:	4291      	cmp	r1, r2
   d6eec:	d1f9      	bne.n	d6ee2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6eee:	780a      	ldrb	r2, [r1, #0]
   d6ef0:	701a      	strb	r2, [r3, #0]
}
   d6ef2:	bd10      	pop	{r4, pc}
   d6ef4:	000d9c28 	.word	0x000d9c28

000d6ef8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6ef8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6efa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6efe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6f02:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6f06:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6f0a:	2304      	movs	r3, #4
   d6f0c:	6041      	str	r1, [r0, #4]
   d6f0e:	7503      	strb	r3, [r0, #20]
   d6f10:	bd10      	pop	{r4, pc}

000d6f12 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6f12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6f14:	780d      	ldrb	r5, [r1, #0]
   d6f16:	788b      	ldrb	r3, [r1, #2]
   d6f18:	784a      	ldrb	r2, [r1, #1]
   d6f1a:	78c9      	ldrb	r1, [r1, #3]
   d6f1c:	9100      	str	r1, [sp, #0]
   d6f1e:	4629      	mov	r1, r5
   d6f20:	f7ff ffea 	bl	d6ef8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6f24:	b003      	add	sp, #12
   d6f26:	bd30      	pop	{r4, r5, pc}

000d6f28 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6f28:	4b01      	ldr	r3, [pc, #4]	; (d6f30 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6f2a:	4a02      	ldr	r2, [pc, #8]	; (d6f34 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6f2c:	601a      	str	r2, [r3, #0]
   d6f2e:	4770      	bx	lr
   d6f30:	2003e368 	.word	0x2003e368
   d6f34:	000d9ca7 	.word	0x000d9ca7

000d6f38 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f38:	2200      	movs	r2, #0
   d6f3a:	4611      	mov	r1, r2
   d6f3c:	6840      	ldr	r0, [r0, #4]
   d6f3e:	f7ff b9bd 	b.w	d62bc <network_listening>

000d6f42 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f42:	2200      	movs	r2, #0
   d6f44:	4611      	mov	r1, r2
   d6f46:	6840      	ldr	r0, [r0, #4]
   d6f48:	f7ff b9c8 	b.w	d62dc <network_get_listen_timeout>

000d6f4c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6f4c:	2200      	movs	r2, #0
   d6f4e:	6840      	ldr	r0, [r0, #4]
   d6f50:	f7ff b9bc 	b.w	d62cc <network_set_listen_timeout>

000d6f54 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f54:	2200      	movs	r2, #0
   d6f56:	f081 0101 	eor.w	r1, r1, #1
   d6f5a:	6840      	ldr	r0, [r0, #4]
   d6f5c:	f7ff b9a6 	b.w	d62ac <network_listen>

000d6f60 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6f60:	2300      	movs	r3, #0
   d6f62:	461a      	mov	r2, r3
   d6f64:	2101      	movs	r1, #1
   d6f66:	6840      	ldr	r0, [r0, #4]
   d6f68:	f7ff b998 	b.w	d629c <network_off>

000d6f6c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f6c:	2300      	movs	r3, #0
   d6f6e:	461a      	mov	r2, r3
   d6f70:	4619      	mov	r1, r3
   d6f72:	6840      	ldr	r0, [r0, #4]
   d6f74:	f7ff b98a 	b.w	d628c <network_on>

000d6f78 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f78:	2200      	movs	r2, #0
   d6f7a:	4611      	mov	r1, r2
   d6f7c:	6840      	ldr	r0, [r0, #4]
   d6f7e:	f7ff b97d 	b.w	d627c <network_ready>

000d6f82 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f82:	2200      	movs	r2, #0
   d6f84:	4611      	mov	r1, r2
   d6f86:	6840      	ldr	r0, [r0, #4]
   d6f88:	f7ff b968 	b.w	d625c <network_connecting>

000d6f8c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f8c:	2200      	movs	r2, #0
   d6f8e:	2102      	movs	r1, #2
   d6f90:	6840      	ldr	r0, [r0, #4]
   d6f92:	f7ff b96b 	b.w	d626c <network_disconnect>

000d6f96 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f96:	2300      	movs	r3, #0
   d6f98:	461a      	mov	r2, r3
   d6f9a:	6840      	ldr	r0, [r0, #4]
   d6f9c:	f7ff b956 	b.w	d624c <network_connect>

000d6fa0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6fa0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fa2:	4605      	mov	r5, r0
   d6fa4:	b188      	cbz	r0, d6fca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fa6:	6804      	ldr	r4, [r0, #0]
   d6fa8:	b14c      	cbz	r4, d6fbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6faa:	68a3      	ldr	r3, [r4, #8]
   d6fac:	b11b      	cbz	r3, d6fb6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6fae:	2203      	movs	r2, #3
   d6fb0:	4621      	mov	r1, r4
   d6fb2:	4620      	mov	r0, r4
   d6fb4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fb6:	2110      	movs	r1, #16
   d6fb8:	4620      	mov	r0, r4
   d6fba:	f000 fefa 	bl	d7db2 <_ZdlPvj>
   d6fbe:	4628      	mov	r0, r5
   d6fc0:	2114      	movs	r1, #20
      }
   d6fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fc6:	f000 bef4 	b.w	d7db2 <_ZdlPvj>
   d6fca:	bd38      	pop	{r3, r4, r5, pc}

000d6fcc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6fcc:	b110      	cbz	r0, d6fd4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6fce:	6803      	ldr	r3, [r0, #0]
   d6fd0:	685b      	ldr	r3, [r3, #4]
   d6fd2:	4718      	bx	r3
   d6fd4:	4770      	bx	lr

000d6fd6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6fd6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6fd8:	6803      	ldr	r3, [r0, #0]
   d6fda:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6fdc:	b1bb      	cbz	r3, d700e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6fde:	6858      	ldr	r0, [r3, #4]
   d6fe0:	f7fe fe48 	bl	d5c74 <os_thread_is_current>
   d6fe4:	b978      	cbnz	r0, d7006 <_ZN6ThreadD1Ev+0x30>
   d6fe6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6fe8:	7c5a      	ldrb	r2, [r3, #17]
   d6fea:	b912      	cbnz	r2, d6ff2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6fec:	6858      	ldr	r0, [r3, #4]
   d6fee:	f7fe fe51 	bl	d5c94 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6ff2:	6823      	ldr	r3, [r4, #0]
   d6ff4:	6858      	ldr	r0, [r3, #4]
   d6ff6:	f7fe fe55 	bl	d5ca4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ffa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6ffc:	2300      	movs	r3, #0
   d6ffe:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7000:	b128      	cbz	r0, d700e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7002:	f7ff ffcd 	bl	d6fa0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7006:	6820      	ldr	r0, [r4, #0]
   d7008:	b108      	cbz	r0, d700e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d700a:	f7ff ffc9 	bl	d6fa0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d700e:	4620      	mov	r0, r4
   d7010:	bd10      	pop	{r4, pc}

000d7012 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7012:	b538      	push	{r3, r4, r5, lr}
   d7014:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7016:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d701a:	b108      	cbz	r0, d7020 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d701c:	f7fd f841 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7020:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7024:	b108      	cbz	r0, d702a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7026:	f7fe fe75 	bl	d5d14 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d702a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d702e:	b135      	cbz	r5, d703e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7030:	4628      	mov	r0, r5
   d7032:	f7ff ffd0 	bl	d6fd6 <_ZN6ThreadD1Ev>
   d7036:	2104      	movs	r1, #4
   d7038:	4628      	mov	r0, r5
   d703a:	f000 feba 	bl	d7db2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d703e:	6820      	ldr	r0, [r4, #0]
   d7040:	b108      	cbz	r0, d7046 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7042:	f7ff ffc3 	bl	d6fcc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7046:	4620      	mov	r0, r4
   d7048:	bd38      	pop	{r3, r4, r5, pc}
	...

000d704c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d704c:	b510      	push	{r4, lr}
   d704e:	4b04      	ldr	r3, [pc, #16]	; (d7060 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7050:	4604      	mov	r4, r0
   d7052:	f840 3b08 	str.w	r3, [r0], #8
   d7056:	f7ff ffdc 	bl	d7012 <_ZN5spark11MeshPublishD1Ev>
   d705a:	4620      	mov	r0, r4
   d705c:	bd10      	pop	{r4, pc}
   d705e:	bf00      	nop
   d7060:	000d9d18 	.word	0x000d9d18

000d7064 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7064:	b538      	push	{r3, r4, r5, lr}
   d7066:	4c0e      	ldr	r4, [pc, #56]	; (d70a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7068:	4b0e      	ldr	r3, [pc, #56]	; (d70a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d706a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d706c:	2500      	movs	r5, #0
   d706e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7070:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7074:	6063      	str	r3, [r4, #4]
   d7076:	60a5      	str	r5, [r4, #8]
   d7078:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d707c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7080:	f7fe fe40 	bl	d5d04 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7084:	4b08      	ldr	r3, [pc, #32]	; (d70a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7086:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d708a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d708e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7090:	4620      	mov	r0, r4
   d7092:	4a06      	ldr	r2, [pc, #24]	; (d70ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7094:	4906      	ldr	r1, [pc, #24]	; (d70b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d709a:	f000 be85 	b.w	d7da8 <__aeabi_atexit>
   d709e:	bf00      	nop
   d70a0:	2003e36c 	.word	0x2003e36c
   d70a4:	000d9d4c 	.word	0x000d9d4c
   d70a8:	000d9d18 	.word	0x000d9d18
   d70ac:	2003e190 	.word	0x2003e190
   d70b0:	000d704d 	.word	0x000d704d

000d70b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d70b4:	2300      	movs	r3, #0
   d70b6:	461a      	mov	r2, r3
   d70b8:	6840      	ldr	r0, [r0, #4]
   d70ba:	f7ff b8c7 	b.w	d624c <network_connect>

000d70be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d70be:	2200      	movs	r2, #0
   d70c0:	2102      	movs	r1, #2
   d70c2:	6840      	ldr	r0, [r0, #4]
   d70c4:	f7ff b8d2 	b.w	d626c <network_disconnect>

000d70c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d70c8:	2200      	movs	r2, #0
   d70ca:	4611      	mov	r1, r2
   d70cc:	6840      	ldr	r0, [r0, #4]
   d70ce:	f7ff b8c5 	b.w	d625c <network_connecting>

000d70d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d70d2:	2200      	movs	r2, #0
   d70d4:	4611      	mov	r1, r2
   d70d6:	6840      	ldr	r0, [r0, #4]
   d70d8:	f7ff b8d0 	b.w	d627c <network_ready>

000d70dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d70dc:	2300      	movs	r3, #0
   d70de:	461a      	mov	r2, r3
   d70e0:	4619      	mov	r1, r3
   d70e2:	6840      	ldr	r0, [r0, #4]
   d70e4:	f7ff b8d2 	b.w	d628c <network_on>

000d70e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d70e8:	2300      	movs	r3, #0
   d70ea:	461a      	mov	r2, r3
   d70ec:	4619      	mov	r1, r3
   d70ee:	6840      	ldr	r0, [r0, #4]
   d70f0:	f7ff b8d4 	b.w	d629c <network_off>

000d70f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d70f4:	2200      	movs	r2, #0
   d70f6:	f081 0101 	eor.w	r1, r1, #1
   d70fa:	6840      	ldr	r0, [r0, #4]
   d70fc:	f7ff b8d6 	b.w	d62ac <network_listen>

000d7100 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7100:	2200      	movs	r2, #0
   d7102:	6840      	ldr	r0, [r0, #4]
   d7104:	f7ff b8e2 	b.w	d62cc <network_set_listen_timeout>

000d7108 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7108:	2200      	movs	r2, #0
   d710a:	4611      	mov	r1, r2
   d710c:	6840      	ldr	r0, [r0, #4]
   d710e:	f7ff b8e5 	b.w	d62dc <network_get_listen_timeout>

000d7112 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7112:	2200      	movs	r2, #0
   d7114:	4611      	mov	r1, r2
   d7116:	6840      	ldr	r0, [r0, #4]
   d7118:	f7ff b8d0 	b.w	d62bc <network_listening>

000d711c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d711c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7120:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7122:	b095      	sub	sp, #84	; 0x54
   d7124:	4616      	mov	r6, r2
   d7126:	460d      	mov	r5, r1
   d7128:	4607      	mov	r7, r0
    IPAddress addr;
   d712a:	f7ff fec5 	bl	d6eb8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d712e:	4621      	mov	r1, r4
   d7130:	2220      	movs	r2, #32
   d7132:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7134:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7136:	f001 fd5a 	bl	d8bee <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d713a:	2340      	movs	r3, #64	; 0x40
   d713c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d713e:	4621      	mov	r1, r4
   d7140:	466b      	mov	r3, sp
   d7142:	aa0c      	add	r2, sp, #48	; 0x30
   d7144:	4630      	mov	r0, r6
   d7146:	f7fe ff0d 	bl	d5f64 <netdb_getaddrinfo>
    if (!r) {
   d714a:	4604      	mov	r4, r0
   d714c:	2800      	cmp	r0, #0
   d714e:	d144      	bne.n	d71da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7150:	4602      	mov	r2, r0
   d7152:	2101      	movs	r1, #1
   d7154:	6868      	ldr	r0, [r5, #4]
   d7156:	f7ff f891 	bl	d627c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d715a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d715c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d715e:	4622      	mov	r2, r4
   d7160:	6868      	ldr	r0, [r5, #4]
   d7162:	f7ff f88b 	bl	d627c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7166:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7168:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d716a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d716c:	2e00      	cmp	r6, #0
   d716e:	d034      	beq.n	d71da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7170:	2900      	cmp	r1, #0
   d7172:	d132      	bne.n	d71da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7174:	6873      	ldr	r3, [r6, #4]
   d7176:	2b02      	cmp	r3, #2
   d7178:	d002      	beq.n	d7180 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d717a:	2b0a      	cmp	r3, #10
   d717c:	d009      	beq.n	d7192 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d717e:	e02a      	b.n	d71d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7180:	f1b8 0f00 	cmp.w	r8, #0
   d7184:	d027      	beq.n	d71d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7186:	6971      	ldr	r1, [r6, #20]
   d7188:	4638      	mov	r0, r7
   d718a:	3104      	adds	r1, #4
   d718c:	f7ff fec1 	bl	d6f12 <_ZN9IPAddressaSEPKh>
   d7190:	e020      	b.n	d71d4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7192:	f1b9 0f00 	cmp.w	r9, #0
   d7196:	d01e      	beq.n	d71d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7198:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d719a:	2211      	movs	r2, #17
   d719c:	a801      	add	r0, sp, #4
   d719e:	f001 fd26 	bl	d8bee <memset>
                    a.v = 6;
   d71a2:	2306      	movs	r3, #6
   d71a4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d71a8:	ad01      	add	r5, sp, #4
   d71aa:	f104 0308 	add.w	r3, r4, #8
   d71ae:	3418      	adds	r4, #24
   d71b0:	6818      	ldr	r0, [r3, #0]
   d71b2:	6859      	ldr	r1, [r3, #4]
   d71b4:	462a      	mov	r2, r5
   d71b6:	c203      	stmia	r2!, {r0, r1}
   d71b8:	3308      	adds	r3, #8
   d71ba:	42a3      	cmp	r3, r4
   d71bc:	4615      	mov	r5, r2
   d71be:	d1f7      	bne.n	d71b0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d71c0:	a901      	add	r1, sp, #4
   d71c2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d71c4:	ad07      	add	r5, sp, #28
   d71c6:	f7ff fe85 	bl	d6ed4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71cc:	1d3c      	adds	r4, r7, #4
   d71ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71d0:	682b      	ldr	r3, [r5, #0]
   d71d2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d71d4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d71d6:	69f6      	ldr	r6, [r6, #28]
   d71d8:	e7c8      	b.n	d716c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d71da:	9800      	ldr	r0, [sp, #0]
   d71dc:	f7fe feba 	bl	d5f54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d71e0:	4638      	mov	r0, r7
   d71e2:	b015      	add	sp, #84	; 0x54
   d71e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d71e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d71e8:	4b02      	ldr	r3, [pc, #8]	; (d71f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d71ea:	4a03      	ldr	r2, [pc, #12]	; (d71f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d71ec:	601a      	str	r2, [r3, #0]
   d71ee:	2200      	movs	r2, #0
   d71f0:	605a      	str	r2, [r3, #4]
   d71f2:	4770      	bx	lr
   d71f4:	2003e540 	.word	0x2003e540
   d71f8:	000d9d4c 	.word	0x000d9d4c

000d71fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d71fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71fe:	4606      	mov	r6, r0
   d7200:	460d      	mov	r5, r1
   d7202:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7204:	2400      	movs	r4, #0
  while (size--) {
   d7206:	42bd      	cmp	r5, r7
   d7208:	d00c      	beq.n	d7224 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d720a:	6833      	ldr	r3, [r6, #0]
   d720c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7210:	689b      	ldr	r3, [r3, #8]
   d7212:	4630      	mov	r0, r6
   d7214:	4798      	blx	r3
     if (chunk>=0)
   d7216:	2800      	cmp	r0, #0
   d7218:	db01      	blt.n	d721e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d721a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d721c:	e7f3      	b.n	d7206 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d721e:	2c00      	cmp	r4, #0
   d7220:	bf08      	it	eq
   d7222:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7224:	4620      	mov	r0, r4
   d7226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7228 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7228:	b570      	push	{r4, r5, r6, lr}
   d722a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d722c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d722e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7230:	b149      	cbz	r1, d7246 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7232:	f001 fd3a 	bl	d8caa <strlen>
   d7236:	682b      	ldr	r3, [r5, #0]
   d7238:	4602      	mov	r2, r0
   d723a:	4621      	mov	r1, r4
   d723c:	4628      	mov	r0, r5
   d723e:	68db      	ldr	r3, [r3, #12]
    }
   d7240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7244:	4718      	bx	r3
    }
   d7246:	bd70      	pop	{r4, r5, r6, pc}

000d7248 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7248:	6803      	ldr	r3, [r0, #0]
   d724a:	689b      	ldr	r3, [r3, #8]
   d724c:	4718      	bx	r3

000d724e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d724e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7250:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7252:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7254:	f7ff fff8 	bl	d7248 <_ZN5Print5printEc>
  n += print('\n');
   d7258:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d725a:	4604      	mov	r4, r0
  n += print('\n');
   d725c:	4628      	mov	r0, r5
   d725e:	f7ff fff3 	bl	d7248 <_ZN5Print5printEc>
  return n;
}
   d7262:	4420      	add	r0, r4
   d7264:	bd38      	pop	{r3, r4, r5, pc}

000d7266 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7266:	b538      	push	{r3, r4, r5, lr}
   d7268:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d726a:	f7ff ffdd 	bl	d7228 <_ZN5Print5writeEPKc>
   d726e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7270:	4628      	mov	r0, r5
   d7272:	f7ff ffec 	bl	d724e <_ZN5Print7printlnEv>
  return n;
}
   d7276:	4420      	add	r0, r4
   d7278:	bd38      	pop	{r3, r4, r5, pc}

000d727a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d727a:	b530      	push	{r4, r5, lr}
   d727c:	b08b      	sub	sp, #44	; 0x2c
   d727e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7280:	2100      	movs	r1, #0
   d7282:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7286:	2a01      	cmp	r2, #1
   d7288:	bf98      	it	ls
   d728a:	220a      	movls	r2, #10
   d728c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7290:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7294:	fb05 3312 	mls	r3, r5, r2, r3
   d7298:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d729c:	2b09      	cmp	r3, #9
   d729e:	bf94      	ite	ls
   d72a0:	3330      	addls	r3, #48	; 0x30
   d72a2:	3337      	addhi	r3, #55	; 0x37
   d72a4:	b2db      	uxtb	r3, r3
   d72a6:	4621      	mov	r1, r4
   d72a8:	f804 3901 	strb.w	r3, [r4], #-1
   d72ac:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d72ae:	2d00      	cmp	r5, #0
   d72b0:	d1ee      	bne.n	d7290 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d72b2:	f7ff ffb9 	bl	d7228 <_ZN5Print5writeEPKc>
}
   d72b6:	b00b      	add	sp, #44	; 0x2c
   d72b8:	bd30      	pop	{r4, r5, pc}

000d72ba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d72ba:	b510      	push	{r4, lr}
   d72bc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d72be:	f7fc ff6c 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d72c2:	4620      	mov	r0, r4
   d72c4:	bd10      	pop	{r4, pc}
	...

000d72c8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d72c8:	4803      	ldr	r0, [pc, #12]	; (d72d8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d72ca:	4a04      	ldr	r2, [pc, #16]	; (d72dc <_GLOBAL__sub_I_RGB+0x14>)
   d72cc:	4904      	ldr	r1, [pc, #16]	; (d72e0 <_GLOBAL__sub_I_RGB+0x18>)
   d72ce:	2300      	movs	r3, #0
   d72d0:	6083      	str	r3, [r0, #8]
   d72d2:	f000 bd69 	b.w	d7da8 <__aeabi_atexit>
   d72d6:	bf00      	nop
   d72d8:	2003e548 	.word	0x2003e548
   d72dc:	2003e190 	.word	0x2003e190
   d72e0:	000d72bb 	.word	0x000d72bb

000d72e4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d72e4:	4770      	bx	lr

000d72e6 <_ZN8SPIClassD0Ev>:
   d72e6:	b510      	push	{r4, lr}
   d72e8:	210c      	movs	r1, #12
   d72ea:	4604      	mov	r4, r0
   d72ec:	f000 fd61 	bl	d7db2 <_ZdlPvj>
   d72f0:	4620      	mov	r0, r4
   d72f2:	bd10      	pop	{r4, pc}

000d72f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d72f4:	b510      	push	{r4, lr}
   d72f6:	4b05      	ldr	r3, [pc, #20]	; (d730c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d72f8:	6003      	str	r3, [r0, #0]
   d72fa:	4604      	mov	r4, r0
{
    _spi = spi;
   d72fc:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d72fe:	4608      	mov	r0, r1
   d7300:	f7fe fe38 	bl	d5f74 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7304:	2300      	movs	r3, #0
   d7306:	60a3      	str	r3, [r4, #8]
}
   d7308:	4620      	mov	r0, r4
   d730a:	bd10      	pop	{r4, pc}
   d730c:	000d9d80 	.word	0x000d9d80

000d7310 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7310:	7900      	ldrb	r0, [r0, #4]
   d7312:	f7fe be37 	b.w	d5f84 <HAL_SPI_Is_Enabled>

000d7316 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7316:	b510      	push	{r4, lr}
   d7318:	4604      	mov	r4, r0
{
	free(buffer);
   d731a:	6800      	ldr	r0, [r0, #0]
   d731c:	f7fe ffee 	bl	d62fc <free>
}
   d7320:	4620      	mov	r0, r4
   d7322:	bd10      	pop	{r4, pc}

000d7324 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7324:	b510      	push	{r4, lr}
   d7326:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7328:	6800      	ldr	r0, [r0, #0]
   d732a:	b108      	cbz	r0, d7330 <_ZN6String10invalidateEv+0xc>
   d732c:	f7fe ffe6 	bl	d62fc <free>
	buffer = NULL;
   d7330:	2300      	movs	r3, #0
   d7332:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7334:	60a3      	str	r3, [r4, #8]
   d7336:	6063      	str	r3, [r4, #4]
   d7338:	bd10      	pop	{r4, pc}

000d733a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d733a:	b538      	push	{r3, r4, r5, lr}
   d733c:	4604      	mov	r4, r0
   d733e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7340:	6800      	ldr	r0, [r0, #0]
   d7342:	3101      	adds	r1, #1
   d7344:	f7fe ffe2 	bl	d630c <realloc>
	if (newbuffer) {
   d7348:	b110      	cbz	r0, d7350 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d734a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d734e:	2001      	movs	r0, #1
	}
	return 0;
}
   d7350:	bd38      	pop	{r3, r4, r5, pc}

000d7352 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7352:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7354:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7356:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7358:	b113      	cbz	r3, d7360 <_ZN6String7reserveEj+0xe>
   d735a:	6843      	ldr	r3, [r0, #4]
   d735c:	428b      	cmp	r3, r1
   d735e:	d207      	bcs.n	d7370 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7360:	4620      	mov	r0, r4
   d7362:	f7ff ffea 	bl	d733a <_ZN6String12changeBufferEj>
   d7366:	b120      	cbz	r0, d7372 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7368:	68a3      	ldr	r3, [r4, #8]
   d736a:	b90b      	cbnz	r3, d7370 <_ZN6String7reserveEj+0x1e>
   d736c:	6822      	ldr	r2, [r4, #0]
   d736e:	7013      	strb	r3, [r2, #0]
   d7370:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7372:	bd10      	pop	{r4, pc}

000d7374 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7374:	b570      	push	{r4, r5, r6, lr}
   d7376:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7378:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d737a:	4604      	mov	r4, r0
   d737c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d737e:	f7ff ffe8 	bl	d7352 <_ZN6String7reserveEj>
   d7382:	b918      	cbnz	r0, d738c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7384:	4620      	mov	r0, r4
   d7386:	f7ff ffcd 	bl	d7324 <_ZN6String10invalidateEv>
		return *this;
   d738a:	e009      	b.n	d73a0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d738c:	462a      	mov	r2, r5
   d738e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7390:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7392:	6820      	ldr	r0, [r4, #0]
   d7394:	f001 fc20 	bl	d8bd8 <memcpy>
	buffer[len] = 0;
   d7398:	6822      	ldr	r2, [r4, #0]
   d739a:	68a3      	ldr	r3, [r4, #8]
   d739c:	2100      	movs	r1, #0
   d739e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d73a0:	4620      	mov	r0, r4
   d73a2:	bd70      	pop	{r4, r5, r6, pc}

000d73a4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d73a4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d73a6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d73a8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d73aa:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d73ac:	6043      	str	r3, [r0, #4]
	len = 0;
   d73ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   d73b0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d73b2:	460d      	mov	r5, r1
   d73b4:	b139      	cbz	r1, d73c6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d73b6:	4608      	mov	r0, r1
   d73b8:	f001 fc77 	bl	d8caa <strlen>
   d73bc:	4629      	mov	r1, r5
   d73be:	4602      	mov	r2, r0
   d73c0:	4620      	mov	r0, r4
   d73c2:	f7ff ffd7 	bl	d7374 <_ZN6String4copyEPKcj>
}
   d73c6:	4620      	mov	r0, r4
   d73c8:	bd38      	pop	{r3, r4, r5, pc}

000d73ca <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d73ca:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d73cc:	b510      	push	{r4, lr}
   d73ce:	460b      	mov	r3, r1
   d73d0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d73d2:	d007      	beq.n	d73e4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d73d4:	6809      	ldr	r1, [r1, #0]
   d73d6:	b119      	cbz	r1, d73e0 <_ZN6StringaSERKS_+0x16>
   d73d8:	689a      	ldr	r2, [r3, #8]
   d73da:	f7ff ffcb 	bl	d7374 <_ZN6String4copyEPKcj>
   d73de:	e001      	b.n	d73e4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d73e0:	f7ff ffa0 	bl	d7324 <_ZN6String10invalidateEv>

	return *this;
}
   d73e4:	4620      	mov	r0, r4
   d73e6:	bd10      	pop	{r4, pc}

000d73e8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d73e8:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d73ea:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d73ec:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d73ee:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d73f0:	6043      	str	r3, [r0, #4]
	len = 0;
   d73f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d73f4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d73f6:	f7ff ffe8 	bl	d73ca <_ZN6StringaSERKS_>
}
   d73fa:	4620      	mov	r0, r4
   d73fc:	bd10      	pop	{r4, pc}

000d73fe <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d73fe:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7400:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7402:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7404:	b912      	cbnz	r2, d740c <_ZNK6String6equalsEPKc+0xe>
   d7406:	b919      	cbnz	r1, d7410 <_ZNK6String6equalsEPKc+0x12>
   d7408:	2001      	movs	r0, #1
   d740a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d740c:	b911      	cbnz	r1, d7414 <_ZNK6String6equalsEPKc+0x16>
   d740e:	6803      	ldr	r3, [r0, #0]
   d7410:	7818      	ldrb	r0, [r3, #0]
   d7412:	e002      	b.n	d741a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7414:	6800      	ldr	r0, [r0, #0]
   d7416:	f001 fc1b 	bl	d8c50 <strcmp>
   d741a:	fab0 f080 	clz	r0, r0
   d741e:	0940      	lsrs	r0, r0, #5
}
   d7420:	bd08      	pop	{r3, pc}

000d7422 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7422:	b570      	push	{r4, r5, r6, lr}
   d7424:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7426:	b19a      	cbz	r2, d7450 <_ZNK6String8getBytesEPhjj+0x2e>
   d7428:	b191      	cbz	r1, d7450 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d742a:	6885      	ldr	r5, [r0, #8]
   d742c:	429d      	cmp	r5, r3
   d742e:	d802      	bhi.n	d7436 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7430:	2300      	movs	r3, #0
   d7432:	700b      	strb	r3, [r1, #0]
		return;
   d7434:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7436:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d7438:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d743a:	6801      	ldr	r1, [r0, #0]
   d743c:	42ac      	cmp	r4, r5
   d743e:	bf28      	it	cs
   d7440:	462c      	movcs	r4, r5
   d7442:	4419      	add	r1, r3
   d7444:	4622      	mov	r2, r4
   d7446:	4630      	mov	r0, r6
   d7448:	f001 fc4c 	bl	d8ce4 <strncpy>
	buf[n] = 0;
   d744c:	2300      	movs	r3, #0
   d744e:	5533      	strb	r3, [r6, r4]
   d7450:	bd70      	pop	{r4, r5, r6, pc}

000d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7452:	b510      	push	{r4, lr}
   d7454:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7456:	6800      	ldr	r0, [r0, #0]
   d7458:	b118      	cbz	r0, d7462 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d745a:	f7fe ff4f 	bl	d62fc <free>
            wakeupSource_ = nullptr;
   d745e:	2300      	movs	r3, #0
   d7460:	6023      	str	r3, [r4, #0]
   d7462:	bd10      	pop	{r4, pc}

000d7464 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7464:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7466:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d746a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d746c:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d746e:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7470:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7474:	f8c0 2006 	str.w	r2, [r0, #6]
   d7478:	889b      	ldrh	r3, [r3, #4]
   d747a:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d747c:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d747e:	f7ff ffe8 	bl	d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d7482:	682b      	ldr	r3, [r5, #0]
   d7484:	b113      	cbz	r3, d748c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7486:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7488:	2300      	movs	r3, #0
   d748a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d748c:	4620      	mov	r0, r4
   d748e:	bd38      	pop	{r3, r4, r5, pc}

000d7490 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d7490:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d7494:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d7496:	b90b      	cbnz	r3, d749c <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d7498:	680a      	ldr	r2, [r1, #0]
   d749a:	b19a      	cbz	r2, d74c4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d749c:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d749e:	b15c      	cbz	r4, d74b8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d74a0:	88a2      	ldrh	r2, [r4, #4]
   d74a2:	2a01      	cmp	r2, #1
   d74a4:	d003      	beq.n	d74ae <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d74a6:	2a04      	cmp	r2, #4
   d74a8:	d106      	bne.n	d74b8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d74aa:	2202      	movs	r2, #2
   d74ac:	e005      	b.n	d74ba <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d74ae:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d74b0:	814c      	strh	r4, [r1, #10]
   d74b2:	718a      	strb	r2, [r1, #6]
   d74b4:	810b      	strh	r3, [r1, #8]
                    break;
   d74b6:	e005      	b.n	d74c4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d74b8:	2204      	movs	r2, #4
   d74ba:	810b      	strh	r3, [r1, #8]
   d74bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d74c0:	718a      	strb	r2, [r1, #6]
   d74c2:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d74c4:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d74c8:	6003      	str	r3, [r0, #0]
   d74ca:	888b      	ldrh	r3, [r1, #4]
   d74cc:	8083      	strh	r3, [r0, #4]
    }
   d74ce:	bd10      	pop	{r4, pc}

000d74d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d74d0:	b538      	push	{r3, r4, r5, lr}
   d74d2:	460c      	mov	r4, r1
   d74d4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d74d6:	f7ff ffbc 	bl	d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d74da:	b144      	cbz	r4, d74ee <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d74dc:	8820      	ldrh	r0, [r4, #0]
   d74de:	f7fe ff05 	bl	d62ec <malloc>
   d74e2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d74e4:	b128      	cbz	r0, d74f2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d74e6:	8822      	ldrh	r2, [r4, #0]
   d74e8:	4621      	mov	r1, r4
   d74ea:	f001 fb75 	bl	d8bd8 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d74ee:	2000      	movs	r0, #0
   d74f0:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d74f2:	4801      	ldr	r0, [pc, #4]	; (d74f8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d74f4:	bd38      	pop	{r3, r4, r5, pc}
   d74f6:	bf00      	nop
   d74f8:	fffffefc 	.word	0xfffffefc

000d74fc <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d74fc:	4601      	mov	r1, r0
   d74fe:	2200      	movs	r2, #0
   d7500:	208c      	movs	r0, #140	; 0x8c
   d7502:	f7fe bc1f 	b.w	d5d44 <HAL_Core_System_Reset_Ex>

000d7506 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d7506:	2000      	movs	r0, #0
   d7508:	f7ff bff8 	b.w	d74fc <_ZN11SystemClass5resetEm>

000d750c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d750c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d750e:	4d30      	ldr	r5, [pc, #192]	; (d75d0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7510:	7d0b      	ldrb	r3, [r1, #20]
   d7512:	4604      	mov	r4, r0
   d7514:	b08b      	sub	sp, #44	; 0x2c
   d7516:	4608      	mov	r0, r1
   d7518:	1daf      	adds	r7, r5, #6
   d751a:	b313      	cbz	r3, d7562 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d751c:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d751e:	791b      	ldrb	r3, [r3, #4]
   d7520:	b1fb      	cbz	r3, d7562 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7522:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7524:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7528:	a902      	add	r1, sp, #8
   d752a:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d752c:	9202      	str	r2, [sp, #8]
   d752e:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7532:	f88d 200e 	strb.w	r2, [sp, #14]
   d7536:	f8ad 2010 	strh.w	r2, [sp, #16]
   d753a:	f8ad 3012 	strh.w	r3, [sp, #18]
   d753e:	f7fe fe1b 	bl	d6178 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7542:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d7544:	b200      	sxth	r0, r0
   d7546:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d754a:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d754e:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d7550:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d7552:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d7556:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7558:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d755a:	4628      	mov	r0, r5
   d755c:	f7ff ffb8 	bl	d74d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d7560:	e01c      	b.n	d759c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d7562:	2320      	movs	r3, #32
   d7564:	2600      	movs	r6, #0
   d7566:	9302      	str	r3, [sp, #8]
   d7568:	4b1a      	ldr	r3, [pc, #104]	; (d75d4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d756a:	9300      	str	r3, [sp, #0]
   d756c:	491a      	ldr	r1, [pc, #104]	; (d75d8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d756e:	9603      	str	r6, [sp, #12]
   d7570:	4633      	mov	r3, r6
   d7572:	2032      	movs	r0, #50	; 0x32
   d7574:	aa02      	add	r2, sp, #8
   d7576:	f7fe fd85 	bl	d6084 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d757a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d757e:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d7582:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7584:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d7588:	4811      	ldr	r0, [pc, #68]	; (d75d0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d758a:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d758c:	f88d 600e 	strb.w	r6, [sp, #14]
   d7590:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7594:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7598:	f7ff ff64 	bl	d7464 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d759c:	a802      	add	r0, sp, #8
   d759e:	f7ff ff58 	bl	d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d75a2:	2300      	movs	r3, #0
   d75a4:	6023      	str	r3, [r4, #0]
   d75a6:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d75a8:	71a3      	strb	r3, [r4, #6]
   d75aa:	8123      	strh	r3, [r4, #8]
   d75ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d75b0:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d75b2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d75b6:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d75b8:	683b      	ldr	r3, [r7, #0]
   d75ba:	f8c4 3006 	str.w	r3, [r4, #6]
   d75be:	88bb      	ldrh	r3, [r7, #4]
   d75c0:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d75c2:	6829      	ldr	r1, [r5, #0]
   d75c4:	4620      	mov	r0, r4
   d75c6:	f7ff ff83 	bl	d74d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d75ca:	4620      	mov	r0, r4
   d75cc:	b00b      	add	sp, #44	; 0x2c
   d75ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d75d0:	2003e558 	.word	0x2003e558
   d75d4:	000d9d8f 	.word	0x000d9d8f
   d75d8:	000d9d88 	.word	0x000d9d88

000d75dc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d75dc:	b530      	push	{r4, r5, lr}
   d75de:	4604      	mov	r4, r0
   d75e0:	b085      	sub	sp, #20
   d75e2:	4608      	mov	r0, r1
   d75e4:	4611      	mov	r1, r2
   d75e6:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d75e8:	2300      	movs	r3, #0
   d75ea:	f7fe fd75 	bl	d60d8 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d75ee:	4d0d      	ldr	r5, [pc, #52]	; (d7624 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d75f0:	f8ad 000c 	strh.w	r0, [sp, #12]
   d75f4:	2300      	movs	r3, #0
   d75f6:	a901      	add	r1, sp, #4
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	f8ad 3008 	strh.w	r3, [sp, #8]
   d75fe:	f88d 300a 	strb.w	r3, [sp, #10]
   d7602:	4628      	mov	r0, r5
   d7604:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7608:	f8ad 300e 	strh.w	r3, [sp, #14]
   d760c:	f7ff ff2a 	bl	d7464 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7610:	a801      	add	r0, sp, #4
   d7612:	f7ff ff1e 	bl	d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d7616:	4620      	mov	r0, r4
   d7618:	4629      	mov	r1, r5
   d761a:	f7ff ff39 	bl	d7490 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d761e:	4620      	mov	r0, r4
   d7620:	b005      	add	sp, #20
   d7622:	bd30      	pop	{r4, r5, pc}
   d7624:	2003e558 	.word	0x2003e558

000d7628 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7628:	b510      	push	{r4, lr}
   d762a:	2400      	movs	r4, #0
   d762c:	7004      	strb	r4, [r0, #0]
   d762e:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d7630:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7632:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d7636:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d7638:	dd07      	ble.n	d764a <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d763a:	3901      	subs	r1, #1
   d763c:	4299      	cmp	r1, r3
   d763e:	d209      	bcs.n	d7654 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d7640:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d7644:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d7646:	2301      	movs	r3, #1
   d7648:	e001      	b.n	d764e <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d764a:	d102      	bne.n	d7652 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d764c:	2302      	movs	r3, #2
   d764e:	7003      	strb	r3, [r0, #0]
   d7650:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d7652:	8041      	strh	r1, [r0, #2]
    }
}
   d7654:	bd10      	pop	{r4, pc}
	...

000d7658 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7658:	b5f0      	push	{r4, r5, r6, r7, lr}
   d765a:	b08b      	sub	sp, #44	; 0x2c
   d765c:	4617      	mov	r7, r2
   d765e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7660:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7662:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7664:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7666:	2400      	movs	r4, #0
   d7668:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d766a:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d766c:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d766e:	9300      	str	r3, [sp, #0]
   d7670:	4639      	mov	r1, r7
   d7672:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7674:	4630      	mov	r0, r6
   d7676:	f7fe fd6b 	bl	d6150 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d767a:	463b      	mov	r3, r7
   d767c:	4632      	mov	r2, r6
   d767e:	4601      	mov	r1, r0
   d7680:	a805      	add	r0, sp, #20
   d7682:	f7ff ffd1 	bl	d7628 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d7686:	9407      	str	r4, [sp, #28]
   d7688:	f8ad 4020 	strh.w	r4, [sp, #32]
   d768c:	4c0d      	ldr	r4, [pc, #52]	; (d76c4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d768e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d7692:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d7696:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d769a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d769e:	4620      	mov	r0, r4
   d76a0:	a907      	add	r1, sp, #28
   d76a2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d76a6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d76aa:	f7ff fedb 	bl	d7464 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d76ae:	a807      	add	r0, sp, #28
   d76b0:	f7ff fecf 	bl	d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d76b4:	4628      	mov	r0, r5
   d76b6:	4621      	mov	r1, r4
   d76b8:	f7ff feea 	bl	d7490 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d76bc:	4628      	mov	r0, r5
   d76be:	b00b      	add	sp, #44	; 0x2c
   d76c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76c2:	bf00      	nop
   d76c4:	2003e558 	.word	0x2003e558

000d76c8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d76c8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d76ca:	4c09      	ldr	r4, [pc, #36]	; (d76f0 <_GLOBAL__sub_I_System+0x28>)
   d76cc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76ce:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d76d2:	6020      	str	r0, [r4, #0]
   d76d4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76d6:	71a0      	strb	r0, [r4, #6]
   d76d8:	8120      	strh	r0, [r4, #8]
   d76da:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d76dc:	f7fe fcec 	bl	d60b8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d76e0:	4620      	mov	r0, r4
   d76e2:	4a04      	ldr	r2, [pc, #16]	; (d76f4 <_GLOBAL__sub_I_System+0x2c>)
   d76e4:	4904      	ldr	r1, [pc, #16]	; (d76f8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d76e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d76ea:	f000 bb5d 	b.w	d7da8 <__aeabi_atexit>
   d76ee:	bf00      	nop
   d76f0:	2003e558 	.word	0x2003e558
   d76f4:	2003e190 	.word	0x2003e190
   d76f8:	000d418b 	.word	0x000d418b

000d76fc <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d76fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d76fe:	4b14      	ldr	r3, [pc, #80]	; (d7750 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7700:	4f14      	ldr	r7, [pc, #80]	; (d7754 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7702:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7704:	4b14      	ldr	r3, [pc, #80]	; (d7758 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7706:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7708:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d770a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d770c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d770e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7710:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7712:	d01b      	beq.n	d774c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7714:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7716:	ad01      	add	r5, sp, #4
   d7718:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d771c:	f001 f964 	bl	d89e8 <localtime>
	calendar_time->tm_year += 1900;
   d7720:	6943      	ldr	r3, [r0, #20]
   d7722:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7726:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7728:	4604      	mov	r4, r0
   d772a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d772c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d772e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7732:	f8d4 e000 	ldr.w	lr, [r4]
   d7736:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d773a:	ad01      	add	r5, sp, #4
   d773c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d773e:	4c07      	ldr	r4, [pc, #28]	; (d775c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7746:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7748:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d774c:	b00b      	add	sp, #44	; 0x2c
   d774e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7750:	2003e594 	.word	0x2003e594
   d7754:	2003e590 	.word	0x2003e590
   d7758:	2003e58c 	.word	0x2003e58c
   d775c:	2003e564 	.word	0x2003e564

000d7760 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7760:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7762:	2000      	movs	r0, #0
   d7764:	f7fe fd62 	bl	d622c <spark_sync_time_pending>
   d7768:	b128      	cbz	r0, d7776 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d776a:	f7fe fd37 	bl	d61dc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d776e:	f080 0001 	eor.w	r0, r0, #1
   d7772:	b2c0      	uxtb	r0, r0
   d7774:	bd08      	pop	{r3, pc}
   d7776:	2001      	movs	r0, #1
    }
   d7778:	bd08      	pop	{r3, pc}

000d777a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d777a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d777c:	2000      	movs	r0, #0
   d777e:	f7fe fb31 	bl	d5de4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7782:	4604      	mov	r4, r0
   d7784:	b968      	cbnz	r0, d77a2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7786:	f7fe fc8f 	bl	d60a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d778a:	2801      	cmp	r0, #1
   d778c:	d10b      	bne.n	d77a6 <_ZN9TimeClass7isValidEv+0x2c>
   d778e:	4620      	mov	r0, r4
   d7790:	f7fe fcc2 	bl	d6118 <system_thread_get_state>
   d7794:	b938      	cbnz	r0, d77a6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7796:	f7ff ffe3 	bl	d7760 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d779a:	b930      	cbnz	r0, d77aa <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d779c:	f7fe fd06 	bl	d61ac <spark_process>
   d77a0:	e7f9      	b.n	d7796 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d77a2:	2001      	movs	r0, #1
   d77a4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d77a6:	2000      	movs	r0, #0
   d77a8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d77aa:	f7ff ffd9 	bl	d7760 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d77ae:	2000      	movs	r0, #0
   d77b0:	f7fe fb18 	bl	d5de4 <HAL_RTC_Time_Is_Valid>
   d77b4:	3000      	adds	r0, #0
   d77b6:	bf18      	it	ne
   d77b8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d77ba:	bd10      	pop	{r4, pc}

000d77bc <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d77bc:	b508      	push	{r3, lr}
    (void)isValid();
   d77be:	f7ff ffdc 	bl	d777a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d77c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d77c6:	f7fe bae5 	b.w	d5d94 <HAL_RTC_Get_UnixTime>
	...

000d77cc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d77cc:	b508      	push	{r3, lr}
	return hour(now());
   d77ce:	f7ff fff5 	bl	d77bc <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d77d2:	f7ff ff93 	bl	d76fc <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d77d6:	4b01      	ldr	r3, [pc, #4]	; (d77dc <_ZN9TimeClass4hourEv+0x10>)
   d77d8:	6898      	ldr	r0, [r3, #8]
   d77da:	bd08      	pop	{r3, pc}
   d77dc:	2003e564 	.word	0x2003e564

000d77e0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d77e0:	b508      	push	{r3, lr}
	return minute(now());
   d77e2:	f7ff ffeb 	bl	d77bc <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d77e6:	f7ff ff89 	bl	d76fc <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d77ea:	4b01      	ldr	r3, [pc, #4]	; (d77f0 <_ZN9TimeClass6minuteEv+0x10>)
   d77ec:	6858      	ldr	r0, [r3, #4]
   d77ee:	bd08      	pop	{r3, pc}
   d77f0:	2003e564 	.word	0x2003e564

000d77f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d77f4:	4b02      	ldr	r3, [pc, #8]	; (d7800 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d77f6:	681a      	ldr	r2, [r3, #0]
   d77f8:	4b02      	ldr	r3, [pc, #8]	; (d7804 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d77fa:	601a      	str	r2, [r3, #0]
   d77fc:	4770      	bx	lr
   d77fe:	bf00      	nop
   d7800:	2003e0d8 	.word	0x2003e0d8
   d7804:	2003e588 	.word	0x2003e588

000d7808 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7808:	4770      	bx	lr

000d780a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d780a:	7441      	strb	r1, [r0, #17]
   d780c:	4770      	bx	lr

000d780e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d780e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7810:	7c00      	ldrb	r0, [r0, #16]
   d7812:	f7fe fbf7 	bl	d6004 <HAL_USART_Available_Data_For_Write>
}
   d7816:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d781a:	bd08      	pop	{r3, pc}

000d781c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d781c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d781e:	7c00      	ldrb	r0, [r0, #16]
   d7820:	f7fe fbc8 	bl	d5fb4 <HAL_USART_Available_Data>
}
   d7824:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7828:	bd08      	pop	{r3, pc}

000d782a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d782a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d782c:	7c00      	ldrb	r0, [r0, #16]
   d782e:	f7fe fbd1 	bl	d5fd4 <HAL_USART_Peek_Data>
}
   d7832:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7836:	bf28      	it	cs
   d7838:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d783c:	bd08      	pop	{r3, pc}

000d783e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d783e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7840:	7c00      	ldrb	r0, [r0, #16]
   d7842:	f7fe fbbf 	bl	d5fc4 <HAL_USART_Read_Data>
}
   d7846:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d784a:	bf28      	it	cs
   d784c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7850:	bd08      	pop	{r3, pc}

000d7852 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7852:	7c00      	ldrb	r0, [r0, #16]
   d7854:	f7fe bbc6 	b.w	d5fe4 <HAL_USART_Flush_Data>

000d7858 <_ZN11USARTSerialD0Ev>:
   d7858:	b510      	push	{r4, lr}
   d785a:	2114      	movs	r1, #20
   d785c:	4604      	mov	r4, r0
   d785e:	f000 faa8 	bl	d7db2 <_ZdlPvj>
   d7862:	4620      	mov	r0, r4
   d7864:	bd10      	pop	{r4, pc}

000d7866 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7866:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7868:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d786a:	4604      	mov	r4, r0
   d786c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d786e:	b925      	cbnz	r5, d787a <_ZN11USARTSerial5writeEh+0x14>
   d7870:	7c00      	ldrb	r0, [r0, #16]
   d7872:	f7fe fbc7 	bl	d6004 <HAL_USART_Available_Data_For_Write>
   d7876:	2800      	cmp	r0, #0
   d7878:	dd05      	ble.n	d7886 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d787a:	4631      	mov	r1, r6
   d787c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d787e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7882:	f7fe bb8f 	b.w	d5fa4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7886:	4628      	mov	r0, r5
   d7888:	bd70      	pop	{r4, r5, r6, pc}
	...

000d788c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d788c:	b510      	push	{r4, lr}
   d788e:	4604      	mov	r4, r0
   d7890:	4608      	mov	r0, r1
   d7892:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7894:	2200      	movs	r2, #0
   d7896:	6062      	str	r2, [r4, #4]
   d7898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d789c:	60a2      	str	r2, [r4, #8]
   d789e:	4a05      	ldr	r2, [pc, #20]	; (d78b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d78a0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d78a2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d78a4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d78a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d78a8:	461a      	mov	r2, r3
   d78aa:	f7fe fb73 	bl	d5f94 <HAL_USART_Init>
}
   d78ae:	4620      	mov	r0, r4
   d78b0:	bd10      	pop	{r4, pc}
   d78b2:	bf00      	nop
   d78b4:	000d9de8 	.word	0x000d9de8

000d78b8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d78b8:	7c00      	ldrb	r0, [r0, #16]
   d78ba:	f7fe bb9b 	b.w	d5ff4 <HAL_USART_Is_Enabled>
	...

000d78c0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d78c0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d78c2:	4d0c      	ldr	r5, [pc, #48]	; (d78f4 <_Z22__fetch_global_Serial1v+0x34>)
   d78c4:	6829      	ldr	r1, [r5, #0]
   d78c6:	f011 0401 	ands.w	r4, r1, #1
   d78ca:	d111      	bne.n	d78f0 <_Z22__fetch_global_Serial1v+0x30>
   d78cc:	4628      	mov	r0, r5
   d78ce:	f7fc fbea 	bl	d40a6 <__cxa_guard_acquire>
   d78d2:	b168      	cbz	r0, d78f0 <_Z22__fetch_global_Serial1v+0x30>
   d78d4:	4a08      	ldr	r2, [pc, #32]	; (d78f8 <_Z22__fetch_global_Serial1v+0x38>)
   d78d6:	4b09      	ldr	r3, [pc, #36]	; (d78fc <_Z22__fetch_global_Serial1v+0x3c>)
   d78d8:	4809      	ldr	r0, [pc, #36]	; (d7900 <_Z22__fetch_global_Serial1v+0x40>)
   d78da:	4621      	mov	r1, r4
   d78dc:	f7ff ffd6 	bl	d788c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d78e0:	4628      	mov	r0, r5
   d78e2:	f7fc fbe5 	bl	d40b0 <__cxa_guard_release>
   d78e6:	4a07      	ldr	r2, [pc, #28]	; (d7904 <_Z22__fetch_global_Serial1v+0x44>)
   d78e8:	4907      	ldr	r1, [pc, #28]	; (d7908 <_Z22__fetch_global_Serial1v+0x48>)
   d78ea:	4805      	ldr	r0, [pc, #20]	; (d7900 <_Z22__fetch_global_Serial1v+0x40>)
   d78ec:	f000 fa5c 	bl	d7da8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78f0:	4803      	ldr	r0, [pc, #12]	; (d7900 <_Z22__fetch_global_Serial1v+0x40>)
   d78f2:	bd38      	pop	{r3, r4, r5, pc}
   d78f4:	2003e630 	.word	0x2003e630
   d78f8:	2003e634 	.word	0x2003e634
   d78fc:	2003e5ac 	.word	0x2003e5ac
   d7900:	2003e598 	.word	0x2003e598
   d7904:	2003e190 	.word	0x2003e190
   d7908:	000d7809 	.word	0x000d7809

000d790c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d790c:	7441      	strb	r1, [r0, #17]
   d790e:	4770      	bx	lr

000d7910 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7910:	4770      	bx	lr

000d7912 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7912:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7914:	2100      	movs	r1, #0
   d7916:	7c00      	ldrb	r0, [r0, #16]
   d7918:	f7fe fb94 	bl	d6044 <HAL_USB_USART_Receive_Data>
}
   d791c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7920:	bf28      	it	cs
   d7922:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7926:	bd08      	pop	{r3, pc}

000d7928 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7928:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d792a:	2101      	movs	r1, #1
   d792c:	7c00      	ldrb	r0, [r0, #16]
   d792e:	f7fe fb89 	bl	d6044 <HAL_USB_USART_Receive_Data>
}
   d7932:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7936:	bf28      	it	cs
   d7938:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d793c:	bd08      	pop	{r3, pc}

000d793e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d793e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7940:	7c00      	ldrb	r0, [r0, #16]
   d7942:	f7fe fb77 	bl	d6034 <HAL_USB_USART_Available_Data_For_Write>
}
   d7946:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d794a:	bd08      	pop	{r3, pc}

000d794c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d794c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d794e:	7c00      	ldrb	r0, [r0, #16]
   d7950:	f7fe fb68 	bl	d6024 <HAL_USB_USART_Available_Data>
}
   d7954:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7958:	bd08      	pop	{r3, pc}

000d795a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d795a:	7c00      	ldrb	r0, [r0, #16]
   d795c:	f7fe bb82 	b.w	d6064 <HAL_USB_USART_Flush_Data>

000d7960 <_ZN9USBSerialD0Ev>:
   d7960:	b510      	push	{r4, lr}
   d7962:	2114      	movs	r1, #20
   d7964:	4604      	mov	r4, r0
   d7966:	f000 fa24 	bl	d7db2 <_ZdlPvj>
   d796a:	4620      	mov	r0, r4
   d796c:	bd10      	pop	{r4, pc}

000d796e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d796e:	b538      	push	{r3, r4, r5, lr}
   d7970:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7972:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7974:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7976:	f7fe fb5d 	bl	d6034 <HAL_USB_USART_Available_Data_For_Write>
   d797a:	2800      	cmp	r0, #0
   d797c:	dc01      	bgt.n	d7982 <_ZN9USBSerial5writeEh+0x14>
   d797e:	7c60      	ldrb	r0, [r4, #17]
   d7980:	b128      	cbz	r0, d798e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7982:	4629      	mov	r1, r5
   d7984:	7c20      	ldrb	r0, [r4, #16]
   d7986:	f7fe fb65 	bl	d6054 <HAL_USB_USART_Send_Data>
   d798a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d798e:	bd38      	pop	{r3, r4, r5, pc}

000d7990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7990:	b510      	push	{r4, lr}
   d7992:	4604      	mov	r4, r0
   d7994:	2300      	movs	r3, #0
   d7996:	6063      	str	r3, [r4, #4]
   d7998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d799c:	60a3      	str	r3, [r4, #8]
   d799e:	4b05      	ldr	r3, [pc, #20]	; (d79b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d79a0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d79a2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d79a4:	4608      	mov	r0, r1
{
  _serial = serial;
   d79a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d79a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d79aa:	4611      	mov	r1, r2
   d79ac:	f7fe fb32 	bl	d6014 <HAL_USB_USART_Init>
}
   d79b0:	4620      	mov	r0, r4
   d79b2:	bd10      	pop	{r4, pc}
   d79b4:	000d9e18 	.word	0x000d9e18

000d79b8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d79ba:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79bc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d79be:	2100      	movs	r1, #0
   d79c0:	f001 f915 	bl	d8bee <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d79c4:	4620      	mov	r0, r4
   d79c6:	bd10      	pop	{r4, pc}

000d79c8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d79c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79ca:	4d0e      	ldr	r5, [pc, #56]	; (d7a04 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d79cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d79ce:	a801      	add	r0, sp, #4
   d79d0:	f7ff fff2 	bl	d79b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79d4:	6829      	ldr	r1, [r5, #0]
   d79d6:	f011 0401 	ands.w	r4, r1, #1
   d79da:	d110      	bne.n	d79fe <_Z16_fetch_usbserialv+0x36>
   d79dc:	4628      	mov	r0, r5
   d79de:	f7fc fb62 	bl	d40a6 <__cxa_guard_acquire>
   d79e2:	b160      	cbz	r0, d79fe <_Z16_fetch_usbserialv+0x36>
   d79e4:	aa01      	add	r2, sp, #4
   d79e6:	4621      	mov	r1, r4
   d79e8:	4807      	ldr	r0, [pc, #28]	; (d7a08 <_Z16_fetch_usbserialv+0x40>)
   d79ea:	f7ff ffd1 	bl	d7990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d79ee:	4628      	mov	r0, r5
   d79f0:	f7fc fb5e 	bl	d40b0 <__cxa_guard_release>
   d79f4:	4a05      	ldr	r2, [pc, #20]	; (d7a0c <_Z16_fetch_usbserialv+0x44>)
   d79f6:	4906      	ldr	r1, [pc, #24]	; (d7a10 <_Z16_fetch_usbserialv+0x48>)
   d79f8:	4803      	ldr	r0, [pc, #12]	; (d7a08 <_Z16_fetch_usbserialv+0x40>)
   d79fa:	f000 f9d5 	bl	d7da8 <__aeabi_atexit>
	return _usbserial;
}
   d79fe:	4802      	ldr	r0, [pc, #8]	; (d7a08 <_Z16_fetch_usbserialv+0x40>)
   d7a00:	b007      	add	sp, #28
   d7a02:	bd30      	pop	{r4, r5, pc}
   d7a04:	2003e6b8 	.word	0x2003e6b8
   d7a08:	2003e6bc 	.word	0x2003e6bc
   d7a0c:	2003e190 	.word	0x2003e190
   d7a10:	000d7911 	.word	0x000d7911

000d7a14 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7a14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7a16:	4b0c      	ldr	r3, [pc, #48]	; (d7a48 <serialEventRun+0x34>)
   d7a18:	b133      	cbz	r3, d7a28 <serialEventRun+0x14>
   d7a1a:	f7ff ffd5 	bl	d79c8 <_Z16_fetch_usbserialv>
   d7a1e:	6803      	ldr	r3, [r0, #0]
   d7a20:	691b      	ldr	r3, [r3, #16]
   d7a22:	4798      	blx	r3
   d7a24:	2800      	cmp	r0, #0
   d7a26:	dc09      	bgt.n	d7a3c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7a28:	4b08      	ldr	r3, [pc, #32]	; (d7a4c <serialEventRun+0x38>)
   d7a2a:	b163      	cbz	r3, d7a46 <serialEventRun+0x32>
   d7a2c:	f7ff ff48 	bl	d78c0 <_Z22__fetch_global_Serial1v>
   d7a30:	6803      	ldr	r3, [r0, #0]
   d7a32:	691b      	ldr	r3, [r3, #16]
   d7a34:	4798      	blx	r3
   d7a36:	2800      	cmp	r0, #0
   d7a38:	dc03      	bgt.n	d7a42 <serialEventRun+0x2e>
   d7a3a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7a3c:	f3af 8000 	nop.w
   d7a40:	e7f2      	b.n	d7a28 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7a42:	f3af 8000 	nop.w
   d7a46:	bd08      	pop	{r3, pc}
	...

000d7a50 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7a50:	b508      	push	{r3, lr}
	serialEventRun();
   d7a52:	f7ff ffdf 	bl	d7a14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a56:	f7fe f995 	bl	d5d84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a5a:	4b01      	ldr	r3, [pc, #4]	; (d7a60 <_post_loop+0x10>)
   d7a5c:	6018      	str	r0, [r3, #0]
   d7a5e:	bd08      	pop	{r3, pc}
   d7a60:	2003e6d8 	.word	0x2003e6d8

000d7a64 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a64:	4802      	ldr	r0, [pc, #8]	; (d7a70 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7a66:	4a03      	ldr	r2, [pc, #12]	; (d7a74 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7a68:	4903      	ldr	r1, [pc, #12]	; (d7a78 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7a6a:	1a12      	subs	r2, r2, r0
   d7a6c:	f001 b8b4 	b.w	d8bd8 <memcpy>
   d7a70:	2003f400 	.word	0x2003f400
   d7a74:	2003f404 	.word	0x2003f404
   d7a78:	000da080 	.word	0x000da080

000d7a7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7a7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a7e:	2300      	movs	r3, #0
   d7a80:	9300      	str	r3, [sp, #0]
   d7a82:	461a      	mov	r2, r3
   d7a84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a88:	f7fe fb58 	bl	d613c <system_ctrl_set_result>
}
   d7a8c:	b003      	add	sp, #12
   d7a8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a94 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7a94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7a96:	8843      	ldrh	r3, [r0, #2]
   d7a98:	2b0a      	cmp	r3, #10
   d7a9a:	d008      	beq.n	d7aae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7a9c:	2b50      	cmp	r3, #80	; 0x50
   d7a9e:	d109      	bne.n	d7ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7aa0:	4b09      	ldr	r3, [pc, #36]	; (d7ac8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7aa2:	681b      	ldr	r3, [r3, #0]
   d7aa4:	b13b      	cbz	r3, d7ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7aa6:	b003      	add	sp, #12
   d7aa8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7aac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7aae:	f7ff ffe5 	bl	d7a7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7ab2:	e006      	b.n	d7ac2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ab4:	2300      	movs	r3, #0
   d7ab6:	9300      	str	r3, [sp, #0]
   d7ab8:	461a      	mov	r2, r3
   d7aba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7abe:	f7fe fb3d 	bl	d613c <system_ctrl_set_result>
        break;
    }
}
   d7ac2:	b003      	add	sp, #12
   d7ac4:	f85d fb04 	ldr.w	pc, [sp], #4
   d7ac8:	2003e6d0 	.word	0x2003e6d0

000d7acc <module_user_init_hook>:

void module_user_init_hook()
{
   d7acc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ace:	4c10      	ldr	r4, [pc, #64]	; (d7b10 <module_user_init_hook+0x44>)
   d7ad0:	4d10      	ldr	r5, [pc, #64]	; (d7b14 <module_user_init_hook+0x48>)
   d7ad2:	6823      	ldr	r3, [r4, #0]
   d7ad4:	42ab      	cmp	r3, r5
   d7ad6:	4b10      	ldr	r3, [pc, #64]	; (d7b18 <module_user_init_hook+0x4c>)
   d7ad8:	bf0c      	ite	eq
   d7ada:	2201      	moveq	r2, #1
   d7adc:	2200      	movne	r2, #0
   d7ade:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ae0:	d002      	beq.n	d7ae8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7ae2:	f7ff ffbf 	bl	d7a64 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7ae6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7ae8:	f7fe f93c 	bl	d5d64 <HAL_RNG_GetRandomNumber>
   d7aec:	4604      	mov	r4, r0
    srand(seed);
   d7aee:	f001 f887 	bl	d8c00 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7af2:	4b0a      	ldr	r3, [pc, #40]	; (d7b1c <module_user_init_hook+0x50>)
   d7af4:	b113      	cbz	r3, d7afc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7af6:	4620      	mov	r0, r4
   d7af8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7afc:	2100      	movs	r1, #0
   d7afe:	4807      	ldr	r0, [pc, #28]	; (d7b1c <module_user_init_hook+0x50>)
   d7b00:	f7fe fb9c 	bl	d623c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7b04:	2100      	movs	r1, #0
   d7b06:	4806      	ldr	r0, [pc, #24]	; (d7b20 <module_user_init_hook+0x54>)
}
   d7b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7b0c:	f7fe bb0c 	b.w	d6128 <system_ctrl_set_app_request_handler>
   d7b10:	2003f400 	.word	0x2003f400
   d7b14:	9a271c1e 	.word	0x9a271c1e
   d7b18:	2003e6d4 	.word	0x2003e6d4
   d7b1c:	00000000 	.word	0x00000000
   d7b20:	000d7a95 	.word	0x000d7a95

000d7b24 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7b24:	b508      	push	{r3, lr}
   d7b26:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <spark_protocol_instance+0xc>)
   d7b28:	681b      	ldr	r3, [r3, #0]
   d7b2a:	681b      	ldr	r3, [r3, #0]
   d7b2c:	9301      	str	r3, [sp, #4]
   d7b2e:	bd08      	pop	{r3, pc}
   d7b30:	0003025c 	.word	0x0003025c

000d7b34 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7b34:	b508      	push	{r3, lr}
   d7b36:	4b02      	ldr	r3, [pc, #8]	; (d7b40 <spark_protocol_set_product_id+0xc>)
   d7b38:	681b      	ldr	r3, [r3, #0]
   d7b3a:	685b      	ldr	r3, [r3, #4]
   d7b3c:	9301      	str	r3, [sp, #4]
   d7b3e:	bd08      	pop	{r3, pc}
   d7b40:	0003025c 	.word	0x0003025c

000d7b44 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7b44:	b508      	push	{r3, lr}
   d7b46:	4b02      	ldr	r3, [pc, #8]	; (d7b50 <spark_protocol_set_product_firmware_version+0xc>)
   d7b48:	681b      	ldr	r3, [r3, #0]
   d7b4a:	689b      	ldr	r3, [r3, #8]
   d7b4c:	9301      	str	r3, [sp, #4]
   d7b4e:	bd08      	pop	{r3, pc}
   d7b50:	0003025c 	.word	0x0003025c

000d7b54 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7b54:	b510      	push	{r4, lr}
   d7b56:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7b58:	f000 f906 	bl	d7d68 <_ZN8particle7globals11instanceSpiEv>
   d7b5c:	f7ff fbd8 	bl	d7310 <_ZN8SPIClass9isEnabledEv>
   d7b60:	b128      	cbz	r0, d7b6e <pinAvailable+0x1a>
   d7b62:	f1a4 030b 	sub.w	r3, r4, #11
   d7b66:	2b02      	cmp	r3, #2
   d7b68:	d801      	bhi.n	d7b6e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d7b6a:	2000      	movs	r0, #0
   d7b6c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7b6e:	f000 f8af 	bl	d7cd0 <_Z19__fetch_global_Wirev>
   d7b72:	f7ff f951 	bl	d6e18 <_ZN7TwoWire9isEnabledEv>
   d7b76:	b108      	cbz	r0, d7b7c <pinAvailable+0x28>
   d7b78:	2c01      	cmp	r4, #1
   d7b7a:	d9f6      	bls.n	d7b6a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7b7c:	f7ff fea0 	bl	d78c0 <_Z22__fetch_global_Serial1v>
   d7b80:	f7ff fe9a 	bl	d78b8 <_ZN11USARTSerial9isEnabledEv>
   d7b84:	b118      	cbz	r0, d7b8e <pinAvailable+0x3a>
   d7b86:	f1a4 0309 	sub.w	r3, r4, #9
   d7b8a:	2b01      	cmp	r3, #1
   d7b8c:	d9ed      	bls.n	d7b6a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7b8e:	2c23      	cmp	r4, #35	; 0x23
   d7b90:	bf8c      	ite	hi
   d7b92:	2000      	movhi	r0, #0
   d7b94:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7b96:	bd10      	pop	{r4, pc}

000d7b98 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b98:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7b9a:	b538      	push	{r3, r4, r5, lr}
   d7b9c:	4604      	mov	r4, r0
   d7b9e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ba0:	d80a      	bhi.n	d7bb8 <pinMode+0x20>
   d7ba2:	29ff      	cmp	r1, #255	; 0xff
   d7ba4:	d008      	beq.n	d7bb8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7ba6:	f7ff ffd5 	bl	d7b54 <pinAvailable>
   d7baa:	b128      	cbz	r0, d7bb8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7bac:	4629      	mov	r1, r5
   d7bae:	4620      	mov	r0, r4
}
   d7bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7bb4:	f7fe b936 	b.w	d5e24 <HAL_Pin_Mode>
   d7bb8:	bd38      	pop	{r3, r4, r5, pc}

000d7bba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7bba:	b538      	push	{r3, r4, r5, lr}
   d7bbc:	4604      	mov	r4, r0
   d7bbe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bc0:	f7fe f938 	bl	d5e34 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7bc4:	28ff      	cmp	r0, #255	; 0xff
   d7bc6:	d010      	beq.n	d7bea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7bc8:	2806      	cmp	r0, #6
   d7bca:	d804      	bhi.n	d7bd6 <digitalWrite+0x1c>
   d7bcc:	234d      	movs	r3, #77	; 0x4d
   d7bce:	fa23 f000 	lsr.w	r0, r3, r0
   d7bd2:	07c3      	lsls	r3, r0, #31
   d7bd4:	d409      	bmi.n	d7bea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7bd6:	4620      	mov	r0, r4
   d7bd8:	f7ff ffbc 	bl	d7b54 <pinAvailable>
   d7bdc:	b128      	cbz	r0, d7bea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bde:	4629      	mov	r1, r5
   d7be0:	4620      	mov	r0, r4
}
   d7be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7be6:	f7fe b92d 	b.w	d5e44 <HAL_GPIO_Write>
   d7bea:	bd38      	pop	{r3, r4, r5, pc}

000d7bec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7bec:	b510      	push	{r4, lr}
   d7bee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bf0:	f7fe f920 	bl	d5e34 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7bf4:	3804      	subs	r0, #4
   d7bf6:	b2c0      	uxtb	r0, r0
   d7bf8:	2801      	cmp	r0, #1
   d7bfa:	d908      	bls.n	d7c0e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	f7ff ffa9 	bl	d7b54 <pinAvailable>
   d7c02:	b120      	cbz	r0, d7c0e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c04:	4620      	mov	r0, r4
}
   d7c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c0a:	f7fe b923 	b.w	d5e54 <HAL_GPIO_Read>
}
   d7c0e:	2000      	movs	r0, #0
   d7c10:	bd10      	pop	{r4, pc}

000d7c12 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7c12:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7c14:	b510      	push	{r4, lr}
   d7c16:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7c18:	bf9c      	itt	ls
   d7c1a:	340e      	addls	r4, #14
   d7c1c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7c1e:	4620      	mov	r0, r4
   d7c20:	f7ff ff98 	bl	d7b54 <pinAvailable>
   d7c24:	b150      	cbz	r0, d7c3c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7c26:	2103      	movs	r1, #3
   d7c28:	4620      	mov	r0, r4
   d7c2a:	f7fe f8f3 	bl	d5e14 <HAL_Validate_Pin_Function>
   d7c2e:	2803      	cmp	r0, #3
   d7c30:	d104      	bne.n	d7c3c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c32:	4620      	mov	r0, r4
}
   d7c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c38:	f7fe b914 	b.w	d5e64 <HAL_ADC_Read>
}
   d7c3c:	2000      	movs	r0, #0
   d7c3e:	bd10      	pop	{r4, pc}

000d7c40 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7c40:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7c42:	4c07      	ldr	r4, [pc, #28]	; (d7c60 <_Z21__fetch_global_EEPROMv+0x20>)
   d7c44:	6823      	ldr	r3, [r4, #0]
   d7c46:	07db      	lsls	r3, r3, #31
   d7c48:	d408      	bmi.n	d7c5c <_Z21__fetch_global_EEPROMv+0x1c>
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	f7fc fa2b 	bl	d40a6 <__cxa_guard_acquire>
   d7c50:	b120      	cbz	r0, d7c5c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7c52:	f7fe f8a7 	bl	d5da4 <HAL_EEPROM_Init>
   d7c56:	4620      	mov	r0, r4
   d7c58:	f7fc fa2a 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7c5c:	4801      	ldr	r0, [pc, #4]	; (d7c64 <_Z21__fetch_global_EEPROMv+0x24>)
   d7c5e:	bd10      	pop	{r4, pc}
   d7c60:	2003e6dc 	.word	0x2003e6dc
   d7c64:	2003e6e0 	.word	0x2003e6e0

000d7c68 <_Z17acquireWireBufferv>:
   d7c68:	b570      	push	{r4, r5, r6, lr}
   d7c6a:	4604      	mov	r4, r0
   d7c6c:	2514      	movs	r5, #20
   d7c6e:	462a      	mov	r2, r5
   d7c70:	4e09      	ldr	r6, [pc, #36]	; (d7c98 <_Z17acquireWireBufferv+0x30>)
   d7c72:	2100      	movs	r1, #0
   d7c74:	f000 ffbb 	bl	d8bee <memset>
   d7c78:	8025      	strh	r5, [r4, #0]
   d7c7a:	2520      	movs	r5, #32
   d7c7c:	4631      	mov	r1, r6
   d7c7e:	60a5      	str	r5, [r4, #8]
   d7c80:	6125      	str	r5, [r4, #16]
   d7c82:	4628      	mov	r0, r5
   d7c84:	f000 f8af 	bl	d7de6 <_ZnajRKSt9nothrow_t>
   d7c88:	4631      	mov	r1, r6
   d7c8a:	6060      	str	r0, [r4, #4]
   d7c8c:	4628      	mov	r0, r5
   d7c8e:	f000 f8aa 	bl	d7de6 <_ZnajRKSt9nothrow_t>
   d7c92:	60e0      	str	r0, [r4, #12]
   d7c94:	4620      	mov	r0, r4
   d7c96:	bd70      	pop	{r4, r5, r6, pc}
   d7c98:	000d9e40 	.word	0x000d9e40

000d7c9c <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d7c9c:	b570      	push	{r4, r5, r6, lr}
   d7c9e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7ca0:	2514      	movs	r5, #20
   d7ca2:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ca4:	4e09      	ldr	r6, [pc, #36]	; (d7ccc <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7ca6:	2100      	movs	r1, #0
   d7ca8:	f000 ffa1 	bl	d8bee <memset>
   d7cac:	8025      	strh	r5, [r4, #0]
   d7cae:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cb0:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7cb2:	60a5      	str	r5, [r4, #8]
   d7cb4:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cb6:	4628      	mov	r0, r5
   d7cb8:	f000 f895 	bl	d7de6 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cbc:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7cbe:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cc0:	4628      	mov	r0, r5
   d7cc2:	f000 f890 	bl	d7de6 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7cc6:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d7cc8:	4620      	mov	r0, r4
   d7cca:	bd70      	pop	{r4, r5, r6, pc}
   d7ccc:	000d9e40 	.word	0x000d9e40

000d7cd0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7cd0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cd2:	4d0e      	ldr	r5, [pc, #56]	; (d7d0c <_Z19__fetch_global_Wirev+0x3c>)
   d7cd4:	6829      	ldr	r1, [r5, #0]
   d7cd6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7cda:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cdc:	d113      	bne.n	d7d06 <_Z19__fetch_global_Wirev+0x36>
   d7cde:	4628      	mov	r0, r5
   d7ce0:	f7fc f9e1 	bl	d40a6 <__cxa_guard_acquire>
   d7ce4:	b178      	cbz	r0, d7d06 <_Z19__fetch_global_Wirev+0x36>
   d7ce6:	a801      	add	r0, sp, #4
   d7ce8:	f7ff ffbe 	bl	d7c68 <_Z17acquireWireBufferv>
   d7cec:	aa01      	add	r2, sp, #4
   d7cee:	4621      	mov	r1, r4
   d7cf0:	4807      	ldr	r0, [pc, #28]	; (d7d10 <_Z19__fetch_global_Wirev+0x40>)
   d7cf2:	f7ff f83d 	bl	d6d70 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7cf6:	4628      	mov	r0, r5
   d7cf8:	f7fc f9da 	bl	d40b0 <__cxa_guard_release>
   d7cfc:	4a05      	ldr	r2, [pc, #20]	; (d7d14 <_Z19__fetch_global_Wirev+0x44>)
   d7cfe:	4906      	ldr	r1, [pc, #24]	; (d7d18 <_Z19__fetch_global_Wirev+0x48>)
   d7d00:	4803      	ldr	r0, [pc, #12]	; (d7d10 <_Z19__fetch_global_Wirev+0x40>)
   d7d02:	f000 f851 	bl	d7da8 <__aeabi_atexit>
	return wire;
}
   d7d06:	4802      	ldr	r0, [pc, #8]	; (d7d10 <_Z19__fetch_global_Wirev+0x40>)
   d7d08:	b007      	add	sp, #28
   d7d0a:	bd30      	pop	{r4, r5, pc}
   d7d0c:	2003e6e4 	.word	0x2003e6e4
   d7d10:	2003e6fc 	.word	0x2003e6fc
   d7d14:	2003e190 	.word	0x2003e190
   d7d18:	000d6d17 	.word	0x000d6d17

000d7d1c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7d1c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7d1e:	4c0e      	ldr	r4, [pc, #56]	; (d7d58 <_Z20__fetch_global_Wire1v+0x3c>)
   d7d20:	6823      	ldr	r3, [r4, #0]
   d7d22:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7d24:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7d26:	d413      	bmi.n	d7d50 <_Z20__fetch_global_Wire1v+0x34>
   d7d28:	4620      	mov	r0, r4
   d7d2a:	f7fc f9bc 	bl	d40a6 <__cxa_guard_acquire>
   d7d2e:	b178      	cbz	r0, d7d50 <_Z20__fetch_global_Wire1v+0x34>
   d7d30:	a801      	add	r0, sp, #4
   d7d32:	f7ff ffb3 	bl	d7c9c <_Z18acquireWire1Bufferv>
   d7d36:	aa01      	add	r2, sp, #4
   d7d38:	2101      	movs	r1, #1
   d7d3a:	4808      	ldr	r0, [pc, #32]	; (d7d5c <_Z20__fetch_global_Wire1v+0x40>)
   d7d3c:	f7ff f818 	bl	d6d70 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7d40:	4620      	mov	r0, r4
   d7d42:	f7fc f9b5 	bl	d40b0 <__cxa_guard_release>
   d7d46:	4a06      	ldr	r2, [pc, #24]	; (d7d60 <_Z20__fetch_global_Wire1v+0x44>)
   d7d48:	4906      	ldr	r1, [pc, #24]	; (d7d64 <_Z20__fetch_global_Wire1v+0x48>)
   d7d4a:	4804      	ldr	r0, [pc, #16]	; (d7d5c <_Z20__fetch_global_Wire1v+0x40>)
   d7d4c:	f000 f82c 	bl	d7da8 <__aeabi_atexit>
	return wire;
}
   d7d50:	4802      	ldr	r0, [pc, #8]	; (d7d5c <_Z20__fetch_global_Wire1v+0x40>)
   d7d52:	b006      	add	sp, #24
   d7d54:	bd10      	pop	{r4, pc}
   d7d56:	bf00      	nop
   d7d58:	2003e710 	.word	0x2003e710
   d7d5c:	2003e6e8 	.word	0x2003e6e8
   d7d60:	2003e190 	.word	0x2003e190
   d7d64:	000d6d17 	.word	0x000d6d17

000d7d68 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d7d68:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d7d6a:	4d0b      	ldr	r5, [pc, #44]	; (d7d98 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d7d6c:	6829      	ldr	r1, [r5, #0]
   d7d6e:	f011 0401 	ands.w	r4, r1, #1
   d7d72:	d10f      	bne.n	d7d94 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7d74:	4628      	mov	r0, r5
   d7d76:	f7fc f996 	bl	d40a6 <__cxa_guard_acquire>
   d7d7a:	b158      	cbz	r0, d7d94 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7d7c:	4621      	mov	r1, r4
   d7d7e:	4807      	ldr	r0, [pc, #28]	; (d7d9c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7d80:	f7ff fab8 	bl	d72f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7d84:	4628      	mov	r0, r5
   d7d86:	f7fc f993 	bl	d40b0 <__cxa_guard_release>
   d7d8a:	4a05      	ldr	r2, [pc, #20]	; (d7da0 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d7d8c:	4905      	ldr	r1, [pc, #20]	; (d7da4 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d7d8e:	4803      	ldr	r0, [pc, #12]	; (d7d9c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7d90:	f000 f80a 	bl	d7da8 <__aeabi_atexit>
    return instance;
}
   d7d94:	4801      	ldr	r0, [pc, #4]	; (d7d9c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7d96:	bd38      	pop	{r3, r4, r5, pc}
   d7d98:	2003e720 	.word	0x2003e720
   d7d9c:	2003e714 	.word	0x2003e714
   d7da0:	2003e190 	.word	0x2003e190
   d7da4:	000d72e5 	.word	0x000d72e5

000d7da8 <__aeabi_atexit>:
   d7da8:	460b      	mov	r3, r1
   d7daa:	4601      	mov	r1, r0
   d7dac:	4618      	mov	r0, r3
   d7dae:	f000 be0d 	b.w	d89cc <__cxa_atexit>

000d7db2 <_ZdlPvj>:
   d7db2:	f7fc b974 	b.w	d409e <_ZdlPv>
	...

000d7db8 <_ZSt15get_new_handlerv>:
   d7db8:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <_ZSt15get_new_handlerv+0xc>)
   d7dba:	6818      	ldr	r0, [r3, #0]
   d7dbc:	f3bf 8f5f 	dmb	sy
   d7dc0:	4770      	bx	lr
   d7dc2:	bf00      	nop
   d7dc4:	2003e724 	.word	0x2003e724

000d7dc8 <_ZnwjRKSt9nothrow_t>:
   d7dc8:	b510      	push	{r4, lr}
   d7dca:	2800      	cmp	r0, #0
   d7dcc:	bf14      	ite	ne
   d7dce:	4604      	movne	r4, r0
   d7dd0:	2401      	moveq	r4, #1
   d7dd2:	4620      	mov	r0, r4
   d7dd4:	f7fe fa8a 	bl	d62ec <malloc>
   d7dd8:	b920      	cbnz	r0, d7de4 <_ZnwjRKSt9nothrow_t+0x1c>
   d7dda:	f7ff ffed 	bl	d7db8 <_ZSt15get_new_handlerv>
   d7dde:	b108      	cbz	r0, d7de4 <_ZnwjRKSt9nothrow_t+0x1c>
   d7de0:	4780      	blx	r0
   d7de2:	e7f6      	b.n	d7dd2 <_ZnwjRKSt9nothrow_t+0xa>
   d7de4:	bd10      	pop	{r4, pc}

000d7de6 <_ZnajRKSt9nothrow_t>:
   d7de6:	f7ff bfef 	b.w	d7dc8 <_ZnwjRKSt9nothrow_t>

000d7dea <_ZSt25__throw_bad_function_callv>:
   d7dea:	b508      	push	{r3, lr}
   d7dec:	f7fe faa6 	bl	d633c <abort>

000d7df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7df0:	4b24      	ldr	r3, [pc, #144]	; (d7e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7df2:	681a      	ldr	r2, [r3, #0]
   d7df4:	07d0      	lsls	r0, r2, #31
   d7df6:	bf5c      	itt	pl
   d7df8:	2201      	movpl	r2, #1
   d7dfa:	601a      	strpl	r2, [r3, #0]
   d7dfc:	4b22      	ldr	r3, [pc, #136]	; (d7e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7dfe:	681a      	ldr	r2, [r3, #0]
   d7e00:	07d1      	lsls	r1, r2, #31
   d7e02:	bf5c      	itt	pl
   d7e04:	2201      	movpl	r2, #1
   d7e06:	601a      	strpl	r2, [r3, #0]
   d7e08:	4b20      	ldr	r3, [pc, #128]	; (d7e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7e0a:	681a      	ldr	r2, [r3, #0]
   d7e0c:	07d2      	lsls	r2, r2, #31
   d7e0e:	bf5c      	itt	pl
   d7e10:	2201      	movpl	r2, #1
   d7e12:	601a      	strpl	r2, [r3, #0]
   d7e14:	4b1e      	ldr	r3, [pc, #120]	; (d7e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7e16:	681a      	ldr	r2, [r3, #0]
   d7e18:	07d0      	lsls	r0, r2, #31
   d7e1a:	bf5c      	itt	pl
   d7e1c:	2201      	movpl	r2, #1
   d7e1e:	601a      	strpl	r2, [r3, #0]
   d7e20:	4b1c      	ldr	r3, [pc, #112]	; (d7e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7e22:	681a      	ldr	r2, [r3, #0]
   d7e24:	07d1      	lsls	r1, r2, #31
   d7e26:	bf5c      	itt	pl
   d7e28:	2201      	movpl	r2, #1
   d7e2a:	601a      	strpl	r2, [r3, #0]
   d7e2c:	4b1a      	ldr	r3, [pc, #104]	; (d7e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7e2e:	681a      	ldr	r2, [r3, #0]
   d7e30:	07d2      	lsls	r2, r2, #31
   d7e32:	bf5c      	itt	pl
   d7e34:	2201      	movpl	r2, #1
   d7e36:	601a      	strpl	r2, [r3, #0]
   d7e38:	4b18      	ldr	r3, [pc, #96]	; (d7e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7e3a:	681a      	ldr	r2, [r3, #0]
   d7e3c:	07d0      	lsls	r0, r2, #31
   d7e3e:	bf5c      	itt	pl
   d7e40:	2201      	movpl	r2, #1
   d7e42:	601a      	strpl	r2, [r3, #0]
   d7e44:	4b16      	ldr	r3, [pc, #88]	; (d7ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7e46:	681a      	ldr	r2, [r3, #0]
   d7e48:	07d1      	lsls	r1, r2, #31
   d7e4a:	bf5c      	itt	pl
   d7e4c:	2201      	movpl	r2, #1
   d7e4e:	601a      	strpl	r2, [r3, #0]
   d7e50:	4b14      	ldr	r3, [pc, #80]	; (d7ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7e52:	681a      	ldr	r2, [r3, #0]
   d7e54:	07d2      	lsls	r2, r2, #31
   d7e56:	bf5c      	itt	pl
   d7e58:	2201      	movpl	r2, #1
   d7e5a:	601a      	strpl	r2, [r3, #0]
   d7e5c:	4b12      	ldr	r3, [pc, #72]	; (d7ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7e5e:	681a      	ldr	r2, [r3, #0]
   d7e60:	07d0      	lsls	r0, r2, #31
   d7e62:	bf5c      	itt	pl
   d7e64:	2201      	movpl	r2, #1
   d7e66:	601a      	strpl	r2, [r3, #0]
   d7e68:	4b10      	ldr	r3, [pc, #64]	; (d7eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7e6a:	681a      	ldr	r2, [r3, #0]
   d7e6c:	07d1      	lsls	r1, r2, #31
   d7e6e:	bf5c      	itt	pl
   d7e70:	2201      	movpl	r2, #1
   d7e72:	601a      	strpl	r2, [r3, #0]
   d7e74:	4b0e      	ldr	r3, [pc, #56]	; (d7eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7e76:	681a      	ldr	r2, [r3, #0]
   d7e78:	07d2      	lsls	r2, r2, #31
   d7e7a:	bf5c      	itt	pl
   d7e7c:	2201      	movpl	r2, #1
   d7e7e:	601a      	strpl	r2, [r3, #0]
   d7e80:	4770      	bx	lr
   d7e82:	bf00      	nop
   d7e84:	2003e754 	.word	0x2003e754
   d7e88:	2003e750 	.word	0x2003e750
   d7e8c:	2003e74c 	.word	0x2003e74c
   d7e90:	2003e748 	.word	0x2003e748
   d7e94:	2003e744 	.word	0x2003e744
   d7e98:	2003e740 	.word	0x2003e740
   d7e9c:	2003e73c 	.word	0x2003e73c
   d7ea0:	2003e738 	.word	0x2003e738
   d7ea4:	2003e734 	.word	0x2003e734
   d7ea8:	2003e730 	.word	0x2003e730
   d7eac:	2003e72c 	.word	0x2003e72c
   d7eb0:	2003e728 	.word	0x2003e728

000d7eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7eb4:	4b18      	ldr	r3, [pc, #96]	; (d7f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7eb6:	681a      	ldr	r2, [r3, #0]
   d7eb8:	07d1      	lsls	r1, r2, #31
   d7eba:	bf5c      	itt	pl
   d7ebc:	2201      	movpl	r2, #1
   d7ebe:	601a      	strpl	r2, [r3, #0]
   d7ec0:	4b16      	ldr	r3, [pc, #88]	; (d7f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7ec2:	681a      	ldr	r2, [r3, #0]
   d7ec4:	07d2      	lsls	r2, r2, #31
   d7ec6:	bf5c      	itt	pl
   d7ec8:	2201      	movpl	r2, #1
   d7eca:	601a      	strpl	r2, [r3, #0]
   d7ecc:	4b14      	ldr	r3, [pc, #80]	; (d7f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7ece:	681a      	ldr	r2, [r3, #0]
   d7ed0:	07d0      	lsls	r0, r2, #31
   d7ed2:	bf5c      	itt	pl
   d7ed4:	2201      	movpl	r2, #1
   d7ed6:	601a      	strpl	r2, [r3, #0]
   d7ed8:	4b12      	ldr	r3, [pc, #72]	; (d7f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7eda:	681a      	ldr	r2, [r3, #0]
   d7edc:	07d1      	lsls	r1, r2, #31
   d7ede:	bf5c      	itt	pl
   d7ee0:	2201      	movpl	r2, #1
   d7ee2:	601a      	strpl	r2, [r3, #0]
   d7ee4:	4b10      	ldr	r3, [pc, #64]	; (d7f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7ee6:	681a      	ldr	r2, [r3, #0]
   d7ee8:	07d2      	lsls	r2, r2, #31
   d7eea:	bf5c      	itt	pl
   d7eec:	2201      	movpl	r2, #1
   d7eee:	601a      	strpl	r2, [r3, #0]
   d7ef0:	4b0e      	ldr	r3, [pc, #56]	; (d7f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7ef2:	681a      	ldr	r2, [r3, #0]
   d7ef4:	07d0      	lsls	r0, r2, #31
   d7ef6:	bf5c      	itt	pl
   d7ef8:	2201      	movpl	r2, #1
   d7efa:	601a      	strpl	r2, [r3, #0]
   d7efc:	4b0c      	ldr	r3, [pc, #48]	; (d7f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7efe:	681a      	ldr	r2, [r3, #0]
   d7f00:	07d1      	lsls	r1, r2, #31
   d7f02:	bf5c      	itt	pl
   d7f04:	2201      	movpl	r2, #1
   d7f06:	601a      	strpl	r2, [r3, #0]
   d7f08:	4b0a      	ldr	r3, [pc, #40]	; (d7f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f0a:	681a      	ldr	r2, [r3, #0]
   d7f0c:	07d2      	lsls	r2, r2, #31
   d7f0e:	bf5c      	itt	pl
   d7f10:	2201      	movpl	r2, #1
   d7f12:	601a      	strpl	r2, [r3, #0]
   d7f14:	4770      	bx	lr
   d7f16:	bf00      	nop
   d7f18:	2003e774 	.word	0x2003e774
   d7f1c:	2003e770 	.word	0x2003e770
   d7f20:	2003e76c 	.word	0x2003e76c
   d7f24:	2003e768 	.word	0x2003e768
   d7f28:	2003e764 	.word	0x2003e764
   d7f2c:	2003e760 	.word	0x2003e760
   d7f30:	2003e75c 	.word	0x2003e75c
   d7f34:	2003e758 	.word	0x2003e758

000d7f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f38:	4b18      	ldr	r3, [pc, #96]	; (d7f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f3a:	681a      	ldr	r2, [r3, #0]
   d7f3c:	07d1      	lsls	r1, r2, #31
   d7f3e:	bf5c      	itt	pl
   d7f40:	2201      	movpl	r2, #1
   d7f42:	601a      	strpl	r2, [r3, #0]
   d7f44:	4b16      	ldr	r3, [pc, #88]	; (d7fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7f46:	681a      	ldr	r2, [r3, #0]
   d7f48:	07d2      	lsls	r2, r2, #31
   d7f4a:	bf5c      	itt	pl
   d7f4c:	2201      	movpl	r2, #1
   d7f4e:	601a      	strpl	r2, [r3, #0]
   d7f50:	4b14      	ldr	r3, [pc, #80]	; (d7fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f52:	681a      	ldr	r2, [r3, #0]
   d7f54:	07d0      	lsls	r0, r2, #31
   d7f56:	bf5c      	itt	pl
   d7f58:	2201      	movpl	r2, #1
   d7f5a:	601a      	strpl	r2, [r3, #0]
   d7f5c:	4b12      	ldr	r3, [pc, #72]	; (d7fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f5e:	681a      	ldr	r2, [r3, #0]
   d7f60:	07d1      	lsls	r1, r2, #31
   d7f62:	bf5c      	itt	pl
   d7f64:	2201      	movpl	r2, #1
   d7f66:	601a      	strpl	r2, [r3, #0]
   d7f68:	4b10      	ldr	r3, [pc, #64]	; (d7fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f6a:	681a      	ldr	r2, [r3, #0]
   d7f6c:	07d2      	lsls	r2, r2, #31
   d7f6e:	bf5c      	itt	pl
   d7f70:	2201      	movpl	r2, #1
   d7f72:	601a      	strpl	r2, [r3, #0]
   d7f74:	4b0e      	ldr	r3, [pc, #56]	; (d7fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f76:	681a      	ldr	r2, [r3, #0]
   d7f78:	07d0      	lsls	r0, r2, #31
   d7f7a:	bf5c      	itt	pl
   d7f7c:	2201      	movpl	r2, #1
   d7f7e:	601a      	strpl	r2, [r3, #0]
   d7f80:	4b0c      	ldr	r3, [pc, #48]	; (d7fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f82:	681a      	ldr	r2, [r3, #0]
   d7f84:	07d1      	lsls	r1, r2, #31
   d7f86:	bf5c      	itt	pl
   d7f88:	2201      	movpl	r2, #1
   d7f8a:	601a      	strpl	r2, [r3, #0]
   d7f8c:	4b0a      	ldr	r3, [pc, #40]	; (d7fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f8e:	681a      	ldr	r2, [r3, #0]
   d7f90:	07d2      	lsls	r2, r2, #31
   d7f92:	bf5c      	itt	pl
   d7f94:	2201      	movpl	r2, #1
   d7f96:	601a      	strpl	r2, [r3, #0]
   d7f98:	4770      	bx	lr
   d7f9a:	bf00      	nop
   d7f9c:	2003e794 	.word	0x2003e794
   d7fa0:	2003e790 	.word	0x2003e790
   d7fa4:	2003e78c 	.word	0x2003e78c
   d7fa8:	2003e788 	.word	0x2003e788
   d7fac:	2003e784 	.word	0x2003e784
   d7fb0:	2003e780 	.word	0x2003e780
   d7fb4:	2003e77c 	.word	0x2003e77c
   d7fb8:	2003e778 	.word	0x2003e778

000d7fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7fbc:	4b24      	ldr	r3, [pc, #144]	; (d8050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7fbe:	681a      	ldr	r2, [r3, #0]
   d7fc0:	07d0      	lsls	r0, r2, #31
   d7fc2:	bf5c      	itt	pl
   d7fc4:	2201      	movpl	r2, #1
   d7fc6:	601a      	strpl	r2, [r3, #0]
   d7fc8:	4b22      	ldr	r3, [pc, #136]	; (d8054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7fca:	681a      	ldr	r2, [r3, #0]
   d7fcc:	07d1      	lsls	r1, r2, #31
   d7fce:	bf5c      	itt	pl
   d7fd0:	2201      	movpl	r2, #1
   d7fd2:	601a      	strpl	r2, [r3, #0]
   d7fd4:	4b20      	ldr	r3, [pc, #128]	; (d8058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7fd6:	681a      	ldr	r2, [r3, #0]
   d7fd8:	07d2      	lsls	r2, r2, #31
   d7fda:	bf5c      	itt	pl
   d7fdc:	2201      	movpl	r2, #1
   d7fde:	601a      	strpl	r2, [r3, #0]
   d7fe0:	4b1e      	ldr	r3, [pc, #120]	; (d805c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7fe2:	681a      	ldr	r2, [r3, #0]
   d7fe4:	07d0      	lsls	r0, r2, #31
   d7fe6:	bf5c      	itt	pl
   d7fe8:	2201      	movpl	r2, #1
   d7fea:	601a      	strpl	r2, [r3, #0]
   d7fec:	4b1c      	ldr	r3, [pc, #112]	; (d8060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7fee:	681a      	ldr	r2, [r3, #0]
   d7ff0:	07d1      	lsls	r1, r2, #31
   d7ff2:	bf5c      	itt	pl
   d7ff4:	2201      	movpl	r2, #1
   d7ff6:	601a      	strpl	r2, [r3, #0]
   d7ff8:	4b1a      	ldr	r3, [pc, #104]	; (d8064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7ffa:	681a      	ldr	r2, [r3, #0]
   d7ffc:	07d2      	lsls	r2, r2, #31
   d7ffe:	bf5c      	itt	pl
   d8000:	2201      	movpl	r2, #1
   d8002:	601a      	strpl	r2, [r3, #0]
   d8004:	4b18      	ldr	r3, [pc, #96]	; (d8068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8006:	681a      	ldr	r2, [r3, #0]
   d8008:	07d0      	lsls	r0, r2, #31
   d800a:	bf5c      	itt	pl
   d800c:	2201      	movpl	r2, #1
   d800e:	601a      	strpl	r2, [r3, #0]
   d8010:	4b16      	ldr	r3, [pc, #88]	; (d806c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8012:	681a      	ldr	r2, [r3, #0]
   d8014:	07d1      	lsls	r1, r2, #31
   d8016:	bf5c      	itt	pl
   d8018:	2201      	movpl	r2, #1
   d801a:	601a      	strpl	r2, [r3, #0]
   d801c:	4b14      	ldr	r3, [pc, #80]	; (d8070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d801e:	681a      	ldr	r2, [r3, #0]
   d8020:	07d2      	lsls	r2, r2, #31
   d8022:	bf5c      	itt	pl
   d8024:	2201      	movpl	r2, #1
   d8026:	601a      	strpl	r2, [r3, #0]
   d8028:	4b12      	ldr	r3, [pc, #72]	; (d8074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d802a:	681a      	ldr	r2, [r3, #0]
   d802c:	07d0      	lsls	r0, r2, #31
   d802e:	bf5c      	itt	pl
   d8030:	2201      	movpl	r2, #1
   d8032:	601a      	strpl	r2, [r3, #0]
   d8034:	4b10      	ldr	r3, [pc, #64]	; (d8078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8036:	681a      	ldr	r2, [r3, #0]
   d8038:	07d1      	lsls	r1, r2, #31
   d803a:	bf5c      	itt	pl
   d803c:	2201      	movpl	r2, #1
   d803e:	601a      	strpl	r2, [r3, #0]
   d8040:	4b0e      	ldr	r3, [pc, #56]	; (d807c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8042:	681a      	ldr	r2, [r3, #0]
   d8044:	07d2      	lsls	r2, r2, #31
   d8046:	bf5c      	itt	pl
   d8048:	2201      	movpl	r2, #1
   d804a:	601a      	strpl	r2, [r3, #0]
   d804c:	4770      	bx	lr
   d804e:	bf00      	nop
   d8050:	2003e7c4 	.word	0x2003e7c4
   d8054:	2003e7c0 	.word	0x2003e7c0
   d8058:	2003e7bc 	.word	0x2003e7bc
   d805c:	2003e7b8 	.word	0x2003e7b8
   d8060:	2003e7b4 	.word	0x2003e7b4
   d8064:	2003e7b0 	.word	0x2003e7b0
   d8068:	2003e7ac 	.word	0x2003e7ac
   d806c:	2003e7a8 	.word	0x2003e7a8
   d8070:	2003e7a4 	.word	0x2003e7a4
   d8074:	2003e7a0 	.word	0x2003e7a0
   d8078:	2003e79c 	.word	0x2003e79c
   d807c:	2003e798 	.word	0x2003e798

000d8080 <__aeabi_drsub>:
   d8080:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8084:	e002      	b.n	d808c <__adddf3>
   d8086:	bf00      	nop

000d8088 <__aeabi_dsub>:
   d8088:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d808c <__adddf3>:
   d808c:	b530      	push	{r4, r5, lr}
   d808e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8092:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8096:	ea94 0f05 	teq	r4, r5
   d809a:	bf08      	it	eq
   d809c:	ea90 0f02 	teqeq	r0, r2
   d80a0:	bf1f      	itttt	ne
   d80a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d80a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d80aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d80ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d80b2:	f000 80e2 	beq.w	d827a <__adddf3+0x1ee>
   d80b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d80ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d80be:	bfb8      	it	lt
   d80c0:	426d      	neglt	r5, r5
   d80c2:	dd0c      	ble.n	d80de <__adddf3+0x52>
   d80c4:	442c      	add	r4, r5
   d80c6:	ea80 0202 	eor.w	r2, r0, r2
   d80ca:	ea81 0303 	eor.w	r3, r1, r3
   d80ce:	ea82 0000 	eor.w	r0, r2, r0
   d80d2:	ea83 0101 	eor.w	r1, r3, r1
   d80d6:	ea80 0202 	eor.w	r2, r0, r2
   d80da:	ea81 0303 	eor.w	r3, r1, r3
   d80de:	2d36      	cmp	r5, #54	; 0x36
   d80e0:	bf88      	it	hi
   d80e2:	bd30      	pophi	{r4, r5, pc}
   d80e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d80e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d80ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d80f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d80f4:	d002      	beq.n	d80fc <__adddf3+0x70>
   d80f6:	4240      	negs	r0, r0
   d80f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d80fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8100:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8104:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8108:	d002      	beq.n	d8110 <__adddf3+0x84>
   d810a:	4252      	negs	r2, r2
   d810c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8110:	ea94 0f05 	teq	r4, r5
   d8114:	f000 80a7 	beq.w	d8266 <__adddf3+0x1da>
   d8118:	f1a4 0401 	sub.w	r4, r4, #1
   d811c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8120:	db0d      	blt.n	d813e <__adddf3+0xb2>
   d8122:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8126:	fa22 f205 	lsr.w	r2, r2, r5
   d812a:	1880      	adds	r0, r0, r2
   d812c:	f141 0100 	adc.w	r1, r1, #0
   d8130:	fa03 f20e 	lsl.w	r2, r3, lr
   d8134:	1880      	adds	r0, r0, r2
   d8136:	fa43 f305 	asr.w	r3, r3, r5
   d813a:	4159      	adcs	r1, r3
   d813c:	e00e      	b.n	d815c <__adddf3+0xd0>
   d813e:	f1a5 0520 	sub.w	r5, r5, #32
   d8142:	f10e 0e20 	add.w	lr, lr, #32
   d8146:	2a01      	cmp	r2, #1
   d8148:	fa03 fc0e 	lsl.w	ip, r3, lr
   d814c:	bf28      	it	cs
   d814e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8152:	fa43 f305 	asr.w	r3, r3, r5
   d8156:	18c0      	adds	r0, r0, r3
   d8158:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d815c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8160:	d507      	bpl.n	d8172 <__adddf3+0xe6>
   d8162:	f04f 0e00 	mov.w	lr, #0
   d8166:	f1dc 0c00 	rsbs	ip, ip, #0
   d816a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d816e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8172:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8176:	d31b      	bcc.n	d81b0 <__adddf3+0x124>
   d8178:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d817c:	d30c      	bcc.n	d8198 <__adddf3+0x10c>
   d817e:	0849      	lsrs	r1, r1, #1
   d8180:	ea5f 0030 	movs.w	r0, r0, rrx
   d8184:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8188:	f104 0401 	add.w	r4, r4, #1
   d818c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8190:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8194:	f080 809a 	bcs.w	d82cc <__adddf3+0x240>
   d8198:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d819c:	bf08      	it	eq
   d819e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d81a2:	f150 0000 	adcs.w	r0, r0, #0
   d81a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d81aa:	ea41 0105 	orr.w	r1, r1, r5
   d81ae:	bd30      	pop	{r4, r5, pc}
   d81b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d81b4:	4140      	adcs	r0, r0
   d81b6:	eb41 0101 	adc.w	r1, r1, r1
   d81ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d81be:	f1a4 0401 	sub.w	r4, r4, #1
   d81c2:	d1e9      	bne.n	d8198 <__adddf3+0x10c>
   d81c4:	f091 0f00 	teq	r1, #0
   d81c8:	bf04      	itt	eq
   d81ca:	4601      	moveq	r1, r0
   d81cc:	2000      	moveq	r0, #0
   d81ce:	fab1 f381 	clz	r3, r1
   d81d2:	bf08      	it	eq
   d81d4:	3320      	addeq	r3, #32
   d81d6:	f1a3 030b 	sub.w	r3, r3, #11
   d81da:	f1b3 0220 	subs.w	r2, r3, #32
   d81de:	da0c      	bge.n	d81fa <__adddf3+0x16e>
   d81e0:	320c      	adds	r2, #12
   d81e2:	dd08      	ble.n	d81f6 <__adddf3+0x16a>
   d81e4:	f102 0c14 	add.w	ip, r2, #20
   d81e8:	f1c2 020c 	rsb	r2, r2, #12
   d81ec:	fa01 f00c 	lsl.w	r0, r1, ip
   d81f0:	fa21 f102 	lsr.w	r1, r1, r2
   d81f4:	e00c      	b.n	d8210 <__adddf3+0x184>
   d81f6:	f102 0214 	add.w	r2, r2, #20
   d81fa:	bfd8      	it	le
   d81fc:	f1c2 0c20 	rsble	ip, r2, #32
   d8200:	fa01 f102 	lsl.w	r1, r1, r2
   d8204:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8208:	bfdc      	itt	le
   d820a:	ea41 010c 	orrle.w	r1, r1, ip
   d820e:	4090      	lslle	r0, r2
   d8210:	1ae4      	subs	r4, r4, r3
   d8212:	bfa2      	ittt	ge
   d8214:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8218:	4329      	orrge	r1, r5
   d821a:	bd30      	popge	{r4, r5, pc}
   d821c:	ea6f 0404 	mvn.w	r4, r4
   d8220:	3c1f      	subs	r4, #31
   d8222:	da1c      	bge.n	d825e <__adddf3+0x1d2>
   d8224:	340c      	adds	r4, #12
   d8226:	dc0e      	bgt.n	d8246 <__adddf3+0x1ba>
   d8228:	f104 0414 	add.w	r4, r4, #20
   d822c:	f1c4 0220 	rsb	r2, r4, #32
   d8230:	fa20 f004 	lsr.w	r0, r0, r4
   d8234:	fa01 f302 	lsl.w	r3, r1, r2
   d8238:	ea40 0003 	orr.w	r0, r0, r3
   d823c:	fa21 f304 	lsr.w	r3, r1, r4
   d8240:	ea45 0103 	orr.w	r1, r5, r3
   d8244:	bd30      	pop	{r4, r5, pc}
   d8246:	f1c4 040c 	rsb	r4, r4, #12
   d824a:	f1c4 0220 	rsb	r2, r4, #32
   d824e:	fa20 f002 	lsr.w	r0, r0, r2
   d8252:	fa01 f304 	lsl.w	r3, r1, r4
   d8256:	ea40 0003 	orr.w	r0, r0, r3
   d825a:	4629      	mov	r1, r5
   d825c:	bd30      	pop	{r4, r5, pc}
   d825e:	fa21 f004 	lsr.w	r0, r1, r4
   d8262:	4629      	mov	r1, r5
   d8264:	bd30      	pop	{r4, r5, pc}
   d8266:	f094 0f00 	teq	r4, #0
   d826a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d826e:	bf06      	itte	eq
   d8270:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8274:	3401      	addeq	r4, #1
   d8276:	3d01      	subne	r5, #1
   d8278:	e74e      	b.n	d8118 <__adddf3+0x8c>
   d827a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d827e:	bf18      	it	ne
   d8280:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8284:	d029      	beq.n	d82da <__adddf3+0x24e>
   d8286:	ea94 0f05 	teq	r4, r5
   d828a:	bf08      	it	eq
   d828c:	ea90 0f02 	teqeq	r0, r2
   d8290:	d005      	beq.n	d829e <__adddf3+0x212>
   d8292:	ea54 0c00 	orrs.w	ip, r4, r0
   d8296:	bf04      	itt	eq
   d8298:	4619      	moveq	r1, r3
   d829a:	4610      	moveq	r0, r2
   d829c:	bd30      	pop	{r4, r5, pc}
   d829e:	ea91 0f03 	teq	r1, r3
   d82a2:	bf1e      	ittt	ne
   d82a4:	2100      	movne	r1, #0
   d82a6:	2000      	movne	r0, #0
   d82a8:	bd30      	popne	{r4, r5, pc}
   d82aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d82ae:	d105      	bne.n	d82bc <__adddf3+0x230>
   d82b0:	0040      	lsls	r0, r0, #1
   d82b2:	4149      	adcs	r1, r1
   d82b4:	bf28      	it	cs
   d82b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d82ba:	bd30      	pop	{r4, r5, pc}
   d82bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d82c0:	bf3c      	itt	cc
   d82c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d82c6:	bd30      	popcc	{r4, r5, pc}
   d82c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d82d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d82d4:	f04f 0000 	mov.w	r0, #0
   d82d8:	bd30      	pop	{r4, r5, pc}
   d82da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d82de:	bf1a      	itte	ne
   d82e0:	4619      	movne	r1, r3
   d82e2:	4610      	movne	r0, r2
   d82e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d82e8:	bf1c      	itt	ne
   d82ea:	460b      	movne	r3, r1
   d82ec:	4602      	movne	r2, r0
   d82ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d82f2:	bf06      	itte	eq
   d82f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d82f8:	ea91 0f03 	teqeq	r1, r3
   d82fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8300:	bd30      	pop	{r4, r5, pc}
   d8302:	bf00      	nop

000d8304 <__aeabi_ui2d>:
   d8304:	f090 0f00 	teq	r0, #0
   d8308:	bf04      	itt	eq
   d830a:	2100      	moveq	r1, #0
   d830c:	4770      	bxeq	lr
   d830e:	b530      	push	{r4, r5, lr}
   d8310:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8314:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8318:	f04f 0500 	mov.w	r5, #0
   d831c:	f04f 0100 	mov.w	r1, #0
   d8320:	e750      	b.n	d81c4 <__adddf3+0x138>
   d8322:	bf00      	nop

000d8324 <__aeabi_i2d>:
   d8324:	f090 0f00 	teq	r0, #0
   d8328:	bf04      	itt	eq
   d832a:	2100      	moveq	r1, #0
   d832c:	4770      	bxeq	lr
   d832e:	b530      	push	{r4, r5, lr}
   d8330:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8334:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8338:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d833c:	bf48      	it	mi
   d833e:	4240      	negmi	r0, r0
   d8340:	f04f 0100 	mov.w	r1, #0
   d8344:	e73e      	b.n	d81c4 <__adddf3+0x138>
   d8346:	bf00      	nop

000d8348 <__aeabi_f2d>:
   d8348:	0042      	lsls	r2, r0, #1
   d834a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d834e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8352:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8356:	bf1f      	itttt	ne
   d8358:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d835c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8360:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8364:	4770      	bxne	lr
   d8366:	f092 0f00 	teq	r2, #0
   d836a:	bf14      	ite	ne
   d836c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8370:	4770      	bxeq	lr
   d8372:	b530      	push	{r4, r5, lr}
   d8374:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d837c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8380:	e720      	b.n	d81c4 <__adddf3+0x138>
   d8382:	bf00      	nop

000d8384 <__aeabi_ul2d>:
   d8384:	ea50 0201 	orrs.w	r2, r0, r1
   d8388:	bf08      	it	eq
   d838a:	4770      	bxeq	lr
   d838c:	b530      	push	{r4, r5, lr}
   d838e:	f04f 0500 	mov.w	r5, #0
   d8392:	e00a      	b.n	d83aa <__aeabi_l2d+0x16>

000d8394 <__aeabi_l2d>:
   d8394:	ea50 0201 	orrs.w	r2, r0, r1
   d8398:	bf08      	it	eq
   d839a:	4770      	bxeq	lr
   d839c:	b530      	push	{r4, r5, lr}
   d839e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d83a2:	d502      	bpl.n	d83aa <__aeabi_l2d+0x16>
   d83a4:	4240      	negs	r0, r0
   d83a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d83aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d83b6:	f43f aedc 	beq.w	d8172 <__adddf3+0xe6>
   d83ba:	f04f 0203 	mov.w	r2, #3
   d83be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83c2:	bf18      	it	ne
   d83c4:	3203      	addne	r2, #3
   d83c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83ca:	bf18      	it	ne
   d83cc:	3203      	addne	r2, #3
   d83ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d83d2:	f1c2 0320 	rsb	r3, r2, #32
   d83d6:	fa00 fc03 	lsl.w	ip, r0, r3
   d83da:	fa20 f002 	lsr.w	r0, r0, r2
   d83de:	fa01 fe03 	lsl.w	lr, r1, r3
   d83e2:	ea40 000e 	orr.w	r0, r0, lr
   d83e6:	fa21 f102 	lsr.w	r1, r1, r2
   d83ea:	4414      	add	r4, r2
   d83ec:	e6c1      	b.n	d8172 <__adddf3+0xe6>
   d83ee:	bf00      	nop

000d83f0 <__aeabi_dmul>:
   d83f0:	b570      	push	{r4, r5, r6, lr}
   d83f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d83f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d83fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d83fe:	bf1d      	ittte	ne
   d8400:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8404:	ea94 0f0c 	teqne	r4, ip
   d8408:	ea95 0f0c 	teqne	r5, ip
   d840c:	f000 f8de 	bleq	d85cc <__aeabi_dmul+0x1dc>
   d8410:	442c      	add	r4, r5
   d8412:	ea81 0603 	eor.w	r6, r1, r3
   d8416:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d841a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d841e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8422:	bf18      	it	ne
   d8424:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d842c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8430:	d038      	beq.n	d84a4 <__aeabi_dmul+0xb4>
   d8432:	fba0 ce02 	umull	ip, lr, r0, r2
   d8436:	f04f 0500 	mov.w	r5, #0
   d843a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d843e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8442:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8446:	f04f 0600 	mov.w	r6, #0
   d844a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d844e:	f09c 0f00 	teq	ip, #0
   d8452:	bf18      	it	ne
   d8454:	f04e 0e01 	orrne.w	lr, lr, #1
   d8458:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d845c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8460:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8464:	d204      	bcs.n	d8470 <__aeabi_dmul+0x80>
   d8466:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d846a:	416d      	adcs	r5, r5
   d846c:	eb46 0606 	adc.w	r6, r6, r6
   d8470:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8474:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8478:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d847c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8480:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8484:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8488:	bf88      	it	hi
   d848a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d848e:	d81e      	bhi.n	d84ce <__aeabi_dmul+0xde>
   d8490:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8494:	bf08      	it	eq
   d8496:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d849a:	f150 0000 	adcs.w	r0, r0, #0
   d849e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d84a2:	bd70      	pop	{r4, r5, r6, pc}
   d84a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d84a8:	ea46 0101 	orr.w	r1, r6, r1
   d84ac:	ea40 0002 	orr.w	r0, r0, r2
   d84b0:	ea81 0103 	eor.w	r1, r1, r3
   d84b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d84b8:	bfc2      	ittt	gt
   d84ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d84be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d84c2:	bd70      	popgt	{r4, r5, r6, pc}
   d84c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84c8:	f04f 0e00 	mov.w	lr, #0
   d84cc:	3c01      	subs	r4, #1
   d84ce:	f300 80ab 	bgt.w	d8628 <__aeabi_dmul+0x238>
   d84d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d84d6:	bfde      	ittt	le
   d84d8:	2000      	movle	r0, #0
   d84da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d84de:	bd70      	pople	{r4, r5, r6, pc}
   d84e0:	f1c4 0400 	rsb	r4, r4, #0
   d84e4:	3c20      	subs	r4, #32
   d84e6:	da35      	bge.n	d8554 <__aeabi_dmul+0x164>
   d84e8:	340c      	adds	r4, #12
   d84ea:	dc1b      	bgt.n	d8524 <__aeabi_dmul+0x134>
   d84ec:	f104 0414 	add.w	r4, r4, #20
   d84f0:	f1c4 0520 	rsb	r5, r4, #32
   d84f4:	fa00 f305 	lsl.w	r3, r0, r5
   d84f8:	fa20 f004 	lsr.w	r0, r0, r4
   d84fc:	fa01 f205 	lsl.w	r2, r1, r5
   d8500:	ea40 0002 	orr.w	r0, r0, r2
   d8504:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d850c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8510:	fa21 f604 	lsr.w	r6, r1, r4
   d8514:	eb42 0106 	adc.w	r1, r2, r6
   d8518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d851c:	bf08      	it	eq
   d851e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8522:	bd70      	pop	{r4, r5, r6, pc}
   d8524:	f1c4 040c 	rsb	r4, r4, #12
   d8528:	f1c4 0520 	rsb	r5, r4, #32
   d852c:	fa00 f304 	lsl.w	r3, r0, r4
   d8530:	fa20 f005 	lsr.w	r0, r0, r5
   d8534:	fa01 f204 	lsl.w	r2, r1, r4
   d8538:	ea40 0002 	orr.w	r0, r0, r2
   d853c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8540:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8544:	f141 0100 	adc.w	r1, r1, #0
   d8548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d854c:	bf08      	it	eq
   d854e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8552:	bd70      	pop	{r4, r5, r6, pc}
   d8554:	f1c4 0520 	rsb	r5, r4, #32
   d8558:	fa00 f205 	lsl.w	r2, r0, r5
   d855c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8560:	fa20 f304 	lsr.w	r3, r0, r4
   d8564:	fa01 f205 	lsl.w	r2, r1, r5
   d8568:	ea43 0302 	orr.w	r3, r3, r2
   d856c:	fa21 f004 	lsr.w	r0, r1, r4
   d8570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8574:	fa21 f204 	lsr.w	r2, r1, r4
   d8578:	ea20 0002 	bic.w	r0, r0, r2
   d857c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8584:	bf08      	it	eq
   d8586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d858a:	bd70      	pop	{r4, r5, r6, pc}
   d858c:	f094 0f00 	teq	r4, #0
   d8590:	d10f      	bne.n	d85b2 <__aeabi_dmul+0x1c2>
   d8592:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8596:	0040      	lsls	r0, r0, #1
   d8598:	eb41 0101 	adc.w	r1, r1, r1
   d859c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d85a0:	bf08      	it	eq
   d85a2:	3c01      	subeq	r4, #1
   d85a4:	d0f7      	beq.n	d8596 <__aeabi_dmul+0x1a6>
   d85a6:	ea41 0106 	orr.w	r1, r1, r6
   d85aa:	f095 0f00 	teq	r5, #0
   d85ae:	bf18      	it	ne
   d85b0:	4770      	bxne	lr
   d85b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d85b6:	0052      	lsls	r2, r2, #1
   d85b8:	eb43 0303 	adc.w	r3, r3, r3
   d85bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d85c0:	bf08      	it	eq
   d85c2:	3d01      	subeq	r5, #1
   d85c4:	d0f7      	beq.n	d85b6 <__aeabi_dmul+0x1c6>
   d85c6:	ea43 0306 	orr.w	r3, r3, r6
   d85ca:	4770      	bx	lr
   d85cc:	ea94 0f0c 	teq	r4, ip
   d85d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85d4:	bf18      	it	ne
   d85d6:	ea95 0f0c 	teqne	r5, ip
   d85da:	d00c      	beq.n	d85f6 <__aeabi_dmul+0x206>
   d85dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85e0:	bf18      	it	ne
   d85e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d85e6:	d1d1      	bne.n	d858c <__aeabi_dmul+0x19c>
   d85e8:	ea81 0103 	eor.w	r1, r1, r3
   d85ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85f0:	f04f 0000 	mov.w	r0, #0
   d85f4:	bd70      	pop	{r4, r5, r6, pc}
   d85f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85fa:	bf06      	itte	eq
   d85fc:	4610      	moveq	r0, r2
   d85fe:	4619      	moveq	r1, r3
   d8600:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8604:	d019      	beq.n	d863a <__aeabi_dmul+0x24a>
   d8606:	ea94 0f0c 	teq	r4, ip
   d860a:	d102      	bne.n	d8612 <__aeabi_dmul+0x222>
   d860c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8610:	d113      	bne.n	d863a <__aeabi_dmul+0x24a>
   d8612:	ea95 0f0c 	teq	r5, ip
   d8616:	d105      	bne.n	d8624 <__aeabi_dmul+0x234>
   d8618:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d861c:	bf1c      	itt	ne
   d861e:	4610      	movne	r0, r2
   d8620:	4619      	movne	r1, r3
   d8622:	d10a      	bne.n	d863a <__aeabi_dmul+0x24a>
   d8624:	ea81 0103 	eor.w	r1, r1, r3
   d8628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d862c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8634:	f04f 0000 	mov.w	r0, #0
   d8638:	bd70      	pop	{r4, r5, r6, pc}
   d863a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d863e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8642:	bd70      	pop	{r4, r5, r6, pc}

000d8644 <__aeabi_ddiv>:
   d8644:	b570      	push	{r4, r5, r6, lr}
   d8646:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d864a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d864e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8652:	bf1d      	ittte	ne
   d8654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8658:	ea94 0f0c 	teqne	r4, ip
   d865c:	ea95 0f0c 	teqne	r5, ip
   d8660:	f000 f8a7 	bleq	d87b2 <__aeabi_ddiv+0x16e>
   d8664:	eba4 0405 	sub.w	r4, r4, r5
   d8668:	ea81 0e03 	eor.w	lr, r1, r3
   d866c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8670:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8674:	f000 8088 	beq.w	d8788 <__aeabi_ddiv+0x144>
   d8678:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d867c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8680:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8684:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8688:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d868c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8690:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8694:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8698:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d869c:	429d      	cmp	r5, r3
   d869e:	bf08      	it	eq
   d86a0:	4296      	cmpeq	r6, r2
   d86a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d86a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d86aa:	d202      	bcs.n	d86b2 <__aeabi_ddiv+0x6e>
   d86ac:	085b      	lsrs	r3, r3, #1
   d86ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d86b2:	1ab6      	subs	r6, r6, r2
   d86b4:	eb65 0503 	sbc.w	r5, r5, r3
   d86b8:	085b      	lsrs	r3, r3, #1
   d86ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d86be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d86c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d86c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d86ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86ce:	bf22      	ittt	cs
   d86d0:	1ab6      	subcs	r6, r6, r2
   d86d2:	4675      	movcs	r5, lr
   d86d4:	ea40 000c 	orrcs.w	r0, r0, ip
   d86d8:	085b      	lsrs	r3, r3, #1
   d86da:	ea4f 0232 	mov.w	r2, r2, rrx
   d86de:	ebb6 0e02 	subs.w	lr, r6, r2
   d86e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86e6:	bf22      	ittt	cs
   d86e8:	1ab6      	subcs	r6, r6, r2
   d86ea:	4675      	movcs	r5, lr
   d86ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d86f0:	085b      	lsrs	r3, r3, #1
   d86f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d86f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d86fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86fe:	bf22      	ittt	cs
   d8700:	1ab6      	subcs	r6, r6, r2
   d8702:	4675      	movcs	r5, lr
   d8704:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8708:	085b      	lsrs	r3, r3, #1
   d870a:	ea4f 0232 	mov.w	r2, r2, rrx
   d870e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8712:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8716:	bf22      	ittt	cs
   d8718:	1ab6      	subcs	r6, r6, r2
   d871a:	4675      	movcs	r5, lr
   d871c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8720:	ea55 0e06 	orrs.w	lr, r5, r6
   d8724:	d018      	beq.n	d8758 <__aeabi_ddiv+0x114>
   d8726:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d872a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d872e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8732:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8736:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d873a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d873e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8742:	d1c0      	bne.n	d86c6 <__aeabi_ddiv+0x82>
   d8744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8748:	d10b      	bne.n	d8762 <__aeabi_ddiv+0x11e>
   d874a:	ea41 0100 	orr.w	r1, r1, r0
   d874e:	f04f 0000 	mov.w	r0, #0
   d8752:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8756:	e7b6      	b.n	d86c6 <__aeabi_ddiv+0x82>
   d8758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d875c:	bf04      	itt	eq
   d875e:	4301      	orreq	r1, r0
   d8760:	2000      	moveq	r0, #0
   d8762:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8766:	bf88      	it	hi
   d8768:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d876c:	f63f aeaf 	bhi.w	d84ce <__aeabi_dmul+0xde>
   d8770:	ebb5 0c03 	subs.w	ip, r5, r3
   d8774:	bf04      	itt	eq
   d8776:	ebb6 0c02 	subseq.w	ip, r6, r2
   d877a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d877e:	f150 0000 	adcs.w	r0, r0, #0
   d8782:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8786:	bd70      	pop	{r4, r5, r6, pc}
   d8788:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d878c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8790:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8794:	bfc2      	ittt	gt
   d8796:	ebd4 050c 	rsbsgt	r5, r4, ip
   d879a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d879e:	bd70      	popgt	{r4, r5, r6, pc}
   d87a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87a4:	f04f 0e00 	mov.w	lr, #0
   d87a8:	3c01      	subs	r4, #1
   d87aa:	e690      	b.n	d84ce <__aeabi_dmul+0xde>
   d87ac:	ea45 0e06 	orr.w	lr, r5, r6
   d87b0:	e68d      	b.n	d84ce <__aeabi_dmul+0xde>
   d87b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d87b6:	ea94 0f0c 	teq	r4, ip
   d87ba:	bf08      	it	eq
   d87bc:	ea95 0f0c 	teqeq	r5, ip
   d87c0:	f43f af3b 	beq.w	d863a <__aeabi_dmul+0x24a>
   d87c4:	ea94 0f0c 	teq	r4, ip
   d87c8:	d10a      	bne.n	d87e0 <__aeabi_ddiv+0x19c>
   d87ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d87ce:	f47f af34 	bne.w	d863a <__aeabi_dmul+0x24a>
   d87d2:	ea95 0f0c 	teq	r5, ip
   d87d6:	f47f af25 	bne.w	d8624 <__aeabi_dmul+0x234>
   d87da:	4610      	mov	r0, r2
   d87dc:	4619      	mov	r1, r3
   d87de:	e72c      	b.n	d863a <__aeabi_dmul+0x24a>
   d87e0:	ea95 0f0c 	teq	r5, ip
   d87e4:	d106      	bne.n	d87f4 <__aeabi_ddiv+0x1b0>
   d87e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d87ea:	f43f aefd 	beq.w	d85e8 <__aeabi_dmul+0x1f8>
   d87ee:	4610      	mov	r0, r2
   d87f0:	4619      	mov	r1, r3
   d87f2:	e722      	b.n	d863a <__aeabi_dmul+0x24a>
   d87f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87f8:	bf18      	it	ne
   d87fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87fe:	f47f aec5 	bne.w	d858c <__aeabi_dmul+0x19c>
   d8802:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8806:	f47f af0d 	bne.w	d8624 <__aeabi_dmul+0x234>
   d880a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d880e:	f47f aeeb 	bne.w	d85e8 <__aeabi_dmul+0x1f8>
   d8812:	e712      	b.n	d863a <__aeabi_dmul+0x24a>

000d8814 <__gedf2>:
   d8814:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8818:	e006      	b.n	d8828 <__cmpdf2+0x4>
   d881a:	bf00      	nop

000d881c <__ledf2>:
   d881c:	f04f 0c01 	mov.w	ip, #1
   d8820:	e002      	b.n	d8828 <__cmpdf2+0x4>
   d8822:	bf00      	nop

000d8824 <__cmpdf2>:
   d8824:	f04f 0c01 	mov.w	ip, #1
   d8828:	f84d cd04 	str.w	ip, [sp, #-4]!
   d882c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8834:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8838:	bf18      	it	ne
   d883a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d883e:	d01b      	beq.n	d8878 <__cmpdf2+0x54>
   d8840:	b001      	add	sp, #4
   d8842:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8846:	bf0c      	ite	eq
   d8848:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d884c:	ea91 0f03 	teqne	r1, r3
   d8850:	bf02      	ittt	eq
   d8852:	ea90 0f02 	teqeq	r0, r2
   d8856:	2000      	moveq	r0, #0
   d8858:	4770      	bxeq	lr
   d885a:	f110 0f00 	cmn.w	r0, #0
   d885e:	ea91 0f03 	teq	r1, r3
   d8862:	bf58      	it	pl
   d8864:	4299      	cmppl	r1, r3
   d8866:	bf08      	it	eq
   d8868:	4290      	cmpeq	r0, r2
   d886a:	bf2c      	ite	cs
   d886c:	17d8      	asrcs	r0, r3, #31
   d886e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8872:	f040 0001 	orr.w	r0, r0, #1
   d8876:	4770      	bx	lr
   d8878:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d887c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8880:	d102      	bne.n	d8888 <__cmpdf2+0x64>
   d8882:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8886:	d107      	bne.n	d8898 <__cmpdf2+0x74>
   d8888:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d888c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8890:	d1d6      	bne.n	d8840 <__cmpdf2+0x1c>
   d8892:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8896:	d0d3      	beq.n	d8840 <__cmpdf2+0x1c>
   d8898:	f85d 0b04 	ldr.w	r0, [sp], #4
   d889c:	4770      	bx	lr
   d889e:	bf00      	nop

000d88a0 <__aeabi_cdrcmple>:
   d88a0:	4684      	mov	ip, r0
   d88a2:	4610      	mov	r0, r2
   d88a4:	4662      	mov	r2, ip
   d88a6:	468c      	mov	ip, r1
   d88a8:	4619      	mov	r1, r3
   d88aa:	4663      	mov	r3, ip
   d88ac:	e000      	b.n	d88b0 <__aeabi_cdcmpeq>
   d88ae:	bf00      	nop

000d88b0 <__aeabi_cdcmpeq>:
   d88b0:	b501      	push	{r0, lr}
   d88b2:	f7ff ffb7 	bl	d8824 <__cmpdf2>
   d88b6:	2800      	cmp	r0, #0
   d88b8:	bf48      	it	mi
   d88ba:	f110 0f00 	cmnmi.w	r0, #0
   d88be:	bd01      	pop	{r0, pc}

000d88c0 <__aeabi_dcmpeq>:
   d88c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88c4:	f7ff fff4 	bl	d88b0 <__aeabi_cdcmpeq>
   d88c8:	bf0c      	ite	eq
   d88ca:	2001      	moveq	r0, #1
   d88cc:	2000      	movne	r0, #0
   d88ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d88d2:	bf00      	nop

000d88d4 <__aeabi_dcmplt>:
   d88d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88d8:	f7ff ffea 	bl	d88b0 <__aeabi_cdcmpeq>
   d88dc:	bf34      	ite	cc
   d88de:	2001      	movcc	r0, #1
   d88e0:	2000      	movcs	r0, #0
   d88e2:	f85d fb08 	ldr.w	pc, [sp], #8
   d88e6:	bf00      	nop

000d88e8 <__aeabi_dcmple>:
   d88e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88ec:	f7ff ffe0 	bl	d88b0 <__aeabi_cdcmpeq>
   d88f0:	bf94      	ite	ls
   d88f2:	2001      	movls	r0, #1
   d88f4:	2000      	movhi	r0, #0
   d88f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d88fa:	bf00      	nop

000d88fc <__aeabi_dcmpge>:
   d88fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8900:	f7ff ffce 	bl	d88a0 <__aeabi_cdrcmple>
   d8904:	bf94      	ite	ls
   d8906:	2001      	movls	r0, #1
   d8908:	2000      	movhi	r0, #0
   d890a:	f85d fb08 	ldr.w	pc, [sp], #8
   d890e:	bf00      	nop

000d8910 <__aeabi_dcmpgt>:
   d8910:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8914:	f7ff ffc4 	bl	d88a0 <__aeabi_cdrcmple>
   d8918:	bf34      	ite	cc
   d891a:	2001      	movcc	r0, #1
   d891c:	2000      	movcs	r0, #0
   d891e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8922:	bf00      	nop

000d8924 <__aeabi_d2f>:
   d8924:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8928:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d892c:	bf24      	itt	cs
   d892e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8932:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8936:	d90d      	bls.n	d8954 <__aeabi_d2f+0x30>
   d8938:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d893c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8940:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8944:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8948:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d894c:	bf08      	it	eq
   d894e:	f020 0001 	biceq.w	r0, r0, #1
   d8952:	4770      	bx	lr
   d8954:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8958:	d121      	bne.n	d899e <__aeabi_d2f+0x7a>
   d895a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d895e:	bfbc      	itt	lt
   d8960:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8964:	4770      	bxlt	lr
   d8966:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d896a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d896e:	f1c2 0218 	rsb	r2, r2, #24
   d8972:	f1c2 0c20 	rsb	ip, r2, #32
   d8976:	fa10 f30c 	lsls.w	r3, r0, ip
   d897a:	fa20 f002 	lsr.w	r0, r0, r2
   d897e:	bf18      	it	ne
   d8980:	f040 0001 	orrne.w	r0, r0, #1
   d8984:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8988:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d898c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8990:	ea40 000c 	orr.w	r0, r0, ip
   d8994:	fa23 f302 	lsr.w	r3, r3, r2
   d8998:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d899c:	e7cc      	b.n	d8938 <__aeabi_d2f+0x14>
   d899e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d89a2:	d107      	bne.n	d89b4 <__aeabi_d2f+0x90>
   d89a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d89a8:	bf1e      	ittt	ne
   d89aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d89ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d89b2:	4770      	bxne	lr
   d89b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d89b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d89bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d89c0:	4770      	bx	lr
   d89c2:	bf00      	nop

000d89c4 <atoi>:
   d89c4:	220a      	movs	r2, #10
   d89c6:	2100      	movs	r1, #0
   d89c8:	f000 ba26 	b.w	d8e18 <strtol>

000d89cc <__cxa_atexit>:
   d89cc:	b510      	push	{r4, lr}
   d89ce:	4c05      	ldr	r4, [pc, #20]	; (d89e4 <__cxa_atexit+0x18>)
   d89d0:	4613      	mov	r3, r2
   d89d2:	b12c      	cbz	r4, d89e0 <__cxa_atexit+0x14>
   d89d4:	460a      	mov	r2, r1
   d89d6:	4601      	mov	r1, r0
   d89d8:	2002      	movs	r0, #2
   d89da:	f3af 8000 	nop.w
   d89de:	bd10      	pop	{r4, pc}
   d89e0:	4620      	mov	r0, r4
   d89e2:	bd10      	pop	{r4, pc}
   d89e4:	00000000 	.word	0x00000000

000d89e8 <localtime>:
   d89e8:	b538      	push	{r3, r4, r5, lr}
   d89ea:	4b07      	ldr	r3, [pc, #28]	; (d8a08 <localtime+0x20>)
   d89ec:	681c      	ldr	r4, [r3, #0]
   d89ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d89f0:	4605      	mov	r5, r0
   d89f2:	b91b      	cbnz	r3, d89fc <localtime+0x14>
   d89f4:	2024      	movs	r0, #36	; 0x24
   d89f6:	f7fd fc79 	bl	d62ec <malloc>
   d89fa:	63e0      	str	r0, [r4, #60]	; 0x3c
   d89fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d89fe:	4628      	mov	r0, r5
   d8a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8a04:	f000 b802 	b.w	d8a0c <localtime_r>
   d8a08:	2003e140 	.word	0x2003e140

000d8a0c <localtime_r>:
   d8a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8a10:	460c      	mov	r4, r1
   d8a12:	4680      	mov	r8, r0
   d8a14:	f000 fd06 	bl	d9424 <__gettzinfo>
   d8a18:	4621      	mov	r1, r4
   d8a1a:	4607      	mov	r7, r0
   d8a1c:	4640      	mov	r0, r8
   d8a1e:	f000 fd05 	bl	d942c <gmtime_r>
   d8a22:	6946      	ldr	r6, [r0, #20]
   d8a24:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8a28:	07b3      	lsls	r3, r6, #30
   d8a2a:	4604      	mov	r4, r0
   d8a2c:	d105      	bne.n	d8a3a <localtime_r+0x2e>
   d8a2e:	2264      	movs	r2, #100	; 0x64
   d8a30:	fb96 f3f2 	sdiv	r3, r6, r2
   d8a34:	fb02 6313 	mls	r3, r2, r3, r6
   d8a38:	b94b      	cbnz	r3, d8a4e <localtime_r+0x42>
   d8a3a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d8a3e:	fb96 f3f5 	sdiv	r3, r6, r5
   d8a42:	fb05 6513 	mls	r5, r5, r3, r6
   d8a46:	fab5 f385 	clz	r3, r5
   d8a4a:	095b      	lsrs	r3, r3, #5
   d8a4c:	e000      	b.n	d8a50 <localtime_r+0x44>
   d8a4e:	2301      	movs	r3, #1
   d8a50:	4a5f      	ldr	r2, [pc, #380]	; (d8bd0 <localtime_r+0x1c4>)
   d8a52:	2530      	movs	r5, #48	; 0x30
   d8a54:	fb05 2503 	mla	r5, r5, r3, r2
   d8a58:	f000 fb18 	bl	d908c <__tz_lock>
   d8a5c:	f000 fb18 	bl	d9090 <_tzset_unlocked>
   d8a60:	4b5c      	ldr	r3, [pc, #368]	; (d8bd4 <localtime_r+0x1c8>)
   d8a62:	681b      	ldr	r3, [r3, #0]
   d8a64:	b1f3      	cbz	r3, d8aa4 <localtime_r+0x98>
   d8a66:	687b      	ldr	r3, [r7, #4]
   d8a68:	429e      	cmp	r6, r3
   d8a6a:	d105      	bne.n	d8a78 <localtime_r+0x6c>
   d8a6c:	6839      	ldr	r1, [r7, #0]
   d8a6e:	f8d8 3000 	ldr.w	r3, [r8]
   d8a72:	69fa      	ldr	r2, [r7, #28]
   d8a74:	b941      	cbnz	r1, d8a88 <localtime_r+0x7c>
   d8a76:	e00a      	b.n	d8a8e <localtime_r+0x82>
   d8a78:	4630      	mov	r0, r6
   d8a7a:	f000 fa5f 	bl	d8f3c <__tzcalc_limits>
   d8a7e:	2800      	cmp	r0, #0
   d8a80:	d1f4      	bne.n	d8a6c <localtime_r+0x60>
   d8a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8a86:	e00d      	b.n	d8aa4 <localtime_r+0x98>
   d8a88:	4293      	cmp	r3, r2
   d8a8a:	db08      	blt.n	d8a9e <localtime_r+0x92>
   d8a8c:	e001      	b.n	d8a92 <localtime_r+0x86>
   d8a8e:	4293      	cmp	r3, r2
   d8a90:	da07      	bge.n	d8aa2 <localtime_r+0x96>
   d8a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8a94:	4293      	cmp	r3, r2
   d8a96:	bfac      	ite	ge
   d8a98:	2300      	movge	r3, #0
   d8a9a:	2301      	movlt	r3, #1
   d8a9c:	e002      	b.n	d8aa4 <localtime_r+0x98>
   d8a9e:	2300      	movs	r3, #0
   d8aa0:	e000      	b.n	d8aa4 <localtime_r+0x98>
   d8aa2:	2301      	movs	r3, #1
   d8aa4:	6223      	str	r3, [r4, #32]
   d8aa6:	6a23      	ldr	r3, [r4, #32]
   d8aa8:	2b01      	cmp	r3, #1
   d8aaa:	bf0c      	ite	eq
   d8aac:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8aae:	6a39      	ldrne	r1, [r7, #32]
   d8ab0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8ab4:	203c      	movs	r0, #60	; 0x3c
   d8ab6:	fb91 f6f3 	sdiv	r6, r1, r3
   d8aba:	fb03 1316 	mls	r3, r3, r6, r1
   d8abe:	6861      	ldr	r1, [r4, #4]
   d8ac0:	fb93 f2f0 	sdiv	r2, r3, r0
   d8ac4:	fb00 3012 	mls	r0, r0, r2, r3
   d8ac8:	6823      	ldr	r3, [r4, #0]
   d8aca:	1a89      	subs	r1, r1, r2
   d8acc:	68a2      	ldr	r2, [r4, #8]
   d8ace:	6061      	str	r1, [r4, #4]
   d8ad0:	1a1b      	subs	r3, r3, r0
   d8ad2:	1b92      	subs	r2, r2, r6
   d8ad4:	2b3b      	cmp	r3, #59	; 0x3b
   d8ad6:	6023      	str	r3, [r4, #0]
   d8ad8:	60a2      	str	r2, [r4, #8]
   d8ada:	dd03      	ble.n	d8ae4 <localtime_r+0xd8>
   d8adc:	3101      	adds	r1, #1
   d8ade:	6061      	str	r1, [r4, #4]
   d8ae0:	3b3c      	subs	r3, #60	; 0x3c
   d8ae2:	e004      	b.n	d8aee <localtime_r+0xe2>
   d8ae4:	2b00      	cmp	r3, #0
   d8ae6:	da03      	bge.n	d8af0 <localtime_r+0xe4>
   d8ae8:	3901      	subs	r1, #1
   d8aea:	6061      	str	r1, [r4, #4]
   d8aec:	333c      	adds	r3, #60	; 0x3c
   d8aee:	6023      	str	r3, [r4, #0]
   d8af0:	6863      	ldr	r3, [r4, #4]
   d8af2:	2b3b      	cmp	r3, #59	; 0x3b
   d8af4:	dd03      	ble.n	d8afe <localtime_r+0xf2>
   d8af6:	3201      	adds	r2, #1
   d8af8:	60a2      	str	r2, [r4, #8]
   d8afa:	3b3c      	subs	r3, #60	; 0x3c
   d8afc:	e004      	b.n	d8b08 <localtime_r+0xfc>
   d8afe:	2b00      	cmp	r3, #0
   d8b00:	da03      	bge.n	d8b0a <localtime_r+0xfe>
   d8b02:	3a01      	subs	r2, #1
   d8b04:	60a2      	str	r2, [r4, #8]
   d8b06:	333c      	adds	r3, #60	; 0x3c
   d8b08:	6063      	str	r3, [r4, #4]
   d8b0a:	68a3      	ldr	r3, [r4, #8]
   d8b0c:	2b17      	cmp	r3, #23
   d8b0e:	dd22      	ble.n	d8b56 <localtime_r+0x14a>
   d8b10:	69e2      	ldr	r2, [r4, #28]
   d8b12:	3201      	adds	r2, #1
   d8b14:	61e2      	str	r2, [r4, #28]
   d8b16:	69a2      	ldr	r2, [r4, #24]
   d8b18:	3201      	adds	r2, #1
   d8b1a:	2a06      	cmp	r2, #6
   d8b1c:	bfc8      	it	gt
   d8b1e:	2200      	movgt	r2, #0
   d8b20:	61a2      	str	r2, [r4, #24]
   d8b22:	68e2      	ldr	r2, [r4, #12]
   d8b24:	3b18      	subs	r3, #24
   d8b26:	3201      	adds	r2, #1
   d8b28:	60a3      	str	r3, [r4, #8]
   d8b2a:	6923      	ldr	r3, [r4, #16]
   d8b2c:	60e2      	str	r2, [r4, #12]
   d8b2e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8b32:	428a      	cmp	r2, r1
   d8b34:	dd46      	ble.n	d8bc4 <localtime_r+0x1b8>
   d8b36:	3301      	adds	r3, #1
   d8b38:	2b0c      	cmp	r3, #12
   d8b3a:	bf0c      	ite	eq
   d8b3c:	6963      	ldreq	r3, [r4, #20]
   d8b3e:	6123      	strne	r3, [r4, #16]
   d8b40:	eba2 0201 	sub.w	r2, r2, r1
   d8b44:	60e2      	str	r2, [r4, #12]
   d8b46:	bf01      	itttt	eq
   d8b48:	3301      	addeq	r3, #1
   d8b4a:	2200      	moveq	r2, #0
   d8b4c:	6122      	streq	r2, [r4, #16]
   d8b4e:	6163      	streq	r3, [r4, #20]
   d8b50:	bf08      	it	eq
   d8b52:	61e2      	streq	r2, [r4, #28]
   d8b54:	e036      	b.n	d8bc4 <localtime_r+0x1b8>
   d8b56:	2b00      	cmp	r3, #0
   d8b58:	da34      	bge.n	d8bc4 <localtime_r+0x1b8>
   d8b5a:	69e2      	ldr	r2, [r4, #28]
   d8b5c:	3a01      	subs	r2, #1
   d8b5e:	61e2      	str	r2, [r4, #28]
   d8b60:	69a2      	ldr	r2, [r4, #24]
   d8b62:	3a01      	subs	r2, #1
   d8b64:	bf48      	it	mi
   d8b66:	2206      	movmi	r2, #6
   d8b68:	61a2      	str	r2, [r4, #24]
   d8b6a:	68e2      	ldr	r2, [r4, #12]
   d8b6c:	3318      	adds	r3, #24
   d8b6e:	3a01      	subs	r2, #1
   d8b70:	60e2      	str	r2, [r4, #12]
   d8b72:	60a3      	str	r3, [r4, #8]
   d8b74:	bb32      	cbnz	r2, d8bc4 <localtime_r+0x1b8>
   d8b76:	6923      	ldr	r3, [r4, #16]
   d8b78:	3b01      	subs	r3, #1
   d8b7a:	d401      	bmi.n	d8b80 <localtime_r+0x174>
   d8b7c:	6123      	str	r3, [r4, #16]
   d8b7e:	e01d      	b.n	d8bbc <localtime_r+0x1b0>
   d8b80:	230b      	movs	r3, #11
   d8b82:	6123      	str	r3, [r4, #16]
   d8b84:	6963      	ldr	r3, [r4, #20]
   d8b86:	1e5a      	subs	r2, r3, #1
   d8b88:	f012 0f03 	tst.w	r2, #3
   d8b8c:	6162      	str	r2, [r4, #20]
   d8b8e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8b92:	d105      	bne.n	d8ba0 <localtime_r+0x194>
   d8b94:	2164      	movs	r1, #100	; 0x64
   d8b96:	fb93 f2f1 	sdiv	r2, r3, r1
   d8b9a:	fb01 3212 	mls	r2, r1, r2, r3
   d8b9e:	b94a      	cbnz	r2, d8bb4 <localtime_r+0x1a8>
   d8ba0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8ba4:	fb93 f2f1 	sdiv	r2, r3, r1
   d8ba8:	fb01 3312 	mls	r3, r1, r2, r3
   d8bac:	fab3 f383 	clz	r3, r3
   d8bb0:	095b      	lsrs	r3, r3, #5
   d8bb2:	e000      	b.n	d8bb6 <localtime_r+0x1aa>
   d8bb4:	2301      	movs	r3, #1
   d8bb6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8bba:	61e3      	str	r3, [r4, #28]
   d8bbc:	6923      	ldr	r3, [r4, #16]
   d8bbe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8bc2:	60e3      	str	r3, [r4, #12]
   d8bc4:	f000 fa63 	bl	d908e <__tz_unlock>
   d8bc8:	4620      	mov	r0, r4
   d8bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8bce:	bf00      	nop
   d8bd0:	000d9fa4 	.word	0x000d9fa4
   d8bd4:	2003e7e4 	.word	0x2003e7e4

000d8bd8 <memcpy>:
   d8bd8:	b510      	push	{r4, lr}
   d8bda:	1e43      	subs	r3, r0, #1
   d8bdc:	440a      	add	r2, r1
   d8bde:	4291      	cmp	r1, r2
   d8be0:	d004      	beq.n	d8bec <memcpy+0x14>
   d8be2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8be6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8bea:	e7f8      	b.n	d8bde <memcpy+0x6>
   d8bec:	bd10      	pop	{r4, pc}

000d8bee <memset>:
   d8bee:	4402      	add	r2, r0
   d8bf0:	4603      	mov	r3, r0
   d8bf2:	4293      	cmp	r3, r2
   d8bf4:	d002      	beq.n	d8bfc <memset+0xe>
   d8bf6:	f803 1b01 	strb.w	r1, [r3], #1
   d8bfa:	e7fa      	b.n	d8bf2 <memset+0x4>
   d8bfc:	4770      	bx	lr
	...

000d8c00 <srand>:
   d8c00:	b538      	push	{r3, r4, r5, lr}
   d8c02:	4b12      	ldr	r3, [pc, #72]	; (d8c4c <srand+0x4c>)
   d8c04:	681c      	ldr	r4, [r3, #0]
   d8c06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8c08:	4605      	mov	r5, r0
   d8c0a:	b9d3      	cbnz	r3, d8c42 <srand+0x42>
   d8c0c:	2018      	movs	r0, #24
   d8c0e:	f7fd fb6d 	bl	d62ec <malloc>
   d8c12:	f243 330e 	movw	r3, #13070	; 0x330e
   d8c16:	63a0      	str	r0, [r4, #56]	; 0x38
   d8c18:	8003      	strh	r3, [r0, #0]
   d8c1a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8c1e:	8043      	strh	r3, [r0, #2]
   d8c20:	f241 2334 	movw	r3, #4660	; 0x1234
   d8c24:	8083      	strh	r3, [r0, #4]
   d8c26:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8c2a:	80c3      	strh	r3, [r0, #6]
   d8c2c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8c30:	8103      	strh	r3, [r0, #8]
   d8c32:	2305      	movs	r3, #5
   d8c34:	8143      	strh	r3, [r0, #10]
   d8c36:	230b      	movs	r3, #11
   d8c38:	8183      	strh	r3, [r0, #12]
   d8c3a:	2201      	movs	r2, #1
   d8c3c:	2300      	movs	r3, #0
   d8c3e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8c44:	2200      	movs	r2, #0
   d8c46:	611d      	str	r5, [r3, #16]
   d8c48:	615a      	str	r2, [r3, #20]
   d8c4a:	bd38      	pop	{r3, r4, r5, pc}
   d8c4c:	2003e140 	.word	0x2003e140

000d8c50 <strcmp>:
   d8c50:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8c54:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8c58:	2a01      	cmp	r2, #1
   d8c5a:	bf28      	it	cs
   d8c5c:	429a      	cmpcs	r2, r3
   d8c5e:	d0f7      	beq.n	d8c50 <strcmp>
   d8c60:	1ad0      	subs	r0, r2, r3
   d8c62:	4770      	bx	lr

000d8c64 <strcpy>:
   d8c64:	4603      	mov	r3, r0
   d8c66:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8c6a:	f803 2b01 	strb.w	r2, [r3], #1
   d8c6e:	2a00      	cmp	r2, #0
   d8c70:	d1f9      	bne.n	d8c66 <strcpy+0x2>
   d8c72:	4770      	bx	lr

000d8c74 <strdup>:
   d8c74:	4b02      	ldr	r3, [pc, #8]	; (d8c80 <strdup+0xc>)
   d8c76:	4601      	mov	r1, r0
   d8c78:	6818      	ldr	r0, [r3, #0]
   d8c7a:	f000 b803 	b.w	d8c84 <_strdup_r>
   d8c7e:	bf00      	nop
   d8c80:	2003e140 	.word	0x2003e140

000d8c84 <_strdup_r>:
   d8c84:	b570      	push	{r4, r5, r6, lr}
   d8c86:	4606      	mov	r6, r0
   d8c88:	4608      	mov	r0, r1
   d8c8a:	460c      	mov	r4, r1
   d8c8c:	f000 f80d 	bl	d8caa <strlen>
   d8c90:	1c45      	adds	r5, r0, #1
   d8c92:	4629      	mov	r1, r5
   d8c94:	4630      	mov	r0, r6
   d8c96:	f7fd fb59 	bl	d634c <_malloc_r>
   d8c9a:	4606      	mov	r6, r0
   d8c9c:	b118      	cbz	r0, d8ca6 <_strdup_r+0x22>
   d8c9e:	462a      	mov	r2, r5
   d8ca0:	4621      	mov	r1, r4
   d8ca2:	f7ff ff99 	bl	d8bd8 <memcpy>
   d8ca6:	4630      	mov	r0, r6
   d8ca8:	bd70      	pop	{r4, r5, r6, pc}

000d8caa <strlen>:
   d8caa:	4603      	mov	r3, r0
   d8cac:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8cb0:	2a00      	cmp	r2, #0
   d8cb2:	d1fb      	bne.n	d8cac <strlen+0x2>
   d8cb4:	1a18      	subs	r0, r3, r0
   d8cb6:	3801      	subs	r0, #1
   d8cb8:	4770      	bx	lr

000d8cba <strncmp>:
   d8cba:	b530      	push	{r4, r5, lr}
   d8cbc:	b182      	cbz	r2, d8ce0 <strncmp+0x26>
   d8cbe:	1e45      	subs	r5, r0, #1
   d8cc0:	3901      	subs	r1, #1
   d8cc2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8cc6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8cca:	42a3      	cmp	r3, r4
   d8ccc:	d106      	bne.n	d8cdc <strncmp+0x22>
   d8cce:	43ec      	mvns	r4, r5
   d8cd0:	4414      	add	r4, r2
   d8cd2:	42e0      	cmn	r0, r4
   d8cd4:	d001      	beq.n	d8cda <strncmp+0x20>
   d8cd6:	2b00      	cmp	r3, #0
   d8cd8:	d1f3      	bne.n	d8cc2 <strncmp+0x8>
   d8cda:	461c      	mov	r4, r3
   d8cdc:	1b18      	subs	r0, r3, r4
   d8cde:	bd30      	pop	{r4, r5, pc}
   d8ce0:	4610      	mov	r0, r2
   d8ce2:	bd30      	pop	{r4, r5, pc}

000d8ce4 <strncpy>:
   d8ce4:	b510      	push	{r4, lr}
   d8ce6:	4603      	mov	r3, r0
   d8ce8:	b142      	cbz	r2, d8cfc <strncpy+0x18>
   d8cea:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8cee:	f803 4b01 	strb.w	r4, [r3], #1
   d8cf2:	3a01      	subs	r2, #1
   d8cf4:	2c00      	cmp	r4, #0
   d8cf6:	d1f7      	bne.n	d8ce8 <strncpy+0x4>
   d8cf8:	441a      	add	r2, r3
   d8cfa:	e000      	b.n	d8cfe <strncpy+0x1a>
   d8cfc:	bd10      	pop	{r4, pc}
   d8cfe:	4293      	cmp	r3, r2
   d8d00:	d002      	beq.n	d8d08 <strncpy+0x24>
   d8d02:	f803 4b01 	strb.w	r4, [r3], #1
   d8d06:	e7fa      	b.n	d8cfe <strncpy+0x1a>
   d8d08:	bd10      	pop	{r4, pc}
	...

000d8d0c <_strtol_r>:
   d8d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8d10:	4680      	mov	r8, r0
   d8d12:	4840      	ldr	r0, [pc, #256]	; (d8e14 <_strtol_r+0x108>)
   d8d14:	f8d0 9000 	ldr.w	r9, [r0]
   d8d18:	460f      	mov	r7, r1
   d8d1a:	463d      	mov	r5, r7
   d8d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8d20:	eb09 0004 	add.w	r0, r9, r4
   d8d24:	7840      	ldrb	r0, [r0, #1]
   d8d26:	f000 0008 	and.w	r0, r0, #8
   d8d2a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8d2e:	b108      	cbz	r0, d8d34 <_strtol_r+0x28>
   d8d30:	462f      	mov	r7, r5
   d8d32:	e7f2      	b.n	d8d1a <_strtol_r+0xe>
   d8d34:	2c2d      	cmp	r4, #45	; 0x2d
   d8d36:	d103      	bne.n	d8d40 <_strtol_r+0x34>
   d8d38:	1cbd      	adds	r5, r7, #2
   d8d3a:	787c      	ldrb	r4, [r7, #1]
   d8d3c:	2601      	movs	r6, #1
   d8d3e:	e003      	b.n	d8d48 <_strtol_r+0x3c>
   d8d40:	2c2b      	cmp	r4, #43	; 0x2b
   d8d42:	bf04      	itt	eq
   d8d44:	787c      	ldrbeq	r4, [r7, #1]
   d8d46:	1cbd      	addeq	r5, r7, #2
   d8d48:	b113      	cbz	r3, d8d50 <_strtol_r+0x44>
   d8d4a:	2b10      	cmp	r3, #16
   d8d4c:	d10a      	bne.n	d8d64 <_strtol_r+0x58>
   d8d4e:	e05b      	b.n	d8e08 <_strtol_r+0xfc>
   d8d50:	2c30      	cmp	r4, #48	; 0x30
   d8d52:	d157      	bne.n	d8e04 <_strtol_r+0xf8>
   d8d54:	7828      	ldrb	r0, [r5, #0]
   d8d56:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8d5a:	2858      	cmp	r0, #88	; 0x58
   d8d5c:	d14d      	bne.n	d8dfa <_strtol_r+0xee>
   d8d5e:	786c      	ldrb	r4, [r5, #1]
   d8d60:	2310      	movs	r3, #16
   d8d62:	3502      	adds	r5, #2
   d8d64:	2e00      	cmp	r6, #0
   d8d66:	bf14      	ite	ne
   d8d68:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8d6c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8d70:	2700      	movs	r7, #0
   d8d72:	fbbc faf3 	udiv	sl, ip, r3
   d8d76:	4638      	mov	r0, r7
   d8d78:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8d7c:	eb09 0e04 	add.w	lr, r9, r4
   d8d80:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8d84:	f01e 0f04 	tst.w	lr, #4
   d8d88:	d001      	beq.n	d8d8e <_strtol_r+0x82>
   d8d8a:	3c30      	subs	r4, #48	; 0x30
   d8d8c:	e00b      	b.n	d8da6 <_strtol_r+0x9a>
   d8d8e:	f01e 0e03 	ands.w	lr, lr, #3
   d8d92:	d01b      	beq.n	d8dcc <_strtol_r+0xc0>
   d8d94:	f1be 0f01 	cmp.w	lr, #1
   d8d98:	bf0c      	ite	eq
   d8d9a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8d9e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8da2:	ebce 0404 	rsb	r4, lr, r4
   d8da6:	42a3      	cmp	r3, r4
   d8da8:	dd10      	ble.n	d8dcc <_strtol_r+0xc0>
   d8daa:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8dae:	d00a      	beq.n	d8dc6 <_strtol_r+0xba>
   d8db0:	4550      	cmp	r0, sl
   d8db2:	d806      	bhi.n	d8dc2 <_strtol_r+0xb6>
   d8db4:	d101      	bne.n	d8dba <_strtol_r+0xae>
   d8db6:	4564      	cmp	r4, ip
   d8db8:	dc03      	bgt.n	d8dc2 <_strtol_r+0xb6>
   d8dba:	fb03 4000 	mla	r0, r3, r0, r4
   d8dbe:	2701      	movs	r7, #1
   d8dc0:	e001      	b.n	d8dc6 <_strtol_r+0xba>
   d8dc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8dc6:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8dca:	e7d7      	b.n	d8d7c <_strtol_r+0x70>
   d8dcc:	1c7b      	adds	r3, r7, #1
   d8dce:	d10c      	bne.n	d8dea <_strtol_r+0xde>
   d8dd0:	2e00      	cmp	r6, #0
   d8dd2:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8dd6:	bf14      	ite	ne
   d8dd8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8ddc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8de0:	f8c8 3000 	str.w	r3, [r8]
   d8de4:	b92a      	cbnz	r2, d8df2 <_strtol_r+0xe6>
   d8de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8dea:	b106      	cbz	r6, d8dee <_strtol_r+0xe2>
   d8dec:	4240      	negs	r0, r0
   d8dee:	b172      	cbz	r2, d8e0e <_strtol_r+0x102>
   d8df0:	b107      	cbz	r7, d8df4 <_strtol_r+0xe8>
   d8df2:	1e69      	subs	r1, r5, #1
   d8df4:	6011      	str	r1, [r2, #0]
   d8df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8dfa:	2430      	movs	r4, #48	; 0x30
   d8dfc:	2b00      	cmp	r3, #0
   d8dfe:	d1b1      	bne.n	d8d64 <_strtol_r+0x58>
   d8e00:	2308      	movs	r3, #8
   d8e02:	e7af      	b.n	d8d64 <_strtol_r+0x58>
   d8e04:	230a      	movs	r3, #10
   d8e06:	e7ad      	b.n	d8d64 <_strtol_r+0x58>
   d8e08:	2c30      	cmp	r4, #48	; 0x30
   d8e0a:	d0a3      	beq.n	d8d54 <_strtol_r+0x48>
   d8e0c:	e7aa      	b.n	d8d64 <_strtol_r+0x58>
   d8e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8e12:	bf00      	nop
   d8e14:	2003e0dc 	.word	0x2003e0dc

000d8e18 <strtol>:
   d8e18:	4613      	mov	r3, r2
   d8e1a:	460a      	mov	r2, r1
   d8e1c:	4601      	mov	r1, r0
   d8e1e:	4802      	ldr	r0, [pc, #8]	; (d8e28 <strtol+0x10>)
   d8e20:	6800      	ldr	r0, [r0, #0]
   d8e22:	f7ff bf73 	b.w	d8d0c <_strtol_r>
   d8e26:	bf00      	nop
   d8e28:	2003e140 	.word	0x2003e140

000d8e2c <_strtoul_r>:
   d8e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e30:	4680      	mov	r8, r0
   d8e32:	483c      	ldr	r0, [pc, #240]	; (d8f24 <_strtoul_r+0xf8>)
   d8e34:	f8d0 9000 	ldr.w	r9, [r0]
   d8e38:	460e      	mov	r6, r1
   d8e3a:	4635      	mov	r5, r6
   d8e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8e40:	eb09 0004 	add.w	r0, r9, r4
   d8e44:	7840      	ldrb	r0, [r0, #1]
   d8e46:	f000 0008 	and.w	r0, r0, #8
   d8e4a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d8e4e:	b108      	cbz	r0, d8e54 <_strtoul_r+0x28>
   d8e50:	462e      	mov	r6, r5
   d8e52:	e7f2      	b.n	d8e3a <_strtoul_r+0xe>
   d8e54:	2c2d      	cmp	r4, #45	; 0x2d
   d8e56:	d103      	bne.n	d8e60 <_strtoul_r+0x34>
   d8e58:	1cb5      	adds	r5, r6, #2
   d8e5a:	7874      	ldrb	r4, [r6, #1]
   d8e5c:	2701      	movs	r7, #1
   d8e5e:	e003      	b.n	d8e68 <_strtoul_r+0x3c>
   d8e60:	2c2b      	cmp	r4, #43	; 0x2b
   d8e62:	bf04      	itt	eq
   d8e64:	7874      	ldrbeq	r4, [r6, #1]
   d8e66:	1cb5      	addeq	r5, r6, #2
   d8e68:	b113      	cbz	r3, d8e70 <_strtoul_r+0x44>
   d8e6a:	2b10      	cmp	r3, #16
   d8e6c:	d10a      	bne.n	d8e84 <_strtoul_r+0x58>
   d8e6e:	e053      	b.n	d8f18 <_strtoul_r+0xec>
   d8e70:	2c30      	cmp	r4, #48	; 0x30
   d8e72:	d14f      	bne.n	d8f14 <_strtoul_r+0xe8>
   d8e74:	7828      	ldrb	r0, [r5, #0]
   d8e76:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8e7a:	2858      	cmp	r0, #88	; 0x58
   d8e7c:	d145      	bne.n	d8f0a <_strtoul_r+0xde>
   d8e7e:	786c      	ldrb	r4, [r5, #1]
   d8e80:	2310      	movs	r3, #16
   d8e82:	3502      	adds	r5, #2
   d8e84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8e88:	2600      	movs	r6, #0
   d8e8a:	fbbc fcf3 	udiv	ip, ip, r3
   d8e8e:	fb03 fa0c 	mul.w	sl, r3, ip
   d8e92:	ea6f 0a0a 	mvn.w	sl, sl
   d8e96:	4630      	mov	r0, r6
   d8e98:	eb09 0e04 	add.w	lr, r9, r4
   d8e9c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8ea0:	f01e 0f04 	tst.w	lr, #4
   d8ea4:	d001      	beq.n	d8eaa <_strtoul_r+0x7e>
   d8ea6:	3c30      	subs	r4, #48	; 0x30
   d8ea8:	e00b      	b.n	d8ec2 <_strtoul_r+0x96>
   d8eaa:	f01e 0e03 	ands.w	lr, lr, #3
   d8eae:	d01a      	beq.n	d8ee6 <_strtoul_r+0xba>
   d8eb0:	f1be 0f01 	cmp.w	lr, #1
   d8eb4:	bf0c      	ite	eq
   d8eb6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8eba:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8ebe:	ebce 0404 	rsb	r4, lr, r4
   d8ec2:	42a3      	cmp	r3, r4
   d8ec4:	dd0f      	ble.n	d8ee6 <_strtoul_r+0xba>
   d8ec6:	2e00      	cmp	r6, #0
   d8ec8:	db08      	blt.n	d8edc <_strtoul_r+0xb0>
   d8eca:	4560      	cmp	r0, ip
   d8ecc:	d806      	bhi.n	d8edc <_strtoul_r+0xb0>
   d8ece:	d101      	bne.n	d8ed4 <_strtoul_r+0xa8>
   d8ed0:	4554      	cmp	r4, sl
   d8ed2:	dc03      	bgt.n	d8edc <_strtoul_r+0xb0>
   d8ed4:	fb03 4000 	mla	r0, r3, r0, r4
   d8ed8:	2601      	movs	r6, #1
   d8eda:	e001      	b.n	d8ee0 <_strtoul_r+0xb4>
   d8edc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8ee4:	e7d8      	b.n	d8e98 <_strtoul_r+0x6c>
   d8ee6:	2e00      	cmp	r6, #0
   d8ee8:	da07      	bge.n	d8efa <_strtoul_r+0xce>
   d8eea:	2322      	movs	r3, #34	; 0x22
   d8eec:	f8c8 3000 	str.w	r3, [r8]
   d8ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ef4:	b92a      	cbnz	r2, d8f02 <_strtoul_r+0xd6>
   d8ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8efa:	b107      	cbz	r7, d8efe <_strtoul_r+0xd2>
   d8efc:	4240      	negs	r0, r0
   d8efe:	b172      	cbz	r2, d8f1e <_strtoul_r+0xf2>
   d8f00:	b106      	cbz	r6, d8f04 <_strtoul_r+0xd8>
   d8f02:	1e69      	subs	r1, r5, #1
   d8f04:	6011      	str	r1, [r2, #0]
   d8f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f0a:	2430      	movs	r4, #48	; 0x30
   d8f0c:	2b00      	cmp	r3, #0
   d8f0e:	d1b9      	bne.n	d8e84 <_strtoul_r+0x58>
   d8f10:	2308      	movs	r3, #8
   d8f12:	e7b7      	b.n	d8e84 <_strtoul_r+0x58>
   d8f14:	230a      	movs	r3, #10
   d8f16:	e7b5      	b.n	d8e84 <_strtoul_r+0x58>
   d8f18:	2c30      	cmp	r4, #48	; 0x30
   d8f1a:	d0ab      	beq.n	d8e74 <_strtoul_r+0x48>
   d8f1c:	e7b2      	b.n	d8e84 <_strtoul_r+0x58>
   d8f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f22:	bf00      	nop
   d8f24:	2003e0dc 	.word	0x2003e0dc

000d8f28 <strtoul>:
   d8f28:	4613      	mov	r3, r2
   d8f2a:	460a      	mov	r2, r1
   d8f2c:	4601      	mov	r1, r0
   d8f2e:	4802      	ldr	r0, [pc, #8]	; (d8f38 <strtoul+0x10>)
   d8f30:	6800      	ldr	r0, [r0, #0]
   d8f32:	f7ff bf7b 	b.w	d8e2c <_strtoul_r>
   d8f36:	bf00      	nop
   d8f38:	2003e140 	.word	0x2003e140

000d8f3c <__tzcalc_limits>:
   d8f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8f40:	4604      	mov	r4, r0
   d8f42:	f000 fa6f 	bl	d9424 <__gettzinfo>
   d8f46:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d8f4a:	429c      	cmp	r4, r3
   d8f4c:	f340 8096 	ble.w	d907c <__tzcalc_limits+0x140>
   d8f50:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8f54:	18e3      	adds	r3, r4, r3
   d8f56:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d8f5a:	109b      	asrs	r3, r3, #2
   d8f5c:	f240 156d 	movw	r5, #365	; 0x16d
   d8f60:	fb05 3502 	mla	r5, r5, r2, r3
   d8f64:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8f68:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8f6c:	fb92 f3f3 	sdiv	r3, r2, r3
   d8f70:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8f74:	442b      	add	r3, r5
   d8f76:	18a5      	adds	r5, r4, r2
   d8f78:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8f7c:	fb95 f5f2 	sdiv	r5, r5, r2
   d8f80:	441d      	add	r5, r3
   d8f82:	2364      	movs	r3, #100	; 0x64
   d8f84:	fb94 f7f2 	sdiv	r7, r4, r2
   d8f88:	fb94 f6f3 	sdiv	r6, r4, r3
   d8f8c:	fb02 4717 	mls	r7, r2, r7, r4
   d8f90:	fb03 4616 	mls	r6, r3, r6, r4
   d8f94:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8f98:	fab7 fe87 	clz	lr, r7
   d8f9c:	9301      	str	r3, [sp, #4]
   d8f9e:	f004 0303 	and.w	r3, r4, #3
   d8fa2:	6044      	str	r4, [r0, #4]
   d8fa4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8fa8:	4601      	mov	r1, r0
   d8faa:	9300      	str	r3, [sp, #0]
   d8fac:	f04f 0c07 	mov.w	ip, #7
   d8fb0:	7a0b      	ldrb	r3, [r1, #8]
   d8fb2:	2b4a      	cmp	r3, #74	; 0x4a
   d8fb4:	d10e      	bne.n	d8fd4 <__tzcalc_limits+0x98>
   d8fb6:	694b      	ldr	r3, [r1, #20]
   d8fb8:	9a00      	ldr	r2, [sp, #0]
   d8fba:	18ec      	adds	r4, r5, r3
   d8fbc:	b902      	cbnz	r2, d8fc0 <__tzcalc_limits+0x84>
   d8fbe:	b906      	cbnz	r6, d8fc2 <__tzcalc_limits+0x86>
   d8fc0:	b927      	cbnz	r7, d8fcc <__tzcalc_limits+0x90>
   d8fc2:	2b3b      	cmp	r3, #59	; 0x3b
   d8fc4:	bfd4      	ite	le
   d8fc6:	2300      	movle	r3, #0
   d8fc8:	2301      	movgt	r3, #1
   d8fca:	e000      	b.n	d8fce <__tzcalc_limits+0x92>
   d8fcc:	2300      	movs	r3, #0
   d8fce:	4423      	add	r3, r4
   d8fd0:	3b01      	subs	r3, #1
   d8fd2:	e03f      	b.n	d9054 <__tzcalc_limits+0x118>
   d8fd4:	2b44      	cmp	r3, #68	; 0x44
   d8fd6:	d102      	bne.n	d8fde <__tzcalc_limits+0xa2>
   d8fd8:	694b      	ldr	r3, [r1, #20]
   d8fda:	442b      	add	r3, r5
   d8fdc:	e03a      	b.n	d9054 <__tzcalc_limits+0x118>
   d8fde:	9b00      	ldr	r3, [sp, #0]
   d8fe0:	b92b      	cbnz	r3, d8fee <__tzcalc_limits+0xb2>
   d8fe2:	2e00      	cmp	r6, #0
   d8fe4:	bf0c      	ite	eq
   d8fe6:	46f0      	moveq	r8, lr
   d8fe8:	f04f 0801 	movne.w	r8, #1
   d8fec:	e000      	b.n	d8ff0 <__tzcalc_limits+0xb4>
   d8fee:	46f0      	mov	r8, lr
   d8ff0:	4b24      	ldr	r3, [pc, #144]	; (d9084 <__tzcalc_limits+0x148>)
   d8ff2:	68cc      	ldr	r4, [r1, #12]
   d8ff4:	2230      	movs	r2, #48	; 0x30
   d8ff6:	fb02 3808 	mla	r8, r2, r8, r3
   d8ffa:	f1a8 0a04 	sub.w	sl, r8, #4
   d8ffe:	46a9      	mov	r9, r5
   d9000:	2301      	movs	r3, #1
   d9002:	42a3      	cmp	r3, r4
   d9004:	da04      	bge.n	d9010 <__tzcalc_limits+0xd4>
   d9006:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d900a:	3301      	adds	r3, #1
   d900c:	44d9      	add	r9, fp
   d900e:	e7f8      	b.n	d9002 <__tzcalc_limits+0xc6>
   d9010:	f109 0304 	add.w	r3, r9, #4
   d9014:	fb93 fbfc 	sdiv	fp, r3, ip
   d9018:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d901c:	2c01      	cmp	r4, #1
   d901e:	ebca 0a03 	rsb	sl, sl, r3
   d9022:	694b      	ldr	r3, [r1, #20]
   d9024:	bfb8      	it	lt
   d9026:	2401      	movlt	r4, #1
   d9028:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d902c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d9030:	690b      	ldr	r3, [r1, #16]
   d9032:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d9036:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d903a:	bf48      	it	mi
   d903c:	f10a 0a07 	addmi.w	sl, sl, #7
   d9040:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9044:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d9048:	4453      	add	r3, sl
   d904a:	42a3      	cmp	r3, r4
   d904c:	db01      	blt.n	d9052 <__tzcalc_limits+0x116>
   d904e:	3b07      	subs	r3, #7
   d9050:	e7fb      	b.n	d904a <__tzcalc_limits+0x10e>
   d9052:	444b      	add	r3, r9
   d9054:	698c      	ldr	r4, [r1, #24]
   d9056:	4a0c      	ldr	r2, [pc, #48]	; (d9088 <__tzcalc_limits+0x14c>)
   d9058:	fb02 4303 	mla	r3, r2, r3, r4
   d905c:	6a0c      	ldr	r4, [r1, #32]
   d905e:	4423      	add	r3, r4
   d9060:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9064:	9b01      	ldr	r3, [sp, #4]
   d9066:	4299      	cmp	r1, r3
   d9068:	d1a2      	bne.n	d8fb0 <__tzcalc_limits+0x74>
   d906a:	69c3      	ldr	r3, [r0, #28]
   d906c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d906e:	4293      	cmp	r3, r2
   d9070:	bfac      	ite	ge
   d9072:	2300      	movge	r3, #0
   d9074:	2301      	movlt	r3, #1
   d9076:	6003      	str	r3, [r0, #0]
   d9078:	2001      	movs	r0, #1
   d907a:	e000      	b.n	d907e <__tzcalc_limits+0x142>
   d907c:	2000      	movs	r0, #0
   d907e:	b003      	add	sp, #12
   d9080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9084:	000d9fa4 	.word	0x000d9fa4
   d9088:	00015180 	.word	0x00015180

000d908c <__tz_lock>:
   d908c:	4770      	bx	lr

000d908e <__tz_unlock>:
   d908e:	4770      	bx	lr

000d9090 <_tzset_unlocked>:
   d9090:	4b01      	ldr	r3, [pc, #4]	; (d9098 <_tzset_unlocked+0x8>)
   d9092:	6818      	ldr	r0, [r3, #0]
   d9094:	f000 b802 	b.w	d909c <_tzset_unlocked_r>
   d9098:	2003e140 	.word	0x2003e140

000d909c <_tzset_unlocked_r>:
   d909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d90a0:	b08d      	sub	sp, #52	; 0x34
   d90a2:	4607      	mov	r7, r0
   d90a4:	f000 f9be 	bl	d9424 <__gettzinfo>
   d90a8:	49b0      	ldr	r1, [pc, #704]	; (d936c <_tzset_unlocked_r+0x2d0>)
   d90aa:	4eb1      	ldr	r6, [pc, #708]	; (d9370 <_tzset_unlocked_r+0x2d4>)
   d90ac:	4604      	mov	r4, r0
   d90ae:	4638      	mov	r0, r7
   d90b0:	f000 f9b0 	bl	d9414 <_getenv_r>
   d90b4:	4605      	mov	r5, r0
   d90b6:	b960      	cbnz	r0, d90d2 <_tzset_unlocked_r+0x36>
   d90b8:	4bae      	ldr	r3, [pc, #696]	; (d9374 <_tzset_unlocked_r+0x2d8>)
   d90ba:	4aaf      	ldr	r2, [pc, #700]	; (d9378 <_tzset_unlocked_r+0x2dc>)
   d90bc:	6018      	str	r0, [r3, #0]
   d90be:	4baf      	ldr	r3, [pc, #700]	; (d937c <_tzset_unlocked_r+0x2e0>)
   d90c0:	6018      	str	r0, [r3, #0]
   d90c2:	4baf      	ldr	r3, [pc, #700]	; (d9380 <_tzset_unlocked_r+0x2e4>)
   d90c4:	6830      	ldr	r0, [r6, #0]
   d90c6:	601a      	str	r2, [r3, #0]
   d90c8:	605a      	str	r2, [r3, #4]
   d90ca:	f7fd f917 	bl	d62fc <free>
   d90ce:	6035      	str	r5, [r6, #0]
   d90d0:	e148      	b.n	d9364 <_tzset_unlocked_r+0x2c8>
   d90d2:	6831      	ldr	r1, [r6, #0]
   d90d4:	b979      	cbnz	r1, d90f6 <_tzset_unlocked_r+0x5a>
   d90d6:	6830      	ldr	r0, [r6, #0]
   d90d8:	f7fd f910 	bl	d62fc <free>
   d90dc:	4628      	mov	r0, r5
   d90de:	f7ff fde4 	bl	d8caa <strlen>
   d90e2:	1c41      	adds	r1, r0, #1
   d90e4:	4638      	mov	r0, r7
   d90e6:	f7fd f931 	bl	d634c <_malloc_r>
   d90ea:	6030      	str	r0, [r6, #0]
   d90ec:	b148      	cbz	r0, d9102 <_tzset_unlocked_r+0x66>
   d90ee:	4629      	mov	r1, r5
   d90f0:	f7ff fdb8 	bl	d8c64 <strcpy>
   d90f4:	e005      	b.n	d9102 <_tzset_unlocked_r+0x66>
   d90f6:	f7ff fdab 	bl	d8c50 <strcmp>
   d90fa:	2800      	cmp	r0, #0
   d90fc:	f000 8132 	beq.w	d9364 <_tzset_unlocked_r+0x2c8>
   d9100:	e7e9      	b.n	d90d6 <_tzset_unlocked_r+0x3a>
   d9102:	782b      	ldrb	r3, [r5, #0]
   d9104:	4a9f      	ldr	r2, [pc, #636]	; (d9384 <_tzset_unlocked_r+0x2e8>)
   d9106:	49a0      	ldr	r1, [pc, #640]	; (d9388 <_tzset_unlocked_r+0x2ec>)
   d9108:	2b3a      	cmp	r3, #58	; 0x3a
   d910a:	bf08      	it	eq
   d910c:	3501      	addeq	r5, #1
   d910e:	ae0a      	add	r6, sp, #40	; 0x28
   d9110:	4633      	mov	r3, r6
   d9112:	4628      	mov	r0, r5
   d9114:	f7fd f902 	bl	d631c <siscanf>
   d9118:	2800      	cmp	r0, #0
   d911a:	f340 8123 	ble.w	d9364 <_tzset_unlocked_r+0x2c8>
   d911e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9120:	18ef      	adds	r7, r5, r3
   d9122:	5ceb      	ldrb	r3, [r5, r3]
   d9124:	2b2d      	cmp	r3, #45	; 0x2d
   d9126:	d103      	bne.n	d9130 <_tzset_unlocked_r+0x94>
   d9128:	3701      	adds	r7, #1
   d912a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d912e:	e003      	b.n	d9138 <_tzset_unlocked_r+0x9c>
   d9130:	2b2b      	cmp	r3, #43	; 0x2b
   d9132:	bf08      	it	eq
   d9134:	3701      	addeq	r7, #1
   d9136:	2501      	movs	r5, #1
   d9138:	f10d 0a20 	add.w	sl, sp, #32
   d913c:	f10d 0b1e 	add.w	fp, sp, #30
   d9140:	f04f 0800 	mov.w	r8, #0
   d9144:	9603      	str	r6, [sp, #12]
   d9146:	f8cd a008 	str.w	sl, [sp, #8]
   d914a:	9601      	str	r6, [sp, #4]
   d914c:	f8cd b000 	str.w	fp, [sp]
   d9150:	4633      	mov	r3, r6
   d9152:	aa07      	add	r2, sp, #28
   d9154:	498d      	ldr	r1, [pc, #564]	; (d938c <_tzset_unlocked_r+0x2f0>)
   d9156:	f8ad 801e 	strh.w	r8, [sp, #30]
   d915a:	4638      	mov	r0, r7
   d915c:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9160:	f7fd f8dc 	bl	d631c <siscanf>
   d9164:	4540      	cmp	r0, r8
   d9166:	f340 80fd 	ble.w	d9364 <_tzset_unlocked_r+0x2c8>
   d916a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d916e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9172:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9398 <_tzset_unlocked_r+0x2fc>
   d9176:	213c      	movs	r1, #60	; 0x3c
   d9178:	fb01 3302 	mla	r3, r1, r2, r3
   d917c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9180:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9184:	fb01 3302 	mla	r3, r1, r2, r3
   d9188:	435d      	muls	r5, r3
   d918a:	6225      	str	r5, [r4, #32]
   d918c:	4d7c      	ldr	r5, [pc, #496]	; (d9380 <_tzset_unlocked_r+0x2e4>)
   d918e:	4b7d      	ldr	r3, [pc, #500]	; (d9384 <_tzset_unlocked_r+0x2e8>)
   d9190:	602b      	str	r3, [r5, #0]
   d9192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9194:	497c      	ldr	r1, [pc, #496]	; (d9388 <_tzset_unlocked_r+0x2ec>)
   d9196:	441f      	add	r7, r3
   d9198:	464a      	mov	r2, r9
   d919a:	4633      	mov	r3, r6
   d919c:	4638      	mov	r0, r7
   d919e:	f7fd f8bd 	bl	d631c <siscanf>
   d91a2:	4540      	cmp	r0, r8
   d91a4:	dc08      	bgt.n	d91b8 <_tzset_unlocked_r+0x11c>
   d91a6:	682b      	ldr	r3, [r5, #0]
   d91a8:	606b      	str	r3, [r5, #4]
   d91aa:	4b72      	ldr	r3, [pc, #456]	; (d9374 <_tzset_unlocked_r+0x2d8>)
   d91ac:	6a22      	ldr	r2, [r4, #32]
   d91ae:	601a      	str	r2, [r3, #0]
   d91b0:	4b72      	ldr	r3, [pc, #456]	; (d937c <_tzset_unlocked_r+0x2e0>)
   d91b2:	f8c3 8000 	str.w	r8, [r3]
   d91b6:	e0d5      	b.n	d9364 <_tzset_unlocked_r+0x2c8>
   d91b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d91ba:	f8c5 9004 	str.w	r9, [r5, #4]
   d91be:	18fd      	adds	r5, r7, r3
   d91c0:	5cfb      	ldrb	r3, [r7, r3]
   d91c2:	2b2d      	cmp	r3, #45	; 0x2d
   d91c4:	d103      	bne.n	d91ce <_tzset_unlocked_r+0x132>
   d91c6:	3501      	adds	r5, #1
   d91c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d91cc:	e003      	b.n	d91d6 <_tzset_unlocked_r+0x13a>
   d91ce:	2b2b      	cmp	r3, #43	; 0x2b
   d91d0:	bf08      	it	eq
   d91d2:	3501      	addeq	r5, #1
   d91d4:	2701      	movs	r7, #1
   d91d6:	2300      	movs	r3, #0
   d91d8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d91dc:	f8ad 301e 	strh.w	r3, [sp, #30]
   d91e0:	f8ad 3020 	strh.w	r3, [sp, #32]
   d91e4:	930a      	str	r3, [sp, #40]	; 0x28
   d91e6:	9603      	str	r6, [sp, #12]
   d91e8:	f8cd a008 	str.w	sl, [sp, #8]
   d91ec:	9601      	str	r6, [sp, #4]
   d91ee:	f8cd b000 	str.w	fp, [sp]
   d91f2:	4633      	mov	r3, r6
   d91f4:	aa07      	add	r2, sp, #28
   d91f6:	4965      	ldr	r1, [pc, #404]	; (d938c <_tzset_unlocked_r+0x2f0>)
   d91f8:	4628      	mov	r0, r5
   d91fa:	f7fd f88f 	bl	d631c <siscanf>
   d91fe:	2800      	cmp	r0, #0
   d9200:	dc04      	bgt.n	d920c <_tzset_unlocked_r+0x170>
   d9202:	6a23      	ldr	r3, [r4, #32]
   d9204:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d9208:	63e3      	str	r3, [r4, #60]	; 0x3c
   d920a:	e00e      	b.n	d922a <_tzset_unlocked_r+0x18e>
   d920c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9210:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9214:	213c      	movs	r1, #60	; 0x3c
   d9216:	fb01 3302 	mla	r3, r1, r2, r3
   d921a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d921e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9222:	fb01 3302 	mla	r3, r1, r2, r3
   d9226:	435f      	muls	r7, r3
   d9228:	63e7      	str	r7, [r4, #60]	; 0x3c
   d922a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d922c:	4627      	mov	r7, r4
   d922e:	441d      	add	r5, r3
   d9230:	f04f 0900 	mov.w	r9, #0
   d9234:	782b      	ldrb	r3, [r5, #0]
   d9236:	2b2c      	cmp	r3, #44	; 0x2c
   d9238:	bf08      	it	eq
   d923a:	3501      	addeq	r5, #1
   d923c:	f895 8000 	ldrb.w	r8, [r5]
   d9240:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9244:	d126      	bne.n	d9294 <_tzset_unlocked_r+0x1f8>
   d9246:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d924a:	9302      	str	r3, [sp, #8]
   d924c:	ab09      	add	r3, sp, #36	; 0x24
   d924e:	9300      	str	r3, [sp, #0]
   d9250:	9603      	str	r6, [sp, #12]
   d9252:	9601      	str	r6, [sp, #4]
   d9254:	4633      	mov	r3, r6
   d9256:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d925a:	494d      	ldr	r1, [pc, #308]	; (d9390 <_tzset_unlocked_r+0x2f4>)
   d925c:	4628      	mov	r0, r5
   d925e:	f7fd f85d 	bl	d631c <siscanf>
   d9262:	2803      	cmp	r0, #3
   d9264:	d17e      	bne.n	d9364 <_tzset_unlocked_r+0x2c8>
   d9266:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d926a:	1e4b      	subs	r3, r1, #1
   d926c:	2b0b      	cmp	r3, #11
   d926e:	d879      	bhi.n	d9364 <_tzset_unlocked_r+0x2c8>
   d9270:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9274:	1e53      	subs	r3, r2, #1
   d9276:	2b04      	cmp	r3, #4
   d9278:	d874      	bhi.n	d9364 <_tzset_unlocked_r+0x2c8>
   d927a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d927e:	2b06      	cmp	r3, #6
   d9280:	d870      	bhi.n	d9364 <_tzset_unlocked_r+0x2c8>
   d9282:	f887 8008 	strb.w	r8, [r7, #8]
   d9286:	60f9      	str	r1, [r7, #12]
   d9288:	613a      	str	r2, [r7, #16]
   d928a:	617b      	str	r3, [r7, #20]
   d928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d928e:	eb05 0803 	add.w	r8, r5, r3
   d9292:	e02a      	b.n	d92ea <_tzset_unlocked_r+0x24e>
   d9294:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9298:	bf06      	itte	eq
   d929a:	3501      	addeq	r5, #1
   d929c:	4643      	moveq	r3, r8
   d929e:	2344      	movne	r3, #68	; 0x44
   d92a0:	220a      	movs	r2, #10
   d92a2:	a90b      	add	r1, sp, #44	; 0x2c
   d92a4:	4628      	mov	r0, r5
   d92a6:	9305      	str	r3, [sp, #20]
   d92a8:	f7ff fe3e 	bl	d8f28 <strtoul>
   d92ac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d92b0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d92b4:	4545      	cmp	r5, r8
   d92b6:	9b05      	ldr	r3, [sp, #20]
   d92b8:	d114      	bne.n	d92e4 <_tzset_unlocked_r+0x248>
   d92ba:	234d      	movs	r3, #77	; 0x4d
   d92bc:	f1b9 0f00 	cmp.w	r9, #0
   d92c0:	d107      	bne.n	d92d2 <_tzset_unlocked_r+0x236>
   d92c2:	7223      	strb	r3, [r4, #8]
   d92c4:	2303      	movs	r3, #3
   d92c6:	60e3      	str	r3, [r4, #12]
   d92c8:	2302      	movs	r3, #2
   d92ca:	6123      	str	r3, [r4, #16]
   d92cc:	f8c4 9014 	str.w	r9, [r4, #20]
   d92d0:	e00b      	b.n	d92ea <_tzset_unlocked_r+0x24e>
   d92d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d92d6:	230b      	movs	r3, #11
   d92d8:	62a3      	str	r3, [r4, #40]	; 0x28
   d92da:	2301      	movs	r3, #1
   d92dc:	62e3      	str	r3, [r4, #44]	; 0x2c
   d92de:	2300      	movs	r3, #0
   d92e0:	6323      	str	r3, [r4, #48]	; 0x30
   d92e2:	e002      	b.n	d92ea <_tzset_unlocked_r+0x24e>
   d92e4:	b280      	uxth	r0, r0
   d92e6:	723b      	strb	r3, [r7, #8]
   d92e8:	6178      	str	r0, [r7, #20]
   d92ea:	2302      	movs	r3, #2
   d92ec:	f8ad 301c 	strh.w	r3, [sp, #28]
   d92f0:	2300      	movs	r3, #0
   d92f2:	f8ad 301e 	strh.w	r3, [sp, #30]
   d92f6:	f8ad 3020 	strh.w	r3, [sp, #32]
   d92fa:	930a      	str	r3, [sp, #40]	; 0x28
   d92fc:	f898 3000 	ldrb.w	r3, [r8]
   d9300:	2b2f      	cmp	r3, #47	; 0x2f
   d9302:	d10b      	bne.n	d931c <_tzset_unlocked_r+0x280>
   d9304:	9603      	str	r6, [sp, #12]
   d9306:	f8cd a008 	str.w	sl, [sp, #8]
   d930a:	9601      	str	r6, [sp, #4]
   d930c:	f8cd b000 	str.w	fp, [sp]
   d9310:	4633      	mov	r3, r6
   d9312:	aa07      	add	r2, sp, #28
   d9314:	491f      	ldr	r1, [pc, #124]	; (d9394 <_tzset_unlocked_r+0x2f8>)
   d9316:	4640      	mov	r0, r8
   d9318:	f7fd f800 	bl	d631c <siscanf>
   d931c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9320:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9324:	213c      	movs	r1, #60	; 0x3c
   d9326:	fb01 3302 	mla	r3, r1, r2, r3
   d932a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d932e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9332:	fb01 3302 	mla	r3, r1, r2, r3
   d9336:	61bb      	str	r3, [r7, #24]
   d9338:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d933a:	f109 0901 	add.w	r9, r9, #1
   d933e:	f1b9 0f02 	cmp.w	r9, #2
   d9342:	4445      	add	r5, r8
   d9344:	f107 071c 	add.w	r7, r7, #28
   d9348:	f47f af74 	bne.w	d9234 <_tzset_unlocked_r+0x198>
   d934c:	6860      	ldr	r0, [r4, #4]
   d934e:	f7ff fdf5 	bl	d8f3c <__tzcalc_limits>
   d9352:	4b08      	ldr	r3, [pc, #32]	; (d9374 <_tzset_unlocked_r+0x2d8>)
   d9354:	6a22      	ldr	r2, [r4, #32]
   d9356:	601a      	str	r2, [r3, #0]
   d9358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d935a:	1a9b      	subs	r3, r3, r2
   d935c:	4a07      	ldr	r2, [pc, #28]	; (d937c <_tzset_unlocked_r+0x2e0>)
   d935e:	bf18      	it	ne
   d9360:	2301      	movne	r3, #1
   d9362:	6013      	str	r3, [r2, #0]
   d9364:	b00d      	add	sp, #52	; 0x34
   d9366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d936a:	bf00      	nop
   d936c:	000da004 	.word	0x000da004
   d9370:	2003e7e0 	.word	0x2003e7e0
   d9374:	2003e7e8 	.word	0x2003e7e8
   d9378:	000da007 	.word	0x000da007
   d937c:	2003e7e4 	.word	0x2003e7e4
   d9380:	2003e144 	.word	0x2003e144
   d9384:	2003e7d3 	.word	0x2003e7d3
   d9388:	000da00b 	.word	0x000da00b
   d938c:	000da02e 	.word	0x000da02e
   d9390:	000da01a 	.word	0x000da01a
   d9394:	000da02d 	.word	0x000da02d
   d9398:	2003e7c8 	.word	0x2003e7c8

000d939c <_findenv_r>:
   d939c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93a0:	4607      	mov	r7, r0
   d93a2:	468b      	mov	fp, r1
   d93a4:	4690      	mov	r8, r2
   d93a6:	f000 f8d9 	bl	d955c <__env_lock>
   d93aa:	4b19      	ldr	r3, [pc, #100]	; (d9410 <_findenv_r+0x74>)
   d93ac:	681d      	ldr	r5, [r3, #0]
   d93ae:	469a      	mov	sl, r3
   d93b0:	b13d      	cbz	r5, d93c2 <_findenv_r+0x26>
   d93b2:	465c      	mov	r4, fp
   d93b4:	4623      	mov	r3, r4
   d93b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d93ba:	b142      	cbz	r2, d93ce <_findenv_r+0x32>
   d93bc:	2a3d      	cmp	r2, #61	; 0x3d
   d93be:	461c      	mov	r4, r3
   d93c0:	d1f8      	bne.n	d93b4 <_findenv_r+0x18>
   d93c2:	4638      	mov	r0, r7
   d93c4:	f000 f8cb 	bl	d955e <__env_unlock>
   d93c8:	2000      	movs	r0, #0
   d93ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93ce:	ebcb 0404 	rsb	r4, fp, r4
   d93d2:	46a9      	mov	r9, r5
   d93d4:	f859 0b04 	ldr.w	r0, [r9], #4
   d93d8:	2800      	cmp	r0, #0
   d93da:	d0f2      	beq.n	d93c2 <_findenv_r+0x26>
   d93dc:	4622      	mov	r2, r4
   d93de:	4659      	mov	r1, fp
   d93e0:	f7ff fc6b 	bl	d8cba <strncmp>
   d93e4:	b988      	cbnz	r0, d940a <_findenv_r+0x6e>
   d93e6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d93ea:	191e      	adds	r6, r3, r4
   d93ec:	5d1b      	ldrb	r3, [r3, r4]
   d93ee:	2b3d      	cmp	r3, #61	; 0x3d
   d93f0:	d10b      	bne.n	d940a <_findenv_r+0x6e>
   d93f2:	f8da 3000 	ldr.w	r3, [sl]
   d93f6:	1aed      	subs	r5, r5, r3
   d93f8:	10ad      	asrs	r5, r5, #2
   d93fa:	4638      	mov	r0, r7
   d93fc:	f8c8 5000 	str.w	r5, [r8]
   d9400:	f000 f8ad 	bl	d955e <__env_unlock>
   d9404:	1c70      	adds	r0, r6, #1
   d9406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d940a:	464d      	mov	r5, r9
   d940c:	e7e1      	b.n	d93d2 <_findenv_r+0x36>
   d940e:	bf00      	nop
   d9410:	2003e18c 	.word	0x2003e18c

000d9414 <_getenv_r>:
   d9414:	b507      	push	{r0, r1, r2, lr}
   d9416:	aa01      	add	r2, sp, #4
   d9418:	f7ff ffc0 	bl	d939c <_findenv_r>
   d941c:	b003      	add	sp, #12
   d941e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9424 <__gettzinfo>:
   d9424:	4800      	ldr	r0, [pc, #0]	; (d9428 <__gettzinfo+0x4>)
   d9426:	4770      	bx	lr
   d9428:	2003e14c 	.word	0x2003e14c

000d942c <gmtime_r>:
   d942c:	6802      	ldr	r2, [r0, #0]
   d942e:	4b47      	ldr	r3, [pc, #284]	; (d954c <gmtime_r+0x120>)
   d9430:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9432:	fb92 f4f3 	sdiv	r4, r2, r3
   d9436:	fb03 2214 	mls	r2, r3, r4, r2
   d943a:	2a00      	cmp	r2, #0
   d943c:	bfbc      	itt	lt
   d943e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9442:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9446:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d944a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d944e:	fb92 f3f0 	sdiv	r3, r2, r0
   d9452:	fb00 2213 	mls	r2, r0, r3, r2
   d9456:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d945a:	bfac      	ite	ge
   d945c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9460:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9464:	608b      	str	r3, [r1, #8]
   d9466:	fb92 f3f0 	sdiv	r3, r2, r0
   d946a:	fb00 2213 	mls	r2, r0, r3, r2
   d946e:	604b      	str	r3, [r1, #4]
   d9470:	600a      	str	r2, [r1, #0]
   d9472:	2307      	movs	r3, #7
   d9474:	1ce2      	adds	r2, r4, #3
   d9476:	fb92 f3f3 	sdiv	r3, r2, r3
   d947a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d947e:	1ad3      	subs	r3, r2, r3
   d9480:	618b      	str	r3, [r1, #24]
   d9482:	4b33      	ldr	r3, [pc, #204]	; (d9550 <gmtime_r+0x124>)
   d9484:	4d33      	ldr	r5, [pc, #204]	; (d9554 <gmtime_r+0x128>)
   d9486:	fb94 f5f5 	sdiv	r5, r4, r5
   d948a:	fb03 4405 	mla	r4, r3, r5, r4
   d948e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9492:	fbb4 f2f2 	udiv	r2, r4, r2
   d9496:	4422      	add	r2, r4
   d9498:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d949c:	fbb4 f3f7 	udiv	r3, r4, r7
   d94a0:	1ad2      	subs	r2, r2, r3
   d94a2:	482d      	ldr	r0, [pc, #180]	; (d9558 <gmtime_r+0x12c>)
   d94a4:	fbb4 f0f0 	udiv	r0, r4, r0
   d94a8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d94ac:	1a13      	subs	r3, r2, r0
   d94ae:	fbb3 f6f6 	udiv	r6, r3, r6
   d94b2:	4434      	add	r4, r6
   d94b4:	f240 126d 	movw	r2, #365	; 0x16d
   d94b8:	fbb3 f0f2 	udiv	r0, r3, r2
   d94bc:	fbb3 f3f7 	udiv	r3, r3, r7
   d94c0:	1ae3      	subs	r3, r4, r3
   d94c2:	fb02 3310 	mls	r3, r2, r0, r3
   d94c6:	2499      	movs	r4, #153	; 0x99
   d94c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d94cc:	3202      	adds	r2, #2
   d94ce:	fbb2 f2f4 	udiv	r2, r2, r4
   d94d2:	2a0a      	cmp	r2, #10
   d94d4:	fb04 f402 	mul.w	r4, r4, r2
   d94d8:	f104 0602 	add.w	r6, r4, #2
   d94dc:	f04f 0405 	mov.w	r4, #5
   d94e0:	fbb6 f4f4 	udiv	r4, r6, r4
   d94e4:	bf34      	ite	cc
   d94e6:	2602      	movcc	r6, #2
   d94e8:	f06f 0609 	mvncs.w	r6, #9
   d94ec:	4416      	add	r6, r2
   d94ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d94f2:	fb02 0505 	mla	r5, r2, r5, r0
   d94f6:	1c5f      	adds	r7, r3, #1
   d94f8:	2e01      	cmp	r6, #1
   d94fa:	bf98      	it	ls
   d94fc:	3501      	addls	r5, #1
   d94fe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9502:	eba7 0704 	sub.w	r7, r7, r4
   d9506:	d302      	bcc.n	d950e <gmtime_r+0xe2>
   d9508:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d950c:	e014      	b.n	d9538 <gmtime_r+0x10c>
   d950e:	0782      	lsls	r2, r0, #30
   d9510:	d105      	bne.n	d951e <gmtime_r+0xf2>
   d9512:	2464      	movs	r4, #100	; 0x64
   d9514:	fbb0 f2f4 	udiv	r2, r0, r4
   d9518:	fb04 0212 	mls	r2, r4, r2, r0
   d951c:	b94a      	cbnz	r2, d9532 <gmtime_r+0x106>
   d951e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9522:	fbb0 f4f2 	udiv	r4, r0, r2
   d9526:	fb02 0014 	mls	r0, r2, r4, r0
   d952a:	fab0 f280 	clz	r2, r0
   d952e:	0952      	lsrs	r2, r2, #5
   d9530:	e000      	b.n	d9534 <gmtime_r+0x108>
   d9532:	2201      	movs	r2, #1
   d9534:	333b      	adds	r3, #59	; 0x3b
   d9536:	441a      	add	r2, r3
   d9538:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d953c:	2300      	movs	r3, #0
   d953e:	61ca      	str	r2, [r1, #28]
   d9540:	614d      	str	r5, [r1, #20]
   d9542:	610e      	str	r6, [r1, #16]
   d9544:	60cf      	str	r7, [r1, #12]
   d9546:	620b      	str	r3, [r1, #32]
   d9548:	4608      	mov	r0, r1
   d954a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d954c:	00015180 	.word	0x00015180
   d9550:	fffdc54f 	.word	0xfffdc54f
   d9554:	00023ab1 	.word	0x00023ab1
   d9558:	00023ab0 	.word	0x00023ab0

000d955c <__env_lock>:
   d955c:	4770      	bx	lr

000d955e <__env_unlock>:
   d955e:	4770      	bx	lr

000d9560 <dynalib_user>:
   d9560:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9570:	0000 0000                                   ....

000d9574 <_ZTV5Timer>:
	...
   d957c:	42b9 000d 4301 000d 4129 000d 9ac1 000d     .B...C..)A......
   d958c:	9afc 000d 9b01 000d 9b06 000d 9b0a 000d     ................
   d959c:	9b0f 000d 9b14 000d 9b18 000d 9b23 000d     ............#...
   d95ac:	9b2e 000d 9ac1 000d 9ac9 000d 9acd 000d     ................
   d95bc:	9ad6 000d 9ade 000d 9aea 000d 9af0 000d     ................
   d95cc:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   d95dc:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000d960c <_ZL16MemVersionNumber>:
   d960c:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   d961c:	202c 3a51 3225 302e 2566 2025 2500 2e34     , Q:%2.0f%% .%4.
   d962c:	6631 4320 2500 2e34 6631 2520 0025 3425     1f C.%4.1f %%.%4
   d963c:	312e 2066 756c 0078 6925 2520 0025 5441     .1f lux.%i %%.AT
   d964c:	432b 5546 3d4e 3631 0a0d 7b00 5422 6d65     +CFUN=16...{"Tem
   d965c:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
   d966c:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   d967c:	2c66 2220 694c 6867 4c74 7665 6c65 3a22     f, "LightLevel":
   d968c:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   d969c:	7574 6572 2231 253a 2c69 2220 6f53 6c69     ture1":%i, "Soil
   d96ac:	6f6d 7369 7574 6572 2232 253a 2c69 2220     moisture2":%i, "
   d96bc:	6177 6574 5072 6572 7373 7275 2265 253a     waterPressure":%
   d96cc:	2c69 2220 6f53 656c 6f6e 6469 3a22 6925     i, "Solenoid":%i
   d96dc:	202c 4222 7461 6574 7972 3a22 6925 202c     , "Battery":%i, 
   d96ec:	5222 7365 7465 2273 253a 2c69 2220 6c41     "Resets":%i, "Al
   d96fc:	7265 7374 3a22 6925 007d 7752 6e61 6164     erts":%i}.Rwanda
   d970c:	532d 6e65 6573 412d 646e 432d 6e6f 7274     -Sense-And-Contr
   d971c:	6c6f 452d 616c 7473 6369 6100 7267 6369     ol-Elastic.agric
   d972c:	6c75 7574 6572 612d 7377 772d 6265 6f68     ulture-aws-webho
   d973c:	6b6f 5200 6177 646e 2d61 6553 736e 2d65     ok.Rwanda-Sense-
   d974c:	6e41 2d64 6f43 746e 6f72 006c 6f4e 4420     And-Control.No D
   d975c:	7461 0061 6255 6469 746f 2073 6f48 6b6f     ata.Ubidots Hook
   d976c:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   d977c:	6465 5500 6b6e 6f6e 6e77 7220 7365 6f70     ed.Unknown respo
   d978c:	736e 2065 6572 6563 6976 6465 2520 0069     nse recevied %i.
   d979c:	0030 6f4e 5320 696f 206c 6553 736e 726f     0.No Soil Sensor
   d97ac:	0073 6f43 666e 6769 4f00 656e 5320 696f     s.Config.One Soi
   d97bc:	206c 6553 736e 726f 5400 6f77 5320 696f     l Sensor.Two Soi
   d97cc:	206c 6553 736e 726f 0073 6f4e 5020 6572     l Sensors.No Pre
   d97dc:	7373 7275 2065 6553 736e 726f 5000 6572     ssure Sensor.Pre
   d97ec:	7373 7275 2065 6553 736e 726f 5020 6572     ssure Sensor Pre
   d97fc:	6573 746e 4e00 206f 694c 6867 2074 6553     sent.No Light Se
   d980c:	736e 726f 4c00 6769 7468 5320 6e65 6f73     nsor.Light Senso
   d981c:	2072 7250 7365 6e65 0074 6f4e 5420 6d65     r Present.No Tem
   d982c:	2070 202f 7548 696d 6964 7974 5320 6e65     p / Humidity Sen
   d983c:	6f73 2072 7250 7365 6e65 0074 6559 0073     sor Present.Yes.
   d984c:	6579 0073 6f6e 4e00 006f 6f4e 5320 6c6f     yes.no.No.No Sol
   d985c:	6e65 696f 2064 7441 6174 6863 6465 5300     enoid Attached.S
   d986c:	7465 5620 7265 6f62 6573 4d20 646f 0065     et Verbose Mode.
   d987c:	6c43 6165 6572 2064 6556 6272 736f 2065     Cleared Verbose 
   d988c:	6f4d 6564 4c00 776f 5020 776f 7265 4d20     Mode.Low Power M
   d989c:	646f 0065 7254 6575 4e00 726f 616d 206c     ode.True.Normal 
   d98ac:	704f 7265 7461 6f69 736e 4600 6c61 6573     Operations.False
   d98bc:	4f00 006e 664f 0066 704f 6e65 7420 6568     .On.Off.Open the
   d98cc:	5620 6c61 6576 5700 7461 7265 6e69 0067      Valve.Watering.
   d98dc:	6c43 736f 2065 6874 2065 6176 766c 0065     Close the valve.
   d98ec:	7246 6d6f 2520 2073 6f74 2520 0073 7453     From %s to %s.St
   d98fc:	7461 2065 7254 6e61 6973 6974 6e6f 7300     ate Transition.s
   d990c:	6170 6b72 642f 7665 6369 2f65 6573 7373     park/device/sess
   d991c:	6f69 2f6e 6e65 0064 6154 696b 676e 6120     ion/end.Taking a
   d992c:	4e20 7061 5300 6174 6574 4c00 776f 4220      Nap.State.Low B
   d993c:	7461 6574 7972 2d20 5320 656c 7065 6e69     attery - Sleepin
   d994c:	0067 7245 6f72 2072 7453 7461 2065 202d     g.Error State - 
   d995c:	6552 6573 0074 7245 6f72 2072 7453 7461     Reset.Error Stat
   d996c:	2065 202d 6f50 6577 2072 7943 6c63 0065     e - Power Cycle.
   d997c:	7245 6f72 2072 7453 7461 2065 202d 7546     Error State - Fu
   d998c:	6c6c 4d20 646f 6d65 5220 7365 7465 4500     ll Modem Reset.E
   d999c:	7272 726f 7420 6b61 6e69 2067 654d 7361     rror taking Meas
   d99ac:	7275 6d65 6e65 7374 5300 6769 616e 006c     urements.Signal.
   d99bc:	6552 6573 4374 756f 746e 5200 6c65 6165     ResetCount.Relea
   d99cc:	6573 5300 6174 6574 664f 6843 0067 6142     se.StateOfChg.Ba
   d99dc:	7474 7265 4379 6e6f 6574 7478 4c00 776f     tteryContext.Low
   d99ec:	6f50 6577 4d72 646f 0065 6554 706d 7265     PowerMode.Temper
   d99fc:	7461 7275 0065 7548 696d 6964 7974 4c00     ature.Humidity.L
   d9a0c:	6d75 6e69 736f 7469 0079 6f53 6c69 6f4d     uminosity.SoilMo
   d9a1c:	7369 7574 6572 0031 6f53 6c69 6f4d 7369     isture1.SoilMois
   d9a2c:	7574 6572 0032 7250 7365 7573 6572 4d00     ture2.Pressure.M
   d9a3c:	6165 7573 6572 4e2d 776f 5600 7265 6f62     easure-Now.Verbo
   d9a4c:	6573 4d2d 646f 0065 6553 5374 696f 536c     se-Mode.SetSoilS
   d9a5c:	6e65 6f73 7372 5300 7465 7250 7365 7573     ensors.SetPressu
   d9a6c:	6572 6553 736e 726f 5300 7465 694c 6867     reSensor.SetLigh
   d9a7c:	5374 6e65 6f73 0072 6f53 656c 6f6e 6469     tSensor.Solenoid
   d9a8c:	7250 7365 6e65 0074 6553 5474 6d65 4870     Present.SetTempH
   d9a9c:	6d75 6469 6553 736e 726f 4600 6961 656c     umidSensor.Faile
   d9aac:	2064 6f74 6320 6e6f 656e 7463 5300 6174     d to connect.Sta
   d9abc:	7472 7075 5500 6b6e 6f6e 6e77 4e00 746f     rtup.Unknown.Not
   d9acc:	4320 6168 6772 6e69 0067 6843 7261 6567      Charging.Charge
   d9adc:	0064 6944 6373 6168 6772 6e69 0067 6146     d.Discharging.Fa
   d9aec:	6c75 0074 6944 6f63 6e6e 6365 6574 0064     ult.Diconnected.
   d9afc:	6f4e 656e 5700 4669 0069 5347 004d 4d55     None.WiFi.GSM.UM
   d9b0c:	5354 4300 4d44 0041 544c 0045 4549 4545     TS.CDMA.LTE.IEEE
   d9b1c:	3038 3132 3435 4c00 4554 435f 5441 4d5f     802154.LTE_CAT_M
   d9b2c:	0031 544c 5f45 4143 5f54 424e 0031          1.LTE_CAT_NB1.

000d9b3a <_ZL13releaseNumber>:
   d9b3a:	3232 0000 0000                              22....

000d9b40 <_ZTVN5spark13CellularClassE>:
	...
   d9b48:	6447 000d 643d 000d 6433 000d 63e9 000d     Gd..=d..3d...c..
   d9b58:	6427 000d 641b 000d 640f 000d 6407 000d     'd...d...d...d..
   d9b68:	63fd 000d 63f3 000d 711d 000d               .c...c...q..

000d9b74 <_ZTV14CellularSignal>:
	...
   d9b7c:	64f5 000d 6555 000d 64f7 000d 6599 000d     .d..Ue...d...e..
   d9b8c:	64fd 000d 6565 000d 6529 000d 6623 000d     .d..ee..)e..#f..
   d9b9c:	fffc ffff 0000 0000 664d 000d               ........Mf..

000d9ba8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9bb0:	6655 000d 665b 000d 669f 000d 6669 000d     Uf..[f...f..if..
   d9bc0:	6657 000d                                   Wf..

000d9bc4 <_ZTVN5spark13EthernetClassE>:
	...
   d9bcc:	6cb3 000d 6ca9 000d 6c9f 000d 6c95 000d     .l...l...l...l..
   d9bdc:	6c89 000d 6c7d 000d 6c71 000d 6c69 000d     .l..}l..ql..il..
   d9bec:	6c5f 000d 6c55 000d 711d 000d               _l..Ul...q..

000d9bf8 <_ZTV7TwoWire>:
	...
   d9c00:	6d17 000d 6d61 000d 6d39 000d 6d19 000d     .m..am..9m...m..
   d9c10:	6d41 000d 6d49 000d 6d51 000d 6d59 000d     Am..Im..Qm..Ym..

000d9c20 <_ZTV9IPAddress>:
	...
   d9c28:	6e55 000d 6e45 000d 6e47 000d 6162 6475     Un..En..Gn..baud
   d9c38:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9c48:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9c58:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9c68:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9c78:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9c88:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9c98:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9ca8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d9cb8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d9cc8:	203d 6400 7465 6961 736c 3d20 0020 6e6c     = .details = .ln
   d9cd8:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d9ce8:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d9cf8:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d9d08:	6100 6c6c 0000 0000                         .all....

000d9d10 <_ZTVN5spark9MeshClassE>:
	...
   d9d18:	6f97 000d 6f8d 000d 6f83 000d 6f79 000d     .o...o...o..yo..
   d9d28:	6f6d 000d 6f61 000d 6f55 000d 6f4d 000d     mo..ao..Uo..Mo..
   d9d38:	6f43 000d 6f39 000d 711d 000d               Co..9o...q..

000d9d44 <_ZTVN5spark12NetworkClassE>:
	...
   d9d4c:	70b5 000d 70bf 000d 70c9 000d 70d3 000d     .p...p...p...p..
   d9d5c:	70dd 000d 70e9 000d 70f5 000d 7101 000d     .p...p...p...q..
   d9d6c:	7109 000d 7113 000d 711d 000d               .q...q...q..

000d9d78 <_ZTV8SPIClass>:
	...
   d9d80:	72e5 000d 72e7 000d 6977 6972 676e 5300     .r...r..wiring.S
   d9d90:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   d9da0:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   d9db0:	6c61 6469 002e 2b25 3330 3a64 3025 7532     alid..%+03d:%02u
   d9dc0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d9dd0:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d9de0 <_ZTV11USARTSerial>:
	...
   d9de8:	7809 000d 7859 000d 7867 000d 71fd 000d     .x..Yx..gx...q..
   d9df8:	781d 000d 783f 000d 782b 000d 7853 000d     .x..?x..+x..Sx..
   d9e08:	780b 000d 780f 000d                         .x...x..

000d9e10 <_ZTV9USBSerial>:
	...
   d9e18:	7911 000d 7961 000d 796f 000d 71fd 000d     .y..ay..oy...q..
   d9e28:	794d 000d 7913 000d 7929 000d 795b 000d     My...y..)y..[y..
   d9e38:	793f 000d 790d 000d                         ?y...y..

000d9e40 <_ZSt7nothrow>:
	...

000d9e41 <_ctype_>:
   d9e41:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9e51:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9e61:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9e71:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9e81:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9e91:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9ea1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9eb1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9ec1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9f44 <__sf_fake_stdin>:
	...

000d9f64 <__sf_fake_stdout>:
	...

000d9f84 <__sf_fake_stderr>:
	...

000d9fa4 <__month_lengths>:
   d9fa4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9fb4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9fc4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9fd4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9fe4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9ff4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da004:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   da014:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   da024:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   da034:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000da040 <link_const_variable_data_end>:
   da040:	000d5835 	.word	0x000d5835
   da044:	000d5aa3 	.word	0x000d5aa3
   da048:	000d5c51 	.word	0x000d5c51
   da04c:	000d63c1 	.word	0x000d63c1
   da050:	000d64c5 	.word	0x000d64c5
   da054:	000d6cbd 	.word	0x000d6cbd
   da058:	000d6f29 	.word	0x000d6f29
   da05c:	000d7065 	.word	0x000d7065
   da060:	000d71e9 	.word	0x000d71e9
   da064:	000d72c9 	.word	0x000d72c9
   da068:	000d76c9 	.word	0x000d76c9
   da06c:	000d77f5 	.word	0x000d77f5
   da070:	000d7df1 	.word	0x000d7df1
   da074:	000d7eb5 	.word	0x000d7eb5
   da078:	000d7f39 	.word	0x000d7f39
   da07c:	000d7fbd 	.word	0x000d7fbd
