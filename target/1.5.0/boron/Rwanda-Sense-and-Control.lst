
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.5.0/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005970  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9990  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000158  2003e074  000d9994  0001e074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000624  2003e1cc  2003e1cc  0002e1cc  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000d9aec  000d9aec  00029aec  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d9b18  000d9b18  00029b18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001023d9  00000000  00000000  00029b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014974  00000000  00000000  0012bef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000223f1  00000000  00000000  00140869  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002da8  00000000  00000000  00162c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005248  00000000  00000000  00165a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a890  00000000  00000000  0016ac4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032c68  00000000  00000000  001a54da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a41a  00000000  00000000  001d8142  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e764  00000000  00000000  002e255c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fa9f 	bl	d8574 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 faa4 	bl	d858a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e074 	.word	0x2003e074
   d404c:	000d9994 	.word	0x000d9994
   d4050:	2003e1cc 	.word	0x2003e1cc
   d4054:	2003e1cc 	.word	0x2003e1cc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fa8b 	bl	d7578 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9988 	.word	0x000d9988
   d4084:	000d9948 	.word	0x000d9948

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b800 	b.w	d508c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fdd7 	bl	d4c40 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 ba31 	b.w	d74fc <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 be9f 	b.w	d5ddc <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bea5 	b.w	d5dec <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bea3 	b.w	d5dec <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d40b8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	4904      	ldr	r1, [pc, #16]	; (d40cc <_Z10measureNow6String+0x14>)
   d40bc:	f002 ff73 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40c0:	b118      	cbz	r0, d40ca <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d40c2:	4b03      	ldr	r3, [pc, #12]	; (d40d0 <_Z10measureNow6String+0x18>)
   d40c4:	2203      	movs	r2, #3
   d40c6:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c8:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	000d938c 	.word	0x000d938c
   d40d0:	2003e216 	.word	0x2003e216

000d40d4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d8:	6800      	ldr	r0, [r0, #0]
   d40da:	b108      	cbz	r0, d40e0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40dc:	f001 fe86 	bl	d5dec <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}

000d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e6:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40ea:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ec:	f88d 3000 	strb.w	r3, [sp]
   d40f0:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f2:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f4:	f002 f9ae 	bl	d6454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40f8:	4628      	mov	r0, r5
   d40fa:	b003      	add	sp, #12
   d40fc:	bd30      	pop	{r4, r5, pc}
	...

000d4100 <_Z17getSignalStrengthv>:
  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength()
{
   d4100:	b530      	push	{r4, r5, lr}
   d4102:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4104:	4912      	ldr	r1, [pc, #72]	; (d4150 <_Z17getSignalStrengthv+0x50>)
   d4106:	a804      	add	r0, sp, #16
   d4108:	f001 ff1a 	bl	d5f40 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d410c:	a804      	add	r0, sp, #16
   d410e:	f001 ff6a 	bl	d5fe6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4112:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4114:	a804      	add	r0, sp, #16
   d4116:	f001 ffb7 	bl	d6088 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d411a:	a804      	add	r0, sp, #16
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d411c:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4120:	f001 ff98 	bl	d6054 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4124:	ee10 0a10 	vmov	r0, s0
   d4128:	f003 fe64 	bl	d7df4 <__aeabi_f2d>
   d412c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4130:	4628      	mov	r0, r5
   d4132:	f003 fe5f 	bl	d7df4 <__aeabi_f2d>
   d4136:	e9cd 0100 	strd	r0, r1, [sp]
   d413a:	4b06      	ldr	r3, [pc, #24]	; (d4154 <_Z17getSignalStrengthv+0x54>)
   d413c:	4a06      	ldr	r2, [pc, #24]	; (d4158 <_Z17getSignalStrengthv+0x58>)
   d413e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   d4142:	4806      	ldr	r0, [pc, #24]	; (d415c <_Z17getSignalStrengthv+0x5c>)
   d4144:	2140      	movs	r1, #64	; 0x40
   d4146:	f001 fe69 	bl	d5e1c <snprintf>
}
   d414a:	b00f      	add	sp, #60	; 0x3c
   d414c:	bd30      	pop	{r4, r5, pc}
   d414e:	bf00      	nop
   d4150:	2003e330 	.word	0x2003e330
   d4154:	2003e0f4 	.word	0x2003e0f4
   d4158:	000d8f54 	.word	0x000d8f54
   d415c:	2003e270 	.word	0x2003e270

000d4160 <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4160:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d4162:	4d49      	ldr	r5, [pc, #292]	; (d4288 <_Z16takeMeasurementsv+0x128>)
   d4164:	4c49      	ldr	r4, [pc, #292]	; (d428c <_Z16takeMeasurementsv+0x12c>)
   d4166:	7b2b      	ldrb	r3, [r5, #12]
   d4168:	b153      	cbz	r3, d4180 <_Z16takeMeasurementsv+0x20>
    current.temperature = tempHumidSensor.readTemperature();
   d416a:	4849      	ldr	r0, [pc, #292]	; (d4290 <_Z16takeMeasurementsv+0x130>)
   d416c:	f001 fb20 	bl	d57b0 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d4170:	4847      	ldr	r0, [pc, #284]	; (d4290 <_Z16takeMeasurementsv+0x130>)

bool takeMeasurements() {
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
    current.temperature = tempHumidSensor.readTemperature();
   d4172:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d4176:	f001 fb29 	bl	d57cc <_ZN14Adafruit_SHT3112readHumidityEv>
   d417a:	ed84 0a06 	vstr	s0, [r4, #24]
   d417e:	e002      	b.n	d4186 <_Z16takeMeasurementsv+0x26>
  }
  else current.temperature = current.humidity = 0.0;
   d4180:	2300      	movs	r3, #0
   d4182:	61a3      	str	r3, [r4, #24]
   d4184:	6163      	str	r3, [r4, #20]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4186:	6960      	ldr	r0, [r4, #20]
   d4188:	4e40      	ldr	r6, [pc, #256]	; (d428c <_Z16takeMeasurementsv+0x12c>)
   d418a:	f003 fe33 	bl	d7df4 <__aeabi_f2d>
   d418e:	4a41      	ldr	r2, [pc, #260]	; (d4294 <_Z16takeMeasurementsv+0x134>)
   d4190:	e9cd 0100 	strd	r0, r1, [sp]
   d4194:	2110      	movs	r1, #16
   d4196:	4840      	ldr	r0, [pc, #256]	; (d4298 <_Z16takeMeasurementsv+0x138>)
   d4198:	f001 fe40 	bl	d5e1c <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d419c:	69a0      	ldr	r0, [r4, #24]
   d419e:	f003 fe29 	bl	d7df4 <__aeabi_f2d>
   d41a2:	4a3e      	ldr	r2, [pc, #248]	; (d429c <_Z16takeMeasurementsv+0x13c>)
   d41a4:	e9cd 0100 	strd	r0, r1, [sp]
   d41a8:	2110      	movs	r1, #16
   d41aa:	483d      	ldr	r0, [pc, #244]	; (d42a0 <_Z16takeMeasurementsv+0x140>)
   d41ac:	f001 fe36 	bl	d5e1c <snprintf>

  if (sysStatus.lightSensorConfig) {
   d41b0:	7c2b      	ldrb	r3, [r5, #16]
   d41b2:	b143      	cbz	r3, d41c6 <_Z16takeMeasurementsv+0x66>
    lightSensor.make_forced_measurement();
   d41b4:	483b      	ldr	r0, [pc, #236]	; (d42a4 <_Z16takeMeasurementsv+0x144>)
   d41b6:	f001 fa25 	bl	d5604 <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d41ba:	483a      	ldr	r0, [pc, #232]	; (d42a4 <_Z16takeMeasurementsv+0x144>)
   d41bc:	f001 f9dc 	bl	d5578 <_ZN6BH175015get_light_levelEv>
   d41c0:	ed86 0a07 	vstr	s0, [r6, #28]
   d41c4:	e001      	b.n	d41ca <_Z16takeMeasurementsv+0x6a>
  }
  else current.lightLevel = 0.0;
   d41c6:	2300      	movs	r3, #0
   d41c8:	61f3      	str	r3, [r6, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d41ca:	69e0      	ldr	r0, [r4, #28]
   d41cc:	4e2f      	ldr	r6, [pc, #188]	; (d428c <_Z16takeMeasurementsv+0x12c>)
   d41ce:	f003 fe11 	bl	d7df4 <__aeabi_f2d>
   d41d2:	4a35      	ldr	r2, [pc, #212]	; (d42a8 <_Z16takeMeasurementsv+0x148>)
   d41d4:	e9cd 0100 	strd	r0, r1, [sp]
   d41d8:	2110      	movs	r1, #16
   d41da:	4834      	ldr	r0, [pc, #208]	; (d42ac <_Z16takeMeasurementsv+0x14c>)
   d41dc:	f001 fe1e 	bl	d5e1c <snprintf>

  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d41e0:	7bab      	ldrb	r3, [r5, #14]
   d41e2:	b163      	cbz	r3, d41fe <_Z16takeMeasurementsv+0x9e>
   d41e4:	2013      	movs	r0, #19
   d41e6:	f003 fa6a 	bl	d76be <analogRead>
   d41ea:	2364      	movs	r3, #100	; 0x64
   d41ec:	9300      	str	r3, [sp, #0]
   d41ee:	2300      	movs	r3, #0
   d41f0:	f640 628a 	movw	r2, #3722	; 0xe8a
   d41f4:	4619      	mov	r1, r3
   d41f6:	f001 fe29 	bl	d5e4c <_Z3mapiiiii>
   d41fa:	6030      	str	r0, [r6, #0]
   d41fc:	e000      	b.n	d4200 <_Z16takeMeasurementsv+0xa0>
  else current.soilMoisture1 = 0;
   d41fe:	6033      	str	r3, [r6, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d4200:	7bab      	ldrb	r3, [r5, #14]
   d4202:	2b02      	cmp	r3, #2
   d4204:	d10c      	bne.n	d4220 <_Z16takeMeasurementsv+0xc0>
   d4206:	2012      	movs	r0, #18
   d4208:	f003 fa59 	bl	d76be <analogRead>
   d420c:	2364      	movs	r3, #100	; 0x64
   d420e:	9300      	str	r3, [sp, #0]
   d4210:	2300      	movs	r3, #0
   d4212:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4216:	4619      	mov	r1, r3
   d4218:	f001 fe18 	bl	d5e4c <_Z3mapiiiii>
   d421c:	6060      	str	r0, [r4, #4]
   d421e:	e001      	b.n	d4224 <_Z16takeMeasurementsv+0xc4>
  else current.soilMoisture2 = 0;
   d4220:	2300      	movs	r3, #0
   d4222:	6063      	str	r3, [r4, #4]
  
  
  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d4224:	7beb      	ldrb	r3, [r5, #15]
   d4226:	2b01      	cmp	r3, #1
   d4228:	d10d      	bne.n	d4246 <_Z16takeMeasurementsv+0xe6>
   d422a:	2011      	movs	r0, #17
   d422c:	f003 fa47 	bl	d76be <analogRead>
   d4230:	231e      	movs	r3, #30
   d4232:	9300      	str	r3, [sp, #0]
   d4234:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d4238:	2300      	movs	r3, #0
   d423a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d423e:	f001 fe05 	bl	d5e4c <_Z3mapiiiii>
   d4242:	60a0      	str	r0, [r4, #8]
   d4244:	e002      	b.n	d424c <_Z16takeMeasurementsv+0xec>
  else sysStatus.pressureSensorConfig = 0;
   d4246:	4b10      	ldr	r3, [pc, #64]	; (d4288 <_Z16takeMeasurementsv+0x128>)
   d4248:	2200      	movs	r2, #0
   d424a:	73da      	strb	r2, [r3, #15]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d424c:	4b18      	ldr	r3, [pc, #96]	; (d42b0 <_Z16takeMeasurementsv+0x150>)
   d424e:	2200      	movs	r2, #0
   d4250:	4611      	mov	r1, r2
   d4252:	6858      	ldr	r0, [r3, #4]
   d4254:	f001 fd8a 	bl	d5d6c <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4258:	b108      	cbz	r0, d425e <_Z16takeMeasurementsv+0xfe>
   d425a:	f7ff ff51 	bl	d4100 <_Z17getSignalStrengthv>
  
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d425e:	4815      	ldr	r0, [pc, #84]	; (d42b4 <_Z16takeMeasurementsv+0x154>)
   d4260:	f002 fb04 	bl	d686c <_ZN9FuelGauge6getSoCEv>
   d4264:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4268:	4a13      	ldr	r2, [pc, #76]	; (d42b8 <_Z16takeMeasurementsv+0x158>)
   d426a:	4814      	ldr	r0, [pc, #80]	; (d42bc <_Z16takeMeasurementsv+0x15c>)
  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
  else sysStatus.pressureSensorConfig = 0;

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d426c:	edc5 7a02 	vstr	s15, [r5, #8]
   d4270:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4274:	2110      	movs	r1, #16
   d4276:	f001 fdd1 	bl	d5e1c <snprintf>
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Alert", "Charging disabled Temperature",PRIVATE);
  }
  */

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d427a:	4b11      	ldr	r3, [pc, #68]	; (d42c0 <_Z16takeMeasurementsv+0x160>)
   d427c:	2001      	movs	r0, #1
   d427e:	7018      	strb	r0, [r3, #0]
   d4280:	4b10      	ldr	r3, [pc, #64]	; (d42c4 <_Z16takeMeasurementsv+0x164>)
   d4282:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4284:	b002      	add	sp, #8
   d4286:	bd70      	pop	{r4, r5, r6, pc}
   d4288:	2003e30c 	.word	0x2003e30c
   d428c:	2003e2b8 	.word	0x2003e2b8
   d4290:	2003e260 	.word	0x2003e260
   d4294:	000d8f6d 	.word	0x000d8f6d
   d4298:	2003e1d0 	.word	0x2003e1d0
   d429c:	000d8f75 	.word	0x000d8f75
   d42a0:	2003e2dc 	.word	0x2003e2dc
   d42a4:	2003e1ec 	.word	0x2003e1ec
   d42a8:	000d8f7e 	.word	0x000d8f7e
   d42ac:	2003e2fc 	.word	0x2003e2fc
   d42b0:	2003e330 	.word	0x2003e330
   d42b4:	2003e20c 	.word	0x2003e20c
   d42b8:	000d8f88 	.word	0x000d8f88
   d42bc:	2003e2ec 	.word	0x2003e2ec
   d42c0:	2003e227 	.word	0x2003e227
   d42c4:	2003e215 	.word	0x2003e215

000d42c8 <_Z17connectToParticlev>:
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d42c8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d42cc:	481a      	ldr	r0, [pc, #104]	; (d4338 <_Z17connectToParticlev+0x70>)
   d42ce:	2300      	movs	r3, #0
   d42d0:	461a      	mov	r2, r3
   d42d2:	4619      	mov	r1, r3
   d42d4:	6840      	ldr	r0, [r0, #4]
   d42d6:	f001 fd51 	bl	d5d7c <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d42da:	f001 fce7 	bl	d5cac <spark_cloud_flag_connect>
   d42de:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d42e2:	f240 36e7 	movw	r6, #999	; 0x3e7
   d42e6:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d42e8:	2000      	movs	r0, #0
   d42ea:	f001 fb17 	bl	d591c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d42ee:	f04f 0900 	mov.w	r9, #0
   d42f2:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d42f4:	2000      	movs	r0, #0
   d42f6:	f001 fb11 	bl	d591c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d42fa:	ebb0 0008 	subs.w	r0, r0, r8
   d42fe:	eb61 0109 	sbc.w	r1, r1, r9
   d4302:	428f      	cmp	r7, r1
   d4304:	bf08      	it	eq
   d4306:	4286      	cmpeq	r6, r0
   d4308:	d305      	bcc.n	d4316 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d430a:	f001 fcdf 	bl	d5ccc <spark_cloud_flag_connected>
   d430e:	b910      	cbnz	r0, d4316 <_Z17connectToParticlev+0x4e>
            spark_process();
   d4310:	f001 fcc4 	bl	d5c9c <spark_process>
   d4314:	e7ee      	b.n	d42f4 <_Z17connectToParticlev+0x2c>
   d4316:	f001 fcd9 	bl	d5ccc <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d431a:	b118      	cbz	r0, d4324 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d431c:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d4320:	f001 bcd4 	b.w	d5ccc <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4324:	f001 fac2 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4328:	4b04      	ldr	r3, [pc, #16]	; (d433c <_Z17connectToParticlev+0x74>)
   d432a:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d432c:	f001 fcb6 	bl	d5c9c <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4330:	3c01      	subs	r4, #1
   d4332:	d0f3      	beq.n	d431c <_Z17connectToParticlev+0x54>
   d4334:	e7d8      	b.n	d42e8 <_Z17connectToParticlev+0x20>
   d4336:	bf00      	nop
   d4338:	2003e330 	.word	0x2003e330
   d433c:	2003e6d8 	.word	0x2003e6d8

000d4340 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4340:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4342:	f001 fcc3 	bl	d5ccc <spark_cloud_flag_connected>
    return !Particle.connected();
   d4346:	f080 0001 	eor.w	r0, r0, #1
}
   d434a:	b2c0      	uxtb	r0, r0
   d434c:	bd08      	pop	{r3, pc}
	...

000d4350 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4352:	f001 fcb3 	bl	d5cbc <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4356:	2000      	movs	r0, #0
   d4358:	f001 fae0 	bl	d591c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d435c:	2500      	movs	r5, #0
   d435e:	4604      	mov	r4, r0
   d4360:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4364:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4366:	2000      	movs	r0, #0
   d4368:	f001 fad8 	bl	d591c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d436c:	1b00      	subs	r0, r0, r4
   d436e:	eb61 0105 	sbc.w	r1, r1, r5
   d4372:	428f      	cmp	r7, r1
   d4374:	bf08      	it	eq
   d4376:	4286      	cmpeq	r6, r0
   d4378:	d305      	bcc.n	d4386 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem                              
   d437a:	f7ff ffe1 	bl	d4340 <_Z12notConnectedv>
   d437e:	b910      	cbnz	r0, d4386 <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d4380:	f001 fc8c 	bl	d5c9c <spark_process>
   d4384:	e7ef      	b.n	d4366 <_Z22disconnectFromParticlev+0x16>
   d4386:	f7ff ffdb 	bl	d4340 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d438a:	4806      	ldr	r0, [pc, #24]	; (d43a4 <_Z22disconnectFromParticlev+0x54>)
   d438c:	2300      	movs	r3, #0
   d438e:	461a      	mov	r2, r3
   d4390:	4619      	mov	r1, r3
   d4392:	6840      	ldr	r0, [r0, #4]
   d4394:	f001 fcfa 	bl	d5d8c <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d439c:	f001 fd62 	bl	d5e64 <delay>
  return true;
}
   d43a0:	2001      	movs	r0, #1
   d43a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d43a4:	2003e330 	.word	0x2003e330

000d43a8 <_Z9PMICresetv>:
  else return 0;
}

// Power Management function
void PMICreset() {
  if (sysStatus.solarPowerMode) {
   d43a8:	4b15      	ldr	r3, [pc, #84]	; (d4400 <_Z9PMICresetv+0x58>)
   d43aa:	4816      	ldr	r0, [pc, #88]	; (d4404 <_Z9PMICresetv+0x5c>)
   d43ac:	7959      	ldrb	r1, [r3, #5]
   d43ae:	b199      	cbz	r1, d43d8 <_Z9PMICresetv+0x30>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d43b0:	f44f 7361 	mov.w	r3, #900	; 0x384
   d43b4:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d43b6:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d43ba:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d43bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d43c0:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d43c2:	f241 0370 	movw	r3, #4208	; 0x1070
   d43c6:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d43c8:	6803      	ldr	r3, [r0, #0]
   d43ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d43ce:	f043 0301 	orr.w	r3, r3, #1
   d43d2:	6003      	str	r3, [r0, #0]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d43d4:	2100      	movs	r1, #0
   d43d6:	e011      	b.n	d43fc <_Z9PMICresetv+0x54>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d43d8:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d43dc:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d43de:	f241 0370 	movw	r3, #4208	; 0x1070
   d43e2:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d43e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d43e8:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d43ea:	f241 0310 	movw	r3, #4112	; 0x1010
   d43ee:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d43f0:	6803      	ldr	r3, [r0, #0]
   d43f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d43f6:	f043 0301 	orr.w	r3, r3, #1
   d43fa:	6003      	str	r3, [r0, #0]
   d43fc:	f001 bc34 	b.w	d5c68 <system_power_management_set_config>
   d4400:	2003e30c 	.word	0x2003e30c
   d4404:	2003e228 	.word	0x2003e228

000d4408 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d4408:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d440a:	4c07      	ldr	r4, [pc, #28]	; (d4428 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d440c:	f001 fa4e 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
   d4410:	6823      	ldr	r3, [r4, #0]
   d4412:	1ac0      	subs	r0, r0, r3
   d4414:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4418:	d304      	bcc.n	d4424 <_Z20meterParticlePublishv+0x1c>
   d441a:	f001 fa47 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d441e:	6020      	str	r0, [r4, #0]
   d4420:	2001      	movs	r0, #1
   d4422:	bd10      	pop	{r4, pc}
    return 1;
  } 
  else return 0;
   d4424:	2000      	movs	r0, #0
}
   d4426:	bd10      	pop	{r4, pc}
   d4428:	2003e2b0 	.word	0x2003e2b0

000d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d442c:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d442e:	f7ff ffeb 	bl	d4408 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4432:	b118      	cbz	r0, d443c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4438:	f7ff bfe6 	b.w	d4408 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d443c:	f001 fc2e 	bl	d5c9c <spark_process>
   d4440:	e7f5      	b.n	d442e <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36+0x2>
	...

000d4444 <_Z14fullModemResetv>:
    return 1;
  } 
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4444:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4446:	f001 fc39 	bl	d5cbc <spark_cloud_flag_disconnect>
   d444a:	f001 fa2f 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d444e:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4452:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4454:	f001 fc3a 	bl	d5ccc <spark_cloud_flag_connected>
   d4458:	b140      	cbz	r0, d446c <_Z14fullModemResetv+0x28>
   d445a:	f001 fa27 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
   d445e:	1b00      	subs	r0, r0, r4
   d4460:	42a8      	cmp	r0, r5
   d4462:	d803      	bhi.n	d446c <_Z14fullModemResetv+0x28>
		delay(100);
   d4464:	2064      	movs	r0, #100	; 0x64
   d4466:	f001 fcfd 	bl	d5e64 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d446a:	e7f3      	b.n	d4454 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d446c:	2100      	movs	r1, #0
   d446e:	4b09      	ldr	r3, [pc, #36]	; (d4494 <_Z14fullModemResetv+0x50>)
   d4470:	f247 5230 	movw	r2, #30000	; 0x7530
   d4474:	4608      	mov	r0, r1
   d4476:	f001 f9c1 	bl	d57fc <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d447a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d447e:	f001 fcf1 	bl	d5e64 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4482:	4b05      	ldr	r3, [pc, #20]	; (d4498 <_Z14fullModemResetv+0x54>)
   d4484:	220a      	movs	r2, #10
   d4486:	681b      	ldr	r3, [r3, #0]
   d4488:	2101      	movs	r1, #1
   d448a:	4668      	mov	r0, sp
   d448c:	f002 fdfc 	bl	d7088 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4490:	b003      	add	sp, #12
   d4492:	bd30      	pop	{r4, r5, pc}
   d4494:	000d8f8e 	.word	0x000d8f8e
   d4498:	2003e24c 	.word	0x2003e24c

000d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d449c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d449e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d44a0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d44a2:	b17c      	cbz	r4, d44c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d44a4:	6863      	ldr	r3, [r4, #4]
   d44a6:	3b01      	subs	r3, #1
   d44a8:	6063      	str	r3, [r4, #4]
   d44aa:	b95b      	cbnz	r3, d44c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d44ac:	6823      	ldr	r3, [r4, #0]
   d44ae:	4620      	mov	r0, r4
   d44b0:	689b      	ldr	r3, [r3, #8]
   d44b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d44b4:	68a3      	ldr	r3, [r4, #8]
   d44b6:	3b01      	subs	r3, #1
   d44b8:	60a3      	str	r3, [r4, #8]
   d44ba:	b91b      	cbnz	r3, d44c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d44bc:	6823      	ldr	r3, [r4, #0]
   d44be:	4620      	mov	r0, r4
   d44c0:	68db      	ldr	r3, [r3, #12]
   d44c2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d44c4:	4628      	mov	r0, r5
   d44c6:	bd38      	pop	{r3, r4, r5, pc}

000d44c8 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d44c8:	b530      	push	{r4, r5, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d44ca:	4c25      	ldr	r4, [pc, #148]	; (d4560 <_Z9sendEventv+0x98>)
   d44cc:	4d25      	ldr	r5, [pc, #148]	; (d4564 <_Z9sendEventv+0x9c>)
   d44ce:	6a23      	ldr	r3, [r4, #32]
    break;
  }
}

void sendEvent()
{
   d44d0:	b0d1      	sub	sp, #324	; 0x144
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, sysStatus.resetCount, current.alertCount );
   d44d2:	930c      	str	r3, [sp, #48]	; 0x30
   d44d4:	4b24      	ldr	r3, [pc, #144]	; (d4568 <_Z9sendEventv+0xa0>)
   d44d6:	699a      	ldr	r2, [r3, #24]
   d44d8:	920b      	str	r2, [sp, #44]	; 0x2c
   d44da:	689b      	ldr	r3, [r3, #8]
   d44dc:	930a      	str	r3, [sp, #40]	; 0x28
   d44de:	68e3      	ldr	r3, [r4, #12]
   d44e0:	9309      	str	r3, [sp, #36]	; 0x24
   d44e2:	68a3      	ldr	r3, [r4, #8]
   d44e4:	9308      	str	r3, [sp, #32]
   d44e6:	6863      	ldr	r3, [r4, #4]
   d44e8:	9307      	str	r3, [sp, #28]
   d44ea:	6823      	ldr	r3, [r4, #0]
   d44ec:	9306      	str	r3, [sp, #24]
   d44ee:	69e0      	ldr	r0, [r4, #28]
   d44f0:	f003 fc80 	bl	d7df4 <__aeabi_f2d>
   d44f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d44f8:	69a0      	ldr	r0, [r4, #24]
   d44fa:	f003 fc7b 	bl	d7df4 <__aeabi_f2d>
   d44fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4502:	6960      	ldr	r0, [r4, #20]
   d4504:	f003 fc76 	bl	d7df4 <__aeabi_f2d>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4508:	2400      	movs	r4, #0
   d450a:	e9cd 0100 	strd	r0, r1, [sp]
   d450e:	4a17      	ldr	r2, [pc, #92]	; (d456c <_Z9sendEventv+0xa4>)
   d4510:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4514:	a810      	add	r0, sp, #64	; 0x40
   d4516:	f001 fc81 	bl	d5e1c <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d451a:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d451c:	4914      	ldr	r1, [pc, #80]	; (d4570 <_Z9sendEventv+0xa8>)
   d451e:	f88d 4000 	strb.w	r4, [sp]
   d4522:	aa10      	add	r2, sp, #64	; 0x40
   d4524:	a80e      	add	r0, sp, #56	; 0x38
   d4526:	f7ff fddd 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d452a:	a80f      	add	r0, sp, #60	; 0x3c
   d452c:	f7ff ffb6 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4530:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control-Elastic", data, PRIVATE);
   d4532:	4910      	ldr	r1, [pc, #64]	; (d4574 <_Z9sendEventv+0xac>)
   d4534:	f88d 4000 	strb.w	r4, [sp]
   d4538:	aa10      	add	r2, sp, #64	; 0x40
   d453a:	a80e      	add	r0, sp, #56	; 0x38
   d453c:	f7ff fdd2 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4540:	a80f      	add	r0, sp, #60	; 0x3c
   d4542:	f7ff ffab 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  
  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d4546:	f002 fe97 	bl	d7278 <_ZN9TimeClass4hourEv>
   d454a:	4b0b      	ldr	r3, [pc, #44]	; (d4578 <_Z9sendEventv+0xb0>)
   d454c:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d454e:	4b0b      	ldr	r3, [pc, #44]	; (d457c <_Z9sendEventv+0xb4>)
   d4550:	2201      	movs	r2, #1
   d4552:	701a      	strb	r2, [r3, #0]
   d4554:	f001 f9aa 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4558:	4b09      	ldr	r3, [pc, #36]	; (d4580 <_Z9sendEventv+0xb8>)
   d455a:	6018      	str	r0, [r3, #0]
}
   d455c:	b051      	add	sp, #324	; 0x144
   d455e:	bd30      	pop	{r4, r5, pc}
   d4560:	2003e2b8 	.word	0x2003e2b8
   d4564:	2003e1e8 	.word	0x2003e1e8
   d4568:	2003e30c 	.word	0x2003e30c
   d456c:	000d8f9b 	.word	0x000d8f9b
   d4570:	000d904a 	.word	0x000d904a
   d4574:	000d9063 	.word	0x000d9063
   d4578:	2003e248 	.word	0x2003e248
   d457c:	2003e0f2 	.word	0x2003e0f2
   d4580:	2003e1e4 	.word	0x2003e1e4

000d4584 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d4584:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4586:	780b      	ldrb	r3, [r1, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d4588:	b094      	sub	sp, #80	; 0x50
   d458a:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d458c:	b923      	cbnz	r3, d4598 <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d458e:	491c      	ldr	r1, [pc, #112]	; (d4600 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4590:	a804      	add	r0, sp, #16
   d4592:	f004 f835 	bl	d8600 <strcpy>
   d4596:	e017      	b.n	d45c8 <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4598:	4608      	mov	r0, r1
   d459a:	f003 fee1 	bl	d8360 <atoi>
   d459e:	28c8      	cmp	r0, #200	; 0xc8
   d45a0:	d004      	beq.n	d45ac <_Z14UbidotsHandlerPKcS0_+0x28>
   d45a2:	4620      	mov	r0, r4
   d45a4:	f003 fedc 	bl	d8360 <atoi>
   d45a8:	28c9      	cmp	r0, #201	; 0xc9
   d45aa:	d11e      	bne.n	d45ea <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d45ac:	4915      	ldr	r1, [pc, #84]	; (d4604 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d45ae:	a804      	add	r0, sp, #16
   d45b0:	f004 f826 	bl	d8600 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d45b4:	f002 fe58 	bl	d7268 <_ZN9TimeClass3nowEv>
   d45b8:	4b13      	ldr	r3, [pc, #76]	; (d4608 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d45ba:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d45bc:	4b13      	ldr	r3, [pc, #76]	; (d460c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d45be:	2201      	movs	r2, #1
   d45c0:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d45c2:	4b13      	ldr	r3, [pc, #76]	; (d4610 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d45c4:	2200      	movs	r2, #0
   d45c6:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d45c8:	f7ff ff30 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d45cc:	4b11      	ldr	r3, [pc, #68]	; (d4614 <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d45ce:	4912      	ldr	r1, [pc, #72]	; (d4618 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d45d0:	781b      	ldrb	r3, [r3, #0]
   d45d2:	2200      	movs	r2, #0
   d45d4:	f88d 2000 	strb.w	r2, [sp]
   d45d8:	a802      	add	r0, sp, #8
   d45da:	aa04      	add	r2, sp, #16
   d45dc:	f7ff fd82 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d45e0:	a803      	add	r0, sp, #12
   d45e2:	f7ff ff5b 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d45e6:	b014      	add	sp, #80	; 0x50
   d45e8:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d45ea:	4620      	mov	r0, r4
   d45ec:	f003 feb8 	bl	d8360 <atoi>
   d45f0:	4a0a      	ldr	r2, [pc, #40]	; (d461c <_Z14UbidotsHandlerPKcS0_+0x98>)
   d45f2:	4603      	mov	r3, r0
   d45f4:	2140      	movs	r1, #64	; 0x40
   d45f6:	a804      	add	r0, sp, #16
   d45f8:	f001 fc10 	bl	d5e1c <snprintf>
   d45fc:	e7e4      	b.n	d45c8 <_Z14UbidotsHandlerPKcS0_+0x44>
   d45fe:	bf00      	nop
   d4600:	000d9084 	.word	0x000d9084
   d4604:	000d9099 	.word	0x000d9099
   d4608:	2003e30c 	.word	0x2003e30c
   d460c:	2003e215 	.word	0x2003e215
   d4610:	2003e0f2 	.word	0x2003e0f2
   d4614:	2003e1e8 	.word	0x2003e1e8
   d4618:	000d908c 	.word	0x000d908c
   d461c:	000d90ab 	.word	0x000d90ab

000d4620 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4620:	b530      	push	{r4, r5, lr}
   d4622:	4918      	ldr	r1, [pc, #96]	; (d4684 <_Z12setSolarMode6String+0x64>)
   d4624:	b085      	sub	sp, #20
   d4626:	4604      	mov	r4, r0
   d4628:	f002 fcbd 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d462c:	4605      	mov	r5, r0
   d462e:	b168      	cbz	r0, d464c <_Z12setSolarMode6String+0x2c>
  {
    sysStatus.solarPowerMode = true;
   d4630:	4b15      	ldr	r3, [pc, #84]	; (d4688 <_Z12setSolarMode6String+0x68>)
   d4632:	2401      	movs	r4, #1
   d4634:	715c      	strb	r4, [r3, #5]
    systemStatusWriteNeeded = true;
   d4636:	4b15      	ldr	r3, [pc, #84]	; (d468c <_Z12setSolarMode6String+0x6c>)
   d4638:	701c      	strb	r4, [r3, #0]
    PMICreset();                                               // Change the power management Settings
   d463a:	f7ff feb5 	bl	d43a8 <_Z9PMICresetv>
   d463e:	4b14      	ldr	r3, [pc, #80]	; (d4690 <_Z12setSolarMode6String+0x70>)
    Particle.publish("Config","Set Solar Powered Mode",PRIVATE);
   d4640:	2200      	movs	r2, #0
   d4642:	781b      	ldrb	r3, [r3, #0]
   d4644:	f88d 2000 	strb.w	r2, [sp]
   d4648:	4a12      	ldr	r2, [pc, #72]	; (d4694 <_Z12setSolarMode6String+0x74>)
   d464a:	e010      	b.n	d466e <_Z12setSolarMode6String+0x4e>
   d464c:	4912      	ldr	r1, [pc, #72]	; (d4698 <_Z12setSolarMode6String+0x78>)
   d464e:	4620      	mov	r0, r4
   d4650:	f002 fca9 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4654:	b198      	cbz	r0, d467e <_Z12setSolarMode6String+0x5e>
  {
    sysStatus.solarPowerMode = false;
   d4656:	4b0c      	ldr	r3, [pc, #48]	; (d4688 <_Z12setSolarMode6String+0x68>)
   d4658:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded = true;
   d465a:	4b0c      	ldr	r3, [pc, #48]	; (d468c <_Z12setSolarMode6String+0x6c>)
   d465c:	2401      	movs	r4, #1
   d465e:	701c      	strb	r4, [r3, #0]
    PMICreset();                                                // Change the power management settings
   d4660:	f7ff fea2 	bl	d43a8 <_Z9PMICresetv>
   d4664:	4b0a      	ldr	r3, [pc, #40]	; (d4690 <_Z12setSolarMode6String+0x70>)
    Particle.publish("Config","Cleared Solar Powered Mode",PRIVATE);
   d4666:	4a0d      	ldr	r2, [pc, #52]	; (d469c <_Z12setSolarMode6String+0x7c>)
   d4668:	781b      	ldrb	r3, [r3, #0]
   d466a:	f88d 5000 	strb.w	r5, [sp]
   d466e:	490c      	ldr	r1, [pc, #48]	; (d46a0 <_Z12setSolarMode6String+0x80>)
   d4670:	a802      	add	r0, sp, #8
   d4672:	f7ff fd37 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4676:	a803      	add	r0, sp, #12
   d4678:	f7ff ff10 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d467c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d467e:	b005      	add	sp, #20
   d4680:	bd30      	pop	{r4, r5, pc}
   d4682:	bf00      	nop
   d4684:	000d938c 	.word	0x000d938c
   d4688:	2003e30c 	.word	0x2003e30c
   d468c:	2003e215 	.word	0x2003e215
   d4690:	2003e1e8 	.word	0x2003e1e8
   d4694:	000d90c8 	.word	0x000d90c8
   d4698:	000d90e6 	.word	0x000d90e6
   d469c:	000d90e8 	.word	0x000d90e8
   d46a0:	000d90df 	.word	0x000d90df

000d46a4 <_Z14setSoilSensors6String>:
    System.setPowerConfiguration(conf);
  }
}

int setSoilSensors (String command) // Function to force sending data in current hour
{
   d46a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d46a6:	491e      	ldr	r1, [pc, #120]	; (d4720 <_Z14setSoilSensors6String+0x7c>)
   d46a8:	4604      	mov	r4, r0
   d46aa:	f002 fc7c 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d46ae:	4606      	mov	r6, r0
   d46b0:	b158      	cbz	r0, d46ca <_Z14setSoilSensors6String+0x26>
  {
    sysStatus.soilSensorConfig = 0;
   d46b2:	4b1c      	ldr	r3, [pc, #112]	; (d4724 <_Z14setSoilSensors6String+0x80>)
   d46b4:	2200      	movs	r2, #0
   d46b6:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d46b8:	4b1b      	ldr	r3, [pc, #108]	; (d4728 <_Z14setSoilSensors6String+0x84>)
   d46ba:	2401      	movs	r4, #1
   d46bc:	701c      	strb	r4, [r3, #0]
   d46be:	4b1b      	ldr	r3, [pc, #108]	; (d472c <_Z14setSoilSensors6String+0x88>)
   d46c0:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d46c2:	f88d 2000 	strb.w	r2, [sp]
   d46c6:	4a1a      	ldr	r2, [pc, #104]	; (d4730 <_Z14setSoilSensors6String+0x8c>)
   d46c8:	e020      	b.n	d470c <_Z14setSoilSensors6String+0x68>
   d46ca:	491a      	ldr	r1, [pc, #104]	; (d4734 <_Z14setSoilSensors6String+0x90>)
   d46cc:	4620      	mov	r0, r4
   d46ce:	f002 fc6a 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d46d2:	4605      	mov	r5, r0
   d46d4:	b150      	cbz	r0, d46ec <_Z14setSoilSensors6String+0x48>
  {
    sysStatus.soilSensorConfig = 1;
   d46d6:	4b13      	ldr	r3, [pc, #76]	; (d4724 <_Z14setSoilSensors6String+0x80>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d46d8:	4a17      	ldr	r2, [pc, #92]	; (d4738 <_Z14setSoilSensors6String+0x94>)
    Particle.publish("Config","No Soil Sensors",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.soilSensorConfig = 1;
   d46da:	2401      	movs	r4, #1
   d46dc:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d46de:	4b12      	ldr	r3, [pc, #72]	; (d4728 <_Z14setSoilSensors6String+0x84>)
   d46e0:	701c      	strb	r4, [r3, #0]
   d46e2:	4b12      	ldr	r3, [pc, #72]	; (d472c <_Z14setSoilSensors6String+0x88>)
   d46e4:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d46e6:	f88d 6000 	strb.w	r6, [sp]
   d46ea:	e00f      	b.n	d470c <_Z14setSoilSensors6String+0x68>
   d46ec:	4913      	ldr	r1, [pc, #76]	; (d473c <_Z14setSoilSensors6String+0x98>)
   d46ee:	4620      	mov	r0, r4
   d46f0:	f002 fc59 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
    else if (command == "2")
   d46f4:	b190      	cbz	r0, d471c <_Z14setSoilSensors6String+0x78>
  {
    sysStatus.soilSensorConfig = 2;
   d46f6:	4b0b      	ldr	r3, [pc, #44]	; (d4724 <_Z14setSoilSensors6String+0x80>)
   d46f8:	2202      	movs	r2, #2
   d46fa:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d46fc:	4b0a      	ldr	r3, [pc, #40]	; (d4728 <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d46fe:	4a10      	ldr	r2, [pc, #64]	; (d4740 <_Z14setSoilSensors6String+0x9c>)
    return 1;
  }
    else if (command == "2")
  {
    sysStatus.soilSensorConfig = 2;
    systemStatusWriteNeeded = true;
   d4700:	2401      	movs	r4, #1
   d4702:	701c      	strb	r4, [r3, #0]
   d4704:	4b09      	ldr	r3, [pc, #36]	; (d472c <_Z14setSoilSensors6String+0x88>)
   d4706:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4708:	f88d 5000 	strb.w	r5, [sp]
   d470c:	490d      	ldr	r1, [pc, #52]	; (d4744 <_Z14setSoilSensors6String+0xa0>)
   d470e:	a802      	add	r0, sp, #8
   d4710:	f7ff fce8 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4714:	a803      	add	r0, sp, #12
   d4716:	f7ff fec1 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d471a:	4620      	mov	r0, r4
  }
  else return 0;
}
   d471c:	b004      	add	sp, #16
   d471e:	bd70      	pop	{r4, r5, r6, pc}
   d4720:	000d90e6 	.word	0x000d90e6
   d4724:	2003e30c 	.word	0x2003e30c
   d4728:	2003e215 	.word	0x2003e215
   d472c:	2003e1e8 	.word	0x2003e1e8
   d4730:	000d9103 	.word	0x000d9103
   d4734:	000d938c 	.word	0x000d938c
   d4738:	000d9113 	.word	0x000d9113
   d473c:	000d939a 	.word	0x000d939a
   d4740:	000d9123 	.word	0x000d9123
   d4744:	000d90df 	.word	0x000d90df

000d4748 <_Z17setPressureSensor6String>:

int setPressureSensor (String command) // Function to force sending data in current hour
{
   d4748:	b530      	push	{r4, r5, lr}
   d474a:	4916      	ldr	r1, [pc, #88]	; (d47a4 <_Z17setPressureSensor6String+0x5c>)
   d474c:	b085      	sub	sp, #20
   d474e:	4604      	mov	r4, r0
   d4750:	f002 fc29 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4754:	4605      	mov	r5, r0
   d4756:	b158      	cbz	r0, d4770 <_Z17setPressureSensor6String+0x28>
  {
    sysStatus.pressureSensorConfig = 0;
   d4758:	4b13      	ldr	r3, [pc, #76]	; (d47a8 <_Z17setPressureSensor6String+0x60>)
   d475a:	2200      	movs	r2, #0
   d475c:	73da      	strb	r2, [r3, #15]
    systemStatusWriteNeeded = true;
   d475e:	4b13      	ldr	r3, [pc, #76]	; (d47ac <_Z17setPressureSensor6String+0x64>)
   d4760:	2401      	movs	r4, #1
   d4762:	701c      	strb	r4, [r3, #0]
   d4764:	4b12      	ldr	r3, [pc, #72]	; (d47b0 <_Z17setPressureSensor6String+0x68>)
   d4766:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d4768:	f88d 2000 	strb.w	r2, [sp]
   d476c:	4a11      	ldr	r2, [pc, #68]	; (d47b4 <_Z17setPressureSensor6String+0x6c>)
   d476e:	e00e      	b.n	d478e <_Z17setPressureSensor6String+0x46>
   d4770:	4911      	ldr	r1, [pc, #68]	; (d47b8 <_Z17setPressureSensor6String+0x70>)
   d4772:	4620      	mov	r0, r4
   d4774:	f002 fc17 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4778:	b188      	cbz	r0, d479e <_Z17setPressureSensor6String+0x56>
  {
    sysStatus.pressureSensorConfig = 1;
   d477a:	4b0b      	ldr	r3, [pc, #44]	; (d47a8 <_Z17setPressureSensor6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d477c:	4a0f      	ldr	r2, [pc, #60]	; (d47bc <_Z17setPressureSensor6String+0x74>)
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.pressureSensorConfig = 1;
   d477e:	2401      	movs	r4, #1
   d4780:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d4782:	4b0a      	ldr	r3, [pc, #40]	; (d47ac <_Z17setPressureSensor6String+0x64>)
   d4784:	701c      	strb	r4, [r3, #0]
   d4786:	4b0a      	ldr	r3, [pc, #40]	; (d47b0 <_Z17setPressureSensor6String+0x68>)
   d4788:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d478a:	f88d 5000 	strb.w	r5, [sp]
   d478e:	490c      	ldr	r1, [pc, #48]	; (d47c0 <_Z17setPressureSensor6String+0x78>)
   d4790:	a802      	add	r0, sp, #8
   d4792:	f7ff fca7 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4796:	a803      	add	r0, sp, #12
   d4798:	f7ff fe80 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d479c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d479e:	b005      	add	sp, #20
   d47a0:	bd30      	pop	{r4, r5, pc}
   d47a2:	bf00      	nop
   d47a4:	000d90e6 	.word	0x000d90e6
   d47a8:	2003e30c 	.word	0x2003e30c
   d47ac:	2003e215 	.word	0x2003e215
   d47b0:	2003e1e8 	.word	0x2003e1e8
   d47b4:	000d9134 	.word	0x000d9134
   d47b8:	000d938c 	.word	0x000d938c
   d47bc:	000d9147 	.word	0x000d9147
   d47c0:	000d90df 	.word	0x000d90df

000d47c4 <_Z14setLightSensor6String>:

int setLightSensor (String command) // Function to force sending data in current hour
{
   d47c4:	b530      	push	{r4, r5, lr}
   d47c6:	4919      	ldr	r1, [pc, #100]	; (d482c <_Z14setLightSensor6String+0x68>)
   d47c8:	b085      	sub	sp, #20
   d47ca:	4604      	mov	r4, r0
   d47cc:	f002 fbeb 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d47d0:	4605      	mov	r5, r0
   d47d2:	b158      	cbz	r0, d47ec <_Z14setLightSensor6String+0x28>
  {
    sysStatus.lightSensorConfig = 0;
   d47d4:	4b16      	ldr	r3, [pc, #88]	; (d4830 <_Z14setLightSensor6String+0x6c>)
   d47d6:	2200      	movs	r2, #0
   d47d8:	741a      	strb	r2, [r3, #16]
    systemStatusWriteNeeded = true;
   d47da:	4b16      	ldr	r3, [pc, #88]	; (d4834 <_Z14setLightSensor6String+0x70>)
   d47dc:	2401      	movs	r4, #1
   d47de:	701c      	strb	r4, [r3, #0]
   d47e0:	4b15      	ldr	r3, [pc, #84]	; (d4838 <_Z14setLightSensor6String+0x74>)
   d47e2:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d47e4:	f88d 2000 	strb.w	r2, [sp]
   d47e8:	4a14      	ldr	r2, [pc, #80]	; (d483c <_Z14setLightSensor6String+0x78>)
   d47ea:	e015      	b.n	d4818 <_Z14setLightSensor6String+0x54>
   d47ec:	4914      	ldr	r1, [pc, #80]	; (d4840 <_Z14setLightSensor6String+0x7c>)
   d47ee:	4620      	mov	r0, r4
   d47f0:	f002 fbd9 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d47f4:	b1c0      	cbz	r0, d4828 <_Z14setLightSensor6String+0x64>
  {
    sysStatus.lightSensorConfig = 1;
   d47f6:	4b0e      	ldr	r3, [pc, #56]	; (d4830 <_Z14setLightSensor6String+0x6c>)
    systemStatusWriteNeeded = true;
    lightSensor.begin();
   d47f8:	4812      	ldr	r0, [pc, #72]	; (d4844 <_Z14setLightSensor6String+0x80>)
    Particle.publish("Config","No Light Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.lightSensorConfig = 1;
   d47fa:	2401      	movs	r4, #1
   d47fc:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d47fe:	4b0d      	ldr	r3, [pc, #52]	; (d4834 <_Z14setLightSensor6String+0x70>)
   d4800:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4802:	f000 feae 	bl	d5562 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4806:	2120      	movs	r1, #32
   d4808:	480e      	ldr	r0, [pc, #56]	; (d4844 <_Z14setLightSensor6String+0x80>)
   d480a:	f000 fee6 	bl	d55da <_ZN6BH175015set_sensor_modeENS_8SensModeE>
   d480e:	4b0a      	ldr	r3, [pc, #40]	; (d4838 <_Z14setLightSensor6String+0x74>)
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4810:	4a0d      	ldr	r2, [pc, #52]	; (d4848 <_Z14setLightSensor6String+0x84>)
   d4812:	781b      	ldrb	r3, [r3, #0]
   d4814:	f88d 5000 	strb.w	r5, [sp]
   d4818:	490c      	ldr	r1, [pc, #48]	; (d484c <_Z14setLightSensor6String+0x88>)
   d481a:	a802      	add	r0, sp, #8
   d481c:	f7ff fc62 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4820:	a803      	add	r0, sp, #12
   d4822:	f7ff fe3b 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4826:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4828:	b005      	add	sp, #20
   d482a:	bd30      	pop	{r4, r5, pc}
   d482c:	000d90e6 	.word	0x000d90e6
   d4830:	2003e30c 	.word	0x2003e30c
   d4834:	2003e215 	.word	0x2003e215
   d4838:	2003e1e8 	.word	0x2003e1e8
   d483c:	000d915f 	.word	0x000d915f
   d4840:	000d938c 	.word	0x000d938c
   d4844:	2003e1ec 	.word	0x2003e1ec
   d4848:	000d916f 	.word	0x000d916f
   d484c:	000d90df 	.word	0x000d90df

000d4850 <_Z18setTempHumidSensor6String>:

int setTempHumidSensor (String command) // Function to force sending data in current hour
{
   d4850:	b530      	push	{r4, r5, lr}
   d4852:	4918      	ldr	r1, [pc, #96]	; (d48b4 <_Z18setTempHumidSensor6String+0x64>)
   d4854:	b085      	sub	sp, #20
   d4856:	4604      	mov	r4, r0
   d4858:	f002 fba5 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d485c:	4605      	mov	r5, r0
   d485e:	b158      	cbz	r0, d4878 <_Z18setTempHumidSensor6String+0x28>
  {
    sysStatus.TempHumidConfig = 0;
   d4860:	4b15      	ldr	r3, [pc, #84]	; (d48b8 <_Z18setTempHumidSensor6String+0x68>)
   d4862:	2200      	movs	r2, #0
   d4864:	731a      	strb	r2, [r3, #12]
    systemStatusWriteNeeded = true;
   d4866:	4b15      	ldr	r3, [pc, #84]	; (d48bc <_Z18setTempHumidSensor6String+0x6c>)
   d4868:	2401      	movs	r4, #1
   d486a:	701c      	strb	r4, [r3, #0]
   d486c:	4b14      	ldr	r3, [pc, #80]	; (d48c0 <_Z18setTempHumidSensor6String+0x70>)
   d486e:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4870:	f88d 2000 	strb.w	r2, [sp]
   d4874:	4a13      	ldr	r2, [pc, #76]	; (d48c4 <_Z18setTempHumidSensor6String+0x74>)
   d4876:	e012      	b.n	d489e <_Z18setTempHumidSensor6String+0x4e>
   d4878:	4913      	ldr	r1, [pc, #76]	; (d48c8 <_Z18setTempHumidSensor6String+0x78>)
   d487a:	4620      	mov	r0, r4
   d487c:	f002 fb93 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4880:	b1a8      	cbz	r0, d48ae <_Z18setTempHumidSensor6String+0x5e>
  {
    sysStatus.TempHumidConfig = 1;
   d4882:	4b0d      	ldr	r3, [pc, #52]	; (d48b8 <_Z18setTempHumidSensor6String+0x68>)
    systemStatusWriteNeeded = true;
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d4884:	4811      	ldr	r0, [pc, #68]	; (d48cc <_Z18setTempHumidSensor6String+0x7c>)
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
   d4886:	2401      	movs	r4, #1
   d4888:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d488a:	4b0c      	ldr	r3, [pc, #48]	; (d48bc <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d488c:	2144      	movs	r1, #68	; 0x44
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
    systemStatusWriteNeeded = true;
   d488e:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d4890:	f000 fef8 	bl	d5684 <_ZN14Adafruit_SHT315beginEh>
   d4894:	4b0a      	ldr	r3, [pc, #40]	; (d48c0 <_Z18setTempHumidSensor6String+0x70>)
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4896:	4a0e      	ldr	r2, [pc, #56]	; (d48d0 <_Z18setTempHumidSensor6String+0x80>)
   d4898:	781b      	ldrb	r3, [r3, #0]
   d489a:	f88d 5000 	strb.w	r5, [sp]
   d489e:	490d      	ldr	r1, [pc, #52]	; (d48d4 <_Z18setTempHumidSensor6String+0x84>)
   d48a0:	a802      	add	r0, sp, #8
   d48a2:	f7ff fc1f 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d48a6:	a803      	add	r0, sp, #12
   d48a8:	f7ff fdf8 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48ac:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d48ae:	b005      	add	sp, #20
   d48b0:	bd30      	pop	{r4, r5, pc}
   d48b2:	bf00      	nop
   d48b4:	000d90e6 	.word	0x000d90e6
   d48b8:	2003e30c 	.word	0x2003e30c
   d48bc:	2003e215 	.word	0x2003e215
   d48c0:	2003e1e8 	.word	0x2003e1e8
   d48c4:	000d9184 	.word	0x000d9184
   d48c8:	000d938c 	.word	0x000d938c
   d48cc:	2003e260 	.word	0x2003e260
   d48d0:	000d9187 	.word	0x000d9187
   d48d4:	000d90df 	.word	0x000d90df

000d48d8 <_Z18setSolenoidPresent6String>:

int setSolenoidPresent (String command) // Function to force sending data in current hour
{
   d48d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d48da:	491b      	ldr	r1, [pc, #108]	; (d4948 <_Z18setSolenoidPresent6String+0x70>)
   d48dc:	4604      	mov	r4, r0
   d48de:	f002 fb62 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "Yes" || command == "yes") {
   d48e2:	b978      	cbnz	r0, d4904 <_Z18setSolenoidPresent6String+0x2c>
   d48e4:	4919      	ldr	r1, [pc, #100]	; (d494c <_Z18setSolenoidPresent6String+0x74>)
   d48e6:	4620      	mov	r0, r4
   d48e8:	f002 fb5d 	bl	d6fa6 <_ZNK6String6equalsEPKc>
   d48ec:	b950      	cbnz	r0, d4904 <_Z18setSolenoidPresent6String+0x2c>
   d48ee:	4918      	ldr	r1, [pc, #96]	; (d4950 <_Z18setSolenoidPresent6String+0x78>)
   d48f0:	4620      	mov	r0, r4
   d48f2:	f002 fb58 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    sysStatus.solenoidConfig = 1;
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Solenoid Attached",PRIVATE);
    return 1;
  }
  else if (command == "No" || command == "no") {
   d48f6:	b988      	cbnz	r0, d491c <_Z18setSolenoidPresent6String+0x44>
   d48f8:	4916      	ldr	r1, [pc, #88]	; (d4954 <_Z18setSolenoidPresent6String+0x7c>)
   d48fa:	4620      	mov	r0, r4
   d48fc:	f002 fb53 	bl	d6fa6 <_ZNK6String6equalsEPKc>
   d4900:	b960      	cbnz	r0, d491c <_Z18setSolenoidPresent6String+0x44>
   d4902:	e01e      	b.n	d4942 <_Z18setSolenoidPresent6String+0x6a>
}

int setSolenoidPresent (String command) // Function to force sending data in current hour
{
  if (command == "Yes" || command == "yes") {
    sysStatus.solenoidConfig = 1;
   d4904:	4b14      	ldr	r3, [pc, #80]	; (d4958 <_Z18setSolenoidPresent6String+0x80>)
   d4906:	2401      	movs	r4, #1
   d4908:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d490a:	4b14      	ldr	r3, [pc, #80]	; (d495c <_Z18setSolenoidPresent6String+0x84>)
   d490c:	701c      	strb	r4, [r3, #0]
   d490e:	4b14      	ldr	r3, [pc, #80]	; (d4960 <_Z18setSolenoidPresent6String+0x88>)
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d4910:	2200      	movs	r2, #0
   d4912:	781b      	ldrb	r3, [r3, #0]
   d4914:	f88d 2000 	strb.w	r2, [sp]
   d4918:	4a12      	ldr	r2, [pc, #72]	; (d4964 <_Z18setSolenoidPresent6String+0x8c>)
   d491a:	e00a      	b.n	d4932 <_Z18setSolenoidPresent6String+0x5a>
    return 1;
  }
  else if (command == "No" || command == "no") {
    sysStatus.solenoidConfig = 0;
   d491c:	4b0e      	ldr	r3, [pc, #56]	; (d4958 <_Z18setSolenoidPresent6String+0x80>)
   d491e:	2200      	movs	r2, #0
   d4920:	745a      	strb	r2, [r3, #17]
    systemStatusWriteNeeded = true;
   d4922:	4b0e      	ldr	r3, [pc, #56]	; (d495c <_Z18setSolenoidPresent6String+0x84>)
   d4924:	2401      	movs	r4, #1
   d4926:	701c      	strb	r4, [r3, #0]
   d4928:	4b0d      	ldr	r3, [pc, #52]	; (d4960 <_Z18setSolenoidPresent6String+0x88>)
   d492a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d492c:	f88d 2000 	strb.w	r2, [sp]
   d4930:	4a0d      	ldr	r2, [pc, #52]	; (d4968 <_Z18setSolenoidPresent6String+0x90>)
   d4932:	490e      	ldr	r1, [pc, #56]	; (d496c <_Z18setSolenoidPresent6String+0x94>)
   d4934:	a802      	add	r0, sp, #8
   d4936:	f7ff fbd5 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d493a:	a803      	add	r0, sp, #12
   d493c:	f7ff fdae 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4940:	4620      	mov	r0, r4
  }
  else return 0;
}
   d4942:	b004      	add	sp, #16
   d4944:	bd10      	pop	{r4, pc}
   d4946:	bf00      	nop
   d4948:	000d91a6 	.word	0x000d91a6
   d494c:	000d91aa 	.word	0x000d91aa
   d4950:	000d91b1 	.word	0x000d91b1
   d4954:	000d91ae 	.word	0x000d91ae
   d4958:	2003e30c 	.word	0x2003e30c
   d495c:	2003e215 	.word	0x2003e215
   d4960:	2003e1e8 	.word	0x2003e1e8
   d4964:	000d91b7 	.word	0x000d91b7
   d4968:	000d91b4 	.word	0x000d91b4
   d496c:	000d90df 	.word	0x000d90df

000d4970 <_Z17setHoldTimeMillis6String>:


int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4970:	b530      	push	{r4, r5, lr}
   d4972:	b087      	sub	sp, #28
  char * pEND;
  int holdTimeMillis = strtol(command,&pEND,10);                        // Looks for the first float and interprets it
   d4974:	220a      	movs	r2, #10
   d4976:	a903      	add	r1, sp, #12
   d4978:	6800      	ldr	r0, [r0, #0]
   d497a:	f003 ff1b 	bl	d87b4 <strtol>
  if ((holdTimeMillis < 0) || (holdTimeMillis > 5000)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d497e:	f241 3288 	movw	r2, #5000	; 0x1388
   d4982:	4290      	cmp	r0, r2


int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  int holdTimeMillis = strtol(command,&pEND,10);                        // Looks for the first float and interprets it
   d4984:	4603      	mov	r3, r0
  if ((holdTimeMillis < 0) || (holdTimeMillis > 5000)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4986:	d81f      	bhi.n	d49c8 <_Z17setHoldTimeMillis6String+0x58>
  sysStatus.solenoidHoldTime = holdTimeMillis;                          // debounce is how long we must space events to prevent overcounting
   d4988:	4d12      	ldr	r5, [pc, #72]	; (d49d4 <_Z17setHoldTimeMillis6String+0x64>)
  systemStatusWriteNeeded = true;
   d498a:	4a13      	ldr	r2, [pc, #76]	; (d49d8 <_Z17setHoldTimeMillis6String+0x68>)
int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  int holdTimeMillis = strtol(command,&pEND,10);                        // Looks for the first float and interprets it
  if ((holdTimeMillis < 0) || (holdTimeMillis > 5000)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.solenoidHoldTime = holdTimeMillis;                          // debounce is how long we must space events to prevent overcounting
   d498c:	6168      	str	r0, [r5, #20]
  systemStatusWriteNeeded = true;
   d498e:	2401      	movs	r4, #1
   d4990:	7014      	strb	r4, [r2, #0]
  snprintf(holdTimeStr,sizeof(holdTimeStr),"Hold Time set to %i mSec",sysStatus.solenoidHoldTime);
   d4992:	2110      	movs	r1, #16
   d4994:	4a11      	ldr	r2, [pc, #68]	; (d49dc <_Z17setHoldTimeMillis6String+0x6c>)
   d4996:	4812      	ldr	r0, [pc, #72]	; (d49e0 <_Z17setHoldTimeMillis6String+0x70>)
   d4998:	f001 fa40 	bl	d5e1c <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d499c:	792b      	ldrb	r3, [r5, #4]
   d499e:	b1ab      	cbz	r3, d49cc <_Z17setHoldTimeMillis6String+0x5c>
   d49a0:	f001 f994 	bl	d5ccc <spark_cloud_flag_connected>
   d49a4:	b190      	cbz	r0, d49cc <_Z17setHoldTimeMillis6String+0x5c>
    waitUntil(meterParticlePublish);
   d49a6:	f7ff fd41 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d49aa:	4b0e      	ldr	r3, [pc, #56]	; (d49e4 <_Z17setHoldTimeMillis6String+0x74>)
    Particle.publish("Config",holdTimeStr, PRIVATE);
   d49ac:	490e      	ldr	r1, [pc, #56]	; (d49e8 <_Z17setHoldTimeMillis6String+0x78>)
   d49ae:	781b      	ldrb	r3, [r3, #0]
   d49b0:	2200      	movs	r2, #0
   d49b2:	f88d 2000 	strb.w	r2, [sp]
   d49b6:	a804      	add	r0, sp, #16
   d49b8:	4a09      	ldr	r2, [pc, #36]	; (d49e0 <_Z17setHoldTimeMillis6String+0x70>)
   d49ba:	f7ff fb93 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d49be:	a805      	add	r0, sp, #20
   d49c0:	f7ff fd6c 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49c4:	4620      	mov	r0, r4
   d49c6:	e002      	b.n	d49ce <_Z17setHoldTimeMillis6String+0x5e>

int setHoldTimeMillis(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  int holdTimeMillis = strtol(command,&pEND,10);                        // Looks for the first float and interprets it
  if ((holdTimeMillis < 0) || (holdTimeMillis > 5000)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d49c8:	2000      	movs	r0, #0
   d49ca:	e000      	b.n	d49ce <_Z17setHoldTimeMillis6String+0x5e>
  snprintf(holdTimeStr,sizeof(holdTimeStr),"Hold Time set to %i mSec",sysStatus.solenoidHoldTime);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Config",holdTimeStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d49cc:	2001      	movs	r0, #1
}
   d49ce:	b007      	add	sp, #28
   d49d0:	bd30      	pop	{r4, r5, pc}
   d49d2:	bf00      	nop
   d49d4:	2003e30c 	.word	0x2003e30c
   d49d8:	2003e215 	.word	0x2003e215
   d49dc:	000d91c9 	.word	0x000d91c9
   d49e0:	2003e217 	.word	0x2003e217
   d49e4:	2003e1e8 	.word	0x2003e1e8
   d49e8:	000d90df 	.word	0x000d90df

000d49ec <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d49ec:	b530      	push	{r4, r5, lr}
   d49ee:	4916      	ldr	r1, [pc, #88]	; (d4a48 <_Z14setVerboseMode6String+0x5c>)
   d49f0:	b085      	sub	sp, #20
   d49f2:	4604      	mov	r4, r0
   d49f4:	f002 fad7 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d49f8:	4605      	mov	r5, r0
   d49fa:	b158      	cbz	r0, d4a14 <_Z14setVerboseMode6String+0x28>
  {
    sysStatus.verboseMode = true;
   d49fc:	4b13      	ldr	r3, [pc, #76]	; (d4a4c <_Z14setVerboseMode6String+0x60>)
   d49fe:	2401      	movs	r4, #1
   d4a00:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4a02:	4b13      	ldr	r3, [pc, #76]	; (d4a50 <_Z14setVerboseMode6String+0x64>)
   d4a04:	701c      	strb	r4, [r3, #0]
   d4a06:	4b13      	ldr	r3, [pc, #76]	; (d4a54 <_Z14setVerboseMode6String+0x68>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4a08:	2200      	movs	r2, #0
   d4a0a:	781b      	ldrb	r3, [r3, #0]
   d4a0c:	f88d 2000 	strb.w	r2, [sp]
   d4a10:	4a11      	ldr	r2, [pc, #68]	; (d4a58 <_Z14setVerboseMode6String+0x6c>)
   d4a12:	e00e      	b.n	d4a32 <_Z14setVerboseMode6String+0x46>
   d4a14:	4911      	ldr	r1, [pc, #68]	; (d4a5c <_Z14setVerboseMode6String+0x70>)
   d4a16:	4620      	mov	r0, r4
   d4a18:	f002 fac5 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4a1c:	b188      	cbz	r0, d4a42 <_Z14setVerboseMode6String+0x56>
  {
    sysStatus.verboseMode = false;
   d4a1e:	4b0b      	ldr	r3, [pc, #44]	; (d4a4c <_Z14setVerboseMode6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4a20:	4a0f      	ldr	r2, [pc, #60]	; (d4a60 <_Z14setVerboseMode6String+0x74>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
   d4a22:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4a24:	4b0a      	ldr	r3, [pc, #40]	; (d4a50 <_Z14setVerboseMode6String+0x64>)
   d4a26:	2401      	movs	r4, #1
   d4a28:	701c      	strb	r4, [r3, #0]
   d4a2a:	4b0a      	ldr	r3, [pc, #40]	; (d4a54 <_Z14setVerboseMode6String+0x68>)
   d4a2c:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4a2e:	f88d 5000 	strb.w	r5, [sp]
   d4a32:	490c      	ldr	r1, [pc, #48]	; (d4a64 <_Z14setVerboseMode6String+0x78>)
   d4a34:	a802      	add	r0, sp, #8
   d4a36:	f7ff fb55 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4a3a:	a803      	add	r0, sp, #12
   d4a3c:	f7ff fd2e 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a40:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4a42:	b005      	add	sp, #20
   d4a44:	bd30      	pop	{r4, r5, pc}
   d4a46:	bf00      	nop
   d4a48:	000d938c 	.word	0x000d938c
   d4a4c:	2003e30c 	.word	0x2003e30c
   d4a50:	2003e215 	.word	0x2003e215
   d4a54:	2003e1e8 	.word	0x2003e1e8
   d4a58:	000d91e2 	.word	0x000d91e2
   d4a5c:	000d90e6 	.word	0x000d90e6
   d4a60:	000d91f3 	.word	0x000d91f3
   d4a64:	000d90fe 	.word	0x000d90fe

000d4a68 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4a68:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4a6a:	4927      	ldr	r1, [pc, #156]	; (d4b08 <_Z15setLowPowerMode6String+0xa0>)
   d4a6c:	b085      	sub	sp, #20
   d4a6e:	4604      	mov	r4, r0
   d4a70:	f002 fa99 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4a74:	b928      	cbnz	r0, d4a82 <_Z15setLowPowerMode6String+0x1a>
   d4a76:	4925      	ldr	r1, [pc, #148]	; (d4b0c <_Z15setLowPowerMode6String+0xa4>)
   d4a78:	4620      	mov	r0, r4
   d4a7a:	f002 fa94 	bl	d6fa6 <_ZNK6String6equalsEPKc>
   d4a7e:	2800      	cmp	r0, #0
   d4a80:	d03f      	beq.n	d4b02 <_Z15setLowPowerMode6String+0x9a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4a82:	4921      	ldr	r1, [pc, #132]	; (d4b08 <_Z15setLowPowerMode6String+0xa0>)
   d4a84:	4620      	mov	r0, r4
   d4a86:	f002 fa8e 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4a8a:	4605      	mov	r5, r0
   d4a8c:	b140      	cbz	r0, d4aa0 <_Z15setLowPowerMode6String+0x38>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d4a8e:	4b20      	ldr	r3, [pc, #128]	; (d4b10 <_Z15setLowPowerMode6String+0xa8>)
   d4a90:	791a      	ldrb	r2, [r3, #4]
   d4a92:	461c      	mov	r4, r3
   d4a94:	b112      	cbz	r2, d4a9c <_Z15setLowPowerMode6String+0x34>
   d4a96:	f001 f919 	bl	d5ccc <spark_cloud_flag_connected>
   d4a9a:	b998      	cbnz	r0, d4ac4 <_Z15setLowPowerMode6String+0x5c>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power Mode", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4a9c:	2301      	movs	r3, #1
   d4a9e:	e00c      	b.n	d4aba <_Z15setLowPowerMode6String+0x52>
   d4aa0:	491a      	ldr	r1, [pc, #104]	; (d4b0c <_Z15setLowPowerMode6String+0xa4>)
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f002 fa7f 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4aa8:	b140      	cbz	r0, d4abc <_Z15setLowPowerMode6String+0x54>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d4aaa:	4b19      	ldr	r3, [pc, #100]	; (d4b10 <_Z15setLowPowerMode6String+0xa8>)
   d4aac:	791a      	ldrb	r2, [r3, #4]
   d4aae:	461c      	mov	r4, r3
   d4ab0:	b112      	cbz	r2, d4ab8 <_Z15setLowPowerMode6String+0x50>
   d4ab2:	f001 f90b 	bl	d5ccc <spark_cloud_flag_connected>
   d4ab6:	b9a8      	cbnz	r0, d4ae4 <_Z15setLowPowerMode6String+0x7c>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Normal Operations", PRIVATE);
    }
    sysStatus.lowPowerMode = false;
   d4ab8:	2300      	movs	r3, #0
   d4aba:	71a3      	strb	r3, [r4, #6]
  }
  systemStatusWriteNeeded = true;
   d4abc:	4b15      	ldr	r3, [pc, #84]	; (d4b14 <_Z15setLowPowerMode6String+0xac>)
   d4abe:	2001      	movs	r0, #1
   d4ac0:	7018      	strb	r0, [r3, #0]
   d4ac2:	e01e      	b.n	d4b02 <_Z15setLowPowerMode6String+0x9a>
{
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4ac4:	f7ff fcb2 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4ac8:	4b13      	ldr	r3, [pc, #76]	; (d4b18 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4aca:	4914      	ldr	r1, [pc, #80]	; (d4b1c <_Z15setLowPowerMode6String+0xb4>)
   d4acc:	781b      	ldrb	r3, [r3, #0]
   d4ace:	2200      	movs	r2, #0
   d4ad0:	f88d 2000 	strb.w	r2, [sp]
   d4ad4:	a802      	add	r0, sp, #8
   d4ad6:	4a12      	ldr	r2, [pc, #72]	; (d4b20 <_Z15setLowPowerMode6String+0xb8>)
   d4ad8:	f7ff fb04 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4adc:	a803      	add	r0, sp, #12
   d4ade:	f7ff fcdd 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ae2:	e7db      	b.n	d4a9c <_Z15setLowPowerMode6String+0x34>
    sysStatus.lowPowerMode = true;
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4ae4:	f7ff fca2 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4ae8:	4b0b      	ldr	r3, [pc, #44]	; (d4b18 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Normal Operations", PRIVATE);
   d4aea:	4a0e      	ldr	r2, [pc, #56]	; (d4b24 <_Z15setLowPowerMode6String+0xbc>)
   d4aec:	781b      	ldrb	r3, [r3, #0]
   d4aee:	490b      	ldr	r1, [pc, #44]	; (d4b1c <_Z15setLowPowerMode6String+0xb4>)
   d4af0:	f88d 5000 	strb.w	r5, [sp]
   d4af4:	a802      	add	r0, sp, #8
   d4af6:	f7ff faf5 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4afa:	a803      	add	r0, sp, #12
   d4afc:	f7ff fcce 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b00:	e7da      	b.n	d4ab8 <_Z15setLowPowerMode6String+0x50>
    }
    sysStatus.lowPowerMode = false;
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d4b02:	b005      	add	sp, #20
   d4b04:	bd30      	pop	{r4, r5, pc}
   d4b06:	bf00      	nop
   d4b08:	000d938c 	.word	0x000d938c
   d4b0c:	000d90e6 	.word	0x000d90e6
   d4b10:	2003e30c 	.word	0x2003e30c
   d4b14:	2003e215 	.word	0x2003e215
   d4b18:	2003e1e8 	.word	0x2003e1e8
   d4b1c:	000d90fe 	.word	0x000d90fe
   d4b20:	000d9208 	.word	0x000d9208
   d4b24:	000d9217 	.word	0x000d9217

000d4b28 <_Z11contolValve6String>:

int contolValve(String command)                                   // Function to force sending data in current hour
{
   d4b28:	b530      	push	{r4, r5, lr}
   d4b2a:	4921      	ldr	r1, [pc, #132]	; (d4bb0 <_Z11contolValve6String+0x88>)
   d4b2c:	b085      	sub	sp, #20
   d4b2e:	4605      	mov	r5, r0
   d4b30:	f002 fa39 	bl	d6fa6 <_ZNK6String6equalsEPKc>
  if (command == "On") {                                           // Open the water valve
   d4b34:	4604      	mov	r4, r0
   d4b36:	b1b0      	cbz	r0, d4b66 <_Z11contolValve6String+0x3e>
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4b38:	2101      	movs	r1, #1
   d4b3a:	2002      	movs	r0, #2
   d4b3c:	f002 fd93 	bl	d7666 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4b40:	2100      	movs	r1, #0
   d4b42:	2003      	movs	r0, #3
   d4b44:	f002 fd8f 	bl	d7666 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4b48:	4b1a      	ldr	r3, [pc, #104]	; (d4bb4 <_Z11contolValve6String+0x8c>)
   d4b4a:	6958      	ldr	r0, [r3, #20]
   d4b4c:	f001 f98a 	bl	d5e64 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4b50:	2101      	movs	r1, #1
   d4b52:	2003      	movs	r0, #3
   d4b54:	f002 fd87 	bl	d7666 <digitalWrite>
   d4b58:	4b17      	ldr	r3, [pc, #92]	; (d4bb8 <_Z11contolValve6String+0x90>)
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	781b      	ldrb	r3, [r3, #0]
   d4b5e:	f88d 2000 	strb.w	r2, [sp]
   d4b62:	4a16      	ldr	r2, [pc, #88]	; (d4bbc <_Z11contolValve6String+0x94>)
   d4b64:	e019      	b.n	d4b9a <_Z11contolValve6String+0x72>
   d4b66:	4916      	ldr	r1, [pc, #88]	; (d4bc0 <_Z11contolValve6String+0x98>)
   d4b68:	4628      	mov	r0, r5
   d4b6a:	f002 fa1c 	bl	d6fa6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "Off") {                                     // Close the water valve
   d4b6e:	b1e0      	cbz	r0, d4baa <_Z11contolValve6String+0x82>
    digitalWrite(solDirection,LOW);                               // Close the valve
   d4b70:	4621      	mov	r1, r4
   d4b72:	2002      	movs	r0, #2
   d4b74:	f002 fd77 	bl	d7666 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4b78:	4621      	mov	r1, r4
   d4b7a:	2003      	movs	r0, #3
   d4b7c:	f002 fd73 	bl	d7666 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4b80:	4b0c      	ldr	r3, [pc, #48]	; (d4bb4 <_Z11contolValve6String+0x8c>)
   d4b82:	6958      	ldr	r0, [r3, #20]
   d4b84:	f001 f96e 	bl	d5e64 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4b88:	2101      	movs	r1, #1
   d4b8a:	2003      	movs	r0, #3
   d4b8c:	f002 fd6b 	bl	d7666 <digitalWrite>
   d4b90:	4b09      	ldr	r3, [pc, #36]	; (d4bb8 <_Z11contolValve6String+0x90>)
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4b92:	4a0c      	ldr	r2, [pc, #48]	; (d4bc4 <_Z11contolValve6String+0x9c>)
   d4b94:	781b      	ldrb	r3, [r3, #0]
   d4b96:	f88d 4000 	strb.w	r4, [sp]
   d4b9a:	490b      	ldr	r1, [pc, #44]	; (d4bc8 <_Z11contolValve6String+0xa0>)
   d4b9c:	a802      	add	r0, sp, #8
   d4b9e:	f7ff faa1 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4ba2:	a803      	add	r0, sp, #12
   d4ba4:	f7ff fc7a 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ba8:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d4baa:	b005      	add	sp, #20
   d4bac:	bd30      	pop	{r4, r5, pc}
   d4bae:	bf00      	nop
   d4bb0:	000d9229 	.word	0x000d9229
   d4bb4:	2003e30c 	.word	0x2003e30c
   d4bb8:	2003e1e8 	.word	0x2003e1e8
   d4bbc:	000d922c 	.word	0x000d922c
   d4bc0:	000d9244 	.word	0x000d9244
   d4bc4:	000d9248 	.word	0x000d9248
   d4bc8:	000d923b 	.word	0x000d923b

000d4bcc <_Z22publishStateTransitionv>:


void publishStateTransition(void)
{
   d4bcc:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4bce:	4d16      	ldr	r5, [pc, #88]	; (d4c28 <_Z22publishStateTransitionv+0x5c>)
   d4bd0:	4c16      	ldr	r4, [pc, #88]	; (d4c2c <_Z22publishStateTransitionv+0x60>)
   d4bd2:	4917      	ldr	r1, [pc, #92]	; (d4c30 <_Z22publishStateTransitionv+0x64>)
   d4bd4:	782a      	ldrb	r2, [r5, #0]
   d4bd6:	7820      	ldrb	r0, [r4, #0]
  else return 0;
}


void publishStateTransition(void)
{
   d4bd8:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4bda:	230e      	movs	r3, #14
   d4bdc:	fb03 1202 	mla	r2, r3, r2, r1
   d4be0:	9200      	str	r2, [sp, #0]
   d4be2:	fb03 1300 	mla	r3, r3, r0, r1
   d4be6:	4a13      	ldr	r2, [pc, #76]	; (d4c34 <_Z22publishStateTransitionv+0x68>)
   d4be8:	2128      	movs	r1, #40	; 0x28
   d4bea:	a804      	add	r0, sp, #16
   d4bec:	f001 f916 	bl	d5e1c <snprintf>
  oldState = state;
   d4bf0:	782b      	ldrb	r3, [r5, #0]
   d4bf2:	7023      	strb	r3, [r4, #0]
   d4bf4:	f001 f86a 	bl	d5ccc <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4bf8:	b170      	cbz	r0, d4c18 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d4bfa:	f7ff fc17 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4bfe:	4b0e      	ldr	r3, [pc, #56]	; (d4c38 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4c00:	490e      	ldr	r1, [pc, #56]	; (d4c3c <_Z22publishStateTransitionv+0x70>)
   d4c02:	781b      	ldrb	r3, [r3, #0]
   d4c04:	2200      	movs	r2, #0
   d4c06:	f88d 2000 	strb.w	r2, [sp]
   d4c0a:	a802      	add	r0, sp, #8
   d4c0c:	aa04      	add	r2, sp, #16
   d4c0e:	f7ff fa69 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4c12:	a803      	add	r0, sp, #12
   d4c14:	f7ff fc42 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d4c18:	f002 fc2c 	bl	d7474 <_Z16_fetch_usbserialv>
   d4c1c:	a904      	add	r1, sp, #16
   d4c1e:	f002 f8f6 	bl	d6e0e <_ZN5Print7printlnEPKc>
}
   d4c22:	b00f      	add	sp, #60	; 0x3c
   d4c24:	bd30      	pop	{r4, r5, pc}
   d4c26:	bf00      	nop
   d4c28:	2003e216 	.word	0x2003e216
   d4c2c:	2003e214 	.word	0x2003e214
   d4c30:	2003e074 	.word	0x2003e074
   d4c34:	000d9258 	.word	0x000d9258
   d4c38:	2003e1e8 	.word	0x2003e1e8
   d4c3c:	000d9266 	.word	0x000d9266

000d4c40 <loop>:

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4c40:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d4c42:	4c90      	ldr	r4, [pc, #576]	; (d4e84 <loop+0x244>)
   d4c44:	7823      	ldrb	r3, [r4, #0]
   d4c46:	3b01      	subs	r3, #1

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4c48:	b088      	sub	sp, #32
  switch(state) {
   d4c4a:	2b07      	cmp	r3, #7
   d4c4c:	f200 81f9 	bhi.w	d5042 <loop+0x402>
   d4c50:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4c54:	00080182 	.word	0x00080182
   d4c58:	00740044 	.word	0x00740044
   d4c5c:	00970076 	.word	0x00970076
   d4c60:	014000c8 	.word	0x014000c8
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4c64:	4d88      	ldr	r5, [pc, #544]	; (d4e88 <loop+0x248>)
   d4c66:	792b      	ldrb	r3, [r5, #4]
   d4c68:	b12b      	cbz	r3, d4c76 <loop+0x36>
   d4c6a:	4b88      	ldr	r3, [pc, #544]	; (d4e8c <loop+0x24c>)
   d4c6c:	781b      	ldrb	r3, [r3, #0]
   d4c6e:	2b02      	cmp	r3, #2
   d4c70:	d001      	beq.n	d4c76 <loop+0x36>
   d4c72:	f7ff ffab 	bl	d4bcc <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d4c76:	4e86      	ldr	r6, [pc, #536]	; (d4e90 <loop+0x250>)
   d4c78:	7833      	ldrb	r3, [r6, #0]
   d4c7a:	b143      	cbz	r3, d4c8e <loop+0x4e>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d4c7c:	f002 fd36 	bl	d76ec <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4c80:	2220      	movs	r2, #32
   d4c82:	4981      	ldr	r1, [pc, #516]	; (d4e88 <loop+0x248>)
   d4c84:	2001      	movs	r0, #1
   d4c86:	f000 fe39 	bl	d58fc <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d4c8a:	2300      	movs	r3, #0
   d4c8c:	7033      	strb	r3, [r6, #0]
    } 
    if (currentStatusWriteNeeded) {
   d4c8e:	4e81      	ldr	r6, [pc, #516]	; (d4e94 <loop+0x254>)
   d4c90:	7833      	ldrb	r3, [r6, #0]
   d4c92:	b143      	cbz	r3, d4ca6 <loop+0x66>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d4c94:	f002 fd2a 	bl	d76ec <_Z21__fetch_global_EEPROMv>
   d4c98:	2224      	movs	r2, #36	; 0x24
   d4c9a:	497f      	ldr	r1, [pc, #508]	; (d4e98 <loop+0x258>)
   d4c9c:	2050      	movs	r0, #80	; 0x50
   d4c9e:	f000 fe2d 	bl	d58fc <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d4ca2:	2300      	movs	r3, #0
   d4ca4:	7033      	strb	r3, [r6, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;
   d4ca6:	79ab      	ldrb	r3, [r5, #6]
   d4ca8:	b143      	cbz	r3, d4cbc <loop+0x7c>
   d4caa:	f000 fdff 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
   d4cae:	4b7b      	ldr	r3, [pc, #492]	; (d4e9c <loop+0x25c>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	1ac0      	subs	r0, r0, r3
   d4cb4:	4b7a      	ldr	r3, [pc, #488]	; (d4ea0 <loop+0x260>)
   d4cb6:	4298      	cmp	r0, r3
   d4cb8:	f200 81c0 	bhi.w	d503c <loop+0x3fc>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;     // We want to report on the hour but not after bedtime
   d4cbc:	f002 fadc 	bl	d7278 <_ZN9TimeClass4hourEv>
   d4cc0:	4b78      	ldr	r3, [pc, #480]	; (d4ea4 <loop+0x264>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
   d4cc2:	68aa      	ldr	r2, [r5, #8]
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;     // We want to report on the hour but not after bedtime
   d4cc4:	781b      	ldrb	r3, [r3, #0]
   d4cc6:	4298      	cmp	r0, r3
   d4cc8:	bf1c      	itt	ne
   d4cca:	2303      	movne	r3, #3
   d4ccc:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
   d4cce:	4b76      	ldr	r3, [pc, #472]	; (d4ea8 <loop+0x268>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	429a      	cmp	r2, r3
   d4cd4:	f300 81b5 	bgt.w	d5042 <loop+0x402>
   d4cd8:	2308      	movs	r3, #8
   d4cda:	e02d      	b.n	d4d38 <loop+0xf8>
    break;

  case MEASURING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4cdc:	4d6a      	ldr	r5, [pc, #424]	; (d4e88 <loop+0x248>)
   d4cde:	792b      	ldrb	r3, [r5, #4]
   d4ce0:	b12b      	cbz	r3, d4cee <loop+0xae>
   d4ce2:	4b6a      	ldr	r3, [pc, #424]	; (d4e8c <loop+0x24c>)
   d4ce4:	781b      	ldrb	r3, [r3, #0]
   d4ce6:	2b03      	cmp	r3, #3
   d4ce8:	d001      	beq.n	d4cee <loop+0xae>
   d4cea:	f7ff ff6f 	bl	d4bcc <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4cee:	f7ff fa37 	bl	d4160 <_Z16takeMeasurementsv>
   d4cf2:	4606      	mov	r6, r0
   d4cf4:	b9e8      	cbnz	r0, d4d32 <loop+0xf2>
    {
      state = ERROR_STATE;
   d4cf6:	2301      	movs	r3, #1
   d4cf8:	7023      	strb	r3, [r4, #0]
   d4cfa:	f000 fdd7 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4cfe:	4b6b      	ldr	r3, [pc, #428]	; (d4eac <loop+0x26c>)
   d4d00:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d4d02:	792b      	ldrb	r3, [r5, #4]
   d4d04:	2b00      	cmp	r3, #0
   d4d06:	f000 819c 	beq.w	d5042 <loop+0x402>
   d4d0a:	f000 ffdf 	bl	d5ccc <spark_cloud_flag_connected>
   d4d0e:	2800      	cmp	r0, #0
   d4d10:	f000 8197 	beq.w	d5042 <loop+0x402>
        waitUntil(meterParticlePublish);
   d4d14:	f7ff fb8a 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4d18:	4b65      	ldr	r3, [pc, #404]	; (d4eb0 <loop+0x270>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4d1a:	4a66      	ldr	r2, [pc, #408]	; (d4eb4 <loop+0x274>)
   d4d1c:	781b      	ldrb	r3, [r3, #0]
   d4d1e:	4966      	ldr	r1, [pc, #408]	; (d4eb8 <loop+0x278>)
   d4d20:	f88d 6000 	strb.w	r6, [sp]
   d4d24:	a806      	add	r0, sp, #24
   d4d26:	f7ff f9dd 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4d2a:	a807      	add	r0, sp, #28
   d4d2c:	f7ff fbb6 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d30:	e187      	b.n	d5042 <loop+0x402>
      }
    }
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d4d32:	7c6b      	ldrb	r3, [r5, #17]
   d4d34:	b113      	cbz	r3, d4d3c <loop+0xfc>
   d4d36:	2304      	movs	r3, #4
   d4d38:	7023      	strb	r3, [r4, #0]
   d4d3a:	e182      	b.n	d5042 <loop+0x402>
    else state = REPORTING_STATE;
    break;

  case WATERING_STATE:                                                    // This state will examing soil values and decide on watering 
    state = REPORTING_STATE;
   d4d3c:	2305      	movs	r3, #5
   d4d3e:	e7fb      	b.n	d4d38 <loop+0xf8>
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4d40:	4b51      	ldr	r3, [pc, #324]	; (d4e88 <loop+0x248>)
   d4d42:	791b      	ldrb	r3, [r3, #4]
   d4d44:	b12b      	cbz	r3, d4d52 <loop+0x112>
   d4d46:	4b51      	ldr	r3, [pc, #324]	; (d4e8c <loop+0x24c>)
   d4d48:	781b      	ldrb	r3, [r3, #0]
   d4d4a:	2b05      	cmp	r3, #5
   d4d4c:	d001      	beq.n	d4d52 <loop+0x112>
   d4d4e:	f7ff ff3d 	bl	d4bcc <_Z22publishStateTransitionv>
   d4d52:	f000 ffbb 	bl	d5ccc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4d56:	b168      	cbz	r0, d4d74 <loop+0x134>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
   d4d58:	f002 fa8e 	bl	d7278 <_ZN9TimeClass4hourEv>
   d4d5c:	280c      	cmp	r0, #12
   d4d5e:	d105      	bne.n	d4d6c <loop+0x12c>
   d4d60:	f000 ffb4 	bl	d5ccc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4d64:	b110      	cbz	r0, d4d6c <loop+0x12c>
            return false;
        }
        return spark_sync_time(NULL);
   d4d66:	2000      	movs	r0, #0
   d4d68:	f000 ffd0 	bl	d5d0c <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
   d4d6c:	f7ff fbac 	bl	d44c8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d4d70:	2306      	movs	r3, #6
   d4d72:	e7e1      	b.n	d4d38 <loop+0xf8>
    }
    else if (!connectToParticle()) state = ERROR_STATE;                   // In case we timed out on our 1st attempt to connect
   d4d74:	f7ff faa8 	bl	d42c8 <_Z17connectToParticlev>
   d4d78:	2800      	cmp	r0, #0
   d4d7a:	f040 8162 	bne.w	d5042 <loop+0x402>
   d4d7e:	2301      	movs	r3, #1
   d4d80:	e7da      	b.n	d4d38 <loop+0xf8>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4d82:	4b41      	ldr	r3, [pc, #260]	; (d4e88 <loop+0x248>)
   d4d84:	791b      	ldrb	r3, [r3, #4]
   d4d86:	b12b      	cbz	r3, d4d94 <loop+0x154>
   d4d88:	4b40      	ldr	r3, [pc, #256]	; (d4e8c <loop+0x24c>)
   d4d8a:	781b      	ldrb	r3, [r3, #0]
   d4d8c:	2b06      	cmp	r3, #6
   d4d8e:	d001      	beq.n	d4d94 <loop+0x154>
   d4d90:	f7ff ff1c 	bl	d4bcc <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4d94:	4b49      	ldr	r3, [pc, #292]	; (d4ebc <loop+0x27c>)
   d4d96:	781b      	ldrb	r3, [r3, #0]
   d4d98:	b923      	cbnz	r3, d4da4 <loop+0x164>
   d4d9a:	f000 fd87 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d4d9e:	4b3f      	ldr	r3, [pc, #252]	; (d4e9c <loop+0x25c>)
   d4da0:	6018      	str	r0, [r3, #0]
   d4da2:	e06d      	b.n	d4e80 <loop+0x240>
   d4da4:	f000 fd82 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4da8:	4b45      	ldr	r3, [pc, #276]	; (d4ec0 <loop+0x280>)
   d4daa:	681b      	ldr	r3, [r3, #0]
   d4dac:	1ac0      	subs	r0, r0, r3
   d4dae:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4db2:	4298      	cmp	r0, r3
   d4db4:	f240 8145 	bls.w	d5042 <loop+0x402>
   d4db8:	f000 fd78 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4dbc:	4b3b      	ldr	r3, [pc, #236]	; (d4eac <loop+0x26c>)
   d4dbe:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4dc0:	f000 ff84 	bl	d5ccc <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4dc4:	2800      	cmp	r0, #0
   d4dc6:	d0da      	beq.n	d4d7e <loop+0x13e>
   d4dc8:	4b39      	ldr	r3, [pc, #228]	; (d4eb0 <loop+0x270>)
   d4dca:	493e      	ldr	r1, [pc, #248]	; (d4ec4 <loop+0x284>)
   d4dcc:	781b      	ldrb	r3, [r3, #0]
   d4dce:	2200      	movs	r2, #0
   d4dd0:	f88d 2000 	strb.w	r2, [sp]
   d4dd4:	a806      	add	r0, sp, #24
   d4dd6:	4a3c      	ldr	r2, [pc, #240]	; (d4ec8 <loop+0x288>)
   d4dd8:	f7ff f984 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4ddc:	a807      	add	r0, sp, #28
   d4dde:	f7ff fb5d 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4de2:	e7cc      	b.n	d4d7e <loop+0x13e>
      state = ERROR_STATE;                                            // Response timed out
    }
    break;

  case NAPPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4de4:	4b28      	ldr	r3, [pc, #160]	; (d4e88 <loop+0x248>)
   d4de6:	791a      	ldrb	r2, [r3, #4]
   d4de8:	461d      	mov	r5, r3
   d4dea:	b12a      	cbz	r2, d4df8 <loop+0x1b8>
   d4dec:	4b27      	ldr	r3, [pc, #156]	; (d4e8c <loop+0x24c>)
   d4dee:	781b      	ldrb	r3, [r3, #0]
   d4df0:	2b07      	cmp	r3, #7
   d4df2:	d001      	beq.n	d4df8 <loop+0x1b8>
   d4df4:	f7ff feea 	bl	d4bcc <_Z22publishStateTransitionv>
   d4df8:	f000 ff68 	bl	d5ccc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4dfc:	b1b0      	cbz	r0, d4e2c <loop+0x1ec>
      if (sysStatus.verboseMode) {
   d4dfe:	792b      	ldrb	r3, [r5, #4]
   d4e00:	b173      	cbz	r3, d4e20 <loop+0x1e0>
        waitUntil(meterParticlePublish);
   d4e02:	f7ff fb13 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4e06:	4b2a      	ldr	r3, [pc, #168]	; (d4eb0 <loop+0x270>)
        Particle.publish("State","Taking a Nap",PRIVATE);
   d4e08:	492b      	ldr	r1, [pc, #172]	; (d4eb8 <loop+0x278>)
   d4e0a:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4e0c:	2200      	movs	r2, #0
   d4e0e:	f88d 2000 	strb.w	r2, [sp]
   d4e12:	a806      	add	r0, sp, #24
   d4e14:	4a2d      	ldr	r2, [pc, #180]	; (d4ecc <loop+0x28c>)
   d4e16:	f7ff f965 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4e1a:	a807      	add	r0, sp, #28
   d4e1c:	f7ff fb3e 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d4e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4e24:	f001 f81e 	bl	d5e64 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d4e28:	f7ff fa92 	bl	d4350 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d4e2c:	2100      	movs	r1, #0
   d4e2e:	2007      	movs	r0, #7
   d4e30:	f002 fc19 	bl	d7666 <digitalWrite>
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d4e34:	2100      	movs	r1, #0
   d4e36:	200e      	movs	r0, #14
   d4e38:	f002 fc15 	bl	d7666 <digitalWrite>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d4e3c:	f002 fa26 	bl	d728c <_ZN9TimeClass6minuteEv>
   d4e40:	4b23      	ldr	r3, [pc, #140]	; (d4ed0 <loop+0x290>)
   d4e42:	681a      	ldr	r2, [r3, #0]
   d4e44:	2304      	movs	r3, #4
   d4e46:	f8ad 3014 	strh.w	r3, [sp, #20]
   d4e4a:	ab08      	add	r3, sp, #32
   d4e4c:	2100      	movs	r1, #0
   d4e4e:	f803 1d0e 	strb.w	r1, [r3, #-14]!
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d4e52:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4e56:	9202      	str	r2, [sp, #8]
   d4e58:	223c      	movs	r2, #60	; 0x3c
   d4e5a:	2501      	movs	r5, #1
   d4e5c:	4350      	muls	r0, r2
   d4e5e:	9001      	str	r0, [sp, #4]
   d4e60:	462a      	mov	r2, r5
   d4e62:	a905      	add	r1, sp, #20
   d4e64:	a806      	add	r0, sp, #24
   d4e66:	9500      	str	r5, [sp, #0]
   d4e68:	f002 f94c 	bl	d7104 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch, CHANGE, secondsToHour);                    // Sleep till the next hour, then wakes and continues execution - Stop mode
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d4e6c:	4629      	mov	r1, r5
   d4e6e:	2007      	movs	r0, #7
   d4e70:	f002 fbf9 	bl	d7666 <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d4e74:	4629      	mov	r1, r5
   d4e76:	200e      	movs	r0, #14
   d4e78:	f002 fbf5 	bl	d7666 <digitalWrite>
    connectToParticle();                                                // Wakey Wakey and get connected.
   d4e7c:	f7ff fa24 	bl	d42c8 <_Z17connectToParticlev>
    state = IDLE_STATE;                                                 // Awake now, we need to go back to the IDLE state for next tasking
   d4e80:	2302      	movs	r3, #2
   d4e82:	e759      	b.n	d4d38 <loop+0xf8>
   d4e84:	2003e216 	.word	0x2003e216
   d4e88:	2003e30c 	.word	0x2003e30c
   d4e8c:	2003e214 	.word	0x2003e214
   d4e90:	2003e215 	.word	0x2003e215
   d4e94:	2003e227 	.word	0x2003e227
   d4e98:	2003e2b8 	.word	0x2003e2b8
   d4e9c:	2003e26c 	.word	0x2003e26c
   d4ea0:	00015f90 	.word	0x00015f90
   d4ea4:	2003e248 	.word	0x2003e248
   d4ea8:	2003e1e0 	.word	0x2003e1e0
   d4eac:	2003e2b4 	.word	0x2003e2b4
   d4eb0:	2003e1e8 	.word	0x2003e1e8
   d4eb4:	000d9307 	.word	0x000d9307
   d4eb8:	000d929d 	.word	0x000d929d
   d4ebc:	2003e0f2 	.word	0x2003e0f2
   d4ec0:	2003e1e4 	.word	0x2003e1e4
   d4ec4:	000d9277 	.word	0x000d9277
   d4ec8:	000d8f9a 	.word	0x000d8f9a
   d4ecc:	000d9290 	.word	0x000d9290
   d4ed0:	2003e24c 	.word	0x2003e24c
    } break;

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ed4:	4b5c      	ldr	r3, [pc, #368]	; (d5048 <loop+0x408>)
   d4ed6:	791a      	ldrb	r2, [r3, #4]
   d4ed8:	461d      	mov	r5, r3
   d4eda:	b12a      	cbz	r2, d4ee8 <loop+0x2a8>
   d4edc:	4b5b      	ldr	r3, [pc, #364]	; (d504c <loop+0x40c>)
   d4ede:	781b      	ldrb	r3, [r3, #0]
   d4ee0:	2b08      	cmp	r3, #8
   d4ee2:	d001      	beq.n	d4ee8 <loop+0x2a8>
   d4ee4:	f7ff fe72 	bl	d4bcc <_Z22publishStateTransitionv>
   d4ee8:	f000 fef0 	bl	d5ccc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4eec:	b1b0      	cbz	r0, d4f1c <loop+0x2dc>
      if (sysStatus.verboseMode) {
   d4eee:	792b      	ldrb	r3, [r5, #4]
   d4ef0:	b173      	cbz	r3, d4f10 <loop+0x2d0>
        waitUntil(meterParticlePublish);
   d4ef2:	f7ff fa9b 	bl	d442c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.36>
   d4ef6:	4b56      	ldr	r3, [pc, #344]	; (d5050 <loop+0x410>)
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d4ef8:	4956      	ldr	r1, [pc, #344]	; (d5054 <loop+0x414>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4efa:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4efc:	2200      	movs	r2, #0
   d4efe:	f88d 2000 	strb.w	r2, [sp]
   d4f02:	a806      	add	r0, sp, #24
   d4f04:	4a54      	ldr	r2, [pc, #336]	; (d5058 <loop+0x418>)
   d4f06:	f7ff f8ed 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4f0a:	a807      	add	r0, sp, #28
   d4f0c:	f7ff fac6 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d4f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f14:	f000 ffa6 	bl	d5e64 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d4f18:	f7ff fa1a 	bl	d4350 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d4f1c:	2100      	movs	r1, #0
   d4f1e:	2007      	movs	r0, #7
   d4f20:	f002 fba1 	bl	d7666 <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
   d4f24:	f002 f9b2 	bl	d728c <_ZN9TimeClass6minuteEv>
   d4f28:	4b4c      	ldr	r3, [pc, #304]	; (d505c <loop+0x41c>)
   d4f2a:	681a      	ldr	r2, [r3, #0]
   d4f2c:	2304      	movs	r3, #4
   d4f2e:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4f32:	ab08      	add	r3, sp, #32
   d4f34:	2502      	movs	r5, #2
   d4f36:	f803 5d0d 	strb.w	r5, [r3, #-13]!
   d4f3a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4f3e:	9202      	str	r2, [sp, #8]
   d4f40:	223c      	movs	r2, #60	; 0x3c
   d4f42:	4350      	muls	r0, r2
   d4f44:	2201      	movs	r2, #1
   d4f46:	9001      	str	r0, [sp, #4]
   d4f48:	9200      	str	r2, [sp, #0]
   d4f4a:	f10d 0116 	add.w	r1, sp, #22
   d4f4e:	a806      	add	r0, sp, #24
   d4f50:	f002 f8d8 	bl	d7104 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(userSwitch,FALLING,secondsToHour);                     // Very deep sleep till the next hour - then resets
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d4f54:	7025      	strb	r5, [r4, #0]
    } break;
   d4f56:	e074      	b.n	d5042 <loop+0x402>

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f58:	4c3b      	ldr	r4, [pc, #236]	; (d5048 <loop+0x408>)
   d4f5a:	7923      	ldrb	r3, [r4, #4]
   d4f5c:	b12b      	cbz	r3, d4f6a <loop+0x32a>
   d4f5e:	4b3b      	ldr	r3, [pc, #236]	; (d504c <loop+0x40c>)
   d4f60:	781b      	ldrb	r3, [r3, #0]
   d4f62:	2b01      	cmp	r3, #1
   d4f64:	d001      	beq.n	d4f6a <loop+0x32a>
   d4f66:	f7ff fe31 	bl	d4bcc <_Z22publishStateTransitionv>
   d4f6a:	f000 fc9f 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4f6e:	4b3c      	ldr	r3, [pc, #240]	; (d5060 <loop+0x420>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d4f76:	3330      	adds	r3, #48	; 0x30
   d4f78:	4298      	cmp	r0, r3
   d4f7a:	d962      	bls.n	d5042 <loop+0x402>
    {
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d4f7c:	69a3      	ldr	r3, [r4, #24]
   d4f7e:	2b03      	cmp	r3, #3
   d4f80:	dc14      	bgt.n	d4fac <loop+0x36c>
   d4f82:	f000 fea3 	bl	d5ccc <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4f86:	b160      	cbz	r0, d4fa2 <loop+0x362>
   d4f88:	4b31      	ldr	r3, [pc, #196]	; (d5050 <loop+0x410>)
   d4f8a:	4932      	ldr	r1, [pc, #200]	; (d5054 <loop+0x414>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4f8c:	781b      	ldrb	r3, [r3, #0]
   d4f8e:	2200      	movs	r2, #0
   d4f90:	f88d 2000 	strb.w	r2, [sp]
   d4f94:	a806      	add	r0, sp, #24
   d4f96:	4a33      	ldr	r2, [pc, #204]	; (d5064 <loop+0x424>)
   d4f98:	f7ff f8a4 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4f9c:	a807      	add	r0, sp, #28
   d4f9e:	f7ff fa7d 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4fa2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4fa6:	f000 ff5d 	bl	d5e64 <delay>
   d4faa:	e024      	b.n	d4ff6 <loop+0x3b6>
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d4fac:	f002 f95c 	bl	d7268 <_ZN9TimeClass3nowEv>
   d4fb0:	4b25      	ldr	r3, [pc, #148]	; (d5048 <loop+0x408>)
   d4fb2:	69db      	ldr	r3, [r3, #28]
   d4fb4:	1ac0      	subs	r0, r0, r3
   d4fb6:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d4fba:	d91f      	bls.n	d4ffc <loop+0x3bc>
   d4fbc:	f000 fe86 	bl	d5ccc <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d4fc0:	b160      	cbz	r0, d4fdc <loop+0x39c>
   d4fc2:	4b23      	ldr	r3, [pc, #140]	; (d5050 <loop+0x410>)
   d4fc4:	4923      	ldr	r1, [pc, #140]	; (d5054 <loop+0x414>)
   d4fc6:	781b      	ldrb	r3, [r3, #0]
   d4fc8:	2200      	movs	r2, #0
   d4fca:	f88d 2000 	strb.w	r2, [sp]
   d4fce:	a806      	add	r0, sp, #24
   d4fd0:	4a25      	ldr	r2, [pc, #148]	; (d5068 <loop+0x428>)
   d4fd2:	f7ff f887 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d4fd6:	a807      	add	r0, sp, #28
   d4fd8:	f7ff fa60 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4fe0:	f000 ff40 	bl	d5e64 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d4fe4:	2300      	movs	r3, #0
   d4fe6:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d4fe8:	f002 fb80 	bl	d76ec <_Z21__fetch_global_EEPROMv>
   d4fec:	2220      	movs	r2, #32
   d4fee:	4916      	ldr	r1, [pc, #88]	; (d5048 <loop+0x408>)
   d4ff0:	2001      	movs	r0, #1
   d4ff2:	f000 fc83 	bl	d58fc <HAL_EEPROM_Put>
        System.reset();
   d4ff6:	f002 f844 	bl	d7082 <_ZN11SystemClass5resetEv>
   d4ffa:	e022      	b.n	d5042 <loop+0x402>
   d4ffc:	f000 fe66 	bl	d5ccc <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5000:	b160      	cbz	r0, d501c <loop+0x3dc>
   d5002:	4b13      	ldr	r3, [pc, #76]	; (d5050 <loop+0x410>)
   d5004:	4913      	ldr	r1, [pc, #76]	; (d5054 <loop+0x414>)
   d5006:	781b      	ldrb	r3, [r3, #0]
   d5008:	2200      	movs	r2, #0
   d500a:	f88d 2000 	strb.w	r2, [sp]
   d500e:	a806      	add	r0, sp, #24
   d5010:	4a16      	ldr	r2, [pc, #88]	; (d506c <loop+0x42c>)
   d5012:	f7ff f867 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d5016:	a807      	add	r0, sp, #28
   d5018:	f7ff fa40 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d501c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5020:	f000 ff20 	bl	d5e64 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d5024:	2300      	movs	r3, #0
   d5026:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5028:	f002 fb60 	bl	d76ec <_Z21__fetch_global_EEPROMv>
   d502c:	2220      	movs	r2, #32
   d502e:	4906      	ldr	r1, [pc, #24]	; (d5048 <loop+0x408>)
   d5030:	2001      	movs	r0, #1
   d5032:	f000 fc63 	bl	d58fc <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d5036:	f7ff fa05 	bl	d4444 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d503a:	e002      	b.n	d5042 <loop+0x402>
    } 
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;
   d503c:	2307      	movs	r3, #7
   d503e:	7023      	strb	r3, [r4, #0]
   d5040:	e63c      	b.n	d4cbc <loop+0x7c>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d5042:	b008      	add	sp, #32
   d5044:	bd70      	pop	{r4, r5, r6, pc}
   d5046:	bf00      	nop
   d5048:	2003e30c 	.word	0x2003e30c
   d504c:	2003e214 	.word	0x2003e214
   d5050:	2003e1e8 	.word	0x2003e1e8
   d5054:	000d929d 	.word	0x000d929d
   d5058:	000d92a3 	.word	0x000d92a3
   d505c:	2003e24c 	.word	0x2003e24c
   d5060:	2003e2b4 	.word	0x2003e2b4
   d5064:	000d92ba 	.word	0x000d92ba
   d5068:	000d92ce 	.word	0x000d92ce
   d506c:	000d92e8 	.word	0x000d92e8

000d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5070:	2300      	movs	r3, #0
   d5072:	2204      	movs	r2, #4
   d5074:	f000 be02 	b.w	d5c7c <spark_variable>

000d5078 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>:
   d5078:	2300      	movs	r3, #0
   d507a:	2202      	movs	r2, #2
   d507c:	f000 bdfe 	b.w	d5c7c <spark_variable>

000d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5080:	4602      	mov	r2, r0
   d5082:	4801      	ldr	r0, [pc, #4]	; (d5088 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5084:	f001 b8c5 	b.w	d6212 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5088:	000d61e7 	.word	0x000d61e7

000d508c <setup>:

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d508c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5090:	4bb6      	ldr	r3, [pc, #728]	; (d536c <setup+0x2e0>)

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d5092:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5094:	aa08      	add	r2, sp, #32
   d5096:	f103 0510 	add.w	r5, r3, #16
   d509a:	4616      	mov	r6, r2
   d509c:	6818      	ldr	r0, [r3, #0]
   d509e:	6859      	ldr	r1, [r3, #4]
   d50a0:	4614      	mov	r4, r2
   d50a2:	c403      	stmia	r4!, {r0, r1}
   d50a4:	3308      	adds	r3, #8
   d50a6:	42ab      	cmp	r3, r5
   d50a8:	4622      	mov	r2, r4
   d50aa:	d1f7      	bne.n	d509c <setup+0x10>
   d50ac:	8819      	ldrh	r1, [r3, #0]
   d50ae:	789b      	ldrb	r3, [r3, #2]
   d50b0:	8021      	strh	r1, [r4, #0]
   d50b2:	70a3      	strb	r3, [r4, #2]
   d50b4:	222d      	movs	r2, #45	; 0x2d
   d50b6:	2100      	movs	r1, #0
   d50b8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d50bc:	f003 fa65 	bl	d858a <memset>
  state = IDLE_STATE;
   d50c0:	4aab      	ldr	r2, [pc, #684]	; (d5370 <setup+0x2e4>)
   d50c2:	2302      	movs	r3, #2
   d50c4:	7013      	strb	r3, [r2, #0]

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d50c6:	4bab      	ldr	r3, [pc, #684]	; (d5374 <setup+0x2e8>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   d50ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d50d2:	f003 031f 	and.w	r3, r3, #31
   d50d6:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d50da:	2d2f      	cmp	r5, #47	; 0x2f
   d50dc:	4690      	mov	r8, r2
   d50de:	dd05      	ble.n	d50ec <setup+0x60>
   d50e0:	4aa5      	ldr	r2, [pc, #660]	; (d5378 <setup+0x2ec>)
   d50e2:	2100      	movs	r1, #0
   d50e4:	200a      	movs	r0, #10
   d50e6:	f000 fd59 	bl	d5b9c <panic_>
   d50ea:	e001      	b.n	d50f0 <setup+0x64>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d50ec:	2d1f      	cmp	r5, #31
   d50ee:	dd03      	ble.n	d50f8 <setup+0x6c>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d50f0:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
   d50f4:	4ba1      	ldr	r3, [pc, #644]	; (d537c <setup+0x2f0>)
   d50f6:	e001      	b.n	d50fc <setup+0x70>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d50f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d50fc:	2401      	movs	r4, #1
   d50fe:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d5102:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508

  pinSetFast(solEnablePin);                                       // Make sure the Solenoid is off
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d5106:	4621      	mov	r1, r4
   d5108:	2007      	movs	r0, #7
   d510a:	f002 fa9b 	bl	d7644 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d510e:	2100      	movs	r1, #0
   d5110:	2004      	movs	r0, #4
   d5112:	f002 fa97 	bl	d7644 <pinMode>
  pinMode(soilPin1, INPUT);
   d5116:	2100      	movs	r1, #0
   d5118:	2013      	movs	r0, #19
   d511a:	f002 fa93 	bl	d7644 <pinMode>
  pinMode(soilPin2, INPUT);
   d511e:	2100      	movs	r1, #0
   d5120:	2012      	movs	r0, #18
   d5122:	f002 fa8f 	bl	d7644 <pinMode>
  pinMode(pressurePin, INPUT);
   d5126:	2100      	movs	r1, #0
   d5128:	2011      	movs	r0, #17
   d512a:	f002 fa8b 	bl	d7644 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d512e:	4621      	mov	r1, r4
   d5130:	200e      	movs	r0, #14
   d5132:	f002 fa87 	bl	d7644 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d5136:	4621      	mov	r1, r4
   d5138:	200e      	movs	r0, #14
   d513a:	f002 fa94 	bl	d7666 <digitalWrite>
  pinMode(solEnablePin,OUTPUT);                                     
   d513e:	4621      	mov	r1, r4
   d5140:	2003      	movs	r0, #3
   d5142:	f002 fa7f 	bl	d7644 <pinMode>
  pinMode(solDirection,OUTPUT);                                      
   d5146:	4621      	mov	r1, r4
   d5148:	2002      	movs	r0, #2
   d514a:	f002 fa7b 	bl	d7644 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d514e:	4621      	mov	r1, r4
   d5150:	2003      	movs	r0, #3
   d5152:	f002 fa88 	bl	d7666 <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d5156:	2100      	movs	r1, #0
   d5158:	2002      	movs	r0, #2
   d515a:	f002 fa84 	bl	d7666 <digitalWrite>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d515e:	a804      	add	r0, sp, #16
   d5160:	f000 fdbc 	bl	d5cdc <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5164:	2700      	movs	r7, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5166:	2300      	movs	r3, #0
   d5168:	227d      	movs	r2, #125	; 0x7d
   d516a:	a918      	add	r1, sp, #96	; 0x60
   d516c:	a804      	add	r0, sp, #16
   d516e:	f001 ff2c 	bl	d6fca <_ZNK6String8getBytesEPhjj>
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("ResetCount", sysStatus.resetCount);
   d5172:	4d83      	ldr	r5, [pc, #524]	; (d5380 <setup+0x2f4>)
   d5174:	4983      	ldr	r1, [pc, #524]	; (d5384 <setup+0x2f8>)
   d5176:	9701      	str	r7, [sp, #4]
   d5178:	463b      	mov	r3, r7
   d517a:	463a      	mov	r2, r7
   d517c:	9700      	str	r7, [sp, #0]
   d517e:	a818      	add	r0, sp, #96	; 0x60
   d5180:	f000 fdbc 	bl	d5cfc <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d5184:	4980      	ldr	r1, [pc, #512]	; (d5388 <setup+0x2fc>)
   d5186:	4881      	ldr	r0, [pc, #516]	; (d538c <setup+0x300>)
   d5188:	f7ff ff72 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d518c:	f105 0118 	add.w	r1, r5, #24
   d5190:	487f      	ldr	r0, [pc, #508]	; (d5390 <setup+0x304>)
   d5192:	f7ff ff71 	bl	d5078 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",releaseNumber);
   d5196:	497f      	ldr	r1, [pc, #508]	; (d5394 <setup+0x308>)
   d5198:	487f      	ldr	r0, [pc, #508]	; (d5398 <setup+0x30c>)
   d519a:	f7ff ff69 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("StateOfChg", batteryString);
   d519e:	497f      	ldr	r1, [pc, #508]	; (d539c <setup+0x310>)
   d51a0:	487f      	ldr	r0, [pc, #508]	; (d53a0 <setup+0x314>)
   d51a2:	f7ff ff65 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("PowerContext",powerContext);
   d51a6:	497f      	ldr	r1, [pc, #508]	; (d53a4 <setup+0x318>)
   d51a8:	487f      	ldr	r0, [pc, #508]	; (d53a8 <setup+0x31c>)
   d51aa:	f7ff ff61 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("LowPowerMode",(bool)sysStatus.lowPowerMode);
   d51ae:	79ab      	ldrb	r3, [r5, #6]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d51b0:	487e      	ldr	r0, [pc, #504]	; (d53ac <setup+0x320>)
   d51b2:	1bdb      	subs	r3, r3, r7
   d51b4:	f10d 09e0 	add.w	r9, sp, #224	; 0xe0
   d51b8:	bf18      	it	ne
   d51ba:	2301      	movne	r3, #1
   d51bc:	f809 3dd8 	strb.w	r3, [r9, #-216]!
   d51c0:	4622      	mov	r2, r4
   d51c2:	463b      	mov	r3, r7
   d51c4:	4649      	mov	r1, r9
   d51c6:	f000 fd59 	bl	d5c7c <spark_variable>
  Particle.variable("Temperature", temperatureString);
   d51ca:	4979      	ldr	r1, [pc, #484]	; (d53b0 <setup+0x324>)
   d51cc:	4879      	ldr	r0, [pc, #484]	; (d53b4 <setup+0x328>)
   d51ce:	f7ff ff4f 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Humidity", humidityString);
   d51d2:	4979      	ldr	r1, [pc, #484]	; (d53b8 <setup+0x32c>)
   d51d4:	4879      	ldr	r0, [pc, #484]	; (d53bc <setup+0x330>)
   d51d6:	f7ff ff4b 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Luminosity",lightLevelString);
   d51da:	4979      	ldr	r1, [pc, #484]	; (d53c0 <setup+0x334>)
   d51dc:	4879      	ldr	r0, [pc, #484]	; (d53c4 <setup+0x338>)
   d51de:	f7ff ff47 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture1", current.soilMoisture1);
   d51e2:	4979      	ldr	r1, [pc, #484]	; (d53c8 <setup+0x33c>)
   d51e4:	4879      	ldr	r0, [pc, #484]	; (d53cc <setup+0x340>)
   d51e6:	f7ff ff47 	bl	d5078 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture2", current.soilMoisture2);
   d51ea:	4979      	ldr	r1, [pc, #484]	; (d53d0 <setup+0x344>)
   d51ec:	4879      	ldr	r0, [pc, #484]	; (d53d4 <setup+0x348>)
   d51ee:	f7ff ff43 	bl	d5078 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Pressure", current.pressure);
   d51f2:	4979      	ldr	r1, [pc, #484]	; (d53d8 <setup+0x34c>)
   d51f4:	4879      	ldr	r0, [pc, #484]	; (d53dc <setup+0x350>)
   d51f6:	f7ff ff3f 	bl	d5078 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("HoldTime", holdTimeStr);
   d51fa:	4979      	ldr	r1, [pc, #484]	; (d53e0 <setup+0x354>)
   d51fc:	4879      	ldr	r0, [pc, #484]	; (d53e4 <setup+0x358>)
   d51fe:	f7ff ff37 	bl	d5070 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("Measure-Now",measureNow);
   d5202:	4979      	ldr	r1, [pc, #484]	; (d53e8 <setup+0x35c>)
   d5204:	4879      	ldr	r0, [pc, #484]	; (d53ec <setup+0x360>)
   d5206:	f7ff ff3b 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d520a:	4979      	ldr	r1, [pc, #484]	; (d53f0 <setup+0x364>)
   d520c:	4867      	ldr	r0, [pc, #412]	; (d53ac <setup+0x320>)
   d520e:	f7ff ff37 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d5212:	4978      	ldr	r1, [pc, #480]	; (d53f4 <setup+0x368>)
   d5214:	4878      	ldr	r0, [pc, #480]	; (d53f8 <setup+0x36c>)
   d5216:	f7ff ff33 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d521a:	4978      	ldr	r1, [pc, #480]	; (d53fc <setup+0x370>)
   d521c:	4878      	ldr	r0, [pc, #480]	; (d5400 <setup+0x374>)
   d521e:	f7ff ff2f 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Watering",contolValve);
   d5222:	4978      	ldr	r1, [pc, #480]	; (d5404 <setup+0x378>)
   d5224:	4878      	ldr	r0, [pc, #480]	; (d5408 <setup+0x37c>)
   d5226:	f7ff ff2b 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetHoldTime",setHoldTimeMillis);
   d522a:	4978      	ldr	r1, [pc, #480]	; (d540c <setup+0x380>)
   d522c:	4878      	ldr	r0, [pc, #480]	; (d5410 <setup+0x384>)
   d522e:	f7ff ff27 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSoilSensors",setSoilSensors);
   d5232:	4978      	ldr	r1, [pc, #480]	; (d5414 <setup+0x388>)
   d5234:	4878      	ldr	r0, [pc, #480]	; (d5418 <setup+0x38c>)
   d5236:	f7ff ff23 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPressureSensor", setPressureSensor);
   d523a:	4978      	ldr	r1, [pc, #480]	; (d541c <setup+0x390>)
   d523c:	4878      	ldr	r0, [pc, #480]	; (d5420 <setup+0x394>)
   d523e:	f7ff ff1f 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetLightSensor",setLightSensor);
   d5242:	4978      	ldr	r1, [pc, #480]	; (d5424 <setup+0x398>)
   d5244:	4878      	ldr	r0, [pc, #480]	; (d5428 <setup+0x39c>)
   d5246:	f7ff ff1b 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SolenoidPresent",setSolenoidPresent);
   d524a:	4978      	ldr	r1, [pc, #480]	; (d542c <setup+0x3a0>)
   d524c:	4878      	ldr	r0, [pc, #480]	; (d5430 <setup+0x3a4>)
   d524e:	f7ff ff17 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTempHumidSensor",setTempHumidSensor);
   d5252:	4978      	ldr	r1, [pc, #480]	; (d5434 <setup+0x3a8>)
   d5254:	4878      	ldr	r0, [pc, #480]	; (d5438 <setup+0x3ac>)
   d5256:	f7ff ff13 	bl	d5080 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d525a:	f002 fa47 	bl	d76ec <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d525e:	4638      	mov	r0, r7
   d5260:	f000 fb3c 	bl	d58dc <HAL_EEPROM_Read>
   d5264:	2802      	cmp	r0, #2
   d5266:	d10d      	bne.n	d5284 <setup+0x1f8>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d5268:	f002 fa40 	bl	d76ec <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d526c:	2220      	movs	r2, #32
   d526e:	4944      	ldr	r1, [pc, #272]	; (d5380 <setup+0x2f4>)
   d5270:	2001      	movs	r0, #1
   d5272:	f000 fb3b 	bl	d58ec <HAL_EEPROM_Get>

  if (sysStatus.TempHumidConfig) {                                         // If there is a sensor present - initialize it   
   d5276:	7b2b      	ldrb	r3, [r5, #12]
   d5278:	b1bb      	cbz	r3, d52aa <setup+0x21e>
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
   d527a:	2144      	movs	r1, #68	; 0x44
   d527c:	486f      	ldr	r0, [pc, #444]	; (d543c <setup+0x3b0>)
   d527e:	f000 fa01 	bl	d5684 <_ZN14Adafruit_SHT315beginEh>
   d5282:	e012      	b.n	d52aa <setup+0x21e>
  Particle.function("SetLightSensor",setLightSensor);
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d5284:	f002 fa32 	bl	d76ec <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5288:	2204      	movs	r2, #4
   d528a:	496d      	ldr	r1, [pc, #436]	; (d5440 <setup+0x3b4>)
   d528c:	4638      	mov	r0, r7
   d528e:	f000 fb35 	bl	d58fc <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d5292:	f002 fa2b 	bl	d76ec <_Z21__fetch_global_EEPROMv>
   d5296:	4620      	mov	r0, r4
   d5298:	2204      	movs	r2, #4
   d529a:	4649      	mov	r1, r9
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d529c:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d529e:	9702      	str	r7, [sp, #8]
   d52a0:	f000 fb2c 	bl	d58fc <HAL_EEPROM_Put>
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d52a4:	2cf0      	cmp	r4, #240	; 0xf0
   d52a6:	d1f4      	bne.n	d5292 <setup+0x206>
   d52a8:	e7de      	b.n	d5268 <setup+0x1dc>

  if (sysStatus.TempHumidConfig) {                                         // If there is a sensor present - initialize it   
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr 
  }

  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d52aa:	7c2b      	ldrb	r3, [r5, #16]
   d52ac:	b133      	cbz	r3, d52bc <setup+0x230>
    lightSensor.begin();
   d52ae:	4865      	ldr	r0, [pc, #404]	; (d5444 <setup+0x3b8>)
   d52b0:	f000 f957 	bl	d5562 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d52b4:	2120      	movs	r1, #32
   d52b6:	4863      	ldr	r0, [pc, #396]	; (d5444 <setup+0x3b8>)
   d52b8:	f000 f98f 	bl	d55da <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d52bc:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d52be:	4611      	mov	r1, r2
   d52c0:	4648      	mov	r0, r9
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d52c2:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d52c4:	f000 fada 	bl	d587c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d52c8:	9b02      	ldr	r3, [sp, #8]
  }

  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d52ca:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d52cc:	bf02      	ittt	eq
   d52ce:	69ab      	ldreq	r3, [r5, #24]
   d52d0:	3301      	addeq	r3, #1
   d52d2:	61ab      	streq	r3, [r5, #24]
  }
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d52d4:	69ab      	ldr	r3, [r5, #24]
   d52d6:	2b05      	cmp	r3, #5
   d52d8:	dd04      	ble.n	d52e4 <setup+0x258>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d52da:	4b29      	ldr	r3, [pc, #164]	; (d5380 <setup+0x2f4>)
   d52dc:	2204      	movs	r2, #4
   d52de:	619a      	str	r2, [r3, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d52e0:	f7ff f8b0 	bl	d4444 <_Z14fullModemResetv>
  }
    
  if (sysStatus.solenoidHoldTime <= 0 || sysStatus.solenoidHoldTime > 100) { // Check for reasonable value
   d52e4:	696b      	ldr	r3, [r5, #20]
    sysStatus.solenoidHoldTime = 15;                                      // Set a reasonable value
  }
  snprintf(holdTimeStr,sizeof(holdTimeStr),"%i mSec",sysStatus.solenoidHoldTime); // Load the string for the Particle variable
   d52e6:	483e      	ldr	r0, [pc, #248]	; (d53e0 <setup+0x354>)
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
    fullModemReset();                                                   // This will reset the modem and the device will reboot
  }
    
  if (sysStatus.solenoidHoldTime <= 0 || sysStatus.solenoidHoldTime > 100) { // Check for reasonable value
   d52e8:	3b01      	subs	r3, #1
   d52ea:	2b63      	cmp	r3, #99	; 0x63
    sysStatus.solenoidHoldTime = 15;                                      // Set a reasonable value
   d52ec:	bf82      	ittt	hi
   d52ee:	4b24      	ldrhi	r3, [pc, #144]	; (d5380 <setup+0x2f4>)
   d52f0:	220f      	movhi	r2, #15
   d52f2:	615a      	strhi	r2, [r3, #20]
  }
  snprintf(holdTimeStr,sizeof(holdTimeStr),"%i mSec",sysStatus.solenoidHoldTime); // Load the string for the Particle variable
   d52f4:	696b      	ldr	r3, [r5, #20]
   d52f6:	4a54      	ldr	r2, [pc, #336]	; (d5448 <setup+0x3bc>)
   d52f8:	2110      	movs	r1, #16
   d52fa:	f000 fd8f 	bl	d5e1c <snprintf>
  
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d52fe:	f7ff f853 	bl	d43a8 <_Z9PMICresetv>

  if (!digitalRead(userSwitch)) { 
   d5302:	2004      	movs	r0, #4
   d5304:	f002 f9c8 	bl	d7698 <digitalRead>
   d5308:	b908      	cbnz	r0, d530e <setup+0x282>
    sysStatus.lowPowerMode = false;         // Rescue mode to locally take lowPowerMode so you can connect to device
   d530a:	4b1d      	ldr	r3, [pc, #116]	; (d5380 <setup+0x2f4>)
   d530c:	7198      	strb	r0, [r3, #6]
  }

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d530e:	f7fe ff27 	bl	d4160 <_Z16takeMeasurementsv>

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d5312:	4b4e      	ldr	r3, [pc, #312]	; (d544c <setup+0x3c0>)
   d5314:	68aa      	ldr	r2, [r5, #8]
   d5316:	681b      	ldr	r3, [r3, #0]
   d5318:	429a      	cmp	r2, r3
   d531a:	dc03      	bgt.n	d5324 <setup+0x298>
   d531c:	2308      	movs	r3, #8
   d531e:	f888 3000 	strb.w	r3, [r8]
   d5322:	e00d      	b.n	d5340 <setup+0x2b4>
  else if(!connectToParticle()) {
   d5324:	f7fe ffd0 	bl	d42c8 <_Z17connectToParticlev>
   d5328:	b950      	cbnz	r0, d5340 <setup+0x2b4>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d532a:	2301      	movs	r3, #1
   d532c:	f888 3000 	strb.w	r3, [r8]
   d5330:	f000 fabc 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5334:	4b46      	ldr	r3, [pc, #280]	; (d5450 <setup+0x3c4>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5336:	4947      	ldr	r1, [pc, #284]	; (d5454 <setup+0x3c8>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d5338:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d533a:	4630      	mov	r0, r6
   d533c:	f003 f960 	bl	d8600 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5340:	f000 fcc4 	bl	d5ccc <spark_cloud_flag_connected>
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5344:	b118      	cbz	r0, d534e <setup+0x2c2>
   d5346:	792b      	ldrb	r3, [r5, #4]
   d5348:	2b00      	cmp	r3, #0
   d534a:	f040 8087 	bne.w	d545c <setup+0x3d0>
  Serial.println(StartupMessage);
   d534e:	f002 f891 	bl	d7474 <_Z16_fetch_usbserialv>
   d5352:	4631      	mov	r1, r6
   d5354:	f001 fd5b 	bl	d6e0e <_ZN5Print7printlnEPKc>

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d5358:	4b3f      	ldr	r3, [pc, #252]	; (d5458 <setup+0x3cc>)
   d535a:	2201      	movs	r2, #1
  pinMode(solDirection,OUTPUT);                                      
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d535c:	a804      	add	r0, sp, #16
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d535e:	701a      	strb	r2, [r3, #0]
  pinMode(solDirection,OUTPUT);                                      
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d5360:	f001 fdad 	bl	d6ebe <_ZN6StringD1Ev>

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
}
   d5364:	b039      	add	sp, #228	; 0xe4
   d5366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d536a:	bf00      	nop
   d536c:	000d8f10 	.word	0x000d8f10
   d5370:	2003e216 	.word	0x2003e216
   d5374:	2003e25c 	.word	0x2003e25c
   d5378:	000d589d 	.word	0x000d589d
   d537c:	50000300 	.word	0x50000300
   d5380:	2003e30c 	.word	0x2003e30c
   d5384:	000d4585 	.word	0x000d4585
   d5388:	2003e270 	.word	0x2003e270
   d538c:	000d9321 	.word	0x000d9321
   d5390:	000d9328 	.word	0x000d9328
   d5394:	000d9471 	.word	0x000d9471
   d5398:	000d9333 	.word	0x000d9333
   d539c:	2003e2ec 	.word	0x2003e2ec
   d53a0:	000d933b 	.word	0x000d933b
   d53a4:	2003e1f4 	.word	0x2003e1f4
   d53a8:	000d9346 	.word	0x000d9346
   d53ac:	000d9353 	.word	0x000d9353
   d53b0:	2003e1d0 	.word	0x2003e1d0
   d53b4:	000d9360 	.word	0x000d9360
   d53b8:	2003e2dc 	.word	0x2003e2dc
   d53bc:	000d936c 	.word	0x000d936c
   d53c0:	2003e2fc 	.word	0x2003e2fc
   d53c4:	000d9375 	.word	0x000d9375
   d53c8:	2003e2b8 	.word	0x2003e2b8
   d53cc:	000d9380 	.word	0x000d9380
   d53d0:	2003e2bc 	.word	0x2003e2bc
   d53d4:	000d938e 	.word	0x000d938e
   d53d8:	2003e2c0 	.word	0x2003e2c0
   d53dc:	000d939c 	.word	0x000d939c
   d53e0:	2003e217 	.word	0x2003e217
   d53e4:	000d93cc 	.word	0x000d93cc
   d53e8:	000d40b9 	.word	0x000d40b9
   d53ec:	000d93a5 	.word	0x000d93a5
   d53f0:	000d4a69 	.word	0x000d4a69
   d53f4:	000d4621 	.word	0x000d4621
   d53f8:	000d93b1 	.word	0x000d93b1
   d53fc:	000d49ed 	.word	0x000d49ed
   d5400:	000d93bc 	.word	0x000d93bc
   d5404:	000d4b29 	.word	0x000d4b29
   d5408:	000d923b 	.word	0x000d923b
   d540c:	000d4971 	.word	0x000d4971
   d5410:	000d93c9 	.word	0x000d93c9
   d5414:	000d46a5 	.word	0x000d46a5
   d5418:	000d93d5 	.word	0x000d93d5
   d541c:	000d4749 	.word	0x000d4749
   d5420:	000d93e4 	.word	0x000d93e4
   d5424:	000d47c5 	.word	0x000d47c5
   d5428:	000d93f6 	.word	0x000d93f6
   d542c:	000d48d9 	.word	0x000d48d9
   d5430:	000d9405 	.word	0x000d9405
   d5434:	000d4851 	.word	0x000d4851
   d5438:	000d9415 	.word	0x000d9415
   d543c:	2003e260 	.word	0x2003e260
   d5440:	000d8f50 	.word	0x000d8f50
   d5444:	2003e1ec 	.word	0x2003e1ec
   d5448:	000d91da 	.word	0x000d91da
   d544c:	2003e1e0 	.word	0x2003e1e0
   d5450:	2003e2b4 	.word	0x2003e2b4
   d5454:	000d9428 	.word	0x000d9428
   d5458:	2003e215 	.word	0x2003e215
   d545c:	4b06      	ldr	r3, [pc, #24]	; (d5478 <setup+0x3ec>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d545e:	4907      	ldr	r1, [pc, #28]	; (d547c <setup+0x3f0>)
   d5460:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5462:	2200      	movs	r2, #0
   d5464:	f88d 2000 	strb.w	r2, [sp]
   d5468:	4648      	mov	r0, r9
   d546a:	4632      	mov	r2, r6
   d546c:	f7fe fe3a 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.57.constprop.78>
   d5470:	a803      	add	r0, sp, #12
   d5472:	f7ff f813 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5476:	e76a      	b.n	d534e <setup+0x2c2>
   d5478:	2003e1e8 	.word	0x2003e1e8
   d547c:	000d943a 	.word	0x000d943a

000d5480 <_GLOBAL__sub_I___appProductID>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5482:	4b28      	ldr	r3, [pc, #160]	; (d5524 <_GLOBAL__sub_I___appProductID+0xa4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5484:	4d28      	ldr	r5, [pc, #160]	; (d5528 <_GLOBAL__sub_I___appProductID+0xa8>)
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5486:	4f29      	ldr	r7, [pc, #164]	; (d552c <_GLOBAL__sub_I___appProductID+0xac>)
   d5488:	2400      	movs	r4, #0
   d548a:	601c      	str	r4, [r3, #0]
   d548c:	4b28      	ldr	r3, [pc, #160]	; (d5530 <_GLOBAL__sub_I___appProductID+0xb0>)
   d548e:	2601      	movs	r6, #1
   d5490:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5492:	f000 fa4b 	bl	d592c <HAL_Pin_Map>
   d5496:	4b27      	ldr	r3, [pc, #156]	; (d5534 <_GLOBAL__sub_I___appProductID+0xb4>)
   d5498:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d549a:	f002 f899 	bl	d75d0 <spark_protocol_instance>
   d549e:	4623      	mov	r3, r4
   d54a0:	4622      	mov	r2, r4
   d54a2:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d54a6:	f002 f89b 	bl	d75e0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d54aa:	f002 f891 	bl	d75d0 <spark_protocol_instance>
   d54ae:	4622      	mov	r2, r4
   d54b0:	4623      	mov	r3, r4
   d54b2:	2113      	movs	r1, #19
   d54b4:	f002 f89c 	bl	d75f0 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d54b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d54bc:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d54be:	602c      	str	r4, [r5, #0]
   d54c0:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d54c2:	71ac      	strb	r4, [r5, #6]
   d54c4:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d54c6:	2002      	movs	r0, #2
   d54c8:	f000 fb78 	bl	d5bbc <set_system_mode>
   d54cc:	463a      	mov	r2, r7
   d54ce:	491a      	ldr	r1, [pc, #104]	; (d5538 <_GLOBAL__sub_I___appProductID+0xb8>)
   d54d0:	4628      	mov	r0, r5
   d54d2:	f002 f9bf 	bl	d7854 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d54d6:	4d19      	ldr	r5, [pc, #100]	; (d553c <_GLOBAL__sub_I___appProductID+0xbc>)
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d54d8:	4621      	mov	r1, r4
   d54da:	4630      	mov	r0, r6
   d54dc:	f000 fb86 	bl	d5bec <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d54e0:	4631      	mov	r1, r6
   d54e2:	2004      	movs	r0, #4
   d54e4:	f000 f9ba 	bl	d585c <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d54e8:	4621      	mov	r1, r4
   d54ea:	4628      	mov	r0, r5
   d54ec:	f001 f97e 	bl	d67ec <_ZN9FuelGaugeC1Eb>
   d54f0:	4628      	mov	r0, r5

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d54f2:	4d13      	ldr	r5, [pc, #76]	; (d5540 <_GLOBAL__sub_I___appProductID+0xc0>)
   d54f4:	4913      	ldr	r1, [pc, #76]	; (d5544 <_GLOBAL__sub_I___appProductID+0xc4>)
   d54f6:	463a      	mov	r2, r7
   d54f8:	2620      	movs	r6, #32
   d54fa:	f002 f9ab 	bl	d7854 <__aeabi_atexit>
   d54fe:	4632      	mov	r2, r6
   d5500:	4621      	mov	r1, r4
   d5502:	4628      	mov	r0, r5
   d5504:	f003 f841 	bl	d858a <memset>
SystemPowerConfiguration conf;                      // Initalize the PMIC class so you can call the Power Management functions below.
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();            // Temp and Humidity Sensor - Grove connected on i2c
   d5508:	480f      	ldr	r0, [pc, #60]	; (d5548 <_GLOBAL__sub_I___appProductID+0xc8>)
        conf_.size = sizeof(conf_);
   d550a:	716e      	strb	r6, [r5, #5]
   d550c:	f000 f897 	bl	d563e <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                          // Light sensor measures light level in Lux    
   d5510:	f002 f934 	bl	d777c <_Z19__fetch_global_Wirev>
   d5514:	2123      	movs	r1, #35	; 0x23
   d5516:	4602      	mov	r2, r0
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
SystemPowerConfiguration conf;                      // Initalize the PMIC class so you can call the Power Management functions below.
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();            // Temp and Humidity Sensor - Grove connected on i2c
BH1750 lightSensor(0x23, Wire);                          // Light sensor measures light level in Lux    
   d551c:	480b      	ldr	r0, [pc, #44]	; (d554c <_GLOBAL__sub_I___appProductID+0xcc>)
   d551e:	f000 b81b 	b.w	d5558 <_ZN6BH1750C1EhR7TwoWire>
   d5522:	bf00      	nop
   d5524:	2003e24c 	.word	0x2003e24c
   d5528:	2003e250 	.word	0x2003e250
   d552c:	2003e1cc 	.word	0x2003e1cc
   d5530:	2003e1e8 	.word	0x2003e1e8
   d5534:	2003e25c 	.word	0x2003e25c
   d5538:	000d40d5 	.word	0x000d40d5
   d553c:	2003e20c 	.word	0x2003e20c
   d5540:	2003e228 	.word	0x2003e228
   d5544:	000d680b 	.word	0x000d680b
   d5548:	2003e260 	.word	0x2003e260
   d554c:	2003e1ec 	.word	0x2003e1ec

000d5550 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5550:	6803      	ldr	r3, [r0, #0]
   d5552:	b2c9      	uxtb	r1, r1
   d5554:	689b      	ldr	r3, [r3, #8]
   d5556:	4718      	bx	r3

000d5558 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5558:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d555a:	2211      	movs	r2, #17
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d555c:	7041      	strb	r1, [r0, #1]
{
  m_mode = continuous_high_res2;
   d555e:	7002      	strb	r2, [r0, #0]
}
   d5560:	4770      	bx	lr

000d5562 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d5562:	b510      	push	{r4, lr}
   d5564:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	f001 fa29 	bl	d69be <_ZN7TwoWire9isEnabledEv>
   d556c:	b910      	cbnz	r0, d5574 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d556e:	6860      	ldr	r0, [r4, #4]
   d5570:	f001 f9e0 	bl	d6934 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d5574:	2001      	movs	r0, #1
   d5576:	bd10      	pop	{r4, pc}

000d5578 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d5578:	b570      	push	{r4, r5, r6, lr}
   d557a:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d557c:	7841      	ldrb	r1, [r0, #1]
   d557e:	6840      	ldr	r0, [r0, #4]
   d5580:	f001 fa0f 	bl	d69a2 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d5584:	2202      	movs	r2, #2
   d5586:	7869      	ldrb	r1, [r5, #1]
   d5588:	6868      	ldr	r0, [r5, #4]
   d558a:	f001 fa07 	bl	d699c <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d558e:	6868      	ldr	r0, [r5, #4]
   d5590:	6803      	ldr	r3, [r0, #0]
   d5592:	695b      	ldr	r3, [r3, #20]
   d5594:	4798      	blx	r3
   d5596:	4606      	mov	r6, r0
   d5598:	6868      	ldr	r0, [r5, #4]
   d559a:	6803      	ldr	r3, [r0, #0]
   d559c:	695b      	ldr	r3, [r3, #20]
   d559e:	4798      	blx	r3
   d55a0:	4604      	mov	r4, r0
  m_i2c.endTransmission();

  return (float)level / 1.2f; // convert to lux
   d55a2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d55a6:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   d55a8:	b2a4      	uxth	r4, r4
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d55aa:	f001 fa05 	bl	d69b8 <_ZN7TwoWire15endTransmissionEv>

  return (float)level / 1.2f; // convert to lux
   d55ae:	ee07 4a90 	vmov	s15, r4
   d55b2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d55b6:	eddf 7a02 	vldr	s15, [pc, #8]	; d55c0 <_ZN6BH175015get_light_levelEv+0x48>
   d55ba:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d55be:	bd70      	pop	{r4, r5, r6, pc}
   d55c0:	3f99999a 	.word	0x3f99999a

000d55c4 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d55c4:	7803      	ldrb	r3, [r0, #0]
   d55c6:	2b23      	cmp	r3, #35	; 0x23
   d55c8:	d004      	beq.n	d55d4 <_ZN6BH175020wait_for_measurementEv+0x10>
   d55ca:	2b13      	cmp	r3, #19
   d55cc:	bf0c      	ite	eq
   d55ce:	2018      	moveq	r0, #24
   d55d0:	20b4      	movne	r0, #180	; 0xb4
   d55d2:	e000      	b.n	d55d6 <_ZN6BH175020wait_for_measurementEv+0x12>
   d55d4:	2018      	movs	r0, #24
         m_mode == continuous_low_res) ? 24 : 180); // max measurement time 24 for low res and 180 for high res
   d55d6:	f000 bc45 	b.w	d5e64 <delay>

000d55da <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
  return m_mode;
}

void BH1750::set_sensor_mode(SensMode _mode)
{
   d55da:	b538      	push	{r3, r4, r5, lr}
   d55dc:	4604      	mov	r4, r0
   d55de:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d55e0:	7841      	ldrb	r1, [r0, #1]
   d55e2:	6840      	ldr	r0, [r0, #4]
   d55e4:	f001 f9dd 	bl	d69a2 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d55e8:	6860      	ldr	r0, [r4, #4]
   d55ea:	6803      	ldr	r3, [r0, #0]
   d55ec:	4629      	mov	r1, r5
   d55ee:	689b      	ldr	r3, [r3, #8]
   d55f0:	4798      	blx	r3
  m_i2c.endTransmission();
   d55f2:	6860      	ldr	r0, [r4, #4]
   d55f4:	f001 f9e0 	bl	d69b8 <_ZN7TwoWire15endTransmissionEv>

  m_mode = _mode;
   d55f8:	7025      	strb	r5, [r4, #0]

  wait_for_measurement();
   d55fa:	4620      	mov	r0, r4
}
   d55fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  m_i2c.write((uint8_t)_mode);
  m_i2c.endTransmission();

  m_mode = _mode;

  wait_for_measurement();
   d5600:	f7ff bfe0 	b.w	d55c4 <_ZN6BH175020wait_for_measurementEv>

000d5604 <_ZN6BH175023make_forced_measurementEv>:
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5604:	b510      	push	{r4, lr}
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5606:	7803      	ldrb	r3, [r0, #0]
   d5608:	f1a3 0220 	sub.w	r2, r3, #32
   d560c:	2a01      	cmp	r2, #1
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d560e:	4604      	mov	r4, r0
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5610:	d901      	bls.n	d5616 <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5612:	2b23      	cmp	r3, #35	; 0x23
   d5614:	d110      	bne.n	d5638 <_ZN6BH175023make_forced_measurementEv+0x34>
      m_mode == forced_mode_low_res)
  {
    m_i2c.beginTransmission(m_i2c_addr);
   d5616:	7861      	ldrb	r1, [r4, #1]
   d5618:	6860      	ldr	r0, [r4, #4]
   d561a:	f001 f9c2 	bl	d69a2 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d561e:	6860      	ldr	r0, [r4, #4]
   d5620:	7821      	ldrb	r1, [r4, #0]
   d5622:	6803      	ldr	r3, [r0, #0]
   d5624:	689b      	ldr	r3, [r3, #8]
   d5626:	4798      	blx	r3
    m_i2c.endTransmission();
   d5628:	6860      	ldr	r0, [r4, #4]
   d562a:	f001 f9c5 	bl	d69b8 <_ZN7TwoWire15endTransmissionEv>

    wait_for_measurement();
   d562e:	4620      	mov	r0, r4
  }
}
   d5630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    m_i2c.beginTransmission(m_i2c_addr);
    m_i2c.write((uint8_t)m_mode);
    m_i2c.endTransmission();

    wait_for_measurement();
   d5634:	f7ff bfc6 	b.w	d55c4 <_ZN6BH175020wait_for_measurementEv>
   d5638:	bd10      	pop	{r4, pc}

000d563a <_GLOBAL__sub_I__ZN6BH1750C2EhR7TwoWire>:
   d563a:	f000 b977 	b.w	d592c <HAL_Pin_Map>

000d563e <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d563e:	4770      	bx	lr

000d5640 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5640:	b538      	push	{r3, r4, r5, lr}
   d5642:	4605      	mov	r5, r0
   d5644:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5646:	f002 f899 	bl	d777c <_Z19__fetch_global_Wirev>
   d564a:	7829      	ldrb	r1, [r5, #0]
   d564c:	f001 f9a9 	bl	d69a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5650:	f002 f894 	bl	d777c <_Z19__fetch_global_Wirev>
   d5654:	0a21      	lsrs	r1, r4, #8
   d5656:	f7ff ff7b 	bl	d5550 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d565a:	f002 f88f 	bl	d777c <_Z19__fetch_global_Wirev>
   d565e:	b2e1      	uxtb	r1, r4
   d5660:	f7ff ff76 	bl	d5550 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5664:	f002 f88a 	bl	d777c <_Z19__fetch_global_Wirev>
}
   d5668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d566c:	f001 b9a4 	b.w	d69b8 <_ZN7TwoWire15endTransmissionEv>

000d5670 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d5670:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5672:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5676:	f7ff ffe3 	bl	d5640 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d567a:	200a      	movs	r0, #10
}
   d567c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d5680:	f000 bbf0 	b.w	d5e64 <delay>

000d5684 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5684:	b538      	push	{r3, r4, r5, lr}
   d5686:	4604      	mov	r4, r0
   d5688:	460d      	mov	r5, r1
  Wire.begin();
   d568a:	f002 f877 	bl	d777c <_Z19__fetch_global_Wirev>
   d568e:	f001 f951 	bl	d6934 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d5692:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d5694:	7025      	strb	r5, [r4, #0]
  reset();
   d5696:	f7ff ffeb 	bl	d5670 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d569a:	2001      	movs	r0, #1
   d569c:	bd38      	pop	{r3, r4, r5, pc}

000d569e <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d569e:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d56a0:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d56a2:	4291      	cmp	r1, r2
   d56a4:	d00e      	beq.n	d56c4 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d56a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   d56aa:	4058      	eors	r0, r3
   d56ac:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d56ae:	f010 0f80 	tst.w	r0, #128	; 0x80
   d56b2:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d56b6:	bf18      	it	ne
   d56b8:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d56bc:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d56be:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d56c0:	d1f5      	bne.n	d56ae <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d56c2:	e7ee      	b.n	d56a2 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d56c4:	4770      	bx	lr
	...

000d56c8 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d56c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d56ca:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d56ce:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d56d0:	f7ff ffb6 	bl	d5640 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d56d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d56d8:	f000 fbc4 	bl	d5e64 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d56dc:	f002 f84e 	bl	d777c <_Z19__fetch_global_Wirev>
   d56e0:	2206      	movs	r2, #6
   d56e2:	7821      	ldrb	r1, [r4, #0]
   d56e4:	f001 f95a 	bl	d699c <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d56e8:	f002 f848 	bl	d777c <_Z19__fetch_global_Wirev>
   d56ec:	6803      	ldr	r3, [r0, #0]
   d56ee:	691b      	ldr	r3, [r3, #16]
   d56f0:	4798      	blx	r3
   d56f2:	2806      	cmp	r0, #6
   d56f4:	d14a      	bne.n	d578c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d56f6:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d56f8:	f002 f840 	bl	d777c <_Z19__fetch_global_Wirev>
   d56fc:	6803      	ldr	r3, [r0, #0]
   d56fe:	695b      	ldr	r3, [r3, #20]
   d5700:	4798      	blx	r3
   d5702:	f80d 0005 	strb.w	r0, [sp, r5]
   d5706:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d5708:	2d06      	cmp	r5, #6
   d570a:	d1f5      	bne.n	d56f8 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d570c:	2202      	movs	r2, #2
   d570e:	4669      	mov	r1, sp
   d5710:	4620      	mov	r0, r4
   d5712:	f7ff ffc4 	bl	d569e <_ZN14Adafruit_SHT314crc8EPKhi>
   d5716:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d571a:	4285      	cmp	r5, r0
   d571c:	d136      	bne.n	d578c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d571e:	2202      	movs	r2, #2
   d5720:	f10d 0103 	add.w	r1, sp, #3
   d5724:	4620      	mov	r0, r4
   d5726:	f7ff ffba 	bl	d569e <_ZN14Adafruit_SHT314crc8EPKhi>
   d572a:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d572e:	4285      	cmp	r5, r0
   d5730:	d12c      	bne.n	d578c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5732:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d5736:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d573a:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d573e:	ba40      	rev16	r0, r0
   d5740:	b280      	uxth	r0, r0
   d5742:	f002 fb35 	bl	d7db0 <__aeabi_ui2d>
  stemp *= 175;
   d5746:	a318      	add	r3, pc, #96	; (adr r3, d57a8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5748:	e9d3 2300 	ldrd	r2, r3, [r3]
   d574c:	f002 fba6 	bl	d7e9c <__aeabi_dmul>
  stemp /= 0xffff;
   d5750:	a311      	add	r3, pc, #68	; (adr r3, d5798 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5752:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5756:	f002 fccb 	bl	d80f0 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d575a:	2200      	movs	r2, #0
   d575c:	4b10      	ldr	r3, [pc, #64]	; (d57a0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d575e:	f002 f9e9 	bl	d7b34 <__aeabi_dsub>
   d5762:	f002 fdad 	bl	d82c0 <__aeabi_d2f>
   d5766:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d5768:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d576c:	f002 fb20 	bl	d7db0 <__aeabi_ui2d>
  shum *= 100;
   d5770:	2200      	movs	r2, #0
   d5772:	4b0c      	ldr	r3, [pc, #48]	; (d57a4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5774:	f002 fb92 	bl	d7e9c <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d5778:	a307      	add	r3, pc, #28	; (adr r3, d5798 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d577a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d577e:	f002 fcb7 	bl	d80f0 <__aeabi_ddiv>
   d5782:	f002 fd9d 	bl	d82c0 <__aeabi_d2f>
   d5786:	6060      	str	r0, [r4, #4]
  
  return true;
   d5788:	2001      	movs	r0, #1
   d578a:	e000      	b.n	d578e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d578c:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d578e:	b002      	add	sp, #8
   d5790:	bd70      	pop	{r4, r5, r6, pc}
   d5792:	bf00      	nop
   d5794:	f3af 8000 	nop.w
   d5798:	00000000 	.word	0x00000000
   d579c:	40efffe0 	.word	0x40efffe0
   d57a0:	40468000 	.word	0x40468000
   d57a4:	40590000 	.word	0x40590000
   d57a8:	00000000 	.word	0x00000000
   d57ac:	4065e000 	.word	0x4065e000

000d57b0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d57b0:	b510      	push	{r4, lr}
   d57b2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d57b4:	f7ff ff88 	bl	d56c8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d57b8:	b110      	cbz	r0, d57c0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d57ba:	ed94 0a02 	vldr	s0, [r4, #8]
   d57be:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d57c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d57c8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d57c4:	bd10      	pop	{r4, pc}
   d57c6:	bf00      	nop
   d57c8:	7fc00000 	.word	0x7fc00000

000d57cc <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d57cc:	b510      	push	{r4, lr}
   d57ce:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d57d0:	f7ff ff7a 	bl	d56c8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d57d4:	b110      	cbz	r0, d57dc <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d57d6:	ed94 0a01 	vldr	s0, [r4, #4]
   d57da:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d57dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d57e4 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d57e0:	bd10      	pop	{r4, pc}
   d57e2:	bf00      	nop
   d57e4:	7fc00000 	.word	0x7fc00000

000d57e8 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d57e8:	f000 b8a0 	b.w	d592c <HAL_Pin_Map>

000d57ec <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <cellular_signal+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	00030274 	.word	0x00030274

000d57fc <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <cellular_command+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	00030274 	.word	0x00030274

000d580c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <os_thread_is_current+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	689b      	ldr	r3, [r3, #8]
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	00030248 	.word	0x00030248

000d581c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <os_thread_join+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	691b      	ldr	r3, [r3, #16]
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	00030248 	.word	0x00030248

000d582c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <os_thread_cleanup+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	695b      	ldr	r3, [r3, #20]
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030248 	.word	0x00030248

000d583c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <os_mutex_recursive_create+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030248 	.word	0x00030248

000d584c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <os_mutex_recursive_destroy+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030248 	.word	0x00030248

000d585c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <HAL_Feature_Set+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030234 	.word	0x00030234

000d586c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <HAL_Core_System_Reset_Ex+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030234 	.word	0x00030234

000d587c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030234 	.word	0x00030234

000d588c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <HAL_RNG_GetRandomNumber+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	685b      	ldr	r3, [r3, #4]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030218 	.word	0x00030218

000d589c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <HAL_Delay_Microseconds+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	68db      	ldr	r3, [r3, #12]
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030218 	.word	0x00030218

000d58ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	695b      	ldr	r3, [r3, #20]
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030218 	.word	0x00030218

000d58bc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <HAL_RTC_Get_UnixTime+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	69db      	ldr	r3, [r3, #28]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030218 	.word	0x00030218

000d58cc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <HAL_EEPROM_Init+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030218 	.word	0x00030218

000d58dc <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <HAL_EEPROM_Read+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030218 	.word	0x00030218

000d58ec <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <HAL_EEPROM_Get+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030218 	.word	0x00030218

000d58fc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <HAL_EEPROM_Put+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030218 	.word	0x00030218

000d590c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <HAL_RTC_Time_Is_Valid+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030218 	.word	0x00030218

000d591c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <hal_timer_millis+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030218 	.word	0x00030218

000d592c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <HAL_Pin_Map+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	681b      	ldr	r3, [r3, #0]
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	0003022c 	.word	0x0003022c

000d593c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <HAL_Validate_Pin_Function+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	685b      	ldr	r3, [r3, #4]
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	0003022c 	.word	0x0003022c

000d594c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <HAL_Pin_Mode+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	689b      	ldr	r3, [r3, #8]
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	0003022c 	.word	0x0003022c

000d595c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <HAL_Get_Pin_Mode+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	68db      	ldr	r3, [r3, #12]
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	0003022c 	.word	0x0003022c

000d596c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <HAL_GPIO_Write+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	691b      	ldr	r3, [r3, #16]
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	0003022c 	.word	0x0003022c

000d597c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <HAL_GPIO_Read+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	695b      	ldr	r3, [r3, #20]
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	0003022c 	.word	0x0003022c

000d598c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <HAL_ADC_Read+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003022c 	.word	0x0003022c

000d599c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <HAL_I2C_Begin+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	68db      	ldr	r3, [r3, #12]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	00030228 	.word	0x00030228

000d59ac <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <HAL_I2C_Begin_Transmission+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	699b      	ldr	r3, [r3, #24]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	00030228 	.word	0x00030228

000d59bc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <HAL_I2C_End_Transmission+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	69db      	ldr	r3, [r3, #28]
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	00030228 	.word	0x00030228

000d59cc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <HAL_I2C_Write_Data+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	6a1b      	ldr	r3, [r3, #32]
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	00030228 	.word	0x00030228

000d59dc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <HAL_I2C_Available_Data+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	00030228 	.word	0x00030228

000d59ec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <HAL_I2C_Read_Data+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	00030228 	.word	0x00030228

000d59fc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <HAL_I2C_Peek_Data+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	00030228 	.word	0x00030228

000d5a0c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <HAL_I2C_Flush_Data+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	00030228 	.word	0x00030228

000d5a1c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <HAL_I2C_Is_Enabled+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	00030228 	.word	0x00030228

000d5a2c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <HAL_I2C_Init+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	00030228 	.word	0x00030228

000d5a3c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <HAL_I2C_Acquire+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030228 	.word	0x00030228

000d5a4c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <HAL_I2C_Release+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030228 	.word	0x00030228

000d5a5c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <HAL_I2C_Request_Data_Ex+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030228 	.word	0x00030228

000d5a6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <inet_inet_ntop+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	695b      	ldr	r3, [r3, #20]
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030264 	.word	0x00030264

000d5a7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <netdb_freeaddrinfo+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	689b      	ldr	r3, [r3, #8]
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030268 	.word	0x00030268

000d5a8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <netdb_getaddrinfo+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	68db      	ldr	r3, [r3, #12]
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030268 	.word	0x00030268

000d5a9c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <HAL_SPI_Init+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	69db      	ldr	r3, [r3, #28]
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030230 	.word	0x00030230

000d5aac <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <HAL_SPI_Is_Enabled+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	6a1b      	ldr	r3, [r3, #32]
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030230 	.word	0x00030230

000d5abc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <HAL_USART_Init+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	681b      	ldr	r3, [r3, #0]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	0003023c 	.word	0x0003023c

000d5acc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <HAL_USART_Write_Data+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	68db      	ldr	r3, [r3, #12]
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	0003023c 	.word	0x0003023c

000d5adc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <HAL_USART_Available_Data+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	691b      	ldr	r3, [r3, #16]
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	0003023c 	.word	0x0003023c

000d5aec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <HAL_USART_Read_Data+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	695b      	ldr	r3, [r3, #20]
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	0003023c 	.word	0x0003023c

000d5afc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <HAL_USART_Peek_Data+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	699b      	ldr	r3, [r3, #24]
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	0003023c 	.word	0x0003023c

000d5b0c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <HAL_USART_Flush_Data+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	69db      	ldr	r3, [r3, #28]
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	0003023c 	.word	0x0003023c

000d5b1c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <HAL_USART_Is_Enabled+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	6a1b      	ldr	r3, [r3, #32]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	0003023c 	.word	0x0003023c

000d5b2c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <HAL_USART_Available_Data_For_Write+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	0003023c 	.word	0x0003023c

000d5b3c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <HAL_USB_USART_Init+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	681b      	ldr	r3, [r3, #0]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	0003024c 	.word	0x0003024c

000d5b4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <HAL_USB_USART_Available_Data+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	691b      	ldr	r3, [r3, #16]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	0003024c 	.word	0x0003024c

000d5b5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	695b      	ldr	r3, [r3, #20]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	0003024c 	.word	0x0003024c

000d5b6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <HAL_USB_USART_Receive_Data+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	699b      	ldr	r3, [r3, #24]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	0003024c 	.word	0x0003024c

000d5b7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <HAL_USB_USART_Send_Data+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	69db      	ldr	r3, [r3, #28]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	0003024c 	.word	0x0003024c

000d5b8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <HAL_USB_USART_Flush_Data+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	6a1b      	ldr	r3, [r3, #32]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	0003024c 	.word	0x0003024c

000d5b9c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <panic_+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	00030260 	.word	0x00030260

000d5bac <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <system_mode+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	681b      	ldr	r3, [r3, #0]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	00030220 	.word	0x00030220

000d5bbc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <set_system_mode+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	685b      	ldr	r3, [r3, #4]
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	00030220 	.word	0x00030220

000d5bcc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <system_delay_ms+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	695b      	ldr	r3, [r3, #20]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030220 	.word	0x00030220

000d5bdc <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <system_sleep+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	699b      	ldr	r3, [r3, #24]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030220 	.word	0x00030220

000d5bec <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <system_thread_set_state+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030220 	.word	0x00030220

000d5bfc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <application_thread_current+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030220 	.word	0x00030220

000d5c0c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <application_thread_invoke+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	00030220 	.word	0x00030220

000d5c1c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <system_thread_get_state+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	00030220 	.word	0x00030220

000d5c2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b03      	ldr	r3, [pc, #12]	; (d5c3c <system_ctrl_set_app_request_handler+0x10>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5c36:	9301      	str	r3, [sp, #4]
   d5c38:	bd08      	pop	{r3, pc}
   d5c3a:	0000      	.short	0x0000
   d5c3c:	00030220 	.word	0x00030220

000d5c40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b03      	ldr	r3, [pc, #12]	; (d5c50 <system_ctrl_set_result+0x10>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5c4a:	9301      	str	r3, [sp, #4]
   d5c4c:	bd08      	pop	{r3, pc}
   d5c4e:	0000      	.short	0x0000
   d5c50:	00030220 	.word	0x00030220

000d5c54 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b03      	ldr	r3, [pc, #12]	; (d5c64 <system_sleep_pins+0x10>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d5c5e:	9301      	str	r3, [sp, #4]
   d5c60:	bd08      	pop	{r3, pc}
   d5c62:	0000      	.short	0x0000
   d5c64:	00030220 	.word	0x00030220

000d5c68 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b03      	ldr	r3, [pc, #12]	; (d5c78 <system_power_management_set_config+0x10>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5c72:	9301      	str	r3, [sp, #4]
   d5c74:	bd08      	pop	{r3, pc}
   d5c76:	0000      	.short	0x0000
   d5c78:	00030220 	.word	0x00030220

000d5c7c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <spark_variable+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	681b      	ldr	r3, [r3, #0]
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030244 	.word	0x00030244

000d5c8c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <spark_function+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	685b      	ldr	r3, [r3, #4]
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030244 	.word	0x00030244

000d5c9c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <spark_process+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	689b      	ldr	r3, [r3, #8]
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030244 	.word	0x00030244

000d5cac <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <spark_cloud_flag_connect+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	68db      	ldr	r3, [r3, #12]
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	00030244 	.word	0x00030244

000d5cbc <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <spark_cloud_flag_disconnect+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	691b      	ldr	r3, [r3, #16]
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	00030244 	.word	0x00030244

000d5ccc <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <spark_cloud_flag_connected+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	695b      	ldr	r3, [r3, #20]
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	00030244 	.word	0x00030244

000d5cdc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <spark_deviceID+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	69db      	ldr	r3, [r3, #28]
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	00030244 	.word	0x00030244

000d5cec <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <spark_send_event+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	6a1b      	ldr	r3, [r3, #32]
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	00030244 	.word	0x00030244

000d5cfc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <spark_subscribe+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	00030244 	.word	0x00030244

000d5d0c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <spark_sync_time+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	00030244 	.word	0x00030244

000d5d1c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <spark_sync_time_pending+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	00030244 	.word	0x00030244

000d5d2c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030244 	.word	0x00030244

000d5d3c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <network_connect+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	685b      	ldr	r3, [r3, #4]
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030240 	.word	0x00030240

000d5d4c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <network_connecting+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	689b      	ldr	r3, [r3, #8]
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030240 	.word	0x00030240

000d5d5c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <network_disconnect+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	68db      	ldr	r3, [r3, #12]
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030240 	.word	0x00030240

000d5d6c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <network_ready+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	691b      	ldr	r3, [r3, #16]
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	00030240 	.word	0x00030240

000d5d7c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <network_on+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	695b      	ldr	r3, [r3, #20]
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	00030240 	.word	0x00030240

000d5d8c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <network_off+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	699b      	ldr	r3, [r3, #24]
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	00030240 	.word	0x00030240

000d5d9c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <network_listen+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	69db      	ldr	r3, [r3, #28]
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	00030240 	.word	0x00030240

000d5dac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <network_listening+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	6a1b      	ldr	r3, [r3, #32]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	00030240 	.word	0x00030240

000d5dbc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <network_set_listen_timeout+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	00030240 	.word	0x00030240

000d5dcc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <network_get_listen_timeout+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	00030240 	.word	0x00030240

000d5ddc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <malloc+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	681b      	ldr	r3, [r3, #0]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003021c 	.word	0x0003021c

000d5dec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <free+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	685b      	ldr	r3, [r3, #4]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003021c 	.word	0x0003021c

000d5dfc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <realloc+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	689b      	ldr	r3, [r3, #8]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003021c 	.word	0x0003021c

000d5e0c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <siscanf+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	699b      	ldr	r3, [r3, #24]
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003021c 	.word	0x0003021c

000d5e1c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <snprintf+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	69db      	ldr	r3, [r3, #28]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	0003021c 	.word	0x0003021c

000d5e2c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <abort+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	0003021c 	.word	0x0003021c

000d5e3c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <_malloc_r+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	0003021c 	.word	0x0003021c

000d5e4c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d5e4c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d5e4e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d5e50:	d007      	beq.n	d5e62 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d5e52:	9d03      	ldr	r5, [sp, #12]
   d5e54:	1a44      	subs	r4, r0, r1
   d5e56:	1aed      	subs	r5, r5, r3
   d5e58:	436c      	muls	r4, r5
   d5e5a:	1a52      	subs	r2, r2, r1
   d5e5c:	fb94 f4f2 	sdiv	r4, r4, r2
   d5e60:	18e0      	adds	r0, r4, r3
}
   d5e62:	bd30      	pop	{r4, r5, pc}

000d5e64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5e64:	2100      	movs	r1, #0
   d5e66:	f7ff beb1 	b.w	d5bcc <system_delay_ms>

000d5e6a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5e6a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e6c:	6883      	ldr	r3, [r0, #8]
   d5e6e:	4604      	mov	r4, r0
   d5e70:	b90b      	cbnz	r3, d5e76 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5e72:	f001 fd10 	bl	d7896 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e76:	68c3      	ldr	r3, [r0, #12]
   d5e78:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5e7a:	68a3      	ldr	r3, [r4, #8]
   d5e7c:	b11b      	cbz	r3, d5e86 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e7e:	2203      	movs	r2, #3
   d5e80:	4621      	mov	r1, r4
   d5e82:	4620      	mov	r0, r4
   d5e84:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e86:	4620      	mov	r0, r4
   d5e88:	2110      	movs	r1, #16
}
   d5e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e8e:	f001 bce6 	b.w	d785e <_ZdlPvj>

000d5e92 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5e92:	b510      	push	{r4, lr}
   d5e94:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e96:	6800      	ldr	r0, [r0, #0]
   d5e98:	b108      	cbz	r0, d5e9e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5e9a:	f7ff fcd7 	bl	d584c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	bd10      	pop	{r4, pc}

000d5ea2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5ea2:	680b      	ldr	r3, [r1, #0]
   d5ea4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5ea6:	b113      	cbz	r3, d5eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5ea8:	685a      	ldr	r2, [r3, #4]
   d5eaa:	3201      	adds	r2, #1
   d5eac:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5eae:	4770      	bx	lr

000d5eb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5eb0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5eb2:	4c06      	ldr	r4, [pc, #24]	; (d5ecc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5eb4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5eb6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5eb8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5eba:	f7ff fcbf 	bl	d583c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	4a03      	ldr	r2, [pc, #12]	; (d5ed0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5ec2:	4904      	ldr	r1, [pc, #16]	; (d5ed4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5ec8:	f001 bcc4 	b.w	d7854 <__aeabi_atexit>
   d5ecc:	2003e32c 	.word	0x2003e32c
   d5ed0:	2003e1cc 	.word	0x2003e1cc
   d5ed4:	000d5e93 	.word	0x000d5e93

000d5ed8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5ed8:	2200      	movs	r2, #0
   d5eda:	4611      	mov	r1, r2
   d5edc:	6840      	ldr	r0, [r0, #4]
   d5ede:	f7ff bf45 	b.w	d5d6c <network_ready>

000d5ee2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ee2:	2200      	movs	r2, #0
   d5ee4:	4611      	mov	r1, r2
   d5ee6:	6840      	ldr	r0, [r0, #4]
   d5ee8:	f7ff bf60 	b.w	d5dac <network_listening>

000d5eec <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5eec:	2200      	movs	r2, #0
   d5eee:	4611      	mov	r1, r2
   d5ef0:	6840      	ldr	r0, [r0, #4]
   d5ef2:	f7ff bf6b 	b.w	d5dcc <network_get_listen_timeout>

000d5ef6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ef6:	2200      	movs	r2, #0
   d5ef8:	6840      	ldr	r0, [r0, #4]
   d5efa:	f7ff bf5f 	b.w	d5dbc <network_set_listen_timeout>

000d5efe <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5efe:	2200      	movs	r2, #0
   d5f00:	f081 0101 	eor.w	r1, r1, #1
   d5f04:	6840      	ldr	r0, [r0, #4]
   d5f06:	f7ff bf49 	b.w	d5d9c <network_listen>

000d5f0a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5f0a:	2300      	movs	r3, #0
   d5f0c:	461a      	mov	r2, r3
   d5f0e:	4619      	mov	r1, r3
   d5f10:	6840      	ldr	r0, [r0, #4]
   d5f12:	f7ff bf3b 	b.w	d5d8c <network_off>

000d5f16 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5f16:	2300      	movs	r3, #0
   d5f18:	461a      	mov	r2, r3
   d5f1a:	4619      	mov	r1, r3
   d5f1c:	6840      	ldr	r0, [r0, #4]
   d5f1e:	f7ff bf2d 	b.w	d5d7c <network_on>

000d5f22 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f22:	2200      	movs	r2, #0
   d5f24:	4611      	mov	r1, r2
   d5f26:	6840      	ldr	r0, [r0, #4]
   d5f28:	f7ff bf10 	b.w	d5d4c <network_connecting>

000d5f2c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f2c:	2200      	movs	r2, #0
   d5f2e:	2102      	movs	r1, #2
   d5f30:	6840      	ldr	r0, [r0, #4]
   d5f32:	f7ff bf13 	b.w	d5d5c <network_disconnect>

000d5f36 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f36:	2300      	movs	r3, #0
   d5f38:	461a      	mov	r2, r3
   d5f3a:	6840      	ldr	r0, [r0, #4]
   d5f3c:	f7ff befe 	b.w	d5d3c <network_connect>

000d5f40 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5f40:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5f42:	4b1b      	ldr	r3, [pc, #108]	; (d5fb0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5f44:	6003      	str	r3, [r0, #0]
   d5f46:	2500      	movs	r5, #0
   d5f48:	460f      	mov	r7, r1
   d5f4a:	3328      	adds	r3, #40	; 0x28
   d5f4c:	2618      	movs	r6, #24
   d5f4e:	b089      	sub	sp, #36	; 0x24
   d5f50:	6043      	str	r3, [r0, #4]
   d5f52:	6085      	str	r5, [r0, #8]
   d5f54:	60c5      	str	r5, [r0, #12]
   d5f56:	4632      	mov	r2, r6
   d5f58:	4629      	mov	r1, r5
   d5f5a:	4604      	mov	r4, r0
   d5f5c:	3010      	adds	r0, #16
   d5f5e:	f002 fb14 	bl	d858a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5f62:	462a      	mov	r2, r5
   d5f64:	4629      	mov	r1, r5
   d5f66:	6878      	ldr	r0, [r7, #4]
   d5f68:	f7ff ff00 	bl	d5d6c <network_ready>
   d5f6c:	b908      	cbnz	r0, d5f72 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5f6e:	60a0      	str	r0, [r4, #8]
            return sig;
   d5f70:	e01b      	b.n	d5faa <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5f72:	4629      	mov	r1, r5
   d5f74:	4632      	mov	r2, r6
   d5f76:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5f78:	9500      	str	r5, [sp, #0]
   d5f7a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5f7c:	f002 fb05 	bl	d858a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5f80:	a902      	add	r1, sp, #8
   d5f82:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5f84:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5f88:	f7ff fc30 	bl	d57ec <cellular_signal>
   d5f8c:	b110      	cbz	r0, d5f94 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5f8e:	2301      	movs	r3, #1
   d5f90:	60a3      	str	r3, [r4, #8]
            return sig;
   d5f92:	e00a      	b.n	d5faa <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d5f94:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5f96:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5f98:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5f9a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5f9c:	b90b      	cbnz	r3, d5fa2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5f9e:	2302      	movs	r3, #2
   d5fa0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d5fa2:	a902      	add	r1, sp, #8
   d5fa4:	4620      	mov	r0, r4
   d5fa6:	f000 f889 	bl	d60bc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5faa:	4620      	mov	r0, r4
   d5fac:	b009      	add	sp, #36	; 0x24
   d5fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fb0:	000d94b4 	.word	0x000d94b4

000d5fb4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5fb4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5fb6:	4c08      	ldr	r4, [pc, #32]	; (d5fd8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5fb8:	2528      	movs	r5, #40	; 0x28
   d5fba:	462a      	mov	r2, r5
   d5fbc:	2100      	movs	r1, #0
   d5fbe:	4620      	mov	r0, r4
   d5fc0:	f002 fae3 	bl	d858a <memset>
        cid = -1;
   d5fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5fc8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5fca:	4b04      	ldr	r3, [pc, #16]	; (d5fdc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5fcc:	8025      	strh	r5, [r4, #0]
   d5fce:	2204      	movs	r2, #4
   d5fd0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5fd2:	4a03      	ldr	r2, [pc, #12]	; (d5fe0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5fd4:	601a      	str	r2, [r3, #0]
   d5fd6:	bd38      	pop	{r3, r4, r5, pc}
   d5fd8:	2003e338 	.word	0x2003e338
   d5fdc:	2003e330 	.word	0x2003e330
   d5fe0:	000d9480 	.word	0x000d9480

000d5fe4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5fe4:	4770      	bx	lr

000d5fe6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5fe6:	7d00      	ldrb	r0, [r0, #20]
   d5fe8:	4770      	bx	lr
	...

000d5fec <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5fec:	7d03      	ldrb	r3, [r0, #20]
   d5fee:	b11b      	cbz	r3, d5ff8 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5ff0:	6983      	ldr	r3, [r0, #24]
   d5ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5ff6:	d102      	bne.n	d5ffe <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d5ff8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6010 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5ffc:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d5ffe:	ee07 3a90 	vmov	s15, r3
   d6002:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6014 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d6006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d600a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d600e:	4770      	bx	lr
   d6010:	00000000 	.word	0x00000000
   d6014:	42c80000 	.word	0x42c80000

000d6018 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6018:	7d03      	ldrb	r3, [r0, #20]
   d601a:	b11b      	cbz	r3, d6024 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d601c:	6a03      	ldr	r3, [r0, #32]
   d601e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6022:	d102      	bne.n	d602a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d6024:	ed9f 0a05 	vldr	s0, [pc, #20]	; d603c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6028:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d602a:	ee07 3a90 	vmov	s15, r3
   d602e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6040 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d6032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6036:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d603a:	4770      	bx	lr
   d603c:	00000000 	.word	0x00000000
   d6040:	42c80000 	.word	0x42c80000

000d6044 <_ZN14CellularSignalD0Ev>:
   d6044:	b510      	push	{r4, lr}
   d6046:	2128      	movs	r1, #40	; 0x28
   d6048:	4604      	mov	r4, r0
   d604a:	f001 fc08 	bl	d785e <_ZdlPvj>
   d604e:	4620      	mov	r0, r4
   d6050:	bd10      	pop	{r4, pc}
	...

000d6054 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6054:	7d03      	ldrb	r3, [r0, #20]
   d6056:	b17b      	cbz	r3, d6078 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6058:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d605a:	2b00      	cmp	r3, #0
   d605c:	db0c      	blt.n	d6078 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d605e:	ee07 3a90 	vmov	s15, r3
   d6062:	eddf 6a07 	vldr	s13, [pc, #28]	; d6080 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6066:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6084 <_ZNK14CellularSignal10getQualityEv+0x30>
   d606a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d606e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6072:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6076:	4770      	bx	lr
    }

    return -1.0f;
   d6078:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d607c:	4770      	bx	lr
   d607e:	bf00      	nop
   d6080:	477fff00 	.word	0x477fff00
   d6084:	42c80000 	.word	0x42c80000

000d6088 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d6088:	7d03      	ldrb	r3, [r0, #20]
   d608a:	b17b      	cbz	r3, d60ac <_ZNK14CellularSignal11getStrengthEv+0x24>
   d608c:	69c3      	ldr	r3, [r0, #28]
   d608e:	2b00      	cmp	r3, #0
   d6090:	db0c      	blt.n	d60ac <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d6092:	ee07 3a90 	vmov	s15, r3
   d6096:	eddf 6a07 	vldr	s13, [pc, #28]	; d60b4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d609a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d60b8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d609e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d60a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d60a6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d60aa:	4770      	bx	lr
    }

    return -1.0f;
   d60ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d60b0:	4770      	bx	lr
   d60b2:	bf00      	nop
   d60b4:	477fff00 	.word	0x477fff00
   d60b8:	42c80000 	.word	0x42c80000

000d60bc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d60bc:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d60be:	460d      	mov	r5, r1
   d60c0:	f100 0410 	add.w	r4, r0, #16
   d60c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60c8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d60cc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d60d0:	2001      	movs	r0, #1
   d60d2:	bd30      	pop	{r4, r5, pc}

000d60d4 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d60d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60d8:	4607      	mov	r7, r0
   d60da:	460c      	mov	r4, r1
{
    if (base == 0) {
   d60dc:	4615      	mov	r5, r2
   d60de:	b92a      	cbnz	r2, d60ec <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d60e0:	6803      	ldr	r3, [r0, #0]
   d60e2:	b2c9      	uxtb	r1, r1
   d60e4:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d60e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d60ea:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d60ec:	2900      	cmp	r1, #0
   d60ee:	da07      	bge.n	d6100 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d60f0:	2a0a      	cmp	r2, #10
   d60f2:	d105      	bne.n	d6100 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d60f4:	212d      	movs	r1, #45	; 0x2d
   d60f6:	f000 fe7b 	bl	d6df0 <_ZN5Print5printEc>
            val = -n;
   d60fa:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d60fc:	4606      	mov	r6, r0
            val = -n;
   d60fe:	e001      	b.n	d6104 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d6100:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6102:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6104:	b2ea      	uxtb	r2, r5
   d6106:	4638      	mov	r0, r7
   d6108:	f000 fe8b 	bl	d6e22 <_ZN5Print11printNumberEmh>
    }
}
   d610c:	4430      	add	r0, r6
   d610e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6112 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d6112:	b570      	push	{r4, r5, r6, lr}
   d6114:	460d      	mov	r5, r1
   d6116:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6118:	220a      	movs	r2, #10
   d611a:	6881      	ldr	r1, [r0, #8]
   d611c:	4628      	mov	r0, r5
   d611e:	f7ff ffd9 	bl	d60d4 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d6122:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6124:	4604      	mov	r4, r0
    n += p.print(',');
   d6126:	4628      	mov	r0, r5
   d6128:	f000 fe62 	bl	d6df0 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d612c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d612e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d6130:	68f1      	ldr	r1, [r6, #12]
   d6132:	4628      	mov	r0, r5
   d6134:	f7ff ffce 	bl	d60d4 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d6138:	4420      	add	r0, r4
   d613a:	bd70      	pop	{r4, r5, r6, pc}

000d613c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d613c:	f1a0 0004 	sub.w	r0, r0, #4
   d6140:	f7ff bfe7 	b.w	d6112 <_ZNK14CellularSignal7printToER5Print>

000d6144 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6144:	4770      	bx	lr

000d6146 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6146:	2000      	movs	r0, #0
   d6148:	4770      	bx	lr

000d614a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d614a:	b510      	push	{r4, lr}
   d614c:	2110      	movs	r1, #16
   d614e:	4604      	mov	r4, r0
   d6150:	f001 fb85 	bl	d785e <_ZdlPvj>
   d6154:	4620      	mov	r0, r4
   d6156:	bd10      	pop	{r4, pc}

000d6158 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6158:	b508      	push	{r3, lr}
      { delete this; }
   d615a:	b108      	cbz	r0, d6160 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d615c:	f7ff fff5 	bl	d614a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6160:	bd08      	pop	{r3, pc}

000d6162 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6162:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6164:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6166:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6168:	b113      	cbz	r3, d6170 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d616a:	2203      	movs	r2, #3
   d616c:	4601      	mov	r1, r0
   d616e:	4798      	blx	r3
    }
   d6170:	4620      	mov	r0, r4
   d6172:	bd10      	pop	{r4, pc}

000d6174 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6174:	2200      	movs	r2, #0
   d6176:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6178:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d617a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d617e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6180:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6184:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6186:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6188:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d618a:	680c      	ldr	r4, [r1, #0]
   d618c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d618e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6190:	bd10      	pop	{r4, pc}

000d6192 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6192:	b510      	push	{r4, lr}
   d6194:	4604      	mov	r4, r0
    free((void*)msg_);
   d6196:	6800      	ldr	r0, [r0, #0]
   d6198:	f7ff fe28 	bl	d5dec <free>
}
   d619c:	4620      	mov	r0, r4
   d619e:	bd10      	pop	{r4, pc}

000d61a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d61a0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d61a2:	68c4      	ldr	r4, [r0, #12]
   d61a4:	b1f4      	cbz	r4, d61e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d61a6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d61a8:	2b02      	cmp	r3, #2
   d61aa:	d103      	bne.n	d61b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d61ac:	f104 000c 	add.w	r0, r4, #12
   d61b0:	f7ff ffef 	bl	d6192 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d61b4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d61b6:	b135      	cbz	r5, d61c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61b8:	4628      	mov	r0, r5
   d61ba:	f7ff ffd2 	bl	d6162 <_ZNSt14_Function_baseD1Ev>
   d61be:	2110      	movs	r1, #16
   d61c0:	4628      	mov	r0, r5
   d61c2:	f001 fb4c 	bl	d785e <_ZdlPvj>
   d61c6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d61c8:	b135      	cbz	r5, d61d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d61ca:	4628      	mov	r0, r5
   d61cc:	f7ff ffc9 	bl	d6162 <_ZNSt14_Function_baseD1Ev>
   d61d0:	2110      	movs	r1, #16
   d61d2:	4628      	mov	r0, r5
   d61d4:	f001 fb43 	bl	d785e <_ZdlPvj>
   d61d8:	4620      	mov	r0, r4
   d61da:	2114      	movs	r1, #20
   d61dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d61e0:	f001 bb3d 	b.w	d785e <_ZdlPvj>
   d61e4:	bd38      	pop	{r3, r4, r5, pc}

000d61e6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d61e6:	b510      	push	{r4, lr}
   d61e8:	b088      	sub	sp, #32
   d61ea:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d61ec:	4668      	mov	r0, sp
   d61ee:	f000 fead 	bl	d6f4c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d61f2:	4669      	mov	r1, sp
   d61f4:	a804      	add	r0, sp, #16
   d61f6:	f000 fecb 	bl	d6f90 <_ZN6StringC1ERKS_>
   d61fa:	a804      	add	r0, sp, #16
   d61fc:	47a0      	blx	r4
   d61fe:	4604      	mov	r4, r0
   d6200:	a804      	add	r0, sp, #16
   d6202:	f000 fe5c 	bl	d6ebe <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6206:	4668      	mov	r0, sp
   d6208:	f000 fe59 	bl	d6ebe <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d620c:	4620      	mov	r0, r4
   d620e:	b008      	add	sp, #32
   d6210:	bd10      	pop	{r4, pc}

000d6212 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6212:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6214:	2410      	movs	r4, #16
   d6216:	b085      	sub	sp, #20
   d6218:	4607      	mov	r7, r0
   d621a:	460e      	mov	r6, r1
   d621c:	4615      	mov	r5, r2
   d621e:	2100      	movs	r1, #0
   d6220:	4622      	mov	r2, r4
   d6222:	4668      	mov	r0, sp
   d6224:	f002 f9b1 	bl	d858a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6228:	2200      	movs	r2, #0
   d622a:	4669      	mov	r1, sp
   d622c:	4610      	mov	r0, r2
         size = sizeof(*this);
   d622e:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d6232:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d6234:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d6236:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6238:	f7ff fd28 	bl	d5c8c <spark_function>
}
   d623c:	b005      	add	sp, #20
   d623e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6240 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6240:	b513      	push	{r0, r1, r4, lr}
   d6242:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6244:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6248:	2300      	movs	r3, #0
   d624a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d624c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d624e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6250:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6252:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6254:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6256:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6258:	f7fe f920 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d625c:	4620      	mov	r0, r4
   d625e:	b002      	add	sp, #8
   d6260:	bd10      	pop	{r4, pc}

000d6262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6264:	460c      	mov	r4, r1
   d6266:	ad02      	add	r5, sp, #8
   d6268:	f854 3b04 	ldr.w	r3, [r4], #4
   d626c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6270:	4606      	mov	r6, r0
   d6272:	460f      	mov	r7, r1
   d6274:	a801      	add	r0, sp, #4
   d6276:	4621      	mov	r1, r4
   d6278:	f7ff fe13 	bl	d5ea2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d627c:	4629      	mov	r1, r5
   d627e:	4630      	mov	r0, r6
   d6280:	f7ff ffde 	bl	d6240 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6284:	a801      	add	r0, sp, #4
   d6286:	f7fe f909 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d628a:	4620      	mov	r0, r4
   d628c:	f7fe f906 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6290:	4638      	mov	r0, r7
   d6292:	2108      	movs	r1, #8
   d6294:	f001 fae3 	bl	d785e <_ZdlPvj>
        return p;
    }
   d6298:	4630      	mov	r0, r6
   d629a:	b003      	add	sp, #12
   d629c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d629e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d629e:	b513      	push	{r0, r1, r4, lr}
   d62a0:	460b      	mov	r3, r1
   d62a2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62a4:	c803      	ldmia	r0, {r0, r1}
   d62a6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d62aa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d62ae:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d62b2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d62b6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d62ba:	b002      	add	sp, #8
   d62bc:	bd10      	pop	{r4, pc}
	...

000d62c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d62c0:	b538      	push	{r3, r4, r5, lr}
   d62c2:	2300      	movs	r3, #0
   d62c4:	4604      	mov	r4, r0
   d62c6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62c8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d62ca:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62cc:	f7fd fee5 	bl	d409a <_Znwj>
   d62d0:	b128      	cbz	r0, d62de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d62d2:	2301      	movs	r3, #1
   d62d4:	6043      	str	r3, [r0, #4]
   d62d6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d62d8:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d62da:	6003      	str	r3, [r0, #0]
   d62dc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62de:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d62e0:	4620      	mov	r0, r4
   d62e2:	bd38      	pop	{r3, r4, r5, pc}
   d62e4:	000d94e8 	.word	0x000d94e8

000d62e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62e8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d62ea:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62ec:	b90a      	cbnz	r2, d62f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d62ee:	f001 fad2 	bl	d7896 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62f2:	68c3      	ldr	r3, [r0, #12]
    }
   d62f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62f8:	4718      	bx	r3

000d62fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d62fa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d62fc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d62fe:	f100 0110 	add.w	r1, r0, #16
   d6302:	f7ff fff1 	bl	d62e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6306:	bd08      	pop	{r3, pc}

000d6308 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6308:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d630a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d630c:	b90a      	cbnz	r2, d6312 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d630e:	f001 fac2 	bl	d7896 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6312:	68c3      	ldr	r3, [r0, #12]
    }
   d6314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6318:	4718      	bx	r3

000d631a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d631a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d631c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d631e:	f100 0110 	add.w	r1, r0, #16
   d6322:	f7ff fff1 	bl	d6308 <_ZNKSt8functionIFvRKbEEclES1_>
   d6326:	bd08      	pop	{r3, pc}

000d6328 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6328:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d632a:	2300      	movs	r3, #0
   d632c:	6083      	str	r3, [r0, #8]
   d632e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6330:	4604      	mov	r4, r0
   d6332:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6334:	b12b      	cbz	r3, d6342 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6336:	2202      	movs	r2, #2
   d6338:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d633a:	68eb      	ldr	r3, [r5, #12]
   d633c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d633e:	68ab      	ldr	r3, [r5, #8]
   d6340:	60a3      	str	r3, [r4, #8]
	}
    }
   d6342:	4620      	mov	r0, r4
   d6344:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6348:	b5f0      	push	{r4, r5, r6, r7, lr}
   d634a:	b089      	sub	sp, #36	; 0x24
   d634c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d634e:	4668      	mov	r0, sp
   d6350:	f7ff ff10 	bl	d6174 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6354:	2300      	movs	r3, #0
   d6356:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d635a:	f04f 0202 	mov.w	r2, #2
   d635e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6362:	2b00      	cmp	r3, #0
   d6364:	d103      	bne.n	d636e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6366:	e8c4 2f41 	strexb	r1, r2, [r4]
   d636a:	2900      	cmp	r1, #0
   d636c:	d1f7      	bne.n	d635e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d636e:	d002      	beq.n	d6376 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6370:	f88d 3008 	strb.w	r3, [sp, #8]
   d6374:	e063      	b.n	d643e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6376:	f114 050c 	adds.w	r5, r4, #12
   d637a:	d003      	beq.n	d6384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d637c:	4669      	mov	r1, sp
   d637e:	4628      	mov	r0, r5
   d6380:	f7ff fef8 	bl	d6174 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6384:	f3bf 8f5f 	dmb	sy
   d6388:	2301      	movs	r3, #1
   d638a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d638c:	2000      	movs	r0, #0
   d638e:	f104 0308 	add.w	r3, r4, #8
   d6392:	f3bf 8f5f 	dmb	sy
   d6396:	e853 6f00 	ldrex	r6, [r3]
   d639a:	e843 0200 	strex	r2, r0, [r3]
   d639e:	2a00      	cmp	r2, #0
   d63a0:	d1f9      	bne.n	d6396 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d63a2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d63a6:	2e00      	cmp	r6, #0
   d63a8:	d049      	beq.n	d643e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d63aa:	f7ff fc27 	bl	d5bfc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d63ae:	b120      	cbz	r0, d63ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d63b0:	4629      	mov	r1, r5
   d63b2:	4630      	mov	r0, r6
   d63b4:	f7ff ff98 	bl	d62e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d63b8:	e03a      	b.n	d6430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d63ba:	4631      	mov	r1, r6
   d63bc:	a802      	add	r0, sp, #8
   d63be:	f7ff ffb3 	bl	d6328 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d63c2:	68e0      	ldr	r0, [r4, #12]
   d63c4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d63c8:	b108      	cbz	r0, d63ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d63ca:	f002 f921 	bl	d8610 <strdup>
   d63ce:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d63d0:	2010      	movs	r0, #16
   d63d2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d63d6:	f7fd fe60 	bl	d409a <_Znwj>
   d63da:	4605      	mov	r5, r0
   d63dc:	b1e8      	cbz	r0, d641a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63de:	2700      	movs	r7, #0
   d63e0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63e2:	2018      	movs	r0, #24
   d63e4:	f7fd fe59 	bl	d409a <_Znwj>
   d63e8:	4604      	mov	r4, r0
   d63ea:	b188      	cbz	r0, d6410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d63ec:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63ee:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d63f0:	a802      	add	r0, sp, #8
   d63f2:	f7ff ff54 	bl	d629e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63f6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d63f8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d63fa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63fc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d63fe:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6400:	a906      	add	r1, sp, #24
   d6402:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6404:	60e3      	str	r3, [r4, #12]
   d6406:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d640a:	9205      	str	r2, [sp, #20]
   d640c:	f7ff feb2 	bl	d6174 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6410:	4b0d      	ldr	r3, [pc, #52]	; (d6448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6412:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6414:	4b0d      	ldr	r3, [pc, #52]	; (d644c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6416:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6418:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d641a:	a806      	add	r0, sp, #24
   d641c:	f7ff feb9 	bl	d6192 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6420:	a802      	add	r0, sp, #8
   d6422:	f7ff fe9e 	bl	d6162 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6426:	2200      	movs	r2, #0
   d6428:	4629      	mov	r1, r5
   d642a:	4809      	ldr	r0, [pc, #36]	; (d6450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d642c:	f7ff fbee 	bl	d5c0c <application_thread_invoke>
   d6430:	4630      	mov	r0, r6
   d6432:	f7ff fe96 	bl	d6162 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6436:	2110      	movs	r1, #16
   d6438:	4630      	mov	r0, r6
   d643a:	f001 fa10 	bl	d785e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d643e:	4668      	mov	r0, sp
   d6440:	f7ff fea7 	bl	d6192 <_ZN8particle5ErrorD1Ev>
    }
   d6444:	b009      	add	sp, #36	; 0x24
   d6446:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6448:	000d62fb 	.word	0x000d62fb
   d644c:	000d6571 	.word	0x000d6571
   d6450:	000d5e6b 	.word	0x000d5e6b

000d6454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6458:	b08b      	sub	sp, #44	; 0x2c
   d645a:	4606      	mov	r6, r0
   d645c:	460f      	mov	r7, r1
   d645e:	4690      	mov	r8, r2
   d6460:	4699      	mov	r9, r3
   d6462:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6466:	f7ff fc31 	bl	d5ccc <spark_cloud_flag_connected>
   d646a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d646c:	4683      	mov	fp, r0
   d646e:	bb30      	cbnz	r0, d64be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6470:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6474:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6476:	a905      	add	r1, sp, #20
   d6478:	4628      	mov	r0, r5
   d647a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d647e:	f7ff fe79 	bl	d6174 <_ZN8particle5ErrorC1EOS0_>
   d6482:	2014      	movs	r0, #20
   d6484:	f7fd fe09 	bl	d409a <_Znwj>
   d6488:	4604      	mov	r4, r0
   d648a:	b158      	cbz	r0, d64a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d648c:	2302      	movs	r3, #2
   d648e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6490:	2301      	movs	r3, #1
   d6492:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6494:	f8c0 b004 	str.w	fp, [r0, #4]
   d6498:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d649c:	4629      	mov	r1, r5
   d649e:	300c      	adds	r0, #12
   d64a0:	f7ff fe68 	bl	d6174 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d64a4:	4630      	mov	r0, r6
   d64a6:	4621      	mov	r1, r4
   d64a8:	f840 4b04 	str.w	r4, [r0], #4
   d64ac:	f7ff ff08 	bl	d62c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d64b0:	4628      	mov	r0, r5
   d64b2:	f7ff fe6e 	bl	d6192 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d64b6:	a805      	add	r0, sp, #20
   d64b8:	f7ff fe6b 	bl	d6192 <_ZN8particle5ErrorD1Ev>
   d64bc:	e052      	b.n	d6564 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d64be:	2400      	movs	r4, #0
   d64c0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d64c2:	2014      	movs	r0, #20
   d64c4:	606c      	str	r4, [r5, #4]
   d64c6:	60ac      	str	r4, [r5, #8]
   d64c8:	9307      	str	r3, [sp, #28]
   d64ca:	f7fd fde6 	bl	d409a <_Znwj>
   d64ce:	4601      	mov	r1, r0
   d64d0:	b118      	cbz	r0, d64da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d64d2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d64d4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d64d6:	6044      	str	r4, [r0, #4]
   d64d8:	6084      	str	r4, [r0, #8]
   d64da:	a804      	add	r0, sp, #16
   d64dc:	9103      	str	r1, [sp, #12]
   d64de:	f7ff feef 	bl	d62c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d64e2:	4b22      	ldr	r3, [pc, #136]	; (d656c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d64e4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d64e6:	2008      	movs	r0, #8
   d64e8:	f7fd fdd7 	bl	d409a <_Znwj>
   d64ec:	4604      	mov	r4, r0
   d64ee:	b128      	cbz	r0, d64fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64f0:	9b03      	ldr	r3, [sp, #12]
   d64f2:	f840 3b04 	str.w	r3, [r0], #4
   d64f6:	a904      	add	r1, sp, #16
   d64f8:	f7ff fcd3 	bl	d5ea2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d64fc:	9500      	str	r5, [sp, #0]
   d64fe:	fa5f f38a 	uxtb.w	r3, sl
   d6502:	464a      	mov	r2, r9
   d6504:	4641      	mov	r1, r8
   d6506:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6508:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d650a:	f7ff fbef 	bl	d5cec <spark_send_event>
   d650e:	b920      	cbnz	r0, d651a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6510:	9b03      	ldr	r3, [sp, #12]
   d6512:	785b      	ldrb	r3, [r3, #1]
   d6514:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6518:	b183      	cbz	r3, d653c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d651a:	9b03      	ldr	r3, [sp, #12]
   d651c:	9305      	str	r3, [sp, #20]
   d651e:	a904      	add	r1, sp, #16
   d6520:	a806      	add	r0, sp, #24
   d6522:	f7ff fcbe 	bl	d5ea2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6526:	a905      	add	r1, sp, #20
   d6528:	4630      	mov	r0, r6
   d652a:	f7ff fe89 	bl	d6240 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d652e:	a806      	add	r0, sp, #24
   d6530:	f7fd ffb4 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6534:	a804      	add	r0, sp, #16
   d6536:	f7fd ffb1 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d653a:	e013      	b.n	d6564 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d653c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6540:	a905      	add	r1, sp, #20
   d6542:	a803      	add	r0, sp, #12
   d6544:	9205      	str	r2, [sp, #20]
   d6546:	f8ad 3018 	strh.w	r3, [sp, #24]
   d654a:	f7ff fefd 	bl	d6348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d654e:	a805      	add	r0, sp, #20
   d6550:	f7ff fe1f 	bl	d6192 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6554:	a805      	add	r0, sp, #20
   d6556:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6558:	f7ff fe83 	bl	d6262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d655c:	a806      	add	r0, sp, #24
   d655e:	f7fd ff9d 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6562:	e7da      	b.n	d651a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6564:	4630      	mov	r0, r6
   d6566:	b00b      	add	sp, #44	; 0x2c
   d6568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d656c:	000d66e1 	.word	0x000d66e1

000d6570 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6570:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6574:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6576:	d006      	beq.n	d6586 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6578:	2a03      	cmp	r2, #3
   d657a:	d017      	beq.n	d65ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d657c:	2a01      	cmp	r2, #1
   d657e:	d122      	bne.n	d65c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6580:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6582:	6003      	str	r3, [r0, #0]
	      break;
   d6584:	e01f      	b.n	d65c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6586:	2018      	movs	r0, #24
   d6588:	680e      	ldr	r6, [r1, #0]
   d658a:	f7fd fd86 	bl	d409a <_Znwj>
   d658e:	4605      	mov	r5, r0
   d6590:	b150      	cbz	r0, d65a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6592:	4631      	mov	r1, r6
   d6594:	f7ff fec8 	bl	d6328 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6598:	6930      	ldr	r0, [r6, #16]
   d659a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d659e:	b108      	cbz	r0, d65a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d65a0:	f002 f836 	bl	d8610 <strdup>
   d65a4:	6128      	str	r0, [r5, #16]
   d65a6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d65a8:	6025      	str	r5, [r4, #0]
   d65aa:	e00c      	b.n	d65c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d65ac:	6804      	ldr	r4, [r0, #0]
   d65ae:	b154      	cbz	r4, d65c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d65b0:	f104 0010 	add.w	r0, r4, #16
   d65b4:	f7ff fded 	bl	d6192 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65b8:	4620      	mov	r0, r4
   d65ba:	f7ff fdd2 	bl	d6162 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d65be:	2118      	movs	r1, #24
   d65c0:	4620      	mov	r0, r4
   d65c2:	f001 f94c 	bl	d785e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d65c6:	2000      	movs	r0, #0
   d65c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65ca <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65ca:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65cc:	2300      	movs	r3, #0
   d65ce:	6083      	str	r3, [r0, #8]
   d65d0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65d2:	4604      	mov	r4, r0
   d65d4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d65d6:	b12b      	cbz	r3, d65e4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65d8:	2202      	movs	r2, #2
   d65da:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d65dc:	68eb      	ldr	r3, [r5, #12]
   d65de:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d65e0:	68ab      	ldr	r3, [r5, #8]
   d65e2:	60a3      	str	r3, [r4, #8]
	}
    }
   d65e4:	4620      	mov	r0, r4
   d65e6:	bd38      	pop	{r3, r4, r5, pc}

000d65e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d65e8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d65ea:	b570      	push	{r4, r5, r6, lr}
   d65ec:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d65ee:	d006      	beq.n	d65fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d65f0:	2a03      	cmp	r2, #3
   d65f2:	d011      	beq.n	d6618 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d65f4:	2a01      	cmp	r2, #1
   d65f6:	d118      	bne.n	d662a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d65f8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d65fa:	6003      	str	r3, [r0, #0]
	      break;
   d65fc:	e015      	b.n	d662a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d65fe:	2014      	movs	r0, #20
   d6600:	680e      	ldr	r6, [r1, #0]
   d6602:	f7fd fd4a 	bl	d409a <_Znwj>
   d6606:	4605      	mov	r5, r0
   d6608:	b120      	cbz	r0, d6614 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d660a:	4631      	mov	r1, r6
   d660c:	f7ff ffdd 	bl	d65ca <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6610:	7c33      	ldrb	r3, [r6, #16]
   d6612:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6614:	6025      	str	r5, [r4, #0]
   d6616:	e008      	b.n	d662a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6618:	6804      	ldr	r4, [r0, #0]
   d661a:	b134      	cbz	r4, d662a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d661c:	4620      	mov	r0, r4
   d661e:	f7ff fda0 	bl	d6162 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6622:	2114      	movs	r1, #20
   d6624:	4620      	mov	r0, r4
   d6626:	f001 f91a 	bl	d785e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d662a:	2000      	movs	r0, #0
   d662c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6630 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6630:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6632:	2300      	movs	r3, #0
   d6634:	b087      	sub	sp, #28
   d6636:	460c      	mov	r4, r1
   d6638:	f3bf 8f5f 	dmb	sy
   d663c:	e850 6f00 	ldrex	r6, [r0]
   d6640:	e840 3200 	strex	r2, r3, [r0]
   d6644:	2a00      	cmp	r2, #0
   d6646:	d1f9      	bne.n	d663c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6648:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d664c:	2e00      	cmp	r6, #0
   d664e:	d03f      	beq.n	d66d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6650:	4618      	mov	r0, r3
   d6652:	f7ff fad3 	bl	d5bfc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6656:	4607      	mov	r7, r0
   d6658:	b120      	cbz	r0, d6664 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d665a:	4621      	mov	r1, r4
   d665c:	4630      	mov	r0, r6
   d665e:	f7ff fe53 	bl	d6308 <_ZNKSt8functionIFvRKbEEclES1_>
   d6662:	e02e      	b.n	d66c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6664:	4631      	mov	r1, r6
   d6666:	a801      	add	r0, sp, #4
   d6668:	f7ff ffaf 	bl	d65ca <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d666c:	7823      	ldrb	r3, [r4, #0]
   d666e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6672:	2010      	movs	r0, #16
   d6674:	f7fd fd11 	bl	d409a <_Znwj>
   d6678:	4605      	mov	r5, r0
   d667a:	b1d0      	cbz	r0, d66b2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d667c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d667e:	2014      	movs	r0, #20
   d6680:	f7fd fd0b 	bl	d409a <_Znwj>
   d6684:	4604      	mov	r4, r0
   d6686:	b178      	cbz	r0, d66a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6688:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d668a:	4601      	mov	r1, r0
   d668c:	a801      	add	r0, sp, #4
   d668e:	f7ff fe06 	bl	d629e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6692:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6694:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6696:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6698:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d669a:	9203      	str	r2, [sp, #12]
   d669c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d669e:	60e3      	str	r3, [r4, #12]
   d66a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d66a4:	9204      	str	r2, [sp, #16]
   d66a6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d66a8:	4b0a      	ldr	r3, [pc, #40]	; (d66d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d66aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d66ac:	4b0a      	ldr	r3, [pc, #40]	; (d66d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66ae:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d66b0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d66b2:	a801      	add	r0, sp, #4
   d66b4:	f7ff fd55 	bl	d6162 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d66b8:	2200      	movs	r2, #0
   d66ba:	4629      	mov	r1, r5
   d66bc:	4807      	ldr	r0, [pc, #28]	; (d66dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d66be:	f7ff faa5 	bl	d5c0c <application_thread_invoke>
   d66c2:	4630      	mov	r0, r6
   d66c4:	f7ff fd4d 	bl	d6162 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d66c8:	2110      	movs	r1, #16
   d66ca:	4630      	mov	r0, r6
   d66cc:	f001 f8c7 	bl	d785e <_ZdlPvj>
        }
    }
   d66d0:	b007      	add	sp, #28
   d66d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d66d4:	000d631b 	.word	0x000d631b
   d66d8:	000d65e9 	.word	0x000d65e9
   d66dc:	000d5e6b 	.word	0x000d5e6b

000d66e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d66e0:	b530      	push	{r4, r5, lr}
   d66e2:	b085      	sub	sp, #20
   d66e4:	4604      	mov	r4, r0
   d66e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d66e8:	4668      	mov	r0, sp
   d66ea:	4611      	mov	r1, r2
   d66ec:	f7ff fdb9 	bl	d6262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d66f0:	b17c      	cbz	r4, d6712 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d66f2:	b224      	sxth	r4, r4
   d66f4:	4628      	mov	r0, r5
   d66f6:	b10d      	cbz	r5, d66fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d66f8:	f001 ff8a 	bl	d8610 <strdup>
   d66fc:	9002      	str	r0, [sp, #8]
   d66fe:	a902      	add	r1, sp, #8
   d6700:	4668      	mov	r0, sp
   d6702:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6706:	f7ff fe1f 	bl	d6348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d670a:	a802      	add	r0, sp, #8
   d670c:	f7ff fd41 	bl	d6192 <_ZN8particle5ErrorD1Ev>
   d6710:	e01d      	b.n	d674e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6712:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6714:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6718:	f04f 0201 	mov.w	r2, #1
   d671c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6720:	42a3      	cmp	r3, r4
   d6722:	d103      	bne.n	d672c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6724:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6728:	2900      	cmp	r1, #0
   d672a:	d1f7      	bne.n	d671c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d672c:	d002      	beq.n	d6734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d672e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6732:	e00c      	b.n	d674e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6734:	f110 010c 	adds.w	r1, r0, #12
   d6738:	f04f 0301 	mov.w	r3, #1
   d673c:	bf18      	it	ne
   d673e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6740:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6744:	3004      	adds	r0, #4
   d6746:	f800 3c03 	strb.w	r3, [r0, #-3]
   d674a:	f7ff ff71 	bl	d6630 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d674e:	a801      	add	r0, sp, #4
   d6750:	f7fd fea4 	bl	d449c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6754:	b005      	add	sp, #20
   d6756:	bd30      	pop	{r4, r5, pc}

000d6758 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6758:	2200      	movs	r2, #0
   d675a:	4611      	mov	r1, r2
   d675c:	6840      	ldr	r0, [r0, #4]
   d675e:	f7ff bb25 	b.w	d5dac <network_listening>

000d6762 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6762:	2200      	movs	r2, #0
   d6764:	4611      	mov	r1, r2
   d6766:	6840      	ldr	r0, [r0, #4]
   d6768:	f7ff bb30 	b.w	d5dcc <network_get_listen_timeout>

000d676c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d676c:	2200      	movs	r2, #0
   d676e:	6840      	ldr	r0, [r0, #4]
   d6770:	f7ff bb24 	b.w	d5dbc <network_set_listen_timeout>

000d6774 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6774:	2200      	movs	r2, #0
   d6776:	f081 0101 	eor.w	r1, r1, #1
   d677a:	6840      	ldr	r0, [r0, #4]
   d677c:	f7ff bb0e 	b.w	d5d9c <network_listen>

000d6780 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6780:	2300      	movs	r3, #0
   d6782:	461a      	mov	r2, r3
   d6784:	4619      	mov	r1, r3
   d6786:	6840      	ldr	r0, [r0, #4]
   d6788:	f7ff bb00 	b.w	d5d8c <network_off>

000d678c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d678c:	2300      	movs	r3, #0
   d678e:	461a      	mov	r2, r3
   d6790:	4619      	mov	r1, r3
   d6792:	6840      	ldr	r0, [r0, #4]
   d6794:	f7ff baf2 	b.w	d5d7c <network_on>

000d6798 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6798:	2200      	movs	r2, #0
   d679a:	4611      	mov	r1, r2
   d679c:	6840      	ldr	r0, [r0, #4]
   d679e:	f7ff bae5 	b.w	d5d6c <network_ready>

000d67a2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d67a2:	2200      	movs	r2, #0
   d67a4:	4611      	mov	r1, r2
   d67a6:	6840      	ldr	r0, [r0, #4]
   d67a8:	f7ff bad0 	b.w	d5d4c <network_connecting>

000d67ac <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d67ac:	2200      	movs	r2, #0
   d67ae:	2102      	movs	r1, #2
   d67b0:	6840      	ldr	r0, [r0, #4]
   d67b2:	f7ff bad3 	b.w	d5d5c <network_disconnect>

000d67b6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d67b6:	2300      	movs	r3, #0
   d67b8:	461a      	mov	r2, r3
   d67ba:	6840      	ldr	r0, [r0, #4]
   d67bc:	f7ff babe 	b.w	d5d3c <network_connect>

000d67c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d67c0:	4b02      	ldr	r3, [pc, #8]	; (d67cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d67c2:	2203      	movs	r2, #3
   d67c4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d67c6:	4a02      	ldr	r2, [pc, #8]	; (d67d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d67c8:	601a      	str	r2, [r3, #0]
   d67ca:	4770      	bx	lr
   d67cc:	2003e360 	.word	0x2003e360
   d67d0:	000d9504 	.word	0x000d9504

000d67d4 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d67d4:	6800      	ldr	r0, [r0, #0]
   d67d6:	f000 b8f6 	b.w	d69c6 <_ZN7TwoWire4lockEv>

000d67da <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d67da:	b510      	push	{r4, lr}
   d67dc:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d67de:	6001      	str	r1, [r0, #0]
   d67e0:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d67e2:	b10a      	cbz	r2, d67e8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d67e4:	f7ff fff6 	bl	d67d4 <_ZN9FuelGauge4lockEv>
    }
}
   d67e8:	4620      	mov	r0, r4
   d67ea:	bd10      	pop	{r4, pc}

000d67ec <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d67ec:	b538      	push	{r3, r4, r5, lr}
   d67ee:	4604      	mov	r4, r0
   d67f0:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d67f2:	f000 ffe9 	bl	d77c8 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d67f6:	462a      	mov	r2, r5
   d67f8:	4601      	mov	r1, r0
   d67fa:	4620      	mov	r0, r4
   d67fc:	f7ff ffed 	bl	d67da <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6800:	4620      	mov	r0, r4
   d6802:	bd38      	pop	{r3, r4, r5, pc}

000d6804 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6804:	6800      	ldr	r0, [r0, #0]
   d6806:	f000 b8e7 	b.w	d69d8 <_ZN7TwoWire6unlockEv>

000d680a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d680a:	b510      	push	{r4, lr}
{
    if (lock_) {
   d680c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d680e:	4604      	mov	r4, r0
{
    if (lock_) {
   d6810:	b10b      	cbz	r3, d6816 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6812:	f7ff fff7 	bl	d6804 <_ZN9FuelGauge6unlockEv>
    }
}
   d6816:	4620      	mov	r0, r4
   d6818:	bd10      	pop	{r4, pc}

000d681a <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d681c:	4604      	mov	r4, r0
   d681e:	4616      	mov	r6, r2
   d6820:	461d      	mov	r5, r3
   d6822:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6824:	f7ff ffd6 	bl	d67d4 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d6828:	6820      	ldr	r0, [r4, #0]
   d682a:	2136      	movs	r1, #54	; 0x36
   d682c:	f000 f8bd 	bl	d69aa <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d6830:	6820      	ldr	r0, [r4, #0]
   d6832:	6803      	ldr	r3, [r0, #0]
   d6834:	4639      	mov	r1, r7
   d6836:	689b      	ldr	r3, [r3, #8]
   d6838:	4798      	blx	r3
    i2c_.endTransmission(true);
   d683a:	2101      	movs	r1, #1
   d683c:	6820      	ldr	r0, [r4, #0]
   d683e:	f000 f8b7 	bl	d69b0 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d6842:	2202      	movs	r2, #2
   d6844:	2136      	movs	r1, #54	; 0x36
   d6846:	2301      	movs	r3, #1
   d6848:	6820      	ldr	r0, [r4, #0]
   d684a:	f000 f895 	bl	d6978 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d684e:	6820      	ldr	r0, [r4, #0]
   d6850:	6803      	ldr	r3, [r0, #0]
   d6852:	695b      	ldr	r3, [r3, #20]
   d6854:	4798      	blx	r3
   d6856:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d6858:	6820      	ldr	r0, [r4, #0]
   d685a:	6803      	ldr	r3, [r0, #0]
   d685c:	695b      	ldr	r3, [r3, #20]
   d685e:	4798      	blx	r3
   d6860:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6862:	4620      	mov	r0, r4
}
   d6864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d6868:	f7ff bfcc 	b.w	d6804 <_ZN9FuelGauge6unlockEv>

000d686c <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d686c:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d686e:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6870:	2200      	movs	r2, #0
	byte LSB = 0;
   d6872:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6876:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d687a:	2104      	movs	r1, #4
   d687c:	f10d 0206 	add.w	r2, sp, #6
   d6880:	f7ff ffcb 	bl	d681a <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6884:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6888:	f001 faa2 	bl	d7dd0 <__aeabi_i2d>
   d688c:	2200      	movs	r2, #0
   d688e:	4b09      	ldr	r3, [pc, #36]	; (d68b4 <_ZN9FuelGauge6getSoCEv+0x48>)
   d6890:	f001 fb04 	bl	d7e9c <__aeabi_dmul>
   d6894:	f001 fd14 	bl	d82c0 <__aeabi_d2f>
   d6898:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d689c:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d68a0:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d68a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d68a8:	ee37 0a80 	vadd.f32	s0, s15, s0
   d68ac:	b003      	add	sp, #12
   d68ae:	f85d fb04 	ldr.w	pc, [sp], #4
   d68b2:	bf00      	nop
   d68b4:	3f700000 	.word	0x3f700000

000d68b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d68b8:	4770      	bx	lr

000d68ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d68ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68bc:	4606      	mov	r6, r0
   d68be:	4615      	mov	r5, r2
   d68c0:	460c      	mov	r4, r1
   d68c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d68c4:	42bc      	cmp	r4, r7
   d68c6:	d006      	beq.n	d68d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d68c8:	6833      	ldr	r3, [r6, #0]
   d68ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d68ce:	689b      	ldr	r3, [r3, #8]
   d68d0:	4630      	mov	r0, r6
   d68d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d68d4:	e7f6      	b.n	d68c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d68d6:	4628      	mov	r0, r5
   d68d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d68da:	2200      	movs	r2, #0
   d68dc:	7c00      	ldrb	r0, [r0, #16]
   d68de:	f7ff b875 	b.w	d59cc <HAL_I2C_Write_Data>

000d68e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d68e2:	2100      	movs	r1, #0
   d68e4:	7c00      	ldrb	r0, [r0, #16]
   d68e6:	f7ff b879 	b.w	d59dc <HAL_I2C_Available_Data>

000d68ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d68ea:	2100      	movs	r1, #0
   d68ec:	7c00      	ldrb	r0, [r0, #16]
   d68ee:	f7ff b87d 	b.w	d59ec <HAL_I2C_Read_Data>

000d68f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d68f2:	2100      	movs	r1, #0
   d68f4:	7c00      	ldrb	r0, [r0, #16]
   d68f6:	f7ff b881 	b.w	d59fc <HAL_I2C_Peek_Data>

000d68fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d68fa:	2100      	movs	r1, #0
   d68fc:	7c00      	ldrb	r0, [r0, #16]
   d68fe:	f7ff b885 	b.w	d5a0c <HAL_I2C_Flush_Data>

000d6902 <_ZN7TwoWireD0Ev>:
   d6902:	b510      	push	{r4, lr}
   d6904:	2114      	movs	r1, #20
   d6906:	4604      	mov	r4, r0
   d6908:	f000 ffa9 	bl	d785e <_ZdlPvj>
   d690c:	4620      	mov	r0, r4
   d690e:	bd10      	pop	{r4, pc}

000d6910 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6910:	b510      	push	{r4, lr}
   d6912:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6914:	2300      	movs	r3, #0
   d6916:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d691c:	60a3      	str	r3, [r4, #8]
   d691e:	4b04      	ldr	r3, [pc, #16]	; (d6930 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6920:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6922:	4608      	mov	r0, r1
   d6924:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6926:	4611      	mov	r1, r2
   d6928:	f7ff f880 	bl	d5a2c <HAL_I2C_Init>
}
   d692c:	4620      	mov	r0, r4
   d692e:	bd10      	pop	{r4, pc}
   d6930:	000d9538 	.word	0x000d9538

000d6934 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6934:	2300      	movs	r3, #0
   d6936:	461a      	mov	r2, r3
   d6938:	4619      	mov	r1, r3
   d693a:	7c00      	ldrb	r0, [r0, #16]
   d693c:	f7ff b82e 	b.w	d599c <HAL_I2C_Begin>

000d6940 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6940:	b570      	push	{r4, r5, r6, lr}
   d6942:	460c      	mov	r4, r1
   d6944:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6946:	2514      	movs	r5, #20
   d6948:	4606      	mov	r6, r0
   d694a:	462a      	mov	r2, r5
   d694c:	2100      	movs	r1, #0
   d694e:	a801      	add	r0, sp, #4
   d6950:	f001 fe1b 	bl	d858a <memset>
   d6954:	7823      	ldrb	r3, [r4, #0]
   d6956:	f88d 3008 	strb.w	r3, [sp, #8]
   d695a:	6863      	ldr	r3, [r4, #4]
   d695c:	9303      	str	r3, [sp, #12]
   d695e:	68e3      	ldr	r3, [r4, #12]
   d6960:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6962:	2200      	movs	r2, #0
   d6964:	7a23      	ldrb	r3, [r4, #8]
   d6966:	7c30      	ldrb	r0, [r6, #16]
   d6968:	f8ad 5004 	strh.w	r5, [sp, #4]
   d696c:	a901      	add	r1, sp, #4
   d696e:	9305      	str	r3, [sp, #20]
   d6970:	f7ff f874 	bl	d5a5c <HAL_I2C_Request_Data_Ex>
}
   d6974:	b006      	add	sp, #24
   d6976:	bd70      	pop	{r4, r5, r6, pc}

000d6978 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d697a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d697c:	f88d 1000 	strb.w	r1, [sp]
   d6980:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6984:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6986:	bf18      	it	ne
   d6988:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d698a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d698c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d698e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6992:	f7ff ffd5 	bl	d6940 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6996:	b005      	add	sp, #20
   d6998:	f85d fb04 	ldr.w	pc, [sp], #4

000d699c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d699c:	2301      	movs	r3, #1
   d699e:	f7ff bfeb 	b.w	d6978 <_ZN7TwoWire11requestFromEhjh>

000d69a2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d69a2:	2200      	movs	r2, #0
   d69a4:	7c00      	ldrb	r0, [r0, #16]
   d69a6:	f7ff b801 	b.w	d59ac <HAL_I2C_Begin_Transmission>

000d69aa <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d69aa:	b2c9      	uxtb	r1, r1
   d69ac:	f7ff bff9 	b.w	d69a2 <_ZN7TwoWire17beginTransmissionEh>

000d69b0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d69b0:	2200      	movs	r2, #0
   d69b2:	7c00      	ldrb	r0, [r0, #16]
   d69b4:	f7ff b802 	b.w	d59bc <HAL_I2C_End_Transmission>

000d69b8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d69b8:	2101      	movs	r1, #1
   d69ba:	f7ff bff9 	b.w	d69b0 <_ZN7TwoWire15endTransmissionEh>

000d69be <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d69be:	2100      	movs	r1, #0
   d69c0:	7c00      	ldrb	r0, [r0, #16]
   d69c2:	f7ff b82b 	b.w	d5a1c <HAL_I2C_Is_Enabled>

000d69c6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d69c6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d69c8:	2100      	movs	r1, #0
   d69ca:	7c00      	ldrb	r0, [r0, #16]
   d69cc:	f7ff f836 	bl	d5a3c <HAL_I2C_Acquire>
}
   d69d0:	fab0 f080 	clz	r0, r0
   d69d4:	0940      	lsrs	r0, r0, #5
   d69d6:	bd08      	pop	{r3, pc}

000d69d8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d69d8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d69da:	2100      	movs	r1, #0
   d69dc:	7c00      	ldrb	r0, [r0, #16]
   d69de:	f7ff f835 	bl	d5a4c <HAL_I2C_Release>
}
   d69e2:	fab0 f080 	clz	r0, r0
   d69e6:	0940      	lsrs	r0, r0, #5
   d69e8:	bd08      	pop	{r3, pc}

000d69ea <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d69ea:	4770      	bx	lr

000d69ec <_ZN9IPAddressD0Ev>:
   d69ec:	b510      	push	{r4, lr}
   d69ee:	2118      	movs	r1, #24
   d69f0:	4604      	mov	r4, r0
   d69f2:	f000 ff34 	bl	d785e <_ZdlPvj>
   d69f6:	4620      	mov	r0, r4
   d69f8:	bd10      	pop	{r4, pc}

000d69fa <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d69fa:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d69fc:	7d03      	ldrb	r3, [r0, #20]
   d69fe:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a00:	b08d      	sub	sp, #52	; 0x34
   d6a02:	460e      	mov	r6, r1
   d6a04:	f100 0704 	add.w	r7, r0, #4
   d6a08:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a0c:	d002      	beq.n	d6a14 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6a0e:	f100 0508 	add.w	r5, r0, #8
   d6a12:	e018      	b.n	d6a46 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a14:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a16:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a18:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a1c:	232f      	movs	r3, #47	; 0x2f
   d6a1e:	462a      	mov	r2, r5
   d6a20:	200a      	movs	r0, #10
   d6a22:	f7ff f823 	bl	d5a6c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6a26:	4628      	mov	r0, r5
   d6a28:	f001 fe0d 	bl	d8646 <strlen>
   d6a2c:	6833      	ldr	r3, [r6, #0]
   d6a2e:	4602      	mov	r2, r0
   d6a30:	68db      	ldr	r3, [r3, #12]
   d6a32:	4629      	mov	r1, r5
   d6a34:	4630      	mov	r0, r6
   d6a36:	4798      	blx	r3
   d6a38:	e00f      	b.n	d6a5a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6a3a:	b124      	cbz	r4, d6a46 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6a3c:	212e      	movs	r1, #46	; 0x2e
   d6a3e:	4630      	mov	r0, r6
   d6a40:	f000 f9d6 	bl	d6df0 <_ZN5Print5printEc>
   d6a44:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6a46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6a4a:	220a      	movs	r2, #10
   d6a4c:	4630      	mov	r0, r6
   d6a4e:	f000 f9e8 	bl	d6e22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a52:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a54:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a56:	d1f0      	bne.n	d6a3a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a58:	4620      	mov	r0, r4
    }
    return n;
}
   d6a5a:	b00d      	add	sp, #52	; 0x34
   d6a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6a60 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6a60:	b510      	push	{r4, lr}
   d6a62:	4b05      	ldr	r3, [pc, #20]	; (d6a78 <_ZN9IPAddressC1Ev+0x18>)
   d6a64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6a66:	2211      	movs	r2, #17
   d6a68:	f840 3b04 	str.w	r3, [r0], #4
   d6a6c:	2100      	movs	r1, #0
   d6a6e:	f001 fd8c 	bl	d858a <memset>
{
    clear();
}
   d6a72:	4620      	mov	r0, r4
   d6a74:	bd10      	pop	{r4, pc}
   d6a76:	bf00      	nop
   d6a78:	000d9560 	.word	0x000d9560

000d6a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6a7c:	4603      	mov	r3, r0
   d6a7e:	4a07      	ldr	r2, [pc, #28]	; (d6a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6a80:	b510      	push	{r4, lr}
   d6a82:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6a86:	f101 0210 	add.w	r2, r1, #16
   d6a8a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6a8e:	f843 4b04 	str.w	r4, [r3], #4
   d6a92:	4291      	cmp	r1, r2
   d6a94:	d1f9      	bne.n	d6a8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6a96:	780a      	ldrb	r2, [r1, #0]
   d6a98:	701a      	strb	r2, [r3, #0]
}
   d6a9a:	bd10      	pop	{r4, pc}
   d6a9c:	000d9560 	.word	0x000d9560

000d6aa0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6aa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6aa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6aa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6aaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6aae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6ab2:	2304      	movs	r3, #4
   d6ab4:	6041      	str	r1, [r0, #4]
   d6ab6:	7503      	strb	r3, [r0, #20]
   d6ab8:	bd10      	pop	{r4, pc}

000d6aba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6abc:	780d      	ldrb	r5, [r1, #0]
   d6abe:	788b      	ldrb	r3, [r1, #2]
   d6ac0:	784a      	ldrb	r2, [r1, #1]
   d6ac2:	78c9      	ldrb	r1, [r1, #3]
   d6ac4:	9100      	str	r1, [sp, #0]
   d6ac6:	4629      	mov	r1, r5
   d6ac8:	f7ff ffea 	bl	d6aa0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6acc:	b003      	add	sp, #12
   d6ace:	bd30      	pop	{r4, r5, pc}

000d6ad0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6ad0:	4b01      	ldr	r3, [pc, #4]	; (d6ad8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6ad2:	4a02      	ldr	r2, [pc, #8]	; (d6adc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6ad4:	601a      	str	r2, [r3, #0]
   d6ad6:	4770      	bx	lr
   d6ad8:	2003e368 	.word	0x2003e368
   d6adc:	000d95df 	.word	0x000d95df

000d6ae0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ae0:	2200      	movs	r2, #0
   d6ae2:	4611      	mov	r1, r2
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	f7ff b961 	b.w	d5dac <network_listening>

000d6aea <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6aea:	2200      	movs	r2, #0
   d6aec:	4611      	mov	r1, r2
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	f7ff b96c 	b.w	d5dcc <network_get_listen_timeout>

000d6af4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6af4:	2200      	movs	r2, #0
   d6af6:	6840      	ldr	r0, [r0, #4]
   d6af8:	f7ff b960 	b.w	d5dbc <network_set_listen_timeout>

000d6afc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6afc:	2200      	movs	r2, #0
   d6afe:	f081 0101 	eor.w	r1, r1, #1
   d6b02:	6840      	ldr	r0, [r0, #4]
   d6b04:	f7ff b94a 	b.w	d5d9c <network_listen>

000d6b08 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6b08:	2300      	movs	r3, #0
   d6b0a:	461a      	mov	r2, r3
   d6b0c:	2101      	movs	r1, #1
   d6b0e:	6840      	ldr	r0, [r0, #4]
   d6b10:	f7ff b93c 	b.w	d5d8c <network_off>

000d6b14 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6b14:	2300      	movs	r3, #0
   d6b16:	461a      	mov	r2, r3
   d6b18:	4619      	mov	r1, r3
   d6b1a:	6840      	ldr	r0, [r0, #4]
   d6b1c:	f7ff b92e 	b.w	d5d7c <network_on>

000d6b20 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6b20:	2200      	movs	r2, #0
   d6b22:	4611      	mov	r1, r2
   d6b24:	6840      	ldr	r0, [r0, #4]
   d6b26:	f7ff b921 	b.w	d5d6c <network_ready>

000d6b2a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	4611      	mov	r1, r2
   d6b2e:	6840      	ldr	r0, [r0, #4]
   d6b30:	f7ff b90c 	b.w	d5d4c <network_connecting>

000d6b34 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b34:	2200      	movs	r2, #0
   d6b36:	2102      	movs	r1, #2
   d6b38:	6840      	ldr	r0, [r0, #4]
   d6b3a:	f7ff b90f 	b.w	d5d5c <network_disconnect>

000d6b3e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b3e:	2300      	movs	r3, #0
   d6b40:	461a      	mov	r2, r3
   d6b42:	6840      	ldr	r0, [r0, #4]
   d6b44:	f7ff b8fa 	b.w	d5d3c <network_connect>

000d6b48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6b48:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b4a:	4605      	mov	r5, r0
   d6b4c:	b188      	cbz	r0, d6b72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b4e:	6804      	ldr	r4, [r0, #0]
   d6b50:	b14c      	cbz	r4, d6b66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6b52:	68a3      	ldr	r3, [r4, #8]
   d6b54:	b11b      	cbz	r3, d6b5e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b56:	2203      	movs	r2, #3
   d6b58:	4621      	mov	r1, r4
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b5e:	2110      	movs	r1, #16
   d6b60:	4620      	mov	r0, r4
   d6b62:	f000 fe7c 	bl	d785e <_ZdlPvj>
   d6b66:	4628      	mov	r0, r5
   d6b68:	2114      	movs	r1, #20
      }
   d6b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b6e:	f000 be76 	b.w	d785e <_ZdlPvj>
   d6b72:	bd38      	pop	{r3, r4, r5, pc}

000d6b74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6b74:	b110      	cbz	r0, d6b7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6b76:	6803      	ldr	r3, [r0, #0]
   d6b78:	685b      	ldr	r3, [r3, #4]
   d6b7a:	4718      	bx	r3
   d6b7c:	4770      	bx	lr

000d6b7e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6b7e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b80:	6803      	ldr	r3, [r0, #0]
   d6b82:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6b84:	b1bb      	cbz	r3, d6bb6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6b86:	6858      	ldr	r0, [r3, #4]
   d6b88:	f7fe fe40 	bl	d580c <os_thread_is_current>
   d6b8c:	b978      	cbnz	r0, d6bae <_ZN6ThreadD1Ev+0x30>
   d6b8e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6b90:	7c5a      	ldrb	r2, [r3, #17]
   d6b92:	b912      	cbnz	r2, d6b9a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6b94:	6858      	ldr	r0, [r3, #4]
   d6b96:	f7fe fe41 	bl	d581c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6b9a:	6823      	ldr	r3, [r4, #0]
   d6b9c:	6858      	ldr	r0, [r3, #4]
   d6b9e:	f7fe fe45 	bl	d582c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ba2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6ba4:	2300      	movs	r3, #0
   d6ba6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6ba8:	b128      	cbz	r0, d6bb6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6baa:	f7ff ffcd 	bl	d6b48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bae:	6820      	ldr	r0, [r4, #0]
   d6bb0:	b108      	cbz	r0, d6bb6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6bb2:	f7ff ffc9 	bl	d6b48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	bd10      	pop	{r4, pc}

000d6bba <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6bba:	b538      	push	{r3, r4, r5, lr}
   d6bbc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bbe:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6bc2:	b108      	cbz	r0, d6bc8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6bc4:	f7fd fa6d 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6bc8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6bcc:	b108      	cbz	r0, d6bd2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6bce:	f7fe fe3d 	bl	d584c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bd2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6bd6:	b135      	cbz	r5, d6be6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bd8:	4628      	mov	r0, r5
   d6bda:	f7ff ffd0 	bl	d6b7e <_ZN6ThreadD1Ev>
   d6bde:	2104      	movs	r1, #4
   d6be0:	4628      	mov	r0, r5
   d6be2:	f000 fe3c 	bl	d785e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6be6:	6820      	ldr	r0, [r4, #0]
   d6be8:	b108      	cbz	r0, d6bee <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6bea:	f7ff ffc3 	bl	d6b74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6bee:	4620      	mov	r0, r4
   d6bf0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6bf4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	4b04      	ldr	r3, [pc, #16]	; (d6c08 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6bf8:	4604      	mov	r4, r0
   d6bfa:	f840 3b08 	str.w	r3, [r0], #8
   d6bfe:	f7ff ffdc 	bl	d6bba <_ZN5spark11MeshPublishD1Ev>
   d6c02:	4620      	mov	r0, r4
   d6c04:	bd10      	pop	{r4, pc}
   d6c06:	bf00      	nop
   d6c08:	000d9650 	.word	0x000d9650

000d6c0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6c0c:	b538      	push	{r3, r4, r5, lr}
   d6c0e:	4c0e      	ldr	r4, [pc, #56]	; (d6c48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6c10:	4b0e      	ldr	r3, [pc, #56]	; (d6c4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6c12:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6c14:	2500      	movs	r5, #0
   d6c16:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6c18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6c1c:	6063      	str	r3, [r4, #4]
   d6c1e:	60a5      	str	r5, [r4, #8]
   d6c20:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6c24:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6c28:	f7fe fe08 	bl	d583c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6c2c:	4b08      	ldr	r3, [pc, #32]	; (d6c50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6c2e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c32:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6c36:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6c38:	4620      	mov	r0, r4
   d6c3a:	4a06      	ldr	r2, [pc, #24]	; (d6c54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6c3c:	4906      	ldr	r1, [pc, #24]	; (d6c58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6c42:	f000 be07 	b.w	d7854 <__aeabi_atexit>
   d6c46:	bf00      	nop
   d6c48:	2003e36c 	.word	0x2003e36c
   d6c4c:	000d9684 	.word	0x000d9684
   d6c50:	000d9650 	.word	0x000d9650
   d6c54:	2003e1cc 	.word	0x2003e1cc
   d6c58:	000d6bf5 	.word	0x000d6bf5

000d6c5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6c5c:	2300      	movs	r3, #0
   d6c5e:	461a      	mov	r2, r3
   d6c60:	6840      	ldr	r0, [r0, #4]
   d6c62:	f7ff b86b 	b.w	d5d3c <network_connect>

000d6c66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6c66:	2200      	movs	r2, #0
   d6c68:	2102      	movs	r1, #2
   d6c6a:	6840      	ldr	r0, [r0, #4]
   d6c6c:	f7ff b876 	b.w	d5d5c <network_disconnect>

000d6c70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6c70:	2200      	movs	r2, #0
   d6c72:	4611      	mov	r1, r2
   d6c74:	6840      	ldr	r0, [r0, #4]
   d6c76:	f7ff b869 	b.w	d5d4c <network_connecting>

000d6c7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6c7a:	2200      	movs	r2, #0
   d6c7c:	4611      	mov	r1, r2
   d6c7e:	6840      	ldr	r0, [r0, #4]
   d6c80:	f7ff b874 	b.w	d5d6c <network_ready>

000d6c84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6c84:	2300      	movs	r3, #0
   d6c86:	461a      	mov	r2, r3
   d6c88:	4619      	mov	r1, r3
   d6c8a:	6840      	ldr	r0, [r0, #4]
   d6c8c:	f7ff b876 	b.w	d5d7c <network_on>

000d6c90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6c90:	2300      	movs	r3, #0
   d6c92:	461a      	mov	r2, r3
   d6c94:	4619      	mov	r1, r3
   d6c96:	6840      	ldr	r0, [r0, #4]
   d6c98:	f7ff b878 	b.w	d5d8c <network_off>

000d6c9c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6c9c:	2200      	movs	r2, #0
   d6c9e:	f081 0101 	eor.w	r1, r1, #1
   d6ca2:	6840      	ldr	r0, [r0, #4]
   d6ca4:	f7ff b87a 	b.w	d5d9c <network_listen>

000d6ca8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6ca8:	2200      	movs	r2, #0
   d6caa:	6840      	ldr	r0, [r0, #4]
   d6cac:	f7ff b886 	b.w	d5dbc <network_set_listen_timeout>

000d6cb0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	4611      	mov	r1, r2
   d6cb4:	6840      	ldr	r0, [r0, #4]
   d6cb6:	f7ff b889 	b.w	d5dcc <network_get_listen_timeout>

000d6cba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6cba:	2200      	movs	r2, #0
   d6cbc:	4611      	mov	r1, r2
   d6cbe:	6840      	ldr	r0, [r0, #4]
   d6cc0:	f7ff b874 	b.w	d5dac <network_listening>

000d6cc4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6cc8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6cca:	b095      	sub	sp, #84	; 0x54
   d6ccc:	4616      	mov	r6, r2
   d6cce:	460d      	mov	r5, r1
   d6cd0:	4607      	mov	r7, r0
    IPAddress addr;
   d6cd2:	f7ff fec5 	bl	d6a60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6cd6:	4621      	mov	r1, r4
   d6cd8:	2220      	movs	r2, #32
   d6cda:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6cdc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6cde:	f001 fc54 	bl	d858a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6ce2:	2340      	movs	r3, #64	; 0x40
   d6ce4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6ce6:	4621      	mov	r1, r4
   d6ce8:	466b      	mov	r3, sp
   d6cea:	aa0c      	add	r2, sp, #48	; 0x30
   d6cec:	4630      	mov	r0, r6
   d6cee:	f7fe fecd 	bl	d5a8c <netdb_getaddrinfo>
    if (!r) {
   d6cf2:	4604      	mov	r4, r0
   d6cf4:	2800      	cmp	r0, #0
   d6cf6:	d144      	bne.n	d6d82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6cf8:	4602      	mov	r2, r0
   d6cfa:	2101      	movs	r1, #1
   d6cfc:	6868      	ldr	r0, [r5, #4]
   d6cfe:	f7ff f835 	bl	d5d6c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d02:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6d04:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d06:	4622      	mov	r2, r4
   d6d08:	6868      	ldr	r0, [r5, #4]
   d6d0a:	f7ff f82f 	bl	d5d6c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d0e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d10:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6d12:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d14:	2e00      	cmp	r6, #0
   d6d16:	d034      	beq.n	d6d82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6d18:	2900      	cmp	r1, #0
   d6d1a:	d132      	bne.n	d6d82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6d1c:	6873      	ldr	r3, [r6, #4]
   d6d1e:	2b02      	cmp	r3, #2
   d6d20:	d002      	beq.n	d6d28 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6d22:	2b0a      	cmp	r3, #10
   d6d24:	d009      	beq.n	d6d3a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6d26:	e02a      	b.n	d6d7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6d28:	f1b8 0f00 	cmp.w	r8, #0
   d6d2c:	d027      	beq.n	d6d7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6d2e:	6971      	ldr	r1, [r6, #20]
   d6d30:	4638      	mov	r0, r7
   d6d32:	3104      	adds	r1, #4
   d6d34:	f7ff fec1 	bl	d6aba <_ZN9IPAddressaSEPKh>
   d6d38:	e020      	b.n	d6d7c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6d3a:	f1b9 0f00 	cmp.w	r9, #0
   d6d3e:	d01e      	beq.n	d6d7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6d40:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6d42:	2211      	movs	r2, #17
   d6d44:	a801      	add	r0, sp, #4
   d6d46:	f001 fc20 	bl	d858a <memset>
                    a.v = 6;
   d6d4a:	2306      	movs	r3, #6
   d6d4c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6d50:	ad01      	add	r5, sp, #4
   d6d52:	f104 0308 	add.w	r3, r4, #8
   d6d56:	3418      	adds	r4, #24
   d6d58:	6818      	ldr	r0, [r3, #0]
   d6d5a:	6859      	ldr	r1, [r3, #4]
   d6d5c:	462a      	mov	r2, r5
   d6d5e:	c203      	stmia	r2!, {r0, r1}
   d6d60:	3308      	adds	r3, #8
   d6d62:	42a3      	cmp	r3, r4
   d6d64:	4615      	mov	r5, r2
   d6d66:	d1f7      	bne.n	d6d58 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6d68:	a901      	add	r1, sp, #4
   d6d6a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d6c:	ad07      	add	r5, sp, #28
   d6d6e:	f7ff fe85 	bl	d6a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d74:	1d3c      	adds	r4, r7, #4
   d6d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d78:	682b      	ldr	r3, [r5, #0]
   d6d7a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6d7c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d7e:	69f6      	ldr	r6, [r6, #28]
   d6d80:	e7c8      	b.n	d6d14 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6d82:	9800      	ldr	r0, [sp, #0]
   d6d84:	f7fe fe7a 	bl	d5a7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6d88:	4638      	mov	r0, r7
   d6d8a:	b015      	add	sp, #84	; 0x54
   d6d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6d90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6d90:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6d92:	4a03      	ldr	r2, [pc, #12]	; (d6da0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6d94:	601a      	str	r2, [r3, #0]
   d6d96:	2200      	movs	r2, #0
   d6d98:	605a      	str	r2, [r3, #4]
   d6d9a:	4770      	bx	lr
   d6d9c:	2003e540 	.word	0x2003e540
   d6da0:	000d9684 	.word	0x000d9684

000d6da4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6da6:	4606      	mov	r6, r0
   d6da8:	460d      	mov	r5, r1
   d6daa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6dac:	2400      	movs	r4, #0
  while (size--) {
   d6dae:	42bd      	cmp	r5, r7
   d6db0:	d00c      	beq.n	d6dcc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6db2:	6833      	ldr	r3, [r6, #0]
   d6db4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6db8:	689b      	ldr	r3, [r3, #8]
   d6dba:	4630      	mov	r0, r6
   d6dbc:	4798      	blx	r3
     if (chunk>=0)
   d6dbe:	2800      	cmp	r0, #0
   d6dc0:	db01      	blt.n	d6dc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6dc2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6dc4:	e7f3      	b.n	d6dae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6dc6:	2c00      	cmp	r4, #0
   d6dc8:	bf08      	it	eq
   d6dca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6dcc:	4620      	mov	r0, r4
   d6dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6dd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6dd0:	b570      	push	{r4, r5, r6, lr}
   d6dd2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6dd4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6dd6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6dd8:	b149      	cbz	r1, d6dee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6dda:	f001 fc34 	bl	d8646 <strlen>
   d6dde:	682b      	ldr	r3, [r5, #0]
   d6de0:	4602      	mov	r2, r0
   d6de2:	4621      	mov	r1, r4
   d6de4:	4628      	mov	r0, r5
   d6de6:	68db      	ldr	r3, [r3, #12]
    }
   d6de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6dec:	4718      	bx	r3
    }
   d6dee:	bd70      	pop	{r4, r5, r6, pc}

000d6df0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6df0:	6803      	ldr	r3, [r0, #0]
   d6df2:	689b      	ldr	r3, [r3, #8]
   d6df4:	4718      	bx	r3

000d6df6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6df6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6df8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6dfa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6dfc:	f7ff fff8 	bl	d6df0 <_ZN5Print5printEc>
  n += print('\n');
   d6e00:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6e02:	4604      	mov	r4, r0
  n += print('\n');
   d6e04:	4628      	mov	r0, r5
   d6e06:	f7ff fff3 	bl	d6df0 <_ZN5Print5printEc>
  return n;
}
   d6e0a:	4420      	add	r0, r4
   d6e0c:	bd38      	pop	{r3, r4, r5, pc}

000d6e0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6e0e:	b538      	push	{r3, r4, r5, lr}
   d6e10:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e12:	f7ff ffdd 	bl	d6dd0 <_ZN5Print5writeEPKc>
   d6e16:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6e18:	4628      	mov	r0, r5
   d6e1a:	f7ff ffec 	bl	d6df6 <_ZN5Print7printlnEv>
  return n;
}
   d6e1e:	4420      	add	r0, r4
   d6e20:	bd38      	pop	{r3, r4, r5, pc}

000d6e22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6e22:	b530      	push	{r4, r5, lr}
   d6e24:	b08b      	sub	sp, #44	; 0x2c
   d6e26:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6e28:	2100      	movs	r1, #0
   d6e2a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6e2e:	2a01      	cmp	r2, #1
   d6e30:	bf98      	it	ls
   d6e32:	220a      	movls	r2, #10
   d6e34:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6e38:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6e3c:	fb05 3312 	mls	r3, r5, r2, r3
   d6e40:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6e44:	2b09      	cmp	r3, #9
   d6e46:	bf94      	ite	ls
   d6e48:	3330      	addls	r3, #48	; 0x30
   d6e4a:	3337      	addhi	r3, #55	; 0x37
   d6e4c:	b2db      	uxtb	r3, r3
   d6e4e:	4621      	mov	r1, r4
   d6e50:	f804 3901 	strb.w	r3, [r4], #-1
   d6e54:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6e56:	2d00      	cmp	r5, #0
   d6e58:	d1ee      	bne.n	d6e38 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6e5a:	f7ff ffb9 	bl	d6dd0 <_ZN5Print5writeEPKc>
}
   d6e5e:	b00b      	add	sp, #44	; 0x2c
   d6e60:	bd30      	pop	{r4, r5, pc}

000d6e62 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6e62:	b510      	push	{r4, lr}
   d6e64:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e66:	f7ff f97c 	bl	d6162 <_ZNSt14_Function_baseD1Ev>
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	bd10      	pop	{r4, pc}
	...

000d6e70 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e70:	4803      	ldr	r0, [pc, #12]	; (d6e80 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6e72:	4a04      	ldr	r2, [pc, #16]	; (d6e84 <_GLOBAL__sub_I_RGB+0x14>)
   d6e74:	4904      	ldr	r1, [pc, #16]	; (d6e88 <_GLOBAL__sub_I_RGB+0x18>)
   d6e76:	2300      	movs	r3, #0
   d6e78:	6083      	str	r3, [r0, #8]
   d6e7a:	f000 bceb 	b.w	d7854 <__aeabi_atexit>
   d6e7e:	bf00      	nop
   d6e80:	2003e548 	.word	0x2003e548
   d6e84:	2003e1cc 	.word	0x2003e1cc
   d6e88:	000d6e63 	.word	0x000d6e63

000d6e8c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6e8c:	4770      	bx	lr

000d6e8e <_ZN8SPIClassD0Ev>:
   d6e8e:	b510      	push	{r4, lr}
   d6e90:	210c      	movs	r1, #12
   d6e92:	4604      	mov	r4, r0
   d6e94:	f000 fce3 	bl	d785e <_ZdlPvj>
   d6e98:	4620      	mov	r0, r4
   d6e9a:	bd10      	pop	{r4, pc}

000d6e9c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6e9c:	b510      	push	{r4, lr}
   d6e9e:	4b05      	ldr	r3, [pc, #20]	; (d6eb4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d6ea0:	6003      	str	r3, [r0, #0]
   d6ea2:	4604      	mov	r4, r0
{
    _spi = spi;
   d6ea4:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d6ea6:	4608      	mov	r0, r1
   d6ea8:	f7fe fdf8 	bl	d5a9c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6eac:	2300      	movs	r3, #0
   d6eae:	60a3      	str	r3, [r4, #8]
}
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	bd10      	pop	{r4, pc}
   d6eb4:	000d96b8 	.word	0x000d96b8

000d6eb8 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6eb8:	7900      	ldrb	r0, [r0, #4]
   d6eba:	f7fe bdf7 	b.w	d5aac <HAL_SPI_Is_Enabled>

000d6ebe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6ebe:	b510      	push	{r4, lr}
   d6ec0:	4604      	mov	r4, r0
{
	free(buffer);
   d6ec2:	6800      	ldr	r0, [r0, #0]
   d6ec4:	f7fe ff92 	bl	d5dec <free>
}
   d6ec8:	4620      	mov	r0, r4
   d6eca:	bd10      	pop	{r4, pc}

000d6ecc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6ecc:	b510      	push	{r4, lr}
   d6ece:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6ed0:	6800      	ldr	r0, [r0, #0]
   d6ed2:	b108      	cbz	r0, d6ed8 <_ZN6String10invalidateEv+0xc>
   d6ed4:	f7fe ff8a 	bl	d5dec <free>
	buffer = NULL;
   d6ed8:	2300      	movs	r3, #0
   d6eda:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6edc:	60a3      	str	r3, [r4, #8]
   d6ede:	6063      	str	r3, [r4, #4]
   d6ee0:	bd10      	pop	{r4, pc}

000d6ee2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6ee2:	b538      	push	{r3, r4, r5, lr}
   d6ee4:	4604      	mov	r4, r0
   d6ee6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6ee8:	6800      	ldr	r0, [r0, #0]
   d6eea:	3101      	adds	r1, #1
   d6eec:	f7fe ff86 	bl	d5dfc <realloc>
	if (newbuffer) {
   d6ef0:	b110      	cbz	r0, d6ef8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6ef2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6ef6:	2001      	movs	r0, #1
	}
	return 0;
}
   d6ef8:	bd38      	pop	{r3, r4, r5, pc}

000d6efa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6efa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6efc:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6efe:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6f00:	b113      	cbz	r3, d6f08 <_ZN6String7reserveEj+0xe>
   d6f02:	6843      	ldr	r3, [r0, #4]
   d6f04:	428b      	cmp	r3, r1
   d6f06:	d207      	bcs.n	d6f18 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6f08:	4620      	mov	r0, r4
   d6f0a:	f7ff ffea 	bl	d6ee2 <_ZN6String12changeBufferEj>
   d6f0e:	b120      	cbz	r0, d6f1a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6f10:	68a3      	ldr	r3, [r4, #8]
   d6f12:	b90b      	cbnz	r3, d6f18 <_ZN6String7reserveEj+0x1e>
   d6f14:	6822      	ldr	r2, [r4, #0]
   d6f16:	7013      	strb	r3, [r2, #0]
   d6f18:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6f1a:	bd10      	pop	{r4, pc}

000d6f1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6f1c:	b570      	push	{r4, r5, r6, lr}
   d6f1e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6f20:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6f22:	4604      	mov	r4, r0
   d6f24:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6f26:	f7ff ffe8 	bl	d6efa <_ZN6String7reserveEj>
   d6f2a:	b918      	cbnz	r0, d6f34 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6f2c:	4620      	mov	r0, r4
   d6f2e:	f7ff ffcd 	bl	d6ecc <_ZN6String10invalidateEv>
		return *this;
   d6f32:	e009      	b.n	d6f48 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6f34:	462a      	mov	r2, r5
   d6f36:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6f38:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6f3a:	6820      	ldr	r0, [r4, #0]
   d6f3c:	f001 fb1a 	bl	d8574 <memcpy>
	buffer[len] = 0;
   d6f40:	6822      	ldr	r2, [r4, #0]
   d6f42:	68a3      	ldr	r3, [r4, #8]
   d6f44:	2100      	movs	r1, #0
   d6f46:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6f48:	4620      	mov	r0, r4
   d6f4a:	bd70      	pop	{r4, r5, r6, pc}

000d6f4c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f4c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f4e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f50:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f52:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f54:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f56:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f58:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6f5a:	460d      	mov	r5, r1
   d6f5c:	b139      	cbz	r1, d6f6e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6f5e:	4608      	mov	r0, r1
   d6f60:	f001 fb71 	bl	d8646 <strlen>
   d6f64:	4629      	mov	r1, r5
   d6f66:	4602      	mov	r2, r0
   d6f68:	4620      	mov	r0, r4
   d6f6a:	f7ff ffd7 	bl	d6f1c <_ZN6String4copyEPKcj>
}
   d6f6e:	4620      	mov	r0, r4
   d6f70:	bd38      	pop	{r3, r4, r5, pc}

000d6f72 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6f72:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6f74:	b510      	push	{r4, lr}
   d6f76:	460b      	mov	r3, r1
   d6f78:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6f7a:	d007      	beq.n	d6f8c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6f7c:	6809      	ldr	r1, [r1, #0]
   d6f7e:	b119      	cbz	r1, d6f88 <_ZN6StringaSERKS_+0x16>
   d6f80:	689a      	ldr	r2, [r3, #8]
   d6f82:	f7ff ffcb 	bl	d6f1c <_ZN6String4copyEPKcj>
   d6f86:	e001      	b.n	d6f8c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6f88:	f7ff ffa0 	bl	d6ecc <_ZN6String10invalidateEv>

	return *this;
}
   d6f8c:	4620      	mov	r0, r4
   d6f8e:	bd10      	pop	{r4, pc}

000d6f90 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f90:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f92:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f94:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f96:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f98:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f9a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f9c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6f9e:	f7ff ffe8 	bl	d6f72 <_ZN6StringaSERKS_>
}
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	bd10      	pop	{r4, pc}

000d6fa6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6fa6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6fa8:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6faa:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6fac:	b912      	cbnz	r2, d6fb4 <_ZNK6String6equalsEPKc+0xe>
   d6fae:	b919      	cbnz	r1, d6fb8 <_ZNK6String6equalsEPKc+0x12>
   d6fb0:	2001      	movs	r0, #1
   d6fb2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6fb4:	b911      	cbnz	r1, d6fbc <_ZNK6String6equalsEPKc+0x16>
   d6fb6:	6803      	ldr	r3, [r0, #0]
   d6fb8:	7818      	ldrb	r0, [r3, #0]
   d6fba:	e002      	b.n	d6fc2 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6fbc:	6800      	ldr	r0, [r0, #0]
   d6fbe:	f001 fb15 	bl	d85ec <strcmp>
   d6fc2:	fab0 f080 	clz	r0, r0
   d6fc6:	0940      	lsrs	r0, r0, #5
}
   d6fc8:	bd08      	pop	{r3, pc}

000d6fca <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6fca:	b570      	push	{r4, r5, r6, lr}
   d6fcc:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6fce:	b19a      	cbz	r2, d6ff8 <_ZNK6String8getBytesEPhjj+0x2e>
   d6fd0:	b191      	cbz	r1, d6ff8 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6fd2:	6885      	ldr	r5, [r0, #8]
   d6fd4:	429d      	cmp	r5, r3
   d6fd6:	d802      	bhi.n	d6fde <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6fd8:	2300      	movs	r3, #0
   d6fda:	700b      	strb	r3, [r1, #0]
		return;
   d6fdc:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6fde:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6fe0:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6fe2:	6801      	ldr	r1, [r0, #0]
   d6fe4:	42ac      	cmp	r4, r5
   d6fe6:	bf28      	it	cs
   d6fe8:	462c      	movcs	r4, r5
   d6fea:	4419      	add	r1, r3
   d6fec:	4622      	mov	r2, r4
   d6fee:	4630      	mov	r0, r6
   d6ff0:	f001 fb46 	bl	d8680 <strncpy>
	buf[n] = 0;
   d6ff4:	2300      	movs	r3, #0
   d6ff6:	5533      	strb	r3, [r6, r4]
   d6ff8:	bd70      	pop	{r4, r5, r6, pc}

000d6ffa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6ffa:	b510      	push	{r4, lr}
   d6ffc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6ffe:	6800      	ldr	r0, [r0, #0]
   d7000:	b118      	cbz	r0, d700a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7002:	f7fe fef3 	bl	d5dec <free>
            wakeupSource_ = nullptr;
   d7006:	2300      	movs	r3, #0
   d7008:	6023      	str	r3, [r4, #0]
   d700a:	bd10      	pop	{r4, pc}

000d700c <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d700c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d700e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7012:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7014:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7016:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7018:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d701c:	f8c0 2006 	str.w	r2, [r0, #6]
   d7020:	889b      	ldrh	r3, [r3, #4]
   d7022:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7024:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d7026:	f7ff ffe8 	bl	d6ffa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d702a:	682b      	ldr	r3, [r5, #0]
   d702c:	b113      	cbz	r3, d7034 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d702e:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7030:	2300      	movs	r3, #0
   d7032:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d7034:	4620      	mov	r0, r4
   d7036:	bd38      	pop	{r3, r4, r5, pc}

000d7038 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d7038:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d703c:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d703e:	b90b      	cbnz	r3, d7044 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d7040:	680a      	ldr	r2, [r1, #0]
   d7042:	b19a      	cbz	r2, d706c <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d7044:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d7046:	b15c      	cbz	r4, d7060 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d7048:	88a2      	ldrh	r2, [r4, #4]
   d704a:	2a01      	cmp	r2, #1
   d704c:	d003      	beq.n	d7056 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d704e:	2a04      	cmp	r2, #4
   d7050:	d106      	bne.n	d7060 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d7052:	2202      	movs	r2, #2
   d7054:	e005      	b.n	d7062 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d7056:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d7058:	814c      	strh	r4, [r1, #10]
   d705a:	718a      	strb	r2, [r1, #6]
   d705c:	810b      	strh	r3, [r1, #8]
                    break;
   d705e:	e005      	b.n	d706c <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7060:	2204      	movs	r2, #4
   d7062:	810b      	strh	r3, [r1, #8]
   d7064:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7068:	718a      	strb	r2, [r1, #6]
   d706a:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d706c:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d7070:	6003      	str	r3, [r0, #0]
   d7072:	888b      	ldrh	r3, [r1, #4]
   d7074:	8083      	strh	r3, [r0, #4]
    }
   d7076:	bd10      	pop	{r4, pc}

000d7078 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d7078:	4601      	mov	r1, r0
   d707a:	2200      	movs	r2, #0
   d707c:	208c      	movs	r0, #140	; 0x8c
   d707e:	f7fe bbf5 	b.w	d586c <HAL_Core_System_Reset_Ex>

000d7082 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d7082:	2000      	movs	r0, #0
   d7084:	f7ff bff8 	b.w	d7078 <_ZN11SystemClass5resetEm>

000d7088 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d7088:	b530      	push	{r4, r5, lr}
   d708a:	4604      	mov	r4, r0
   d708c:	b085      	sub	sp, #20
   d708e:	4608      	mov	r0, r1
   d7090:	4611      	mov	r1, r2
   d7092:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d7094:	2300      	movs	r3, #0
   d7096:	f7fe fda1 	bl	d5bdc <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d709a:	4d0d      	ldr	r5, [pc, #52]	; (d70d0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d709c:	f8ad 000c 	strh.w	r0, [sp, #12]
   d70a0:	2300      	movs	r3, #0
   d70a2:	a901      	add	r1, sp, #4
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	f8ad 3008 	strh.w	r3, [sp, #8]
   d70aa:	f88d 300a 	strb.w	r3, [sp, #10]
   d70ae:	4628      	mov	r0, r5
   d70b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d70b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   d70b8:	f7ff ffa8 	bl	d700c <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d70bc:	a801      	add	r0, sp, #4
   d70be:	f7ff ff9c 	bl	d6ffa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d70c2:	4620      	mov	r0, r4
   d70c4:	4629      	mov	r1, r5
   d70c6:	f7ff ffb7 	bl	d7038 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d70ca:	4620      	mov	r0, r4
   d70cc:	b005      	add	sp, #20
   d70ce:	bd30      	pop	{r4, r5, pc}
   d70d0:	2003e558 	.word	0x2003e558

000d70d4 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d70d4:	b510      	push	{r4, lr}
   d70d6:	2400      	movs	r4, #0
   d70d8:	7004      	strb	r4, [r0, #0]
   d70da:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d70dc:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d70de:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d70e2:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d70e4:	dd07      	ble.n	d70f6 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d70e6:	3901      	subs	r1, #1
   d70e8:	4299      	cmp	r1, r3
   d70ea:	d209      	bcs.n	d7100 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d70ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d70f0:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d70f2:	2301      	movs	r3, #1
   d70f4:	e001      	b.n	d70fa <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d70f6:	d102      	bne.n	d70fe <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d70f8:	2302      	movs	r3, #2
   d70fa:	7003      	strb	r3, [r0, #0]
   d70fc:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d70fe:	8041      	strh	r1, [r0, #2]
    }
}
   d7100:	bd10      	pop	{r4, pc}
	...

000d7104 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7104:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7106:	b08b      	sub	sp, #44	; 0x2c
   d7108:	4617      	mov	r7, r2
   d710a:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d710c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d710e:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7110:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7112:	2400      	movs	r4, #0
   d7114:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7116:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7118:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d711a:	9300      	str	r3, [sp, #0]
   d711c:	4639      	mov	r1, r7
   d711e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7120:	4630      	mov	r0, r6
   d7122:	f7fe fd97 	bl	d5c54 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d7126:	463b      	mov	r3, r7
   d7128:	4632      	mov	r2, r6
   d712a:	4601      	mov	r1, r0
   d712c:	a805      	add	r0, sp, #20
   d712e:	f7ff ffd1 	bl	d70d4 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d7132:	9407      	str	r4, [sp, #28]
   d7134:	f8ad 4020 	strh.w	r4, [sp, #32]
   d7138:	4c0d      	ldr	r4, [pc, #52]	; (d7170 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d713a:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d713e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d7142:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d7146:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d714a:	4620      	mov	r0, r4
   d714c:	a907      	add	r1, sp, #28
   d714e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d7152:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d7156:	f7ff ff59 	bl	d700c <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d715a:	a807      	add	r0, sp, #28
   d715c:	f7ff ff4d 	bl	d6ffa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d7160:	4628      	mov	r0, r5
   d7162:	4621      	mov	r1, r4
   d7164:	f7ff ff68 	bl	d7038 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d7168:	4628      	mov	r0, r5
   d716a:	b00b      	add	sp, #44	; 0x2c
   d716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d716e:	bf00      	nop
   d7170:	2003e558 	.word	0x2003e558

000d7174 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7174:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7176:	4c09      	ldr	r4, [pc, #36]	; (d719c <_GLOBAL__sub_I_System+0x28>)
   d7178:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d717a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d717e:	6020      	str	r0, [r4, #0]
   d7180:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7182:	71a0      	strb	r0, [r4, #6]
   d7184:	8120      	strh	r0, [r4, #8]
   d7186:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7188:	f7fe fd18 	bl	d5bbc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d718c:	4620      	mov	r0, r4
   d718e:	4a04      	ldr	r2, [pc, #16]	; (d71a0 <_GLOBAL__sub_I_System+0x2c>)
   d7190:	4904      	ldr	r1, [pc, #16]	; (d71a4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7196:	f000 bb5d 	b.w	d7854 <__aeabi_atexit>
   d719a:	bf00      	nop
   d719c:	2003e558 	.word	0x2003e558
   d71a0:	2003e1cc 	.word	0x2003e1cc
   d71a4:	000d40d5 	.word	0x000d40d5

000d71a8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d71a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d71aa:	4b14      	ldr	r3, [pc, #80]	; (d71fc <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d71ac:	4f14      	ldr	r7, [pc, #80]	; (d7200 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d71ae:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d71b0:	4b14      	ldr	r3, [pc, #80]	; (d7204 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d71b2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d71b4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d71b6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d71b8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d71ba:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d71bc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d71be:	d01b      	beq.n	d71f8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d71c0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d71c2:	ad01      	add	r5, sp, #4
   d71c4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d71c8:	f001 f8dc 	bl	d8384 <localtime>
	calendar_time->tm_year += 1900;
   d71cc:	6943      	ldr	r3, [r0, #20]
   d71ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d71d2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d71d4:	4604      	mov	r4, r0
   d71d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d71d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d71da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d71dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d71de:	f8d4 e000 	ldr.w	lr, [r4]
   d71e2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d71e6:	ad01      	add	r5, sp, #4
   d71e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71ea:	4c07      	ldr	r4, [pc, #28]	; (d7208 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d71ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d71f2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d71f4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d71f8:	b00b      	add	sp, #44	; 0x2c
   d71fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71fc:	2003e594 	.word	0x2003e594
   d7200:	2003e590 	.word	0x2003e590
   d7204:	2003e58c 	.word	0x2003e58c
   d7208:	2003e564 	.word	0x2003e564

000d720c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d720c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d720e:	2000      	movs	r0, #0
   d7210:	f7fe fd84 	bl	d5d1c <spark_sync_time_pending>
   d7214:	b128      	cbz	r0, d7222 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7216:	f7fe fd59 	bl	d5ccc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d721a:	f080 0001 	eor.w	r0, r0, #1
   d721e:	b2c0      	uxtb	r0, r0
   d7220:	bd08      	pop	{r3, pc}
   d7222:	2001      	movs	r0, #1
    }
   d7224:	bd08      	pop	{r3, pc}

000d7226 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7226:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7228:	2000      	movs	r0, #0
   d722a:	f7fe fb6f 	bl	d590c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d722e:	4604      	mov	r4, r0
   d7230:	b968      	cbnz	r0, d724e <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7232:	f7fe fcbb 	bl	d5bac <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7236:	2801      	cmp	r0, #1
   d7238:	d10b      	bne.n	d7252 <_ZN9TimeClass7isValidEv+0x2c>
   d723a:	4620      	mov	r0, r4
   d723c:	f7fe fcee 	bl	d5c1c <system_thread_get_state>
   d7240:	b938      	cbnz	r0, d7252 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7242:	f7ff ffe3 	bl	d720c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7246:	b930      	cbnz	r0, d7256 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7248:	f7fe fd28 	bl	d5c9c <spark_process>
   d724c:	e7f9      	b.n	d7242 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d724e:	2001      	movs	r0, #1
   d7250:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7252:	2000      	movs	r0, #0
   d7254:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7256:	f7ff ffd9 	bl	d720c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d725a:	2000      	movs	r0, #0
   d725c:	f7fe fb56 	bl	d590c <HAL_RTC_Time_Is_Valid>
   d7260:	3000      	adds	r0, #0
   d7262:	bf18      	it	ne
   d7264:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7266:	bd10      	pop	{r4, pc}

000d7268 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7268:	b508      	push	{r3, lr}
    (void)isValid();
   d726a:	f7ff ffdc 	bl	d7226 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d726e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7272:	f7fe bb23 	b.w	d58bc <HAL_RTC_Get_UnixTime>
	...

000d7278 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d7278:	b508      	push	{r3, lr}
	return hour(now());
   d727a:	f7ff fff5 	bl	d7268 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d727e:	f7ff ff93 	bl	d71a8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d7282:	4b01      	ldr	r3, [pc, #4]	; (d7288 <_ZN9TimeClass4hourEv+0x10>)
   d7284:	6898      	ldr	r0, [r3, #8]
   d7286:	bd08      	pop	{r3, pc}
   d7288:	2003e564 	.word	0x2003e564

000d728c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d728c:	b508      	push	{r3, lr}
	return minute(now());
   d728e:	f7ff ffeb 	bl	d7268 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7292:	f7ff ff89 	bl	d71a8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d7296:	4b01      	ldr	r3, [pc, #4]	; (d729c <_ZN9TimeClass6minuteEv+0x10>)
   d7298:	6858      	ldr	r0, [r3, #4]
   d729a:	bd08      	pop	{r3, pc}
   d729c:	2003e564 	.word	0x2003e564

000d72a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d72a0:	4b02      	ldr	r3, [pc, #8]	; (d72ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d72a2:	681a      	ldr	r2, [r3, #0]
   d72a4:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d72a6:	601a      	str	r2, [r3, #0]
   d72a8:	4770      	bx	lr
   d72aa:	bf00      	nop
   d72ac:	2003e114 	.word	0x2003e114
   d72b0:	2003e588 	.word	0x2003e588

000d72b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d72b4:	4770      	bx	lr

000d72b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d72b6:	7441      	strb	r1, [r0, #17]
   d72b8:	4770      	bx	lr

000d72ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d72ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d72bc:	7c00      	ldrb	r0, [r0, #16]
   d72be:	f7fe fc35 	bl	d5b2c <HAL_USART_Available_Data_For_Write>
}
   d72c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72c6:	bd08      	pop	{r3, pc}

000d72c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d72c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d72ca:	7c00      	ldrb	r0, [r0, #16]
   d72cc:	f7fe fc06 	bl	d5adc <HAL_USART_Available_Data>
}
   d72d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72d4:	bd08      	pop	{r3, pc}

000d72d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d72d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d72d8:	7c00      	ldrb	r0, [r0, #16]
   d72da:	f7fe fc0f 	bl	d5afc <HAL_USART_Peek_Data>
}
   d72de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d72e2:	bf28      	it	cs
   d72e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d72e8:	bd08      	pop	{r3, pc}

000d72ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d72ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d72ec:	7c00      	ldrb	r0, [r0, #16]
   d72ee:	f7fe fbfd 	bl	d5aec <HAL_USART_Read_Data>
}
   d72f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d72f6:	bf28      	it	cs
   d72f8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d72fc:	bd08      	pop	{r3, pc}

000d72fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d72fe:	7c00      	ldrb	r0, [r0, #16]
   d7300:	f7fe bc04 	b.w	d5b0c <HAL_USART_Flush_Data>

000d7304 <_ZN11USARTSerialD0Ev>:
   d7304:	b510      	push	{r4, lr}
   d7306:	2114      	movs	r1, #20
   d7308:	4604      	mov	r4, r0
   d730a:	f000 faa8 	bl	d785e <_ZdlPvj>
   d730e:	4620      	mov	r0, r4
   d7310:	bd10      	pop	{r4, pc}

000d7312 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7312:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7314:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7316:	4604      	mov	r4, r0
   d7318:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d731a:	b925      	cbnz	r5, d7326 <_ZN11USARTSerial5writeEh+0x14>
   d731c:	7c00      	ldrb	r0, [r0, #16]
   d731e:	f7fe fc05 	bl	d5b2c <HAL_USART_Available_Data_For_Write>
   d7322:	2800      	cmp	r0, #0
   d7324:	dd05      	ble.n	d7332 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7326:	4631      	mov	r1, r6
   d7328:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d732a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d732e:	f7fe bbcd 	b.w	d5acc <HAL_USART_Write_Data>
  }
  return 0;
}
   d7332:	4628      	mov	r0, r5
   d7334:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7338 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7338:	b510      	push	{r4, lr}
   d733a:	4604      	mov	r4, r0
   d733c:	4608      	mov	r0, r1
   d733e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7340:	2200      	movs	r2, #0
   d7342:	6062      	str	r2, [r4, #4]
   d7344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7348:	60a2      	str	r2, [r4, #8]
   d734a:	4a05      	ldr	r2, [pc, #20]	; (d7360 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d734c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d734e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7350:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7352:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7354:	461a      	mov	r2, r3
   d7356:	f7fe fbb1 	bl	d5abc <HAL_USART_Init>
}
   d735a:	4620      	mov	r0, r4
   d735c:	bd10      	pop	{r4, pc}
   d735e:	bf00      	nop
   d7360:	000d96f0 	.word	0x000d96f0

000d7364 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7364:	7c00      	ldrb	r0, [r0, #16]
   d7366:	f7fe bbd9 	b.w	d5b1c <HAL_USART_Is_Enabled>
	...

000d736c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d736c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d736e:	4d0c      	ldr	r5, [pc, #48]	; (d73a0 <_Z22__fetch_global_Serial1v+0x34>)
   d7370:	6829      	ldr	r1, [r5, #0]
   d7372:	f011 0401 	ands.w	r4, r1, #1
   d7376:	d111      	bne.n	d739c <_Z22__fetch_global_Serial1v+0x30>
   d7378:	4628      	mov	r0, r5
   d737a:	f7fc fe94 	bl	d40a6 <__cxa_guard_acquire>
   d737e:	b168      	cbz	r0, d739c <_Z22__fetch_global_Serial1v+0x30>
   d7380:	4a08      	ldr	r2, [pc, #32]	; (d73a4 <_Z22__fetch_global_Serial1v+0x38>)
   d7382:	4b09      	ldr	r3, [pc, #36]	; (d73a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7384:	4809      	ldr	r0, [pc, #36]	; (d73ac <_Z22__fetch_global_Serial1v+0x40>)
   d7386:	4621      	mov	r1, r4
   d7388:	f7ff ffd6 	bl	d7338 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d738c:	4628      	mov	r0, r5
   d738e:	f7fc fe8f 	bl	d40b0 <__cxa_guard_release>
   d7392:	4a07      	ldr	r2, [pc, #28]	; (d73b0 <_Z22__fetch_global_Serial1v+0x44>)
   d7394:	4907      	ldr	r1, [pc, #28]	; (d73b4 <_Z22__fetch_global_Serial1v+0x48>)
   d7396:	4805      	ldr	r0, [pc, #20]	; (d73ac <_Z22__fetch_global_Serial1v+0x40>)
   d7398:	f000 fa5c 	bl	d7854 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d739c:	4803      	ldr	r0, [pc, #12]	; (d73ac <_Z22__fetch_global_Serial1v+0x40>)
   d739e:	bd38      	pop	{r3, r4, r5, pc}
   d73a0:	2003e630 	.word	0x2003e630
   d73a4:	2003e634 	.word	0x2003e634
   d73a8:	2003e5ac 	.word	0x2003e5ac
   d73ac:	2003e598 	.word	0x2003e598
   d73b0:	2003e1cc 	.word	0x2003e1cc
   d73b4:	000d72b5 	.word	0x000d72b5

000d73b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d73b8:	7441      	strb	r1, [r0, #17]
   d73ba:	4770      	bx	lr

000d73bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d73bc:	4770      	bx	lr

000d73be <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d73be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d73c0:	2100      	movs	r1, #0
   d73c2:	7c00      	ldrb	r0, [r0, #16]
   d73c4:	f7fe fbd2 	bl	d5b6c <HAL_USB_USART_Receive_Data>
}
   d73c8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d73cc:	bf28      	it	cs
   d73ce:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d73d2:	bd08      	pop	{r3, pc}

000d73d4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d73d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d73d6:	2101      	movs	r1, #1
   d73d8:	7c00      	ldrb	r0, [r0, #16]
   d73da:	f7fe fbc7 	bl	d5b6c <HAL_USB_USART_Receive_Data>
}
   d73de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d73e2:	bf28      	it	cs
   d73e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d73e8:	bd08      	pop	{r3, pc}

000d73ea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d73ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d73ec:	7c00      	ldrb	r0, [r0, #16]
   d73ee:	f7fe fbb5 	bl	d5b5c <HAL_USB_USART_Available_Data_For_Write>
}
   d73f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d73f6:	bd08      	pop	{r3, pc}

000d73f8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d73f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d73fa:	7c00      	ldrb	r0, [r0, #16]
   d73fc:	f7fe fba6 	bl	d5b4c <HAL_USB_USART_Available_Data>
}
   d7400:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7404:	bd08      	pop	{r3, pc}

000d7406 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7406:	7c00      	ldrb	r0, [r0, #16]
   d7408:	f7fe bbc0 	b.w	d5b8c <HAL_USB_USART_Flush_Data>

000d740c <_ZN9USBSerialD0Ev>:
   d740c:	b510      	push	{r4, lr}
   d740e:	2114      	movs	r1, #20
   d7410:	4604      	mov	r4, r0
   d7412:	f000 fa24 	bl	d785e <_ZdlPvj>
   d7416:	4620      	mov	r0, r4
   d7418:	bd10      	pop	{r4, pc}

000d741a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d741a:	b538      	push	{r3, r4, r5, lr}
   d741c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d741e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7420:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7422:	f7fe fb9b 	bl	d5b5c <HAL_USB_USART_Available_Data_For_Write>
   d7426:	2800      	cmp	r0, #0
   d7428:	dc01      	bgt.n	d742e <_ZN9USBSerial5writeEh+0x14>
   d742a:	7c60      	ldrb	r0, [r4, #17]
   d742c:	b128      	cbz	r0, d743a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d742e:	4629      	mov	r1, r5
   d7430:	7c20      	ldrb	r0, [r4, #16]
   d7432:	f7fe fba3 	bl	d5b7c <HAL_USB_USART_Send_Data>
   d7436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d743a:	bd38      	pop	{r3, r4, r5, pc}

000d743c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d743c:	b510      	push	{r4, lr}
   d743e:	4604      	mov	r4, r0
   d7440:	2300      	movs	r3, #0
   d7442:	6063      	str	r3, [r4, #4]
   d7444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7448:	60a3      	str	r3, [r4, #8]
   d744a:	4b05      	ldr	r3, [pc, #20]	; (d7460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d744c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d744e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7450:	4608      	mov	r0, r1
{
  _serial = serial;
   d7452:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7454:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7456:	4611      	mov	r1, r2
   d7458:	f7fe fb70 	bl	d5b3c <HAL_USB_USART_Init>
}
   d745c:	4620      	mov	r0, r4
   d745e:	bd10      	pop	{r4, pc}
   d7460:	000d9720 	.word	0x000d9720

000d7464 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7464:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7466:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7468:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d746a:	2100      	movs	r1, #0
   d746c:	f001 f88d 	bl	d858a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7470:	4620      	mov	r0, r4
   d7472:	bd10      	pop	{r4, pc}

000d7474 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7474:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7476:	4d0e      	ldr	r5, [pc, #56]	; (d74b0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7478:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d747a:	a801      	add	r0, sp, #4
   d747c:	f7ff fff2 	bl	d7464 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7480:	6829      	ldr	r1, [r5, #0]
   d7482:	f011 0401 	ands.w	r4, r1, #1
   d7486:	d110      	bne.n	d74aa <_Z16_fetch_usbserialv+0x36>
   d7488:	4628      	mov	r0, r5
   d748a:	f7fc fe0c 	bl	d40a6 <__cxa_guard_acquire>
   d748e:	b160      	cbz	r0, d74aa <_Z16_fetch_usbserialv+0x36>
   d7490:	aa01      	add	r2, sp, #4
   d7492:	4621      	mov	r1, r4
   d7494:	4807      	ldr	r0, [pc, #28]	; (d74b4 <_Z16_fetch_usbserialv+0x40>)
   d7496:	f7ff ffd1 	bl	d743c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d749a:	4628      	mov	r0, r5
   d749c:	f7fc fe08 	bl	d40b0 <__cxa_guard_release>
   d74a0:	4a05      	ldr	r2, [pc, #20]	; (d74b8 <_Z16_fetch_usbserialv+0x44>)
   d74a2:	4906      	ldr	r1, [pc, #24]	; (d74bc <_Z16_fetch_usbserialv+0x48>)
   d74a4:	4803      	ldr	r0, [pc, #12]	; (d74b4 <_Z16_fetch_usbserialv+0x40>)
   d74a6:	f000 f9d5 	bl	d7854 <__aeabi_atexit>
	return _usbserial;
}
   d74aa:	4802      	ldr	r0, [pc, #8]	; (d74b4 <_Z16_fetch_usbserialv+0x40>)
   d74ac:	b007      	add	sp, #28
   d74ae:	bd30      	pop	{r4, r5, pc}
   d74b0:	2003e6b8 	.word	0x2003e6b8
   d74b4:	2003e6bc 	.word	0x2003e6bc
   d74b8:	2003e1cc 	.word	0x2003e1cc
   d74bc:	000d73bd 	.word	0x000d73bd

000d74c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d74c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d74c2:	4b0c      	ldr	r3, [pc, #48]	; (d74f4 <serialEventRun+0x34>)
   d74c4:	b133      	cbz	r3, d74d4 <serialEventRun+0x14>
   d74c6:	f7ff ffd5 	bl	d7474 <_Z16_fetch_usbserialv>
   d74ca:	6803      	ldr	r3, [r0, #0]
   d74cc:	691b      	ldr	r3, [r3, #16]
   d74ce:	4798      	blx	r3
   d74d0:	2800      	cmp	r0, #0
   d74d2:	dc09      	bgt.n	d74e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d74d4:	4b08      	ldr	r3, [pc, #32]	; (d74f8 <serialEventRun+0x38>)
   d74d6:	b163      	cbz	r3, d74f2 <serialEventRun+0x32>
   d74d8:	f7ff ff48 	bl	d736c <_Z22__fetch_global_Serial1v>
   d74dc:	6803      	ldr	r3, [r0, #0]
   d74de:	691b      	ldr	r3, [r3, #16]
   d74e0:	4798      	blx	r3
   d74e2:	2800      	cmp	r0, #0
   d74e4:	dc03      	bgt.n	d74ee <serialEventRun+0x2e>
   d74e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d74e8:	f3af 8000 	nop.w
   d74ec:	e7f2      	b.n	d74d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d74ee:	f3af 8000 	nop.w
   d74f2:	bd08      	pop	{r3, pc}
	...

000d74fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d74fc:	b508      	push	{r3, lr}
	serialEventRun();
   d74fe:	f7ff ffdf 	bl	d74c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7502:	f7fe f9d3 	bl	d58ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7506:	4b01      	ldr	r3, [pc, #4]	; (d750c <_post_loop+0x10>)
   d7508:	6018      	str	r0, [r3, #0]
   d750a:	bd08      	pop	{r3, pc}
   d750c:	2003e6d8 	.word	0x2003e6d8

000d7510 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7510:	4802      	ldr	r0, [pc, #8]	; (d751c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7512:	4a03      	ldr	r2, [pc, #12]	; (d7520 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7514:	4903      	ldr	r1, [pc, #12]	; (d7524 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7516:	1a12      	subs	r2, r2, r0
   d7518:	f001 b82c 	b.w	d8574 <memcpy>
   d751c:	2003f400 	.word	0x2003f400
   d7520:	2003f404 	.word	0x2003f404
   d7524:	000d9990 	.word	0x000d9990

000d7528 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7528:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d752a:	2300      	movs	r3, #0
   d752c:	9300      	str	r3, [sp, #0]
   d752e:	461a      	mov	r2, r3
   d7530:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7534:	f7fe fb84 	bl	d5c40 <system_ctrl_set_result>
}
   d7538:	b003      	add	sp, #12
   d753a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7540 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7540:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7542:	8843      	ldrh	r3, [r0, #2]
   d7544:	2b0a      	cmp	r3, #10
   d7546:	d008      	beq.n	d755a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7548:	2b50      	cmp	r3, #80	; 0x50
   d754a:	d109      	bne.n	d7560 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d754c:	4b09      	ldr	r3, [pc, #36]	; (d7574 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d754e:	681b      	ldr	r3, [r3, #0]
   d7550:	b13b      	cbz	r3, d7562 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7552:	b003      	add	sp, #12
   d7554:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7558:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d755a:	f7ff ffe5 	bl	d7528 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d755e:	e006      	b.n	d756e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7560:	2300      	movs	r3, #0
   d7562:	9300      	str	r3, [sp, #0]
   d7564:	461a      	mov	r2, r3
   d7566:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d756a:	f7fe fb69 	bl	d5c40 <system_ctrl_set_result>
        break;
    }
}
   d756e:	b003      	add	sp, #12
   d7570:	f85d fb04 	ldr.w	pc, [sp], #4
   d7574:	2003e6d0 	.word	0x2003e6d0

000d7578 <module_user_init_hook>:

void module_user_init_hook()
{
   d7578:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d757a:	4c10      	ldr	r4, [pc, #64]	; (d75bc <module_user_init_hook+0x44>)
   d757c:	4d10      	ldr	r5, [pc, #64]	; (d75c0 <module_user_init_hook+0x48>)
   d757e:	6823      	ldr	r3, [r4, #0]
   d7580:	42ab      	cmp	r3, r5
   d7582:	4b10      	ldr	r3, [pc, #64]	; (d75c4 <module_user_init_hook+0x4c>)
   d7584:	bf0c      	ite	eq
   d7586:	2201      	moveq	r2, #1
   d7588:	2200      	movne	r2, #0
   d758a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d758c:	d002      	beq.n	d7594 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d758e:	f7ff ffbf 	bl	d7510 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7592:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7594:	f7fe f97a 	bl	d588c <HAL_RNG_GetRandomNumber>
   d7598:	4604      	mov	r4, r0
    srand(seed);
   d759a:	f000 ffff 	bl	d859c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d759e:	4b0a      	ldr	r3, [pc, #40]	; (d75c8 <module_user_init_hook+0x50>)
   d75a0:	b113      	cbz	r3, d75a8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d75a2:	4620      	mov	r0, r4
   d75a4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d75a8:	2100      	movs	r1, #0
   d75aa:	4807      	ldr	r0, [pc, #28]	; (d75c8 <module_user_init_hook+0x50>)
   d75ac:	f7fe fbbe 	bl	d5d2c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d75b0:	2100      	movs	r1, #0
   d75b2:	4806      	ldr	r0, [pc, #24]	; (d75cc <module_user_init_hook+0x54>)
}
   d75b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d75b8:	f7fe bb38 	b.w	d5c2c <system_ctrl_set_app_request_handler>
   d75bc:	2003f400 	.word	0x2003f400
   d75c0:	9a271c1e 	.word	0x9a271c1e
   d75c4:	2003e6d4 	.word	0x2003e6d4
   d75c8:	00000000 	.word	0x00000000
   d75cc:	000d7541 	.word	0x000d7541

000d75d0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d75d0:	b508      	push	{r3, lr}
   d75d2:	4b02      	ldr	r3, [pc, #8]	; (d75dc <spark_protocol_instance+0xc>)
   d75d4:	681b      	ldr	r3, [r3, #0]
   d75d6:	681b      	ldr	r3, [r3, #0]
   d75d8:	9301      	str	r3, [sp, #4]
   d75da:	bd08      	pop	{r3, pc}
   d75dc:	0003025c 	.word	0x0003025c

000d75e0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d75e0:	b508      	push	{r3, lr}
   d75e2:	4b02      	ldr	r3, [pc, #8]	; (d75ec <spark_protocol_set_product_id+0xc>)
   d75e4:	681b      	ldr	r3, [r3, #0]
   d75e6:	685b      	ldr	r3, [r3, #4]
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	bd08      	pop	{r3, pc}
   d75ec:	0003025c 	.word	0x0003025c

000d75f0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d75f0:	b508      	push	{r3, lr}
   d75f2:	4b02      	ldr	r3, [pc, #8]	; (d75fc <spark_protocol_set_product_firmware_version+0xc>)
   d75f4:	681b      	ldr	r3, [r3, #0]
   d75f6:	689b      	ldr	r3, [r3, #8]
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	0003025c 	.word	0x0003025c

000d7600 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7600:	b510      	push	{r4, lr}
   d7602:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7604:	f000 f906 	bl	d7814 <_ZN8particle7globals11instanceSpiEv>
   d7608:	f7ff fc56 	bl	d6eb8 <_ZN8SPIClass9isEnabledEv>
   d760c:	b128      	cbz	r0, d761a <pinAvailable+0x1a>
   d760e:	f1a4 030b 	sub.w	r3, r4, #11
   d7612:	2b02      	cmp	r3, #2
   d7614:	d801      	bhi.n	d761a <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d7616:	2000      	movs	r0, #0
   d7618:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d761a:	f000 f8af 	bl	d777c <_Z19__fetch_global_Wirev>
   d761e:	f7ff f9ce 	bl	d69be <_ZN7TwoWire9isEnabledEv>
   d7622:	b108      	cbz	r0, d7628 <pinAvailable+0x28>
   d7624:	2c01      	cmp	r4, #1
   d7626:	d9f6      	bls.n	d7616 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7628:	f7ff fea0 	bl	d736c <_Z22__fetch_global_Serial1v>
   d762c:	f7ff fe9a 	bl	d7364 <_ZN11USARTSerial9isEnabledEv>
   d7630:	b118      	cbz	r0, d763a <pinAvailable+0x3a>
   d7632:	f1a4 0309 	sub.w	r3, r4, #9
   d7636:	2b01      	cmp	r3, #1
   d7638:	d9ed      	bls.n	d7616 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d763a:	2c23      	cmp	r4, #35	; 0x23
   d763c:	bf8c      	ite	hi
   d763e:	2000      	movhi	r0, #0
   d7640:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7642:	bd10      	pop	{r4, pc}

000d7644 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7644:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7646:	b538      	push	{r3, r4, r5, lr}
   d7648:	4604      	mov	r4, r0
   d764a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d764c:	d80a      	bhi.n	d7664 <pinMode+0x20>
   d764e:	29ff      	cmp	r1, #255	; 0xff
   d7650:	d008      	beq.n	d7664 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7652:	f7ff ffd5 	bl	d7600 <pinAvailable>
   d7656:	b128      	cbz	r0, d7664 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7658:	4629      	mov	r1, r5
   d765a:	4620      	mov	r0, r4
}
   d765c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7660:	f7fe b974 	b.w	d594c <HAL_Pin_Mode>
   d7664:	bd38      	pop	{r3, r4, r5, pc}

000d7666 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7666:	b538      	push	{r3, r4, r5, lr}
   d7668:	4604      	mov	r4, r0
   d766a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d766c:	f7fe f976 	bl	d595c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7670:	28ff      	cmp	r0, #255	; 0xff
   d7672:	d010      	beq.n	d7696 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7674:	2806      	cmp	r0, #6
   d7676:	d804      	bhi.n	d7682 <digitalWrite+0x1c>
   d7678:	234d      	movs	r3, #77	; 0x4d
   d767a:	fa23 f000 	lsr.w	r0, r3, r0
   d767e:	07c3      	lsls	r3, r0, #31
   d7680:	d409      	bmi.n	d7696 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7682:	4620      	mov	r0, r4
   d7684:	f7ff ffbc 	bl	d7600 <pinAvailable>
   d7688:	b128      	cbz	r0, d7696 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d768a:	4629      	mov	r1, r5
   d768c:	4620      	mov	r0, r4
}
   d768e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7692:	f7fe b96b 	b.w	d596c <HAL_GPIO_Write>
   d7696:	bd38      	pop	{r3, r4, r5, pc}

000d7698 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7698:	b510      	push	{r4, lr}
   d769a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d769c:	f7fe f95e 	bl	d595c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d76a0:	3804      	subs	r0, #4
   d76a2:	b2c0      	uxtb	r0, r0
   d76a4:	2801      	cmp	r0, #1
   d76a6:	d908      	bls.n	d76ba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d76a8:	4620      	mov	r0, r4
   d76aa:	f7ff ffa9 	bl	d7600 <pinAvailable>
   d76ae:	b120      	cbz	r0, d76ba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d76b0:	4620      	mov	r0, r4
}
   d76b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d76b6:	f7fe b961 	b.w	d597c <HAL_GPIO_Read>
}
   d76ba:	2000      	movs	r0, #0
   d76bc:	bd10      	pop	{r4, pc}

000d76be <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d76be:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d76c0:	b510      	push	{r4, lr}
   d76c2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d76c4:	bf9c      	itt	ls
   d76c6:	340e      	addls	r4, #14
   d76c8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d76ca:	4620      	mov	r0, r4
   d76cc:	f7ff ff98 	bl	d7600 <pinAvailable>
   d76d0:	b150      	cbz	r0, d76e8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d76d2:	2103      	movs	r1, #3
   d76d4:	4620      	mov	r0, r4
   d76d6:	f7fe f931 	bl	d593c <HAL_Validate_Pin_Function>
   d76da:	2803      	cmp	r0, #3
   d76dc:	d104      	bne.n	d76e8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d76de:	4620      	mov	r0, r4
}
   d76e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d76e4:	f7fe b952 	b.w	d598c <HAL_ADC_Read>
}
   d76e8:	2000      	movs	r0, #0
   d76ea:	bd10      	pop	{r4, pc}

000d76ec <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d76ec:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d76ee:	4c07      	ldr	r4, [pc, #28]	; (d770c <_Z21__fetch_global_EEPROMv+0x20>)
   d76f0:	6823      	ldr	r3, [r4, #0]
   d76f2:	07db      	lsls	r3, r3, #31
   d76f4:	d408      	bmi.n	d7708 <_Z21__fetch_global_EEPROMv+0x1c>
   d76f6:	4620      	mov	r0, r4
   d76f8:	f7fc fcd5 	bl	d40a6 <__cxa_guard_acquire>
   d76fc:	b120      	cbz	r0, d7708 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d76fe:	f7fe f8e5 	bl	d58cc <HAL_EEPROM_Init>
   d7702:	4620      	mov	r0, r4
   d7704:	f7fc fcd4 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7708:	4801      	ldr	r0, [pc, #4]	; (d7710 <_Z21__fetch_global_EEPROMv+0x24>)
   d770a:	bd10      	pop	{r4, pc}
   d770c:	2003e6dc 	.word	0x2003e6dc
   d7710:	2003e6e0 	.word	0x2003e6e0

000d7714 <_Z17acquireWireBufferv>:
   d7714:	b570      	push	{r4, r5, r6, lr}
   d7716:	4604      	mov	r4, r0
   d7718:	2514      	movs	r5, #20
   d771a:	462a      	mov	r2, r5
   d771c:	4e09      	ldr	r6, [pc, #36]	; (d7744 <_Z17acquireWireBufferv+0x30>)
   d771e:	2100      	movs	r1, #0
   d7720:	f000 ff33 	bl	d858a <memset>
   d7724:	8025      	strh	r5, [r4, #0]
   d7726:	2520      	movs	r5, #32
   d7728:	4631      	mov	r1, r6
   d772a:	60a5      	str	r5, [r4, #8]
   d772c:	6125      	str	r5, [r4, #16]
   d772e:	4628      	mov	r0, r5
   d7730:	f000 f8af 	bl	d7892 <_ZnajRKSt9nothrow_t>
   d7734:	4631      	mov	r1, r6
   d7736:	6060      	str	r0, [r4, #4]
   d7738:	4628      	mov	r0, r5
   d773a:	f000 f8aa 	bl	d7892 <_ZnajRKSt9nothrow_t>
   d773e:	60e0      	str	r0, [r4, #12]
   d7740:	4620      	mov	r0, r4
   d7742:	bd70      	pop	{r4, r5, r6, pc}
   d7744:	000d9748 	.word	0x000d9748

000d7748 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d7748:	b570      	push	{r4, r5, r6, lr}
   d774a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d774c:	2514      	movs	r5, #20
   d774e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7750:	4e09      	ldr	r6, [pc, #36]	; (d7778 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7752:	2100      	movs	r1, #0
   d7754:	f000 ff19 	bl	d858a <memset>
   d7758:	8025      	strh	r5, [r4, #0]
   d775a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d775c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d775e:	60a5      	str	r5, [r4, #8]
   d7760:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7762:	4628      	mov	r0, r5
   d7764:	f000 f895 	bl	d7892 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7768:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d776a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d776c:	4628      	mov	r0, r5
   d776e:	f000 f890 	bl	d7892 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7772:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d7774:	4620      	mov	r0, r4
   d7776:	bd70      	pop	{r4, r5, r6, pc}
   d7778:	000d9748 	.word	0x000d9748

000d777c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d777c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d777e:	4d0e      	ldr	r5, [pc, #56]	; (d77b8 <_Z19__fetch_global_Wirev+0x3c>)
   d7780:	6829      	ldr	r1, [r5, #0]
   d7782:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7786:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7788:	d113      	bne.n	d77b2 <_Z19__fetch_global_Wirev+0x36>
   d778a:	4628      	mov	r0, r5
   d778c:	f7fc fc8b 	bl	d40a6 <__cxa_guard_acquire>
   d7790:	b178      	cbz	r0, d77b2 <_Z19__fetch_global_Wirev+0x36>
   d7792:	a801      	add	r0, sp, #4
   d7794:	f7ff ffbe 	bl	d7714 <_Z17acquireWireBufferv>
   d7798:	aa01      	add	r2, sp, #4
   d779a:	4621      	mov	r1, r4
   d779c:	4807      	ldr	r0, [pc, #28]	; (d77bc <_Z19__fetch_global_Wirev+0x40>)
   d779e:	f7ff f8b7 	bl	d6910 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d77a2:	4628      	mov	r0, r5
   d77a4:	f7fc fc84 	bl	d40b0 <__cxa_guard_release>
   d77a8:	4a05      	ldr	r2, [pc, #20]	; (d77c0 <_Z19__fetch_global_Wirev+0x44>)
   d77aa:	4906      	ldr	r1, [pc, #24]	; (d77c4 <_Z19__fetch_global_Wirev+0x48>)
   d77ac:	4803      	ldr	r0, [pc, #12]	; (d77bc <_Z19__fetch_global_Wirev+0x40>)
   d77ae:	f000 f851 	bl	d7854 <__aeabi_atexit>
	return wire;
}
   d77b2:	4802      	ldr	r0, [pc, #8]	; (d77bc <_Z19__fetch_global_Wirev+0x40>)
   d77b4:	b007      	add	sp, #28
   d77b6:	bd30      	pop	{r4, r5, pc}
   d77b8:	2003e6e4 	.word	0x2003e6e4
   d77bc:	2003e6fc 	.word	0x2003e6fc
   d77c0:	2003e1cc 	.word	0x2003e1cc
   d77c4:	000d68b9 	.word	0x000d68b9

000d77c8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d77c8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d77ca:	4c0e      	ldr	r4, [pc, #56]	; (d7804 <_Z20__fetch_global_Wire1v+0x3c>)
   d77cc:	6823      	ldr	r3, [r4, #0]
   d77ce:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d77d0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d77d2:	d413      	bmi.n	d77fc <_Z20__fetch_global_Wire1v+0x34>
   d77d4:	4620      	mov	r0, r4
   d77d6:	f7fc fc66 	bl	d40a6 <__cxa_guard_acquire>
   d77da:	b178      	cbz	r0, d77fc <_Z20__fetch_global_Wire1v+0x34>
   d77dc:	a801      	add	r0, sp, #4
   d77de:	f7ff ffb3 	bl	d7748 <_Z18acquireWire1Bufferv>
   d77e2:	aa01      	add	r2, sp, #4
   d77e4:	2101      	movs	r1, #1
   d77e6:	4808      	ldr	r0, [pc, #32]	; (d7808 <_Z20__fetch_global_Wire1v+0x40>)
   d77e8:	f7ff f892 	bl	d6910 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d77ec:	4620      	mov	r0, r4
   d77ee:	f7fc fc5f 	bl	d40b0 <__cxa_guard_release>
   d77f2:	4a06      	ldr	r2, [pc, #24]	; (d780c <_Z20__fetch_global_Wire1v+0x44>)
   d77f4:	4906      	ldr	r1, [pc, #24]	; (d7810 <_Z20__fetch_global_Wire1v+0x48>)
   d77f6:	4804      	ldr	r0, [pc, #16]	; (d7808 <_Z20__fetch_global_Wire1v+0x40>)
   d77f8:	f000 f82c 	bl	d7854 <__aeabi_atexit>
	return wire;
}
   d77fc:	4802      	ldr	r0, [pc, #8]	; (d7808 <_Z20__fetch_global_Wire1v+0x40>)
   d77fe:	b006      	add	sp, #24
   d7800:	bd10      	pop	{r4, pc}
   d7802:	bf00      	nop
   d7804:	2003e710 	.word	0x2003e710
   d7808:	2003e6e8 	.word	0x2003e6e8
   d780c:	2003e1cc 	.word	0x2003e1cc
   d7810:	000d68b9 	.word	0x000d68b9

000d7814 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d7814:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d7816:	4d0b      	ldr	r5, [pc, #44]	; (d7844 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d7818:	6829      	ldr	r1, [r5, #0]
   d781a:	f011 0401 	ands.w	r4, r1, #1
   d781e:	d10f      	bne.n	d7840 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7820:	4628      	mov	r0, r5
   d7822:	f7fc fc40 	bl	d40a6 <__cxa_guard_acquire>
   d7826:	b158      	cbz	r0, d7840 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7828:	4621      	mov	r1, r4
   d782a:	4807      	ldr	r0, [pc, #28]	; (d7848 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d782c:	f7ff fb36 	bl	d6e9c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7830:	4628      	mov	r0, r5
   d7832:	f7fc fc3d 	bl	d40b0 <__cxa_guard_release>
   d7836:	4a05      	ldr	r2, [pc, #20]	; (d784c <_ZN8particle7globals11instanceSpiEv+0x38>)
   d7838:	4905      	ldr	r1, [pc, #20]	; (d7850 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d783a:	4803      	ldr	r0, [pc, #12]	; (d7848 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d783c:	f000 f80a 	bl	d7854 <__aeabi_atexit>
    return instance;
}
   d7840:	4801      	ldr	r0, [pc, #4]	; (d7848 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7842:	bd38      	pop	{r3, r4, r5, pc}
   d7844:	2003e720 	.word	0x2003e720
   d7848:	2003e714 	.word	0x2003e714
   d784c:	2003e1cc 	.word	0x2003e1cc
   d7850:	000d6e8d 	.word	0x000d6e8d

000d7854 <__aeabi_atexit>:
   d7854:	460b      	mov	r3, r1
   d7856:	4601      	mov	r1, r0
   d7858:	4618      	mov	r0, r3
   d785a:	f000 bd85 	b.w	d8368 <__cxa_atexit>

000d785e <_ZdlPvj>:
   d785e:	f7fc bc1e 	b.w	d409e <_ZdlPv>
	...

000d7864 <_ZSt15get_new_handlerv>:
   d7864:	4b02      	ldr	r3, [pc, #8]	; (d7870 <_ZSt15get_new_handlerv+0xc>)
   d7866:	6818      	ldr	r0, [r3, #0]
   d7868:	f3bf 8f5f 	dmb	sy
   d786c:	4770      	bx	lr
   d786e:	bf00      	nop
   d7870:	2003e724 	.word	0x2003e724

000d7874 <_ZnwjRKSt9nothrow_t>:
   d7874:	b510      	push	{r4, lr}
   d7876:	2800      	cmp	r0, #0
   d7878:	bf14      	ite	ne
   d787a:	4604      	movne	r4, r0
   d787c:	2401      	moveq	r4, #1
   d787e:	4620      	mov	r0, r4
   d7880:	f7fe faac 	bl	d5ddc <malloc>
   d7884:	b920      	cbnz	r0, d7890 <_ZnwjRKSt9nothrow_t+0x1c>
   d7886:	f7ff ffed 	bl	d7864 <_ZSt15get_new_handlerv>
   d788a:	b108      	cbz	r0, d7890 <_ZnwjRKSt9nothrow_t+0x1c>
   d788c:	4780      	blx	r0
   d788e:	e7f6      	b.n	d787e <_ZnwjRKSt9nothrow_t+0xa>
   d7890:	bd10      	pop	{r4, pc}

000d7892 <_ZnajRKSt9nothrow_t>:
   d7892:	f7ff bfef 	b.w	d7874 <_ZnwjRKSt9nothrow_t>

000d7896 <_ZSt25__throw_bad_function_callv>:
   d7896:	b508      	push	{r3, lr}
   d7898:	f7fe fac8 	bl	d5e2c <abort>

000d789c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d789c:	4b24      	ldr	r3, [pc, #144]	; (d7930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d789e:	681a      	ldr	r2, [r3, #0]
   d78a0:	07d0      	lsls	r0, r2, #31
   d78a2:	bf5c      	itt	pl
   d78a4:	2201      	movpl	r2, #1
   d78a6:	601a      	strpl	r2, [r3, #0]
   d78a8:	4b22      	ldr	r3, [pc, #136]	; (d7934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d78aa:	681a      	ldr	r2, [r3, #0]
   d78ac:	07d1      	lsls	r1, r2, #31
   d78ae:	bf5c      	itt	pl
   d78b0:	2201      	movpl	r2, #1
   d78b2:	601a      	strpl	r2, [r3, #0]
   d78b4:	4b20      	ldr	r3, [pc, #128]	; (d7938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d78b6:	681a      	ldr	r2, [r3, #0]
   d78b8:	07d2      	lsls	r2, r2, #31
   d78ba:	bf5c      	itt	pl
   d78bc:	2201      	movpl	r2, #1
   d78be:	601a      	strpl	r2, [r3, #0]
   d78c0:	4b1e      	ldr	r3, [pc, #120]	; (d793c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d78c2:	681a      	ldr	r2, [r3, #0]
   d78c4:	07d0      	lsls	r0, r2, #31
   d78c6:	bf5c      	itt	pl
   d78c8:	2201      	movpl	r2, #1
   d78ca:	601a      	strpl	r2, [r3, #0]
   d78cc:	4b1c      	ldr	r3, [pc, #112]	; (d7940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d78ce:	681a      	ldr	r2, [r3, #0]
   d78d0:	07d1      	lsls	r1, r2, #31
   d78d2:	bf5c      	itt	pl
   d78d4:	2201      	movpl	r2, #1
   d78d6:	601a      	strpl	r2, [r3, #0]
   d78d8:	4b1a      	ldr	r3, [pc, #104]	; (d7944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d78da:	681a      	ldr	r2, [r3, #0]
   d78dc:	07d2      	lsls	r2, r2, #31
   d78de:	bf5c      	itt	pl
   d78e0:	2201      	movpl	r2, #1
   d78e2:	601a      	strpl	r2, [r3, #0]
   d78e4:	4b18      	ldr	r3, [pc, #96]	; (d7948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d78e6:	681a      	ldr	r2, [r3, #0]
   d78e8:	07d0      	lsls	r0, r2, #31
   d78ea:	bf5c      	itt	pl
   d78ec:	2201      	movpl	r2, #1
   d78ee:	601a      	strpl	r2, [r3, #0]
   d78f0:	4b16      	ldr	r3, [pc, #88]	; (d794c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d78f2:	681a      	ldr	r2, [r3, #0]
   d78f4:	07d1      	lsls	r1, r2, #31
   d78f6:	bf5c      	itt	pl
   d78f8:	2201      	movpl	r2, #1
   d78fa:	601a      	strpl	r2, [r3, #0]
   d78fc:	4b14      	ldr	r3, [pc, #80]	; (d7950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d78fe:	681a      	ldr	r2, [r3, #0]
   d7900:	07d2      	lsls	r2, r2, #31
   d7902:	bf5c      	itt	pl
   d7904:	2201      	movpl	r2, #1
   d7906:	601a      	strpl	r2, [r3, #0]
   d7908:	4b12      	ldr	r3, [pc, #72]	; (d7954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d790a:	681a      	ldr	r2, [r3, #0]
   d790c:	07d0      	lsls	r0, r2, #31
   d790e:	bf5c      	itt	pl
   d7910:	2201      	movpl	r2, #1
   d7912:	601a      	strpl	r2, [r3, #0]
   d7914:	4b10      	ldr	r3, [pc, #64]	; (d7958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7916:	681a      	ldr	r2, [r3, #0]
   d7918:	07d1      	lsls	r1, r2, #31
   d791a:	bf5c      	itt	pl
   d791c:	2201      	movpl	r2, #1
   d791e:	601a      	strpl	r2, [r3, #0]
   d7920:	4b0e      	ldr	r3, [pc, #56]	; (d795c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7922:	681a      	ldr	r2, [r3, #0]
   d7924:	07d2      	lsls	r2, r2, #31
   d7926:	bf5c      	itt	pl
   d7928:	2201      	movpl	r2, #1
   d792a:	601a      	strpl	r2, [r3, #0]
   d792c:	4770      	bx	lr
   d792e:	bf00      	nop
   d7930:	2003e754 	.word	0x2003e754
   d7934:	2003e750 	.word	0x2003e750
   d7938:	2003e74c 	.word	0x2003e74c
   d793c:	2003e748 	.word	0x2003e748
   d7940:	2003e744 	.word	0x2003e744
   d7944:	2003e740 	.word	0x2003e740
   d7948:	2003e73c 	.word	0x2003e73c
   d794c:	2003e738 	.word	0x2003e738
   d7950:	2003e734 	.word	0x2003e734
   d7954:	2003e730 	.word	0x2003e730
   d7958:	2003e72c 	.word	0x2003e72c
   d795c:	2003e728 	.word	0x2003e728

000d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7960:	4b18      	ldr	r3, [pc, #96]	; (d79c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7962:	681a      	ldr	r2, [r3, #0]
   d7964:	07d1      	lsls	r1, r2, #31
   d7966:	bf5c      	itt	pl
   d7968:	2201      	movpl	r2, #1
   d796a:	601a      	strpl	r2, [r3, #0]
   d796c:	4b16      	ldr	r3, [pc, #88]	; (d79c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d796e:	681a      	ldr	r2, [r3, #0]
   d7970:	07d2      	lsls	r2, r2, #31
   d7972:	bf5c      	itt	pl
   d7974:	2201      	movpl	r2, #1
   d7976:	601a      	strpl	r2, [r3, #0]
   d7978:	4b14      	ldr	r3, [pc, #80]	; (d79cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d797a:	681a      	ldr	r2, [r3, #0]
   d797c:	07d0      	lsls	r0, r2, #31
   d797e:	bf5c      	itt	pl
   d7980:	2201      	movpl	r2, #1
   d7982:	601a      	strpl	r2, [r3, #0]
   d7984:	4b12      	ldr	r3, [pc, #72]	; (d79d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7986:	681a      	ldr	r2, [r3, #0]
   d7988:	07d1      	lsls	r1, r2, #31
   d798a:	bf5c      	itt	pl
   d798c:	2201      	movpl	r2, #1
   d798e:	601a      	strpl	r2, [r3, #0]
   d7990:	4b10      	ldr	r3, [pc, #64]	; (d79d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7992:	681a      	ldr	r2, [r3, #0]
   d7994:	07d2      	lsls	r2, r2, #31
   d7996:	bf5c      	itt	pl
   d7998:	2201      	movpl	r2, #1
   d799a:	601a      	strpl	r2, [r3, #0]
   d799c:	4b0e      	ldr	r3, [pc, #56]	; (d79d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d799e:	681a      	ldr	r2, [r3, #0]
   d79a0:	07d0      	lsls	r0, r2, #31
   d79a2:	bf5c      	itt	pl
   d79a4:	2201      	movpl	r2, #1
   d79a6:	601a      	strpl	r2, [r3, #0]
   d79a8:	4b0c      	ldr	r3, [pc, #48]	; (d79dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d79aa:	681a      	ldr	r2, [r3, #0]
   d79ac:	07d1      	lsls	r1, r2, #31
   d79ae:	bf5c      	itt	pl
   d79b0:	2201      	movpl	r2, #1
   d79b2:	601a      	strpl	r2, [r3, #0]
   d79b4:	4b0a      	ldr	r3, [pc, #40]	; (d79e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d79b6:	681a      	ldr	r2, [r3, #0]
   d79b8:	07d2      	lsls	r2, r2, #31
   d79ba:	bf5c      	itt	pl
   d79bc:	2201      	movpl	r2, #1
   d79be:	601a      	strpl	r2, [r3, #0]
   d79c0:	4770      	bx	lr
   d79c2:	bf00      	nop
   d79c4:	2003e774 	.word	0x2003e774
   d79c8:	2003e770 	.word	0x2003e770
   d79cc:	2003e76c 	.word	0x2003e76c
   d79d0:	2003e768 	.word	0x2003e768
   d79d4:	2003e764 	.word	0x2003e764
   d79d8:	2003e760 	.word	0x2003e760
   d79dc:	2003e75c 	.word	0x2003e75c
   d79e0:	2003e758 	.word	0x2003e758

000d79e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d79e4:	4b18      	ldr	r3, [pc, #96]	; (d7a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d79e6:	681a      	ldr	r2, [r3, #0]
   d79e8:	07d1      	lsls	r1, r2, #31
   d79ea:	bf5c      	itt	pl
   d79ec:	2201      	movpl	r2, #1
   d79ee:	601a      	strpl	r2, [r3, #0]
   d79f0:	4b16      	ldr	r3, [pc, #88]	; (d7a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d79f2:	681a      	ldr	r2, [r3, #0]
   d79f4:	07d2      	lsls	r2, r2, #31
   d79f6:	bf5c      	itt	pl
   d79f8:	2201      	movpl	r2, #1
   d79fa:	601a      	strpl	r2, [r3, #0]
   d79fc:	4b14      	ldr	r3, [pc, #80]	; (d7a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d79fe:	681a      	ldr	r2, [r3, #0]
   d7a00:	07d0      	lsls	r0, r2, #31
   d7a02:	bf5c      	itt	pl
   d7a04:	2201      	movpl	r2, #1
   d7a06:	601a      	strpl	r2, [r3, #0]
   d7a08:	4b12      	ldr	r3, [pc, #72]	; (d7a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a0a:	681a      	ldr	r2, [r3, #0]
   d7a0c:	07d1      	lsls	r1, r2, #31
   d7a0e:	bf5c      	itt	pl
   d7a10:	2201      	movpl	r2, #1
   d7a12:	601a      	strpl	r2, [r3, #0]
   d7a14:	4b10      	ldr	r3, [pc, #64]	; (d7a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a16:	681a      	ldr	r2, [r3, #0]
   d7a18:	07d2      	lsls	r2, r2, #31
   d7a1a:	bf5c      	itt	pl
   d7a1c:	2201      	movpl	r2, #1
   d7a1e:	601a      	strpl	r2, [r3, #0]
   d7a20:	4b0e      	ldr	r3, [pc, #56]	; (d7a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a22:	681a      	ldr	r2, [r3, #0]
   d7a24:	07d0      	lsls	r0, r2, #31
   d7a26:	bf5c      	itt	pl
   d7a28:	2201      	movpl	r2, #1
   d7a2a:	601a      	strpl	r2, [r3, #0]
   d7a2c:	4b0c      	ldr	r3, [pc, #48]	; (d7a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a2e:	681a      	ldr	r2, [r3, #0]
   d7a30:	07d1      	lsls	r1, r2, #31
   d7a32:	bf5c      	itt	pl
   d7a34:	2201      	movpl	r2, #1
   d7a36:	601a      	strpl	r2, [r3, #0]
   d7a38:	4b0a      	ldr	r3, [pc, #40]	; (d7a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a3a:	681a      	ldr	r2, [r3, #0]
   d7a3c:	07d2      	lsls	r2, r2, #31
   d7a3e:	bf5c      	itt	pl
   d7a40:	2201      	movpl	r2, #1
   d7a42:	601a      	strpl	r2, [r3, #0]
   d7a44:	4770      	bx	lr
   d7a46:	bf00      	nop
   d7a48:	2003e794 	.word	0x2003e794
   d7a4c:	2003e790 	.word	0x2003e790
   d7a50:	2003e78c 	.word	0x2003e78c
   d7a54:	2003e788 	.word	0x2003e788
   d7a58:	2003e784 	.word	0x2003e784
   d7a5c:	2003e780 	.word	0x2003e780
   d7a60:	2003e77c 	.word	0x2003e77c
   d7a64:	2003e778 	.word	0x2003e778

000d7a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7a68:	4b24      	ldr	r3, [pc, #144]	; (d7afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7a6a:	681a      	ldr	r2, [r3, #0]
   d7a6c:	07d0      	lsls	r0, r2, #31
   d7a6e:	bf5c      	itt	pl
   d7a70:	2201      	movpl	r2, #1
   d7a72:	601a      	strpl	r2, [r3, #0]
   d7a74:	4b22      	ldr	r3, [pc, #136]	; (d7b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7a76:	681a      	ldr	r2, [r3, #0]
   d7a78:	07d1      	lsls	r1, r2, #31
   d7a7a:	bf5c      	itt	pl
   d7a7c:	2201      	movpl	r2, #1
   d7a7e:	601a      	strpl	r2, [r3, #0]
   d7a80:	4b20      	ldr	r3, [pc, #128]	; (d7b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7a82:	681a      	ldr	r2, [r3, #0]
   d7a84:	07d2      	lsls	r2, r2, #31
   d7a86:	bf5c      	itt	pl
   d7a88:	2201      	movpl	r2, #1
   d7a8a:	601a      	strpl	r2, [r3, #0]
   d7a8c:	4b1e      	ldr	r3, [pc, #120]	; (d7b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7a8e:	681a      	ldr	r2, [r3, #0]
   d7a90:	07d0      	lsls	r0, r2, #31
   d7a92:	bf5c      	itt	pl
   d7a94:	2201      	movpl	r2, #1
   d7a96:	601a      	strpl	r2, [r3, #0]
   d7a98:	4b1c      	ldr	r3, [pc, #112]	; (d7b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7a9a:	681a      	ldr	r2, [r3, #0]
   d7a9c:	07d1      	lsls	r1, r2, #31
   d7a9e:	bf5c      	itt	pl
   d7aa0:	2201      	movpl	r2, #1
   d7aa2:	601a      	strpl	r2, [r3, #0]
   d7aa4:	4b1a      	ldr	r3, [pc, #104]	; (d7b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7aa6:	681a      	ldr	r2, [r3, #0]
   d7aa8:	07d2      	lsls	r2, r2, #31
   d7aaa:	bf5c      	itt	pl
   d7aac:	2201      	movpl	r2, #1
   d7aae:	601a      	strpl	r2, [r3, #0]
   d7ab0:	4b18      	ldr	r3, [pc, #96]	; (d7b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7ab2:	681a      	ldr	r2, [r3, #0]
   d7ab4:	07d0      	lsls	r0, r2, #31
   d7ab6:	bf5c      	itt	pl
   d7ab8:	2201      	movpl	r2, #1
   d7aba:	601a      	strpl	r2, [r3, #0]
   d7abc:	4b16      	ldr	r3, [pc, #88]	; (d7b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7abe:	681a      	ldr	r2, [r3, #0]
   d7ac0:	07d1      	lsls	r1, r2, #31
   d7ac2:	bf5c      	itt	pl
   d7ac4:	2201      	movpl	r2, #1
   d7ac6:	601a      	strpl	r2, [r3, #0]
   d7ac8:	4b14      	ldr	r3, [pc, #80]	; (d7b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7aca:	681a      	ldr	r2, [r3, #0]
   d7acc:	07d2      	lsls	r2, r2, #31
   d7ace:	bf5c      	itt	pl
   d7ad0:	2201      	movpl	r2, #1
   d7ad2:	601a      	strpl	r2, [r3, #0]
   d7ad4:	4b12      	ldr	r3, [pc, #72]	; (d7b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7ad6:	681a      	ldr	r2, [r3, #0]
   d7ad8:	07d0      	lsls	r0, r2, #31
   d7ada:	bf5c      	itt	pl
   d7adc:	2201      	movpl	r2, #1
   d7ade:	601a      	strpl	r2, [r3, #0]
   d7ae0:	4b10      	ldr	r3, [pc, #64]	; (d7b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7ae2:	681a      	ldr	r2, [r3, #0]
   d7ae4:	07d1      	lsls	r1, r2, #31
   d7ae6:	bf5c      	itt	pl
   d7ae8:	2201      	movpl	r2, #1
   d7aea:	601a      	strpl	r2, [r3, #0]
   d7aec:	4b0e      	ldr	r3, [pc, #56]	; (d7b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7aee:	681a      	ldr	r2, [r3, #0]
   d7af0:	07d2      	lsls	r2, r2, #31
   d7af2:	bf5c      	itt	pl
   d7af4:	2201      	movpl	r2, #1
   d7af6:	601a      	strpl	r2, [r3, #0]
   d7af8:	4770      	bx	lr
   d7afa:	bf00      	nop
   d7afc:	2003e7c4 	.word	0x2003e7c4
   d7b00:	2003e7c0 	.word	0x2003e7c0
   d7b04:	2003e7bc 	.word	0x2003e7bc
   d7b08:	2003e7b8 	.word	0x2003e7b8
   d7b0c:	2003e7b4 	.word	0x2003e7b4
   d7b10:	2003e7b0 	.word	0x2003e7b0
   d7b14:	2003e7ac 	.word	0x2003e7ac
   d7b18:	2003e7a8 	.word	0x2003e7a8
   d7b1c:	2003e7a4 	.word	0x2003e7a4
   d7b20:	2003e7a0 	.word	0x2003e7a0
   d7b24:	2003e79c 	.word	0x2003e79c
   d7b28:	2003e798 	.word	0x2003e798

000d7b2c <__aeabi_drsub>:
   d7b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7b30:	e002      	b.n	d7b38 <__adddf3>
   d7b32:	bf00      	nop

000d7b34 <__aeabi_dsub>:
   d7b34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7b38 <__adddf3>:
   d7b38:	b530      	push	{r4, r5, lr}
   d7b3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7b3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7b42:	ea94 0f05 	teq	r4, r5
   d7b46:	bf08      	it	eq
   d7b48:	ea90 0f02 	teqeq	r0, r2
   d7b4c:	bf1f      	itttt	ne
   d7b4e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7b52:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7b56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7b5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b5e:	f000 80e2 	beq.w	d7d26 <__adddf3+0x1ee>
   d7b62:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7b66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7b6a:	bfb8      	it	lt
   d7b6c:	426d      	neglt	r5, r5
   d7b6e:	dd0c      	ble.n	d7b8a <__adddf3+0x52>
   d7b70:	442c      	add	r4, r5
   d7b72:	ea80 0202 	eor.w	r2, r0, r2
   d7b76:	ea81 0303 	eor.w	r3, r1, r3
   d7b7a:	ea82 0000 	eor.w	r0, r2, r0
   d7b7e:	ea83 0101 	eor.w	r1, r3, r1
   d7b82:	ea80 0202 	eor.w	r2, r0, r2
   d7b86:	ea81 0303 	eor.w	r3, r1, r3
   d7b8a:	2d36      	cmp	r5, #54	; 0x36
   d7b8c:	bf88      	it	hi
   d7b8e:	bd30      	pophi	{r4, r5, pc}
   d7b90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7b94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7b9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7ba0:	d002      	beq.n	d7ba8 <__adddf3+0x70>
   d7ba2:	4240      	negs	r0, r0
   d7ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7ba8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7bac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7bb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7bb4:	d002      	beq.n	d7bbc <__adddf3+0x84>
   d7bb6:	4252      	negs	r2, r2
   d7bb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7bbc:	ea94 0f05 	teq	r4, r5
   d7bc0:	f000 80a7 	beq.w	d7d12 <__adddf3+0x1da>
   d7bc4:	f1a4 0401 	sub.w	r4, r4, #1
   d7bc8:	f1d5 0e20 	rsbs	lr, r5, #32
   d7bcc:	db0d      	blt.n	d7bea <__adddf3+0xb2>
   d7bce:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7bd2:	fa22 f205 	lsr.w	r2, r2, r5
   d7bd6:	1880      	adds	r0, r0, r2
   d7bd8:	f141 0100 	adc.w	r1, r1, #0
   d7bdc:	fa03 f20e 	lsl.w	r2, r3, lr
   d7be0:	1880      	adds	r0, r0, r2
   d7be2:	fa43 f305 	asr.w	r3, r3, r5
   d7be6:	4159      	adcs	r1, r3
   d7be8:	e00e      	b.n	d7c08 <__adddf3+0xd0>
   d7bea:	f1a5 0520 	sub.w	r5, r5, #32
   d7bee:	f10e 0e20 	add.w	lr, lr, #32
   d7bf2:	2a01      	cmp	r2, #1
   d7bf4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7bf8:	bf28      	it	cs
   d7bfa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7bfe:	fa43 f305 	asr.w	r3, r3, r5
   d7c02:	18c0      	adds	r0, r0, r3
   d7c04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7c08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c0c:	d507      	bpl.n	d7c1e <__adddf3+0xe6>
   d7c0e:	f04f 0e00 	mov.w	lr, #0
   d7c12:	f1dc 0c00 	rsbs	ip, ip, #0
   d7c16:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7c1a:	eb6e 0101 	sbc.w	r1, lr, r1
   d7c1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7c22:	d31b      	bcc.n	d7c5c <__adddf3+0x124>
   d7c24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7c28:	d30c      	bcc.n	d7c44 <__adddf3+0x10c>
   d7c2a:	0849      	lsrs	r1, r1, #1
   d7c2c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7c30:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7c34:	f104 0401 	add.w	r4, r4, #1
   d7c38:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7c3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7c40:	f080 809a 	bcs.w	d7d78 <__adddf3+0x240>
   d7c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7c48:	bf08      	it	eq
   d7c4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c4e:	f150 0000 	adcs.w	r0, r0, #0
   d7c52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c56:	ea41 0105 	orr.w	r1, r1, r5
   d7c5a:	bd30      	pop	{r4, r5, pc}
   d7c5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7c60:	4140      	adcs	r0, r0
   d7c62:	eb41 0101 	adc.w	r1, r1, r1
   d7c66:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c6a:	f1a4 0401 	sub.w	r4, r4, #1
   d7c6e:	d1e9      	bne.n	d7c44 <__adddf3+0x10c>
   d7c70:	f091 0f00 	teq	r1, #0
   d7c74:	bf04      	itt	eq
   d7c76:	4601      	moveq	r1, r0
   d7c78:	2000      	moveq	r0, #0
   d7c7a:	fab1 f381 	clz	r3, r1
   d7c7e:	bf08      	it	eq
   d7c80:	3320      	addeq	r3, #32
   d7c82:	f1a3 030b 	sub.w	r3, r3, #11
   d7c86:	f1b3 0220 	subs.w	r2, r3, #32
   d7c8a:	da0c      	bge.n	d7ca6 <__adddf3+0x16e>
   d7c8c:	320c      	adds	r2, #12
   d7c8e:	dd08      	ble.n	d7ca2 <__adddf3+0x16a>
   d7c90:	f102 0c14 	add.w	ip, r2, #20
   d7c94:	f1c2 020c 	rsb	r2, r2, #12
   d7c98:	fa01 f00c 	lsl.w	r0, r1, ip
   d7c9c:	fa21 f102 	lsr.w	r1, r1, r2
   d7ca0:	e00c      	b.n	d7cbc <__adddf3+0x184>
   d7ca2:	f102 0214 	add.w	r2, r2, #20
   d7ca6:	bfd8      	it	le
   d7ca8:	f1c2 0c20 	rsble	ip, r2, #32
   d7cac:	fa01 f102 	lsl.w	r1, r1, r2
   d7cb0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7cb4:	bfdc      	itt	le
   d7cb6:	ea41 010c 	orrle.w	r1, r1, ip
   d7cba:	4090      	lslle	r0, r2
   d7cbc:	1ae4      	subs	r4, r4, r3
   d7cbe:	bfa2      	ittt	ge
   d7cc0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7cc4:	4329      	orrge	r1, r5
   d7cc6:	bd30      	popge	{r4, r5, pc}
   d7cc8:	ea6f 0404 	mvn.w	r4, r4
   d7ccc:	3c1f      	subs	r4, #31
   d7cce:	da1c      	bge.n	d7d0a <__adddf3+0x1d2>
   d7cd0:	340c      	adds	r4, #12
   d7cd2:	dc0e      	bgt.n	d7cf2 <__adddf3+0x1ba>
   d7cd4:	f104 0414 	add.w	r4, r4, #20
   d7cd8:	f1c4 0220 	rsb	r2, r4, #32
   d7cdc:	fa20 f004 	lsr.w	r0, r0, r4
   d7ce0:	fa01 f302 	lsl.w	r3, r1, r2
   d7ce4:	ea40 0003 	orr.w	r0, r0, r3
   d7ce8:	fa21 f304 	lsr.w	r3, r1, r4
   d7cec:	ea45 0103 	orr.w	r1, r5, r3
   d7cf0:	bd30      	pop	{r4, r5, pc}
   d7cf2:	f1c4 040c 	rsb	r4, r4, #12
   d7cf6:	f1c4 0220 	rsb	r2, r4, #32
   d7cfa:	fa20 f002 	lsr.w	r0, r0, r2
   d7cfe:	fa01 f304 	lsl.w	r3, r1, r4
   d7d02:	ea40 0003 	orr.w	r0, r0, r3
   d7d06:	4629      	mov	r1, r5
   d7d08:	bd30      	pop	{r4, r5, pc}
   d7d0a:	fa21 f004 	lsr.w	r0, r1, r4
   d7d0e:	4629      	mov	r1, r5
   d7d10:	bd30      	pop	{r4, r5, pc}
   d7d12:	f094 0f00 	teq	r4, #0
   d7d16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7d1a:	bf06      	itte	eq
   d7d1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7d20:	3401      	addeq	r4, #1
   d7d22:	3d01      	subne	r5, #1
   d7d24:	e74e      	b.n	d7bc4 <__adddf3+0x8c>
   d7d26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d2a:	bf18      	it	ne
   d7d2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d30:	d029      	beq.n	d7d86 <__adddf3+0x24e>
   d7d32:	ea94 0f05 	teq	r4, r5
   d7d36:	bf08      	it	eq
   d7d38:	ea90 0f02 	teqeq	r0, r2
   d7d3c:	d005      	beq.n	d7d4a <__adddf3+0x212>
   d7d3e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7d42:	bf04      	itt	eq
   d7d44:	4619      	moveq	r1, r3
   d7d46:	4610      	moveq	r0, r2
   d7d48:	bd30      	pop	{r4, r5, pc}
   d7d4a:	ea91 0f03 	teq	r1, r3
   d7d4e:	bf1e      	ittt	ne
   d7d50:	2100      	movne	r1, #0
   d7d52:	2000      	movne	r0, #0
   d7d54:	bd30      	popne	{r4, r5, pc}
   d7d56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7d5a:	d105      	bne.n	d7d68 <__adddf3+0x230>
   d7d5c:	0040      	lsls	r0, r0, #1
   d7d5e:	4149      	adcs	r1, r1
   d7d60:	bf28      	it	cs
   d7d62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7d66:	bd30      	pop	{r4, r5, pc}
   d7d68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7d6c:	bf3c      	itt	cc
   d7d6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7d72:	bd30      	popcc	{r4, r5, pc}
   d7d74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7d7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7d80:	f04f 0000 	mov.w	r0, #0
   d7d84:	bd30      	pop	{r4, r5, pc}
   d7d86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d8a:	bf1a      	itte	ne
   d7d8c:	4619      	movne	r1, r3
   d7d8e:	4610      	movne	r0, r2
   d7d90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7d94:	bf1c      	itt	ne
   d7d96:	460b      	movne	r3, r1
   d7d98:	4602      	movne	r2, r0
   d7d9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d9e:	bf06      	itte	eq
   d7da0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7da4:	ea91 0f03 	teqeq	r1, r3
   d7da8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7dac:	bd30      	pop	{r4, r5, pc}
   d7dae:	bf00      	nop

000d7db0 <__aeabi_ui2d>:
   d7db0:	f090 0f00 	teq	r0, #0
   d7db4:	bf04      	itt	eq
   d7db6:	2100      	moveq	r1, #0
   d7db8:	4770      	bxeq	lr
   d7dba:	b530      	push	{r4, r5, lr}
   d7dbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7dc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7dc4:	f04f 0500 	mov.w	r5, #0
   d7dc8:	f04f 0100 	mov.w	r1, #0
   d7dcc:	e750      	b.n	d7c70 <__adddf3+0x138>
   d7dce:	bf00      	nop

000d7dd0 <__aeabi_i2d>:
   d7dd0:	f090 0f00 	teq	r0, #0
   d7dd4:	bf04      	itt	eq
   d7dd6:	2100      	moveq	r1, #0
   d7dd8:	4770      	bxeq	lr
   d7dda:	b530      	push	{r4, r5, lr}
   d7ddc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7de0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7de4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7de8:	bf48      	it	mi
   d7dea:	4240      	negmi	r0, r0
   d7dec:	f04f 0100 	mov.w	r1, #0
   d7df0:	e73e      	b.n	d7c70 <__adddf3+0x138>
   d7df2:	bf00      	nop

000d7df4 <__aeabi_f2d>:
   d7df4:	0042      	lsls	r2, r0, #1
   d7df6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7dfa:	ea4f 0131 	mov.w	r1, r1, rrx
   d7dfe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7e02:	bf1f      	itttt	ne
   d7e04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7e08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7e10:	4770      	bxne	lr
   d7e12:	f092 0f00 	teq	r2, #0
   d7e16:	bf14      	ite	ne
   d7e18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e1c:	4770      	bxeq	lr
   d7e1e:	b530      	push	{r4, r5, lr}
   d7e20:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7e24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e2c:	e720      	b.n	d7c70 <__adddf3+0x138>
   d7e2e:	bf00      	nop

000d7e30 <__aeabi_ul2d>:
   d7e30:	ea50 0201 	orrs.w	r2, r0, r1
   d7e34:	bf08      	it	eq
   d7e36:	4770      	bxeq	lr
   d7e38:	b530      	push	{r4, r5, lr}
   d7e3a:	f04f 0500 	mov.w	r5, #0
   d7e3e:	e00a      	b.n	d7e56 <__aeabi_l2d+0x16>

000d7e40 <__aeabi_l2d>:
   d7e40:	ea50 0201 	orrs.w	r2, r0, r1
   d7e44:	bf08      	it	eq
   d7e46:	4770      	bxeq	lr
   d7e48:	b530      	push	{r4, r5, lr}
   d7e4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7e4e:	d502      	bpl.n	d7e56 <__aeabi_l2d+0x16>
   d7e50:	4240      	negs	r0, r0
   d7e52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7e56:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7e62:	f43f aedc 	beq.w	d7c1e <__adddf3+0xe6>
   d7e66:	f04f 0203 	mov.w	r2, #3
   d7e6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e6e:	bf18      	it	ne
   d7e70:	3203      	addne	r2, #3
   d7e72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e76:	bf18      	it	ne
   d7e78:	3203      	addne	r2, #3
   d7e7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7e7e:	f1c2 0320 	rsb	r3, r2, #32
   d7e82:	fa00 fc03 	lsl.w	ip, r0, r3
   d7e86:	fa20 f002 	lsr.w	r0, r0, r2
   d7e8a:	fa01 fe03 	lsl.w	lr, r1, r3
   d7e8e:	ea40 000e 	orr.w	r0, r0, lr
   d7e92:	fa21 f102 	lsr.w	r1, r1, r2
   d7e96:	4414      	add	r4, r2
   d7e98:	e6c1      	b.n	d7c1e <__adddf3+0xe6>
   d7e9a:	bf00      	nop

000d7e9c <__aeabi_dmul>:
   d7e9c:	b570      	push	{r4, r5, r6, lr}
   d7e9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7ea2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7ea6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7eaa:	bf1d      	ittte	ne
   d7eac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7eb0:	ea94 0f0c 	teqne	r4, ip
   d7eb4:	ea95 0f0c 	teqne	r5, ip
   d7eb8:	f000 f8de 	bleq	d8078 <__aeabi_dmul+0x1dc>
   d7ebc:	442c      	add	r4, r5
   d7ebe:	ea81 0603 	eor.w	r6, r1, r3
   d7ec2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7ec6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7eca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7ece:	bf18      	it	ne
   d7ed0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7ed4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7edc:	d038      	beq.n	d7f50 <__aeabi_dmul+0xb4>
   d7ede:	fba0 ce02 	umull	ip, lr, r0, r2
   d7ee2:	f04f 0500 	mov.w	r5, #0
   d7ee6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7eea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7eee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7ef2:	f04f 0600 	mov.w	r6, #0
   d7ef6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7efa:	f09c 0f00 	teq	ip, #0
   d7efe:	bf18      	it	ne
   d7f00:	f04e 0e01 	orrne.w	lr, lr, #1
   d7f04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7f08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7f0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7f10:	d204      	bcs.n	d7f1c <__aeabi_dmul+0x80>
   d7f12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7f16:	416d      	adcs	r5, r5
   d7f18:	eb46 0606 	adc.w	r6, r6, r6
   d7f1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7f20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7f24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7f28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7f2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7f30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7f34:	bf88      	it	hi
   d7f36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7f3a:	d81e      	bhi.n	d7f7a <__aeabi_dmul+0xde>
   d7f3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7f40:	bf08      	it	eq
   d7f42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7f46:	f150 0000 	adcs.w	r0, r0, #0
   d7f4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7f4e:	bd70      	pop	{r4, r5, r6, pc}
   d7f50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7f54:	ea46 0101 	orr.w	r1, r6, r1
   d7f58:	ea40 0002 	orr.w	r0, r0, r2
   d7f5c:	ea81 0103 	eor.w	r1, r1, r3
   d7f60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7f64:	bfc2      	ittt	gt
   d7f66:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7f6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7f6e:	bd70      	popgt	{r4, r5, r6, pc}
   d7f70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f74:	f04f 0e00 	mov.w	lr, #0
   d7f78:	3c01      	subs	r4, #1
   d7f7a:	f300 80ab 	bgt.w	d80d4 <__aeabi_dmul+0x238>
   d7f7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7f82:	bfde      	ittt	le
   d7f84:	2000      	movle	r0, #0
   d7f86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7f8a:	bd70      	pople	{r4, r5, r6, pc}
   d7f8c:	f1c4 0400 	rsb	r4, r4, #0
   d7f90:	3c20      	subs	r4, #32
   d7f92:	da35      	bge.n	d8000 <__aeabi_dmul+0x164>
   d7f94:	340c      	adds	r4, #12
   d7f96:	dc1b      	bgt.n	d7fd0 <__aeabi_dmul+0x134>
   d7f98:	f104 0414 	add.w	r4, r4, #20
   d7f9c:	f1c4 0520 	rsb	r5, r4, #32
   d7fa0:	fa00 f305 	lsl.w	r3, r0, r5
   d7fa4:	fa20 f004 	lsr.w	r0, r0, r4
   d7fa8:	fa01 f205 	lsl.w	r2, r1, r5
   d7fac:	ea40 0002 	orr.w	r0, r0, r2
   d7fb0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7fb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7fb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7fbc:	fa21 f604 	lsr.w	r6, r1, r4
   d7fc0:	eb42 0106 	adc.w	r1, r2, r6
   d7fc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7fc8:	bf08      	it	eq
   d7fca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7fce:	bd70      	pop	{r4, r5, r6, pc}
   d7fd0:	f1c4 040c 	rsb	r4, r4, #12
   d7fd4:	f1c4 0520 	rsb	r5, r4, #32
   d7fd8:	fa00 f304 	lsl.w	r3, r0, r4
   d7fdc:	fa20 f005 	lsr.w	r0, r0, r5
   d7fe0:	fa01 f204 	lsl.w	r2, r1, r4
   d7fe4:	ea40 0002 	orr.w	r0, r0, r2
   d7fe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7fec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7ff0:	f141 0100 	adc.w	r1, r1, #0
   d7ff4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ff8:	bf08      	it	eq
   d7ffa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7ffe:	bd70      	pop	{r4, r5, r6, pc}
   d8000:	f1c4 0520 	rsb	r5, r4, #32
   d8004:	fa00 f205 	lsl.w	r2, r0, r5
   d8008:	ea4e 0e02 	orr.w	lr, lr, r2
   d800c:	fa20 f304 	lsr.w	r3, r0, r4
   d8010:	fa01 f205 	lsl.w	r2, r1, r5
   d8014:	ea43 0302 	orr.w	r3, r3, r2
   d8018:	fa21 f004 	lsr.w	r0, r1, r4
   d801c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8020:	fa21 f204 	lsr.w	r2, r1, r4
   d8024:	ea20 0002 	bic.w	r0, r0, r2
   d8028:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d802c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8030:	bf08      	it	eq
   d8032:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8036:	bd70      	pop	{r4, r5, r6, pc}
   d8038:	f094 0f00 	teq	r4, #0
   d803c:	d10f      	bne.n	d805e <__aeabi_dmul+0x1c2>
   d803e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8042:	0040      	lsls	r0, r0, #1
   d8044:	eb41 0101 	adc.w	r1, r1, r1
   d8048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d804c:	bf08      	it	eq
   d804e:	3c01      	subeq	r4, #1
   d8050:	d0f7      	beq.n	d8042 <__aeabi_dmul+0x1a6>
   d8052:	ea41 0106 	orr.w	r1, r1, r6
   d8056:	f095 0f00 	teq	r5, #0
   d805a:	bf18      	it	ne
   d805c:	4770      	bxne	lr
   d805e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8062:	0052      	lsls	r2, r2, #1
   d8064:	eb43 0303 	adc.w	r3, r3, r3
   d8068:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d806c:	bf08      	it	eq
   d806e:	3d01      	subeq	r5, #1
   d8070:	d0f7      	beq.n	d8062 <__aeabi_dmul+0x1c6>
   d8072:	ea43 0306 	orr.w	r3, r3, r6
   d8076:	4770      	bx	lr
   d8078:	ea94 0f0c 	teq	r4, ip
   d807c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8080:	bf18      	it	ne
   d8082:	ea95 0f0c 	teqne	r5, ip
   d8086:	d00c      	beq.n	d80a2 <__aeabi_dmul+0x206>
   d8088:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d808c:	bf18      	it	ne
   d808e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8092:	d1d1      	bne.n	d8038 <__aeabi_dmul+0x19c>
   d8094:	ea81 0103 	eor.w	r1, r1, r3
   d8098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d809c:	f04f 0000 	mov.w	r0, #0
   d80a0:	bd70      	pop	{r4, r5, r6, pc}
   d80a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80a6:	bf06      	itte	eq
   d80a8:	4610      	moveq	r0, r2
   d80aa:	4619      	moveq	r1, r3
   d80ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80b0:	d019      	beq.n	d80e6 <__aeabi_dmul+0x24a>
   d80b2:	ea94 0f0c 	teq	r4, ip
   d80b6:	d102      	bne.n	d80be <__aeabi_dmul+0x222>
   d80b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d80bc:	d113      	bne.n	d80e6 <__aeabi_dmul+0x24a>
   d80be:	ea95 0f0c 	teq	r5, ip
   d80c2:	d105      	bne.n	d80d0 <__aeabi_dmul+0x234>
   d80c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d80c8:	bf1c      	itt	ne
   d80ca:	4610      	movne	r0, r2
   d80cc:	4619      	movne	r1, r3
   d80ce:	d10a      	bne.n	d80e6 <__aeabi_dmul+0x24a>
   d80d0:	ea81 0103 	eor.w	r1, r1, r3
   d80d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d80dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d80e0:	f04f 0000 	mov.w	r0, #0
   d80e4:	bd70      	pop	{r4, r5, r6, pc}
   d80e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d80ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d80ee:	bd70      	pop	{r4, r5, r6, pc}

000d80f0 <__aeabi_ddiv>:
   d80f0:	b570      	push	{r4, r5, r6, lr}
   d80f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d80f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d80fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d80fe:	bf1d      	ittte	ne
   d8100:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8104:	ea94 0f0c 	teqne	r4, ip
   d8108:	ea95 0f0c 	teqne	r5, ip
   d810c:	f000 f8a7 	bleq	d825e <__aeabi_ddiv+0x16e>
   d8110:	eba4 0405 	sub.w	r4, r4, r5
   d8114:	ea81 0e03 	eor.w	lr, r1, r3
   d8118:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d811c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8120:	f000 8088 	beq.w	d8234 <__aeabi_ddiv+0x144>
   d8124:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8128:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d812c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8130:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8134:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8138:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d813c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8140:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8144:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8148:	429d      	cmp	r5, r3
   d814a:	bf08      	it	eq
   d814c:	4296      	cmpeq	r6, r2
   d814e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8152:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8156:	d202      	bcs.n	d815e <__aeabi_ddiv+0x6e>
   d8158:	085b      	lsrs	r3, r3, #1
   d815a:	ea4f 0232 	mov.w	r2, r2, rrx
   d815e:	1ab6      	subs	r6, r6, r2
   d8160:	eb65 0503 	sbc.w	r5, r5, r3
   d8164:	085b      	lsrs	r3, r3, #1
   d8166:	ea4f 0232 	mov.w	r2, r2, rrx
   d816a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d816e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8172:	ebb6 0e02 	subs.w	lr, r6, r2
   d8176:	eb75 0e03 	sbcs.w	lr, r5, r3
   d817a:	bf22      	ittt	cs
   d817c:	1ab6      	subcs	r6, r6, r2
   d817e:	4675      	movcs	r5, lr
   d8180:	ea40 000c 	orrcs.w	r0, r0, ip
   d8184:	085b      	lsrs	r3, r3, #1
   d8186:	ea4f 0232 	mov.w	r2, r2, rrx
   d818a:	ebb6 0e02 	subs.w	lr, r6, r2
   d818e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8192:	bf22      	ittt	cs
   d8194:	1ab6      	subcs	r6, r6, r2
   d8196:	4675      	movcs	r5, lr
   d8198:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d819c:	085b      	lsrs	r3, r3, #1
   d819e:	ea4f 0232 	mov.w	r2, r2, rrx
   d81a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d81a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81aa:	bf22      	ittt	cs
   d81ac:	1ab6      	subcs	r6, r6, r2
   d81ae:	4675      	movcs	r5, lr
   d81b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d81b4:	085b      	lsrs	r3, r3, #1
   d81b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d81ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d81be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81c2:	bf22      	ittt	cs
   d81c4:	1ab6      	subcs	r6, r6, r2
   d81c6:	4675      	movcs	r5, lr
   d81c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d81cc:	ea55 0e06 	orrs.w	lr, r5, r6
   d81d0:	d018      	beq.n	d8204 <__aeabi_ddiv+0x114>
   d81d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d81d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d81da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d81de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d81e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d81e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d81ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d81ee:	d1c0      	bne.n	d8172 <__aeabi_ddiv+0x82>
   d81f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d81f4:	d10b      	bne.n	d820e <__aeabi_ddiv+0x11e>
   d81f6:	ea41 0100 	orr.w	r1, r1, r0
   d81fa:	f04f 0000 	mov.w	r0, #0
   d81fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8202:	e7b6      	b.n	d8172 <__aeabi_ddiv+0x82>
   d8204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8208:	bf04      	itt	eq
   d820a:	4301      	orreq	r1, r0
   d820c:	2000      	moveq	r0, #0
   d820e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8212:	bf88      	it	hi
   d8214:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8218:	f63f aeaf 	bhi.w	d7f7a <__aeabi_dmul+0xde>
   d821c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8220:	bf04      	itt	eq
   d8222:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8226:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d822a:	f150 0000 	adcs.w	r0, r0, #0
   d822e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8232:	bd70      	pop	{r4, r5, r6, pc}
   d8234:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8238:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d823c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8240:	bfc2      	ittt	gt
   d8242:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8246:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d824a:	bd70      	popgt	{r4, r5, r6, pc}
   d824c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8250:	f04f 0e00 	mov.w	lr, #0
   d8254:	3c01      	subs	r4, #1
   d8256:	e690      	b.n	d7f7a <__aeabi_dmul+0xde>
   d8258:	ea45 0e06 	orr.w	lr, r5, r6
   d825c:	e68d      	b.n	d7f7a <__aeabi_dmul+0xde>
   d825e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8262:	ea94 0f0c 	teq	r4, ip
   d8266:	bf08      	it	eq
   d8268:	ea95 0f0c 	teqeq	r5, ip
   d826c:	f43f af3b 	beq.w	d80e6 <__aeabi_dmul+0x24a>
   d8270:	ea94 0f0c 	teq	r4, ip
   d8274:	d10a      	bne.n	d828c <__aeabi_ddiv+0x19c>
   d8276:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d827a:	f47f af34 	bne.w	d80e6 <__aeabi_dmul+0x24a>
   d827e:	ea95 0f0c 	teq	r5, ip
   d8282:	f47f af25 	bne.w	d80d0 <__aeabi_dmul+0x234>
   d8286:	4610      	mov	r0, r2
   d8288:	4619      	mov	r1, r3
   d828a:	e72c      	b.n	d80e6 <__aeabi_dmul+0x24a>
   d828c:	ea95 0f0c 	teq	r5, ip
   d8290:	d106      	bne.n	d82a0 <__aeabi_ddiv+0x1b0>
   d8292:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8296:	f43f aefd 	beq.w	d8094 <__aeabi_dmul+0x1f8>
   d829a:	4610      	mov	r0, r2
   d829c:	4619      	mov	r1, r3
   d829e:	e722      	b.n	d80e6 <__aeabi_dmul+0x24a>
   d82a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82a4:	bf18      	it	ne
   d82a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82aa:	f47f aec5 	bne.w	d8038 <__aeabi_dmul+0x19c>
   d82ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d82b2:	f47f af0d 	bne.w	d80d0 <__aeabi_dmul+0x234>
   d82b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d82ba:	f47f aeeb 	bne.w	d8094 <__aeabi_dmul+0x1f8>
   d82be:	e712      	b.n	d80e6 <__aeabi_dmul+0x24a>

000d82c0 <__aeabi_d2f>:
   d82c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d82c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d82c8:	bf24      	itt	cs
   d82ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d82ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d82d2:	d90d      	bls.n	d82f0 <__aeabi_d2f+0x30>
   d82d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d82d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d82dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d82e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d82e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d82e8:	bf08      	it	eq
   d82ea:	f020 0001 	biceq.w	r0, r0, #1
   d82ee:	4770      	bx	lr
   d82f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d82f4:	d121      	bne.n	d833a <__aeabi_d2f+0x7a>
   d82f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d82fa:	bfbc      	itt	lt
   d82fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8300:	4770      	bxlt	lr
   d8302:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8306:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d830a:	f1c2 0218 	rsb	r2, r2, #24
   d830e:	f1c2 0c20 	rsb	ip, r2, #32
   d8312:	fa10 f30c 	lsls.w	r3, r0, ip
   d8316:	fa20 f002 	lsr.w	r0, r0, r2
   d831a:	bf18      	it	ne
   d831c:	f040 0001 	orrne.w	r0, r0, #1
   d8320:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8324:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8328:	fa03 fc0c 	lsl.w	ip, r3, ip
   d832c:	ea40 000c 	orr.w	r0, r0, ip
   d8330:	fa23 f302 	lsr.w	r3, r3, r2
   d8334:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8338:	e7cc      	b.n	d82d4 <__aeabi_d2f+0x14>
   d833a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d833e:	d107      	bne.n	d8350 <__aeabi_d2f+0x90>
   d8340:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8344:	bf1e      	ittt	ne
   d8346:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d834a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d834e:	4770      	bxne	lr
   d8350:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8354:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8358:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d835c:	4770      	bx	lr
   d835e:	bf00      	nop

000d8360 <atoi>:
   d8360:	220a      	movs	r2, #10
   d8362:	2100      	movs	r1, #0
   d8364:	f000 ba26 	b.w	d87b4 <strtol>

000d8368 <__cxa_atexit>:
   d8368:	b510      	push	{r4, lr}
   d836a:	4c05      	ldr	r4, [pc, #20]	; (d8380 <__cxa_atexit+0x18>)
   d836c:	4613      	mov	r3, r2
   d836e:	b12c      	cbz	r4, d837c <__cxa_atexit+0x14>
   d8370:	460a      	mov	r2, r1
   d8372:	4601      	mov	r1, r0
   d8374:	2002      	movs	r0, #2
   d8376:	f3af 8000 	nop.w
   d837a:	bd10      	pop	{r4, pc}
   d837c:	4620      	mov	r0, r4
   d837e:	bd10      	pop	{r4, pc}
   d8380:	00000000 	.word	0x00000000

000d8384 <localtime>:
   d8384:	b538      	push	{r3, r4, r5, lr}
   d8386:	4b07      	ldr	r3, [pc, #28]	; (d83a4 <localtime+0x20>)
   d8388:	681c      	ldr	r4, [r3, #0]
   d838a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d838c:	4605      	mov	r5, r0
   d838e:	b91b      	cbnz	r3, d8398 <localtime+0x14>
   d8390:	2024      	movs	r0, #36	; 0x24
   d8392:	f7fd fd23 	bl	d5ddc <malloc>
   d8396:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8398:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d839a:	4628      	mov	r0, r5
   d839c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d83a0:	f000 b802 	b.w	d83a8 <localtime_r>
   d83a4:	2003e17c 	.word	0x2003e17c

000d83a8 <localtime_r>:
   d83a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d83ac:	460c      	mov	r4, r1
   d83ae:	4680      	mov	r8, r0
   d83b0:	f000 fd06 	bl	d8dc0 <__gettzinfo>
   d83b4:	4621      	mov	r1, r4
   d83b6:	4607      	mov	r7, r0
   d83b8:	4640      	mov	r0, r8
   d83ba:	f000 fd05 	bl	d8dc8 <gmtime_r>
   d83be:	6946      	ldr	r6, [r0, #20]
   d83c0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d83c4:	07b3      	lsls	r3, r6, #30
   d83c6:	4604      	mov	r4, r0
   d83c8:	d105      	bne.n	d83d6 <localtime_r+0x2e>
   d83ca:	2264      	movs	r2, #100	; 0x64
   d83cc:	fb96 f3f2 	sdiv	r3, r6, r2
   d83d0:	fb02 6313 	mls	r3, r2, r3, r6
   d83d4:	b94b      	cbnz	r3, d83ea <localtime_r+0x42>
   d83d6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d83da:	fb96 f3f5 	sdiv	r3, r6, r5
   d83de:	fb05 6513 	mls	r5, r5, r3, r6
   d83e2:	fab5 f385 	clz	r3, r5
   d83e6:	095b      	lsrs	r3, r3, #5
   d83e8:	e000      	b.n	d83ec <localtime_r+0x44>
   d83ea:	2301      	movs	r3, #1
   d83ec:	4a5f      	ldr	r2, [pc, #380]	; (d856c <localtime_r+0x1c4>)
   d83ee:	2530      	movs	r5, #48	; 0x30
   d83f0:	fb05 2503 	mla	r5, r5, r3, r2
   d83f4:	f000 fb18 	bl	d8a28 <__tz_lock>
   d83f8:	f000 fb18 	bl	d8a2c <_tzset_unlocked>
   d83fc:	4b5c      	ldr	r3, [pc, #368]	; (d8570 <localtime_r+0x1c8>)
   d83fe:	681b      	ldr	r3, [r3, #0]
   d8400:	b1f3      	cbz	r3, d8440 <localtime_r+0x98>
   d8402:	687b      	ldr	r3, [r7, #4]
   d8404:	429e      	cmp	r6, r3
   d8406:	d105      	bne.n	d8414 <localtime_r+0x6c>
   d8408:	6839      	ldr	r1, [r7, #0]
   d840a:	f8d8 3000 	ldr.w	r3, [r8]
   d840e:	69fa      	ldr	r2, [r7, #28]
   d8410:	b941      	cbnz	r1, d8424 <localtime_r+0x7c>
   d8412:	e00a      	b.n	d842a <localtime_r+0x82>
   d8414:	4630      	mov	r0, r6
   d8416:	f000 fa5f 	bl	d88d8 <__tzcalc_limits>
   d841a:	2800      	cmp	r0, #0
   d841c:	d1f4      	bne.n	d8408 <localtime_r+0x60>
   d841e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8422:	e00d      	b.n	d8440 <localtime_r+0x98>
   d8424:	4293      	cmp	r3, r2
   d8426:	db08      	blt.n	d843a <localtime_r+0x92>
   d8428:	e001      	b.n	d842e <localtime_r+0x86>
   d842a:	4293      	cmp	r3, r2
   d842c:	da07      	bge.n	d843e <localtime_r+0x96>
   d842e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8430:	4293      	cmp	r3, r2
   d8432:	bfac      	ite	ge
   d8434:	2300      	movge	r3, #0
   d8436:	2301      	movlt	r3, #1
   d8438:	e002      	b.n	d8440 <localtime_r+0x98>
   d843a:	2300      	movs	r3, #0
   d843c:	e000      	b.n	d8440 <localtime_r+0x98>
   d843e:	2301      	movs	r3, #1
   d8440:	6223      	str	r3, [r4, #32]
   d8442:	6a23      	ldr	r3, [r4, #32]
   d8444:	2b01      	cmp	r3, #1
   d8446:	bf0c      	ite	eq
   d8448:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d844a:	6a39      	ldrne	r1, [r7, #32]
   d844c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8450:	203c      	movs	r0, #60	; 0x3c
   d8452:	fb91 f6f3 	sdiv	r6, r1, r3
   d8456:	fb03 1316 	mls	r3, r3, r6, r1
   d845a:	6861      	ldr	r1, [r4, #4]
   d845c:	fb93 f2f0 	sdiv	r2, r3, r0
   d8460:	fb00 3012 	mls	r0, r0, r2, r3
   d8464:	6823      	ldr	r3, [r4, #0]
   d8466:	1a89      	subs	r1, r1, r2
   d8468:	68a2      	ldr	r2, [r4, #8]
   d846a:	6061      	str	r1, [r4, #4]
   d846c:	1a1b      	subs	r3, r3, r0
   d846e:	1b92      	subs	r2, r2, r6
   d8470:	2b3b      	cmp	r3, #59	; 0x3b
   d8472:	6023      	str	r3, [r4, #0]
   d8474:	60a2      	str	r2, [r4, #8]
   d8476:	dd03      	ble.n	d8480 <localtime_r+0xd8>
   d8478:	3101      	adds	r1, #1
   d847a:	6061      	str	r1, [r4, #4]
   d847c:	3b3c      	subs	r3, #60	; 0x3c
   d847e:	e004      	b.n	d848a <localtime_r+0xe2>
   d8480:	2b00      	cmp	r3, #0
   d8482:	da03      	bge.n	d848c <localtime_r+0xe4>
   d8484:	3901      	subs	r1, #1
   d8486:	6061      	str	r1, [r4, #4]
   d8488:	333c      	adds	r3, #60	; 0x3c
   d848a:	6023      	str	r3, [r4, #0]
   d848c:	6863      	ldr	r3, [r4, #4]
   d848e:	2b3b      	cmp	r3, #59	; 0x3b
   d8490:	dd03      	ble.n	d849a <localtime_r+0xf2>
   d8492:	3201      	adds	r2, #1
   d8494:	60a2      	str	r2, [r4, #8]
   d8496:	3b3c      	subs	r3, #60	; 0x3c
   d8498:	e004      	b.n	d84a4 <localtime_r+0xfc>
   d849a:	2b00      	cmp	r3, #0
   d849c:	da03      	bge.n	d84a6 <localtime_r+0xfe>
   d849e:	3a01      	subs	r2, #1
   d84a0:	60a2      	str	r2, [r4, #8]
   d84a2:	333c      	adds	r3, #60	; 0x3c
   d84a4:	6063      	str	r3, [r4, #4]
   d84a6:	68a3      	ldr	r3, [r4, #8]
   d84a8:	2b17      	cmp	r3, #23
   d84aa:	dd22      	ble.n	d84f2 <localtime_r+0x14a>
   d84ac:	69e2      	ldr	r2, [r4, #28]
   d84ae:	3201      	adds	r2, #1
   d84b0:	61e2      	str	r2, [r4, #28]
   d84b2:	69a2      	ldr	r2, [r4, #24]
   d84b4:	3201      	adds	r2, #1
   d84b6:	2a06      	cmp	r2, #6
   d84b8:	bfc8      	it	gt
   d84ba:	2200      	movgt	r2, #0
   d84bc:	61a2      	str	r2, [r4, #24]
   d84be:	68e2      	ldr	r2, [r4, #12]
   d84c0:	3b18      	subs	r3, #24
   d84c2:	3201      	adds	r2, #1
   d84c4:	60a3      	str	r3, [r4, #8]
   d84c6:	6923      	ldr	r3, [r4, #16]
   d84c8:	60e2      	str	r2, [r4, #12]
   d84ca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d84ce:	428a      	cmp	r2, r1
   d84d0:	dd46      	ble.n	d8560 <localtime_r+0x1b8>
   d84d2:	3301      	adds	r3, #1
   d84d4:	2b0c      	cmp	r3, #12
   d84d6:	bf0c      	ite	eq
   d84d8:	6963      	ldreq	r3, [r4, #20]
   d84da:	6123      	strne	r3, [r4, #16]
   d84dc:	eba2 0201 	sub.w	r2, r2, r1
   d84e0:	60e2      	str	r2, [r4, #12]
   d84e2:	bf01      	itttt	eq
   d84e4:	3301      	addeq	r3, #1
   d84e6:	2200      	moveq	r2, #0
   d84e8:	6122      	streq	r2, [r4, #16]
   d84ea:	6163      	streq	r3, [r4, #20]
   d84ec:	bf08      	it	eq
   d84ee:	61e2      	streq	r2, [r4, #28]
   d84f0:	e036      	b.n	d8560 <localtime_r+0x1b8>
   d84f2:	2b00      	cmp	r3, #0
   d84f4:	da34      	bge.n	d8560 <localtime_r+0x1b8>
   d84f6:	69e2      	ldr	r2, [r4, #28]
   d84f8:	3a01      	subs	r2, #1
   d84fa:	61e2      	str	r2, [r4, #28]
   d84fc:	69a2      	ldr	r2, [r4, #24]
   d84fe:	3a01      	subs	r2, #1
   d8500:	bf48      	it	mi
   d8502:	2206      	movmi	r2, #6
   d8504:	61a2      	str	r2, [r4, #24]
   d8506:	68e2      	ldr	r2, [r4, #12]
   d8508:	3318      	adds	r3, #24
   d850a:	3a01      	subs	r2, #1
   d850c:	60e2      	str	r2, [r4, #12]
   d850e:	60a3      	str	r3, [r4, #8]
   d8510:	bb32      	cbnz	r2, d8560 <localtime_r+0x1b8>
   d8512:	6923      	ldr	r3, [r4, #16]
   d8514:	3b01      	subs	r3, #1
   d8516:	d401      	bmi.n	d851c <localtime_r+0x174>
   d8518:	6123      	str	r3, [r4, #16]
   d851a:	e01d      	b.n	d8558 <localtime_r+0x1b0>
   d851c:	230b      	movs	r3, #11
   d851e:	6123      	str	r3, [r4, #16]
   d8520:	6963      	ldr	r3, [r4, #20]
   d8522:	1e5a      	subs	r2, r3, #1
   d8524:	f012 0f03 	tst.w	r2, #3
   d8528:	6162      	str	r2, [r4, #20]
   d852a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d852e:	d105      	bne.n	d853c <localtime_r+0x194>
   d8530:	2164      	movs	r1, #100	; 0x64
   d8532:	fb93 f2f1 	sdiv	r2, r3, r1
   d8536:	fb01 3212 	mls	r2, r1, r2, r3
   d853a:	b94a      	cbnz	r2, d8550 <localtime_r+0x1a8>
   d853c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8540:	fb93 f2f1 	sdiv	r2, r3, r1
   d8544:	fb01 3312 	mls	r3, r1, r2, r3
   d8548:	fab3 f383 	clz	r3, r3
   d854c:	095b      	lsrs	r3, r3, #5
   d854e:	e000      	b.n	d8552 <localtime_r+0x1aa>
   d8550:	2301      	movs	r3, #1
   d8552:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8556:	61e3      	str	r3, [r4, #28]
   d8558:	6923      	ldr	r3, [r4, #16]
   d855a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d855e:	60e3      	str	r3, [r4, #12]
   d8560:	f000 fa63 	bl	d8a2a <__tz_unlock>
   d8564:	4620      	mov	r0, r4
   d8566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d856a:	bf00      	nop
   d856c:	000d98ac 	.word	0x000d98ac
   d8570:	2003e7e4 	.word	0x2003e7e4

000d8574 <memcpy>:
   d8574:	b510      	push	{r4, lr}
   d8576:	1e43      	subs	r3, r0, #1
   d8578:	440a      	add	r2, r1
   d857a:	4291      	cmp	r1, r2
   d857c:	d004      	beq.n	d8588 <memcpy+0x14>
   d857e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8582:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8586:	e7f8      	b.n	d857a <memcpy+0x6>
   d8588:	bd10      	pop	{r4, pc}

000d858a <memset>:
   d858a:	4402      	add	r2, r0
   d858c:	4603      	mov	r3, r0
   d858e:	4293      	cmp	r3, r2
   d8590:	d002      	beq.n	d8598 <memset+0xe>
   d8592:	f803 1b01 	strb.w	r1, [r3], #1
   d8596:	e7fa      	b.n	d858e <memset+0x4>
   d8598:	4770      	bx	lr
	...

000d859c <srand>:
   d859c:	b538      	push	{r3, r4, r5, lr}
   d859e:	4b12      	ldr	r3, [pc, #72]	; (d85e8 <srand+0x4c>)
   d85a0:	681c      	ldr	r4, [r3, #0]
   d85a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d85a4:	4605      	mov	r5, r0
   d85a6:	b9d3      	cbnz	r3, d85de <srand+0x42>
   d85a8:	2018      	movs	r0, #24
   d85aa:	f7fd fc17 	bl	d5ddc <malloc>
   d85ae:	f243 330e 	movw	r3, #13070	; 0x330e
   d85b2:	63a0      	str	r0, [r4, #56]	; 0x38
   d85b4:	8003      	strh	r3, [r0, #0]
   d85b6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d85ba:	8043      	strh	r3, [r0, #2]
   d85bc:	f241 2334 	movw	r3, #4660	; 0x1234
   d85c0:	8083      	strh	r3, [r0, #4]
   d85c2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d85c6:	80c3      	strh	r3, [r0, #6]
   d85c8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d85cc:	8103      	strh	r3, [r0, #8]
   d85ce:	2305      	movs	r3, #5
   d85d0:	8143      	strh	r3, [r0, #10]
   d85d2:	230b      	movs	r3, #11
   d85d4:	8183      	strh	r3, [r0, #12]
   d85d6:	2201      	movs	r2, #1
   d85d8:	2300      	movs	r3, #0
   d85da:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d85de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d85e0:	2200      	movs	r2, #0
   d85e2:	611d      	str	r5, [r3, #16]
   d85e4:	615a      	str	r2, [r3, #20]
   d85e6:	bd38      	pop	{r3, r4, r5, pc}
   d85e8:	2003e17c 	.word	0x2003e17c

000d85ec <strcmp>:
   d85ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   d85f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d85f4:	2a01      	cmp	r2, #1
   d85f6:	bf28      	it	cs
   d85f8:	429a      	cmpcs	r2, r3
   d85fa:	d0f7      	beq.n	d85ec <strcmp>
   d85fc:	1ad0      	subs	r0, r2, r3
   d85fe:	4770      	bx	lr

000d8600 <strcpy>:
   d8600:	4603      	mov	r3, r0
   d8602:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8606:	f803 2b01 	strb.w	r2, [r3], #1
   d860a:	2a00      	cmp	r2, #0
   d860c:	d1f9      	bne.n	d8602 <strcpy+0x2>
   d860e:	4770      	bx	lr

000d8610 <strdup>:
   d8610:	4b02      	ldr	r3, [pc, #8]	; (d861c <strdup+0xc>)
   d8612:	4601      	mov	r1, r0
   d8614:	6818      	ldr	r0, [r3, #0]
   d8616:	f000 b803 	b.w	d8620 <_strdup_r>
   d861a:	bf00      	nop
   d861c:	2003e17c 	.word	0x2003e17c

000d8620 <_strdup_r>:
   d8620:	b570      	push	{r4, r5, r6, lr}
   d8622:	4606      	mov	r6, r0
   d8624:	4608      	mov	r0, r1
   d8626:	460c      	mov	r4, r1
   d8628:	f000 f80d 	bl	d8646 <strlen>
   d862c:	1c45      	adds	r5, r0, #1
   d862e:	4629      	mov	r1, r5
   d8630:	4630      	mov	r0, r6
   d8632:	f7fd fc03 	bl	d5e3c <_malloc_r>
   d8636:	4606      	mov	r6, r0
   d8638:	b118      	cbz	r0, d8642 <_strdup_r+0x22>
   d863a:	462a      	mov	r2, r5
   d863c:	4621      	mov	r1, r4
   d863e:	f7ff ff99 	bl	d8574 <memcpy>
   d8642:	4630      	mov	r0, r6
   d8644:	bd70      	pop	{r4, r5, r6, pc}

000d8646 <strlen>:
   d8646:	4603      	mov	r3, r0
   d8648:	f813 2b01 	ldrb.w	r2, [r3], #1
   d864c:	2a00      	cmp	r2, #0
   d864e:	d1fb      	bne.n	d8648 <strlen+0x2>
   d8650:	1a18      	subs	r0, r3, r0
   d8652:	3801      	subs	r0, #1
   d8654:	4770      	bx	lr

000d8656 <strncmp>:
   d8656:	b530      	push	{r4, r5, lr}
   d8658:	b182      	cbz	r2, d867c <strncmp+0x26>
   d865a:	1e45      	subs	r5, r0, #1
   d865c:	3901      	subs	r1, #1
   d865e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8662:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8666:	42a3      	cmp	r3, r4
   d8668:	d106      	bne.n	d8678 <strncmp+0x22>
   d866a:	43ec      	mvns	r4, r5
   d866c:	4414      	add	r4, r2
   d866e:	42e0      	cmn	r0, r4
   d8670:	d001      	beq.n	d8676 <strncmp+0x20>
   d8672:	2b00      	cmp	r3, #0
   d8674:	d1f3      	bne.n	d865e <strncmp+0x8>
   d8676:	461c      	mov	r4, r3
   d8678:	1b18      	subs	r0, r3, r4
   d867a:	bd30      	pop	{r4, r5, pc}
   d867c:	4610      	mov	r0, r2
   d867e:	bd30      	pop	{r4, r5, pc}

000d8680 <strncpy>:
   d8680:	b510      	push	{r4, lr}
   d8682:	4603      	mov	r3, r0
   d8684:	b142      	cbz	r2, d8698 <strncpy+0x18>
   d8686:	f811 4b01 	ldrb.w	r4, [r1], #1
   d868a:	f803 4b01 	strb.w	r4, [r3], #1
   d868e:	3a01      	subs	r2, #1
   d8690:	2c00      	cmp	r4, #0
   d8692:	d1f7      	bne.n	d8684 <strncpy+0x4>
   d8694:	441a      	add	r2, r3
   d8696:	e000      	b.n	d869a <strncpy+0x1a>
   d8698:	bd10      	pop	{r4, pc}
   d869a:	4293      	cmp	r3, r2
   d869c:	d002      	beq.n	d86a4 <strncpy+0x24>
   d869e:	f803 4b01 	strb.w	r4, [r3], #1
   d86a2:	e7fa      	b.n	d869a <strncpy+0x1a>
   d86a4:	bd10      	pop	{r4, pc}
	...

000d86a8 <_strtol_r>:
   d86a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d86ac:	4680      	mov	r8, r0
   d86ae:	4840      	ldr	r0, [pc, #256]	; (d87b0 <_strtol_r+0x108>)
   d86b0:	f8d0 9000 	ldr.w	r9, [r0]
   d86b4:	460f      	mov	r7, r1
   d86b6:	463d      	mov	r5, r7
   d86b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d86bc:	eb09 0004 	add.w	r0, r9, r4
   d86c0:	7840      	ldrb	r0, [r0, #1]
   d86c2:	f000 0008 	and.w	r0, r0, #8
   d86c6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d86ca:	b108      	cbz	r0, d86d0 <_strtol_r+0x28>
   d86cc:	462f      	mov	r7, r5
   d86ce:	e7f2      	b.n	d86b6 <_strtol_r+0xe>
   d86d0:	2c2d      	cmp	r4, #45	; 0x2d
   d86d2:	d103      	bne.n	d86dc <_strtol_r+0x34>
   d86d4:	1cbd      	adds	r5, r7, #2
   d86d6:	787c      	ldrb	r4, [r7, #1]
   d86d8:	2601      	movs	r6, #1
   d86da:	e003      	b.n	d86e4 <_strtol_r+0x3c>
   d86dc:	2c2b      	cmp	r4, #43	; 0x2b
   d86de:	bf04      	itt	eq
   d86e0:	787c      	ldrbeq	r4, [r7, #1]
   d86e2:	1cbd      	addeq	r5, r7, #2
   d86e4:	b113      	cbz	r3, d86ec <_strtol_r+0x44>
   d86e6:	2b10      	cmp	r3, #16
   d86e8:	d10a      	bne.n	d8700 <_strtol_r+0x58>
   d86ea:	e05b      	b.n	d87a4 <_strtol_r+0xfc>
   d86ec:	2c30      	cmp	r4, #48	; 0x30
   d86ee:	d157      	bne.n	d87a0 <_strtol_r+0xf8>
   d86f0:	7828      	ldrb	r0, [r5, #0]
   d86f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d86f6:	2858      	cmp	r0, #88	; 0x58
   d86f8:	d14d      	bne.n	d8796 <_strtol_r+0xee>
   d86fa:	786c      	ldrb	r4, [r5, #1]
   d86fc:	2310      	movs	r3, #16
   d86fe:	3502      	adds	r5, #2
   d8700:	2e00      	cmp	r6, #0
   d8702:	bf14      	ite	ne
   d8704:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8708:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d870c:	2700      	movs	r7, #0
   d870e:	fbbc faf3 	udiv	sl, ip, r3
   d8712:	4638      	mov	r0, r7
   d8714:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8718:	eb09 0e04 	add.w	lr, r9, r4
   d871c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8720:	f01e 0f04 	tst.w	lr, #4
   d8724:	d001      	beq.n	d872a <_strtol_r+0x82>
   d8726:	3c30      	subs	r4, #48	; 0x30
   d8728:	e00b      	b.n	d8742 <_strtol_r+0x9a>
   d872a:	f01e 0e03 	ands.w	lr, lr, #3
   d872e:	d01b      	beq.n	d8768 <_strtol_r+0xc0>
   d8730:	f1be 0f01 	cmp.w	lr, #1
   d8734:	bf0c      	ite	eq
   d8736:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d873a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d873e:	ebce 0404 	rsb	r4, lr, r4
   d8742:	42a3      	cmp	r3, r4
   d8744:	dd10      	ble.n	d8768 <_strtol_r+0xc0>
   d8746:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d874a:	d00a      	beq.n	d8762 <_strtol_r+0xba>
   d874c:	4550      	cmp	r0, sl
   d874e:	d806      	bhi.n	d875e <_strtol_r+0xb6>
   d8750:	d101      	bne.n	d8756 <_strtol_r+0xae>
   d8752:	4564      	cmp	r4, ip
   d8754:	dc03      	bgt.n	d875e <_strtol_r+0xb6>
   d8756:	fb03 4000 	mla	r0, r3, r0, r4
   d875a:	2701      	movs	r7, #1
   d875c:	e001      	b.n	d8762 <_strtol_r+0xba>
   d875e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8762:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8766:	e7d7      	b.n	d8718 <_strtol_r+0x70>
   d8768:	1c7b      	adds	r3, r7, #1
   d876a:	d10c      	bne.n	d8786 <_strtol_r+0xde>
   d876c:	2e00      	cmp	r6, #0
   d876e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8772:	bf14      	ite	ne
   d8774:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8778:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d877c:	f8c8 3000 	str.w	r3, [r8]
   d8780:	b92a      	cbnz	r2, d878e <_strtol_r+0xe6>
   d8782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8786:	b106      	cbz	r6, d878a <_strtol_r+0xe2>
   d8788:	4240      	negs	r0, r0
   d878a:	b172      	cbz	r2, d87aa <_strtol_r+0x102>
   d878c:	b107      	cbz	r7, d8790 <_strtol_r+0xe8>
   d878e:	1e69      	subs	r1, r5, #1
   d8790:	6011      	str	r1, [r2, #0]
   d8792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8796:	2430      	movs	r4, #48	; 0x30
   d8798:	2b00      	cmp	r3, #0
   d879a:	d1b1      	bne.n	d8700 <_strtol_r+0x58>
   d879c:	2308      	movs	r3, #8
   d879e:	e7af      	b.n	d8700 <_strtol_r+0x58>
   d87a0:	230a      	movs	r3, #10
   d87a2:	e7ad      	b.n	d8700 <_strtol_r+0x58>
   d87a4:	2c30      	cmp	r4, #48	; 0x30
   d87a6:	d0a3      	beq.n	d86f0 <_strtol_r+0x48>
   d87a8:	e7aa      	b.n	d8700 <_strtol_r+0x58>
   d87aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d87ae:	bf00      	nop
   d87b0:	2003e118 	.word	0x2003e118

000d87b4 <strtol>:
   d87b4:	4613      	mov	r3, r2
   d87b6:	460a      	mov	r2, r1
   d87b8:	4601      	mov	r1, r0
   d87ba:	4802      	ldr	r0, [pc, #8]	; (d87c4 <strtol+0x10>)
   d87bc:	6800      	ldr	r0, [r0, #0]
   d87be:	f7ff bf73 	b.w	d86a8 <_strtol_r>
   d87c2:	bf00      	nop
   d87c4:	2003e17c 	.word	0x2003e17c

000d87c8 <_strtoul_r>:
   d87c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d87cc:	4680      	mov	r8, r0
   d87ce:	483c      	ldr	r0, [pc, #240]	; (d88c0 <_strtoul_r+0xf8>)
   d87d0:	f8d0 9000 	ldr.w	r9, [r0]
   d87d4:	460e      	mov	r6, r1
   d87d6:	4635      	mov	r5, r6
   d87d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d87dc:	eb09 0004 	add.w	r0, r9, r4
   d87e0:	7840      	ldrb	r0, [r0, #1]
   d87e2:	f000 0008 	and.w	r0, r0, #8
   d87e6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d87ea:	b108      	cbz	r0, d87f0 <_strtoul_r+0x28>
   d87ec:	462e      	mov	r6, r5
   d87ee:	e7f2      	b.n	d87d6 <_strtoul_r+0xe>
   d87f0:	2c2d      	cmp	r4, #45	; 0x2d
   d87f2:	d103      	bne.n	d87fc <_strtoul_r+0x34>
   d87f4:	1cb5      	adds	r5, r6, #2
   d87f6:	7874      	ldrb	r4, [r6, #1]
   d87f8:	2701      	movs	r7, #1
   d87fa:	e003      	b.n	d8804 <_strtoul_r+0x3c>
   d87fc:	2c2b      	cmp	r4, #43	; 0x2b
   d87fe:	bf04      	itt	eq
   d8800:	7874      	ldrbeq	r4, [r6, #1]
   d8802:	1cb5      	addeq	r5, r6, #2
   d8804:	b113      	cbz	r3, d880c <_strtoul_r+0x44>
   d8806:	2b10      	cmp	r3, #16
   d8808:	d10a      	bne.n	d8820 <_strtoul_r+0x58>
   d880a:	e053      	b.n	d88b4 <_strtoul_r+0xec>
   d880c:	2c30      	cmp	r4, #48	; 0x30
   d880e:	d14f      	bne.n	d88b0 <_strtoul_r+0xe8>
   d8810:	7828      	ldrb	r0, [r5, #0]
   d8812:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8816:	2858      	cmp	r0, #88	; 0x58
   d8818:	d145      	bne.n	d88a6 <_strtoul_r+0xde>
   d881a:	786c      	ldrb	r4, [r5, #1]
   d881c:	2310      	movs	r3, #16
   d881e:	3502      	adds	r5, #2
   d8820:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8824:	2600      	movs	r6, #0
   d8826:	fbbc fcf3 	udiv	ip, ip, r3
   d882a:	fb03 fa0c 	mul.w	sl, r3, ip
   d882e:	ea6f 0a0a 	mvn.w	sl, sl
   d8832:	4630      	mov	r0, r6
   d8834:	eb09 0e04 	add.w	lr, r9, r4
   d8838:	f89e e001 	ldrb.w	lr, [lr, #1]
   d883c:	f01e 0f04 	tst.w	lr, #4
   d8840:	d001      	beq.n	d8846 <_strtoul_r+0x7e>
   d8842:	3c30      	subs	r4, #48	; 0x30
   d8844:	e00b      	b.n	d885e <_strtoul_r+0x96>
   d8846:	f01e 0e03 	ands.w	lr, lr, #3
   d884a:	d01a      	beq.n	d8882 <_strtoul_r+0xba>
   d884c:	f1be 0f01 	cmp.w	lr, #1
   d8850:	bf0c      	ite	eq
   d8852:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8856:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d885a:	ebce 0404 	rsb	r4, lr, r4
   d885e:	42a3      	cmp	r3, r4
   d8860:	dd0f      	ble.n	d8882 <_strtoul_r+0xba>
   d8862:	2e00      	cmp	r6, #0
   d8864:	db08      	blt.n	d8878 <_strtoul_r+0xb0>
   d8866:	4560      	cmp	r0, ip
   d8868:	d806      	bhi.n	d8878 <_strtoul_r+0xb0>
   d886a:	d101      	bne.n	d8870 <_strtoul_r+0xa8>
   d886c:	4554      	cmp	r4, sl
   d886e:	dc03      	bgt.n	d8878 <_strtoul_r+0xb0>
   d8870:	fb03 4000 	mla	r0, r3, r0, r4
   d8874:	2601      	movs	r6, #1
   d8876:	e001      	b.n	d887c <_strtoul_r+0xb4>
   d8878:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d887c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8880:	e7d8      	b.n	d8834 <_strtoul_r+0x6c>
   d8882:	2e00      	cmp	r6, #0
   d8884:	da07      	bge.n	d8896 <_strtoul_r+0xce>
   d8886:	2322      	movs	r3, #34	; 0x22
   d8888:	f8c8 3000 	str.w	r3, [r8]
   d888c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8890:	b92a      	cbnz	r2, d889e <_strtoul_r+0xd6>
   d8892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8896:	b107      	cbz	r7, d889a <_strtoul_r+0xd2>
   d8898:	4240      	negs	r0, r0
   d889a:	b172      	cbz	r2, d88ba <_strtoul_r+0xf2>
   d889c:	b106      	cbz	r6, d88a0 <_strtoul_r+0xd8>
   d889e:	1e69      	subs	r1, r5, #1
   d88a0:	6011      	str	r1, [r2, #0]
   d88a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d88a6:	2430      	movs	r4, #48	; 0x30
   d88a8:	2b00      	cmp	r3, #0
   d88aa:	d1b9      	bne.n	d8820 <_strtoul_r+0x58>
   d88ac:	2308      	movs	r3, #8
   d88ae:	e7b7      	b.n	d8820 <_strtoul_r+0x58>
   d88b0:	230a      	movs	r3, #10
   d88b2:	e7b5      	b.n	d8820 <_strtoul_r+0x58>
   d88b4:	2c30      	cmp	r4, #48	; 0x30
   d88b6:	d0ab      	beq.n	d8810 <_strtoul_r+0x48>
   d88b8:	e7b2      	b.n	d8820 <_strtoul_r+0x58>
   d88ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d88be:	bf00      	nop
   d88c0:	2003e118 	.word	0x2003e118

000d88c4 <strtoul>:
   d88c4:	4613      	mov	r3, r2
   d88c6:	460a      	mov	r2, r1
   d88c8:	4601      	mov	r1, r0
   d88ca:	4802      	ldr	r0, [pc, #8]	; (d88d4 <strtoul+0x10>)
   d88cc:	6800      	ldr	r0, [r0, #0]
   d88ce:	f7ff bf7b 	b.w	d87c8 <_strtoul_r>
   d88d2:	bf00      	nop
   d88d4:	2003e17c 	.word	0x2003e17c

000d88d8 <__tzcalc_limits>:
   d88d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88dc:	4604      	mov	r4, r0
   d88de:	f000 fa6f 	bl	d8dc0 <__gettzinfo>
   d88e2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d88e6:	429c      	cmp	r4, r3
   d88e8:	f340 8096 	ble.w	d8a18 <__tzcalc_limits+0x140>
   d88ec:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d88f0:	18e3      	adds	r3, r4, r3
   d88f2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d88f6:	109b      	asrs	r3, r3, #2
   d88f8:	f240 156d 	movw	r5, #365	; 0x16d
   d88fc:	fb05 3502 	mla	r5, r5, r2, r3
   d8900:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8904:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8908:	fb92 f3f3 	sdiv	r3, r2, r3
   d890c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8910:	442b      	add	r3, r5
   d8912:	18a5      	adds	r5, r4, r2
   d8914:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8918:	fb95 f5f2 	sdiv	r5, r5, r2
   d891c:	441d      	add	r5, r3
   d891e:	2364      	movs	r3, #100	; 0x64
   d8920:	fb94 f7f2 	sdiv	r7, r4, r2
   d8924:	fb94 f6f3 	sdiv	r6, r4, r3
   d8928:	fb02 4717 	mls	r7, r2, r7, r4
   d892c:	fb03 4616 	mls	r6, r3, r6, r4
   d8930:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8934:	fab7 fe87 	clz	lr, r7
   d8938:	9301      	str	r3, [sp, #4]
   d893a:	f004 0303 	and.w	r3, r4, #3
   d893e:	6044      	str	r4, [r0, #4]
   d8940:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8944:	4601      	mov	r1, r0
   d8946:	9300      	str	r3, [sp, #0]
   d8948:	f04f 0c07 	mov.w	ip, #7
   d894c:	7a0b      	ldrb	r3, [r1, #8]
   d894e:	2b4a      	cmp	r3, #74	; 0x4a
   d8950:	d10e      	bne.n	d8970 <__tzcalc_limits+0x98>
   d8952:	694b      	ldr	r3, [r1, #20]
   d8954:	9a00      	ldr	r2, [sp, #0]
   d8956:	18ec      	adds	r4, r5, r3
   d8958:	b902      	cbnz	r2, d895c <__tzcalc_limits+0x84>
   d895a:	b906      	cbnz	r6, d895e <__tzcalc_limits+0x86>
   d895c:	b927      	cbnz	r7, d8968 <__tzcalc_limits+0x90>
   d895e:	2b3b      	cmp	r3, #59	; 0x3b
   d8960:	bfd4      	ite	le
   d8962:	2300      	movle	r3, #0
   d8964:	2301      	movgt	r3, #1
   d8966:	e000      	b.n	d896a <__tzcalc_limits+0x92>
   d8968:	2300      	movs	r3, #0
   d896a:	4423      	add	r3, r4
   d896c:	3b01      	subs	r3, #1
   d896e:	e03f      	b.n	d89f0 <__tzcalc_limits+0x118>
   d8970:	2b44      	cmp	r3, #68	; 0x44
   d8972:	d102      	bne.n	d897a <__tzcalc_limits+0xa2>
   d8974:	694b      	ldr	r3, [r1, #20]
   d8976:	442b      	add	r3, r5
   d8978:	e03a      	b.n	d89f0 <__tzcalc_limits+0x118>
   d897a:	9b00      	ldr	r3, [sp, #0]
   d897c:	b92b      	cbnz	r3, d898a <__tzcalc_limits+0xb2>
   d897e:	2e00      	cmp	r6, #0
   d8980:	bf0c      	ite	eq
   d8982:	46f0      	moveq	r8, lr
   d8984:	f04f 0801 	movne.w	r8, #1
   d8988:	e000      	b.n	d898c <__tzcalc_limits+0xb4>
   d898a:	46f0      	mov	r8, lr
   d898c:	4b24      	ldr	r3, [pc, #144]	; (d8a20 <__tzcalc_limits+0x148>)
   d898e:	68cc      	ldr	r4, [r1, #12]
   d8990:	2230      	movs	r2, #48	; 0x30
   d8992:	fb02 3808 	mla	r8, r2, r8, r3
   d8996:	f1a8 0a04 	sub.w	sl, r8, #4
   d899a:	46a9      	mov	r9, r5
   d899c:	2301      	movs	r3, #1
   d899e:	42a3      	cmp	r3, r4
   d89a0:	da04      	bge.n	d89ac <__tzcalc_limits+0xd4>
   d89a2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d89a6:	3301      	adds	r3, #1
   d89a8:	44d9      	add	r9, fp
   d89aa:	e7f8      	b.n	d899e <__tzcalc_limits+0xc6>
   d89ac:	f109 0304 	add.w	r3, r9, #4
   d89b0:	fb93 fbfc 	sdiv	fp, r3, ip
   d89b4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d89b8:	2c01      	cmp	r4, #1
   d89ba:	ebca 0a03 	rsb	sl, sl, r3
   d89be:	694b      	ldr	r3, [r1, #20]
   d89c0:	bfb8      	it	lt
   d89c2:	2401      	movlt	r4, #1
   d89c4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d89c8:	ebb3 0a0a 	subs.w	sl, r3, sl
   d89cc:	690b      	ldr	r3, [r1, #16]
   d89ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d89d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d89d6:	bf48      	it	mi
   d89d8:	f10a 0a07 	addmi.w	sl, sl, #7
   d89dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d89e0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d89e4:	4453      	add	r3, sl
   d89e6:	42a3      	cmp	r3, r4
   d89e8:	db01      	blt.n	d89ee <__tzcalc_limits+0x116>
   d89ea:	3b07      	subs	r3, #7
   d89ec:	e7fb      	b.n	d89e6 <__tzcalc_limits+0x10e>
   d89ee:	444b      	add	r3, r9
   d89f0:	698c      	ldr	r4, [r1, #24]
   d89f2:	4a0c      	ldr	r2, [pc, #48]	; (d8a24 <__tzcalc_limits+0x14c>)
   d89f4:	fb02 4303 	mla	r3, r2, r3, r4
   d89f8:	6a0c      	ldr	r4, [r1, #32]
   d89fa:	4423      	add	r3, r4
   d89fc:	f841 3f1c 	str.w	r3, [r1, #28]!
   d8a00:	9b01      	ldr	r3, [sp, #4]
   d8a02:	4299      	cmp	r1, r3
   d8a04:	d1a2      	bne.n	d894c <__tzcalc_limits+0x74>
   d8a06:	69c3      	ldr	r3, [r0, #28]
   d8a08:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d8a0a:	4293      	cmp	r3, r2
   d8a0c:	bfac      	ite	ge
   d8a0e:	2300      	movge	r3, #0
   d8a10:	2301      	movlt	r3, #1
   d8a12:	6003      	str	r3, [r0, #0]
   d8a14:	2001      	movs	r0, #1
   d8a16:	e000      	b.n	d8a1a <__tzcalc_limits+0x142>
   d8a18:	2000      	movs	r0, #0
   d8a1a:	b003      	add	sp, #12
   d8a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a20:	000d98ac 	.word	0x000d98ac
   d8a24:	00015180 	.word	0x00015180

000d8a28 <__tz_lock>:
   d8a28:	4770      	bx	lr

000d8a2a <__tz_unlock>:
   d8a2a:	4770      	bx	lr

000d8a2c <_tzset_unlocked>:
   d8a2c:	4b01      	ldr	r3, [pc, #4]	; (d8a34 <_tzset_unlocked+0x8>)
   d8a2e:	6818      	ldr	r0, [r3, #0]
   d8a30:	f000 b802 	b.w	d8a38 <_tzset_unlocked_r>
   d8a34:	2003e17c 	.word	0x2003e17c

000d8a38 <_tzset_unlocked_r>:
   d8a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a3c:	b08d      	sub	sp, #52	; 0x34
   d8a3e:	4607      	mov	r7, r0
   d8a40:	f000 f9be 	bl	d8dc0 <__gettzinfo>
   d8a44:	49b0      	ldr	r1, [pc, #704]	; (d8d08 <_tzset_unlocked_r+0x2d0>)
   d8a46:	4eb1      	ldr	r6, [pc, #708]	; (d8d0c <_tzset_unlocked_r+0x2d4>)
   d8a48:	4604      	mov	r4, r0
   d8a4a:	4638      	mov	r0, r7
   d8a4c:	f000 f9b0 	bl	d8db0 <_getenv_r>
   d8a50:	4605      	mov	r5, r0
   d8a52:	b960      	cbnz	r0, d8a6e <_tzset_unlocked_r+0x36>
   d8a54:	4bae      	ldr	r3, [pc, #696]	; (d8d10 <_tzset_unlocked_r+0x2d8>)
   d8a56:	4aaf      	ldr	r2, [pc, #700]	; (d8d14 <_tzset_unlocked_r+0x2dc>)
   d8a58:	6018      	str	r0, [r3, #0]
   d8a5a:	4baf      	ldr	r3, [pc, #700]	; (d8d18 <_tzset_unlocked_r+0x2e0>)
   d8a5c:	6018      	str	r0, [r3, #0]
   d8a5e:	4baf      	ldr	r3, [pc, #700]	; (d8d1c <_tzset_unlocked_r+0x2e4>)
   d8a60:	6830      	ldr	r0, [r6, #0]
   d8a62:	601a      	str	r2, [r3, #0]
   d8a64:	605a      	str	r2, [r3, #4]
   d8a66:	f7fd f9c1 	bl	d5dec <free>
   d8a6a:	6035      	str	r5, [r6, #0]
   d8a6c:	e148      	b.n	d8d00 <_tzset_unlocked_r+0x2c8>
   d8a6e:	6831      	ldr	r1, [r6, #0]
   d8a70:	b979      	cbnz	r1, d8a92 <_tzset_unlocked_r+0x5a>
   d8a72:	6830      	ldr	r0, [r6, #0]
   d8a74:	f7fd f9ba 	bl	d5dec <free>
   d8a78:	4628      	mov	r0, r5
   d8a7a:	f7ff fde4 	bl	d8646 <strlen>
   d8a7e:	1c41      	adds	r1, r0, #1
   d8a80:	4638      	mov	r0, r7
   d8a82:	f7fd f9db 	bl	d5e3c <_malloc_r>
   d8a86:	6030      	str	r0, [r6, #0]
   d8a88:	b148      	cbz	r0, d8a9e <_tzset_unlocked_r+0x66>
   d8a8a:	4629      	mov	r1, r5
   d8a8c:	f7ff fdb8 	bl	d8600 <strcpy>
   d8a90:	e005      	b.n	d8a9e <_tzset_unlocked_r+0x66>
   d8a92:	f7ff fdab 	bl	d85ec <strcmp>
   d8a96:	2800      	cmp	r0, #0
   d8a98:	f000 8132 	beq.w	d8d00 <_tzset_unlocked_r+0x2c8>
   d8a9c:	e7e9      	b.n	d8a72 <_tzset_unlocked_r+0x3a>
   d8a9e:	782b      	ldrb	r3, [r5, #0]
   d8aa0:	4a9f      	ldr	r2, [pc, #636]	; (d8d20 <_tzset_unlocked_r+0x2e8>)
   d8aa2:	49a0      	ldr	r1, [pc, #640]	; (d8d24 <_tzset_unlocked_r+0x2ec>)
   d8aa4:	2b3a      	cmp	r3, #58	; 0x3a
   d8aa6:	bf08      	it	eq
   d8aa8:	3501      	addeq	r5, #1
   d8aaa:	ae0a      	add	r6, sp, #40	; 0x28
   d8aac:	4633      	mov	r3, r6
   d8aae:	4628      	mov	r0, r5
   d8ab0:	f7fd f9ac 	bl	d5e0c <siscanf>
   d8ab4:	2800      	cmp	r0, #0
   d8ab6:	f340 8123 	ble.w	d8d00 <_tzset_unlocked_r+0x2c8>
   d8aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8abc:	18ef      	adds	r7, r5, r3
   d8abe:	5ceb      	ldrb	r3, [r5, r3]
   d8ac0:	2b2d      	cmp	r3, #45	; 0x2d
   d8ac2:	d103      	bne.n	d8acc <_tzset_unlocked_r+0x94>
   d8ac4:	3701      	adds	r7, #1
   d8ac6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8aca:	e003      	b.n	d8ad4 <_tzset_unlocked_r+0x9c>
   d8acc:	2b2b      	cmp	r3, #43	; 0x2b
   d8ace:	bf08      	it	eq
   d8ad0:	3701      	addeq	r7, #1
   d8ad2:	2501      	movs	r5, #1
   d8ad4:	f10d 0a20 	add.w	sl, sp, #32
   d8ad8:	f10d 0b1e 	add.w	fp, sp, #30
   d8adc:	f04f 0800 	mov.w	r8, #0
   d8ae0:	9603      	str	r6, [sp, #12]
   d8ae2:	f8cd a008 	str.w	sl, [sp, #8]
   d8ae6:	9601      	str	r6, [sp, #4]
   d8ae8:	f8cd b000 	str.w	fp, [sp]
   d8aec:	4633      	mov	r3, r6
   d8aee:	aa07      	add	r2, sp, #28
   d8af0:	498d      	ldr	r1, [pc, #564]	; (d8d28 <_tzset_unlocked_r+0x2f0>)
   d8af2:	f8ad 801e 	strh.w	r8, [sp, #30]
   d8af6:	4638      	mov	r0, r7
   d8af8:	f8ad 8020 	strh.w	r8, [sp, #32]
   d8afc:	f7fd f986 	bl	d5e0c <siscanf>
   d8b00:	4540      	cmp	r0, r8
   d8b02:	f340 80fd 	ble.w	d8d00 <_tzset_unlocked_r+0x2c8>
   d8b06:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8b0a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8b0e:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8d34 <_tzset_unlocked_r+0x2fc>
   d8b12:	213c      	movs	r1, #60	; 0x3c
   d8b14:	fb01 3302 	mla	r3, r1, r2, r3
   d8b18:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8b1c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8b20:	fb01 3302 	mla	r3, r1, r2, r3
   d8b24:	435d      	muls	r5, r3
   d8b26:	6225      	str	r5, [r4, #32]
   d8b28:	4d7c      	ldr	r5, [pc, #496]	; (d8d1c <_tzset_unlocked_r+0x2e4>)
   d8b2a:	4b7d      	ldr	r3, [pc, #500]	; (d8d20 <_tzset_unlocked_r+0x2e8>)
   d8b2c:	602b      	str	r3, [r5, #0]
   d8b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8b30:	497c      	ldr	r1, [pc, #496]	; (d8d24 <_tzset_unlocked_r+0x2ec>)
   d8b32:	441f      	add	r7, r3
   d8b34:	464a      	mov	r2, r9
   d8b36:	4633      	mov	r3, r6
   d8b38:	4638      	mov	r0, r7
   d8b3a:	f7fd f967 	bl	d5e0c <siscanf>
   d8b3e:	4540      	cmp	r0, r8
   d8b40:	dc08      	bgt.n	d8b54 <_tzset_unlocked_r+0x11c>
   d8b42:	682b      	ldr	r3, [r5, #0]
   d8b44:	606b      	str	r3, [r5, #4]
   d8b46:	4b72      	ldr	r3, [pc, #456]	; (d8d10 <_tzset_unlocked_r+0x2d8>)
   d8b48:	6a22      	ldr	r2, [r4, #32]
   d8b4a:	601a      	str	r2, [r3, #0]
   d8b4c:	4b72      	ldr	r3, [pc, #456]	; (d8d18 <_tzset_unlocked_r+0x2e0>)
   d8b4e:	f8c3 8000 	str.w	r8, [r3]
   d8b52:	e0d5      	b.n	d8d00 <_tzset_unlocked_r+0x2c8>
   d8b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8b56:	f8c5 9004 	str.w	r9, [r5, #4]
   d8b5a:	18fd      	adds	r5, r7, r3
   d8b5c:	5cfb      	ldrb	r3, [r7, r3]
   d8b5e:	2b2d      	cmp	r3, #45	; 0x2d
   d8b60:	d103      	bne.n	d8b6a <_tzset_unlocked_r+0x132>
   d8b62:	3501      	adds	r5, #1
   d8b64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8b68:	e003      	b.n	d8b72 <_tzset_unlocked_r+0x13a>
   d8b6a:	2b2b      	cmp	r3, #43	; 0x2b
   d8b6c:	bf08      	it	eq
   d8b6e:	3501      	addeq	r5, #1
   d8b70:	2701      	movs	r7, #1
   d8b72:	2300      	movs	r3, #0
   d8b74:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8b78:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8b7c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8b80:	930a      	str	r3, [sp, #40]	; 0x28
   d8b82:	9603      	str	r6, [sp, #12]
   d8b84:	f8cd a008 	str.w	sl, [sp, #8]
   d8b88:	9601      	str	r6, [sp, #4]
   d8b8a:	f8cd b000 	str.w	fp, [sp]
   d8b8e:	4633      	mov	r3, r6
   d8b90:	aa07      	add	r2, sp, #28
   d8b92:	4965      	ldr	r1, [pc, #404]	; (d8d28 <_tzset_unlocked_r+0x2f0>)
   d8b94:	4628      	mov	r0, r5
   d8b96:	f7fd f939 	bl	d5e0c <siscanf>
   d8b9a:	2800      	cmp	r0, #0
   d8b9c:	dc04      	bgt.n	d8ba8 <_tzset_unlocked_r+0x170>
   d8b9e:	6a23      	ldr	r3, [r4, #32]
   d8ba0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8ba4:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8ba6:	e00e      	b.n	d8bc6 <_tzset_unlocked_r+0x18e>
   d8ba8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8bac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8bb0:	213c      	movs	r1, #60	; 0x3c
   d8bb2:	fb01 3302 	mla	r3, r1, r2, r3
   d8bb6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8bba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8bbe:	fb01 3302 	mla	r3, r1, r2, r3
   d8bc2:	435f      	muls	r7, r3
   d8bc4:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8bc8:	4627      	mov	r7, r4
   d8bca:	441d      	add	r5, r3
   d8bcc:	f04f 0900 	mov.w	r9, #0
   d8bd0:	782b      	ldrb	r3, [r5, #0]
   d8bd2:	2b2c      	cmp	r3, #44	; 0x2c
   d8bd4:	bf08      	it	eq
   d8bd6:	3501      	addeq	r5, #1
   d8bd8:	f895 8000 	ldrb.w	r8, [r5]
   d8bdc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8be0:	d126      	bne.n	d8c30 <_tzset_unlocked_r+0x1f8>
   d8be2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8be6:	9302      	str	r3, [sp, #8]
   d8be8:	ab09      	add	r3, sp, #36	; 0x24
   d8bea:	9300      	str	r3, [sp, #0]
   d8bec:	9603      	str	r6, [sp, #12]
   d8bee:	9601      	str	r6, [sp, #4]
   d8bf0:	4633      	mov	r3, r6
   d8bf2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8bf6:	494d      	ldr	r1, [pc, #308]	; (d8d2c <_tzset_unlocked_r+0x2f4>)
   d8bf8:	4628      	mov	r0, r5
   d8bfa:	f7fd f907 	bl	d5e0c <siscanf>
   d8bfe:	2803      	cmp	r0, #3
   d8c00:	d17e      	bne.n	d8d00 <_tzset_unlocked_r+0x2c8>
   d8c02:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8c06:	1e4b      	subs	r3, r1, #1
   d8c08:	2b0b      	cmp	r3, #11
   d8c0a:	d879      	bhi.n	d8d00 <_tzset_unlocked_r+0x2c8>
   d8c0c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8c10:	1e53      	subs	r3, r2, #1
   d8c12:	2b04      	cmp	r3, #4
   d8c14:	d874      	bhi.n	d8d00 <_tzset_unlocked_r+0x2c8>
   d8c16:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8c1a:	2b06      	cmp	r3, #6
   d8c1c:	d870      	bhi.n	d8d00 <_tzset_unlocked_r+0x2c8>
   d8c1e:	f887 8008 	strb.w	r8, [r7, #8]
   d8c22:	60f9      	str	r1, [r7, #12]
   d8c24:	613a      	str	r2, [r7, #16]
   d8c26:	617b      	str	r3, [r7, #20]
   d8c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8c2a:	eb05 0803 	add.w	r8, r5, r3
   d8c2e:	e02a      	b.n	d8c86 <_tzset_unlocked_r+0x24e>
   d8c30:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8c34:	bf06      	itte	eq
   d8c36:	3501      	addeq	r5, #1
   d8c38:	4643      	moveq	r3, r8
   d8c3a:	2344      	movne	r3, #68	; 0x44
   d8c3c:	220a      	movs	r2, #10
   d8c3e:	a90b      	add	r1, sp, #44	; 0x2c
   d8c40:	4628      	mov	r0, r5
   d8c42:	9305      	str	r3, [sp, #20]
   d8c44:	f7ff fe3e 	bl	d88c4 <strtoul>
   d8c48:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8c4c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8c50:	4545      	cmp	r5, r8
   d8c52:	9b05      	ldr	r3, [sp, #20]
   d8c54:	d114      	bne.n	d8c80 <_tzset_unlocked_r+0x248>
   d8c56:	234d      	movs	r3, #77	; 0x4d
   d8c58:	f1b9 0f00 	cmp.w	r9, #0
   d8c5c:	d107      	bne.n	d8c6e <_tzset_unlocked_r+0x236>
   d8c5e:	7223      	strb	r3, [r4, #8]
   d8c60:	2303      	movs	r3, #3
   d8c62:	60e3      	str	r3, [r4, #12]
   d8c64:	2302      	movs	r3, #2
   d8c66:	6123      	str	r3, [r4, #16]
   d8c68:	f8c4 9014 	str.w	r9, [r4, #20]
   d8c6c:	e00b      	b.n	d8c86 <_tzset_unlocked_r+0x24e>
   d8c6e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8c72:	230b      	movs	r3, #11
   d8c74:	62a3      	str	r3, [r4, #40]	; 0x28
   d8c76:	2301      	movs	r3, #1
   d8c78:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8c7a:	2300      	movs	r3, #0
   d8c7c:	6323      	str	r3, [r4, #48]	; 0x30
   d8c7e:	e002      	b.n	d8c86 <_tzset_unlocked_r+0x24e>
   d8c80:	b280      	uxth	r0, r0
   d8c82:	723b      	strb	r3, [r7, #8]
   d8c84:	6178      	str	r0, [r7, #20]
   d8c86:	2302      	movs	r3, #2
   d8c88:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8c8c:	2300      	movs	r3, #0
   d8c8e:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8c92:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8c96:	930a      	str	r3, [sp, #40]	; 0x28
   d8c98:	f898 3000 	ldrb.w	r3, [r8]
   d8c9c:	2b2f      	cmp	r3, #47	; 0x2f
   d8c9e:	d10b      	bne.n	d8cb8 <_tzset_unlocked_r+0x280>
   d8ca0:	9603      	str	r6, [sp, #12]
   d8ca2:	f8cd a008 	str.w	sl, [sp, #8]
   d8ca6:	9601      	str	r6, [sp, #4]
   d8ca8:	f8cd b000 	str.w	fp, [sp]
   d8cac:	4633      	mov	r3, r6
   d8cae:	aa07      	add	r2, sp, #28
   d8cb0:	491f      	ldr	r1, [pc, #124]	; (d8d30 <_tzset_unlocked_r+0x2f8>)
   d8cb2:	4640      	mov	r0, r8
   d8cb4:	f7fd f8aa 	bl	d5e0c <siscanf>
   d8cb8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8cbc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8cc0:	213c      	movs	r1, #60	; 0x3c
   d8cc2:	fb01 3302 	mla	r3, r1, r2, r3
   d8cc6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8cca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8cce:	fb01 3302 	mla	r3, r1, r2, r3
   d8cd2:	61bb      	str	r3, [r7, #24]
   d8cd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8cd6:	f109 0901 	add.w	r9, r9, #1
   d8cda:	f1b9 0f02 	cmp.w	r9, #2
   d8cde:	4445      	add	r5, r8
   d8ce0:	f107 071c 	add.w	r7, r7, #28
   d8ce4:	f47f af74 	bne.w	d8bd0 <_tzset_unlocked_r+0x198>
   d8ce8:	6860      	ldr	r0, [r4, #4]
   d8cea:	f7ff fdf5 	bl	d88d8 <__tzcalc_limits>
   d8cee:	4b08      	ldr	r3, [pc, #32]	; (d8d10 <_tzset_unlocked_r+0x2d8>)
   d8cf0:	6a22      	ldr	r2, [r4, #32]
   d8cf2:	601a      	str	r2, [r3, #0]
   d8cf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8cf6:	1a9b      	subs	r3, r3, r2
   d8cf8:	4a07      	ldr	r2, [pc, #28]	; (d8d18 <_tzset_unlocked_r+0x2e0>)
   d8cfa:	bf18      	it	ne
   d8cfc:	2301      	movne	r3, #1
   d8cfe:	6013      	str	r3, [r2, #0]
   d8d00:	b00d      	add	sp, #52	; 0x34
   d8d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8d06:	bf00      	nop
   d8d08:	000d990c 	.word	0x000d990c
   d8d0c:	2003e7e0 	.word	0x2003e7e0
   d8d10:	2003e7e8 	.word	0x2003e7e8
   d8d14:	000d990f 	.word	0x000d990f
   d8d18:	2003e7e4 	.word	0x2003e7e4
   d8d1c:	2003e180 	.word	0x2003e180
   d8d20:	2003e7d3 	.word	0x2003e7d3
   d8d24:	000d9913 	.word	0x000d9913
   d8d28:	000d9936 	.word	0x000d9936
   d8d2c:	000d9922 	.word	0x000d9922
   d8d30:	000d9935 	.word	0x000d9935
   d8d34:	2003e7c8 	.word	0x2003e7c8

000d8d38 <_findenv_r>:
   d8d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d3c:	4607      	mov	r7, r0
   d8d3e:	468b      	mov	fp, r1
   d8d40:	4690      	mov	r8, r2
   d8d42:	f000 f8d9 	bl	d8ef8 <__env_lock>
   d8d46:	4b19      	ldr	r3, [pc, #100]	; (d8dac <_findenv_r+0x74>)
   d8d48:	681d      	ldr	r5, [r3, #0]
   d8d4a:	469a      	mov	sl, r3
   d8d4c:	b13d      	cbz	r5, d8d5e <_findenv_r+0x26>
   d8d4e:	465c      	mov	r4, fp
   d8d50:	4623      	mov	r3, r4
   d8d52:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8d56:	b142      	cbz	r2, d8d6a <_findenv_r+0x32>
   d8d58:	2a3d      	cmp	r2, #61	; 0x3d
   d8d5a:	461c      	mov	r4, r3
   d8d5c:	d1f8      	bne.n	d8d50 <_findenv_r+0x18>
   d8d5e:	4638      	mov	r0, r7
   d8d60:	f000 f8cb 	bl	d8efa <__env_unlock>
   d8d64:	2000      	movs	r0, #0
   d8d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8d6a:	ebcb 0404 	rsb	r4, fp, r4
   d8d6e:	46a9      	mov	r9, r5
   d8d70:	f859 0b04 	ldr.w	r0, [r9], #4
   d8d74:	2800      	cmp	r0, #0
   d8d76:	d0f2      	beq.n	d8d5e <_findenv_r+0x26>
   d8d78:	4622      	mov	r2, r4
   d8d7a:	4659      	mov	r1, fp
   d8d7c:	f7ff fc6b 	bl	d8656 <strncmp>
   d8d80:	b988      	cbnz	r0, d8da6 <_findenv_r+0x6e>
   d8d82:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d8d86:	191e      	adds	r6, r3, r4
   d8d88:	5d1b      	ldrb	r3, [r3, r4]
   d8d8a:	2b3d      	cmp	r3, #61	; 0x3d
   d8d8c:	d10b      	bne.n	d8da6 <_findenv_r+0x6e>
   d8d8e:	f8da 3000 	ldr.w	r3, [sl]
   d8d92:	1aed      	subs	r5, r5, r3
   d8d94:	10ad      	asrs	r5, r5, #2
   d8d96:	4638      	mov	r0, r7
   d8d98:	f8c8 5000 	str.w	r5, [r8]
   d8d9c:	f000 f8ad 	bl	d8efa <__env_unlock>
   d8da0:	1c70      	adds	r0, r6, #1
   d8da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8da6:	464d      	mov	r5, r9
   d8da8:	e7e1      	b.n	d8d6e <_findenv_r+0x36>
   d8daa:	bf00      	nop
   d8dac:	2003e1c8 	.word	0x2003e1c8

000d8db0 <_getenv_r>:
   d8db0:	b507      	push	{r0, r1, r2, lr}
   d8db2:	aa01      	add	r2, sp, #4
   d8db4:	f7ff ffc0 	bl	d8d38 <_findenv_r>
   d8db8:	b003      	add	sp, #12
   d8dba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8dc0 <__gettzinfo>:
   d8dc0:	4800      	ldr	r0, [pc, #0]	; (d8dc4 <__gettzinfo+0x4>)
   d8dc2:	4770      	bx	lr
   d8dc4:	2003e188 	.word	0x2003e188

000d8dc8 <gmtime_r>:
   d8dc8:	6802      	ldr	r2, [r0, #0]
   d8dca:	4b47      	ldr	r3, [pc, #284]	; (d8ee8 <gmtime_r+0x120>)
   d8dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8dce:	fb92 f4f3 	sdiv	r4, r2, r3
   d8dd2:	fb03 2214 	mls	r2, r3, r4, r2
   d8dd6:	2a00      	cmp	r2, #0
   d8dd8:	bfbc      	itt	lt
   d8dda:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8dde:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8de2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8de6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8dea:	fb92 f3f0 	sdiv	r3, r2, r0
   d8dee:	fb00 2213 	mls	r2, r0, r3, r2
   d8df2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8df6:	bfac      	ite	ge
   d8df8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8dfc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8e00:	608b      	str	r3, [r1, #8]
   d8e02:	fb92 f3f0 	sdiv	r3, r2, r0
   d8e06:	fb00 2213 	mls	r2, r0, r3, r2
   d8e0a:	604b      	str	r3, [r1, #4]
   d8e0c:	600a      	str	r2, [r1, #0]
   d8e0e:	2307      	movs	r3, #7
   d8e10:	1ce2      	adds	r2, r4, #3
   d8e12:	fb92 f3f3 	sdiv	r3, r2, r3
   d8e16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8e1a:	1ad3      	subs	r3, r2, r3
   d8e1c:	618b      	str	r3, [r1, #24]
   d8e1e:	4b33      	ldr	r3, [pc, #204]	; (d8eec <gmtime_r+0x124>)
   d8e20:	4d33      	ldr	r5, [pc, #204]	; (d8ef0 <gmtime_r+0x128>)
   d8e22:	fb94 f5f5 	sdiv	r5, r4, r5
   d8e26:	fb03 4405 	mla	r4, r3, r5, r4
   d8e2a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8e2e:	fbb4 f2f2 	udiv	r2, r4, r2
   d8e32:	4422      	add	r2, r4
   d8e34:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8e38:	fbb4 f3f7 	udiv	r3, r4, r7
   d8e3c:	1ad2      	subs	r2, r2, r3
   d8e3e:	482d      	ldr	r0, [pc, #180]	; (d8ef4 <gmtime_r+0x12c>)
   d8e40:	fbb4 f0f0 	udiv	r0, r4, r0
   d8e44:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8e48:	1a13      	subs	r3, r2, r0
   d8e4a:	fbb3 f6f6 	udiv	r6, r3, r6
   d8e4e:	4434      	add	r4, r6
   d8e50:	f240 126d 	movw	r2, #365	; 0x16d
   d8e54:	fbb3 f0f2 	udiv	r0, r3, r2
   d8e58:	fbb3 f3f7 	udiv	r3, r3, r7
   d8e5c:	1ae3      	subs	r3, r4, r3
   d8e5e:	fb02 3310 	mls	r3, r2, r0, r3
   d8e62:	2499      	movs	r4, #153	; 0x99
   d8e64:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8e68:	3202      	adds	r2, #2
   d8e6a:	fbb2 f2f4 	udiv	r2, r2, r4
   d8e6e:	2a0a      	cmp	r2, #10
   d8e70:	fb04 f402 	mul.w	r4, r4, r2
   d8e74:	f104 0602 	add.w	r6, r4, #2
   d8e78:	f04f 0405 	mov.w	r4, #5
   d8e7c:	fbb6 f4f4 	udiv	r4, r6, r4
   d8e80:	bf34      	ite	cc
   d8e82:	2602      	movcc	r6, #2
   d8e84:	f06f 0609 	mvncs.w	r6, #9
   d8e88:	4416      	add	r6, r2
   d8e8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8e8e:	fb02 0505 	mla	r5, r2, r5, r0
   d8e92:	1c5f      	adds	r7, r3, #1
   d8e94:	2e01      	cmp	r6, #1
   d8e96:	bf98      	it	ls
   d8e98:	3501      	addls	r5, #1
   d8e9a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8e9e:	eba7 0704 	sub.w	r7, r7, r4
   d8ea2:	d302      	bcc.n	d8eaa <gmtime_r+0xe2>
   d8ea4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8ea8:	e014      	b.n	d8ed4 <gmtime_r+0x10c>
   d8eaa:	0782      	lsls	r2, r0, #30
   d8eac:	d105      	bne.n	d8eba <gmtime_r+0xf2>
   d8eae:	2464      	movs	r4, #100	; 0x64
   d8eb0:	fbb0 f2f4 	udiv	r2, r0, r4
   d8eb4:	fb04 0212 	mls	r2, r4, r2, r0
   d8eb8:	b94a      	cbnz	r2, d8ece <gmtime_r+0x106>
   d8eba:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8ebe:	fbb0 f4f2 	udiv	r4, r0, r2
   d8ec2:	fb02 0014 	mls	r0, r2, r4, r0
   d8ec6:	fab0 f280 	clz	r2, r0
   d8eca:	0952      	lsrs	r2, r2, #5
   d8ecc:	e000      	b.n	d8ed0 <gmtime_r+0x108>
   d8ece:	2201      	movs	r2, #1
   d8ed0:	333b      	adds	r3, #59	; 0x3b
   d8ed2:	441a      	add	r2, r3
   d8ed4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8ed8:	2300      	movs	r3, #0
   d8eda:	61ca      	str	r2, [r1, #28]
   d8edc:	614d      	str	r5, [r1, #20]
   d8ede:	610e      	str	r6, [r1, #16]
   d8ee0:	60cf      	str	r7, [r1, #12]
   d8ee2:	620b      	str	r3, [r1, #32]
   d8ee4:	4608      	mov	r0, r1
   d8ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ee8:	00015180 	.word	0x00015180
   d8eec:	fffdc54f 	.word	0xfffdc54f
   d8ef0:	00023ab1 	.word	0x00023ab1
   d8ef4:	00023ab0 	.word	0x00023ab0

000d8ef8 <__env_lock>:
   d8ef8:	4770      	bx	lr

000d8efa <__env_unlock>:
   d8efa:	4770      	bx	lr

000d8efc <dynalib_user>:
   d8efc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d8f0c:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d8f1c:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...

000d8f50 <_ZL16MemVersionNumber>:
   d8f50:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   d8f60:	202c 3a51 3225 302e 2566 2025 2500 2e34     , Q:%2.0f%% .%4.
   d8f70:	6631 4320 2500 2e34 6631 2520 0025 3425     1f C.%4.1f %%.%4
   d8f80:	312e 2066 756c 0078 6925 2520 0025 5441     .1f lux.%i %%.AT
   d8f90:	432b 5546 3d4e 3631 0a0d 7b00 5422 6d65     +CFUN=16...{"Tem
   d8fa0:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
   d8fb0:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   d8fc0:	2c66 2220 694c 6867 4c74 7665 6c65 3a22     f, "LightLevel":
   d8fd0:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   d8fe0:	7574 6572 2231 253a 2c69 2220 6f53 6c69     ture1":%i, "Soil
   d8ff0:	6f6d 7369 7574 6572 2232 253a 2c69 2220     moisture2":%i, "
   d9000:	6177 6574 5072 6572 7373 7275 2265 253a     waterPressure":%
   d9010:	2c69 2220 6f53 656c 6f6e 6469 3a22 6925     i, "Solenoid":%i
   d9020:	202c 4222 7461 6574 7972 3a22 6925 202c     , "Battery":%i, 
   d9030:	5222 7365 7465 2273 253a 2c69 2220 6c41     "Resets":%i, "Al
   d9040:	7265 7374 3a22 6925 007d 7752 6e61 6164     erts":%i}.Rwanda
   d9050:	532d 6e65 6573 412d 646e 432d 6e6f 7274     -Sense-And-Contr
   d9060:	6c6f 5200 6177 646e 2d61 6553 736e 2d65     ol.Rwanda-Sense-
   d9070:	6e41 2d64 6f43 746e 6f72 2d6c 6c45 7361     And-Control-Elas
   d9080:	6974 0063 6f4e 4420 7461 0061 6255 6469     tic.No Data.Ubid
   d9090:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   d90a0:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   d90b0:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   d90c0:	6976 6465 2520 0069 6553 2074 6f53 616c     vied %i.Set Sola
   d90d0:	2072 6f50 6577 6572 2064 6f4d 6564 4300     r Powered Mode.C
   d90e0:	6e6f 6966 0067 0030 6c43 6165 6572 2064     onfig.0.Cleared 
   d90f0:	6f53 616c 2072 6f50 6577 6572 2064 6f4d     Solar Powered Mo
   d9100:	6564 4e00 206f 6f53 6c69 5320 6e65 6f73     de.No Soil Senso
   d9110:	7372 4f00 656e 5320 696f 206c 6553 736e     rs.One Soil Sens
   d9120:	726f 5400 6f77 5320 696f 206c 6553 736e     or.Two Soil Sens
   d9130:	726f 0073 6f4e 5020 6572 7373 7275 2065     ors.No Pressure 
   d9140:	6553 736e 726f 5000 6572 7373 7275 2065     Sensor.Pressure 
   d9150:	6553 736e 726f 5020 6572 6573 746e 4e00     Sensor Present.N
   d9160:	206f 694c 6867 2074 6553 736e 726f 4c00     o Light Sensor.L
   d9170:	6769 7468 5320 6e65 6f73 2072 7250 7365     ight Sensor Pres
   d9180:	6e65 0074 6f4e 5420 6d65 2070 202f 7548     ent.No Temp / Hu
   d9190:	696d 6964 7974 5320 6e65 6f73 2072 7250     midity Sensor Pr
   d91a0:	7365 6e65 0074 6559 0073 6579 0073 6f6e     esent.Yes.yes.no
   d91b0:	4e00 006f 6f4e 5320 6c6f 6e65 696f 2064     .No.No Solenoid 
   d91c0:	7441 6174 6863 6465 4800 6c6f 2064 6954     Attached.Hold Ti
   d91d0:	656d 7320 7465 7420 206f 6925 6d20 6553     me set to %i mSe
   d91e0:	0063 6553 2074 6556 6272 736f 2065 6f4d     c.Set Verbose Mo
   d91f0:	6564 4300 656c 7261 6465 5620 7265 6f62     de.Cleared Verbo
   d9200:	6573 4d20 646f 0065 6f4c 2077 6f50 6577     se Mode.Low Powe
   d9210:	2072 6f4d 6564 4e00 726f 616d 206c 704f     r Mode.Normal Op
   d9220:	7265 7461 6f69 736e 4f00 006e 704f 6e65     erations.On.Open
   d9230:	7420 6568 5620 6c61 6576 5700 7461 7265      the Valve.Water
   d9240:	6e69 0067 664f 0066 6c43 736f 2065 6874     ing.Off.Close th
   d9250:	2065 6176 766c 0065 7246 6d6f 2520 2073     e valve.From %s 
   d9260:	6f74 2520 0073 7453 7461 2065 7254 6e61     to %s.State Tran
   d9270:	6973 6974 6e6f 7300 6170 6b72 642f 7665     sition.spark/dev
   d9280:	6369 2f65 6573 7373 6f69 2f6e 6e65 0064     ice/session/end.
   d9290:	6154 696b 676e 6120 4e20 7061 5300 6174     Taking a Nap.Sta
   d92a0:	6574 4c00 776f 4220 7461 6574 7972 2d20     te.Low Battery -
   d92b0:	5320 656c 7065 6e69 0067 7245 6f72 2072      Sleeping.Error 
   d92c0:	7453 7461 2065 202d 6552 6573 0074 7245     State - Reset.Er
   d92d0:	6f72 2072 7453 7461 2065 202d 6f50 6577     ror State - Powe
   d92e0:	2072 7943 6c63 0065 7245 6f72 2072 7453     r Cycle.Error St
   d92f0:	7461 2065 202d 7546 6c6c 4d20 646f 6d65     ate - Full Modem
   d9300:	5220 7365 7465 4500 7272 726f 7420 6b61      Reset.Error tak
   d9310:	6e69 2067 654d 7361 7275 6d65 6e65 7374     ing Measurements
   d9320:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
   d9330:	746e 5200 6c65 6165 6573 5300 6174 6574     nt.Release.State
   d9340:	664f 6843 0067 6f50 6577 4372 6e6f 6574     OfChg.PowerConte
   d9350:	7478 4c00 776f 6f50 6577 4d72 646f 0065     xt.LowPowerMode.
   d9360:	6554 706d 7265 7461 7275 0065 7548 696d     Temperature.Humi
   d9370:	6964 7974 4c00 6d75 6e69 736f 7469 0079     dity.Luminosity.
   d9380:	6f53 6c69 6f4d 7369 7574 6572 0031 6f53     SoilMoisture1.So
   d9390:	6c69 6f4d 7369 7574 6572 0032 7250 7365     ilMoisture2.Pres
   d93a0:	7573 6572 4d00 6165 7573 6572 4e2d 776f     sure.Measure-Now
   d93b0:	5300 6c6f 7261 4d2d 646f 0065 6556 6272     .Solar-Mode.Verb
   d93c0:	736f 2d65 6f4d 6564 5300 7465 6f48 646c     ose-Mode.SetHold
   d93d0:	6954 656d 5300 7465 6f53 6c69 6553 736e     Time.SetSoilSens
   d93e0:	726f 0073 6553 5074 6572 7373 7275 5365     ors.SetPressureS
   d93f0:	6e65 6f73 0072 6553 4c74 6769 7468 6553     ensor.SetLightSe
   d9400:	736e 726f 5300 6c6f 6e65 696f 5064 6572     nsor.SolenoidPre
   d9410:	6573 746e 5300 7465 6554 706d 7548 696d     sent.SetTempHumi
   d9420:	5364 6e65 6f73 0072 6146 6c69 6465 7420     dSensor.Failed t
   d9430:	206f 6f63 6e6e 6365 0074 7453 7261 7574     o connect.Startu
   d9440:	0070 6e55 6e6b 776f 006e 6f4e 656e 5700     p.Unknown.None.W
   d9450:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
   d9460:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
	...

000d9471 <_ZL13releaseNumber>:
   d9471:	3931 0000 0000 0000                              19.....

000d9478 <_ZTVN5spark13CellularClassE>:
	...
   d9480:	5f37 000d 5f2d 000d 5f23 000d 5ed9 000d     7_..-_..#_...^..
   d9490:	5f17 000d 5f0b 000d 5eff 000d 5ef7 000d     ._..._...^...^..
   d94a0:	5eed 000d 5ee3 000d 6cc5 000d               .^...^...l..

000d94ac <_ZTV14CellularSignal>:
	...
   d94b4:	5fe5 000d 6045 000d 5fe7 000d 6089 000d     ._..E`..._...`..
   d94c4:	5fed 000d 6055 000d 6019 000d 6113 000d     ._..U`...`...a..
   d94d4:	fffc ffff 0000 0000 613d 000d               ........=a..

000d94e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d94e8:	6145 000d 614b 000d 61a1 000d 6159 000d     Ea..Ka...a..Ya..
   d94f8:	6147 000d                                   Ga..

000d94fc <_ZTVN5spark13EthernetClassE>:
	...
   d9504:	67b7 000d 67ad 000d 67a3 000d 6799 000d     .g...g...g...g..
   d9514:	678d 000d 6781 000d 6775 000d 676d 000d     .g...g..ug..mg..
   d9524:	6763 000d 6759 000d 6cc5 000d               cg..Yg...l..

000d9530 <_ZTV7TwoWire>:
	...
   d9538:	68b9 000d 6903 000d 68db 000d 68bb 000d     .h...i...h...h..
   d9548:	68e3 000d 68eb 000d 68f3 000d 68fb 000d     .h...h...h...h..

000d9558 <_ZTV9IPAddress>:
	...
   d9560:	69fb 000d 69eb 000d 69ed 000d 6162 6475     .i...i...i..baud
   d9570:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9580:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9590:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d95a0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d95b0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d95c0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d95d0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d95e0:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d95f0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d9600:	203d 6400 7465 6961 736c 3d20 0020 6e6c     = .details = .ln
   d9610:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d9620:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d9630:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d9640:	6100 6c6c 0000 0000                         .all....

000d9648 <_ZTVN5spark9MeshClassE>:
	...
   d9650:	6b3f 000d 6b35 000d 6b2b 000d 6b21 000d     ?k..5k..+k..!k..
   d9660:	6b15 000d 6b09 000d 6afd 000d 6af5 000d     .k...k...j...j..
   d9670:	6aeb 000d 6ae1 000d 6cc5 000d               .j...j...l..

000d967c <_ZTVN5spark12NetworkClassE>:
	...
   d9684:	6c5d 000d 6c67 000d 6c71 000d 6c7b 000d     ]l..gl..ql..{l..
   d9694:	6c85 000d 6c91 000d 6c9d 000d 6ca9 000d     .l...l...l...l..
   d96a4:	6cb1 000d 6cbb 000d 6cc5 000d               .l...l...l..

000d96b0 <_ZTV8SPIClass>:
	...
   d96b8:	6e8d 000d 6e8f 000d 2b25 3330 3a64 3025     .n...n..%+03d:%0
   d96c8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d96d8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d96e8 <_ZTV11USARTSerial>:
	...
   d96f0:	72b5 000d 7305 000d 7313 000d 6da5 000d     .r...s...s...m..
   d9700:	72c9 000d 72eb 000d 72d7 000d 72ff 000d     .r...r...r...r..
   d9710:	72b7 000d 72bb 000d                         .r...r..

000d9718 <_ZTV9USBSerial>:
	...
   d9720:	73bd 000d 740d 000d 741b 000d 6da5 000d     .s...t...t...m..
   d9730:	73f9 000d 73bf 000d 73d5 000d 7407 000d     .s...s...s...t..
   d9740:	73eb 000d 73b9 000d                         .s...s..

000d9748 <_ZSt7nothrow>:
	...

000d9749 <_ctype_>:
   d9749:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9759:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9769:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9779:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9789:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9799:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d97a9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d97b9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d97c9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d984c <__sf_fake_stdin>:
	...

000d986c <__sf_fake_stdout>:
	...

000d988c <__sf_fake_stderr>:
	...

000d98ac <__month_lengths>:
   d98ac:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d98bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d98cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d98dc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d98ec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d98fc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d990c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d991c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d992c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d993c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d9948 <link_const_variable_data_end>:
   d9948:	000d5481 	.word	0x000d5481
   d994c:	000d563b 	.word	0x000d563b
   d9950:	000d57e9 	.word	0x000d57e9
   d9954:	000d5eb1 	.word	0x000d5eb1
   d9958:	000d5fb5 	.word	0x000d5fb5
   d995c:	000d67c1 	.word	0x000d67c1
   d9960:	000d6ad1 	.word	0x000d6ad1
   d9964:	000d6c0d 	.word	0x000d6c0d
   d9968:	000d6d91 	.word	0x000d6d91
   d996c:	000d6e71 	.word	0x000d6e71
   d9970:	000d7175 	.word	0x000d7175
   d9974:	000d72a1 	.word	0x000d72a1
   d9978:	000d789d 	.word	0x000d789d
   d997c:	000d7961 	.word	0x000d7961
   d9980:	000d79e5 	.word	0x000d79e5
   d9984:	000d7a69 	.word	0x000d7a69

000d9988 <link_constructors_end>:
	...
