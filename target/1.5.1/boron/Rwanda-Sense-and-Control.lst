
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.5.1/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008110  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc130  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000170  2003e048  000dc134  0001e048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000638  2003e1b8  2003e1b8  0002e1b8  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000dc2a4  000dc2a4  0002c2a4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc2d0  000dc2d0  0002c2d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00102d39  00000000  00000000  0002c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001418c  00000000  00000000  0012f00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002402b  00000000  00000000  00143199  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ea8  00000000  00000000  001671c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005730  00000000  00000000  0016a06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000398f7  00000000  00000000  0016f79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031a97  00000000  00000000  001a9093  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010bd95  00000000  00000000  001dab2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ef80  00000000  00000000  002e68c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 ffb1 	bl	d8f98 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 ffb6 	bl	d8fae <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e048 	.word	0x2003e048
   d404c:	000dc134 	.word	0x000dc134
   d4050:	2003e1b8 	.word	0x2003e1b8
   d4054:	2003e1b8 	.word	0x2003e1b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 febf 	bl	d7de0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc12c 	.word	0x000dc12c
   d4084:	000dc0ec 	.word	0x000dc0ec

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bb20 	b.w	d56cc <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f843 	bl	d5118 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 be65 	b.w	d7d64 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 ba89 	b.w	d65b0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 ba8f 	b.w	d65c0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 ba8d 	b.w	d65c0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z16wateringTimerISRv>:
  currentStatusWriteNeeded = true;
  return true;
}

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z16wateringTimerISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e22d 	.word	0x2003e22d

000d40c4 <_Z13awakeTimerISRv>:
}

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40c4:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z13awakeTimerISRv+0xc>)
   d40c6:	2301      	movs	r3, #1
   d40c8:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40ca:	4a02      	ldr	r2, [pc, #8]	; (d40d4 <_Z13awakeTimerISRv+0x10>)
   d40cc:	7013      	strb	r3, [r2, #0]
   d40ce:	4770      	bx	lr
   d40d0:	2003e308 	.word	0x2003e308
   d40d4:	2003e1f2 	.word	0x2003e1f2

000d40d8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d8:	6803      	ldr	r3, [r0, #0]
   d40da:	4718      	bx	r3

000d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40dc:	2a01      	cmp	r2, #1
   d40de:	d002      	beq.n	d40e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40e0:	2a02      	cmp	r2, #2
   d40e2:	d002      	beq.n	d40ea <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40e4:	e004      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e6:	6001      	str	r1, [r0, #0]
	      break;
   d40e8:	e002      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40ea:	680b      	ldr	r3, [r1, #0]
   d40ec:	b100      	cbz	r0, d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ee:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40f0:	2000      	movs	r0, #0
   d40f2:	4770      	bx	lr

000d40f4 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40f4:	b538      	push	{r3, r4, r5, lr}
   d40f6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40f8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40fa:	b128      	cbz	r0, d4108 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40fc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40fe:	210c      	movs	r1, #12
   d4100:	f003 ffd5 	bl	d80ae <_ZdlPvj>
            wakeupSource = next;
   d4104:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d4106:	e7f8      	b.n	d40fa <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4108:	4620      	mov	r0, r4
   d410a:	bd38      	pop	{r3, r4, r5, pc}

000d410c <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d410c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410e:	4904      	ldr	r1, [pc, #16]	; (d4120 <_Z10measureNow6String+0x14>)
   d4110:	f003 fb4f 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4114:	b118      	cbz	r0, d411e <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4116:	4b03      	ldr	r3, [pc, #12]	; (d4124 <_Z10measureNow6String+0x18>)
   d4118:	2203      	movs	r2, #3
   d411a:	701a      	strb	r2, [r3, #0]
    return 1;
   d411c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d411e:	bd08      	pop	{r3, pc}
   d4120:	000dba8d 	.word	0x000dba8d
   d4124:	2003e1f3 	.word	0x2003e1f3

000d4128 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4128:	6943      	ldr	r3, [r0, #20]
   d412a:	b113      	cbz	r3, d4132 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d412c:	6983      	ldr	r3, [r0, #24]
   d412e:	300c      	adds	r0, #12
   d4130:	4718      	bx	r3
   d4132:	4770      	bx	lr

000d4134 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4134:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4136:	2100      	movs	r1, #0
   d4138:	4604      	mov	r4, r0
   d413a:	4608      	mov	r0, r1
   d413c:	f001 ff1e 	bl	d5f7c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4140:	a902      	add	r1, sp, #8
   d4142:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4144:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4146:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d414a:	f001 ff2f 	bl	d5fac <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d414e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4150:	b10c      	cbz	r4, d4156 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4152:	2301      	movs	r3, #1
   d4154:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4156:	2100      	movs	r1, #0
   d4158:	2001      	movs	r0, #1
   d415a:	f001 ff0f 	bl	d5f7c <os_thread_scheduling>
            }
        }
        if (t) {
   d415e:	b12c      	cbz	r4, d416c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4798      	blx	r3
            t->running = false;
   d4168:	2300      	movs	r3, #0
   d416a:	7123      	strb	r3, [r4, #4]
        }
    }
   d416c:	b002      	add	sp, #8
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4170:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4172:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4176:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4178:	f88d 3000 	strb.w	r3, [sp]
   d417c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d417e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4180:	f002 fd48 	bl	d6c14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4184:	4628      	mov	r0, r5
   d4186:	b003      	add	sp, #12
   d4188:	bd30      	pop	{r4, r5, pc}

000d418a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d418a:	b510      	push	{r4, lr}
   d418c:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d418e:	6800      	ldr	r0, [r0, #0]
   d4190:	b108      	cbz	r0, d4196 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4192:	f002 fa15 	bl	d65c0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4196:	4620      	mov	r0, r4
   d4198:	bd10      	pop	{r4, pc}

000d419a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d419c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d41a0:	b113      	cbz	r3, d41a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41a2:	2203      	movs	r2, #3
   d41a4:	4601      	mov	r1, r0
   d41a6:	4798      	blx	r3
    }
   d41a8:	4620      	mov	r0, r4
   d41aa:	bd10      	pop	{r4, pc}

000d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41ac:	6803      	ldr	r3, [r0, #0]
   d41ae:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41b0:	b120      	cbz	r0, d41bc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d41b2:	8883      	ldrh	r3, [r0, #4]
   d41b4:	428b      	cmp	r3, r1
   d41b6:	d001      	beq.n	d41bc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d41b8:	6880      	ldr	r0, [r0, #8]
   d41ba:	e7f9      	b.n	d41b0 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d41bc:	4770      	bx	lr
	...

000d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d41c4:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41c6:	4605      	mov	r5, r0
   d41c8:	460f      	mov	r7, r1
   d41ca:	4616      	mov	r6, r2
        if (valid_) {
   d41cc:	b33b      	cbz	r3, d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d41ce:	2101      	movs	r1, #1
   d41d0:	f7ff ffec 	bl	d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d41d4:	b150      	cbz	r0, d41ec <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d41d6:	8983      	ldrh	r3, [r0, #12]
   d41d8:	42bb      	cmp	r3, r7
   d41da:	d104      	bne.n	d41e6 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
   d41dc:	7386      	strb	r6, [r0, #14]
                    return *this;
   d41de:	e01e      	b.n	d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d41e0:	8883      	ldrh	r3, [r0, #4]
   d41e2:	2b01      	cmp	r3, #1
   d41e4:	d0f6      	beq.n	d41d4 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41e6:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41e8:	2800      	cmp	r0, #0
   d41ea:	d1f9      	bne.n	d41e0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41ec:	490d      	ldr	r1, [pc, #52]	; (d4224 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41ee:	2010      	movs	r0, #16
   d41f0:	f003 ff68 	bl	d80c4 <_ZnwjRKSt9nothrow_t>
   d41f4:	4604      	mov	r4, r0
   d41f6:	b188      	cbz	r0, d421c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41f8:	f04f 0810 	mov.w	r8, #16
   d41fc:	4642      	mov	r2, r8
   d41fe:	2100      	movs	r1, #0
   d4200:	f004 fed5 	bl	d8fae <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4204:	2302      	movs	r3, #2
   d4206:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4208:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d420a:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d420e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4210:	692b      	ldr	r3, [r5, #16]
   d4212:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4214:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4216:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4218:	612c      	str	r4, [r5, #16]
   d421a:	e000      	b.n	d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d421c:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d421e:	4628      	mov	r0, r5
   d4220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4224:	000dbd88 	.word	0x000dbd88

000d4228 <_ZN24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d422c:	7d03      	ldrb	r3, [r0, #20]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d422e:	4605      	mov	r5, r0
   d4230:	460f      	mov	r7, r1
        if (valid_) {
   d4232:	b1f3      	cbz	r3, d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d4234:	2104      	movs	r1, #4
   d4236:	f7ff ffb9 	bl	d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d423a:	4606      	mov	r6, r0
   d423c:	b108      	cbz	r0, d4242 <_ZN24SystemSleepConfiguration8durationEm+0x1a>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d423e:	60c7      	str	r7, [r0, #12]
                return *this;
   d4240:	e017      	b.n	d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4242:	490d      	ldr	r1, [pc, #52]	; (d4278 <_ZN24SystemSleepConfiguration8durationEm+0x50>)
   d4244:	2010      	movs	r0, #16
   d4246:	f003 ff3d 	bl	d80c4 <_ZnwjRKSt9nothrow_t>
   d424a:	4604      	mov	r4, r0
   d424c:	b180      	cbz	r0, d4270 <_ZN24SystemSleepConfiguration8durationEm+0x48>
   d424e:	f04f 0810 	mov.w	r8, #16
   d4252:	4642      	mov	r2, r8
   d4254:	4631      	mov	r1, r6
   d4256:	f004 feaa 	bl	d8fae <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d425a:	2302      	movs	r3, #2
   d425c:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d425e:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4260:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4264:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4266:	692b      	ldr	r3, [r5, #16]
   d4268:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d426a:	60e7      	str	r7, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d426c:	612c      	str	r4, [r5, #16]
   d426e:	e000      	b.n	d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d4270:	7528      	strb	r0, [r5, #20]
            wakeupSource->base.next = config_.wakeup_sources;
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4272:	4628      	mov	r0, r5
   d4274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4278:	000dbd88 	.word	0x000dbd88

000d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d427c:	b508      	push	{r3, lr}
   d427e:	ed2d 8b02 	vpush	{d8}
   d4282:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4286:	b128      	cbz	r0, d4294 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4288:	3801      	subs	r0, #1
   d428a:	f7ff fff7 	bl	d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d428e:	ee28 0a00 	vmul.f32	s0, s16, s0
   d4292:	e001      	b.n	d4298 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d4294:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d4298:	ecbd 8b02 	vpop	{d8}
   d429c:	bd08      	pop	{r3, pc}
	...

000d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d42a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42a2:	2500      	movs	r5, #0
   d42a4:	468e      	mov	lr, r1
   d42a6:	4915      	ldr	r1, [pc, #84]	; (d42fc <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42a8:	7105      	strb	r5, [r0, #4]
   d42aa:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d42ac:	6145      	str	r5, [r0, #20]
   d42ae:	6001      	str	r1, [r0, #0]
   d42b0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b2:	e892 0003 	ldmia.w	r2, {r0, r1}
   d42b6:	b085      	sub	sp, #20
   d42b8:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d42ba:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42be:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42c2:	e896 0003 	ldmia.w	r6, {r0, r1}
   d42c6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42ca:	e897 0003 	ldmia.w	r7, {r0, r1}
   d42ce:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42d2:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d42d4:	6960      	ldr	r0, [r4, #20]
   d42d6:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d42d8:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42da:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42dc:	69a0      	ldr	r0, [r4, #24]
   d42de:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42e0:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d42e2:	e88d 0028 	stmia.w	sp, {r3, r5}
   d42e6:	4a06      	ldr	r2, [pc, #24]	; (d4300 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d42e8:	4623      	mov	r3, r4
   d42ea:	4671      	mov	r1, lr
   d42ec:	f104 0008 	add.w	r0, r4, #8
   d42f0:	f001 fe4c 	bl	d5f8c <os_timer_create>
    }
   d42f4:	4620      	mov	r0, r4
   d42f6:	b005      	add	sp, #20
   d42f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42fa:	bf00      	nop
   d42fc:	000db3fc 	.word	0x000db3fc
   d4300:	000d4135 	.word	0x000d4135

000d4304 <_ZN5Timer5resetEj>:

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
   d4304:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
    }

    bool _reset(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   d4306:	6880      	ldr	r0, [r0, #8]
   d4308:	2300      	movs	r3, #0
   d430a:	b140      	cbz	r0, d431e <_ZN5Timer5resetEj+0x1a>
   d430c:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4310:	461a      	mov	r2, r3
   d4312:	2101      	movs	r1, #1
   d4314:	f001 fe52 	bl	d5fbc <os_timer_change>
   d4318:	fab0 f080 	clz	r0, r0
   d431c:	0940      	lsrs	r0, r0, #5

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
   d431e:	b003      	add	sp, #12
   d4320:	f85d fb04 	ldr.w	pc, [sp], #4

000d4324 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4324:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4326:	6880      	ldr	r0, [r0, #8]
    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4328:	460b      	mov	r3, r1
   d432a:	4611      	mov	r1, r2
   d432c:	2200      	movs	r2, #0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d432e:	b138      	cbz	r0, d4340 <_ZN5Timer12changePeriodEjj+0x1c>
   d4330:	e88d 0006 	stmia.w	sp, {r1, r2}
   d4334:	2103      	movs	r1, #3
   d4336:	f001 fe41 	bl	d5fbc <os_timer_change>
   d433a:	fab0 f080 	clz	r0, r0
   d433e:	0940      	lsrs	r0, r0, #5
    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4340:	b003      	add	sp, #12
   d4342:	f85d fb04 	ldr.w	pc, [sp], #4

000d4346 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4346:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4348:	6880      	ldr	r0, [r0, #8]
   d434a:	2300      	movs	r3, #0
   d434c:	b138      	cbz	r0, d435e <_ZN5Timer5_stopEjb+0x18>
   d434e:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4352:	2102      	movs	r1, #2
   d4354:	f001 fe32 	bl	d5fbc <os_timer_change>
   d4358:	fab0 f080 	clz	r0, r0
   d435c:	0940      	lsrs	r0, r0, #5
    }
   d435e:	b003      	add	sp, #12
   d4360:	f85d fb04 	ldr.w	pc, [sp], #4

000d4364 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4364:	b538      	push	{r3, r4, r5, lr}
   d4366:	4b10      	ldr	r3, [pc, #64]	; (d43a8 <_ZN5TimerD1Ev+0x44>)
   d4368:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d436a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d436c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d436e:	b1a3      	cbz	r3, d439a <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4374:	2200      	movs	r2, #0
   d4376:	f7ff ffe6 	bl	d4346 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d437a:	2100      	movs	r1, #0
   d437c:	68a0      	ldr	r0, [r4, #8]
   d437e:	f001 fe3d 	bl	d5ffc <os_timer_set_id>
            while (running) {
   d4382:	7923      	ldrb	r3, [r4, #4]
   d4384:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4388:	b113      	cbz	r3, d4390 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d438a:	f001 fddf 	bl	d5f4c <os_thread_yield>
   d438e:	e7f8      	b.n	d4382 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4390:	4629      	mov	r1, r5
   d4392:	68a0      	ldr	r0, [r4, #8]
   d4394:	f001 fe02 	bl	d5f9c <os_timer_destroy>
            handle = nullptr;
   d4398:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d439a:	f104 000c 	add.w	r0, r4, #12
   d439e:	f7ff fefc 	bl	d419a <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43a2:	4620      	mov	r0, r4
   d43a4:	bd38      	pop	{r3, r4, r5, pc}
   d43a6:	bf00      	nop
   d43a8:	000db3fc 	.word	0x000db3fc

000d43ac <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43ac:	b510      	push	{r4, lr}
   d43ae:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43b0:	f7ff ffd8 	bl	d4364 <_ZN5TimerD1Ev>
   d43b4:	4620      	mov	r0, r4
   d43b6:	211c      	movs	r1, #28
   d43b8:	f003 fe79 	bl	d80ae <_ZdlPvj>
   d43bc:	4620      	mov	r0, r4
   d43be:	bd10      	pop	{r4, pc}

000d43c0 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43c2:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43c4:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43c6:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43c8:	4611      	mov	r1, r2
   d43ca:	f7ff ffbc 	bl	d4346 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43ce:	68a8      	ldr	r0, [r5, #8]
   d43d0:	2300      	movs	r3, #0
   d43d2:	b140      	cbz	r0, d43e6 <_ZN5Timer5startEj+0x26>
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	9400      	str	r4, [sp, #0]
   d43d8:	461a      	mov	r2, r3
   d43da:	4619      	mov	r1, r3
   d43dc:	f001 fdee 	bl	d5fbc <os_timer_change>
   d43e0:	fab0 f080 	clz	r0, r0
   d43e4:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43e6:	b003      	add	sp, #12
   d43e8:	bd30      	pop	{r4, r5, pc}
	...

000d43ec <_Z17getSignalStrengthv>:

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d43ec:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43ee:	4d19      	ldr	r5, [pc, #100]	; (d4454 <_Z17getSignalStrengthv+0x68>)
   d43f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d43f2:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43f4:	ac04      	add	r4, sp, #16
   d43f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d43fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4400:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4404:	4914      	ldr	r1, [pc, #80]	; (d4458 <_Z17getSignalStrengthv+0x6c>)
   d4406:	a80e      	add	r0, sp, #56	; 0x38
   d4408:	f002 f984 	bl	d6714 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d440c:	a80e      	add	r0, sp, #56	; 0x38
   d440e:	f002 f9d4 	bl	d67ba <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4412:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4414:	a80e      	add	r0, sp, #56	; 0x38
   d4416:	f002 fa21 	bl	d685c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d441a:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d441c:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4420:	f002 fa02 	bl	d6828 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4424:	ab18      	add	r3, sp, #96	; 0x60
   d4426:	ee10 0a10 	vmov	r0, s0
   d442a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d442e:	f004 f909 	bl	d8644 <__aeabi_f2d>
   d4432:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4436:	4628      	mov	r0, r5
   d4438:	f004 f904 	bl	d8644 <__aeabi_f2d>
   d443c:	e9cd 0100 	strd	r0, r1, [sp]
   d4440:	4a06      	ldr	r2, [pc, #24]	; (d445c <_Z17getSignalStrengthv+0x70>)
   d4442:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4446:	4806      	ldr	r0, [pc, #24]	; (d4460 <_Z17getSignalStrengthv+0x74>)
   d4448:	2140      	movs	r1, #64	; 0x40
   d444a:	f002 f8d1 	bl	d65f0 <snprintf>
}
   d444e:	b019      	add	sp, #100	; 0x64
   d4450:	bd30      	pop	{r4, r5, pc}
   d4452:	bf00      	nop
   d4454:	000db408 	.word	0x000db408
   d4458:	2003e334 	.word	0x2003e334
   d445c:	000db490 	.word	0x000db490
   d4460:	2003e274 	.word	0x2003e274

000d4464 <_Z17connectToParticlev>:

}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4464:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4468:	481a      	ldr	r0, [pc, #104]	; (d44d4 <_Z17connectToParticlev+0x70>)
   d446a:	2300      	movs	r3, #0
   d446c:	461a      	mov	r2, r3
   d446e:	4619      	mov	r1, r3
   d4470:	6840      	ldr	r0, [r0, #4]
   d4472:	f002 f86d 	bl	d6550 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4476:	f002 f803 	bl	d6480 <spark_cloud_flag_connect>
   d447a:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d447e:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4482:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4484:	2000      	movs	r0, #0
   d4486:	f001 fe21 	bl	d60cc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d448a:	f04f 0900 	mov.w	r9, #0
   d448e:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4490:	2000      	movs	r0, #0
   d4492:	f001 fe1b 	bl	d60cc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4496:	ebb0 0008 	subs.w	r0, r0, r8
   d449a:	eb61 0109 	sbc.w	r1, r1, r9
   d449e:	428f      	cmp	r7, r1
   d44a0:	bf08      	it	eq
   d44a2:	4286      	cmpeq	r6, r0
   d44a4:	d305      	bcc.n	d44b2 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44a6:	f001 fffb 	bl	d64a0 <spark_cloud_flag_connected>
   d44aa:	b910      	cbnz	r0, d44b2 <_Z17connectToParticlev+0x4e>
            spark_process();
   d44ac:	f001 ffe0 	bl	d6470 <spark_process>
   d44b0:	e7ee      	b.n	d4490 <_Z17connectToParticlev+0x2c>
   d44b2:	f001 fff5 	bl	d64a0 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44b6:	b118      	cbz	r0, d44c0 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d44b8:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d44bc:	f001 bff0 	b.w	d64a0 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d44c0:	f001 fdcc 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d44c4:	4b04      	ldr	r3, [pc, #16]	; (d44d8 <_Z17connectToParticlev+0x74>)
   d44c6:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d44c8:	f001 ffd2 	bl	d6470 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44cc:	3c01      	subs	r4, #1
   d44ce:	d0f3      	beq.n	d44b8 <_Z17connectToParticlev+0x54>
   d44d0:	e7d8      	b.n	d4484 <_Z17connectToParticlev+0x20>
   d44d2:	bf00      	nop
   d44d4:	2003e334 	.word	0x2003e334
   d44d8:	2003e6e8 	.word	0x2003e6e8

000d44dc <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d44dc:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44de:	f001 ffdf 	bl	d64a0 <spark_cloud_flag_connected>
    return !Particle.connected();
   d44e2:	f080 0001 	eor.w	r0, r0, #1
}
   d44e6:	b2c0      	uxtb	r0, r0
   d44e8:	bd08      	pop	{r3, pc}
	...

000d44ec <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d44ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d44ee:	f001 ffcf 	bl	d6490 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44f2:	2000      	movs	r0, #0
   d44f4:	f001 fdea 	bl	d60cc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44f8:	2500      	movs	r5, #0
   d44fa:	4604      	mov	r4, r0
   d44fc:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4500:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4502:	2000      	movs	r0, #0
   d4504:	f001 fde2 	bl	d60cc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4508:	1b00      	subs	r0, r0, r4
   d450a:	eb61 0105 	sbc.w	r1, r1, r5
   d450e:	428f      	cmp	r7, r1
   d4510:	bf08      	it	eq
   d4512:	4286      	cmpeq	r6, r0
   d4514:	d305      	bcc.n	d4522 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4516:	f7ff ffe1 	bl	d44dc <_Z12notConnectedv>
   d451a:	b910      	cbnz	r0, d4522 <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d451c:	f001 ffa8 	bl	d6470 <spark_process>
   d4520:	e7ef      	b.n	d4502 <_Z22disconnectFromParticlev+0x16>
   d4522:	f7ff ffdb 	bl	d44dc <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4526:	4806      	ldr	r0, [pc, #24]	; (d4540 <_Z22disconnectFromParticlev+0x54>)
   d4528:	2300      	movs	r3, #0
   d452a:	461a      	mov	r2, r3
   d452c:	4619      	mov	r1, r3
   d452e:	6840      	ldr	r0, [r0, #4]
   d4530:	f002 f816 	bl	d6560 <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4534:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4538:	f002 f87e 	bl	d6638 <delay>
  return true;
}
   d453c:	2001      	movs	r0, #1
   d453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4540:	2003e334 	.word	0x2003e334

000d4544 <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
   d4544:	b513      	push	{r0, r1, r4, lr}
   d4546:	4604      	mov	r4, r0
  PMIC pmic(true);
   d4548:	2101      	movs	r1, #1
   d454a:	a801      	add	r0, sp, #4
   d454c:	f002 ff9f 	bl	d748e <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
   d4550:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
   d4552:	b11c      	cbz	r4, d455c <_Z14enableChargingb+0x18>
    pmic.enableCharging();
   d4554:	f003 f836 	bl	d75c4 <_ZN4PMIC14enableChargingEv>
    return TRUE;
   d4558:	2401      	movs	r4, #1
   d455a:	e001      	b.n	d4560 <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
   d455c:	f003 f802 	bl	d7564 <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
   d4560:	a801      	add	r0, sp, #4
   d4562:	f002 ffa3 	bl	d74ac <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
   d4566:	4620      	mov	r0, r4
   d4568:	b002      	add	sp, #8
   d456a:	bd10      	pop	{r4, pc}

000d456c <_Z14setPowerConfigv>:
  }
  else return 0;
}

// Power Management function
int setPowerConfig() {
   d456c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d456e:	2420      	movs	r4, #32
   d4570:	b090      	sub	sp, #64	; 0x40
   d4572:	4622      	mov	r2, r4
   d4574:	2100      	movs	r1, #0
   d4576:	4668      	mov	r0, sp
   d4578:	f004 fd19 	bl	d8fae <memset>
   d457c:	4622      	mov	r2, r4
   d457e:	2100      	movs	r1, #0
   d4580:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4584:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4588:	f004 fd11 	bl	d8fae <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d458c:	2100      	movs	r1, #0
   d458e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4592:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4596:	f001 ff47 	bl	d6428 <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
   d459a:	4b1a      	ldr	r3, [pc, #104]	; (d4604 <_Z14setPowerConfigv+0x98>)
   d459c:	7959      	ldrb	r1, [r3, #5]
   d459e:	9b00      	ldr	r3, [sp, #0]
   d45a0:	b1a1      	cbz	r1, d45cc <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d45a2:	f240 2226 	movw	r2, #550	; 0x226
   d45a6:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45aa:	f241 22e8 	movw	r2, #4840	; 0x12e8
   d45ae:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d45b2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d45b6:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45be:	f241 0272 	movw	r2, #4210	; 0x1072
   d45c2:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45c6:	9300      	str	r3, [sp, #0]
   d45c8:	2100      	movs	r1, #0
   d45ca:	e010      	b.n	d45ee <_Z14setPowerConfigv+0x82>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d45cc:	f44f 7261 	mov.w	r2, #900	; 0x384
   d45d0:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45d4:	f241 0070 	movw	r0, #4208	; 0x1070
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d45d8:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45e0:	f241 0210 	movw	r2, #4112	; 0x1010

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45e4:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45e8:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45ec:	9300      	str	r3, [sp, #0]
   d45ee:	4668      	mov	r0, sp
   d45f0:	f001 ff1a 	bl	d6428 <system_power_management_set_config>
   d45f4:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                     // This is the default value for the Boron
        .batteryChargeCurrent(900)                                      // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                      // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
   d45f6:	2001      	movs	r0, #1
   d45f8:	f7ff ffa4 	bl	d4544 <_Z14enableChargingb>
    return res;
  }
}
   d45fc:	4620      	mov	r0, r4
   d45fe:	b010      	add	sp, #64	; 0x40
   d4600:	bd10      	pop	{r4, pc}
   d4602:	bf00      	nop
   d4604:	2003e308 	.word	0x2003e308

000d4608 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d4608:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d460a:	4c07      	ldr	r4, [pc, #28]	; (d4628 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d460c:	f001 fd26 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
   d4610:	6823      	ldr	r3, [r4, #0]
   d4612:	1ac0      	subs	r0, r0, r3
   d4614:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4618:	d304      	bcc.n	d4624 <_Z20meterParticlePublishv+0x1c>
   d461a:	f001 fd1f 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d461e:	6020      	str	r0, [r4, #0]
   d4620:	2001      	movs	r0, #1
   d4622:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4624:	2000      	movs	r0, #0
}
   d4626:	bd10      	pop	{r4, pc}
   d4628:	2003e2b4 	.word	0x2003e2b4

000d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d462c:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d462e:	f7ff ffeb 	bl	d4608 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4632:	b118      	cbz	r0, d463c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4638:	f7ff bfe6 	b.w	d4608 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d463c:	f001 ff18 	bl	d6470 <spark_process>
   d4640:	e7f5      	b.n	d462e <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68+0x2>
	...

000d4644 <_Z14fullModemResetv>:
    return 1;
  }
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4644:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4646:	f001 ff23 	bl	d6490 <spark_cloud_flag_disconnect>
   d464a:	f001 fd07 	bl	d605c <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d464e:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4652:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4654:	f001 ff24 	bl	d64a0 <spark_cloud_flag_connected>
   d4658:	b140      	cbz	r0, d466c <_Z14fullModemResetv+0x28>
   d465a:	f001 fcff 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
   d465e:	1b00      	subs	r0, r0, r4
   d4660:	42a8      	cmp	r0, r5
   d4662:	d803      	bhi.n	d466c <_Z14fullModemResetv+0x28>
		delay(100);
   d4664:	2064      	movs	r0, #100	; 0x64
   d4666:	f001 ffe7 	bl	d6638 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d466a:	e7f3      	b.n	d4654 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d466c:	2100      	movs	r1, #0
   d466e:	4b09      	ldr	r3, [pc, #36]	; (d4694 <_Z14fullModemResetv+0x50>)
   d4670:	f247 5230 	movw	r2, #30000	; 0x7530
   d4674:	4608      	mov	r0, r1
   d4676:	f001 fc59 	bl	d5f2c <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d467a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d467e:	f001 ffdb 	bl	d6638 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4682:	4b05      	ldr	r3, [pc, #20]	; (d4698 <_Z14fullModemResetv+0x54>)
   d4684:	220a      	movs	r2, #10
   d4686:	681b      	ldr	r3, [r3, #0]
   d4688:	2101      	movs	r1, #1
   d468a:	4668      	mov	r0, sp
   d468c:	f003 f980 	bl	d7990 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4690:	b003      	add	sp, #12
   d4692:	bd30      	pop	{r4, r5, pc}
   d4694:	000db4a9 	.word	0x000db4a9
   d4698:	2003e248 	.word	0x2003e248

000d469c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d469c:	b530      	push	{r4, r5, lr}
   d469e:	b085      	sub	sp, #20
   d46a0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d46a2:	a904      	add	r1, sp, #16
   d46a4:	2200      	movs	r2, #0
   d46a6:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d46aa:	f001 fe5f 	bl	d636c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d46ae:	b9a8      	cbnz	r0, d46dc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d46b0:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d46b2:	b10c      	cbz	r4, d46b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d46b4:	6923      	ldr	r3, [r4, #16]
   d46b6:	b923      	cbnz	r3, d46c2 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d46b8:	4a09      	ldr	r2, [pc, #36]	; (d46e0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d46ba:	2100      	movs	r1, #0
   d46bc:	200a      	movs	r0, #10
   d46be:	f001 fe45 	bl	d634c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d46c2:	2300      	movs	r3, #0
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	230c      	movs	r3, #12
   d46c8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d46cc:	2304      	movs	r3, #4
   d46ce:	9303      	str	r3, [sp, #12]
   d46d0:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d46d2:	6923      	ldr	r3, [r4, #16]
   d46d4:	aa01      	add	r2, sp, #4
   d46d6:	2101      	movs	r1, #1
   d46d8:	4620      	mov	r0, r4
   d46da:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d46dc:	b005      	add	sp, #20
   d46de:	bd30      	pop	{r4, r5, pc}
   d46e0:	000d604d 	.word	0x000d604d

000d46e4 <_Z17getBatteryContextv>:

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d46e4:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46e6:	4d0e      	ldr	r5, [pc, #56]	; (d4720 <_Z17getBatteryContextv+0x3c>)
   d46e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d46ea:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46ec:	ac01      	add	r4, sp, #4
   d46ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d46f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d46f8:	4669      	mov	r1, sp
   d46fa:	2007      	movs	r0, #7
   d46fc:	f7ff ffce 	bl	d469c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d4700:	2800      	cmp	r0, #0
        return val;
   d4702:	bfa8      	it	ge
   d4704:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4706:	4a07      	ldr	r2, [pc, #28]	; (d4724 <_Z17getBatteryContextv+0x40>)
   d4708:	ab08      	add	r3, sp, #32
   d470a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d470e:	2110      	movs	r1, #16
   d4710:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4714:	4804      	ldr	r0, [pc, #16]	; (d4728 <_Z17getBatteryContextv+0x44>)
   d4716:	f001 ff6b 	bl	d65f0 <snprintf>

}
   d471a:	b009      	add	sp, #36	; 0x24
   d471c:	bd30      	pop	{r4, r5, pc}
   d471e:	bf00      	nop
   d4720:	000db430 	.word	0x000db430
   d4724:	000db78e 	.word	0x000db78e
   d4728:	2003e1e2 	.word	0x2003e1e2

000d472c <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d472c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d472e:	4d59      	ldr	r5, [pc, #356]	; (d4894 <_Z16takeMeasurementsv+0x168>)
   d4730:	4c59      	ldr	r4, [pc, #356]	; (d4898 <_Z16takeMeasurementsv+0x16c>)
   d4732:	7b2b      	ldrb	r3, [r5, #12]
   d4734:	b13b      	cbz	r3, d4746 <_Z16takeMeasurementsv+0x1a>
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
   d4736:	4859      	ldr	r0, [pc, #356]	; (d489c <_Z16takeMeasurementsv+0x170>)
   d4738:	f001 fbd2 	bl	d5ee0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d473c:	eeb4 0a40 	vcmp.f32	s0, s0
   d4740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4744:	d703      	bvc.n	d474e <_Z16takeMeasurementsv+0x22>
   d4746:	2300      	movs	r3, #0
   d4748:	61a3      	str	r3, [r4, #24]
   d474a:	6163      	str	r3, [r4, #20]
   d474c:	e009      	b.n	d4762 <_Z16takeMeasurementsv+0x36>
    else {
    current.temperature = tempHumidSensor.readTemperature();
   d474e:	4853      	ldr	r0, [pc, #332]	; (d489c <_Z16takeMeasurementsv+0x170>)
   d4750:	f001 fbc6 	bl	d5ee0 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d4754:	4851      	ldr	r0, [pc, #324]	; (d489c <_Z16takeMeasurementsv+0x170>)
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
    else {
    current.temperature = tempHumidSensor.readTemperature();
   d4756:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d475a:	f001 fbcf 	bl	d5efc <_ZN14Adafruit_SHT3112readHumidityEv>
   d475e:	ed84 0a06 	vstr	s0, [r4, #24]
    }

  }
  else current.temperature = current.humidity = 0.0;
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4762:	6960      	ldr	r0, [r4, #20]
   d4764:	4e4c      	ldr	r6, [pc, #304]	; (d4898 <_Z16takeMeasurementsv+0x16c>)
   d4766:	f003 ff6d 	bl	d8644 <__aeabi_f2d>
   d476a:	4a4d      	ldr	r2, [pc, #308]	; (d48a0 <_Z16takeMeasurementsv+0x174>)
   d476c:	e9cd 0100 	strd	r0, r1, [sp]
   d4770:	2110      	movs	r1, #16
   d4772:	484c      	ldr	r0, [pc, #304]	; (d48a4 <_Z16takeMeasurementsv+0x178>)
   d4774:	f001 ff3c 	bl	d65f0 <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d4778:	69a0      	ldr	r0, [r4, #24]
   d477a:	f003 ff63 	bl	d8644 <__aeabi_f2d>
   d477e:	4a4a      	ldr	r2, [pc, #296]	; (d48a8 <_Z16takeMeasurementsv+0x17c>)
   d4780:	e9cd 0100 	strd	r0, r1, [sp]
   d4784:	2110      	movs	r1, #16
   d4786:	4849      	ldr	r0, [pc, #292]	; (d48ac <_Z16takeMeasurementsv+0x180>)
   d4788:	f001 ff32 	bl	d65f0 <snprintf>

  if (sysStatus.lightSensorConfig) {
   d478c:	7c2b      	ldrb	r3, [r5, #16]
   d478e:	b143      	cbz	r3, d47a2 <_Z16takeMeasurementsv+0x76>
    lightSensor.make_forced_measurement();
   d4790:	4847      	ldr	r0, [pc, #284]	; (d48b0 <_Z16takeMeasurementsv+0x184>)
   d4792:	f001 facf 	bl	d5d34 <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d4796:	4846      	ldr	r0, [pc, #280]	; (d48b0 <_Z16takeMeasurementsv+0x184>)
   d4798:	f001 fa86 	bl	d5ca8 <_ZN6BH175015get_light_levelEv>
   d479c:	ed86 0a07 	vstr	s0, [r6, #28]
   d47a0:	e001      	b.n	d47a6 <_Z16takeMeasurementsv+0x7a>
  }
  else current.lightLevel = 0.0;
   d47a2:	2300      	movs	r3, #0
   d47a4:	61f3      	str	r3, [r6, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d47a6:	69e0      	ldr	r0, [r4, #28]
   d47a8:	4e3b      	ldr	r6, [pc, #236]	; (d4898 <_Z16takeMeasurementsv+0x16c>)
   d47aa:	f003 ff4b 	bl	d8644 <__aeabi_f2d>
   d47ae:	4a41      	ldr	r2, [pc, #260]	; (d48b4 <_Z16takeMeasurementsv+0x188>)
   d47b0:	e9cd 0100 	strd	r0, r1, [sp]
   d47b4:	2110      	movs	r1, #16
   d47b6:	4840      	ldr	r0, [pc, #256]	; (d48b8 <_Z16takeMeasurementsv+0x18c>)
   d47b8:	f001 ff1a 	bl	d65f0 <snprintf>

  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d47bc:	7bab      	ldrb	r3, [r5, #14]
   d47be:	b163      	cbz	r3, d47da <_Z16takeMeasurementsv+0xae>
   d47c0:	2013      	movs	r0, #19
   d47c2:	f003 fbc4 	bl	d7f4e <analogRead>
   d47c6:	2364      	movs	r3, #100	; 0x64
   d47c8:	9300      	str	r3, [sp, #0]
   d47ca:	2300      	movs	r3, #0
   d47cc:	f640 628a 	movw	r2, #3722	; 0xe8a
   d47d0:	4619      	mov	r1, r3
   d47d2:	f001 ff25 	bl	d6620 <_Z3mapiiiii>
   d47d6:	6030      	str	r0, [r6, #0]
   d47d8:	e000      	b.n	d47dc <_Z16takeMeasurementsv+0xb0>
  else current.soilMoisture1 = 0;
   d47da:	6033      	str	r3, [r6, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d47dc:	7bab      	ldrb	r3, [r5, #14]
   d47de:	2b02      	cmp	r3, #2
   d47e0:	d10c      	bne.n	d47fc <_Z16takeMeasurementsv+0xd0>
   d47e2:	2012      	movs	r0, #18
   d47e4:	f003 fbb3 	bl	d7f4e <analogRead>
   d47e8:	2364      	movs	r3, #100	; 0x64
   d47ea:	9300      	str	r3, [sp, #0]
   d47ec:	2300      	movs	r3, #0
   d47ee:	f640 628a 	movw	r2, #3722	; 0xe8a
   d47f2:	4619      	mov	r1, r3
   d47f4:	f001 ff14 	bl	d6620 <_Z3mapiiiii>
   d47f8:	6060      	str	r0, [r4, #4]
   d47fa:	e001      	b.n	d4800 <_Z16takeMeasurementsv+0xd4>
  else current.soilMoisture2 = 0;
   d47fc:	2300      	movs	r3, #0
   d47fe:	6063      	str	r3, [r4, #4]


  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d4800:	7beb      	ldrb	r3, [r5, #15]
   d4802:	2b01      	cmp	r3, #1
   d4804:	d10d      	bne.n	d4822 <_Z16takeMeasurementsv+0xf6>
   d4806:	2011      	movs	r0, #17
   d4808:	f003 fba1 	bl	d7f4e <analogRead>
   d480c:	231e      	movs	r3, #30
   d480e:	9300      	str	r3, [sp, #0]
   d4810:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d4814:	2300      	movs	r3, #0
   d4816:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d481a:	f001 ff01 	bl	d6620 <_Z3mapiiiii>
   d481e:	60a0      	str	r0, [r4, #8]
   d4820:	e002      	b.n	d4828 <_Z16takeMeasurementsv+0xfc>
  else sysStatus.pressureSensorConfig = 0;
   d4822:	4b1c      	ldr	r3, [pc, #112]	; (d4894 <_Z16takeMeasurementsv+0x168>)
   d4824:	2200      	movs	r2, #0
   d4826:	73da      	strb	r2, [r3, #15]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4828:	4b24      	ldr	r3, [pc, #144]	; (d48bc <_Z16takeMeasurementsv+0x190>)
   d482a:	2200      	movs	r2, #0
   d482c:	4611      	mov	r1, r2
   d482e:	6858      	ldr	r0, [r3, #4]
   d4830:	f001 fe86 	bl	d6540 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4834:	b108      	cbz	r0, d483a <_Z16takeMeasurementsv+0x10e>
   d4836:	f7ff fdd9 	bl	d43ec <_Z17getSignalStrengthv>
   d483a:	a903      	add	r1, sp, #12
   d483c:	2003      	movs	r0, #3
   d483e:	f7ff ff2d 	bl	d469c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4842:	b988      	cbnz	r0, d4868 <_Z16takeMeasurementsv+0x13c>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4844:	2006      	movs	r0, #6
   d4846:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d484a:	f7ff fd17 	bl	d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d484e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4852:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4856:	ee07 3a10 	vmov	s14, r3
   d485a:	ee30 0a00 	vadd.f32	s0, s0, s0
   d485e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4862:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4866:	e001      	b.n	d486c <_Z16takeMeasurementsv+0x140>
            return -1.0f;
   d4868:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0

  // sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d486c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4870:	4a13      	ldr	r2, [pc, #76]	; (d48c0 <_Z16takeMeasurementsv+0x194>)
   d4872:	4814      	ldr	r0, [pc, #80]	; (d48c4 <_Z16takeMeasurementsv+0x198>)
  else sysStatus.pressureSensorConfig = 0;

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready

  // sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d4874:	edc5 7a02 	vstr	s15, [r5, #8]
   d4878:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d487c:	2108      	movs	r1, #8
   d487e:	f001 feb7 	bl	d65f0 <snprintf>

  getBatteryContext();                                                 // What is the battery doing.
   d4882:	f7ff ff2f 	bl	d46e4 <_Z17getBatteryContextv>

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d4886:	4b10      	ldr	r3, [pc, #64]	; (d48c8 <_Z16takeMeasurementsv+0x19c>)
   d4888:	2001      	movs	r0, #1
   d488a:	7018      	strb	r0, [r3, #0]
   d488c:	4b0f      	ldr	r3, [pc, #60]	; (d48cc <_Z16takeMeasurementsv+0x1a0>)
   d488e:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4890:	b004      	add	sp, #16
   d4892:	bd70      	pop	{r4, r5, r6, pc}
   d4894:	2003e308 	.word	0x2003e308
   d4898:	2003e2bc 	.word	0x2003e2bc
   d489c:	2003e25c 	.word	0x2003e25c
   d48a0:	000db4b6 	.word	0x000db4b6
   d48a4:	2003e1bc 	.word	0x2003e1bc
   d48a8:	000db4be 	.word	0x000db4be
   d48ac:	2003e2e0 	.word	0x2003e2e0
   d48b0:	2003e1d8 	.word	0x2003e1d8
   d48b4:	000db4c7 	.word	0x000db4c7
   d48b8:	2003e2f8 	.word	0x2003e2f8
   d48bc:	2003e334 	.word	0x2003e334
   d48c0:	000db4d1 	.word	0x000db4d1
   d48c4:	2003e2f0 	.word	0x2003e2f0
   d48c8:	2003e22c 	.word	0x2003e22c
   d48cc:	2003e1f2 	.word	0x2003e1f2

000d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48d0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d48d2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48d4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d48d6:	b17c      	cbz	r4, d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d48d8:	6863      	ldr	r3, [r4, #4]
   d48da:	3b01      	subs	r3, #1
   d48dc:	6063      	str	r3, [r4, #4]
   d48de:	b95b      	cbnz	r3, d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d48e0:	6823      	ldr	r3, [r4, #0]
   d48e2:	4620      	mov	r0, r4
   d48e4:	689b      	ldr	r3, [r3, #8]
   d48e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48e8:	68a3      	ldr	r3, [r4, #8]
   d48ea:	3b01      	subs	r3, #1
   d48ec:	60a3      	str	r3, [r4, #8]
   d48ee:	b91b      	cbnz	r3, d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d48f0:	6823      	ldr	r3, [r4, #0]
   d48f2:	4620      	mov	r0, r4
   d48f4:	68db      	ldr	r3, [r3, #12]
   d48f6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d48f8:	4628      	mov	r0, r5
   d48fa:	bd38      	pop	{r3, r4, r5, pc}

000d48fc <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d48fc:	b530      	push	{r4, r5, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d48fe:	4c2f      	ldr	r4, [pc, #188]	; (d49bc <_Z9sendEventv+0xc0>)
   d4900:	4d2f      	ldr	r5, [pc, #188]	; (d49c0 <_Z9sendEventv+0xc4>)
   d4902:	6a23      	ldr	r3, [r4, #32]
    break;
  }
}

void sendEvent()
{
   d4904:	b0d1      	sub	sp, #324	; 0x144
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d4906:	930d      	str	r3, [sp, #52]	; 0x34
   d4908:	4b2e      	ldr	r3, [pc, #184]	; (d49c4 <_Z9sendEventv+0xc8>)
   d490a:	699a      	ldr	r2, [r3, #24]
   d490c:	920c      	str	r2, [sp, #48]	; 0x30
   d490e:	4a2e      	ldr	r2, [pc, #184]	; (d49c8 <_Z9sendEventv+0xcc>)
   d4910:	920b      	str	r2, [sp, #44]	; 0x2c
   d4912:	689b      	ldr	r3, [r3, #8]
   d4914:	930a      	str	r3, [sp, #40]	; 0x28
   d4916:	68e3      	ldr	r3, [r4, #12]
   d4918:	9309      	str	r3, [sp, #36]	; 0x24
   d491a:	68a3      	ldr	r3, [r4, #8]
   d491c:	9308      	str	r3, [sp, #32]
   d491e:	6863      	ldr	r3, [r4, #4]
   d4920:	9307      	str	r3, [sp, #28]
   d4922:	6823      	ldr	r3, [r4, #0]
   d4924:	9306      	str	r3, [sp, #24]
   d4926:	69e0      	ldr	r0, [r4, #28]
   d4928:	f003 fe8c 	bl	d8644 <__aeabi_f2d>
   d492c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4930:	69a0      	ldr	r0, [r4, #24]
   d4932:	f003 fe87 	bl	d8644 <__aeabi_f2d>
   d4936:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d493a:	6960      	ldr	r0, [r4, #20]
   d493c:	f003 fe82 	bl	d8644 <__aeabi_f2d>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4940:	2400      	movs	r4, #0
   d4942:	e9cd 0100 	strd	r0, r1, [sp]
   d4946:	4a21      	ldr	r2, [pc, #132]	; (d49cc <_Z9sendEventv+0xd0>)
   d4948:	f44f 7180 	mov.w	r1, #256	; 0x100
   d494c:	a810      	add	r0, sp, #64	; 0x40
   d494e:	f001 fe4f 	bl	d65f0 <snprintf>
  waitUntil(meterParticlePublish);
   d4952:	f7ff fe6b 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4956:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control-Elastic", data, PRIVATE);
   d4958:	491d      	ldr	r1, [pc, #116]	; (d49d0 <_Z9sendEventv+0xd4>)
   d495a:	f88d 4000 	strb.w	r4, [sp]
   d495e:	aa10      	add	r2, sp, #64	; 0x40
   d4960:	a80e      	add	r0, sp, #56	; 0x38
   d4962:	f7ff fc05 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4966:	a80f      	add	r0, sp, #60	; 0x3c
   d4968:	f7ff ffb2 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d496c:	f7ff fe5e 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d4970:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("agriculture-aws-webhook",data,PRIVATE);
   d4972:	4918      	ldr	r1, [pc, #96]	; (d49d4 <_Z9sendEventv+0xd8>)
   d4974:	f88d 4000 	strb.w	r4, [sp]
   d4978:	aa10      	add	r2, sp, #64	; 0x40
   d497a:	a80e      	add	r0, sp, #56	; 0x38
   d497c:	f7ff fbf8 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4980:	a80f      	add	r0, sp, #60	; 0x3c
   d4982:	f7ff ffa5 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4986:	f7ff fe51 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d498a:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d498c:	4912      	ldr	r1, [pc, #72]	; (d49d8 <_Z9sendEventv+0xdc>)
   d498e:	f88d 4000 	strb.w	r4, [sp]
   d4992:	aa10      	add	r2, sp, #64	; 0x40
   d4994:	a80e      	add	r0, sp, #56	; 0x38
   d4996:	f7ff fbeb 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d499a:	a80f      	add	r0, sp, #60	; 0x3c
   d499c:	f7ff ff98 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d49a0:	f003 f89e 	bl	d7ae0 <_ZN9TimeClass4hourEv>
   d49a4:	4b0d      	ldr	r3, [pc, #52]	; (d49dc <_Z9sendEventv+0xe0>)
   d49a6:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d49a8:	4b0d      	ldr	r3, [pc, #52]	; (d49e0 <_Z9sendEventv+0xe4>)
   d49aa:	2201      	movs	r2, #1
   d49ac:	701a      	strb	r2, [r3, #0]
   d49ae:	f001 fb55 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d49b2:	4b0c      	ldr	r3, [pc, #48]	; (d49e4 <_Z9sendEventv+0xe8>)
   d49b4:	6018      	str	r0, [r3, #0]
}
   d49b6:	b051      	add	sp, #324	; 0x144
   d49b8:	bd30      	pop	{r4, r5, pc}
   d49ba:	bf00      	nop
   d49bc:	2003e2bc 	.word	0x2003e2bc
   d49c0:	2003e1d4 	.word	0x2003e1d4
   d49c4:	2003e308 	.word	0x2003e308
   d49c8:	2003e1e2 	.word	0x2003e1e2
   d49cc:	000db4d7 	.word	0x000db4d7
   d49d0:	000db593 	.word	0x000db593
   d49d4:	000db5b4 	.word	0x000db5b4
   d49d8:	000db5cc 	.word	0x000db5cc
   d49dc:	2003e22e 	.word	0x2003e22e
   d49e0:	2003e0c6 	.word	0x2003e0c6
   d49e4:	2003e1d0 	.word	0x2003e1d0

000d49e8 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49e8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d49ea:	780b      	ldrb	r3, [r1, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49ec:	b094      	sub	sp, #80	; 0x50
   d49ee:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d49f0:	b923      	cbnz	r3, d49fc <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d49f2:	491c      	ldr	r1, [pc, #112]	; (d4a64 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d49f4:	a804      	add	r0, sp, #16
   d49f6:	f004 fb15 	bl	d9024 <strcpy>
   d49fa:	e017      	b.n	d4a2c <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d49fc:	4608      	mov	r0, r1
   d49fe:	f004 f9bd 	bl	d8d7c <atoi>
   d4a02:	28c8      	cmp	r0, #200	; 0xc8
   d4a04:	d004      	beq.n	d4a10 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4a06:	4620      	mov	r0, r4
   d4a08:	f004 f9b8 	bl	d8d7c <atoi>
   d4a0c:	28c9      	cmp	r0, #201	; 0xc9
   d4a0e:	d11e      	bne.n	d4a4e <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4a10:	4915      	ldr	r1, [pc, #84]	; (d4a68 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4a12:	a804      	add	r0, sp, #16
   d4a14:	f004 fb06 	bl	d9024 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4a18:	f003 f85a 	bl	d7ad0 <_ZN9TimeClass3nowEv>
   d4a1c:	4b13      	ldr	r3, [pc, #76]	; (d4a6c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4a1e:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4a20:	4b13      	ldr	r3, [pc, #76]	; (d4a70 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4a22:	2201      	movs	r2, #1
   d4a24:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4a26:	4b13      	ldr	r3, [pc, #76]	; (d4a74 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4a28:	2200      	movs	r2, #0
   d4a2a:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d4a2c:	f7ff fdfe 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d4a30:	4b11      	ldr	r3, [pc, #68]	; (d4a78 <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d4a32:	4912      	ldr	r1, [pc, #72]	; (d4a7c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4a34:	781b      	ldrb	r3, [r3, #0]
   d4a36:	2200      	movs	r2, #0
   d4a38:	f88d 2000 	strb.w	r2, [sp]
   d4a3c:	a802      	add	r0, sp, #8
   d4a3e:	aa04      	add	r2, sp, #16
   d4a40:	f7ff fb96 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4a44:	a803      	add	r0, sp, #12
   d4a46:	f7ff ff43 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4a4a:	b014      	add	sp, #80	; 0x50
   d4a4c:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4a4e:	4620      	mov	r0, r4
   d4a50:	f004 f994 	bl	d8d7c <atoi>
   d4a54:	4a0a      	ldr	r2, [pc, #40]	; (d4a80 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4a56:	4603      	mov	r3, r0
   d4a58:	2140      	movs	r1, #64	; 0x40
   d4a5a:	a804      	add	r0, sp, #16
   d4a5c:	f001 fdc8 	bl	d65f0 <snprintf>
   d4a60:	e7e4      	b.n	d4a2c <_Z14UbidotsHandlerPKcS0_+0x44>
   d4a62:	bf00      	nop
   d4a64:	000db5e5 	.word	0x000db5e5
   d4a68:	000db5fa 	.word	0x000db5fa
   d4a6c:	2003e308 	.word	0x2003e308
   d4a70:	2003e1f2 	.word	0x2003e1f2
   d4a74:	2003e0c6 	.word	0x2003e0c6
   d4a78:	2003e1d4 	.word	0x2003e1d4
   d4a7c:	000db5ed 	.word	0x000db5ed
   d4a80:	000db60c 	.word	0x000db60c

000d4a84 <_Z14setSoilSensors6String>:
  }
}


int setSoilSensors (String command) // Function to force sending data in current hour
{
   d4a84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4a86:	491e      	ldr	r1, [pc, #120]	; (d4b00 <_Z14setSoilSensors6String+0x7c>)
   d4a88:	4604      	mov	r4, r0
   d4a8a:	f002 fe92 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4a8e:	4606      	mov	r6, r0
   d4a90:	b158      	cbz	r0, d4aaa <_Z14setSoilSensors6String+0x26>
  {
    sysStatus.soilSensorConfig = 0;
   d4a92:	4b1c      	ldr	r3, [pc, #112]	; (d4b04 <_Z14setSoilSensors6String+0x80>)
   d4a94:	2200      	movs	r2, #0
   d4a96:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4a98:	4b1b      	ldr	r3, [pc, #108]	; (d4b08 <_Z14setSoilSensors6String+0x84>)
   d4a9a:	2401      	movs	r4, #1
   d4a9c:	701c      	strb	r4, [r3, #0]
   d4a9e:	4b1b      	ldr	r3, [pc, #108]	; (d4b0c <_Z14setSoilSensors6String+0x88>)
   d4aa0:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d4aa2:	f88d 2000 	strb.w	r2, [sp]
   d4aa6:	4a1a      	ldr	r2, [pc, #104]	; (d4b10 <_Z14setSoilSensors6String+0x8c>)
   d4aa8:	e020      	b.n	d4aec <_Z14setSoilSensors6String+0x68>
   d4aaa:	491a      	ldr	r1, [pc, #104]	; (d4b14 <_Z14setSoilSensors6String+0x90>)
   d4aac:	4620      	mov	r0, r4
   d4aae:	f002 fe80 	bl	d77b2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4ab2:	4605      	mov	r5, r0
   d4ab4:	b150      	cbz	r0, d4acc <_Z14setSoilSensors6String+0x48>
  {
    sysStatus.soilSensorConfig = 1;
   d4ab6:	4b13      	ldr	r3, [pc, #76]	; (d4b04 <_Z14setSoilSensors6String+0x80>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4ab8:	4a17      	ldr	r2, [pc, #92]	; (d4b18 <_Z14setSoilSensors6String+0x94>)
    Particle.publish("Config","No Soil Sensors",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.soilSensorConfig = 1;
   d4aba:	2401      	movs	r4, #1
   d4abc:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d4abe:	4b12      	ldr	r3, [pc, #72]	; (d4b08 <_Z14setSoilSensors6String+0x84>)
   d4ac0:	701c      	strb	r4, [r3, #0]
   d4ac2:	4b12      	ldr	r3, [pc, #72]	; (d4b0c <_Z14setSoilSensors6String+0x88>)
   d4ac4:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4ac6:	f88d 6000 	strb.w	r6, [sp]
   d4aca:	e00f      	b.n	d4aec <_Z14setSoilSensors6String+0x68>
   d4acc:	4913      	ldr	r1, [pc, #76]	; (d4b1c <_Z14setSoilSensors6String+0x98>)
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f002 fe6f 	bl	d77b2 <_ZNK6String6equalsEPKc>
    return 1;
  }
    else if (command == "2")
   d4ad4:	b190      	cbz	r0, d4afc <_Z14setSoilSensors6String+0x78>
  {
    sysStatus.soilSensorConfig = 2;
   d4ad6:	4b0b      	ldr	r3, [pc, #44]	; (d4b04 <_Z14setSoilSensors6String+0x80>)
   d4ad8:	2202      	movs	r2, #2
   d4ada:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4adc:	4b0a      	ldr	r3, [pc, #40]	; (d4b08 <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4ade:	4a10      	ldr	r2, [pc, #64]	; (d4b20 <_Z14setSoilSensors6String+0x9c>)
    return 1;
  }
    else if (command == "2")
  {
    sysStatus.soilSensorConfig = 2;
    systemStatusWriteNeeded = true;
   d4ae0:	2401      	movs	r4, #1
   d4ae2:	701c      	strb	r4, [r3, #0]
   d4ae4:	4b09      	ldr	r3, [pc, #36]	; (d4b0c <_Z14setSoilSensors6String+0x88>)
   d4ae6:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4ae8:	f88d 5000 	strb.w	r5, [sp]
   d4aec:	490d      	ldr	r1, [pc, #52]	; (d4b24 <_Z14setSoilSensors6String+0xa0>)
   d4aee:	a802      	add	r0, sp, #8
   d4af0:	f7ff fb3e 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4af4:	a803      	add	r0, sp, #12
   d4af6:	f7ff feeb 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4afa:	4620      	mov	r0, r4
  }
  else return 0;
}
   d4afc:	b004      	add	sp, #16
   d4afe:	bd70      	pop	{r4, r5, r6, pc}
   d4b00:	000db629 	.word	0x000db629
   d4b04:	2003e308 	.word	0x2003e308
   d4b08:	2003e1f2 	.word	0x2003e1f2
   d4b0c:	2003e1d4 	.word	0x2003e1d4
   d4b10:	000db62b 	.word	0x000db62b
   d4b14:	000dba8d 	.word	0x000dba8d
   d4b18:	000db642 	.word	0x000db642
   d4b1c:	000db921 	.word	0x000db921
   d4b20:	000db652 	.word	0x000db652
   d4b24:	000db63b 	.word	0x000db63b

000d4b28 <_Z17setPressureSensor6String>:

int setPressureSensor (String command) // Function to force sending data in current hour
{
   d4b28:	b530      	push	{r4, r5, lr}
   d4b2a:	4916      	ldr	r1, [pc, #88]	; (d4b84 <_Z17setPressureSensor6String+0x5c>)
   d4b2c:	b085      	sub	sp, #20
   d4b2e:	4604      	mov	r4, r0
   d4b30:	f002 fe3f 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4b34:	4605      	mov	r5, r0
   d4b36:	b158      	cbz	r0, d4b50 <_Z17setPressureSensor6String+0x28>
  {
    sysStatus.pressureSensorConfig = 0;
   d4b38:	4b13      	ldr	r3, [pc, #76]	; (d4b88 <_Z17setPressureSensor6String+0x60>)
   d4b3a:	2200      	movs	r2, #0
   d4b3c:	73da      	strb	r2, [r3, #15]
    systemStatusWriteNeeded = true;
   d4b3e:	4b13      	ldr	r3, [pc, #76]	; (d4b8c <_Z17setPressureSensor6String+0x64>)
   d4b40:	2401      	movs	r4, #1
   d4b42:	701c      	strb	r4, [r3, #0]
   d4b44:	4b12      	ldr	r3, [pc, #72]	; (d4b90 <_Z17setPressureSensor6String+0x68>)
   d4b46:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d4b48:	f88d 2000 	strb.w	r2, [sp]
   d4b4c:	4a11      	ldr	r2, [pc, #68]	; (d4b94 <_Z17setPressureSensor6String+0x6c>)
   d4b4e:	e00e      	b.n	d4b6e <_Z17setPressureSensor6String+0x46>
   d4b50:	4911      	ldr	r1, [pc, #68]	; (d4b98 <_Z17setPressureSensor6String+0x70>)
   d4b52:	4620      	mov	r0, r4
   d4b54:	f002 fe2d 	bl	d77b2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4b58:	b188      	cbz	r0, d4b7e <_Z17setPressureSensor6String+0x56>
  {
    sysStatus.pressureSensorConfig = 1;
   d4b5a:	4b0b      	ldr	r3, [pc, #44]	; (d4b88 <_Z17setPressureSensor6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b5c:	4a0f      	ldr	r2, [pc, #60]	; (d4b9c <_Z17setPressureSensor6String+0x74>)
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.pressureSensorConfig = 1;
   d4b5e:	2401      	movs	r4, #1
   d4b60:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d4b62:	4b0a      	ldr	r3, [pc, #40]	; (d4b8c <_Z17setPressureSensor6String+0x64>)
   d4b64:	701c      	strb	r4, [r3, #0]
   d4b66:	4b0a      	ldr	r3, [pc, #40]	; (d4b90 <_Z17setPressureSensor6String+0x68>)
   d4b68:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b6a:	f88d 5000 	strb.w	r5, [sp]
   d4b6e:	490c      	ldr	r1, [pc, #48]	; (d4ba0 <_Z17setPressureSensor6String+0x78>)
   d4b70:	a802      	add	r0, sp, #8
   d4b72:	f7ff fafd 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4b76:	a803      	add	r0, sp, #12
   d4b78:	f7ff feaa 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b7c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4b7e:	b005      	add	sp, #20
   d4b80:	bd30      	pop	{r4, r5, pc}
   d4b82:	bf00      	nop
   d4b84:	000db629 	.word	0x000db629
   d4b88:	2003e308 	.word	0x2003e308
   d4b8c:	2003e1f2 	.word	0x2003e1f2
   d4b90:	2003e1d4 	.word	0x2003e1d4
   d4b94:	000db663 	.word	0x000db663
   d4b98:	000dba8d 	.word	0x000dba8d
   d4b9c:	000db676 	.word	0x000db676
   d4ba0:	000db63b 	.word	0x000db63b

000d4ba4 <_Z14setLightSensor6String>:

int setLightSensor (String command) // Function to force sending data in current hour
{
   d4ba4:	b530      	push	{r4, r5, lr}
   d4ba6:	4919      	ldr	r1, [pc, #100]	; (d4c0c <_Z14setLightSensor6String+0x68>)
   d4ba8:	b085      	sub	sp, #20
   d4baa:	4604      	mov	r4, r0
   d4bac:	f002 fe01 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4bb0:	4605      	mov	r5, r0
   d4bb2:	b158      	cbz	r0, d4bcc <_Z14setLightSensor6String+0x28>
  {
    sysStatus.lightSensorConfig = 0;
   d4bb4:	4b16      	ldr	r3, [pc, #88]	; (d4c10 <_Z14setLightSensor6String+0x6c>)
   d4bb6:	2200      	movs	r2, #0
   d4bb8:	741a      	strb	r2, [r3, #16]
    systemStatusWriteNeeded = true;
   d4bba:	4b16      	ldr	r3, [pc, #88]	; (d4c14 <_Z14setLightSensor6String+0x70>)
   d4bbc:	2401      	movs	r4, #1
   d4bbe:	701c      	strb	r4, [r3, #0]
   d4bc0:	4b15      	ldr	r3, [pc, #84]	; (d4c18 <_Z14setLightSensor6String+0x74>)
   d4bc2:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d4bc4:	f88d 2000 	strb.w	r2, [sp]
   d4bc8:	4a14      	ldr	r2, [pc, #80]	; (d4c1c <_Z14setLightSensor6String+0x78>)
   d4bca:	e015      	b.n	d4bf8 <_Z14setLightSensor6String+0x54>
   d4bcc:	4914      	ldr	r1, [pc, #80]	; (d4c20 <_Z14setLightSensor6String+0x7c>)
   d4bce:	4620      	mov	r0, r4
   d4bd0:	f002 fdef 	bl	d77b2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4bd4:	b1c0      	cbz	r0, d4c08 <_Z14setLightSensor6String+0x64>
  {
    sysStatus.lightSensorConfig = 1;
   d4bd6:	4b0e      	ldr	r3, [pc, #56]	; (d4c10 <_Z14setLightSensor6String+0x6c>)
    systemStatusWriteNeeded = true;
    lightSensor.begin();
   d4bd8:	4812      	ldr	r0, [pc, #72]	; (d4c24 <_Z14setLightSensor6String+0x80>)
    Particle.publish("Config","No Light Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.lightSensorConfig = 1;
   d4bda:	2401      	movs	r4, #1
   d4bdc:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d4bde:	4b0d      	ldr	r3, [pc, #52]	; (d4c14 <_Z14setLightSensor6String+0x70>)
   d4be0:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4be2:	f001 f856 	bl	d5c92 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4be6:	2120      	movs	r1, #32
   d4be8:	480e      	ldr	r0, [pc, #56]	; (d4c24 <_Z14setLightSensor6String+0x80>)
   d4bea:	f001 f88e 	bl	d5d0a <_ZN6BH175015set_sensor_modeENS_8SensModeE>
   d4bee:	4b0a      	ldr	r3, [pc, #40]	; (d4c18 <_Z14setLightSensor6String+0x74>)
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4bf0:	4a0d      	ldr	r2, [pc, #52]	; (d4c28 <_Z14setLightSensor6String+0x84>)
   d4bf2:	781b      	ldrb	r3, [r3, #0]
   d4bf4:	f88d 5000 	strb.w	r5, [sp]
   d4bf8:	490c      	ldr	r1, [pc, #48]	; (d4c2c <_Z14setLightSensor6String+0x88>)
   d4bfa:	a802      	add	r0, sp, #8
   d4bfc:	f7ff fab8 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4c00:	a803      	add	r0, sp, #12
   d4c02:	f7ff fe65 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c06:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c08:	b005      	add	sp, #20
   d4c0a:	bd30      	pop	{r4, r5, pc}
   d4c0c:	000db629 	.word	0x000db629
   d4c10:	2003e308 	.word	0x2003e308
   d4c14:	2003e1f2 	.word	0x2003e1f2
   d4c18:	2003e1d4 	.word	0x2003e1d4
   d4c1c:	000db68e 	.word	0x000db68e
   d4c20:	000dba8d 	.word	0x000dba8d
   d4c24:	2003e1d8 	.word	0x2003e1d8
   d4c28:	000db69e 	.word	0x000db69e
   d4c2c:	000db63b 	.word	0x000db63b

000d4c30 <_Z18setTempHumidSensor6String>:

int setTempHumidSensor (String command) // Function to force sending data in current hour
{
   d4c30:	b530      	push	{r4, r5, lr}
   d4c32:	4918      	ldr	r1, [pc, #96]	; (d4c94 <_Z18setTempHumidSensor6String+0x64>)
   d4c34:	b085      	sub	sp, #20
   d4c36:	4604      	mov	r4, r0
   d4c38:	f002 fdbb 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4c3c:	4605      	mov	r5, r0
   d4c3e:	b158      	cbz	r0, d4c58 <_Z18setTempHumidSensor6String+0x28>
  {
    sysStatus.TempHumidConfig = 0;
   d4c40:	4b15      	ldr	r3, [pc, #84]	; (d4c98 <_Z18setTempHumidSensor6String+0x68>)
   d4c42:	2200      	movs	r2, #0
   d4c44:	731a      	strb	r2, [r3, #12]
    systemStatusWriteNeeded = true;
   d4c46:	4b15      	ldr	r3, [pc, #84]	; (d4c9c <_Z18setTempHumidSensor6String+0x6c>)
   d4c48:	2401      	movs	r4, #1
   d4c4a:	701c      	strb	r4, [r3, #0]
   d4c4c:	4b14      	ldr	r3, [pc, #80]	; (d4ca0 <_Z18setTempHumidSensor6String+0x70>)
   d4c4e:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4c50:	f88d 2000 	strb.w	r2, [sp]
   d4c54:	4a13      	ldr	r2, [pc, #76]	; (d4ca4 <_Z18setTempHumidSensor6String+0x74>)
   d4c56:	e012      	b.n	d4c7e <_Z18setTempHumidSensor6String+0x4e>
   d4c58:	4913      	ldr	r1, [pc, #76]	; (d4ca8 <_Z18setTempHumidSensor6String+0x78>)
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f002 fda9 	bl	d77b2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4c60:	b1a8      	cbz	r0, d4c8e <_Z18setTempHumidSensor6String+0x5e>
  {
    sysStatus.TempHumidConfig = 1;
   d4c62:	4b0d      	ldr	r3, [pc, #52]	; (d4c98 <_Z18setTempHumidSensor6String+0x68>)
    systemStatusWriteNeeded = true;
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c64:	4811      	ldr	r0, [pc, #68]	; (d4cac <_Z18setTempHumidSensor6String+0x7c>)
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
   d4c66:	2401      	movs	r4, #1
   d4c68:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d4c6a:	4b0c      	ldr	r3, [pc, #48]	; (d4c9c <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c6c:	2144      	movs	r1, #68	; 0x44
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
    systemStatusWriteNeeded = true;
   d4c6e:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c70:	f001 f8a0 	bl	d5db4 <_ZN14Adafruit_SHT315beginEh>
   d4c74:	4b0a      	ldr	r3, [pc, #40]	; (d4ca0 <_Z18setTempHumidSensor6String+0x70>)
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4c76:	4a0e      	ldr	r2, [pc, #56]	; (d4cb0 <_Z18setTempHumidSensor6String+0x80>)
   d4c78:	781b      	ldrb	r3, [r3, #0]
   d4c7a:	f88d 5000 	strb.w	r5, [sp]
   d4c7e:	490d      	ldr	r1, [pc, #52]	; (d4cb4 <_Z18setTempHumidSensor6String+0x84>)
   d4c80:	a802      	add	r0, sp, #8
   d4c82:	f7ff fa75 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4c86:	a803      	add	r0, sp, #12
   d4c88:	f7ff fe22 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c8c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c8e:	b005      	add	sp, #20
   d4c90:	bd30      	pop	{r4, r5, pc}
   d4c92:	bf00      	nop
   d4c94:	000db629 	.word	0x000db629
   d4c98:	2003e308 	.word	0x2003e308
   d4c9c:	2003e1f2 	.word	0x2003e1f2
   d4ca0:	2003e1d4 	.word	0x2003e1d4
   d4ca4:	000db6b3 	.word	0x000db6b3
   d4ca8:	000dba8d 	.word	0x000dba8d
   d4cac:	2003e25c 	.word	0x2003e25c
   d4cb0:	000db6b6 	.word	0x000db6b6
   d4cb4:	000db63b 	.word	0x000db63b

000d4cb8 <_Z16setWaterDuration6String>:
  }
  else return 0;
}

int setWaterDuration(String command)
{
   d4cb8:	b570      	push	{r4, r5, r6, lr}
   d4cba:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4cbc:	220a      	movs	r2, #10
   d4cbe:	a903      	add	r1, sp, #12
   d4cc0:	6800      	ldr	r0, [r0, #0]
   d4cc2:	f005 f8c7 	bl	d9e54 <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4cc6:	1e42      	subs	r2, r0, #1
   d4cc8:	2a36      	cmp	r2, #54	; 0x36

int setWaterDuration(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4cca:	4603      	mov	r3, r0
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4ccc:	d82e      	bhi.n	d4d2c <_Z16setWaterDuration6String+0x74>
  sysStatus.wateringDurationMin = tempDuration;
   d4cce:	4c22      	ldr	r4, [pc, #136]	; (d4d58 <_Z16setWaterDuration6String+0xa0>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cd0:	4a22      	ldr	r2, [pc, #136]	; (d4d5c <_Z16setWaterDuration6String+0xa4>)
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
   d4cd2:	4d23      	ldr	r5, [pc, #140]	; (d4d60 <_Z16setWaterDuration6String+0xa8>)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringDurationMin = tempDuration;
   d4cd4:	6220      	str	r0, [r4, #32]
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cd6:	2101      	movs	r1, #1
   d4cd8:	7011      	strb	r1, [r2, #0]
  snprintf(data, sizeof(data), "Watering Duration set to %i",sysStatus.wateringDurationMin);
   d4cda:	a806      	add	r0, sp, #24
   d4cdc:	4a21      	ldr	r2, [pc, #132]	; (d4d64 <_Z16setWaterDuration6String+0xac>)
   d4cde:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4ce2:	f001 fc85 	bl	d65f0 <snprintf>
   d4ce6:	68a8      	ldr	r0, [r5, #8]
   d4ce8:	4626      	mov	r6, r4
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4cea:	b318      	cbz	r0, d4d34 <_Z16setWaterDuration6String+0x7c>
   d4cec:	2100      	movs	r1, #0
   d4cee:	f001 f97d 	bl	d5fec <os_timer_is_active>
   d4cf2:	b1f8      	cbz	r0, d4d34 <_Z16setWaterDuration6String+0x7c>

  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMin);
   d4cf4:	6a23      	ldr	r3, [r4, #32]
   d4cf6:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4cfa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4cfe:	4359      	muls	r1, r3
   d4d00:	4628      	mov	r0, r5
   d4d02:	f7ff fb0f 	bl	d4324 <_ZN5Timer12changePeriodEjj>
  else {                                                              // But if it was not running already, we need to reset after chaning
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMin);
    wateringTimer.reset();
  }

  waitUntil(meterParticlePublish);
   d4d06:	f7ff fc91 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d4d0a:	f001 fbc9 	bl	d64a0 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4d0e:	b178      	cbz	r0, d4d30 <_Z16setWaterDuration6String+0x78>
   d4d10:	4b15      	ldr	r3, [pc, #84]	; (d4d68 <_Z16setWaterDuration6String+0xb0>)
   d4d12:	4916      	ldr	r1, [pc, #88]	; (d4d6c <_Z16setWaterDuration6String+0xb4>)
   d4d14:	781b      	ldrb	r3, [r3, #0]
   d4d16:	2200      	movs	r2, #0
   d4d18:	f88d 2000 	strb.w	r2, [sp]
   d4d1c:	a804      	add	r0, sp, #16
   d4d1e:	aa06      	add	r2, sp, #24
   d4d20:	f7ff fa26 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4d24:	a805      	add	r0, sp, #20
   d4d26:	f7ff fdd3 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d2a:	e001      	b.n	d4d30 <_Z16setWaterDuration6String+0x78>
int setWaterDuration(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d2c:	2000      	movs	r0, #0
   d4d2e:	e010      	b.n	d4d52 <_Z16setWaterDuration6String+0x9a>
    wateringTimer.reset();
  }

  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4d30:	2001      	movs	r0, #1
   d4d32:	e00e      	b.n	d4d52 <_Z16setWaterDuration6String+0x9a>

  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMin);
  }
  else {                                                              // But if it was not running already, we need to reset after chaning
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMin);
   d4d34:	6a33      	ldr	r3, [r6, #32]
   d4d36:	480a      	ldr	r0, [pc, #40]	; (d4d60 <_Z16setWaterDuration6String+0xa8>)
   d4d38:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4d3c:	4359      	muls	r1, r3
   d4d3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4d42:	f7ff faef 	bl	d4324 <_ZN5Timer12changePeriodEjj>
    wateringTimer.reset();
   d4d46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4d4a:	4805      	ldr	r0, [pc, #20]	; (d4d60 <_Z16setWaterDuration6String+0xa8>)
   d4d4c:	f7ff fada 	bl	d4304 <_ZN5Timer5resetEj>
   d4d50:	e7d9      	b.n	d4d06 <_Z16setWaterDuration6String+0x4e>
  }

  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
}
   d4d52:	b046      	add	sp, #280	; 0x118
   d4d54:	bd70      	pop	{r4, r5, r6, pc}
   d4d56:	bf00      	nop
   d4d58:	2003e308 	.word	0x2003e308
   d4d5c:	2003e1f2 	.word	0x2003e1f2
   d4d60:	2003e210 	.word	0x2003e210
   d4d64:	000db6d5 	.word	0x000db6d5
   d4d68:	2003e1d4 	.word	0x2003e1d4
   d4d6c:	000db6f1 	.word	0x000db6f1

000d4d70 <_Z17setWaterThreshold6String>:

int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4d70:	b570      	push	{r4, r5, r6, lr}
   d4d72:	b086      	sub	sp, #24
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4d74:	a903      	add	r1, sp, #12
   d4d76:	6800      	ldr	r0, [r0, #0]
   d4d78:	f004 ffc6 	bl	d9d08 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4d7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d84:	d42f      	bmi.n	d4de6 <_Z17setWaterThreshold6String+0x76>
   d4d86:	eddf 7a1a 	vldr	s15, [pc, #104]	; d4df0 <_Z17setWaterThreshold6String+0x80>
   d4d8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d92:	bfcc      	ite	gt
   d4d94:	2501      	movgt	r5, #1
   d4d96:	2500      	movle	r5, #0
   d4d98:	bb2d      	cbnz	r5, d4de6 <_Z17setWaterThreshold6String+0x76>
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
  systemStatusWriteNeeded = true;
   d4d9a:	4b16      	ldr	r3, [pc, #88]	; (d4df4 <_Z17setWaterThreshold6String+0x84>)
int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4d9c:	4e16      	ldr	r6, [pc, #88]	; (d4df8 <_Z17setWaterThreshold6String+0x88>)
  systemStatusWriteNeeded = true;
   d4d9e:	2401      	movs	r4, #1
   d4da0:	701c      	strb	r4, [r3, #0]
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4da2:	ee10 0a10 	vmov	r0, s0
int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4da6:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
  systemStatusWriteNeeded = true;
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4daa:	f003 fc4b 	bl	d8644 <__aeabi_f2d>
   d4dae:	4a13      	ldr	r2, [pc, #76]	; (d4dfc <_Z17setWaterThreshold6String+0x8c>)
   d4db0:	e9cd 0100 	strd	r0, r1, [sp]
   d4db4:	2108      	movs	r1, #8
   d4db6:	4812      	ldr	r0, [pc, #72]	; (d4e00 <_Z17setWaterThreshold6String+0x90>)
   d4db8:	f001 fc1a 	bl	d65f0 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4dbc:	7933      	ldrb	r3, [r6, #4]
   d4dbe:	b1a3      	cbz	r3, d4dea <_Z17setWaterThreshold6String+0x7a>
   d4dc0:	f001 fb6e 	bl	d64a0 <spark_cloud_flag_connected>
   d4dc4:	b188      	cbz	r0, d4dea <_Z17setWaterThreshold6String+0x7a>
    waitUntil(meterParticlePublish);
   d4dc6:	f7ff fc31 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d4dca:	4b0e      	ldr	r3, [pc, #56]	; (d4e04 <_Z17setWaterThreshold6String+0x94>)
    Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d4dcc:	4a0c      	ldr	r2, [pc, #48]	; (d4e00 <_Z17setWaterThreshold6String+0x90>)
   d4dce:	781b      	ldrb	r3, [r3, #0]
   d4dd0:	490d      	ldr	r1, [pc, #52]	; (d4e08 <_Z17setWaterThreshold6String+0x98>)
   d4dd2:	f88d 5000 	strb.w	r5, [sp]
   d4dd6:	a804      	add	r0, sp, #16
   d4dd8:	f7ff f9ca 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4ddc:	a805      	add	r0, sp, #20
   d4dde:	f7ff fd77 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4de2:	4620      	mov	r0, r4
   d4de4:	e002      	b.n	d4dec <_Z17setWaterThreshold6String+0x7c>

int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4de6:	2000      	movs	r0, #0
   d4de8:	e000      	b.n	d4dec <_Z17setWaterThreshold6String+0x7c>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4dea:	2001      	movs	r0, #1
}
   d4dec:	b006      	add	sp, #24
   d4dee:	bd70      	pop	{r4, r5, r6, pc}
   d4df0:	42c80000 	.word	0x42c80000
   d4df4:	2003e1f2 	.word	0x2003e1f2
   d4df8:	2003e308 	.word	0x2003e308
   d4dfc:	000db6f6 	.word	0x000db6f6
   d4e00:	2003e268 	.word	0x2003e268
   d4e04:	2003e1d4 	.word	0x2003e1d4
   d4e08:	000db8dd 	.word	0x000db8dd

000d4e0c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4e0c:	b530      	push	{r4, r5, lr}
   d4e0e:	4916      	ldr	r1, [pc, #88]	; (d4e68 <_Z14setVerboseMode6String+0x5c>)
   d4e10:	b085      	sub	sp, #20
   d4e12:	4604      	mov	r4, r0
   d4e14:	f002 fccd 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4e18:	4605      	mov	r5, r0
   d4e1a:	b158      	cbz	r0, d4e34 <_Z14setVerboseMode6String+0x28>
  {
    sysStatus.verboseMode = true;
   d4e1c:	4b13      	ldr	r3, [pc, #76]	; (d4e6c <_Z14setVerboseMode6String+0x60>)
   d4e1e:	2401      	movs	r4, #1
   d4e20:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4e22:	4b13      	ldr	r3, [pc, #76]	; (d4e70 <_Z14setVerboseMode6String+0x64>)
   d4e24:	701c      	strb	r4, [r3, #0]
   d4e26:	4b13      	ldr	r3, [pc, #76]	; (d4e74 <_Z14setVerboseMode6String+0x68>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4e28:	2200      	movs	r2, #0
   d4e2a:	781b      	ldrb	r3, [r3, #0]
   d4e2c:	f88d 2000 	strb.w	r2, [sp]
   d4e30:	4a11      	ldr	r2, [pc, #68]	; (d4e78 <_Z14setVerboseMode6String+0x6c>)
   d4e32:	e00e      	b.n	d4e52 <_Z14setVerboseMode6String+0x46>
   d4e34:	4911      	ldr	r1, [pc, #68]	; (d4e7c <_Z14setVerboseMode6String+0x70>)
   d4e36:	4620      	mov	r0, r4
   d4e38:	f002 fcbb 	bl	d77b2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4e3c:	b188      	cbz	r0, d4e62 <_Z14setVerboseMode6String+0x56>
  {
    sysStatus.verboseMode = false;
   d4e3e:	4b0b      	ldr	r3, [pc, #44]	; (d4e6c <_Z14setVerboseMode6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4e40:	4a0f      	ldr	r2, [pc, #60]	; (d4e80 <_Z14setVerboseMode6String+0x74>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
   d4e42:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4e44:	4b0a      	ldr	r3, [pc, #40]	; (d4e70 <_Z14setVerboseMode6String+0x64>)
   d4e46:	2401      	movs	r4, #1
   d4e48:	701c      	strb	r4, [r3, #0]
   d4e4a:	4b0a      	ldr	r3, [pc, #40]	; (d4e74 <_Z14setVerboseMode6String+0x68>)
   d4e4c:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4e4e:	f88d 5000 	strb.w	r5, [sp]
   d4e52:	490c      	ldr	r1, [pc, #48]	; (d4e84 <_Z14setVerboseMode6String+0x78>)
   d4e54:	a802      	add	r0, sp, #8
   d4e56:	f7ff f98b 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4e5a:	a803      	add	r0, sp, #12
   d4e5c:	f7ff fd38 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e60:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4e62:	b005      	add	sp, #20
   d4e64:	bd30      	pop	{r4, r5, pc}
   d4e66:	bf00      	nop
   d4e68:	000dba8d 	.word	0x000dba8d
   d4e6c:	2003e308 	.word	0x2003e308
   d4e70:	2003e1f2 	.word	0x2003e1f2
   d4e74:	2003e1d4 	.word	0x2003e1d4
   d4e78:	000db6ff 	.word	0x000db6ff
   d4e7c:	000db629 	.word	0x000db629
   d4e80:	000db710 	.word	0x000db710
   d4e84:	000db720 	.word	0x000db720

000d4e88 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4e88:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e8a:	4929      	ldr	r1, [pc, #164]	; (d4f30 <_Z15setLowPowerMode6String+0xa8>)
   d4e8c:	b085      	sub	sp, #20
   d4e8e:	4604      	mov	r4, r0
   d4e90:	f002 fc8f 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4e94:	b928      	cbnz	r0, d4ea2 <_Z15setLowPowerMode6String+0x1a>
   d4e96:	4927      	ldr	r1, [pc, #156]	; (d4f34 <_Z15setLowPowerMode6String+0xac>)
   d4e98:	4620      	mov	r0, r4
   d4e9a:	f002 fc8a 	bl	d77b2 <_ZNK6String6equalsEPKc>
   d4e9e:	2800      	cmp	r0, #0
   d4ea0:	d043      	beq.n	d4f2a <_Z15setLowPowerMode6String+0xa2>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4ea2:	4923      	ldr	r1, [pc, #140]	; (d4f30 <_Z15setLowPowerMode6String+0xa8>)
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	f002 fc84 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4eaa:	b1a8      	cbz	r0, d4ed8 <_Z15setLowPowerMode6String+0x50>
   d4eac:	f001 faf8 	bl	d64a0 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4eb0:	b170      	cbz	r0, d4ed0 <_Z15setLowPowerMode6String+0x48>
      waitUntil(meterParticlePublish);
   d4eb2:	f7ff fbbb 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d4eb6:	4b20      	ldr	r3, [pc, #128]	; (d4f38 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4eb8:	4920      	ldr	r1, [pc, #128]	; (d4f3c <_Z15setLowPowerMode6String+0xb4>)
   d4eba:	781b      	ldrb	r3, [r3, #0]
   d4ebc:	2200      	movs	r2, #0
   d4ebe:	f88d 2000 	strb.w	r2, [sp]
   d4ec2:	a802      	add	r0, sp, #8
   d4ec4:	4a1e      	ldr	r2, [pc, #120]	; (d4f40 <_Z15setLowPowerMode6String+0xb8>)
   d4ec6:	f7ff f953 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4eca:	a803      	add	r0, sp, #12
   d4ecc:	f7ff fd00 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
   d4ed0:	4b1c      	ldr	r3, [pc, #112]	; (d4f44 <_Z15setLowPowerMode6String+0xbc>)
   d4ed2:	2201      	movs	r2, #1
   d4ed4:	719a      	strb	r2, [r3, #6]
   d4ed6:	e025      	b.n	d4f24 <_Z15setLowPowerMode6String+0x9c>
   d4ed8:	4916      	ldr	r1, [pc, #88]	; (d4f34 <_Z15setLowPowerMode6String+0xac>)
   d4eda:	4620      	mov	r0, r4
   d4edc:	f002 fc69 	bl	d77b2 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4ee0:	b300      	cbz	r0, d4f24 <_Z15setLowPowerMode6String+0x9c>
   d4ee2:	f001 fadd 	bl	d64a0 <spark_cloud_flag_connected>
   d4ee6:	4c17      	ldr	r4, [pc, #92]	; (d4f44 <_Z15setLowPowerMode6String+0xbc>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4ee8:	b918      	cbnz	r0, d4ef2 <_Z15setLowPowerMode6String+0x6a>
      connectToParticle();
   d4eea:	f7ff fabb 	bl	d4464 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4eee:	2301      	movs	r3, #1
   d4ef0:	70e3      	strb	r3, [r4, #3]
    }
    waitUntil(meterParticlePublish);
   d4ef2:	f7ff fb9b 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d4ef6:	4b10      	ldr	r3, [pc, #64]	; (d4f38 <_Z15setLowPowerMode6String+0xb0>)
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4ef8:	4a13      	ldr	r2, [pc, #76]	; (d4f48 <_Z15setLowPowerMode6String+0xc0>)
   d4efa:	781b      	ldrb	r3, [r3, #0]
   d4efc:	490f      	ldr	r1, [pc, #60]	; (d4f3c <_Z15setLowPowerMode6String+0xb4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4efe:	2500      	movs	r5, #0
   d4f00:	a802      	add	r0, sp, #8
   d4f02:	f88d 5000 	strb.w	r5, [sp]
   d4f06:	f7ff f933 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4f0a:	a803      	add	r0, sp, #12
   d4f0c:	f7ff fce0 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f14:	f001 fb90 	bl	d6638 <delay>
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
   d4f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4f1c:	480b      	ldr	r0, [pc, #44]	; (d4f4c <_Z15setLowPowerMode6String+0xc4>)
   d4f1e:	f7ff fa4f 	bl	d43c0 <_ZN5Timer5startEj>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4f22:	71a5      	strb	r5, [r4, #6]
  }
  systemStatusWriteNeeded = true;
   d4f24:	4b0a      	ldr	r3, [pc, #40]	; (d4f50 <_Z15setLowPowerMode6String+0xc8>)
   d4f26:	2001      	movs	r0, #1
   d4f28:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4f2a:	b005      	add	sp, #20
   d4f2c:	bd30      	pop	{r4, r5, pc}
   d4f2e:	bf00      	nop
   d4f30:	000dba8d 	.word	0x000dba8d
   d4f34:	000db629 	.word	0x000db629
   d4f38:	2003e1d4 	.word	0x2003e1d4
   d4f3c:	000db720 	.word	0x000db720
   d4f40:	000db725 	.word	0x000db725
   d4f44:	2003e308 	.word	0x2003e308
   d4f48:	000db734 	.word	0x000db734
   d4f4c:	2003e1f4 	.word	0x2003e1f4
   d4f50:	2003e1f2 	.word	0x2003e1f2

000d4f54 <_Z12controlValve6String>:

int controlValve(String command)                                   // Function to force sending data in current hour
{
   d4f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4f56:	4926      	ldr	r1, [pc, #152]	; (d4ff0 <_Z12controlValve6String+0x9c>)
   d4f58:	b085      	sub	sp, #20
   d4f5a:	4604      	mov	r4, r0
   d4f5c:	f002 fc29 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
   d4f60:	b928      	cbnz	r0, d4f6e <_Z12controlValve6String+0x1a>
   d4f62:	4924      	ldr	r1, [pc, #144]	; (d4ff4 <_Z12controlValve6String+0xa0>)
   d4f64:	4620      	mov	r0, r4
   d4f66:	f002 fc24 	bl	d77b2 <_ZNK6String6equalsEPKc>
   d4f6a:	2800      	cmp	r0, #0
   d4f6c:	d03d      	beq.n	d4fea <_Z12controlValve6String+0x96>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4f6e:	4620      	mov	r0, r4
   d4f70:	491f      	ldr	r1, [pc, #124]	; (d4ff0 <_Z12controlValve6String+0x9c>)
   d4f72:	4d21      	ldr	r5, [pc, #132]	; (d4ff8 <_Z12controlValve6String+0xa4>)
   d4f74:	4e21      	ldr	r6, [pc, #132]	; (d4ffc <_Z12controlValve6String+0xa8>)
   d4f76:	4f22      	ldr	r7, [pc, #136]	; (d5000 <_Z12controlValve6String+0xac>)
   d4f78:	f002 fc1b 	bl	d77b2 <_ZNK6String6equalsEPKc>
  else if (command == "1") {                                     // Open the water valve
   d4f7c:	4604      	mov	r4, r0
   d4f7e:	b1b0      	cbz	r0, d4fae <_Z12controlValve6String+0x5a>
    current.solenoidState = true;
   d4f80:	2401      	movs	r4, #1
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4f82:	4621      	mov	r1, r4
   d4f84:	2002      	movs	r0, #2

int controlValve(String command)                                   // Function to force sending data in current hour
{
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
  else if (command == "1") {                                     // Open the water valve
    current.solenoidState = true;
   d4f86:	60ec      	str	r4, [r5, #12]
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4f88:	f002 ffb5 	bl	d7ef6 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4f8c:	2100      	movs	r1, #0
   d4f8e:	2003      	movs	r0, #3
   d4f90:	f002 ffb1 	bl	d7ef6 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4f94:	6970      	ldr	r0, [r6, #20]
   d4f96:	f001 fb4f 	bl	d6638 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4f9a:	4621      	mov	r1, r4
   d4f9c:	2003      	movs	r0, #3
   d4f9e:	f002 ffaa 	bl	d7ef6 <digitalWrite>
   d4fa2:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4fa4:	783b      	ldrb	r3, [r7, #0]
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d4fa6:	f88d 2000 	strb.w	r2, [sp]
   d4faa:	4a16      	ldr	r2, [pc, #88]	; (d5004 <_Z12controlValve6String+0xb0>)
   d4fac:	e013      	b.n	d4fd6 <_Z12controlValve6String+0x82>
  }
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
   d4fae:	4621      	mov	r1, r4
   d4fb0:	2002      	movs	r0, #2
   d4fb2:	f002 ffa0 	bl	d7ef6 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4fb6:	4621      	mov	r1, r4
   d4fb8:	2003      	movs	r0, #3
   d4fba:	f002 ff9c 	bl	d7ef6 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4fbe:	6970      	ldr	r0, [r6, #20]
   d4fc0:	f001 fb3a 	bl	d6638 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4fc4:	2101      	movs	r1, #1
   d4fc6:	2003      	movs	r0, #3
   d4fc8:	f002 ff95 	bl	d7ef6 <digitalWrite>
    current.solenoidState = false;
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4fcc:	4a0e      	ldr	r2, [pc, #56]	; (d5008 <_Z12controlValve6String+0xb4>)
   d4fce:	783b      	ldrb	r3, [r7, #0]
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
    delay(sysStatus.solenoidHoldTime);
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
    current.solenoidState = false;
   d4fd0:	60ec      	str	r4, [r5, #12]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4fd2:	f88d 4000 	strb.w	r4, [sp]
   d4fd6:	490d      	ldr	r1, [pc, #52]	; (d500c <_Z12controlValve6String+0xb8>)
   d4fd8:	a802      	add	r0, sp, #8
   d4fda:	f7ff f8c9 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d4fde:	a803      	add	r0, sp, #12
   d4fe0:	f7ff fc76 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  currentStatusWriteNeeded = true;
   d4fe4:	4b0a      	ldr	r3, [pc, #40]	; (d5010 <_Z12controlValve6String+0xbc>)
   d4fe6:	2001      	movs	r0, #1
   d4fe8:	7018      	strb	r0, [r3, #0]
  return true;
}
   d4fea:	b005      	add	sp, #20
   d4fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fee:	bf00      	nop
   d4ff0:	000dba8d 	.word	0x000dba8d
   d4ff4:	000db629 	.word	0x000db629
   d4ff8:	2003e2bc 	.word	0x2003e2bc
   d4ffc:	2003e308 	.word	0x2003e308
   d5000:	2003e1d4 	.word	0x2003e1d4
   d5004:	000db746 	.word	0x000db746
   d5008:	000db75e 	.word	0x000db75e
   d500c:	000db755 	.word	0x000db755
   d5010:	2003e22c 	.word	0x2003e22c

000d5014 <_Z18setSolenoidPresent6String>:
  }
  else return 0;
}

int setSolenoidPresent(String command) // Function to force sending data in current hour
{
   d5014:	b530      	push	{r4, r5, lr}
   d5016:	b087      	sub	sp, #28
  controlValve("0");                                            // Make sure it is turned off
   d5018:	491a      	ldr	r1, [pc, #104]	; (d5084 <_Z18setSolenoidPresent6String+0x70>)
  }
  else return 0;
}

int setSolenoidPresent(String command) // Function to force sending data in current hour
{
   d501a:	4604      	mov	r4, r0
  controlValve("0");                                            // Make sure it is turned off
   d501c:	a802      	add	r0, sp, #8
   d501e:	f002 fb9b 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
   d5022:	a802      	add	r0, sp, #8
   d5024:	f7ff ff96 	bl	d4f54 <_Z12controlValve6String>
   d5028:	a802      	add	r0, sp, #8
   d502a:	f002 fb4e 	bl	d76ca <_ZN6StringD1Ev>
   d502e:	4916      	ldr	r1, [pc, #88]	; (d5088 <_Z18setSolenoidPresent6String+0x74>)
   d5030:	4620      	mov	r0, r4
   d5032:	f002 fbbe 	bl	d77b2 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d5036:	4605      	mov	r5, r0
   d5038:	b158      	cbz	r0, d5052 <_Z18setSolenoidPresent6String+0x3e>
    sysStatus.solenoidConfig = 1;
   d503a:	4b14      	ldr	r3, [pc, #80]	; (d508c <_Z18setSolenoidPresent6String+0x78>)
   d503c:	2401      	movs	r4, #1
   d503e:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d5040:	4b13      	ldr	r3, [pc, #76]	; (d5090 <_Z18setSolenoidPresent6String+0x7c>)
   d5042:	701c      	strb	r4, [r3, #0]
   d5044:	4b13      	ldr	r3, [pc, #76]	; (d5094 <_Z18setSolenoidPresent6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5046:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5048:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d504a:	f88d 2000 	strb.w	r2, [sp]
   d504e:	4a12      	ldr	r2, [pc, #72]	; (d5098 <_Z18setSolenoidPresent6String+0x84>)
   d5050:	e00e      	b.n	d5070 <_Z18setSolenoidPresent6String+0x5c>
   d5052:	490c      	ldr	r1, [pc, #48]	; (d5084 <_Z18setSolenoidPresent6String+0x70>)
   d5054:	4620      	mov	r0, r4
   d5056:	f002 fbac 	bl	d77b2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0") {
   d505a:	b188      	cbz	r0, d5080 <_Z18setSolenoidPresent6String+0x6c>
    sysStatus.solenoidConfig = 0;
   d505c:	4b0b      	ldr	r3, [pc, #44]	; (d508c <_Z18setSolenoidPresent6String+0x78>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d505e:	4a0f      	ldr	r2, [pc, #60]	; (d509c <_Z18setSolenoidPresent6String+0x88>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Solenoid Attached",PRIVATE);
    return 1;
  }
  else if (command == "0") {
    sysStatus.solenoidConfig = 0;
   d5060:	745d      	strb	r5, [r3, #17]
    systemStatusWriteNeeded = true;
   d5062:	4b0b      	ldr	r3, [pc, #44]	; (d5090 <_Z18setSolenoidPresent6String+0x7c>)
   d5064:	2401      	movs	r4, #1
   d5066:	701c      	strb	r4, [r3, #0]
   d5068:	4b0a      	ldr	r3, [pc, #40]	; (d5094 <_Z18setSolenoidPresent6String+0x80>)
   d506a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d506c:	f88d 5000 	strb.w	r5, [sp]
   d5070:	490b      	ldr	r1, [pc, #44]	; (d50a0 <_Z18setSolenoidPresent6String+0x8c>)
   d5072:	a802      	add	r0, sp, #8
   d5074:	f7ff f87c 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5078:	a803      	add	r0, sp, #12
   d507a:	f7ff fc29 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d507e:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d5080:	b007      	add	sp, #28
   d5082:	bd30      	pop	{r4, r5, pc}
   d5084:	000db629 	.word	0x000db629
   d5088:	000dba8d 	.word	0x000dba8d
   d508c:	2003e308 	.word	0x2003e308
   d5090:	2003e1f2 	.word	0x2003e1f2
   d5094:	2003e1d4 	.word	0x2003e1d4
   d5098:	000db771 	.word	0x000db771
   d509c:	000db76e 	.word	0x000db76e
   d50a0:	000db63b 	.word	0x000db63b

000d50a4 <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d50a4:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d50a6:	4d16      	ldr	r5, [pc, #88]	; (d5100 <_Z22publishStateTransitionv+0x5c>)
   d50a8:	4c16      	ldr	r4, [pc, #88]	; (d5104 <_Z22publishStateTransitionv+0x60>)
   d50aa:	4917      	ldr	r1, [pc, #92]	; (d5108 <_Z22publishStateTransitionv+0x64>)
   d50ac:	782a      	ldrb	r2, [r5, #0]
   d50ae:	7820      	ldrb	r0, [r4, #0]
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d50b0:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d50b2:	230e      	movs	r3, #14
   d50b4:	fb03 1202 	mla	r2, r3, r2, r1
   d50b8:	9200      	str	r2, [sp, #0]
   d50ba:	fb03 1300 	mla	r3, r3, r0, r1
   d50be:	4a13      	ldr	r2, [pc, #76]	; (d510c <_Z22publishStateTransitionv+0x68>)
   d50c0:	2128      	movs	r1, #40	; 0x28
   d50c2:	a804      	add	r0, sp, #16
   d50c4:	f001 fa94 	bl	d65f0 <snprintf>
  oldState = state;
   d50c8:	782b      	ldrb	r3, [r5, #0]
   d50ca:	7023      	strb	r3, [r4, #0]
   d50cc:	f001 f9e8 	bl	d64a0 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d50d0:	b170      	cbz	r0, d50f0 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d50d2:	f7ff faab 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d50d6:	4b0e      	ldr	r3, [pc, #56]	; (d5110 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d50d8:	490e      	ldr	r1, [pc, #56]	; (d5114 <_Z22publishStateTransitionv+0x70>)
   d50da:	781b      	ldrb	r3, [r3, #0]
   d50dc:	2200      	movs	r2, #0
   d50de:	f88d 2000 	strb.w	r2, [sp]
   d50e2:	a802      	add	r0, sp, #8
   d50e4:	aa04      	add	r2, sp, #16
   d50e6:	f7ff f843 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d50ea:	a803      	add	r0, sp, #12
   d50ec:	f7ff fbf0 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d50f0:	f002 fdf4 	bl	d7cdc <_Z16_fetch_usbserialv>
   d50f4:	a904      	add	r1, sp, #16
   d50f6:	f002 fa9c 	bl	d7632 <_ZN5Print7printlnEPKc>
}
   d50fa:	b00f      	add	sp, #60	; 0x3c
   d50fc:	bd30      	pop	{r4, r5, pc}
   d50fe:	bf00      	nop
   d5100:	2003e1f3 	.word	0x2003e1f3
   d5104:	2003e1e1 	.word	0x2003e1e1
   d5108:	2003e048 	.word	0x2003e048
   d510c:	000db783 	.word	0x000db783
   d5110:	2003e1d4 	.word	0x2003e1d4
   d5114:	000db791 	.word	0x000db791

000d5118 <loop>:

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d5118:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d511a:	4c9c      	ldr	r4, [pc, #624]	; (d538c <loop+0x274>)
   d511c:	7823      	ldrb	r3, [r4, #0]
   d511e:	3b01      	subs	r3, #1

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d5120:	b08a      	sub	sp, #40	; 0x28
  switch(state) {
   d5122:	2b07      	cmp	r3, #7
   d5124:	f200 82a6 	bhi.w	d5674 <loop+0x55c>
   d5128:	e8df f013 	tbh	[pc, r3, lsl #1]
   d512c:	0008022f 	.word	0x0008022f
   d5130:	007f004e 	.word	0x007f004e
   d5134:	00fe00d8 	.word	0x00fe00d8
   d5138:	01d70164 	.word	0x01d70164
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d513c:	4d94      	ldr	r5, [pc, #592]	; (d5390 <loop+0x278>)
   d513e:	792b      	ldrb	r3, [r5, #4]
   d5140:	b12b      	cbz	r3, d514e <loop+0x36>
   d5142:	4b94      	ldr	r3, [pc, #592]	; (d5394 <loop+0x27c>)
   d5144:	781b      	ldrb	r3, [r3, #0]
   d5146:	2b02      	cmp	r3, #2
   d5148:	d001      	beq.n	d514e <loop+0x36>
   d514a:	f7ff ffab 	bl	d50a4 <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d514e:	4e92      	ldr	r6, [pc, #584]	; (d5398 <loop+0x280>)
   d5150:	7833      	ldrb	r3, [r6, #0]
   d5152:	b143      	cbz	r3, d5166 <loop+0x4e>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5154:	f002 ff12 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5158:	2228      	movs	r2, #40	; 0x28
   d515a:	498d      	ldr	r1, [pc, #564]	; (d5390 <loop+0x278>)
   d515c:	2001      	movs	r0, #1
   d515e:	f000 ffa5 	bl	d60ac <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d5162:	2300      	movs	r3, #0
   d5164:	7033      	strb	r3, [r6, #0]
    }
    if (currentStatusWriteNeeded) {
   d5166:	4e8d      	ldr	r6, [pc, #564]	; (d539c <loop+0x284>)
   d5168:	7833      	ldrb	r3, [r6, #0]
   d516a:	b143      	cbz	r3, d517e <loop+0x66>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d516c:	f002 ff06 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
   d5170:	2224      	movs	r2, #36	; 0x24
   d5172:	498b      	ldr	r1, [pc, #556]	; (d53a0 <loop+0x288>)
   d5174:	2050      	movs	r0, #80	; 0x50
   d5176:	f000 ff99 	bl	d60ac <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d517a:	2300      	movs	r3, #0
   d517c:	7033      	strb	r3, [r6, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d517e:	79ab      	ldrb	r3, [r5, #6]
   d5180:	b163      	cbz	r3, d519c <loop+0x84>
   d5182:	f000 ff6b 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
   d5186:	4b87      	ldr	r3, [pc, #540]	; (d53a4 <loop+0x28c>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	1ac0      	subs	r0, r0, r3
   d518c:	4b86      	ldr	r3, [pc, #536]	; (d53a8 <loop+0x290>)
   d518e:	4298      	cmp	r0, r3
   d5190:	d904      	bls.n	d519c <loop+0x84>
   d5192:	4b83      	ldr	r3, [pc, #524]	; (d53a0 <loop+0x288>)
   d5194:	68db      	ldr	r3, [r3, #12]
   d5196:	2b00      	cmp	r3, #0
   d5198:	f000 8269 	beq.w	d566e <loop+0x556>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d519c:	f002 fca0 	bl	d7ae0 <_ZN9TimeClass4hourEv>
   d51a0:	4b82      	ldr	r3, [pc, #520]	; (d53ac <loop+0x294>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d51a2:	68aa      	ldr	r2, [r5, #8]
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d51a4:	781b      	ldrb	r3, [r3, #0]
   d51a6:	4298      	cmp	r0, r3
   d51a8:	bf1c      	itt	ne
   d51aa:	2303      	movne	r3, #3
   d51ac:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d51ae:	4b80      	ldr	r3, [pc, #512]	; (d53b0 <loop+0x298>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	429a      	cmp	r2, r3
   d51b4:	bfdc      	itt	le
   d51b6:	2308      	movle	r3, #8
   d51b8:	7023      	strble	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                 // Most important - turn off water when done!
   d51ba:	4b7e      	ldr	r3, [pc, #504]	; (d53b4 <loop+0x29c>)
   d51bc:	781b      	ldrb	r3, [r3, #0]
   d51be:	2b00      	cmp	r3, #0
   d51c0:	f000 8258 	beq.w	d5674 <loop+0x55c>
   d51c4:	2304      	movs	r3, #4
   d51c6:	e02e      	b.n	d5226 <loop+0x10e>
    break;

  case MEASURING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51c8:	4d71      	ldr	r5, [pc, #452]	; (d5390 <loop+0x278>)
   d51ca:	792b      	ldrb	r3, [r5, #4]
   d51cc:	b12b      	cbz	r3, d51da <loop+0xc2>
   d51ce:	4b71      	ldr	r3, [pc, #452]	; (d5394 <loop+0x27c>)
   d51d0:	781b      	ldrb	r3, [r3, #0]
   d51d2:	2b03      	cmp	r3, #3
   d51d4:	d001      	beq.n	d51da <loop+0xc2>
   d51d6:	f7ff ff65 	bl	d50a4 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d51da:	f7ff faa7 	bl	d472c <_Z16takeMeasurementsv>
   d51de:	4606      	mov	r6, r0
   d51e0:	b9e8      	cbnz	r0, d521e <loop+0x106>
    {
      state = ERROR_STATE;
   d51e2:	2301      	movs	r3, #1
   d51e4:	7023      	strb	r3, [r4, #0]
   d51e6:	f000 ff39 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51ea:	4b73      	ldr	r3, [pc, #460]	; (d53b8 <loop+0x2a0>)
   d51ec:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d51ee:	792b      	ldrb	r3, [r5, #4]
   d51f0:	2b00      	cmp	r3, #0
   d51f2:	f000 823f 	beq.w	d5674 <loop+0x55c>
   d51f6:	f001 f953 	bl	d64a0 <spark_cloud_flag_connected>
   d51fa:	2800      	cmp	r0, #0
   d51fc:	f000 823a 	beq.w	d5674 <loop+0x55c>
        waitUntil(meterParticlePublish);
   d5200:	f7ff fa14 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d5204:	4b6d      	ldr	r3, [pc, #436]	; (d53bc <loop+0x2a4>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d5206:	4a6e      	ldr	r2, [pc, #440]	; (d53c0 <loop+0x2a8>)
   d5208:	781b      	ldrb	r3, [r3, #0]
   d520a:	496e      	ldr	r1, [pc, #440]	; (d53c4 <loop+0x2ac>)
   d520c:	f88d 6000 	strb.w	r6, [sp]
   d5210:	a806      	add	r0, sp, #24
   d5212:	f7fe ffad 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5216:	a807      	add	r0, sp, #28
   d5218:	f7ff fb5a 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d521c:	e22a      	b.n	d5674 <loop+0x55c>
      }
    }
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d521e:	7c6b      	ldrb	r3, [r5, #17]
   d5220:	2b00      	cmp	r3, #0
   d5222:	d1cf      	bne.n	d51c4 <loop+0xac>
    else state = REPORTING_STATE;
   d5224:	2305      	movs	r3, #5
   d5226:	7023      	strb	r3, [r4, #0]
   d5228:	e224      	b.n	d5674 <loop+0x55c>
    break;

  case WATERING_STATE:                                                    // This state will examing soil values and decide on watering
    if (wateringTimerFlag) {                                              // Already watering - time to turn off the tap
   d522a:	4e62      	ldr	r6, [pc, #392]	; (d53b4 <loop+0x29c>)
   d522c:	4d63      	ldr	r5, [pc, #396]	; (d53bc <loop+0x2a4>)
   d522e:	7833      	ldrb	r3, [r6, #0]
   d5230:	b1cb      	cbz	r3, d5266 <loop+0x14e>
      waitUntil(meterParticlePublish);
   d5232:	f7ff f9fb 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d5236:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Watering","Done with watering cycle",PRIVATE);
   d5238:	4a63      	ldr	r2, [pc, #396]	; (d53c8 <loop+0x2b0>)
   d523a:	4964      	ldr	r1, [pc, #400]	; (d53cc <loop+0x2b4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d523c:	2500      	movs	r5, #0
   d523e:	a806      	add	r0, sp, #24
   d5240:	f88d 5000 	strb.w	r5, [sp]
   d5244:	f7fe ff94 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5248:	a807      	add	r0, sp, #28
   d524a:	f7ff fb41 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("0");
   d524e:	4960      	ldr	r1, [pc, #384]	; (d53d0 <loop+0x2b8>)
   d5250:	a806      	add	r0, sp, #24
   d5252:	f002 fa81 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
   d5256:	a806      	add	r0, sp, #24
   d5258:	f7ff fe7c 	bl	d4f54 <_Z12controlValve6String>
   d525c:	a806      	add	r0, sp, #24
   d525e:	f002 fa34 	bl	d76ca <_ZN6StringD1Ev>
      wateringTimerFlag = false;
   d5262:	7035      	strb	r5, [r6, #0]
   d5264:	e7de      	b.n	d5224 <loop+0x10c>
    }
    else if (current.soilMoisture1 < sysStatus.wateringThresholdPct && !current.solenoidState) {  // Water if dry and if we are not already watering
   d5266:	4b4e      	ldr	r3, [pc, #312]	; (d53a0 <loop+0x288>)
   d5268:	4a49      	ldr	r2, [pc, #292]	; (d5390 <loop+0x278>)
   d526a:	edd3 7a00 	vldr	s15, [r3]
   d526e:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
   d5272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5276:	eef4 7ac7 	vcmpe.f32	s15, s14
   d527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d527e:	d51e      	bpl.n	d52be <loop+0x1a6>
   d5280:	68de      	ldr	r6, [r3, #12]
   d5282:	b9e6      	cbnz	r6, d52be <loop+0x1a6>
      waitUntil(meterParticlePublish);
   d5284:	f7ff f9d2 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5288:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Watering","Watering needed - starting 20 min cycle",PRIVATE);
   d528a:	4a52      	ldr	r2, [pc, #328]	; (d53d4 <loop+0x2bc>)
   d528c:	494f      	ldr	r1, [pc, #316]	; (d53cc <loop+0x2b4>)
   d528e:	f88d 6000 	strb.w	r6, [sp]
   d5292:	a806      	add	r0, sp, #24
   d5294:	f7fe ff6c 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5298:	a807      	add	r0, sp, #28
   d529a:	f7ff fb19 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("1");
   d529e:	494e      	ldr	r1, [pc, #312]	; (d53d8 <loop+0x2c0>)
   d52a0:	a806      	add	r0, sp, #24
   d52a2:	f002 fa59 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
   d52a6:	a806      	add	r0, sp, #24
   d52a8:	f7ff fe54 	bl	d4f54 <_Z12controlValve6String>
   d52ac:	a806      	add	r0, sp, #24
   d52ae:	f002 fa0c 	bl	d76ca <_ZN6StringD1Ev>
      wateringTimer.start();                                                    // Start the timer to keep track of the watering time
   d52b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d52b6:	4849      	ldr	r0, [pc, #292]	; (d53dc <loop+0x2c4>)
   d52b8:	f7ff f882 	bl	d43c0 <_ZN5Timer5startEj>
   d52bc:	e7b2      	b.n	d5224 <loop+0x10c>
    }
    else {
      waitUntil(meterParticlePublish);
   d52be:	f7ff f9b5 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d52c2:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d52c4:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Watering","Watering not needed",PRIVATE);
   d52c6:	4941      	ldr	r1, [pc, #260]	; (d53cc <loop+0x2b4>)
   d52c8:	f88d 2000 	strb.w	r2, [sp]
   d52cc:	a806      	add	r0, sp, #24
   d52ce:	4a44      	ldr	r2, [pc, #272]	; (d53e0 <loop+0x2c8>)
   d52d0:	f7fe ff4e 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d52d4:	a807      	add	r0, sp, #28
   d52d6:	f7ff fafb 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52da:	e7a3      	b.n	d5224 <loop+0x10c>
    }
    state = REPORTING_STATE;
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52dc:	4d2c      	ldr	r5, [pc, #176]	; (d5390 <loop+0x278>)
   d52de:	792b      	ldrb	r3, [r5, #4]
   d52e0:	b12b      	cbz	r3, d52ee <loop+0x1d6>
   d52e2:	4b2c      	ldr	r3, [pc, #176]	; (d5394 <loop+0x27c>)
   d52e4:	781b      	ldrb	r3, [r3, #0]
   d52e6:	2b05      	cmp	r3, #5
   d52e8:	d001      	beq.n	d52ee <loop+0x1d6>
   d52ea:	f7ff fedb 	bl	d50a4 <_Z22publishStateTransitionv>
   d52ee:	f001 f8d7 	bl	d64a0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d52f2:	b190      	cbz	r0, d531a <loop+0x202>
      if (Time.hour() == 0) {
   d52f4:	f002 fbf4 	bl	d7ae0 <_ZN9TimeClass4hourEv>
   d52f8:	4606      	mov	r6, r0
   d52fa:	b950      	cbnz	r0, d5312 <loop+0x1fa>
        sysStatus.verboseMode = false;                                    // Turn off Verbose mode
   d52fc:	7128      	strb	r0, [r5, #4]
   d52fe:	f001 f8cf 	bl	d64a0 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5302:	b110      	cbz	r0, d530a <loop+0x1f2>
            return false;
        }
        return spark_sync_time(NULL);
   d5304:	4630      	mov	r0, r6
   d5306:	f001 f8eb 	bl	d64e0 <spark_sync_time>
        Particle.syncTime();                                              // Set the clock each day
        current.alertCount = sysStatus.resetCount = 0;                    // Reset these each day as well
   d530a:	4a25      	ldr	r2, [pc, #148]	; (d53a0 <loop+0x288>)
   d530c:	2300      	movs	r3, #0
   d530e:	61ab      	str	r3, [r5, #24]
   d5310:	6213      	str	r3, [r2, #32]
      }
      sendEvent();                                                        // Send data to Ubidots
   d5312:	f7ff faf3 	bl	d48fc <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d5316:	2306      	movs	r3, #6
   d5318:	e785      	b.n	d5226 <loop+0x10e>
    }
    else if (!connectToParticle()) state = ERROR_STATE;                   // In case we timed out on our 1st attempt to connect
   d531a:	f7ff f8a3 	bl	d4464 <_Z17connectToParticlev>
   d531e:	2800      	cmp	r0, #0
   d5320:	f040 81a8 	bne.w	d5674 <loop+0x55c>
   d5324:	2301      	movs	r3, #1
   d5326:	e77e      	b.n	d5226 <loop+0x10e>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5328:	4b19      	ldr	r3, [pc, #100]	; (d5390 <loop+0x278>)
   d532a:	791b      	ldrb	r3, [r3, #4]
   d532c:	b12b      	cbz	r3, d533a <loop+0x222>
   d532e:	4b19      	ldr	r3, [pc, #100]	; (d5394 <loop+0x27c>)
   d5330:	781b      	ldrb	r3, [r3, #0]
   d5332:	2b06      	cmp	r3, #6
   d5334:	d001      	beq.n	d533a <loop+0x222>
   d5336:	f7ff feb5 	bl	d50a4 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d533a:	4b2a      	ldr	r3, [pc, #168]	; (d53e4 <loop+0x2cc>)
   d533c:	781b      	ldrb	r3, [r3, #0]
   d533e:	b92b      	cbnz	r3, d534c <loop+0x234>
   d5340:	f000 fe8c 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d5344:	4b17      	ldr	r3, [pc, #92]	; (d53a4 <loop+0x28c>)
   d5346:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d5348:	2302      	movs	r3, #2
   d534a:	e76c      	b.n	d5226 <loop+0x10e>
   d534c:	f000 fe86 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5350:	4b25      	ldr	r3, [pc, #148]	; (d53e8 <loop+0x2d0>)
   d5352:	681b      	ldr	r3, [r3, #0]
   d5354:	1ac0      	subs	r0, r0, r3
   d5356:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d535a:	4298      	cmp	r0, r3
   d535c:	f240 818a 	bls.w	d5674 <loop+0x55c>
   d5360:	f000 fe7c 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5364:	4b14      	ldr	r3, [pc, #80]	; (d53b8 <loop+0x2a0>)
   d5366:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5368:	f001 f89a 	bl	d64a0 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d536c:	2800      	cmp	r0, #0
   d536e:	d0d9      	beq.n	d5324 <loop+0x20c>
   d5370:	4b12      	ldr	r3, [pc, #72]	; (d53bc <loop+0x2a4>)
   d5372:	491e      	ldr	r1, [pc, #120]	; (d53ec <loop+0x2d4>)
   d5374:	781b      	ldrb	r3, [r3, #0]
   d5376:	2200      	movs	r2, #0
   d5378:	f88d 2000 	strb.w	r2, [sp]
   d537c:	a806      	add	r0, sp, #24
   d537e:	4a1c      	ldr	r2, [pc, #112]	; (d53f0 <loop+0x2d8>)
   d5380:	f7fe fef6 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5384:	a807      	add	r0, sp, #28
   d5386:	f7ff faa3 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d538a:	e7cb      	b.n	d5324 <loop+0x20c>
   d538c:	2003e1f3 	.word	0x2003e1f3
   d5390:	2003e308 	.word	0x2003e308
   d5394:	2003e1e1 	.word	0x2003e1e1
   d5398:	2003e1f2 	.word	0x2003e1f2
   d539c:	2003e22c 	.word	0x2003e22c
   d53a0:	2003e2bc 	.word	0x2003e2bc
   d53a4:	2003e270 	.word	0x2003e270
   d53a8:	00015f90 	.word	0x00015f90
   d53ac:	2003e22e 	.word	0x2003e22e
   d53b0:	2003e1cc 	.word	0x2003e1cc
   d53b4:	2003e22d 	.word	0x2003e22d
   d53b8:	2003e2b8 	.word	0x2003e2b8
   d53bc:	2003e1d4 	.word	0x2003e1d4
   d53c0:	000db887 	.word	0x000db887
   d53c4:	000db81d 	.word	0x000db81d
   d53c8:	000db7a2 	.word	0x000db7a2
   d53cc:	000db755 	.word	0x000db755
   d53d0:	000db629 	.word	0x000db629
   d53d4:	000db7bb 	.word	0x000db7bb
   d53d8:	000dba8d 	.word	0x000dba8d
   d53dc:	2003e210 	.word	0x2003e210
   d53e0:	000db7e3 	.word	0x000db7e3
   d53e4:	2003e0c6 	.word	0x2003e0c6
   d53e8:	2003e1d0 	.word	0x2003e1d0
   d53ec:	000db7f7 	.word	0x000db7f7
   d53f0:	000db4b5 	.word	0x000db4b5
    break;

  case NAPPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    long secondsToHour;
    static bool pressureDetectedFlag = false;                          // Did we detect water pressure just before going to sleep
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d53f4:	4ba0      	ldr	r3, [pc, #640]	; (d5678 <loop+0x560>)
   d53f6:	791a      	ldrb	r2, [r3, #4]
   d53f8:	461d      	mov	r5, r3
   d53fa:	b12a      	cbz	r2, d5408 <loop+0x2f0>
   d53fc:	4b9f      	ldr	r3, [pc, #636]	; (d567c <loop+0x564>)
   d53fe:	781b      	ldrb	r3, [r3, #0]
   d5400:	2b07      	cmp	r3, #7
   d5402:	d001      	beq.n	d5408 <loop+0x2f0>
   d5404:	f7ff fe4e 	bl	d50a4 <_Z22publishStateTransitionv>

    if (current.pressure > 1 && !pressureDetectedFlag) {               // If we detect pressure we will report again - once!
   d5408:	4b9d      	ldr	r3, [pc, #628]	; (d5680 <loop+0x568>)
   d540a:	4e9e      	ldr	r6, [pc, #632]	; (d5684 <loop+0x56c>)
   d540c:	689b      	ldr	r3, [r3, #8]
   d540e:	2b01      	cmp	r3, #1
   d5410:	dd05      	ble.n	d541e <loop+0x306>
   d5412:	7833      	ldrb	r3, [r6, #0]
   d5414:	b91b      	cbnz	r3, d541e <loop+0x306>
      pressureDetectedFlag = true;
   d5416:	2301      	movs	r3, #1
   d5418:	7033      	strb	r3, [r6, #0]
      state = MEASURING_STATE;
   d541a:	2303      	movs	r3, #3
   d541c:	e703      	b.n	d5226 <loop+0x10e>
   d541e:	f001 f83f 	bl	d64a0 <spark_cloud_flag_connected>
      break;
    }

    if (Particle.connected()) {
   d5422:	b1b0      	cbz	r0, d5452 <loop+0x33a>
      if (sysStatus.verboseMode) {
   d5424:	792b      	ldrb	r3, [r5, #4]
   d5426:	b173      	cbz	r3, d5446 <loop+0x32e>
        waitUntil(meterParticlePublish);
   d5428:	f7ff f900 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d542c:	4b96      	ldr	r3, [pc, #600]	; (d5688 <loop+0x570>)
        Particle.publish("State","Taking a Nap",PRIVATE);
   d542e:	4997      	ldr	r1, [pc, #604]	; (d568c <loop+0x574>)
   d5430:	781b      	ldrb	r3, [r3, #0]
   d5432:	2200      	movs	r2, #0
   d5434:	f88d 2000 	strb.w	r2, [sp]
   d5438:	a806      	add	r0, sp, #24
   d543a:	4a95      	ldr	r2, [pc, #596]	; (d5690 <loop+0x578>)
   d543c:	f7fe fe98 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5440:	a807      	add	r0, sp, #28
   d5442:	f7ff fa45 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d5446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d544a:	f001 f8f5 	bl	d6638 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d544e:	f7ff f84d 	bl	d44ec <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5452:	2100      	movs	r1, #0
   d5454:	2007      	movs	r0, #7
   d5456:	f002 fd4e 	bl	d7ef6 <digitalWrite>
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d545a:	2100      	movs	r1, #0
   d545c:	200e      	movs	r0, #14
   d545e:	f002 fd4a 	bl	d7ef6 <digitalWrite>
    pressureDetectedFlag = false;
   d5462:	2300      	movs	r3, #0
   d5464:	7033      	strb	r3, [r6, #0]
    secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5466:	f002 fb45 	bl	d7af4 <_ZN9TimeClass6minuteEv>
   d546a:	233c      	movs	r3, #60	; 0x3c
   d546c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d5470:	fb03 f500 	mul.w	r5, r3, r0
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5474:	4b87      	ldr	r3, [pc, #540]	; (d5694 <loop+0x57c>)
   d5476:	7d1a      	ldrb	r2, [r3, #20]
   d5478:	b10a      	cbz	r2, d547e <loop+0x366>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d547a:	2201      	movs	r2, #1
   d547c:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d547e:	2200      	movs	r2, #0
   d5480:	2104      	movs	r1, #4
   d5482:	4884      	ldr	r0, [pc, #528]	; (d5694 <loop+0x57c>)
   d5484:	f7fe fe9c 	bl	d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5488:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d548c:	4369      	muls	r1, r5
   d548e:	f7fe fecb 	bl	d4228 <_ZN24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5492:	4980      	ldr	r1, [pc, #512]	; (d5694 <loop+0x57c>)
   d5494:	a803      	add	r0, sp, #12
   d5496:	f002 fa13 	bl	d78c0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d549a:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d549c:	b17b      	cbz	r3, d54be <loop+0x3a6>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d549e:	889a      	ldrh	r2, [r3, #4]
   d54a0:	2a01      	cmp	r2, #1
   d54a2:	d10c      	bne.n	d54be <loop+0x3a6>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d54a4:	899b      	ldrh	r3, [r3, #12]
   d54a6:	2b04      	cmp	r3, #4
   d54a8:	d109      	bne.n	d54be <loop+0x3a6>
   d54aa:	497b      	ldr	r1, [pc, #492]	; (d5698 <loop+0x580>)
   d54ac:	a806      	add	r0, sp, #24
   d54ae:	f002 f953 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
   d54b2:	a806      	add	r0, sp, #24
   d54b4:	f7ff fce8 	bl	d4e88 <_Z15setLowPowerMode6String>
   d54b8:	a806      	add	r0, sp, #24
   d54ba:	f002 f906 	bl	d76ca <_ZN6StringD1Ev>
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d54be:	2101      	movs	r1, #1
   d54c0:	2007      	movs	r0, #7
   d54c2:	f002 fd18 	bl	d7ef6 <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d54c6:	2101      	movs	r1, #1
   d54c8:	200e      	movs	r0, #14
   d54ca:	f002 fd14 	bl	d7ef6 <digitalWrite>
    connectToParticle();                                                // Wakey Wakey and get connected.
   d54ce:	f7fe ffc9 	bl	d4464 <_Z17connectToParticlev>
    state = IDLE_STATE;                                                 // Awake now, we need to go back to the IDLE state for next tasking
   d54d2:	2302      	movs	r3, #2
   d54d4:	7023      	strb	r3, [r4, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d54d6:	9803      	ldr	r0, [sp, #12]
   d54d8:	e052      	b.n	d5580 <loop+0x468>
    } break;

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d54da:	4b67      	ldr	r3, [pc, #412]	; (d5678 <loop+0x560>)
   d54dc:	791a      	ldrb	r2, [r3, #4]
   d54de:	461d      	mov	r5, r3
   d54e0:	b12a      	cbz	r2, d54ee <loop+0x3d6>
   d54e2:	4b66      	ldr	r3, [pc, #408]	; (d567c <loop+0x564>)
   d54e4:	781b      	ldrb	r3, [r3, #0]
   d54e6:	2b08      	cmp	r3, #8
   d54e8:	d001      	beq.n	d54ee <loop+0x3d6>
   d54ea:	f7ff fddb 	bl	d50a4 <_Z22publishStateTransitionv>
   d54ee:	f000 ffd7 	bl	d64a0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d54f2:	b1a0      	cbz	r0, d551e <loop+0x406>
      waitUntil(meterParticlePublish);
   d54f4:	f7ff f89a 	bl	d462c <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.68>
   d54f8:	4b63      	ldr	r3, [pc, #396]	; (d5688 <loop+0x570>)
      Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d54fa:	4964      	ldr	r1, [pc, #400]	; (d568c <loop+0x574>)
   d54fc:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d54fe:	2200      	movs	r2, #0
   d5500:	f88d 2000 	strb.w	r2, [sp]
   d5504:	a806      	add	r0, sp, #24
   d5506:	4a65      	ldr	r2, [pc, #404]	; (d569c <loop+0x584>)
   d5508:	f7fe fe32 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d550c:	a807      	add	r0, sp, #28
   d550e:	f7ff f9df 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                                      // Time to send last update
   d5512:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5516:	f001 f88f 	bl	d6638 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d551a:	f7fe ffe7 	bl	d44ec <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d551e:	2100      	movs	r1, #0
   d5520:	2007      	movs	r0, #7
   d5522:	f002 fce8 	bl	d7ef6 <digitalWrite>
    if (sysStatus.solenoidConfig) controlValve("0");                  // Make darn sure the water is off
   d5526:	7c6b      	ldrb	r3, [r5, #17]
   d5528:	b14b      	cbz	r3, d553e <loop+0x426>
   d552a:	495b      	ldr	r1, [pc, #364]	; (d5698 <loop+0x580>)
   d552c:	a806      	add	r0, sp, #24
   d552e:	f002 f913 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
   d5532:	a806      	add	r0, sp, #24
   d5534:	f7ff fd0e 	bl	d4f54 <_Z12controlValve6String>
   d5538:	a806      	add	r0, sp, #24
   d553a:	f002 f8c6 	bl	d76ca <_ZN6StringD1Ev>
    delay(5000);
   d553e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5542:	f001 f879 	bl	d6638 <delay>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5546:	f002 fad5 	bl	d7af4 <_ZN9TimeClass6minuteEv>
   d554a:	233c      	movs	r3, #60	; 0x3c
   d554c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d5550:	fb03 f500 	mul.w	r5, r3, r0
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5554:	4b4f      	ldr	r3, [pc, #316]	; (d5694 <loop+0x57c>)
   d5556:	7d1a      	ldrb	r2, [r3, #20]
   d5558:	b10a      	cbz	r2, d555e <loop+0x446>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d555a:	2201      	movs	r2, #1
   d555c:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d555e:	2200      	movs	r2, #0
   d5560:	2104      	movs	r1, #4
   d5562:	484c      	ldr	r0, [pc, #304]	; (d5694 <loop+0x57c>)
   d5564:	f7fe fe2c 	bl	d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5568:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d556c:	4369      	muls	r1, r5
   d556e:	f7fe fe5b 	bl	d4228 <_ZN24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5572:	a806      	add	r0, sp, #24
   d5574:	4947      	ldr	r1, [pc, #284]	; (d5694 <loop+0x57c>)
   d5576:	f002 f9a3 	bl	d78c0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d557a:	2302      	movs	r3, #2
   d557c:	9806      	ldr	r0, [sp, #24]
   d557e:	7023      	strb	r3, [r4, #0]
   d5580:	2800      	cmp	r0, #0
   d5582:	d077      	beq.n	d5674 <loop+0x55c>
            free(wakeupSource_);
   d5584:	f001 f81c 	bl	d65c0 <free>
    } break;
   d5588:	e074      	b.n	d5674 <loop+0x55c>

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d558a:	4c3b      	ldr	r4, [pc, #236]	; (d5678 <loop+0x560>)
   d558c:	7923      	ldrb	r3, [r4, #4]
   d558e:	b12b      	cbz	r3, d559c <loop+0x484>
   d5590:	4b3a      	ldr	r3, [pc, #232]	; (d567c <loop+0x564>)
   d5592:	781b      	ldrb	r3, [r3, #0]
   d5594:	2b01      	cmp	r3, #1
   d5596:	d001      	beq.n	d559c <loop+0x484>
   d5598:	f7ff fd84 	bl	d50a4 <_Z22publishStateTransitionv>
   d559c:	f000 fd5e 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d55a0:	4b3f      	ldr	r3, [pc, #252]	; (d56a0 <loop+0x588>)
   d55a2:	681b      	ldr	r3, [r3, #0]
   d55a4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d55a8:	3330      	adds	r3, #48	; 0x30
   d55aa:	4298      	cmp	r0, r3
   d55ac:	d962      	bls.n	d5674 <loop+0x55c>
    {
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d55ae:	69a3      	ldr	r3, [r4, #24]
   d55b0:	2b03      	cmp	r3, #3
   d55b2:	dc14      	bgt.n	d55de <loop+0x4c6>
   d55b4:	f000 ff74 	bl	d64a0 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d55b8:	b160      	cbz	r0, d55d4 <loop+0x4bc>
   d55ba:	4b33      	ldr	r3, [pc, #204]	; (d5688 <loop+0x570>)
   d55bc:	4933      	ldr	r1, [pc, #204]	; (d568c <loop+0x574>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d55be:	781b      	ldrb	r3, [r3, #0]
   d55c0:	2200      	movs	r2, #0
   d55c2:	f88d 2000 	strb.w	r2, [sp]
   d55c6:	a806      	add	r0, sp, #24
   d55c8:	4a36      	ldr	r2, [pc, #216]	; (d56a4 <loop+0x58c>)
   d55ca:	f7fe fdd1 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d55ce:	a807      	add	r0, sp, #28
   d55d0:	f7ff f97e 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d55d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d55d8:	f001 f82e 	bl	d6638 <delay>
   d55dc:	e024      	b.n	d5628 <loop+0x510>
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d55de:	f002 fa77 	bl	d7ad0 <_ZN9TimeClass3nowEv>
   d55e2:	4b25      	ldr	r3, [pc, #148]	; (d5678 <loop+0x560>)
   d55e4:	69db      	ldr	r3, [r3, #28]
   d55e6:	1ac0      	subs	r0, r0, r3
   d55e8:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d55ec:	d91f      	bls.n	d562e <loop+0x516>
   d55ee:	f000 ff57 	bl	d64a0 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d55f2:	b160      	cbz	r0, d560e <loop+0x4f6>
   d55f4:	4b24      	ldr	r3, [pc, #144]	; (d5688 <loop+0x570>)
   d55f6:	4925      	ldr	r1, [pc, #148]	; (d568c <loop+0x574>)
   d55f8:	781b      	ldrb	r3, [r3, #0]
   d55fa:	2200      	movs	r2, #0
   d55fc:	f88d 2000 	strb.w	r2, [sp]
   d5600:	a806      	add	r0, sp, #24
   d5602:	4a29      	ldr	r2, [pc, #164]	; (d56a8 <loop+0x590>)
   d5604:	f7fe fdb4 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5608:	a807      	add	r0, sp, #28
   d560a:	f7ff f961 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d560e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5612:	f001 f811 	bl	d6638 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d5616:	2300      	movs	r3, #0
   d5618:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d561a:	f002 fcaf 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
   d561e:	2228      	movs	r2, #40	; 0x28
   d5620:	4915      	ldr	r1, [pc, #84]	; (d5678 <loop+0x560>)
   d5622:	2001      	movs	r0, #1
   d5624:	f000 fd42 	bl	d60ac <HAL_EEPROM_Put>
        System.reset();
   d5628:	f002 f947 	bl	d78ba <_ZN11SystemClass5resetEv>
   d562c:	e022      	b.n	d5674 <loop+0x55c>
   d562e:	f000 ff37 	bl	d64a0 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5632:	b160      	cbz	r0, d564e <loop+0x536>
   d5634:	4b14      	ldr	r3, [pc, #80]	; (d5688 <loop+0x570>)
   d5636:	4915      	ldr	r1, [pc, #84]	; (d568c <loop+0x574>)
   d5638:	781b      	ldrb	r3, [r3, #0]
   d563a:	2200      	movs	r2, #0
   d563c:	f88d 2000 	strb.w	r2, [sp]
   d5640:	a806      	add	r0, sp, #24
   d5642:	4a1a      	ldr	r2, [pc, #104]	; (d56ac <loop+0x594>)
   d5644:	f7fe fd94 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5648:	a807      	add	r0, sp, #28
   d564a:	f7ff f941 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d564e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5652:	f000 fff1 	bl	d6638 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d5656:	2300      	movs	r3, #0
   d5658:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d565a:	f002 fc8f 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
   d565e:	2228      	movs	r2, #40	; 0x28
   d5660:	4905      	ldr	r1, [pc, #20]	; (d5678 <loop+0x560>)
   d5662:	2001      	movs	r0, #1
   d5664:	f000 fd22 	bl	d60ac <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d5668:	f7fe ffec 	bl	d4644 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d566c:	e002      	b.n	d5674 <loop+0x55c>
    }
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d566e:	2307      	movs	r3, #7
   d5670:	7023      	strb	r3, [r4, #0]
   d5672:	e593      	b.n	d519c <loop+0x84>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d5674:	b00a      	add	sp, #40	; 0x28
   d5676:	bd70      	pop	{r4, r5, r6, pc}
   d5678:	2003e308 	.word	0x2003e308
   d567c:	2003e1e1 	.word	0x2003e1e1
   d5680:	2003e2bc 	.word	0x2003e2bc
   d5684:	2003e1e0 	.word	0x2003e1e0
   d5688:	2003e1d4 	.word	0x2003e1d4
   d568c:	000db81d 	.word	0x000db81d
   d5690:	000db810 	.word	0x000db810
   d5694:	2003e230 	.word	0x2003e230
   d5698:	000db629 	.word	0x000db629
   d569c:	000db823 	.word	0x000db823
   d56a0:	2003e2b8 	.word	0x2003e2b8
   d56a4:	000db83a 	.word	0x000db83a
   d56a8:	000db84e 	.word	0x000db84e
   d56ac:	000db868 	.word	0x000db868

000d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d56b0:	2300      	movs	r3, #0
   d56b2:	2204      	movs	r2, #4
   d56b4:	f000 becc 	b.w	d6450 <spark_variable>

000d56b8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>:
   d56b8:	2300      	movs	r3, #0
   d56ba:	2202      	movs	r2, #2
   d56bc:	f000 bec8 	b.w	d6450 <spark_variable>

000d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d56c0:	4602      	mov	r2, r0
   d56c2:	4801      	ldr	r0, [pc, #4]	; (d56c8 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d56c4:	f001 b986 	b.w	d69d4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d56c8:	000d69a9 	.word	0x000d69a9

000d56cc <setup>:

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d56cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d56ce:	4b8a      	ldr	r3, [pc, #552]	; (d58f8 <setup+0x22c>)

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d56d0:	b0bb      	sub	sp, #236	; 0xec
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d56d2:	aa0a      	add	r2, sp, #40	; 0x28
   d56d4:	f103 0510 	add.w	r5, r3, #16
   d56d8:	4616      	mov	r6, r2
   d56da:	6818      	ldr	r0, [r3, #0]
   d56dc:	6859      	ldr	r1, [r3, #4]
   d56de:	4614      	mov	r4, r2
   d56e0:	c403      	stmia	r4!, {r0, r1}
   d56e2:	3308      	adds	r3, #8
   d56e4:	42ab      	cmp	r3, r5
   d56e6:	4622      	mov	r2, r4
   d56e8:	d1f7      	bne.n	d56da <setup+0xe>
   d56ea:	8819      	ldrh	r1, [r3, #0]
   d56ec:	789b      	ldrb	r3, [r3, #2]
   d56ee:	8021      	strh	r1, [r4, #0]
   d56f0:	70a3      	strb	r3, [r4, #2]
   d56f2:	222d      	movs	r2, #45	; 0x2d
   d56f4:	2100      	movs	r1, #0
   d56f6:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = IDLE_STATE;
   d56fa:	4f80      	ldr	r7, [pc, #512]	; (d58fc <setup+0x230>)
// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d56fc:	f003 fc57 	bl	d8fae <memset>
  state = IDLE_STATE;
   d5700:	2302      	movs	r3, #2
   d5702:	703b      	strb	r3, [r7, #0]

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5704:	4b7e      	ldr	r3, [pc, #504]	; (d5900 <setup+0x234>)
   d5706:	681b      	ldr	r3, [r3, #0]
   d5708:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   d570c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d5710:	f003 031f 	and.w	r3, r3, #31
   d5714:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5718:	2d2f      	cmp	r5, #47	; 0x2f
   d571a:	dd05      	ble.n	d5728 <setup+0x5c>
   d571c:	4a79      	ldr	r2, [pc, #484]	; (d5904 <setup+0x238>)
   d571e:	2100      	movs	r1, #0
   d5720:	200a      	movs	r0, #10
   d5722:	f000 fe13 	bl	d634c <panic_>
   d5726:	e001      	b.n	d572c <setup+0x60>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d5728:	2d1f      	cmp	r5, #31
   d572a:	dd03      	ble.n	d5734 <setup+0x68>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d572c:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
   d5730:	4b75      	ldr	r3, [pc, #468]	; (d5908 <setup+0x23c>)
   d5732:	e001      	b.n	d5738 <setup+0x6c>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d5734:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d5738:	2401      	movs	r4, #1
   d573a:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d573e:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508

  pinSetFast(solEnablePin);                                       // Make sure the Solenoid is off
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d5742:	4621      	mov	r1, r4
   d5744:	2007      	movs	r0, #7
   d5746:	f002 fbc5 	bl	d7ed4 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d574a:	2100      	movs	r1, #0
   d574c:	2004      	movs	r0, #4
   d574e:	f002 fbc1 	bl	d7ed4 <pinMode>
  pinMode(soilPin1, INPUT);
   d5752:	2100      	movs	r1, #0
   d5754:	2013      	movs	r0, #19
   d5756:	f002 fbbd 	bl	d7ed4 <pinMode>
  pinMode(soilPin2, INPUT);
   d575a:	2100      	movs	r1, #0
   d575c:	2012      	movs	r0, #18
   d575e:	f002 fbb9 	bl	d7ed4 <pinMode>
  pinMode(pressurePin, INPUT);
   d5762:	2100      	movs	r1, #0
   d5764:	2011      	movs	r0, #17
   d5766:	f002 fbb5 	bl	d7ed4 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d576a:	4621      	mov	r1, r4
   d576c:	200e      	movs	r0, #14
   d576e:	f002 fbb1 	bl	d7ed4 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d5772:	4621      	mov	r1, r4
   d5774:	200e      	movs	r0, #14
   d5776:	f002 fbbe 	bl	d7ef6 <digitalWrite>
  pinMode(solEnablePin,OUTPUT);
   d577a:	4621      	mov	r1, r4
   d577c:	2003      	movs	r0, #3
   d577e:	f002 fba9 	bl	d7ed4 <pinMode>
  pinMode(solDirection,OUTPUT);
   d5782:	4621      	mov	r1, r4
   d5784:	2002      	movs	r0, #2
   d5786:	f002 fba5 	bl	d7ed4 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d578a:	4621      	mov	r1, r4
   d578c:	2003      	movs	r0, #3
   d578e:	f002 fbb2 	bl	d7ef6 <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d5792:	2100      	movs	r1, #0
   d5794:	2002      	movs	r0, #2
   d5796:	f002 fbae 	bl	d7ef6 <digitalWrite>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d579a:	a802      	add	r0, sp, #8
   d579c:	f000 fe88 	bl	d64b0 <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d57a0:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d57a2:	2300      	movs	r3, #0
   d57a4:	227d      	movs	r2, #125	; 0x7d
   d57a6:	a91a      	add	r1, sp, #104	; 0x68
   d57a8:	a802      	add	r0, sp, #8
   d57aa:	f002 f814 	bl	d77d6 <_ZNK6String8getBytesEPhjj>
   d57ae:	462b      	mov	r3, r5
   d57b0:	462a      	mov	r2, r5
   d57b2:	4956      	ldr	r1, [pc, #344]	; (d590c <setup+0x240>)
   d57b4:	9501      	str	r5, [sp, #4]
   d57b6:	9500      	str	r5, [sp, #0]
   d57b8:	a81a      	add	r0, sp, #104	; 0x68
   d57ba:	f000 fe89 	bl	d64d0 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d57be:	4954      	ldr	r1, [pc, #336]	; (d5910 <setup+0x244>)
   d57c0:	4854      	ldr	r0, [pc, #336]	; (d5914 <setup+0x248>)
   d57c2:	f7ff ff75 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d57c6:	4954      	ldr	r1, [pc, #336]	; (d5918 <setup+0x24c>)
   d57c8:	4854      	ldr	r0, [pc, #336]	; (d591c <setup+0x250>)
   d57ca:	f7ff ff75 	bl	d56b8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",releaseNumber);
   d57ce:	4954      	ldr	r1, [pc, #336]	; (d5920 <setup+0x254>)
   d57d0:	4854      	ldr	r0, [pc, #336]	; (d5924 <setup+0x258>)
   d57d2:	f7ff ff6d 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("StateOfChg", batteryString);
   d57d6:	4954      	ldr	r1, [pc, #336]	; (d5928 <setup+0x25c>)
   d57d8:	4854      	ldr	r0, [pc, #336]	; (d592c <setup+0x260>)
   d57da:	f7ff ff69 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d57de:	4954      	ldr	r1, [pc, #336]	; (d5930 <setup+0x264>)
   d57e0:	4854      	ldr	r0, [pc, #336]	; (d5934 <setup+0x268>)
   d57e2:	f7ff ff65 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("WaterDuration", sysStatus.wateringDurationMin);
   d57e6:	4954      	ldr	r1, [pc, #336]	; (d5938 <setup+0x26c>)
   d57e8:	4854      	ldr	r0, [pc, #336]	; (d593c <setup+0x270>)
   d57ea:	f7ff ff65 	bl	d56b8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("WateringThreshold",wateringThresholdPctStr);
   d57ee:	4954      	ldr	r1, [pc, #336]	; (d5940 <setup+0x274>)
   d57f0:	4854      	ldr	r0, [pc, #336]	; (d5944 <setup+0x278>)
   d57f2:	f7ff ff5d 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Temperature", temperatureString);
   d57f6:	4954      	ldr	r1, [pc, #336]	; (d5948 <setup+0x27c>)
   d57f8:	4854      	ldr	r0, [pc, #336]	; (d594c <setup+0x280>)
   d57fa:	f7ff ff59 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Humidity", humidityString);
   d57fe:	4954      	ldr	r1, [pc, #336]	; (d5950 <setup+0x284>)
   d5800:	4854      	ldr	r0, [pc, #336]	; (d5954 <setup+0x288>)
   d5802:	f7ff ff55 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Luminosity",lightLevelString);
   d5806:	4954      	ldr	r1, [pc, #336]	; (d5958 <setup+0x28c>)
   d5808:	4854      	ldr	r0, [pc, #336]	; (d595c <setup+0x290>)
   d580a:	f7ff ff51 	bl	d56b0 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture1", current.soilMoisture1);
   d580e:	4954      	ldr	r1, [pc, #336]	; (d5960 <setup+0x294>)
   d5810:	4854      	ldr	r0, [pc, #336]	; (d5964 <setup+0x298>)
   d5812:	f7ff ff51 	bl	d56b8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture2", current.soilMoisture2);
   d5816:	4954      	ldr	r1, [pc, #336]	; (d5968 <setup+0x29c>)
   d5818:	4854      	ldr	r0, [pc, #336]	; (d596c <setup+0x2a0>)
   d581a:	f7ff ff4d 	bl	d56b8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Pressure", current.pressure);
   d581e:	4954      	ldr	r1, [pc, #336]	; (d5970 <setup+0x2a4>)
   d5820:	4854      	ldr	r0, [pc, #336]	; (d5974 <setup+0x2a8>)
   d5822:	f7ff ff49 	bl	d56b8 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>

  Particle.function("Measure-Now",measureNow);
   d5826:	4954      	ldr	r1, [pc, #336]	; (d5978 <setup+0x2ac>)
   d5828:	4854      	ldr	r0, [pc, #336]	; (d597c <setup+0x2b0>)
   d582a:	f7ff ff49 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d582e:	4954      	ldr	r1, [pc, #336]	; (d5980 <setup+0x2b4>)
   d5830:	4854      	ldr	r0, [pc, #336]	; (d5984 <setup+0x2b8>)
   d5832:	f7ff ff45 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d5836:	4954      	ldr	r1, [pc, #336]	; (d5988 <setup+0x2bc>)
   d5838:	4854      	ldr	r0, [pc, #336]	; (d598c <setup+0x2c0>)
   d583a:	f7ff ff41 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Watering",controlValve);
   d583e:	4954      	ldr	r1, [pc, #336]	; (d5990 <setup+0x2c4>)
   d5840:	4854      	ldr	r0, [pc, #336]	; (d5994 <setup+0x2c8>)
   d5842:	f7ff ff3d 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSoilSensors",setSoilSensors);
   d5846:	4954      	ldr	r1, [pc, #336]	; (d5998 <setup+0x2cc>)
   d5848:	4854      	ldr	r0, [pc, #336]	; (d599c <setup+0x2d0>)
   d584a:	f7ff ff39 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPressureSensor", setPressureSensor);
   d584e:	4954      	ldr	r1, [pc, #336]	; (d59a0 <setup+0x2d4>)
   d5850:	4854      	ldr	r0, [pc, #336]	; (d59a4 <setup+0x2d8>)
   d5852:	f7ff ff35 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetLightSensor",setLightSensor);
   d5856:	4954      	ldr	r1, [pc, #336]	; (d59a8 <setup+0x2dc>)
   d5858:	4854      	ldr	r0, [pc, #336]	; (d59ac <setup+0x2e0>)
   d585a:	f7ff ff31 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SolenoidPresent",setSolenoidPresent);
   d585e:	4954      	ldr	r1, [pc, #336]	; (d59b0 <setup+0x2e4>)
   d5860:	4854      	ldr	r0, [pc, #336]	; (d59b4 <setup+0x2e8>)
   d5862:	f7ff ff2d 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTempHumidSensor",setTempHumidSensor);
   d5866:	4954      	ldr	r1, [pc, #336]	; (d59b8 <setup+0x2ec>)
   d5868:	4854      	ldr	r0, [pc, #336]	; (d59bc <setup+0x2f0>)
   d586a:	f7ff ff29 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetWaterDuration", setWaterDuration);
   d586e:	4954      	ldr	r1, [pc, #336]	; (d59c0 <setup+0x2f4>)
   d5870:	4854      	ldr	r0, [pc, #336]	; (d59c4 <setup+0x2f8>)
   d5872:	f7ff ff25 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetWaterThreshold",setWaterThreshold);
   d5876:	4954      	ldr	r1, [pc, #336]	; (d59c8 <setup+0x2fc>)
   d5878:	4854      	ldr	r0, [pc, #336]	; (d59cc <setup+0x300>)
   d587a:	f7ff ff21 	bl	d56c0 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d587e:	f002 fb7d 	bl	d7f7c <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d5882:	4628      	mov	r0, r5
   d5884:	f000 fc02 	bl	d608c <HAL_EEPROM_Read>
   d5888:	2802      	cmp	r0, #2
   d588a:	d121      	bne.n	d58d0 <setup+0x204>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d588c:	4c50      	ldr	r4, [pc, #320]	; (d59d0 <setup+0x304>)
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d588e:	f002 fb75 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
   d5892:	2228      	movs	r2, #40	; 0x28
   d5894:	4621      	mov	r1, r4
   d5896:	2001      	movs	r0, #1
   d5898:	f000 fc00 	bl	d609c <HAL_EEPROM_Get>
  EEPROM.get(MEM_MAP::currentStatusAddr,current);
   d589c:	f002 fb6e 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
   d58a0:	2224      	movs	r2, #36	; 0x24
   d58a2:	492f      	ldr	r1, [pc, #188]	; (d5960 <setup+0x294>)
   d58a4:	2050      	movs	r0, #80	; 0x50
   d58a6:	f000 fbf9 	bl	d609c <HAL_EEPROM_Get>

  wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMin);
   d58aa:	6a23      	ldr	r3, [r4, #32]
   d58ac:	4849      	ldr	r0, [pc, #292]	; (d59d4 <setup+0x308>)
   d58ae:	f64e 2160 	movw	r1, #60000	; 0xea60
   d58b2:	4359      	muls	r1, r3
   d58b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d58b8:	f7fe fd34 	bl	d4324 <_ZN5Timer12changePeriodEjj>
  wateringTimer.reset();
   d58bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d58c0:	4844      	ldr	r0, [pc, #272]	; (d59d4 <setup+0x308>)
   d58c2:	f7fe fd1f 	bl	d4304 <_ZN5Timer5resetEj>

  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
   d58c6:	7b23      	ldrb	r3, [r4, #12]
   d58c8:	2b00      	cmp	r3, #0
   d58ca:	f000 8091 	beq.w	d59f0 <setup+0x324>
   d58ce:	e085      	b.n	d59dc <setup+0x310>
  Particle.function("SetTempHumidSensor",setTempHumidSensor);
  Particle.function("SetWaterDuration", setWaterDuration);
  Particle.function("SetWaterThreshold",setWaterThreshold);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d58d0:	f002 fb54 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d58d4:	2204      	movs	r2, #4
   d58d6:	4940      	ldr	r1, [pc, #256]	; (d59d8 <setup+0x30c>)
   d58d8:	4628      	mov	r0, r5
   d58da:	f000 fbe7 	bl	d60ac <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d58de:	f002 fb4d 	bl	d7f7c <_Z21__fetch_global_EEPROMv>
   d58e2:	4620      	mov	r0, r4
   d58e4:	2204      	movs	r2, #4
   d58e6:	a906      	add	r1, sp, #24
  Particle.function("SetWaterDuration", setWaterDuration);
  Particle.function("SetWaterThreshold",setWaterThreshold);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d58e8:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d58ea:	9506      	str	r5, [sp, #24]
   d58ec:	f000 fbde 	bl	d60ac <HAL_EEPROM_Put>
  Particle.function("SetWaterDuration", setWaterDuration);
  Particle.function("SetWaterThreshold",setWaterThreshold);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d58f0:	2cf0      	cmp	r4, #240	; 0xf0
   d58f2:	d1f4      	bne.n	d58de <setup+0x212>
   d58f4:	e7ca      	b.n	d588c <setup+0x1c0>
   d58f6:	bf00      	nop
   d58f8:	000db44c 	.word	0x000db44c
   d58fc:	2003e1f3 	.word	0x2003e1f3
   d5900:	2003e258 	.word	0x2003e258
   d5904:	000d604d 	.word	0x000d604d
   d5908:	50000300 	.word	0x50000300
   d590c:	000d49e9 	.word	0x000d49e9
   d5910:	2003e274 	.word	0x2003e274
   d5914:	000db8a1 	.word	0x000db8a1
   d5918:	2003e320 	.word	0x2003e320
   d591c:	000db8a8 	.word	0x000db8a8
   d5920:	000dba8f 	.word	0x000dba8f
   d5924:	000db8b3 	.word	0x000db8b3
   d5928:	2003e2f0 	.word	0x2003e2f0
   d592c:	000db8bb 	.word	0x000db8bb
   d5930:	2003e1e2 	.word	0x2003e1e2
   d5934:	000db8c6 	.word	0x000db8c6
   d5938:	2003e328 	.word	0x2003e328
   d593c:	000db9a8 	.word	0x000db9a8
   d5940:	2003e268 	.word	0x2003e268
   d5944:	000db8d5 	.word	0x000db8d5
   d5948:	2003e1bc 	.word	0x2003e1bc
   d594c:	000db8e7 	.word	0x000db8e7
   d5950:	2003e2e0 	.word	0x2003e2e0
   d5954:	000db8f3 	.word	0x000db8f3
   d5958:	2003e2f8 	.word	0x2003e2f8
   d595c:	000db8fc 	.word	0x000db8fc
   d5960:	2003e2bc 	.word	0x2003e2bc
   d5964:	000db907 	.word	0x000db907
   d5968:	2003e2c0 	.word	0x2003e2c0
   d596c:	000db915 	.word	0x000db915
   d5970:	2003e2c4 	.word	0x2003e2c4
   d5974:	000db923 	.word	0x000db923
   d5978:	000d410d 	.word	0x000d410d
   d597c:	000db92c 	.word	0x000db92c
   d5980:	000d4e89 	.word	0x000d4e89
   d5984:	000db938 	.word	0x000db938
   d5988:	000d4e0d 	.word	0x000d4e0d
   d598c:	000db945 	.word	0x000db945
   d5990:	000d4f55 	.word	0x000d4f55
   d5994:	000db755 	.word	0x000db755
   d5998:	000d4a85 	.word	0x000d4a85
   d599c:	000db952 	.word	0x000db952
   d59a0:	000d4b29 	.word	0x000d4b29
   d59a4:	000db961 	.word	0x000db961
   d59a8:	000d4ba5 	.word	0x000d4ba5
   d59ac:	000db973 	.word	0x000db973
   d59b0:	000d5015 	.word	0x000d5015
   d59b4:	000db982 	.word	0x000db982
   d59b8:	000d4c31 	.word	0x000d4c31
   d59bc:	000db992 	.word	0x000db992
   d59c0:	000d4cb9 	.word	0x000d4cb9
   d59c4:	000db9a5 	.word	0x000db9a5
   d59c8:	000d4d71 	.word	0x000d4d71
   d59cc:	000db9b6 	.word	0x000db9b6
   d59d0:	2003e308 	.word	0x2003e308
   d59d4:	2003e210 	.word	0x2003e210
   d59d8:	000db48c 	.word	0x000db48c

  wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMin);
  wateringTimer.reset();

  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
    if (!tempHumidSensor.begin(0x44)) {
   d59dc:	2144      	movs	r1, #68	; 0x44
   d59de:	4846      	ldr	r0, [pc, #280]	; (d5af8 <setup+0x42c>)
   d59e0:	f000 f9e8 	bl	d5db4 <_ZN14Adafruit_SHT315beginEh>
   d59e4:	b920      	cbnz	r0, d59f0 <setup+0x324>
      sysStatus.TempHumidConfig = false;                                // Set to 0x45 for alternate i2c addr - turns off the sensor if it fails to initalize
   d59e6:	7320      	strb	r0, [r4, #12]
      strcpy(StartupMessage,"Temp/Humidity Sensor Failed to Inialize - disabling");
   d59e8:	4944      	ldr	r1, [pc, #272]	; (d5afc <setup+0x430>)
   d59ea:	4630      	mov	r0, r6
   d59ec:	f003 fb1a 	bl	d9024 <strcpy>
    } 
  }

  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d59f0:	7c23      	ldrb	r3, [r4, #16]
   d59f2:	b133      	cbz	r3, d5a02 <setup+0x336>
    lightSensor.begin();
   d59f4:	4842      	ldr	r0, [pc, #264]	; (d5b00 <setup+0x434>)
   d59f6:	f000 f94c 	bl	d5c92 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d59fa:	2120      	movs	r1, #32
   d59fc:	4840      	ldr	r0, [pc, #256]	; (d5b00 <setup+0x434>)
   d59fe:	f000 f984 	bl	d5d0a <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5a02:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a04:	4611      	mov	r1, r2
   d5a06:	a806      	add	r0, sp, #24
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5a08:	9206      	str	r2, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a0a:	f000 fb0f 	bl	d602c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5a0e:	9b06      	ldr	r3, [sp, #24]
  }

  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d5a10:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d5a12:	bf02      	ittt	eq
   d5a14:	69a3      	ldreq	r3, [r4, #24]
   d5a16:	3301      	addeq	r3, #1
   d5a18:	61a3      	streq	r3, [r4, #24]
  }
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d5a1a:	69a3      	ldr	r3, [r4, #24]
   d5a1c:	2b05      	cmp	r3, #5
   d5a1e:	dd04      	ble.n	d5a2a <setup+0x35e>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d5a20:	4b38      	ldr	r3, [pc, #224]	; (d5b04 <setup+0x438>)
   d5a22:	2204      	movs	r2, #4
   d5a24:	619a      	str	r2, [r3, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d5a26:	f7fe fe0d 	bl	d4644 <_Z14fullModemResetv>
  }

  if(sysStatus.solenoidConfig) {
   d5a2a:	7c63      	ldrb	r3, [r4, #17]
   d5a2c:	b153      	cbz	r3, d5a44 <setup+0x378>
    snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d5a2e:	4b35      	ldr	r3, [pc, #212]	; (d5b04 <setup+0x438>)
   d5a30:	6a58      	ldr	r0, [r3, #36]	; 0x24
   d5a32:	f002 fe07 	bl	d8644 <__aeabi_f2d>
   d5a36:	4a34      	ldr	r2, [pc, #208]	; (d5b08 <setup+0x43c>)
   d5a38:	e9cd 0100 	strd	r0, r1, [sp]
   d5a3c:	2108      	movs	r1, #8
   d5a3e:	4833      	ldr	r0, [pc, #204]	; (d5b0c <setup+0x440>)
   d5a40:	f000 fdd6 	bl	d65f0 <snprintf>
  }

  sysStatus.solenoidHoldTime = 6;                                      // Set a reasonable value - based on testing 8mSec
   d5a44:	2306      	movs	r3, #6
   d5a46:	6163      	str	r3, [r4, #20]

  if (sysStatus.solenoidConfig && current.solenoidState) controlValve("0");   // Can start watering until we get to the main loop
   d5a48:	7c63      	ldrb	r3, [r4, #17]
   d5a4a:	b163      	cbz	r3, d5a66 <setup+0x39a>
   d5a4c:	4b30      	ldr	r3, [pc, #192]	; (d5b10 <setup+0x444>)
   d5a4e:	68db      	ldr	r3, [r3, #12]
   d5a50:	b14b      	cbz	r3, d5a66 <setup+0x39a>
   d5a52:	4930      	ldr	r1, [pc, #192]	; (d5b14 <setup+0x448>)
   d5a54:	a806      	add	r0, sp, #24
   d5a56:	f001 fe7f 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
   d5a5a:	a806      	add	r0, sp, #24
   d5a5c:	f7ff fa7a 	bl	d4f54 <_Z12controlValve6String>
   d5a60:	a806      	add	r0, sp, #24
   d5a62:	f001 fe32 	bl	d76ca <_ZN6StringD1Ev>

  sysStatus.solarPowerMode = true;                                      // Set this as a default
   d5a66:	2301      	movs	r3, #1
   d5a68:	7163      	strb	r3, [r4, #5]
  setPowerConfig();                                                     // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d5a6a:	f7fe fd7f 	bl	d456c <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) setLowPowerMode("0");                   // Rescue mode to take out of low power mode and connect
   d5a6e:	2004      	movs	r0, #4
   d5a70:	f002 fa5a 	bl	d7f28 <digitalRead>
   d5a74:	b948      	cbnz	r0, d5a8a <setup+0x3be>
   d5a76:	4927      	ldr	r1, [pc, #156]	; (d5b14 <setup+0x448>)
   d5a78:	a806      	add	r0, sp, #24
   d5a7a:	f001 fe6d 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
   d5a7e:	a806      	add	r0, sp, #24
   d5a80:	f7ff fa02 	bl	d4e88 <_Z15setLowPowerMode6String>
   d5a84:	a806      	add	r0, sp, #24
   d5a86:	f001 fe20 	bl	d76ca <_ZN6StringD1Ev>

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d5a8a:	f7fe fe4f 	bl	d472c <_Z16takeMeasurementsv>

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d5a8e:	4b22      	ldr	r3, [pc, #136]	; (d5b18 <setup+0x44c>)
   d5a90:	68a2      	ldr	r2, [r4, #8]
   d5a92:	681b      	ldr	r3, [r3, #0]
   d5a94:	429a      	cmp	r2, r3
   d5a96:	dc02      	bgt.n	d5a9e <setup+0x3d2>
   d5a98:	2308      	movs	r3, #8
   d5a9a:	703b      	strb	r3, [r7, #0]
   d5a9c:	e00c      	b.n	d5ab8 <setup+0x3ec>
  else if(!connectToParticle()) {
   d5a9e:	f7fe fce1 	bl	d4464 <_Z17connectToParticlev>
   d5aa2:	b948      	cbnz	r0, d5ab8 <setup+0x3ec>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d5aa4:	2301      	movs	r3, #1
   d5aa6:	703b      	strb	r3, [r7, #0]
   d5aa8:	f000 fad8 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5aac:	4b1b      	ldr	r3, [pc, #108]	; (d5b1c <setup+0x450>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5aae:	491c      	ldr	r1, [pc, #112]	; (d5b20 <setup+0x454>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d5ab0:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5ab2:	4630      	mov	r0, r6
   d5ab4:	f003 fab6 	bl	d9024 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ab8:	f000 fcf2 	bl	d64a0 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5abc:	b108      	cbz	r0, d5ac2 <setup+0x3f6>
   d5abe:	7923      	ldrb	r3, [r4, #4]
   d5ac0:	b963      	cbnz	r3, d5adc <setup+0x410>
  Serial.println(StartupMessage);
   d5ac2:	f002 f90b 	bl	d7cdc <_Z16_fetch_usbserialv>
   d5ac6:	4631      	mov	r1, r6
   d5ac8:	f001 fdb3 	bl	d7632 <_ZN5Print7printlnEPKc>

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d5acc:	4b15      	ldr	r3, [pc, #84]	; (d5b24 <setup+0x458>)
   d5ace:	2201      	movs	r2, #1
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d5ad0:	a802      	add	r0, sp, #8
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d5ad2:	701a      	strb	r2, [r3, #0]
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d5ad4:	f001 fdf9 	bl	d76ca <_ZN6StringD1Ev>

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
}
   d5ad8:	b03b      	add	sp, #236	; 0xec
   d5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5adc:	4b12      	ldr	r3, [pc, #72]	; (d5b28 <setup+0x45c>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5ade:	4913      	ldr	r1, [pc, #76]	; (d5b2c <setup+0x460>)
   d5ae0:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5ae2:	2200      	movs	r2, #0
   d5ae4:	f88d 2000 	strb.w	r2, [sp]
   d5ae8:	a806      	add	r0, sp, #24
   d5aea:	4632      	mov	r2, r6
   d5aec:	f7fe fb40 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.119>
   d5af0:	a807      	add	r0, sp, #28
   d5af2:	f7fe feed 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5af6:	e7e4      	b.n	d5ac2 <setup+0x3f6>
   d5af8:	2003e25c 	.word	0x2003e25c
   d5afc:	000db9c8 	.word	0x000db9c8
   d5b00:	2003e1d8 	.word	0x2003e1d8
   d5b04:	2003e308 	.word	0x2003e308
   d5b08:	000db6f6 	.word	0x000db6f6
   d5b0c:	2003e268 	.word	0x2003e268
   d5b10:	2003e2bc 	.word	0x2003e2bc
   d5b14:	000db629 	.word	0x000db629
   d5b18:	2003e1cc 	.word	0x2003e1cc
   d5b1c:	2003e2b8 	.word	0x2003e2b8
   d5b20:	000db9fc 	.word	0x000db9fc
   d5b24:	2003e1f2 	.word	0x2003e1f2
   d5b28:	2003e1d4 	.word	0x2003e1d4
   d5b2c:	000dba0e 	.word	0x000dba0e

000d5b30 <_GLOBAL__sub_I___appProductID>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b34:	4b3f      	ldr	r3, [pc, #252]	; (d5c34 <_GLOBAL__sub_I___appProductID+0x104>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b36:	4e40      	ldr	r6, [pc, #256]	; (d5c38 <_GLOBAL__sub_I___appProductID+0x108>)
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5b38:	4f40      	ldr	r7, [pc, #256]	; (d5c3c <_GLOBAL__sub_I___appProductID+0x10c>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d5b3a:	f8df 913c 	ldr.w	r9, [pc, #316]	; d5c78 <_GLOBAL__sub_I___appProductID+0x148>
   d5b3e:	2400      	movs	r4, #0
   d5b40:	601c      	str	r4, [r3, #0]
   d5b42:	4b3f      	ldr	r3, [pc, #252]	; (d5c40 <_GLOBAL__sub_I___appProductID+0x110>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5b44:	b085      	sub	sp, #20
   d5b46:	2501      	movs	r5, #1
   d5b48:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5b4a:	f000 fac7 	bl	d60dc <HAL_Pin_Map>
   d5b4e:	4b3d      	ldr	r3, [pc, #244]	; (d5c44 <_GLOBAL__sub_I___appProductID+0x114>)
   d5b50:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5b52:	f002 f971 	bl	d7e38 <spark_protocol_instance>
   d5b56:	4623      	mov	r3, r4
   d5b58:	4622      	mov	r2, r4
   d5b5a:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5b5e:	f002 f973 	bl	d7e48 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5b62:	f002 f969 	bl	d7e38 <spark_protocol_instance>
   d5b66:	4622      	mov	r2, r4
   d5b68:	4623      	mov	r3, r4
   d5b6a:	211c      	movs	r1, #28
   d5b6c:	f002 f974 	bl	d7e58 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5b74:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b76:	6034      	str	r4, [r6, #0]
   d5b78:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b7a:	71b4      	strb	r4, [r6, #6]
   d5b7c:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b7e:	2002      	movs	r0, #2
   d5b80:	f000 fc06 	bl	d6390 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5b84:	463a      	mov	r2, r7
   d5b86:	4930      	ldr	r1, [pc, #192]	; (d5c48 <_GLOBAL__sub_I___appProductID+0x118>)
   d5b88:	4630      	mov	r0, r6
   d5b8a:	f002 fa8b 	bl	d80a4 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5b8e:	4e2f      	ldr	r6, [pc, #188]	; (d5c4c <_GLOBAL__sub_I___appProductID+0x11c>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5b90:	4621      	mov	r1, r4
   d5b92:	4628      	mov	r0, r5
   d5b94:	f000 fc14 	bl	d63c0 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5b98:	4629      	mov	r1, r5
   d5b9a:	2004      	movs	r0, #4
   d5b9c:	f000 fa36 	bl	d600c <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5ba0:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5ba4:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5ba6:	4642      	mov	r2, r8
   d5ba8:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5baa:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5bac:	f003 f9ff 	bl	d8fae <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5bb0:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
   d5bb2:	463a      	mov	r2, r7
   d5bb4:	4926      	ldr	r1, [pc, #152]	; (d5c50 <_GLOBAL__sub_I___appProductID+0x120>)
   d5bb6:	80f3      	strh	r3, [r6, #6]
   d5bb8:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5bba:	7535      	strb	r5, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5bbc:	f8a6 8004 	strh.w	r8, [r6, #4]
   d5bc0:	f002 fa70 	bl	d80a4 <__aeabi_atexit>
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5bc4:	4823      	ldr	r0, [pc, #140]	; (d5c54 <_GLOBAL__sub_I___appProductID+0x124>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5bc6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; d5c7c <_GLOBAL__sub_I___appProductID+0x14c>
	    _M_manager = &_My_handler::_M_manager;
   d5bca:	4c23      	ldr	r4, [pc, #140]	; (d5c58 <_GLOBAL__sub_I___appProductID+0x128>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d5bcc:	4e23      	ldr	r6, [pc, #140]	; (d5c5c <_GLOBAL__sub_I___appProductID+0x12c>)
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5bce:	f000 f8ce 	bl	d5d6e <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                     // Light sensor measures light level in Lux
   d5bd2:	f002 fa1b 	bl	d800c <_Z19__fetch_global_Wirev>
   d5bd6:	2123      	movs	r1, #35	; 0x23
   d5bd8:	4602      	mov	r2, r0
   d5bda:	4821      	ldr	r0, [pc, #132]	; (d5c60 <_GLOBAL__sub_I___appProductID+0x130>)
   d5bdc:	f000 f854 	bl	d5c88 <_ZN6BH1750C1EhR7TwoWire>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5be0:	4b20      	ldr	r3, [pc, #128]	; (d5c64 <_GLOBAL__sub_I___appProductID+0x134>)
   d5be2:	9300      	str	r3, [sp, #0]
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d5be4:	466a      	mov	r2, sp
   d5be6:	462b      	mov	r3, r5
   d5be8:	491f      	ldr	r1, [pc, #124]	; (d5c68 <_GLOBAL__sub_I___appProductID+0x138>)

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5bea:	9402      	str	r4, [sp, #8]
   d5bec:	4648      	mov	r0, r9
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5bee:	f8cd 800c 	str.w	r8, [sp, #12]
   d5bf2:	f7fe fb55 	bl	d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5bf6:	4668      	mov	r0, sp
   d5bf8:	f7fe facf 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d5bfc:	463a      	mov	r2, r7
   d5bfe:	4631      	mov	r1, r6
   d5c00:	4648      	mov	r0, r9
   d5c02:	f002 fa4f 	bl	d80a4 <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5c06:	9402      	str	r4, [sp, #8]
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5c08:	4c18      	ldr	r4, [pc, #96]	; (d5c6c <_GLOBAL__sub_I___appProductID+0x13c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5c0a:	4b19      	ldr	r3, [pc, #100]	; (d5c70 <_GLOBAL__sub_I___appProductID+0x140>)
   d5c0c:	9300      	str	r3, [sp, #0]
   d5c0e:	466a      	mov	r2, sp
   d5c10:	462b      	mov	r3, r5
   d5c12:	4918      	ldr	r1, [pc, #96]	; (d5c74 <_GLOBAL__sub_I___appProductID+0x144>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5c14:	f8cd 800c 	str.w	r8, [sp, #12]
   d5c18:	4620      	mov	r0, r4
   d5c1a:	f7fe fb41 	bl	d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c1e:	4668      	mov	r0, sp
   d5c20:	f7fe fabb 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d5c24:	463a      	mov	r2, r7
   d5c26:	4631      	mov	r1, r6
   d5c28:	4620      	mov	r0, r4
   d5c2a:	f002 fa3b 	bl	d80a4 <__aeabi_atexit>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5c2e:	b005      	add	sp, #20
   d5c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c34:	2003e248 	.word	0x2003e248
   d5c38:	2003e24c 	.word	0x2003e24c
   d5c3c:	2003e1b8 	.word	0x2003e1b8
   d5c40:	2003e1d4 	.word	0x2003e1d4
   d5c44:	2003e258 	.word	0x2003e258
   d5c48:	000d418b 	.word	0x000d418b
   d5c4c:	2003e230 	.word	0x2003e230
   d5c50:	000d40f5 	.word	0x000d40f5
   d5c54:	2003e25c 	.word	0x2003e25c
   d5c58:	000d40dd 	.word	0x000d40dd
   d5c5c:	000d4365 	.word	0x000d4365
   d5c60:	2003e1d8 	.word	0x2003e1d8
   d5c64:	000d40b9 	.word	0x000d40b9
   d5c68:	00124f80 	.word	0x00124f80
   d5c6c:	2003e1f4 	.word	0x2003e1f4
   d5c70:	000d40c5 	.word	0x000d40c5
   d5c74:	001b7740 	.word	0x001b7740
   d5c78:	2003e210 	.word	0x2003e210
   d5c7c:	000d40d9 	.word	0x000d40d9

000d5c80 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5c80:	6803      	ldr	r3, [r0, #0]
   d5c82:	b2c9      	uxtb	r1, r1
   d5c84:	689b      	ldr	r3, [r3, #8]
   d5c86:	4718      	bx	r3

000d5c88 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5c88:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d5c8a:	2211      	movs	r2, #17
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5c8c:	7041      	strb	r1, [r0, #1]
{
  m_mode = continuous_high_res2;
   d5c8e:	7002      	strb	r2, [r0, #0]
}
   d5c90:	4770      	bx	lr

000d5c92 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d5c92:	b510      	push	{r4, lr}
   d5c94:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d5c96:	6840      	ldr	r0, [r0, #4]
   d5c98:	f001 f9ff 	bl	d709a <_ZN7TwoWire9isEnabledEv>
   d5c9c:	b910      	cbnz	r0, d5ca4 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d5c9e:	6860      	ldr	r0, [r4, #4]
   d5ca0:	f001 f9b6 	bl	d7010 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d5ca4:	2001      	movs	r0, #1
   d5ca6:	bd10      	pop	{r4, pc}

000d5ca8 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d5ca8:	b570      	push	{r4, r5, r6, lr}
   d5caa:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d5cac:	7841      	ldrb	r1, [r0, #1]
   d5cae:	6840      	ldr	r0, [r0, #4]
   d5cb0:	f001 f9e5 	bl	d707e <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d5cb4:	2202      	movs	r2, #2
   d5cb6:	7869      	ldrb	r1, [r5, #1]
   d5cb8:	6868      	ldr	r0, [r5, #4]
   d5cba:	f001 f9dd 	bl	d7078 <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d5cbe:	6868      	ldr	r0, [r5, #4]
   d5cc0:	6803      	ldr	r3, [r0, #0]
   d5cc2:	695b      	ldr	r3, [r3, #20]
   d5cc4:	4798      	blx	r3
   d5cc6:	4606      	mov	r6, r0
   d5cc8:	6868      	ldr	r0, [r5, #4]
   d5cca:	6803      	ldr	r3, [r0, #0]
   d5ccc:	695b      	ldr	r3, [r3, #20]
   d5cce:	4798      	blx	r3
   d5cd0:	4604      	mov	r4, r0
  m_i2c.endTransmission();

  return (float)level / 1.2f; // convert to lux
   d5cd2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5cd6:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   d5cd8:	b2a4      	uxth	r4, r4
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5cda:	f001 f9db 	bl	d7094 <_ZN7TwoWire15endTransmissionEv>

  return (float)level / 1.2f; // convert to lux
   d5cde:	ee07 4a90 	vmov	s15, r4
   d5ce2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d5ce6:	eddf 7a02 	vldr	s15, [pc, #8]	; d5cf0 <_ZN6BH175015get_light_levelEv+0x48>
   d5cea:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5cee:	bd70      	pop	{r4, r5, r6, pc}
   d5cf0:	3f99999a 	.word	0x3f99999a

000d5cf4 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d5cf4:	7803      	ldrb	r3, [r0, #0]
   d5cf6:	2b23      	cmp	r3, #35	; 0x23
   d5cf8:	d004      	beq.n	d5d04 <_ZN6BH175020wait_for_measurementEv+0x10>
   d5cfa:	2b13      	cmp	r3, #19
   d5cfc:	bf0c      	ite	eq
   d5cfe:	2018      	moveq	r0, #24
   d5d00:	20b4      	movne	r0, #180	; 0xb4
   d5d02:	e000      	b.n	d5d06 <_ZN6BH175020wait_for_measurementEv+0x12>
   d5d04:	2018      	movs	r0, #24
         m_mode == continuous_low_res) ? 24 : 180); // max measurement time 24 for low res and 180 for high res
   d5d06:	f000 bc97 	b.w	d6638 <delay>

000d5d0a <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
  return m_mode;
}

void BH1750::set_sensor_mode(SensMode _mode)
{
   d5d0a:	b538      	push	{r3, r4, r5, lr}
   d5d0c:	4604      	mov	r4, r0
   d5d0e:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d5d10:	7841      	ldrb	r1, [r0, #1]
   d5d12:	6840      	ldr	r0, [r0, #4]
   d5d14:	f001 f9b3 	bl	d707e <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d5d18:	6860      	ldr	r0, [r4, #4]
   d5d1a:	6803      	ldr	r3, [r0, #0]
   d5d1c:	4629      	mov	r1, r5
   d5d1e:	689b      	ldr	r3, [r3, #8]
   d5d20:	4798      	blx	r3
  m_i2c.endTransmission();
   d5d22:	6860      	ldr	r0, [r4, #4]
   d5d24:	f001 f9b6 	bl	d7094 <_ZN7TwoWire15endTransmissionEv>

  m_mode = _mode;
   d5d28:	7025      	strb	r5, [r4, #0]

  wait_for_measurement();
   d5d2a:	4620      	mov	r0, r4
}
   d5d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  m_i2c.write((uint8_t)_mode);
  m_i2c.endTransmission();

  m_mode = _mode;

  wait_for_measurement();
   d5d30:	f7ff bfe0 	b.w	d5cf4 <_ZN6BH175020wait_for_measurementEv>

000d5d34 <_ZN6BH175023make_forced_measurementEv>:
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5d34:	b510      	push	{r4, lr}
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5d36:	7803      	ldrb	r3, [r0, #0]
   d5d38:	f1a3 0220 	sub.w	r2, r3, #32
   d5d3c:	2a01      	cmp	r2, #1
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5d3e:	4604      	mov	r4, r0
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5d40:	d901      	bls.n	d5d46 <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5d42:	2b23      	cmp	r3, #35	; 0x23
   d5d44:	d110      	bne.n	d5d68 <_ZN6BH175023make_forced_measurementEv+0x34>
      m_mode == forced_mode_low_res)
  {
    m_i2c.beginTransmission(m_i2c_addr);
   d5d46:	7861      	ldrb	r1, [r4, #1]
   d5d48:	6860      	ldr	r0, [r4, #4]
   d5d4a:	f001 f998 	bl	d707e <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d5d4e:	6860      	ldr	r0, [r4, #4]
   d5d50:	7821      	ldrb	r1, [r4, #0]
   d5d52:	6803      	ldr	r3, [r0, #0]
   d5d54:	689b      	ldr	r3, [r3, #8]
   d5d56:	4798      	blx	r3
    m_i2c.endTransmission();
   d5d58:	6860      	ldr	r0, [r4, #4]
   d5d5a:	f001 f99b 	bl	d7094 <_ZN7TwoWire15endTransmissionEv>

    wait_for_measurement();
   d5d5e:	4620      	mov	r0, r4
  }
}
   d5d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    m_i2c.beginTransmission(m_i2c_addr);
    m_i2c.write((uint8_t)m_mode);
    m_i2c.endTransmission();

    wait_for_measurement();
   d5d64:	f7ff bfc6 	b.w	d5cf4 <_ZN6BH175020wait_for_measurementEv>
   d5d68:	bd10      	pop	{r4, pc}

000d5d6a <_GLOBAL__sub_I__ZN6BH1750C2EhR7TwoWire>:
   d5d6a:	f000 b9b7 	b.w	d60dc <HAL_Pin_Map>

000d5d6e <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5d6e:	4770      	bx	lr

000d5d70 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5d70:	b538      	push	{r3, r4, r5, lr}
   d5d72:	4605      	mov	r5, r0
   d5d74:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5d76:	f002 f949 	bl	d800c <_Z19__fetch_global_Wirev>
   d5d7a:	7829      	ldrb	r1, [r5, #0]
   d5d7c:	f001 f97f 	bl	d707e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5d80:	f002 f944 	bl	d800c <_Z19__fetch_global_Wirev>
   d5d84:	0a21      	lsrs	r1, r4, #8
   d5d86:	f7ff ff7b 	bl	d5c80 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5d8a:	f002 f93f 	bl	d800c <_Z19__fetch_global_Wirev>
   d5d8e:	b2e1      	uxtb	r1, r4
   d5d90:	f7ff ff76 	bl	d5c80 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5d94:	f002 f93a 	bl	d800c <_Z19__fetch_global_Wirev>
}
   d5d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d5d9c:	f001 b97a 	b.w	d7094 <_ZN7TwoWire15endTransmissionEv>

000d5da0 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d5da0:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5da2:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5da6:	f7ff ffe3 	bl	d5d70 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d5daa:	200a      	movs	r0, #10
}
   d5dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d5db0:	f000 bc42 	b.w	d6638 <delay>

000d5db4 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5db4:	b538      	push	{r3, r4, r5, lr}
   d5db6:	4604      	mov	r4, r0
   d5db8:	460d      	mov	r5, r1
  Wire.begin();
   d5dba:	f002 f927 	bl	d800c <_Z19__fetch_global_Wirev>
   d5dbe:	f001 f927 	bl	d7010 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d5dc2:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d5dc4:	7025      	strb	r5, [r4, #0]
  reset();
   d5dc6:	f7ff ffeb 	bl	d5da0 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d5dca:	2001      	movs	r0, #1
   d5dcc:	bd38      	pop	{r3, r4, r5, pc}

000d5dce <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d5dce:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d5dd0:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d5dd2:	4291      	cmp	r1, r2
   d5dd4:	d00e      	beq.n	d5df4 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d5dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5dda:	4058      	eors	r0, r3
   d5ddc:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5dde:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5de2:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d5de6:	bf18      	it	ne
   d5de8:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5dec:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5dee:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5df0:	d1f5      	bne.n	d5dde <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5df2:	e7ee      	b.n	d5dd2 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d5df4:	4770      	bx	lr
	...

000d5df8 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5dfa:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5dfe:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5e00:	f7ff ffb6 	bl	d5d70 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d5e04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5e08:	f000 fc16 	bl	d6638 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d5e0c:	f002 f8fe 	bl	d800c <_Z19__fetch_global_Wirev>
   d5e10:	2206      	movs	r2, #6
   d5e12:	7821      	ldrb	r1, [r4, #0]
   d5e14:	f001 f930 	bl	d7078 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5e18:	f002 f8f8 	bl	d800c <_Z19__fetch_global_Wirev>
   d5e1c:	6803      	ldr	r3, [r0, #0]
   d5e1e:	691b      	ldr	r3, [r3, #16]
   d5e20:	4798      	blx	r3
   d5e22:	2806      	cmp	r0, #6
   d5e24:	d14a      	bne.n	d5ebc <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d5e26:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d5e28:	f002 f8f0 	bl	d800c <_Z19__fetch_global_Wirev>
   d5e2c:	6803      	ldr	r3, [r0, #0]
   d5e2e:	695b      	ldr	r3, [r3, #20]
   d5e30:	4798      	blx	r3
   d5e32:	f80d 0005 	strb.w	r0, [sp, r5]
   d5e36:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d5e38:	2d06      	cmp	r5, #6
   d5e3a:	d1f5      	bne.n	d5e28 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5e3c:	2202      	movs	r2, #2
   d5e3e:	4669      	mov	r1, sp
   d5e40:	4620      	mov	r0, r4
   d5e42:	f7ff ffc4 	bl	d5dce <_ZN14Adafruit_SHT314crc8EPKhi>
   d5e46:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d5e4a:	4285      	cmp	r5, r0
   d5e4c:	d136      	bne.n	d5ebc <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5e4e:	2202      	movs	r2, #2
   d5e50:	f10d 0103 	add.w	r1, sp, #3
   d5e54:	4620      	mov	r0, r4
   d5e56:	f7ff ffba 	bl	d5dce <_ZN14Adafruit_SHT314crc8EPKhi>
   d5e5a:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d5e5e:	4285      	cmp	r5, r0
   d5e60:	d12c      	bne.n	d5ebc <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5e62:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d5e66:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d5e6a:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5e6e:	ba40      	rev16	r0, r0
   d5e70:	b280      	uxth	r0, r0
   d5e72:	f002 fbc5 	bl	d8600 <__aeabi_ui2d>
  stemp *= 175;
   d5e76:	a318      	add	r3, pc, #96	; (adr r3, d5ed8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5e78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e7c:	f002 fc36 	bl	d86ec <__aeabi_dmul>
  stemp /= 0xffff;
   d5e80:	a311      	add	r3, pc, #68	; (adr r3, d5ec8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e86:	f002 fd5b 	bl	d8940 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d5e8a:	2200      	movs	r2, #0
   d5e8c:	4b10      	ldr	r3, [pc, #64]	; (d5ed0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d5e8e:	f002 fa79 	bl	d8384 <__aeabi_dsub>
   d5e92:	f002 ff23 	bl	d8cdc <__aeabi_d2f>
   d5e96:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d5e98:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d5e9c:	f002 fbb0 	bl	d8600 <__aeabi_ui2d>
  shum *= 100;
   d5ea0:	2200      	movs	r2, #0
   d5ea2:	4b0c      	ldr	r3, [pc, #48]	; (d5ed4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5ea4:	f002 fc22 	bl	d86ec <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d5ea8:	a307      	add	r3, pc, #28	; (adr r3, d5ec8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5eae:	f002 fd47 	bl	d8940 <__aeabi_ddiv>
   d5eb2:	f002 ff13 	bl	d8cdc <__aeabi_d2f>
   d5eb6:	6060      	str	r0, [r4, #4]
  
  return true;
   d5eb8:	2001      	movs	r0, #1
   d5eba:	e000      	b.n	d5ebe <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d5ebc:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d5ebe:	b002      	add	sp, #8
   d5ec0:	bd70      	pop	{r4, r5, r6, pc}
   d5ec2:	bf00      	nop
   d5ec4:	f3af 8000 	nop.w
   d5ec8:	00000000 	.word	0x00000000
   d5ecc:	40efffe0 	.word	0x40efffe0
   d5ed0:	40468000 	.word	0x40468000
   d5ed4:	40590000 	.word	0x40590000
   d5ed8:	00000000 	.word	0x00000000
   d5edc:	4065e000 	.word	0x4065e000

000d5ee0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d5ee0:	b510      	push	{r4, lr}
   d5ee2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5ee4:	f7ff ff88 	bl	d5df8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5ee8:	b110      	cbz	r0, d5ef0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d5eea:	ed94 0a02 	vldr	s0, [r4, #8]
   d5eee:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d5ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5ef8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d5ef4:	bd10      	pop	{r4, pc}
   d5ef6:	bf00      	nop
   d5ef8:	7fc00000 	.word	0x7fc00000

000d5efc <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d5efc:	b510      	push	{r4, lr}
   d5efe:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5f00:	f7ff ff7a 	bl	d5df8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5f04:	b110      	cbz	r0, d5f0c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d5f06:	ed94 0a01 	vldr	s0, [r4, #4]
   d5f0a:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d5f0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5f14 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d5f10:	bd10      	pop	{r4, pc}
   d5f12:	bf00      	nop
   d5f14:	7fc00000 	.word	0x7fc00000

000d5f18 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d5f18:	f000 b8e0 	b.w	d60dc <HAL_Pin_Map>

000d5f1c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <cellular_signal+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030274 	.word	0x00030274

000d5f2c <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <cellular_command+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030274 	.word	0x00030274

000d5f3c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <os_thread_is_current+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	689b      	ldr	r3, [r3, #8]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030248 	.word	0x00030248

000d5f4c <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <os_thread_yield+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	68db      	ldr	r3, [r3, #12]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030248 	.word	0x00030248

000d5f5c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <os_thread_join+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	691b      	ldr	r3, [r3, #16]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030248 	.word	0x00030248

000d5f6c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <os_thread_cleanup+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	695b      	ldr	r3, [r3, #20]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030248 	.word	0x00030248

000d5f7c <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <os_thread_scheduling+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	69db      	ldr	r3, [r3, #28]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030248 	.word	0x00030248

000d5f8c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <os_timer_create+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	6a1b      	ldr	r3, [r3, #32]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030248 	.word	0x00030248

000d5f9c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <os_timer_destroy+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030248 	.word	0x00030248

000d5fac <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <os_timer_get_id+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030248 	.word	0x00030248

000d5fbc <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <os_timer_change+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030248 	.word	0x00030248

000d5fcc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <os_mutex_recursive_create+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030248 	.word	0x00030248

000d5fdc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <os_mutex_recursive_destroy+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030248 	.word	0x00030248

000d5fec <os_timer_is_active>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <os_timer_is_active+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030248 	.word	0x00030248

000d5ffc <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <os_timer_set_id+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030248 	.word	0x00030248

000d600c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_Feature_Set+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030234 	.word	0x00030234

000d601c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <HAL_Core_System_Reset_Ex+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030234 	.word	0x00030234

000d602c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030234 	.word	0x00030234

000d603c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_RNG_GetRandomNumber+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	685b      	ldr	r3, [r3, #4]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030218 	.word	0x00030218

000d604c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <HAL_Delay_Microseconds+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	68db      	ldr	r3, [r3, #12]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030218 	.word	0x00030218

000d605c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	695b      	ldr	r3, [r3, #20]
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030218 	.word	0x00030218

000d606c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <HAL_RTC_Get_UnixTime+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	69db      	ldr	r3, [r3, #28]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030218 	.word	0x00030218

000d607c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <HAL_EEPROM_Init+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	00030218 	.word	0x00030218

000d608c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <HAL_EEPROM_Read+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	00030218 	.word	0x00030218

000d609c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <HAL_EEPROM_Get+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	00030218 	.word	0x00030218

000d60ac <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <HAL_EEPROM_Put+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	00030218 	.word	0x00030218

000d60bc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <HAL_RTC_Time_Is_Valid+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	00030218 	.word	0x00030218

000d60cc <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <hal_timer_millis+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	00030218 	.word	0x00030218

000d60dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <HAL_Pin_Map+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	681b      	ldr	r3, [r3, #0]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	0003022c 	.word	0x0003022c

000d60ec <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <HAL_Validate_Pin_Function+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	685b      	ldr	r3, [r3, #4]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	0003022c 	.word	0x0003022c

000d60fc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <HAL_Pin_Mode+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	689b      	ldr	r3, [r3, #8]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	0003022c 	.word	0x0003022c

000d610c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <HAL_Get_Pin_Mode+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	68db      	ldr	r3, [r3, #12]
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	0003022c 	.word	0x0003022c

000d611c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <HAL_GPIO_Write+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	691b      	ldr	r3, [r3, #16]
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	0003022c 	.word	0x0003022c

000d612c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <HAL_GPIO_Read+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	695b      	ldr	r3, [r3, #20]
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	0003022c 	.word	0x0003022c

000d613c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <HAL_ADC_Read+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	0003022c 	.word	0x0003022c

000d614c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <HAL_I2C_Begin+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	68db      	ldr	r3, [r3, #12]
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030228 	.word	0x00030228

000d615c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <HAL_I2C_Begin_Transmission+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	699b      	ldr	r3, [r3, #24]
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030228 	.word	0x00030228

000d616c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <HAL_I2C_End_Transmission+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	69db      	ldr	r3, [r3, #28]
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030228 	.word	0x00030228

000d617c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <HAL_I2C_Write_Data+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	6a1b      	ldr	r3, [r3, #32]
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030228 	.word	0x00030228

000d618c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <HAL_I2C_Available_Data+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030228 	.word	0x00030228

000d619c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <HAL_I2C_Read_Data+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030228 	.word	0x00030228

000d61ac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <HAL_I2C_Peek_Data+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030228 	.word	0x00030228

000d61bc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <HAL_I2C_Flush_Data+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030228 	.word	0x00030228

000d61cc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <HAL_I2C_Is_Enabled+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030228 	.word	0x00030228

000d61dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <HAL_I2C_Init+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030228 	.word	0x00030228

000d61ec <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <HAL_I2C_Acquire+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	00030228 	.word	0x00030228

000d61fc <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <HAL_I2C_Release+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	00030228 	.word	0x00030228

000d620c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <HAL_I2C_Request_Data_Ex+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	00030228 	.word	0x00030228

000d621c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <inet_inet_ntop+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	695b      	ldr	r3, [r3, #20]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	00030264 	.word	0x00030264

000d622c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <netdb_freeaddrinfo+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	689b      	ldr	r3, [r3, #8]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	00030268 	.word	0x00030268

000d623c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <netdb_getaddrinfo+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	68db      	ldr	r3, [r3, #12]
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030268 	.word	0x00030268

000d624c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <HAL_SPI_Init+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	69db      	ldr	r3, [r3, #28]
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	00030230 	.word	0x00030230

000d625c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <HAL_SPI_Is_Enabled+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	6a1b      	ldr	r3, [r3, #32]
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030230 	.word	0x00030230

000d626c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <HAL_USART_Init+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	681b      	ldr	r3, [r3, #0]
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	0003023c 	.word	0x0003023c

000d627c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <HAL_USART_Write_Data+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	68db      	ldr	r3, [r3, #12]
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	0003023c 	.word	0x0003023c

000d628c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <HAL_USART_Available_Data+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	691b      	ldr	r3, [r3, #16]
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	0003023c 	.word	0x0003023c

000d629c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <HAL_USART_Read_Data+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	695b      	ldr	r3, [r3, #20]
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	0003023c 	.word	0x0003023c

000d62ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <HAL_USART_Peek_Data+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	699b      	ldr	r3, [r3, #24]
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	0003023c 	.word	0x0003023c

000d62bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <HAL_USART_Flush_Data+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	69db      	ldr	r3, [r3, #28]
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	0003023c 	.word	0x0003023c

000d62cc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <HAL_USART_Is_Enabled+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	6a1b      	ldr	r3, [r3, #32]
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	0003023c 	.word	0x0003023c

000d62dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <HAL_USART_Available_Data_For_Write+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	0003023c 	.word	0x0003023c

000d62ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <HAL_USB_USART_Init+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	681b      	ldr	r3, [r3, #0]
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	0003024c 	.word	0x0003024c

000d62fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <HAL_USB_USART_Available_Data+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	691b      	ldr	r3, [r3, #16]
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	0003024c 	.word	0x0003024c

000d630c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d630c:	b508      	push	{r3, lr}
   d630e:	4b02      	ldr	r3, [pc, #8]	; (d6318 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	695b      	ldr	r3, [r3, #20]
   d6314:	9301      	str	r3, [sp, #4]
   d6316:	bd08      	pop	{r3, pc}
   d6318:	0003024c 	.word	0x0003024c

000d631c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b02      	ldr	r3, [pc, #8]	; (d6328 <HAL_USB_USART_Receive_Data+0xc>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	699b      	ldr	r3, [r3, #24]
   d6324:	9301      	str	r3, [sp, #4]
   d6326:	bd08      	pop	{r3, pc}
   d6328:	0003024c 	.word	0x0003024c

000d632c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d632c:	b508      	push	{r3, lr}
   d632e:	4b02      	ldr	r3, [pc, #8]	; (d6338 <HAL_USB_USART_Send_Data+0xc>)
   d6330:	681b      	ldr	r3, [r3, #0]
   d6332:	69db      	ldr	r3, [r3, #28]
   d6334:	9301      	str	r3, [sp, #4]
   d6336:	bd08      	pop	{r3, pc}
   d6338:	0003024c 	.word	0x0003024c

000d633c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b02      	ldr	r3, [pc, #8]	; (d6348 <HAL_USB_USART_Flush_Data+0xc>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	6a1b      	ldr	r3, [r3, #32]
   d6344:	9301      	str	r3, [sp, #4]
   d6346:	bd08      	pop	{r3, pc}
   d6348:	0003024c 	.word	0x0003024c

000d634c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <panic_+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	00030260 	.word	0x00030260

000d635c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <log_message+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	00030260 	.word	0x00030260

000d636c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b03      	ldr	r3, [pc, #12]	; (d637c <diag_get_source+0x10>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6376:	9301      	str	r3, [sp, #4]
   d6378:	bd08      	pop	{r3, pc}
   d637a:	0000      	.short	0x0000
   d637c:	00030260 	.word	0x00030260

000d6380 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6380:	b508      	push	{r3, lr}
   d6382:	4b02      	ldr	r3, [pc, #8]	; (d638c <system_mode+0xc>)
   d6384:	681b      	ldr	r3, [r3, #0]
   d6386:	681b      	ldr	r3, [r3, #0]
   d6388:	9301      	str	r3, [sp, #4]
   d638a:	bd08      	pop	{r3, pc}
   d638c:	00030220 	.word	0x00030220

000d6390 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6390:	b508      	push	{r3, lr}
   d6392:	4b02      	ldr	r3, [pc, #8]	; (d639c <set_system_mode+0xc>)
   d6394:	681b      	ldr	r3, [r3, #0]
   d6396:	685b      	ldr	r3, [r3, #4]
   d6398:	9301      	str	r3, [sp, #4]
   d639a:	bd08      	pop	{r3, pc}
   d639c:	00030220 	.word	0x00030220

000d63a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d63a0:	b508      	push	{r3, lr}
   d63a2:	4b02      	ldr	r3, [pc, #8]	; (d63ac <system_delay_ms+0xc>)
   d63a4:	681b      	ldr	r3, [r3, #0]
   d63a6:	695b      	ldr	r3, [r3, #20]
   d63a8:	9301      	str	r3, [sp, #4]
   d63aa:	bd08      	pop	{r3, pc}
   d63ac:	00030220 	.word	0x00030220

000d63b0 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d63b0:	b508      	push	{r3, lr}
   d63b2:	4b02      	ldr	r3, [pc, #8]	; (d63bc <system_sleep+0xc>)
   d63b4:	681b      	ldr	r3, [r3, #0]
   d63b6:	699b      	ldr	r3, [r3, #24]
   d63b8:	9301      	str	r3, [sp, #4]
   d63ba:	bd08      	pop	{r3, pc}
   d63bc:	00030220 	.word	0x00030220

000d63c0 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d63c0:	b508      	push	{r3, lr}
   d63c2:	4b02      	ldr	r3, [pc, #8]	; (d63cc <system_thread_set_state+0xc>)
   d63c4:	681b      	ldr	r3, [r3, #0]
   d63c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63c8:	9301      	str	r3, [sp, #4]
   d63ca:	bd08      	pop	{r3, pc}
   d63cc:	00030220 	.word	0x00030220

000d63d0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d63d0:	b508      	push	{r3, lr}
   d63d2:	4b02      	ldr	r3, [pc, #8]	; (d63dc <application_thread_current+0xc>)
   d63d4:	681b      	ldr	r3, [r3, #0]
   d63d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d63d8:	9301      	str	r3, [sp, #4]
   d63da:	bd08      	pop	{r3, pc}
   d63dc:	00030220 	.word	0x00030220

000d63e0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d63e0:	b508      	push	{r3, lr}
   d63e2:	4b02      	ldr	r3, [pc, #8]	; (d63ec <application_thread_invoke+0xc>)
   d63e4:	681b      	ldr	r3, [r3, #0]
   d63e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d63e8:	9301      	str	r3, [sp, #4]
   d63ea:	bd08      	pop	{r3, pc}
   d63ec:	00030220 	.word	0x00030220

000d63f0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b02      	ldr	r3, [pc, #8]	; (d63fc <system_thread_get_state+0xc>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d63f8:	9301      	str	r3, [sp, #4]
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	00030220 	.word	0x00030220

000d6400 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6400:	b508      	push	{r3, lr}
   d6402:	4b03      	ldr	r3, [pc, #12]	; (d6410 <system_ctrl_set_app_request_handler+0x10>)
   d6404:	681b      	ldr	r3, [r3, #0]
   d6406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d640a:	9301      	str	r3, [sp, #4]
   d640c:	bd08      	pop	{r3, pc}
   d640e:	0000      	.short	0x0000
   d6410:	00030220 	.word	0x00030220

000d6414 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b03      	ldr	r3, [pc, #12]	; (d6424 <system_ctrl_set_result+0x10>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d641e:	9301      	str	r3, [sp, #4]
   d6420:	bd08      	pop	{r3, pc}
   d6422:	0000      	.short	0x0000
   d6424:	00030220 	.word	0x00030220

000d6428 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d6428:	b508      	push	{r3, lr}
   d642a:	4b03      	ldr	r3, [pc, #12]	; (d6438 <system_power_management_set_config+0x10>)
   d642c:	681b      	ldr	r3, [r3, #0]
   d642e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6432:	9301      	str	r3, [sp, #4]
   d6434:	bd08      	pop	{r3, pc}
   d6436:	0000      	.short	0x0000
   d6438:	00030220 	.word	0x00030220

000d643c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d643c:	b508      	push	{r3, lr}
   d643e:	4b03      	ldr	r3, [pc, #12]	; (d644c <system_sleep_ext+0x10>)
   d6440:	681b      	ldr	r3, [r3, #0]
   d6442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6446:	9301      	str	r3, [sp, #4]
   d6448:	bd08      	pop	{r3, pc}
   d644a:	0000      	.short	0x0000
   d644c:	00030220 	.word	0x00030220

000d6450 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <spark_variable+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	681b      	ldr	r3, [r3, #0]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	00030244 	.word	0x00030244

000d6460 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <spark_function+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	685b      	ldr	r3, [r3, #4]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	00030244 	.word	0x00030244

000d6470 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <spark_process+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	689b      	ldr	r3, [r3, #8]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	00030244 	.word	0x00030244

000d6480 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <spark_cloud_flag_connect+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	68db      	ldr	r3, [r3, #12]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	00030244 	.word	0x00030244

000d6490 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <spark_cloud_flag_disconnect+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	691b      	ldr	r3, [r3, #16]
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	00030244 	.word	0x00030244

000d64a0 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <spark_cloud_flag_connected+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	695b      	ldr	r3, [r3, #20]
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030244 	.word	0x00030244

000d64b0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <spark_deviceID+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	69db      	ldr	r3, [r3, #28]
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030244 	.word	0x00030244

000d64c0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <spark_send_event+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	6a1b      	ldr	r3, [r3, #32]
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	00030244 	.word	0x00030244

000d64d0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <spark_subscribe+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	00030244 	.word	0x00030244

000d64e0 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <spark_sync_time+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	00030244 	.word	0x00030244

000d64f0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <spark_sync_time_pending+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	00030244 	.word	0x00030244

000d6500 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	00030244 	.word	0x00030244

000d6510 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <network_connect+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	685b      	ldr	r3, [r3, #4]
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	00030240 	.word	0x00030240

000d6520 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <network_connecting+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	689b      	ldr	r3, [r3, #8]
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	00030240 	.word	0x00030240

000d6530 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <network_disconnect+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	68db      	ldr	r3, [r3, #12]
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	00030240 	.word	0x00030240

000d6540 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <network_ready+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	691b      	ldr	r3, [r3, #16]
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030240 	.word	0x00030240

000d6550 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <network_on+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	695b      	ldr	r3, [r3, #20]
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030240 	.word	0x00030240

000d6560 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <network_off+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	699b      	ldr	r3, [r3, #24]
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	00030240 	.word	0x00030240

000d6570 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b02      	ldr	r3, [pc, #8]	; (d657c <network_listen+0xc>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	69db      	ldr	r3, [r3, #28]
   d6578:	9301      	str	r3, [sp, #4]
   d657a:	bd08      	pop	{r3, pc}
   d657c:	00030240 	.word	0x00030240

000d6580 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6580:	b508      	push	{r3, lr}
   d6582:	4b02      	ldr	r3, [pc, #8]	; (d658c <network_listening+0xc>)
   d6584:	681b      	ldr	r3, [r3, #0]
   d6586:	6a1b      	ldr	r3, [r3, #32]
   d6588:	9301      	str	r3, [sp, #4]
   d658a:	bd08      	pop	{r3, pc}
   d658c:	00030240 	.word	0x00030240

000d6590 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b02      	ldr	r3, [pc, #8]	; (d659c <network_set_listen_timeout+0xc>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6598:	9301      	str	r3, [sp, #4]
   d659a:	bd08      	pop	{r3, pc}
   d659c:	00030240 	.word	0x00030240

000d65a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d65a0:	b508      	push	{r3, lr}
   d65a2:	4b02      	ldr	r3, [pc, #8]	; (d65ac <network_get_listen_timeout+0xc>)
   d65a4:	681b      	ldr	r3, [r3, #0]
   d65a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d65a8:	9301      	str	r3, [sp, #4]
   d65aa:	bd08      	pop	{r3, pc}
   d65ac:	00030240 	.word	0x00030240

000d65b0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <malloc+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	681b      	ldr	r3, [r3, #0]
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	0003021c 	.word	0x0003021c

000d65c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <free+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	685b      	ldr	r3, [r3, #4]
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	0003021c 	.word	0x0003021c

000d65d0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <realloc+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	689b      	ldr	r3, [r3, #8]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	0003021c 	.word	0x0003021c

000d65e0 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <siscanf+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	699b      	ldr	r3, [r3, #24]
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	0003021c 	.word	0x0003021c

000d65f0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <snprintf+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	69db      	ldr	r3, [r3, #28]
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	0003021c 	.word	0x0003021c

000d6600 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <abort+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	0003021c 	.word	0x0003021c

000d6610 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <_malloc_r+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	0003021c 	.word	0x0003021c

000d6620 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d6620:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d6622:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d6624:	d007      	beq.n	d6636 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d6626:	9d03      	ldr	r5, [sp, #12]
   d6628:	1a44      	subs	r4, r0, r1
   d662a:	1aed      	subs	r5, r5, r3
   d662c:	436c      	muls	r4, r5
   d662e:	1a52      	subs	r2, r2, r1
   d6630:	fb94 f4f2 	sdiv	r4, r4, r2
   d6634:	18e0      	adds	r0, r4, r3
}
   d6636:	bd30      	pop	{r4, r5, pc}

000d6638 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6638:	2100      	movs	r1, #0
   d663a:	f7ff beb1 	b.w	d63a0 <system_delay_ms>

000d663e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d663e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6640:	6883      	ldr	r3, [r0, #8]
   d6642:	4604      	mov	r4, r0
   d6644:	b90b      	cbnz	r3, d664a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6646:	f001 fd4e 	bl	d80e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d664a:	68c3      	ldr	r3, [r0, #12]
   d664c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d664e:	68a3      	ldr	r3, [r4, #8]
   d6650:	b11b      	cbz	r3, d665a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6652:	2203      	movs	r2, #3
   d6654:	4621      	mov	r1, r4
   d6656:	4620      	mov	r0, r4
   d6658:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d665a:	4620      	mov	r0, r4
   d665c:	2110      	movs	r1, #16
}
   d665e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6662:	f001 bd24 	b.w	d80ae <_ZdlPvj>

000d6666 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6666:	b510      	push	{r4, lr}
   d6668:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d666a:	6800      	ldr	r0, [r0, #0]
   d666c:	b108      	cbz	r0, d6672 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d666e:	f7ff fcb5 	bl	d5fdc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6672:	4620      	mov	r0, r4
   d6674:	bd10      	pop	{r4, pc}

000d6676 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6676:	680b      	ldr	r3, [r1, #0]
   d6678:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d667a:	b113      	cbz	r3, d6682 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d667c:	685a      	ldr	r2, [r3, #4]
   d667e:	3201      	adds	r2, #1
   d6680:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6682:	4770      	bx	lr

000d6684 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6684:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6686:	4c06      	ldr	r4, [pc, #24]	; (d66a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6688:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d668a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d668c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d668e:	f7ff fc9d 	bl	d5fcc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6692:	4620      	mov	r0, r4
   d6694:	4a03      	ldr	r2, [pc, #12]	; (d66a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6696:	4904      	ldr	r1, [pc, #16]	; (d66a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d669c:	f001 bd02 	b.w	d80a4 <__aeabi_atexit>
   d66a0:	2003e330 	.word	0x2003e330
   d66a4:	2003e1b8 	.word	0x2003e1b8
   d66a8:	000d6667 	.word	0x000d6667

000d66ac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d66ac:	2200      	movs	r2, #0
   d66ae:	4611      	mov	r1, r2
   d66b0:	6840      	ldr	r0, [r0, #4]
   d66b2:	f7ff bf45 	b.w	d6540 <network_ready>

000d66b6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d66b6:	2200      	movs	r2, #0
   d66b8:	4611      	mov	r1, r2
   d66ba:	6840      	ldr	r0, [r0, #4]
   d66bc:	f7ff bf60 	b.w	d6580 <network_listening>

000d66c0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d66c0:	2200      	movs	r2, #0
   d66c2:	4611      	mov	r1, r2
   d66c4:	6840      	ldr	r0, [r0, #4]
   d66c6:	f7ff bf6b 	b.w	d65a0 <network_get_listen_timeout>

000d66ca <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d66ca:	2200      	movs	r2, #0
   d66cc:	6840      	ldr	r0, [r0, #4]
   d66ce:	f7ff bf5f 	b.w	d6590 <network_set_listen_timeout>

000d66d2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d66d2:	2200      	movs	r2, #0
   d66d4:	f081 0101 	eor.w	r1, r1, #1
   d66d8:	6840      	ldr	r0, [r0, #4]
   d66da:	f7ff bf49 	b.w	d6570 <network_listen>

000d66de <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d66de:	2300      	movs	r3, #0
   d66e0:	461a      	mov	r2, r3
   d66e2:	4619      	mov	r1, r3
   d66e4:	6840      	ldr	r0, [r0, #4]
   d66e6:	f7ff bf3b 	b.w	d6560 <network_off>

000d66ea <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d66ea:	2300      	movs	r3, #0
   d66ec:	461a      	mov	r2, r3
   d66ee:	4619      	mov	r1, r3
   d66f0:	6840      	ldr	r0, [r0, #4]
   d66f2:	f7ff bf2d 	b.w	d6550 <network_on>

000d66f6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d66f6:	2200      	movs	r2, #0
   d66f8:	4611      	mov	r1, r2
   d66fa:	6840      	ldr	r0, [r0, #4]
   d66fc:	f7ff bf10 	b.w	d6520 <network_connecting>

000d6700 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6700:	2200      	movs	r2, #0
   d6702:	2102      	movs	r1, #2
   d6704:	6840      	ldr	r0, [r0, #4]
   d6706:	f7ff bf13 	b.w	d6530 <network_disconnect>

000d670a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d670a:	2300      	movs	r3, #0
   d670c:	461a      	mov	r2, r3
   d670e:	6840      	ldr	r0, [r0, #4]
   d6710:	f7ff befe 	b.w	d6510 <network_connect>

000d6714 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6714:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6716:	4b1b      	ldr	r3, [pc, #108]	; (d6784 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6718:	6003      	str	r3, [r0, #0]
   d671a:	2500      	movs	r5, #0
   d671c:	460f      	mov	r7, r1
   d671e:	3328      	adds	r3, #40	; 0x28
   d6720:	2618      	movs	r6, #24
   d6722:	b089      	sub	sp, #36	; 0x24
   d6724:	6043      	str	r3, [r0, #4]
   d6726:	6085      	str	r5, [r0, #8]
   d6728:	60c5      	str	r5, [r0, #12]
   d672a:	4632      	mov	r2, r6
   d672c:	4629      	mov	r1, r5
   d672e:	4604      	mov	r4, r0
   d6730:	3010      	adds	r0, #16
   d6732:	f002 fc3c 	bl	d8fae <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6736:	462a      	mov	r2, r5
   d6738:	4629      	mov	r1, r5
   d673a:	6878      	ldr	r0, [r7, #4]
   d673c:	f7ff ff00 	bl	d6540 <network_ready>
   d6740:	b908      	cbnz	r0, d6746 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d6742:	60a0      	str	r0, [r4, #8]
            return sig;
   d6744:	e01b      	b.n	d677e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6746:	4629      	mov	r1, r5
   d6748:	4632      	mov	r2, r6
   d674a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d674c:	9500      	str	r5, [sp, #0]
   d674e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6750:	f002 fc2d 	bl	d8fae <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6754:	a902      	add	r1, sp, #8
   d6756:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6758:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d675c:	f7ff fbde 	bl	d5f1c <cellular_signal>
   d6760:	b110      	cbz	r0, d6768 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d6762:	2301      	movs	r3, #1
   d6764:	60a3      	str	r3, [r4, #8]
            return sig;
   d6766:	e00a      	b.n	d677e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6768:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d676a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d676c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d676e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6770:	b90b      	cbnz	r3, d6776 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d6772:	2302      	movs	r3, #2
   d6774:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d6776:	a902      	add	r1, sp, #8
   d6778:	4620      	mov	r0, r4
   d677a:	f000 f889 	bl	d6890 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d677e:	4620      	mov	r0, r4
   d6780:	b009      	add	sp, #36	; 0x24
   d6782:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6784:	000dbad4 	.word	0x000dbad4

000d6788 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6788:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d678a:	4c08      	ldr	r4, [pc, #32]	; (d67ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d678c:	2528      	movs	r5, #40	; 0x28
   d678e:	462a      	mov	r2, r5
   d6790:	2100      	movs	r1, #0
   d6792:	4620      	mov	r0, r4
   d6794:	f002 fc0b 	bl	d8fae <memset>
        cid = -1;
   d6798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d679c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d679e:	4b04      	ldr	r3, [pc, #16]	; (d67b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d67a0:	8025      	strh	r5, [r4, #0]
   d67a2:	2204      	movs	r2, #4
   d67a4:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d67a6:	4a03      	ldr	r2, [pc, #12]	; (d67b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d67a8:	601a      	str	r2, [r3, #0]
   d67aa:	bd38      	pop	{r3, r4, r5, pc}
   d67ac:	2003e33c 	.word	0x2003e33c
   d67b0:	2003e334 	.word	0x2003e334
   d67b4:	000dbaa0 	.word	0x000dbaa0

000d67b8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d67b8:	4770      	bx	lr

000d67ba <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d67ba:	7d00      	ldrb	r0, [r0, #20]
   d67bc:	4770      	bx	lr
	...

000d67c0 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d67c0:	7d03      	ldrb	r3, [r0, #20]
   d67c2:	b11b      	cbz	r3, d67cc <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d67c4:	6983      	ldr	r3, [r0, #24]
   d67c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d67ca:	d102      	bne.n	d67d2 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d67cc:	ed9f 0a05 	vldr	s0, [pc, #20]	; d67e4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d67d0:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d67d2:	ee07 3a90 	vmov	s15, r3
   d67d6:	ed9f 7a04 	vldr	s14, [pc, #16]	; d67e8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d67da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d67de:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d67e2:	4770      	bx	lr
   d67e4:	00000000 	.word	0x00000000
   d67e8:	42c80000 	.word	0x42c80000

000d67ec <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d67ec:	7d03      	ldrb	r3, [r0, #20]
   d67ee:	b11b      	cbz	r3, d67f8 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d67f0:	6a03      	ldr	r3, [r0, #32]
   d67f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d67f6:	d102      	bne.n	d67fe <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d67f8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6810 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d67fc:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d67fe:	ee07 3a90 	vmov	s15, r3
   d6802:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6814 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d6806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d680a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d680e:	4770      	bx	lr
   d6810:	00000000 	.word	0x00000000
   d6814:	42c80000 	.word	0x42c80000

000d6818 <_ZN14CellularSignalD0Ev>:
   d6818:	b510      	push	{r4, lr}
   d681a:	2128      	movs	r1, #40	; 0x28
   d681c:	4604      	mov	r4, r0
   d681e:	f001 fc46 	bl	d80ae <_ZdlPvj>
   d6822:	4620      	mov	r0, r4
   d6824:	bd10      	pop	{r4, pc}
	...

000d6828 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6828:	7d03      	ldrb	r3, [r0, #20]
   d682a:	b17b      	cbz	r3, d684c <_ZNK14CellularSignal10getQualityEv+0x24>
   d682c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d682e:	2b00      	cmp	r3, #0
   d6830:	db0c      	blt.n	d684c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d6832:	ee07 3a90 	vmov	s15, r3
   d6836:	eddf 6a07 	vldr	s13, [pc, #28]	; d6854 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d683a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6858 <_ZNK14CellularSignal10getQualityEv+0x30>
   d683e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6842:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6846:	ee27 0a80 	vmul.f32	s0, s15, s0
   d684a:	4770      	bx	lr
    }

    return -1.0f;
   d684c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6850:	4770      	bx	lr
   d6852:	bf00      	nop
   d6854:	477fff00 	.word	0x477fff00
   d6858:	42c80000 	.word	0x42c80000

000d685c <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d685c:	7d03      	ldrb	r3, [r0, #20]
   d685e:	b17b      	cbz	r3, d6880 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d6860:	69c3      	ldr	r3, [r0, #28]
   d6862:	2b00      	cmp	r3, #0
   d6864:	db0c      	blt.n	d6880 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d6866:	ee07 3a90 	vmov	s15, r3
   d686a:	eddf 6a07 	vldr	s13, [pc, #28]	; d6888 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d686e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d688c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d6872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6876:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d687a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d687e:	4770      	bx	lr
    }

    return -1.0f;
   d6880:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6884:	4770      	bx	lr
   d6886:	bf00      	nop
   d6888:	477fff00 	.word	0x477fff00
   d688c:	42c80000 	.word	0x42c80000

000d6890 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d6890:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d6892:	460d      	mov	r5, r1
   d6894:	f100 0410 	add.w	r4, r0, #16
   d6898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d689a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d689c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d68a0:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d68a4:	2001      	movs	r0, #1
   d68a6:	bd30      	pop	{r4, r5, pc}

000d68a8 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d68a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d68ac:	4607      	mov	r7, r0
   d68ae:	460c      	mov	r4, r1
{
    if (base == 0) {
   d68b0:	4615      	mov	r5, r2
   d68b2:	b92a      	cbnz	r2, d68c0 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d68b4:	6803      	ldr	r3, [r0, #0]
   d68b6:	b2c9      	uxtb	r1, r1
   d68b8:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d68ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d68be:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d68c0:	2900      	cmp	r1, #0
   d68c2:	da07      	bge.n	d68d4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d68c4:	2a0a      	cmp	r2, #10
   d68c6:	d105      	bne.n	d68d4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d68c8:	212d      	movs	r1, #45	; 0x2d
   d68ca:	f000 fea3 	bl	d7614 <_ZN5Print5printEc>
            val = -n;
   d68ce:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d68d0:	4606      	mov	r6, r0
            val = -n;
   d68d2:	e001      	b.n	d68d8 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d68d4:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d68d6:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d68d8:	b2ea      	uxtb	r2, r5
   d68da:	4638      	mov	r0, r7
   d68dc:	f000 feb3 	bl	d7646 <_ZN5Print11printNumberEmh>
    }
}
   d68e0:	4430      	add	r0, r6
   d68e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d68e6 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d68e6:	b570      	push	{r4, r5, r6, lr}
   d68e8:	460d      	mov	r5, r1
   d68ea:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d68ec:	220a      	movs	r2, #10
   d68ee:	6881      	ldr	r1, [r0, #8]
   d68f0:	4628      	mov	r0, r5
   d68f2:	f7ff ffd9 	bl	d68a8 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d68f6:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d68f8:	4604      	mov	r4, r0
    n += p.print(',');
   d68fa:	4628      	mov	r0, r5
   d68fc:	f000 fe8a 	bl	d7614 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d6900:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d6902:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d6904:	68f1      	ldr	r1, [r6, #12]
   d6906:	4628      	mov	r0, r5
   d6908:	f7ff ffce 	bl	d68a8 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d690c:	4420      	add	r0, r4
   d690e:	bd70      	pop	{r4, r5, r6, pc}

000d6910 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d6910:	f1a0 0004 	sub.w	r0, r0, #4
   d6914:	f7ff bfe7 	b.w	d68e6 <_ZNK14CellularSignal7printToER5Print>

000d6918 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6918:	4770      	bx	lr

000d691a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d691a:	2000      	movs	r0, #0
   d691c:	4770      	bx	lr

000d691e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d691e:	b510      	push	{r4, lr}
   d6920:	2110      	movs	r1, #16
   d6922:	4604      	mov	r4, r0
   d6924:	f001 fbc3 	bl	d80ae <_ZdlPvj>
   d6928:	4620      	mov	r0, r4
   d692a:	bd10      	pop	{r4, pc}

000d692c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d692c:	b508      	push	{r3, lr}
      { delete this; }
   d692e:	b108      	cbz	r0, d6934 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6930:	f7ff fff5 	bl	d691e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6934:	bd08      	pop	{r3, pc}

000d6936 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6936:	2200      	movs	r2, #0
   d6938:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d693a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d693c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6940:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6942:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6946:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6948:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d694a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d694c:	680c      	ldr	r4, [r1, #0]
   d694e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6950:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6952:	bd10      	pop	{r4, pc}

000d6954 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6954:	b510      	push	{r4, lr}
   d6956:	4604      	mov	r4, r0
    free((void*)msg_);
   d6958:	6800      	ldr	r0, [r0, #0]
   d695a:	f7ff fe31 	bl	d65c0 <free>
}
   d695e:	4620      	mov	r0, r4
   d6960:	bd10      	pop	{r4, pc}

000d6962 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6962:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6964:	68c4      	ldr	r4, [r0, #12]
   d6966:	b1f4      	cbz	r4, d69a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6968:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d696a:	2b02      	cmp	r3, #2
   d696c:	d103      	bne.n	d6976 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d696e:	f104 000c 	add.w	r0, r4, #12
   d6972:	f7ff ffef 	bl	d6954 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6976:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6978:	b135      	cbz	r5, d6988 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d697a:	4628      	mov	r0, r5
   d697c:	f7fd fc0d 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d6980:	2110      	movs	r1, #16
   d6982:	4628      	mov	r0, r5
   d6984:	f001 fb93 	bl	d80ae <_ZdlPvj>
   d6988:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d698a:	b135      	cbz	r5, d699a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d698c:	4628      	mov	r0, r5
   d698e:	f7fd fc04 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d6992:	2110      	movs	r1, #16
   d6994:	4628      	mov	r0, r5
   d6996:	f001 fb8a 	bl	d80ae <_ZdlPvj>
   d699a:	4620      	mov	r0, r4
   d699c:	2114      	movs	r1, #20
   d699e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d69a2:	f001 bb84 	b.w	d80ae <_ZdlPvj>
   d69a6:	bd38      	pop	{r3, r4, r5, pc}

000d69a8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d69a8:	b510      	push	{r4, lr}
   d69aa:	b088      	sub	sp, #32
   d69ac:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d69ae:	4668      	mov	r0, sp
   d69b0:	f000 fed2 	bl	d7758 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d69b4:	4669      	mov	r1, sp
   d69b6:	a804      	add	r0, sp, #16
   d69b8:	f000 fef0 	bl	d779c <_ZN6StringC1ERKS_>
   d69bc:	a804      	add	r0, sp, #16
   d69be:	47a0      	blx	r4
   d69c0:	4604      	mov	r4, r0
   d69c2:	a804      	add	r0, sp, #16
   d69c4:	f000 fe81 	bl	d76ca <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d69c8:	4668      	mov	r0, sp
   d69ca:	f000 fe7e 	bl	d76ca <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d69ce:	4620      	mov	r0, r4
   d69d0:	b008      	add	sp, #32
   d69d2:	bd10      	pop	{r4, pc}

000d69d4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d69d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d69d6:	2410      	movs	r4, #16
   d69d8:	b085      	sub	sp, #20
   d69da:	4607      	mov	r7, r0
   d69dc:	460e      	mov	r6, r1
   d69de:	4615      	mov	r5, r2
   d69e0:	2100      	movs	r1, #0
   d69e2:	4622      	mov	r2, r4
   d69e4:	4668      	mov	r0, sp
   d69e6:	f002 fae2 	bl	d8fae <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d69ea:	2200      	movs	r2, #0
   d69ec:	4669      	mov	r1, sp
   d69ee:	4610      	mov	r0, r2
         size = sizeof(*this);
   d69f0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d69f4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d69f6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d69f8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d69fa:	f7ff fd31 	bl	d6460 <spark_function>
}
   d69fe:	b005      	add	sp, #20
   d6a00:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a02 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6a02:	b513      	push	{r0, r1, r4, lr}
   d6a04:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6a06:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6a0a:	2300      	movs	r3, #0
   d6a0c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6a0e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6a10:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6a12:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a14:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6a16:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6a18:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a1a:	f7fd ff59 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a1e:	4620      	mov	r0, r4
   d6a20:	b002      	add	sp, #8
   d6a22:	bd10      	pop	{r4, pc}

000d6a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a26:	460c      	mov	r4, r1
   d6a28:	ad02      	add	r5, sp, #8
   d6a2a:	f854 3b04 	ldr.w	r3, [r4], #4
   d6a2e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6a32:	4606      	mov	r6, r0
   d6a34:	460f      	mov	r7, r1
   d6a36:	a801      	add	r0, sp, #4
   d6a38:	4621      	mov	r1, r4
   d6a3a:	f7ff fe1c 	bl	d6676 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6a3e:	4629      	mov	r1, r5
   d6a40:	4630      	mov	r0, r6
   d6a42:	f7ff ffde 	bl	d6a02 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a46:	a801      	add	r0, sp, #4
   d6a48:	f7fd ff42 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	f7fd ff3f 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6a52:	4638      	mov	r0, r7
   d6a54:	2108      	movs	r1, #8
   d6a56:	f001 fb2a 	bl	d80ae <_ZdlPvj>
        return p;
    }
   d6a5a:	4630      	mov	r0, r6
   d6a5c:	b003      	add	sp, #12
   d6a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a60 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6a60:	b513      	push	{r0, r1, r4, lr}
   d6a62:	460b      	mov	r3, r1
   d6a64:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a66:	c803      	ldmia	r0, {r0, r1}
   d6a68:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6a6c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6a70:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6a74:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6a78:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6a7c:	b002      	add	sp, #8
   d6a7e:	bd10      	pop	{r4, pc}

000d6a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a80:	b538      	push	{r3, r4, r5, lr}
   d6a82:	2300      	movs	r3, #0
   d6a84:	4604      	mov	r4, r0
   d6a86:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a88:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a8a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a8c:	f7fd fb05 	bl	d409a <_Znwj>
   d6a90:	b128      	cbz	r0, d6a9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6a92:	2301      	movs	r3, #1
   d6a94:	6043      	str	r3, [r0, #4]
   d6a96:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6a98:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6a9a:	6003      	str	r3, [r0, #0]
   d6a9c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a9e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6aa0:	4620      	mov	r0, r4
   d6aa2:	bd38      	pop	{r3, r4, r5, pc}
   d6aa4:	000dbb08 	.word	0x000dbb08

000d6aa8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6aa8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6aaa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6aac:	b90a      	cbnz	r2, d6ab2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6aae:	f001 fb1a 	bl	d80e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ab2:	68c3      	ldr	r3, [r0, #12]
    }
   d6ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ab8:	4718      	bx	r3

000d6aba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6aba:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6abc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6abe:	f100 0110 	add.w	r1, r0, #16
   d6ac2:	f7ff fff1 	bl	d6aa8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6ac6:	bd08      	pop	{r3, pc}

000d6ac8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ac8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6aca:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6acc:	b90a      	cbnz	r2, d6ad2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6ace:	f001 fb0a 	bl	d80e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ad2:	68c3      	ldr	r3, [r0, #12]
    }
   d6ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ad8:	4718      	bx	r3

000d6ada <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6ada:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6adc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6ade:	f100 0110 	add.w	r1, r0, #16
   d6ae2:	f7ff fff1 	bl	d6ac8 <_ZNKSt8functionIFvRKbEEclES1_>
   d6ae6:	bd08      	pop	{r3, pc}

000d6ae8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ae8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6aea:	2300      	movs	r3, #0
   d6aec:	6083      	str	r3, [r0, #8]
   d6aee:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6af0:	4604      	mov	r4, r0
   d6af2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6af4:	b12b      	cbz	r3, d6b02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6af6:	2202      	movs	r2, #2
   d6af8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6afa:	68eb      	ldr	r3, [r5, #12]
   d6afc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6afe:	68ab      	ldr	r3, [r5, #8]
   d6b00:	60a3      	str	r3, [r4, #8]
	}
    }
   d6b02:	4620      	mov	r0, r4
   d6b04:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b0a:	b089      	sub	sp, #36	; 0x24
   d6b0c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6b0e:	4668      	mov	r0, sp
   d6b10:	f7ff ff11 	bl	d6936 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6b14:	2300      	movs	r3, #0
   d6b16:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6b1a:	f04f 0202 	mov.w	r2, #2
   d6b1e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6b22:	2b00      	cmp	r3, #0
   d6b24:	d103      	bne.n	d6b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6b26:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6b2a:	2900      	cmp	r1, #0
   d6b2c:	d1f7      	bne.n	d6b1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6b2e:	d002      	beq.n	d6b36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6b30:	f88d 3008 	strb.w	r3, [sp, #8]
   d6b34:	e063      	b.n	d6bfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6b36:	f114 050c 	adds.w	r5, r4, #12
   d6b3a:	d003      	beq.n	d6b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6b3c:	4669      	mov	r1, sp
   d6b3e:	4628      	mov	r0, r5
   d6b40:	f7ff fef9 	bl	d6936 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6b44:	f3bf 8f5f 	dmb	sy
   d6b48:	2301      	movs	r3, #1
   d6b4a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6b4c:	2000      	movs	r0, #0
   d6b4e:	f104 0308 	add.w	r3, r4, #8
   d6b52:	f3bf 8f5f 	dmb	sy
   d6b56:	e853 6f00 	ldrex	r6, [r3]
   d6b5a:	e843 0200 	strex	r2, r0, [r3]
   d6b5e:	2a00      	cmp	r2, #0
   d6b60:	d1f9      	bne.n	d6b56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6b62:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6b66:	2e00      	cmp	r6, #0
   d6b68:	d049      	beq.n	d6bfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6b6a:	f7ff fc31 	bl	d63d0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6b6e:	b120      	cbz	r0, d6b7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6b70:	4629      	mov	r1, r5
   d6b72:	4630      	mov	r0, r6
   d6b74:	f7ff ff98 	bl	d6aa8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6b78:	e03a      	b.n	d6bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b7a:	4631      	mov	r1, r6
   d6b7c:	a802      	add	r0, sp, #8
   d6b7e:	f7ff ffb3 	bl	d6ae8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6b82:	68e0      	ldr	r0, [r4, #12]
   d6b84:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6b88:	b108      	cbz	r0, d6b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6b8a:	f002 fa53 	bl	d9034 <strdup>
   d6b8e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6b90:	2010      	movs	r0, #16
   d6b92:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6b96:	f7fd fa80 	bl	d409a <_Znwj>
   d6b9a:	4605      	mov	r5, r0
   d6b9c:	b1e8      	cbz	r0, d6bda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b9e:	2700      	movs	r7, #0
   d6ba0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ba2:	2018      	movs	r0, #24
   d6ba4:	f7fd fa79 	bl	d409a <_Znwj>
   d6ba8:	4604      	mov	r4, r0
   d6baa:	b188      	cbz	r0, d6bd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6bac:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6bae:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6bb0:	a802      	add	r0, sp, #8
   d6bb2:	f7ff ff55 	bl	d6a60 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bb6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6bb8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bbc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6bbe:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6bc0:	a906      	add	r1, sp, #24
   d6bc2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bc4:	60e3      	str	r3, [r4, #12]
   d6bc6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6bca:	9205      	str	r2, [sp, #20]
   d6bcc:	f7ff feb3 	bl	d6936 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6bd0:	4b0d      	ldr	r3, [pc, #52]	; (d6c08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6bd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6bd4:	4b0d      	ldr	r3, [pc, #52]	; (d6c0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6bd6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6bd8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6bda:	a806      	add	r0, sp, #24
   d6bdc:	f7ff feba 	bl	d6954 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6be0:	a802      	add	r0, sp, #8
   d6be2:	f7fd fada 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6be6:	2200      	movs	r2, #0
   d6be8:	4629      	mov	r1, r5
   d6bea:	4809      	ldr	r0, [pc, #36]	; (d6c10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6bec:	f7ff fbf8 	bl	d63e0 <application_thread_invoke>
   d6bf0:	4630      	mov	r0, r6
   d6bf2:	f7fd fad2 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6bf6:	2110      	movs	r1, #16
   d6bf8:	4630      	mov	r0, r6
   d6bfa:	f001 fa58 	bl	d80ae <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6bfe:	4668      	mov	r0, sp
   d6c00:	f7ff fea8 	bl	d6954 <_ZN8particle5ErrorD1Ev>
    }
   d6c04:	b009      	add	sp, #36	; 0x24
   d6c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c08:	000d6abb 	.word	0x000d6abb
   d6c0c:	000d6d31 	.word	0x000d6d31
   d6c10:	000d663f 	.word	0x000d663f

000d6c14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c18:	b08b      	sub	sp, #44	; 0x2c
   d6c1a:	4606      	mov	r6, r0
   d6c1c:	460f      	mov	r7, r1
   d6c1e:	4690      	mov	r8, r2
   d6c20:	4699      	mov	r9, r3
   d6c22:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6c26:	f7ff fc3b 	bl	d64a0 <spark_cloud_flag_connected>
   d6c2a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6c2c:	4683      	mov	fp, r0
   d6c2e:	bb30      	cbnz	r0, d6c7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6c30:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6c34:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6c36:	a905      	add	r1, sp, #20
   d6c38:	4628      	mov	r0, r5
   d6c3a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6c3e:	f7ff fe7a 	bl	d6936 <_ZN8particle5ErrorC1EOS0_>
   d6c42:	2014      	movs	r0, #20
   d6c44:	f7fd fa29 	bl	d409a <_Znwj>
   d6c48:	4604      	mov	r4, r0
   d6c4a:	b158      	cbz	r0, d6c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6c4c:	2302      	movs	r3, #2
   d6c4e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c50:	2301      	movs	r3, #1
   d6c52:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6c54:	f8c0 b004 	str.w	fp, [r0, #4]
   d6c58:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6c5c:	4629      	mov	r1, r5
   d6c5e:	300c      	adds	r0, #12
   d6c60:	f7ff fe69 	bl	d6936 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6c64:	4630      	mov	r0, r6
   d6c66:	4621      	mov	r1, r4
   d6c68:	f840 4b04 	str.w	r4, [r0], #4
   d6c6c:	f7ff ff08 	bl	d6a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6c70:	4628      	mov	r0, r5
   d6c72:	f7ff fe6f 	bl	d6954 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6c76:	a805      	add	r0, sp, #20
   d6c78:	f7ff fe6c 	bl	d6954 <_ZN8particle5ErrorD1Ev>
   d6c7c:	e052      	b.n	d6d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6c7e:	2400      	movs	r4, #0
   d6c80:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6c82:	2014      	movs	r0, #20
   d6c84:	606c      	str	r4, [r5, #4]
   d6c86:	60ac      	str	r4, [r5, #8]
   d6c88:	9307      	str	r3, [sp, #28]
   d6c8a:	f7fd fa06 	bl	d409a <_Znwj>
   d6c8e:	4601      	mov	r1, r0
   d6c90:	b118      	cbz	r0, d6c9a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6c92:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c94:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6c96:	6044      	str	r4, [r0, #4]
   d6c98:	6084      	str	r4, [r0, #8]
   d6c9a:	a804      	add	r0, sp, #16
   d6c9c:	9103      	str	r1, [sp, #12]
   d6c9e:	f7ff feef 	bl	d6a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6ca2:	4b22      	ldr	r3, [pc, #136]	; (d6d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6ca4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6ca6:	2008      	movs	r0, #8
   d6ca8:	f7fd f9f7 	bl	d409a <_Znwj>
   d6cac:	4604      	mov	r4, r0
   d6cae:	b128      	cbz	r0, d6cbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6cb0:	9b03      	ldr	r3, [sp, #12]
   d6cb2:	f840 3b04 	str.w	r3, [r0], #4
   d6cb6:	a904      	add	r1, sp, #16
   d6cb8:	f7ff fcdd 	bl	d6676 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6cbc:	9500      	str	r5, [sp, #0]
   d6cbe:	fa5f f38a 	uxtb.w	r3, sl
   d6cc2:	464a      	mov	r2, r9
   d6cc4:	4641      	mov	r1, r8
   d6cc6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6cc8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6cca:	f7ff fbf9 	bl	d64c0 <spark_send_event>
   d6cce:	b920      	cbnz	r0, d6cda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6cd0:	9b03      	ldr	r3, [sp, #12]
   d6cd2:	785b      	ldrb	r3, [r3, #1]
   d6cd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6cd8:	b183      	cbz	r3, d6cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6cda:	9b03      	ldr	r3, [sp, #12]
   d6cdc:	9305      	str	r3, [sp, #20]
   d6cde:	a904      	add	r1, sp, #16
   d6ce0:	a806      	add	r0, sp, #24
   d6ce2:	f7ff fcc8 	bl	d6676 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6ce6:	a905      	add	r1, sp, #20
   d6ce8:	4630      	mov	r0, r6
   d6cea:	f7ff fe8a 	bl	d6a02 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6cee:	a806      	add	r0, sp, #24
   d6cf0:	f7fd fdee 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cf4:	a804      	add	r0, sp, #16
   d6cf6:	f7fd fdeb 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cfa:	e013      	b.n	d6d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6cfc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6d00:	a905      	add	r1, sp, #20
   d6d02:	a803      	add	r0, sp, #12
   d6d04:	9205      	str	r2, [sp, #20]
   d6d06:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6d0a:	f7ff fefd 	bl	d6b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6d0e:	a805      	add	r0, sp, #20
   d6d10:	f7ff fe20 	bl	d6954 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6d14:	a805      	add	r0, sp, #20
   d6d16:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6d18:	f7ff fe84 	bl	d6a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6d1c:	a806      	add	r0, sp, #24
   d6d1e:	f7fd fdd7 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d22:	e7da      	b.n	d6cda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6d24:	4630      	mov	r0, r6
   d6d26:	b00b      	add	sp, #44	; 0x2c
   d6d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d2c:	000d6ea1 	.word	0x000d6ea1

000d6d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6d30:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d34:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6d36:	d006      	beq.n	d6d46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6d38:	2a03      	cmp	r2, #3
   d6d3a:	d017      	beq.n	d6d6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6d3c:	2a01      	cmp	r2, #1
   d6d3e:	d122      	bne.n	d6d86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6d40:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6d42:	6003      	str	r3, [r0, #0]
	      break;
   d6d44:	e01f      	b.n	d6d86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6d46:	2018      	movs	r0, #24
   d6d48:	680e      	ldr	r6, [r1, #0]
   d6d4a:	f7fd f9a6 	bl	d409a <_Znwj>
   d6d4e:	4605      	mov	r5, r0
   d6d50:	b150      	cbz	r0, d6d68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6d52:	4631      	mov	r1, r6
   d6d54:	f7ff fec8 	bl	d6ae8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6d58:	6930      	ldr	r0, [r6, #16]
   d6d5a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6d5e:	b108      	cbz	r0, d6d64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6d60:	f002 f968 	bl	d9034 <strdup>
   d6d64:	6128      	str	r0, [r5, #16]
   d6d66:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6d68:	6025      	str	r5, [r4, #0]
   d6d6a:	e00c      	b.n	d6d86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d6c:	6804      	ldr	r4, [r0, #0]
   d6d6e:	b154      	cbz	r4, d6d86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6d70:	f104 0010 	add.w	r0, r4, #16
   d6d74:	f7ff fdee 	bl	d6954 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d78:	4620      	mov	r0, r4
   d6d7a:	f7fd fa0e 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d7e:	2118      	movs	r1, #24
   d6d80:	4620      	mov	r0, r4
   d6d82:	f001 f994 	bl	d80ae <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6d86:	2000      	movs	r0, #0
   d6d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d8a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d8a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d8c:	2300      	movs	r3, #0
   d6d8e:	6083      	str	r3, [r0, #8]
   d6d90:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d92:	4604      	mov	r4, r0
   d6d94:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6d96:	b12b      	cbz	r3, d6da4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6d98:	2202      	movs	r2, #2
   d6d9a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6d9c:	68eb      	ldr	r3, [r5, #12]
   d6d9e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6da0:	68ab      	ldr	r3, [r5, #8]
   d6da2:	60a3      	str	r3, [r4, #8]
	}
    }
   d6da4:	4620      	mov	r0, r4
   d6da6:	bd38      	pop	{r3, r4, r5, pc}

000d6da8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6da8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6daa:	b570      	push	{r4, r5, r6, lr}
   d6dac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6dae:	d006      	beq.n	d6dbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6db0:	2a03      	cmp	r2, #3
   d6db2:	d011      	beq.n	d6dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6db4:	2a01      	cmp	r2, #1
   d6db6:	d118      	bne.n	d6dea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6db8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6dba:	6003      	str	r3, [r0, #0]
	      break;
   d6dbc:	e015      	b.n	d6dea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6dbe:	2014      	movs	r0, #20
   d6dc0:	680e      	ldr	r6, [r1, #0]
   d6dc2:	f7fd f96a 	bl	d409a <_Znwj>
   d6dc6:	4605      	mov	r5, r0
   d6dc8:	b120      	cbz	r0, d6dd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6dca:	4631      	mov	r1, r6
   d6dcc:	f7ff ffdd 	bl	d6d8a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6dd0:	7c33      	ldrb	r3, [r6, #16]
   d6dd2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6dd4:	6025      	str	r5, [r4, #0]
   d6dd6:	e008      	b.n	d6dea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6dd8:	6804      	ldr	r4, [r0, #0]
   d6dda:	b134      	cbz	r4, d6dea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ddc:	4620      	mov	r0, r4
   d6dde:	f7fd f9dc 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6de2:	2114      	movs	r1, #20
   d6de4:	4620      	mov	r0, r4
   d6de6:	f001 f962 	bl	d80ae <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6dea:	2000      	movs	r0, #0
   d6dec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6df0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6df0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6df2:	2300      	movs	r3, #0
   d6df4:	b087      	sub	sp, #28
   d6df6:	460c      	mov	r4, r1
   d6df8:	f3bf 8f5f 	dmb	sy
   d6dfc:	e850 6f00 	ldrex	r6, [r0]
   d6e00:	e840 3200 	strex	r2, r3, [r0]
   d6e04:	2a00      	cmp	r2, #0
   d6e06:	d1f9      	bne.n	d6dfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6e08:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6e0c:	2e00      	cmp	r6, #0
   d6e0e:	d03f      	beq.n	d6e90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6e10:	4618      	mov	r0, r3
   d6e12:	f7ff fadd 	bl	d63d0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6e16:	4607      	mov	r7, r0
   d6e18:	b120      	cbz	r0, d6e24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6e1a:	4621      	mov	r1, r4
   d6e1c:	4630      	mov	r0, r6
   d6e1e:	f7ff fe53 	bl	d6ac8 <_ZNKSt8functionIFvRKbEEclES1_>
   d6e22:	e02e      	b.n	d6e82 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6e24:	4631      	mov	r1, r6
   d6e26:	a801      	add	r0, sp, #4
   d6e28:	f7ff ffaf 	bl	d6d8a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6e2c:	7823      	ldrb	r3, [r4, #0]
   d6e2e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6e32:	2010      	movs	r0, #16
   d6e34:	f7fd f931 	bl	d409a <_Znwj>
   d6e38:	4605      	mov	r5, r0
   d6e3a:	b1d0      	cbz	r0, d6e72 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e3c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e3e:	2014      	movs	r0, #20
   d6e40:	f7fd f92b 	bl	d409a <_Znwj>
   d6e44:	4604      	mov	r4, r0
   d6e46:	b178      	cbz	r0, d6e68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e48:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6e4a:	4601      	mov	r1, r0
   d6e4c:	a801      	add	r0, sp, #4
   d6e4e:	f7ff fe07 	bl	d6a60 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e52:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6e54:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e56:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e58:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6e5a:	9203      	str	r2, [sp, #12]
   d6e5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e5e:	60e3      	str	r3, [r4, #12]
   d6e60:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6e64:	9204      	str	r2, [sp, #16]
   d6e66:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6e68:	4b0a      	ldr	r3, [pc, #40]	; (d6e94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6e6a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e6c:	4b0a      	ldr	r3, [pc, #40]	; (d6e98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e6e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6e70:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e72:	a801      	add	r0, sp, #4
   d6e74:	f7fd f991 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e78:	2200      	movs	r2, #0
   d6e7a:	4629      	mov	r1, r5
   d6e7c:	4807      	ldr	r0, [pc, #28]	; (d6e9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6e7e:	f7ff faaf 	bl	d63e0 <application_thread_invoke>
   d6e82:	4630      	mov	r0, r6
   d6e84:	f7fd f989 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6e88:	2110      	movs	r1, #16
   d6e8a:	4630      	mov	r0, r6
   d6e8c:	f001 f90f 	bl	d80ae <_ZdlPvj>
        }
    }
   d6e90:	b007      	add	sp, #28
   d6e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e94:	000d6adb 	.word	0x000d6adb
   d6e98:	000d6da9 	.word	0x000d6da9
   d6e9c:	000d663f 	.word	0x000d663f

000d6ea0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6ea0:	b530      	push	{r4, r5, lr}
   d6ea2:	b085      	sub	sp, #20
   d6ea4:	4604      	mov	r4, r0
   d6ea6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6ea8:	4668      	mov	r0, sp
   d6eaa:	4611      	mov	r1, r2
   d6eac:	f7ff fdba 	bl	d6a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6eb0:	b17c      	cbz	r4, d6ed2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6eb2:	b224      	sxth	r4, r4
   d6eb4:	4628      	mov	r0, r5
   d6eb6:	b10d      	cbz	r5, d6ebc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6eb8:	f002 f8bc 	bl	d9034 <strdup>
   d6ebc:	9002      	str	r0, [sp, #8]
   d6ebe:	a902      	add	r1, sp, #8
   d6ec0:	4668      	mov	r0, sp
   d6ec2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6ec6:	f7ff fe1f 	bl	d6b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6eca:	a802      	add	r0, sp, #8
   d6ecc:	f7ff fd42 	bl	d6954 <_ZN8particle5ErrorD1Ev>
   d6ed0:	e01d      	b.n	d6f0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6ed2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6ed4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6ed8:	f04f 0201 	mov.w	r2, #1
   d6edc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6ee0:	42a3      	cmp	r3, r4
   d6ee2:	d103      	bne.n	d6eec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6ee4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6ee8:	2900      	cmp	r1, #0
   d6eea:	d1f7      	bne.n	d6edc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6eec:	d002      	beq.n	d6ef4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6eee:	f88d 3008 	strb.w	r3, [sp, #8]
   d6ef2:	e00c      	b.n	d6f0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6ef4:	f110 010c 	adds.w	r1, r0, #12
   d6ef8:	f04f 0301 	mov.w	r3, #1
   d6efc:	bf18      	it	ne
   d6efe:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6f00:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6f04:	3004      	adds	r0, #4
   d6f06:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6f0a:	f7ff ff71 	bl	d6df0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6f0e:	a801      	add	r0, sp, #4
   d6f10:	f7fd fcde 	bl	d48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6f14:	b005      	add	sp, #20
   d6f16:	bd30      	pop	{r4, r5, pc}

000d6f18 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f18:	2200      	movs	r2, #0
   d6f1a:	4611      	mov	r1, r2
   d6f1c:	6840      	ldr	r0, [r0, #4]
   d6f1e:	f7ff bb2f 	b.w	d6580 <network_listening>

000d6f22 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f22:	2200      	movs	r2, #0
   d6f24:	4611      	mov	r1, r2
   d6f26:	6840      	ldr	r0, [r0, #4]
   d6f28:	f7ff bb3a 	b.w	d65a0 <network_get_listen_timeout>

000d6f2c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6f2c:	2200      	movs	r2, #0
   d6f2e:	6840      	ldr	r0, [r0, #4]
   d6f30:	f7ff bb2e 	b.w	d6590 <network_set_listen_timeout>

000d6f34 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f34:	2200      	movs	r2, #0
   d6f36:	f081 0101 	eor.w	r1, r1, #1
   d6f3a:	6840      	ldr	r0, [r0, #4]
   d6f3c:	f7ff bb18 	b.w	d6570 <network_listen>

000d6f40 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6f40:	2300      	movs	r3, #0
   d6f42:	461a      	mov	r2, r3
   d6f44:	4619      	mov	r1, r3
   d6f46:	6840      	ldr	r0, [r0, #4]
   d6f48:	f7ff bb0a 	b.w	d6560 <network_off>

000d6f4c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f4c:	2300      	movs	r3, #0
   d6f4e:	461a      	mov	r2, r3
   d6f50:	4619      	mov	r1, r3
   d6f52:	6840      	ldr	r0, [r0, #4]
   d6f54:	f7ff bafc 	b.w	d6550 <network_on>

000d6f58 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f58:	2200      	movs	r2, #0
   d6f5a:	4611      	mov	r1, r2
   d6f5c:	6840      	ldr	r0, [r0, #4]
   d6f5e:	f7ff baef 	b.w	d6540 <network_ready>

000d6f62 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f62:	2200      	movs	r2, #0
   d6f64:	4611      	mov	r1, r2
   d6f66:	6840      	ldr	r0, [r0, #4]
   d6f68:	f7ff bada 	b.w	d6520 <network_connecting>

000d6f6c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f6c:	2200      	movs	r2, #0
   d6f6e:	2102      	movs	r1, #2
   d6f70:	6840      	ldr	r0, [r0, #4]
   d6f72:	f7ff badd 	b.w	d6530 <network_disconnect>

000d6f76 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f76:	2300      	movs	r3, #0
   d6f78:	461a      	mov	r2, r3
   d6f7a:	6840      	ldr	r0, [r0, #4]
   d6f7c:	f7ff bac8 	b.w	d6510 <network_connect>

000d6f80 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6f80:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6f82:	2203      	movs	r2, #3
   d6f84:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6f86:	4a02      	ldr	r2, [pc, #8]	; (d6f90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6f88:	601a      	str	r2, [r3, #0]
   d6f8a:	4770      	bx	lr
   d6f8c:	2003e364 	.word	0x2003e364
   d6f90:	000dbb24 	.word	0x000dbb24

000d6f94 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6f94:	4770      	bx	lr

000d6f96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f98:	4606      	mov	r6, r0
   d6f9a:	4615      	mov	r5, r2
   d6f9c:	460c      	mov	r4, r1
   d6f9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6fa0:	42bc      	cmp	r4, r7
   d6fa2:	d006      	beq.n	d6fb2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6fa4:	6833      	ldr	r3, [r6, #0]
   d6fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6faa:	689b      	ldr	r3, [r3, #8]
   d6fac:	4630      	mov	r0, r6
   d6fae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6fb0:	e7f6      	b.n	d6fa0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6fb2:	4628      	mov	r0, r5
   d6fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fb6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6fb6:	2200      	movs	r2, #0
   d6fb8:	7c00      	ldrb	r0, [r0, #16]
   d6fba:	f7ff b8df 	b.w	d617c <HAL_I2C_Write_Data>

000d6fbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6fbe:	2100      	movs	r1, #0
   d6fc0:	7c00      	ldrb	r0, [r0, #16]
   d6fc2:	f7ff b8e3 	b.w	d618c <HAL_I2C_Available_Data>

000d6fc6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6fc6:	2100      	movs	r1, #0
   d6fc8:	7c00      	ldrb	r0, [r0, #16]
   d6fca:	f7ff b8e7 	b.w	d619c <HAL_I2C_Read_Data>

000d6fce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6fce:	2100      	movs	r1, #0
   d6fd0:	7c00      	ldrb	r0, [r0, #16]
   d6fd2:	f7ff b8eb 	b.w	d61ac <HAL_I2C_Peek_Data>

000d6fd6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6fd6:	2100      	movs	r1, #0
   d6fd8:	7c00      	ldrb	r0, [r0, #16]
   d6fda:	f7ff b8ef 	b.w	d61bc <HAL_I2C_Flush_Data>

000d6fde <_ZN7TwoWireD0Ev>:
   d6fde:	b510      	push	{r4, lr}
   d6fe0:	2114      	movs	r1, #20
   d6fe2:	4604      	mov	r4, r0
   d6fe4:	f001 f863 	bl	d80ae <_ZdlPvj>
   d6fe8:	4620      	mov	r0, r4
   d6fea:	bd10      	pop	{r4, pc}

000d6fec <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6fec:	b510      	push	{r4, lr}
   d6fee:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ff0:	2300      	movs	r3, #0
   d6ff2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ff8:	60a3      	str	r3, [r4, #8]
   d6ffa:	4b04      	ldr	r3, [pc, #16]	; (d700c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6ffc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6ffe:	4608      	mov	r0, r1
   d7000:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7002:	4611      	mov	r1, r2
   d7004:	f7ff f8ea 	bl	d61dc <HAL_I2C_Init>
}
   d7008:	4620      	mov	r0, r4
   d700a:	bd10      	pop	{r4, pc}
   d700c:	000dbb58 	.word	0x000dbb58

000d7010 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7010:	2300      	movs	r3, #0
   d7012:	461a      	mov	r2, r3
   d7014:	4619      	mov	r1, r3
   d7016:	7c00      	ldrb	r0, [r0, #16]
   d7018:	f7ff b898 	b.w	d614c <HAL_I2C_Begin>

000d701c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d701c:	b570      	push	{r4, r5, r6, lr}
   d701e:	460c      	mov	r4, r1
   d7020:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7022:	2514      	movs	r5, #20
   d7024:	4606      	mov	r6, r0
   d7026:	462a      	mov	r2, r5
   d7028:	2100      	movs	r1, #0
   d702a:	a801      	add	r0, sp, #4
   d702c:	f001 ffbf 	bl	d8fae <memset>
   d7030:	7823      	ldrb	r3, [r4, #0]
   d7032:	f88d 3008 	strb.w	r3, [sp, #8]
   d7036:	6863      	ldr	r3, [r4, #4]
   d7038:	9303      	str	r3, [sp, #12]
   d703a:	68e3      	ldr	r3, [r4, #12]
   d703c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d703e:	2200      	movs	r2, #0
   d7040:	7a23      	ldrb	r3, [r4, #8]
   d7042:	7c30      	ldrb	r0, [r6, #16]
   d7044:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7048:	a901      	add	r1, sp, #4
   d704a:	9305      	str	r3, [sp, #20]
   d704c:	f7ff f8de 	bl	d620c <HAL_I2C_Request_Data_Ex>
}
   d7050:	b006      	add	sp, #24
   d7052:	bd70      	pop	{r4, r5, r6, pc}

000d7054 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7056:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7058:	f88d 1000 	strb.w	r1, [sp]
   d705c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7060:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7062:	bf18      	it	ne
   d7064:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7066:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7068:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d706a:	f88d 3008 	strb.w	r3, [sp, #8]
   d706e:	f7ff ffd5 	bl	d701c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7072:	b005      	add	sp, #20
   d7074:	f85d fb04 	ldr.w	pc, [sp], #4

000d7078 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7078:	2301      	movs	r3, #1
   d707a:	f7ff bfeb 	b.w	d7054 <_ZN7TwoWire11requestFromEhjh>

000d707e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d707e:	2200      	movs	r2, #0
   d7080:	7c00      	ldrb	r0, [r0, #16]
   d7082:	f7ff b86b 	b.w	d615c <HAL_I2C_Begin_Transmission>

000d7086 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7086:	b2c9      	uxtb	r1, r1
   d7088:	f7ff bff9 	b.w	d707e <_ZN7TwoWire17beginTransmissionEh>

000d708c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d708c:	2200      	movs	r2, #0
   d708e:	7c00      	ldrb	r0, [r0, #16]
   d7090:	f7ff b86c 	b.w	d616c <HAL_I2C_End_Transmission>

000d7094 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7094:	2101      	movs	r1, #1
   d7096:	f7ff bff9 	b.w	d708c <_ZN7TwoWire15endTransmissionEh>

000d709a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d709a:	2100      	movs	r1, #0
   d709c:	7c00      	ldrb	r0, [r0, #16]
   d709e:	f7ff b895 	b.w	d61cc <HAL_I2C_Is_Enabled>

000d70a2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d70a2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d70a4:	2100      	movs	r1, #0
   d70a6:	7c00      	ldrb	r0, [r0, #16]
   d70a8:	f7ff f8a0 	bl	d61ec <HAL_I2C_Acquire>
}
   d70ac:	fab0 f080 	clz	r0, r0
   d70b0:	0940      	lsrs	r0, r0, #5
   d70b2:	bd08      	pop	{r3, pc}

000d70b4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d70b4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d70b6:	2100      	movs	r1, #0
   d70b8:	7c00      	ldrb	r0, [r0, #16]
   d70ba:	f7ff f89f 	bl	d61fc <HAL_I2C_Release>
}
   d70be:	fab0 f080 	clz	r0, r0
   d70c2:	0940      	lsrs	r0, r0, #5
   d70c4:	bd08      	pop	{r3, pc}

000d70c6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d70c6:	4770      	bx	lr

000d70c8 <_ZN9IPAddressD0Ev>:
   d70c8:	b510      	push	{r4, lr}
   d70ca:	2118      	movs	r1, #24
   d70cc:	4604      	mov	r4, r0
   d70ce:	f000 ffee 	bl	d80ae <_ZdlPvj>
   d70d2:	4620      	mov	r0, r4
   d70d4:	bd10      	pop	{r4, pc}

000d70d6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d70d6:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d70d8:	7d03      	ldrb	r3, [r0, #20]
   d70da:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d70dc:	b08d      	sub	sp, #52	; 0x34
   d70de:	460e      	mov	r6, r1
   d70e0:	f100 0704 	add.w	r7, r0, #4
   d70e4:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d70e8:	d002      	beq.n	d70f0 <_ZNK9IPAddress7printToER5Print+0x1a>
   d70ea:	f100 0508 	add.w	r5, r0, #8
   d70ee:	e018      	b.n	d7122 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d70f0:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70f2:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d70f4:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70f8:	232f      	movs	r3, #47	; 0x2f
   d70fa:	462a      	mov	r2, r5
   d70fc:	200a      	movs	r0, #10
   d70fe:	f7ff f88d 	bl	d621c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7102:	4628      	mov	r0, r5
   d7104:	f001 ffb1 	bl	d906a <strlen>
   d7108:	6833      	ldr	r3, [r6, #0]
   d710a:	4602      	mov	r2, r0
   d710c:	68db      	ldr	r3, [r3, #12]
   d710e:	4629      	mov	r1, r5
   d7110:	4630      	mov	r0, r6
   d7112:	4798      	blx	r3
   d7114:	e00f      	b.n	d7136 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7116:	b124      	cbz	r4, d7122 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7118:	212e      	movs	r1, #46	; 0x2e
   d711a:	4630      	mov	r0, r6
   d711c:	f000 fa7a 	bl	d7614 <_ZN5Print5printEc>
   d7120:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7122:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7126:	220a      	movs	r2, #10
   d7128:	4630      	mov	r0, r6
   d712a:	f000 fa8c 	bl	d7646 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d712e:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7130:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7132:	d1f0      	bne.n	d7116 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7134:	4620      	mov	r0, r4
    }
    return n;
}
   d7136:	b00d      	add	sp, #52	; 0x34
   d7138:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d713c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d713c:	b510      	push	{r4, lr}
   d713e:	4b05      	ldr	r3, [pc, #20]	; (d7154 <_ZN9IPAddressC1Ev+0x18>)
   d7140:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7142:	2211      	movs	r2, #17
   d7144:	f840 3b04 	str.w	r3, [r0], #4
   d7148:	2100      	movs	r1, #0
   d714a:	f001 ff30 	bl	d8fae <memset>
{
    clear();
}
   d714e:	4620      	mov	r0, r4
   d7150:	bd10      	pop	{r4, pc}
   d7152:	bf00      	nop
   d7154:	000dbb80 	.word	0x000dbb80

000d7158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7158:	4603      	mov	r3, r0
   d715a:	4a07      	ldr	r2, [pc, #28]	; (d7178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d715c:	b510      	push	{r4, lr}
   d715e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7162:	f101 0210 	add.w	r2, r1, #16
   d7166:	f851 4b04 	ldr.w	r4, [r1], #4
   d716a:	f843 4b04 	str.w	r4, [r3], #4
   d716e:	4291      	cmp	r1, r2
   d7170:	d1f9      	bne.n	d7166 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7172:	780a      	ldrb	r2, [r1, #0]
   d7174:	701a      	strb	r2, [r3, #0]
}
   d7176:	bd10      	pop	{r4, pc}
   d7178:	000dbb80 	.word	0x000dbb80

000d717c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d717c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d717e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7182:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7186:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d718a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d718e:	2304      	movs	r3, #4
   d7190:	6041      	str	r1, [r0, #4]
   d7192:	7503      	strb	r3, [r0, #20]
   d7194:	bd10      	pop	{r4, pc}

000d7196 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7196:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7198:	780d      	ldrb	r5, [r1, #0]
   d719a:	788b      	ldrb	r3, [r1, #2]
   d719c:	784a      	ldrb	r2, [r1, #1]
   d719e:	78c9      	ldrb	r1, [r1, #3]
   d71a0:	9100      	str	r1, [sp, #0]
   d71a2:	4629      	mov	r1, r5
   d71a4:	f7ff ffea 	bl	d717c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d71a8:	b003      	add	sp, #12
   d71aa:	bd30      	pop	{r4, r5, pc}

000d71ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d71ac:	4b01      	ldr	r3, [pc, #4]	; (d71b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d71ae:	4a02      	ldr	r2, [pc, #8]	; (d71b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d71b0:	601a      	str	r2, [r3, #0]
   d71b2:	4770      	bx	lr
   d71b4:	2003e36c 	.word	0x2003e36c
   d71b8:	000dbbff 	.word	0x000dbbff

000d71bc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d71bc:	2200      	movs	r2, #0
   d71be:	4611      	mov	r1, r2
   d71c0:	6840      	ldr	r0, [r0, #4]
   d71c2:	f7ff b9dd 	b.w	d6580 <network_listening>

000d71c6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d71c6:	2200      	movs	r2, #0
   d71c8:	4611      	mov	r1, r2
   d71ca:	6840      	ldr	r0, [r0, #4]
   d71cc:	f7ff b9e8 	b.w	d65a0 <network_get_listen_timeout>

000d71d0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d71d0:	2200      	movs	r2, #0
   d71d2:	6840      	ldr	r0, [r0, #4]
   d71d4:	f7ff b9dc 	b.w	d6590 <network_set_listen_timeout>

000d71d8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d71d8:	2200      	movs	r2, #0
   d71da:	f081 0101 	eor.w	r1, r1, #1
   d71de:	6840      	ldr	r0, [r0, #4]
   d71e0:	f7ff b9c6 	b.w	d6570 <network_listen>

000d71e4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d71e4:	2300      	movs	r3, #0
   d71e6:	461a      	mov	r2, r3
   d71e8:	2101      	movs	r1, #1
   d71ea:	6840      	ldr	r0, [r0, #4]
   d71ec:	f7ff b9b8 	b.w	d6560 <network_off>

000d71f0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d71f0:	2300      	movs	r3, #0
   d71f2:	461a      	mov	r2, r3
   d71f4:	4619      	mov	r1, r3
   d71f6:	6840      	ldr	r0, [r0, #4]
   d71f8:	f7ff b9aa 	b.w	d6550 <network_on>

000d71fc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d71fc:	2200      	movs	r2, #0
   d71fe:	4611      	mov	r1, r2
   d7200:	6840      	ldr	r0, [r0, #4]
   d7202:	f7ff b99d 	b.w	d6540 <network_ready>

000d7206 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7206:	2200      	movs	r2, #0
   d7208:	4611      	mov	r1, r2
   d720a:	6840      	ldr	r0, [r0, #4]
   d720c:	f7ff b988 	b.w	d6520 <network_connecting>

000d7210 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7210:	2200      	movs	r2, #0
   d7212:	2102      	movs	r1, #2
   d7214:	6840      	ldr	r0, [r0, #4]
   d7216:	f7ff b98b 	b.w	d6530 <network_disconnect>

000d721a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d721a:	2300      	movs	r3, #0
   d721c:	461a      	mov	r2, r3
   d721e:	6840      	ldr	r0, [r0, #4]
   d7220:	f7ff b976 	b.w	d6510 <network_connect>

000d7224 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7224:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7226:	4605      	mov	r5, r0
   d7228:	b188      	cbz	r0, d724e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d722a:	6804      	ldr	r4, [r0, #0]
   d722c:	b14c      	cbz	r4, d7242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d722e:	68a3      	ldr	r3, [r4, #8]
   d7230:	b11b      	cbz	r3, d723a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7232:	2203      	movs	r2, #3
   d7234:	4621      	mov	r1, r4
   d7236:	4620      	mov	r0, r4
   d7238:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d723a:	2110      	movs	r1, #16
   d723c:	4620      	mov	r0, r4
   d723e:	f000 ff36 	bl	d80ae <_ZdlPvj>
   d7242:	4628      	mov	r0, r5
   d7244:	2114      	movs	r1, #20
      }
   d7246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d724a:	f000 bf30 	b.w	d80ae <_ZdlPvj>
   d724e:	bd38      	pop	{r3, r4, r5, pc}

000d7250 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7250:	b110      	cbz	r0, d7258 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7252:	6803      	ldr	r3, [r0, #0]
   d7254:	685b      	ldr	r3, [r3, #4]
   d7256:	4718      	bx	r3
   d7258:	4770      	bx	lr

000d725a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d725a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d725c:	6803      	ldr	r3, [r0, #0]
   d725e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7260:	b1bb      	cbz	r3, d7292 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7262:	6858      	ldr	r0, [r3, #4]
   d7264:	f7fe fe6a 	bl	d5f3c <os_thread_is_current>
   d7268:	b978      	cbnz	r0, d728a <_ZN6ThreadD1Ev+0x30>
   d726a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d726c:	7c5a      	ldrb	r2, [r3, #17]
   d726e:	b912      	cbnz	r2, d7276 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7270:	6858      	ldr	r0, [r3, #4]
   d7272:	f7fe fe73 	bl	d5f5c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7276:	6823      	ldr	r3, [r4, #0]
   d7278:	6858      	ldr	r0, [r3, #4]
   d727a:	f7fe fe77 	bl	d5f6c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d727e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7280:	2300      	movs	r3, #0
   d7282:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7284:	b128      	cbz	r0, d7292 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7286:	f7ff ffcd 	bl	d7224 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d728a:	6820      	ldr	r0, [r4, #0]
   d728c:	b108      	cbz	r0, d7292 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d728e:	f7ff ffc9 	bl	d7224 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7292:	4620      	mov	r0, r4
   d7294:	bd10      	pop	{r4, pc}

000d7296 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7296:	b538      	push	{r3, r4, r5, lr}
   d7298:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d729a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d729e:	b108      	cbz	r0, d72a4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d72a0:	f7fc feff 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d72a4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d72a8:	b108      	cbz	r0, d72ae <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d72aa:	f7fe fe97 	bl	d5fdc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72ae:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d72b2:	b135      	cbz	r5, d72c2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72b4:	4628      	mov	r0, r5
   d72b6:	f7ff ffd0 	bl	d725a <_ZN6ThreadD1Ev>
   d72ba:	2104      	movs	r1, #4
   d72bc:	4628      	mov	r0, r5
   d72be:	f000 fef6 	bl	d80ae <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72c2:	6820      	ldr	r0, [r4, #0]
   d72c4:	b108      	cbz	r0, d72ca <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d72c6:	f7ff ffc3 	bl	d7250 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d72ca:	4620      	mov	r0, r4
   d72cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d72d0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d72d0:	b510      	push	{r4, lr}
   d72d2:	4b04      	ldr	r3, [pc, #16]	; (d72e4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d72d4:	4604      	mov	r4, r0
   d72d6:	f840 3b08 	str.w	r3, [r0], #8
   d72da:	f7ff ffdc 	bl	d7296 <_ZN5spark11MeshPublishD1Ev>
   d72de:	4620      	mov	r0, r4
   d72e0:	bd10      	pop	{r4, pc}
   d72e2:	bf00      	nop
   d72e4:	000dbc70 	.word	0x000dbc70

000d72e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d72e8:	b538      	push	{r3, r4, r5, lr}
   d72ea:	4c0e      	ldr	r4, [pc, #56]	; (d7324 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d72ec:	4b0e      	ldr	r3, [pc, #56]	; (d7328 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d72ee:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d72f0:	2500      	movs	r5, #0
   d72f2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d72f4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d72f8:	6063      	str	r3, [r4, #4]
   d72fa:	60a5      	str	r5, [r4, #8]
   d72fc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7300:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7304:	f7fe fe62 	bl	d5fcc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7308:	4b08      	ldr	r3, [pc, #32]	; (d732c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d730a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d730e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7312:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7314:	4620      	mov	r0, r4
   d7316:	4a06      	ldr	r2, [pc, #24]	; (d7330 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7318:	4906      	ldr	r1, [pc, #24]	; (d7334 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d731a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d731e:	f000 bec1 	b.w	d80a4 <__aeabi_atexit>
   d7322:	bf00      	nop
   d7324:	2003e370 	.word	0x2003e370
   d7328:	000dbca4 	.word	0x000dbca4
   d732c:	000dbc70 	.word	0x000dbc70
   d7330:	2003e1b8 	.word	0x2003e1b8
   d7334:	000d72d1 	.word	0x000d72d1

000d7338 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7338:	2300      	movs	r3, #0
   d733a:	461a      	mov	r2, r3
   d733c:	6840      	ldr	r0, [r0, #4]
   d733e:	f7ff b8e7 	b.w	d6510 <network_connect>

000d7342 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7342:	2200      	movs	r2, #0
   d7344:	2102      	movs	r1, #2
   d7346:	6840      	ldr	r0, [r0, #4]
   d7348:	f7ff b8f2 	b.w	d6530 <network_disconnect>

000d734c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d734c:	2200      	movs	r2, #0
   d734e:	4611      	mov	r1, r2
   d7350:	6840      	ldr	r0, [r0, #4]
   d7352:	f7ff b8e5 	b.w	d6520 <network_connecting>

000d7356 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7356:	2200      	movs	r2, #0
   d7358:	4611      	mov	r1, r2
   d735a:	6840      	ldr	r0, [r0, #4]
   d735c:	f7ff b8f0 	b.w	d6540 <network_ready>

000d7360 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7360:	2300      	movs	r3, #0
   d7362:	461a      	mov	r2, r3
   d7364:	4619      	mov	r1, r3
   d7366:	6840      	ldr	r0, [r0, #4]
   d7368:	f7ff b8f2 	b.w	d6550 <network_on>

000d736c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d736c:	2300      	movs	r3, #0
   d736e:	461a      	mov	r2, r3
   d7370:	4619      	mov	r1, r3
   d7372:	6840      	ldr	r0, [r0, #4]
   d7374:	f7ff b8f4 	b.w	d6560 <network_off>

000d7378 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7378:	2200      	movs	r2, #0
   d737a:	f081 0101 	eor.w	r1, r1, #1
   d737e:	6840      	ldr	r0, [r0, #4]
   d7380:	f7ff b8f6 	b.w	d6570 <network_listen>

000d7384 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7384:	2200      	movs	r2, #0
   d7386:	6840      	ldr	r0, [r0, #4]
   d7388:	f7ff b902 	b.w	d6590 <network_set_listen_timeout>

000d738c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d738c:	2200      	movs	r2, #0
   d738e:	4611      	mov	r1, r2
   d7390:	6840      	ldr	r0, [r0, #4]
   d7392:	f7ff b905 	b.w	d65a0 <network_get_listen_timeout>

000d7396 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7396:	2200      	movs	r2, #0
   d7398:	4611      	mov	r1, r2
   d739a:	6840      	ldr	r0, [r0, #4]
   d739c:	f7ff b8f0 	b.w	d6580 <network_listening>

000d73a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d73a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d73a4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d73a6:	b095      	sub	sp, #84	; 0x54
   d73a8:	4616      	mov	r6, r2
   d73aa:	460d      	mov	r5, r1
   d73ac:	4607      	mov	r7, r0
    IPAddress addr;
   d73ae:	f7ff fec5 	bl	d713c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d73b2:	4621      	mov	r1, r4
   d73b4:	2220      	movs	r2, #32
   d73b6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d73b8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d73ba:	f001 fdf8 	bl	d8fae <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d73be:	2340      	movs	r3, #64	; 0x40
   d73c0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d73c2:	4621      	mov	r1, r4
   d73c4:	466b      	mov	r3, sp
   d73c6:	aa0c      	add	r2, sp, #48	; 0x30
   d73c8:	4630      	mov	r0, r6
   d73ca:	f7fe ff37 	bl	d623c <netdb_getaddrinfo>
    if (!r) {
   d73ce:	4604      	mov	r4, r0
   d73d0:	2800      	cmp	r0, #0
   d73d2:	d144      	bne.n	d745e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d73d4:	4602      	mov	r2, r0
   d73d6:	2101      	movs	r1, #1
   d73d8:	6868      	ldr	r0, [r5, #4]
   d73da:	f7ff f8b1 	bl	d6540 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d73de:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d73e0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d73e2:	4622      	mov	r2, r4
   d73e4:	6868      	ldr	r0, [r5, #4]
   d73e6:	f7ff f8ab 	bl	d6540 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d73ea:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d73ec:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d73ee:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d73f0:	2e00      	cmp	r6, #0
   d73f2:	d034      	beq.n	d745e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d73f4:	2900      	cmp	r1, #0
   d73f6:	d132      	bne.n	d745e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d73f8:	6873      	ldr	r3, [r6, #4]
   d73fa:	2b02      	cmp	r3, #2
   d73fc:	d002      	beq.n	d7404 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d73fe:	2b0a      	cmp	r3, #10
   d7400:	d009      	beq.n	d7416 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7402:	e02a      	b.n	d745a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7404:	f1b8 0f00 	cmp.w	r8, #0
   d7408:	d027      	beq.n	d745a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d740a:	6971      	ldr	r1, [r6, #20]
   d740c:	4638      	mov	r0, r7
   d740e:	3104      	adds	r1, #4
   d7410:	f7ff fec1 	bl	d7196 <_ZN9IPAddressaSEPKh>
   d7414:	e020      	b.n	d7458 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7416:	f1b9 0f00 	cmp.w	r9, #0
   d741a:	d01e      	beq.n	d745a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d741c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d741e:	2211      	movs	r2, #17
   d7420:	a801      	add	r0, sp, #4
   d7422:	f001 fdc4 	bl	d8fae <memset>
                    a.v = 6;
   d7426:	2306      	movs	r3, #6
   d7428:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d742c:	ad01      	add	r5, sp, #4
   d742e:	f104 0308 	add.w	r3, r4, #8
   d7432:	3418      	adds	r4, #24
   d7434:	6818      	ldr	r0, [r3, #0]
   d7436:	6859      	ldr	r1, [r3, #4]
   d7438:	462a      	mov	r2, r5
   d743a:	c203      	stmia	r2!, {r0, r1}
   d743c:	3308      	adds	r3, #8
   d743e:	42a3      	cmp	r3, r4
   d7440:	4615      	mov	r5, r2
   d7442:	d1f7      	bne.n	d7434 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7444:	a901      	add	r1, sp, #4
   d7446:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7448:	ad07      	add	r5, sp, #28
   d744a:	f7ff fe85 	bl	d7158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d744e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7450:	1d3c      	adds	r4, r7, #4
   d7452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7454:	682b      	ldr	r3, [r5, #0]
   d7456:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7458:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d745a:	69f6      	ldr	r6, [r6, #28]
   d745c:	e7c8      	b.n	d73f0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d745e:	9800      	ldr	r0, [sp, #0]
   d7460:	f7fe fee4 	bl	d622c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7464:	4638      	mov	r0, r7
   d7466:	b015      	add	sp, #84	; 0x54
   d7468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d746c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d746c:	4b02      	ldr	r3, [pc, #8]	; (d7478 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d746e:	4a03      	ldr	r2, [pc, #12]	; (d747c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7470:	601a      	str	r2, [r3, #0]
   d7472:	2200      	movs	r2, #0
   d7474:	605a      	str	r2, [r3, #4]
   d7476:	4770      	bx	lr
   d7478:	2003e544 	.word	0x2003e544
   d747c:	000dbca4 	.word	0x000dbca4

000d7480 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d7480:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7482:	f000 fde9 	bl	d8058 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d7486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d748a:	f7ff be0a 	b.w	d70a2 <_ZN7TwoWire4lockEv>

000d748e <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d748e:	b510      	push	{r4, lr}
   d7490:	4604      	mov	r4, r0
    lock_(_lock)
   d7492:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d7494:	b109      	cbz	r1, d749a <_ZN4PMICC1Eb+0xc>
        lock();
   d7496:	f7ff fff3 	bl	d7480 <_ZN4PMIC4lockEv>
    }
}
   d749a:	4620      	mov	r0, r4
   d749c:	bd10      	pop	{r4, pc}

000d749e <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d749e:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d74a0:	f000 fdda 	bl	d8058 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d74a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d74a8:	f7ff be04 	b.w	d70b4 <_ZN7TwoWire6unlockEv>

000d74ac <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d74ac:	b510      	push	{r4, lr}
{
    if (lock_) {
   d74ae:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d74b0:	4604      	mov	r4, r0
{
    if (lock_) {
   d74b2:	b10b      	cbz	r3, d74b8 <_ZN4PMICD1Ev+0xc>
        unlock();
   d74b4:	f7ff fff3 	bl	d749e <_ZN4PMIC6unlockEv>
    }
}
   d74b8:	4620      	mov	r0, r4
   d74ba:	bd10      	pop	{r4, pc}

000d74bc <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d74bc:	b510      	push	{r4, lr}
   d74be:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d74c0:	6800      	ldr	r0, [r0, #0]
   d74c2:	f7ff ffec 	bl	d749e <_ZN4PMIC6unlockEv>
   d74c6:	4620      	mov	r0, r4
   d74c8:	bd10      	pop	{r4, pc}

000d74ca <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d74ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d74cc:	ac02      	add	r4, sp, #8
   d74ce:	460d      	mov	r5, r1
   d74d0:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d74d4:	f7ff ffd4 	bl	d7480 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d74d8:	f000 fdbe 	bl	d8058 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d74dc:	216b      	movs	r1, #107	; 0x6b
   d74de:	f7ff fdd2 	bl	d7086 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d74e2:	f000 fdb9 	bl	d8058 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d74e6:	6803      	ldr	r3, [r0, #0]
   d74e8:	4629      	mov	r1, r5
   d74ea:	689b      	ldr	r3, [r3, #8]
   d74ec:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d74ee:	f000 fdb3 	bl	d8058 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d74f2:	2101      	movs	r1, #1
   d74f4:	f7ff fdca 	bl	d708c <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d74f8:	f000 fdae 	bl	d8058 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d74fc:	2301      	movs	r3, #1
   d74fe:	461a      	mov	r2, r3
   d7500:	216b      	movs	r1, #107	; 0x6b
   d7502:	f7ff fda7 	bl	d7054 <_ZN7TwoWire11requestFromEhjh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7506:	f000 fda7 	bl	d8058 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d750a:	6803      	ldr	r3, [r0, #0]
   d750c:	695b      	ldr	r3, [r3, #20]
   d750e:	4798      	blx	r3
   d7510:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d7512:	4620      	mov	r0, r4
   d7514:	f7ff ffd2 	bl	d74bc <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d7518:	b2e8      	uxtb	r0, r5
   d751a:	b003      	add	sp, #12
   d751c:	bd30      	pop	{r4, r5, pc}

000d751e <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d751e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7520:	ac02      	add	r4, sp, #8
   d7522:	4615      	mov	r5, r2
   d7524:	460e      	mov	r6, r1
   d7526:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d752a:	f7ff ffa9 	bl	d7480 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d752e:	f000 fd93 	bl	d8058 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d7532:	216b      	movs	r1, #107	; 0x6b
   d7534:	f7ff fda7 	bl	d7086 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7538:	f000 fd8e 	bl	d8058 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d753c:	6803      	ldr	r3, [r0, #0]
   d753e:	4631      	mov	r1, r6
   d7540:	689b      	ldr	r3, [r3, #8]
   d7542:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7544:	f000 fd88 	bl	d8058 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d7548:	6803      	ldr	r3, [r0, #0]
   d754a:	4629      	mov	r1, r5
   d754c:	689b      	ldr	r3, [r3, #8]
   d754e:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7550:	f000 fd82 	bl	d8058 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d7554:	2101      	movs	r1, #1
   d7556:	f7ff fd99 	bl	d708c <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d755a:	4620      	mov	r0, r4
   d755c:	f7ff ffae 	bl	d74bc <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d7560:	b002      	add	sp, #8
   d7562:	bd70      	pop	{r4, r5, r6, pc}

000d7564 <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
   d7564:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7566:	ac02      	add	r4, sp, #8
   d7568:	4605      	mov	r5, r0
   d756a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d756e:	f7ff ff87 	bl	d7480 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d7572:	2101      	movs	r1, #1
   d7574:	4628      	mov	r0, r5
   d7576:	f7ff ffa8 	bl	d74ca <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d757a:	2101      	movs	r1, #1
   d757c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d7580:	4628      	mov	r0, r5
   d7582:	f7ff ffcc 	bl	d751e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
   d7586:	4620      	mov	r0, r4
   d7588:	f7ff ff98 	bl	d74bc <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
   d758c:	2001      	movs	r0, #1
   d758e:	b003      	add	sp, #12
   d7590:	bd30      	pop	{r4, r5, pc}

000d7592 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
   d7592:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7594:	ac02      	add	r4, sp, #8
   d7596:	4605      	mov	r5, r0
   d7598:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d759c:	f7ff ff70 	bl	d7480 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d75a0:	2101      	movs	r1, #1
   d75a2:	4628      	mov	r0, r5
   d75a4:	f7ff ff91 	bl	d74ca <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d75a8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d75ac:	f042 0210 	orr.w	r2, r2, #16
   d75b0:	2101      	movs	r1, #1
   d75b2:	4628      	mov	r0, r5
   d75b4:	f7ff ffb3 	bl	d751e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
   d75b8:	4620      	mov	r0, r4
   d75ba:	f7ff ff7f 	bl	d74bc <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
   d75be:	2001      	movs	r0, #1
   d75c0:	b003      	add	sp, #12
   d75c2:	bd30      	pop	{r4, r5, pc}

000d75c4 <_ZN4PMIC14enableChargingEv>:
   d75c4:	f7ff bfe5 	b.w	d7592 <_ZN4PMIC10disableOTGEv>

000d75c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d75c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75ca:	4606      	mov	r6, r0
   d75cc:	460d      	mov	r5, r1
   d75ce:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d75d0:	2400      	movs	r4, #0
  while (size--) {
   d75d2:	42bd      	cmp	r5, r7
   d75d4:	d00c      	beq.n	d75f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d75d6:	6833      	ldr	r3, [r6, #0]
   d75d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d75dc:	689b      	ldr	r3, [r3, #8]
   d75de:	4630      	mov	r0, r6
   d75e0:	4798      	blx	r3
     if (chunk>=0)
   d75e2:	2800      	cmp	r0, #0
   d75e4:	db01      	blt.n	d75ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d75e6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d75e8:	e7f3      	b.n	d75d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d75ea:	2c00      	cmp	r4, #0
   d75ec:	bf08      	it	eq
   d75ee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d75f0:	4620      	mov	r0, r4
   d75f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75f4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d75f4:	b570      	push	{r4, r5, r6, lr}
   d75f6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d75f8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d75fa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d75fc:	b149      	cbz	r1, d7612 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d75fe:	f001 fd34 	bl	d906a <strlen>
   d7602:	682b      	ldr	r3, [r5, #0]
   d7604:	4602      	mov	r2, r0
   d7606:	4621      	mov	r1, r4
   d7608:	4628      	mov	r0, r5
   d760a:	68db      	ldr	r3, [r3, #12]
    }
   d760c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7610:	4718      	bx	r3
    }
   d7612:	bd70      	pop	{r4, r5, r6, pc}

000d7614 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7614:	6803      	ldr	r3, [r0, #0]
   d7616:	689b      	ldr	r3, [r3, #8]
   d7618:	4718      	bx	r3

000d761a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d761a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d761c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d761e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7620:	f7ff fff8 	bl	d7614 <_ZN5Print5printEc>
  n += print('\n');
   d7624:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7626:	4604      	mov	r4, r0
  n += print('\n');
   d7628:	4628      	mov	r0, r5
   d762a:	f7ff fff3 	bl	d7614 <_ZN5Print5printEc>
  return n;
}
   d762e:	4420      	add	r0, r4
   d7630:	bd38      	pop	{r3, r4, r5, pc}

000d7632 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7632:	b538      	push	{r3, r4, r5, lr}
   d7634:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7636:	f7ff ffdd 	bl	d75f4 <_ZN5Print5writeEPKc>
   d763a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d763c:	4628      	mov	r0, r5
   d763e:	f7ff ffec 	bl	d761a <_ZN5Print7printlnEv>
  return n;
}
   d7642:	4420      	add	r0, r4
   d7644:	bd38      	pop	{r3, r4, r5, pc}

000d7646 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7646:	b530      	push	{r4, r5, lr}
   d7648:	b08b      	sub	sp, #44	; 0x2c
   d764a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d764c:	2100      	movs	r1, #0
   d764e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7652:	2a01      	cmp	r2, #1
   d7654:	bf98      	it	ls
   d7656:	220a      	movls	r2, #10
   d7658:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d765c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7660:	fb05 3312 	mls	r3, r5, r2, r3
   d7664:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7668:	2b09      	cmp	r3, #9
   d766a:	bf94      	ite	ls
   d766c:	3330      	addls	r3, #48	; 0x30
   d766e:	3337      	addhi	r3, #55	; 0x37
   d7670:	b2db      	uxtb	r3, r3
   d7672:	4621      	mov	r1, r4
   d7674:	f804 3901 	strb.w	r3, [r4], #-1
   d7678:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d767a:	2d00      	cmp	r5, #0
   d767c:	d1ee      	bne.n	d765c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d767e:	f7ff ffb9 	bl	d75f4 <_ZN5Print5writeEPKc>
}
   d7682:	b00b      	add	sp, #44	; 0x2c
   d7684:	bd30      	pop	{r4, r5, pc}

000d7686 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7686:	b510      	push	{r4, lr}
   d7688:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d768a:	f7fc fd86 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d768e:	4620      	mov	r0, r4
   d7690:	bd10      	pop	{r4, pc}
	...

000d7694 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7694:	4803      	ldr	r0, [pc, #12]	; (d76a4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7696:	4a04      	ldr	r2, [pc, #16]	; (d76a8 <_GLOBAL__sub_I_RGB+0x14>)
   d7698:	4904      	ldr	r1, [pc, #16]	; (d76ac <_GLOBAL__sub_I_RGB+0x18>)
   d769a:	2300      	movs	r3, #0
   d769c:	6083      	str	r3, [r0, #8]
   d769e:	f000 bd01 	b.w	d80a4 <__aeabi_atexit>
   d76a2:	bf00      	nop
   d76a4:	2003e54c 	.word	0x2003e54c
   d76a8:	2003e1b8 	.word	0x2003e1b8
   d76ac:	000d7687 	.word	0x000d7687

000d76b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d76b0:	b510      	push	{r4, lr}
   d76b2:	4604      	mov	r4, r0
{
    _spi = spi;
   d76b4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d76b6:	4608      	mov	r0, r1
   d76b8:	f7fe fdc8 	bl	d624c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d76bc:	2300      	movs	r3, #0
   d76be:	6063      	str	r3, [r4, #4]
}
   d76c0:	4620      	mov	r0, r4
   d76c2:	bd10      	pop	{r4, pc}

000d76c4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d76c4:	7800      	ldrb	r0, [r0, #0]
   d76c6:	f7fe bdc9 	b.w	d625c <HAL_SPI_Is_Enabled>

000d76ca <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d76ca:	b510      	push	{r4, lr}
   d76cc:	4604      	mov	r4, r0
{
	free(buffer);
   d76ce:	6800      	ldr	r0, [r0, #0]
   d76d0:	f7fe ff76 	bl	d65c0 <free>
}
   d76d4:	4620      	mov	r0, r4
   d76d6:	bd10      	pop	{r4, pc}

000d76d8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d76d8:	b510      	push	{r4, lr}
   d76da:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d76dc:	6800      	ldr	r0, [r0, #0]
   d76de:	b108      	cbz	r0, d76e4 <_ZN6String10invalidateEv+0xc>
   d76e0:	f7fe ff6e 	bl	d65c0 <free>
	buffer = NULL;
   d76e4:	2300      	movs	r3, #0
   d76e6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d76e8:	60a3      	str	r3, [r4, #8]
   d76ea:	6063      	str	r3, [r4, #4]
   d76ec:	bd10      	pop	{r4, pc}

000d76ee <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d76ee:	b538      	push	{r3, r4, r5, lr}
   d76f0:	4604      	mov	r4, r0
   d76f2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d76f4:	6800      	ldr	r0, [r0, #0]
   d76f6:	3101      	adds	r1, #1
   d76f8:	f7fe ff6a 	bl	d65d0 <realloc>
	if (newbuffer) {
   d76fc:	b110      	cbz	r0, d7704 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d76fe:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7702:	2001      	movs	r0, #1
	}
	return 0;
}
   d7704:	bd38      	pop	{r3, r4, r5, pc}

000d7706 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7706:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7708:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d770a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d770c:	b113      	cbz	r3, d7714 <_ZN6String7reserveEj+0xe>
   d770e:	6843      	ldr	r3, [r0, #4]
   d7710:	428b      	cmp	r3, r1
   d7712:	d207      	bcs.n	d7724 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7714:	4620      	mov	r0, r4
   d7716:	f7ff ffea 	bl	d76ee <_ZN6String12changeBufferEj>
   d771a:	b120      	cbz	r0, d7726 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d771c:	68a3      	ldr	r3, [r4, #8]
   d771e:	b90b      	cbnz	r3, d7724 <_ZN6String7reserveEj+0x1e>
   d7720:	6822      	ldr	r2, [r4, #0]
   d7722:	7013      	strb	r3, [r2, #0]
   d7724:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7726:	bd10      	pop	{r4, pc}

000d7728 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7728:	b570      	push	{r4, r5, r6, lr}
   d772a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d772c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d772e:	4604      	mov	r4, r0
   d7730:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7732:	f7ff ffe8 	bl	d7706 <_ZN6String7reserveEj>
   d7736:	b918      	cbnz	r0, d7740 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7738:	4620      	mov	r0, r4
   d773a:	f7ff ffcd 	bl	d76d8 <_ZN6String10invalidateEv>
		return *this;
   d773e:	e009      	b.n	d7754 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7740:	462a      	mov	r2, r5
   d7742:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7744:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7746:	6820      	ldr	r0, [r4, #0]
   d7748:	f001 fc26 	bl	d8f98 <memcpy>
	buffer[len] = 0;
   d774c:	6822      	ldr	r2, [r4, #0]
   d774e:	68a3      	ldr	r3, [r4, #8]
   d7750:	2100      	movs	r1, #0
   d7752:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7754:	4620      	mov	r0, r4
   d7756:	bd70      	pop	{r4, r5, r6, pc}

000d7758 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7758:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d775a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d775c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d775e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7760:	6043      	str	r3, [r0, #4]
	len = 0;
   d7762:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7764:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7766:	460d      	mov	r5, r1
   d7768:	b139      	cbz	r1, d777a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d776a:	4608      	mov	r0, r1
   d776c:	f001 fc7d 	bl	d906a <strlen>
   d7770:	4629      	mov	r1, r5
   d7772:	4602      	mov	r2, r0
   d7774:	4620      	mov	r0, r4
   d7776:	f7ff ffd7 	bl	d7728 <_ZN6String4copyEPKcj>
}
   d777a:	4620      	mov	r0, r4
   d777c:	bd38      	pop	{r3, r4, r5, pc}

000d777e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d777e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7780:	b510      	push	{r4, lr}
   d7782:	460b      	mov	r3, r1
   d7784:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7786:	d007      	beq.n	d7798 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7788:	6809      	ldr	r1, [r1, #0]
   d778a:	b119      	cbz	r1, d7794 <_ZN6StringaSERKS_+0x16>
   d778c:	689a      	ldr	r2, [r3, #8]
   d778e:	f7ff ffcb 	bl	d7728 <_ZN6String4copyEPKcj>
   d7792:	e001      	b.n	d7798 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7794:	f7ff ffa0 	bl	d76d8 <_ZN6String10invalidateEv>

	return *this;
}
   d7798:	4620      	mov	r0, r4
   d779a:	bd10      	pop	{r4, pc}

000d779c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d779c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d779e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d77a0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d77a2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d77a4:	6043      	str	r3, [r0, #4]
	len = 0;
   d77a6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d77a8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d77aa:	f7ff ffe8 	bl	d777e <_ZN6StringaSERKS_>
}
   d77ae:	4620      	mov	r0, r4
   d77b0:	bd10      	pop	{r4, pc}

000d77b2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d77b2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d77b4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d77b6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d77b8:	b912      	cbnz	r2, d77c0 <_ZNK6String6equalsEPKc+0xe>
   d77ba:	b919      	cbnz	r1, d77c4 <_ZNK6String6equalsEPKc+0x12>
   d77bc:	2001      	movs	r0, #1
   d77be:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d77c0:	b911      	cbnz	r1, d77c8 <_ZNK6String6equalsEPKc+0x16>
   d77c2:	6803      	ldr	r3, [r0, #0]
   d77c4:	7818      	ldrb	r0, [r3, #0]
   d77c6:	e002      	b.n	d77ce <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d77c8:	6800      	ldr	r0, [r0, #0]
   d77ca:	f001 fc21 	bl	d9010 <strcmp>
   d77ce:	fab0 f080 	clz	r0, r0
   d77d2:	0940      	lsrs	r0, r0, #5
}
   d77d4:	bd08      	pop	{r3, pc}

000d77d6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d77d6:	b570      	push	{r4, r5, r6, lr}
   d77d8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d77da:	b19a      	cbz	r2, d7804 <_ZNK6String8getBytesEPhjj+0x2e>
   d77dc:	b191      	cbz	r1, d7804 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d77de:	6885      	ldr	r5, [r0, #8]
   d77e0:	429d      	cmp	r5, r3
   d77e2:	d802      	bhi.n	d77ea <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d77e4:	2300      	movs	r3, #0
   d77e6:	700b      	strb	r3, [r1, #0]
		return;
   d77e8:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d77ea:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d77ec:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d77ee:	6801      	ldr	r1, [r0, #0]
   d77f0:	42ac      	cmp	r4, r5
   d77f2:	bf28      	it	cs
   d77f4:	462c      	movcs	r4, r5
   d77f6:	4419      	add	r1, r3
   d77f8:	4622      	mov	r2, r4
   d77fa:	4630      	mov	r0, r6
   d77fc:	f001 fc52 	bl	d90a4 <strncpy>
	buf[n] = 0;
   d7800:	2300      	movs	r3, #0
   d7802:	5533      	strb	r3, [r6, r4]
   d7804:	bd70      	pop	{r4, r5, r6, pc}

000d7806 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7806:	b510      	push	{r4, lr}
   d7808:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d780a:	6800      	ldr	r0, [r0, #0]
   d780c:	b118      	cbz	r0, d7816 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d780e:	f7fe fed7 	bl	d65c0 <free>
            wakeupSource_ = nullptr;
   d7812:	2300      	movs	r3, #0
   d7814:	6023      	str	r3, [r4, #0]
   d7816:	bd10      	pop	{r4, pc}

000d7818 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7818:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d781a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d781e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7820:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7822:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7824:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7828:	f8c0 2006 	str.w	r2, [r0, #6]
   d782c:	889b      	ldrh	r3, [r3, #4]
   d782e:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7830:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d7832:	f7ff ffe8 	bl	d7806 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d7836:	682b      	ldr	r3, [r5, #0]
   d7838:	b113      	cbz	r3, d7840 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d783a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d783c:	2300      	movs	r3, #0
   d783e:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d7840:	4620      	mov	r0, r4
   d7842:	bd38      	pop	{r3, r4, r5, pc}

000d7844 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d7844:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d7848:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d784a:	b90b      	cbnz	r3, d7850 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d784c:	680a      	ldr	r2, [r1, #0]
   d784e:	b19a      	cbz	r2, d7878 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d7850:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d7852:	b15c      	cbz	r4, d786c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d7854:	88a2      	ldrh	r2, [r4, #4]
   d7856:	2a01      	cmp	r2, #1
   d7858:	d003      	beq.n	d7862 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d785a:	2a04      	cmp	r2, #4
   d785c:	d106      	bne.n	d786c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d785e:	2202      	movs	r2, #2
   d7860:	e005      	b.n	d786e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d7862:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d7864:	814c      	strh	r4, [r1, #10]
   d7866:	718a      	strb	r2, [r1, #6]
   d7868:	810b      	strh	r3, [r1, #8]
                    break;
   d786a:	e005      	b.n	d7878 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d786c:	2204      	movs	r2, #4
   d786e:	810b      	strh	r3, [r1, #8]
   d7870:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7874:	718a      	strb	r2, [r1, #6]
   d7876:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d7878:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d787c:	6003      	str	r3, [r0, #0]
   d787e:	888b      	ldrh	r3, [r1, #4]
   d7880:	8083      	strh	r3, [r0, #4]
    }
   d7882:	bd10      	pop	{r4, pc}

000d7884 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d7884:	b538      	push	{r3, r4, r5, lr}
   d7886:	460c      	mov	r4, r1
   d7888:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d788a:	f7ff ffbc 	bl	d7806 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d788e:	b144      	cbz	r4, d78a2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d7890:	8820      	ldrh	r0, [r4, #0]
   d7892:	f7fe fe8d 	bl	d65b0 <malloc>
   d7896:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7898:	b128      	cbz	r0, d78a6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d789a:	8822      	ldrh	r2, [r4, #0]
   d789c:	4621      	mov	r1, r4
   d789e:	f001 fb7b 	bl	d8f98 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d78a2:	2000      	movs	r0, #0
   d78a4:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d78a6:	4801      	ldr	r0, [pc, #4]	; (d78ac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d78a8:	bd38      	pop	{r3, r4, r5, pc}
   d78aa:	bf00      	nop
   d78ac:	fffffefc 	.word	0xfffffefc

000d78b0 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d78b0:	4601      	mov	r1, r0
   d78b2:	2200      	movs	r2, #0
   d78b4:	208c      	movs	r0, #140	; 0x8c
   d78b6:	f7fe bbb1 	b.w	d601c <HAL_Core_System_Reset_Ex>

000d78ba <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d78ba:	2000      	movs	r0, #0
   d78bc:	f7ff bff8 	b.w	d78b0 <_ZN11SystemClass5resetEm>

000d78c0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d78c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d78c2:	4d30      	ldr	r5, [pc, #192]	; (d7984 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d78c4:	7d0b      	ldrb	r3, [r1, #20]
   d78c6:	4604      	mov	r4, r0
   d78c8:	b08b      	sub	sp, #44	; 0x2c
   d78ca:	4608      	mov	r0, r1
   d78cc:	1daf      	adds	r7, r5, #6
   d78ce:	b313      	cbz	r3, d7916 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d78d0:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d78d2:	791b      	ldrb	r3, [r3, #4]
   d78d4:	b1fb      	cbz	r3, d7916 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d78d6:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d78d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d78dc:	a902      	add	r1, sp, #8
   d78de:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d78e0:	9202      	str	r2, [sp, #8]
   d78e2:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d78e6:	f88d 200e 	strb.w	r2, [sp, #14]
   d78ea:	f8ad 2010 	strh.w	r2, [sp, #16]
   d78ee:	f8ad 3012 	strh.w	r3, [sp, #18]
   d78f2:	f7fe fda3 	bl	d643c <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d78f6:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d78f8:	b200      	sxth	r0, r0
   d78fa:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d78fe:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7902:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d7904:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d7906:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d790a:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d790c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d790e:	4628      	mov	r0, r5
   d7910:	f7ff ffb8 	bl	d7884 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d7914:	e01c      	b.n	d7950 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d7916:	2320      	movs	r3, #32
   d7918:	2600      	movs	r6, #0
   d791a:	9302      	str	r3, [sp, #8]
   d791c:	4b1a      	ldr	r3, [pc, #104]	; (d7988 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d791e:	9300      	str	r3, [sp, #0]
   d7920:	491a      	ldr	r1, [pc, #104]	; (d798c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d7922:	9603      	str	r6, [sp, #12]
   d7924:	4633      	mov	r3, r6
   d7926:	2032      	movs	r0, #50	; 0x32
   d7928:	aa02      	add	r2, sp, #8
   d792a:	f7fe fd17 	bl	d635c <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d792e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7932:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d7936:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7938:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d793c:	4811      	ldr	r0, [pc, #68]	; (d7984 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d793e:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7940:	f88d 600e 	strb.w	r6, [sp, #14]
   d7944:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7948:	f8ad 300c 	strh.w	r3, [sp, #12]
   d794c:	f7ff ff64 	bl	d7818 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7950:	a802      	add	r0, sp, #8
   d7952:	f7ff ff58 	bl	d7806 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7956:	2300      	movs	r3, #0
   d7958:	6023      	str	r3, [r4, #0]
   d795a:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d795c:	71a3      	strb	r3, [r4, #6]
   d795e:	8123      	strh	r3, [r4, #8]
   d7960:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7964:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d7966:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d796a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d796c:	683b      	ldr	r3, [r7, #0]
   d796e:	f8c4 3006 	str.w	r3, [r4, #6]
   d7972:	88bb      	ldrh	r3, [r7, #4]
   d7974:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7976:	6829      	ldr	r1, [r5, #0]
   d7978:	4620      	mov	r0, r4
   d797a:	f7ff ff83 	bl	d7884 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d797e:	4620      	mov	r0, r4
   d7980:	b00b      	add	sp, #44	; 0x2c
   d7982:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7984:	2003e55c 	.word	0x2003e55c
   d7988:	000dbcd7 	.word	0x000dbcd7
   d798c:	000dbcd0 	.word	0x000dbcd0

000d7990 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d7990:	b530      	push	{r4, r5, lr}
   d7992:	4604      	mov	r4, r0
   d7994:	b085      	sub	sp, #20
   d7996:	4608      	mov	r0, r1
   d7998:	4611      	mov	r1, r2
   d799a:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d799c:	2300      	movs	r3, #0
   d799e:	f7fe fd07 	bl	d63b0 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d79a2:	4d0d      	ldr	r5, [pc, #52]	; (d79d8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d79a4:	f8ad 000c 	strh.w	r0, [sp, #12]
   d79a8:	2300      	movs	r3, #0
   d79aa:	a901      	add	r1, sp, #4
   d79ac:	9301      	str	r3, [sp, #4]
   d79ae:	f8ad 3008 	strh.w	r3, [sp, #8]
   d79b2:	f88d 300a 	strb.w	r3, [sp, #10]
   d79b6:	4628      	mov	r0, r5
   d79b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d79bc:	f8ad 300e 	strh.w	r3, [sp, #14]
   d79c0:	f7ff ff2a 	bl	d7818 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d79c4:	a801      	add	r0, sp, #4
   d79c6:	f7ff ff1e 	bl	d7806 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d79ca:	4620      	mov	r0, r4
   d79cc:	4629      	mov	r1, r5
   d79ce:	f7ff ff39 	bl	d7844 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d79d2:	4620      	mov	r0, r4
   d79d4:	b005      	add	sp, #20
   d79d6:	bd30      	pop	{r4, r5, pc}
   d79d8:	2003e55c 	.word	0x2003e55c

000d79dc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d79dc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d79de:	4c09      	ldr	r4, [pc, #36]	; (d7a04 <_GLOBAL__sub_I_System+0x28>)
   d79e0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d79e2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d79e6:	6020      	str	r0, [r4, #0]
   d79e8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d79ea:	71a0      	strb	r0, [r4, #6]
   d79ec:	8120      	strh	r0, [r4, #8]
   d79ee:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d79f0:	f7fe fcce 	bl	d6390 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d79f4:	4620      	mov	r0, r4
   d79f6:	4a04      	ldr	r2, [pc, #16]	; (d7a08 <_GLOBAL__sub_I_System+0x2c>)
   d79f8:	4904      	ldr	r1, [pc, #16]	; (d7a0c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d79fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d79fe:	f000 bb51 	b.w	d80a4 <__aeabi_atexit>
   d7a02:	bf00      	nop
   d7a04:	2003e55c 	.word	0x2003e55c
   d7a08:	2003e1b8 	.word	0x2003e1b8
   d7a0c:	000d418b 	.word	0x000d418b

000d7a10 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d7a12:	4b14      	ldr	r3, [pc, #80]	; (d7a64 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7a14:	4f14      	ldr	r7, [pc, #80]	; (d7a68 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7a16:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7a18:	4b14      	ldr	r3, [pc, #80]	; (d7a6c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7a1a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7a1c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7a1e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7a20:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d7a22:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7a24:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7a26:	d01b      	beq.n	d7a60 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7a28:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7a2a:	ad01      	add	r5, sp, #4
   d7a2c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7a30:	f001 f9b6 	bl	d8da0 <localtime>
	calendar_time->tm_year += 1900;
   d7a34:	6943      	ldr	r3, [r0, #20]
   d7a36:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7a3a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7a3c:	4604      	mov	r4, r0
   d7a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7a46:	f8d4 e000 	ldr.w	lr, [r4]
   d7a4a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7a4e:	ad01      	add	r5, sp, #4
   d7a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a52:	4c07      	ldr	r4, [pc, #28]	; (d7a70 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7a5a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7a5c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7a60:	b00b      	add	sp, #44	; 0x2c
   d7a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7a64:	2003e598 	.word	0x2003e598
   d7a68:	2003e594 	.word	0x2003e594
   d7a6c:	2003e590 	.word	0x2003e590
   d7a70:	2003e568 	.word	0x2003e568

000d7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7a74:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7a76:	2000      	movs	r0, #0
   d7a78:	f7fe fd3a 	bl	d64f0 <spark_sync_time_pending>
   d7a7c:	b128      	cbz	r0, d7a8a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7a7e:	f7fe fd0f 	bl	d64a0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7a82:	f080 0001 	eor.w	r0, r0, #1
   d7a86:	b2c0      	uxtb	r0, r0
   d7a88:	bd08      	pop	{r3, pc}
   d7a8a:	2001      	movs	r0, #1
    }
   d7a8c:	bd08      	pop	{r3, pc}

000d7a8e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7a8e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7a90:	2000      	movs	r0, #0
   d7a92:	f7fe fb13 	bl	d60bc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7a96:	4604      	mov	r4, r0
   d7a98:	b968      	cbnz	r0, d7ab6 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7a9a:	f7fe fc71 	bl	d6380 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7a9e:	2801      	cmp	r0, #1
   d7aa0:	d10b      	bne.n	d7aba <_ZN9TimeClass7isValidEv+0x2c>
   d7aa2:	4620      	mov	r0, r4
   d7aa4:	f7fe fca4 	bl	d63f0 <system_thread_get_state>
   d7aa8:	b938      	cbnz	r0, d7aba <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7aaa:	f7ff ffe3 	bl	d7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7aae:	b930      	cbnz	r0, d7abe <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7ab0:	f7fe fcde 	bl	d6470 <spark_process>
   d7ab4:	e7f9      	b.n	d7aaa <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7ab6:	2001      	movs	r0, #1
   d7ab8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7aba:	2000      	movs	r0, #0
   d7abc:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7abe:	f7ff ffd9 	bl	d7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7ac2:	2000      	movs	r0, #0
   d7ac4:	f7fe fafa 	bl	d60bc <HAL_RTC_Time_Is_Valid>
   d7ac8:	3000      	adds	r0, #0
   d7aca:	bf18      	it	ne
   d7acc:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7ace:	bd10      	pop	{r4, pc}

000d7ad0 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7ad0:	b508      	push	{r3, lr}
    (void)isValid();
   d7ad2:	f7ff ffdc 	bl	d7a8e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7ada:	f7fe bac7 	b.w	d606c <HAL_RTC_Get_UnixTime>
	...

000d7ae0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d7ae0:	b508      	push	{r3, lr}
	return hour(now());
   d7ae2:	f7ff fff5 	bl	d7ad0 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7ae6:	f7ff ff93 	bl	d7a10 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d7aea:	4b01      	ldr	r3, [pc, #4]	; (d7af0 <_ZN9TimeClass4hourEv+0x10>)
   d7aec:	6898      	ldr	r0, [r3, #8]
   d7aee:	bd08      	pop	{r3, pc}
   d7af0:	2003e568 	.word	0x2003e568

000d7af4 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d7af4:	b508      	push	{r3, lr}
	return minute(now());
   d7af6:	f7ff ffeb 	bl	d7ad0 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7afa:	f7ff ff89 	bl	d7a10 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d7afe:	4b01      	ldr	r3, [pc, #4]	; (d7b04 <_ZN9TimeClass6minuteEv+0x10>)
   d7b00:	6858      	ldr	r0, [r3, #4]
   d7b02:	bd08      	pop	{r3, pc}
   d7b04:	2003e568 	.word	0x2003e568

000d7b08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7b08:	4b02      	ldr	r3, [pc, #8]	; (d7b14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7b0a:	681a      	ldr	r2, [r3, #0]
   d7b0c:	4b02      	ldr	r3, [pc, #8]	; (d7b18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7b0e:	601a      	str	r2, [r3, #0]
   d7b10:	4770      	bx	lr
   d7b12:	bf00      	nop
   d7b14:	2003e0c8 	.word	0x2003e0c8
   d7b18:	2003e58c 	.word	0x2003e58c

000d7b1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7b1c:	4770      	bx	lr

000d7b1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b1e:	7441      	strb	r1, [r0, #17]
   d7b20:	4770      	bx	lr

000d7b22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7b22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7b24:	7c00      	ldrb	r0, [r0, #16]
   d7b26:	f7fe fbd9 	bl	d62dc <HAL_USART_Available_Data_For_Write>
}
   d7b2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b2e:	bd08      	pop	{r3, pc}

000d7b30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7b30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7b32:	7c00      	ldrb	r0, [r0, #16]
   d7b34:	f7fe fbaa 	bl	d628c <HAL_USART_Available_Data>
}
   d7b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b3c:	bd08      	pop	{r3, pc}

000d7b3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7b3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7b40:	7c00      	ldrb	r0, [r0, #16]
   d7b42:	f7fe fbb3 	bl	d62ac <HAL_USART_Peek_Data>
}
   d7b46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b4a:	bf28      	it	cs
   d7b4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7b50:	bd08      	pop	{r3, pc}

000d7b52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7b52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7b54:	7c00      	ldrb	r0, [r0, #16]
   d7b56:	f7fe fba1 	bl	d629c <HAL_USART_Read_Data>
}
   d7b5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b5e:	bf28      	it	cs
   d7b60:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7b64:	bd08      	pop	{r3, pc}

000d7b66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7b66:	7c00      	ldrb	r0, [r0, #16]
   d7b68:	f7fe bba8 	b.w	d62bc <HAL_USART_Flush_Data>

000d7b6c <_ZN11USARTSerialD0Ev>:
   d7b6c:	b510      	push	{r4, lr}
   d7b6e:	2114      	movs	r1, #20
   d7b70:	4604      	mov	r4, r0
   d7b72:	f000 fa9c 	bl	d80ae <_ZdlPvj>
   d7b76:	4620      	mov	r0, r4
   d7b78:	bd10      	pop	{r4, pc}

000d7b7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7b7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7b7e:	4604      	mov	r4, r0
   d7b80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b82:	b925      	cbnz	r5, d7b8e <_ZN11USARTSerial5writeEh+0x14>
   d7b84:	7c00      	ldrb	r0, [r0, #16]
   d7b86:	f7fe fba9 	bl	d62dc <HAL_USART_Available_Data_For_Write>
   d7b8a:	2800      	cmp	r0, #0
   d7b8c:	dd05      	ble.n	d7b9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b8e:	4631      	mov	r1, r6
   d7b90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b96:	f7fe bb71 	b.w	d627c <HAL_USART_Write_Data>
  }
  return 0;
}
   d7b9a:	4628      	mov	r0, r5
   d7b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7ba0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7ba0:	b510      	push	{r4, lr}
   d7ba2:	4604      	mov	r4, r0
   d7ba4:	4608      	mov	r0, r1
   d7ba6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7ba8:	2200      	movs	r2, #0
   d7baa:	6062      	str	r2, [r4, #4]
   d7bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7bb0:	60a2      	str	r2, [r4, #8]
   d7bb2:	4a05      	ldr	r2, [pc, #20]	; (d7bc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7bb4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7bb6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7bb8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7bba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7bbc:	461a      	mov	r2, r3
   d7bbe:	f7fe fb55 	bl	d626c <HAL_USART_Init>
}
   d7bc2:	4620      	mov	r0, r4
   d7bc4:	bd10      	pop	{r4, pc}
   d7bc6:	bf00      	nop
   d7bc8:	000dbd30 	.word	0x000dbd30

000d7bcc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7bcc:	7c00      	ldrb	r0, [r0, #16]
   d7bce:	f7fe bb7d 	b.w	d62cc <HAL_USART_Is_Enabled>
	...

000d7bd4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7bd4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7bd6:	4d0c      	ldr	r5, [pc, #48]	; (d7c08 <_Z22__fetch_global_Serial1v+0x34>)
   d7bd8:	6829      	ldr	r1, [r5, #0]
   d7bda:	f011 0401 	ands.w	r4, r1, #1
   d7bde:	d111      	bne.n	d7c04 <_Z22__fetch_global_Serial1v+0x30>
   d7be0:	4628      	mov	r0, r5
   d7be2:	f7fc fa60 	bl	d40a6 <__cxa_guard_acquire>
   d7be6:	b168      	cbz	r0, d7c04 <_Z22__fetch_global_Serial1v+0x30>
   d7be8:	4a08      	ldr	r2, [pc, #32]	; (d7c0c <_Z22__fetch_global_Serial1v+0x38>)
   d7bea:	4b09      	ldr	r3, [pc, #36]	; (d7c10 <_Z22__fetch_global_Serial1v+0x3c>)
   d7bec:	4809      	ldr	r0, [pc, #36]	; (d7c14 <_Z22__fetch_global_Serial1v+0x40>)
   d7bee:	4621      	mov	r1, r4
   d7bf0:	f7ff ffd6 	bl	d7ba0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7bf4:	4628      	mov	r0, r5
   d7bf6:	f7fc fa5b 	bl	d40b0 <__cxa_guard_release>
   d7bfa:	4a07      	ldr	r2, [pc, #28]	; (d7c18 <_Z22__fetch_global_Serial1v+0x44>)
   d7bfc:	4907      	ldr	r1, [pc, #28]	; (d7c1c <_Z22__fetch_global_Serial1v+0x48>)
   d7bfe:	4805      	ldr	r0, [pc, #20]	; (d7c14 <_Z22__fetch_global_Serial1v+0x40>)
   d7c00:	f000 fa50 	bl	d80a4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7c04:	4803      	ldr	r0, [pc, #12]	; (d7c14 <_Z22__fetch_global_Serial1v+0x40>)
   d7c06:	bd38      	pop	{r3, r4, r5, pc}
   d7c08:	2003e634 	.word	0x2003e634
   d7c0c:	2003e638 	.word	0x2003e638
   d7c10:	2003e5b0 	.word	0x2003e5b0
   d7c14:	2003e59c 	.word	0x2003e59c
   d7c18:	2003e1b8 	.word	0x2003e1b8
   d7c1c:	000d7b1d 	.word	0x000d7b1d

000d7c20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c20:	7441      	strb	r1, [r0, #17]
   d7c22:	4770      	bx	lr

000d7c24 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7c24:	4770      	bx	lr

000d7c26 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7c26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7c28:	2100      	movs	r1, #0
   d7c2a:	7c00      	ldrb	r0, [r0, #16]
   d7c2c:	f7fe fb76 	bl	d631c <HAL_USB_USART_Receive_Data>
}
   d7c30:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7c34:	bf28      	it	cs
   d7c36:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7c3a:	bd08      	pop	{r3, pc}

000d7c3c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7c3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7c3e:	2101      	movs	r1, #1
   d7c40:	7c00      	ldrb	r0, [r0, #16]
   d7c42:	f7fe fb6b 	bl	d631c <HAL_USB_USART_Receive_Data>
}
   d7c46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7c4a:	bf28      	it	cs
   d7c4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7c50:	bd08      	pop	{r3, pc}

000d7c52 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7c52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7c54:	7c00      	ldrb	r0, [r0, #16]
   d7c56:	f7fe fb59 	bl	d630c <HAL_USB_USART_Available_Data_For_Write>
}
   d7c5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c5e:	bd08      	pop	{r3, pc}

000d7c60 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7c60:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7c62:	7c00      	ldrb	r0, [r0, #16]
   d7c64:	f7fe fb4a 	bl	d62fc <HAL_USB_USART_Available_Data>
}
   d7c68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c6c:	bd08      	pop	{r3, pc}

000d7c6e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7c6e:	7c00      	ldrb	r0, [r0, #16]
   d7c70:	f7fe bb64 	b.w	d633c <HAL_USB_USART_Flush_Data>

000d7c74 <_ZN9USBSerialD0Ev>:
   d7c74:	b510      	push	{r4, lr}
   d7c76:	2114      	movs	r1, #20
   d7c78:	4604      	mov	r4, r0
   d7c7a:	f000 fa18 	bl	d80ae <_ZdlPvj>
   d7c7e:	4620      	mov	r0, r4
   d7c80:	bd10      	pop	{r4, pc}

000d7c82 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7c82:	b538      	push	{r3, r4, r5, lr}
   d7c84:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7c86:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7c88:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7c8a:	f7fe fb3f 	bl	d630c <HAL_USB_USART_Available_Data_For_Write>
   d7c8e:	2800      	cmp	r0, #0
   d7c90:	dc01      	bgt.n	d7c96 <_ZN9USBSerial5writeEh+0x14>
   d7c92:	7c60      	ldrb	r0, [r4, #17]
   d7c94:	b128      	cbz	r0, d7ca2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7c96:	4629      	mov	r1, r5
   d7c98:	7c20      	ldrb	r0, [r4, #16]
   d7c9a:	f7fe fb47 	bl	d632c <HAL_USB_USART_Send_Data>
   d7c9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7ca2:	bd38      	pop	{r3, r4, r5, pc}

000d7ca4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7ca4:	b510      	push	{r4, lr}
   d7ca6:	4604      	mov	r4, r0
   d7ca8:	2300      	movs	r3, #0
   d7caa:	6063      	str	r3, [r4, #4]
   d7cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7cb0:	60a3      	str	r3, [r4, #8]
   d7cb2:	4b05      	ldr	r3, [pc, #20]	; (d7cc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7cb4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7cb6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7cb8:	4608      	mov	r0, r1
{
  _serial = serial;
   d7cba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7cbc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7cbe:	4611      	mov	r1, r2
   d7cc0:	f7fe fb14 	bl	d62ec <HAL_USB_USART_Init>
}
   d7cc4:	4620      	mov	r0, r4
   d7cc6:	bd10      	pop	{r4, pc}
   d7cc8:	000dbd60 	.word	0x000dbd60

000d7ccc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7ccc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7cce:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7cd0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7cd2:	2100      	movs	r1, #0
   d7cd4:	f001 f96b 	bl	d8fae <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7cd8:	4620      	mov	r0, r4
   d7cda:	bd10      	pop	{r4, pc}

000d7cdc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7cdc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7cde:	4d0e      	ldr	r5, [pc, #56]	; (d7d18 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7ce0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7ce2:	a801      	add	r0, sp, #4
   d7ce4:	f7ff fff2 	bl	d7ccc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ce8:	6829      	ldr	r1, [r5, #0]
   d7cea:	f011 0401 	ands.w	r4, r1, #1
   d7cee:	d110      	bne.n	d7d12 <_Z16_fetch_usbserialv+0x36>
   d7cf0:	4628      	mov	r0, r5
   d7cf2:	f7fc f9d8 	bl	d40a6 <__cxa_guard_acquire>
   d7cf6:	b160      	cbz	r0, d7d12 <_Z16_fetch_usbserialv+0x36>
   d7cf8:	aa01      	add	r2, sp, #4
   d7cfa:	4621      	mov	r1, r4
   d7cfc:	4807      	ldr	r0, [pc, #28]	; (d7d1c <_Z16_fetch_usbserialv+0x40>)
   d7cfe:	f7ff ffd1 	bl	d7ca4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7d02:	4628      	mov	r0, r5
   d7d04:	f7fc f9d4 	bl	d40b0 <__cxa_guard_release>
   d7d08:	4a05      	ldr	r2, [pc, #20]	; (d7d20 <_Z16_fetch_usbserialv+0x44>)
   d7d0a:	4906      	ldr	r1, [pc, #24]	; (d7d24 <_Z16_fetch_usbserialv+0x48>)
   d7d0c:	4803      	ldr	r0, [pc, #12]	; (d7d1c <_Z16_fetch_usbserialv+0x40>)
   d7d0e:	f000 f9c9 	bl	d80a4 <__aeabi_atexit>
	return _usbserial;
}
   d7d12:	4802      	ldr	r0, [pc, #8]	; (d7d1c <_Z16_fetch_usbserialv+0x40>)
   d7d14:	b007      	add	sp, #28
   d7d16:	bd30      	pop	{r4, r5, pc}
   d7d18:	2003e6bc 	.word	0x2003e6bc
   d7d1c:	2003e6c0 	.word	0x2003e6c0
   d7d20:	2003e1b8 	.word	0x2003e1b8
   d7d24:	000d7c25 	.word	0x000d7c25

000d7d28 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7d28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7d2a:	4b0c      	ldr	r3, [pc, #48]	; (d7d5c <serialEventRun+0x34>)
   d7d2c:	b133      	cbz	r3, d7d3c <serialEventRun+0x14>
   d7d2e:	f7ff ffd5 	bl	d7cdc <_Z16_fetch_usbserialv>
   d7d32:	6803      	ldr	r3, [r0, #0]
   d7d34:	691b      	ldr	r3, [r3, #16]
   d7d36:	4798      	blx	r3
   d7d38:	2800      	cmp	r0, #0
   d7d3a:	dc09      	bgt.n	d7d50 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7d3c:	4b08      	ldr	r3, [pc, #32]	; (d7d60 <serialEventRun+0x38>)
   d7d3e:	b163      	cbz	r3, d7d5a <serialEventRun+0x32>
   d7d40:	f7ff ff48 	bl	d7bd4 <_Z22__fetch_global_Serial1v>
   d7d44:	6803      	ldr	r3, [r0, #0]
   d7d46:	691b      	ldr	r3, [r3, #16]
   d7d48:	4798      	blx	r3
   d7d4a:	2800      	cmp	r0, #0
   d7d4c:	dc03      	bgt.n	d7d56 <serialEventRun+0x2e>
   d7d4e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7d50:	f3af 8000 	nop.w
   d7d54:	e7f2      	b.n	d7d3c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7d56:	f3af 8000 	nop.w
   d7d5a:	bd08      	pop	{r3, pc}
	...

000d7d64 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7d64:	b508      	push	{r3, lr}
	serialEventRun();
   d7d66:	f7ff ffdf 	bl	d7d28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7d6a:	f7fe f977 	bl	d605c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7d6e:	4b01      	ldr	r3, [pc, #4]	; (d7d74 <_post_loop+0x10>)
   d7d70:	6018      	str	r0, [r3, #0]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	2003e6e8 	.word	0x2003e6e8

000d7d78 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7d78:	4802      	ldr	r0, [pc, #8]	; (d7d84 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7d7a:	4a03      	ldr	r2, [pc, #12]	; (d7d88 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7d7c:	4903      	ldr	r1, [pc, #12]	; (d7d8c <_Z33system_initialize_user_backup_ramv+0x14>)
   d7d7e:	1a12      	subs	r2, r2, r0
   d7d80:	f001 b90a 	b.w	d8f98 <memcpy>
   d7d84:	2003f400 	.word	0x2003f400
   d7d88:	2003f404 	.word	0x2003f404
   d7d8c:	000dc130 	.word	0x000dc130

000d7d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7d90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d92:	2300      	movs	r3, #0
   d7d94:	9300      	str	r3, [sp, #0]
   d7d96:	461a      	mov	r2, r3
   d7d98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d9c:	f7fe fb3a 	bl	d6414 <system_ctrl_set_result>
}
   d7da0:	b003      	add	sp, #12
   d7da2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7da8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7da8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7daa:	8843      	ldrh	r3, [r0, #2]
   d7dac:	2b0a      	cmp	r3, #10
   d7dae:	d008      	beq.n	d7dc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7db0:	2b50      	cmp	r3, #80	; 0x50
   d7db2:	d109      	bne.n	d7dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7db4:	4b09      	ldr	r3, [pc, #36]	; (d7ddc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7db6:	681b      	ldr	r3, [r3, #0]
   d7db8:	b13b      	cbz	r3, d7dca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7dba:	b003      	add	sp, #12
   d7dbc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7dc0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7dc2:	f7ff ffe5 	bl	d7d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7dc6:	e006      	b.n	d7dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7dc8:	2300      	movs	r3, #0
   d7dca:	9300      	str	r3, [sp, #0]
   d7dcc:	461a      	mov	r2, r3
   d7dce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7dd2:	f7fe fb1f 	bl	d6414 <system_ctrl_set_result>
        break;
    }
}
   d7dd6:	b003      	add	sp, #12
   d7dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   d7ddc:	2003e6d4 	.word	0x2003e6d4

000d7de0 <module_user_init_hook>:

void module_user_init_hook()
{
   d7de0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7de2:	4c10      	ldr	r4, [pc, #64]	; (d7e24 <module_user_init_hook+0x44>)
   d7de4:	4d10      	ldr	r5, [pc, #64]	; (d7e28 <module_user_init_hook+0x48>)
   d7de6:	6823      	ldr	r3, [r4, #0]
   d7de8:	42ab      	cmp	r3, r5
   d7dea:	4b10      	ldr	r3, [pc, #64]	; (d7e2c <module_user_init_hook+0x4c>)
   d7dec:	bf0c      	ite	eq
   d7dee:	2201      	moveq	r2, #1
   d7df0:	2200      	movne	r2, #0
   d7df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7df4:	d002      	beq.n	d7dfc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7df6:	f7ff ffbf 	bl	d7d78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7dfa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7dfc:	f7fe f91e 	bl	d603c <HAL_RNG_GetRandomNumber>
   d7e00:	4604      	mov	r4, r0
    srand(seed);
   d7e02:	f001 f8dd 	bl	d8fc0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7e06:	4b0a      	ldr	r3, [pc, #40]	; (d7e30 <module_user_init_hook+0x50>)
   d7e08:	b113      	cbz	r3, d7e10 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7e10:	2100      	movs	r1, #0
   d7e12:	4807      	ldr	r0, [pc, #28]	; (d7e30 <module_user_init_hook+0x50>)
   d7e14:	f7fe fb74 	bl	d6500 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e18:	2100      	movs	r1, #0
   d7e1a:	4806      	ldr	r0, [pc, #24]	; (d7e34 <module_user_init_hook+0x54>)
}
   d7e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e20:	f7fe baee 	b.w	d6400 <system_ctrl_set_app_request_handler>
   d7e24:	2003f400 	.word	0x2003f400
   d7e28:	9a271c1e 	.word	0x9a271c1e
   d7e2c:	2003e6d8 	.word	0x2003e6d8
   d7e30:	00000000 	.word	0x00000000
   d7e34:	000d7da9 	.word	0x000d7da9

000d7e38 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <spark_protocol_instance+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	681b      	ldr	r3, [r3, #0]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	0003025c 	.word	0x0003025c

000d7e48 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <spark_protocol_set_product_id+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	685b      	ldr	r3, [r3, #4]
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	0003025c 	.word	0x0003025c

000d7e58 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <spark_protocol_set_product_firmware_version+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	689b      	ldr	r3, [r3, #8]
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	0003025c 	.word	0x0003025c

000d7e68 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7e68:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7e6a:	4e18      	ldr	r6, [pc, #96]	; (d7ecc <pinAvailable+0x64>)
   d7e6c:	6831      	ldr	r1, [r6, #0]
   d7e6e:	f011 0501 	ands.w	r5, r1, #1
   d7e72:	4604      	mov	r4, r0
   d7e74:	d10a      	bne.n	d7e8c <pinAvailable+0x24>
   d7e76:	4630      	mov	r0, r6
   d7e78:	f7fc f915 	bl	d40a6 <__cxa_guard_acquire>
   d7e7c:	b130      	cbz	r0, d7e8c <pinAvailable+0x24>
   d7e7e:	4629      	mov	r1, r5
   d7e80:	4813      	ldr	r0, [pc, #76]	; (d7ed0 <pinAvailable+0x68>)
   d7e82:	f7ff fc15 	bl	d76b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e86:	4630      	mov	r0, r6
   d7e88:	f7fc f912 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7e8c:	4810      	ldr	r0, [pc, #64]	; (d7ed0 <pinAvailable+0x68>)
   d7e8e:	f7ff fc19 	bl	d76c4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7e92:	b128      	cbz	r0, d7ea0 <pinAvailable+0x38>
   d7e94:	f1a4 030b 	sub.w	r3, r4, #11
   d7e98:	2b02      	cmp	r3, #2
   d7e9a:	d801      	bhi.n	d7ea0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7e9c:	2000      	movs	r0, #0
   d7e9e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7ea0:	f000 f8b4 	bl	d800c <_Z19__fetch_global_Wirev>
   d7ea4:	f7ff f8f9 	bl	d709a <_ZN7TwoWire9isEnabledEv>
   d7ea8:	b108      	cbz	r0, d7eae <pinAvailable+0x46>
   d7eaa:	2c01      	cmp	r4, #1
   d7eac:	d9f6      	bls.n	d7e9c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7eae:	f7ff fe91 	bl	d7bd4 <_Z22__fetch_global_Serial1v>
   d7eb2:	f7ff fe8b 	bl	d7bcc <_ZN11USARTSerial9isEnabledEv>
   d7eb6:	b118      	cbz	r0, d7ec0 <pinAvailable+0x58>
   d7eb8:	f1a4 0309 	sub.w	r3, r4, #9
   d7ebc:	2b01      	cmp	r3, #1
   d7ebe:	d9ed      	bls.n	d7e9c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7ec0:	2c23      	cmp	r4, #35	; 0x23
   d7ec2:	bf8c      	ite	hi
   d7ec4:	2000      	movhi	r0, #0
   d7ec6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7ec8:	bd70      	pop	{r4, r5, r6, pc}
   d7eca:	bf00      	nop
   d7ecc:	2003e6dc 	.word	0x2003e6dc
   d7ed0:	2003e6e0 	.word	0x2003e6e0

000d7ed4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ed4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7ed6:	b538      	push	{r3, r4, r5, lr}
   d7ed8:	4604      	mov	r4, r0
   d7eda:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7edc:	d80a      	bhi.n	d7ef4 <pinMode+0x20>
   d7ede:	29ff      	cmp	r1, #255	; 0xff
   d7ee0:	d008      	beq.n	d7ef4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7ee2:	f7ff ffc1 	bl	d7e68 <pinAvailable>
   d7ee6:	b128      	cbz	r0, d7ef4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7ee8:	4629      	mov	r1, r5
   d7eea:	4620      	mov	r0, r4
}
   d7eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7ef0:	f7fe b904 	b.w	d60fc <HAL_Pin_Mode>
   d7ef4:	bd38      	pop	{r3, r4, r5, pc}

000d7ef6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7ef6:	b538      	push	{r3, r4, r5, lr}
   d7ef8:	4604      	mov	r4, r0
   d7efa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7efc:	f7fe f906 	bl	d610c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7f00:	28ff      	cmp	r0, #255	; 0xff
   d7f02:	d010      	beq.n	d7f26 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7f04:	2806      	cmp	r0, #6
   d7f06:	d804      	bhi.n	d7f12 <digitalWrite+0x1c>
   d7f08:	234d      	movs	r3, #77	; 0x4d
   d7f0a:	fa23 f000 	lsr.w	r0, r3, r0
   d7f0e:	07c3      	lsls	r3, r0, #31
   d7f10:	d409      	bmi.n	d7f26 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7f12:	4620      	mov	r0, r4
   d7f14:	f7ff ffa8 	bl	d7e68 <pinAvailable>
   d7f18:	b128      	cbz	r0, d7f26 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7f1a:	4629      	mov	r1, r5
   d7f1c:	4620      	mov	r0, r4
}
   d7f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7f22:	f7fe b8fb 	b.w	d611c <HAL_GPIO_Write>
   d7f26:	bd38      	pop	{r3, r4, r5, pc}

000d7f28 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7f28:	b510      	push	{r4, lr}
   d7f2a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7f2c:	f7fe f8ee 	bl	d610c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7f30:	3804      	subs	r0, #4
   d7f32:	b2c0      	uxtb	r0, r0
   d7f34:	2801      	cmp	r0, #1
   d7f36:	d908      	bls.n	d7f4a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7f38:	4620      	mov	r0, r4
   d7f3a:	f7ff ff95 	bl	d7e68 <pinAvailable>
   d7f3e:	b120      	cbz	r0, d7f4a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7f40:	4620      	mov	r0, r4
}
   d7f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7f46:	f7fe b8f1 	b.w	d612c <HAL_GPIO_Read>
}
   d7f4a:	2000      	movs	r0, #0
   d7f4c:	bd10      	pop	{r4, pc}

000d7f4e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7f4e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7f50:	b510      	push	{r4, lr}
   d7f52:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7f54:	bf9c      	itt	ls
   d7f56:	340e      	addls	r4, #14
   d7f58:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	f7ff ff84 	bl	d7e68 <pinAvailable>
   d7f60:	b150      	cbz	r0, d7f78 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7f62:	2103      	movs	r1, #3
   d7f64:	4620      	mov	r0, r4
   d7f66:	f7fe f8c1 	bl	d60ec <HAL_Validate_Pin_Function>
   d7f6a:	2803      	cmp	r0, #3
   d7f6c:	d104      	bne.n	d7f78 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7f6e:	4620      	mov	r0, r4
}
   d7f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7f74:	f7fe b8e2 	b.w	d613c <HAL_ADC_Read>
}
   d7f78:	2000      	movs	r0, #0
   d7f7a:	bd10      	pop	{r4, pc}

000d7f7c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7f7c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7f7e:	4c07      	ldr	r4, [pc, #28]	; (d7f9c <_Z21__fetch_global_EEPROMv+0x20>)
   d7f80:	6823      	ldr	r3, [r4, #0]
   d7f82:	07db      	lsls	r3, r3, #31
   d7f84:	d408      	bmi.n	d7f98 <_Z21__fetch_global_EEPROMv+0x1c>
   d7f86:	4620      	mov	r0, r4
   d7f88:	f7fc f88d 	bl	d40a6 <__cxa_guard_acquire>
   d7f8c:	b120      	cbz	r0, d7f98 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7f8e:	f7fe f875 	bl	d607c <HAL_EEPROM_Init>
   d7f92:	4620      	mov	r0, r4
   d7f94:	f7fc f88c 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7f98:	4801      	ldr	r0, [pc, #4]	; (d7fa0 <_Z21__fetch_global_EEPROMv+0x24>)
   d7f9a:	bd10      	pop	{r4, pc}
   d7f9c:	2003e6ec 	.word	0x2003e6ec
   d7fa0:	2003e6f0 	.word	0x2003e6f0

000d7fa4 <_Z17acquireWireBufferv>:
   d7fa4:	b570      	push	{r4, r5, r6, lr}
   d7fa6:	4604      	mov	r4, r0
   d7fa8:	2514      	movs	r5, #20
   d7faa:	462a      	mov	r2, r5
   d7fac:	4e09      	ldr	r6, [pc, #36]	; (d7fd4 <_Z17acquireWireBufferv+0x30>)
   d7fae:	2100      	movs	r1, #0
   d7fb0:	f000 fffd 	bl	d8fae <memset>
   d7fb4:	8025      	strh	r5, [r4, #0]
   d7fb6:	2520      	movs	r5, #32
   d7fb8:	4631      	mov	r1, r6
   d7fba:	60a5      	str	r5, [r4, #8]
   d7fbc:	6125      	str	r5, [r4, #16]
   d7fbe:	4628      	mov	r0, r5
   d7fc0:	f000 f88f 	bl	d80e2 <_ZnajRKSt9nothrow_t>
   d7fc4:	4631      	mov	r1, r6
   d7fc6:	6060      	str	r0, [r4, #4]
   d7fc8:	4628      	mov	r0, r5
   d7fca:	f000 f88a 	bl	d80e2 <_ZnajRKSt9nothrow_t>
   d7fce:	60e0      	str	r0, [r4, #12]
   d7fd0:	4620      	mov	r0, r4
   d7fd2:	bd70      	pop	{r4, r5, r6, pc}
   d7fd4:	000dbd88 	.word	0x000dbd88

000d7fd8 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d7fd8:	b570      	push	{r4, r5, r6, lr}
   d7fda:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7fdc:	2514      	movs	r5, #20
   d7fde:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fe0:	4e09      	ldr	r6, [pc, #36]	; (d8008 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7fe2:	2100      	movs	r1, #0
   d7fe4:	f000 ffe3 	bl	d8fae <memset>
   d7fe8:	8025      	strh	r5, [r4, #0]
   d7fea:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fec:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7fee:	60a5      	str	r5, [r4, #8]
   d7ff0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ff2:	4628      	mov	r0, r5
   d7ff4:	f000 f875 	bl	d80e2 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ff8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7ffa:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ffc:	4628      	mov	r0, r5
   d7ffe:	f000 f870 	bl	d80e2 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8002:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d8004:	4620      	mov	r0, r4
   d8006:	bd70      	pop	{r4, r5, r6, pc}
   d8008:	000dbd88 	.word	0x000dbd88

000d800c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d800c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d800e:	4d0e      	ldr	r5, [pc, #56]	; (d8048 <_Z19__fetch_global_Wirev+0x3c>)
   d8010:	6829      	ldr	r1, [r5, #0]
   d8012:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8016:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8018:	d113      	bne.n	d8042 <_Z19__fetch_global_Wirev+0x36>
   d801a:	4628      	mov	r0, r5
   d801c:	f7fc f843 	bl	d40a6 <__cxa_guard_acquire>
   d8020:	b178      	cbz	r0, d8042 <_Z19__fetch_global_Wirev+0x36>
   d8022:	a801      	add	r0, sp, #4
   d8024:	f7ff ffbe 	bl	d7fa4 <_Z17acquireWireBufferv>
   d8028:	aa01      	add	r2, sp, #4
   d802a:	4621      	mov	r1, r4
   d802c:	4807      	ldr	r0, [pc, #28]	; (d804c <_Z19__fetch_global_Wirev+0x40>)
   d802e:	f7fe ffdd 	bl	d6fec <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8032:	4628      	mov	r0, r5
   d8034:	f7fc f83c 	bl	d40b0 <__cxa_guard_release>
   d8038:	4a05      	ldr	r2, [pc, #20]	; (d8050 <_Z19__fetch_global_Wirev+0x44>)
   d803a:	4906      	ldr	r1, [pc, #24]	; (d8054 <_Z19__fetch_global_Wirev+0x48>)
   d803c:	4803      	ldr	r0, [pc, #12]	; (d804c <_Z19__fetch_global_Wirev+0x40>)
   d803e:	f000 f831 	bl	d80a4 <__aeabi_atexit>
	return wire;
}
   d8042:	4802      	ldr	r0, [pc, #8]	; (d804c <_Z19__fetch_global_Wirev+0x40>)
   d8044:	b007      	add	sp, #28
   d8046:	bd30      	pop	{r4, r5, pc}
   d8048:	2003e6f4 	.word	0x2003e6f4
   d804c:	2003e70c 	.word	0x2003e70c
   d8050:	2003e1b8 	.word	0x2003e1b8
   d8054:	000d6f95 	.word	0x000d6f95

000d8058 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8058:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d805a:	4c0e      	ldr	r4, [pc, #56]	; (d8094 <_Z20__fetch_global_Wire1v+0x3c>)
   d805c:	6823      	ldr	r3, [r4, #0]
   d805e:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8060:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8062:	d413      	bmi.n	d808c <_Z20__fetch_global_Wire1v+0x34>
   d8064:	4620      	mov	r0, r4
   d8066:	f7fc f81e 	bl	d40a6 <__cxa_guard_acquire>
   d806a:	b178      	cbz	r0, d808c <_Z20__fetch_global_Wire1v+0x34>
   d806c:	a801      	add	r0, sp, #4
   d806e:	f7ff ffb3 	bl	d7fd8 <_Z18acquireWire1Bufferv>
   d8072:	aa01      	add	r2, sp, #4
   d8074:	2101      	movs	r1, #1
   d8076:	4808      	ldr	r0, [pc, #32]	; (d8098 <_Z20__fetch_global_Wire1v+0x40>)
   d8078:	f7fe ffb8 	bl	d6fec <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d807c:	4620      	mov	r0, r4
   d807e:	f7fc f817 	bl	d40b0 <__cxa_guard_release>
   d8082:	4a06      	ldr	r2, [pc, #24]	; (d809c <_Z20__fetch_global_Wire1v+0x44>)
   d8084:	4906      	ldr	r1, [pc, #24]	; (d80a0 <_Z20__fetch_global_Wire1v+0x48>)
   d8086:	4804      	ldr	r0, [pc, #16]	; (d8098 <_Z20__fetch_global_Wire1v+0x40>)
   d8088:	f000 f80c 	bl	d80a4 <__aeabi_atexit>
	return wire;
}
   d808c:	4802      	ldr	r0, [pc, #8]	; (d8098 <_Z20__fetch_global_Wire1v+0x40>)
   d808e:	b006      	add	sp, #24
   d8090:	bd10      	pop	{r4, pc}
   d8092:	bf00      	nop
   d8094:	2003e720 	.word	0x2003e720
   d8098:	2003e6f8 	.word	0x2003e6f8
   d809c:	2003e1b8 	.word	0x2003e1b8
   d80a0:	000d6f95 	.word	0x000d6f95

000d80a4 <__aeabi_atexit>:
   d80a4:	460b      	mov	r3, r1
   d80a6:	4601      	mov	r1, r0
   d80a8:	4618      	mov	r0, r3
   d80aa:	f000 be6b 	b.w	d8d84 <__cxa_atexit>

000d80ae <_ZdlPvj>:
   d80ae:	f7fb bff6 	b.w	d409e <_ZdlPv>
	...

000d80b4 <_ZSt15get_new_handlerv>:
   d80b4:	4b02      	ldr	r3, [pc, #8]	; (d80c0 <_ZSt15get_new_handlerv+0xc>)
   d80b6:	6818      	ldr	r0, [r3, #0]
   d80b8:	f3bf 8f5f 	dmb	sy
   d80bc:	4770      	bx	lr
   d80be:	bf00      	nop
   d80c0:	2003e724 	.word	0x2003e724

000d80c4 <_ZnwjRKSt9nothrow_t>:
   d80c4:	b510      	push	{r4, lr}
   d80c6:	2800      	cmp	r0, #0
   d80c8:	bf14      	ite	ne
   d80ca:	4604      	movne	r4, r0
   d80cc:	2401      	moveq	r4, #1
   d80ce:	4620      	mov	r0, r4
   d80d0:	f7fe fa6e 	bl	d65b0 <malloc>
   d80d4:	b920      	cbnz	r0, d80e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d80d6:	f7ff ffed 	bl	d80b4 <_ZSt15get_new_handlerv>
   d80da:	b108      	cbz	r0, d80e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d80dc:	4780      	blx	r0
   d80de:	e7f6      	b.n	d80ce <_ZnwjRKSt9nothrow_t+0xa>
   d80e0:	bd10      	pop	{r4, pc}

000d80e2 <_ZnajRKSt9nothrow_t>:
   d80e2:	f7ff bfef 	b.w	d80c4 <_ZnwjRKSt9nothrow_t>

000d80e6 <_ZSt25__throw_bad_function_callv>:
   d80e6:	b508      	push	{r3, lr}
   d80e8:	f7fe fa8a 	bl	d6600 <abort>

000d80ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d80ec:	4b24      	ldr	r3, [pc, #144]	; (d8180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d80ee:	681a      	ldr	r2, [r3, #0]
   d80f0:	07d0      	lsls	r0, r2, #31
   d80f2:	bf5c      	itt	pl
   d80f4:	2201      	movpl	r2, #1
   d80f6:	601a      	strpl	r2, [r3, #0]
   d80f8:	4b22      	ldr	r3, [pc, #136]	; (d8184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d80fa:	681a      	ldr	r2, [r3, #0]
   d80fc:	07d1      	lsls	r1, r2, #31
   d80fe:	bf5c      	itt	pl
   d8100:	2201      	movpl	r2, #1
   d8102:	601a      	strpl	r2, [r3, #0]
   d8104:	4b20      	ldr	r3, [pc, #128]	; (d8188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8106:	681a      	ldr	r2, [r3, #0]
   d8108:	07d2      	lsls	r2, r2, #31
   d810a:	bf5c      	itt	pl
   d810c:	2201      	movpl	r2, #1
   d810e:	601a      	strpl	r2, [r3, #0]
   d8110:	4b1e      	ldr	r3, [pc, #120]	; (d818c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8112:	681a      	ldr	r2, [r3, #0]
   d8114:	07d0      	lsls	r0, r2, #31
   d8116:	bf5c      	itt	pl
   d8118:	2201      	movpl	r2, #1
   d811a:	601a      	strpl	r2, [r3, #0]
   d811c:	4b1c      	ldr	r3, [pc, #112]	; (d8190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d811e:	681a      	ldr	r2, [r3, #0]
   d8120:	07d1      	lsls	r1, r2, #31
   d8122:	bf5c      	itt	pl
   d8124:	2201      	movpl	r2, #1
   d8126:	601a      	strpl	r2, [r3, #0]
   d8128:	4b1a      	ldr	r3, [pc, #104]	; (d8194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d812a:	681a      	ldr	r2, [r3, #0]
   d812c:	07d2      	lsls	r2, r2, #31
   d812e:	bf5c      	itt	pl
   d8130:	2201      	movpl	r2, #1
   d8132:	601a      	strpl	r2, [r3, #0]
   d8134:	4b18      	ldr	r3, [pc, #96]	; (d8198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8136:	681a      	ldr	r2, [r3, #0]
   d8138:	07d0      	lsls	r0, r2, #31
   d813a:	bf5c      	itt	pl
   d813c:	2201      	movpl	r2, #1
   d813e:	601a      	strpl	r2, [r3, #0]
   d8140:	4b16      	ldr	r3, [pc, #88]	; (d819c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8142:	681a      	ldr	r2, [r3, #0]
   d8144:	07d1      	lsls	r1, r2, #31
   d8146:	bf5c      	itt	pl
   d8148:	2201      	movpl	r2, #1
   d814a:	601a      	strpl	r2, [r3, #0]
   d814c:	4b14      	ldr	r3, [pc, #80]	; (d81a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d814e:	681a      	ldr	r2, [r3, #0]
   d8150:	07d2      	lsls	r2, r2, #31
   d8152:	bf5c      	itt	pl
   d8154:	2201      	movpl	r2, #1
   d8156:	601a      	strpl	r2, [r3, #0]
   d8158:	4b12      	ldr	r3, [pc, #72]	; (d81a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d815a:	681a      	ldr	r2, [r3, #0]
   d815c:	07d0      	lsls	r0, r2, #31
   d815e:	bf5c      	itt	pl
   d8160:	2201      	movpl	r2, #1
   d8162:	601a      	strpl	r2, [r3, #0]
   d8164:	4b10      	ldr	r3, [pc, #64]	; (d81a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8166:	681a      	ldr	r2, [r3, #0]
   d8168:	07d1      	lsls	r1, r2, #31
   d816a:	bf5c      	itt	pl
   d816c:	2201      	movpl	r2, #1
   d816e:	601a      	strpl	r2, [r3, #0]
   d8170:	4b0e      	ldr	r3, [pc, #56]	; (d81ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8172:	681a      	ldr	r2, [r3, #0]
   d8174:	07d2      	lsls	r2, r2, #31
   d8176:	bf5c      	itt	pl
   d8178:	2201      	movpl	r2, #1
   d817a:	601a      	strpl	r2, [r3, #0]
   d817c:	4770      	bx	lr
   d817e:	bf00      	nop
   d8180:	2003e754 	.word	0x2003e754
   d8184:	2003e750 	.word	0x2003e750
   d8188:	2003e74c 	.word	0x2003e74c
   d818c:	2003e748 	.word	0x2003e748
   d8190:	2003e744 	.word	0x2003e744
   d8194:	2003e740 	.word	0x2003e740
   d8198:	2003e73c 	.word	0x2003e73c
   d819c:	2003e738 	.word	0x2003e738
   d81a0:	2003e734 	.word	0x2003e734
   d81a4:	2003e730 	.word	0x2003e730
   d81a8:	2003e72c 	.word	0x2003e72c
   d81ac:	2003e728 	.word	0x2003e728

000d81b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d81b0:	4b18      	ldr	r3, [pc, #96]	; (d8214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d81b2:	681a      	ldr	r2, [r3, #0]
   d81b4:	07d1      	lsls	r1, r2, #31
   d81b6:	bf5c      	itt	pl
   d81b8:	2201      	movpl	r2, #1
   d81ba:	601a      	strpl	r2, [r3, #0]
   d81bc:	4b16      	ldr	r3, [pc, #88]	; (d8218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d81be:	681a      	ldr	r2, [r3, #0]
   d81c0:	07d2      	lsls	r2, r2, #31
   d81c2:	bf5c      	itt	pl
   d81c4:	2201      	movpl	r2, #1
   d81c6:	601a      	strpl	r2, [r3, #0]
   d81c8:	4b14      	ldr	r3, [pc, #80]	; (d821c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d81ca:	681a      	ldr	r2, [r3, #0]
   d81cc:	07d0      	lsls	r0, r2, #31
   d81ce:	bf5c      	itt	pl
   d81d0:	2201      	movpl	r2, #1
   d81d2:	601a      	strpl	r2, [r3, #0]
   d81d4:	4b12      	ldr	r3, [pc, #72]	; (d8220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d81d6:	681a      	ldr	r2, [r3, #0]
   d81d8:	07d1      	lsls	r1, r2, #31
   d81da:	bf5c      	itt	pl
   d81dc:	2201      	movpl	r2, #1
   d81de:	601a      	strpl	r2, [r3, #0]
   d81e0:	4b10      	ldr	r3, [pc, #64]	; (d8224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d81e2:	681a      	ldr	r2, [r3, #0]
   d81e4:	07d2      	lsls	r2, r2, #31
   d81e6:	bf5c      	itt	pl
   d81e8:	2201      	movpl	r2, #1
   d81ea:	601a      	strpl	r2, [r3, #0]
   d81ec:	4b0e      	ldr	r3, [pc, #56]	; (d8228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d81ee:	681a      	ldr	r2, [r3, #0]
   d81f0:	07d0      	lsls	r0, r2, #31
   d81f2:	bf5c      	itt	pl
   d81f4:	2201      	movpl	r2, #1
   d81f6:	601a      	strpl	r2, [r3, #0]
   d81f8:	4b0c      	ldr	r3, [pc, #48]	; (d822c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d81fa:	681a      	ldr	r2, [r3, #0]
   d81fc:	07d1      	lsls	r1, r2, #31
   d81fe:	bf5c      	itt	pl
   d8200:	2201      	movpl	r2, #1
   d8202:	601a      	strpl	r2, [r3, #0]
   d8204:	4b0a      	ldr	r3, [pc, #40]	; (d8230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8206:	681a      	ldr	r2, [r3, #0]
   d8208:	07d2      	lsls	r2, r2, #31
   d820a:	bf5c      	itt	pl
   d820c:	2201      	movpl	r2, #1
   d820e:	601a      	strpl	r2, [r3, #0]
   d8210:	4770      	bx	lr
   d8212:	bf00      	nop
   d8214:	2003e774 	.word	0x2003e774
   d8218:	2003e770 	.word	0x2003e770
   d821c:	2003e76c 	.word	0x2003e76c
   d8220:	2003e768 	.word	0x2003e768
   d8224:	2003e764 	.word	0x2003e764
   d8228:	2003e760 	.word	0x2003e760
   d822c:	2003e75c 	.word	0x2003e75c
   d8230:	2003e758 	.word	0x2003e758

000d8234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8234:	4b18      	ldr	r3, [pc, #96]	; (d8298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8236:	681a      	ldr	r2, [r3, #0]
   d8238:	07d1      	lsls	r1, r2, #31
   d823a:	bf5c      	itt	pl
   d823c:	2201      	movpl	r2, #1
   d823e:	601a      	strpl	r2, [r3, #0]
   d8240:	4b16      	ldr	r3, [pc, #88]	; (d829c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8242:	681a      	ldr	r2, [r3, #0]
   d8244:	07d2      	lsls	r2, r2, #31
   d8246:	bf5c      	itt	pl
   d8248:	2201      	movpl	r2, #1
   d824a:	601a      	strpl	r2, [r3, #0]
   d824c:	4b14      	ldr	r3, [pc, #80]	; (d82a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d824e:	681a      	ldr	r2, [r3, #0]
   d8250:	07d0      	lsls	r0, r2, #31
   d8252:	bf5c      	itt	pl
   d8254:	2201      	movpl	r2, #1
   d8256:	601a      	strpl	r2, [r3, #0]
   d8258:	4b12      	ldr	r3, [pc, #72]	; (d82a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d825a:	681a      	ldr	r2, [r3, #0]
   d825c:	07d1      	lsls	r1, r2, #31
   d825e:	bf5c      	itt	pl
   d8260:	2201      	movpl	r2, #1
   d8262:	601a      	strpl	r2, [r3, #0]
   d8264:	4b10      	ldr	r3, [pc, #64]	; (d82a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8266:	681a      	ldr	r2, [r3, #0]
   d8268:	07d2      	lsls	r2, r2, #31
   d826a:	bf5c      	itt	pl
   d826c:	2201      	movpl	r2, #1
   d826e:	601a      	strpl	r2, [r3, #0]
   d8270:	4b0e      	ldr	r3, [pc, #56]	; (d82ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8272:	681a      	ldr	r2, [r3, #0]
   d8274:	07d0      	lsls	r0, r2, #31
   d8276:	bf5c      	itt	pl
   d8278:	2201      	movpl	r2, #1
   d827a:	601a      	strpl	r2, [r3, #0]
   d827c:	4b0c      	ldr	r3, [pc, #48]	; (d82b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d827e:	681a      	ldr	r2, [r3, #0]
   d8280:	07d1      	lsls	r1, r2, #31
   d8282:	bf5c      	itt	pl
   d8284:	2201      	movpl	r2, #1
   d8286:	601a      	strpl	r2, [r3, #0]
   d8288:	4b0a      	ldr	r3, [pc, #40]	; (d82b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d828a:	681a      	ldr	r2, [r3, #0]
   d828c:	07d2      	lsls	r2, r2, #31
   d828e:	bf5c      	itt	pl
   d8290:	2201      	movpl	r2, #1
   d8292:	601a      	strpl	r2, [r3, #0]
   d8294:	4770      	bx	lr
   d8296:	bf00      	nop
   d8298:	2003e794 	.word	0x2003e794
   d829c:	2003e790 	.word	0x2003e790
   d82a0:	2003e78c 	.word	0x2003e78c
   d82a4:	2003e788 	.word	0x2003e788
   d82a8:	2003e784 	.word	0x2003e784
   d82ac:	2003e780 	.word	0x2003e780
   d82b0:	2003e77c 	.word	0x2003e77c
   d82b4:	2003e778 	.word	0x2003e778

000d82b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d82b8:	4b24      	ldr	r3, [pc, #144]	; (d834c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d82ba:	681a      	ldr	r2, [r3, #0]
   d82bc:	07d0      	lsls	r0, r2, #31
   d82be:	bf5c      	itt	pl
   d82c0:	2201      	movpl	r2, #1
   d82c2:	601a      	strpl	r2, [r3, #0]
   d82c4:	4b22      	ldr	r3, [pc, #136]	; (d8350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d82c6:	681a      	ldr	r2, [r3, #0]
   d82c8:	07d1      	lsls	r1, r2, #31
   d82ca:	bf5c      	itt	pl
   d82cc:	2201      	movpl	r2, #1
   d82ce:	601a      	strpl	r2, [r3, #0]
   d82d0:	4b20      	ldr	r3, [pc, #128]	; (d8354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d82d2:	681a      	ldr	r2, [r3, #0]
   d82d4:	07d2      	lsls	r2, r2, #31
   d82d6:	bf5c      	itt	pl
   d82d8:	2201      	movpl	r2, #1
   d82da:	601a      	strpl	r2, [r3, #0]
   d82dc:	4b1e      	ldr	r3, [pc, #120]	; (d8358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d82de:	681a      	ldr	r2, [r3, #0]
   d82e0:	07d0      	lsls	r0, r2, #31
   d82e2:	bf5c      	itt	pl
   d82e4:	2201      	movpl	r2, #1
   d82e6:	601a      	strpl	r2, [r3, #0]
   d82e8:	4b1c      	ldr	r3, [pc, #112]	; (d835c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d82ea:	681a      	ldr	r2, [r3, #0]
   d82ec:	07d1      	lsls	r1, r2, #31
   d82ee:	bf5c      	itt	pl
   d82f0:	2201      	movpl	r2, #1
   d82f2:	601a      	strpl	r2, [r3, #0]
   d82f4:	4b1a      	ldr	r3, [pc, #104]	; (d8360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d82f6:	681a      	ldr	r2, [r3, #0]
   d82f8:	07d2      	lsls	r2, r2, #31
   d82fa:	bf5c      	itt	pl
   d82fc:	2201      	movpl	r2, #1
   d82fe:	601a      	strpl	r2, [r3, #0]
   d8300:	4b18      	ldr	r3, [pc, #96]	; (d8364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8302:	681a      	ldr	r2, [r3, #0]
   d8304:	07d0      	lsls	r0, r2, #31
   d8306:	bf5c      	itt	pl
   d8308:	2201      	movpl	r2, #1
   d830a:	601a      	strpl	r2, [r3, #0]
   d830c:	4b16      	ldr	r3, [pc, #88]	; (d8368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d830e:	681a      	ldr	r2, [r3, #0]
   d8310:	07d1      	lsls	r1, r2, #31
   d8312:	bf5c      	itt	pl
   d8314:	2201      	movpl	r2, #1
   d8316:	601a      	strpl	r2, [r3, #0]
   d8318:	4b14      	ldr	r3, [pc, #80]	; (d836c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d831a:	681a      	ldr	r2, [r3, #0]
   d831c:	07d2      	lsls	r2, r2, #31
   d831e:	bf5c      	itt	pl
   d8320:	2201      	movpl	r2, #1
   d8322:	601a      	strpl	r2, [r3, #0]
   d8324:	4b12      	ldr	r3, [pc, #72]	; (d8370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8326:	681a      	ldr	r2, [r3, #0]
   d8328:	07d0      	lsls	r0, r2, #31
   d832a:	bf5c      	itt	pl
   d832c:	2201      	movpl	r2, #1
   d832e:	601a      	strpl	r2, [r3, #0]
   d8330:	4b10      	ldr	r3, [pc, #64]	; (d8374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8332:	681a      	ldr	r2, [r3, #0]
   d8334:	07d1      	lsls	r1, r2, #31
   d8336:	bf5c      	itt	pl
   d8338:	2201      	movpl	r2, #1
   d833a:	601a      	strpl	r2, [r3, #0]
   d833c:	4b0e      	ldr	r3, [pc, #56]	; (d8378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d833e:	681a      	ldr	r2, [r3, #0]
   d8340:	07d2      	lsls	r2, r2, #31
   d8342:	bf5c      	itt	pl
   d8344:	2201      	movpl	r2, #1
   d8346:	601a      	strpl	r2, [r3, #0]
   d8348:	4770      	bx	lr
   d834a:	bf00      	nop
   d834c:	2003e7c4 	.word	0x2003e7c4
   d8350:	2003e7c0 	.word	0x2003e7c0
   d8354:	2003e7bc 	.word	0x2003e7bc
   d8358:	2003e7b8 	.word	0x2003e7b8
   d835c:	2003e7b4 	.word	0x2003e7b4
   d8360:	2003e7b0 	.word	0x2003e7b0
   d8364:	2003e7ac 	.word	0x2003e7ac
   d8368:	2003e7a8 	.word	0x2003e7a8
   d836c:	2003e7a4 	.word	0x2003e7a4
   d8370:	2003e7a0 	.word	0x2003e7a0
   d8374:	2003e79c 	.word	0x2003e79c
   d8378:	2003e798 	.word	0x2003e798

000d837c <__aeabi_drsub>:
   d837c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8380:	e002      	b.n	d8388 <__adddf3>
   d8382:	bf00      	nop

000d8384 <__aeabi_dsub>:
   d8384:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8388 <__adddf3>:
   d8388:	b530      	push	{r4, r5, lr}
   d838a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d838e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8392:	ea94 0f05 	teq	r4, r5
   d8396:	bf08      	it	eq
   d8398:	ea90 0f02 	teqeq	r0, r2
   d839c:	bf1f      	itttt	ne
   d839e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d83a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d83a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d83aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d83ae:	f000 80e2 	beq.w	d8576 <__adddf3+0x1ee>
   d83b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d83b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d83ba:	bfb8      	it	lt
   d83bc:	426d      	neglt	r5, r5
   d83be:	dd0c      	ble.n	d83da <__adddf3+0x52>
   d83c0:	442c      	add	r4, r5
   d83c2:	ea80 0202 	eor.w	r2, r0, r2
   d83c6:	ea81 0303 	eor.w	r3, r1, r3
   d83ca:	ea82 0000 	eor.w	r0, r2, r0
   d83ce:	ea83 0101 	eor.w	r1, r3, r1
   d83d2:	ea80 0202 	eor.w	r2, r0, r2
   d83d6:	ea81 0303 	eor.w	r3, r1, r3
   d83da:	2d36      	cmp	r5, #54	; 0x36
   d83dc:	bf88      	it	hi
   d83de:	bd30      	pophi	{r4, r5, pc}
   d83e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d83e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d83e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d83ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d83f0:	d002      	beq.n	d83f8 <__adddf3+0x70>
   d83f2:	4240      	negs	r0, r0
   d83f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d83f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d83fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8400:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8404:	d002      	beq.n	d840c <__adddf3+0x84>
   d8406:	4252      	negs	r2, r2
   d8408:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d840c:	ea94 0f05 	teq	r4, r5
   d8410:	f000 80a7 	beq.w	d8562 <__adddf3+0x1da>
   d8414:	f1a4 0401 	sub.w	r4, r4, #1
   d8418:	f1d5 0e20 	rsbs	lr, r5, #32
   d841c:	db0d      	blt.n	d843a <__adddf3+0xb2>
   d841e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8422:	fa22 f205 	lsr.w	r2, r2, r5
   d8426:	1880      	adds	r0, r0, r2
   d8428:	f141 0100 	adc.w	r1, r1, #0
   d842c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8430:	1880      	adds	r0, r0, r2
   d8432:	fa43 f305 	asr.w	r3, r3, r5
   d8436:	4159      	adcs	r1, r3
   d8438:	e00e      	b.n	d8458 <__adddf3+0xd0>
   d843a:	f1a5 0520 	sub.w	r5, r5, #32
   d843e:	f10e 0e20 	add.w	lr, lr, #32
   d8442:	2a01      	cmp	r2, #1
   d8444:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8448:	bf28      	it	cs
   d844a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d844e:	fa43 f305 	asr.w	r3, r3, r5
   d8452:	18c0      	adds	r0, r0, r3
   d8454:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d845c:	d507      	bpl.n	d846e <__adddf3+0xe6>
   d845e:	f04f 0e00 	mov.w	lr, #0
   d8462:	f1dc 0c00 	rsbs	ip, ip, #0
   d8466:	eb7e 0000 	sbcs.w	r0, lr, r0
   d846a:	eb6e 0101 	sbc.w	r1, lr, r1
   d846e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8472:	d31b      	bcc.n	d84ac <__adddf3+0x124>
   d8474:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8478:	d30c      	bcc.n	d8494 <__adddf3+0x10c>
   d847a:	0849      	lsrs	r1, r1, #1
   d847c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8480:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8484:	f104 0401 	add.w	r4, r4, #1
   d8488:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d848c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8490:	f080 809a 	bcs.w	d85c8 <__adddf3+0x240>
   d8494:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8498:	bf08      	it	eq
   d849a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d849e:	f150 0000 	adcs.w	r0, r0, #0
   d84a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d84a6:	ea41 0105 	orr.w	r1, r1, r5
   d84aa:	bd30      	pop	{r4, r5, pc}
   d84ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d84b0:	4140      	adcs	r0, r0
   d84b2:	eb41 0101 	adc.w	r1, r1, r1
   d84b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d84ba:	f1a4 0401 	sub.w	r4, r4, #1
   d84be:	d1e9      	bne.n	d8494 <__adddf3+0x10c>
   d84c0:	f091 0f00 	teq	r1, #0
   d84c4:	bf04      	itt	eq
   d84c6:	4601      	moveq	r1, r0
   d84c8:	2000      	moveq	r0, #0
   d84ca:	fab1 f381 	clz	r3, r1
   d84ce:	bf08      	it	eq
   d84d0:	3320      	addeq	r3, #32
   d84d2:	f1a3 030b 	sub.w	r3, r3, #11
   d84d6:	f1b3 0220 	subs.w	r2, r3, #32
   d84da:	da0c      	bge.n	d84f6 <__adddf3+0x16e>
   d84dc:	320c      	adds	r2, #12
   d84de:	dd08      	ble.n	d84f2 <__adddf3+0x16a>
   d84e0:	f102 0c14 	add.w	ip, r2, #20
   d84e4:	f1c2 020c 	rsb	r2, r2, #12
   d84e8:	fa01 f00c 	lsl.w	r0, r1, ip
   d84ec:	fa21 f102 	lsr.w	r1, r1, r2
   d84f0:	e00c      	b.n	d850c <__adddf3+0x184>
   d84f2:	f102 0214 	add.w	r2, r2, #20
   d84f6:	bfd8      	it	le
   d84f8:	f1c2 0c20 	rsble	ip, r2, #32
   d84fc:	fa01 f102 	lsl.w	r1, r1, r2
   d8500:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8504:	bfdc      	itt	le
   d8506:	ea41 010c 	orrle.w	r1, r1, ip
   d850a:	4090      	lslle	r0, r2
   d850c:	1ae4      	subs	r4, r4, r3
   d850e:	bfa2      	ittt	ge
   d8510:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8514:	4329      	orrge	r1, r5
   d8516:	bd30      	popge	{r4, r5, pc}
   d8518:	ea6f 0404 	mvn.w	r4, r4
   d851c:	3c1f      	subs	r4, #31
   d851e:	da1c      	bge.n	d855a <__adddf3+0x1d2>
   d8520:	340c      	adds	r4, #12
   d8522:	dc0e      	bgt.n	d8542 <__adddf3+0x1ba>
   d8524:	f104 0414 	add.w	r4, r4, #20
   d8528:	f1c4 0220 	rsb	r2, r4, #32
   d852c:	fa20 f004 	lsr.w	r0, r0, r4
   d8530:	fa01 f302 	lsl.w	r3, r1, r2
   d8534:	ea40 0003 	orr.w	r0, r0, r3
   d8538:	fa21 f304 	lsr.w	r3, r1, r4
   d853c:	ea45 0103 	orr.w	r1, r5, r3
   d8540:	bd30      	pop	{r4, r5, pc}
   d8542:	f1c4 040c 	rsb	r4, r4, #12
   d8546:	f1c4 0220 	rsb	r2, r4, #32
   d854a:	fa20 f002 	lsr.w	r0, r0, r2
   d854e:	fa01 f304 	lsl.w	r3, r1, r4
   d8552:	ea40 0003 	orr.w	r0, r0, r3
   d8556:	4629      	mov	r1, r5
   d8558:	bd30      	pop	{r4, r5, pc}
   d855a:	fa21 f004 	lsr.w	r0, r1, r4
   d855e:	4629      	mov	r1, r5
   d8560:	bd30      	pop	{r4, r5, pc}
   d8562:	f094 0f00 	teq	r4, #0
   d8566:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d856a:	bf06      	itte	eq
   d856c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8570:	3401      	addeq	r4, #1
   d8572:	3d01      	subne	r5, #1
   d8574:	e74e      	b.n	d8414 <__adddf3+0x8c>
   d8576:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d857a:	bf18      	it	ne
   d857c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8580:	d029      	beq.n	d85d6 <__adddf3+0x24e>
   d8582:	ea94 0f05 	teq	r4, r5
   d8586:	bf08      	it	eq
   d8588:	ea90 0f02 	teqeq	r0, r2
   d858c:	d005      	beq.n	d859a <__adddf3+0x212>
   d858e:	ea54 0c00 	orrs.w	ip, r4, r0
   d8592:	bf04      	itt	eq
   d8594:	4619      	moveq	r1, r3
   d8596:	4610      	moveq	r0, r2
   d8598:	bd30      	pop	{r4, r5, pc}
   d859a:	ea91 0f03 	teq	r1, r3
   d859e:	bf1e      	ittt	ne
   d85a0:	2100      	movne	r1, #0
   d85a2:	2000      	movne	r0, #0
   d85a4:	bd30      	popne	{r4, r5, pc}
   d85a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d85aa:	d105      	bne.n	d85b8 <__adddf3+0x230>
   d85ac:	0040      	lsls	r0, r0, #1
   d85ae:	4149      	adcs	r1, r1
   d85b0:	bf28      	it	cs
   d85b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d85b6:	bd30      	pop	{r4, r5, pc}
   d85b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d85bc:	bf3c      	itt	cc
   d85be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d85c2:	bd30      	popcc	{r4, r5, pc}
   d85c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d85c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d85cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d85d0:	f04f 0000 	mov.w	r0, #0
   d85d4:	bd30      	pop	{r4, r5, pc}
   d85d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d85da:	bf1a      	itte	ne
   d85dc:	4619      	movne	r1, r3
   d85de:	4610      	movne	r0, r2
   d85e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d85e4:	bf1c      	itt	ne
   d85e6:	460b      	movne	r3, r1
   d85e8:	4602      	movne	r2, r0
   d85ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d85ee:	bf06      	itte	eq
   d85f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d85f4:	ea91 0f03 	teqeq	r1, r3
   d85f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d85fc:	bd30      	pop	{r4, r5, pc}
   d85fe:	bf00      	nop

000d8600 <__aeabi_ui2d>:
   d8600:	f090 0f00 	teq	r0, #0
   d8604:	bf04      	itt	eq
   d8606:	2100      	moveq	r1, #0
   d8608:	4770      	bxeq	lr
   d860a:	b530      	push	{r4, r5, lr}
   d860c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8610:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8614:	f04f 0500 	mov.w	r5, #0
   d8618:	f04f 0100 	mov.w	r1, #0
   d861c:	e750      	b.n	d84c0 <__adddf3+0x138>
   d861e:	bf00      	nop

000d8620 <__aeabi_i2d>:
   d8620:	f090 0f00 	teq	r0, #0
   d8624:	bf04      	itt	eq
   d8626:	2100      	moveq	r1, #0
   d8628:	4770      	bxeq	lr
   d862a:	b530      	push	{r4, r5, lr}
   d862c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8630:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8634:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8638:	bf48      	it	mi
   d863a:	4240      	negmi	r0, r0
   d863c:	f04f 0100 	mov.w	r1, #0
   d8640:	e73e      	b.n	d84c0 <__adddf3+0x138>
   d8642:	bf00      	nop

000d8644 <__aeabi_f2d>:
   d8644:	0042      	lsls	r2, r0, #1
   d8646:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d864a:	ea4f 0131 	mov.w	r1, r1, rrx
   d864e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8652:	bf1f      	itttt	ne
   d8654:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8658:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d865c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8660:	4770      	bxne	lr
   d8662:	f092 0f00 	teq	r2, #0
   d8666:	bf14      	ite	ne
   d8668:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d866c:	4770      	bxeq	lr
   d866e:	b530      	push	{r4, r5, lr}
   d8670:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d867c:	e720      	b.n	d84c0 <__adddf3+0x138>
   d867e:	bf00      	nop

000d8680 <__aeabi_ul2d>:
   d8680:	ea50 0201 	orrs.w	r2, r0, r1
   d8684:	bf08      	it	eq
   d8686:	4770      	bxeq	lr
   d8688:	b530      	push	{r4, r5, lr}
   d868a:	f04f 0500 	mov.w	r5, #0
   d868e:	e00a      	b.n	d86a6 <__aeabi_l2d+0x16>

000d8690 <__aeabi_l2d>:
   d8690:	ea50 0201 	orrs.w	r2, r0, r1
   d8694:	bf08      	it	eq
   d8696:	4770      	bxeq	lr
   d8698:	b530      	push	{r4, r5, lr}
   d869a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d869e:	d502      	bpl.n	d86a6 <__aeabi_l2d+0x16>
   d86a0:	4240      	negs	r0, r0
   d86a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d86a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d86aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d86ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d86b2:	f43f aedc 	beq.w	d846e <__adddf3+0xe6>
   d86b6:	f04f 0203 	mov.w	r2, #3
   d86ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d86be:	bf18      	it	ne
   d86c0:	3203      	addne	r2, #3
   d86c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d86c6:	bf18      	it	ne
   d86c8:	3203      	addne	r2, #3
   d86ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d86ce:	f1c2 0320 	rsb	r3, r2, #32
   d86d2:	fa00 fc03 	lsl.w	ip, r0, r3
   d86d6:	fa20 f002 	lsr.w	r0, r0, r2
   d86da:	fa01 fe03 	lsl.w	lr, r1, r3
   d86de:	ea40 000e 	orr.w	r0, r0, lr
   d86e2:	fa21 f102 	lsr.w	r1, r1, r2
   d86e6:	4414      	add	r4, r2
   d86e8:	e6c1      	b.n	d846e <__adddf3+0xe6>
   d86ea:	bf00      	nop

000d86ec <__aeabi_dmul>:
   d86ec:	b570      	push	{r4, r5, r6, lr}
   d86ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d86f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86fa:	bf1d      	ittte	ne
   d86fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8700:	ea94 0f0c 	teqne	r4, ip
   d8704:	ea95 0f0c 	teqne	r5, ip
   d8708:	f000 f8de 	bleq	d88c8 <__aeabi_dmul+0x1dc>
   d870c:	442c      	add	r4, r5
   d870e:	ea81 0603 	eor.w	r6, r1, r3
   d8712:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8716:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d871a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d871e:	bf18      	it	ne
   d8720:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d872c:	d038      	beq.n	d87a0 <__aeabi_dmul+0xb4>
   d872e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8732:	f04f 0500 	mov.w	r5, #0
   d8736:	fbe1 e502 	umlal	lr, r5, r1, r2
   d873a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d873e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8742:	f04f 0600 	mov.w	r6, #0
   d8746:	fbe1 5603 	umlal	r5, r6, r1, r3
   d874a:	f09c 0f00 	teq	ip, #0
   d874e:	bf18      	it	ne
   d8750:	f04e 0e01 	orrne.w	lr, lr, #1
   d8754:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8758:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d875c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8760:	d204      	bcs.n	d876c <__aeabi_dmul+0x80>
   d8762:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8766:	416d      	adcs	r5, r5
   d8768:	eb46 0606 	adc.w	r6, r6, r6
   d876c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8770:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8774:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8778:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d877c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8780:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8784:	bf88      	it	hi
   d8786:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d878a:	d81e      	bhi.n	d87ca <__aeabi_dmul+0xde>
   d878c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8790:	bf08      	it	eq
   d8792:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8796:	f150 0000 	adcs.w	r0, r0, #0
   d879a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d879e:	bd70      	pop	{r4, r5, r6, pc}
   d87a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d87a4:	ea46 0101 	orr.w	r1, r6, r1
   d87a8:	ea40 0002 	orr.w	r0, r0, r2
   d87ac:	ea81 0103 	eor.w	r1, r1, r3
   d87b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d87b4:	bfc2      	ittt	gt
   d87b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d87ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d87be:	bd70      	popgt	{r4, r5, r6, pc}
   d87c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87c4:	f04f 0e00 	mov.w	lr, #0
   d87c8:	3c01      	subs	r4, #1
   d87ca:	f300 80ab 	bgt.w	d8924 <__aeabi_dmul+0x238>
   d87ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d87d2:	bfde      	ittt	le
   d87d4:	2000      	movle	r0, #0
   d87d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d87da:	bd70      	pople	{r4, r5, r6, pc}
   d87dc:	f1c4 0400 	rsb	r4, r4, #0
   d87e0:	3c20      	subs	r4, #32
   d87e2:	da35      	bge.n	d8850 <__aeabi_dmul+0x164>
   d87e4:	340c      	adds	r4, #12
   d87e6:	dc1b      	bgt.n	d8820 <__aeabi_dmul+0x134>
   d87e8:	f104 0414 	add.w	r4, r4, #20
   d87ec:	f1c4 0520 	rsb	r5, r4, #32
   d87f0:	fa00 f305 	lsl.w	r3, r0, r5
   d87f4:	fa20 f004 	lsr.w	r0, r0, r4
   d87f8:	fa01 f205 	lsl.w	r2, r1, r5
   d87fc:	ea40 0002 	orr.w	r0, r0, r2
   d8800:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8804:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d880c:	fa21 f604 	lsr.w	r6, r1, r4
   d8810:	eb42 0106 	adc.w	r1, r2, r6
   d8814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8818:	bf08      	it	eq
   d881a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d881e:	bd70      	pop	{r4, r5, r6, pc}
   d8820:	f1c4 040c 	rsb	r4, r4, #12
   d8824:	f1c4 0520 	rsb	r5, r4, #32
   d8828:	fa00 f304 	lsl.w	r3, r0, r4
   d882c:	fa20 f005 	lsr.w	r0, r0, r5
   d8830:	fa01 f204 	lsl.w	r2, r1, r4
   d8834:	ea40 0002 	orr.w	r0, r0, r2
   d8838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d883c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8840:	f141 0100 	adc.w	r1, r1, #0
   d8844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8848:	bf08      	it	eq
   d884a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d884e:	bd70      	pop	{r4, r5, r6, pc}
   d8850:	f1c4 0520 	rsb	r5, r4, #32
   d8854:	fa00 f205 	lsl.w	r2, r0, r5
   d8858:	ea4e 0e02 	orr.w	lr, lr, r2
   d885c:	fa20 f304 	lsr.w	r3, r0, r4
   d8860:	fa01 f205 	lsl.w	r2, r1, r5
   d8864:	ea43 0302 	orr.w	r3, r3, r2
   d8868:	fa21 f004 	lsr.w	r0, r1, r4
   d886c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8870:	fa21 f204 	lsr.w	r2, r1, r4
   d8874:	ea20 0002 	bic.w	r0, r0, r2
   d8878:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d887c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8880:	bf08      	it	eq
   d8882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8886:	bd70      	pop	{r4, r5, r6, pc}
   d8888:	f094 0f00 	teq	r4, #0
   d888c:	d10f      	bne.n	d88ae <__aeabi_dmul+0x1c2>
   d888e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8892:	0040      	lsls	r0, r0, #1
   d8894:	eb41 0101 	adc.w	r1, r1, r1
   d8898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d889c:	bf08      	it	eq
   d889e:	3c01      	subeq	r4, #1
   d88a0:	d0f7      	beq.n	d8892 <__aeabi_dmul+0x1a6>
   d88a2:	ea41 0106 	orr.w	r1, r1, r6
   d88a6:	f095 0f00 	teq	r5, #0
   d88aa:	bf18      	it	ne
   d88ac:	4770      	bxne	lr
   d88ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d88b2:	0052      	lsls	r2, r2, #1
   d88b4:	eb43 0303 	adc.w	r3, r3, r3
   d88b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d88bc:	bf08      	it	eq
   d88be:	3d01      	subeq	r5, #1
   d88c0:	d0f7      	beq.n	d88b2 <__aeabi_dmul+0x1c6>
   d88c2:	ea43 0306 	orr.w	r3, r3, r6
   d88c6:	4770      	bx	lr
   d88c8:	ea94 0f0c 	teq	r4, ip
   d88cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d88d0:	bf18      	it	ne
   d88d2:	ea95 0f0c 	teqne	r5, ip
   d88d6:	d00c      	beq.n	d88f2 <__aeabi_dmul+0x206>
   d88d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88dc:	bf18      	it	ne
   d88de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88e2:	d1d1      	bne.n	d8888 <__aeabi_dmul+0x19c>
   d88e4:	ea81 0103 	eor.w	r1, r1, r3
   d88e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88ec:	f04f 0000 	mov.w	r0, #0
   d88f0:	bd70      	pop	{r4, r5, r6, pc}
   d88f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88f6:	bf06      	itte	eq
   d88f8:	4610      	moveq	r0, r2
   d88fa:	4619      	moveq	r1, r3
   d88fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8900:	d019      	beq.n	d8936 <__aeabi_dmul+0x24a>
   d8902:	ea94 0f0c 	teq	r4, ip
   d8906:	d102      	bne.n	d890e <__aeabi_dmul+0x222>
   d8908:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d890c:	d113      	bne.n	d8936 <__aeabi_dmul+0x24a>
   d890e:	ea95 0f0c 	teq	r5, ip
   d8912:	d105      	bne.n	d8920 <__aeabi_dmul+0x234>
   d8914:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8918:	bf1c      	itt	ne
   d891a:	4610      	movne	r0, r2
   d891c:	4619      	movne	r1, r3
   d891e:	d10a      	bne.n	d8936 <__aeabi_dmul+0x24a>
   d8920:	ea81 0103 	eor.w	r1, r1, r3
   d8924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8928:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d892c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8930:	f04f 0000 	mov.w	r0, #0
   d8934:	bd70      	pop	{r4, r5, r6, pc}
   d8936:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d893a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d893e:	bd70      	pop	{r4, r5, r6, pc}

000d8940 <__aeabi_ddiv>:
   d8940:	b570      	push	{r4, r5, r6, lr}
   d8942:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d894a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d894e:	bf1d      	ittte	ne
   d8950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8954:	ea94 0f0c 	teqne	r4, ip
   d8958:	ea95 0f0c 	teqne	r5, ip
   d895c:	f000 f8a7 	bleq	d8aae <__aeabi_ddiv+0x16e>
   d8960:	eba4 0405 	sub.w	r4, r4, r5
   d8964:	ea81 0e03 	eor.w	lr, r1, r3
   d8968:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d896c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8970:	f000 8088 	beq.w	d8a84 <__aeabi_ddiv+0x144>
   d8974:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8978:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d897c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8980:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8984:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8988:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d898c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8990:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8994:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8998:	429d      	cmp	r5, r3
   d899a:	bf08      	it	eq
   d899c:	4296      	cmpeq	r6, r2
   d899e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d89a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d89a6:	d202      	bcs.n	d89ae <__aeabi_ddiv+0x6e>
   d89a8:	085b      	lsrs	r3, r3, #1
   d89aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d89ae:	1ab6      	subs	r6, r6, r2
   d89b0:	eb65 0503 	sbc.w	r5, r5, r3
   d89b4:	085b      	lsrs	r3, r3, #1
   d89b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d89ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d89be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d89c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d89c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89ca:	bf22      	ittt	cs
   d89cc:	1ab6      	subcs	r6, r6, r2
   d89ce:	4675      	movcs	r5, lr
   d89d0:	ea40 000c 	orrcs.w	r0, r0, ip
   d89d4:	085b      	lsrs	r3, r3, #1
   d89d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d89da:	ebb6 0e02 	subs.w	lr, r6, r2
   d89de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89e2:	bf22      	ittt	cs
   d89e4:	1ab6      	subcs	r6, r6, r2
   d89e6:	4675      	movcs	r5, lr
   d89e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d89ec:	085b      	lsrs	r3, r3, #1
   d89ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d89f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d89f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89fa:	bf22      	ittt	cs
   d89fc:	1ab6      	subcs	r6, r6, r2
   d89fe:	4675      	movcs	r5, lr
   d8a00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8a04:	085b      	lsrs	r3, r3, #1
   d8a06:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a0a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a12:	bf22      	ittt	cs
   d8a14:	1ab6      	subcs	r6, r6, r2
   d8a16:	4675      	movcs	r5, lr
   d8a18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8a1c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8a20:	d018      	beq.n	d8a54 <__aeabi_ddiv+0x114>
   d8a22:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8a26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8a2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8a2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8a32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8a36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8a3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8a3e:	d1c0      	bne.n	d89c2 <__aeabi_ddiv+0x82>
   d8a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a44:	d10b      	bne.n	d8a5e <__aeabi_ddiv+0x11e>
   d8a46:	ea41 0100 	orr.w	r1, r1, r0
   d8a4a:	f04f 0000 	mov.w	r0, #0
   d8a4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8a52:	e7b6      	b.n	d89c2 <__aeabi_ddiv+0x82>
   d8a54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a58:	bf04      	itt	eq
   d8a5a:	4301      	orreq	r1, r0
   d8a5c:	2000      	moveq	r0, #0
   d8a5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a62:	bf88      	it	hi
   d8a64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a68:	f63f aeaf 	bhi.w	d87ca <__aeabi_dmul+0xde>
   d8a6c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8a70:	bf04      	itt	eq
   d8a72:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8a76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a7a:	f150 0000 	adcs.w	r0, r0, #0
   d8a7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a82:	bd70      	pop	{r4, r5, r6, pc}
   d8a84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8a88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8a8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8a90:	bfc2      	ittt	gt
   d8a92:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8a9a:	bd70      	popgt	{r4, r5, r6, pc}
   d8a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8aa0:	f04f 0e00 	mov.w	lr, #0
   d8aa4:	3c01      	subs	r4, #1
   d8aa6:	e690      	b.n	d87ca <__aeabi_dmul+0xde>
   d8aa8:	ea45 0e06 	orr.w	lr, r5, r6
   d8aac:	e68d      	b.n	d87ca <__aeabi_dmul+0xde>
   d8aae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8ab2:	ea94 0f0c 	teq	r4, ip
   d8ab6:	bf08      	it	eq
   d8ab8:	ea95 0f0c 	teqeq	r5, ip
   d8abc:	f43f af3b 	beq.w	d8936 <__aeabi_dmul+0x24a>
   d8ac0:	ea94 0f0c 	teq	r4, ip
   d8ac4:	d10a      	bne.n	d8adc <__aeabi_ddiv+0x19c>
   d8ac6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8aca:	f47f af34 	bne.w	d8936 <__aeabi_dmul+0x24a>
   d8ace:	ea95 0f0c 	teq	r5, ip
   d8ad2:	f47f af25 	bne.w	d8920 <__aeabi_dmul+0x234>
   d8ad6:	4610      	mov	r0, r2
   d8ad8:	4619      	mov	r1, r3
   d8ada:	e72c      	b.n	d8936 <__aeabi_dmul+0x24a>
   d8adc:	ea95 0f0c 	teq	r5, ip
   d8ae0:	d106      	bne.n	d8af0 <__aeabi_ddiv+0x1b0>
   d8ae2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ae6:	f43f aefd 	beq.w	d88e4 <__aeabi_dmul+0x1f8>
   d8aea:	4610      	mov	r0, r2
   d8aec:	4619      	mov	r1, r3
   d8aee:	e722      	b.n	d8936 <__aeabi_dmul+0x24a>
   d8af0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8af4:	bf18      	it	ne
   d8af6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8afa:	f47f aec5 	bne.w	d8888 <__aeabi_dmul+0x19c>
   d8afe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8b02:	f47f af0d 	bne.w	d8920 <__aeabi_dmul+0x234>
   d8b06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8b0a:	f47f aeeb 	bne.w	d88e4 <__aeabi_dmul+0x1f8>
   d8b0e:	e712      	b.n	d8936 <__aeabi_dmul+0x24a>

000d8b10 <__gedf2>:
   d8b10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8b14:	e006      	b.n	d8b24 <__cmpdf2+0x4>
   d8b16:	bf00      	nop

000d8b18 <__ledf2>:
   d8b18:	f04f 0c01 	mov.w	ip, #1
   d8b1c:	e002      	b.n	d8b24 <__cmpdf2+0x4>
   d8b1e:	bf00      	nop

000d8b20 <__cmpdf2>:
   d8b20:	f04f 0c01 	mov.w	ip, #1
   d8b24:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b34:	bf18      	it	ne
   d8b36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8b3a:	d01b      	beq.n	d8b74 <__cmpdf2+0x54>
   d8b3c:	b001      	add	sp, #4
   d8b3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8b42:	bf0c      	ite	eq
   d8b44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8b48:	ea91 0f03 	teqne	r1, r3
   d8b4c:	bf02      	ittt	eq
   d8b4e:	ea90 0f02 	teqeq	r0, r2
   d8b52:	2000      	moveq	r0, #0
   d8b54:	4770      	bxeq	lr
   d8b56:	f110 0f00 	cmn.w	r0, #0
   d8b5a:	ea91 0f03 	teq	r1, r3
   d8b5e:	bf58      	it	pl
   d8b60:	4299      	cmppl	r1, r3
   d8b62:	bf08      	it	eq
   d8b64:	4290      	cmpeq	r0, r2
   d8b66:	bf2c      	ite	cs
   d8b68:	17d8      	asrcs	r0, r3, #31
   d8b6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8b6e:	f040 0001 	orr.w	r0, r0, #1
   d8b72:	4770      	bx	lr
   d8b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b7c:	d102      	bne.n	d8b84 <__cmpdf2+0x64>
   d8b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8b82:	d107      	bne.n	d8b94 <__cmpdf2+0x74>
   d8b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b8c:	d1d6      	bne.n	d8b3c <__cmpdf2+0x1c>
   d8b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b92:	d0d3      	beq.n	d8b3c <__cmpdf2+0x1c>
   d8b94:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8b98:	4770      	bx	lr
   d8b9a:	bf00      	nop

000d8b9c <__aeabi_cdrcmple>:
   d8b9c:	4684      	mov	ip, r0
   d8b9e:	4610      	mov	r0, r2
   d8ba0:	4662      	mov	r2, ip
   d8ba2:	468c      	mov	ip, r1
   d8ba4:	4619      	mov	r1, r3
   d8ba6:	4663      	mov	r3, ip
   d8ba8:	e000      	b.n	d8bac <__aeabi_cdcmpeq>
   d8baa:	bf00      	nop

000d8bac <__aeabi_cdcmpeq>:
   d8bac:	b501      	push	{r0, lr}
   d8bae:	f7ff ffb7 	bl	d8b20 <__cmpdf2>
   d8bb2:	2800      	cmp	r0, #0
   d8bb4:	bf48      	it	mi
   d8bb6:	f110 0f00 	cmnmi.w	r0, #0
   d8bba:	bd01      	pop	{r0, pc}

000d8bbc <__aeabi_dcmpeq>:
   d8bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bc0:	f7ff fff4 	bl	d8bac <__aeabi_cdcmpeq>
   d8bc4:	bf0c      	ite	eq
   d8bc6:	2001      	moveq	r0, #1
   d8bc8:	2000      	movne	r0, #0
   d8bca:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bce:	bf00      	nop

000d8bd0 <__aeabi_dcmplt>:
   d8bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bd4:	f7ff ffea 	bl	d8bac <__aeabi_cdcmpeq>
   d8bd8:	bf34      	ite	cc
   d8bda:	2001      	movcc	r0, #1
   d8bdc:	2000      	movcs	r0, #0
   d8bde:	f85d fb08 	ldr.w	pc, [sp], #8
   d8be2:	bf00      	nop

000d8be4 <__aeabi_dcmple>:
   d8be4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8be8:	f7ff ffe0 	bl	d8bac <__aeabi_cdcmpeq>
   d8bec:	bf94      	ite	ls
   d8bee:	2001      	movls	r0, #1
   d8bf0:	2000      	movhi	r0, #0
   d8bf2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bf6:	bf00      	nop

000d8bf8 <__aeabi_dcmpge>:
   d8bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bfc:	f7ff ffce 	bl	d8b9c <__aeabi_cdrcmple>
   d8c00:	bf94      	ite	ls
   d8c02:	2001      	movls	r0, #1
   d8c04:	2000      	movhi	r0, #0
   d8c06:	f85d fb08 	ldr.w	pc, [sp], #8
   d8c0a:	bf00      	nop

000d8c0c <__aeabi_dcmpgt>:
   d8c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8c10:	f7ff ffc4 	bl	d8b9c <__aeabi_cdrcmple>
   d8c14:	bf34      	ite	cc
   d8c16:	2001      	movcc	r0, #1
   d8c18:	2000      	movcs	r0, #0
   d8c1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8c1e:	bf00      	nop

000d8c20 <__aeabi_dcmpun>:
   d8c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c28:	d102      	bne.n	d8c30 <__aeabi_dcmpun+0x10>
   d8c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8c2e:	d10a      	bne.n	d8c46 <__aeabi_dcmpun+0x26>
   d8c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c38:	d102      	bne.n	d8c40 <__aeabi_dcmpun+0x20>
   d8c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8c3e:	d102      	bne.n	d8c46 <__aeabi_dcmpun+0x26>
   d8c40:	f04f 0000 	mov.w	r0, #0
   d8c44:	4770      	bx	lr
   d8c46:	f04f 0001 	mov.w	r0, #1
   d8c4a:	4770      	bx	lr

000d8c4c <__aeabi_d2iz>:
   d8c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8c50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8c54:	d215      	bcs.n	d8c82 <__aeabi_d2iz+0x36>
   d8c56:	d511      	bpl.n	d8c7c <__aeabi_d2iz+0x30>
   d8c58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8c5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8c60:	d912      	bls.n	d8c88 <__aeabi_d2iz+0x3c>
   d8c62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8c6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8c6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8c72:	fa23 f002 	lsr.w	r0, r3, r2
   d8c76:	bf18      	it	ne
   d8c78:	4240      	negne	r0, r0
   d8c7a:	4770      	bx	lr
   d8c7c:	f04f 0000 	mov.w	r0, #0
   d8c80:	4770      	bx	lr
   d8c82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8c86:	d105      	bne.n	d8c94 <__aeabi_d2iz+0x48>
   d8c88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8c8c:	bf08      	it	eq
   d8c8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8c92:	4770      	bx	lr
   d8c94:	f04f 0000 	mov.w	r0, #0
   d8c98:	4770      	bx	lr
   d8c9a:	bf00      	nop

000d8c9c <__aeabi_d2uiz>:
   d8c9c:	004a      	lsls	r2, r1, #1
   d8c9e:	d211      	bcs.n	d8cc4 <__aeabi_d2uiz+0x28>
   d8ca0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8ca4:	d211      	bcs.n	d8cca <__aeabi_d2uiz+0x2e>
   d8ca6:	d50d      	bpl.n	d8cc4 <__aeabi_d2uiz+0x28>
   d8ca8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8cac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8cb0:	d40e      	bmi.n	d8cd0 <__aeabi_d2uiz+0x34>
   d8cb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8cba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8cbe:	fa23 f002 	lsr.w	r0, r3, r2
   d8cc2:	4770      	bx	lr
   d8cc4:	f04f 0000 	mov.w	r0, #0
   d8cc8:	4770      	bx	lr
   d8cca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8cce:	d102      	bne.n	d8cd6 <__aeabi_d2uiz+0x3a>
   d8cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8cd4:	4770      	bx	lr
   d8cd6:	f04f 0000 	mov.w	r0, #0
   d8cda:	4770      	bx	lr

000d8cdc <__aeabi_d2f>:
   d8cdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8ce0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8ce4:	bf24      	itt	cs
   d8ce6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8cea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8cee:	d90d      	bls.n	d8d0c <__aeabi_d2f+0x30>
   d8cf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8cf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8cf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8cfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8d00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8d04:	bf08      	it	eq
   d8d06:	f020 0001 	biceq.w	r0, r0, #1
   d8d0a:	4770      	bx	lr
   d8d0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8d10:	d121      	bne.n	d8d56 <__aeabi_d2f+0x7a>
   d8d12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8d16:	bfbc      	itt	lt
   d8d18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8d1c:	4770      	bxlt	lr
   d8d1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d22:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8d26:	f1c2 0218 	rsb	r2, r2, #24
   d8d2a:	f1c2 0c20 	rsb	ip, r2, #32
   d8d2e:	fa10 f30c 	lsls.w	r3, r0, ip
   d8d32:	fa20 f002 	lsr.w	r0, r0, r2
   d8d36:	bf18      	it	ne
   d8d38:	f040 0001 	orrne.w	r0, r0, #1
   d8d3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8d40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8d44:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8d48:	ea40 000c 	orr.w	r0, r0, ip
   d8d4c:	fa23 f302 	lsr.w	r3, r3, r2
   d8d50:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8d54:	e7cc      	b.n	d8cf0 <__aeabi_d2f+0x14>
   d8d56:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8d5a:	d107      	bne.n	d8d6c <__aeabi_d2f+0x90>
   d8d5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8d60:	bf1e      	ittt	ne
   d8d62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8d66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8d6a:	4770      	bxne	lr
   d8d6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8d70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8d74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8d78:	4770      	bx	lr
   d8d7a:	bf00      	nop

000d8d7c <atoi>:
   d8d7c:	220a      	movs	r2, #10
   d8d7e:	2100      	movs	r1, #0
   d8d80:	f001 b868 	b.w	d9e54 <strtol>

000d8d84 <__cxa_atexit>:
   d8d84:	b510      	push	{r4, lr}
   d8d86:	4c05      	ldr	r4, [pc, #20]	; (d8d9c <__cxa_atexit+0x18>)
   d8d88:	4613      	mov	r3, r2
   d8d8a:	b12c      	cbz	r4, d8d98 <__cxa_atexit+0x14>
   d8d8c:	460a      	mov	r2, r1
   d8d8e:	4601      	mov	r1, r0
   d8d90:	2002      	movs	r0, #2
   d8d92:	f3af 8000 	nop.w
   d8d96:	bd10      	pop	{r4, pc}
   d8d98:	4620      	mov	r0, r4
   d8d9a:	bd10      	pop	{r4, pc}
   d8d9c:	00000000 	.word	0x00000000

000d8da0 <localtime>:
   d8da0:	b538      	push	{r3, r4, r5, lr}
   d8da2:	4b07      	ldr	r3, [pc, #28]	; (d8dc0 <localtime+0x20>)
   d8da4:	681c      	ldr	r4, [r3, #0]
   d8da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8da8:	4605      	mov	r5, r0
   d8daa:	b91b      	cbnz	r3, d8db4 <localtime+0x14>
   d8dac:	2024      	movs	r0, #36	; 0x24
   d8dae:	f7fd fbff 	bl	d65b0 <malloc>
   d8db2:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8db4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8db6:	4628      	mov	r0, r5
   d8db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8dbc:	f000 b802 	b.w	d8dc4 <localtime_r>
   d8dc0:	2003e130 	.word	0x2003e130

000d8dc4 <localtime_r>:
   d8dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8dc8:	460c      	mov	r4, r1
   d8dca:	4680      	mov	r8, r0
   d8dcc:	f001 fe66 	bl	daa9c <__gettzinfo>
   d8dd0:	4621      	mov	r1, r4
   d8dd2:	4607      	mov	r7, r0
   d8dd4:	4640      	mov	r0, r8
   d8dd6:	f001 fe65 	bl	daaa4 <gmtime_r>
   d8dda:	6946      	ldr	r6, [r0, #20]
   d8ddc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8de0:	07b3      	lsls	r3, r6, #30
   d8de2:	4604      	mov	r4, r0
   d8de4:	d105      	bne.n	d8df2 <localtime_r+0x2e>
   d8de6:	2264      	movs	r2, #100	; 0x64
   d8de8:	fb96 f3f2 	sdiv	r3, r6, r2
   d8dec:	fb02 6313 	mls	r3, r2, r3, r6
   d8df0:	b94b      	cbnz	r3, d8e06 <localtime_r+0x42>
   d8df2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d8df6:	fb96 f3f5 	sdiv	r3, r6, r5
   d8dfa:	fb05 6513 	mls	r5, r5, r3, r6
   d8dfe:	fab5 f385 	clz	r3, r5
   d8e02:	095b      	lsrs	r3, r3, #5
   d8e04:	e000      	b.n	d8e08 <localtime_r+0x44>
   d8e06:	2301      	movs	r3, #1
   d8e08:	4a5f      	ldr	r2, [pc, #380]	; (d8f88 <localtime_r+0x1c4>)
   d8e0a:	2530      	movs	r5, #48	; 0x30
   d8e0c:	fb05 2503 	mla	r5, r5, r3, r2
   d8e10:	f001 f95a 	bl	da0c8 <__tz_lock>
   d8e14:	f001 f95a 	bl	da0cc <_tzset_unlocked>
   d8e18:	4b5c      	ldr	r3, [pc, #368]	; (d8f8c <localtime_r+0x1c8>)
   d8e1a:	681b      	ldr	r3, [r3, #0]
   d8e1c:	b1f3      	cbz	r3, d8e5c <localtime_r+0x98>
   d8e1e:	687b      	ldr	r3, [r7, #4]
   d8e20:	429e      	cmp	r6, r3
   d8e22:	d105      	bne.n	d8e30 <localtime_r+0x6c>
   d8e24:	6839      	ldr	r1, [r7, #0]
   d8e26:	f8d8 3000 	ldr.w	r3, [r8]
   d8e2a:	69fa      	ldr	r2, [r7, #28]
   d8e2c:	b941      	cbnz	r1, d8e40 <localtime_r+0x7c>
   d8e2e:	e00a      	b.n	d8e46 <localtime_r+0x82>
   d8e30:	4630      	mov	r0, r6
   d8e32:	f001 f8a1 	bl	d9f78 <__tzcalc_limits>
   d8e36:	2800      	cmp	r0, #0
   d8e38:	d1f4      	bne.n	d8e24 <localtime_r+0x60>
   d8e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8e3e:	e00d      	b.n	d8e5c <localtime_r+0x98>
   d8e40:	4293      	cmp	r3, r2
   d8e42:	db08      	blt.n	d8e56 <localtime_r+0x92>
   d8e44:	e001      	b.n	d8e4a <localtime_r+0x86>
   d8e46:	4293      	cmp	r3, r2
   d8e48:	da07      	bge.n	d8e5a <localtime_r+0x96>
   d8e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8e4c:	4293      	cmp	r3, r2
   d8e4e:	bfac      	ite	ge
   d8e50:	2300      	movge	r3, #0
   d8e52:	2301      	movlt	r3, #1
   d8e54:	e002      	b.n	d8e5c <localtime_r+0x98>
   d8e56:	2300      	movs	r3, #0
   d8e58:	e000      	b.n	d8e5c <localtime_r+0x98>
   d8e5a:	2301      	movs	r3, #1
   d8e5c:	6223      	str	r3, [r4, #32]
   d8e5e:	6a23      	ldr	r3, [r4, #32]
   d8e60:	2b01      	cmp	r3, #1
   d8e62:	bf0c      	ite	eq
   d8e64:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8e66:	6a39      	ldrne	r1, [r7, #32]
   d8e68:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8e6c:	203c      	movs	r0, #60	; 0x3c
   d8e6e:	fb91 f6f3 	sdiv	r6, r1, r3
   d8e72:	fb03 1316 	mls	r3, r3, r6, r1
   d8e76:	6861      	ldr	r1, [r4, #4]
   d8e78:	fb93 f2f0 	sdiv	r2, r3, r0
   d8e7c:	fb00 3012 	mls	r0, r0, r2, r3
   d8e80:	6823      	ldr	r3, [r4, #0]
   d8e82:	1a89      	subs	r1, r1, r2
   d8e84:	68a2      	ldr	r2, [r4, #8]
   d8e86:	6061      	str	r1, [r4, #4]
   d8e88:	1a1b      	subs	r3, r3, r0
   d8e8a:	1b92      	subs	r2, r2, r6
   d8e8c:	2b3b      	cmp	r3, #59	; 0x3b
   d8e8e:	6023      	str	r3, [r4, #0]
   d8e90:	60a2      	str	r2, [r4, #8]
   d8e92:	dd03      	ble.n	d8e9c <localtime_r+0xd8>
   d8e94:	3101      	adds	r1, #1
   d8e96:	6061      	str	r1, [r4, #4]
   d8e98:	3b3c      	subs	r3, #60	; 0x3c
   d8e9a:	e004      	b.n	d8ea6 <localtime_r+0xe2>
   d8e9c:	2b00      	cmp	r3, #0
   d8e9e:	da03      	bge.n	d8ea8 <localtime_r+0xe4>
   d8ea0:	3901      	subs	r1, #1
   d8ea2:	6061      	str	r1, [r4, #4]
   d8ea4:	333c      	adds	r3, #60	; 0x3c
   d8ea6:	6023      	str	r3, [r4, #0]
   d8ea8:	6863      	ldr	r3, [r4, #4]
   d8eaa:	2b3b      	cmp	r3, #59	; 0x3b
   d8eac:	dd03      	ble.n	d8eb6 <localtime_r+0xf2>
   d8eae:	3201      	adds	r2, #1
   d8eb0:	60a2      	str	r2, [r4, #8]
   d8eb2:	3b3c      	subs	r3, #60	; 0x3c
   d8eb4:	e004      	b.n	d8ec0 <localtime_r+0xfc>
   d8eb6:	2b00      	cmp	r3, #0
   d8eb8:	da03      	bge.n	d8ec2 <localtime_r+0xfe>
   d8eba:	3a01      	subs	r2, #1
   d8ebc:	60a2      	str	r2, [r4, #8]
   d8ebe:	333c      	adds	r3, #60	; 0x3c
   d8ec0:	6063      	str	r3, [r4, #4]
   d8ec2:	68a3      	ldr	r3, [r4, #8]
   d8ec4:	2b17      	cmp	r3, #23
   d8ec6:	dd22      	ble.n	d8f0e <localtime_r+0x14a>
   d8ec8:	69e2      	ldr	r2, [r4, #28]
   d8eca:	3201      	adds	r2, #1
   d8ecc:	61e2      	str	r2, [r4, #28]
   d8ece:	69a2      	ldr	r2, [r4, #24]
   d8ed0:	3201      	adds	r2, #1
   d8ed2:	2a06      	cmp	r2, #6
   d8ed4:	bfc8      	it	gt
   d8ed6:	2200      	movgt	r2, #0
   d8ed8:	61a2      	str	r2, [r4, #24]
   d8eda:	68e2      	ldr	r2, [r4, #12]
   d8edc:	3b18      	subs	r3, #24
   d8ede:	3201      	adds	r2, #1
   d8ee0:	60a3      	str	r3, [r4, #8]
   d8ee2:	6923      	ldr	r3, [r4, #16]
   d8ee4:	60e2      	str	r2, [r4, #12]
   d8ee6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8eea:	428a      	cmp	r2, r1
   d8eec:	dd46      	ble.n	d8f7c <localtime_r+0x1b8>
   d8eee:	3301      	adds	r3, #1
   d8ef0:	2b0c      	cmp	r3, #12
   d8ef2:	bf0c      	ite	eq
   d8ef4:	6963      	ldreq	r3, [r4, #20]
   d8ef6:	6123      	strne	r3, [r4, #16]
   d8ef8:	eba2 0201 	sub.w	r2, r2, r1
   d8efc:	60e2      	str	r2, [r4, #12]
   d8efe:	bf01      	itttt	eq
   d8f00:	3301      	addeq	r3, #1
   d8f02:	2200      	moveq	r2, #0
   d8f04:	6122      	streq	r2, [r4, #16]
   d8f06:	6163      	streq	r3, [r4, #20]
   d8f08:	bf08      	it	eq
   d8f0a:	61e2      	streq	r2, [r4, #28]
   d8f0c:	e036      	b.n	d8f7c <localtime_r+0x1b8>
   d8f0e:	2b00      	cmp	r3, #0
   d8f10:	da34      	bge.n	d8f7c <localtime_r+0x1b8>
   d8f12:	69e2      	ldr	r2, [r4, #28]
   d8f14:	3a01      	subs	r2, #1
   d8f16:	61e2      	str	r2, [r4, #28]
   d8f18:	69a2      	ldr	r2, [r4, #24]
   d8f1a:	3a01      	subs	r2, #1
   d8f1c:	bf48      	it	mi
   d8f1e:	2206      	movmi	r2, #6
   d8f20:	61a2      	str	r2, [r4, #24]
   d8f22:	68e2      	ldr	r2, [r4, #12]
   d8f24:	3318      	adds	r3, #24
   d8f26:	3a01      	subs	r2, #1
   d8f28:	60e2      	str	r2, [r4, #12]
   d8f2a:	60a3      	str	r3, [r4, #8]
   d8f2c:	bb32      	cbnz	r2, d8f7c <localtime_r+0x1b8>
   d8f2e:	6923      	ldr	r3, [r4, #16]
   d8f30:	3b01      	subs	r3, #1
   d8f32:	d401      	bmi.n	d8f38 <localtime_r+0x174>
   d8f34:	6123      	str	r3, [r4, #16]
   d8f36:	e01d      	b.n	d8f74 <localtime_r+0x1b0>
   d8f38:	230b      	movs	r3, #11
   d8f3a:	6123      	str	r3, [r4, #16]
   d8f3c:	6963      	ldr	r3, [r4, #20]
   d8f3e:	1e5a      	subs	r2, r3, #1
   d8f40:	f012 0f03 	tst.w	r2, #3
   d8f44:	6162      	str	r2, [r4, #20]
   d8f46:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8f4a:	d105      	bne.n	d8f58 <localtime_r+0x194>
   d8f4c:	2164      	movs	r1, #100	; 0x64
   d8f4e:	fb93 f2f1 	sdiv	r2, r3, r1
   d8f52:	fb01 3212 	mls	r2, r1, r2, r3
   d8f56:	b94a      	cbnz	r2, d8f6c <localtime_r+0x1a8>
   d8f58:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8f5c:	fb93 f2f1 	sdiv	r2, r3, r1
   d8f60:	fb01 3312 	mls	r3, r1, r2, r3
   d8f64:	fab3 f383 	clz	r3, r3
   d8f68:	095b      	lsrs	r3, r3, #5
   d8f6a:	e000      	b.n	d8f6e <localtime_r+0x1aa>
   d8f6c:	2301      	movs	r3, #1
   d8f6e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8f72:	61e3      	str	r3, [r4, #28]
   d8f74:	6923      	ldr	r3, [r4, #16]
   d8f76:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8f7a:	60e3      	str	r3, [r4, #12]
   d8f7c:	f001 f8a5 	bl	da0ca <__tz_unlock>
   d8f80:	4620      	mov	r0, r4
   d8f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f86:	bf00      	nop
   d8f88:	000dbef4 	.word	0x000dbef4
   d8f8c:	2003e7e4 	.word	0x2003e7e4

000d8f90 <_localeconv_r>:
   d8f90:	4800      	ldr	r0, [pc, #0]	; (d8f94 <_localeconv_r+0x4>)
   d8f92:	4770      	bx	lr
   d8f94:	2003e134 	.word	0x2003e134

000d8f98 <memcpy>:
   d8f98:	b510      	push	{r4, lr}
   d8f9a:	1e43      	subs	r3, r0, #1
   d8f9c:	440a      	add	r2, r1
   d8f9e:	4291      	cmp	r1, r2
   d8fa0:	d004      	beq.n	d8fac <memcpy+0x14>
   d8fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8faa:	e7f8      	b.n	d8f9e <memcpy+0x6>
   d8fac:	bd10      	pop	{r4, pc}

000d8fae <memset>:
   d8fae:	4402      	add	r2, r0
   d8fb0:	4603      	mov	r3, r0
   d8fb2:	4293      	cmp	r3, r2
   d8fb4:	d002      	beq.n	d8fbc <memset+0xe>
   d8fb6:	f803 1b01 	strb.w	r1, [r3], #1
   d8fba:	e7fa      	b.n	d8fb2 <memset+0x4>
   d8fbc:	4770      	bx	lr
	...

000d8fc0 <srand>:
   d8fc0:	b538      	push	{r3, r4, r5, lr}
   d8fc2:	4b12      	ldr	r3, [pc, #72]	; (d900c <srand+0x4c>)
   d8fc4:	681c      	ldr	r4, [r3, #0]
   d8fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8fc8:	4605      	mov	r5, r0
   d8fca:	b9d3      	cbnz	r3, d9002 <srand+0x42>
   d8fcc:	2018      	movs	r0, #24
   d8fce:	f7fd faef 	bl	d65b0 <malloc>
   d8fd2:	f243 330e 	movw	r3, #13070	; 0x330e
   d8fd6:	63a0      	str	r0, [r4, #56]	; 0x38
   d8fd8:	8003      	strh	r3, [r0, #0]
   d8fda:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8fde:	8043      	strh	r3, [r0, #2]
   d8fe0:	f241 2334 	movw	r3, #4660	; 0x1234
   d8fe4:	8083      	strh	r3, [r0, #4]
   d8fe6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8fea:	80c3      	strh	r3, [r0, #6]
   d8fec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8ff0:	8103      	strh	r3, [r0, #8]
   d8ff2:	2305      	movs	r3, #5
   d8ff4:	8143      	strh	r3, [r0, #10]
   d8ff6:	230b      	movs	r3, #11
   d8ff8:	8183      	strh	r3, [r0, #12]
   d8ffa:	2201      	movs	r2, #1
   d8ffc:	2300      	movs	r3, #0
   d8ffe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9002:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9004:	2200      	movs	r2, #0
   d9006:	611d      	str	r5, [r3, #16]
   d9008:	615a      	str	r2, [r3, #20]
   d900a:	bd38      	pop	{r3, r4, r5, pc}
   d900c:	2003e130 	.word	0x2003e130

000d9010 <strcmp>:
   d9010:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9014:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9018:	2a01      	cmp	r2, #1
   d901a:	bf28      	it	cs
   d901c:	429a      	cmpcs	r2, r3
   d901e:	d0f7      	beq.n	d9010 <strcmp>
   d9020:	1ad0      	subs	r0, r2, r3
   d9022:	4770      	bx	lr

000d9024 <strcpy>:
   d9024:	4603      	mov	r3, r0
   d9026:	f811 2b01 	ldrb.w	r2, [r1], #1
   d902a:	f803 2b01 	strb.w	r2, [r3], #1
   d902e:	2a00      	cmp	r2, #0
   d9030:	d1f9      	bne.n	d9026 <strcpy+0x2>
   d9032:	4770      	bx	lr

000d9034 <strdup>:
   d9034:	4b02      	ldr	r3, [pc, #8]	; (d9040 <strdup+0xc>)
   d9036:	4601      	mov	r1, r0
   d9038:	6818      	ldr	r0, [r3, #0]
   d903a:	f000 b803 	b.w	d9044 <_strdup_r>
   d903e:	bf00      	nop
   d9040:	2003e130 	.word	0x2003e130

000d9044 <_strdup_r>:
   d9044:	b570      	push	{r4, r5, r6, lr}
   d9046:	4606      	mov	r6, r0
   d9048:	4608      	mov	r0, r1
   d904a:	460c      	mov	r4, r1
   d904c:	f000 f80d 	bl	d906a <strlen>
   d9050:	1c45      	adds	r5, r0, #1
   d9052:	4629      	mov	r1, r5
   d9054:	4630      	mov	r0, r6
   d9056:	f7fd fadb 	bl	d6610 <_malloc_r>
   d905a:	4606      	mov	r6, r0
   d905c:	b118      	cbz	r0, d9066 <_strdup_r+0x22>
   d905e:	462a      	mov	r2, r5
   d9060:	4621      	mov	r1, r4
   d9062:	f7ff ff99 	bl	d8f98 <memcpy>
   d9066:	4630      	mov	r0, r6
   d9068:	bd70      	pop	{r4, r5, r6, pc}

000d906a <strlen>:
   d906a:	4603      	mov	r3, r0
   d906c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9070:	2a00      	cmp	r2, #0
   d9072:	d1fb      	bne.n	d906c <strlen+0x2>
   d9074:	1a18      	subs	r0, r3, r0
   d9076:	3801      	subs	r0, #1
   d9078:	4770      	bx	lr

000d907a <strncmp>:
   d907a:	b530      	push	{r4, r5, lr}
   d907c:	b182      	cbz	r2, d90a0 <strncmp+0x26>
   d907e:	1e45      	subs	r5, r0, #1
   d9080:	3901      	subs	r1, #1
   d9082:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9086:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d908a:	42a3      	cmp	r3, r4
   d908c:	d106      	bne.n	d909c <strncmp+0x22>
   d908e:	43ec      	mvns	r4, r5
   d9090:	4414      	add	r4, r2
   d9092:	42e0      	cmn	r0, r4
   d9094:	d001      	beq.n	d909a <strncmp+0x20>
   d9096:	2b00      	cmp	r3, #0
   d9098:	d1f3      	bne.n	d9082 <strncmp+0x8>
   d909a:	461c      	mov	r4, r3
   d909c:	1b18      	subs	r0, r3, r4
   d909e:	bd30      	pop	{r4, r5, pc}
   d90a0:	4610      	mov	r0, r2
   d90a2:	bd30      	pop	{r4, r5, pc}

000d90a4 <strncpy>:
   d90a4:	b510      	push	{r4, lr}
   d90a6:	4603      	mov	r3, r0
   d90a8:	b142      	cbz	r2, d90bc <strncpy+0x18>
   d90aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90ae:	f803 4b01 	strb.w	r4, [r3], #1
   d90b2:	3a01      	subs	r2, #1
   d90b4:	2c00      	cmp	r4, #0
   d90b6:	d1f7      	bne.n	d90a8 <strncpy+0x4>
   d90b8:	441a      	add	r2, r3
   d90ba:	e000      	b.n	d90be <strncpy+0x1a>
   d90bc:	bd10      	pop	{r4, pc}
   d90be:	4293      	cmp	r3, r2
   d90c0:	d002      	beq.n	d90c8 <strncpy+0x24>
   d90c2:	f803 4b01 	strb.w	r4, [r3], #1
   d90c6:	e7fa      	b.n	d90be <strncpy+0x1a>
   d90c8:	bd10      	pop	{r4, pc}

000d90ca <sulp>:
   d90ca:	b570      	push	{r4, r5, r6, lr}
   d90cc:	4604      	mov	r4, r0
   d90ce:	460d      	mov	r5, r1
   d90d0:	ec45 4b10 	vmov	d0, r4, r5
   d90d4:	4616      	mov	r6, r2
   d90d6:	f002 f843 	bl	db160 <__ulp>
   d90da:	ec51 0b10 	vmov	r0, r1, d0
   d90de:	b17e      	cbz	r6, d9100 <sulp+0x36>
   d90e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d90e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d90e8:	2b00      	cmp	r3, #0
   d90ea:	dd09      	ble.n	d9100 <sulp+0x36>
   d90ec:	051b      	lsls	r3, r3, #20
   d90ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d90f2:	2400      	movs	r4, #0
   d90f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d90f8:	4622      	mov	r2, r4
   d90fa:	462b      	mov	r3, r5
   d90fc:	f7ff faf6 	bl	d86ec <__aeabi_dmul>
   d9100:	bd70      	pop	{r4, r5, r6, pc}
   d9102:	0000      	movs	r0, r0
   d9104:	0000      	movs	r0, r0
	...

000d9108 <_strtod_r>:
   d9108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d910c:	b09d      	sub	sp, #116	; 0x74
   d910e:	2300      	movs	r3, #0
   d9110:	9002      	str	r0, [sp, #8]
   d9112:	460c      	mov	r4, r1
   d9114:	9213      	str	r2, [sp, #76]	; 0x4c
   d9116:	9318      	str	r3, [sp, #96]	; 0x60
   d9118:	f04f 0a00 	mov.w	sl, #0
   d911c:	f04f 0b00 	mov.w	fp, #0
   d9120:	9117      	str	r1, [sp, #92]	; 0x5c
   d9122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9124:	781a      	ldrb	r2, [r3, #0]
   d9126:	2a0d      	cmp	r2, #13
   d9128:	d805      	bhi.n	d9136 <_strtod_r+0x2e>
   d912a:	2a09      	cmp	r2, #9
   d912c:	d213      	bcs.n	d9156 <_strtod_r+0x4e>
   d912e:	2a00      	cmp	r2, #0
   d9130:	f000 81ac 	beq.w	d948c <_strtod_r+0x384>
   d9134:	e012      	b.n	d915c <_strtod_r+0x54>
   d9136:	2a2b      	cmp	r2, #43	; 0x2b
   d9138:	d004      	beq.n	d9144 <_strtod_r+0x3c>
   d913a:	2a2d      	cmp	r2, #45	; 0x2d
   d913c:	d004      	beq.n	d9148 <_strtod_r+0x40>
   d913e:	2a20      	cmp	r2, #32
   d9140:	d10c      	bne.n	d915c <_strtod_r+0x54>
   d9142:	e008      	b.n	d9156 <_strtod_r+0x4e>
   d9144:	2200      	movs	r2, #0
   d9146:	e000      	b.n	d914a <_strtod_r+0x42>
   d9148:	2201      	movs	r2, #1
   d914a:	920c      	str	r2, [sp, #48]	; 0x30
   d914c:	1c5a      	adds	r2, r3, #1
   d914e:	9217      	str	r2, [sp, #92]	; 0x5c
   d9150:	785b      	ldrb	r3, [r3, #1]
   d9152:	b92b      	cbnz	r3, d9160 <_strtod_r+0x58>
   d9154:	e19a      	b.n	d948c <_strtod_r+0x384>
   d9156:	3301      	adds	r3, #1
   d9158:	9317      	str	r3, [sp, #92]	; 0x5c
   d915a:	e7e2      	b.n	d9122 <_strtod_r+0x1a>
   d915c:	2300      	movs	r3, #0
   d915e:	930c      	str	r3, [sp, #48]	; 0x30
   d9160:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9162:	782b      	ldrb	r3, [r5, #0]
   d9164:	2b30      	cmp	r3, #48	; 0x30
   d9166:	d15c      	bne.n	d9222 <_strtod_r+0x11a>
   d9168:	786b      	ldrb	r3, [r5, #1]
   d916a:	2b58      	cmp	r3, #88	; 0x58
   d916c:	d001      	beq.n	d9172 <_strtod_r+0x6a>
   d916e:	2b78      	cmp	r3, #120	; 0x78
   d9170:	d14c      	bne.n	d920c <_strtod_r+0x104>
   d9172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9174:	9301      	str	r3, [sp, #4]
   d9176:	ab18      	add	r3, sp, #96	; 0x60
   d9178:	9300      	str	r3, [sp, #0]
   d917a:	4aa9      	ldr	r2, [pc, #676]	; (d9420 <_strtod_r+0x318>)
   d917c:	9802      	ldr	r0, [sp, #8]
   d917e:	ab19      	add	r3, sp, #100	; 0x64
   d9180:	a917      	add	r1, sp, #92	; 0x5c
   d9182:	f001 f974 	bl	da46e <__gethex>
   d9186:	f010 0607 	ands.w	r6, r0, #7
   d918a:	4604      	mov	r4, r0
   d918c:	f000 8587 	beq.w	d9c9e <_strtod_r+0xb96>
   d9190:	2e06      	cmp	r6, #6
   d9192:	d105      	bne.n	d91a0 <_strtod_r+0x98>
   d9194:	3501      	adds	r5, #1
   d9196:	2300      	movs	r3, #0
   d9198:	9517      	str	r5, [sp, #92]	; 0x5c
   d919a:	930c      	str	r3, [sp, #48]	; 0x30
   d919c:	f000 bd7f 	b.w	d9c9e <_strtod_r+0xb96>
   d91a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d91a2:	b13a      	cbz	r2, d91b4 <_strtod_r+0xac>
   d91a4:	2135      	movs	r1, #53	; 0x35
   d91a6:	a81a      	add	r0, sp, #104	; 0x68
   d91a8:	f002 f8c7 	bl	db33a <__copybits>
   d91ac:	9918      	ldr	r1, [sp, #96]	; 0x60
   d91ae:	9802      	ldr	r0, [sp, #8]
   d91b0:	f001 fd45 	bl	dac3e <_Bfree>
   d91b4:	2e06      	cmp	r6, #6
   d91b6:	d822      	bhi.n	d91fe <_strtod_r+0xf6>
   d91b8:	e8df f006 	tbb	[pc, r6]
   d91bc:	18080d04 	.word	0x18080d04
   d91c0:	0d1d      	.short	0x0d1d
   d91c2:	04          	.byte	0x04
   d91c3:	00          	.byte	0x00
   d91c4:	f04f 0b00 	mov.w	fp, #0
   d91c8:	46da      	mov	sl, fp
   d91ca:	e018      	b.n	d91fe <_strtod_r+0xf6>
   d91cc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d91d0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d91d4:	e013      	b.n	d91fe <_strtod_r+0xf6>
   d91d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d91d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d91da:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d91de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d91e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d91e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d91ea:	e008      	b.n	d91fe <_strtod_r+0xf6>
   d91ec:	f8df b234 	ldr.w	fp, [pc, #564]	; d9424 <_strtod_r+0x31c>
   d91f0:	f04f 0a00 	mov.w	sl, #0
   d91f4:	e003      	b.n	d91fe <_strtod_r+0xf6>
   d91f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d91fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d91fe:	0721      	lsls	r1, r4, #28
   d9200:	f140 854d 	bpl.w	d9c9e <_strtod_r+0xb96>
   d9204:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9208:	f000 bd49 	b.w	d9c9e <_strtod_r+0xb96>
   d920c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d920e:	1c5a      	adds	r2, r3, #1
   d9210:	9217      	str	r2, [sp, #92]	; 0x5c
   d9212:	785b      	ldrb	r3, [r3, #1]
   d9214:	2b30      	cmp	r3, #48	; 0x30
   d9216:	d0f9      	beq.n	d920c <_strtod_r+0x104>
   d9218:	2b00      	cmp	r3, #0
   d921a:	f000 8540 	beq.w	d9c9e <_strtod_r+0xb96>
   d921e:	2301      	movs	r3, #1
   d9220:	e000      	b.n	d9224 <_strtod_r+0x11c>
   d9222:	2300      	movs	r3, #0
   d9224:	f04f 0800 	mov.w	r8, #0
   d9228:	9306      	str	r3, [sp, #24]
   d922a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d922c:	9307      	str	r3, [sp, #28]
   d922e:	f8cd 8014 	str.w	r8, [sp, #20]
   d9232:	f8cd 8010 	str.w	r8, [sp, #16]
   d9236:	220a      	movs	r2, #10
   d9238:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d923a:	782e      	ldrb	r6, [r5, #0]
   d923c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9240:	b2d9      	uxtb	r1, r3
   d9242:	2909      	cmp	r1, #9
   d9244:	d80e      	bhi.n	d9264 <_strtod_r+0x15c>
   d9246:	9904      	ldr	r1, [sp, #16]
   d9248:	2908      	cmp	r1, #8
   d924a:	bfdd      	ittte	le
   d924c:	9905      	ldrle	r1, [sp, #20]
   d924e:	fb02 3301 	mlale	r3, r2, r1, r3
   d9252:	9305      	strle	r3, [sp, #20]
   d9254:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9258:	9b04      	ldr	r3, [sp, #16]
   d925a:	3501      	adds	r5, #1
   d925c:	3301      	adds	r3, #1
   d925e:	9304      	str	r3, [sp, #16]
   d9260:	9517      	str	r5, [sp, #92]	; 0x5c
   d9262:	e7e9      	b.n	d9238 <_strtod_r+0x130>
   d9264:	9802      	ldr	r0, [sp, #8]
   d9266:	f7ff fe93 	bl	d8f90 <_localeconv_r>
   d926a:	6807      	ldr	r7, [r0, #0]
   d926c:	9802      	ldr	r0, [sp, #8]
   d926e:	f7ff fe8f 	bl	d8f90 <_localeconv_r>
   d9272:	6800      	ldr	r0, [r0, #0]
   d9274:	f7ff fef9 	bl	d906a <strlen>
   d9278:	4639      	mov	r1, r7
   d927a:	4602      	mov	r2, r0
   d927c:	4628      	mov	r0, r5
   d927e:	f7ff fefc 	bl	d907a <strncmp>
   d9282:	4607      	mov	r7, r0
   d9284:	b128      	cbz	r0, d9292 <_strtod_r+0x18a>
   d9286:	2000      	movs	r0, #0
   d9288:	4633      	mov	r3, r6
   d928a:	9d04      	ldr	r5, [sp, #16]
   d928c:	4602      	mov	r2, r0
   d928e:	4601      	mov	r1, r0
   d9290:	e057      	b.n	d9342 <_strtod_r+0x23a>
   d9292:	9802      	ldr	r0, [sp, #8]
   d9294:	f7ff fe7c 	bl	d8f90 <_localeconv_r>
   d9298:	6800      	ldr	r0, [r0, #0]
   d929a:	f7ff fee6 	bl	d906a <strlen>
   d929e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d92a0:	181a      	adds	r2, r3, r0
   d92a2:	9217      	str	r2, [sp, #92]	; 0x5c
   d92a4:	9a04      	ldr	r2, [sp, #16]
   d92a6:	5c1b      	ldrb	r3, [r3, r0]
   d92a8:	2a00      	cmp	r2, #0
   d92aa:	d142      	bne.n	d9332 <_strtod_r+0x22a>
   d92ac:	4610      	mov	r0, r2
   d92ae:	2b30      	cmp	r3, #48	; 0x30
   d92b0:	d105      	bne.n	d92be <_strtod_r+0x1b6>
   d92b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d92b4:	1c5a      	adds	r2, r3, #1
   d92b6:	9217      	str	r2, [sp, #92]	; 0x5c
   d92b8:	3001      	adds	r0, #1
   d92ba:	785b      	ldrb	r3, [r3, #1]
   d92bc:	e7f7      	b.n	d92ae <_strtod_r+0x1a6>
   d92be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d92c2:	2a08      	cmp	r2, #8
   d92c4:	d843      	bhi.n	d934e <_strtod_r+0x246>
   d92c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d92c8:	9207      	str	r2, [sp, #28]
   d92ca:	4602      	mov	r2, r0
   d92cc:	2000      	movs	r0, #0
   d92ce:	4605      	mov	r5, r0
   d92d0:	3b30      	subs	r3, #48	; 0x30
   d92d2:	f100 0101 	add.w	r1, r0, #1
   d92d6:	d026      	beq.n	d9326 <_strtod_r+0x21e>
   d92d8:	440a      	add	r2, r1
   d92da:	eb05 0c00 	add.w	ip, r5, r0
   d92de:	4629      	mov	r1, r5
   d92e0:	260a      	movs	r6, #10
   d92e2:	4561      	cmp	r1, ip
   d92e4:	d00e      	beq.n	d9304 <_strtod_r+0x1fc>
   d92e6:	3101      	adds	r1, #1
   d92e8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d92ec:	f1be 0f08 	cmp.w	lr, #8
   d92f0:	dc03      	bgt.n	d92fa <_strtod_r+0x1f2>
   d92f2:	9f05      	ldr	r7, [sp, #20]
   d92f4:	4377      	muls	r7, r6
   d92f6:	9705      	str	r7, [sp, #20]
   d92f8:	e7f3      	b.n	d92e2 <_strtod_r+0x1da>
   d92fa:	2910      	cmp	r1, #16
   d92fc:	bfd8      	it	le
   d92fe:	fb06 f808 	mulle.w	r8, r6, r8
   d9302:	e7ee      	b.n	d92e2 <_strtod_r+0x1da>
   d9304:	4428      	add	r0, r5
   d9306:	2808      	cmp	r0, #8
   d9308:	f100 0501 	add.w	r5, r0, #1
   d930c:	dc05      	bgt.n	d931a <_strtod_r+0x212>
   d930e:	9805      	ldr	r0, [sp, #20]
   d9310:	210a      	movs	r1, #10
   d9312:	fb01 3300 	mla	r3, r1, r0, r3
   d9316:	9305      	str	r3, [sp, #20]
   d9318:	e004      	b.n	d9324 <_strtod_r+0x21c>
   d931a:	2d10      	cmp	r5, #16
   d931c:	bfdc      	itt	le
   d931e:	210a      	movle	r1, #10
   d9320:	fb01 3808 	mlale	r8, r1, r8, r3
   d9324:	2100      	movs	r1, #0
   d9326:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9328:	1c58      	adds	r0, r3, #1
   d932a:	9017      	str	r0, [sp, #92]	; 0x5c
   d932c:	785b      	ldrb	r3, [r3, #1]
   d932e:	4608      	mov	r0, r1
   d9330:	e002      	b.n	d9338 <_strtod_r+0x230>
   d9332:	9d04      	ldr	r5, [sp, #16]
   d9334:	4638      	mov	r0, r7
   d9336:	463a      	mov	r2, r7
   d9338:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d933c:	2909      	cmp	r1, #9
   d933e:	d9c7      	bls.n	d92d0 <_strtod_r+0x1c8>
   d9340:	2101      	movs	r1, #1
   d9342:	2b65      	cmp	r3, #101	; 0x65
   d9344:	d001      	beq.n	d934a <_strtod_r+0x242>
   d9346:	2b45      	cmp	r3, #69	; 0x45
   d9348:	d151      	bne.n	d93ee <_strtod_r+0x2e6>
   d934a:	b96d      	cbnz	r5, d9368 <_strtod_r+0x260>
   d934c:	e004      	b.n	d9358 <_strtod_r+0x250>
   d934e:	2b65      	cmp	r3, #101	; 0x65
   d9350:	f040 84b3 	bne.w	d9cba <_strtod_r+0xbb2>
   d9354:	2200      	movs	r2, #0
   d9356:	2101      	movs	r1, #1
   d9358:	b928      	cbnz	r0, d9366 <_strtod_r+0x25e>
   d935a:	9b06      	ldr	r3, [sp, #24]
   d935c:	2b00      	cmp	r3, #0
   d935e:	f000 8095 	beq.w	d948c <_strtod_r+0x384>
   d9362:	4605      	mov	r5, r0
   d9364:	e000      	b.n	d9368 <_strtod_r+0x260>
   d9366:	2500      	movs	r5, #0
   d9368:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d936a:	1c63      	adds	r3, r4, #1
   d936c:	9317      	str	r3, [sp, #92]	; 0x5c
   d936e:	7863      	ldrb	r3, [r4, #1]
   d9370:	2b2b      	cmp	r3, #43	; 0x2b
   d9372:	d006      	beq.n	d9382 <_strtod_r+0x27a>
   d9374:	2b2d      	cmp	r3, #45	; 0x2d
   d9376:	d002      	beq.n	d937e <_strtod_r+0x276>
   d9378:	2600      	movs	r6, #0
   d937a:	9603      	str	r6, [sp, #12]
   d937c:	e006      	b.n	d938c <_strtod_r+0x284>
   d937e:	2301      	movs	r3, #1
   d9380:	e000      	b.n	d9384 <_strtod_r+0x27c>
   d9382:	2300      	movs	r3, #0
   d9384:	9303      	str	r3, [sp, #12]
   d9386:	1ca3      	adds	r3, r4, #2
   d9388:	9317      	str	r3, [sp, #92]	; 0x5c
   d938a:	78a3      	ldrb	r3, [r4, #2]
   d938c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9390:	2e09      	cmp	r6, #9
   d9392:	d82b      	bhi.n	d93ec <_strtod_r+0x2e4>
   d9394:	2b30      	cmp	r3, #48	; 0x30
   d9396:	d104      	bne.n	d93a2 <_strtod_r+0x29a>
   d9398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d939a:	1c5e      	adds	r6, r3, #1
   d939c:	9617      	str	r6, [sp, #92]	; 0x5c
   d939e:	785b      	ldrb	r3, [r3, #1]
   d93a0:	e7f8      	b.n	d9394 <_strtod_r+0x28c>
   d93a2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d93a6:	2e08      	cmp	r6, #8
   d93a8:	d821      	bhi.n	d93ee <_strtod_r+0x2e6>
   d93aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d93ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d93b0:	f04f 0c0a 	mov.w	ip, #10
   d93b4:	461f      	mov	r7, r3
   d93b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d93b8:	1c5e      	adds	r6, r3, #1
   d93ba:	9617      	str	r6, [sp, #92]	; 0x5c
   d93bc:	785b      	ldrb	r3, [r3, #1]
   d93be:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d93c2:	f1b9 0f09 	cmp.w	r9, #9
   d93c6:	d804      	bhi.n	d93d2 <_strtod_r+0x2ca>
   d93c8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d93cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d93d0:	e7f1      	b.n	d93b6 <_strtod_r+0x2ae>
   d93d2:	1bf6      	subs	r6, r6, r7
   d93d4:	2e08      	cmp	r6, #8
   d93d6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d93da:	dc02      	bgt.n	d93e2 <_strtod_r+0x2da>
   d93dc:	45f1      	cmp	r9, lr
   d93de:	bfa8      	it	ge
   d93e0:	46f1      	movge	r9, lr
   d93e2:	9e03      	ldr	r6, [sp, #12]
   d93e4:	b12e      	cbz	r6, d93f2 <_strtod_r+0x2ea>
   d93e6:	f1c9 0900 	rsb	r9, r9, #0
   d93ea:	e002      	b.n	d93f2 <_strtod_r+0x2ea>
   d93ec:	9417      	str	r4, [sp, #92]	; 0x5c
   d93ee:	f04f 0900 	mov.w	r9, #0
   d93f2:	2d00      	cmp	r5, #0
   d93f4:	d153      	bne.n	d949e <_strtod_r+0x396>
   d93f6:	2800      	cmp	r0, #0
   d93f8:	f040 8451 	bne.w	d9c9e <_strtod_r+0xb96>
   d93fc:	9a06      	ldr	r2, [sp, #24]
   d93fe:	2a00      	cmp	r2, #0
   d9400:	f040 844d 	bne.w	d9c9e <_strtod_r+0xb96>
   d9404:	2900      	cmp	r1, #0
   d9406:	d141      	bne.n	d948c <_strtod_r+0x384>
   d9408:	2b4e      	cmp	r3, #78	; 0x4e
   d940a:	d020      	beq.n	d944e <_strtod_r+0x346>
   d940c:	dc02      	bgt.n	d9414 <_strtod_r+0x30c>
   d940e:	2b49      	cmp	r3, #73	; 0x49
   d9410:	d00a      	beq.n	d9428 <_strtod_r+0x320>
   d9412:	e03b      	b.n	d948c <_strtod_r+0x384>
   d9414:	2b69      	cmp	r3, #105	; 0x69
   d9416:	d007      	beq.n	d9428 <_strtod_r+0x320>
   d9418:	2b6e      	cmp	r3, #110	; 0x6e
   d941a:	d018      	beq.n	d944e <_strtod_r+0x346>
   d941c:	e036      	b.n	d948c <_strtod_r+0x384>
   d941e:	bf00      	nop
   d9420:	000dbf54 	.word	0x000dbf54
   d9424:	7ff00000 	.word	0x7ff00000
   d9428:	49a8      	ldr	r1, [pc, #672]	; (d96cc <_strtod_r+0x5c4>)
   d942a:	a817      	add	r0, sp, #92	; 0x5c
   d942c:	f001 fa50 	bl	da8d0 <__match>
   d9430:	b360      	cbz	r0, d948c <_strtod_r+0x384>
   d9432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9434:	49a6      	ldr	r1, [pc, #664]	; (d96d0 <_strtod_r+0x5c8>)
   d9436:	3b01      	subs	r3, #1
   d9438:	a817      	add	r0, sp, #92	; 0x5c
   d943a:	9317      	str	r3, [sp, #92]	; 0x5c
   d943c:	f001 fa48 	bl	da8d0 <__match>
   d9440:	b910      	cbnz	r0, d9448 <_strtod_r+0x340>
   d9442:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9444:	3301      	adds	r3, #1
   d9446:	9317      	str	r3, [sp, #92]	; 0x5c
   d9448:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d96ec <_strtod_r+0x5e4>
   d944c:	e01a      	b.n	d9484 <_strtod_r+0x37c>
   d944e:	49a1      	ldr	r1, [pc, #644]	; (d96d4 <_strtod_r+0x5cc>)
   d9450:	a817      	add	r0, sp, #92	; 0x5c
   d9452:	f001 fa3d 	bl	da8d0 <__match>
   d9456:	b1c8      	cbz	r0, d948c <_strtod_r+0x384>
   d9458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d945a:	781b      	ldrb	r3, [r3, #0]
   d945c:	2b28      	cmp	r3, #40	; 0x28
   d945e:	d10f      	bne.n	d9480 <_strtod_r+0x378>
   d9460:	aa1a      	add	r2, sp, #104	; 0x68
   d9462:	499d      	ldr	r1, [pc, #628]	; (d96d8 <_strtod_r+0x5d0>)
   d9464:	a817      	add	r0, sp, #92	; 0x5c
   d9466:	f001 fa46 	bl	da8f6 <__hexnan>
   d946a:	2805      	cmp	r0, #5
   d946c:	d108      	bne.n	d9480 <_strtod_r+0x378>
   d946e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9470:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9474:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9478:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d947c:	f000 bc0f 	b.w	d9c9e <_strtod_r+0xb96>
   d9480:	f8df b26c 	ldr.w	fp, [pc, #620]	; d96f0 <_strtod_r+0x5e8>
   d9484:	f04f 0a00 	mov.w	sl, #0
   d9488:	f000 bc09 	b.w	d9c9e <_strtod_r+0xb96>
   d948c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d948e:	9417      	str	r4, [sp, #92]	; 0x5c
   d9490:	2b00      	cmp	r3, #0
   d9492:	f000 840f 	beq.w	d9cb4 <_strtod_r+0xbac>
   d9496:	2300      	movs	r3, #0
   d9498:	930c      	str	r3, [sp, #48]	; 0x30
   d949a:	f000 bc02 	b.w	d9ca2 <_strtod_r+0xb9a>
   d949e:	9b04      	ldr	r3, [sp, #16]
   d94a0:	9805      	ldr	r0, [sp, #20]
   d94a2:	2b00      	cmp	r3, #0
   d94a4:	bf08      	it	eq
   d94a6:	462b      	moveq	r3, r5
   d94a8:	2d10      	cmp	r5, #16
   d94aa:	462c      	mov	r4, r5
   d94ac:	ebc2 0909 	rsb	r9, r2, r9
   d94b0:	bfa8      	it	ge
   d94b2:	2410      	movge	r4, #16
   d94b4:	9304      	str	r3, [sp, #16]
   d94b6:	f7ff f8a3 	bl	d8600 <__aeabi_ui2d>
   d94ba:	2c09      	cmp	r4, #9
   d94bc:	4682      	mov	sl, r0
   d94be:	468b      	mov	fp, r1
   d94c0:	dd13      	ble.n	d94ea <_strtod_r+0x3e2>
   d94c2:	4b86      	ldr	r3, [pc, #536]	; (d96dc <_strtod_r+0x5d4>)
   d94c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d94c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d94cc:	f7ff f90e 	bl	d86ec <__aeabi_dmul>
   d94d0:	4606      	mov	r6, r0
   d94d2:	4640      	mov	r0, r8
   d94d4:	460f      	mov	r7, r1
   d94d6:	f7ff f893 	bl	d8600 <__aeabi_ui2d>
   d94da:	4602      	mov	r2, r0
   d94dc:	460b      	mov	r3, r1
   d94de:	4630      	mov	r0, r6
   d94e0:	4639      	mov	r1, r7
   d94e2:	f7fe ff51 	bl	d8388 <__adddf3>
   d94e6:	4682      	mov	sl, r0
   d94e8:	468b      	mov	fp, r1
   d94ea:	2d0f      	cmp	r5, #15
   d94ec:	dc36      	bgt.n	d955c <_strtod_r+0x454>
   d94ee:	f1b9 0f00 	cmp.w	r9, #0
   d94f2:	f000 83d4 	beq.w	d9c9e <_strtod_r+0xb96>
   d94f6:	dd24      	ble.n	d9542 <_strtod_r+0x43a>
   d94f8:	f1b9 0f16 	cmp.w	r9, #22
   d94fc:	dc07      	bgt.n	d950e <_strtod_r+0x406>
   d94fe:	4d77      	ldr	r5, [pc, #476]	; (d96dc <_strtod_r+0x5d4>)
   d9500:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d9504:	4652      	mov	r2, sl
   d9506:	465b      	mov	r3, fp
   d9508:	e9d9 0100 	ldrd	r0, r1, [r9]
   d950c:	e014      	b.n	d9538 <_strtod_r+0x430>
   d950e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9512:	4599      	cmp	r9, r3
   d9514:	dc22      	bgt.n	d955c <_strtod_r+0x454>
   d9516:	4c71      	ldr	r4, [pc, #452]	; (d96dc <_strtod_r+0x5d4>)
   d9518:	f1c5 050f 	rsb	r5, r5, #15
   d951c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9520:	ebc5 0509 	rsb	r5, r5, r9
   d9524:	4652      	mov	r2, sl
   d9526:	465b      	mov	r3, fp
   d9528:	e9d1 0100 	ldrd	r0, r1, [r1]
   d952c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9530:	f7ff f8dc 	bl	d86ec <__aeabi_dmul>
   d9534:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9538:	f7ff f8d8 	bl	d86ec <__aeabi_dmul>
   d953c:	4682      	mov	sl, r0
   d953e:	468b      	mov	fp, r1
   d9540:	e3ad      	b.n	d9c9e <_strtod_r+0xb96>
   d9542:	f119 0f16 	cmn.w	r9, #22
   d9546:	db09      	blt.n	d955c <_strtod_r+0x454>
   d9548:	4d64      	ldr	r5, [pc, #400]	; (d96dc <_strtod_r+0x5d4>)
   d954a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d954e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9552:	4650      	mov	r0, sl
   d9554:	4659      	mov	r1, fp
   d9556:	f7ff f9f3 	bl	d8940 <__aeabi_ddiv>
   d955a:	e7ef      	b.n	d953c <_strtod_r+0x434>
   d955c:	1b2c      	subs	r4, r5, r4
   d955e:	444c      	add	r4, r9
   d9560:	2c00      	cmp	r4, #0
   d9562:	dd57      	ble.n	d9614 <_strtod_r+0x50c>
   d9564:	f014 010f 	ands.w	r1, r4, #15
   d9568:	d00a      	beq.n	d9580 <_strtod_r+0x478>
   d956a:	4b5c      	ldr	r3, [pc, #368]	; (d96dc <_strtod_r+0x5d4>)
   d956c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d9570:	4652      	mov	r2, sl
   d9572:	465b      	mov	r3, fp
   d9574:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9578:	f7ff f8b8 	bl	d86ec <__aeabi_dmul>
   d957c:	4682      	mov	sl, r0
   d957e:	468b      	mov	fp, r1
   d9580:	f034 040f 	bics.w	r4, r4, #15
   d9584:	f000 80b8 	beq.w	d96f8 <_strtod_r+0x5f0>
   d9588:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d958c:	dd0b      	ble.n	d95a6 <_strtod_r+0x49e>
   d958e:	2400      	movs	r4, #0
   d9590:	4625      	mov	r5, r4
   d9592:	9405      	str	r4, [sp, #20]
   d9594:	9404      	str	r4, [sp, #16]
   d9596:	9a02      	ldr	r2, [sp, #8]
   d9598:	f8df b150 	ldr.w	fp, [pc, #336]	; d96ec <_strtod_r+0x5e4>
   d959c:	2322      	movs	r3, #34	; 0x22
   d959e:	6013      	str	r3, [r2, #0]
   d95a0:	f04f 0a00 	mov.w	sl, #0
   d95a4:	e187      	b.n	d98b6 <_strtod_r+0x7ae>
   d95a6:	4e4e      	ldr	r6, [pc, #312]	; (d96e0 <_strtod_r+0x5d8>)
   d95a8:	2300      	movs	r3, #0
   d95aa:	1124      	asrs	r4, r4, #4
   d95ac:	4650      	mov	r0, sl
   d95ae:	4659      	mov	r1, fp
   d95b0:	4698      	mov	r8, r3
   d95b2:	4637      	mov	r7, r6
   d95b4:	2c01      	cmp	r4, #1
   d95b6:	dd0b      	ble.n	d95d0 <_strtod_r+0x4c8>
   d95b8:	07e2      	lsls	r2, r4, #31
   d95ba:	d504      	bpl.n	d95c6 <_strtod_r+0x4be>
   d95bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   d95c0:	f7ff f894 	bl	d86ec <__aeabi_dmul>
   d95c4:	2301      	movs	r3, #1
   d95c6:	f108 0801 	add.w	r8, r8, #1
   d95ca:	1064      	asrs	r4, r4, #1
   d95cc:	3608      	adds	r6, #8
   d95ce:	e7f1      	b.n	d95b4 <_strtod_r+0x4ac>
   d95d0:	b10b      	cbz	r3, d95d6 <_strtod_r+0x4ce>
   d95d2:	4682      	mov	sl, r0
   d95d4:	468b      	mov	fp, r1
   d95d6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d95da:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d95de:	4652      	mov	r2, sl
   d95e0:	465b      	mov	r3, fp
   d95e2:	e9d7 0100 	ldrd	r0, r1, [r7]
   d95e6:	f7ff f881 	bl	d86ec <__aeabi_dmul>
   d95ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d95ee:	468b      	mov	fp, r1
   d95f0:	460a      	mov	r2, r1
   d95f2:	0d1b      	lsrs	r3, r3, #20
   d95f4:	493b      	ldr	r1, [pc, #236]	; (d96e4 <_strtod_r+0x5dc>)
   d95f6:	051b      	lsls	r3, r3, #20
   d95f8:	428b      	cmp	r3, r1
   d95fa:	4682      	mov	sl, r0
   d95fc:	d8c7      	bhi.n	d958e <_strtod_r+0x486>
   d95fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9602:	428b      	cmp	r3, r1
   d9604:	bf86      	itte	hi
   d9606:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d96f4 <_strtod_r+0x5ec>
   d960a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d960e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9612:	e071      	b.n	d96f8 <_strtod_r+0x5f0>
   d9614:	d070      	beq.n	d96f8 <_strtod_r+0x5f0>
   d9616:	4264      	negs	r4, r4
   d9618:	f014 020f 	ands.w	r2, r4, #15
   d961c:	d00a      	beq.n	d9634 <_strtod_r+0x52c>
   d961e:	4b2f      	ldr	r3, [pc, #188]	; (d96dc <_strtod_r+0x5d4>)
   d9620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9624:	4650      	mov	r0, sl
   d9626:	4659      	mov	r1, fp
   d9628:	e9d3 2300 	ldrd	r2, r3, [r3]
   d962c:	f7ff f988 	bl	d8940 <__aeabi_ddiv>
   d9630:	4682      	mov	sl, r0
   d9632:	468b      	mov	fp, r1
   d9634:	1124      	asrs	r4, r4, #4
   d9636:	d05f      	beq.n	d96f8 <_strtod_r+0x5f0>
   d9638:	2c1f      	cmp	r4, #31
   d963a:	dd04      	ble.n	d9646 <_strtod_r+0x53e>
   d963c:	2400      	movs	r4, #0
   d963e:	4625      	mov	r5, r4
   d9640:	9405      	str	r4, [sp, #20]
   d9642:	9404      	str	r4, [sp, #16]
   d9644:	e130      	b.n	d98a8 <_strtod_r+0x7a0>
   d9646:	f014 0f10 	tst.w	r4, #16
   d964a:	bf0c      	ite	eq
   d964c:	2300      	moveq	r3, #0
   d964e:	236a      	movne	r3, #106	; 0x6a
   d9650:	4e25      	ldr	r6, [pc, #148]	; (d96e8 <_strtod_r+0x5e0>)
   d9652:	9303      	str	r3, [sp, #12]
   d9654:	4650      	mov	r0, sl
   d9656:	4659      	mov	r1, fp
   d9658:	2300      	movs	r3, #0
   d965a:	2c00      	cmp	r4, #0
   d965c:	dd09      	ble.n	d9672 <_strtod_r+0x56a>
   d965e:	07e2      	lsls	r2, r4, #31
   d9660:	d504      	bpl.n	d966c <_strtod_r+0x564>
   d9662:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9666:	f7ff f841 	bl	d86ec <__aeabi_dmul>
   d966a:	2301      	movs	r3, #1
   d966c:	1064      	asrs	r4, r4, #1
   d966e:	3608      	adds	r6, #8
   d9670:	e7f3      	b.n	d965a <_strtod_r+0x552>
   d9672:	b10b      	cbz	r3, d9678 <_strtod_r+0x570>
   d9674:	4682      	mov	sl, r0
   d9676:	468b      	mov	fp, r1
   d9678:	9b03      	ldr	r3, [sp, #12]
   d967a:	b1eb      	cbz	r3, d96b8 <_strtod_r+0x5b0>
   d967c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9680:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9684:	2b00      	cmp	r3, #0
   d9686:	4659      	mov	r1, fp
   d9688:	dd16      	ble.n	d96b8 <_strtod_r+0x5b0>
   d968a:	2b1f      	cmp	r3, #31
   d968c:	dd0e      	ble.n	d96ac <_strtod_r+0x5a4>
   d968e:	2b34      	cmp	r3, #52	; 0x34
   d9690:	bfde      	ittt	le
   d9692:	3b20      	suble	r3, #32
   d9694:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9698:	fa02 f303 	lslle.w	r3, r2, r3
   d969c:	f04f 0a00 	mov.w	sl, #0
   d96a0:	bfcc      	ite	gt
   d96a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d96a6:	ea03 0b01 	andle.w	fp, r3, r1
   d96aa:	e005      	b.n	d96b8 <_strtod_r+0x5b0>
   d96ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d96b0:	fa02 f303 	lsl.w	r3, r2, r3
   d96b4:	ea03 0a0a 	and.w	sl, r3, sl
   d96b8:	2200      	movs	r2, #0
   d96ba:	2300      	movs	r3, #0
   d96bc:	4650      	mov	r0, sl
   d96be:	4659      	mov	r1, fp
   d96c0:	f7ff fa7c 	bl	d8bbc <__aeabi_dcmpeq>
   d96c4:	2800      	cmp	r0, #0
   d96c6:	d1b9      	bne.n	d963c <_strtod_r+0x534>
   d96c8:	e018      	b.n	d96fc <_strtod_r+0x5f4>
   d96ca:	bf00      	nop
   d96cc:	000dbf7c 	.word	0x000dbf7c
   d96d0:	000dbf7f 	.word	0x000dbf7f
   d96d4:	000dbf85 	.word	0x000dbf85
   d96d8:	000dbf68 	.word	0x000dbf68
   d96dc:	000dbff0 	.word	0x000dbff0
   d96e0:	000dc0b8 	.word	0x000dc0b8
   d96e4:	7ca00000 	.word	0x7ca00000
   d96e8:	000dbf88 	.word	0x000dbf88
   d96ec:	7ff00000 	.word	0x7ff00000
   d96f0:	fff80000 	.word	0xfff80000
   d96f4:	7fefffff 	.word	0x7fefffff
   d96f8:	2300      	movs	r3, #0
   d96fa:	9303      	str	r3, [sp, #12]
   d96fc:	9b05      	ldr	r3, [sp, #20]
   d96fe:	9300      	str	r3, [sp, #0]
   d9700:	9a04      	ldr	r2, [sp, #16]
   d9702:	9907      	ldr	r1, [sp, #28]
   d9704:	9802      	ldr	r0, [sp, #8]
   d9706:	462b      	mov	r3, r5
   d9708:	f001 faeb 	bl	dace2 <__s2b>
   d970c:	9005      	str	r0, [sp, #20]
   d970e:	2800      	cmp	r0, #0
   d9710:	f43f af3d 	beq.w	d958e <_strtod_r+0x486>
   d9714:	f1b9 0f00 	cmp.w	r9, #0
   d9718:	f1c9 0300 	rsb	r3, r9, #0
   d971c:	bfa8      	it	ge
   d971e:	2300      	movge	r3, #0
   d9720:	930d      	str	r3, [sp, #52]	; 0x34
   d9722:	2400      	movs	r4, #0
   d9724:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d9728:	9312      	str	r3, [sp, #72]	; 0x48
   d972a:	4625      	mov	r5, r4
   d972c:	9b05      	ldr	r3, [sp, #20]
   d972e:	9802      	ldr	r0, [sp, #8]
   d9730:	6859      	ldr	r1, [r3, #4]
   d9732:	f001 fa4f 	bl	dabd4 <_Balloc>
   d9736:	9004      	str	r0, [sp, #16]
   d9738:	2800      	cmp	r0, #0
   d973a:	f43f af2c 	beq.w	d9596 <_strtod_r+0x48e>
   d973e:	9b05      	ldr	r3, [sp, #20]
   d9740:	691a      	ldr	r2, [r3, #16]
   d9742:	3202      	adds	r2, #2
   d9744:	f103 010c 	add.w	r1, r3, #12
   d9748:	0092      	lsls	r2, r2, #2
   d974a:	300c      	adds	r0, #12
   d974c:	f7ff fc24 	bl	d8f98 <memcpy>
   d9750:	aa1a      	add	r2, sp, #104	; 0x68
   d9752:	a919      	add	r1, sp, #100	; 0x64
   d9754:	ec4b ab10 	vmov	d0, sl, fp
   d9758:	9802      	ldr	r0, [sp, #8]
   d975a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d975e:	f001 fd74 	bl	db24a <__d2b>
   d9762:	9018      	str	r0, [sp, #96]	; 0x60
   d9764:	2800      	cmp	r0, #0
   d9766:	f43f af16 	beq.w	d9596 <_strtod_r+0x48e>
   d976a:	2101      	movs	r1, #1
   d976c:	9802      	ldr	r0, [sp, #8]
   d976e:	f001 fb43 	bl	dadf8 <__i2b>
   d9772:	4605      	mov	r5, r0
   d9774:	2800      	cmp	r0, #0
   d9776:	f43f af0e 	beq.w	d9596 <_strtod_r+0x48e>
   d977a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d977c:	9903      	ldr	r1, [sp, #12]
   d977e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d9780:	2b00      	cmp	r3, #0
   d9782:	bfad      	iteet	ge
   d9784:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d9786:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d9788:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d978c:	eb02 0803 	addge.w	r8, r2, r3
   d9790:	bfb8      	it	lt
   d9792:	1ad2      	sublt	r2, r2, r3
   d9794:	eba3 0301 	sub.w	r3, r3, r1
   d9798:	4433      	add	r3, r6
   d979a:	49b5      	ldr	r1, [pc, #724]	; (d9a70 <_strtod_r+0x968>)
   d979c:	bfa8      	it	ge
   d979e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d97a0:	3b01      	subs	r3, #1
   d97a2:	428b      	cmp	r3, r1
   d97a4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d97a8:	f280 808a 	bge.w	d98c0 <_strtod_r+0x7b8>
   d97ac:	1ac9      	subs	r1, r1, r3
   d97ae:	291f      	cmp	r1, #31
   d97b0:	bfc8      	it	gt
   d97b2:	4fb0      	ldrgt	r7, [pc, #704]	; (d9a74 <_strtod_r+0x96c>)
   d97b4:	f04f 0901 	mov.w	r9, #1
   d97b8:	bfd4      	ite	le
   d97ba:	fa09 f301 	lslle.w	r3, r9, r1
   d97be:	1aff      	subgt	r7, r7, r3
   d97c0:	eba6 0601 	sub.w	r6, r6, r1
   d97c4:	bfd9      	ittee	le
   d97c6:	9306      	strle	r3, [sp, #24]
   d97c8:	2700      	movle	r7, #0
   d97ca:	fa09 f707 	lslgt.w	r7, r9, r7
   d97ce:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d97d2:	eb08 0906 	add.w	r9, r8, r6
   d97d6:	9b03      	ldr	r3, [sp, #12]
   d97d8:	45c8      	cmp	r8, r9
   d97da:	4416      	add	r6, r2
   d97dc:	441e      	add	r6, r3
   d97de:	4643      	mov	r3, r8
   d97e0:	bfa8      	it	ge
   d97e2:	464b      	movge	r3, r9
   d97e4:	42b3      	cmp	r3, r6
   d97e6:	bfa8      	it	ge
   d97e8:	4633      	movge	r3, r6
   d97ea:	2b00      	cmp	r3, #0
   d97ec:	bfc2      	ittt	gt
   d97ee:	ebc3 0909 	rsbgt	r9, r3, r9
   d97f2:	1af6      	subgt	r6, r6, r3
   d97f4:	ebc3 0808 	rsbgt	r8, r3, r8
   d97f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d97fa:	2b00      	cmp	r3, #0
   d97fc:	d164      	bne.n	d98c8 <_strtod_r+0x7c0>
   d97fe:	f1b9 0f00 	cmp.w	r9, #0
   d9802:	dc7a      	bgt.n	d98fa <_strtod_r+0x7f2>
   d9804:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d9806:	2b00      	cmp	r3, #0
   d9808:	f040 8081 	bne.w	d990e <_strtod_r+0x806>
   d980c:	2e00      	cmp	r6, #0
   d980e:	f300 8088 	bgt.w	d9922 <_strtod_r+0x81a>
   d9812:	f1b8 0f00 	cmp.w	r8, #0
   d9816:	f300 808e 	bgt.w	d9936 <_strtod_r+0x82e>
   d981a:	9a04      	ldr	r2, [sp, #16]
   d981c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d981e:	9802      	ldr	r0, [sp, #8]
   d9820:	f001 fc3f 	bl	db0a2 <__mdiff>
   d9824:	4604      	mov	r4, r0
   d9826:	2800      	cmp	r0, #0
   d9828:	f43f aeb5 	beq.w	d9596 <_strtod_r+0x48e>
   d982c:	68c3      	ldr	r3, [r0, #12]
   d982e:	9307      	str	r3, [sp, #28]
   d9830:	2300      	movs	r3, #0
   d9832:	60c3      	str	r3, [r0, #12]
   d9834:	4629      	mov	r1, r5
   d9836:	f001 fc18 	bl	db06a <__mcmp>
   d983a:	2800      	cmp	r0, #0
   d983c:	f280 8089 	bge.w	d9952 <_strtod_r+0x84a>
   d9840:	9b07      	ldr	r3, [sp, #28]
   d9842:	2b00      	cmp	r3, #0
   d9844:	f040 8204 	bne.w	d9c50 <_strtod_r+0xb48>
   d9848:	f1ba 0f00 	cmp.w	sl, #0
   d984c:	f040 8200 	bne.w	d9c50 <_strtod_r+0xb48>
   d9850:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9854:	2b00      	cmp	r3, #0
   d9856:	f040 81fb 	bne.w	d9c50 <_strtod_r+0xb48>
   d985a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d985e:	0d1b      	lsrs	r3, r3, #20
   d9860:	051b      	lsls	r3, r3, #20
   d9862:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9866:	f240 81f3 	bls.w	d9c50 <_strtod_r+0xb48>
   d986a:	6963      	ldr	r3, [r4, #20]
   d986c:	2b00      	cmp	r3, #0
   d986e:	d06c      	beq.n	d994a <_strtod_r+0x842>
   d9870:	4621      	mov	r1, r4
   d9872:	2201      	movs	r2, #1
   d9874:	9802      	ldr	r0, [sp, #8]
   d9876:	f001 fba7 	bl	dafc8 <__lshift>
   d987a:	4629      	mov	r1, r5
   d987c:	4604      	mov	r4, r0
   d987e:	f001 fbf4 	bl	db06a <__mcmp>
   d9882:	2800      	cmp	r0, #0
   d9884:	f340 81e4 	ble.w	d9c50 <_strtod_r+0xb48>
   d9888:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d988c:	9a03      	ldr	r2, [sp, #12]
   d988e:	0d1b      	lsrs	r3, r3, #20
   d9890:	051b      	lsls	r3, r3, #20
   d9892:	2a00      	cmp	r2, #0
   d9894:	f000 808c 	beq.w	d99b0 <_strtod_r+0x8a8>
   d9898:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d989c:	f300 8088 	bgt.w	d99b0 <_strtod_r+0x8a8>
   d98a0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d98a4:	f300 81d6 	bgt.w	d9c54 <_strtod_r+0xb4c>
   d98a8:	9a02      	ldr	r2, [sp, #8]
   d98aa:	2322      	movs	r3, #34	; 0x22
   d98ac:	f04f 0a00 	mov.w	sl, #0
   d98b0:	f04f 0b00 	mov.w	fp, #0
   d98b4:	6013      	str	r3, [r2, #0]
   d98b6:	9b05      	ldr	r3, [sp, #20]
   d98b8:	2b00      	cmp	r3, #0
   d98ba:	f040 81dc 	bne.w	d9c76 <_strtod_r+0xb6e>
   d98be:	e1ee      	b.n	d9c9e <_strtod_r+0xb96>
   d98c0:	2301      	movs	r3, #1
   d98c2:	2700      	movs	r7, #0
   d98c4:	9306      	str	r3, [sp, #24]
   d98c6:	e784      	b.n	d97d2 <_strtod_r+0x6ca>
   d98c8:	4629      	mov	r1, r5
   d98ca:	461a      	mov	r2, r3
   d98cc:	9802      	ldr	r0, [sp, #8]
   d98ce:	f001 fb2d 	bl	daf2c <__pow5mult>
   d98d2:	4605      	mov	r5, r0
   d98d4:	2800      	cmp	r0, #0
   d98d6:	f43f ae5e 	beq.w	d9596 <_strtod_r+0x48e>
   d98da:	4601      	mov	r1, r0
   d98dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d98de:	9802      	ldr	r0, [sp, #8]
   d98e0:	f001 fa93 	bl	dae0a <__multiply>
   d98e4:	9007      	str	r0, [sp, #28]
   d98e6:	2800      	cmp	r0, #0
   d98e8:	f43f ae55 	beq.w	d9596 <_strtod_r+0x48e>
   d98ec:	9918      	ldr	r1, [sp, #96]	; 0x60
   d98ee:	9802      	ldr	r0, [sp, #8]
   d98f0:	f001 f9a5 	bl	dac3e <_Bfree>
   d98f4:	9b07      	ldr	r3, [sp, #28]
   d98f6:	9318      	str	r3, [sp, #96]	; 0x60
   d98f8:	e781      	b.n	d97fe <_strtod_r+0x6f6>
   d98fa:	464a      	mov	r2, r9
   d98fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d98fe:	9802      	ldr	r0, [sp, #8]
   d9900:	f001 fb62 	bl	dafc8 <__lshift>
   d9904:	9018      	str	r0, [sp, #96]	; 0x60
   d9906:	2800      	cmp	r0, #0
   d9908:	f47f af7c 	bne.w	d9804 <_strtod_r+0x6fc>
   d990c:	e643      	b.n	d9596 <_strtod_r+0x48e>
   d990e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9910:	9904      	ldr	r1, [sp, #16]
   d9912:	9802      	ldr	r0, [sp, #8]
   d9914:	f001 fb0a 	bl	daf2c <__pow5mult>
   d9918:	9004      	str	r0, [sp, #16]
   d991a:	2800      	cmp	r0, #0
   d991c:	f47f af76 	bne.w	d980c <_strtod_r+0x704>
   d9920:	e639      	b.n	d9596 <_strtod_r+0x48e>
   d9922:	4632      	mov	r2, r6
   d9924:	9904      	ldr	r1, [sp, #16]
   d9926:	9802      	ldr	r0, [sp, #8]
   d9928:	f001 fb4e 	bl	dafc8 <__lshift>
   d992c:	9004      	str	r0, [sp, #16]
   d992e:	2800      	cmp	r0, #0
   d9930:	f47f af6f 	bne.w	d9812 <_strtod_r+0x70a>
   d9934:	e62f      	b.n	d9596 <_strtod_r+0x48e>
   d9936:	4629      	mov	r1, r5
   d9938:	4642      	mov	r2, r8
   d993a:	9802      	ldr	r0, [sp, #8]
   d993c:	f001 fb44 	bl	dafc8 <__lshift>
   d9940:	4605      	mov	r5, r0
   d9942:	2800      	cmp	r0, #0
   d9944:	f47f af69 	bne.w	d981a <_strtod_r+0x712>
   d9948:	e625      	b.n	d9596 <_strtod_r+0x48e>
   d994a:	6923      	ldr	r3, [r4, #16]
   d994c:	2b01      	cmp	r3, #1
   d994e:	dc8f      	bgt.n	d9870 <_strtod_r+0x768>
   d9950:	e17e      	b.n	d9c50 <_strtod_r+0xb48>
   d9952:	d161      	bne.n	d9a18 <_strtod_r+0x910>
   d9954:	9a07      	ldr	r2, [sp, #28]
   d9956:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d995a:	b322      	cbz	r2, d99a6 <_strtod_r+0x89e>
   d995c:	4946      	ldr	r1, [pc, #280]	; (d9a78 <_strtod_r+0x970>)
   d995e:	428b      	cmp	r3, r1
   d9960:	465a      	mov	r2, fp
   d9962:	d12e      	bne.n	d99c2 <_strtod_r+0x8ba>
   d9964:	9b03      	ldr	r3, [sp, #12]
   d9966:	4651      	mov	r1, sl
   d9968:	b163      	cbz	r3, d9984 <_strtod_r+0x87c>
   d996a:	4b44      	ldr	r3, [pc, #272]	; (d9a7c <_strtod_r+0x974>)
   d996c:	4013      	ands	r3, r2
   d996e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9972:	d807      	bhi.n	d9984 <_strtod_r+0x87c>
   d9974:	0d1b      	lsrs	r3, r3, #20
   d9976:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d997a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d997e:	fa00 f303 	lsl.w	r3, r0, r3
   d9982:	e001      	b.n	d9988 <_strtod_r+0x880>
   d9984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9988:	428b      	cmp	r3, r1
   d998a:	d11a      	bne.n	d99c2 <_strtod_r+0x8ba>
   d998c:	493c      	ldr	r1, [pc, #240]	; (d9a80 <_strtod_r+0x978>)
   d998e:	428a      	cmp	r2, r1
   d9990:	d102      	bne.n	d9998 <_strtod_r+0x890>
   d9992:	3301      	adds	r3, #1
   d9994:	f43f adff 	beq.w	d9596 <_strtod_r+0x48e>
   d9998:	4b38      	ldr	r3, [pc, #224]	; (d9a7c <_strtod_r+0x974>)
   d999a:	4013      	ands	r3, r2
   d999c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d99a0:	f04f 0a00 	mov.w	sl, #0
   d99a4:	e154      	b.n	d9c50 <_strtod_r+0xb48>
   d99a6:	b963      	cbnz	r3, d99c2 <_strtod_r+0x8ba>
   d99a8:	f1ba 0f00 	cmp.w	sl, #0
   d99ac:	d109      	bne.n	d99c2 <_strtod_r+0x8ba>
   d99ae:	e76b      	b.n	d9888 <_strtod_r+0x780>
   d99b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d99b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d99b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d99bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d99c0:	e146      	b.n	d9c50 <_strtod_r+0xb48>
   d99c2:	b117      	cbz	r7, d99ca <_strtod_r+0x8c2>
   d99c4:	ea17 0f0b 	tst.w	r7, fp
   d99c8:	e002      	b.n	d99d0 <_strtod_r+0x8c8>
   d99ca:	9b06      	ldr	r3, [sp, #24]
   d99cc:	ea13 0f0a 	tst.w	r3, sl
   d99d0:	f000 813e 	beq.w	d9c50 <_strtod_r+0xb48>
   d99d4:	9b07      	ldr	r3, [sp, #28]
   d99d6:	9a03      	ldr	r2, [sp, #12]
   d99d8:	4650      	mov	r0, sl
   d99da:	4659      	mov	r1, fp
   d99dc:	b153      	cbz	r3, d99f4 <_strtod_r+0x8ec>
   d99de:	f7ff fb74 	bl	d90ca <sulp>
   d99e2:	4602      	mov	r2, r0
   d99e4:	460b      	mov	r3, r1
   d99e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d99ea:	f7fe fccd 	bl	d8388 <__adddf3>
   d99ee:	4682      	mov	sl, r0
   d99f0:	468b      	mov	fp, r1
   d99f2:	e12d      	b.n	d9c50 <_strtod_r+0xb48>
   d99f4:	f7ff fb69 	bl	d90ca <sulp>
   d99f8:	4602      	mov	r2, r0
   d99fa:	460b      	mov	r3, r1
   d99fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9a00:	f7fe fcc0 	bl	d8384 <__aeabi_dsub>
   d9a04:	2200      	movs	r2, #0
   d9a06:	2300      	movs	r3, #0
   d9a08:	4682      	mov	sl, r0
   d9a0a:	468b      	mov	fp, r1
   d9a0c:	f7ff f8d6 	bl	d8bbc <__aeabi_dcmpeq>
   d9a10:	2800      	cmp	r0, #0
   d9a12:	f47f af49 	bne.w	d98a8 <_strtod_r+0x7a0>
   d9a16:	e11b      	b.n	d9c50 <_strtod_r+0xb48>
   d9a18:	4629      	mov	r1, r5
   d9a1a:	4620      	mov	r0, r4
   d9a1c:	f001 fc63 	bl	db2e6 <__ratio>
   d9a20:	ec57 6b10 	vmov	r6, r7, d0
   d9a24:	2200      	movs	r2, #0
   d9a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9a2a:	ee10 0a10 	vmov	r0, s0
   d9a2e:	4639      	mov	r1, r7
   d9a30:	f7ff f8d8 	bl	d8be4 <__aeabi_dcmple>
   d9a34:	2800      	cmp	r0, #0
   d9a36:	d042      	beq.n	d9abe <_strtod_r+0x9b6>
   d9a38:	9b07      	ldr	r3, [sp, #28]
   d9a3a:	b123      	cbz	r3, d9a46 <_strtod_r+0x93e>
   d9a3c:	f04f 0800 	mov.w	r8, #0
   d9a40:	f8df 9040 	ldr.w	r9, [pc, #64]	; d9a84 <_strtod_r+0x97c>
   d9a44:	e011      	b.n	d9a6a <_strtod_r+0x962>
   d9a46:	f1ba 0f00 	cmp.w	sl, #0
   d9a4a:	d103      	bne.n	d9a54 <_strtod_r+0x94c>
   d9a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9a50:	b93b      	cbnz	r3, d9a62 <_strtod_r+0x95a>
   d9a52:	e01b      	b.n	d9a8c <_strtod_r+0x984>
   d9a54:	f1ba 0f01 	cmp.w	sl, #1
   d9a58:	d103      	bne.n	d9a62 <_strtod_r+0x95a>
   d9a5a:	f1bb 0f00 	cmp.w	fp, #0
   d9a5e:	f43f af23 	beq.w	d98a8 <_strtod_r+0x7a0>
   d9a62:	f8df 9024 	ldr.w	r9, [pc, #36]	; d9a88 <_strtod_r+0x980>
   d9a66:	f04f 0800 	mov.w	r8, #0
   d9a6a:	2600      	movs	r6, #0
   d9a6c:	4f05      	ldr	r7, [pc, #20]	; (d9a84 <_strtod_r+0x97c>)
   d9a6e:	e039      	b.n	d9ae4 <_strtod_r+0x9dc>
   d9a70:	fffffc02 	.word	0xfffffc02
   d9a74:	fffffbe2 	.word	0xfffffbe2
   d9a78:	000fffff 	.word	0x000fffff
   d9a7c:	7ff00000 	.word	0x7ff00000
   d9a80:	7fefffff 	.word	0x7fefffff
   d9a84:	3ff00000 	.word	0x3ff00000
   d9a88:	bff00000 	.word	0xbff00000
   d9a8c:	2200      	movs	r2, #0
   d9a8e:	4b98      	ldr	r3, [pc, #608]	; (d9cf0 <_strtod_r+0xbe8>)
   d9a90:	4630      	mov	r0, r6
   d9a92:	4639      	mov	r1, r7
   d9a94:	f7ff f89c 	bl	d8bd0 <__aeabi_dcmplt>
   d9a98:	b940      	cbnz	r0, d9aac <_strtod_r+0x9a4>
   d9a9a:	4630      	mov	r0, r6
   d9a9c:	4639      	mov	r1, r7
   d9a9e:	2200      	movs	r2, #0
   d9aa0:	4b94      	ldr	r3, [pc, #592]	; (d9cf4 <_strtod_r+0xbec>)
   d9aa2:	f7fe fe23 	bl	d86ec <__aeabi_dmul>
   d9aa6:	4606      	mov	r6, r0
   d9aa8:	460f      	mov	r7, r1
   d9aaa:	e001      	b.n	d9ab0 <_strtod_r+0x9a8>
   d9aac:	4f91      	ldr	r7, [pc, #580]	; (d9cf4 <_strtod_r+0xbec>)
   d9aae:	2600      	movs	r6, #0
   d9ab0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9ab4:	9614      	str	r6, [sp, #80]	; 0x50
   d9ab6:	9315      	str	r3, [sp, #84]	; 0x54
   d9ab8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d9abc:	e012      	b.n	d9ae4 <_strtod_r+0x9dc>
   d9abe:	4b8d      	ldr	r3, [pc, #564]	; (d9cf4 <_strtod_r+0xbec>)
   d9ac0:	4630      	mov	r0, r6
   d9ac2:	4639      	mov	r1, r7
   d9ac4:	2200      	movs	r2, #0
   d9ac6:	f7fe fe11 	bl	d86ec <__aeabi_dmul>
   d9aca:	9b07      	ldr	r3, [sp, #28]
   d9acc:	4606      	mov	r6, r0
   d9ace:	460f      	mov	r7, r1
   d9ad0:	b923      	cbnz	r3, d9adc <_strtod_r+0x9d4>
   d9ad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9ad6:	900e      	str	r0, [sp, #56]	; 0x38
   d9ad8:	930f      	str	r3, [sp, #60]	; 0x3c
   d9ada:	e001      	b.n	d9ae0 <_strtod_r+0x9d8>
   d9adc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9ae0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d9ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9ae8:	0d1b      	lsrs	r3, r3, #20
   d9aea:	051b      	lsls	r3, r3, #20
   d9aec:	9306      	str	r3, [sp, #24]
   d9aee:	9a06      	ldr	r2, [sp, #24]
   d9af0:	4b81      	ldr	r3, [pc, #516]	; (d9cf8 <_strtod_r+0xbf0>)
   d9af2:	429a      	cmp	r2, r3
   d9af4:	d12b      	bne.n	d9b4e <_strtod_r+0xa46>
   d9af6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9afa:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9afe:	ec4b ab10 	vmov	d0, sl, fp
   d9b02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d9b06:	f001 fb2b 	bl	db160 <__ulp>
   d9b0a:	4640      	mov	r0, r8
   d9b0c:	ec53 2b10 	vmov	r2, r3, d0
   d9b10:	4649      	mov	r1, r9
   d9b12:	f7fe fdeb 	bl	d86ec <__aeabi_dmul>
   d9b16:	4652      	mov	r2, sl
   d9b18:	465b      	mov	r3, fp
   d9b1a:	f7fe fc35 	bl	d8388 <__adddf3>
   d9b1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9b22:	0d1b      	lsrs	r3, r3, #20
   d9b24:	4a75      	ldr	r2, [pc, #468]	; (d9cfc <_strtod_r+0xbf4>)
   d9b26:	051b      	lsls	r3, r3, #20
   d9b28:	4293      	cmp	r3, r2
   d9b2a:	4682      	mov	sl, r0
   d9b2c:	d90c      	bls.n	d9b48 <_strtod_r+0xa40>
   d9b2e:	4b74      	ldr	r3, [pc, #464]	; (d9d00 <_strtod_r+0xbf8>)
   d9b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9b32:	429a      	cmp	r2, r3
   d9b34:	d103      	bne.n	d9b3e <_strtod_r+0xa36>
   d9b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9b38:	3301      	adds	r3, #1
   d9b3a:	f43f ad2c 	beq.w	d9596 <_strtod_r+0x48e>
   d9b3e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d9d00 <_strtod_r+0xbf8>
   d9b42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9b46:	e072      	b.n	d9c2e <_strtod_r+0xb26>
   d9b48:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d9b4c:	e038      	b.n	d9bc0 <_strtod_r+0xab8>
   d9b4e:	9b03      	ldr	r3, [sp, #12]
   d9b50:	b333      	cbz	r3, d9ba0 <_strtod_r+0xa98>
   d9b52:	9b06      	ldr	r3, [sp, #24]
   d9b54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9b58:	d822      	bhi.n	d9ba0 <_strtod_r+0xa98>
   d9b5a:	a35d      	add	r3, pc, #372	; (adr r3, d9cd0 <_strtod_r+0xbc8>)
   d9b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b60:	4630      	mov	r0, r6
   d9b62:	4639      	mov	r1, r7
   d9b64:	f7ff f83e 	bl	d8be4 <__aeabi_dcmple>
   d9b68:	b1a8      	cbz	r0, d9b96 <_strtod_r+0xa8e>
   d9b6a:	4639      	mov	r1, r7
   d9b6c:	4630      	mov	r0, r6
   d9b6e:	f7ff f895 	bl	d8c9c <__aeabi_d2uiz>
   d9b72:	2800      	cmp	r0, #0
   d9b74:	bf08      	it	eq
   d9b76:	2001      	moveq	r0, #1
   d9b78:	f7fe fd42 	bl	d8600 <__aeabi_ui2d>
   d9b7c:	9b07      	ldr	r3, [sp, #28]
   d9b7e:	4606      	mov	r6, r0
   d9b80:	460f      	mov	r7, r1
   d9b82:	b923      	cbnz	r3, d9b8e <_strtod_r+0xa86>
   d9b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9b88:	9010      	str	r0, [sp, #64]	; 0x40
   d9b8a:	9311      	str	r3, [sp, #68]	; 0x44
   d9b8c:	e001      	b.n	d9b92 <_strtod_r+0xa8a>
   d9b8e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d9b92:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d9b96:	9a06      	ldr	r2, [sp, #24]
   d9b98:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d9b9c:	ebc2 0903 	rsb	r9, r2, r3
   d9ba0:	ed9d 0b08 	vldr	d0, [sp, #32]
   d9ba4:	f001 fadc 	bl	db160 <__ulp>
   d9ba8:	4640      	mov	r0, r8
   d9baa:	ec53 2b10 	vmov	r2, r3, d0
   d9bae:	4649      	mov	r1, r9
   d9bb0:	f7fe fd9c 	bl	d86ec <__aeabi_dmul>
   d9bb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9bb8:	f7fe fbe6 	bl	d8388 <__adddf3>
   d9bbc:	4682      	mov	sl, r0
   d9bbe:	468b      	mov	fp, r1
   d9bc0:	9b03      	ldr	r3, [sp, #12]
   d9bc2:	bba3      	cbnz	r3, d9c2e <_strtod_r+0xb26>
   d9bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9bc8:	0d1b      	lsrs	r3, r3, #20
   d9bca:	9a06      	ldr	r2, [sp, #24]
   d9bcc:	051b      	lsls	r3, r3, #20
   d9bce:	429a      	cmp	r2, r3
   d9bd0:	46d8      	mov	r8, fp
   d9bd2:	d12c      	bne.n	d9c2e <_strtod_r+0xb26>
   d9bd4:	4639      	mov	r1, r7
   d9bd6:	4630      	mov	r0, r6
   d9bd8:	f7ff f838 	bl	d8c4c <__aeabi_d2iz>
   d9bdc:	f7fe fd20 	bl	d8620 <__aeabi_i2d>
   d9be0:	460b      	mov	r3, r1
   d9be2:	4602      	mov	r2, r0
   d9be4:	4639      	mov	r1, r7
   d9be6:	4630      	mov	r0, r6
   d9be8:	f7fe fbcc 	bl	d8384 <__aeabi_dsub>
   d9bec:	9b07      	ldr	r3, [sp, #28]
   d9bee:	4606      	mov	r6, r0
   d9bf0:	460f      	mov	r7, r1
   d9bf2:	b92b      	cbnz	r3, d9c00 <_strtod_r+0xaf8>
   d9bf4:	f1ba 0f00 	cmp.w	sl, #0
   d9bf8:	d102      	bne.n	d9c00 <_strtod_r+0xaf8>
   d9bfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9bfe:	b183      	cbz	r3, d9c22 <_strtod_r+0xb1a>
   d9c00:	a335      	add	r3, pc, #212	; (adr r3, d9cd8 <_strtod_r+0xbd0>)
   d9c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c06:	4630      	mov	r0, r6
   d9c08:	4639      	mov	r1, r7
   d9c0a:	f7fe ffe1 	bl	d8bd0 <__aeabi_dcmplt>
   d9c0e:	2800      	cmp	r0, #0
   d9c10:	d131      	bne.n	d9c76 <_strtod_r+0xb6e>
   d9c12:	a333      	add	r3, pc, #204	; (adr r3, d9ce0 <_strtod_r+0xbd8>)
   d9c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c18:	4630      	mov	r0, r6
   d9c1a:	4639      	mov	r1, r7
   d9c1c:	f7fe fff6 	bl	d8c0c <__aeabi_dcmpgt>
   d9c20:	e004      	b.n	d9c2c <_strtod_r+0xb24>
   d9c22:	a331      	add	r3, pc, #196	; (adr r3, d9ce8 <_strtod_r+0xbe0>)
   d9c24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c28:	f7fe ffd2 	bl	d8bd0 <__aeabi_dcmplt>
   d9c2c:	bb18      	cbnz	r0, d9c76 <_strtod_r+0xb6e>
   d9c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9c30:	9802      	ldr	r0, [sp, #8]
   d9c32:	f001 f804 	bl	dac3e <_Bfree>
   d9c36:	9904      	ldr	r1, [sp, #16]
   d9c38:	9802      	ldr	r0, [sp, #8]
   d9c3a:	f001 f800 	bl	dac3e <_Bfree>
   d9c3e:	4629      	mov	r1, r5
   d9c40:	9802      	ldr	r0, [sp, #8]
   d9c42:	f000 fffc 	bl	dac3e <_Bfree>
   d9c46:	4621      	mov	r1, r4
   d9c48:	9802      	ldr	r0, [sp, #8]
   d9c4a:	f000 fff8 	bl	dac3e <_Bfree>
   d9c4e:	e56d      	b.n	d972c <_strtod_r+0x624>
   d9c50:	9b03      	ldr	r3, [sp, #12]
   d9c52:	b183      	cbz	r3, d9c76 <_strtod_r+0xb6e>
   d9c54:	4b2b      	ldr	r3, [pc, #172]	; (d9d04 <_strtod_r+0xbfc>)
   d9c56:	930b      	str	r3, [sp, #44]	; 0x2c
   d9c58:	2300      	movs	r3, #0
   d9c5a:	930a      	str	r3, [sp, #40]	; 0x28
   d9c5c:	4650      	mov	r0, sl
   d9c5e:	4659      	mov	r1, fp
   d9c60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9c64:	f7fe fd42 	bl	d86ec <__aeabi_dmul>
   d9c68:	4682      	mov	sl, r0
   d9c6a:	468b      	mov	fp, r1
   d9c6c:	b919      	cbnz	r1, d9c76 <_strtod_r+0xb6e>
   d9c6e:	b910      	cbnz	r0, d9c76 <_strtod_r+0xb6e>
   d9c70:	9a02      	ldr	r2, [sp, #8]
   d9c72:	2322      	movs	r3, #34	; 0x22
   d9c74:	6013      	str	r3, [r2, #0]
   d9c76:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9c78:	9802      	ldr	r0, [sp, #8]
   d9c7a:	f000 ffe0 	bl	dac3e <_Bfree>
   d9c7e:	9904      	ldr	r1, [sp, #16]
   d9c80:	9802      	ldr	r0, [sp, #8]
   d9c82:	f000 ffdc 	bl	dac3e <_Bfree>
   d9c86:	4629      	mov	r1, r5
   d9c88:	9802      	ldr	r0, [sp, #8]
   d9c8a:	f000 ffd8 	bl	dac3e <_Bfree>
   d9c8e:	9905      	ldr	r1, [sp, #20]
   d9c90:	9802      	ldr	r0, [sp, #8]
   d9c92:	f000 ffd4 	bl	dac3e <_Bfree>
   d9c96:	4621      	mov	r1, r4
   d9c98:	9802      	ldr	r0, [sp, #8]
   d9c9a:	f000 ffd0 	bl	dac3e <_Bfree>
   d9c9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9ca0:	b113      	cbz	r3, d9ca8 <_strtod_r+0xba0>
   d9ca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d9ca4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9ca6:	6013      	str	r3, [r2, #0]
   d9ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9caa:	b11b      	cbz	r3, d9cb4 <_strtod_r+0xbac>
   d9cac:	4652      	mov	r2, sl
   d9cae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d9cb2:	e007      	b.n	d9cc4 <_strtod_r+0xbbc>
   d9cb4:	4652      	mov	r2, sl
   d9cb6:	465b      	mov	r3, fp
   d9cb8:	e004      	b.n	d9cc4 <_strtod_r+0xbbc>
   d9cba:	2500      	movs	r5, #0
   d9cbc:	462a      	mov	r2, r5
   d9cbe:	2101      	movs	r1, #1
   d9cc0:	f7ff bb41 	b.w	d9346 <_strtod_r+0x23e>
   d9cc4:	ec43 2b10 	vmov	d0, r2, r3
   d9cc8:	b01d      	add	sp, #116	; 0x74
   d9cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9cce:	bf00      	nop
   d9cd0:	ffc00000 	.word	0xffc00000
   d9cd4:	41dfffff 	.word	0x41dfffff
   d9cd8:	94a03595 	.word	0x94a03595
   d9cdc:	3fdfffff 	.word	0x3fdfffff
   d9ce0:	35afe535 	.word	0x35afe535
   d9ce4:	3fe00000 	.word	0x3fe00000
   d9ce8:	94a03595 	.word	0x94a03595
   d9cec:	3fcfffff 	.word	0x3fcfffff
   d9cf0:	3ff00000 	.word	0x3ff00000
   d9cf4:	3fe00000 	.word	0x3fe00000
   d9cf8:	7fe00000 	.word	0x7fe00000
   d9cfc:	7c9fffff 	.word	0x7c9fffff
   d9d00:	7fefffff 	.word	0x7fefffff
   d9d04:	39500000 	.word	0x39500000

000d9d08 <strtof>:
   d9d08:	b538      	push	{r3, r4, r5, lr}
   d9d0a:	4b0e      	ldr	r3, [pc, #56]	; (d9d44 <strtof+0x3c>)
   d9d0c:	460a      	mov	r2, r1
   d9d0e:	4601      	mov	r1, r0
   d9d10:	6818      	ldr	r0, [r3, #0]
   d9d12:	f7ff f9f9 	bl	d9108 <_strtod_r>
   d9d16:	ec55 4b10 	vmov	r4, r5, d0
   d9d1a:	ee10 2a10 	vmov	r2, s0
   d9d1e:	462b      	mov	r3, r5
   d9d20:	ee10 0a10 	vmov	r0, s0
   d9d24:	4629      	mov	r1, r5
   d9d26:	f7fe ff7b 	bl	d8c20 <__aeabi_dcmpun>
   d9d2a:	b120      	cbz	r0, d9d36 <strtof+0x2e>
   d9d2c:	2000      	movs	r0, #0
   d9d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9d32:	f001 bb4d 	b.w	db3d0 <nanf>
   d9d36:	4620      	mov	r0, r4
   d9d38:	4629      	mov	r1, r5
   d9d3a:	f7fe ffcf 	bl	d8cdc <__aeabi_d2f>
   d9d3e:	ee00 0a10 	vmov	s0, r0
   d9d42:	bd38      	pop	{r3, r4, r5, pc}
   d9d44:	2003e130 	.word	0x2003e130

000d9d48 <_strtol_r>:
   d9d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9d4c:	4680      	mov	r8, r0
   d9d4e:	4840      	ldr	r0, [pc, #256]	; (d9e50 <_strtol_r+0x108>)
   d9d50:	f8d0 9000 	ldr.w	r9, [r0]
   d9d54:	460f      	mov	r7, r1
   d9d56:	463d      	mov	r5, r7
   d9d58:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9d5c:	eb09 0004 	add.w	r0, r9, r4
   d9d60:	7840      	ldrb	r0, [r0, #1]
   d9d62:	f000 0008 	and.w	r0, r0, #8
   d9d66:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d9d6a:	b108      	cbz	r0, d9d70 <_strtol_r+0x28>
   d9d6c:	462f      	mov	r7, r5
   d9d6e:	e7f2      	b.n	d9d56 <_strtol_r+0xe>
   d9d70:	2c2d      	cmp	r4, #45	; 0x2d
   d9d72:	d103      	bne.n	d9d7c <_strtol_r+0x34>
   d9d74:	1cbd      	adds	r5, r7, #2
   d9d76:	787c      	ldrb	r4, [r7, #1]
   d9d78:	2601      	movs	r6, #1
   d9d7a:	e003      	b.n	d9d84 <_strtol_r+0x3c>
   d9d7c:	2c2b      	cmp	r4, #43	; 0x2b
   d9d7e:	bf04      	itt	eq
   d9d80:	787c      	ldrbeq	r4, [r7, #1]
   d9d82:	1cbd      	addeq	r5, r7, #2
   d9d84:	b113      	cbz	r3, d9d8c <_strtol_r+0x44>
   d9d86:	2b10      	cmp	r3, #16
   d9d88:	d10a      	bne.n	d9da0 <_strtol_r+0x58>
   d9d8a:	e05b      	b.n	d9e44 <_strtol_r+0xfc>
   d9d8c:	2c30      	cmp	r4, #48	; 0x30
   d9d8e:	d157      	bne.n	d9e40 <_strtol_r+0xf8>
   d9d90:	7828      	ldrb	r0, [r5, #0]
   d9d92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9d96:	2858      	cmp	r0, #88	; 0x58
   d9d98:	d14d      	bne.n	d9e36 <_strtol_r+0xee>
   d9d9a:	786c      	ldrb	r4, [r5, #1]
   d9d9c:	2310      	movs	r3, #16
   d9d9e:	3502      	adds	r5, #2
   d9da0:	2e00      	cmp	r6, #0
   d9da2:	bf14      	ite	ne
   d9da4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9da8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9dac:	2700      	movs	r7, #0
   d9dae:	fbbc faf3 	udiv	sl, ip, r3
   d9db2:	4638      	mov	r0, r7
   d9db4:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9db8:	eb09 0e04 	add.w	lr, r9, r4
   d9dbc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9dc0:	f01e 0f04 	tst.w	lr, #4
   d9dc4:	d001      	beq.n	d9dca <_strtol_r+0x82>
   d9dc6:	3c30      	subs	r4, #48	; 0x30
   d9dc8:	e00b      	b.n	d9de2 <_strtol_r+0x9a>
   d9dca:	f01e 0e03 	ands.w	lr, lr, #3
   d9dce:	d01b      	beq.n	d9e08 <_strtol_r+0xc0>
   d9dd0:	f1be 0f01 	cmp.w	lr, #1
   d9dd4:	bf0c      	ite	eq
   d9dd6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9dda:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9dde:	ebce 0404 	rsb	r4, lr, r4
   d9de2:	42a3      	cmp	r3, r4
   d9de4:	dd10      	ble.n	d9e08 <_strtol_r+0xc0>
   d9de6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d9dea:	d00a      	beq.n	d9e02 <_strtol_r+0xba>
   d9dec:	4550      	cmp	r0, sl
   d9dee:	d806      	bhi.n	d9dfe <_strtol_r+0xb6>
   d9df0:	d101      	bne.n	d9df6 <_strtol_r+0xae>
   d9df2:	4564      	cmp	r4, ip
   d9df4:	dc03      	bgt.n	d9dfe <_strtol_r+0xb6>
   d9df6:	fb03 4000 	mla	r0, r3, r0, r4
   d9dfa:	2701      	movs	r7, #1
   d9dfc:	e001      	b.n	d9e02 <_strtol_r+0xba>
   d9dfe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9e02:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9e06:	e7d7      	b.n	d9db8 <_strtol_r+0x70>
   d9e08:	1c7b      	adds	r3, r7, #1
   d9e0a:	d10c      	bne.n	d9e26 <_strtol_r+0xde>
   d9e0c:	2e00      	cmp	r6, #0
   d9e0e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9e12:	bf14      	ite	ne
   d9e14:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9e18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9e1c:	f8c8 3000 	str.w	r3, [r8]
   d9e20:	b92a      	cbnz	r2, d9e2e <_strtol_r+0xe6>
   d9e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e26:	b106      	cbz	r6, d9e2a <_strtol_r+0xe2>
   d9e28:	4240      	negs	r0, r0
   d9e2a:	b172      	cbz	r2, d9e4a <_strtol_r+0x102>
   d9e2c:	b107      	cbz	r7, d9e30 <_strtol_r+0xe8>
   d9e2e:	1e69      	subs	r1, r5, #1
   d9e30:	6011      	str	r1, [r2, #0]
   d9e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e36:	2430      	movs	r4, #48	; 0x30
   d9e38:	2b00      	cmp	r3, #0
   d9e3a:	d1b1      	bne.n	d9da0 <_strtol_r+0x58>
   d9e3c:	2308      	movs	r3, #8
   d9e3e:	e7af      	b.n	d9da0 <_strtol_r+0x58>
   d9e40:	230a      	movs	r3, #10
   d9e42:	e7ad      	b.n	d9da0 <_strtol_r+0x58>
   d9e44:	2c30      	cmp	r4, #48	; 0x30
   d9e46:	d0a3      	beq.n	d9d90 <_strtol_r+0x48>
   d9e48:	e7aa      	b.n	d9da0 <_strtol_r+0x58>
   d9e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e4e:	bf00      	nop
   d9e50:	2003e0cc 	.word	0x2003e0cc

000d9e54 <strtol>:
   d9e54:	4613      	mov	r3, r2
   d9e56:	460a      	mov	r2, r1
   d9e58:	4601      	mov	r1, r0
   d9e5a:	4802      	ldr	r0, [pc, #8]	; (d9e64 <strtol+0x10>)
   d9e5c:	6800      	ldr	r0, [r0, #0]
   d9e5e:	f7ff bf73 	b.w	d9d48 <_strtol_r>
   d9e62:	bf00      	nop
   d9e64:	2003e130 	.word	0x2003e130

000d9e68 <_strtoul_r>:
   d9e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e6c:	4680      	mov	r8, r0
   d9e6e:	483c      	ldr	r0, [pc, #240]	; (d9f60 <_strtoul_r+0xf8>)
   d9e70:	f8d0 9000 	ldr.w	r9, [r0]
   d9e74:	460e      	mov	r6, r1
   d9e76:	4635      	mov	r5, r6
   d9e78:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9e7c:	eb09 0004 	add.w	r0, r9, r4
   d9e80:	7840      	ldrb	r0, [r0, #1]
   d9e82:	f000 0008 	and.w	r0, r0, #8
   d9e86:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d9e8a:	b108      	cbz	r0, d9e90 <_strtoul_r+0x28>
   d9e8c:	462e      	mov	r6, r5
   d9e8e:	e7f2      	b.n	d9e76 <_strtoul_r+0xe>
   d9e90:	2c2d      	cmp	r4, #45	; 0x2d
   d9e92:	d103      	bne.n	d9e9c <_strtoul_r+0x34>
   d9e94:	1cb5      	adds	r5, r6, #2
   d9e96:	7874      	ldrb	r4, [r6, #1]
   d9e98:	2701      	movs	r7, #1
   d9e9a:	e003      	b.n	d9ea4 <_strtoul_r+0x3c>
   d9e9c:	2c2b      	cmp	r4, #43	; 0x2b
   d9e9e:	bf04      	itt	eq
   d9ea0:	7874      	ldrbeq	r4, [r6, #1]
   d9ea2:	1cb5      	addeq	r5, r6, #2
   d9ea4:	b113      	cbz	r3, d9eac <_strtoul_r+0x44>
   d9ea6:	2b10      	cmp	r3, #16
   d9ea8:	d10a      	bne.n	d9ec0 <_strtoul_r+0x58>
   d9eaa:	e053      	b.n	d9f54 <_strtoul_r+0xec>
   d9eac:	2c30      	cmp	r4, #48	; 0x30
   d9eae:	d14f      	bne.n	d9f50 <_strtoul_r+0xe8>
   d9eb0:	7828      	ldrb	r0, [r5, #0]
   d9eb2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9eb6:	2858      	cmp	r0, #88	; 0x58
   d9eb8:	d145      	bne.n	d9f46 <_strtoul_r+0xde>
   d9eba:	786c      	ldrb	r4, [r5, #1]
   d9ebc:	2310      	movs	r3, #16
   d9ebe:	3502      	adds	r5, #2
   d9ec0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9ec4:	2600      	movs	r6, #0
   d9ec6:	fbbc fcf3 	udiv	ip, ip, r3
   d9eca:	fb03 fa0c 	mul.w	sl, r3, ip
   d9ece:	ea6f 0a0a 	mvn.w	sl, sl
   d9ed2:	4630      	mov	r0, r6
   d9ed4:	eb09 0e04 	add.w	lr, r9, r4
   d9ed8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9edc:	f01e 0f04 	tst.w	lr, #4
   d9ee0:	d001      	beq.n	d9ee6 <_strtoul_r+0x7e>
   d9ee2:	3c30      	subs	r4, #48	; 0x30
   d9ee4:	e00b      	b.n	d9efe <_strtoul_r+0x96>
   d9ee6:	f01e 0e03 	ands.w	lr, lr, #3
   d9eea:	d01a      	beq.n	d9f22 <_strtoul_r+0xba>
   d9eec:	f1be 0f01 	cmp.w	lr, #1
   d9ef0:	bf0c      	ite	eq
   d9ef2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9ef6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9efa:	ebce 0404 	rsb	r4, lr, r4
   d9efe:	42a3      	cmp	r3, r4
   d9f00:	dd0f      	ble.n	d9f22 <_strtoul_r+0xba>
   d9f02:	2e00      	cmp	r6, #0
   d9f04:	db08      	blt.n	d9f18 <_strtoul_r+0xb0>
   d9f06:	4560      	cmp	r0, ip
   d9f08:	d806      	bhi.n	d9f18 <_strtoul_r+0xb0>
   d9f0a:	d101      	bne.n	d9f10 <_strtoul_r+0xa8>
   d9f0c:	4554      	cmp	r4, sl
   d9f0e:	dc03      	bgt.n	d9f18 <_strtoul_r+0xb0>
   d9f10:	fb03 4000 	mla	r0, r3, r0, r4
   d9f14:	2601      	movs	r6, #1
   d9f16:	e001      	b.n	d9f1c <_strtoul_r+0xb4>
   d9f18:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9f20:	e7d8      	b.n	d9ed4 <_strtoul_r+0x6c>
   d9f22:	2e00      	cmp	r6, #0
   d9f24:	da07      	bge.n	d9f36 <_strtoul_r+0xce>
   d9f26:	2322      	movs	r3, #34	; 0x22
   d9f28:	f8c8 3000 	str.w	r3, [r8]
   d9f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9f30:	b92a      	cbnz	r2, d9f3e <_strtoul_r+0xd6>
   d9f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f36:	b107      	cbz	r7, d9f3a <_strtoul_r+0xd2>
   d9f38:	4240      	negs	r0, r0
   d9f3a:	b172      	cbz	r2, d9f5a <_strtoul_r+0xf2>
   d9f3c:	b106      	cbz	r6, d9f40 <_strtoul_r+0xd8>
   d9f3e:	1e69      	subs	r1, r5, #1
   d9f40:	6011      	str	r1, [r2, #0]
   d9f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f46:	2430      	movs	r4, #48	; 0x30
   d9f48:	2b00      	cmp	r3, #0
   d9f4a:	d1b9      	bne.n	d9ec0 <_strtoul_r+0x58>
   d9f4c:	2308      	movs	r3, #8
   d9f4e:	e7b7      	b.n	d9ec0 <_strtoul_r+0x58>
   d9f50:	230a      	movs	r3, #10
   d9f52:	e7b5      	b.n	d9ec0 <_strtoul_r+0x58>
   d9f54:	2c30      	cmp	r4, #48	; 0x30
   d9f56:	d0ab      	beq.n	d9eb0 <_strtoul_r+0x48>
   d9f58:	e7b2      	b.n	d9ec0 <_strtoul_r+0x58>
   d9f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f5e:	bf00      	nop
   d9f60:	2003e0cc 	.word	0x2003e0cc

000d9f64 <strtoul>:
   d9f64:	4613      	mov	r3, r2
   d9f66:	460a      	mov	r2, r1
   d9f68:	4601      	mov	r1, r0
   d9f6a:	4802      	ldr	r0, [pc, #8]	; (d9f74 <strtoul+0x10>)
   d9f6c:	6800      	ldr	r0, [r0, #0]
   d9f6e:	f7ff bf7b 	b.w	d9e68 <_strtoul_r>
   d9f72:	bf00      	nop
   d9f74:	2003e130 	.word	0x2003e130

000d9f78 <__tzcalc_limits>:
   d9f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9f7c:	4604      	mov	r4, r0
   d9f7e:	f000 fd8d 	bl	daa9c <__gettzinfo>
   d9f82:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d9f86:	429c      	cmp	r4, r3
   d9f88:	f340 8096 	ble.w	da0b8 <__tzcalc_limits+0x140>
   d9f8c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d9f90:	18e3      	adds	r3, r4, r3
   d9f92:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d9f96:	109b      	asrs	r3, r3, #2
   d9f98:	f240 156d 	movw	r5, #365	; 0x16d
   d9f9c:	fb05 3502 	mla	r5, r5, r2, r3
   d9fa0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d9fa4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d9fa8:	fb92 f3f3 	sdiv	r3, r2, r3
   d9fac:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9fb0:	442b      	add	r3, r5
   d9fb2:	18a5      	adds	r5, r4, r2
   d9fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9fb8:	fb95 f5f2 	sdiv	r5, r5, r2
   d9fbc:	441d      	add	r5, r3
   d9fbe:	2364      	movs	r3, #100	; 0x64
   d9fc0:	fb94 f7f2 	sdiv	r7, r4, r2
   d9fc4:	fb94 f6f3 	sdiv	r6, r4, r3
   d9fc8:	fb02 4717 	mls	r7, r2, r7, r4
   d9fcc:	fb03 4616 	mls	r6, r3, r6, r4
   d9fd0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d9fd4:	fab7 fe87 	clz	lr, r7
   d9fd8:	9301      	str	r3, [sp, #4]
   d9fda:	f004 0303 	and.w	r3, r4, #3
   d9fde:	6044      	str	r4, [r0, #4]
   d9fe0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9fe4:	4601      	mov	r1, r0
   d9fe6:	9300      	str	r3, [sp, #0]
   d9fe8:	f04f 0c07 	mov.w	ip, #7
   d9fec:	7a0b      	ldrb	r3, [r1, #8]
   d9fee:	2b4a      	cmp	r3, #74	; 0x4a
   d9ff0:	d10e      	bne.n	da010 <__tzcalc_limits+0x98>
   d9ff2:	694b      	ldr	r3, [r1, #20]
   d9ff4:	9a00      	ldr	r2, [sp, #0]
   d9ff6:	18ec      	adds	r4, r5, r3
   d9ff8:	b902      	cbnz	r2, d9ffc <__tzcalc_limits+0x84>
   d9ffa:	b906      	cbnz	r6, d9ffe <__tzcalc_limits+0x86>
   d9ffc:	b927      	cbnz	r7, da008 <__tzcalc_limits+0x90>
   d9ffe:	2b3b      	cmp	r3, #59	; 0x3b
   da000:	bfd4      	ite	le
   da002:	2300      	movle	r3, #0
   da004:	2301      	movgt	r3, #1
   da006:	e000      	b.n	da00a <__tzcalc_limits+0x92>
   da008:	2300      	movs	r3, #0
   da00a:	4423      	add	r3, r4
   da00c:	3b01      	subs	r3, #1
   da00e:	e03f      	b.n	da090 <__tzcalc_limits+0x118>
   da010:	2b44      	cmp	r3, #68	; 0x44
   da012:	d102      	bne.n	da01a <__tzcalc_limits+0xa2>
   da014:	694b      	ldr	r3, [r1, #20]
   da016:	442b      	add	r3, r5
   da018:	e03a      	b.n	da090 <__tzcalc_limits+0x118>
   da01a:	9b00      	ldr	r3, [sp, #0]
   da01c:	b92b      	cbnz	r3, da02a <__tzcalc_limits+0xb2>
   da01e:	2e00      	cmp	r6, #0
   da020:	bf0c      	ite	eq
   da022:	46f0      	moveq	r8, lr
   da024:	f04f 0801 	movne.w	r8, #1
   da028:	e000      	b.n	da02c <__tzcalc_limits+0xb4>
   da02a:	46f0      	mov	r8, lr
   da02c:	4b24      	ldr	r3, [pc, #144]	; (da0c0 <__tzcalc_limits+0x148>)
   da02e:	68cc      	ldr	r4, [r1, #12]
   da030:	2230      	movs	r2, #48	; 0x30
   da032:	fb02 3808 	mla	r8, r2, r8, r3
   da036:	f1a8 0a04 	sub.w	sl, r8, #4
   da03a:	46a9      	mov	r9, r5
   da03c:	2301      	movs	r3, #1
   da03e:	42a3      	cmp	r3, r4
   da040:	da04      	bge.n	da04c <__tzcalc_limits+0xd4>
   da042:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da046:	3301      	adds	r3, #1
   da048:	44d9      	add	r9, fp
   da04a:	e7f8      	b.n	da03e <__tzcalc_limits+0xc6>
   da04c:	f109 0304 	add.w	r3, r9, #4
   da050:	fb93 fbfc 	sdiv	fp, r3, ip
   da054:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da058:	2c01      	cmp	r4, #1
   da05a:	ebca 0a03 	rsb	sl, sl, r3
   da05e:	694b      	ldr	r3, [r1, #20]
   da060:	bfb8      	it	lt
   da062:	2401      	movlt	r4, #1
   da064:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da068:	ebb3 0a0a 	subs.w	sl, r3, sl
   da06c:	690b      	ldr	r3, [r1, #16]
   da06e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   da072:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   da076:	bf48      	it	mi
   da078:	f10a 0a07 	addmi.w	sl, sl, #7
   da07c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da080:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da084:	4453      	add	r3, sl
   da086:	42a3      	cmp	r3, r4
   da088:	db01      	blt.n	da08e <__tzcalc_limits+0x116>
   da08a:	3b07      	subs	r3, #7
   da08c:	e7fb      	b.n	da086 <__tzcalc_limits+0x10e>
   da08e:	444b      	add	r3, r9
   da090:	698c      	ldr	r4, [r1, #24]
   da092:	4a0c      	ldr	r2, [pc, #48]	; (da0c4 <__tzcalc_limits+0x14c>)
   da094:	fb02 4303 	mla	r3, r2, r3, r4
   da098:	6a0c      	ldr	r4, [r1, #32]
   da09a:	4423      	add	r3, r4
   da09c:	f841 3f1c 	str.w	r3, [r1, #28]!
   da0a0:	9b01      	ldr	r3, [sp, #4]
   da0a2:	4299      	cmp	r1, r3
   da0a4:	d1a2      	bne.n	d9fec <__tzcalc_limits+0x74>
   da0a6:	69c3      	ldr	r3, [r0, #28]
   da0a8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da0aa:	4293      	cmp	r3, r2
   da0ac:	bfac      	ite	ge
   da0ae:	2300      	movge	r3, #0
   da0b0:	2301      	movlt	r3, #1
   da0b2:	6003      	str	r3, [r0, #0]
   da0b4:	2001      	movs	r0, #1
   da0b6:	e000      	b.n	da0ba <__tzcalc_limits+0x142>
   da0b8:	2000      	movs	r0, #0
   da0ba:	b003      	add	sp, #12
   da0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da0c0:	000dbef4 	.word	0x000dbef4
   da0c4:	00015180 	.word	0x00015180

000da0c8 <__tz_lock>:
   da0c8:	4770      	bx	lr

000da0ca <__tz_unlock>:
   da0ca:	4770      	bx	lr

000da0cc <_tzset_unlocked>:
   da0cc:	4b01      	ldr	r3, [pc, #4]	; (da0d4 <_tzset_unlocked+0x8>)
   da0ce:	6818      	ldr	r0, [r3, #0]
   da0d0:	f000 b802 	b.w	da0d8 <_tzset_unlocked_r>
   da0d4:	2003e130 	.word	0x2003e130

000da0d8 <_tzset_unlocked_r>:
   da0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da0dc:	b08d      	sub	sp, #52	; 0x34
   da0de:	4607      	mov	r7, r0
   da0e0:	f000 fcdc 	bl	daa9c <__gettzinfo>
   da0e4:	49b0      	ldr	r1, [pc, #704]	; (da3a8 <_tzset_unlocked_r+0x2d0>)
   da0e6:	4eb1      	ldr	r6, [pc, #708]	; (da3ac <_tzset_unlocked_r+0x2d4>)
   da0e8:	4604      	mov	r4, r0
   da0ea:	4638      	mov	r0, r7
   da0ec:	f000 fcce 	bl	daa8c <_getenv_r>
   da0f0:	4605      	mov	r5, r0
   da0f2:	b960      	cbnz	r0, da10e <_tzset_unlocked_r+0x36>
   da0f4:	4bae      	ldr	r3, [pc, #696]	; (da3b0 <_tzset_unlocked_r+0x2d8>)
   da0f6:	4aaf      	ldr	r2, [pc, #700]	; (da3b4 <_tzset_unlocked_r+0x2dc>)
   da0f8:	6018      	str	r0, [r3, #0]
   da0fa:	4baf      	ldr	r3, [pc, #700]	; (da3b8 <_tzset_unlocked_r+0x2e0>)
   da0fc:	6018      	str	r0, [r3, #0]
   da0fe:	4baf      	ldr	r3, [pc, #700]	; (da3bc <_tzset_unlocked_r+0x2e4>)
   da100:	6830      	ldr	r0, [r6, #0]
   da102:	601a      	str	r2, [r3, #0]
   da104:	605a      	str	r2, [r3, #4]
   da106:	f7fc fa5b 	bl	d65c0 <free>
   da10a:	6035      	str	r5, [r6, #0]
   da10c:	e148      	b.n	da3a0 <_tzset_unlocked_r+0x2c8>
   da10e:	6831      	ldr	r1, [r6, #0]
   da110:	b979      	cbnz	r1, da132 <_tzset_unlocked_r+0x5a>
   da112:	6830      	ldr	r0, [r6, #0]
   da114:	f7fc fa54 	bl	d65c0 <free>
   da118:	4628      	mov	r0, r5
   da11a:	f7fe ffa6 	bl	d906a <strlen>
   da11e:	1c41      	adds	r1, r0, #1
   da120:	4638      	mov	r0, r7
   da122:	f7fc fa75 	bl	d6610 <_malloc_r>
   da126:	6030      	str	r0, [r6, #0]
   da128:	b148      	cbz	r0, da13e <_tzset_unlocked_r+0x66>
   da12a:	4629      	mov	r1, r5
   da12c:	f7fe ff7a 	bl	d9024 <strcpy>
   da130:	e005      	b.n	da13e <_tzset_unlocked_r+0x66>
   da132:	f7fe ff6d 	bl	d9010 <strcmp>
   da136:	2800      	cmp	r0, #0
   da138:	f000 8132 	beq.w	da3a0 <_tzset_unlocked_r+0x2c8>
   da13c:	e7e9      	b.n	da112 <_tzset_unlocked_r+0x3a>
   da13e:	782b      	ldrb	r3, [r5, #0]
   da140:	4a9f      	ldr	r2, [pc, #636]	; (da3c0 <_tzset_unlocked_r+0x2e8>)
   da142:	49a0      	ldr	r1, [pc, #640]	; (da3c4 <_tzset_unlocked_r+0x2ec>)
   da144:	2b3a      	cmp	r3, #58	; 0x3a
   da146:	bf08      	it	eq
   da148:	3501      	addeq	r5, #1
   da14a:	ae0a      	add	r6, sp, #40	; 0x28
   da14c:	4633      	mov	r3, r6
   da14e:	4628      	mov	r0, r5
   da150:	f7fc fa46 	bl	d65e0 <siscanf>
   da154:	2800      	cmp	r0, #0
   da156:	f340 8123 	ble.w	da3a0 <_tzset_unlocked_r+0x2c8>
   da15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da15c:	18ef      	adds	r7, r5, r3
   da15e:	5ceb      	ldrb	r3, [r5, r3]
   da160:	2b2d      	cmp	r3, #45	; 0x2d
   da162:	d103      	bne.n	da16c <_tzset_unlocked_r+0x94>
   da164:	3701      	adds	r7, #1
   da166:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da16a:	e003      	b.n	da174 <_tzset_unlocked_r+0x9c>
   da16c:	2b2b      	cmp	r3, #43	; 0x2b
   da16e:	bf08      	it	eq
   da170:	3701      	addeq	r7, #1
   da172:	2501      	movs	r5, #1
   da174:	f10d 0a20 	add.w	sl, sp, #32
   da178:	f10d 0b1e 	add.w	fp, sp, #30
   da17c:	f04f 0800 	mov.w	r8, #0
   da180:	9603      	str	r6, [sp, #12]
   da182:	f8cd a008 	str.w	sl, [sp, #8]
   da186:	9601      	str	r6, [sp, #4]
   da188:	f8cd b000 	str.w	fp, [sp]
   da18c:	4633      	mov	r3, r6
   da18e:	aa07      	add	r2, sp, #28
   da190:	498d      	ldr	r1, [pc, #564]	; (da3c8 <_tzset_unlocked_r+0x2f0>)
   da192:	f8ad 801e 	strh.w	r8, [sp, #30]
   da196:	4638      	mov	r0, r7
   da198:	f8ad 8020 	strh.w	r8, [sp, #32]
   da19c:	f7fc fa20 	bl	d65e0 <siscanf>
   da1a0:	4540      	cmp	r0, r8
   da1a2:	f340 80fd 	ble.w	da3a0 <_tzset_unlocked_r+0x2c8>
   da1a6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da1aa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da1ae:	f8df 9224 	ldr.w	r9, [pc, #548]	; da3d4 <_tzset_unlocked_r+0x2fc>
   da1b2:	213c      	movs	r1, #60	; 0x3c
   da1b4:	fb01 3302 	mla	r3, r1, r2, r3
   da1b8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da1bc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da1c0:	fb01 3302 	mla	r3, r1, r2, r3
   da1c4:	435d      	muls	r5, r3
   da1c6:	6225      	str	r5, [r4, #32]
   da1c8:	4d7c      	ldr	r5, [pc, #496]	; (da3bc <_tzset_unlocked_r+0x2e4>)
   da1ca:	4b7d      	ldr	r3, [pc, #500]	; (da3c0 <_tzset_unlocked_r+0x2e8>)
   da1cc:	602b      	str	r3, [r5, #0]
   da1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da1d0:	497c      	ldr	r1, [pc, #496]	; (da3c4 <_tzset_unlocked_r+0x2ec>)
   da1d2:	441f      	add	r7, r3
   da1d4:	464a      	mov	r2, r9
   da1d6:	4633      	mov	r3, r6
   da1d8:	4638      	mov	r0, r7
   da1da:	f7fc fa01 	bl	d65e0 <siscanf>
   da1de:	4540      	cmp	r0, r8
   da1e0:	dc08      	bgt.n	da1f4 <_tzset_unlocked_r+0x11c>
   da1e2:	682b      	ldr	r3, [r5, #0]
   da1e4:	606b      	str	r3, [r5, #4]
   da1e6:	4b72      	ldr	r3, [pc, #456]	; (da3b0 <_tzset_unlocked_r+0x2d8>)
   da1e8:	6a22      	ldr	r2, [r4, #32]
   da1ea:	601a      	str	r2, [r3, #0]
   da1ec:	4b72      	ldr	r3, [pc, #456]	; (da3b8 <_tzset_unlocked_r+0x2e0>)
   da1ee:	f8c3 8000 	str.w	r8, [r3]
   da1f2:	e0d5      	b.n	da3a0 <_tzset_unlocked_r+0x2c8>
   da1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da1f6:	f8c5 9004 	str.w	r9, [r5, #4]
   da1fa:	18fd      	adds	r5, r7, r3
   da1fc:	5cfb      	ldrb	r3, [r7, r3]
   da1fe:	2b2d      	cmp	r3, #45	; 0x2d
   da200:	d103      	bne.n	da20a <_tzset_unlocked_r+0x132>
   da202:	3501      	adds	r5, #1
   da204:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da208:	e003      	b.n	da212 <_tzset_unlocked_r+0x13a>
   da20a:	2b2b      	cmp	r3, #43	; 0x2b
   da20c:	bf08      	it	eq
   da20e:	3501      	addeq	r5, #1
   da210:	2701      	movs	r7, #1
   da212:	2300      	movs	r3, #0
   da214:	f8ad 301c 	strh.w	r3, [sp, #28]
   da218:	f8ad 301e 	strh.w	r3, [sp, #30]
   da21c:	f8ad 3020 	strh.w	r3, [sp, #32]
   da220:	930a      	str	r3, [sp, #40]	; 0x28
   da222:	9603      	str	r6, [sp, #12]
   da224:	f8cd a008 	str.w	sl, [sp, #8]
   da228:	9601      	str	r6, [sp, #4]
   da22a:	f8cd b000 	str.w	fp, [sp]
   da22e:	4633      	mov	r3, r6
   da230:	aa07      	add	r2, sp, #28
   da232:	4965      	ldr	r1, [pc, #404]	; (da3c8 <_tzset_unlocked_r+0x2f0>)
   da234:	4628      	mov	r0, r5
   da236:	f7fc f9d3 	bl	d65e0 <siscanf>
   da23a:	2800      	cmp	r0, #0
   da23c:	dc04      	bgt.n	da248 <_tzset_unlocked_r+0x170>
   da23e:	6a23      	ldr	r3, [r4, #32]
   da240:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da244:	63e3      	str	r3, [r4, #60]	; 0x3c
   da246:	e00e      	b.n	da266 <_tzset_unlocked_r+0x18e>
   da248:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da24c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da250:	213c      	movs	r1, #60	; 0x3c
   da252:	fb01 3302 	mla	r3, r1, r2, r3
   da256:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da25a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da25e:	fb01 3302 	mla	r3, r1, r2, r3
   da262:	435f      	muls	r7, r3
   da264:	63e7      	str	r7, [r4, #60]	; 0x3c
   da266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da268:	4627      	mov	r7, r4
   da26a:	441d      	add	r5, r3
   da26c:	f04f 0900 	mov.w	r9, #0
   da270:	782b      	ldrb	r3, [r5, #0]
   da272:	2b2c      	cmp	r3, #44	; 0x2c
   da274:	bf08      	it	eq
   da276:	3501      	addeq	r5, #1
   da278:	f895 8000 	ldrb.w	r8, [r5]
   da27c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da280:	d126      	bne.n	da2d0 <_tzset_unlocked_r+0x1f8>
   da282:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da286:	9302      	str	r3, [sp, #8]
   da288:	ab09      	add	r3, sp, #36	; 0x24
   da28a:	9300      	str	r3, [sp, #0]
   da28c:	9603      	str	r6, [sp, #12]
   da28e:	9601      	str	r6, [sp, #4]
   da290:	4633      	mov	r3, r6
   da292:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da296:	494d      	ldr	r1, [pc, #308]	; (da3cc <_tzset_unlocked_r+0x2f4>)
   da298:	4628      	mov	r0, r5
   da29a:	f7fc f9a1 	bl	d65e0 <siscanf>
   da29e:	2803      	cmp	r0, #3
   da2a0:	d17e      	bne.n	da3a0 <_tzset_unlocked_r+0x2c8>
   da2a2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da2a6:	1e4b      	subs	r3, r1, #1
   da2a8:	2b0b      	cmp	r3, #11
   da2aa:	d879      	bhi.n	da3a0 <_tzset_unlocked_r+0x2c8>
   da2ac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da2b0:	1e53      	subs	r3, r2, #1
   da2b2:	2b04      	cmp	r3, #4
   da2b4:	d874      	bhi.n	da3a0 <_tzset_unlocked_r+0x2c8>
   da2b6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da2ba:	2b06      	cmp	r3, #6
   da2bc:	d870      	bhi.n	da3a0 <_tzset_unlocked_r+0x2c8>
   da2be:	f887 8008 	strb.w	r8, [r7, #8]
   da2c2:	60f9      	str	r1, [r7, #12]
   da2c4:	613a      	str	r2, [r7, #16]
   da2c6:	617b      	str	r3, [r7, #20]
   da2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da2ca:	eb05 0803 	add.w	r8, r5, r3
   da2ce:	e02a      	b.n	da326 <_tzset_unlocked_r+0x24e>
   da2d0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da2d4:	bf06      	itte	eq
   da2d6:	3501      	addeq	r5, #1
   da2d8:	4643      	moveq	r3, r8
   da2da:	2344      	movne	r3, #68	; 0x44
   da2dc:	220a      	movs	r2, #10
   da2de:	a90b      	add	r1, sp, #44	; 0x2c
   da2e0:	4628      	mov	r0, r5
   da2e2:	9305      	str	r3, [sp, #20]
   da2e4:	f7ff fe3e 	bl	d9f64 <strtoul>
   da2e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da2ec:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da2f0:	4545      	cmp	r5, r8
   da2f2:	9b05      	ldr	r3, [sp, #20]
   da2f4:	d114      	bne.n	da320 <_tzset_unlocked_r+0x248>
   da2f6:	234d      	movs	r3, #77	; 0x4d
   da2f8:	f1b9 0f00 	cmp.w	r9, #0
   da2fc:	d107      	bne.n	da30e <_tzset_unlocked_r+0x236>
   da2fe:	7223      	strb	r3, [r4, #8]
   da300:	2303      	movs	r3, #3
   da302:	60e3      	str	r3, [r4, #12]
   da304:	2302      	movs	r3, #2
   da306:	6123      	str	r3, [r4, #16]
   da308:	f8c4 9014 	str.w	r9, [r4, #20]
   da30c:	e00b      	b.n	da326 <_tzset_unlocked_r+0x24e>
   da30e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da312:	230b      	movs	r3, #11
   da314:	62a3      	str	r3, [r4, #40]	; 0x28
   da316:	2301      	movs	r3, #1
   da318:	62e3      	str	r3, [r4, #44]	; 0x2c
   da31a:	2300      	movs	r3, #0
   da31c:	6323      	str	r3, [r4, #48]	; 0x30
   da31e:	e002      	b.n	da326 <_tzset_unlocked_r+0x24e>
   da320:	b280      	uxth	r0, r0
   da322:	723b      	strb	r3, [r7, #8]
   da324:	6178      	str	r0, [r7, #20]
   da326:	2302      	movs	r3, #2
   da328:	f8ad 301c 	strh.w	r3, [sp, #28]
   da32c:	2300      	movs	r3, #0
   da32e:	f8ad 301e 	strh.w	r3, [sp, #30]
   da332:	f8ad 3020 	strh.w	r3, [sp, #32]
   da336:	930a      	str	r3, [sp, #40]	; 0x28
   da338:	f898 3000 	ldrb.w	r3, [r8]
   da33c:	2b2f      	cmp	r3, #47	; 0x2f
   da33e:	d10b      	bne.n	da358 <_tzset_unlocked_r+0x280>
   da340:	9603      	str	r6, [sp, #12]
   da342:	f8cd a008 	str.w	sl, [sp, #8]
   da346:	9601      	str	r6, [sp, #4]
   da348:	f8cd b000 	str.w	fp, [sp]
   da34c:	4633      	mov	r3, r6
   da34e:	aa07      	add	r2, sp, #28
   da350:	491f      	ldr	r1, [pc, #124]	; (da3d0 <_tzset_unlocked_r+0x2f8>)
   da352:	4640      	mov	r0, r8
   da354:	f7fc f944 	bl	d65e0 <siscanf>
   da358:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da35c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da360:	213c      	movs	r1, #60	; 0x3c
   da362:	fb01 3302 	mla	r3, r1, r2, r3
   da366:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da36a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da36e:	fb01 3302 	mla	r3, r1, r2, r3
   da372:	61bb      	str	r3, [r7, #24]
   da374:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da376:	f109 0901 	add.w	r9, r9, #1
   da37a:	f1b9 0f02 	cmp.w	r9, #2
   da37e:	4445      	add	r5, r8
   da380:	f107 071c 	add.w	r7, r7, #28
   da384:	f47f af74 	bne.w	da270 <_tzset_unlocked_r+0x198>
   da388:	6860      	ldr	r0, [r4, #4]
   da38a:	f7ff fdf5 	bl	d9f78 <__tzcalc_limits>
   da38e:	4b08      	ldr	r3, [pc, #32]	; (da3b0 <_tzset_unlocked_r+0x2d8>)
   da390:	6a22      	ldr	r2, [r4, #32]
   da392:	601a      	str	r2, [r3, #0]
   da394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da396:	1a9b      	subs	r3, r3, r2
   da398:	4a07      	ldr	r2, [pc, #28]	; (da3b8 <_tzset_unlocked_r+0x2e0>)
   da39a:	bf18      	it	ne
   da39c:	2301      	movne	r3, #1
   da39e:	6013      	str	r3, [r2, #0]
   da3a0:	b00d      	add	sp, #52	; 0x34
   da3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3a6:	bf00      	nop
   da3a8:	000dbfb0 	.word	0x000dbfb0
   da3ac:	2003e7e0 	.word	0x2003e7e0
   da3b0:	2003e7e8 	.word	0x2003e7e8
   da3b4:	000dbfb3 	.word	0x000dbfb3
   da3b8:	2003e7e4 	.word	0x2003e7e4
   da3bc:	2003e16c 	.word	0x2003e16c
   da3c0:	2003e7d3 	.word	0x2003e7d3
   da3c4:	000dbfb7 	.word	0x000dbfb7
   da3c8:	000dbfda 	.word	0x000dbfda
   da3cc:	000dbfc6 	.word	0x000dbfc6
   da3d0:	000dbfd9 	.word	0x000dbfd9
   da3d4:	2003e7c8 	.word	0x2003e7c8

000da3d8 <rshift>:
   da3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da3da:	6906      	ldr	r6, [r0, #16]
   da3dc:	114b      	asrs	r3, r1, #5
   da3de:	42b3      	cmp	r3, r6
   da3e0:	f100 0514 	add.w	r5, r0, #20
   da3e4:	da27      	bge.n	da436 <rshift+0x5e>
   da3e6:	f011 011f 	ands.w	r1, r1, #31
   da3ea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   da3ee:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   da3f2:	d101      	bne.n	da3f8 <rshift+0x20>
   da3f4:	4629      	mov	r1, r5
   da3f6:	e016      	b.n	da426 <rshift+0x4e>
   da3f8:	1d14      	adds	r4, r2, #4
   da3fa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   da3fe:	f1c1 0e20 	rsb	lr, r1, #32
   da402:	40ca      	lsrs	r2, r1
   da404:	462b      	mov	r3, r5
   da406:	42b4      	cmp	r4, r6
   da408:	d209      	bcs.n	da41e <rshift+0x46>
   da40a:	6827      	ldr	r7, [r4, #0]
   da40c:	fa07 f70e 	lsl.w	r7, r7, lr
   da410:	433a      	orrs	r2, r7
   da412:	f843 2b04 	str.w	r2, [r3], #4
   da416:	f854 2b04 	ldr.w	r2, [r4], #4
   da41a:	40ca      	lsrs	r2, r1
   da41c:	e7f3      	b.n	da406 <rshift+0x2e>
   da41e:	601a      	str	r2, [r3, #0]
   da420:	b152      	cbz	r2, da438 <rshift+0x60>
   da422:	3304      	adds	r3, #4
   da424:	e008      	b.n	da438 <rshift+0x60>
   da426:	42b2      	cmp	r2, r6
   da428:	460b      	mov	r3, r1
   da42a:	d205      	bcs.n	da438 <rshift+0x60>
   da42c:	f852 3b04 	ldr.w	r3, [r2], #4
   da430:	f841 3b04 	str.w	r3, [r1], #4
   da434:	e7f7      	b.n	da426 <rshift+0x4e>
   da436:	462b      	mov	r3, r5
   da438:	1b5b      	subs	r3, r3, r5
   da43a:	109b      	asrs	r3, r3, #2
   da43c:	6103      	str	r3, [r0, #16]
   da43e:	b903      	cbnz	r3, da442 <rshift+0x6a>
   da440:	6143      	str	r3, [r0, #20]
   da442:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da444 <__hexdig_fun>:
   da444:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da448:	2b09      	cmp	r3, #9
   da44a:	d801      	bhi.n	da450 <__hexdig_fun+0xc>
   da44c:	3820      	subs	r0, #32
   da44e:	e00a      	b.n	da466 <__hexdig_fun+0x22>
   da450:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da454:	2b05      	cmp	r3, #5
   da456:	d801      	bhi.n	da45c <__hexdig_fun+0x18>
   da458:	3847      	subs	r0, #71	; 0x47
   da45a:	e004      	b.n	da466 <__hexdig_fun+0x22>
   da45c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da460:	2b05      	cmp	r3, #5
   da462:	d802      	bhi.n	da46a <__hexdig_fun+0x26>
   da464:	3827      	subs	r0, #39	; 0x27
   da466:	b2c0      	uxtb	r0, r0
   da468:	4770      	bx	lr
   da46a:	2000      	movs	r0, #0
   da46c:	4770      	bx	lr

000da46e <__gethex>:
   da46e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da472:	b08b      	sub	sp, #44	; 0x2c
   da474:	468a      	mov	sl, r1
   da476:	4690      	mov	r8, r2
   da478:	9306      	str	r3, [sp, #24]
   da47a:	9002      	str	r0, [sp, #8]
   da47c:	f7fe fd88 	bl	d8f90 <_localeconv_r>
   da480:	6803      	ldr	r3, [r0, #0]
   da482:	9303      	str	r3, [sp, #12]
   da484:	4618      	mov	r0, r3
   da486:	f7fe fdf0 	bl	d906a <strlen>
   da48a:	9b03      	ldr	r3, [sp, #12]
   da48c:	9001      	str	r0, [sp, #4]
   da48e:	4403      	add	r3, r0
   da490:	f04f 0b00 	mov.w	fp, #0
   da494:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da498:	9307      	str	r3, [sp, #28]
   da49a:	f8da 3000 	ldr.w	r3, [sl]
   da49e:	3302      	adds	r3, #2
   da4a0:	461f      	mov	r7, r3
   da4a2:	f813 0b01 	ldrb.w	r0, [r3], #1
   da4a6:	2830      	cmp	r0, #48	; 0x30
   da4a8:	d102      	bne.n	da4b0 <__gethex+0x42>
   da4aa:	f10b 0b01 	add.w	fp, fp, #1
   da4ae:	e7f7      	b.n	da4a0 <__gethex+0x32>
   da4b0:	f7ff ffc8 	bl	da444 <__hexdig_fun>
   da4b4:	4604      	mov	r4, r0
   da4b6:	b9e0      	cbnz	r0, da4f2 <__gethex+0x84>
   da4b8:	9a01      	ldr	r2, [sp, #4]
   da4ba:	9903      	ldr	r1, [sp, #12]
   da4bc:	4638      	mov	r0, r7
   da4be:	f7fe fddc 	bl	d907a <strncmp>
   da4c2:	2800      	cmp	r0, #0
   da4c4:	d134      	bne.n	da530 <__gethex+0xc2>
   da4c6:	9b01      	ldr	r3, [sp, #4]
   da4c8:	5cf8      	ldrb	r0, [r7, r3]
   da4ca:	18fe      	adds	r6, r7, r3
   da4cc:	f7ff ffba 	bl	da444 <__hexdig_fun>
   da4d0:	b380      	cbz	r0, da534 <__gethex+0xc6>
   da4d2:	4633      	mov	r3, r6
   da4d4:	7818      	ldrb	r0, [r3, #0]
   da4d6:	2830      	cmp	r0, #48	; 0x30
   da4d8:	461f      	mov	r7, r3
   da4da:	f103 0301 	add.w	r3, r3, #1
   da4de:	d0f9      	beq.n	da4d4 <__gethex+0x66>
   da4e0:	f7ff ffb0 	bl	da444 <__hexdig_fun>
   da4e4:	fab0 f580 	clz	r5, r0
   da4e8:	096d      	lsrs	r5, r5, #5
   da4ea:	4634      	mov	r4, r6
   da4ec:	f04f 0b01 	mov.w	fp, #1
   da4f0:	e001      	b.n	da4f6 <__gethex+0x88>
   da4f2:	2500      	movs	r5, #0
   da4f4:	462c      	mov	r4, r5
   da4f6:	463a      	mov	r2, r7
   da4f8:	4616      	mov	r6, r2
   da4fa:	3201      	adds	r2, #1
   da4fc:	7830      	ldrb	r0, [r6, #0]
   da4fe:	f7ff ffa1 	bl	da444 <__hexdig_fun>
   da502:	2800      	cmp	r0, #0
   da504:	d1f8      	bne.n	da4f8 <__gethex+0x8a>
   da506:	9a01      	ldr	r2, [sp, #4]
   da508:	9903      	ldr	r1, [sp, #12]
   da50a:	4630      	mov	r0, r6
   da50c:	f7fe fdb5 	bl	d907a <strncmp>
   da510:	b950      	cbnz	r0, da528 <__gethex+0xba>
   da512:	b954      	cbnz	r4, da52a <__gethex+0xbc>
   da514:	9b01      	ldr	r3, [sp, #4]
   da516:	18f4      	adds	r4, r6, r3
   da518:	4622      	mov	r2, r4
   da51a:	4616      	mov	r6, r2
   da51c:	3201      	adds	r2, #1
   da51e:	7830      	ldrb	r0, [r6, #0]
   da520:	f7ff ff90 	bl	da444 <__hexdig_fun>
   da524:	2800      	cmp	r0, #0
   da526:	d1f8      	bne.n	da51a <__gethex+0xac>
   da528:	b134      	cbz	r4, da538 <__gethex+0xca>
   da52a:	1ba4      	subs	r4, r4, r6
   da52c:	00a4      	lsls	r4, r4, #2
   da52e:	e003      	b.n	da538 <__gethex+0xca>
   da530:	463e      	mov	r6, r7
   da532:	e000      	b.n	da536 <__gethex+0xc8>
   da534:	4604      	mov	r4, r0
   da536:	2501      	movs	r5, #1
   da538:	7833      	ldrb	r3, [r6, #0]
   da53a:	2b50      	cmp	r3, #80	; 0x50
   da53c:	d001      	beq.n	da542 <__gethex+0xd4>
   da53e:	2b70      	cmp	r3, #112	; 0x70
   da540:	d12a      	bne.n	da598 <__gethex+0x12a>
   da542:	7873      	ldrb	r3, [r6, #1]
   da544:	2b2b      	cmp	r3, #43	; 0x2b
   da546:	d008      	beq.n	da55a <__gethex+0xec>
   da548:	2b2d      	cmp	r3, #45	; 0x2d
   da54a:	d003      	beq.n	da554 <__gethex+0xe6>
   da54c:	1c71      	adds	r1, r6, #1
   da54e:	f04f 0900 	mov.w	r9, #0
   da552:	e005      	b.n	da560 <__gethex+0xf2>
   da554:	f04f 0901 	mov.w	r9, #1
   da558:	e001      	b.n	da55e <__gethex+0xf0>
   da55a:	f04f 0900 	mov.w	r9, #0
   da55e:	1cb1      	adds	r1, r6, #2
   da560:	7808      	ldrb	r0, [r1, #0]
   da562:	f7ff ff6f 	bl	da444 <__hexdig_fun>
   da566:	1e43      	subs	r3, r0, #1
   da568:	b2db      	uxtb	r3, r3
   da56a:	2b18      	cmp	r3, #24
   da56c:	d814      	bhi.n	da598 <__gethex+0x12a>
   da56e:	f1a0 0210 	sub.w	r2, r0, #16
   da572:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da576:	f7ff ff65 	bl	da444 <__hexdig_fun>
   da57a:	1e43      	subs	r3, r0, #1
   da57c:	b2db      	uxtb	r3, r3
   da57e:	2b18      	cmp	r3, #24
   da580:	d804      	bhi.n	da58c <__gethex+0x11e>
   da582:	230a      	movs	r3, #10
   da584:	fb03 0202 	mla	r2, r3, r2, r0
   da588:	3a10      	subs	r2, #16
   da58a:	e7f2      	b.n	da572 <__gethex+0x104>
   da58c:	f1b9 0f00 	cmp.w	r9, #0
   da590:	d000      	beq.n	da594 <__gethex+0x126>
   da592:	4252      	negs	r2, r2
   da594:	4414      	add	r4, r2
   da596:	e000      	b.n	da59a <__gethex+0x12c>
   da598:	4631      	mov	r1, r6
   da59a:	f8ca 1000 	str.w	r1, [sl]
   da59e:	b12d      	cbz	r5, da5ac <__gethex+0x13e>
   da5a0:	f1bb 0f00 	cmp.w	fp, #0
   da5a4:	bf14      	ite	ne
   da5a6:	2000      	movne	r0, #0
   da5a8:	2006      	moveq	r0, #6
   da5aa:	e17c      	b.n	da8a6 <__gethex+0x438>
   da5ac:	1bf3      	subs	r3, r6, r7
   da5ae:	3b01      	subs	r3, #1
   da5b0:	4629      	mov	r1, r5
   da5b2:	2b07      	cmp	r3, #7
   da5b4:	dd02      	ble.n	da5bc <__gethex+0x14e>
   da5b6:	3101      	adds	r1, #1
   da5b8:	105b      	asrs	r3, r3, #1
   da5ba:	e7fa      	b.n	da5b2 <__gethex+0x144>
   da5bc:	9802      	ldr	r0, [sp, #8]
   da5be:	f000 fb09 	bl	dabd4 <_Balloc>
   da5c2:	9b01      	ldr	r3, [sp, #4]
   da5c4:	f100 0a14 	add.w	sl, r0, #20
   da5c8:	f04f 0900 	mov.w	r9, #0
   da5cc:	f1c3 0301 	rsb	r3, r3, #1
   da5d0:	4605      	mov	r5, r0
   da5d2:	f8cd a010 	str.w	sl, [sp, #16]
   da5d6:	46cb      	mov	fp, r9
   da5d8:	9308      	str	r3, [sp, #32]
   da5da:	42b7      	cmp	r7, r6
   da5dc:	d22f      	bcs.n	da63e <__gethex+0x1d0>
   da5de:	1e73      	subs	r3, r6, #1
   da5e0:	9305      	str	r3, [sp, #20]
   da5e2:	9a07      	ldr	r2, [sp, #28]
   da5e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da5e8:	4293      	cmp	r3, r2
   da5ea:	d00b      	beq.n	da604 <__gethex+0x196>
   da5ec:	f1bb 0f20 	cmp.w	fp, #32
   da5f0:	d116      	bne.n	da620 <__gethex+0x1b2>
   da5f2:	9b04      	ldr	r3, [sp, #16]
   da5f4:	f8c3 9000 	str.w	r9, [r3]
   da5f8:	3304      	adds	r3, #4
   da5fa:	f04f 0900 	mov.w	r9, #0
   da5fe:	9304      	str	r3, [sp, #16]
   da600:	46cb      	mov	fp, r9
   da602:	e00d      	b.n	da620 <__gethex+0x1b2>
   da604:	9b05      	ldr	r3, [sp, #20]
   da606:	9a08      	ldr	r2, [sp, #32]
   da608:	4413      	add	r3, r2
   da60a:	429f      	cmp	r7, r3
   da60c:	d8ee      	bhi.n	da5ec <__gethex+0x17e>
   da60e:	4618      	mov	r0, r3
   da610:	9a01      	ldr	r2, [sp, #4]
   da612:	9903      	ldr	r1, [sp, #12]
   da614:	9309      	str	r3, [sp, #36]	; 0x24
   da616:	f7fe fd30 	bl	d907a <strncmp>
   da61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da61c:	b168      	cbz	r0, da63a <__gethex+0x1cc>
   da61e:	e7e5      	b.n	da5ec <__gethex+0x17e>
   da620:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da624:	f7ff ff0e 	bl	da444 <__hexdig_fun>
   da628:	f000 000f 	and.w	r0, r0, #15
   da62c:	fa00 f00b 	lsl.w	r0, r0, fp
   da630:	9b05      	ldr	r3, [sp, #20]
   da632:	ea49 0900 	orr.w	r9, r9, r0
   da636:	f10b 0b04 	add.w	fp, fp, #4
   da63a:	461e      	mov	r6, r3
   da63c:	e7cd      	b.n	da5da <__gethex+0x16c>
   da63e:	9804      	ldr	r0, [sp, #16]
   da640:	f840 9b04 	str.w	r9, [r0], #4
   da644:	ebca 0000 	rsb	r0, sl, r0
   da648:	1080      	asrs	r0, r0, #2
   da64a:	6128      	str	r0, [r5, #16]
   da64c:	0147      	lsls	r7, r0, #5
   da64e:	4648      	mov	r0, r9
   da650:	f000 fb85 	bl	dad5e <__hi0bits>
   da654:	f8d8 6000 	ldr.w	r6, [r8]
   da658:	1a38      	subs	r0, r7, r0
   da65a:	42b0      	cmp	r0, r6
   da65c:	dd26      	ble.n	da6ac <__gethex+0x23e>
   da65e:	1b87      	subs	r7, r0, r6
   da660:	4639      	mov	r1, r7
   da662:	4628      	mov	r0, r5
   da664:	f000 fe83 	bl	db36e <__any_on>
   da668:	b1c8      	cbz	r0, da69e <__gethex+0x230>
   da66a:	1e7b      	subs	r3, r7, #1
   da66c:	1159      	asrs	r1, r3, #5
   da66e:	f003 021f 	and.w	r2, r3, #31
   da672:	f04f 0901 	mov.w	r9, #1
   da676:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   da67a:	fa09 f202 	lsl.w	r2, r9, r2
   da67e:	420a      	tst	r2, r1
   da680:	d00e      	beq.n	da6a0 <__gethex+0x232>
   da682:	454b      	cmp	r3, r9
   da684:	dc02      	bgt.n	da68c <__gethex+0x21e>
   da686:	f04f 0902 	mov.w	r9, #2
   da68a:	e009      	b.n	da6a0 <__gethex+0x232>
   da68c:	1eb9      	subs	r1, r7, #2
   da68e:	4628      	mov	r0, r5
   da690:	f000 fe6d 	bl	db36e <__any_on>
   da694:	2800      	cmp	r0, #0
   da696:	d0f6      	beq.n	da686 <__gethex+0x218>
   da698:	f04f 0903 	mov.w	r9, #3
   da69c:	e000      	b.n	da6a0 <__gethex+0x232>
   da69e:	4681      	mov	r9, r0
   da6a0:	4639      	mov	r1, r7
   da6a2:	4628      	mov	r0, r5
   da6a4:	f7ff fe98 	bl	da3d8 <rshift>
   da6a8:	443c      	add	r4, r7
   da6aa:	e00c      	b.n	da6c6 <__gethex+0x258>
   da6ac:	da09      	bge.n	da6c2 <__gethex+0x254>
   da6ae:	1a37      	subs	r7, r6, r0
   da6b0:	4629      	mov	r1, r5
   da6b2:	463a      	mov	r2, r7
   da6b4:	9802      	ldr	r0, [sp, #8]
   da6b6:	f000 fc87 	bl	dafc8 <__lshift>
   da6ba:	1be4      	subs	r4, r4, r7
   da6bc:	4605      	mov	r5, r0
   da6be:	f100 0a14 	add.w	sl, r0, #20
   da6c2:	f04f 0900 	mov.w	r9, #0
   da6c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da6ca:	429c      	cmp	r4, r3
   da6cc:	dd08      	ble.n	da6e0 <__gethex+0x272>
   da6ce:	9802      	ldr	r0, [sp, #8]
   da6d0:	4629      	mov	r1, r5
   da6d2:	f000 fab4 	bl	dac3e <_Bfree>
   da6d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da6d8:	2300      	movs	r3, #0
   da6da:	6013      	str	r3, [r2, #0]
   da6dc:	20a3      	movs	r0, #163	; 0xa3
   da6de:	e0e2      	b.n	da8a6 <__gethex+0x438>
   da6e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da6e4:	4284      	cmp	r4, r0
   da6e6:	da53      	bge.n	da790 <__gethex+0x322>
   da6e8:	1b04      	subs	r4, r0, r4
   da6ea:	42a6      	cmp	r6, r4
   da6ec:	dc2e      	bgt.n	da74c <__gethex+0x2de>
   da6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da6f2:	2b02      	cmp	r3, #2
   da6f4:	d01a      	beq.n	da72c <__gethex+0x2be>
   da6f6:	2b03      	cmp	r3, #3
   da6f8:	d01c      	beq.n	da734 <__gethex+0x2c6>
   da6fa:	2b01      	cmp	r3, #1
   da6fc:	d11d      	bne.n	da73a <__gethex+0x2cc>
   da6fe:	42a6      	cmp	r6, r4
   da700:	d11b      	bne.n	da73a <__gethex+0x2cc>
   da702:	2e01      	cmp	r6, #1
   da704:	dc0b      	bgt.n	da71e <__gethex+0x2b0>
   da706:	9a06      	ldr	r2, [sp, #24]
   da708:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da70c:	6013      	str	r3, [r2, #0]
   da70e:	2301      	movs	r3, #1
   da710:	612b      	str	r3, [r5, #16]
   da712:	f8ca 3000 	str.w	r3, [sl]
   da716:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da718:	2062      	movs	r0, #98	; 0x62
   da71a:	601d      	str	r5, [r3, #0]
   da71c:	e0c3      	b.n	da8a6 <__gethex+0x438>
   da71e:	1e71      	subs	r1, r6, #1
   da720:	4628      	mov	r0, r5
   da722:	f000 fe24 	bl	db36e <__any_on>
   da726:	2800      	cmp	r0, #0
   da728:	d1ed      	bne.n	da706 <__gethex+0x298>
   da72a:	e006      	b.n	da73a <__gethex+0x2cc>
   da72c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da72e:	2b00      	cmp	r3, #0
   da730:	d0e9      	beq.n	da706 <__gethex+0x298>
   da732:	e002      	b.n	da73a <__gethex+0x2cc>
   da734:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da736:	2b00      	cmp	r3, #0
   da738:	d1e5      	bne.n	da706 <__gethex+0x298>
   da73a:	9802      	ldr	r0, [sp, #8]
   da73c:	4629      	mov	r1, r5
   da73e:	f000 fa7e 	bl	dac3e <_Bfree>
   da742:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da744:	2300      	movs	r3, #0
   da746:	6013      	str	r3, [r2, #0]
   da748:	2050      	movs	r0, #80	; 0x50
   da74a:	e0ac      	b.n	da8a6 <__gethex+0x438>
   da74c:	1e67      	subs	r7, r4, #1
   da74e:	f1b9 0f00 	cmp.w	r9, #0
   da752:	d106      	bne.n	da762 <__gethex+0x2f4>
   da754:	b13f      	cbz	r7, da766 <__gethex+0x2f8>
   da756:	4639      	mov	r1, r7
   da758:	4628      	mov	r0, r5
   da75a:	f000 fe08 	bl	db36e <__any_on>
   da75e:	4681      	mov	r9, r0
   da760:	e001      	b.n	da766 <__gethex+0x2f8>
   da762:	f04f 0901 	mov.w	r9, #1
   da766:	117a      	asrs	r2, r7, #5
   da768:	2301      	movs	r3, #1
   da76a:	f007 071f 	and.w	r7, r7, #31
   da76e:	fa03 f707 	lsl.w	r7, r3, r7
   da772:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   da776:	4621      	mov	r1, r4
   da778:	421f      	tst	r7, r3
   da77a:	4628      	mov	r0, r5
   da77c:	bf18      	it	ne
   da77e:	f049 0902 	orrne.w	r9, r9, #2
   da782:	1b36      	subs	r6, r6, r4
   da784:	f7ff fe28 	bl	da3d8 <rshift>
   da788:	2702      	movs	r7, #2
   da78a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   da78e:	e000      	b.n	da792 <__gethex+0x324>
   da790:	2701      	movs	r7, #1
   da792:	f1b9 0f00 	cmp.w	r9, #0
   da796:	f000 8081 	beq.w	da89c <__gethex+0x42e>
   da79a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da79e:	2b02      	cmp	r3, #2
   da7a0:	d00e      	beq.n	da7c0 <__gethex+0x352>
   da7a2:	2b03      	cmp	r3, #3
   da7a4:	d010      	beq.n	da7c8 <__gethex+0x35a>
   da7a6:	2b01      	cmp	r3, #1
   da7a8:	d176      	bne.n	da898 <__gethex+0x42a>
   da7aa:	f019 0f02 	tst.w	r9, #2
   da7ae:	d073      	beq.n	da898 <__gethex+0x42a>
   da7b0:	f8da 0000 	ldr.w	r0, [sl]
   da7b4:	ea49 0900 	orr.w	r9, r9, r0
   da7b8:	f019 0f01 	tst.w	r9, #1
   da7bc:	d107      	bne.n	da7ce <__gethex+0x360>
   da7be:	e06b      	b.n	da898 <__gethex+0x42a>
   da7c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da7c2:	f1c3 0301 	rsb	r3, r3, #1
   da7c6:	9315      	str	r3, [sp, #84]	; 0x54
   da7c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da7ca:	2b00      	cmp	r3, #0
   da7cc:	d064      	beq.n	da898 <__gethex+0x42a>
   da7ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
   da7d2:	f105 0314 	add.w	r3, r5, #20
   da7d6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   da7da:	eb03 0109 	add.w	r1, r3, r9
   da7de:	2000      	movs	r0, #0
   da7e0:	681a      	ldr	r2, [r3, #0]
   da7e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da7e6:	d002      	beq.n	da7ee <__gethex+0x380>
   da7e8:	3201      	adds	r2, #1
   da7ea:	601a      	str	r2, [r3, #0]
   da7ec:	e020      	b.n	da830 <__gethex+0x3c2>
   da7ee:	f843 0b04 	str.w	r0, [r3], #4
   da7f2:	4299      	cmp	r1, r3
   da7f4:	d8f4      	bhi.n	da7e0 <__gethex+0x372>
   da7f6:	68ab      	ldr	r3, [r5, #8]
   da7f8:	459a      	cmp	sl, r3
   da7fa:	db12      	blt.n	da822 <__gethex+0x3b4>
   da7fc:	6869      	ldr	r1, [r5, #4]
   da7fe:	9802      	ldr	r0, [sp, #8]
   da800:	3101      	adds	r1, #1
   da802:	f000 f9e7 	bl	dabd4 <_Balloc>
   da806:	692a      	ldr	r2, [r5, #16]
   da808:	3202      	adds	r2, #2
   da80a:	f105 010c 	add.w	r1, r5, #12
   da80e:	4683      	mov	fp, r0
   da810:	0092      	lsls	r2, r2, #2
   da812:	300c      	adds	r0, #12
   da814:	f7fe fbc0 	bl	d8f98 <memcpy>
   da818:	4629      	mov	r1, r5
   da81a:	9802      	ldr	r0, [sp, #8]
   da81c:	f000 fa0f 	bl	dac3e <_Bfree>
   da820:	465d      	mov	r5, fp
   da822:	692b      	ldr	r3, [r5, #16]
   da824:	1c5a      	adds	r2, r3, #1
   da826:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   da82a:	612a      	str	r2, [r5, #16]
   da82c:	2201      	movs	r2, #1
   da82e:	615a      	str	r2, [r3, #20]
   da830:	2f02      	cmp	r7, #2
   da832:	f105 0214 	add.w	r2, r5, #20
   da836:	d111      	bne.n	da85c <__gethex+0x3ee>
   da838:	f8d8 3000 	ldr.w	r3, [r8]
   da83c:	3b01      	subs	r3, #1
   da83e:	429e      	cmp	r6, r3
   da840:	d127      	bne.n	da892 <__gethex+0x424>
   da842:	1171      	asrs	r1, r6, #5
   da844:	2301      	movs	r3, #1
   da846:	f006 061f 	and.w	r6, r6, #31
   da84a:	fa03 f606 	lsl.w	r6, r3, r6
   da84e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   da852:	421e      	tst	r6, r3
   da854:	bf0c      	ite	eq
   da856:	2702      	moveq	r7, #2
   da858:	2701      	movne	r7, #1
   da85a:	e01a      	b.n	da892 <__gethex+0x424>
   da85c:	692b      	ldr	r3, [r5, #16]
   da85e:	459a      	cmp	sl, r3
   da860:	da0a      	bge.n	da878 <__gethex+0x40a>
   da862:	2101      	movs	r1, #1
   da864:	4628      	mov	r0, r5
   da866:	f7ff fdb7 	bl	da3d8 <rshift>
   da86a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da86e:	3401      	adds	r4, #1
   da870:	429c      	cmp	r4, r3
   da872:	f73f af2c 	bgt.w	da6ce <__gethex+0x260>
   da876:	e00b      	b.n	da890 <__gethex+0x422>
   da878:	f016 061f 	ands.w	r6, r6, #31
   da87c:	d008      	beq.n	da890 <__gethex+0x422>
   da87e:	4491      	add	r9, r2
   da880:	f1c6 0620 	rsb	r6, r6, #32
   da884:	f859 0c04 	ldr.w	r0, [r9, #-4]
   da888:	f000 fa69 	bl	dad5e <__hi0bits>
   da88c:	42b0      	cmp	r0, r6
   da88e:	dbe8      	blt.n	da862 <__gethex+0x3f4>
   da890:	2701      	movs	r7, #1
   da892:	f047 0720 	orr.w	r7, r7, #32
   da896:	e001      	b.n	da89c <__gethex+0x42e>
   da898:	f047 0710 	orr.w	r7, r7, #16
   da89c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da89e:	601d      	str	r5, [r3, #0]
   da8a0:	9b06      	ldr	r3, [sp, #24]
   da8a2:	4638      	mov	r0, r7
   da8a4:	601c      	str	r4, [r3, #0]
   da8a6:	b00b      	add	sp, #44	; 0x2c
   da8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da8ac <L_shift>:
   da8ac:	f1c2 0208 	rsb	r2, r2, #8
   da8b0:	0092      	lsls	r2, r2, #2
   da8b2:	b570      	push	{r4, r5, r6, lr}
   da8b4:	f1c2 0620 	rsb	r6, r2, #32
   da8b8:	6843      	ldr	r3, [r0, #4]
   da8ba:	6805      	ldr	r5, [r0, #0]
   da8bc:	fa03 f406 	lsl.w	r4, r3, r6
   da8c0:	432c      	orrs	r4, r5
   da8c2:	40d3      	lsrs	r3, r2
   da8c4:	6004      	str	r4, [r0, #0]
   da8c6:	f840 3f04 	str.w	r3, [r0, #4]!
   da8ca:	4288      	cmp	r0, r1
   da8cc:	d3f4      	bcc.n	da8b8 <L_shift+0xc>
   da8ce:	bd70      	pop	{r4, r5, r6, pc}

000da8d0 <__match>:
   da8d0:	b530      	push	{r4, r5, lr}
   da8d2:	6803      	ldr	r3, [r0, #0]
   da8d4:	f811 4b01 	ldrb.w	r4, [r1], #1
   da8d8:	3301      	adds	r3, #1
   da8da:	b14c      	cbz	r4, da8f0 <__match+0x20>
   da8dc:	781a      	ldrb	r2, [r3, #0]
   da8de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da8e2:	2d19      	cmp	r5, #25
   da8e4:	bf98      	it	ls
   da8e6:	3220      	addls	r2, #32
   da8e8:	42a2      	cmp	r2, r4
   da8ea:	d0f3      	beq.n	da8d4 <__match+0x4>
   da8ec:	2000      	movs	r0, #0
   da8ee:	bd30      	pop	{r4, r5, pc}
   da8f0:	6003      	str	r3, [r0, #0]
   da8f2:	2001      	movs	r0, #1
   da8f4:	bd30      	pop	{r4, r5, pc}

000da8f6 <__hexnan>:
   da8f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8fa:	680b      	ldr	r3, [r1, #0]
   da8fc:	f8d0 b000 	ldr.w	fp, [r0]
   da900:	115e      	asrs	r6, r3, #5
   da902:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da906:	f013 031f 	ands.w	r3, r3, #31
   da90a:	b085      	sub	sp, #20
   da90c:	bf18      	it	ne
   da90e:	3604      	addne	r6, #4
   da910:	1f35      	subs	r5, r6, #4
   da912:	4617      	mov	r7, r2
   da914:	2200      	movs	r2, #0
   da916:	4682      	mov	sl, r0
   da918:	9301      	str	r3, [sp, #4]
   da91a:	f846 2c04 	str.w	r2, [r6, #-4]
   da91e:	46a8      	mov	r8, r5
   da920:	462c      	mov	r4, r5
   da922:	9200      	str	r2, [sp, #0]
   da924:	4691      	mov	r9, r2
   da926:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   da92a:	2900      	cmp	r1, #0
   da92c:	d03c      	beq.n	da9a8 <__hexnan+0xb2>
   da92e:	4608      	mov	r0, r1
   da930:	9203      	str	r2, [sp, #12]
   da932:	9102      	str	r1, [sp, #8]
   da934:	f7ff fd86 	bl	da444 <__hexdig_fun>
   da938:	9a03      	ldr	r2, [sp, #12]
   da93a:	bb00      	cbnz	r0, da97e <__hexnan+0x88>
   da93c:	9902      	ldr	r1, [sp, #8]
   da93e:	2920      	cmp	r1, #32
   da940:	d816      	bhi.n	da970 <__hexnan+0x7a>
   da942:	9b00      	ldr	r3, [sp, #0]
   da944:	4599      	cmp	r9, r3
   da946:	ddee      	ble.n	da926 <__hexnan+0x30>
   da948:	4544      	cmp	r4, r8
   da94a:	d205      	bcs.n	da958 <__hexnan+0x62>
   da94c:	2a07      	cmp	r2, #7
   da94e:	dc03      	bgt.n	da958 <__hexnan+0x62>
   da950:	4641      	mov	r1, r8
   da952:	4620      	mov	r0, r4
   da954:	f7ff ffaa 	bl	da8ac <L_shift>
   da958:	42bc      	cmp	r4, r7
   da95a:	d923      	bls.n	da9a4 <__hexnan+0xae>
   da95c:	2300      	movs	r3, #0
   da95e:	f1a4 0804 	sub.w	r8, r4, #4
   da962:	f844 3c04 	str.w	r3, [r4, #-4]
   da966:	f8cd 9000 	str.w	r9, [sp]
   da96a:	4644      	mov	r4, r8
   da96c:	461a      	mov	r2, r3
   da96e:	e7da      	b.n	da926 <__hexnan+0x30>
   da970:	2929      	cmp	r1, #41	; 0x29
   da972:	d148      	bne.n	daa06 <__hexnan+0x110>
   da974:	f10b 0301 	add.w	r3, fp, #1
   da978:	f8ca 3000 	str.w	r3, [sl]
   da97c:	e014      	b.n	da9a8 <__hexnan+0xb2>
   da97e:	3201      	adds	r2, #1
   da980:	2a08      	cmp	r2, #8
   da982:	f109 0901 	add.w	r9, r9, #1
   da986:	dd06      	ble.n	da996 <__hexnan+0xa0>
   da988:	42bc      	cmp	r4, r7
   da98a:	d9cc      	bls.n	da926 <__hexnan+0x30>
   da98c:	2300      	movs	r3, #0
   da98e:	f844 3c04 	str.w	r3, [r4, #-4]
   da992:	2201      	movs	r2, #1
   da994:	3c04      	subs	r4, #4
   da996:	6821      	ldr	r1, [r4, #0]
   da998:	f000 000f 	and.w	r0, r0, #15
   da99c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   da9a0:	6020      	str	r0, [r4, #0]
   da9a2:	e7c0      	b.n	da926 <__hexnan+0x30>
   da9a4:	2208      	movs	r2, #8
   da9a6:	e7be      	b.n	da926 <__hexnan+0x30>
   da9a8:	f1b9 0f00 	cmp.w	r9, #0
   da9ac:	d02b      	beq.n	daa06 <__hexnan+0x110>
   da9ae:	4544      	cmp	r4, r8
   da9b0:	d205      	bcs.n	da9be <__hexnan+0xc8>
   da9b2:	2a07      	cmp	r2, #7
   da9b4:	dc03      	bgt.n	da9be <__hexnan+0xc8>
   da9b6:	4641      	mov	r1, r8
   da9b8:	4620      	mov	r0, r4
   da9ba:	f7ff ff77 	bl	da8ac <L_shift>
   da9be:	42bc      	cmp	r4, r7
   da9c0:	d90c      	bls.n	da9dc <__hexnan+0xe6>
   da9c2:	463b      	mov	r3, r7
   da9c4:	f854 2b04 	ldr.w	r2, [r4], #4
   da9c8:	f843 2b04 	str.w	r2, [r3], #4
   da9cc:	42a5      	cmp	r5, r4
   da9ce:	d2f9      	bcs.n	da9c4 <__hexnan+0xce>
   da9d0:	2200      	movs	r2, #0
   da9d2:	f843 2b04 	str.w	r2, [r3], #4
   da9d6:	429d      	cmp	r5, r3
   da9d8:	d2fb      	bcs.n	da9d2 <__hexnan+0xdc>
   da9da:	e00b      	b.n	da9f4 <__hexnan+0xfe>
   da9dc:	9b01      	ldr	r3, [sp, #4]
   da9de:	b14b      	cbz	r3, da9f4 <__hexnan+0xfe>
   da9e0:	f1c3 0220 	rsb	r2, r3, #32
   da9e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da9e8:	40d3      	lsrs	r3, r2
   da9ea:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da9ee:	4013      	ands	r3, r2
   da9f0:	f846 3c04 	str.w	r3, [r6, #-4]
   da9f4:	682b      	ldr	r3, [r5, #0]
   da9f6:	b943      	cbnz	r3, daa0a <__hexnan+0x114>
   da9f8:	42bd      	cmp	r5, r7
   da9fa:	d102      	bne.n	daa02 <__hexnan+0x10c>
   da9fc:	2301      	movs	r3, #1
   da9fe:	602b      	str	r3, [r5, #0]
   daa00:	e003      	b.n	daa0a <__hexnan+0x114>
   daa02:	3d04      	subs	r5, #4
   daa04:	e7f6      	b.n	da9f4 <__hexnan+0xfe>
   daa06:	2004      	movs	r0, #4
   daa08:	e000      	b.n	daa0c <__hexnan+0x116>
   daa0a:	2005      	movs	r0, #5
   daa0c:	b005      	add	sp, #20
   daa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000daa14 <_findenv_r>:
   daa14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daa18:	4607      	mov	r7, r0
   daa1a:	468b      	mov	fp, r1
   daa1c:	4690      	mov	r8, r2
   daa1e:	f000 fcdd 	bl	db3dc <__env_lock>
   daa22:	4b19      	ldr	r3, [pc, #100]	; (daa88 <_findenv_r+0x74>)
   daa24:	681d      	ldr	r5, [r3, #0]
   daa26:	469a      	mov	sl, r3
   daa28:	b13d      	cbz	r5, daa3a <_findenv_r+0x26>
   daa2a:	465c      	mov	r4, fp
   daa2c:	4623      	mov	r3, r4
   daa2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   daa32:	b142      	cbz	r2, daa46 <_findenv_r+0x32>
   daa34:	2a3d      	cmp	r2, #61	; 0x3d
   daa36:	461c      	mov	r4, r3
   daa38:	d1f8      	bne.n	daa2c <_findenv_r+0x18>
   daa3a:	4638      	mov	r0, r7
   daa3c:	f000 fccf 	bl	db3de <__env_unlock>
   daa40:	2000      	movs	r0, #0
   daa42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daa46:	ebcb 0404 	rsb	r4, fp, r4
   daa4a:	46a9      	mov	r9, r5
   daa4c:	f859 0b04 	ldr.w	r0, [r9], #4
   daa50:	2800      	cmp	r0, #0
   daa52:	d0f2      	beq.n	daa3a <_findenv_r+0x26>
   daa54:	4622      	mov	r2, r4
   daa56:	4659      	mov	r1, fp
   daa58:	f7fe fb0f 	bl	d907a <strncmp>
   daa5c:	b988      	cbnz	r0, daa82 <_findenv_r+0x6e>
   daa5e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   daa62:	191e      	adds	r6, r3, r4
   daa64:	5d1b      	ldrb	r3, [r3, r4]
   daa66:	2b3d      	cmp	r3, #61	; 0x3d
   daa68:	d10b      	bne.n	daa82 <_findenv_r+0x6e>
   daa6a:	f8da 3000 	ldr.w	r3, [sl]
   daa6e:	1aed      	subs	r5, r5, r3
   daa70:	10ad      	asrs	r5, r5, #2
   daa72:	4638      	mov	r0, r7
   daa74:	f8c8 5000 	str.w	r5, [r8]
   daa78:	f000 fcb1 	bl	db3de <__env_unlock>
   daa7c:	1c70      	adds	r0, r6, #1
   daa7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daa82:	464d      	mov	r5, r9
   daa84:	e7e1      	b.n	daa4a <_findenv_r+0x36>
   daa86:	bf00      	nop
   daa88:	2003e1b4 	.word	0x2003e1b4

000daa8c <_getenv_r>:
   daa8c:	b507      	push	{r0, r1, r2, lr}
   daa8e:	aa01      	add	r2, sp, #4
   daa90:	f7ff ffc0 	bl	daa14 <_findenv_r>
   daa94:	b003      	add	sp, #12
   daa96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daa9c <__gettzinfo>:
   daa9c:	4800      	ldr	r0, [pc, #0]	; (daaa0 <__gettzinfo+0x4>)
   daa9e:	4770      	bx	lr
   daaa0:	2003e174 	.word	0x2003e174

000daaa4 <gmtime_r>:
   daaa4:	6802      	ldr	r2, [r0, #0]
   daaa6:	4b47      	ldr	r3, [pc, #284]	; (dabc4 <gmtime_r+0x120>)
   daaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   daaaa:	fb92 f4f3 	sdiv	r4, r2, r3
   daaae:	fb03 2214 	mls	r2, r3, r4, r2
   daab2:	2a00      	cmp	r2, #0
   daab4:	bfbc      	itt	lt
   daab6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   daaba:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   daabe:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   daac2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   daac6:	fb92 f3f0 	sdiv	r3, r2, r0
   daaca:	fb00 2213 	mls	r2, r0, r3, r2
   daace:	f04f 003c 	mov.w	r0, #60	; 0x3c
   daad2:	bfac      	ite	ge
   daad4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   daad8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   daadc:	608b      	str	r3, [r1, #8]
   daade:	fb92 f3f0 	sdiv	r3, r2, r0
   daae2:	fb00 2213 	mls	r2, r0, r3, r2
   daae6:	604b      	str	r3, [r1, #4]
   daae8:	600a      	str	r2, [r1, #0]
   daaea:	2307      	movs	r3, #7
   daaec:	1ce2      	adds	r2, r4, #3
   daaee:	fb92 f3f3 	sdiv	r3, r2, r3
   daaf2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   daaf6:	1ad3      	subs	r3, r2, r3
   daaf8:	618b      	str	r3, [r1, #24]
   daafa:	4b33      	ldr	r3, [pc, #204]	; (dabc8 <gmtime_r+0x124>)
   daafc:	4d33      	ldr	r5, [pc, #204]	; (dabcc <gmtime_r+0x128>)
   daafe:	fb94 f5f5 	sdiv	r5, r4, r5
   dab02:	fb03 4405 	mla	r4, r3, r5, r4
   dab06:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dab0a:	fbb4 f2f2 	udiv	r2, r4, r2
   dab0e:	4422      	add	r2, r4
   dab10:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dab14:	fbb4 f3f7 	udiv	r3, r4, r7
   dab18:	1ad2      	subs	r2, r2, r3
   dab1a:	482d      	ldr	r0, [pc, #180]	; (dabd0 <gmtime_r+0x12c>)
   dab1c:	fbb4 f0f0 	udiv	r0, r4, r0
   dab20:	f648 6694 	movw	r6, #36500	; 0x8e94
   dab24:	1a13      	subs	r3, r2, r0
   dab26:	fbb3 f6f6 	udiv	r6, r3, r6
   dab2a:	4434      	add	r4, r6
   dab2c:	f240 126d 	movw	r2, #365	; 0x16d
   dab30:	fbb3 f0f2 	udiv	r0, r3, r2
   dab34:	fbb3 f3f7 	udiv	r3, r3, r7
   dab38:	1ae3      	subs	r3, r4, r3
   dab3a:	fb02 3310 	mls	r3, r2, r0, r3
   dab3e:	2499      	movs	r4, #153	; 0x99
   dab40:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dab44:	3202      	adds	r2, #2
   dab46:	fbb2 f2f4 	udiv	r2, r2, r4
   dab4a:	2a0a      	cmp	r2, #10
   dab4c:	fb04 f402 	mul.w	r4, r4, r2
   dab50:	f104 0602 	add.w	r6, r4, #2
   dab54:	f04f 0405 	mov.w	r4, #5
   dab58:	fbb6 f4f4 	udiv	r4, r6, r4
   dab5c:	bf34      	ite	cc
   dab5e:	2602      	movcc	r6, #2
   dab60:	f06f 0609 	mvncs.w	r6, #9
   dab64:	4416      	add	r6, r2
   dab66:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dab6a:	fb02 0505 	mla	r5, r2, r5, r0
   dab6e:	1c5f      	adds	r7, r3, #1
   dab70:	2e01      	cmp	r6, #1
   dab72:	bf98      	it	ls
   dab74:	3501      	addls	r5, #1
   dab76:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dab7a:	eba7 0704 	sub.w	r7, r7, r4
   dab7e:	d302      	bcc.n	dab86 <gmtime_r+0xe2>
   dab80:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dab84:	e014      	b.n	dabb0 <gmtime_r+0x10c>
   dab86:	0782      	lsls	r2, r0, #30
   dab88:	d105      	bne.n	dab96 <gmtime_r+0xf2>
   dab8a:	2464      	movs	r4, #100	; 0x64
   dab8c:	fbb0 f2f4 	udiv	r2, r0, r4
   dab90:	fb04 0212 	mls	r2, r4, r2, r0
   dab94:	b94a      	cbnz	r2, dabaa <gmtime_r+0x106>
   dab96:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dab9a:	fbb0 f4f2 	udiv	r4, r0, r2
   dab9e:	fb02 0014 	mls	r0, r2, r4, r0
   daba2:	fab0 f280 	clz	r2, r0
   daba6:	0952      	lsrs	r2, r2, #5
   daba8:	e000      	b.n	dabac <gmtime_r+0x108>
   dabaa:	2201      	movs	r2, #1
   dabac:	333b      	adds	r3, #59	; 0x3b
   dabae:	441a      	add	r2, r3
   dabb0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dabb4:	2300      	movs	r3, #0
   dabb6:	61ca      	str	r2, [r1, #28]
   dabb8:	614d      	str	r5, [r1, #20]
   dabba:	610e      	str	r6, [r1, #16]
   dabbc:	60cf      	str	r7, [r1, #12]
   dabbe:	620b      	str	r3, [r1, #32]
   dabc0:	4608      	mov	r0, r1
   dabc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dabc4:	00015180 	.word	0x00015180
   dabc8:	fffdc54f 	.word	0xfffdc54f
   dabcc:	00023ab1 	.word	0x00023ab1
   dabd0:	00023ab0 	.word	0x00023ab0

000dabd4 <_Balloc>:
   dabd4:	b570      	push	{r4, r5, r6, lr}
   dabd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dabd8:	4604      	mov	r4, r0
   dabda:	460e      	mov	r6, r1
   dabdc:	b93d      	cbnz	r5, dabee <_Balloc+0x1a>
   dabde:	2010      	movs	r0, #16
   dabe0:	f7fb fce6 	bl	d65b0 <malloc>
   dabe4:	6260      	str	r0, [r4, #36]	; 0x24
   dabe6:	6045      	str	r5, [r0, #4]
   dabe8:	6085      	str	r5, [r0, #8]
   dabea:	6005      	str	r5, [r0, #0]
   dabec:	60c5      	str	r5, [r0, #12]
   dabee:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dabf0:	68eb      	ldr	r3, [r5, #12]
   dabf2:	b143      	cbz	r3, dac06 <_Balloc+0x32>
   dabf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dabf6:	68db      	ldr	r3, [r3, #12]
   dabf8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dabfc:	b178      	cbz	r0, dac1e <_Balloc+0x4a>
   dabfe:	6802      	ldr	r2, [r0, #0]
   dac00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dac04:	e017      	b.n	dac36 <_Balloc+0x62>
   dac06:	2221      	movs	r2, #33	; 0x21
   dac08:	2104      	movs	r1, #4
   dac0a:	4620      	mov	r0, r4
   dac0c:	f000 fbd1 	bl	db3b2 <_calloc_r>
   dac10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dac12:	60e8      	str	r0, [r5, #12]
   dac14:	68db      	ldr	r3, [r3, #12]
   dac16:	2b00      	cmp	r3, #0
   dac18:	d1ec      	bne.n	dabf4 <_Balloc+0x20>
   dac1a:	2000      	movs	r0, #0
   dac1c:	bd70      	pop	{r4, r5, r6, pc}
   dac1e:	2101      	movs	r1, #1
   dac20:	fa01 f506 	lsl.w	r5, r1, r6
   dac24:	1d6a      	adds	r2, r5, #5
   dac26:	0092      	lsls	r2, r2, #2
   dac28:	4620      	mov	r0, r4
   dac2a:	f000 fbc2 	bl	db3b2 <_calloc_r>
   dac2e:	2800      	cmp	r0, #0
   dac30:	d0f3      	beq.n	dac1a <_Balloc+0x46>
   dac32:	6046      	str	r6, [r0, #4]
   dac34:	6085      	str	r5, [r0, #8]
   dac36:	2300      	movs	r3, #0
   dac38:	6103      	str	r3, [r0, #16]
   dac3a:	60c3      	str	r3, [r0, #12]
   dac3c:	bd70      	pop	{r4, r5, r6, pc}

000dac3e <_Bfree>:
   dac3e:	b570      	push	{r4, r5, r6, lr}
   dac40:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dac42:	4606      	mov	r6, r0
   dac44:	460d      	mov	r5, r1
   dac46:	b93c      	cbnz	r4, dac58 <_Bfree+0x1a>
   dac48:	2010      	movs	r0, #16
   dac4a:	f7fb fcb1 	bl	d65b0 <malloc>
   dac4e:	6270      	str	r0, [r6, #36]	; 0x24
   dac50:	6044      	str	r4, [r0, #4]
   dac52:	6084      	str	r4, [r0, #8]
   dac54:	6004      	str	r4, [r0, #0]
   dac56:	60c4      	str	r4, [r0, #12]
   dac58:	b13d      	cbz	r5, dac6a <_Bfree+0x2c>
   dac5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dac5c:	686a      	ldr	r2, [r5, #4]
   dac5e:	68db      	ldr	r3, [r3, #12]
   dac60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dac64:	6029      	str	r1, [r5, #0]
   dac66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dac6a:	bd70      	pop	{r4, r5, r6, pc}

000dac6c <__multadd>:
   dac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dac70:	690d      	ldr	r5, [r1, #16]
   dac72:	461f      	mov	r7, r3
   dac74:	4606      	mov	r6, r0
   dac76:	460c      	mov	r4, r1
   dac78:	f101 0e14 	add.w	lr, r1, #20
   dac7c:	2300      	movs	r3, #0
   dac7e:	f8de 0000 	ldr.w	r0, [lr]
   dac82:	b281      	uxth	r1, r0
   dac84:	fb02 7101 	mla	r1, r2, r1, r7
   dac88:	0c0f      	lsrs	r7, r1, #16
   dac8a:	0c00      	lsrs	r0, r0, #16
   dac8c:	fb02 7000 	mla	r0, r2, r0, r7
   dac90:	b289      	uxth	r1, r1
   dac92:	3301      	adds	r3, #1
   dac94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dac98:	429d      	cmp	r5, r3
   dac9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dac9e:	f84e 1b04 	str.w	r1, [lr], #4
   daca2:	dcec      	bgt.n	dac7e <__multadd+0x12>
   daca4:	b1d7      	cbz	r7, dacdc <__multadd+0x70>
   daca6:	68a3      	ldr	r3, [r4, #8]
   daca8:	429d      	cmp	r5, r3
   dacaa:	db12      	blt.n	dacd2 <__multadd+0x66>
   dacac:	6861      	ldr	r1, [r4, #4]
   dacae:	4630      	mov	r0, r6
   dacb0:	3101      	adds	r1, #1
   dacb2:	f7ff ff8f 	bl	dabd4 <_Balloc>
   dacb6:	6922      	ldr	r2, [r4, #16]
   dacb8:	3202      	adds	r2, #2
   dacba:	f104 010c 	add.w	r1, r4, #12
   dacbe:	4680      	mov	r8, r0
   dacc0:	0092      	lsls	r2, r2, #2
   dacc2:	300c      	adds	r0, #12
   dacc4:	f7fe f968 	bl	d8f98 <memcpy>
   dacc8:	4621      	mov	r1, r4
   dacca:	4630      	mov	r0, r6
   daccc:	f7ff ffb7 	bl	dac3e <_Bfree>
   dacd0:	4644      	mov	r4, r8
   dacd2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dacd6:	3501      	adds	r5, #1
   dacd8:	615f      	str	r7, [r3, #20]
   dacda:	6125      	str	r5, [r4, #16]
   dacdc:	4620      	mov	r0, r4
   dacde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dace2 <__s2b>:
   dace2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dace6:	460c      	mov	r4, r1
   dace8:	4615      	mov	r5, r2
   dacea:	461f      	mov	r7, r3
   dacec:	2209      	movs	r2, #9
   dacee:	3308      	adds	r3, #8
   dacf0:	4606      	mov	r6, r0
   dacf2:	fb93 f3f2 	sdiv	r3, r3, r2
   dacf6:	2100      	movs	r1, #0
   dacf8:	2201      	movs	r2, #1
   dacfa:	429a      	cmp	r2, r3
   dacfc:	da02      	bge.n	dad04 <__s2b+0x22>
   dacfe:	0052      	lsls	r2, r2, #1
   dad00:	3101      	adds	r1, #1
   dad02:	e7fa      	b.n	dacfa <__s2b+0x18>
   dad04:	4630      	mov	r0, r6
   dad06:	f7ff ff65 	bl	dabd4 <_Balloc>
   dad0a:	9b08      	ldr	r3, [sp, #32]
   dad0c:	6143      	str	r3, [r0, #20]
   dad0e:	2d09      	cmp	r5, #9
   dad10:	f04f 0301 	mov.w	r3, #1
   dad14:	6103      	str	r3, [r0, #16]
   dad16:	dd11      	ble.n	dad3c <__s2b+0x5a>
   dad18:	f104 0809 	add.w	r8, r4, #9
   dad1c:	46c1      	mov	r9, r8
   dad1e:	442c      	add	r4, r5
   dad20:	f819 3b01 	ldrb.w	r3, [r9], #1
   dad24:	4601      	mov	r1, r0
   dad26:	3b30      	subs	r3, #48	; 0x30
   dad28:	220a      	movs	r2, #10
   dad2a:	4630      	mov	r0, r6
   dad2c:	f7ff ff9e 	bl	dac6c <__multadd>
   dad30:	45a1      	cmp	r9, r4
   dad32:	d1f5      	bne.n	dad20 <__s2b+0x3e>
   dad34:	eb08 0405 	add.w	r4, r8, r5
   dad38:	3c08      	subs	r4, #8
   dad3a:	e001      	b.n	dad40 <__s2b+0x5e>
   dad3c:	340a      	adds	r4, #10
   dad3e:	2509      	movs	r5, #9
   dad40:	1b2d      	subs	r5, r5, r4
   dad42:	1963      	adds	r3, r4, r5
   dad44:	429f      	cmp	r7, r3
   dad46:	dd08      	ble.n	dad5a <__s2b+0x78>
   dad48:	f814 3b01 	ldrb.w	r3, [r4], #1
   dad4c:	4601      	mov	r1, r0
   dad4e:	3b30      	subs	r3, #48	; 0x30
   dad50:	220a      	movs	r2, #10
   dad52:	4630      	mov	r0, r6
   dad54:	f7ff ff8a 	bl	dac6c <__multadd>
   dad58:	e7f3      	b.n	dad42 <__s2b+0x60>
   dad5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dad5e <__hi0bits>:
   dad5e:	0c03      	lsrs	r3, r0, #16
   dad60:	041b      	lsls	r3, r3, #16
   dad62:	b913      	cbnz	r3, dad6a <__hi0bits+0xc>
   dad64:	0400      	lsls	r0, r0, #16
   dad66:	2310      	movs	r3, #16
   dad68:	e000      	b.n	dad6c <__hi0bits+0xe>
   dad6a:	2300      	movs	r3, #0
   dad6c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dad70:	bf04      	itt	eq
   dad72:	0200      	lsleq	r0, r0, #8
   dad74:	3308      	addeq	r3, #8
   dad76:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dad7a:	bf04      	itt	eq
   dad7c:	0100      	lsleq	r0, r0, #4
   dad7e:	3304      	addeq	r3, #4
   dad80:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dad84:	bf04      	itt	eq
   dad86:	0080      	lsleq	r0, r0, #2
   dad88:	3302      	addeq	r3, #2
   dad8a:	2800      	cmp	r0, #0
   dad8c:	db03      	blt.n	dad96 <__hi0bits+0x38>
   dad8e:	0042      	lsls	r2, r0, #1
   dad90:	d503      	bpl.n	dad9a <__hi0bits+0x3c>
   dad92:	1c58      	adds	r0, r3, #1
   dad94:	4770      	bx	lr
   dad96:	4618      	mov	r0, r3
   dad98:	4770      	bx	lr
   dad9a:	2020      	movs	r0, #32
   dad9c:	4770      	bx	lr

000dad9e <__lo0bits>:
   dad9e:	6803      	ldr	r3, [r0, #0]
   dada0:	f013 0207 	ands.w	r2, r3, #7
   dada4:	d00b      	beq.n	dadbe <__lo0bits+0x20>
   dada6:	07d9      	lsls	r1, r3, #31
   dada8:	d422      	bmi.n	dadf0 <__lo0bits+0x52>
   dadaa:	079a      	lsls	r2, r3, #30
   dadac:	bf4b      	itete	mi
   dadae:	085b      	lsrmi	r3, r3, #1
   dadb0:	089b      	lsrpl	r3, r3, #2
   dadb2:	6003      	strmi	r3, [r0, #0]
   dadb4:	6003      	strpl	r3, [r0, #0]
   dadb6:	bf4c      	ite	mi
   dadb8:	2001      	movmi	r0, #1
   dadba:	2002      	movpl	r0, #2
   dadbc:	4770      	bx	lr
   dadbe:	b299      	uxth	r1, r3
   dadc0:	b909      	cbnz	r1, dadc6 <__lo0bits+0x28>
   dadc2:	0c1b      	lsrs	r3, r3, #16
   dadc4:	2210      	movs	r2, #16
   dadc6:	f013 0fff 	tst.w	r3, #255	; 0xff
   dadca:	bf04      	itt	eq
   dadcc:	0a1b      	lsreq	r3, r3, #8
   dadce:	3208      	addeq	r2, #8
   dadd0:	0719      	lsls	r1, r3, #28
   dadd2:	bf04      	itt	eq
   dadd4:	091b      	lsreq	r3, r3, #4
   dadd6:	3204      	addeq	r2, #4
   dadd8:	0799      	lsls	r1, r3, #30
   dadda:	bf04      	itt	eq
   daddc:	089b      	lsreq	r3, r3, #2
   dadde:	3202      	addeq	r2, #2
   dade0:	07d9      	lsls	r1, r3, #31
   dade2:	d402      	bmi.n	dadea <__lo0bits+0x4c>
   dade4:	085b      	lsrs	r3, r3, #1
   dade6:	d005      	beq.n	dadf4 <__lo0bits+0x56>
   dade8:	3201      	adds	r2, #1
   dadea:	6003      	str	r3, [r0, #0]
   dadec:	4610      	mov	r0, r2
   dadee:	4770      	bx	lr
   dadf0:	2000      	movs	r0, #0
   dadf2:	4770      	bx	lr
   dadf4:	2020      	movs	r0, #32
   dadf6:	4770      	bx	lr

000dadf8 <__i2b>:
   dadf8:	b510      	push	{r4, lr}
   dadfa:	460c      	mov	r4, r1
   dadfc:	2101      	movs	r1, #1
   dadfe:	f7ff fee9 	bl	dabd4 <_Balloc>
   dae02:	2201      	movs	r2, #1
   dae04:	6144      	str	r4, [r0, #20]
   dae06:	6102      	str	r2, [r0, #16]
   dae08:	bd10      	pop	{r4, pc}

000dae0a <__multiply>:
   dae0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae0e:	4614      	mov	r4, r2
   dae10:	690a      	ldr	r2, [r1, #16]
   dae12:	6923      	ldr	r3, [r4, #16]
   dae14:	429a      	cmp	r2, r3
   dae16:	bfb8      	it	lt
   dae18:	460b      	movlt	r3, r1
   dae1a:	4688      	mov	r8, r1
   dae1c:	bfbc      	itt	lt
   dae1e:	46a0      	movlt	r8, r4
   dae20:	461c      	movlt	r4, r3
   dae22:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dae26:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dae2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dae2e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dae32:	eb07 0609 	add.w	r6, r7, r9
   dae36:	429e      	cmp	r6, r3
   dae38:	bfc8      	it	gt
   dae3a:	3101      	addgt	r1, #1
   dae3c:	f7ff feca 	bl	dabd4 <_Balloc>
   dae40:	f100 0514 	add.w	r5, r0, #20
   dae44:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dae48:	462b      	mov	r3, r5
   dae4a:	2200      	movs	r2, #0
   dae4c:	4563      	cmp	r3, ip
   dae4e:	d202      	bcs.n	dae56 <__multiply+0x4c>
   dae50:	f843 2b04 	str.w	r2, [r3], #4
   dae54:	e7fa      	b.n	dae4c <__multiply+0x42>
   dae56:	f104 0214 	add.w	r2, r4, #20
   dae5a:	f108 0114 	add.w	r1, r8, #20
   dae5e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dae62:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dae66:	9300      	str	r3, [sp, #0]
   dae68:	9b00      	ldr	r3, [sp, #0]
   dae6a:	9201      	str	r2, [sp, #4]
   dae6c:	4293      	cmp	r3, r2
   dae6e:	d957      	bls.n	daf20 <__multiply+0x116>
   dae70:	f8b2 b000 	ldrh.w	fp, [r2]
   dae74:	f1bb 0f00 	cmp.w	fp, #0
   dae78:	d023      	beq.n	daec2 <__multiply+0xb8>
   dae7a:	4689      	mov	r9, r1
   dae7c:	46ae      	mov	lr, r5
   dae7e:	f04f 0800 	mov.w	r8, #0
   dae82:	f859 4b04 	ldr.w	r4, [r9], #4
   dae86:	f8be a000 	ldrh.w	sl, [lr]
   dae8a:	b2a3      	uxth	r3, r4
   dae8c:	fb0b a303 	mla	r3, fp, r3, sl
   dae90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dae94:	f8de 4000 	ldr.w	r4, [lr]
   dae98:	4443      	add	r3, r8
   dae9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dae9e:	fb0b 840a 	mla	r4, fp, sl, r8
   daea2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   daea6:	46f2      	mov	sl, lr
   daea8:	b29b      	uxth	r3, r3
   daeaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   daeae:	454f      	cmp	r7, r9
   daeb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   daeb4:	f84a 3b04 	str.w	r3, [sl], #4
   daeb8:	d901      	bls.n	daebe <__multiply+0xb4>
   daeba:	46d6      	mov	lr, sl
   daebc:	e7e1      	b.n	dae82 <__multiply+0x78>
   daebe:	f8ce 8004 	str.w	r8, [lr, #4]
   daec2:	9b01      	ldr	r3, [sp, #4]
   daec4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   daec8:	3204      	adds	r2, #4
   daeca:	f1ba 0f00 	cmp.w	sl, #0
   daece:	d021      	beq.n	daf14 <__multiply+0x10a>
   daed0:	682b      	ldr	r3, [r5, #0]
   daed2:	462c      	mov	r4, r5
   daed4:	4689      	mov	r9, r1
   daed6:	f04f 0800 	mov.w	r8, #0
   daeda:	f8b9 e000 	ldrh.w	lr, [r9]
   daede:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   daee2:	fb0a be0e 	mla	lr, sl, lr, fp
   daee6:	44f0      	add	r8, lr
   daee8:	46a3      	mov	fp, r4
   daeea:	b29b      	uxth	r3, r3
   daeec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   daef0:	f84b 3b04 	str.w	r3, [fp], #4
   daef4:	f859 3b04 	ldr.w	r3, [r9], #4
   daef8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   daefc:	0c1b      	lsrs	r3, r3, #16
   daefe:	fb0a e303 	mla	r3, sl, r3, lr
   daf02:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   daf06:	454f      	cmp	r7, r9
   daf08:	ea4f 4813 	mov.w	r8, r3, lsr #16
   daf0c:	d901      	bls.n	daf12 <__multiply+0x108>
   daf0e:	465c      	mov	r4, fp
   daf10:	e7e3      	b.n	daeda <__multiply+0xd0>
   daf12:	6063      	str	r3, [r4, #4]
   daf14:	3504      	adds	r5, #4
   daf16:	e7a7      	b.n	dae68 <__multiply+0x5e>
   daf18:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   daf1c:	b913      	cbnz	r3, daf24 <__multiply+0x11a>
   daf1e:	3e01      	subs	r6, #1
   daf20:	2e00      	cmp	r6, #0
   daf22:	dcf9      	bgt.n	daf18 <__multiply+0x10e>
   daf24:	6106      	str	r6, [r0, #16]
   daf26:	b003      	add	sp, #12
   daf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daf2c <__pow5mult>:
   daf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daf30:	4615      	mov	r5, r2
   daf32:	f012 0203 	ands.w	r2, r2, #3
   daf36:	4606      	mov	r6, r0
   daf38:	460f      	mov	r7, r1
   daf3a:	d007      	beq.n	daf4c <__pow5mult+0x20>
   daf3c:	3a01      	subs	r2, #1
   daf3e:	4c21      	ldr	r4, [pc, #132]	; (dafc4 <__pow5mult+0x98>)
   daf40:	2300      	movs	r3, #0
   daf42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   daf46:	f7ff fe91 	bl	dac6c <__multadd>
   daf4a:	4607      	mov	r7, r0
   daf4c:	10ad      	asrs	r5, r5, #2
   daf4e:	d036      	beq.n	dafbe <__pow5mult+0x92>
   daf50:	6a74      	ldr	r4, [r6, #36]	; 0x24
   daf52:	b93c      	cbnz	r4, daf64 <__pow5mult+0x38>
   daf54:	2010      	movs	r0, #16
   daf56:	f7fb fb2b 	bl	d65b0 <malloc>
   daf5a:	6270      	str	r0, [r6, #36]	; 0x24
   daf5c:	6044      	str	r4, [r0, #4]
   daf5e:	6084      	str	r4, [r0, #8]
   daf60:	6004      	str	r4, [r0, #0]
   daf62:	60c4      	str	r4, [r0, #12]
   daf64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   daf68:	f8d8 4008 	ldr.w	r4, [r8, #8]
   daf6c:	b94c      	cbnz	r4, daf82 <__pow5mult+0x56>
   daf6e:	f240 2171 	movw	r1, #625	; 0x271
   daf72:	4630      	mov	r0, r6
   daf74:	f7ff ff40 	bl	dadf8 <__i2b>
   daf78:	2300      	movs	r3, #0
   daf7a:	f8c8 0008 	str.w	r0, [r8, #8]
   daf7e:	4604      	mov	r4, r0
   daf80:	6003      	str	r3, [r0, #0]
   daf82:	f04f 0800 	mov.w	r8, #0
   daf86:	07eb      	lsls	r3, r5, #31
   daf88:	d50a      	bpl.n	dafa0 <__pow5mult+0x74>
   daf8a:	4639      	mov	r1, r7
   daf8c:	4622      	mov	r2, r4
   daf8e:	4630      	mov	r0, r6
   daf90:	f7ff ff3b 	bl	dae0a <__multiply>
   daf94:	4639      	mov	r1, r7
   daf96:	4681      	mov	r9, r0
   daf98:	4630      	mov	r0, r6
   daf9a:	f7ff fe50 	bl	dac3e <_Bfree>
   daf9e:	464f      	mov	r7, r9
   dafa0:	106d      	asrs	r5, r5, #1
   dafa2:	d00c      	beq.n	dafbe <__pow5mult+0x92>
   dafa4:	6820      	ldr	r0, [r4, #0]
   dafa6:	b108      	cbz	r0, dafac <__pow5mult+0x80>
   dafa8:	4604      	mov	r4, r0
   dafaa:	e7ec      	b.n	daf86 <__pow5mult+0x5a>
   dafac:	4622      	mov	r2, r4
   dafae:	4621      	mov	r1, r4
   dafb0:	4630      	mov	r0, r6
   dafb2:	f7ff ff2a 	bl	dae0a <__multiply>
   dafb6:	6020      	str	r0, [r4, #0]
   dafb8:	f8c0 8000 	str.w	r8, [r0]
   dafbc:	e7f4      	b.n	dafa8 <__pow5mult+0x7c>
   dafbe:	4638      	mov	r0, r7
   dafc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dafc4:	000dc0e0 	.word	0x000dc0e0

000dafc8 <__lshift>:
   dafc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dafcc:	460c      	mov	r4, r1
   dafce:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dafd2:	6926      	ldr	r6, [r4, #16]
   dafd4:	6849      	ldr	r1, [r1, #4]
   dafd6:	68a3      	ldr	r3, [r4, #8]
   dafd8:	4456      	add	r6, sl
   dafda:	4607      	mov	r7, r0
   dafdc:	4691      	mov	r9, r2
   dafde:	1c75      	adds	r5, r6, #1
   dafe0:	42ab      	cmp	r3, r5
   dafe2:	da02      	bge.n	dafea <__lshift+0x22>
   dafe4:	3101      	adds	r1, #1
   dafe6:	005b      	lsls	r3, r3, #1
   dafe8:	e7fa      	b.n	dafe0 <__lshift+0x18>
   dafea:	4638      	mov	r0, r7
   dafec:	f7ff fdf2 	bl	dabd4 <_Balloc>
   daff0:	2300      	movs	r3, #0
   daff2:	4680      	mov	r8, r0
   daff4:	f100 0114 	add.w	r1, r0, #20
   daff8:	461a      	mov	r2, r3
   daffa:	4553      	cmp	r3, sl
   daffc:	da03      	bge.n	db006 <__lshift+0x3e>
   daffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db002:	3301      	adds	r3, #1
   db004:	e7f9      	b.n	daffa <__lshift+0x32>
   db006:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db00a:	6920      	ldr	r0, [r4, #16]
   db00c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db010:	f019 091f 	ands.w	r9, r9, #31
   db014:	f104 0114 	add.w	r1, r4, #20
   db018:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db01c:	d014      	beq.n	db048 <__lshift+0x80>
   db01e:	f1c9 0c20 	rsb	ip, r9, #32
   db022:	2200      	movs	r2, #0
   db024:	6808      	ldr	r0, [r1, #0]
   db026:	fa00 f009 	lsl.w	r0, r0, r9
   db02a:	4302      	orrs	r2, r0
   db02c:	469a      	mov	sl, r3
   db02e:	f843 2b04 	str.w	r2, [r3], #4
   db032:	f851 2b04 	ldr.w	r2, [r1], #4
   db036:	458e      	cmp	lr, r1
   db038:	fa22 f20c 	lsr.w	r2, r2, ip
   db03c:	d8f2      	bhi.n	db024 <__lshift+0x5c>
   db03e:	f8ca 2004 	str.w	r2, [sl, #4]
   db042:	b142      	cbz	r2, db056 <__lshift+0x8e>
   db044:	1cb5      	adds	r5, r6, #2
   db046:	e006      	b.n	db056 <__lshift+0x8e>
   db048:	3b04      	subs	r3, #4
   db04a:	f851 2b04 	ldr.w	r2, [r1], #4
   db04e:	f843 2f04 	str.w	r2, [r3, #4]!
   db052:	458e      	cmp	lr, r1
   db054:	d8f9      	bhi.n	db04a <__lshift+0x82>
   db056:	3d01      	subs	r5, #1
   db058:	4638      	mov	r0, r7
   db05a:	f8c8 5010 	str.w	r5, [r8, #16]
   db05e:	4621      	mov	r1, r4
   db060:	f7ff fded 	bl	dac3e <_Bfree>
   db064:	4640      	mov	r0, r8
   db066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db06a <__mcmp>:
   db06a:	6903      	ldr	r3, [r0, #16]
   db06c:	690a      	ldr	r2, [r1, #16]
   db06e:	1a9b      	subs	r3, r3, r2
   db070:	b510      	push	{r4, lr}
   db072:	d111      	bne.n	db098 <__mcmp+0x2e>
   db074:	0092      	lsls	r2, r2, #2
   db076:	3014      	adds	r0, #20
   db078:	3114      	adds	r1, #20
   db07a:	1883      	adds	r3, r0, r2
   db07c:	440a      	add	r2, r1
   db07e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db082:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db086:	428c      	cmp	r4, r1
   db088:	d002      	beq.n	db090 <__mcmp+0x26>
   db08a:	d307      	bcc.n	db09c <__mcmp+0x32>
   db08c:	2001      	movs	r0, #1
   db08e:	bd10      	pop	{r4, pc}
   db090:	4298      	cmp	r0, r3
   db092:	d3f4      	bcc.n	db07e <__mcmp+0x14>
   db094:	2000      	movs	r0, #0
   db096:	bd10      	pop	{r4, pc}
   db098:	4618      	mov	r0, r3
   db09a:	bd10      	pop	{r4, pc}
   db09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db0a0:	bd10      	pop	{r4, pc}

000db0a2 <__mdiff>:
   db0a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db0a6:	460c      	mov	r4, r1
   db0a8:	4607      	mov	r7, r0
   db0aa:	4611      	mov	r1, r2
   db0ac:	4620      	mov	r0, r4
   db0ae:	4615      	mov	r5, r2
   db0b0:	f7ff ffdb 	bl	db06a <__mcmp>
   db0b4:	1e06      	subs	r6, r0, #0
   db0b6:	d108      	bne.n	db0ca <__mdiff+0x28>
   db0b8:	4631      	mov	r1, r6
   db0ba:	4638      	mov	r0, r7
   db0bc:	f7ff fd8a 	bl	dabd4 <_Balloc>
   db0c0:	2301      	movs	r3, #1
   db0c2:	6103      	str	r3, [r0, #16]
   db0c4:	6146      	str	r6, [r0, #20]
   db0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db0ca:	bfbc      	itt	lt
   db0cc:	4623      	movlt	r3, r4
   db0ce:	462c      	movlt	r4, r5
   db0d0:	4638      	mov	r0, r7
   db0d2:	6861      	ldr	r1, [r4, #4]
   db0d4:	bfba      	itte	lt
   db0d6:	461d      	movlt	r5, r3
   db0d8:	2601      	movlt	r6, #1
   db0da:	2600      	movge	r6, #0
   db0dc:	f7ff fd7a 	bl	dabd4 <_Balloc>
   db0e0:	692b      	ldr	r3, [r5, #16]
   db0e2:	60c6      	str	r6, [r0, #12]
   db0e4:	6926      	ldr	r6, [r4, #16]
   db0e6:	f105 0914 	add.w	r9, r5, #20
   db0ea:	3414      	adds	r4, #20
   db0ec:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db0f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db0f4:	f100 0514 	add.w	r5, r0, #20
   db0f8:	f04f 0c00 	mov.w	ip, #0
   db0fc:	f854 3b04 	ldr.w	r3, [r4], #4
   db100:	f859 2b04 	ldr.w	r2, [r9], #4
   db104:	fa1c f183 	uxtah	r1, ip, r3
   db108:	fa1f fe82 	uxth.w	lr, r2
   db10c:	0c12      	lsrs	r2, r2, #16
   db10e:	ebce 0101 	rsb	r1, lr, r1
   db112:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db116:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db11a:	b289      	uxth	r1, r1
   db11c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db120:	45c8      	cmp	r8, r9
   db122:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db126:	46a6      	mov	lr, r4
   db128:	f845 3b04 	str.w	r3, [r5], #4
   db12c:	d8e6      	bhi.n	db0fc <__mdiff+0x5a>
   db12e:	45be      	cmp	lr, r7
   db130:	d20e      	bcs.n	db150 <__mdiff+0xae>
   db132:	f85e 1b04 	ldr.w	r1, [lr], #4
   db136:	fa1c f281 	uxtah	r2, ip, r1
   db13a:	1413      	asrs	r3, r2, #16
   db13c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db140:	b292      	uxth	r2, r2
   db142:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db146:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db14a:	f845 2b04 	str.w	r2, [r5], #4
   db14e:	e7ee      	b.n	db12e <__mdiff+0x8c>
   db150:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db154:	b90b      	cbnz	r3, db15a <__mdiff+0xb8>
   db156:	3e01      	subs	r6, #1
   db158:	e7fa      	b.n	db150 <__mdiff+0xae>
   db15a:	6106      	str	r6, [r0, #16]
   db15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db160 <__ulp>:
   db160:	4b12      	ldr	r3, [pc, #72]	; (db1ac <__ulp+0x4c>)
   db162:	ee10 2a90 	vmov	r2, s1
   db166:	401a      	ands	r2, r3
   db168:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db16c:	2b00      	cmp	r3, #0
   db16e:	dd02      	ble.n	db176 <__ulp+0x16>
   db170:	2000      	movs	r0, #0
   db172:	4619      	mov	r1, r3
   db174:	e017      	b.n	db1a6 <__ulp+0x46>
   db176:	425b      	negs	r3, r3
   db178:	151b      	asrs	r3, r3, #20
   db17a:	2b13      	cmp	r3, #19
   db17c:	f04f 0000 	mov.w	r0, #0
   db180:	f04f 0100 	mov.w	r1, #0
   db184:	dc04      	bgt.n	db190 <__ulp+0x30>
   db186:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db18a:	fa42 f103 	asr.w	r1, r2, r3
   db18e:	e00a      	b.n	db1a6 <__ulp+0x46>
   db190:	3b14      	subs	r3, #20
   db192:	2b1e      	cmp	r3, #30
   db194:	f04f 0201 	mov.w	r2, #1
   db198:	bfda      	itte	le
   db19a:	f1c3 031f 	rsble	r3, r3, #31
   db19e:	fa02 f303 	lslle.w	r3, r2, r3
   db1a2:	4613      	movgt	r3, r2
   db1a4:	4618      	mov	r0, r3
   db1a6:	ec41 0b10 	vmov	d0, r0, r1
   db1aa:	4770      	bx	lr
   db1ac:	7ff00000 	.word	0x7ff00000

000db1b0 <__b2d>:
   db1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db1b2:	6905      	ldr	r5, [r0, #16]
   db1b4:	f100 0614 	add.w	r6, r0, #20
   db1b8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db1bc:	1f2f      	subs	r7, r5, #4
   db1be:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db1c2:	4620      	mov	r0, r4
   db1c4:	f7ff fdcb 	bl	dad5e <__hi0bits>
   db1c8:	f1c0 0320 	rsb	r3, r0, #32
   db1cc:	280a      	cmp	r0, #10
   db1ce:	600b      	str	r3, [r1, #0]
   db1d0:	dc14      	bgt.n	db1fc <__b2d+0x4c>
   db1d2:	f1c0 0e0b 	rsb	lr, r0, #11
   db1d6:	fa24 f10e 	lsr.w	r1, r4, lr
   db1da:	42be      	cmp	r6, r7
   db1dc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db1e0:	bf34      	ite	cc
   db1e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db1e6:	2100      	movcs	r1, #0
   db1e8:	3015      	adds	r0, #21
   db1ea:	fa04 f000 	lsl.w	r0, r4, r0
   db1ee:	fa21 f10e 	lsr.w	r1, r1, lr
   db1f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db1f6:	ea40 0201 	orr.w	r2, r0, r1
   db1fa:	e023      	b.n	db244 <__b2d+0x94>
   db1fc:	42be      	cmp	r6, r7
   db1fe:	bf3a      	itte	cc
   db200:	f1a5 0708 	subcc.w	r7, r5, #8
   db204:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db208:	2100      	movcs	r1, #0
   db20a:	380b      	subs	r0, #11
   db20c:	d015      	beq.n	db23a <__b2d+0x8a>
   db20e:	4084      	lsls	r4, r0
   db210:	f1c0 0520 	rsb	r5, r0, #32
   db214:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db218:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db21c:	42b7      	cmp	r7, r6
   db21e:	fa21 fe05 	lsr.w	lr, r1, r5
   db222:	ea44 030e 	orr.w	r3, r4, lr
   db226:	bf8c      	ite	hi
   db228:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db22c:	2400      	movls	r4, #0
   db22e:	fa01 f000 	lsl.w	r0, r1, r0
   db232:	40ec      	lsrs	r4, r5
   db234:	ea40 0204 	orr.w	r2, r0, r4
   db238:	e004      	b.n	db244 <__b2d+0x94>
   db23a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   db23e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db242:	460a      	mov	r2, r1
   db244:	ec43 2b10 	vmov	d0, r2, r3
   db248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db24a <__d2b>:
   db24a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db24e:	460e      	mov	r6, r1
   db250:	2101      	movs	r1, #1
   db252:	ec59 8b10 	vmov	r8, r9, d0
   db256:	4615      	mov	r5, r2
   db258:	f7ff fcbc 	bl	dabd4 <_Balloc>
   db25c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   db260:	4607      	mov	r7, r0
   db262:	f3c9 0313 	ubfx	r3, r9, #0, #20
   db266:	b10c      	cbz	r4, db26c <__d2b+0x22>
   db268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db26c:	9301      	str	r3, [sp, #4]
   db26e:	f1b8 0f00 	cmp.w	r8, #0
   db272:	d019      	beq.n	db2a8 <__d2b+0x5e>
   db274:	a802      	add	r0, sp, #8
   db276:	f840 8d08 	str.w	r8, [r0, #-8]!
   db27a:	f7ff fd90 	bl	dad9e <__lo0bits>
   db27e:	9b00      	ldr	r3, [sp, #0]
   db280:	b148      	cbz	r0, db296 <__d2b+0x4c>
   db282:	9a01      	ldr	r2, [sp, #4]
   db284:	f1c0 0120 	rsb	r1, r0, #32
   db288:	fa02 f101 	lsl.w	r1, r2, r1
   db28c:	430b      	orrs	r3, r1
   db28e:	40c2      	lsrs	r2, r0
   db290:	617b      	str	r3, [r7, #20]
   db292:	9201      	str	r2, [sp, #4]
   db294:	e000      	b.n	db298 <__d2b+0x4e>
   db296:	617b      	str	r3, [r7, #20]
   db298:	9b01      	ldr	r3, [sp, #4]
   db29a:	61bb      	str	r3, [r7, #24]
   db29c:	2b00      	cmp	r3, #0
   db29e:	bf14      	ite	ne
   db2a0:	2102      	movne	r1, #2
   db2a2:	2101      	moveq	r1, #1
   db2a4:	6139      	str	r1, [r7, #16]
   db2a6:	e007      	b.n	db2b8 <__d2b+0x6e>
   db2a8:	a801      	add	r0, sp, #4
   db2aa:	f7ff fd78 	bl	dad9e <__lo0bits>
   db2ae:	9b01      	ldr	r3, [sp, #4]
   db2b0:	617b      	str	r3, [r7, #20]
   db2b2:	2101      	movs	r1, #1
   db2b4:	6139      	str	r1, [r7, #16]
   db2b6:	3020      	adds	r0, #32
   db2b8:	b134      	cbz	r4, db2c8 <__d2b+0x7e>
   db2ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   db2be:	4404      	add	r4, r0
   db2c0:	6034      	str	r4, [r6, #0]
   db2c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db2c6:	e009      	b.n	db2dc <__d2b+0x92>
   db2c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   db2cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db2d0:	6030      	str	r0, [r6, #0]
   db2d2:	6918      	ldr	r0, [r3, #16]
   db2d4:	f7ff fd43 	bl	dad5e <__hi0bits>
   db2d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   db2dc:	6028      	str	r0, [r5, #0]
   db2de:	4638      	mov	r0, r7
   db2e0:	b003      	add	sp, #12
   db2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db2e6 <__ratio>:
   db2e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db2ea:	4688      	mov	r8, r1
   db2ec:	4669      	mov	r1, sp
   db2ee:	4681      	mov	r9, r0
   db2f0:	f7ff ff5e 	bl	db1b0 <__b2d>
   db2f4:	a901      	add	r1, sp, #4
   db2f6:	4640      	mov	r0, r8
   db2f8:	ec55 4b10 	vmov	r4, r5, d0
   db2fc:	f7ff ff58 	bl	db1b0 <__b2d>
   db300:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db304:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db308:	1a9a      	subs	r2, r3, r2
   db30a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   db30e:	1ac9      	subs	r1, r1, r3
   db310:	ec57 6b10 	vmov	r6, r7, d0
   db314:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   db318:	2b00      	cmp	r3, #0
   db31a:	bfcc      	ite	gt
   db31c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   db320:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   db324:	4632      	mov	r2, r6
   db326:	463b      	mov	r3, r7
   db328:	4620      	mov	r0, r4
   db32a:	4629      	mov	r1, r5
   db32c:	f7fd fb08 	bl	d8940 <__aeabi_ddiv>
   db330:	ec41 0b10 	vmov	d0, r0, r1
   db334:	b003      	add	sp, #12
   db336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db33a <__copybits>:
   db33a:	3901      	subs	r1, #1
   db33c:	b510      	push	{r4, lr}
   db33e:	1149      	asrs	r1, r1, #5
   db340:	6914      	ldr	r4, [r2, #16]
   db342:	3101      	adds	r1, #1
   db344:	f102 0314 	add.w	r3, r2, #20
   db348:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db34c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db350:	42a3      	cmp	r3, r4
   db352:	4602      	mov	r2, r0
   db354:	d204      	bcs.n	db360 <__copybits+0x26>
   db356:	f853 2b04 	ldr.w	r2, [r3], #4
   db35a:	f840 2b04 	str.w	r2, [r0], #4
   db35e:	e7f7      	b.n	db350 <__copybits+0x16>
   db360:	2300      	movs	r3, #0
   db362:	428a      	cmp	r2, r1
   db364:	d202      	bcs.n	db36c <__copybits+0x32>
   db366:	f842 3b04 	str.w	r3, [r2], #4
   db36a:	e7fa      	b.n	db362 <__copybits+0x28>
   db36c:	bd10      	pop	{r4, pc}

000db36e <__any_on>:
   db36e:	f100 0214 	add.w	r2, r0, #20
   db372:	6900      	ldr	r0, [r0, #16]
   db374:	114b      	asrs	r3, r1, #5
   db376:	4298      	cmp	r0, r3
   db378:	b510      	push	{r4, lr}
   db37a:	db0c      	blt.n	db396 <__any_on+0x28>
   db37c:	dd0c      	ble.n	db398 <__any_on+0x2a>
   db37e:	f011 011f 	ands.w	r1, r1, #31
   db382:	d009      	beq.n	db398 <__any_on+0x2a>
   db384:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db388:	fa24 f001 	lsr.w	r0, r4, r1
   db38c:	fa00 f101 	lsl.w	r1, r0, r1
   db390:	428c      	cmp	r4, r1
   db392:	d10c      	bne.n	db3ae <__any_on+0x40>
   db394:	e000      	b.n	db398 <__any_on+0x2a>
   db396:	4603      	mov	r3, r0
   db398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db39c:	4293      	cmp	r3, r2
   db39e:	d904      	bls.n	db3aa <__any_on+0x3c>
   db3a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db3a4:	2900      	cmp	r1, #0
   db3a6:	d0f9      	beq.n	db39c <__any_on+0x2e>
   db3a8:	e001      	b.n	db3ae <__any_on+0x40>
   db3aa:	2000      	movs	r0, #0
   db3ac:	bd10      	pop	{r4, pc}
   db3ae:	2001      	movs	r0, #1
   db3b0:	bd10      	pop	{r4, pc}

000db3b2 <_calloc_r>:
   db3b2:	b538      	push	{r3, r4, r5, lr}
   db3b4:	fb02 f401 	mul.w	r4, r2, r1
   db3b8:	4621      	mov	r1, r4
   db3ba:	f7fb f929 	bl	d6610 <_malloc_r>
   db3be:	4605      	mov	r5, r0
   db3c0:	b118      	cbz	r0, db3ca <_calloc_r+0x18>
   db3c2:	4622      	mov	r2, r4
   db3c4:	2100      	movs	r1, #0
   db3c6:	f7fd fdf2 	bl	d8fae <memset>
   db3ca:	4628      	mov	r0, r5
   db3cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000db3d0 <nanf>:
   db3d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; db3d8 <nanf+0x8>
   db3d4:	4770      	bx	lr
   db3d6:	bf00      	nop
   db3d8:	7fc00000 	.word	0x7fc00000

000db3dc <__env_lock>:
   db3dc:	4770      	bx	lr

000db3de <__env_unlock>:
   db3de:	4770      	bx	lr

000db3e0 <dynalib_user>:
   db3e0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db3f0:	0000 0000                                   ....

000db3f4 <_ZTV5Timer>:
	...
   db3fc:	4365 000d 43ad 000d 4129 000d ba16 000d     eC...C..)A......
   db40c:	ba51 000d ba56 000d ba5b 000d ba5f 000d     Q...V...[..._...
   db41c:	ba64 000d ba69 000d ba6d 000d ba78 000d     d...i...m...x...
   db42c:	ba83 000d ba16 000d ba1e 000d ba22 000d     ............"...
   db43c:	ba2b 000d ba33 000d ba3f 000d ba45 000d     +...3...?...E...
   db44c:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   db45c:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000db48c <_ZL16MemVersionNumber>:
   db48c:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   db49c:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   db4ac:	4643 4e55 313d 0d36 000a 3425 312e 2066     CFUN=16...%4.1f 
   db4bc:	0043 3425 312e 2066 2525 2500 2e34 6631     C.%4.1f %%.%4.1f
   db4cc:	6c20 7875 2500 2069 2525 7b00 5422 6d65      lux.%i %%.{"Tem
   db4dc:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
   db4ec:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   db4fc:	2c66 2220 694c 6867 4c74 7665 6c65 3a22     f, "LightLevel":
   db50c:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   db51c:	7574 6572 2231 253a 2c69 2220 6f53 6c69     ture1":%i, "Soil
   db52c:	6f6d 7369 7574 6572 2232 253a 2c69 2220     moisture2":%i, "
   db53c:	6177 6574 5072 6572 7373 7275 2265 253a     waterPressure":%
   db54c:	2c69 2220 6f53 656c 6f6e 6469 3a22 6925     i, "Solenoid":%i
   db55c:	202c 6222 7461 6574 7972 3a22 6925 202c     , "battery":%i, 
   db56c:	6b22 7965 2231 223a 7325 2c22 2220 6552     "key1":"%s", "Re
   db57c:	6573 7374 3a22 6925 202c 4122 656c 7472     sets":%i, "Alert
   db58c:	2273 253a 7d69 5200 6177 646e 2d61 6553     s":%i}.Rwanda-Se
   db59c:	736e 2d65 6e41 2d64 6f43 746e 6f72 2d6c     nse-And-Control-
   db5ac:	6c45 7361 6974 0063 6761 6972 7563 746c     Elastic.agricult
   db5bc:	7275 2d65 7761 2d73 6577 6862 6f6f 006b     ure-aws-webhook.
   db5cc:	7752 6e61 6164 532d 6e65 6573 412d 646e     Rwanda-Sense-And
   db5dc:	432d 6e6f 7274 6c6f 4e00 206f 6144 6174     -Control.No Data
   db5ec:	5500 6962 6f64 7374 4820 6f6f 006b 6552     .Ubidots Hook.Re
   db5fc:	7073 6e6f 6573 5220 6365 6965 6576 0064     sponse Received.
   db60c:	6e55 6e6b 776f 206e 6572 7073 6e6f 6573     Unknown response
   db61c:	7220 6365 7665 6569 2064 6925 3000 4e00      recevied %i.0.N
   db62c:	206f 6f53 6c69 5320 6e65 6f73 7372 4300     o Soil Sensors.C
   db63c:	6e6f 6966 0067 6e4f 2065 6f53 6c69 5320     onfig.One Soil S
   db64c:	6e65 6f73 0072 7754 206f 6f53 6c69 5320     ensor.Two Soil S
   db65c:	6e65 6f73 7372 4e00 206f 7250 7365 7573     ensors.No Pressu
   db66c:	6572 5320 6e65 6f73 0072 7250 7365 7573     re Sensor.Pressu
   db67c:	6572 5320 6e65 6f73 2072 7250 7365 6e65     re Sensor Presen
   db68c:	0074 6f4e 4c20 6769 7468 5320 6e65 6f73     t.No Light Senso
   db69c:	0072 694c 6867 2074 6553 736e 726f 5020     r.Light Sensor P
   db6ac:	6572 6573 746e 4e00 206f 6554 706d 2f20     resent.No Temp /
   db6bc:	4820 6d75 6469 7469 2079 6553 736e 726f      Humidity Sensor
   db6cc:	5020 6572 6573 746e 5700 7461 7265 6e69      Present.Waterin
   db6dc:	2067 7544 6172 6974 6e6f 7320 7465 7420     g Duration set t
   db6ec:	206f 6925 5400 6d69 0065 3225 312e 2066     o %i.Time.%2.1f 
   db6fc:	2525 5300 7465 5620 7265 6f62 6573 4d20     %%.Set Verbose M
   db70c:	646f 0065 6c43 6165 6572 2064 6556 6272     ode.Cleared Verb
   db71c:	736f 2065 6f4d 6564 4c00 776f 5020 776f     ose Mode.Low Pow
   db72c:	7265 4d20 646f 0065 6f4e 6d72 6c61 4f20     er Mode.Normal O
   db73c:	6570 6172 6974 6e6f 0073 704f 6e65 7420     perations.Open t
   db74c:	6568 5620 6c61 6576 5700 7461 7265 6e69     he Valve.Waterin
   db75c:	0067 6c43 736f 2065 6874 2065 6176 766c     g.Close the valv
   db76c:	0065 6f4e 5320 6c6f 6e65 696f 2064 7441     e.No Solenoid At
   db77c:	6174 6863 6465 4600 6f72 206d 7325 7420     tached.From %s t
   db78c:	206f 7325 5300 6174 6574 5420 6172 736e     o %s.State Trans
   db79c:	7469 6f69 006e 6f44 656e 7720 7469 2068     ition.Done with 
   db7ac:	6177 6574 6972 676e 6320 6379 656c 5700     watering cycle.W
   db7bc:	7461 7265 6e69 2067 656e 6465 6465 2d20     atering needed -
   db7cc:	7320 6174 7472 6e69 2067 3032 6d20 6e69      starting 20 min
   db7dc:	6320 6379 656c 5700 7461 7265 6e69 2067      cycle.Watering 
   db7ec:	6f6e 2074 656e 6465 6465 7300 6170 6b72     not needed.spark
   db7fc:	642f 7665 6369 2f65 6573 7373 6f69 2f6e     /device/session/
   db80c:	6e65 0064 6154 696b 676e 6120 4e20 7061     end.Taking a Nap
   db81c:	5300 6174 6574 4c00 776f 4220 7461 6574     .State.Low Batte
   db82c:	7972 2d20 5320 656c 7065 6e69 0067 7245     ry - Sleeping.Er
   db83c:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
   db84c:	0074 7245 6f72 2072 7453 7461 2065 202d     t.Error State - 
   db85c:	6f50 6577 2072 7943 6c63 0065 7245 6f72     Power Cycle.Erro
   db86c:	2072 7453 7461 2065 202d 7546 6c6c 4d20     r State - Full M
   db87c:	646f 6d65 5220 7365 7465 4500 7272 726f     odem Reset.Error
   db88c:	7420 6b61 6e69 2067 654d 7361 7275 6d65      taking Measurem
   db89c:	6e65 7374 5300 6769 616e 006c 6552 6573     ents.Signal.Rese
   db8ac:	4374 756f 746e 5200 6c65 6165 6573 5300     tCount.Release.S
   db8bc:	6174 6574 664f 6843 0067 6142 7474 7265     tateOfChg.Batter
   db8cc:	4379 6e6f 6574 7478 5700 7461 7265 6e69     yContext.Waterin
   db8dc:	5467 7268 7365 6f68 646c 5400 6d65 6570     gThreshold.Tempe
   db8ec:	6172 7574 6572 4800 6d75 6469 7469 0079     rature.Humidity.
   db8fc:	754c 696d 6f6e 6973 7974 5300 696f 4d6c     Luminosity.SoilM
   db90c:	696f 7473 7275 3165 5300 696f 4d6c 696f     oisture1.SoilMoi
   db91c:	7473 7275 3265 5000 6572 7373 7275 0065     sture2.Pressure.
   db92c:	654d 7361 7275 2d65 6f4e 0077 6f4c 5077     Measure-Now.LowP
   db93c:	776f 7265 6f4d 6564 5600 7265 6f62 6573     owerMode.Verbose
   db94c:	4d2d 646f 0065 6553 5374 696f 536c 6e65     -Mode.SetSoilSen
   db95c:	6f73 7372 5300 7465 7250 7365 7573 6572     sors.SetPressure
   db96c:	6553 736e 726f 5300 7465 694c 6867 5374     Sensor.SetLightS
   db97c:	6e65 6f73 0072 6f53 656c 6f6e 6469 7250     ensor.SolenoidPr
   db98c:	7365 6e65 0074 6553 5474 6d65 4870 6d75     esent.SetTempHum
   db99c:	6469 6553 736e 726f 5300 7465 6157 6574     idSensor.SetWate
   db9ac:	4472 7275 7461 6f69 006e 6553 5774 7461     rDuration.SetWat
   db9bc:	7265 6854 6572 6873 6c6f 0064 6554 706d     erThreshold.Temp
   db9cc:	482f 6d75 6469 7469 2079 6553 736e 726f     /Humidity Sensor
   db9dc:	4620 6961 656c 2064 6f74 4920 696e 6c61      Failed to Inial
   db9ec:	7a69 2065 202d 6964 6173 6c62 6e69 0067     ize - disabling.
   db9fc:	6146 6c69 6465 7420 206f 6f63 6e6e 6365     Failed to connec
   dba0c:	0074 7453 7261 7574 0070 6e55 6e6b 776f     t.Startup.Unknow
   dba1c:	006e 6f4e 2074 6843 7261 6967 676e 4300     n.Not Charging.C
   dba2c:	6168 6772 6465 4400 7369 6863 7261 6967     harged.Dischargi
   dba3c:	676e 4600 7561 746c 4400 6369 6e6f 656e     ng.Fault.Diconne
   dba4c:	7463 6465 4e00 6e6f 0065 6957 6946 4700     cted.None.WiFi.G
   dba5c:	4d53 5500 544d 0053 4443 414d 4c00 4554     SM.UMTS.CDMA.LTE
   dba6c:	4900 4545 3845 3230 3531 0034 544c 5f45     .IEEE802154.LTE_
   dba7c:	4143 5f54 314d 4c00 4554 435f 5441 4e5f     CAT_M1.LTE_CAT_N
   dba8c:	3142 3200                                        B1.

000dba8f <_ZL13releaseNumber>:
   dba8f:	3832 0000 0000 0000 0000                         28.......

000dba98 <_ZTVN5spark13CellularClassE>:
	...
   dbaa0:	670b 000d 6701 000d 66f7 000d 66ad 000d     .g...g...f...f..
   dbab0:	66eb 000d 66df 000d 66d3 000d 66cb 000d     .f...f...f...f..
   dbac0:	66c1 000d 66b7 000d 73a1 000d               .f...f...s..

000dbacc <_ZTV14CellularSignal>:
	...
   dbad4:	67b9 000d 6819 000d 67bb 000d 685d 000d     .g...h...g..]h..
   dbae4:	67c1 000d 6829 000d 67ed 000d 68e7 000d     .g..)h...g...h..
   dbaf4:	fffc ffff 0000 0000 6911 000d               .........i..

000dbb00 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbb08:	6919 000d 691f 000d 6963 000d 692d 000d     .i...i..ci..-i..
   dbb18:	691b 000d                                   .i..

000dbb1c <_ZTVN5spark13EthernetClassE>:
	...
   dbb24:	6f77 000d 6f6d 000d 6f63 000d 6f59 000d     wo..mo..co..Yo..
   dbb34:	6f4d 000d 6f41 000d 6f35 000d 6f2d 000d     Mo..Ao..5o..-o..
   dbb44:	6f23 000d 6f19 000d 73a1 000d               #o...o...s..

000dbb50 <_ZTV7TwoWire>:
	...
   dbb58:	6f95 000d 6fdf 000d 6fb7 000d 6f97 000d     .o...o...o...o..
   dbb68:	6fbf 000d 6fc7 000d 6fcf 000d 6fd7 000d     .o...o...o...o..

000dbb78 <_ZTV9IPAddress>:
	...
   dbb80:	70d7 000d 70c7 000d 70c9 000d 6162 6475     .p...p...p..baud
   dbb90:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dbba0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   dbbb0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   dbbc0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   dbbd0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   dbbe0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   dbbf0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   dbc00:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   dbc10:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   dbc20:	203d 6400 7465 6961 736c 3d20 0020 6e6c     = .details = .ln
   dbc30:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   dbc40:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   dbc50:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   dbc60:	6100 6c6c 0000 0000                         .all....

000dbc68 <_ZTVN5spark9MeshClassE>:
	...
   dbc70:	721b 000d 7211 000d 7207 000d 71fd 000d     .r...r...r...q..
   dbc80:	71f1 000d 71e5 000d 71d9 000d 71d1 000d     .q...q...q...q..
   dbc90:	71c7 000d 71bd 000d 73a1 000d               .q...q...s..

000dbc9c <_ZTVN5spark12NetworkClassE>:
	...
   dbca4:	7339 000d 7343 000d 734d 000d 7357 000d     9s..Cs..Ms..Ws..
   dbcb4:	7361 000d 736d 000d 7379 000d 7385 000d     as..ms..ys...s..
   dbcc4:	738d 000d 7397 000d 73a1 000d 6977 6972     .s...s...s..wiri
   dbcd4:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   dbce4:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   dbcf4:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
   dbd04:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   dbd14:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   dbd24:	0000 0000                                   ....

000dbd28 <_ZTV11USARTSerial>:
	...
   dbd30:	7b1d 000d 7b6d 000d 7b7b 000d 75c9 000d     .{..m{..{{...u..
   dbd40:	7b31 000d 7b53 000d 7b3f 000d 7b67 000d     1{..S{..?{..g{..
   dbd50:	7b1f 000d 7b23 000d                         .{..#{..

000dbd58 <_ZTV9USBSerial>:
	...
   dbd60:	7c25 000d 7c75 000d 7c83 000d 75c9 000d     %|..u|...|...u..
   dbd70:	7c61 000d 7c27 000d 7c3d 000d 7c6f 000d     a|..'|..=|..o|..
   dbd80:	7c53 000d 7c21 000d                         S|..!|..

000dbd88 <_ZSt7nothrow>:
	...

000dbd89 <_ctype_>:
   dbd89:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dbd99:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dbda9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dbdb9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dbdc9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dbdd9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dbde9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dbdf9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dbe09:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dbe8c <__sf_fake_stdin>:
	...

000dbeac <__sf_fake_stdout>:
	...

000dbecc <__sf_fake_stderr>:
	...
   dbeec:	4f50 4953 0058 0000                         POSIX...

000dbef4 <__month_lengths>:
   dbef4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dbf04:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dbf14:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dbf24:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dbf34:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dbf44:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dbf54 <fpi.5344>:
   dbf54:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dbf64:	0000 0000                                   ....

000dbf68 <fpinan.5380>:
   dbf68:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dbf78:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000dbf88 <tinytens>:
   dbf88:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dbf98:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dbfa8:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dbfb8:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dbfc8:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dbfd8:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dbfe8:	2575 006e 0000 0000                         u%n.....

000dbff0 <__mprec_tens>:
   dbff0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc000:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc010:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc020:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc030:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc040:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc050:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc060:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc070:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc080:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc090:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc0a0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc0b0:	9db4 79d9 7843 44ea                         ...yCx.D

000dc0b8 <__mprec_bigtens>:
   dc0b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc0c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc0d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc0e0 <p05.5387>:
   dc0e0:	0005 0000 0019 0000 007d 0000               ........}...

000dc0ec <link_const_variable_data_end>:
   dc0ec:	000d5b31 	.word	0x000d5b31
   dc0f0:	000d5d6b 	.word	0x000d5d6b
   dc0f4:	000d5f19 	.word	0x000d5f19
   dc0f8:	000d6685 	.word	0x000d6685
   dc0fc:	000d6789 	.word	0x000d6789
   dc100:	000d6f81 	.word	0x000d6f81
   dc104:	000d71ad 	.word	0x000d71ad
   dc108:	000d72e9 	.word	0x000d72e9
   dc10c:	000d746d 	.word	0x000d746d
   dc110:	000d7695 	.word	0x000d7695
   dc114:	000d79dd 	.word	0x000d79dd
   dc118:	000d7b09 	.word	0x000d7b09
   dc11c:	000d80ed 	.word	0x000d80ed
   dc120:	000d81b1 	.word	0x000d81b1
   dc124:	000d8235 	.word	0x000d8235
   dc128:	000d82b9 	.word	0x000d82b9

000dc12c <link_constructors_end>:
   dc12c:	00000000 	.word	0x00000000
