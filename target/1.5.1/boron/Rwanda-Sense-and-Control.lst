
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.5.1/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008590  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc5b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000174  2003e03c  000dc5b4  0001e03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000640  2003e1b0  2003e1b0  0002e1b0  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000dc728  000dc728  0002c728  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc754  000dc754  0002c754  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104278  00000000  00000000  0002c758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001418c  00000000  00000000  001309d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00024225  00000000  00000000  00144b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ec0  00000000  00000000  00168d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005730  00000000  00000000  0016bc41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000398f7  00000000  00000000  00171371  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031c36  00000000  00000000  001aac68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c203  00000000  00000000  001dc89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f044  00000000  00000000  002e8aa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f95f 	bl	d92f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f964 	bl	d930a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e03c 	.word	0x2003e03c
   d404c:	000dc5b4 	.word	0x000dc5b4
   d4050:	2003e1b0 	.word	0x2003e1b0
   d4054:	2003e1b0 	.word	0x2003e1b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 f831 	bl	d80c4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc5a4 	.word	0x000dc5a4
   d4084:	000dc564 	.word	0x000dc564

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bc04 	b.w	d5894 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f8b3 	bl	d51f8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bfd7 	b.w	d8048 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bbb5 	b.w	d6808 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bbbb 	b.w	d6818 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bbb9 	b.w	d6818 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z16wateringTimerISRv>:
  currentStatusWriteNeeded = true;
  return true;
}

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z16wateringTimerISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e221 	.word	0x2003e221

000d40c4 <_Z13awakeTimerISRv>:
}

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40c4:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z13awakeTimerISRv+0xc>)
   d40c6:	2301      	movs	r3, #1
   d40c8:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40ca:	4a02      	ldr	r2, [pc, #8]	; (d40d4 <_Z13awakeTimerISRv+0x10>)
   d40cc:	7013      	strb	r3, [r2, #0]
   d40ce:	4770      	bx	lr
   d40d0:	2003e2fc 	.word	0x2003e2fc
   d40d4:	2003e1e6 	.word	0x2003e1e6

000d40d8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d8:	6803      	ldr	r3, [r0, #0]
   d40da:	4718      	bx	r3

000d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40dc:	2a01      	cmp	r2, #1
   d40de:	d002      	beq.n	d40e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40e0:	2a02      	cmp	r2, #2
   d40e2:	d002      	beq.n	d40ea <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40e4:	e004      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e6:	6001      	str	r1, [r0, #0]
	      break;
   d40e8:	e002      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40ea:	680b      	ldr	r3, [r1, #0]
   d40ec:	b100      	cbz	r0, d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ee:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40f0:	2000      	movs	r0, #0
   d40f2:	4770      	bx	lr

000d40f4 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40f4:	b538      	push	{r3, r4, r5, lr}
   d40f6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40f8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40fa:	b128      	cbz	r0, d4108 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40fc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40fe:	210c      	movs	r1, #12
   d4100:	f004 f947 	bl	d8392 <_ZdlPvj>
            wakeupSource = next;
   d4104:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d4106:	e7f8      	b.n	d40fa <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4108:	4620      	mov	r0, r4
   d410a:	bd38      	pop	{r3, r4, r5, pc}

000d410c <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d410c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410e:	4904      	ldr	r1, [pc, #16]	; (d4120 <_Z10measureNow6String+0x14>)
   d4110:	f003 fc83 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4114:	b118      	cbz	r0, d411e <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4116:	4b03      	ldr	r3, [pc, #12]	; (d4124 <_Z10measureNow6String+0x18>)
   d4118:	2203      	movs	r2, #3
   d411a:	701a      	strb	r2, [r3, #0]
    return 1;
   d411c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d411e:	bd08      	pop	{r3, pc}
   d4120:	000dbeac 	.word	0x000dbeac
   d4124:	2003e1e7 	.word	0x2003e1e7

000d4128 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4128:	6943      	ldr	r3, [r0, #20]
   d412a:	b113      	cbz	r3, d4132 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d412c:	6983      	ldr	r3, [r0, #24]
   d412e:	300c      	adds	r0, #12
   d4130:	4718      	bx	r3
   d4132:	4770      	bx	lr

000d4134 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4134:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4136:	2100      	movs	r1, #0
   d4138:	4604      	mov	r4, r0
   d413a:	4608      	mov	r0, r1
   d413c:	f002 f84a 	bl	d61d4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4140:	a902      	add	r1, sp, #8
   d4142:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4144:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4146:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d414a:	f002 f85b 	bl	d6204 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d414e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4150:	b10c      	cbz	r4, d4156 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4152:	2301      	movs	r3, #1
   d4154:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4156:	2100      	movs	r1, #0
   d4158:	2001      	movs	r0, #1
   d415a:	f002 f83b 	bl	d61d4 <os_thread_scheduling>
            }
        }
        if (t) {
   d415e:	b12c      	cbz	r4, d416c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4798      	blx	r3
            t->running = false;
   d4168:	2300      	movs	r3, #0
   d416a:	7123      	strb	r3, [r4, #4]
        }
    }
   d416c:	b002      	add	sp, #8
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4170:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4172:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4176:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4178:	f88d 3000 	strb.w	r3, [sp]
   d417c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d417e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4180:	f002 fe7c 	bl	d6e7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4184:	4628      	mov	r0, r5
   d4186:	b003      	add	sp, #12
   d4188:	bd30      	pop	{r4, r5, pc}

000d418a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d418a:	b510      	push	{r4, lr}
   d418c:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d418e:	6800      	ldr	r0, [r0, #0]
   d4190:	b108      	cbz	r0, d4196 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4192:	f002 fb41 	bl	d6818 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4196:	4620      	mov	r0, r4
   d4198:	bd10      	pop	{r4, pc}

000d419a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d419c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d41a0:	b113      	cbz	r3, d41a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41a2:	2203      	movs	r2, #3
   d41a4:	4601      	mov	r1, r0
   d41a6:	4798      	blx	r3
    }
   d41a8:	4620      	mov	r0, r4
   d41aa:	bd10      	pop	{r4, pc}

000d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41ac:	6803      	ldr	r3, [r0, #0]
   d41ae:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41b0:	b120      	cbz	r0, d41bc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d41b2:	8883      	ldrh	r3, [r0, #4]
   d41b4:	428b      	cmp	r3, r1
   d41b6:	d001      	beq.n	d41bc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d41b8:	6880      	ldr	r0, [r0, #8]
   d41ba:	e7f9      	b.n	d41b0 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d41bc:	4770      	bx	lr
	...

000d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d41c4:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41c6:	4605      	mov	r5, r0
   d41c8:	460f      	mov	r7, r1
   d41ca:	4616      	mov	r6, r2
        if (valid_) {
   d41cc:	b33b      	cbz	r3, d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d41ce:	2101      	movs	r1, #1
   d41d0:	f7ff ffec 	bl	d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d41d4:	b150      	cbz	r0, d41ec <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d41d6:	8983      	ldrh	r3, [r0, #12]
   d41d8:	42bb      	cmp	r3, r7
   d41da:	d104      	bne.n	d41e6 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
   d41dc:	7386      	strb	r6, [r0, #14]
                    return *this;
   d41de:	e01e      	b.n	d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d41e0:	8883      	ldrh	r3, [r0, #4]
   d41e2:	2b01      	cmp	r3, #1
   d41e4:	d0f6      	beq.n	d41d4 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41e6:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41e8:	2800      	cmp	r0, #0
   d41ea:	d1f9      	bne.n	d41e0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41ec:	490d      	ldr	r1, [pc, #52]	; (d4224 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41ee:	2010      	movs	r0, #16
   d41f0:	f004 f8da 	bl	d83a8 <_ZnwjRKSt9nothrow_t>
   d41f4:	4604      	mov	r4, r0
   d41f6:	b188      	cbz	r0, d421c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41f8:	f04f 0810 	mov.w	r8, #16
   d41fc:	4642      	mov	r2, r8
   d41fe:	2100      	movs	r1, #0
   d4200:	f005 f883 	bl	d930a <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4204:	2302      	movs	r3, #2
   d4206:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4208:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d420a:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d420e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4210:	692b      	ldr	r3, [r5, #16]
   d4212:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4214:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4216:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4218:	612c      	str	r4, [r5, #16]
   d421a:	e000      	b.n	d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d421c:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d421e:	4628      	mov	r0, r5
   d4220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4224:	000dc1a4 	.word	0x000dc1a4

000d4228 <_ZN24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d422c:	7d03      	ldrb	r3, [r0, #20]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d422e:	4605      	mov	r5, r0
   d4230:	460f      	mov	r7, r1
        if (valid_) {
   d4232:	b1f3      	cbz	r3, d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d4234:	2104      	movs	r1, #4
   d4236:	f7ff ffb9 	bl	d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d423a:	4606      	mov	r6, r0
   d423c:	b108      	cbz	r0, d4242 <_ZN24SystemSleepConfiguration8durationEm+0x1a>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d423e:	60c7      	str	r7, [r0, #12]
                return *this;
   d4240:	e017      	b.n	d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4242:	490d      	ldr	r1, [pc, #52]	; (d4278 <_ZN24SystemSleepConfiguration8durationEm+0x50>)
   d4244:	2010      	movs	r0, #16
   d4246:	f004 f8af 	bl	d83a8 <_ZnwjRKSt9nothrow_t>
   d424a:	4604      	mov	r4, r0
   d424c:	b180      	cbz	r0, d4270 <_ZN24SystemSleepConfiguration8durationEm+0x48>
   d424e:	f04f 0810 	mov.w	r8, #16
   d4252:	4642      	mov	r2, r8
   d4254:	4631      	mov	r1, r6
   d4256:	f005 f858 	bl	d930a <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d425a:	2302      	movs	r3, #2
   d425c:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d425e:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4260:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4264:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4266:	692b      	ldr	r3, [r5, #16]
   d4268:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d426a:	60e7      	str	r7, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d426c:	612c      	str	r4, [r5, #16]
   d426e:	e000      	b.n	d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d4270:	7528      	strb	r0, [r5, #20]
            wakeupSource->base.next = config_.wakeup_sources;
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4272:	4628      	mov	r0, r5
   d4274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4278:	000dc1a4 	.word	0x000dc1a4

000d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d427c:	b508      	push	{r3, lr}
   d427e:	ed2d 8b02 	vpush	{d8}
   d4282:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4286:	b128      	cbz	r0, d4294 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4288:	3801      	subs	r0, #1
   d428a:	f7ff fff7 	bl	d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d428e:	ee28 0a00 	vmul.f32	s0, s16, s0
   d4292:	e001      	b.n	d4298 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d4294:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d4298:	ecbd 8b02 	vpop	{d8}
   d429c:	bd08      	pop	{r3, pc}
	...

000d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d42a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42a2:	2500      	movs	r5, #0
   d42a4:	468e      	mov	lr, r1
   d42a6:	4915      	ldr	r1, [pc, #84]	; (d42fc <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42a8:	7105      	strb	r5, [r0, #4]
   d42aa:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d42ac:	6145      	str	r5, [r0, #20]
   d42ae:	6001      	str	r1, [r0, #0]
   d42b0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b2:	e892 0003 	ldmia.w	r2, {r0, r1}
   d42b6:	b085      	sub	sp, #20
   d42b8:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d42ba:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42be:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42c2:	e896 0003 	ldmia.w	r6, {r0, r1}
   d42c6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42ca:	e897 0003 	ldmia.w	r7, {r0, r1}
   d42ce:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42d2:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d42d4:	6960      	ldr	r0, [r4, #20]
   d42d6:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d42d8:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42da:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42dc:	69a0      	ldr	r0, [r4, #24]
   d42de:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42e0:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d42e2:	e88d 0028 	stmia.w	sp, {r3, r5}
   d42e6:	4a06      	ldr	r2, [pc, #24]	; (d4300 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d42e8:	4623      	mov	r3, r4
   d42ea:	4671      	mov	r1, lr
   d42ec:	f104 0008 	add.w	r0, r4, #8
   d42f0:	f001 ff78 	bl	d61e4 <os_timer_create>
    }
   d42f4:	4620      	mov	r0, r4
   d42f6:	b005      	add	sp, #20
   d42f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42fa:	bf00      	nop
   d42fc:	000db754 	.word	0x000db754
   d4300:	000d4135 	.word	0x000d4135

000d4304 <_ZN5Timer12changePeriodEjj>:
    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4304:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4306:	6880      	ldr	r0, [r0, #8]
    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4308:	460b      	mov	r3, r1
   d430a:	4611      	mov	r1, r2
   d430c:	2200      	movs	r2, #0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d430e:	b138      	cbz	r0, d4320 <_ZN5Timer12changePeriodEjj+0x1c>
   d4310:	e88d 0006 	stmia.w	sp, {r1, r2}
   d4314:	2103      	movs	r1, #3
   d4316:	f001 ff7d 	bl	d6214 <os_timer_change>
   d431a:	fab0 f080 	clz	r0, r0
   d431e:	0940      	lsrs	r0, r0, #5
    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4320:	b003      	add	sp, #12
   d4322:	f85d fb04 	ldr.w	pc, [sp], #4

000d4326 <_ZNK5Timer8isActiveEv>:
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4326:	b508      	push	{r3, lr}
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
   d4328:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d432a:	b128      	cbz	r0, d4338 <_ZNK5Timer8isActiveEv+0x12>
   d432c:	2100      	movs	r1, #0
   d432e:	f001 ff89 	bl	d6244 <os_timer_is_active>
   d4332:	3000      	adds	r0, #0
   d4334:	bf18      	it	ne
   d4336:	2001      	movne	r0, #1
   d4338:	bd08      	pop	{r3, pc}

000d433a <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d433a:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d433c:	6880      	ldr	r0, [r0, #8]
   d433e:	2300      	movs	r3, #0
   d4340:	b138      	cbz	r0, d4352 <_ZN5Timer5_stopEjb+0x18>
   d4342:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4346:	2102      	movs	r1, #2
   d4348:	f001 ff64 	bl	d6214 <os_timer_change>
   d434c:	fab0 f080 	clz	r0, r0
   d4350:	0940      	lsrs	r0, r0, #5
    }
   d4352:	b003      	add	sp, #12
   d4354:	f85d fb04 	ldr.w	pc, [sp], #4

000d4358 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4358:	b538      	push	{r3, r4, r5, lr}
   d435a:	4b10      	ldr	r3, [pc, #64]	; (d439c <_ZN5TimerD1Ev+0x44>)
   d435c:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d435e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4360:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4362:	b1a3      	cbz	r3, d438e <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4368:	2200      	movs	r2, #0
   d436a:	f7ff ffe6 	bl	d433a <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d436e:	2100      	movs	r1, #0
   d4370:	68a0      	ldr	r0, [r4, #8]
   d4372:	f001 ff6f 	bl	d6254 <os_timer_set_id>
            while (running) {
   d4376:	7923      	ldrb	r3, [r4, #4]
   d4378:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d437c:	b113      	cbz	r3, d4384 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d437e:	f001 ff11 	bl	d61a4 <os_thread_yield>
   d4382:	e7f8      	b.n	d4376 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4384:	4629      	mov	r1, r5
   d4386:	68a0      	ldr	r0, [r4, #8]
   d4388:	f001 ff34 	bl	d61f4 <os_timer_destroy>
            handle = nullptr;
   d438c:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d438e:	f104 000c 	add.w	r0, r4, #12
   d4392:	f7ff ff02 	bl	d419a <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4396:	4620      	mov	r0, r4
   d4398:	bd38      	pop	{r3, r4, r5, pc}
   d439a:	bf00      	nop
   d439c:	000db754 	.word	0x000db754

000d43a0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43a0:	b510      	push	{r4, lr}
   d43a2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43a4:	f7ff ffd8 	bl	d4358 <_ZN5TimerD1Ev>
   d43a8:	4620      	mov	r0, r4
   d43aa:	211c      	movs	r1, #28
   d43ac:	f003 fff1 	bl	d8392 <_ZdlPvj>
   d43b0:	4620      	mov	r0, r4
   d43b2:	bd10      	pop	{r4, pc}

000d43b4 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43b6:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43b8:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43ba:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43bc:	4611      	mov	r1, r2
   d43be:	f7ff ffbc 	bl	d433a <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43c2:	68a8      	ldr	r0, [r5, #8]
   d43c4:	2300      	movs	r3, #0
   d43c6:	b140      	cbz	r0, d43da <_ZN5Timer5startEj+0x26>
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	9400      	str	r4, [sp, #0]
   d43cc:	461a      	mov	r2, r3
   d43ce:	4619      	mov	r1, r3
   d43d0:	f001 ff20 	bl	d6214 <os_timer_change>
   d43d4:	fab0 f080 	clz	r0, r0
   d43d8:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43da:	b003      	add	sp, #12
   d43dc:	bd30      	pop	{r4, r5, pc}
	...

000d43e0 <_Z17getSignalStrengthv>:

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d43e0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43e2:	4d19      	ldr	r5, [pc, #100]	; (d4448 <_Z17getSignalStrengthv+0x68>)
   d43e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d43e6:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43e8:	ac04      	add	r4, sp, #16
   d43ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d43ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43f0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d43f4:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d43f8:	4914      	ldr	r1, [pc, #80]	; (d444c <_Z17getSignalStrengthv+0x6c>)
   d43fa:	a80e      	add	r0, sp, #56	; 0x38
   d43fc:	f002 fabe 	bl	d697c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4400:	a80e      	add	r0, sp, #56	; 0x38
   d4402:	f002 fb0e 	bl	d6a22 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4406:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4408:	a80e      	add	r0, sp, #56	; 0x38
   d440a:	f002 fb5b 	bl	d6ac4 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d440e:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4410:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4414:	f002 fb3c 	bl	d6a90 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4418:	ab18      	add	r3, sp, #96	; 0x60
   d441a:	ee10 0a10 	vmov	r0, s0
   d441e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4422:	f004 fa81 	bl	d8928 <__aeabi_f2d>
   d4426:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d442a:	4628      	mov	r0, r5
   d442c:	f004 fa7c 	bl	d8928 <__aeabi_f2d>
   d4430:	e9cd 0100 	strd	r0, r1, [sp]
   d4434:	4a06      	ldr	r2, [pc, #24]	; (d4450 <_Z17getSignalStrengthv+0x70>)
   d4436:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d443a:	4806      	ldr	r0, [pc, #24]	; (d4454 <_Z17getSignalStrengthv+0x74>)
   d443c:	2140      	movs	r1, #64	; 0x40
   d443e:	f002 fa0b 	bl	d6858 <snprintf>
}
   d4442:	b019      	add	sp, #100	; 0x64
   d4444:	bd30      	pop	{r4, r5, pc}
   d4446:	bf00      	nop
   d4448:	000db760 	.word	0x000db760
   d444c:	2003e334 	.word	0x2003e334
   d4450:	000db7e8 	.word	0x000db7e8
   d4454:	2003e268 	.word	0x2003e268

000d4458 <_Z17connectToParticlev>:

}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4458:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d445c:	481a      	ldr	r0, [pc, #104]	; (d44c8 <_Z17connectToParticlev+0x70>)
   d445e:	2300      	movs	r3, #0
   d4460:	461a      	mov	r2, r3
   d4462:	4619      	mov	r1, r3
   d4464:	6840      	ldr	r0, [r0, #4]
   d4466:	f002 f99f 	bl	d67a8 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d446a:	f002 f935 	bl	d66d8 <spark_cloud_flag_connect>
   d446e:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4472:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4476:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4478:	2000      	movs	r0, #0
   d447a:	f001 ff53 	bl	d6324 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d447e:	f04f 0900 	mov.w	r9, #0
   d4482:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4484:	2000      	movs	r0, #0
   d4486:	f001 ff4d 	bl	d6324 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d448a:	ebb0 0008 	subs.w	r0, r0, r8
   d448e:	eb61 0109 	sbc.w	r1, r1, r9
   d4492:	428f      	cmp	r7, r1
   d4494:	bf08      	it	eq
   d4496:	4286      	cmpeq	r6, r0
   d4498:	d305      	bcc.n	d44a6 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d449a:	f002 f92d 	bl	d66f8 <spark_cloud_flag_connected>
   d449e:	b910      	cbnz	r0, d44a6 <_Z17connectToParticlev+0x4e>
            spark_process();
   d44a0:	f002 f912 	bl	d66c8 <spark_process>
   d44a4:	e7ee      	b.n	d4484 <_Z17connectToParticlev+0x2c>
   d44a6:	f002 f927 	bl	d66f8 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44aa:	b118      	cbz	r0, d44b4 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d44ac:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d44b0:	f002 b922 	b.w	d66f8 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d44b4:	f001 fefe 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d44b8:	4b04      	ldr	r3, [pc, #16]	; (d44cc <_Z17connectToParticlev+0x74>)
   d44ba:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d44bc:	f002 f904 	bl	d66c8 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44c0:	3c01      	subs	r4, #1
   d44c2:	d0f3      	beq.n	d44ac <_Z17connectToParticlev+0x54>
   d44c4:	e7d8      	b.n	d4478 <_Z17connectToParticlev+0x20>
   d44c6:	bf00      	nop
   d44c8:	2003e334 	.word	0x2003e334
   d44cc:	2003e6e8 	.word	0x2003e6e8

000d44d0 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d44d0:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44d2:	f002 f911 	bl	d66f8 <spark_cloud_flag_connected>
    return !Particle.connected();
   d44d6:	f080 0001 	eor.w	r0, r0, #1
}
   d44da:	b2c0      	uxtb	r0, r0
   d44dc:	bd08      	pop	{r3, pc}
	...

000d44e0 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d44e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d44e2:	f002 f901 	bl	d66e8 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44e6:	2000      	movs	r0, #0
   d44e8:	f001 ff1c 	bl	d6324 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44ec:	2500      	movs	r5, #0
   d44ee:	4604      	mov	r4, r0
   d44f0:	f643 2697 	movw	r6, #14999	; 0x3a97
   d44f4:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44f6:	2000      	movs	r0, #0
   d44f8:	f001 ff14 	bl	d6324 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44fc:	1b00      	subs	r0, r0, r4
   d44fe:	eb61 0105 	sbc.w	r1, r1, r5
   d4502:	428f      	cmp	r7, r1
   d4504:	bf08      	it	eq
   d4506:	4286      	cmpeq	r6, r0
   d4508:	d305      	bcc.n	d4516 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d450a:	f7ff ffe1 	bl	d44d0 <_Z12notConnectedv>
   d450e:	b910      	cbnz	r0, d4516 <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d4510:	f002 f8da 	bl	d66c8 <spark_process>
   d4514:	e7ef      	b.n	d44f6 <_Z22disconnectFromParticlev+0x16>
   d4516:	f7ff ffdb 	bl	d44d0 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d451a:	4806      	ldr	r0, [pc, #24]	; (d4534 <_Z22disconnectFromParticlev+0x54>)
   d451c:	2300      	movs	r3, #0
   d451e:	461a      	mov	r2, r3
   d4520:	4619      	mov	r1, r3
   d4522:	6840      	ldr	r0, [r0, #4]
   d4524:	f002 f948 	bl	d67b8 <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4528:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d452c:	f002 f9b8 	bl	d68a0 <delay>
  return true;
}
   d4530:	2001      	movs	r0, #1
   d4532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4534:	2003e334 	.word	0x2003e334

000d4538 <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
   d4538:	b513      	push	{r0, r1, r4, lr}
   d453a:	4604      	mov	r4, r0
  PMIC pmic(true);
   d453c:	2101      	movs	r1, #1
   d453e:	a801      	add	r0, sp, #4
   d4540:	f003 f8d9 	bl	d76f6 <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
   d4544:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
   d4546:	b11c      	cbz	r4, d4550 <_Z14enableChargingb+0x18>
    pmic.enableCharging();
   d4548:	f003 f970 	bl	d782c <_ZN4PMIC14enableChargingEv>
    return TRUE;
   d454c:	2401      	movs	r4, #1
   d454e:	e001      	b.n	d4554 <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
   d4550:	f003 f93c 	bl	d77cc <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
   d4554:	a801      	add	r0, sp, #4
   d4556:	f003 f8dd 	bl	d7714 <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
   d455a:	4620      	mov	r0, r4
   d455c:	b002      	add	sp, #8
   d455e:	bd10      	pop	{r4, pc}

000d4560 <_Z14setPowerConfigv>:
  }
  else return 0;
}

// Power Management function
int setPowerConfig() {
   d4560:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4562:	2420      	movs	r4, #32
   d4564:	b090      	sub	sp, #64	; 0x40
   d4566:	4622      	mov	r2, r4
   d4568:	2100      	movs	r1, #0
   d456a:	4668      	mov	r0, sp
   d456c:	f004 fecd 	bl	d930a <memset>
   d4570:	4622      	mov	r2, r4
   d4572:	2100      	movs	r1, #0
   d4574:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4578:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d457c:	f004 fec5 	bl	d930a <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4580:	2100      	movs	r1, #0
   d4582:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4586:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d458a:	f002 f879 	bl	d6680 <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
   d458e:	4b1a      	ldr	r3, [pc, #104]	; (d45f8 <_Z14setPowerConfigv+0x98>)
   d4590:	7959      	ldrb	r1, [r3, #5]
   d4592:	9b00      	ldr	r3, [sp, #0]
   d4594:	b1a1      	cbz	r1, d45c0 <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4596:	f240 2226 	movw	r2, #550	; 0x226
   d459a:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d459e:	f241 22e8 	movw	r2, #4840	; 0x12e8
   d45a2:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d45a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d45aa:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45b2:	f241 0272 	movw	r2, #4210	; 0x1072
   d45b6:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45ba:	9300      	str	r3, [sp, #0]
   d45bc:	2100      	movs	r1, #0
   d45be:	e010      	b.n	d45e2 <_Z14setPowerConfigv+0x82>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d45c0:	f44f 7261 	mov.w	r2, #900	; 0x384
   d45c4:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45c8:	f241 0070 	movw	r0, #4208	; 0x1070
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d45cc:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45d4:	f241 0210 	movw	r2, #4112	; 0x1010

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45d8:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45dc:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45e0:	9300      	str	r3, [sp, #0]
   d45e2:	4668      	mov	r0, sp
   d45e4:	f002 f84c 	bl	d6680 <system_power_management_set_config>
   d45e8:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                     // This is the default value for the Boron
        .batteryChargeCurrent(900)                                      // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                      // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
   d45ea:	2001      	movs	r0, #1
   d45ec:	f7ff ffa4 	bl	d4538 <_Z14enableChargingb>
    return res;
  }
}
   d45f0:	4620      	mov	r0, r4
   d45f2:	b010      	add	sp, #64	; 0x40
   d45f4:	bd10      	pop	{r4, pc}
   d45f6:	bf00      	nop
   d45f8:	2003e2fc 	.word	0x2003e2fc

000d45fc <_Z20meterParticlePublishv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
}

bool meterParticlePublish(void)
{
   d45fc:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d45fe:	4c07      	ldr	r4, [pc, #28]	; (d461c <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4600:	f001 fe58 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
   d4604:	6823      	ldr	r3, [r4, #0]
   d4606:	1ac0      	subs	r0, r0, r3
   d4608:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d460c:	d304      	bcc.n	d4618 <_Z20meterParticlePublishv+0x1c>
   d460e:	f001 fe51 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4612:	6020      	str	r0, [r4, #0]
   d4614:	2001      	movs	r0, #1
   d4616:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4618:	2000      	movs	r0, #0
}
   d461a:	bd10      	pop	{r4, pc}
   d461c:	2003e2a8 	.word	0x2003e2a8

000d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4620:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d4622:	f7ff ffeb 	bl	d45fc <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4626:	b118      	cbz	r0, d4630 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d462c:	f7ff bfe6 	b.w	d45fc <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4630:	f002 f84a 	bl	d66c8 <spark_process>
   d4634:	e7f5      	b.n	d4622 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84+0x2>
	...

000d4638 <_Z14fullModemResetv>:
    return 1;
  }
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4638:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d463a:	f002 f855 	bl	d66e8 <spark_cloud_flag_disconnect>
   d463e:	f001 fe39 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4642:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4646:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4648:	f002 f856 	bl	d66f8 <spark_cloud_flag_connected>
   d464c:	b140      	cbz	r0, d4660 <_Z14fullModemResetv+0x28>
   d464e:	f001 fe31 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
   d4652:	1b00      	subs	r0, r0, r4
   d4654:	42a8      	cmp	r0, r5
   d4656:	d803      	bhi.n	d4660 <_Z14fullModemResetv+0x28>
		delay(100);
   d4658:	2064      	movs	r0, #100	; 0x64
   d465a:	f002 f921 	bl	d68a0 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d465e:	e7f3      	b.n	d4648 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4660:	2100      	movs	r1, #0
   d4662:	4b09      	ldr	r3, [pc, #36]	; (d4688 <_Z14fullModemResetv+0x50>)
   d4664:	f247 5230 	movw	r2, #30000	; 0x7530
   d4668:	4608      	mov	r0, r1
   d466a:	f001 fd8b 	bl	d6184 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d466e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4672:	f002 f915 	bl	d68a0 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4676:	4b05      	ldr	r3, [pc, #20]	; (d468c <_Z14fullModemResetv+0x54>)
   d4678:	220a      	movs	r2, #10
   d467a:	681b      	ldr	r3, [r3, #0]
   d467c:	2101      	movs	r1, #1
   d467e:	4668      	mov	r0, sp
   d4680:	f003 faba 	bl	d7bf8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4684:	b003      	add	sp, #12
   d4686:	bd30      	pop	{r4, r5, pc}
   d4688:	000db801 	.word	0x000db801
   d468c:	2003e23c 	.word	0x2003e23c

000d4690 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4690:	b530      	push	{r4, r5, lr}
   d4692:	b085      	sub	sp, #20
   d4694:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4696:	a904      	add	r1, sp, #16
   d4698:	2200      	movs	r2, #0
   d469a:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d469e:	f001 ff91 	bl	d65c4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d46a2:	b9a8      	cbnz	r0, d46d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d46a4:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d46a6:	b10c      	cbz	r4, d46ac <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d46a8:	6923      	ldr	r3, [r4, #16]
   d46aa:	b923      	cbnz	r3, d46b6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d46ac:	4a09      	ldr	r2, [pc, #36]	; (d46d4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d46ae:	2100      	movs	r1, #0
   d46b0:	200a      	movs	r0, #10
   d46b2:	f001 ff77 	bl	d65a4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d46b6:	2300      	movs	r3, #0
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	230c      	movs	r3, #12
   d46bc:	f8ad 3004 	strh.w	r3, [sp, #4]
   d46c0:	2304      	movs	r3, #4
   d46c2:	9303      	str	r3, [sp, #12]
   d46c4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d46c6:	6923      	ldr	r3, [r4, #16]
   d46c8:	aa01      	add	r2, sp, #4
   d46ca:	2101      	movs	r1, #1
   d46cc:	4620      	mov	r0, r4
   d46ce:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d46d0:	b005      	add	sp, #20
   d46d2:	bd30      	pop	{r4, r5, pc}
   d46d4:	000d62a5 	.word	0x000d62a5

000d46d8 <_Z17getBatteryContextv>:

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d46d8:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46da:	4d0e      	ldr	r5, [pc, #56]	; (d4714 <_Z17getBatteryContextv+0x3c>)
   d46dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d46de:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46e0:	ac01      	add	r4, sp, #4
   d46e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d46e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d46ec:	4669      	mov	r1, sp
   d46ee:	2007      	movs	r0, #7
   d46f0:	f7ff ffce 	bl	d4690 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d46f4:	2800      	cmp	r0, #0
        return val;
   d46f6:	bfa8      	it	ge
   d46f8:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d46fa:	4a07      	ldr	r2, [pc, #28]	; (d4718 <_Z17getBatteryContextv+0x40>)
   d46fc:	ab08      	add	r3, sp, #32
   d46fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4702:	2110      	movs	r1, #16
   d4704:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4708:	4804      	ldr	r0, [pc, #16]	; (d471c <_Z17getBatteryContextv+0x44>)
   d470a:	f002 f8a5 	bl	d6858 <snprintf>

}
   d470e:	b009      	add	sp, #36	; 0x24
   d4710:	bd30      	pop	{r4, r5, pc}
   d4712:	bf00      	nop
   d4714:	000db788 	.word	0x000db788
   d4718:	000dbb38 	.word	0x000dbb38
   d471c:	2003e1d6 	.word	0x2003e1d6

000d4720 <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4720:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d4722:	4d59      	ldr	r5, [pc, #356]	; (d4888 <_Z16takeMeasurementsv+0x168>)
   d4724:	4c59      	ldr	r4, [pc, #356]	; (d488c <_Z16takeMeasurementsv+0x16c>)
   d4726:	7b2b      	ldrb	r3, [r5, #12]
   d4728:	b13b      	cbz	r3, d473a <_Z16takeMeasurementsv+0x1a>
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
   d472a:	4859      	ldr	r0, [pc, #356]	; (d4890 <_Z16takeMeasurementsv+0x170>)
   d472c:	f001 fd04 	bl	d6138 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4730:	eeb4 0a40 	vcmp.f32	s0, s0
   d4734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4738:	d703      	bvc.n	d4742 <_Z16takeMeasurementsv+0x22>
   d473a:	2300      	movs	r3, #0
   d473c:	61a3      	str	r3, [r4, #24]
   d473e:	6163      	str	r3, [r4, #20]
   d4740:	e009      	b.n	d4756 <_Z16takeMeasurementsv+0x36>
    else {
    current.temperature = tempHumidSensor.readTemperature();
   d4742:	4853      	ldr	r0, [pc, #332]	; (d4890 <_Z16takeMeasurementsv+0x170>)
   d4744:	f001 fcf8 	bl	d6138 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d4748:	4851      	ldr	r0, [pc, #324]	; (d4890 <_Z16takeMeasurementsv+0x170>)
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
    else {
    current.temperature = tempHumidSensor.readTemperature();
   d474a:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d474e:	f001 fd01 	bl	d6154 <_ZN14Adafruit_SHT3112readHumidityEv>
   d4752:	ed84 0a06 	vstr	s0, [r4, #24]
    }

  }
  else current.temperature = current.humidity = 0.0;
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4756:	6960      	ldr	r0, [r4, #20]
   d4758:	4e4c      	ldr	r6, [pc, #304]	; (d488c <_Z16takeMeasurementsv+0x16c>)
   d475a:	f004 f8e5 	bl	d8928 <__aeabi_f2d>
   d475e:	4a4d      	ldr	r2, [pc, #308]	; (d4894 <_Z16takeMeasurementsv+0x174>)
   d4760:	e9cd 0100 	strd	r0, r1, [sp]
   d4764:	2110      	movs	r1, #16
   d4766:	484c      	ldr	r0, [pc, #304]	; (d4898 <_Z16takeMeasurementsv+0x178>)
   d4768:	f002 f876 	bl	d6858 <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d476c:	69a0      	ldr	r0, [r4, #24]
   d476e:	f004 f8db 	bl	d8928 <__aeabi_f2d>
   d4772:	4a4a      	ldr	r2, [pc, #296]	; (d489c <_Z16takeMeasurementsv+0x17c>)
   d4774:	e9cd 0100 	strd	r0, r1, [sp]
   d4778:	2110      	movs	r1, #16
   d477a:	4849      	ldr	r0, [pc, #292]	; (d48a0 <_Z16takeMeasurementsv+0x180>)
   d477c:	f002 f86c 	bl	d6858 <snprintf>

  if (sysStatus.lightSensorConfig) {
   d4780:	7c2b      	ldrb	r3, [r5, #16]
   d4782:	b143      	cbz	r3, d4796 <_Z16takeMeasurementsv+0x76>
    lightSensor.make_forced_measurement();
   d4784:	4847      	ldr	r0, [pc, #284]	; (d48a4 <_Z16takeMeasurementsv+0x184>)
   d4786:	f001 fbff 	bl	d5f88 <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d478a:	4846      	ldr	r0, [pc, #280]	; (d48a4 <_Z16takeMeasurementsv+0x184>)
   d478c:	f001 fbb6 	bl	d5efc <_ZN6BH175015get_light_levelEv>
   d4790:	ed86 0a07 	vstr	s0, [r6, #28]
   d4794:	e001      	b.n	d479a <_Z16takeMeasurementsv+0x7a>
  }
  else current.lightLevel = 0.0;
   d4796:	2300      	movs	r3, #0
   d4798:	61f3      	str	r3, [r6, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d479a:	69e0      	ldr	r0, [r4, #28]
   d479c:	4e3b      	ldr	r6, [pc, #236]	; (d488c <_Z16takeMeasurementsv+0x16c>)
   d479e:	f004 f8c3 	bl	d8928 <__aeabi_f2d>
   d47a2:	4a41      	ldr	r2, [pc, #260]	; (d48a8 <_Z16takeMeasurementsv+0x188>)
   d47a4:	e9cd 0100 	strd	r0, r1, [sp]
   d47a8:	2110      	movs	r1, #16
   d47aa:	4840      	ldr	r0, [pc, #256]	; (d48ac <_Z16takeMeasurementsv+0x18c>)
   d47ac:	f002 f854 	bl	d6858 <snprintf>

  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d47b0:	7bab      	ldrb	r3, [r5, #14]
   d47b2:	b163      	cbz	r3, d47ce <_Z16takeMeasurementsv+0xae>
   d47b4:	2013      	movs	r0, #19
   d47b6:	f003 fd3c 	bl	d8232 <analogRead>
   d47ba:	2364      	movs	r3, #100	; 0x64
   d47bc:	9300      	str	r3, [sp, #0]
   d47be:	2300      	movs	r3, #0
   d47c0:	f640 628a 	movw	r2, #3722	; 0xe8a
   d47c4:	4619      	mov	r1, r3
   d47c6:	f002 f85f 	bl	d6888 <_Z3mapiiiii>
   d47ca:	6030      	str	r0, [r6, #0]
   d47cc:	e000      	b.n	d47d0 <_Z16takeMeasurementsv+0xb0>
  else current.soilMoisture1 = 0;
   d47ce:	6033      	str	r3, [r6, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d47d0:	7bab      	ldrb	r3, [r5, #14]
   d47d2:	2b02      	cmp	r3, #2
   d47d4:	d10c      	bne.n	d47f0 <_Z16takeMeasurementsv+0xd0>
   d47d6:	2012      	movs	r0, #18
   d47d8:	f003 fd2b 	bl	d8232 <analogRead>
   d47dc:	2364      	movs	r3, #100	; 0x64
   d47de:	9300      	str	r3, [sp, #0]
   d47e0:	2300      	movs	r3, #0
   d47e2:	f640 628a 	movw	r2, #3722	; 0xe8a
   d47e6:	4619      	mov	r1, r3
   d47e8:	f002 f84e 	bl	d6888 <_Z3mapiiiii>
   d47ec:	6060      	str	r0, [r4, #4]
   d47ee:	e001      	b.n	d47f4 <_Z16takeMeasurementsv+0xd4>
  else current.soilMoisture2 = 0;
   d47f0:	2300      	movs	r3, #0
   d47f2:	6063      	str	r3, [r4, #4]


  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d47f4:	7beb      	ldrb	r3, [r5, #15]
   d47f6:	2b01      	cmp	r3, #1
   d47f8:	d10d      	bne.n	d4816 <_Z16takeMeasurementsv+0xf6>
   d47fa:	2011      	movs	r0, #17
   d47fc:	f003 fd19 	bl	d8232 <analogRead>
   d4800:	231e      	movs	r3, #30
   d4802:	9300      	str	r3, [sp, #0]
   d4804:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d4808:	2300      	movs	r3, #0
   d480a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d480e:	f002 f83b 	bl	d6888 <_Z3mapiiiii>
   d4812:	60a0      	str	r0, [r4, #8]
   d4814:	e002      	b.n	d481c <_Z16takeMeasurementsv+0xfc>
  else sysStatus.pressureSensorConfig = 0;
   d4816:	4b1c      	ldr	r3, [pc, #112]	; (d4888 <_Z16takeMeasurementsv+0x168>)
   d4818:	2200      	movs	r2, #0
   d481a:	73da      	strb	r2, [r3, #15]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d481c:	4b24      	ldr	r3, [pc, #144]	; (d48b0 <_Z16takeMeasurementsv+0x190>)
   d481e:	2200      	movs	r2, #0
   d4820:	4611      	mov	r1, r2
   d4822:	6858      	ldr	r0, [r3, #4]
   d4824:	f001 ffb8 	bl	d6798 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4828:	b108      	cbz	r0, d482e <_Z16takeMeasurementsv+0x10e>
   d482a:	f7ff fdd9 	bl	d43e0 <_Z17getSignalStrengthv>
   d482e:	a903      	add	r1, sp, #12
   d4830:	2003      	movs	r0, #3
   d4832:	f7ff ff2d 	bl	d4690 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4836:	b988      	cbnz	r0, d485c <_Z16takeMeasurementsv+0x13c>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4838:	2006      	movs	r0, #6
   d483a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d483e:	f7ff fd1d 	bl	d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4842:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4846:	ee30 0a00 	vadd.f32	s0, s0, s0
   d484a:	ee07 3a10 	vmov	s14, r3
   d484e:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4852:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4856:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d485a:	e001      	b.n	d4860 <_Z16takeMeasurementsv+0x140>
            return -1.0f;
   d485c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0

  // sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d4860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4864:	4a13      	ldr	r2, [pc, #76]	; (d48b4 <_Z16takeMeasurementsv+0x194>)
   d4866:	4814      	ldr	r0, [pc, #80]	; (d48b8 <_Z16takeMeasurementsv+0x198>)
  else sysStatus.pressureSensorConfig = 0;

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready

  // sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d4868:	edc5 7a02 	vstr	s15, [r5, #8]
   d486c:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4870:	2108      	movs	r1, #8
   d4872:	f001 fff1 	bl	d6858 <snprintf>

  getBatteryContext();                                                 // What is the battery doing.
   d4876:	f7ff ff2f 	bl	d46d8 <_Z17getBatteryContextv>

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d487a:	4b10      	ldr	r3, [pc, #64]	; (d48bc <_Z16takeMeasurementsv+0x19c>)
   d487c:	2001      	movs	r0, #1
   d487e:	7018      	strb	r0, [r3, #0]
   d4880:	4b0f      	ldr	r3, [pc, #60]	; (d48c0 <_Z16takeMeasurementsv+0x1a0>)
   d4882:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4884:	b004      	add	sp, #16
   d4886:	bd70      	pop	{r4, r5, r6, pc}
   d4888:	2003e2fc 	.word	0x2003e2fc
   d488c:	2003e2b0 	.word	0x2003e2b0
   d4890:	2003e250 	.word	0x2003e250
   d4894:	000db80e 	.word	0x000db80e
   d4898:	2003e1b4 	.word	0x2003e1b4
   d489c:	000db816 	.word	0x000db816
   d48a0:	2003e2d4 	.word	0x2003e2d4
   d48a4:	2003e1cc 	.word	0x2003e1cc
   d48a8:	000db81f 	.word	0x000db81f
   d48ac:	2003e2ec 	.word	0x2003e2ec
   d48b0:	2003e334 	.word	0x2003e334
   d48b4:	000db829 	.word	0x000db829
   d48b8:	2003e2e4 	.word	0x2003e2e4
   d48bc:	2003e220 	.word	0x2003e220
   d48c0:	2003e1e6 	.word	0x2003e1e6

000d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d48c6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48c8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d48ca:	b17c      	cbz	r4, d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d48cc:	6863      	ldr	r3, [r4, #4]
   d48ce:	3b01      	subs	r3, #1
   d48d0:	6063      	str	r3, [r4, #4]
   d48d2:	b95b      	cbnz	r3, d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d48d4:	6823      	ldr	r3, [r4, #0]
   d48d6:	4620      	mov	r0, r4
   d48d8:	689b      	ldr	r3, [r3, #8]
   d48da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48dc:	68a3      	ldr	r3, [r4, #8]
   d48de:	3b01      	subs	r3, #1
   d48e0:	60a3      	str	r3, [r4, #8]
   d48e2:	b91b      	cbnz	r3, d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d48e4:	6823      	ldr	r3, [r4, #0]
   d48e6:	4620      	mov	r0, r4
   d48e8:	68db      	ldr	r3, [r3, #12]
   d48ea:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d48ec:	4628      	mov	r0, r5
   d48ee:	bd38      	pop	{r3, r4, r5, pc}

000d48f0 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d48f0:	b530      	push	{r4, r5, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d48f2:	4c2f      	ldr	r4, [pc, #188]	; (d49b0 <_Z9sendEventv+0xc0>)
   d48f4:	4d2f      	ldr	r5, [pc, #188]	; (d49b4 <_Z9sendEventv+0xc4>)
   d48f6:	6a23      	ldr	r3, [r4, #32]
    break;
  }
}

void sendEvent()
{
   d48f8:	b0d1      	sub	sp, #324	; 0x144
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d48fa:	930d      	str	r3, [sp, #52]	; 0x34
   d48fc:	4b2e      	ldr	r3, [pc, #184]	; (d49b8 <_Z9sendEventv+0xc8>)
   d48fe:	699a      	ldr	r2, [r3, #24]
   d4900:	920c      	str	r2, [sp, #48]	; 0x30
   d4902:	4a2e      	ldr	r2, [pc, #184]	; (d49bc <_Z9sendEventv+0xcc>)
   d4904:	920b      	str	r2, [sp, #44]	; 0x2c
   d4906:	689b      	ldr	r3, [r3, #8]
   d4908:	930a      	str	r3, [sp, #40]	; 0x28
   d490a:	68e3      	ldr	r3, [r4, #12]
   d490c:	9309      	str	r3, [sp, #36]	; 0x24
   d490e:	68a3      	ldr	r3, [r4, #8]
   d4910:	9308      	str	r3, [sp, #32]
   d4912:	6863      	ldr	r3, [r4, #4]
   d4914:	9307      	str	r3, [sp, #28]
   d4916:	6823      	ldr	r3, [r4, #0]
   d4918:	9306      	str	r3, [sp, #24]
   d491a:	69e0      	ldr	r0, [r4, #28]
   d491c:	f004 f804 	bl	d8928 <__aeabi_f2d>
   d4920:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4924:	69a0      	ldr	r0, [r4, #24]
   d4926:	f003 ffff 	bl	d8928 <__aeabi_f2d>
   d492a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d492e:	6960      	ldr	r0, [r4, #20]
   d4930:	f003 fffa 	bl	d8928 <__aeabi_f2d>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4934:	2400      	movs	r4, #0
   d4936:	e9cd 0100 	strd	r0, r1, [sp]
   d493a:	4a21      	ldr	r2, [pc, #132]	; (d49c0 <_Z9sendEventv+0xd0>)
   d493c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4940:	a810      	add	r0, sp, #64	; 0x40
   d4942:	f001 ff89 	bl	d6858 <snprintf>
  waitUntil(meterParticlePublish);
   d4946:	f7ff fe6b 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d494a:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control-Elastic", data, PRIVATE);
   d494c:	491d      	ldr	r1, [pc, #116]	; (d49c4 <_Z9sendEventv+0xd4>)
   d494e:	f88d 4000 	strb.w	r4, [sp]
   d4952:	aa10      	add	r2, sp, #64	; 0x40
   d4954:	a80e      	add	r0, sp, #56	; 0x38
   d4956:	f7ff fc0b 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d495a:	a80f      	add	r0, sp, #60	; 0x3c
   d495c:	f7ff ffb2 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4960:	f7ff fe5e 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4964:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("agriculture-aws-webhook",data,PRIVATE);
   d4966:	4918      	ldr	r1, [pc, #96]	; (d49c8 <_Z9sendEventv+0xd8>)
   d4968:	f88d 4000 	strb.w	r4, [sp]
   d496c:	aa10      	add	r2, sp, #64	; 0x40
   d496e:	a80e      	add	r0, sp, #56	; 0x38
   d4970:	f7ff fbfe 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4974:	a80f      	add	r0, sp, #60	; 0x3c
   d4976:	f7ff ffa5 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d497a:	f7ff fe51 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d497e:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d4980:	4912      	ldr	r1, [pc, #72]	; (d49cc <_Z9sendEventv+0xdc>)
   d4982:	f88d 4000 	strb.w	r4, [sp]
   d4986:	aa10      	add	r2, sp, #64	; 0x40
   d4988:	a80e      	add	r0, sp, #56	; 0x38
   d498a:	f7ff fbf1 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d498e:	a80f      	add	r0, sp, #60	; 0x3c
   d4990:	f7ff ff98 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d4994:	f003 fa16 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d4998:	4b0d      	ldr	r3, [pc, #52]	; (d49d0 <_Z9sendEventv+0xe0>)
   d499a:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d499c:	4b0d      	ldr	r3, [pc, #52]	; (d49d4 <_Z9sendEventv+0xe4>)
   d499e:	2201      	movs	r2, #1
   d49a0:	701a      	strb	r2, [r3, #0]
   d49a2:	f001 fc87 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d49a6:	4b0c      	ldr	r3, [pc, #48]	; (d49d8 <_Z9sendEventv+0xe8>)
   d49a8:	6018      	str	r0, [r3, #0]
}
   d49aa:	b051      	add	sp, #324	; 0x144
   d49ac:	bd30      	pop	{r4, r5, pc}
   d49ae:	bf00      	nop
   d49b0:	2003e2b0 	.word	0x2003e2b0
   d49b4:	2003e1c8 	.word	0x2003e1c8
   d49b8:	2003e2fc 	.word	0x2003e2fc
   d49bc:	2003e1d6 	.word	0x2003e1d6
   d49c0:	000db82f 	.word	0x000db82f
   d49c4:	000db8eb 	.word	0x000db8eb
   d49c8:	000db90c 	.word	0x000db90c
   d49cc:	000db924 	.word	0x000db924
   d49d0:	2003e222 	.word	0x2003e222
   d49d4:	2003e0ba 	.word	0x2003e0ba
   d49d8:	2003e1c4 	.word	0x2003e1c4

000d49dc <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49dc:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d49de:	780b      	ldrb	r3, [r1, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49e0:	b094      	sub	sp, #80	; 0x50
   d49e2:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d49e4:	b923      	cbnz	r3, d49f0 <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d49e6:	491c      	ldr	r1, [pc, #112]	; (d4a58 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d49e8:	a804      	add	r0, sp, #16
   d49ea:	f004 fcc9 	bl	d9380 <strcpy>
   d49ee:	e017      	b.n	d4a20 <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d49f0:	4608      	mov	r0, r1
   d49f2:	f004 fb71 	bl	d90d8 <atoi>
   d49f6:	28c8      	cmp	r0, #200	; 0xc8
   d49f8:	d004      	beq.n	d4a04 <_Z14UbidotsHandlerPKcS0_+0x28>
   d49fa:	4620      	mov	r0, r4
   d49fc:	f004 fb6c 	bl	d90d8 <atoi>
   d4a00:	28c9      	cmp	r0, #201	; 0xc9
   d4a02:	d11e      	bne.n	d4a42 <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4a04:	4915      	ldr	r1, [pc, #84]	; (d4a5c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4a06:	a804      	add	r0, sp, #16
   d4a08:	f004 fcba 	bl	d9380 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4a0c:	f003 f9d3 	bl	d7db6 <_ZN9TimeClass3nowEv>
   d4a10:	4b13      	ldr	r3, [pc, #76]	; (d4a60 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4a12:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4a14:	4b13      	ldr	r3, [pc, #76]	; (d4a64 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4a16:	2201      	movs	r2, #1
   d4a18:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4a1a:	4b13      	ldr	r3, [pc, #76]	; (d4a68 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4a1c:	2200      	movs	r2, #0
   d4a1e:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d4a20:	f7ff fdfe 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4a24:	4b11      	ldr	r3, [pc, #68]	; (d4a6c <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d4a26:	4912      	ldr	r1, [pc, #72]	; (d4a70 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4a28:	781b      	ldrb	r3, [r3, #0]
   d4a2a:	2200      	movs	r2, #0
   d4a2c:	f88d 2000 	strb.w	r2, [sp]
   d4a30:	a802      	add	r0, sp, #8
   d4a32:	aa04      	add	r2, sp, #16
   d4a34:	f7ff fb9c 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4a38:	a803      	add	r0, sp, #12
   d4a3a:	f7ff ff43 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4a3e:	b014      	add	sp, #80	; 0x50
   d4a40:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4a42:	4620      	mov	r0, r4
   d4a44:	f004 fb48 	bl	d90d8 <atoi>
   d4a48:	4a0a      	ldr	r2, [pc, #40]	; (d4a74 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4a4a:	4603      	mov	r3, r0
   d4a4c:	2140      	movs	r1, #64	; 0x40
   d4a4e:	a804      	add	r0, sp, #16
   d4a50:	f001 ff02 	bl	d6858 <snprintf>
   d4a54:	e7e4      	b.n	d4a20 <_Z14UbidotsHandlerPKcS0_+0x44>
   d4a56:	bf00      	nop
   d4a58:	000db93d 	.word	0x000db93d
   d4a5c:	000db952 	.word	0x000db952
   d4a60:	2003e2fc 	.word	0x2003e2fc
   d4a64:	2003e1e6 	.word	0x2003e1e6
   d4a68:	2003e0ba 	.word	0x2003e0ba
   d4a6c:	2003e1c8 	.word	0x2003e1c8
   d4a70:	000db945 	.word	0x000db945
   d4a74:	000db964 	.word	0x000db964

000d4a78 <_Z14setSoilSensors6String>:
  }
}


int setSoilSensors (String command) // Function to force sending data in current hour
{
   d4a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4a7a:	491e      	ldr	r1, [pc, #120]	; (d4af4 <_Z14setSoilSensors6String+0x7c>)
   d4a7c:	4604      	mov	r4, r0
   d4a7e:	f002 ffcc 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4a82:	4606      	mov	r6, r0
   d4a84:	b158      	cbz	r0, d4a9e <_Z14setSoilSensors6String+0x26>
  {
    sysStatus.soilSensorConfig = 0;
   d4a86:	4b1c      	ldr	r3, [pc, #112]	; (d4af8 <_Z14setSoilSensors6String+0x80>)
   d4a88:	2200      	movs	r2, #0
   d4a8a:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4a8c:	4b1b      	ldr	r3, [pc, #108]	; (d4afc <_Z14setSoilSensors6String+0x84>)
   d4a8e:	2401      	movs	r4, #1
   d4a90:	701c      	strb	r4, [r3, #0]
   d4a92:	4b1b      	ldr	r3, [pc, #108]	; (d4b00 <_Z14setSoilSensors6String+0x88>)
   d4a94:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d4a96:	f88d 2000 	strb.w	r2, [sp]
   d4a9a:	4a1a      	ldr	r2, [pc, #104]	; (d4b04 <_Z14setSoilSensors6String+0x8c>)
   d4a9c:	e020      	b.n	d4ae0 <_Z14setSoilSensors6String+0x68>
   d4a9e:	491a      	ldr	r1, [pc, #104]	; (d4b08 <_Z14setSoilSensors6String+0x90>)
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	f002 ffba 	bl	d7a1a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4aa6:	4605      	mov	r5, r0
   d4aa8:	b150      	cbz	r0, d4ac0 <_Z14setSoilSensors6String+0x48>
  {
    sysStatus.soilSensorConfig = 1;
   d4aaa:	4b13      	ldr	r3, [pc, #76]	; (d4af8 <_Z14setSoilSensors6String+0x80>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4aac:	4a17      	ldr	r2, [pc, #92]	; (d4b0c <_Z14setSoilSensors6String+0x94>)
    Particle.publish("Config","No Soil Sensors",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.soilSensorConfig = 1;
   d4aae:	2401      	movs	r4, #1
   d4ab0:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d4ab2:	4b12      	ldr	r3, [pc, #72]	; (d4afc <_Z14setSoilSensors6String+0x84>)
   d4ab4:	701c      	strb	r4, [r3, #0]
   d4ab6:	4b12      	ldr	r3, [pc, #72]	; (d4b00 <_Z14setSoilSensors6String+0x88>)
   d4ab8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4aba:	f88d 6000 	strb.w	r6, [sp]
   d4abe:	e00f      	b.n	d4ae0 <_Z14setSoilSensors6String+0x68>
   d4ac0:	4913      	ldr	r1, [pc, #76]	; (d4b10 <_Z14setSoilSensors6String+0x98>)
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	f002 ffa9 	bl	d7a1a <_ZNK6String6equalsEPKc>
    return 1;
  }
    else if (command == "2")
   d4ac8:	b190      	cbz	r0, d4af0 <_Z14setSoilSensors6String+0x78>
  {
    sysStatus.soilSensorConfig = 2;
   d4aca:	4b0b      	ldr	r3, [pc, #44]	; (d4af8 <_Z14setSoilSensors6String+0x80>)
   d4acc:	2202      	movs	r2, #2
   d4ace:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4ad0:	4b0a      	ldr	r3, [pc, #40]	; (d4afc <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4ad2:	4a10      	ldr	r2, [pc, #64]	; (d4b14 <_Z14setSoilSensors6String+0x9c>)
    return 1;
  }
    else if (command == "2")
  {
    sysStatus.soilSensorConfig = 2;
    systemStatusWriteNeeded = true;
   d4ad4:	2401      	movs	r4, #1
   d4ad6:	701c      	strb	r4, [r3, #0]
   d4ad8:	4b09      	ldr	r3, [pc, #36]	; (d4b00 <_Z14setSoilSensors6String+0x88>)
   d4ada:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4adc:	f88d 5000 	strb.w	r5, [sp]
   d4ae0:	490d      	ldr	r1, [pc, #52]	; (d4b18 <_Z14setSoilSensors6String+0xa0>)
   d4ae2:	a802      	add	r0, sp, #8
   d4ae4:	f7ff fb44 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4ae8:	a803      	add	r0, sp, #12
   d4aea:	f7ff feeb 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4aee:	4620      	mov	r0, r4
  }
  else return 0;
}
   d4af0:	b004      	add	sp, #16
   d4af2:	bd70      	pop	{r4, r5, r6, pc}
   d4af4:	000db981 	.word	0x000db981
   d4af8:	2003e2fc 	.word	0x2003e2fc
   d4afc:	2003e1e6 	.word	0x2003e1e6
   d4b00:	2003e1c8 	.word	0x2003e1c8
   d4b04:	000db983 	.word	0x000db983
   d4b08:	000dbeac 	.word	0x000dbeac
   d4b0c:	000db99a 	.word	0x000db99a
   d4b10:	000dbd03 	.word	0x000dbd03
   d4b14:	000db9aa 	.word	0x000db9aa
   d4b18:	000db993 	.word	0x000db993

000d4b1c <_Z17setPressureSensor6String>:

int setPressureSensor (String command) // Function to force sending data in current hour
{
   d4b1c:	b530      	push	{r4, r5, lr}
   d4b1e:	4916      	ldr	r1, [pc, #88]	; (d4b78 <_Z17setPressureSensor6String+0x5c>)
   d4b20:	b085      	sub	sp, #20
   d4b22:	4604      	mov	r4, r0
   d4b24:	f002 ff79 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4b28:	4605      	mov	r5, r0
   d4b2a:	b158      	cbz	r0, d4b44 <_Z17setPressureSensor6String+0x28>
  {
    sysStatus.pressureSensorConfig = 0;
   d4b2c:	4b13      	ldr	r3, [pc, #76]	; (d4b7c <_Z17setPressureSensor6String+0x60>)
   d4b2e:	2200      	movs	r2, #0
   d4b30:	73da      	strb	r2, [r3, #15]
    systemStatusWriteNeeded = true;
   d4b32:	4b13      	ldr	r3, [pc, #76]	; (d4b80 <_Z17setPressureSensor6String+0x64>)
   d4b34:	2401      	movs	r4, #1
   d4b36:	701c      	strb	r4, [r3, #0]
   d4b38:	4b12      	ldr	r3, [pc, #72]	; (d4b84 <_Z17setPressureSensor6String+0x68>)
   d4b3a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d4b3c:	f88d 2000 	strb.w	r2, [sp]
   d4b40:	4a11      	ldr	r2, [pc, #68]	; (d4b88 <_Z17setPressureSensor6String+0x6c>)
   d4b42:	e00e      	b.n	d4b62 <_Z17setPressureSensor6String+0x46>
   d4b44:	4911      	ldr	r1, [pc, #68]	; (d4b8c <_Z17setPressureSensor6String+0x70>)
   d4b46:	4620      	mov	r0, r4
   d4b48:	f002 ff67 	bl	d7a1a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4b4c:	b188      	cbz	r0, d4b72 <_Z17setPressureSensor6String+0x56>
  {
    sysStatus.pressureSensorConfig = 1;
   d4b4e:	4b0b      	ldr	r3, [pc, #44]	; (d4b7c <_Z17setPressureSensor6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b50:	4a0f      	ldr	r2, [pc, #60]	; (d4b90 <_Z17setPressureSensor6String+0x74>)
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.pressureSensorConfig = 1;
   d4b52:	2401      	movs	r4, #1
   d4b54:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d4b56:	4b0a      	ldr	r3, [pc, #40]	; (d4b80 <_Z17setPressureSensor6String+0x64>)
   d4b58:	701c      	strb	r4, [r3, #0]
   d4b5a:	4b0a      	ldr	r3, [pc, #40]	; (d4b84 <_Z17setPressureSensor6String+0x68>)
   d4b5c:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b5e:	f88d 5000 	strb.w	r5, [sp]
   d4b62:	490c      	ldr	r1, [pc, #48]	; (d4b94 <_Z17setPressureSensor6String+0x78>)
   d4b64:	a802      	add	r0, sp, #8
   d4b66:	f7ff fb03 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4b6a:	a803      	add	r0, sp, #12
   d4b6c:	f7ff feaa 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b70:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4b72:	b005      	add	sp, #20
   d4b74:	bd30      	pop	{r4, r5, pc}
   d4b76:	bf00      	nop
   d4b78:	000db981 	.word	0x000db981
   d4b7c:	2003e2fc 	.word	0x2003e2fc
   d4b80:	2003e1e6 	.word	0x2003e1e6
   d4b84:	2003e1c8 	.word	0x2003e1c8
   d4b88:	000db9bb 	.word	0x000db9bb
   d4b8c:	000dbeac 	.word	0x000dbeac
   d4b90:	000db9ce 	.word	0x000db9ce
   d4b94:	000db993 	.word	0x000db993

000d4b98 <_Z14setLightSensor6String>:

int setLightSensor (String command) // Function to force sending data in current hour
{
   d4b98:	b530      	push	{r4, r5, lr}
   d4b9a:	4919      	ldr	r1, [pc, #100]	; (d4c00 <_Z14setLightSensor6String+0x68>)
   d4b9c:	b085      	sub	sp, #20
   d4b9e:	4604      	mov	r4, r0
   d4ba0:	f002 ff3b 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4ba4:	4605      	mov	r5, r0
   d4ba6:	b158      	cbz	r0, d4bc0 <_Z14setLightSensor6String+0x28>
  {
    sysStatus.lightSensorConfig = 0;
   d4ba8:	4b16      	ldr	r3, [pc, #88]	; (d4c04 <_Z14setLightSensor6String+0x6c>)
   d4baa:	2200      	movs	r2, #0
   d4bac:	741a      	strb	r2, [r3, #16]
    systemStatusWriteNeeded = true;
   d4bae:	4b16      	ldr	r3, [pc, #88]	; (d4c08 <_Z14setLightSensor6String+0x70>)
   d4bb0:	2401      	movs	r4, #1
   d4bb2:	701c      	strb	r4, [r3, #0]
   d4bb4:	4b15      	ldr	r3, [pc, #84]	; (d4c0c <_Z14setLightSensor6String+0x74>)
   d4bb6:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d4bb8:	f88d 2000 	strb.w	r2, [sp]
   d4bbc:	4a14      	ldr	r2, [pc, #80]	; (d4c10 <_Z14setLightSensor6String+0x78>)
   d4bbe:	e015      	b.n	d4bec <_Z14setLightSensor6String+0x54>
   d4bc0:	4914      	ldr	r1, [pc, #80]	; (d4c14 <_Z14setLightSensor6String+0x7c>)
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	f002 ff29 	bl	d7a1a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4bc8:	b1c0      	cbz	r0, d4bfc <_Z14setLightSensor6String+0x64>
  {
    sysStatus.lightSensorConfig = 1;
   d4bca:	4b0e      	ldr	r3, [pc, #56]	; (d4c04 <_Z14setLightSensor6String+0x6c>)
    systemStatusWriteNeeded = true;
    lightSensor.begin();
   d4bcc:	4812      	ldr	r0, [pc, #72]	; (d4c18 <_Z14setLightSensor6String+0x80>)
    Particle.publish("Config","No Light Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.lightSensorConfig = 1;
   d4bce:	2401      	movs	r4, #1
   d4bd0:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d4bd2:	4b0d      	ldr	r3, [pc, #52]	; (d4c08 <_Z14setLightSensor6String+0x70>)
   d4bd4:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4bd6:	f001 f986 	bl	d5ee6 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4bda:	2120      	movs	r1, #32
   d4bdc:	480e      	ldr	r0, [pc, #56]	; (d4c18 <_Z14setLightSensor6String+0x80>)
   d4bde:	f001 f9be 	bl	d5f5e <_ZN6BH175015set_sensor_modeENS_8SensModeE>
   d4be2:	4b0a      	ldr	r3, [pc, #40]	; (d4c0c <_Z14setLightSensor6String+0x74>)
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4be4:	4a0d      	ldr	r2, [pc, #52]	; (d4c1c <_Z14setLightSensor6String+0x84>)
   d4be6:	781b      	ldrb	r3, [r3, #0]
   d4be8:	f88d 5000 	strb.w	r5, [sp]
   d4bec:	490c      	ldr	r1, [pc, #48]	; (d4c20 <_Z14setLightSensor6String+0x88>)
   d4bee:	a802      	add	r0, sp, #8
   d4bf0:	f7ff fabe 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4bf4:	a803      	add	r0, sp, #12
   d4bf6:	f7ff fe65 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bfa:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4bfc:	b005      	add	sp, #20
   d4bfe:	bd30      	pop	{r4, r5, pc}
   d4c00:	000db981 	.word	0x000db981
   d4c04:	2003e2fc 	.word	0x2003e2fc
   d4c08:	2003e1e6 	.word	0x2003e1e6
   d4c0c:	2003e1c8 	.word	0x2003e1c8
   d4c10:	000db9e6 	.word	0x000db9e6
   d4c14:	000dbeac 	.word	0x000dbeac
   d4c18:	2003e1cc 	.word	0x2003e1cc
   d4c1c:	000db9f6 	.word	0x000db9f6
   d4c20:	000db993 	.word	0x000db993

000d4c24 <_Z18setTempHumidSensor6String>:

int setTempHumidSensor (String command) // Function to force sending data in current hour
{
   d4c24:	b530      	push	{r4, r5, lr}
   d4c26:	4918      	ldr	r1, [pc, #96]	; (d4c88 <_Z18setTempHumidSensor6String+0x64>)
   d4c28:	b085      	sub	sp, #20
   d4c2a:	4604      	mov	r4, r0
   d4c2c:	f002 fef5 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4c30:	4605      	mov	r5, r0
   d4c32:	b158      	cbz	r0, d4c4c <_Z18setTempHumidSensor6String+0x28>
  {
    sysStatus.TempHumidConfig = 0;
   d4c34:	4b15      	ldr	r3, [pc, #84]	; (d4c8c <_Z18setTempHumidSensor6String+0x68>)
   d4c36:	2200      	movs	r2, #0
   d4c38:	731a      	strb	r2, [r3, #12]
    systemStatusWriteNeeded = true;
   d4c3a:	4b15      	ldr	r3, [pc, #84]	; (d4c90 <_Z18setTempHumidSensor6String+0x6c>)
   d4c3c:	2401      	movs	r4, #1
   d4c3e:	701c      	strb	r4, [r3, #0]
   d4c40:	4b14      	ldr	r3, [pc, #80]	; (d4c94 <_Z18setTempHumidSensor6String+0x70>)
   d4c42:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4c44:	f88d 2000 	strb.w	r2, [sp]
   d4c48:	4a13      	ldr	r2, [pc, #76]	; (d4c98 <_Z18setTempHumidSensor6String+0x74>)
   d4c4a:	e012      	b.n	d4c72 <_Z18setTempHumidSensor6String+0x4e>
   d4c4c:	4913      	ldr	r1, [pc, #76]	; (d4c9c <_Z18setTempHumidSensor6String+0x78>)
   d4c4e:	4620      	mov	r0, r4
   d4c50:	f002 fee3 	bl	d7a1a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4c54:	b1a8      	cbz	r0, d4c82 <_Z18setTempHumidSensor6String+0x5e>
  {
    sysStatus.TempHumidConfig = 1;
   d4c56:	4b0d      	ldr	r3, [pc, #52]	; (d4c8c <_Z18setTempHumidSensor6String+0x68>)
    systemStatusWriteNeeded = true;
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c58:	4811      	ldr	r0, [pc, #68]	; (d4ca0 <_Z18setTempHumidSensor6String+0x7c>)
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
   d4c5a:	2401      	movs	r4, #1
   d4c5c:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d4c5e:	4b0c      	ldr	r3, [pc, #48]	; (d4c90 <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c60:	2144      	movs	r1, #68	; 0x44
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
    systemStatusWriteNeeded = true;
   d4c62:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c64:	f001 f9d0 	bl	d6008 <_ZN14Adafruit_SHT315beginEh>
   d4c68:	4b0a      	ldr	r3, [pc, #40]	; (d4c94 <_Z18setTempHumidSensor6String+0x70>)
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4c6a:	4a0e      	ldr	r2, [pc, #56]	; (d4ca4 <_Z18setTempHumidSensor6String+0x80>)
   d4c6c:	781b      	ldrb	r3, [r3, #0]
   d4c6e:	f88d 5000 	strb.w	r5, [sp]
   d4c72:	490d      	ldr	r1, [pc, #52]	; (d4ca8 <_Z18setTempHumidSensor6String+0x84>)
   d4c74:	a802      	add	r0, sp, #8
   d4c76:	f7ff fa7b 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4c7a:	a803      	add	r0, sp, #12
   d4c7c:	f7ff fe22 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c80:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c82:	b005      	add	sp, #20
   d4c84:	bd30      	pop	{r4, r5, pc}
   d4c86:	bf00      	nop
   d4c88:	000db981 	.word	0x000db981
   d4c8c:	2003e2fc 	.word	0x2003e2fc
   d4c90:	2003e1e6 	.word	0x2003e1e6
   d4c94:	2003e1c8 	.word	0x2003e1c8
   d4c98:	000dba0b 	.word	0x000dba0b
   d4c9c:	000dbeac 	.word	0x000dbeac
   d4ca0:	2003e250 	.word	0x2003e250
   d4ca4:	000dba0e 	.word	0x000dba0e
   d4ca8:	000db993 	.word	0x000db993

000d4cac <_Z23setWaterDurationMorning6String>:
  }
  else return 0;
}

int setWaterDurationMorning(String command)
{
   d4cac:	b510      	push	{r4, lr}
   d4cae:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4cb0:	220a      	movs	r2, #10
   d4cb2:	a903      	add	r1, sp, #12
   d4cb4:	6800      	ldr	r0, [r0, #0]
   d4cb6:	f005 fa79 	bl	da1ac <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4cba:	1e42      	subs	r2, r0, #1
   d4cbc:	2a36      	cmp	r2, #54	; 0x36

int setWaterDurationMorning(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4cbe:	4603      	mov	r3, r0
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4cc0:	d82a      	bhi.n	d4d18 <_Z23setWaterDurationMorning6String+0x6c>
  sysStatus.wateringDurationMorning = tempDuration;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cc2:	4a18      	ldr	r2, [pc, #96]	; (d4d24 <_Z23setWaterDurationMorning6String+0x78>)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringDurationMorning = tempDuration;
   d4cc4:	4c18      	ldr	r4, [pc, #96]	; (d4d28 <_Z23setWaterDurationMorning6String+0x7c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cc6:	2101      	movs	r1, #1
   d4cc8:	7011      	strb	r1, [r2, #0]
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringDurationMorning = tempDuration;
   d4cca:	6220      	str	r0, [r4, #32]
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Morning Watering Duration set to %i",sysStatus.wateringDurationMorning);
   d4ccc:	4a17      	ldr	r2, [pc, #92]	; (d4d2c <_Z23setWaterDurationMorning6String+0x80>)
   d4cce:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4cd2:	a806      	add	r0, sp, #24
   d4cd4:	f001 fdc0 	bl	d6858 <snprintf>

  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4cd8:	4815      	ldr	r0, [pc, #84]	; (d4d30 <_Z23setWaterDurationMorning6String+0x84>)
   d4cda:	f7ff fb24 	bl	d4326 <_ZNK5Timer8isActiveEv>
   d4cde:	b140      	cbz	r0, d4cf2 <_Z23setWaterDurationMorning6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMorning);
   d4ce0:	6a23      	ldr	r3, [r4, #32]
   d4ce2:	4813      	ldr	r0, [pc, #76]	; (d4d30 <_Z23setWaterDurationMorning6String+0x84>)
   d4ce4:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4ce8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4cec:	4359      	muls	r1, r3
   d4cee:	f7ff fb09 	bl	d4304 <_ZN5Timer12changePeriodEjj>
  }

  waitUntil(meterParticlePublish);
   d4cf2:	f7ff fc95 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4cf6:	f001 fcff 	bl	d66f8 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4cfa:	b178      	cbz	r0, d4d1c <_Z23setWaterDurationMorning6String+0x70>
   d4cfc:	4b0d      	ldr	r3, [pc, #52]	; (d4d34 <_Z23setWaterDurationMorning6String+0x88>)
   d4cfe:	490e      	ldr	r1, [pc, #56]	; (d4d38 <_Z23setWaterDurationMorning6String+0x8c>)
   d4d00:	781b      	ldrb	r3, [r3, #0]
   d4d02:	2200      	movs	r2, #0
   d4d04:	f88d 2000 	strb.w	r2, [sp]
   d4d08:	a804      	add	r0, sp, #16
   d4d0a:	aa06      	add	r2, sp, #24
   d4d0c:	f7ff fa30 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4d10:	a805      	add	r0, sp, #20
   d4d12:	f7ff fdd7 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d16:	e001      	b.n	d4d1c <_Z23setWaterDurationMorning6String+0x70>
int setWaterDurationMorning(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d18:	2000      	movs	r0, #0
   d4d1a:	e000      	b.n	d4d1e <_Z23setWaterDurationMorning6String+0x72>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMorning);
  }

  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
  return 1;
   d4d1c:	2001      	movs	r0, #1
}
   d4d1e:	b046      	add	sp, #280	; 0x118
   d4d20:	bd10      	pop	{r4, pc}
   d4d22:	bf00      	nop
   d4d24:	2003e1e6 	.word	0x2003e1e6
   d4d28:	2003e2fc 	.word	0x2003e2fc
   d4d2c:	000dba2d 	.word	0x000dba2d
   d4d30:	2003e204 	.word	0x2003e204
   d4d34:	2003e1c8 	.word	0x2003e1c8
   d4d38:	000dba51 	.word	0x000dba51

000d4d3c <_Z21setWaterDurationLunch6String>:

int setWaterDurationLunch(String command)
{
   d4d3c:	b510      	push	{r4, lr}
   d4d3e:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d40:	220a      	movs	r2, #10
   d4d42:	a903      	add	r1, sp, #12
   d4d44:	6800      	ldr	r0, [r0, #0]
   d4d46:	f005 fa31 	bl	da1ac <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d4a:	1e42      	subs	r2, r0, #1
   d4d4c:	2a36      	cmp	r2, #54	; 0x36

int setWaterDurationLunch(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d4e:	4603      	mov	r3, r0
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d50:	d82a      	bhi.n	d4da8 <_Z21setWaterDurationLunch6String+0x6c>
  sysStatus.wateringDurationLunch = tempDuration;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d52:	4a18      	ldr	r2, [pc, #96]	; (d4db4 <_Z21setWaterDurationLunch6String+0x78>)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringDurationLunch = tempDuration;
   d4d54:	4c18      	ldr	r4, [pc, #96]	; (d4db8 <_Z21setWaterDurationLunch6String+0x7c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d56:	2101      	movs	r1, #1
   d4d58:	7011      	strb	r1, [r2, #0]
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringDurationLunch = tempDuration;
   d4d5a:	6260      	str	r0, [r4, #36]	; 0x24
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Lunch Watering Duration set to %i",sysStatus.wateringDurationLunch);
   d4d5c:	4a17      	ldr	r2, [pc, #92]	; (d4dbc <_Z21setWaterDurationLunch6String+0x80>)
   d4d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d62:	a806      	add	r0, sp, #24
   d4d64:	f001 fd78 	bl	d6858 <snprintf>

  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4d68:	4815      	ldr	r0, [pc, #84]	; (d4dc0 <_Z21setWaterDurationLunch6String+0x84>)
   d4d6a:	f7ff fadc 	bl	d4326 <_ZNK5Timer8isActiveEv>
   d4d6e:	b140      	cbz	r0, d4d82 <_Z21setWaterDurationLunch6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationLunch);
   d4d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4d72:	4813      	ldr	r0, [pc, #76]	; (d4dc0 <_Z21setWaterDurationLunch6String+0x84>)
   d4d74:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4d78:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4d7c:	4359      	muls	r1, r3
   d4d7e:	f7ff fac1 	bl	d4304 <_ZN5Timer12changePeriodEjj>
  }

  waitUntil(meterParticlePublish);
   d4d82:	f7ff fc4d 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4d86:	f001 fcb7 	bl	d66f8 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4d8a:	b178      	cbz	r0, d4dac <_Z21setWaterDurationLunch6String+0x70>
   d4d8c:	4b0d      	ldr	r3, [pc, #52]	; (d4dc4 <_Z21setWaterDurationLunch6String+0x88>)
   d4d8e:	490e      	ldr	r1, [pc, #56]	; (d4dc8 <_Z21setWaterDurationLunch6String+0x8c>)
   d4d90:	781b      	ldrb	r3, [r3, #0]
   d4d92:	2200      	movs	r2, #0
   d4d94:	f88d 2000 	strb.w	r2, [sp]
   d4d98:	a804      	add	r0, sp, #16
   d4d9a:	aa06      	add	r2, sp, #24
   d4d9c:	f7ff f9e8 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4da0:	a805      	add	r0, sp, #20
   d4da2:	f7ff fd8f 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4da6:	e001      	b.n	d4dac <_Z21setWaterDurationLunch6String+0x70>
int setWaterDurationLunch(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4da8:	2000      	movs	r0, #0
   d4daa:	e000      	b.n	d4dae <_Z21setWaterDurationLunch6String+0x72>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationLunch);
  }

  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
  return 1;
   d4dac:	2001      	movs	r0, #1
}
   d4dae:	b046      	add	sp, #280	; 0x118
   d4db0:	bd10      	pop	{r4, pc}
   d4db2:	bf00      	nop
   d4db4:	2003e1e6 	.word	0x2003e1e6
   d4db8:	2003e2fc 	.word	0x2003e2fc
   d4dbc:	000dba5a 	.word	0x000dba5a
   d4dc0:	2003e204 	.word	0x2003e204
   d4dc4:	2003e1c8 	.word	0x2003e1c8
   d4dc8:	000dba51 	.word	0x000dba51

000d4dcc <_Z23setWaterDurationEvening6String>:

int setWaterDurationEvening(String command)
{
   d4dcc:	b510      	push	{r4, lr}
   d4dce:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4dd0:	220a      	movs	r2, #10
   d4dd2:	a903      	add	r1, sp, #12
   d4dd4:	6800      	ldr	r0, [r0, #0]
   d4dd6:	f005 f9e9 	bl	da1ac <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4dda:	1e42      	subs	r2, r0, #1
   d4ddc:	2a36      	cmp	r2, #54	; 0x36

int setWaterDurationEvening(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4dde:	4603      	mov	r3, r0
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4de0:	d82a      	bhi.n	d4e38 <_Z23setWaterDurationEvening6String+0x6c>
  sysStatus.wateringDurationEvening = tempDuration;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4de2:	4a18      	ldr	r2, [pc, #96]	; (d4e44 <_Z23setWaterDurationEvening6String+0x78>)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringDurationEvening = tempDuration;
   d4de4:	4c18      	ldr	r4, [pc, #96]	; (d4e48 <_Z23setWaterDurationEvening6String+0x7c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4de6:	2101      	movs	r1, #1
   d4de8:	7011      	strb	r1, [r2, #0]
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringDurationEvening = tempDuration;
   d4dea:	62a0      	str	r0, [r4, #40]	; 0x28
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Morning Watering Duration set to %i",sysStatus.wateringDurationEvening);
   d4dec:	4a17      	ldr	r2, [pc, #92]	; (d4e4c <_Z23setWaterDurationEvening6String+0x80>)
   d4dee:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4df2:	a806      	add	r0, sp, #24
   d4df4:	f001 fd30 	bl	d6858 <snprintf>

  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4df8:	4815      	ldr	r0, [pc, #84]	; (d4e50 <_Z23setWaterDurationEvening6String+0x84>)
   d4dfa:	f7ff fa94 	bl	d4326 <_ZNK5Timer8isActiveEv>
   d4dfe:	b140      	cbz	r0, d4e12 <_Z23setWaterDurationEvening6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationEvening);
   d4e00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4e02:	4813      	ldr	r0, [pc, #76]	; (d4e50 <_Z23setWaterDurationEvening6String+0x84>)
   d4e04:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4e08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4e0c:	4359      	muls	r1, r3
   d4e0e:	f7ff fa79 	bl	d4304 <_ZN5Timer12changePeriodEjj>
  }

  waitUntil(meterParticlePublish);
   d4e12:	f7ff fc05 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4e16:	f001 fc6f 	bl	d66f8 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4e1a:	b178      	cbz	r0, d4e3c <_Z23setWaterDurationEvening6String+0x70>
   d4e1c:	4b0d      	ldr	r3, [pc, #52]	; (d4e54 <_Z23setWaterDurationEvening6String+0x88>)
   d4e1e:	490e      	ldr	r1, [pc, #56]	; (d4e58 <_Z23setWaterDurationEvening6String+0x8c>)
   d4e20:	781b      	ldrb	r3, [r3, #0]
   d4e22:	2200      	movs	r2, #0
   d4e24:	f88d 2000 	strb.w	r2, [sp]
   d4e28:	a804      	add	r0, sp, #16
   d4e2a:	aa06      	add	r2, sp, #24
   d4e2c:	f7ff f9a0 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4e30:	a805      	add	r0, sp, #20
   d4e32:	f7ff fd47 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e36:	e001      	b.n	d4e3c <_Z23setWaterDurationEvening6String+0x70>
int setWaterDurationEvening(String command)
{
  char * pEND;
  char data[256];
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e38:	2000      	movs	r0, #0
   d4e3a:	e000      	b.n	d4e3e <_Z23setWaterDurationEvening6String+0x72>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationEvening);
  }

  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
  return 1;
   d4e3c:	2001      	movs	r0, #1
}
   d4e3e:	b046      	add	sp, #280	; 0x118
   d4e40:	bd10      	pop	{r4, pc}
   d4e42:	bf00      	nop
   d4e44:	2003e1e6 	.word	0x2003e1e6
   d4e48:	2003e2fc 	.word	0x2003e2fc
   d4e4c:	000dba2d 	.word	0x000dba2d
   d4e50:	2003e204 	.word	0x2003e204
   d4e54:	2003e1c8 	.word	0x2003e1c8
   d4e58:	000dba51 	.word	0x000dba51

000d4e5c <_Z17setWaterThreshold6String>:
  if (Particle.connected()) Particle.publish("Window",data, PRIVATE);
  return 1;
}

int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4e5c:	b570      	push	{r4, r5, r6, lr}
   d4e5e:	b086      	sub	sp, #24
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4e60:	a903      	add	r1, sp, #12
   d4e62:	6800      	ldr	r0, [r0, #0]
   d4e64:	f005 f8fc 	bl	da060 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4e68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e70:	d42f      	bmi.n	d4ed2 <_Z17setWaterThreshold6String+0x76>
   d4e72:	eddf 7a1a 	vldr	s15, [pc, #104]	; d4edc <_Z17setWaterThreshold6String+0x80>
   d4e76:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e7e:	bfcc      	ite	gt
   d4e80:	2501      	movgt	r5, #1
   d4e82:	2500      	movle	r5, #0
   d4e84:	bb2d      	cbnz	r5, d4ed2 <_Z17setWaterThreshold6String+0x76>
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
  systemStatusWriteNeeded = true;
   d4e86:	4b16      	ldr	r3, [pc, #88]	; (d4ee0 <_Z17setWaterThreshold6String+0x84>)
int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4e88:	4e16      	ldr	r6, [pc, #88]	; (d4ee4 <_Z17setWaterThreshold6String+0x88>)
  systemStatusWriteNeeded = true;
   d4e8a:	2401      	movs	r4, #1
   d4e8c:	701c      	strb	r4, [r3, #0]
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4e8e:	ee10 0a10 	vmov	r0, s0
int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4e92:	ed86 0a0b 	vstr	s0, [r6, #44]	; 0x2c
  systemStatusWriteNeeded = true;
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4e96:	f003 fd47 	bl	d8928 <__aeabi_f2d>
   d4e9a:	4a13      	ldr	r2, [pc, #76]	; (d4ee8 <_Z17setWaterThreshold6String+0x8c>)
   d4e9c:	e9cd 0100 	strd	r0, r1, [sp]
   d4ea0:	2108      	movs	r1, #8
   d4ea2:	4812      	ldr	r0, [pc, #72]	; (d4eec <_Z17setWaterThreshold6String+0x90>)
   d4ea4:	f001 fcd8 	bl	d6858 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4ea8:	7933      	ldrb	r3, [r6, #4]
   d4eaa:	b1a3      	cbz	r3, d4ed6 <_Z17setWaterThreshold6String+0x7a>
   d4eac:	f001 fc24 	bl	d66f8 <spark_cloud_flag_connected>
   d4eb0:	b188      	cbz	r0, d4ed6 <_Z17setWaterThreshold6String+0x7a>
    waitUntil(meterParticlePublish);
   d4eb2:	f7ff fbb5 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4eb6:	4b0e      	ldr	r3, [pc, #56]	; (d4ef0 <_Z17setWaterThreshold6String+0x94>)
    Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d4eb8:	4a0c      	ldr	r2, [pc, #48]	; (d4eec <_Z17setWaterThreshold6String+0x90>)
   d4eba:	781b      	ldrb	r3, [r3, #0]
   d4ebc:	490d      	ldr	r1, [pc, #52]	; (d4ef4 <_Z17setWaterThreshold6String+0x98>)
   d4ebe:	f88d 5000 	strb.w	r5, [sp]
   d4ec2:	a804      	add	r0, sp, #16
   d4ec4:	f7ff f954 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4ec8:	a805      	add	r0, sp, #20
   d4eca:	f7ff fcfb 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ece:	4620      	mov	r0, r4
   d4ed0:	e002      	b.n	d4ed8 <_Z17setWaterThreshold6String+0x7c>

int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4ed2:	2000      	movs	r0, #0
   d4ed4:	e000      	b.n	d4ed8 <_Z17setWaterThreshold6String+0x7c>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4ed6:	2001      	movs	r0, #1
}
   d4ed8:	b006      	add	sp, #24
   d4eda:	bd70      	pop	{r4, r5, r6, pc}
   d4edc:	42c80000 	.word	0x42c80000
   d4ee0:	2003e1e6 	.word	0x2003e1e6
   d4ee4:	2003e2fc 	.word	0x2003e2fc
   d4ee8:	000dbaa0 	.word	0x000dbaa0
   d4eec:	2003e25c 	.word	0x2003e25c
   d4ef0:	2003e1c8 	.word	0x2003e1c8
   d4ef4:	000dbcbf 	.word	0x000dbcbf

000d4ef8 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4ef8:	b530      	push	{r4, r5, lr}
   d4efa:	4916      	ldr	r1, [pc, #88]	; (d4f54 <_Z14setVerboseMode6String+0x5c>)
   d4efc:	b085      	sub	sp, #20
   d4efe:	4604      	mov	r4, r0
   d4f00:	f002 fd8b 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4f04:	4605      	mov	r5, r0
   d4f06:	b158      	cbz	r0, d4f20 <_Z14setVerboseMode6String+0x28>
  {
    sysStatus.verboseMode = true;
   d4f08:	4b13      	ldr	r3, [pc, #76]	; (d4f58 <_Z14setVerboseMode6String+0x60>)
   d4f0a:	2401      	movs	r4, #1
   d4f0c:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4f0e:	4b13      	ldr	r3, [pc, #76]	; (d4f5c <_Z14setVerboseMode6String+0x64>)
   d4f10:	701c      	strb	r4, [r3, #0]
   d4f12:	4b13      	ldr	r3, [pc, #76]	; (d4f60 <_Z14setVerboseMode6String+0x68>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4f14:	2200      	movs	r2, #0
   d4f16:	781b      	ldrb	r3, [r3, #0]
   d4f18:	f88d 2000 	strb.w	r2, [sp]
   d4f1c:	4a11      	ldr	r2, [pc, #68]	; (d4f64 <_Z14setVerboseMode6String+0x6c>)
   d4f1e:	e00e      	b.n	d4f3e <_Z14setVerboseMode6String+0x46>
   d4f20:	4911      	ldr	r1, [pc, #68]	; (d4f68 <_Z14setVerboseMode6String+0x70>)
   d4f22:	4620      	mov	r0, r4
   d4f24:	f002 fd79 	bl	d7a1a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4f28:	b188      	cbz	r0, d4f4e <_Z14setVerboseMode6String+0x56>
  {
    sysStatus.verboseMode = false;
   d4f2a:	4b0b      	ldr	r3, [pc, #44]	; (d4f58 <_Z14setVerboseMode6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f2c:	4a0f      	ldr	r2, [pc, #60]	; (d4f6c <_Z14setVerboseMode6String+0x74>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
   d4f2e:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4f30:	4b0a      	ldr	r3, [pc, #40]	; (d4f5c <_Z14setVerboseMode6String+0x64>)
   d4f32:	2401      	movs	r4, #1
   d4f34:	701c      	strb	r4, [r3, #0]
   d4f36:	4b0a      	ldr	r3, [pc, #40]	; (d4f60 <_Z14setVerboseMode6String+0x68>)
   d4f38:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f3a:	f88d 5000 	strb.w	r5, [sp]
   d4f3e:	490c      	ldr	r1, [pc, #48]	; (d4f70 <_Z14setVerboseMode6String+0x78>)
   d4f40:	a802      	add	r0, sp, #8
   d4f42:	f7ff f915 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4f46:	a803      	add	r0, sp, #12
   d4f48:	f7ff fcbc 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f4c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4f4e:	b005      	add	sp, #20
   d4f50:	bd30      	pop	{r4, r5, pc}
   d4f52:	bf00      	nop
   d4f54:	000dbeac 	.word	0x000dbeac
   d4f58:	2003e2fc 	.word	0x2003e2fc
   d4f5c:	2003e1e6 	.word	0x2003e1e6
   d4f60:	2003e1c8 	.word	0x2003e1c8
   d4f64:	000dbaa9 	.word	0x000dbaa9
   d4f68:	000db981 	.word	0x000db981
   d4f6c:	000dbaba 	.word	0x000dbaba
   d4f70:	000dbaca 	.word	0x000dbaca

000d4f74 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4f74:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4f76:	4929      	ldr	r1, [pc, #164]	; (d501c <_Z15setLowPowerMode6String+0xa8>)
   d4f78:	b085      	sub	sp, #20
   d4f7a:	4604      	mov	r4, r0
   d4f7c:	f002 fd4d 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4f80:	b928      	cbnz	r0, d4f8e <_Z15setLowPowerMode6String+0x1a>
   d4f82:	4927      	ldr	r1, [pc, #156]	; (d5020 <_Z15setLowPowerMode6String+0xac>)
   d4f84:	4620      	mov	r0, r4
   d4f86:	f002 fd48 	bl	d7a1a <_ZNK6String6equalsEPKc>
   d4f8a:	2800      	cmp	r0, #0
   d4f8c:	d043      	beq.n	d5016 <_Z15setLowPowerMode6String+0xa2>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4f8e:	4923      	ldr	r1, [pc, #140]	; (d501c <_Z15setLowPowerMode6String+0xa8>)
   d4f90:	4620      	mov	r0, r4
   d4f92:	f002 fd42 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4f96:	b1a8      	cbz	r0, d4fc4 <_Z15setLowPowerMode6String+0x50>
   d4f98:	f001 fbae 	bl	d66f8 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4f9c:	b170      	cbz	r0, d4fbc <_Z15setLowPowerMode6String+0x48>
      waitUntil(meterParticlePublish);
   d4f9e:	f7ff fb3f 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4fa2:	4b20      	ldr	r3, [pc, #128]	; (d5024 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4fa4:	4920      	ldr	r1, [pc, #128]	; (d5028 <_Z15setLowPowerMode6String+0xb4>)
   d4fa6:	781b      	ldrb	r3, [r3, #0]
   d4fa8:	2200      	movs	r2, #0
   d4faa:	f88d 2000 	strb.w	r2, [sp]
   d4fae:	a802      	add	r0, sp, #8
   d4fb0:	4a1e      	ldr	r2, [pc, #120]	; (d502c <_Z15setLowPowerMode6String+0xb8>)
   d4fb2:	f7ff f8dd 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4fb6:	a803      	add	r0, sp, #12
   d4fb8:	f7ff fc84 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
   d4fbc:	4b1c      	ldr	r3, [pc, #112]	; (d5030 <_Z15setLowPowerMode6String+0xbc>)
   d4fbe:	2201      	movs	r2, #1
   d4fc0:	719a      	strb	r2, [r3, #6]
   d4fc2:	e025      	b.n	d5010 <_Z15setLowPowerMode6String+0x9c>
   d4fc4:	4916      	ldr	r1, [pc, #88]	; (d5020 <_Z15setLowPowerMode6String+0xac>)
   d4fc6:	4620      	mov	r0, r4
   d4fc8:	f002 fd27 	bl	d7a1a <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4fcc:	b300      	cbz	r0, d5010 <_Z15setLowPowerMode6String+0x9c>
   d4fce:	f001 fb93 	bl	d66f8 <spark_cloud_flag_connected>
   d4fd2:	4c17      	ldr	r4, [pc, #92]	; (d5030 <_Z15setLowPowerMode6String+0xbc>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4fd4:	b918      	cbnz	r0, d4fde <_Z15setLowPowerMode6String+0x6a>
      connectToParticle();
   d4fd6:	f7ff fa3f 	bl	d4458 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4fda:	2301      	movs	r3, #1
   d4fdc:	70e3      	strb	r3, [r4, #3]
    }
    waitUntil(meterParticlePublish);
   d4fde:	f7ff fb1f 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d4fe2:	4b10      	ldr	r3, [pc, #64]	; (d5024 <_Z15setLowPowerMode6String+0xb0>)
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4fe4:	4a13      	ldr	r2, [pc, #76]	; (d5034 <_Z15setLowPowerMode6String+0xc0>)
   d4fe6:	781b      	ldrb	r3, [r3, #0]
   d4fe8:	490f      	ldr	r1, [pc, #60]	; (d5028 <_Z15setLowPowerMode6String+0xb4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4fea:	2500      	movs	r5, #0
   d4fec:	a802      	add	r0, sp, #8
   d4fee:	f88d 5000 	strb.w	r5, [sp]
   d4ff2:	f7ff f8bd 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d4ff6:	a803      	add	r0, sp, #12
   d4ff8:	f7ff fc64 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5000:	f001 fc4e 	bl	d68a0 <delay>
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
   d5004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5008:	480b      	ldr	r0, [pc, #44]	; (d5038 <_Z15setLowPowerMode6String+0xc4>)
   d500a:	f7ff f9d3 	bl	d43b4 <_ZN5Timer5startEj>
    sysStatus.lowPowerMode = false;                                   // update the system variable to reflect the new lowPowerMode
   d500e:	71a5      	strb	r5, [r4, #6]
  }
  systemStatusWriteNeeded = true;
   d5010:	4b0a      	ldr	r3, [pc, #40]	; (d503c <_Z15setLowPowerMode6String+0xc8>)
   d5012:	2001      	movs	r0, #1
   d5014:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d5016:	b005      	add	sp, #20
   d5018:	bd30      	pop	{r4, r5, pc}
   d501a:	bf00      	nop
   d501c:	000dbeac 	.word	0x000dbeac
   d5020:	000db981 	.word	0x000db981
   d5024:	2003e1c8 	.word	0x2003e1c8
   d5028:	000dbaca 	.word	0x000dbaca
   d502c:	000dbacf 	.word	0x000dbacf
   d5030:	2003e2fc 	.word	0x2003e2fc
   d5034:	000dbade 	.word	0x000dbade
   d5038:	2003e1e8 	.word	0x2003e1e8
   d503c:	2003e1e6 	.word	0x2003e1e6

000d5040 <_Z12controlValve6String>:

int controlValve(String command)                                   // Function to force sending data in current hour
{
   d5040:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5042:	4926      	ldr	r1, [pc, #152]	; (d50dc <_Z12controlValve6String+0x9c>)
   d5044:	b085      	sub	sp, #20
   d5046:	4604      	mov	r4, r0
   d5048:	f002 fce7 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
   d504c:	b928      	cbnz	r0, d505a <_Z12controlValve6String+0x1a>
   d504e:	4924      	ldr	r1, [pc, #144]	; (d50e0 <_Z12controlValve6String+0xa0>)
   d5050:	4620      	mov	r0, r4
   d5052:	f002 fce2 	bl	d7a1a <_ZNK6String6equalsEPKc>
   d5056:	2800      	cmp	r0, #0
   d5058:	d03d      	beq.n	d50d6 <_Z12controlValve6String+0x96>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d505a:	4620      	mov	r0, r4
   d505c:	491f      	ldr	r1, [pc, #124]	; (d50dc <_Z12controlValve6String+0x9c>)
   d505e:	4d21      	ldr	r5, [pc, #132]	; (d50e4 <_Z12controlValve6String+0xa4>)
   d5060:	4e21      	ldr	r6, [pc, #132]	; (d50e8 <_Z12controlValve6String+0xa8>)
   d5062:	4f22      	ldr	r7, [pc, #136]	; (d50ec <_Z12controlValve6String+0xac>)
   d5064:	f002 fcd9 	bl	d7a1a <_ZNK6String6equalsEPKc>
  else if (command == "1") {                                     // Open the water valve
   d5068:	4604      	mov	r4, r0
   d506a:	b1b0      	cbz	r0, d509a <_Z12controlValve6String+0x5a>
    current.solenoidState = true;
   d506c:	2401      	movs	r4, #1
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d506e:	4621      	mov	r1, r4
   d5070:	2002      	movs	r0, #2

int controlValve(String command)                                   // Function to force sending data in current hour
{
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
  else if (command == "1") {                                     // Open the water valve
    current.solenoidState = true;
   d5072:	60ec      	str	r4, [r5, #12]
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d5074:	f003 f8b1 	bl	d81da <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d5078:	2100      	movs	r1, #0
   d507a:	2003      	movs	r0, #3
   d507c:	f003 f8ad 	bl	d81da <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d5080:	6970      	ldr	r0, [r6, #20]
   d5082:	f001 fc0d 	bl	d68a0 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d5086:	4621      	mov	r1, r4
   d5088:	2003      	movs	r0, #3
   d508a:	f003 f8a6 	bl	d81da <digitalWrite>
   d508e:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5090:	783b      	ldrb	r3, [r7, #0]
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d5092:	f88d 2000 	strb.w	r2, [sp]
   d5096:	4a16      	ldr	r2, [pc, #88]	; (d50f0 <_Z12controlValve6String+0xb0>)
   d5098:	e013      	b.n	d50c2 <_Z12controlValve6String+0x82>
  }
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
   d509a:	4621      	mov	r1, r4
   d509c:	2002      	movs	r0, #2
   d509e:	f003 f89c 	bl	d81da <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d50a2:	4621      	mov	r1, r4
   d50a4:	2003      	movs	r0, #3
   d50a6:	f003 f898 	bl	d81da <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d50aa:	6970      	ldr	r0, [r6, #20]
   d50ac:	f001 fbf8 	bl	d68a0 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d50b0:	2101      	movs	r1, #1
   d50b2:	2003      	movs	r0, #3
   d50b4:	f003 f891 	bl	d81da <digitalWrite>
    current.solenoidState = false;
    Particle.publish("Watering","Close the valve",PRIVATE);
   d50b8:	4a0e      	ldr	r2, [pc, #56]	; (d50f4 <_Z12controlValve6String+0xb4>)
   d50ba:	783b      	ldrb	r3, [r7, #0]
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
    delay(sysStatus.solenoidHoldTime);
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
    current.solenoidState = false;
   d50bc:	60ec      	str	r4, [r5, #12]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d50be:	f88d 4000 	strb.w	r4, [sp]
   d50c2:	490d      	ldr	r1, [pc, #52]	; (d50f8 <_Z12controlValve6String+0xb8>)
   d50c4:	a802      	add	r0, sp, #8
   d50c6:	f7ff f853 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d50ca:	a803      	add	r0, sp, #12
   d50cc:	f7ff fbfa 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  currentStatusWriteNeeded = true;
   d50d0:	4b0a      	ldr	r3, [pc, #40]	; (d50fc <_Z12controlValve6String+0xbc>)
   d50d2:	2001      	movs	r0, #1
   d50d4:	7018      	strb	r0, [r3, #0]
  return true;
}
   d50d6:	b005      	add	sp, #20
   d50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50da:	bf00      	nop
   d50dc:	000dbeac 	.word	0x000dbeac
   d50e0:	000db981 	.word	0x000db981
   d50e4:	2003e2b0 	.word	0x2003e2b0
   d50e8:	2003e2fc 	.word	0x2003e2fc
   d50ec:	2003e1c8 	.word	0x2003e1c8
   d50f0:	000dbaf0 	.word	0x000dbaf0
   d50f4:	000dbb08 	.word	0x000dbb08
   d50f8:	000dbaff 	.word	0x000dbaff
   d50fc:	2003e220 	.word	0x2003e220

000d5100 <_Z18setSolenoidPresent6String>:
  }
  else return 0;
}

int setSolenoidPresent(String command) // Function to force sending data in current hour
{
   d5100:	b530      	push	{r4, r5, lr}
   d5102:	b087      	sub	sp, #28
  controlValve("0");                                            // Make sure it is turned off
   d5104:	491a      	ldr	r1, [pc, #104]	; (d5170 <_Z18setSolenoidPresent6String+0x70>)
  }
  else return 0;
}

int setSolenoidPresent(String command) // Function to force sending data in current hour
{
   d5106:	4604      	mov	r4, r0
  controlValve("0");                                            // Make sure it is turned off
   d5108:	a802      	add	r0, sp, #8
   d510a:	f002 fc59 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d510e:	a802      	add	r0, sp, #8
   d5110:	f7ff ff96 	bl	d5040 <_Z12controlValve6String>
   d5114:	a802      	add	r0, sp, #8
   d5116:	f002 fc0c 	bl	d7932 <_ZN6StringD1Ev>
   d511a:	4916      	ldr	r1, [pc, #88]	; (d5174 <_Z18setSolenoidPresent6String+0x74>)
   d511c:	4620      	mov	r0, r4
   d511e:	f002 fc7c 	bl	d7a1a <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d5122:	4605      	mov	r5, r0
   d5124:	b158      	cbz	r0, d513e <_Z18setSolenoidPresent6String+0x3e>
    sysStatus.solenoidConfig = 1;
   d5126:	4b14      	ldr	r3, [pc, #80]	; (d5178 <_Z18setSolenoidPresent6String+0x78>)
   d5128:	2401      	movs	r4, #1
   d512a:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d512c:	4b13      	ldr	r3, [pc, #76]	; (d517c <_Z18setSolenoidPresent6String+0x7c>)
   d512e:	701c      	strb	r4, [r3, #0]
   d5130:	4b13      	ldr	r3, [pc, #76]	; (d5180 <_Z18setSolenoidPresent6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5132:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5134:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d5136:	f88d 2000 	strb.w	r2, [sp]
   d513a:	4a12      	ldr	r2, [pc, #72]	; (d5184 <_Z18setSolenoidPresent6String+0x84>)
   d513c:	e00e      	b.n	d515c <_Z18setSolenoidPresent6String+0x5c>
   d513e:	490c      	ldr	r1, [pc, #48]	; (d5170 <_Z18setSolenoidPresent6String+0x70>)
   d5140:	4620      	mov	r0, r4
   d5142:	f002 fc6a 	bl	d7a1a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0") {
   d5146:	b188      	cbz	r0, d516c <_Z18setSolenoidPresent6String+0x6c>
    sysStatus.solenoidConfig = 0;
   d5148:	4b0b      	ldr	r3, [pc, #44]	; (d5178 <_Z18setSolenoidPresent6String+0x78>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d514a:	4a0f      	ldr	r2, [pc, #60]	; (d5188 <_Z18setSolenoidPresent6String+0x88>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Solenoid Attached",PRIVATE);
    return 1;
  }
  else if (command == "0") {
    sysStatus.solenoidConfig = 0;
   d514c:	745d      	strb	r5, [r3, #17]
    systemStatusWriteNeeded = true;
   d514e:	4b0b      	ldr	r3, [pc, #44]	; (d517c <_Z18setSolenoidPresent6String+0x7c>)
   d5150:	2401      	movs	r4, #1
   d5152:	701c      	strb	r4, [r3, #0]
   d5154:	4b0a      	ldr	r3, [pc, #40]	; (d5180 <_Z18setSolenoidPresent6String+0x80>)
   d5156:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d5158:	f88d 5000 	strb.w	r5, [sp]
   d515c:	490b      	ldr	r1, [pc, #44]	; (d518c <_Z18setSolenoidPresent6String+0x8c>)
   d515e:	a802      	add	r0, sp, #8
   d5160:	f7ff f806 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d5164:	a803      	add	r0, sp, #12
   d5166:	f7ff fbad 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d516a:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d516c:	b007      	add	sp, #28
   d516e:	bd30      	pop	{r4, r5, pc}
   d5170:	000db981 	.word	0x000db981
   d5174:	000dbeac 	.word	0x000dbeac
   d5178:	2003e2fc 	.word	0x2003e2fc
   d517c:	2003e1e6 	.word	0x2003e1e6
   d5180:	2003e1c8 	.word	0x2003e1c8
   d5184:	000dbb1b 	.word	0x000dbb1b
   d5188:	000dbb18 	.word	0x000dbb18
   d518c:	000db993 	.word	0x000db993

000d5190 <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d5190:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5192:	4d13      	ldr	r5, [pc, #76]	; (d51e0 <_Z22publishStateTransitionv+0x50>)
   d5194:	4c13      	ldr	r4, [pc, #76]	; (d51e4 <_Z22publishStateTransitionv+0x54>)
   d5196:	4914      	ldr	r1, [pc, #80]	; (d51e8 <_Z22publishStateTransitionv+0x58>)
   d5198:	782a      	ldrb	r2, [r5, #0]
   d519a:	7820      	ldrb	r0, [r4, #0]
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d519c:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d519e:	230e      	movs	r3, #14
   d51a0:	fb03 1202 	mla	r2, r3, r2, r1
   d51a4:	9200      	str	r2, [sp, #0]
   d51a6:	fb03 1300 	mla	r3, r3, r0, r1
   d51aa:	4a10      	ldr	r2, [pc, #64]	; (d51ec <_Z22publishStateTransitionv+0x5c>)
   d51ac:	2128      	movs	r1, #40	; 0x28
   d51ae:	a804      	add	r0, sp, #16
   d51b0:	f001 fb52 	bl	d6858 <snprintf>
  oldState = state;
   d51b4:	782b      	ldrb	r3, [r5, #0]
   d51b6:	7023      	strb	r3, [r4, #0]
   d51b8:	f001 fa9e 	bl	d66f8 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d51bc:	b170      	cbz	r0, d51dc <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d51be:	f7ff fa2f 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d51c2:	4b0b      	ldr	r3, [pc, #44]	; (d51f0 <_Z22publishStateTransitionv+0x60>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d51c4:	490b      	ldr	r1, [pc, #44]	; (d51f4 <_Z22publishStateTransitionv+0x64>)
   d51c6:	781b      	ldrb	r3, [r3, #0]
   d51c8:	2200      	movs	r2, #0
   d51ca:	f88d 2000 	strb.w	r2, [sp]
   d51ce:	a802      	add	r0, sp, #8
   d51d0:	aa04      	add	r2, sp, #16
   d51d2:	f7fe ffcd 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d51d6:	a803      	add	r0, sp, #12
   d51d8:	f7ff fb74 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d51dc:	b00f      	add	sp, #60	; 0x3c
   d51de:	bd30      	pop	{r4, r5, pc}
   d51e0:	2003e1e7 	.word	0x2003e1e7
   d51e4:	2003e1d5 	.word	0x2003e1d5
   d51e8:	2003e03c 	.word	0x2003e03c
   d51ec:	000dbb2d 	.word	0x000dbb2d
   d51f0:	2003e1c8 	.word	0x2003e1c8
   d51f4:	000dbb3b 	.word	0x000dbb3b

000d51f8 <loop>:

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d51f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(state) {
   d51fc:	4c93      	ldr	r4, [pc, #588]	; (d544c <loop+0x254>)
   d51fe:	7823      	ldrb	r3, [r4, #0]
   d5200:	3b01      	subs	r3, #1

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d5202:	b08a      	sub	sp, #40	; 0x28
  switch(state) {
   d5204:	2b07      	cmp	r3, #7
   d5206:	f200 8329 	bhi.w	d585c <loop+0x664>
   d520a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d520e:	020e      	.short	0x020e
   d5210:	004e0008 	.word	0x004e0008
   d5214:	00b1007f 	.word	0x00b1007f
   d5218:	010900d7 	.word	0x010900d7
   d521c:	01b5      	.short	0x01b5
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d521e:	4d8c      	ldr	r5, [pc, #560]	; (d5450 <loop+0x258>)
   d5220:	792b      	ldrb	r3, [r5, #4]
   d5222:	b12b      	cbz	r3, d5230 <loop+0x38>
   d5224:	4b8b      	ldr	r3, [pc, #556]	; (d5454 <loop+0x25c>)
   d5226:	781b      	ldrb	r3, [r3, #0]
   d5228:	2b02      	cmp	r3, #2
   d522a:	d001      	beq.n	d5230 <loop+0x38>
   d522c:	f7ff ffb0 	bl	d5190 <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d5230:	4e89      	ldr	r6, [pc, #548]	; (d5458 <loop+0x260>)
   d5232:	7833      	ldrb	r3, [r6, #0]
   d5234:	b143      	cbz	r3, d5248 <loop+0x50>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5236:	f003 f813 	bl	d8260 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d523a:	2234      	movs	r2, #52	; 0x34
   d523c:	4984      	ldr	r1, [pc, #528]	; (d5450 <loop+0x258>)
   d523e:	2001      	movs	r0, #1
   d5240:	f001 f860 	bl	d6304 <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d5244:	2300      	movs	r3, #0
   d5246:	7033      	strb	r3, [r6, #0]
    }
    if (currentStatusWriteNeeded) {
   d5248:	4e84      	ldr	r6, [pc, #528]	; (d545c <loop+0x264>)
   d524a:	7833      	ldrb	r3, [r6, #0]
   d524c:	b143      	cbz	r3, d5260 <loop+0x68>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d524e:	f003 f807 	bl	d8260 <_Z21__fetch_global_EEPROMv>
   d5252:	2224      	movs	r2, #36	; 0x24
   d5254:	4982      	ldr	r1, [pc, #520]	; (d5460 <loop+0x268>)
   d5256:	2050      	movs	r0, #80	; 0x50
   d5258:	f001 f854 	bl	d6304 <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d525c:	2300      	movs	r3, #0
   d525e:	7033      	strb	r3, [r6, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp > stayAwake) && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d5260:	79ab      	ldrb	r3, [r5, #6]
   d5262:	b163      	cbz	r3, d527e <loop+0x86>
   d5264:	f001 f826 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
   d5268:	4b7e      	ldr	r3, [pc, #504]	; (d5464 <loop+0x26c>)
   d526a:	681b      	ldr	r3, [r3, #0]
   d526c:	1ac0      	subs	r0, r0, r3
   d526e:	4b7e      	ldr	r3, [pc, #504]	; (d5468 <loop+0x270>)
   d5270:	4298      	cmp	r0, r3
   d5272:	d904      	bls.n	d527e <loop+0x86>
   d5274:	4b7a      	ldr	r3, [pc, #488]	; (d5460 <loop+0x268>)
   d5276:	68db      	ldr	r3, [r3, #12]
   d5278:	2b00      	cmp	r3, #0
   d527a:	f000 8249 	beq.w	d5710 <loop+0x518>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d527e:	f002 fda1 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d5282:	4b7a      	ldr	r3, [pc, #488]	; (d546c <loop+0x274>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d5284:	68aa      	ldr	r2, [r5, #8]
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp > stayAwake) && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d5286:	781b      	ldrb	r3, [r3, #0]
   d5288:	4298      	cmp	r0, r3
   d528a:	bf1c      	itt	ne
   d528c:	2303      	movne	r3, #3
   d528e:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d5290:	4b77      	ldr	r3, [pc, #476]	; (d5470 <loop+0x278>)
   d5292:	681b      	ldr	r3, [r3, #0]
   d5294:	429a      	cmp	r2, r3
   d5296:	bfdc      	itt	le
   d5298:	2308      	movle	r3, #8
   d529a:	7023      	strble	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                 // Most important - turn off water when done!
   d529c:	4b75      	ldr	r3, [pc, #468]	; (d5474 <loop+0x27c>)
   d529e:	781b      	ldrb	r3, [r3, #0]
   d52a0:	2b00      	cmp	r3, #0
   d52a2:	f000 82db 	beq.w	d585c <loop+0x664>
   d52a6:	2304      	movs	r3, #4
   d52a8:	e02e      	b.n	d5308 <loop+0x110>
    break;

  case MEASURING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52aa:	4d69      	ldr	r5, [pc, #420]	; (d5450 <loop+0x258>)
   d52ac:	792b      	ldrb	r3, [r5, #4]
   d52ae:	b12b      	cbz	r3, d52bc <loop+0xc4>
   d52b0:	4b68      	ldr	r3, [pc, #416]	; (d5454 <loop+0x25c>)
   d52b2:	781b      	ldrb	r3, [r3, #0]
   d52b4:	2b03      	cmp	r3, #3
   d52b6:	d001      	beq.n	d52bc <loop+0xc4>
   d52b8:	f7ff ff6a 	bl	d5190 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d52bc:	f7ff fa30 	bl	d4720 <_Z16takeMeasurementsv>
   d52c0:	4606      	mov	r6, r0
   d52c2:	b9e8      	cbnz	r0, d5300 <loop+0x108>
    {
      state = ERROR_STATE;
   d52c4:	2301      	movs	r3, #1
   d52c6:	7023      	strb	r3, [r4, #0]
   d52c8:	f000 fff4 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d52cc:	4b6a      	ldr	r3, [pc, #424]	; (d5478 <loop+0x280>)
   d52ce:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d52d0:	792b      	ldrb	r3, [r5, #4]
   d52d2:	2b00      	cmp	r3, #0
   d52d4:	f000 82c2 	beq.w	d585c <loop+0x664>
   d52d8:	f001 fa0e 	bl	d66f8 <spark_cloud_flag_connected>
   d52dc:	2800      	cmp	r0, #0
   d52de:	f000 82bd 	beq.w	d585c <loop+0x664>
        waitUntil(meterParticlePublish);
   d52e2:	f7ff f99d 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d52e6:	4b65      	ldr	r3, [pc, #404]	; (d547c <loop+0x284>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d52e8:	4a65      	ldr	r2, [pc, #404]	; (d5480 <loop+0x288>)
   d52ea:	781b      	ldrb	r3, [r3, #0]
   d52ec:	4965      	ldr	r1, [pc, #404]	; (d5484 <loop+0x28c>)
   d52ee:	f88d 6000 	strb.w	r6, [sp]
   d52f2:	a806      	add	r0, sp, #24
   d52f4:	f7fe ff3c 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d52f8:	a807      	add	r0, sp, #28
   d52fa:	f7ff fae3 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52fe:	e2ad      	b.n	d585c <loop+0x664>
      }
    }
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d5300:	7c6b      	ldrb	r3, [r5, #17]
   d5302:	2b00      	cmp	r3, #0
   d5304:	d1cf      	bne.n	d52a6 <loop+0xae>
    else state = REPORTING_STATE;
   d5306:	2305      	movs	r3, #5
   d5308:	7023      	strb	r3, [r4, #0]
   d530a:	e2a7      	b.n	d585c <loop+0x664>
    break;

  case WATERING_STATE:                                                    // This state will examing soil values and decide on watering
    if (wateringTimerFlag) {                                              // Already watering - time to turn off the tap
   d530c:	4d59      	ldr	r5, [pc, #356]	; (d5474 <loop+0x27c>)
   d530e:	4e5b      	ldr	r6, [pc, #364]	; (d547c <loop+0x284>)
   d5310:	782b      	ldrb	r3, [r5, #0]
   d5312:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   d5316:	b1cb      	cbz	r3, d534c <loop+0x154>
      waitUntil(meterParticlePublish);
   d5318:	f7ff f982 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d531c:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("Watering","Done with watering cycle",PRIVATE);
   d531e:	4a5a      	ldr	r2, [pc, #360]	; (d5488 <loop+0x290>)
   d5320:	495a      	ldr	r1, [pc, #360]	; (d548c <loop+0x294>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5322:	2600      	movs	r6, #0
   d5324:	a806      	add	r0, sp, #24
   d5326:	f88d 6000 	strb.w	r6, [sp]
   d532a:	f7fe ff21 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d532e:	a807      	add	r0, sp, #28
   d5330:	f7ff fac8 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("0");
   d5334:	4956      	ldr	r1, [pc, #344]	; (d5490 <loop+0x298>)
   d5336:	a806      	add	r0, sp, #24
   d5338:	f002 fb42 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d533c:	a806      	add	r0, sp, #24
   d533e:	f7ff fe7f 	bl	d5040 <_Z12controlValve6String>
   d5342:	a806      	add	r0, sp, #24
   d5344:	f002 faf5 	bl	d7932 <_ZN6StringD1Ev>
      wateringTimerFlag = false;
   d5348:	702e      	strb	r6, [r5, #0]
   d534a:	e7dc      	b.n	d5306 <loop+0x10e>
    }
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d534c:	f002 fd3a 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d5350:	2808      	cmp	r0, #8
   d5352:	f8df 810c 	ldr.w	r8, [pc, #268]	; d5460 <loop+0x268>
   d5356:	f000 81de 	beq.w	d5716 <loop+0x51e>
   d535a:	f002 fd33 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d535e:	280c      	cmp	r0, #12
   d5360:	f000 81d9 	beq.w	d5716 <loop+0x51e>
   d5364:	f002 fd2e 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d5368:	2811      	cmp	r0, #17
   d536a:	f040 8260 	bne.w	d582e <loop+0x636>
   d536e:	e1d2      	b.n	d5716 <loop+0x51e>
    }
    state = REPORTING_STATE;
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5370:	4d37      	ldr	r5, [pc, #220]	; (d5450 <loop+0x258>)
   d5372:	792b      	ldrb	r3, [r5, #4]
   d5374:	b12b      	cbz	r3, d5382 <loop+0x18a>
   d5376:	4b37      	ldr	r3, [pc, #220]	; (d5454 <loop+0x25c>)
   d5378:	781b      	ldrb	r3, [r3, #0]
   d537a:	2b05      	cmp	r3, #5
   d537c:	d001      	beq.n	d5382 <loop+0x18a>
   d537e:	f7ff ff07 	bl	d5190 <_Z22publishStateTransitionv>
   d5382:	f001 f9b9 	bl	d66f8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5386:	b190      	cbz	r0, d53ae <loop+0x1b6>
      if (Time.hour() == 0) {
   d5388:	f002 fd1c 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d538c:	4606      	mov	r6, r0
   d538e:	b950      	cbnz	r0, d53a6 <loop+0x1ae>
        sysStatus.verboseMode = false;                                    // Turn off Verbose mode
   d5390:	7128      	strb	r0, [r5, #4]
   d5392:	f001 f9b1 	bl	d66f8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5396:	b110      	cbz	r0, d539e <loop+0x1a6>
            return false;
        }
        return spark_sync_time(NULL);
   d5398:	4630      	mov	r0, r6
   d539a:	f001 f9cd 	bl	d6738 <spark_sync_time>
        Particle.syncTime();                                              // Set the clock each day
        current.alertCount = sysStatus.resetCount = 0;                    // Reset these each day as well
   d539e:	4a30      	ldr	r2, [pc, #192]	; (d5460 <loop+0x268>)
   d53a0:	2300      	movs	r3, #0
   d53a2:	61ab      	str	r3, [r5, #24]
   d53a4:	6213      	str	r3, [r2, #32]
      }
      sendEvent();                                                        // Send data to Ubidots
   d53a6:	f7ff faa3 	bl	d48f0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d53aa:	2306      	movs	r3, #6
   d53ac:	e7ac      	b.n	d5308 <loop+0x110>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53ae:	f001 f9a3 	bl	d66f8 <spark_cloud_flag_connected>
    }
    else if (!Particle.connected()) state = ERROR_STATE;                  // In case we timed out on our 1st attempt to connect
   d53b2:	2800      	cmp	r0, #0
   d53b4:	f040 8252 	bne.w	d585c <loop+0x664>
   d53b8:	2301      	movs	r3, #1
   d53ba:	e7a5      	b.n	d5308 <loop+0x110>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d53bc:	4b24      	ldr	r3, [pc, #144]	; (d5450 <loop+0x258>)
   d53be:	791b      	ldrb	r3, [r3, #4]
   d53c0:	b12b      	cbz	r3, d53ce <loop+0x1d6>
   d53c2:	4b24      	ldr	r3, [pc, #144]	; (d5454 <loop+0x25c>)
   d53c4:	781b      	ldrb	r3, [r3, #0]
   d53c6:	2b06      	cmp	r3, #6
   d53c8:	d001      	beq.n	d53ce <loop+0x1d6>
   d53ca:	f7ff fee1 	bl	d5190 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d53ce:	4b31      	ldr	r3, [pc, #196]	; (d5494 <loop+0x29c>)
   d53d0:	781b      	ldrb	r3, [r3, #0]
   d53d2:	b92b      	cbnz	r3, d53e0 <loop+0x1e8>
   d53d4:	f000 ff6e 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d53d8:	4b22      	ldr	r3, [pc, #136]	; (d5464 <loop+0x26c>)
   d53da:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d53dc:	2302      	movs	r3, #2
   d53de:	e793      	b.n	d5308 <loop+0x110>
   d53e0:	f000 ff68 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d53e4:	4b2c      	ldr	r3, [pc, #176]	; (d5498 <loop+0x2a0>)
   d53e6:	681b      	ldr	r3, [r3, #0]
   d53e8:	1ac0      	subs	r0, r0, r3
   d53ea:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d53ee:	4298      	cmp	r0, r3
   d53f0:	f240 8234 	bls.w	d585c <loop+0x664>
   d53f4:	f000 ff5e 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d53f8:	4b1f      	ldr	r3, [pc, #124]	; (d5478 <loop+0x280>)
   d53fa:	6018      	str	r0, [r3, #0]
   d53fc:	f001 f97c 	bl	d66f8 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5400:	2800      	cmp	r0, #0
   d5402:	d0d9      	beq.n	d53b8 <loop+0x1c0>
   d5404:	4b1d      	ldr	r3, [pc, #116]	; (d547c <loop+0x284>)
   d5406:	4925      	ldr	r1, [pc, #148]	; (d549c <loop+0x2a4>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5408:	781b      	ldrb	r3, [r3, #0]
   d540a:	2200      	movs	r2, #0
   d540c:	f88d 2000 	strb.w	r2, [sp]
   d5410:	a806      	add	r0, sp, #24
   d5412:	4a23      	ldr	r2, [pc, #140]	; (d54a0 <loop+0x2a8>)
   d5414:	f7fe feac 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d5418:	a807      	add	r0, sp, #28
   d541a:	f7ff fa53 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d541e:	e7cb      	b.n	d53b8 <loop+0x1c0>
    break;

  case NAPPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    long secondsToHour;
    static bool pressureDetectedFlag = false;                          // Did we detect water pressure just before going to sleep
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5420:	4b0b      	ldr	r3, [pc, #44]	; (d5450 <loop+0x258>)
   d5422:	791a      	ldrb	r2, [r3, #4]
   d5424:	461d      	mov	r5, r3
   d5426:	b12a      	cbz	r2, d5434 <loop+0x23c>
   d5428:	4b0a      	ldr	r3, [pc, #40]	; (d5454 <loop+0x25c>)
   d542a:	781b      	ldrb	r3, [r3, #0]
   d542c:	2b07      	cmp	r3, #7
   d542e:	d001      	beq.n	d5434 <loop+0x23c>
   d5430:	f7ff feae 	bl	d5190 <_Z22publishStateTransitionv>

    if (current.pressure > 1 && !pressureDetectedFlag) {               // If we detect pressure we will report again - once!
   d5434:	4b0a      	ldr	r3, [pc, #40]	; (d5460 <loop+0x268>)
   d5436:	4e1b      	ldr	r6, [pc, #108]	; (d54a4 <loop+0x2ac>)
   d5438:	689b      	ldr	r3, [r3, #8]
   d543a:	2b01      	cmp	r3, #1
   d543c:	dd34      	ble.n	d54a8 <loop+0x2b0>
   d543e:	7833      	ldrb	r3, [r6, #0]
   d5440:	bb93      	cbnz	r3, d54a8 <loop+0x2b0>
      pressureDetectedFlag = true;
   d5442:	2301      	movs	r3, #1
   d5444:	7033      	strb	r3, [r6, #0]
      state = MEASURING_STATE;
   d5446:	2303      	movs	r3, #3
   d5448:	e75e      	b.n	d5308 <loop+0x110>
   d544a:	bf00      	nop
   d544c:	2003e1e7 	.word	0x2003e1e7
   d5450:	2003e2fc 	.word	0x2003e2fc
   d5454:	2003e1d5 	.word	0x2003e1d5
   d5458:	2003e1e6 	.word	0x2003e1e6
   d545c:	2003e220 	.word	0x2003e220
   d5460:	2003e2b0 	.word	0x2003e2b0
   d5464:	2003e264 	.word	0x2003e264
   d5468:	00015f90 	.word	0x00015f90
   d546c:	2003e222 	.word	0x2003e222
   d5470:	2003e0bc 	.word	0x2003e0bc
   d5474:	2003e221 	.word	0x2003e221
   d5478:	2003e2ac 	.word	0x2003e2ac
   d547c:	2003e1c8 	.word	0x2003e1c8
   d5480:	000dbc57 	.word	0x000dbc57
   d5484:	000dbbed 	.word	0x000dbbed
   d5488:	000dbb4c 	.word	0x000dbb4c
   d548c:	000dbaff 	.word	0x000dbaff
   d5490:	000db981 	.word	0x000db981
   d5494:	2003e0ba 	.word	0x2003e0ba
   d5498:	2003e1c4 	.word	0x2003e1c4
   d549c:	000dbbc7 	.word	0x000dbbc7
   d54a0:	000db80d 	.word	0x000db80d
   d54a4:	2003e1d4 	.word	0x2003e1d4
   d54a8:	f001 f926 	bl	d66f8 <spark_cloud_flag_connected>
      break;
    }

    if (Particle.connected()) {
   d54ac:	b1b0      	cbz	r0, d54dc <loop+0x2e4>
      if (sysStatus.verboseMode) {
   d54ae:	792b      	ldrb	r3, [r5, #4]
   d54b0:	b173      	cbz	r3, d54d0 <loop+0x2d8>
        waitUntil(meterParticlePublish);
   d54b2:	f7ff f8b5 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d54b6:	4bb6      	ldr	r3, [pc, #728]	; (d5790 <loop+0x598>)
        Particle.publish("State","Taking a Nap",PRIVATE);
   d54b8:	49b6      	ldr	r1, [pc, #728]	; (d5794 <loop+0x59c>)
   d54ba:	781b      	ldrb	r3, [r3, #0]
   d54bc:	2200      	movs	r2, #0
   d54be:	f88d 2000 	strb.w	r2, [sp]
   d54c2:	a806      	add	r0, sp, #24
   d54c4:	4ab4      	ldr	r2, [pc, #720]	; (d5798 <loop+0x5a0>)
   d54c6:	f7fe fe53 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d54ca:	a807      	add	r0, sp, #28
   d54cc:	f7ff f9fa 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d54d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d54d4:	f001 f9e4 	bl	d68a0 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d54d8:	f7ff f802 	bl	d44e0 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d54dc:	2100      	movs	r1, #0
   d54de:	2007      	movs	r0, #7
   d54e0:	f002 fe7b 	bl	d81da <digitalWrite>
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d54e4:	2100      	movs	r1, #0
   d54e6:	200e      	movs	r0, #14
   d54e8:	f002 fe77 	bl	d81da <digitalWrite>
    pressureDetectedFlag = false;
   d54ec:	2300      	movs	r3, #0
   d54ee:	7033      	strb	r3, [r6, #0]
    secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d54f0:	f002 fc72 	bl	d7dd8 <_ZN9TimeClass6minuteEv>
   d54f4:	233c      	movs	r3, #60	; 0x3c
   d54f6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d54fa:	fb03 f500 	mul.w	r5, r3, r0
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d54fe:	4ba7      	ldr	r3, [pc, #668]	; (d579c <loop+0x5a4>)
   d5500:	7d1a      	ldrb	r2, [r3, #20]
   d5502:	b10a      	cbz	r2, d5508 <loop+0x310>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5504:	2201      	movs	r2, #1
   d5506:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5508:	2200      	movs	r2, #0
   d550a:	2104      	movs	r1, #4
   d550c:	48a3      	ldr	r0, [pc, #652]	; (d579c <loop+0x5a4>)
   d550e:	f7fe fe57 	bl	d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5512:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5516:	4369      	muls	r1, r5
   d5518:	f7fe fe86 	bl	d4228 <_ZN24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d551c:	499f      	ldr	r1, [pc, #636]	; (d579c <loop+0x5a4>)
   d551e:	a803      	add	r0, sp, #12
   d5520:	f002 fb02 	bl	d7b28 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d5524:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d5526:	b17b      	cbz	r3, d5548 <loop+0x350>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5528:	889a      	ldrh	r2, [r3, #4]
   d552a:	2a01      	cmp	r2, #1
   d552c:	d10c      	bne.n	d5548 <loop+0x350>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d552e:	899b      	ldrh	r3, [r3, #12]
   d5530:	2b04      	cmp	r3, #4
   d5532:	d109      	bne.n	d5548 <loop+0x350>
   d5534:	499a      	ldr	r1, [pc, #616]	; (d57a0 <loop+0x5a8>)
   d5536:	a806      	add	r0, sp, #24
   d5538:	f002 fa42 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d553c:	a806      	add	r0, sp, #24
   d553e:	f7ff fd19 	bl	d4f74 <_Z15setLowPowerMode6String>
   d5542:	a806      	add	r0, sp, #24
   d5544:	f002 f9f5 	bl	d7932 <_ZN6StringD1Ev>
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d5548:	2101      	movs	r1, #1
   d554a:	2007      	movs	r0, #7
   d554c:	f002 fe45 	bl	d81da <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d5550:	2101      	movs	r1, #1
   d5552:	200e      	movs	r0, #14
   d5554:	f002 fe41 	bl	d81da <digitalWrite>
    if (Time.hour() > 19 && Time.hour() < 5 && Time.hour() % 2 == 0) {  // At night, only connect every other hour
   d5558:	f002 fc34 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d555c:	2813      	cmp	r0, #19
   d555e:	f340 816d 	ble.w	d583c <loop+0x644>
   d5562:	f002 fc2f 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d5566:	2804      	cmp	r0, #4
   d5568:	f300 8168 	bgt.w	d583c <loop+0x644>
   d556c:	f002 fc2a 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d5570:	07c3      	lsls	r3, r0, #31
   d5572:	f140 816b 	bpl.w	d584c <loop+0x654>
   d5576:	e161      	b.n	d583c <loop+0x644>
    }
    else state = NAPPING_STATE;                                         // Otherwise sleep
    } break;

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5578:	4b8a      	ldr	r3, [pc, #552]	; (d57a4 <loop+0x5ac>)
   d557a:	791a      	ldrb	r2, [r3, #4]
   d557c:	461d      	mov	r5, r3
   d557e:	b12a      	cbz	r2, d558c <loop+0x394>
   d5580:	4b89      	ldr	r3, [pc, #548]	; (d57a8 <loop+0x5b0>)
   d5582:	781b      	ldrb	r3, [r3, #0]
   d5584:	2b08      	cmp	r3, #8
   d5586:	d001      	beq.n	d558c <loop+0x394>
   d5588:	f7ff fe02 	bl	d5190 <_Z22publishStateTransitionv>
   d558c:	f001 f8b4 	bl	d66f8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5590:	b1a0      	cbz	r0, d55bc <loop+0x3c4>
      waitUntil(meterParticlePublish);
   d5592:	f7ff f845 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d5596:	4b7e      	ldr	r3, [pc, #504]	; (d5790 <loop+0x598>)
      Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d5598:	497e      	ldr	r1, [pc, #504]	; (d5794 <loop+0x59c>)
   d559a:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d559c:	2200      	movs	r2, #0
   d559e:	f88d 2000 	strb.w	r2, [sp]
   d55a2:	a806      	add	r0, sp, #24
   d55a4:	4a81      	ldr	r2, [pc, #516]	; (d57ac <loop+0x5b4>)
   d55a6:	f7fe fde3 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d55aa:	a807      	add	r0, sp, #28
   d55ac:	f7ff f98a 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                                      // Time to send last update
   d55b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d55b4:	f001 f974 	bl	d68a0 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d55b8:	f7fe ff92 	bl	d44e0 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d55bc:	2100      	movs	r1, #0
   d55be:	2007      	movs	r0, #7
   d55c0:	f002 fe0b 	bl	d81da <digitalWrite>
    if (sysStatus.solenoidConfig) controlValve("0");                  // Make darn sure the water is off
   d55c4:	7c6b      	ldrb	r3, [r5, #17]
   d55c6:	b14b      	cbz	r3, d55dc <loop+0x3e4>
   d55c8:	4975      	ldr	r1, [pc, #468]	; (d57a0 <loop+0x5a8>)
   d55ca:	a806      	add	r0, sp, #24
   d55cc:	f002 f9f8 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d55d0:	a806      	add	r0, sp, #24
   d55d2:	f7ff fd35 	bl	d5040 <_Z12controlValve6String>
   d55d6:	a806      	add	r0, sp, #24
   d55d8:	f002 f9ab 	bl	d7932 <_ZN6StringD1Ev>
    delay(5000);
   d55dc:	f241 3088 	movw	r0, #5000	; 0x1388
   d55e0:	f001 f95e 	bl	d68a0 <delay>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d55e4:	f002 fbf8 	bl	d7dd8 <_ZN9TimeClass6minuteEv>
   d55e8:	233c      	movs	r3, #60	; 0x3c
   d55ea:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d55ee:	fb03 f500 	mul.w	r5, r3, r0
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d55f2:	4b6a      	ldr	r3, [pc, #424]	; (d579c <loop+0x5a4>)
   d55f4:	7d1a      	ldrb	r2, [r3, #20]
   d55f6:	b10a      	cbz	r2, d55fc <loop+0x404>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d55f8:	2201      	movs	r2, #1
   d55fa:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d55fc:	2200      	movs	r2, #0
   d55fe:	2104      	movs	r1, #4
   d5600:	4866      	ldr	r0, [pc, #408]	; (d579c <loop+0x5a4>)
   d5602:	f7fe fddd 	bl	d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5606:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d560a:	4369      	muls	r1, r5
   d560c:	f7fe fe0c 	bl	d4228 <_ZN24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5610:	a806      	add	r0, sp, #24
   d5612:	4962      	ldr	r1, [pc, #392]	; (d579c <loop+0x5a4>)
   d5614:	f002 fa88 	bl	d7b28 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d5618:	2302      	movs	r3, #2
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d561a:	9806      	ldr	r0, [sp, #24]
   d561c:	7023      	strb	r3, [r4, #0]
   d561e:	2800      	cmp	r0, #0
   d5620:	f000 811c 	beq.w	d585c <loop+0x664>
            free(wakeupSource_);
   d5624:	f001 f8f8 	bl	d6818 <free>
    } break;
   d5628:	e118      	b.n	d585c <loop+0x664>

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d562a:	4c5e      	ldr	r4, [pc, #376]	; (d57a4 <loop+0x5ac>)
   d562c:	7923      	ldrb	r3, [r4, #4]
   d562e:	b12b      	cbz	r3, d563c <loop+0x444>
   d5630:	4b5d      	ldr	r3, [pc, #372]	; (d57a8 <loop+0x5b0>)
   d5632:	781b      	ldrb	r3, [r3, #0]
   d5634:	2b01      	cmp	r3, #1
   d5636:	d001      	beq.n	d563c <loop+0x444>
   d5638:	f7ff fdaa 	bl	d5190 <_Z22publishStateTransitionv>
   d563c:	f000 fe3a 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d5640:	4b5b      	ldr	r3, [pc, #364]	; (d57b0 <loop+0x5b8>)
   d5642:	681b      	ldr	r3, [r3, #0]
   d5644:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5648:	3330      	adds	r3, #48	; 0x30
   d564a:	4298      	cmp	r0, r3
   d564c:	f240 8106 	bls.w	d585c <loop+0x664>
    {
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5650:	69a3      	ldr	r3, [r4, #24]
   d5652:	2b03      	cmp	r3, #3
   d5654:	dc14      	bgt.n	d5680 <loop+0x488>
   d5656:	f001 f84f 	bl	d66f8 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d565a:	b160      	cbz	r0, d5676 <loop+0x47e>
   d565c:	4b4c      	ldr	r3, [pc, #304]	; (d5790 <loop+0x598>)
   d565e:	494d      	ldr	r1, [pc, #308]	; (d5794 <loop+0x59c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5660:	781b      	ldrb	r3, [r3, #0]
   d5662:	2200      	movs	r2, #0
   d5664:	f88d 2000 	strb.w	r2, [sp]
   d5668:	a806      	add	r0, sp, #24
   d566a:	4a52      	ldr	r2, [pc, #328]	; (d57b4 <loop+0x5bc>)
   d566c:	f7fe fd80 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d5670:	a807      	add	r0, sp, #28
   d5672:	f7ff f927 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d567a:	f001 f911 	bl	d68a0 <delay>
   d567e:	e024      	b.n	d56ca <loop+0x4d2>
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5680:	f002 fb99 	bl	d7db6 <_ZN9TimeClass3nowEv>
   d5684:	4b47      	ldr	r3, [pc, #284]	; (d57a4 <loop+0x5ac>)
   d5686:	69db      	ldr	r3, [r3, #28]
   d5688:	1ac0      	subs	r0, r0, r3
   d568a:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d568e:	d91f      	bls.n	d56d0 <loop+0x4d8>
   d5690:	f001 f832 	bl	d66f8 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d5694:	b160      	cbz	r0, d56b0 <loop+0x4b8>
   d5696:	4b3e      	ldr	r3, [pc, #248]	; (d5790 <loop+0x598>)
   d5698:	493e      	ldr	r1, [pc, #248]	; (d5794 <loop+0x59c>)
   d569a:	781b      	ldrb	r3, [r3, #0]
   d569c:	2200      	movs	r2, #0
   d569e:	f88d 2000 	strb.w	r2, [sp]
   d56a2:	a806      	add	r0, sp, #24
   d56a4:	4a44      	ldr	r2, [pc, #272]	; (d57b8 <loop+0x5c0>)
   d56a6:	f7fe fd63 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d56aa:	a807      	add	r0, sp, #28
   d56ac:	f7ff f90a 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d56b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56b4:	f001 f8f4 	bl	d68a0 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d56b8:	2300      	movs	r3, #0
   d56ba:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d56bc:	f002 fdd0 	bl	d8260 <_Z21__fetch_global_EEPROMv>
   d56c0:	2234      	movs	r2, #52	; 0x34
   d56c2:	4938      	ldr	r1, [pc, #224]	; (d57a4 <loop+0x5ac>)
   d56c4:	2001      	movs	r0, #1
   d56c6:	f000 fe1d 	bl	d6304 <HAL_EEPROM_Put>
        System.reset();
   d56ca:	f002 fa2a 	bl	d7b22 <_ZN11SystemClass5resetEv>
   d56ce:	e0c5      	b.n	d585c <loop+0x664>
   d56d0:	f001 f812 	bl	d66f8 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d56d4:	b160      	cbz	r0, d56f0 <loop+0x4f8>
   d56d6:	4b2e      	ldr	r3, [pc, #184]	; (d5790 <loop+0x598>)
   d56d8:	492e      	ldr	r1, [pc, #184]	; (d5794 <loop+0x59c>)
   d56da:	781b      	ldrb	r3, [r3, #0]
   d56dc:	2200      	movs	r2, #0
   d56de:	f88d 2000 	strb.w	r2, [sp]
   d56e2:	a806      	add	r0, sp, #24
   d56e4:	4a35      	ldr	r2, [pc, #212]	; (d57bc <loop+0x5c4>)
   d56e6:	f7fe fd43 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d56ea:	a807      	add	r0, sp, #28
   d56ec:	f7ff f8ea 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d56f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56f4:	f001 f8d4 	bl	d68a0 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d56f8:	2300      	movs	r3, #0
   d56fa:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d56fc:	f002 fdb0 	bl	d8260 <_Z21__fetch_global_EEPROMv>
   d5700:	2234      	movs	r2, #52	; 0x34
   d5702:	4928      	ldr	r1, [pc, #160]	; (d57a4 <loop+0x5ac>)
   d5704:	2001      	movs	r0, #1
   d5706:	f000 fdfd 	bl	d6304 <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d570a:	f7fe ff95 	bl	d4638 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d570e:	e0a5      	b.n	d585c <loop+0x664>
    }
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp > stayAwake) && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d5710:	2307      	movs	r3, #7
   d5712:	7023      	strb	r3, [r4, #0]
   d5714:	e5b3      	b.n	d527e <loop+0x86>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
      waitUntil(meterParticlePublish);
      Particle.publish("Watering","Not time to water",PRIVATE);
      if(current.solenoidState) controlValve("0");
    }
    else if (sysStatus.stateOfCharge < 50) {
   d5716:	4d23      	ldr	r5, [pc, #140]	; (d57a4 <loop+0x5ac>)
   d5718:	68ab      	ldr	r3, [r5, #8]
   d571a:	2b31      	cmp	r3, #49	; 0x31
   d571c:	dc07      	bgt.n	d572e <loop+0x536>
      waitUntil(meterParticlePublish);
   d571e:	f7fe ff7f 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5722:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5724:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("Watering","Watering Needed but battery too low",PRIVATE);
   d5726:	f88d 2000 	strb.w	r2, [sp]
   d572a:	4a25      	ldr	r2, [pc, #148]	; (d57c0 <loop+0x5c8>)
   d572c:	e068      	b.n	d5800 <loop+0x608>
      if(current.solenoidState) controlValve("0");
    }
    else if (current.soilMoisture1 < sysStatus.wateringThresholdPct && !current.solenoidState) {  // Water if dry and if we are not already watering
   d572e:	edd8 7a00 	vldr	s15, [r8]
   d5732:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
   d5736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d573a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d573e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5742:	d556      	bpl.n	d57f2 <loop+0x5fa>
   d5744:	4b1f      	ldr	r3, [pc, #124]	; (d57c4 <loop+0x5cc>)
   d5746:	68df      	ldr	r7, [r3, #12]
   d5748:	2f00      	cmp	r7, #0
   d574a:	d152      	bne.n	d57f2 <loop+0x5fa>
      waitUntil(meterParticlePublish);
   d574c:	f7fe ff68 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d5750:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("Watering","Watering needed - starting watering cycle",PRIVATE);
   d5752:	4a1d      	ldr	r2, [pc, #116]	; (d57c8 <loop+0x5d0>)
   d5754:	491d      	ldr	r1, [pc, #116]	; (d57cc <loop+0x5d4>)
   d5756:	f88d 7000 	strb.w	r7, [sp]
   d575a:	a806      	add	r0, sp, #24
   d575c:	f7fe fd08 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d5760:	a807      	add	r0, sp, #28
   d5762:	f7ff f8af 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("1");
   d5766:	491a      	ldr	r1, [pc, #104]	; (d57d0 <loop+0x5d8>)
   d5768:	a806      	add	r0, sp, #24
   d576a:	f002 f929 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d576e:	a806      	add	r0, sp, #24
   d5770:	f7ff fc66 	bl	d5040 <_Z12controlValve6String>
   d5774:	a806      	add	r0, sp, #24
   d5776:	f002 f8dc 	bl	d7932 <_ZN6StringD1Ev>
      if (Time.hour() == 8) wateringTimer.changePeriod(sysStatus.wateringDurationMorning * 60 * 1000); // Start the timer to keep track of the watering time
   d577a:	f002 fb23 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d577e:	2808      	cmp	r0, #8
   d5780:	d128      	bne.n	d57d4 <loop+0x5dc>
   d5782:	6a2b      	ldr	r3, [r5, #32]
   d5784:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5788:	f64e 2160 	movw	r1, #60000	; 0xea60
   d578c:	e02c      	b.n	d57e8 <loop+0x5f0>
   d578e:	bf00      	nop
   d5790:	2003e1c8 	.word	0x2003e1c8
   d5794:	000dbbed 	.word	0x000dbbed
   d5798:	000dbbe0 	.word	0x000dbbe0
   d579c:	2003e224 	.word	0x2003e224
   d57a0:	000db981 	.word	0x000db981
   d57a4:	2003e2fc 	.word	0x2003e2fc
   d57a8:	2003e1d5 	.word	0x2003e1d5
   d57ac:	000dbbf3 	.word	0x000dbbf3
   d57b0:	2003e2ac 	.word	0x2003e2ac
   d57b4:	000dbc0a 	.word	0x000dbc0a
   d57b8:	000dbc1e 	.word	0x000dbc1e
   d57bc:	000dbc38 	.word	0x000dbc38
   d57c0:	000dbb65 	.word	0x000dbb65
   d57c4:	2003e2b0 	.word	0x2003e2b0
   d57c8:	000dbb89 	.word	0x000dbb89
   d57cc:	000dbaff 	.word	0x000dbaff
   d57d0:	000dbeac 	.word	0x000dbeac
      else if (Time.hour() == 12 ) wateringTimer.changePeriod(sysStatus.wateringDurationLunch * 60 * 1000);
   d57d4:	f002 faf6 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d57d8:	280c      	cmp	r0, #12
   d57da:	bf0c      	ite	eq
   d57dc:	6a69      	ldreq	r1, [r5, #36]	; 0x24
      else wateringTimer.changePeriod(sysStatus.wateringDurationEvening * 60 * 1000);                                                
   d57de:	6aa9      	ldrne	r1, [r5, #40]	; 0x28
   d57e0:	f64e 2360 	movw	r3, #60000	; 0xea60
   d57e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d57e8:	4359      	muls	r1, r3
   d57ea:	481e      	ldr	r0, [pc, #120]	; (d5864 <loop+0x66c>)
   d57ec:	f7fe fd8a 	bl	d4304 <_ZN5Timer12changePeriodEjj>
   d57f0:	e589      	b.n	d5306 <loop+0x10e>
    }
    else {
      waitUntil(meterParticlePublish);
   d57f2:	f7fe ff15 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d57f6:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d57f8:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("Watering","Watering not needed",PRIVATE);
   d57fa:	f88d 2000 	strb.w	r2, [sp]
   d57fe:	4a1a      	ldr	r2, [pc, #104]	; (d5868 <loop+0x670>)
   d5800:	491a      	ldr	r1, [pc, #104]	; (d586c <loop+0x674>)
   d5802:	a806      	add	r0, sp, #24
   d5804:	f7fe fcb4 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d5808:	a807      	add	r0, sp, #28
   d580a:	f7ff f85b 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      if(current.solenoidState) controlValve("0");
   d580e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d5812:	2b00      	cmp	r3, #0
   d5814:	f43f ad77 	beq.w	d5306 <loop+0x10e>
   d5818:	4915      	ldr	r1, [pc, #84]	; (d5870 <loop+0x678>)
   d581a:	a806      	add	r0, sp, #24
   d581c:	f002 f8d0 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d5820:	a806      	add	r0, sp, #24
   d5822:	f7ff fc0d 	bl	d5040 <_Z12controlValve6String>
   d5826:	a806      	add	r0, sp, #24
   d5828:	f002 f883 	bl	d7932 <_ZN6StringD1Ev>
   d582c:	e56b      	b.n	d5306 <loop+0x10e>
      Particle.publish("Watering","Done with watering cycle",PRIVATE);
      controlValve("0");
      wateringTimerFlag = false;
    }
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
      waitUntil(meterParticlePublish);
   d582e:	f7fe fef7 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d5832:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("Watering","Not time to water",PRIVATE);
   d5834:	4a0f      	ldr	r2, [pc, #60]	; (d5874 <loop+0x67c>)
   d5836:	f88d 7000 	strb.w	r7, [sp]
   d583a:	e7e1      	b.n	d5800 <loop+0x608>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
    if (Time.hour() > 19 && Time.hour() < 5 && Time.hour() % 2 == 0) {  // At night, only connect every other hour
      connectToParticle();                                              // Wakey Wakey and get connected.
      state = IDLE_STATE;                                               // Awake now, we need to go back to the IDLE state for next tasking
    }
    else if (Time.hour() <= 19 && Time.hour() >=5){                     // During the day, connect every hour
   d583c:	f002 fac2 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d5840:	2813      	cmp	r0, #19
   d5842:	dc09      	bgt.n	d5858 <loop+0x660>
   d5844:	f002 fabe 	bl	d7dc4 <_ZN9TimeClass4hourEv>
   d5848:	2804      	cmp	r0, #4
   d584a:	dd05      	ble.n	d5858 <loop+0x660>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
    if (Time.hour() > 19 && Time.hour() < 5 && Time.hour() % 2 == 0) {  // At night, only connect every other hour
      connectToParticle();                                              // Wakey Wakey and get connected.
   d584c:	f7fe fe04 	bl	d4458 <_Z17connectToParticlev>
      state = IDLE_STATE;                                               // Awake now, we need to go back to the IDLE state for next tasking
   d5850:	2302      	movs	r3, #2
    }
    else if (Time.hour() <= 19 && Time.hour() >=5){                     // During the day, connect every hour
      connectToParticle();                                              // Wakey Wakey and get connected.
      state = IDLE_STATE;                                               // Awake now, we need to go back to the IDLE state for next tasking
    }
    else state = NAPPING_STATE;                                         // Otherwise sleep
   d5852:	7023      	strb	r3, [r4, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d5854:	9803      	ldr	r0, [sp, #12]
   d5856:	e6e2      	b.n	d561e <loop+0x426>
   d5858:	2307      	movs	r3, #7
   d585a:	e7fa      	b.n	d5852 <loop+0x65a>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d585c:	b00a      	add	sp, #40	; 0x28
   d585e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5862:	bf00      	nop
   d5864:	2003e204 	.word	0x2003e204
   d5868:	000dbbb3 	.word	0x000dbbb3
   d586c:	000dbaff 	.word	0x000dbaff
   d5870:	000db981 	.word	0x000db981
   d5874:	000dbc71 	.word	0x000dbc71

000d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5878:	2300      	movs	r3, #0
   d587a:	2204      	movs	r2, #4
   d587c:	f000 bf14 	b.w	d66a8 <spark_variable>

000d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>:
   d5880:	2300      	movs	r3, #0
   d5882:	2202      	movs	r2, #2
   d5884:	f000 bf10 	b.w	d66a8 <spark_variable>

000d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5888:	4602      	mov	r2, r0
   d588a:	4801      	ldr	r0, [pc, #4]	; (d5890 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d588c:	f001 b9d6 	b.w	d6c3c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5890:	000d6c11 	.word	0x000d6c11

000d5894 <setup>:

// Battery monitoring
int lowBattLimit = 30;                                            // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d5894:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5896:	4b8f      	ldr	r3, [pc, #572]	; (d5ad4 <setup+0x240>)

// Battery monitoring
int lowBattLimit = 30;                                            // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d5898:	b0bd      	sub	sp, #244	; 0xf4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d589a:	aa0c      	add	r2, sp, #48	; 0x30
   d589c:	f103 0510 	add.w	r5, r3, #16
   d58a0:	4616      	mov	r6, r2
   d58a2:	6818      	ldr	r0, [r3, #0]
   d58a4:	6859      	ldr	r1, [r3, #4]
   d58a6:	4614      	mov	r4, r2
   d58a8:	c403      	stmia	r4!, {r0, r1}
   d58aa:	3308      	adds	r3, #8
   d58ac:	42ab      	cmp	r3, r5
   d58ae:	4622      	mov	r2, r4
   d58b0:	d1f7      	bne.n	d58a2 <setup+0xe>
   d58b2:	8819      	ldrh	r1, [r3, #0]
   d58b4:	789b      	ldrb	r3, [r3, #2]
   d58b6:	8021      	strh	r1, [r4, #0]
   d58b8:	70a3      	strb	r3, [r4, #2]
   d58ba:	222d      	movs	r2, #45	; 0x2d
   d58bc:	2100      	movs	r1, #0
   d58be:	f10d 0043 	add.w	r0, sp, #67	; 0x43
  state = IDLE_STATE;
   d58c2:	4f85      	ldr	r7, [pc, #532]	; (d5ad8 <setup+0x244>)
// Battery monitoring
int lowBattLimit = 30;                                            // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d58c4:	f003 fd21 	bl	d930a <memset>
  state = IDLE_STATE;
   d58c8:	2302      	movs	r3, #2
   d58ca:	703b      	strb	r3, [r7, #0]

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d58cc:	4b83      	ldr	r3, [pc, #524]	; (d5adc <setup+0x248>)
   d58ce:	681b      	ldr	r3, [r3, #0]
   d58d0:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   d58d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d58d8:	f003 031f 	and.w	r3, r3, #31
   d58dc:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d58e0:	2d2f      	cmp	r5, #47	; 0x2f
   d58e2:	dd05      	ble.n	d58f0 <setup+0x5c>
   d58e4:	4a7e      	ldr	r2, [pc, #504]	; (d5ae0 <setup+0x24c>)
   d58e6:	2100      	movs	r1, #0
   d58e8:	200a      	movs	r0, #10
   d58ea:	f000 fe5b 	bl	d65a4 <panic_>
   d58ee:	e001      	b.n	d58f4 <setup+0x60>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d58f0:	2d1f      	cmp	r5, #31
   d58f2:	dd03      	ble.n	d58fc <setup+0x68>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d58f4:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
   d58f8:	4b7a      	ldr	r3, [pc, #488]	; (d5ae4 <setup+0x250>)
   d58fa:	e001      	b.n	d5900 <setup+0x6c>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d58fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d5900:	2401      	movs	r4, #1
   d5902:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d5906:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508

  pinSetFast(solEnablePin);                                       // Make sure the Solenoid is off
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d590a:	4621      	mov	r1, r4
   d590c:	2007      	movs	r0, #7
   d590e:	f002 fc53 	bl	d81b8 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d5912:	2100      	movs	r1, #0
   d5914:	2004      	movs	r0, #4
   d5916:	f002 fc4f 	bl	d81b8 <pinMode>
  pinMode(soilPin1, INPUT);
   d591a:	2100      	movs	r1, #0
   d591c:	2013      	movs	r0, #19
   d591e:	f002 fc4b 	bl	d81b8 <pinMode>
  pinMode(soilPin2, INPUT);
   d5922:	2100      	movs	r1, #0
   d5924:	2012      	movs	r0, #18
   d5926:	f002 fc47 	bl	d81b8 <pinMode>
  pinMode(pressurePin, INPUT);
   d592a:	2100      	movs	r1, #0
   d592c:	2011      	movs	r0, #17
   d592e:	f002 fc43 	bl	d81b8 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d5932:	4621      	mov	r1, r4
   d5934:	200e      	movs	r0, #14
   d5936:	f002 fc3f 	bl	d81b8 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d593a:	4621      	mov	r1, r4
   d593c:	200e      	movs	r0, #14
   d593e:	f002 fc4c 	bl	d81da <digitalWrite>
  pinMode(solEnablePin,OUTPUT);
   d5942:	4621      	mov	r1, r4
   d5944:	2003      	movs	r0, #3
   d5946:	f002 fc37 	bl	d81b8 <pinMode>
  pinMode(solDirection,OUTPUT);
   d594a:	4621      	mov	r1, r4
   d594c:	2002      	movs	r0, #2
   d594e:	f002 fc33 	bl	d81b8 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d5952:	4621      	mov	r1, r4
   d5954:	2003      	movs	r0, #3
   d5956:	f002 fc40 	bl	d81da <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d595a:	2100      	movs	r1, #0
   d595c:	2002      	movs	r0, #2
   d595e:	f002 fc3c 	bl	d81da <digitalWrite>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5962:	a804      	add	r0, sp, #16
   d5964:	f000 fed0 	bl	d6708 <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5968:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d596a:	2300      	movs	r3, #0
   d596c:	227d      	movs	r2, #125	; 0x7d
   d596e:	a91c      	add	r1, sp, #112	; 0x70
   d5970:	a804      	add	r0, sp, #16
   d5972:	f002 f864 	bl	d7a3e <_ZNK6String8getBytesEPhjj>
   d5976:	462b      	mov	r3, r5
   d5978:	462a      	mov	r2, r5
   d597a:	495b      	ldr	r1, [pc, #364]	; (d5ae8 <setup+0x254>)
   d597c:	9501      	str	r5, [sp, #4]
   d597e:	9500      	str	r5, [sp, #0]
   d5980:	a81c      	add	r0, sp, #112	; 0x70
   d5982:	f000 fed1 	bl	d6728 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d5986:	4959      	ldr	r1, [pc, #356]	; (d5aec <setup+0x258>)
   d5988:	4859      	ldr	r0, [pc, #356]	; (d5af0 <setup+0x25c>)
   d598a:	f7ff ff75 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d598e:	4959      	ldr	r1, [pc, #356]	; (d5af4 <setup+0x260>)
   d5990:	4859      	ldr	r0, [pc, #356]	; (d5af8 <setup+0x264>)
   d5992:	f7ff ff75 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",releaseNumber);
   d5996:	4959      	ldr	r1, [pc, #356]	; (d5afc <setup+0x268>)
   d5998:	4859      	ldr	r0, [pc, #356]	; (d5b00 <setup+0x26c>)
   d599a:	f7ff ff6d 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("StateOfChg", batteryString);
   d599e:	4959      	ldr	r1, [pc, #356]	; (d5b04 <setup+0x270>)
   d59a0:	4859      	ldr	r0, [pc, #356]	; (d5b08 <setup+0x274>)
   d59a2:	f7ff ff69 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d59a6:	4959      	ldr	r1, [pc, #356]	; (d5b0c <setup+0x278>)
   d59a8:	4859      	ldr	r0, [pc, #356]	; (d5b10 <setup+0x27c>)
   d59aa:	f7ff ff65 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("DurationMorning", sysStatus.wateringDurationMorning);
   d59ae:	4959      	ldr	r1, [pc, #356]	; (d5b14 <setup+0x280>)
   d59b0:	4859      	ldr	r0, [pc, #356]	; (d5b18 <setup+0x284>)
   d59b2:	f7ff ff65 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DurationLunch", sysStatus.wateringDurationLunch);
   d59b6:	4959      	ldr	r1, [pc, #356]	; (d5b1c <setup+0x288>)
   d59b8:	4859      	ldr	r0, [pc, #356]	; (d5b20 <setup+0x28c>)
   d59ba:	f7ff ff61 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DurationEvening", sysStatus.wateringDurationEvening);
   d59be:	4959      	ldr	r1, [pc, #356]	; (d5b24 <setup+0x290>)
   d59c0:	4859      	ldr	r0, [pc, #356]	; (d5b28 <setup+0x294>)
   d59c2:	f7ff ff5d 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
  Particle.variable("WateringThreshold",wateringThresholdPctStr);
   d59c6:	4959      	ldr	r1, [pc, #356]	; (d5b2c <setup+0x298>)
   d59c8:	4859      	ldr	r0, [pc, #356]	; (d5b30 <setup+0x29c>)
   d59ca:	f7ff ff55 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Temperature", temperatureString);
   d59ce:	4959      	ldr	r1, [pc, #356]	; (d5b34 <setup+0x2a0>)
   d59d0:	4859      	ldr	r0, [pc, #356]	; (d5b38 <setup+0x2a4>)
   d59d2:	f7ff ff51 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Humidity", humidityString);
   d59d6:	4959      	ldr	r1, [pc, #356]	; (d5b3c <setup+0x2a8>)
   d59d8:	4859      	ldr	r0, [pc, #356]	; (d5b40 <setup+0x2ac>)
   d59da:	f7ff ff4d 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Luminosity",lightLevelString);
   d59de:	4959      	ldr	r1, [pc, #356]	; (d5b44 <setup+0x2b0>)
   d59e0:	4859      	ldr	r0, [pc, #356]	; (d5b48 <setup+0x2b4>)
   d59e2:	f7ff ff49 	bl	d5878 <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture1", current.soilMoisture1);
   d59e6:	4959      	ldr	r1, [pc, #356]	; (d5b4c <setup+0x2b8>)
   d59e8:	4859      	ldr	r0, [pc, #356]	; (d5b50 <setup+0x2bc>)
   d59ea:	f7ff ff49 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture2", current.soilMoisture2);
   d59ee:	4959      	ldr	r1, [pc, #356]	; (d5b54 <setup+0x2c0>)
   d59f0:	4859      	ldr	r0, [pc, #356]	; (d5b58 <setup+0x2c4>)
   d59f2:	f7ff ff45 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Pressure", current.pressure);
   d59f6:	4959      	ldr	r1, [pc, #356]	; (d5b5c <setup+0x2c8>)
   d59f8:	4859      	ldr	r0, [pc, #356]	; (d5b60 <setup+0x2cc>)
   d59fa:	f7ff ff41 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
  Particle.variable("WaterWindow",sysStatus.wateringWindow);
   d59fe:	4959      	ldr	r1, [pc, #356]	; (d5b64 <setup+0x2d0>)
   d5a00:	4859      	ldr	r0, [pc, #356]	; (d5b68 <setup+0x2d4>)
   d5a02:	f7ff ff3d 	bl	d5880 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>

  Particle.function("Measure-Now",measureNow);
   d5a06:	4959      	ldr	r1, [pc, #356]	; (d5b6c <setup+0x2d8>)
   d5a08:	4859      	ldr	r0, [pc, #356]	; (d5b70 <setup+0x2dc>)
   d5a0a:	f7ff ff3d 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d5a0e:	4959      	ldr	r1, [pc, #356]	; (d5b74 <setup+0x2e0>)
   d5a10:	4859      	ldr	r0, [pc, #356]	; (d5b78 <setup+0x2e4>)
   d5a12:	f7ff ff39 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d5a16:	4959      	ldr	r1, [pc, #356]	; (d5b7c <setup+0x2e8>)
   d5a18:	4859      	ldr	r0, [pc, #356]	; (d5b80 <setup+0x2ec>)
   d5a1a:	f7ff ff35 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Watering",controlValve);
   d5a1e:	4959      	ldr	r1, [pc, #356]	; (d5b84 <setup+0x2f0>)
   d5a20:	4859      	ldr	r0, [pc, #356]	; (d5b88 <setup+0x2f4>)
   d5a22:	f7ff ff31 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSoilSensors",setSoilSensors);
   d5a26:	4959      	ldr	r1, [pc, #356]	; (d5b8c <setup+0x2f8>)
   d5a28:	4859      	ldr	r0, [pc, #356]	; (d5b90 <setup+0x2fc>)
   d5a2a:	f7ff ff2d 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPressureSensor", setPressureSensor);
   d5a2e:	4959      	ldr	r1, [pc, #356]	; (d5b94 <setup+0x300>)
   d5a30:	4859      	ldr	r0, [pc, #356]	; (d5b98 <setup+0x304>)
   d5a32:	f7ff ff29 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetLightSensor",setLightSensor);
   d5a36:	4959      	ldr	r1, [pc, #356]	; (d5b9c <setup+0x308>)
   d5a38:	4859      	ldr	r0, [pc, #356]	; (d5ba0 <setup+0x30c>)
   d5a3a:	f7ff ff25 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SolenoidPresent",setSolenoidPresent);
   d5a3e:	4959      	ldr	r1, [pc, #356]	; (d5ba4 <setup+0x310>)
   d5a40:	4859      	ldr	r0, [pc, #356]	; (d5ba8 <setup+0x314>)
   d5a42:	f7ff ff21 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTempHumidSensor",setTempHumidSensor);
   d5a46:	4959      	ldr	r1, [pc, #356]	; (d5bac <setup+0x318>)
   d5a48:	4859      	ldr	r0, [pc, #356]	; (d5bb0 <setup+0x31c>)
   d5a4a:	f7ff ff1d 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetDurationMorning", setWaterDurationMorning);
   d5a4e:	4959      	ldr	r1, [pc, #356]	; (d5bb4 <setup+0x320>)
   d5a50:	4859      	ldr	r0, [pc, #356]	; (d5bb8 <setup+0x324>)
   d5a52:	f7ff ff19 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetDurationLunch", setWaterDurationLunch);
   d5a56:	4959      	ldr	r1, [pc, #356]	; (d5bbc <setup+0x328>)
   d5a58:	4859      	ldr	r0, [pc, #356]	; (d5bc0 <setup+0x32c>)
   d5a5a:	f7ff ff15 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetDurationEvening", setWaterDurationEvening);
   d5a5e:	4959      	ldr	r1, [pc, #356]	; (d5bc4 <setup+0x330>)
   d5a60:	4859      	ldr	r0, [pc, #356]	; (d5bc8 <setup+0x334>)
   d5a62:	f7ff ff11 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetWaterThreshold",setWaterThreshold);
   d5a66:	4959      	ldr	r1, [pc, #356]	; (d5bcc <setup+0x338>)
   d5a68:	4859      	ldr	r0, [pc, #356]	; (d5bd0 <setup+0x33c>)
   d5a6a:	f7ff ff0d 	bl	d5888 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d5a6e:	f002 fbf7 	bl	d8260 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d5a72:	4628      	mov	r0, r5
   d5a74:	f000 fc36 	bl	d62e4 <HAL_EEPROM_Read>
   d5a78:	2802      	cmp	r0, #2
   d5a7a:	d118      	bne.n	d5aae <setup+0x21a>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5a7c:	4c55      	ldr	r4, [pc, #340]	; (d5bd4 <setup+0x340>)
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d5a7e:	f002 fbef 	bl	d8260 <_Z21__fetch_global_EEPROMv>
   d5a82:	2234      	movs	r2, #52	; 0x34
   d5a84:	4621      	mov	r1, r4
   d5a86:	2001      	movs	r0, #1
   d5a88:	f000 fc34 	bl	d62f4 <HAL_EEPROM_Get>
  EEPROM.get(MEM_MAP::currentStatusAddr,current);
   d5a8c:	f002 fbe8 	bl	d8260 <_Z21__fetch_global_EEPROMv>
   d5a90:	2224      	movs	r2, #36	; 0x24
   d5a92:	492e      	ldr	r1, [pc, #184]	; (d5b4c <setup+0x2b8>)
   d5a94:	2050      	movs	r0, #80	; 0x50
   d5a96:	f000 fc2d 	bl	d62f4 <HAL_EEPROM_Get>

  if (!sysStatus.lowPowerMode) awakeTimer.start();                      // If we are not in low power mode, will start a 30 min timer then set it
   d5a9a:	79a3      	ldrb	r3, [r4, #6]
   d5a9c:	2b00      	cmp	r3, #0
   d5a9e:	f040 809f 	bne.w	d5be0 <setup+0x34c>
   d5aa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5aa6:	484c      	ldr	r0, [pc, #304]	; (d5bd8 <setup+0x344>)
   d5aa8:	f7fe fc84 	bl	d43b4 <_ZN5Timer5startEj>
   d5aac:	e098      	b.n	d5be0 <setup+0x34c>
  Particle.function("SetDurationLunch", setWaterDurationLunch);
  Particle.function("SetDurationEvening", setWaterDurationEvening);
  Particle.function("SetWaterThreshold",setWaterThreshold);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d5aae:	f002 fbd7 	bl	d8260 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5ab2:	2204      	movs	r2, #4
   d5ab4:	4949      	ldr	r1, [pc, #292]	; (d5bdc <setup+0x348>)
   d5ab6:	4628      	mov	r0, r5
   d5ab8:	f000 fc24 	bl	d6304 <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d5abc:	f002 fbd0 	bl	d8260 <_Z21__fetch_global_EEPROMv>
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	2204      	movs	r2, #4
   d5ac4:	a908      	add	r1, sp, #32
  Particle.function("SetDurationEvening", setWaterDurationEvening);
  Particle.function("SetWaterThreshold",setWaterThreshold);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d5ac6:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d5ac8:	9508      	str	r5, [sp, #32]
   d5aca:	f000 fc1b 	bl	d6304 <HAL_EEPROM_Put>
  Particle.function("SetDurationEvening", setWaterDurationEvening);
  Particle.function("SetWaterThreshold",setWaterThreshold);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d5ace:	2cf0      	cmp	r4, #240	; 0xf0
   d5ad0:	d1f4      	bne.n	d5abc <setup+0x228>
   d5ad2:	e7d3      	b.n	d5a7c <setup+0x1e8>
   d5ad4:	000db7a4 	.word	0x000db7a4
   d5ad8:	2003e1e7 	.word	0x2003e1e7
   d5adc:	2003e24c 	.word	0x2003e24c
   d5ae0:	000d62a5 	.word	0x000d62a5
   d5ae4:	50000300 	.word	0x50000300
   d5ae8:	000d49dd 	.word	0x000d49dd
   d5aec:	2003e268 	.word	0x2003e268
   d5af0:	000dbc83 	.word	0x000dbc83
   d5af4:	2003e314 	.word	0x2003e314
   d5af8:	000dbc8a 	.word	0x000dbc8a
   d5afc:	000dbeae 	.word	0x000dbeae
   d5b00:	000dbc95 	.word	0x000dbc95
   d5b04:	2003e2e4 	.word	0x2003e2e4
   d5b08:	000dbc9d 	.word	0x000dbc9d
   d5b0c:	2003e1d6 	.word	0x2003e1d6
   d5b10:	000dbca8 	.word	0x000dbca8
   d5b14:	2003e31c 	.word	0x2003e31c
   d5b18:	000dbd96 	.word	0x000dbd96
   d5b1c:	2003e320 	.word	0x2003e320
   d5b20:	000dbda9 	.word	0x000dbda9
   d5b24:	2003e324 	.word	0x2003e324
   d5b28:	000dbdba 	.word	0x000dbdba
   d5b2c:	2003e25c 	.word	0x2003e25c
   d5b30:	000dbcb7 	.word	0x000dbcb7
   d5b34:	2003e1b4 	.word	0x2003e1b4
   d5b38:	000dbcc9 	.word	0x000dbcc9
   d5b3c:	2003e2d4 	.word	0x2003e2d4
   d5b40:	000dbcd5 	.word	0x000dbcd5
   d5b44:	2003e2ec 	.word	0x2003e2ec
   d5b48:	000dbcde 	.word	0x000dbcde
   d5b4c:	2003e2b0 	.word	0x2003e2b0
   d5b50:	000dbce9 	.word	0x000dbce9
   d5b54:	2003e2b4 	.word	0x2003e2b4
   d5b58:	000dbcf7 	.word	0x000dbcf7
   d5b5c:	2003e2b8 	.word	0x2003e2b8
   d5b60:	000dbd05 	.word	0x000dbd05
   d5b64:	2003e32c 	.word	0x2003e32c
   d5b68:	000dbd0e 	.word	0x000dbd0e
   d5b6c:	000d410d 	.word	0x000d410d
   d5b70:	000dbd1a 	.word	0x000dbd1a
   d5b74:	000d4f75 	.word	0x000d4f75
   d5b78:	000dbd26 	.word	0x000dbd26
   d5b7c:	000d4ef9 	.word	0x000d4ef9
   d5b80:	000dbd33 	.word	0x000dbd33
   d5b84:	000d5041 	.word	0x000d5041
   d5b88:	000dbaff 	.word	0x000dbaff
   d5b8c:	000d4a79 	.word	0x000d4a79
   d5b90:	000dbd40 	.word	0x000dbd40
   d5b94:	000d4b1d 	.word	0x000d4b1d
   d5b98:	000dbd4f 	.word	0x000dbd4f
   d5b9c:	000d4b99 	.word	0x000d4b99
   d5ba0:	000dbd61 	.word	0x000dbd61
   d5ba4:	000d5101 	.word	0x000d5101
   d5ba8:	000dbd70 	.word	0x000dbd70
   d5bac:	000d4c25 	.word	0x000d4c25
   d5bb0:	000dbd80 	.word	0x000dbd80
   d5bb4:	000d4cad 	.word	0x000d4cad
   d5bb8:	000dbd93 	.word	0x000dbd93
   d5bbc:	000d4d3d 	.word	0x000d4d3d
   d5bc0:	000dbda6 	.word	0x000dbda6
   d5bc4:	000d4dcd 	.word	0x000d4dcd
   d5bc8:	000dbdb7 	.word	0x000dbdb7
   d5bcc:	000d4e5d 	.word	0x000d4e5d
   d5bd0:	000dbdca 	.word	0x000dbdca
   d5bd4:	2003e2fc 	.word	0x2003e2fc
   d5bd8:	2003e1e8 	.word	0x2003e1e8
   d5bdc:	000db7e4 	.word	0x000db7e4
  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
  EEPROM.get(MEM_MAP::currentStatusAddr,current);

  if (!sysStatus.lowPowerMode) awakeTimer.start();                      // If we are not in low power mode, will start a 30 min timer then set it

  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
   d5be0:	7b23      	ldrb	r3, [r4, #12]
   d5be2:	b153      	cbz	r3, d5bfa <setup+0x366>
    if (!tempHumidSensor.begin(0x44)) {
   d5be4:	2144      	movs	r1, #68	; 0x44
   d5be6:	4858      	ldr	r0, [pc, #352]	; (d5d48 <setup+0x4b4>)
   d5be8:	f000 fa0e 	bl	d6008 <_ZN14Adafruit_SHT315beginEh>
   d5bec:	b928      	cbnz	r0, d5bfa <setup+0x366>
      sysStatus.TempHumidConfig = false;                                // Set to 0x45 for alternate i2c addr - turns off the sensor if it fails to initalize
   d5bee:	4b57      	ldr	r3, [pc, #348]	; (d5d4c <setup+0x4b8>)
      strcpy(StartupMessage,"Temp/Humidity Sensor Failed to Inialize - disabling");
   d5bf0:	4957      	ldr	r1, [pc, #348]	; (d5d50 <setup+0x4bc>)

  if (!sysStatus.lowPowerMode) awakeTimer.start();                      // If we are not in low power mode, will start a 30 min timer then set it

  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
    if (!tempHumidSensor.begin(0x44)) {
      sysStatus.TempHumidConfig = false;                                // Set to 0x45 for alternate i2c addr - turns off the sensor if it fails to initalize
   d5bf2:	7318      	strb	r0, [r3, #12]
      strcpy(StartupMessage,"Temp/Humidity Sensor Failed to Inialize - disabling");
   d5bf4:	4630      	mov	r0, r6
   d5bf6:	f003 fbc3 	bl	d9380 <strcpy>
    } 
  }

  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d5bfa:	7c23      	ldrb	r3, [r4, #16]
   d5bfc:	b133      	cbz	r3, d5c0c <setup+0x378>
    lightSensor.begin();
   d5bfe:	4855      	ldr	r0, [pc, #340]	; (d5d54 <setup+0x4c0>)
   d5c00:	f000 f971 	bl	d5ee6 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d5c04:	2120      	movs	r1, #32
   d5c06:	4853      	ldr	r0, [pc, #332]	; (d5d54 <setup+0x4c0>)
   d5c08:	f000 f9a9 	bl	d5f5e <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5c0c:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5c0e:	4611      	mov	r1, r2
   d5c10:	a808      	add	r0, sp, #32
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5c12:	9208      	str	r2, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5c14:	f000 fb36 	bl	d6284 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5c18:	9b08      	ldr	r3, [sp, #32]
  }

  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d5c1a:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d5c1c:	bf02      	ittt	eq
   d5c1e:	69a3      	ldreq	r3, [r4, #24]
   d5c20:	3301      	addeq	r3, #1
   d5c22:	61a3      	streq	r3, [r4, #24]
  }
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d5c24:	69a3      	ldr	r3, [r4, #24]
   d5c26:	2b05      	cmp	r3, #5
   d5c28:	dd04      	ble.n	d5c34 <setup+0x3a0>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d5c2a:	4b48      	ldr	r3, [pc, #288]	; (d5d4c <setup+0x4b8>)
   d5c2c:	2204      	movs	r2, #4
   d5c2e:	619a      	str	r2, [r3, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d5c30:	f7fe fd02 	bl	d4638 <_Z14fullModemResetv>
  }

  if(sysStatus.solenoidConfig) {
   d5c34:	7c63      	ldrb	r3, [r4, #17]
   d5c36:	b153      	cbz	r3, d5c4e <setup+0x3ba>
    snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d5c38:	4b44      	ldr	r3, [pc, #272]	; (d5d4c <setup+0x4b8>)
   d5c3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   d5c3c:	f002 fe74 	bl	d8928 <__aeabi_f2d>
   d5c40:	4a45      	ldr	r2, [pc, #276]	; (d5d58 <setup+0x4c4>)
   d5c42:	e9cd 0100 	strd	r0, r1, [sp]
   d5c46:	2108      	movs	r1, #8
   d5c48:	4844      	ldr	r0, [pc, #272]	; (d5d5c <setup+0x4c8>)
   d5c4a:	f000 fe05 	bl	d6858 <snprintf>
  }

  sysStatus.solenoidHoldTime = 6;                                      // Set a reasonable value - based on testing 8mSec
   d5c4e:	2306      	movs	r3, #6
   d5c50:	6163      	str	r3, [r4, #20]

  if (sysStatus.solenoidConfig && current.solenoidState) controlValve("0");   // Can't start watering until we get to the main loop
   d5c52:	7c63      	ldrb	r3, [r4, #17]
   d5c54:	b163      	cbz	r3, d5c70 <setup+0x3dc>
   d5c56:	4b42      	ldr	r3, [pc, #264]	; (d5d60 <setup+0x4cc>)
   d5c58:	68db      	ldr	r3, [r3, #12]
   d5c5a:	b14b      	cbz	r3, d5c70 <setup+0x3dc>
   d5c5c:	4941      	ldr	r1, [pc, #260]	; (d5d64 <setup+0x4d0>)
   d5c5e:	a808      	add	r0, sp, #32
   d5c60:	f001 feae 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d5c64:	a808      	add	r0, sp, #32
   d5c66:	f7ff f9eb 	bl	d5040 <_Z12controlValve6String>
   d5c6a:	a808      	add	r0, sp, #32
   d5c6c:	f001 fe61 	bl	d7932 <_ZN6StringD1Ev>

  sysStatus.solarPowerMode = true;                                      // Set this as a default
   d5c70:	2301      	movs	r3, #1
   d5c72:	7163      	strb	r3, [r4, #5]
  setPowerConfig();                                                     // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d5c74:	f7fe fc74 	bl	d4560 <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) setLowPowerMode("0");                   // Rescue mode to take out of low power mode and connect
   d5c78:	2004      	movs	r0, #4
   d5c7a:	f002 fac7 	bl	d820c <digitalRead>
   d5c7e:	b948      	cbnz	r0, d5c94 <setup+0x400>
   d5c80:	4938      	ldr	r1, [pc, #224]	; (d5d64 <setup+0x4d0>)
   d5c82:	a808      	add	r0, sp, #32
   d5c84:	f001 fe9c 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d5c88:	a808      	add	r0, sp, #32
   d5c8a:	f7ff f973 	bl	d4f74 <_Z15setLowPowerMode6String>
   d5c8e:	a808      	add	r0, sp, #32
   d5c90:	f001 fe4f 	bl	d7932 <_ZN6StringD1Ev>

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d5c94:	f7fe fd44 	bl	d4720 <_Z16takeMeasurementsv>

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d5c98:	4b33      	ldr	r3, [pc, #204]	; (d5d68 <setup+0x4d4>)
   d5c9a:	68a2      	ldr	r2, [r4, #8]
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	429a      	cmp	r2, r3
   d5ca0:	dc02      	bgt.n	d5ca8 <setup+0x414>
   d5ca2:	2308      	movs	r3, #8
   d5ca4:	703b      	strb	r3, [r7, #0]
   d5ca6:	e00c      	b.n	d5cc2 <setup+0x42e>
  else if(!connectToParticle()) {
   d5ca8:	f7fe fbd6 	bl	d4458 <_Z17connectToParticlev>
   d5cac:	b948      	cbnz	r0, d5cc2 <setup+0x42e>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d5cae:	2301      	movs	r3, #1
   d5cb0:	703b      	strb	r3, [r7, #0]
   d5cb2:	f000 faff 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5cb6:	4b2d      	ldr	r3, [pc, #180]	; (d5d6c <setup+0x4d8>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5cb8:	492d      	ldr	r1, [pc, #180]	; (d5d70 <setup+0x4dc>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d5cba:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5cbc:	4630      	mov	r0, r6
   d5cbe:	f003 fb5f 	bl	d9380 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5cc2:	f000 fd19 	bl	d66f8 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5cc6:	b108      	cbz	r0, d5ccc <setup+0x438>
   d5cc8:	7923      	ldrb	r3, [r4, #4]
   d5cca:	b9bb      	cbnz	r3, d5cfc <setup+0x468>
  Serial.println(StartupMessage);
   d5ccc:	f002 f978 	bl	d7fc0 <_Z16_fetch_usbserialv>
   d5cd0:	4631      	mov	r1, r6
   d5cd2:	f001 fde2 	bl	d789a <_ZN5Print7printlnEPKc>

  Time.zone(2.0);                                                        // set timezone to Rwanda Time
   d5cd6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d5cda:	f002 f80d 	bl	d7cf8 <_ZN9TimeClass4zoneEf>
  waitUntil(meterParticlePublish);                                                
   d5cde:	f7fe fc9f 	bl	d4620 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.84>
   d5ce2:	f000 fd09 	bl	d66f8 <spark_cloud_flag_connected>
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Local Time",Time.timeStr(),PRIVATE);
   d5ce6:	b108      	cbz	r0, d5cec <setup+0x458>
   d5ce8:	7923      	ldrb	r3, [r4, #4]
   d5cea:	b9ab      	cbnz	r3, d5d18 <setup+0x484>

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d5cec:	4b21      	ldr	r3, [pc, #132]	; (d5d74 <setup+0x4e0>)
   d5cee:	2201      	movs	r2, #1
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d5cf0:	a804      	add	r0, sp, #16

  Time.zone(2.0);                                                        // set timezone to Rwanda Time
  waitUntil(meterParticlePublish);                                                
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Local Time",Time.timeStr(),PRIVATE);

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d5cf2:	701a      	strb	r2, [r3, #0]
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d5cf4:	f001 fe1d 	bl	d7932 <_ZN6StringD1Ev>
  Time.zone(2.0);                                                        // set timezone to Rwanda Time
  waitUntil(meterParticlePublish);                                                
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Local Time",Time.timeStr(),PRIVATE);

  systemStatusWriteNeeded = true;                                       // likely something has changed
}
   d5cf8:	b03d      	add	sp, #244	; 0xf4
   d5cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cfc:	4b1e      	ldr	r3, [pc, #120]	; (d5d78 <setup+0x4e4>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5cfe:	491f      	ldr	r1, [pc, #124]	; (d5d7c <setup+0x4e8>)
   d5d00:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5d02:	2200      	movs	r2, #0
   d5d04:	f88d 2000 	strb.w	r2, [sp]
   d5d08:	a808      	add	r0, sp, #32
   d5d0a:	4632      	mov	r2, r6
   d5d0c:	f7fe fa30 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d5d10:	a809      	add	r0, sp, #36	; 0x24
   d5d12:	f7fe fdd7 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d16:	e7d9      	b.n	d5ccc <setup+0x438>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d5d18:	f002 f84d 	bl	d7db6 <_ZN9TimeClass3nowEv>
   d5d1c:	4601      	mov	r1, r0
   d5d1e:	a808      	add	r0, sp, #32
   d5d20:	f002 f806 	bl	d7d30 <_ZN9TimeClass7timeStrEl>
   d5d24:	4b14      	ldr	r3, [pc, #80]	; (d5d78 <setup+0x4e4>)
  Serial.println(StartupMessage);

  Time.zone(2.0);                                                        // set timezone to Rwanda Time
  waitUntil(meterParticlePublish);                                                
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Local Time",Time.timeStr(),PRIVATE);
   d5d26:	4916      	ldr	r1, [pc, #88]	; (d5d80 <setup+0x4ec>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5d28:	781b      	ldrb	r3, [r3, #0]
   d5d2a:	2200      	movs	r2, #0
   d5d2c:	f88d 2000 	strb.w	r2, [sp]
   d5d30:	a802      	add	r0, sp, #8
   d5d32:	9a08      	ldr	r2, [sp, #32]
   d5d34:	f7fe fa1c 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.120.constprop.144>
   d5d38:	a803      	add	r0, sp, #12
   d5d3a:	f7fe fdc3 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d3e:	a808      	add	r0, sp, #32
   d5d40:	f001 fdf7 	bl	d7932 <_ZN6StringD1Ev>
   d5d44:	e7d2      	b.n	d5cec <setup+0x458>
   d5d46:	bf00      	nop
   d5d48:	2003e250 	.word	0x2003e250
   d5d4c:	2003e2fc 	.word	0x2003e2fc
   d5d50:	000dbddc 	.word	0x000dbddc
   d5d54:	2003e1cc 	.word	0x2003e1cc
   d5d58:	000dbaa0 	.word	0x000dbaa0
   d5d5c:	2003e25c 	.word	0x2003e25c
   d5d60:	2003e2b0 	.word	0x2003e2b0
   d5d64:	000db981 	.word	0x000db981
   d5d68:	2003e0bc 	.word	0x2003e0bc
   d5d6c:	2003e2ac 	.word	0x2003e2ac
   d5d70:	000dbe10 	.word	0x000dbe10
   d5d74:	2003e1e6 	.word	0x2003e1e6
   d5d78:	2003e1c8 	.word	0x2003e1c8
   d5d7c:	000dbe22 	.word	0x000dbe22
   d5d80:	000dbe2a 	.word	0x000dbe2a

000d5d84 <_GLOBAL__sub_I___appProductID>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5d88:	4b3f      	ldr	r3, [pc, #252]	; (d5e88 <_GLOBAL__sub_I___appProductID+0x104>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d8a:	4e40      	ldr	r6, [pc, #256]	; (d5e8c <_GLOBAL__sub_I___appProductID+0x108>)
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5d8c:	4f40      	ldr	r7, [pc, #256]	; (d5e90 <_GLOBAL__sub_I___appProductID+0x10c>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5d8e:	f8df 913c 	ldr.w	r9, [pc, #316]	; d5ecc <_GLOBAL__sub_I___appProductID+0x148>
   d5d92:	2400      	movs	r4, #0
   d5d94:	601c      	str	r4, [r3, #0]
   d5d96:	4b3f      	ldr	r3, [pc, #252]	; (d5e94 <_GLOBAL__sub_I___appProductID+0x110>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5d98:	b085      	sub	sp, #20
   d5d9a:	2501      	movs	r5, #1
   d5d9c:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5d9e:	f000 fac9 	bl	d6334 <HAL_Pin_Map>
   d5da2:	4b3d      	ldr	r3, [pc, #244]	; (d5e98 <_GLOBAL__sub_I___appProductID+0x114>)
   d5da4:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5da6:	f002 f9b9 	bl	d811c <spark_protocol_instance>
   d5daa:	4623      	mov	r3, r4
   d5dac:	4622      	mov	r2, r4
   d5dae:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5db2:	f002 f9bb 	bl	d812c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5db6:	f002 f9b1 	bl	d811c <spark_protocol_instance>
   d5dba:	4622      	mov	r2, r4
   d5dbc:	4623      	mov	r3, r4
   d5dbe:	2120      	movs	r1, #32
   d5dc0:	f002 f9bc 	bl	d813c <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5dc8:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5dca:	6034      	str	r4, [r6, #0]
   d5dcc:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5dce:	71b4      	strb	r4, [r6, #6]
   d5dd0:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5dd2:	2002      	movs	r0, #2
   d5dd4:	f000 fc08 	bl	d65e8 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5dd8:	463a      	mov	r2, r7
   d5dda:	4930      	ldr	r1, [pc, #192]	; (d5e9c <_GLOBAL__sub_I___appProductID+0x118>)
   d5ddc:	4630      	mov	r0, r6
   d5dde:	f002 fad3 	bl	d8388 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5de2:	4e2f      	ldr	r6, [pc, #188]	; (d5ea0 <_GLOBAL__sub_I___appProductID+0x11c>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5de4:	4621      	mov	r1, r4
   d5de6:	4628      	mov	r0, r5
   d5de8:	f000 fc16 	bl	d6618 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5dec:	4629      	mov	r1, r5
   d5dee:	2004      	movs	r0, #4
   d5df0:	f000 fa38 	bl	d6264 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5df4:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5df8:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5dfa:	4642      	mov	r2, r8
   d5dfc:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5dfe:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5e00:	f003 fa83 	bl	d930a <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5e04:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
   d5e06:	463a      	mov	r2, r7
   d5e08:	4926      	ldr	r1, [pc, #152]	; (d5ea4 <_GLOBAL__sub_I___appProductID+0x120>)
   d5e0a:	80f3      	strh	r3, [r6, #6]
   d5e0c:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5e0e:	7535      	strb	r5, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5e10:	f8a6 8004 	strh.w	r8, [r6, #4]
   d5e14:	f002 fab8 	bl	d8388 <__aeabi_atexit>
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5e18:	4823      	ldr	r0, [pc, #140]	; (d5ea8 <_GLOBAL__sub_I___appProductID+0x124>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5e1a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; d5ed0 <_GLOBAL__sub_I___appProductID+0x14c>
	    _M_manager = &_My_handler::_M_manager;
   d5e1e:	4c23      	ldr	r4, [pc, #140]	; (d5eac <_GLOBAL__sub_I___appProductID+0x128>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5e20:	4e23      	ldr	r6, [pc, #140]	; (d5eb0 <_GLOBAL__sub_I___appProductID+0x12c>)
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5e22:	f000 f8ce 	bl	d5fc2 <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                     // Light sensor measures light level in Lux
   d5e26:	f002 fa63 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d5e2a:	2123      	movs	r1, #35	; 0x23
   d5e2c:	4602      	mov	r2, r0
   d5e2e:	4821      	ldr	r0, [pc, #132]	; (d5eb4 <_GLOBAL__sub_I___appProductID+0x130>)
   d5e30:	f000 f854 	bl	d5edc <_ZN6BH1750C1EhR7TwoWire>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e34:	4b20      	ldr	r3, [pc, #128]	; (d5eb8 <_GLOBAL__sub_I___appProductID+0x134>)
   d5e36:	9300      	str	r3, [sp, #0]
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5e38:	466a      	mov	r2, sp
   d5e3a:	462b      	mov	r3, r5
   d5e3c:	491f      	ldr	r1, [pc, #124]	; (d5ebc <_GLOBAL__sub_I___appProductID+0x138>)

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5e3e:	9402      	str	r4, [sp, #8]
   d5e40:	4648      	mov	r0, r9
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5e42:	f8cd 800c 	str.w	r8, [sp, #12]
   d5e46:	f7fe fa2b 	bl	d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e4a:	4668      	mov	r0, sp
   d5e4c:	f7fe f9a5 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d5e50:	463a      	mov	r2, r7
   d5e52:	4631      	mov	r1, r6
   d5e54:	4648      	mov	r0, r9
   d5e56:	f002 fa97 	bl	d8388 <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5e5a:	9402      	str	r4, [sp, #8]
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5e5c:	4c18      	ldr	r4, [pc, #96]	; (d5ec0 <_GLOBAL__sub_I___appProductID+0x13c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e5e:	4b19      	ldr	r3, [pc, #100]	; (d5ec4 <_GLOBAL__sub_I___appProductID+0x140>)
   d5e60:	9300      	str	r3, [sp, #0]
   d5e62:	466a      	mov	r2, sp
   d5e64:	462b      	mov	r3, r5
   d5e66:	4918      	ldr	r1, [pc, #96]	; (d5ec8 <_GLOBAL__sub_I___appProductID+0x144>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5e68:	f8cd 800c 	str.w	r8, [sp, #12]
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	f7fe fa17 	bl	d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e72:	4668      	mov	r0, sp
   d5e74:	f7fe f991 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d5e78:	463a      	mov	r2, r7
   d5e7a:	4631      	mov	r1, r6
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	f002 fa83 	bl	d8388 <__aeabi_atexit>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5e82:	b005      	add	sp, #20
   d5e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e88:	2003e23c 	.word	0x2003e23c
   d5e8c:	2003e240 	.word	0x2003e240
   d5e90:	2003e1b0 	.word	0x2003e1b0
   d5e94:	2003e1c8 	.word	0x2003e1c8
   d5e98:	2003e24c 	.word	0x2003e24c
   d5e9c:	000d418b 	.word	0x000d418b
   d5ea0:	2003e224 	.word	0x2003e224
   d5ea4:	000d40f5 	.word	0x000d40f5
   d5ea8:	2003e250 	.word	0x2003e250
   d5eac:	000d40dd 	.word	0x000d40dd
   d5eb0:	000d4359 	.word	0x000d4359
   d5eb4:	2003e1cc 	.word	0x2003e1cc
   d5eb8:	000d40b9 	.word	0x000d40b9
   d5ebc:	00124f80 	.word	0x00124f80
   d5ec0:	2003e1e8 	.word	0x2003e1e8
   d5ec4:	000d40c5 	.word	0x000d40c5
   d5ec8:	001b7740 	.word	0x001b7740
   d5ecc:	2003e204 	.word	0x2003e204
   d5ed0:	000d40d9 	.word	0x000d40d9

000d5ed4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5ed4:	6803      	ldr	r3, [r0, #0]
   d5ed6:	b2c9      	uxtb	r1, r1
   d5ed8:	689b      	ldr	r3, [r3, #8]
   d5eda:	4718      	bx	r3

000d5edc <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5edc:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d5ede:	2211      	movs	r2, #17
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5ee0:	7041      	strb	r1, [r0, #1]
{
  m_mode = continuous_high_res2;
   d5ee2:	7002      	strb	r2, [r0, #0]
}
   d5ee4:	4770      	bx	lr

000d5ee6 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d5ee6:	b510      	push	{r4, lr}
   d5ee8:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	f001 fa09 	bl	d7302 <_ZN7TwoWire9isEnabledEv>
   d5ef0:	b910      	cbnz	r0, d5ef8 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d5ef2:	6860      	ldr	r0, [r4, #4]
   d5ef4:	f001 f9c0 	bl	d7278 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d5ef8:	2001      	movs	r0, #1
   d5efa:	bd10      	pop	{r4, pc}

000d5efc <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d5efc:	b570      	push	{r4, r5, r6, lr}
   d5efe:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d5f00:	7841      	ldrb	r1, [r0, #1]
   d5f02:	6840      	ldr	r0, [r0, #4]
   d5f04:	f001 f9ef 	bl	d72e6 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d5f08:	2202      	movs	r2, #2
   d5f0a:	7869      	ldrb	r1, [r5, #1]
   d5f0c:	6868      	ldr	r0, [r5, #4]
   d5f0e:	f001 f9e7 	bl	d72e0 <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d5f12:	6868      	ldr	r0, [r5, #4]
   d5f14:	6803      	ldr	r3, [r0, #0]
   d5f16:	695b      	ldr	r3, [r3, #20]
   d5f18:	4798      	blx	r3
   d5f1a:	4606      	mov	r6, r0
   d5f1c:	6868      	ldr	r0, [r5, #4]
   d5f1e:	6803      	ldr	r3, [r0, #0]
   d5f20:	695b      	ldr	r3, [r3, #20]
   d5f22:	4798      	blx	r3
   d5f24:	4604      	mov	r4, r0
  m_i2c.endTransmission();

  return (float)level / 1.2f; // convert to lux
   d5f26:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5f2a:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   d5f2c:	b2a4      	uxth	r4, r4
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5f2e:	f001 f9e5 	bl	d72fc <_ZN7TwoWire15endTransmissionEv>

  return (float)level / 1.2f; // convert to lux
   d5f32:	ee07 4a90 	vmov	s15, r4
   d5f36:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d5f3a:	eddf 7a02 	vldr	s15, [pc, #8]	; d5f44 <_ZN6BH175015get_light_levelEv+0x48>
   d5f3e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5f42:	bd70      	pop	{r4, r5, r6, pc}
   d5f44:	3f99999a 	.word	0x3f99999a

000d5f48 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d5f48:	7803      	ldrb	r3, [r0, #0]
   d5f4a:	2b23      	cmp	r3, #35	; 0x23
   d5f4c:	d004      	beq.n	d5f58 <_ZN6BH175020wait_for_measurementEv+0x10>
   d5f4e:	2b13      	cmp	r3, #19
   d5f50:	bf0c      	ite	eq
   d5f52:	2018      	moveq	r0, #24
   d5f54:	20b4      	movne	r0, #180	; 0xb4
   d5f56:	e000      	b.n	d5f5a <_ZN6BH175020wait_for_measurementEv+0x12>
   d5f58:	2018      	movs	r0, #24
         m_mode == continuous_low_res) ? 24 : 180); // max measurement time 24 for low res and 180 for high res
   d5f5a:	f000 bca1 	b.w	d68a0 <delay>

000d5f5e <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
  return m_mode;
}

void BH1750::set_sensor_mode(SensMode _mode)
{
   d5f5e:	b538      	push	{r3, r4, r5, lr}
   d5f60:	4604      	mov	r4, r0
   d5f62:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d5f64:	7841      	ldrb	r1, [r0, #1]
   d5f66:	6840      	ldr	r0, [r0, #4]
   d5f68:	f001 f9bd 	bl	d72e6 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d5f6c:	6860      	ldr	r0, [r4, #4]
   d5f6e:	6803      	ldr	r3, [r0, #0]
   d5f70:	4629      	mov	r1, r5
   d5f72:	689b      	ldr	r3, [r3, #8]
   d5f74:	4798      	blx	r3
  m_i2c.endTransmission();
   d5f76:	6860      	ldr	r0, [r4, #4]
   d5f78:	f001 f9c0 	bl	d72fc <_ZN7TwoWire15endTransmissionEv>

  m_mode = _mode;
   d5f7c:	7025      	strb	r5, [r4, #0]

  wait_for_measurement();
   d5f7e:	4620      	mov	r0, r4
}
   d5f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  m_i2c.write((uint8_t)_mode);
  m_i2c.endTransmission();

  m_mode = _mode;

  wait_for_measurement();
   d5f84:	f7ff bfe0 	b.w	d5f48 <_ZN6BH175020wait_for_measurementEv>

000d5f88 <_ZN6BH175023make_forced_measurementEv>:
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5f88:	b510      	push	{r4, lr}
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5f8a:	7803      	ldrb	r3, [r0, #0]
   d5f8c:	f1a3 0220 	sub.w	r2, r3, #32
   d5f90:	2a01      	cmp	r2, #1
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5f92:	4604      	mov	r4, r0
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5f94:	d901      	bls.n	d5f9a <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5f96:	2b23      	cmp	r3, #35	; 0x23
   d5f98:	d110      	bne.n	d5fbc <_ZN6BH175023make_forced_measurementEv+0x34>
      m_mode == forced_mode_low_res)
  {
    m_i2c.beginTransmission(m_i2c_addr);
   d5f9a:	7861      	ldrb	r1, [r4, #1]
   d5f9c:	6860      	ldr	r0, [r4, #4]
   d5f9e:	f001 f9a2 	bl	d72e6 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d5fa2:	6860      	ldr	r0, [r4, #4]
   d5fa4:	7821      	ldrb	r1, [r4, #0]
   d5fa6:	6803      	ldr	r3, [r0, #0]
   d5fa8:	689b      	ldr	r3, [r3, #8]
   d5faa:	4798      	blx	r3
    m_i2c.endTransmission();
   d5fac:	6860      	ldr	r0, [r4, #4]
   d5fae:	f001 f9a5 	bl	d72fc <_ZN7TwoWire15endTransmissionEv>

    wait_for_measurement();
   d5fb2:	4620      	mov	r0, r4
  }
}
   d5fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    m_i2c.beginTransmission(m_i2c_addr);
    m_i2c.write((uint8_t)m_mode);
    m_i2c.endTransmission();

    wait_for_measurement();
   d5fb8:	f7ff bfc6 	b.w	d5f48 <_ZN6BH175020wait_for_measurementEv>
   d5fbc:	bd10      	pop	{r4, pc}

000d5fbe <_GLOBAL__sub_I__ZN6BH1750C2EhR7TwoWire>:
   d5fbe:	f000 b9b9 	b.w	d6334 <HAL_Pin_Map>

000d5fc2 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5fc2:	4770      	bx	lr

000d5fc4 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5fc4:	b538      	push	{r3, r4, r5, lr}
   d5fc6:	4605      	mov	r5, r0
   d5fc8:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5fca:	f002 f991 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d5fce:	7829      	ldrb	r1, [r5, #0]
   d5fd0:	f001 f989 	bl	d72e6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5fd4:	f002 f98c 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d5fd8:	0a21      	lsrs	r1, r4, #8
   d5fda:	f7ff ff7b 	bl	d5ed4 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5fde:	f002 f987 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d5fe2:	b2e1      	uxtb	r1, r4
   d5fe4:	f7ff ff76 	bl	d5ed4 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5fe8:	f002 f982 	bl	d82f0 <_Z19__fetch_global_Wirev>
}
   d5fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d5ff0:	f001 b984 	b.w	d72fc <_ZN7TwoWire15endTransmissionEv>

000d5ff4 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d5ff4:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5ff6:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5ffa:	f7ff ffe3 	bl	d5fc4 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d5ffe:	200a      	movs	r0, #10
}
   d6000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d6004:	f000 bc4c 	b.w	d68a0 <delay>

000d6008 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d6008:	b538      	push	{r3, r4, r5, lr}
   d600a:	4604      	mov	r4, r0
   d600c:	460d      	mov	r5, r1
  Wire.begin();
   d600e:	f002 f96f 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d6012:	f001 f931 	bl	d7278 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d6016:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d6018:	7025      	strb	r5, [r4, #0]
  reset();
   d601a:	f7ff ffeb 	bl	d5ff4 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d601e:	2001      	movs	r0, #1
   d6020:	bd38      	pop	{r3, r4, r5, pc}

000d6022 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d6022:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d6024:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d6026:	4291      	cmp	r1, r2
   d6028:	d00e      	beq.n	d6048 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d602a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d602e:	4058      	eors	r0, r3
   d6030:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d6032:	f010 0f80 	tst.w	r0, #128	; 0x80
   d6036:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d603a:	bf18      	it	ne
   d603c:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d6040:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d6042:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d6044:	d1f5      	bne.n	d6032 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d6046:	e7ee      	b.n	d6026 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d6048:	4770      	bx	lr
   d604a:	0000      	movs	r0, r0
   d604c:	0000      	movs	r0, r0
	...

000d6050 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d6050:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d6052:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d6056:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d6058:	f7ff ffb4 	bl	d5fc4 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d605c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6060:	f000 fc1e 	bl	d68a0 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d6064:	f002 f944 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d6068:	2206      	movs	r2, #6
   d606a:	7821      	ldrb	r1, [r4, #0]
   d606c:	f001 f938 	bl	d72e0 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d6070:	f002 f93e 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d6074:	6803      	ldr	r3, [r0, #0]
   d6076:	691b      	ldr	r3, [r3, #16]
   d6078:	4798      	blx	r3
   d607a:	2806      	cmp	r0, #6
   d607c:	d14a      	bne.n	d6114 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d607e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d6080:	f002 f936 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d6084:	6803      	ldr	r3, [r0, #0]
   d6086:	695b      	ldr	r3, [r3, #20]
   d6088:	4798      	blx	r3
   d608a:	f80d 0005 	strb.w	r0, [sp, r5]
   d608e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d6090:	2d06      	cmp	r5, #6
   d6092:	d1f5      	bne.n	d6080 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d6094:	2202      	movs	r2, #2
   d6096:	4669      	mov	r1, sp
   d6098:	4620      	mov	r0, r4
   d609a:	f7ff ffc2 	bl	d6022 <_ZN14Adafruit_SHT314crc8EPKhi>
   d609e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d60a2:	4285      	cmp	r5, r0
   d60a4:	d136      	bne.n	d6114 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d60a6:	2202      	movs	r2, #2
   d60a8:	f10d 0103 	add.w	r1, sp, #3
   d60ac:	4620      	mov	r0, r4
   d60ae:	f7ff ffb8 	bl	d6022 <_ZN14Adafruit_SHT314crc8EPKhi>
   d60b2:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d60b6:	4285      	cmp	r5, r0
   d60b8:	d12c      	bne.n	d6114 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d60ba:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d60be:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d60c2:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d60c6:	ba40      	rev16	r0, r0
   d60c8:	b280      	uxth	r0, r0
   d60ca:	f002 fc0b 	bl	d88e4 <__aeabi_ui2d>
  stemp *= 175;
   d60ce:	a318      	add	r3, pc, #96	; (adr r3, d6130 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d60d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60d4:	f002 fc7c 	bl	d89d0 <__aeabi_dmul>
  stemp /= 0xffff;
   d60d8:	a311      	add	r3, pc, #68	; (adr r3, d6120 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d60da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60de:	f002 fda1 	bl	d8c24 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d60e2:	2200      	movs	r2, #0
   d60e4:	4b10      	ldr	r3, [pc, #64]	; (d6128 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d60e6:	f002 fabf 	bl	d8668 <__aeabi_dsub>
   d60ea:	f002 ff69 	bl	d8fc0 <__aeabi_d2f>
   d60ee:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d60f0:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d60f4:	f002 fbf6 	bl	d88e4 <__aeabi_ui2d>
  shum *= 100;
   d60f8:	2200      	movs	r2, #0
   d60fa:	4b0c      	ldr	r3, [pc, #48]	; (d612c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d60fc:	f002 fc68 	bl	d89d0 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d6100:	a307      	add	r3, pc, #28	; (adr r3, d6120 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d6102:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6106:	f002 fd8d 	bl	d8c24 <__aeabi_ddiv>
   d610a:	f002 ff59 	bl	d8fc0 <__aeabi_d2f>
   d610e:	6060      	str	r0, [r4, #4]
  
  return true;
   d6110:	2001      	movs	r0, #1
   d6112:	e000      	b.n	d6116 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d6114:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d6116:	b002      	add	sp, #8
   d6118:	bd70      	pop	{r4, r5, r6, pc}
   d611a:	bf00      	nop
   d611c:	f3af 8000 	nop.w
   d6120:	00000000 	.word	0x00000000
   d6124:	40efffe0 	.word	0x40efffe0
   d6128:	40468000 	.word	0x40468000
   d612c:	40590000 	.word	0x40590000
   d6130:	00000000 	.word	0x00000000
   d6134:	4065e000 	.word	0x4065e000

000d6138 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d6138:	b510      	push	{r4, lr}
   d613a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d613c:	f7ff ff88 	bl	d6050 <_ZN14Adafruit_SHT3111readTempHumEv>
   d6140:	b110      	cbz	r0, d6148 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d6142:	ed94 0a02 	vldr	s0, [r4, #8]
   d6146:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d6148:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6150 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d614c:	bd10      	pop	{r4, pc}
   d614e:	bf00      	nop
   d6150:	7fc00000 	.word	0x7fc00000

000d6154 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d6154:	b510      	push	{r4, lr}
   d6156:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d6158:	f7ff ff7a 	bl	d6050 <_ZN14Adafruit_SHT3111readTempHumEv>
   d615c:	b110      	cbz	r0, d6164 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d615e:	ed94 0a01 	vldr	s0, [r4, #4]
   d6162:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d6164:	ed9f 0a01 	vldr	s0, [pc, #4]	; d616c <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d6168:	bd10      	pop	{r4, pc}
   d616a:	bf00      	nop
   d616c:	7fc00000 	.word	0x7fc00000

000d6170 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d6170:	f000 b8e0 	b.w	d6334 <HAL_Pin_Map>

000d6174 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d6174:	b508      	push	{r3, lr}
   d6176:	4b02      	ldr	r3, [pc, #8]	; (d6180 <cellular_signal+0xc>)
   d6178:	681b      	ldr	r3, [r3, #0]
   d617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d617c:	9301      	str	r3, [sp, #4]
   d617e:	bd08      	pop	{r3, pc}
   d6180:	00030274 	.word	0x00030274

000d6184 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d6184:	b508      	push	{r3, lr}
   d6186:	4b02      	ldr	r3, [pc, #8]	; (d6190 <cellular_command+0xc>)
   d6188:	681b      	ldr	r3, [r3, #0]
   d618a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d618c:	9301      	str	r3, [sp, #4]
   d618e:	bd08      	pop	{r3, pc}
   d6190:	00030274 	.word	0x00030274

000d6194 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6194:	b508      	push	{r3, lr}
   d6196:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <os_thread_is_current+0xc>)
   d6198:	681b      	ldr	r3, [r3, #0]
   d619a:	689b      	ldr	r3, [r3, #8]
   d619c:	9301      	str	r3, [sp, #4]
   d619e:	bd08      	pop	{r3, pc}
   d61a0:	00030248 	.word	0x00030248

000d61a4 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d61a4:	b508      	push	{r3, lr}
   d61a6:	4b02      	ldr	r3, [pc, #8]	; (d61b0 <os_thread_yield+0xc>)
   d61a8:	681b      	ldr	r3, [r3, #0]
   d61aa:	68db      	ldr	r3, [r3, #12]
   d61ac:	9301      	str	r3, [sp, #4]
   d61ae:	bd08      	pop	{r3, pc}
   d61b0:	00030248 	.word	0x00030248

000d61b4 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d61b4:	b508      	push	{r3, lr}
   d61b6:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <os_thread_join+0xc>)
   d61b8:	681b      	ldr	r3, [r3, #0]
   d61ba:	691b      	ldr	r3, [r3, #16]
   d61bc:	9301      	str	r3, [sp, #4]
   d61be:	bd08      	pop	{r3, pc}
   d61c0:	00030248 	.word	0x00030248

000d61c4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d61c4:	b508      	push	{r3, lr}
   d61c6:	4b02      	ldr	r3, [pc, #8]	; (d61d0 <os_thread_cleanup+0xc>)
   d61c8:	681b      	ldr	r3, [r3, #0]
   d61ca:	695b      	ldr	r3, [r3, #20]
   d61cc:	9301      	str	r3, [sp, #4]
   d61ce:	bd08      	pop	{r3, pc}
   d61d0:	00030248 	.word	0x00030248

000d61d4 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d61d4:	b508      	push	{r3, lr}
   d61d6:	4b02      	ldr	r3, [pc, #8]	; (d61e0 <os_thread_scheduling+0xc>)
   d61d8:	681b      	ldr	r3, [r3, #0]
   d61da:	69db      	ldr	r3, [r3, #28]
   d61dc:	9301      	str	r3, [sp, #4]
   d61de:	bd08      	pop	{r3, pc}
   d61e0:	00030248 	.word	0x00030248

000d61e4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d61e4:	b508      	push	{r3, lr}
   d61e6:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <os_timer_create+0xc>)
   d61e8:	681b      	ldr	r3, [r3, #0]
   d61ea:	6a1b      	ldr	r3, [r3, #32]
   d61ec:	9301      	str	r3, [sp, #4]
   d61ee:	bd08      	pop	{r3, pc}
   d61f0:	00030248 	.word	0x00030248

000d61f4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d61f4:	b508      	push	{r3, lr}
   d61f6:	4b02      	ldr	r3, [pc, #8]	; (d6200 <os_timer_destroy+0xc>)
   d61f8:	681b      	ldr	r3, [r3, #0]
   d61fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61fc:	9301      	str	r3, [sp, #4]
   d61fe:	bd08      	pop	{r3, pc}
   d6200:	00030248 	.word	0x00030248

000d6204 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6204:	b508      	push	{r3, lr}
   d6206:	4b02      	ldr	r3, [pc, #8]	; (d6210 <os_timer_get_id+0xc>)
   d6208:	681b      	ldr	r3, [r3, #0]
   d620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d620c:	9301      	str	r3, [sp, #4]
   d620e:	bd08      	pop	{r3, pc}
   d6210:	00030248 	.word	0x00030248

000d6214 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6214:	b508      	push	{r3, lr}
   d6216:	4b02      	ldr	r3, [pc, #8]	; (d6220 <os_timer_change+0xc>)
   d6218:	681b      	ldr	r3, [r3, #0]
   d621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d621c:	9301      	str	r3, [sp, #4]
   d621e:	bd08      	pop	{r3, pc}
   d6220:	00030248 	.word	0x00030248

000d6224 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6224:	b508      	push	{r3, lr}
   d6226:	4b02      	ldr	r3, [pc, #8]	; (d6230 <os_mutex_recursive_create+0xc>)
   d6228:	681b      	ldr	r3, [r3, #0]
   d622a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d622c:	9301      	str	r3, [sp, #4]
   d622e:	bd08      	pop	{r3, pc}
   d6230:	00030248 	.word	0x00030248

000d6234 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6234:	b508      	push	{r3, lr}
   d6236:	4b02      	ldr	r3, [pc, #8]	; (d6240 <os_mutex_recursive_destroy+0xc>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d623c:	9301      	str	r3, [sp, #4]
   d623e:	bd08      	pop	{r3, pc}
   d6240:	00030248 	.word	0x00030248

000d6244 <os_timer_is_active>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d6244:	b508      	push	{r3, lr}
   d6246:	4b02      	ldr	r3, [pc, #8]	; (d6250 <os_timer_is_active+0xc>)
   d6248:	681b      	ldr	r3, [r3, #0]
   d624a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d624c:	9301      	str	r3, [sp, #4]
   d624e:	bd08      	pop	{r3, pc}
   d6250:	00030248 	.word	0x00030248

000d6254 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6254:	b508      	push	{r3, lr}
   d6256:	4b02      	ldr	r3, [pc, #8]	; (d6260 <os_timer_set_id+0xc>)
   d6258:	681b      	ldr	r3, [r3, #0]
   d625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d625c:	9301      	str	r3, [sp, #4]
   d625e:	bd08      	pop	{r3, pc}
   d6260:	00030248 	.word	0x00030248

000d6264 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6264:	b508      	push	{r3, lr}
   d6266:	4b02      	ldr	r3, [pc, #8]	; (d6270 <HAL_Feature_Set+0xc>)
   d6268:	681b      	ldr	r3, [r3, #0]
   d626a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	00030234 	.word	0x00030234

000d6274 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <HAL_Core_System_Reset_Ex+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	00030234 	.word	0x00030234

000d6284 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	00030234 	.word	0x00030234

000d6294 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <HAL_RNG_GetRandomNumber+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	685b      	ldr	r3, [r3, #4]
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	00030218 	.word	0x00030218

000d62a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <HAL_Delay_Microseconds+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	68db      	ldr	r3, [r3, #12]
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	00030218 	.word	0x00030218

000d62b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	695b      	ldr	r3, [r3, #20]
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	00030218 	.word	0x00030218

000d62c4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <HAL_RTC_Get_UnixTime+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	69db      	ldr	r3, [r3, #28]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	00030218 	.word	0x00030218

000d62d4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <HAL_EEPROM_Init+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	00030218 	.word	0x00030218

000d62e4 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <HAL_EEPROM_Read+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	00030218 	.word	0x00030218

000d62f4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <HAL_EEPROM_Get+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	00030218 	.word	0x00030218

000d6304 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <HAL_EEPROM_Put+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	00030218 	.word	0x00030218

000d6314 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <HAL_RTC_Time_Is_Valid+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	00030218 	.word	0x00030218

000d6324 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <hal_timer_millis+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	00030218 	.word	0x00030218

000d6334 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b02      	ldr	r3, [pc, #8]	; (d6340 <HAL_Pin_Map+0xc>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	681b      	ldr	r3, [r3, #0]
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	bd08      	pop	{r3, pc}
   d6340:	0003022c 	.word	0x0003022c

000d6344 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <HAL_Validate_Pin_Function+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	685b      	ldr	r3, [r3, #4]
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	0003022c 	.word	0x0003022c

000d6354 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <HAL_Pin_Mode+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	689b      	ldr	r3, [r3, #8]
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	0003022c 	.word	0x0003022c

000d6364 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <HAL_Get_Pin_Mode+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	68db      	ldr	r3, [r3, #12]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	0003022c 	.word	0x0003022c

000d6374 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <HAL_GPIO_Write+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	691b      	ldr	r3, [r3, #16]
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	0003022c 	.word	0x0003022c

000d6384 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <HAL_GPIO_Read+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	695b      	ldr	r3, [r3, #20]
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	0003022c 	.word	0x0003022c

000d6394 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <HAL_ADC_Read+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	0003022c 	.word	0x0003022c

000d63a4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <HAL_I2C_Begin+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	68db      	ldr	r3, [r3, #12]
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	00030228 	.word	0x00030228

000d63b4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <HAL_I2C_Begin_Transmission+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	699b      	ldr	r3, [r3, #24]
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	00030228 	.word	0x00030228

000d63c4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <HAL_I2C_End_Transmission+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	69db      	ldr	r3, [r3, #28]
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	00030228 	.word	0x00030228

000d63d4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d63d4:	b508      	push	{r3, lr}
   d63d6:	4b02      	ldr	r3, [pc, #8]	; (d63e0 <HAL_I2C_Write_Data+0xc>)
   d63d8:	681b      	ldr	r3, [r3, #0]
   d63da:	6a1b      	ldr	r3, [r3, #32]
   d63dc:	9301      	str	r3, [sp, #4]
   d63de:	bd08      	pop	{r3, pc}
   d63e0:	00030228 	.word	0x00030228

000d63e4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d63e4:	b508      	push	{r3, lr}
   d63e6:	4b02      	ldr	r3, [pc, #8]	; (d63f0 <HAL_I2C_Available_Data+0xc>)
   d63e8:	681b      	ldr	r3, [r3, #0]
   d63ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	00030228 	.word	0x00030228

000d63f4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d63f4:	b508      	push	{r3, lr}
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <HAL_I2C_Read_Data+0xc>)
   d63f8:	681b      	ldr	r3, [r3, #0]
   d63fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d63fc:	9301      	str	r3, [sp, #4]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	00030228 	.word	0x00030228

000d6404 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <HAL_I2C_Peek_Data+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	00030228 	.word	0x00030228

000d6414 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <HAL_I2C_Flush_Data+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	00030228 	.word	0x00030228

000d6424 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <HAL_I2C_Is_Enabled+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	00030228 	.word	0x00030228

000d6434 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b02      	ldr	r3, [pc, #8]	; (d6440 <HAL_I2C_Init+0xc>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	00030228 	.word	0x00030228

000d6444 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d6444:	b508      	push	{r3, lr}
   d6446:	4b02      	ldr	r3, [pc, #8]	; (d6450 <HAL_I2C_Acquire+0xc>)
   d6448:	681b      	ldr	r3, [r3, #0]
   d644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	bd08      	pop	{r3, pc}
   d6450:	00030228 	.word	0x00030228

000d6454 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <HAL_I2C_Release+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	00030228 	.word	0x00030228

000d6464 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6464:	b508      	push	{r3, lr}
   d6466:	4b02      	ldr	r3, [pc, #8]	; (d6470 <HAL_I2C_Request_Data_Ex+0xc>)
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d646c:	9301      	str	r3, [sp, #4]
   d646e:	bd08      	pop	{r3, pc}
   d6470:	00030228 	.word	0x00030228

000d6474 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6474:	b508      	push	{r3, lr}
   d6476:	4b02      	ldr	r3, [pc, #8]	; (d6480 <inet_inet_ntop+0xc>)
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	695b      	ldr	r3, [r3, #20]
   d647c:	9301      	str	r3, [sp, #4]
   d647e:	bd08      	pop	{r3, pc}
   d6480:	00030264 	.word	0x00030264

000d6484 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6484:	b508      	push	{r3, lr}
   d6486:	4b02      	ldr	r3, [pc, #8]	; (d6490 <netdb_freeaddrinfo+0xc>)
   d6488:	681b      	ldr	r3, [r3, #0]
   d648a:	689b      	ldr	r3, [r3, #8]
   d648c:	9301      	str	r3, [sp, #4]
   d648e:	bd08      	pop	{r3, pc}
   d6490:	00030268 	.word	0x00030268

000d6494 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6494:	b508      	push	{r3, lr}
   d6496:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <netdb_getaddrinfo+0xc>)
   d6498:	681b      	ldr	r3, [r3, #0]
   d649a:	68db      	ldr	r3, [r3, #12]
   d649c:	9301      	str	r3, [sp, #4]
   d649e:	bd08      	pop	{r3, pc}
   d64a0:	00030268 	.word	0x00030268

000d64a4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d64a4:	b508      	push	{r3, lr}
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <HAL_SPI_Init+0xc>)
   d64a8:	681b      	ldr	r3, [r3, #0]
   d64aa:	69db      	ldr	r3, [r3, #28]
   d64ac:	9301      	str	r3, [sp, #4]
   d64ae:	bd08      	pop	{r3, pc}
   d64b0:	00030230 	.word	0x00030230

000d64b4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d64b4:	b508      	push	{r3, lr}
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <HAL_SPI_Is_Enabled+0xc>)
   d64b8:	681b      	ldr	r3, [r3, #0]
   d64ba:	6a1b      	ldr	r3, [r3, #32]
   d64bc:	9301      	str	r3, [sp, #4]
   d64be:	bd08      	pop	{r3, pc}
   d64c0:	00030230 	.word	0x00030230

000d64c4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <HAL_USART_Init+0xc>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	681b      	ldr	r3, [r3, #0]
   d64cc:	9301      	str	r3, [sp, #4]
   d64ce:	bd08      	pop	{r3, pc}
   d64d0:	0003023c 	.word	0x0003023c

000d64d4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <HAL_USART_Write_Data+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	68db      	ldr	r3, [r3, #12]
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	0003023c 	.word	0x0003023c

000d64e4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <HAL_USART_Available_Data+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	691b      	ldr	r3, [r3, #16]
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	0003023c 	.word	0x0003023c

000d64f4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <HAL_USART_Read_Data+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	695b      	ldr	r3, [r3, #20]
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	0003023c 	.word	0x0003023c

000d6504 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <HAL_USART_Peek_Data+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	699b      	ldr	r3, [r3, #24]
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	0003023c 	.word	0x0003023c

000d6514 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <HAL_USART_Flush_Data+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	69db      	ldr	r3, [r3, #28]
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	0003023c 	.word	0x0003023c

000d6524 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <HAL_USART_Is_Enabled+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	6a1b      	ldr	r3, [r3, #32]
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	0003023c 	.word	0x0003023c

000d6534 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <HAL_USART_Available_Data_For_Write+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	0003023c 	.word	0x0003023c

000d6544 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <HAL_USB_USART_Init+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	681b      	ldr	r3, [r3, #0]
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	0003024c 	.word	0x0003024c

000d6554 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <HAL_USB_USART_Available_Data+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	691b      	ldr	r3, [r3, #16]
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	0003024c 	.word	0x0003024c

000d6564 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	695b      	ldr	r3, [r3, #20]
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	0003024c 	.word	0x0003024c

000d6574 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <HAL_USB_USART_Receive_Data+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	699b      	ldr	r3, [r3, #24]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	0003024c 	.word	0x0003024c

000d6584 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <HAL_USB_USART_Send_Data+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	69db      	ldr	r3, [r3, #28]
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	0003024c 	.word	0x0003024c

000d6594 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <HAL_USB_USART_Flush_Data+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	6a1b      	ldr	r3, [r3, #32]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	0003024c 	.word	0x0003024c

000d65a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <panic_+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	00030260 	.word	0x00030260

000d65b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <log_message+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	00030260 	.word	0x00030260

000d65c4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b03      	ldr	r3, [pc, #12]	; (d65d4 <diag_get_source+0x10>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d65ce:	9301      	str	r3, [sp, #4]
   d65d0:	bd08      	pop	{r3, pc}
   d65d2:	0000      	.short	0x0000
   d65d4:	00030260 	.word	0x00030260

000d65d8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d65d8:	b508      	push	{r3, lr}
   d65da:	4b02      	ldr	r3, [pc, #8]	; (d65e4 <system_mode+0xc>)
   d65dc:	681b      	ldr	r3, [r3, #0]
   d65de:	681b      	ldr	r3, [r3, #0]
   d65e0:	9301      	str	r3, [sp, #4]
   d65e2:	bd08      	pop	{r3, pc}
   d65e4:	00030220 	.word	0x00030220

000d65e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d65e8:	b508      	push	{r3, lr}
   d65ea:	4b02      	ldr	r3, [pc, #8]	; (d65f4 <set_system_mode+0xc>)
   d65ec:	681b      	ldr	r3, [r3, #0]
   d65ee:	685b      	ldr	r3, [r3, #4]
   d65f0:	9301      	str	r3, [sp, #4]
   d65f2:	bd08      	pop	{r3, pc}
   d65f4:	00030220 	.word	0x00030220

000d65f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d65f8:	b508      	push	{r3, lr}
   d65fa:	4b02      	ldr	r3, [pc, #8]	; (d6604 <system_delay_ms+0xc>)
   d65fc:	681b      	ldr	r3, [r3, #0]
   d65fe:	695b      	ldr	r3, [r3, #20]
   d6600:	9301      	str	r3, [sp, #4]
   d6602:	bd08      	pop	{r3, pc}
   d6604:	00030220 	.word	0x00030220

000d6608 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6608:	b508      	push	{r3, lr}
   d660a:	4b02      	ldr	r3, [pc, #8]	; (d6614 <system_sleep+0xc>)
   d660c:	681b      	ldr	r3, [r3, #0]
   d660e:	699b      	ldr	r3, [r3, #24]
   d6610:	9301      	str	r3, [sp, #4]
   d6612:	bd08      	pop	{r3, pc}
   d6614:	00030220 	.word	0x00030220

000d6618 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6618:	b508      	push	{r3, lr}
   d661a:	4b02      	ldr	r3, [pc, #8]	; (d6624 <system_thread_set_state+0xc>)
   d661c:	681b      	ldr	r3, [r3, #0]
   d661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6620:	9301      	str	r3, [sp, #4]
   d6622:	bd08      	pop	{r3, pc}
   d6624:	00030220 	.word	0x00030220

000d6628 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6628:	b508      	push	{r3, lr}
   d662a:	4b02      	ldr	r3, [pc, #8]	; (d6634 <application_thread_current+0xc>)
   d662c:	681b      	ldr	r3, [r3, #0]
   d662e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6630:	9301      	str	r3, [sp, #4]
   d6632:	bd08      	pop	{r3, pc}
   d6634:	00030220 	.word	0x00030220

000d6638 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6638:	b508      	push	{r3, lr}
   d663a:	4b02      	ldr	r3, [pc, #8]	; (d6644 <application_thread_invoke+0xc>)
   d663c:	681b      	ldr	r3, [r3, #0]
   d663e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6640:	9301      	str	r3, [sp, #4]
   d6642:	bd08      	pop	{r3, pc}
   d6644:	00030220 	.word	0x00030220

000d6648 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6648:	b508      	push	{r3, lr}
   d664a:	4b02      	ldr	r3, [pc, #8]	; (d6654 <system_thread_get_state+0xc>)
   d664c:	681b      	ldr	r3, [r3, #0]
   d664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6650:	9301      	str	r3, [sp, #4]
   d6652:	bd08      	pop	{r3, pc}
   d6654:	00030220 	.word	0x00030220

000d6658 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6658:	b508      	push	{r3, lr}
   d665a:	4b03      	ldr	r3, [pc, #12]	; (d6668 <system_ctrl_set_app_request_handler+0x10>)
   d665c:	681b      	ldr	r3, [r3, #0]
   d665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6662:	9301      	str	r3, [sp, #4]
   d6664:	bd08      	pop	{r3, pc}
   d6666:	0000      	.short	0x0000
   d6668:	00030220 	.word	0x00030220

000d666c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b03      	ldr	r3, [pc, #12]	; (d667c <system_ctrl_set_result+0x10>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6676:	9301      	str	r3, [sp, #4]
   d6678:	bd08      	pop	{r3, pc}
   d667a:	0000      	.short	0x0000
   d667c:	00030220 	.word	0x00030220

000d6680 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b03      	ldr	r3, [pc, #12]	; (d6690 <system_power_management_set_config+0x10>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d668a:	9301      	str	r3, [sp, #4]
   d668c:	bd08      	pop	{r3, pc}
   d668e:	0000      	.short	0x0000
   d6690:	00030220 	.word	0x00030220

000d6694 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b03      	ldr	r3, [pc, #12]	; (d66a4 <system_sleep_ext+0x10>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d669e:	9301      	str	r3, [sp, #4]
   d66a0:	bd08      	pop	{r3, pc}
   d66a2:	0000      	.short	0x0000
   d66a4:	00030220 	.word	0x00030220

000d66a8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d66a8:	b508      	push	{r3, lr}
   d66aa:	4b02      	ldr	r3, [pc, #8]	; (d66b4 <spark_variable+0xc>)
   d66ac:	681b      	ldr	r3, [r3, #0]
   d66ae:	681b      	ldr	r3, [r3, #0]
   d66b0:	9301      	str	r3, [sp, #4]
   d66b2:	bd08      	pop	{r3, pc}
   d66b4:	00030244 	.word	0x00030244

000d66b8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d66b8:	b508      	push	{r3, lr}
   d66ba:	4b02      	ldr	r3, [pc, #8]	; (d66c4 <spark_function+0xc>)
   d66bc:	681b      	ldr	r3, [r3, #0]
   d66be:	685b      	ldr	r3, [r3, #4]
   d66c0:	9301      	str	r3, [sp, #4]
   d66c2:	bd08      	pop	{r3, pc}
   d66c4:	00030244 	.word	0x00030244

000d66c8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d66c8:	b508      	push	{r3, lr}
   d66ca:	4b02      	ldr	r3, [pc, #8]	; (d66d4 <spark_process+0xc>)
   d66cc:	681b      	ldr	r3, [r3, #0]
   d66ce:	689b      	ldr	r3, [r3, #8]
   d66d0:	9301      	str	r3, [sp, #4]
   d66d2:	bd08      	pop	{r3, pc}
   d66d4:	00030244 	.word	0x00030244

000d66d8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d66d8:	b508      	push	{r3, lr}
   d66da:	4b02      	ldr	r3, [pc, #8]	; (d66e4 <spark_cloud_flag_connect+0xc>)
   d66dc:	681b      	ldr	r3, [r3, #0]
   d66de:	68db      	ldr	r3, [r3, #12]
   d66e0:	9301      	str	r3, [sp, #4]
   d66e2:	bd08      	pop	{r3, pc}
   d66e4:	00030244 	.word	0x00030244

000d66e8 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d66e8:	b508      	push	{r3, lr}
   d66ea:	4b02      	ldr	r3, [pc, #8]	; (d66f4 <spark_cloud_flag_disconnect+0xc>)
   d66ec:	681b      	ldr	r3, [r3, #0]
   d66ee:	691b      	ldr	r3, [r3, #16]
   d66f0:	9301      	str	r3, [sp, #4]
   d66f2:	bd08      	pop	{r3, pc}
   d66f4:	00030244 	.word	0x00030244

000d66f8 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d66f8:	b508      	push	{r3, lr}
   d66fa:	4b02      	ldr	r3, [pc, #8]	; (d6704 <spark_cloud_flag_connected+0xc>)
   d66fc:	681b      	ldr	r3, [r3, #0]
   d66fe:	695b      	ldr	r3, [r3, #20]
   d6700:	9301      	str	r3, [sp, #4]
   d6702:	bd08      	pop	{r3, pc}
   d6704:	00030244 	.word	0x00030244

000d6708 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6708:	b508      	push	{r3, lr}
   d670a:	4b02      	ldr	r3, [pc, #8]	; (d6714 <spark_deviceID+0xc>)
   d670c:	681b      	ldr	r3, [r3, #0]
   d670e:	69db      	ldr	r3, [r3, #28]
   d6710:	9301      	str	r3, [sp, #4]
   d6712:	bd08      	pop	{r3, pc}
   d6714:	00030244 	.word	0x00030244

000d6718 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6718:	b508      	push	{r3, lr}
   d671a:	4b02      	ldr	r3, [pc, #8]	; (d6724 <spark_send_event+0xc>)
   d671c:	681b      	ldr	r3, [r3, #0]
   d671e:	6a1b      	ldr	r3, [r3, #32]
   d6720:	9301      	str	r3, [sp, #4]
   d6722:	bd08      	pop	{r3, pc}
   d6724:	00030244 	.word	0x00030244

000d6728 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6728:	b508      	push	{r3, lr}
   d672a:	4b02      	ldr	r3, [pc, #8]	; (d6734 <spark_subscribe+0xc>)
   d672c:	681b      	ldr	r3, [r3, #0]
   d672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6730:	9301      	str	r3, [sp, #4]
   d6732:	bd08      	pop	{r3, pc}
   d6734:	00030244 	.word	0x00030244

000d6738 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6738:	b508      	push	{r3, lr}
   d673a:	4b02      	ldr	r3, [pc, #8]	; (d6744 <spark_sync_time+0xc>)
   d673c:	681b      	ldr	r3, [r3, #0]
   d673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6740:	9301      	str	r3, [sp, #4]
   d6742:	bd08      	pop	{r3, pc}
   d6744:	00030244 	.word	0x00030244

000d6748 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6748:	b508      	push	{r3, lr}
   d674a:	4b02      	ldr	r3, [pc, #8]	; (d6754 <spark_sync_time_pending+0xc>)
   d674c:	681b      	ldr	r3, [r3, #0]
   d674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6750:	9301      	str	r3, [sp, #4]
   d6752:	bd08      	pop	{r3, pc}
   d6754:	00030244 	.word	0x00030244

000d6758 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6758:	b508      	push	{r3, lr}
   d675a:	4b02      	ldr	r3, [pc, #8]	; (d6764 <spark_set_random_seed_from_cloud_handler+0xc>)
   d675c:	681b      	ldr	r3, [r3, #0]
   d675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6760:	9301      	str	r3, [sp, #4]
   d6762:	bd08      	pop	{r3, pc}
   d6764:	00030244 	.word	0x00030244

000d6768 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6768:	b508      	push	{r3, lr}
   d676a:	4b02      	ldr	r3, [pc, #8]	; (d6774 <network_connect+0xc>)
   d676c:	681b      	ldr	r3, [r3, #0]
   d676e:	685b      	ldr	r3, [r3, #4]
   d6770:	9301      	str	r3, [sp, #4]
   d6772:	bd08      	pop	{r3, pc}
   d6774:	00030240 	.word	0x00030240

000d6778 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6778:	b508      	push	{r3, lr}
   d677a:	4b02      	ldr	r3, [pc, #8]	; (d6784 <network_connecting+0xc>)
   d677c:	681b      	ldr	r3, [r3, #0]
   d677e:	689b      	ldr	r3, [r3, #8]
   d6780:	9301      	str	r3, [sp, #4]
   d6782:	bd08      	pop	{r3, pc}
   d6784:	00030240 	.word	0x00030240

000d6788 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6788:	b508      	push	{r3, lr}
   d678a:	4b02      	ldr	r3, [pc, #8]	; (d6794 <network_disconnect+0xc>)
   d678c:	681b      	ldr	r3, [r3, #0]
   d678e:	68db      	ldr	r3, [r3, #12]
   d6790:	9301      	str	r3, [sp, #4]
   d6792:	bd08      	pop	{r3, pc}
   d6794:	00030240 	.word	0x00030240

000d6798 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6798:	b508      	push	{r3, lr}
   d679a:	4b02      	ldr	r3, [pc, #8]	; (d67a4 <network_ready+0xc>)
   d679c:	681b      	ldr	r3, [r3, #0]
   d679e:	691b      	ldr	r3, [r3, #16]
   d67a0:	9301      	str	r3, [sp, #4]
   d67a2:	bd08      	pop	{r3, pc}
   d67a4:	00030240 	.word	0x00030240

000d67a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d67a8:	b508      	push	{r3, lr}
   d67aa:	4b02      	ldr	r3, [pc, #8]	; (d67b4 <network_on+0xc>)
   d67ac:	681b      	ldr	r3, [r3, #0]
   d67ae:	695b      	ldr	r3, [r3, #20]
   d67b0:	9301      	str	r3, [sp, #4]
   d67b2:	bd08      	pop	{r3, pc}
   d67b4:	00030240 	.word	0x00030240

000d67b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d67b8:	b508      	push	{r3, lr}
   d67ba:	4b02      	ldr	r3, [pc, #8]	; (d67c4 <network_off+0xc>)
   d67bc:	681b      	ldr	r3, [r3, #0]
   d67be:	699b      	ldr	r3, [r3, #24]
   d67c0:	9301      	str	r3, [sp, #4]
   d67c2:	bd08      	pop	{r3, pc}
   d67c4:	00030240 	.word	0x00030240

000d67c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d67c8:	b508      	push	{r3, lr}
   d67ca:	4b02      	ldr	r3, [pc, #8]	; (d67d4 <network_listen+0xc>)
   d67cc:	681b      	ldr	r3, [r3, #0]
   d67ce:	69db      	ldr	r3, [r3, #28]
   d67d0:	9301      	str	r3, [sp, #4]
   d67d2:	bd08      	pop	{r3, pc}
   d67d4:	00030240 	.word	0x00030240

000d67d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d67d8:	b508      	push	{r3, lr}
   d67da:	4b02      	ldr	r3, [pc, #8]	; (d67e4 <network_listening+0xc>)
   d67dc:	681b      	ldr	r3, [r3, #0]
   d67de:	6a1b      	ldr	r3, [r3, #32]
   d67e0:	9301      	str	r3, [sp, #4]
   d67e2:	bd08      	pop	{r3, pc}
   d67e4:	00030240 	.word	0x00030240

000d67e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d67e8:	b508      	push	{r3, lr}
   d67ea:	4b02      	ldr	r3, [pc, #8]	; (d67f4 <network_set_listen_timeout+0xc>)
   d67ec:	681b      	ldr	r3, [r3, #0]
   d67ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67f0:	9301      	str	r3, [sp, #4]
   d67f2:	bd08      	pop	{r3, pc}
   d67f4:	00030240 	.word	0x00030240

000d67f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d67f8:	b508      	push	{r3, lr}
   d67fa:	4b02      	ldr	r3, [pc, #8]	; (d6804 <network_get_listen_timeout+0xc>)
   d67fc:	681b      	ldr	r3, [r3, #0]
   d67fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6800:	9301      	str	r3, [sp, #4]
   d6802:	bd08      	pop	{r3, pc}
   d6804:	00030240 	.word	0x00030240

000d6808 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6808:	b508      	push	{r3, lr}
   d680a:	4b02      	ldr	r3, [pc, #8]	; (d6814 <malloc+0xc>)
   d680c:	681b      	ldr	r3, [r3, #0]
   d680e:	681b      	ldr	r3, [r3, #0]
   d6810:	9301      	str	r3, [sp, #4]
   d6812:	bd08      	pop	{r3, pc}
   d6814:	0003021c 	.word	0x0003021c

000d6818 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6818:	b508      	push	{r3, lr}
   d681a:	4b02      	ldr	r3, [pc, #8]	; (d6824 <free+0xc>)
   d681c:	681b      	ldr	r3, [r3, #0]
   d681e:	685b      	ldr	r3, [r3, #4]
   d6820:	9301      	str	r3, [sp, #4]
   d6822:	bd08      	pop	{r3, pc}
   d6824:	0003021c 	.word	0x0003021c

000d6828 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6828:	b508      	push	{r3, lr}
   d682a:	4b02      	ldr	r3, [pc, #8]	; (d6834 <realloc+0xc>)
   d682c:	681b      	ldr	r3, [r3, #0]
   d682e:	689b      	ldr	r3, [r3, #8]
   d6830:	9301      	str	r3, [sp, #4]
   d6832:	bd08      	pop	{r3, pc}
   d6834:	0003021c 	.word	0x0003021c

000d6838 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6838:	b508      	push	{r3, lr}
   d683a:	4b02      	ldr	r3, [pc, #8]	; (d6844 <siprintf+0xc>)
   d683c:	681b      	ldr	r3, [r3, #0]
   d683e:	691b      	ldr	r3, [r3, #16]
   d6840:	9301      	str	r3, [sp, #4]
   d6842:	bd08      	pop	{r3, pc}
   d6844:	0003021c 	.word	0x0003021c

000d6848 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6848:	b508      	push	{r3, lr}
   d684a:	4b02      	ldr	r3, [pc, #8]	; (d6854 <siscanf+0xc>)
   d684c:	681b      	ldr	r3, [r3, #0]
   d684e:	699b      	ldr	r3, [r3, #24]
   d6850:	9301      	str	r3, [sp, #4]
   d6852:	bd08      	pop	{r3, pc}
   d6854:	0003021c 	.word	0x0003021c

000d6858 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6858:	b508      	push	{r3, lr}
   d685a:	4b02      	ldr	r3, [pc, #8]	; (d6864 <snprintf+0xc>)
   d685c:	681b      	ldr	r3, [r3, #0]
   d685e:	69db      	ldr	r3, [r3, #28]
   d6860:	9301      	str	r3, [sp, #4]
   d6862:	bd08      	pop	{r3, pc}
   d6864:	0003021c 	.word	0x0003021c

000d6868 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6868:	b508      	push	{r3, lr}
   d686a:	4b02      	ldr	r3, [pc, #8]	; (d6874 <abort+0xc>)
   d686c:	681b      	ldr	r3, [r3, #0]
   d686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6870:	9301      	str	r3, [sp, #4]
   d6872:	bd08      	pop	{r3, pc}
   d6874:	0003021c 	.word	0x0003021c

000d6878 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6878:	b508      	push	{r3, lr}
   d687a:	4b02      	ldr	r3, [pc, #8]	; (d6884 <_malloc_r+0xc>)
   d687c:	681b      	ldr	r3, [r3, #0]
   d687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6880:	9301      	str	r3, [sp, #4]
   d6882:	bd08      	pop	{r3, pc}
   d6884:	0003021c 	.word	0x0003021c

000d6888 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d6888:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d688a:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d688c:	d007      	beq.n	d689e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d688e:	9d03      	ldr	r5, [sp, #12]
   d6890:	1a44      	subs	r4, r0, r1
   d6892:	1aed      	subs	r5, r5, r3
   d6894:	436c      	muls	r4, r5
   d6896:	1a52      	subs	r2, r2, r1
   d6898:	fb94 f4f2 	sdiv	r4, r4, r2
   d689c:	18e0      	adds	r0, r4, r3
}
   d689e:	bd30      	pop	{r4, r5, pc}

000d68a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d68a0:	2100      	movs	r1, #0
   d68a2:	f7ff bea9 	b.w	d65f8 <system_delay_ms>

000d68a6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d68a6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d68a8:	6883      	ldr	r3, [r0, #8]
   d68aa:	4604      	mov	r4, r0
   d68ac:	b90b      	cbnz	r3, d68b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d68ae:	f001 fd8c 	bl	d83ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d68b2:	68c3      	ldr	r3, [r0, #12]
   d68b4:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d68b6:	68a3      	ldr	r3, [r4, #8]
   d68b8:	b11b      	cbz	r3, d68c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68ba:	2203      	movs	r2, #3
   d68bc:	4621      	mov	r1, r4
   d68be:	4620      	mov	r0, r4
   d68c0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d68c2:	4620      	mov	r0, r4
   d68c4:	2110      	movs	r1, #16
}
   d68c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d68ca:	f001 bd62 	b.w	d8392 <_ZdlPvj>

000d68ce <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d68ce:	b510      	push	{r4, lr}
   d68d0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d68d2:	6800      	ldr	r0, [r0, #0]
   d68d4:	b108      	cbz	r0, d68da <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d68d6:	f7ff fcad 	bl	d6234 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d68da:	4620      	mov	r0, r4
   d68dc:	bd10      	pop	{r4, pc}

000d68de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d68de:	680b      	ldr	r3, [r1, #0]
   d68e0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d68e2:	b113      	cbz	r3, d68ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d68e4:	685a      	ldr	r2, [r3, #4]
   d68e6:	3201      	adds	r2, #1
   d68e8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d68ea:	4770      	bx	lr

000d68ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d68ec:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d68ee:	4c06      	ldr	r4, [pc, #24]	; (d6908 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d68f0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d68f2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d68f4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d68f6:	f7ff fc95 	bl	d6224 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d68fa:	4620      	mov	r0, r4
   d68fc:	4a03      	ldr	r2, [pc, #12]	; (d690c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d68fe:	4904      	ldr	r1, [pc, #16]	; (d6910 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6904:	f001 bd40 	b.w	d8388 <__aeabi_atexit>
   d6908:	2003e330 	.word	0x2003e330
   d690c:	2003e1b0 	.word	0x2003e1b0
   d6910:	000d68cf 	.word	0x000d68cf

000d6914 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6914:	2200      	movs	r2, #0
   d6916:	4611      	mov	r1, r2
   d6918:	6840      	ldr	r0, [r0, #4]
   d691a:	f7ff bf3d 	b.w	d6798 <network_ready>

000d691e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d691e:	2200      	movs	r2, #0
   d6920:	4611      	mov	r1, r2
   d6922:	6840      	ldr	r0, [r0, #4]
   d6924:	f7ff bf58 	b.w	d67d8 <network_listening>

000d6928 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6928:	2200      	movs	r2, #0
   d692a:	4611      	mov	r1, r2
   d692c:	6840      	ldr	r0, [r0, #4]
   d692e:	f7ff bf63 	b.w	d67f8 <network_get_listen_timeout>

000d6932 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6932:	2200      	movs	r2, #0
   d6934:	6840      	ldr	r0, [r0, #4]
   d6936:	f7ff bf57 	b.w	d67e8 <network_set_listen_timeout>

000d693a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d693a:	2200      	movs	r2, #0
   d693c:	f081 0101 	eor.w	r1, r1, #1
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	f7ff bf41 	b.w	d67c8 <network_listen>

000d6946 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6946:	2300      	movs	r3, #0
   d6948:	461a      	mov	r2, r3
   d694a:	4619      	mov	r1, r3
   d694c:	6840      	ldr	r0, [r0, #4]
   d694e:	f7ff bf33 	b.w	d67b8 <network_off>

000d6952 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6952:	2300      	movs	r3, #0
   d6954:	461a      	mov	r2, r3
   d6956:	4619      	mov	r1, r3
   d6958:	6840      	ldr	r0, [r0, #4]
   d695a:	f7ff bf25 	b.w	d67a8 <network_on>

000d695e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d695e:	2200      	movs	r2, #0
   d6960:	4611      	mov	r1, r2
   d6962:	6840      	ldr	r0, [r0, #4]
   d6964:	f7ff bf08 	b.w	d6778 <network_connecting>

000d6968 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6968:	2200      	movs	r2, #0
   d696a:	2102      	movs	r1, #2
   d696c:	6840      	ldr	r0, [r0, #4]
   d696e:	f7ff bf0b 	b.w	d6788 <network_disconnect>

000d6972 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6972:	2300      	movs	r3, #0
   d6974:	461a      	mov	r2, r3
   d6976:	6840      	ldr	r0, [r0, #4]
   d6978:	f7ff bef6 	b.w	d6768 <network_connect>

000d697c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d697c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d697e:	4b1b      	ldr	r3, [pc, #108]	; (d69ec <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6980:	6003      	str	r3, [r0, #0]
   d6982:	2500      	movs	r5, #0
   d6984:	460f      	mov	r7, r1
   d6986:	3328      	adds	r3, #40	; 0x28
   d6988:	2618      	movs	r6, #24
   d698a:	b089      	sub	sp, #36	; 0x24
   d698c:	6043      	str	r3, [r0, #4]
   d698e:	6085      	str	r5, [r0, #8]
   d6990:	60c5      	str	r5, [r0, #12]
   d6992:	4632      	mov	r2, r6
   d6994:	4629      	mov	r1, r5
   d6996:	4604      	mov	r4, r0
   d6998:	3010      	adds	r0, #16
   d699a:	f002 fcb6 	bl	d930a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d699e:	462a      	mov	r2, r5
   d69a0:	4629      	mov	r1, r5
   d69a2:	6878      	ldr	r0, [r7, #4]
   d69a4:	f7ff fef8 	bl	d6798 <network_ready>
   d69a8:	b908      	cbnz	r0, d69ae <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d69aa:	60a0      	str	r0, [r4, #8]
            return sig;
   d69ac:	e01b      	b.n	d69e6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d69ae:	4629      	mov	r1, r5
   d69b0:	4632      	mov	r2, r6
   d69b2:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d69b4:	9500      	str	r5, [sp, #0]
   d69b6:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d69b8:	f002 fca7 	bl	d930a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d69bc:	a902      	add	r1, sp, #8
   d69be:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d69c0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d69c4:	f7ff fbd6 	bl	d6174 <cellular_signal>
   d69c8:	b110      	cbz	r0, d69d0 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d69ca:	2301      	movs	r3, #1
   d69cc:	60a3      	str	r3, [r4, #8]
            return sig;
   d69ce:	e00a      	b.n	d69e6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d69d0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d69d2:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d69d4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d69d6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d69d8:	b90b      	cbnz	r3, d69de <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d69da:	2302      	movs	r3, #2
   d69dc:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d69de:	a902      	add	r1, sp, #8
   d69e0:	4620      	mov	r0, r4
   d69e2:	f000 f889 	bl	d6af8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d69e6:	4620      	mov	r0, r4
   d69e8:	b009      	add	sp, #36	; 0x24
   d69ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d69ec:	000dbef0 	.word	0x000dbef0

000d69f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d69f0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d69f2:	4c08      	ldr	r4, [pc, #32]	; (d6a14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d69f4:	2528      	movs	r5, #40	; 0x28
   d69f6:	462a      	mov	r2, r5
   d69f8:	2100      	movs	r1, #0
   d69fa:	4620      	mov	r0, r4
   d69fc:	f002 fc85 	bl	d930a <memset>
        cid = -1;
   d6a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a04:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6a06:	4b04      	ldr	r3, [pc, #16]	; (d6a18 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6a08:	8025      	strh	r5, [r4, #0]
   d6a0a:	2204      	movs	r2, #4
   d6a0c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6a0e:	4a03      	ldr	r2, [pc, #12]	; (d6a1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6a10:	601a      	str	r2, [r3, #0]
   d6a12:	bd38      	pop	{r3, r4, r5, pc}
   d6a14:	2003e33c 	.word	0x2003e33c
   d6a18:	2003e334 	.word	0x2003e334
   d6a1c:	000dbebc 	.word	0x000dbebc

000d6a20 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d6a20:	4770      	bx	lr

000d6a22 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d6a22:	7d00      	ldrb	r0, [r0, #20]
   d6a24:	4770      	bx	lr
	...

000d6a28 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d6a28:	7d03      	ldrb	r3, [r0, #20]
   d6a2a:	b11b      	cbz	r3, d6a34 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d6a2c:	6983      	ldr	r3, [r0, #24]
   d6a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6a32:	d102      	bne.n	d6a3a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d6a34:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6a4c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d6a38:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d6a3a:	ee07 3a90 	vmov	s15, r3
   d6a3e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6a50 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d6a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a46:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6a4a:	4770      	bx	lr
   d6a4c:	00000000 	.word	0x00000000
   d6a50:	42c80000 	.word	0x42c80000

000d6a54 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6a54:	7d03      	ldrb	r3, [r0, #20]
   d6a56:	b11b      	cbz	r3, d6a60 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d6a58:	6a03      	ldr	r3, [r0, #32]
   d6a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6a5e:	d102      	bne.n	d6a66 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d6a60:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6a78 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6a64:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d6a66:	ee07 3a90 	vmov	s15, r3
   d6a6a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6a7c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d6a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a72:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6a76:	4770      	bx	lr
   d6a78:	00000000 	.word	0x00000000
   d6a7c:	42c80000 	.word	0x42c80000

000d6a80 <_ZN14CellularSignalD0Ev>:
   d6a80:	b510      	push	{r4, lr}
   d6a82:	2128      	movs	r1, #40	; 0x28
   d6a84:	4604      	mov	r4, r0
   d6a86:	f001 fc84 	bl	d8392 <_ZdlPvj>
   d6a8a:	4620      	mov	r0, r4
   d6a8c:	bd10      	pop	{r4, pc}
	...

000d6a90 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6a90:	7d03      	ldrb	r3, [r0, #20]
   d6a92:	b17b      	cbz	r3, d6ab4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d6a96:	2b00      	cmp	r3, #0
   d6a98:	db0c      	blt.n	d6ab4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d6a9a:	ee07 3a90 	vmov	s15, r3
   d6a9e:	eddf 6a07 	vldr	s13, [pc, #28]	; d6abc <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6aa2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6ac0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d6aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6aae:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6ab2:	4770      	bx	lr
    }

    return -1.0f;
   d6ab4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6ab8:	4770      	bx	lr
   d6aba:	bf00      	nop
   d6abc:	477fff00 	.word	0x477fff00
   d6ac0:	42c80000 	.word	0x42c80000

000d6ac4 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d6ac4:	7d03      	ldrb	r3, [r0, #20]
   d6ac6:	b17b      	cbz	r3, d6ae8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d6ac8:	69c3      	ldr	r3, [r0, #28]
   d6aca:	2b00      	cmp	r3, #0
   d6acc:	db0c      	blt.n	d6ae8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d6ace:	ee07 3a90 	vmov	s15, r3
   d6ad2:	eddf 6a07 	vldr	s13, [pc, #28]	; d6af0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d6ad6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6af4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d6ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6ae2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6ae6:	4770      	bx	lr
    }

    return -1.0f;
   d6ae8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6aec:	4770      	bx	lr
   d6aee:	bf00      	nop
   d6af0:	477fff00 	.word	0x477fff00
   d6af4:	42c80000 	.word	0x42c80000

000d6af8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d6af8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d6afa:	460d      	mov	r5, r1
   d6afc:	f100 0410 	add.w	r4, r0, #16
   d6b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b04:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6b08:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d6b0c:	2001      	movs	r0, #1
   d6b0e:	bd30      	pop	{r4, r5, pc}

000d6b10 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d6b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b14:	4607      	mov	r7, r0
   d6b16:	460c      	mov	r4, r1
{
    if (base == 0) {
   d6b18:	4615      	mov	r5, r2
   d6b1a:	b92a      	cbnz	r2, d6b28 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d6b1c:	6803      	ldr	r3, [r0, #0]
   d6b1e:	b2c9      	uxtb	r1, r1
   d6b20:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d6b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d6b26:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6b28:	2900      	cmp	r1, #0
   d6b2a:	da07      	bge.n	d6b3c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d6b2c:	2a0a      	cmp	r2, #10
   d6b2e:	d105      	bne.n	d6b3c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d6b30:	212d      	movs	r1, #45	; 0x2d
   d6b32:	f000 fea3 	bl	d787c <_ZN5Print5printEc>
            val = -n;
   d6b36:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6b38:	4606      	mov	r6, r0
            val = -n;
   d6b3a:	e001      	b.n	d6b40 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d6b3c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6b3e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6b40:	b2ea      	uxtb	r2, r5
   d6b42:	4638      	mov	r0, r7
   d6b44:	f000 feb3 	bl	d78ae <_ZN5Print11printNumberEmh>
    }
}
   d6b48:	4430      	add	r0, r6
   d6b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6b4e <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d6b4e:	b570      	push	{r4, r5, r6, lr}
   d6b50:	460d      	mov	r5, r1
   d6b52:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6b54:	220a      	movs	r2, #10
   d6b56:	6881      	ldr	r1, [r0, #8]
   d6b58:	4628      	mov	r0, r5
   d6b5a:	f7ff ffd9 	bl	d6b10 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d6b5e:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6b60:	4604      	mov	r4, r0
    n += p.print(',');
   d6b62:	4628      	mov	r0, r5
   d6b64:	f000 fe8a 	bl	d787c <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d6b68:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d6b6a:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d6b6c:	68f1      	ldr	r1, [r6, #12]
   d6b6e:	4628      	mov	r0, r5
   d6b70:	f7ff ffce 	bl	d6b10 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d6b74:	4420      	add	r0, r4
   d6b76:	bd70      	pop	{r4, r5, r6, pc}

000d6b78 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d6b78:	f1a0 0004 	sub.w	r0, r0, #4
   d6b7c:	f7ff bfe7 	b.w	d6b4e <_ZNK14CellularSignal7printToER5Print>

000d6b80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b80:	4770      	bx	lr

000d6b82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6b82:	2000      	movs	r0, #0
   d6b84:	4770      	bx	lr

000d6b86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b86:	b510      	push	{r4, lr}
   d6b88:	2110      	movs	r1, #16
   d6b8a:	4604      	mov	r4, r0
   d6b8c:	f001 fc01 	bl	d8392 <_ZdlPvj>
   d6b90:	4620      	mov	r0, r4
   d6b92:	bd10      	pop	{r4, pc}

000d6b94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6b94:	b508      	push	{r3, lr}
      { delete this; }
   d6b96:	b108      	cbz	r0, d6b9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6b98:	f7ff fff5 	bl	d6b86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6b9c:	bd08      	pop	{r3, pc}

000d6b9e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6b9e:	2200      	movs	r2, #0
   d6ba0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6ba2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6ba4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6ba8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6baa:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6bae:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bb0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bb2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6bb4:	680c      	ldr	r4, [r1, #0]
   d6bb6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bb8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6bba:	bd10      	pop	{r4, pc}

000d6bbc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6bbc:	b510      	push	{r4, lr}
   d6bbe:	4604      	mov	r4, r0
    free((void*)msg_);
   d6bc0:	6800      	ldr	r0, [r0, #0]
   d6bc2:	f7ff fe29 	bl	d6818 <free>
}
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	bd10      	pop	{r4, pc}

000d6bca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6bca:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6bcc:	68c4      	ldr	r4, [r0, #12]
   d6bce:	b1f4      	cbz	r4, d6c0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6bd0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6bd2:	2b02      	cmp	r3, #2
   d6bd4:	d103      	bne.n	d6bde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6bd6:	f104 000c 	add.w	r0, r4, #12
   d6bda:	f7ff ffef 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6bde:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6be0:	b135      	cbz	r5, d6bf0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6be2:	4628      	mov	r0, r5
   d6be4:	f7fd fad9 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d6be8:	2110      	movs	r1, #16
   d6bea:	4628      	mov	r0, r5
   d6bec:	f001 fbd1 	bl	d8392 <_ZdlPvj>
   d6bf0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6bf2:	b135      	cbz	r5, d6c02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6bf4:	4628      	mov	r0, r5
   d6bf6:	f7fd fad0 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d6bfa:	2110      	movs	r1, #16
   d6bfc:	4628      	mov	r0, r5
   d6bfe:	f001 fbc8 	bl	d8392 <_ZdlPvj>
   d6c02:	4620      	mov	r0, r4
   d6c04:	2114      	movs	r1, #20
   d6c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6c0a:	f001 bbc2 	b.w	d8392 <_ZdlPvj>
   d6c0e:	bd38      	pop	{r3, r4, r5, pc}

000d6c10 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6c10:	b510      	push	{r4, lr}
   d6c12:	b088      	sub	sp, #32
   d6c14:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6c16:	4668      	mov	r0, sp
   d6c18:	f000 fed2 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d6c1c:	4669      	mov	r1, sp
   d6c1e:	a804      	add	r0, sp, #16
   d6c20:	f000 fef0 	bl	d7a04 <_ZN6StringC1ERKS_>
   d6c24:	a804      	add	r0, sp, #16
   d6c26:	47a0      	blx	r4
   d6c28:	4604      	mov	r4, r0
   d6c2a:	a804      	add	r0, sp, #16
   d6c2c:	f000 fe81 	bl	d7932 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6c30:	4668      	mov	r0, sp
   d6c32:	f000 fe7e 	bl	d7932 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d6c36:	4620      	mov	r0, r4
   d6c38:	b008      	add	sp, #32
   d6c3a:	bd10      	pop	{r4, pc}

000d6c3c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6c3e:	2410      	movs	r4, #16
   d6c40:	b085      	sub	sp, #20
   d6c42:	4607      	mov	r7, r0
   d6c44:	460e      	mov	r6, r1
   d6c46:	4615      	mov	r5, r2
   d6c48:	2100      	movs	r1, #0
   d6c4a:	4622      	mov	r2, r4
   d6c4c:	4668      	mov	r0, sp
   d6c4e:	f002 fb5c 	bl	d930a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6c52:	2200      	movs	r2, #0
   d6c54:	4669      	mov	r1, sp
   d6c56:	4610      	mov	r0, r2
         size = sizeof(*this);
   d6c58:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d6c5c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d6c5e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d6c60:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6c62:	f7ff fd29 	bl	d66b8 <spark_function>
}
   d6c66:	b005      	add	sp, #20
   d6c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c6a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6c6a:	b513      	push	{r0, r1, r4, lr}
   d6c6c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c6e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6c72:	2300      	movs	r3, #0
   d6c74:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c76:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c78:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6c7a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c7c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6c7e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c80:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c82:	f7fd fe1f 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c86:	4620      	mov	r0, r4
   d6c88:	b002      	add	sp, #8
   d6c8a:	bd10      	pop	{r4, pc}

000d6c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c8e:	460c      	mov	r4, r1
   d6c90:	ad02      	add	r5, sp, #8
   d6c92:	f854 3b04 	ldr.w	r3, [r4], #4
   d6c96:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6c9a:	4606      	mov	r6, r0
   d6c9c:	460f      	mov	r7, r1
   d6c9e:	a801      	add	r0, sp, #4
   d6ca0:	4621      	mov	r1, r4
   d6ca2:	f7ff fe1c 	bl	d68de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6ca6:	4629      	mov	r1, r5
   d6ca8:	4630      	mov	r0, r6
   d6caa:	f7ff ffde 	bl	d6c6a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6cae:	a801      	add	r0, sp, #4
   d6cb0:	f7fd fe08 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	f7fd fe05 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6cba:	4638      	mov	r0, r7
   d6cbc:	2108      	movs	r1, #8
   d6cbe:	f001 fb68 	bl	d8392 <_ZdlPvj>
        return p;
    }
   d6cc2:	4630      	mov	r0, r6
   d6cc4:	b003      	add	sp, #12
   d6cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6cc8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6cc8:	b513      	push	{r0, r1, r4, lr}
   d6cca:	460b      	mov	r3, r1
   d6ccc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cce:	c803      	ldmia	r0, {r0, r1}
   d6cd0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6cd4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6cd8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6cdc:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6ce0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6ce4:	b002      	add	sp, #8
   d6ce6:	bd10      	pop	{r4, pc}

000d6ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6ce8:	b538      	push	{r3, r4, r5, lr}
   d6cea:	2300      	movs	r3, #0
   d6cec:	4604      	mov	r4, r0
   d6cee:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6cf0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6cf2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6cf4:	f7fd f9d1 	bl	d409a <_Znwj>
   d6cf8:	b128      	cbz	r0, d6d06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6cfa:	2301      	movs	r3, #1
   d6cfc:	6043      	str	r3, [r0, #4]
   d6cfe:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6d00:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6d02:	6003      	str	r3, [r0, #0]
   d6d04:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6d06:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6d08:	4620      	mov	r0, r4
   d6d0a:	bd38      	pop	{r3, r4, r5, pc}
   d6d0c:	000dbf24 	.word	0x000dbf24

000d6d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d10:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6d12:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d14:	b90a      	cbnz	r2, d6d1a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6d16:	f001 fb58 	bl	d83ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d1a:	68c3      	ldr	r3, [r0, #12]
    }
   d6d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d20:	4718      	bx	r3

000d6d22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d22:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6d24:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6d26:	f100 0110 	add.w	r1, r0, #16
   d6d2a:	f7ff fff1 	bl	d6d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6d2e:	bd08      	pop	{r3, pc}

000d6d30 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d30:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6d32:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d34:	b90a      	cbnz	r2, d6d3a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6d36:	f001 fb48 	bl	d83ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d3a:	68c3      	ldr	r3, [r0, #12]
    }
   d6d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d40:	4718      	bx	r3

000d6d42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d42:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6d44:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6d46:	f100 0110 	add.w	r1, r0, #16
   d6d4a:	f7ff fff1 	bl	d6d30 <_ZNKSt8functionIFvRKbEEclES1_>
   d6d4e:	bd08      	pop	{r3, pc}

000d6d50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d50:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d52:	2300      	movs	r3, #0
   d6d54:	6083      	str	r3, [r0, #8]
   d6d56:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d58:	4604      	mov	r4, r0
   d6d5a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6d5c:	b12b      	cbz	r3, d6d6a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6d5e:	2202      	movs	r2, #2
   d6d60:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6d62:	68eb      	ldr	r3, [r5, #12]
   d6d64:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6d66:	68ab      	ldr	r3, [r5, #8]
   d6d68:	60a3      	str	r3, [r4, #8]
	}
    }
   d6d6a:	4620      	mov	r0, r4
   d6d6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d72:	b089      	sub	sp, #36	; 0x24
   d6d74:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6d76:	4668      	mov	r0, sp
   d6d78:	f7ff ff11 	bl	d6b9e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6d7c:	2300      	movs	r3, #0
   d6d7e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6d82:	f04f 0202 	mov.w	r2, #2
   d6d86:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6d8a:	2b00      	cmp	r3, #0
   d6d8c:	d103      	bne.n	d6d96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6d8e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6d92:	2900      	cmp	r1, #0
   d6d94:	d1f7      	bne.n	d6d86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6d96:	d002      	beq.n	d6d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6d98:	f88d 3008 	strb.w	r3, [sp, #8]
   d6d9c:	e063      	b.n	d6e66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6d9e:	f114 050c 	adds.w	r5, r4, #12
   d6da2:	d003      	beq.n	d6dac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6da4:	4669      	mov	r1, sp
   d6da6:	4628      	mov	r0, r5
   d6da8:	f7ff fef9 	bl	d6b9e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6dac:	f3bf 8f5f 	dmb	sy
   d6db0:	2301      	movs	r3, #1
   d6db2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6db4:	2000      	movs	r0, #0
   d6db6:	f104 0308 	add.w	r3, r4, #8
   d6dba:	f3bf 8f5f 	dmb	sy
   d6dbe:	e853 6f00 	ldrex	r6, [r3]
   d6dc2:	e843 0200 	strex	r2, r0, [r3]
   d6dc6:	2a00      	cmp	r2, #0
   d6dc8:	d1f9      	bne.n	d6dbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6dca:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6dce:	2e00      	cmp	r6, #0
   d6dd0:	d049      	beq.n	d6e66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6dd2:	f7ff fc29 	bl	d6628 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6dd6:	b120      	cbz	r0, d6de2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6dd8:	4629      	mov	r1, r5
   d6dda:	4630      	mov	r0, r6
   d6ddc:	f7ff ff98 	bl	d6d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6de0:	e03a      	b.n	d6e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6de2:	4631      	mov	r1, r6
   d6de4:	a802      	add	r0, sp, #8
   d6de6:	f7ff ffb3 	bl	d6d50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6dea:	68e0      	ldr	r0, [r4, #12]
   d6dec:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6df0:	b108      	cbz	r0, d6df6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6df2:	f002 facd 	bl	d9390 <strdup>
   d6df6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6df8:	2010      	movs	r0, #16
   d6dfa:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6dfe:	f7fd f94c 	bl	d409a <_Znwj>
   d6e02:	4605      	mov	r5, r0
   d6e04:	b1e8      	cbz	r0, d6e42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e06:	2700      	movs	r7, #0
   d6e08:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e0a:	2018      	movs	r0, #24
   d6e0c:	f7fd f945 	bl	d409a <_Znwj>
   d6e10:	4604      	mov	r4, r0
   d6e12:	b188      	cbz	r0, d6e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6e14:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e16:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6e18:	a802      	add	r0, sp, #8
   d6e1a:	f7ff ff55 	bl	d6cc8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e1e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6e20:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e22:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e24:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e26:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6e28:	a906      	add	r1, sp, #24
   d6e2a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e2c:	60e3      	str	r3, [r4, #12]
   d6e2e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6e32:	9205      	str	r2, [sp, #20]
   d6e34:	f7ff feb3 	bl	d6b9e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6e38:	4b0d      	ldr	r3, [pc, #52]	; (d6e70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6e3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e3c:	4b0d      	ldr	r3, [pc, #52]	; (d6e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e3e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6e40:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6e42:	a806      	add	r0, sp, #24
   d6e44:	f7ff feba 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e48:	a802      	add	r0, sp, #8
   d6e4a:	f7fd f9a6 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e4e:	2200      	movs	r2, #0
   d6e50:	4629      	mov	r1, r5
   d6e52:	4809      	ldr	r0, [pc, #36]	; (d6e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6e54:	f7ff fbf0 	bl	d6638 <application_thread_invoke>
   d6e58:	4630      	mov	r0, r6
   d6e5a:	f7fd f99e 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6e5e:	2110      	movs	r1, #16
   d6e60:	4630      	mov	r0, r6
   d6e62:	f001 fa96 	bl	d8392 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6e66:	4668      	mov	r0, sp
   d6e68:	f7ff fea8 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
    }
   d6e6c:	b009      	add	sp, #36	; 0x24
   d6e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e70:	000d6d23 	.word	0x000d6d23
   d6e74:	000d6f99 	.word	0x000d6f99
   d6e78:	000d68a7 	.word	0x000d68a7

000d6e7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e80:	b08b      	sub	sp, #44	; 0x2c
   d6e82:	4606      	mov	r6, r0
   d6e84:	460f      	mov	r7, r1
   d6e86:	4690      	mov	r8, r2
   d6e88:	4699      	mov	r9, r3
   d6e8a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e8e:	f7ff fc33 	bl	d66f8 <spark_cloud_flag_connected>
   d6e92:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6e94:	4683      	mov	fp, r0
   d6e96:	bb30      	cbnz	r0, d6ee6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6e98:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6e9c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e9e:	a905      	add	r1, sp, #20
   d6ea0:	4628      	mov	r0, r5
   d6ea2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6ea6:	f7ff fe7a 	bl	d6b9e <_ZN8particle5ErrorC1EOS0_>
   d6eaa:	2014      	movs	r0, #20
   d6eac:	f7fd f8f5 	bl	d409a <_Znwj>
   d6eb0:	4604      	mov	r4, r0
   d6eb2:	b158      	cbz	r0, d6ecc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6eb4:	2302      	movs	r3, #2
   d6eb6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6eb8:	2301      	movs	r3, #1
   d6eba:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6ebc:	f8c0 b004 	str.w	fp, [r0, #4]
   d6ec0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6ec4:	4629      	mov	r1, r5
   d6ec6:	300c      	adds	r0, #12
   d6ec8:	f7ff fe69 	bl	d6b9e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6ecc:	4630      	mov	r0, r6
   d6ece:	4621      	mov	r1, r4
   d6ed0:	f840 4b04 	str.w	r4, [r0], #4
   d6ed4:	f7ff ff08 	bl	d6ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6ed8:	4628      	mov	r0, r5
   d6eda:	f7ff fe6f 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6ede:	a805      	add	r0, sp, #20
   d6ee0:	f7ff fe6c 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
   d6ee4:	e052      	b.n	d6f8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6ee6:	2400      	movs	r4, #0
   d6ee8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6eea:	2014      	movs	r0, #20
   d6eec:	606c      	str	r4, [r5, #4]
   d6eee:	60ac      	str	r4, [r5, #8]
   d6ef0:	9307      	str	r3, [sp, #28]
   d6ef2:	f7fd f8d2 	bl	d409a <_Znwj>
   d6ef6:	4601      	mov	r1, r0
   d6ef8:	b118      	cbz	r0, d6f02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6efa:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6efc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6efe:	6044      	str	r4, [r0, #4]
   d6f00:	6084      	str	r4, [r0, #8]
   d6f02:	a804      	add	r0, sp, #16
   d6f04:	9103      	str	r1, [sp, #12]
   d6f06:	f7ff feef 	bl	d6ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6f0a:	4b22      	ldr	r3, [pc, #136]	; (d6f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6f0c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6f0e:	2008      	movs	r0, #8
   d6f10:	f7fd f8c3 	bl	d409a <_Znwj>
   d6f14:	4604      	mov	r4, r0
   d6f16:	b128      	cbz	r0, d6f24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6f18:	9b03      	ldr	r3, [sp, #12]
   d6f1a:	f840 3b04 	str.w	r3, [r0], #4
   d6f1e:	a904      	add	r1, sp, #16
   d6f20:	f7ff fcdd 	bl	d68de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6f24:	9500      	str	r5, [sp, #0]
   d6f26:	fa5f f38a 	uxtb.w	r3, sl
   d6f2a:	464a      	mov	r2, r9
   d6f2c:	4641      	mov	r1, r8
   d6f2e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6f30:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6f32:	f7ff fbf1 	bl	d6718 <spark_send_event>
   d6f36:	b920      	cbnz	r0, d6f42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6f38:	9b03      	ldr	r3, [sp, #12]
   d6f3a:	785b      	ldrb	r3, [r3, #1]
   d6f3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6f40:	b183      	cbz	r3, d6f64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6f42:	9b03      	ldr	r3, [sp, #12]
   d6f44:	9305      	str	r3, [sp, #20]
   d6f46:	a904      	add	r1, sp, #16
   d6f48:	a806      	add	r0, sp, #24
   d6f4a:	f7ff fcc8 	bl	d68de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6f4e:	a905      	add	r1, sp, #20
   d6f50:	4630      	mov	r0, r6
   d6f52:	f7ff fe8a 	bl	d6c6a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f56:	a806      	add	r0, sp, #24
   d6f58:	f7fd fcb4 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f5c:	a804      	add	r0, sp, #16
   d6f5e:	f7fd fcb1 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f62:	e013      	b.n	d6f8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6f64:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6f68:	a905      	add	r1, sp, #20
   d6f6a:	a803      	add	r0, sp, #12
   d6f6c:	9205      	str	r2, [sp, #20]
   d6f6e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6f72:	f7ff fefd 	bl	d6d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6f76:	a805      	add	r0, sp, #20
   d6f78:	f7ff fe20 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6f7c:	a805      	add	r0, sp, #20
   d6f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6f80:	f7ff fe84 	bl	d6c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6f84:	a806      	add	r0, sp, #24
   d6f86:	f7fd fc9d 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f8a:	e7da      	b.n	d6f42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6f8c:	4630      	mov	r0, r6
   d6f8e:	b00b      	add	sp, #44	; 0x2c
   d6f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f94:	000d7109 	.word	0x000d7109

000d6f98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f98:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f9c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f9e:	d006      	beq.n	d6fae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6fa0:	2a03      	cmp	r2, #3
   d6fa2:	d017      	beq.n	d6fd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6fa4:	2a01      	cmp	r2, #1
   d6fa6:	d122      	bne.n	d6fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6fa8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6faa:	6003      	str	r3, [r0, #0]
	      break;
   d6fac:	e01f      	b.n	d6fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6fae:	2018      	movs	r0, #24
   d6fb0:	680e      	ldr	r6, [r1, #0]
   d6fb2:	f7fd f872 	bl	d409a <_Znwj>
   d6fb6:	4605      	mov	r5, r0
   d6fb8:	b150      	cbz	r0, d6fd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6fba:	4631      	mov	r1, r6
   d6fbc:	f7ff fec8 	bl	d6d50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6fc0:	6930      	ldr	r0, [r6, #16]
   d6fc2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6fc6:	b108      	cbz	r0, d6fcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6fc8:	f002 f9e2 	bl	d9390 <strdup>
   d6fcc:	6128      	str	r0, [r5, #16]
   d6fce:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6fd0:	6025      	str	r5, [r4, #0]
   d6fd2:	e00c      	b.n	d6fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6fd4:	6804      	ldr	r4, [r0, #0]
   d6fd6:	b154      	cbz	r4, d6fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6fd8:	f104 0010 	add.w	r0, r4, #16
   d6fdc:	f7ff fdee 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6fe0:	4620      	mov	r0, r4
   d6fe2:	f7fd f8da 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6fe6:	2118      	movs	r1, #24
   d6fe8:	4620      	mov	r0, r4
   d6fea:	f001 f9d2 	bl	d8392 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6fee:	2000      	movs	r0, #0
   d6ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ff2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ff2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ff4:	2300      	movs	r3, #0
   d6ff6:	6083      	str	r3, [r0, #8]
   d6ff8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ffa:	4604      	mov	r4, r0
   d6ffc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6ffe:	b12b      	cbz	r3, d700c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7000:	2202      	movs	r2, #2
   d7002:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7004:	68eb      	ldr	r3, [r5, #12]
   d7006:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7008:	68ab      	ldr	r3, [r5, #8]
   d700a:	60a3      	str	r3, [r4, #8]
	}
    }
   d700c:	4620      	mov	r0, r4
   d700e:	bd38      	pop	{r3, r4, r5, pc}

000d7010 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7010:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7012:	b570      	push	{r4, r5, r6, lr}
   d7014:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7016:	d006      	beq.n	d7026 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7018:	2a03      	cmp	r2, #3
   d701a:	d011      	beq.n	d7040 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d701c:	2a01      	cmp	r2, #1
   d701e:	d118      	bne.n	d7052 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7020:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7022:	6003      	str	r3, [r0, #0]
	      break;
   d7024:	e015      	b.n	d7052 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7026:	2014      	movs	r0, #20
   d7028:	680e      	ldr	r6, [r1, #0]
   d702a:	f7fd f836 	bl	d409a <_Znwj>
   d702e:	4605      	mov	r5, r0
   d7030:	b120      	cbz	r0, d703c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7032:	4631      	mov	r1, r6
   d7034:	f7ff ffdd 	bl	d6ff2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7038:	7c33      	ldrb	r3, [r6, #16]
   d703a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d703c:	6025      	str	r5, [r4, #0]
   d703e:	e008      	b.n	d7052 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7040:	6804      	ldr	r4, [r0, #0]
   d7042:	b134      	cbz	r4, d7052 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7044:	4620      	mov	r0, r4
   d7046:	f7fd f8a8 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d704a:	2114      	movs	r1, #20
   d704c:	4620      	mov	r0, r4
   d704e:	f001 f9a0 	bl	d8392 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7052:	2000      	movs	r0, #0
   d7054:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7058 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7058:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d705a:	2300      	movs	r3, #0
   d705c:	b087      	sub	sp, #28
   d705e:	460c      	mov	r4, r1
   d7060:	f3bf 8f5f 	dmb	sy
   d7064:	e850 6f00 	ldrex	r6, [r0]
   d7068:	e840 3200 	strex	r2, r3, [r0]
   d706c:	2a00      	cmp	r2, #0
   d706e:	d1f9      	bne.n	d7064 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7070:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7074:	2e00      	cmp	r6, #0
   d7076:	d03f      	beq.n	d70f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7078:	4618      	mov	r0, r3
   d707a:	f7ff fad5 	bl	d6628 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d707e:	4607      	mov	r7, r0
   d7080:	b120      	cbz	r0, d708c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7082:	4621      	mov	r1, r4
   d7084:	4630      	mov	r0, r6
   d7086:	f7ff fe53 	bl	d6d30 <_ZNKSt8functionIFvRKbEEclES1_>
   d708a:	e02e      	b.n	d70ea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d708c:	4631      	mov	r1, r6
   d708e:	a801      	add	r0, sp, #4
   d7090:	f7ff ffaf 	bl	d6ff2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7094:	7823      	ldrb	r3, [r4, #0]
   d7096:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d709a:	2010      	movs	r0, #16
   d709c:	f7fc fffd 	bl	d409a <_Znwj>
   d70a0:	4605      	mov	r5, r0
   d70a2:	b1d0      	cbz	r0, d70da <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d70a4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d70a6:	2014      	movs	r0, #20
   d70a8:	f7fc fff7 	bl	d409a <_Znwj>
   d70ac:	4604      	mov	r4, r0
   d70ae:	b178      	cbz	r0, d70d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d70b0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d70b2:	4601      	mov	r1, r0
   d70b4:	a801      	add	r0, sp, #4
   d70b6:	f7ff fe07 	bl	d6cc8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70ba:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d70bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d70be:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70c0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d70c2:	9203      	str	r2, [sp, #12]
   d70c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d70c6:	60e3      	str	r3, [r4, #12]
   d70c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d70cc:	9204      	str	r2, [sp, #16]
   d70ce:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d70d0:	4b0a      	ldr	r3, [pc, #40]	; (d70fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d70d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d70d4:	4b0a      	ldr	r3, [pc, #40]	; (d7100 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d70d6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d70d8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d70da:	a801      	add	r0, sp, #4
   d70dc:	f7fd f85d 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d70e0:	2200      	movs	r2, #0
   d70e2:	4629      	mov	r1, r5
   d70e4:	4807      	ldr	r0, [pc, #28]	; (d7104 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d70e6:	f7ff faa7 	bl	d6638 <application_thread_invoke>
   d70ea:	4630      	mov	r0, r6
   d70ec:	f7fd f855 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d70f0:	2110      	movs	r1, #16
   d70f2:	4630      	mov	r0, r6
   d70f4:	f001 f94d 	bl	d8392 <_ZdlPvj>
        }
    }
   d70f8:	b007      	add	sp, #28
   d70fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d70fc:	000d6d43 	.word	0x000d6d43
   d7100:	000d7011 	.word	0x000d7011
   d7104:	000d68a7 	.word	0x000d68a7

000d7108 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7108:	b530      	push	{r4, r5, lr}
   d710a:	b085      	sub	sp, #20
   d710c:	4604      	mov	r4, r0
   d710e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7110:	4668      	mov	r0, sp
   d7112:	4611      	mov	r1, r2
   d7114:	f7ff fdba 	bl	d6c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7118:	b17c      	cbz	r4, d713a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d711a:	b224      	sxth	r4, r4
   d711c:	4628      	mov	r0, r5
   d711e:	b10d      	cbz	r5, d7124 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7120:	f002 f936 	bl	d9390 <strdup>
   d7124:	9002      	str	r0, [sp, #8]
   d7126:	a902      	add	r1, sp, #8
   d7128:	4668      	mov	r0, sp
   d712a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d712e:	f7ff fe1f 	bl	d6d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7132:	a802      	add	r0, sp, #8
   d7134:	f7ff fd42 	bl	d6bbc <_ZN8particle5ErrorD1Ev>
   d7138:	e01d      	b.n	d7176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d713a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d713c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7140:	f04f 0201 	mov.w	r2, #1
   d7144:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7148:	42a3      	cmp	r3, r4
   d714a:	d103      	bne.n	d7154 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d714c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7150:	2900      	cmp	r1, #0
   d7152:	d1f7      	bne.n	d7144 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7154:	d002      	beq.n	d715c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7156:	f88d 3008 	strb.w	r3, [sp, #8]
   d715a:	e00c      	b.n	d7176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d715c:	f110 010c 	adds.w	r1, r0, #12
   d7160:	f04f 0301 	mov.w	r3, #1
   d7164:	bf18      	it	ne
   d7166:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7168:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d716c:	3004      	adds	r0, #4
   d716e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7172:	f7ff ff71 	bl	d7058 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7176:	a801      	add	r0, sp, #4
   d7178:	f7fd fba4 	bl	d48c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d717c:	b005      	add	sp, #20
   d717e:	bd30      	pop	{r4, r5, pc}

000d7180 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7180:	2200      	movs	r2, #0
   d7182:	4611      	mov	r1, r2
   d7184:	6840      	ldr	r0, [r0, #4]
   d7186:	f7ff bb27 	b.w	d67d8 <network_listening>

000d718a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d718a:	2200      	movs	r2, #0
   d718c:	4611      	mov	r1, r2
   d718e:	6840      	ldr	r0, [r0, #4]
   d7190:	f7ff bb32 	b.w	d67f8 <network_get_listen_timeout>

000d7194 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7194:	2200      	movs	r2, #0
   d7196:	6840      	ldr	r0, [r0, #4]
   d7198:	f7ff bb26 	b.w	d67e8 <network_set_listen_timeout>

000d719c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d719c:	2200      	movs	r2, #0
   d719e:	f081 0101 	eor.w	r1, r1, #1
   d71a2:	6840      	ldr	r0, [r0, #4]
   d71a4:	f7ff bb10 	b.w	d67c8 <network_listen>

000d71a8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d71a8:	2300      	movs	r3, #0
   d71aa:	461a      	mov	r2, r3
   d71ac:	4619      	mov	r1, r3
   d71ae:	6840      	ldr	r0, [r0, #4]
   d71b0:	f7ff bb02 	b.w	d67b8 <network_off>

000d71b4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d71b4:	2300      	movs	r3, #0
   d71b6:	461a      	mov	r2, r3
   d71b8:	4619      	mov	r1, r3
   d71ba:	6840      	ldr	r0, [r0, #4]
   d71bc:	f7ff baf4 	b.w	d67a8 <network_on>

000d71c0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d71c0:	2200      	movs	r2, #0
   d71c2:	4611      	mov	r1, r2
   d71c4:	6840      	ldr	r0, [r0, #4]
   d71c6:	f7ff bae7 	b.w	d6798 <network_ready>

000d71ca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d71ca:	2200      	movs	r2, #0
   d71cc:	4611      	mov	r1, r2
   d71ce:	6840      	ldr	r0, [r0, #4]
   d71d0:	f7ff bad2 	b.w	d6778 <network_connecting>

000d71d4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d71d4:	2200      	movs	r2, #0
   d71d6:	2102      	movs	r1, #2
   d71d8:	6840      	ldr	r0, [r0, #4]
   d71da:	f7ff bad5 	b.w	d6788 <network_disconnect>

000d71de <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d71de:	2300      	movs	r3, #0
   d71e0:	461a      	mov	r2, r3
   d71e2:	6840      	ldr	r0, [r0, #4]
   d71e4:	f7ff bac0 	b.w	d6768 <network_connect>

000d71e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d71e8:	4b02      	ldr	r3, [pc, #8]	; (d71f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d71ea:	2203      	movs	r2, #3
   d71ec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d71ee:	4a02      	ldr	r2, [pc, #8]	; (d71f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d71f0:	601a      	str	r2, [r3, #0]
   d71f2:	4770      	bx	lr
   d71f4:	2003e364 	.word	0x2003e364
   d71f8:	000dbf40 	.word	0x000dbf40

000d71fc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d71fc:	4770      	bx	lr

000d71fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d71fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7200:	4606      	mov	r6, r0
   d7202:	4615      	mov	r5, r2
   d7204:	460c      	mov	r4, r1
   d7206:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7208:	42bc      	cmp	r4, r7
   d720a:	d006      	beq.n	d721a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d720c:	6833      	ldr	r3, [r6, #0]
   d720e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7212:	689b      	ldr	r3, [r3, #8]
   d7214:	4630      	mov	r0, r6
   d7216:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7218:	e7f6      	b.n	d7208 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d721a:	4628      	mov	r0, r5
   d721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d721e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d721e:	2200      	movs	r2, #0
   d7220:	7c00      	ldrb	r0, [r0, #16]
   d7222:	f7ff b8d7 	b.w	d63d4 <HAL_I2C_Write_Data>

000d7226 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7226:	2100      	movs	r1, #0
   d7228:	7c00      	ldrb	r0, [r0, #16]
   d722a:	f7ff b8db 	b.w	d63e4 <HAL_I2C_Available_Data>

000d722e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d722e:	2100      	movs	r1, #0
   d7230:	7c00      	ldrb	r0, [r0, #16]
   d7232:	f7ff b8df 	b.w	d63f4 <HAL_I2C_Read_Data>

000d7236 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7236:	2100      	movs	r1, #0
   d7238:	7c00      	ldrb	r0, [r0, #16]
   d723a:	f7ff b8e3 	b.w	d6404 <HAL_I2C_Peek_Data>

000d723e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d723e:	2100      	movs	r1, #0
   d7240:	7c00      	ldrb	r0, [r0, #16]
   d7242:	f7ff b8e7 	b.w	d6414 <HAL_I2C_Flush_Data>

000d7246 <_ZN7TwoWireD0Ev>:
   d7246:	b510      	push	{r4, lr}
   d7248:	2114      	movs	r1, #20
   d724a:	4604      	mov	r4, r0
   d724c:	f001 f8a1 	bl	d8392 <_ZdlPvj>
   d7250:	4620      	mov	r0, r4
   d7252:	bd10      	pop	{r4, pc}

000d7254 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7254:	b510      	push	{r4, lr}
   d7256:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7258:	2300      	movs	r3, #0
   d725a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d725c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7260:	60a3      	str	r3, [r4, #8]
   d7262:	4b04      	ldr	r3, [pc, #16]	; (d7274 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7264:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7266:	4608      	mov	r0, r1
   d7268:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d726a:	4611      	mov	r1, r2
   d726c:	f7ff f8e2 	bl	d6434 <HAL_I2C_Init>
}
   d7270:	4620      	mov	r0, r4
   d7272:	bd10      	pop	{r4, pc}
   d7274:	000dbf74 	.word	0x000dbf74

000d7278 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7278:	2300      	movs	r3, #0
   d727a:	461a      	mov	r2, r3
   d727c:	4619      	mov	r1, r3
   d727e:	7c00      	ldrb	r0, [r0, #16]
   d7280:	f7ff b890 	b.w	d63a4 <HAL_I2C_Begin>

000d7284 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7284:	b570      	push	{r4, r5, r6, lr}
   d7286:	460c      	mov	r4, r1
   d7288:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d728a:	2514      	movs	r5, #20
   d728c:	4606      	mov	r6, r0
   d728e:	462a      	mov	r2, r5
   d7290:	2100      	movs	r1, #0
   d7292:	a801      	add	r0, sp, #4
   d7294:	f002 f839 	bl	d930a <memset>
   d7298:	7823      	ldrb	r3, [r4, #0]
   d729a:	f88d 3008 	strb.w	r3, [sp, #8]
   d729e:	6863      	ldr	r3, [r4, #4]
   d72a0:	9303      	str	r3, [sp, #12]
   d72a2:	68e3      	ldr	r3, [r4, #12]
   d72a4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d72a6:	2200      	movs	r2, #0
   d72a8:	7a23      	ldrb	r3, [r4, #8]
   d72aa:	7c30      	ldrb	r0, [r6, #16]
   d72ac:	f8ad 5004 	strh.w	r5, [sp, #4]
   d72b0:	a901      	add	r1, sp, #4
   d72b2:	9305      	str	r3, [sp, #20]
   d72b4:	f7ff f8d6 	bl	d6464 <HAL_I2C_Request_Data_Ex>
}
   d72b8:	b006      	add	sp, #24
   d72ba:	bd70      	pop	{r4, r5, r6, pc}

000d72bc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d72bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d72be:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d72c0:	f88d 1000 	strb.w	r1, [sp]
   d72c4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d72c8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d72ca:	bf18      	it	ne
   d72cc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d72ce:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d72d0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d72d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d72d6:	f7ff ffd5 	bl	d7284 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d72da:	b005      	add	sp, #20
   d72dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d72e0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d72e0:	2301      	movs	r3, #1
   d72e2:	f7ff bfeb 	b.w	d72bc <_ZN7TwoWire11requestFromEhjh>

000d72e6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d72e6:	2200      	movs	r2, #0
   d72e8:	7c00      	ldrb	r0, [r0, #16]
   d72ea:	f7ff b863 	b.w	d63b4 <HAL_I2C_Begin_Transmission>

000d72ee <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d72ee:	b2c9      	uxtb	r1, r1
   d72f0:	f7ff bff9 	b.w	d72e6 <_ZN7TwoWire17beginTransmissionEh>

000d72f4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d72f4:	2200      	movs	r2, #0
   d72f6:	7c00      	ldrb	r0, [r0, #16]
   d72f8:	f7ff b864 	b.w	d63c4 <HAL_I2C_End_Transmission>

000d72fc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d72fc:	2101      	movs	r1, #1
   d72fe:	f7ff bff9 	b.w	d72f4 <_ZN7TwoWire15endTransmissionEh>

000d7302 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7302:	2100      	movs	r1, #0
   d7304:	7c00      	ldrb	r0, [r0, #16]
   d7306:	f7ff b88d 	b.w	d6424 <HAL_I2C_Is_Enabled>

000d730a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d730a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d730c:	2100      	movs	r1, #0
   d730e:	7c00      	ldrb	r0, [r0, #16]
   d7310:	f7ff f898 	bl	d6444 <HAL_I2C_Acquire>
}
   d7314:	fab0 f080 	clz	r0, r0
   d7318:	0940      	lsrs	r0, r0, #5
   d731a:	bd08      	pop	{r3, pc}

000d731c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d731c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d731e:	2100      	movs	r1, #0
   d7320:	7c00      	ldrb	r0, [r0, #16]
   d7322:	f7ff f897 	bl	d6454 <HAL_I2C_Release>
}
   d7326:	fab0 f080 	clz	r0, r0
   d732a:	0940      	lsrs	r0, r0, #5
   d732c:	bd08      	pop	{r3, pc}

000d732e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d732e:	4770      	bx	lr

000d7330 <_ZN9IPAddressD0Ev>:
   d7330:	b510      	push	{r4, lr}
   d7332:	2118      	movs	r1, #24
   d7334:	4604      	mov	r4, r0
   d7336:	f001 f82c 	bl	d8392 <_ZdlPvj>
   d733a:	4620      	mov	r0, r4
   d733c:	bd10      	pop	{r4, pc}

000d733e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d733e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7340:	7d03      	ldrb	r3, [r0, #20]
   d7342:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7344:	b08d      	sub	sp, #52	; 0x34
   d7346:	460e      	mov	r6, r1
   d7348:	f100 0704 	add.w	r7, r0, #4
   d734c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7350:	d002      	beq.n	d7358 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7352:	f100 0508 	add.w	r5, r0, #8
   d7356:	e018      	b.n	d738a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7358:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d735a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d735c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7360:	232f      	movs	r3, #47	; 0x2f
   d7362:	462a      	mov	r2, r5
   d7364:	200a      	movs	r0, #10
   d7366:	f7ff f885 	bl	d6474 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d736a:	4628      	mov	r0, r5
   d736c:	f002 f82b 	bl	d93c6 <strlen>
   d7370:	6833      	ldr	r3, [r6, #0]
   d7372:	4602      	mov	r2, r0
   d7374:	68db      	ldr	r3, [r3, #12]
   d7376:	4629      	mov	r1, r5
   d7378:	4630      	mov	r0, r6
   d737a:	4798      	blx	r3
   d737c:	e00f      	b.n	d739e <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d737e:	b124      	cbz	r4, d738a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7380:	212e      	movs	r1, #46	; 0x2e
   d7382:	4630      	mov	r0, r6
   d7384:	f000 fa7a 	bl	d787c <_ZN5Print5printEc>
   d7388:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d738a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d738e:	220a      	movs	r2, #10
   d7390:	4630      	mov	r0, r6
   d7392:	f000 fa8c 	bl	d78ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7396:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7398:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d739a:	d1f0      	bne.n	d737e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d739c:	4620      	mov	r0, r4
    }
    return n;
}
   d739e:	b00d      	add	sp, #52	; 0x34
   d73a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d73a4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d73a4:	b510      	push	{r4, lr}
   d73a6:	4b05      	ldr	r3, [pc, #20]	; (d73bc <_ZN9IPAddressC1Ev+0x18>)
   d73a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d73aa:	2211      	movs	r2, #17
   d73ac:	f840 3b04 	str.w	r3, [r0], #4
   d73b0:	2100      	movs	r1, #0
   d73b2:	f001 ffaa 	bl	d930a <memset>
{
    clear();
}
   d73b6:	4620      	mov	r0, r4
   d73b8:	bd10      	pop	{r4, pc}
   d73ba:	bf00      	nop
   d73bc:	000dbf9c 	.word	0x000dbf9c

000d73c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d73c0:	4603      	mov	r3, r0
   d73c2:	4a07      	ldr	r2, [pc, #28]	; (d73e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d73c4:	b510      	push	{r4, lr}
   d73c6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d73ca:	f101 0210 	add.w	r2, r1, #16
   d73ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d73d2:	f843 4b04 	str.w	r4, [r3], #4
   d73d6:	4291      	cmp	r1, r2
   d73d8:	d1f9      	bne.n	d73ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d73da:	780a      	ldrb	r2, [r1, #0]
   d73dc:	701a      	strb	r2, [r3, #0]
}
   d73de:	bd10      	pop	{r4, pc}
   d73e0:	000dbf9c 	.word	0x000dbf9c

000d73e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d73e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d73e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d73ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d73ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d73f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d73f6:	2304      	movs	r3, #4
   d73f8:	6041      	str	r1, [r0, #4]
   d73fa:	7503      	strb	r3, [r0, #20]
   d73fc:	bd10      	pop	{r4, pc}

000d73fe <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d73fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7400:	780d      	ldrb	r5, [r1, #0]
   d7402:	788b      	ldrb	r3, [r1, #2]
   d7404:	784a      	ldrb	r2, [r1, #1]
   d7406:	78c9      	ldrb	r1, [r1, #3]
   d7408:	9100      	str	r1, [sp, #0]
   d740a:	4629      	mov	r1, r5
   d740c:	f7ff ffea 	bl	d73e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7410:	b003      	add	sp, #12
   d7412:	bd30      	pop	{r4, r5, pc}

000d7414 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7414:	4b01      	ldr	r3, [pc, #4]	; (d741c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7416:	4a02      	ldr	r2, [pc, #8]	; (d7420 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7418:	601a      	str	r2, [r3, #0]
   d741a:	4770      	bx	lr
   d741c:	2003e36c 	.word	0x2003e36c
   d7420:	000dc01b 	.word	0x000dc01b

000d7424 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7424:	2200      	movs	r2, #0
   d7426:	4611      	mov	r1, r2
   d7428:	6840      	ldr	r0, [r0, #4]
   d742a:	f7ff b9d5 	b.w	d67d8 <network_listening>

000d742e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d742e:	2200      	movs	r2, #0
   d7430:	4611      	mov	r1, r2
   d7432:	6840      	ldr	r0, [r0, #4]
   d7434:	f7ff b9e0 	b.w	d67f8 <network_get_listen_timeout>

000d7438 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7438:	2200      	movs	r2, #0
   d743a:	6840      	ldr	r0, [r0, #4]
   d743c:	f7ff b9d4 	b.w	d67e8 <network_set_listen_timeout>

000d7440 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7440:	2200      	movs	r2, #0
   d7442:	f081 0101 	eor.w	r1, r1, #1
   d7446:	6840      	ldr	r0, [r0, #4]
   d7448:	f7ff b9be 	b.w	d67c8 <network_listen>

000d744c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d744c:	2300      	movs	r3, #0
   d744e:	461a      	mov	r2, r3
   d7450:	2101      	movs	r1, #1
   d7452:	6840      	ldr	r0, [r0, #4]
   d7454:	f7ff b9b0 	b.w	d67b8 <network_off>

000d7458 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7458:	2300      	movs	r3, #0
   d745a:	461a      	mov	r2, r3
   d745c:	4619      	mov	r1, r3
   d745e:	6840      	ldr	r0, [r0, #4]
   d7460:	f7ff b9a2 	b.w	d67a8 <network_on>

000d7464 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7464:	2200      	movs	r2, #0
   d7466:	4611      	mov	r1, r2
   d7468:	6840      	ldr	r0, [r0, #4]
   d746a:	f7ff b995 	b.w	d6798 <network_ready>

000d746e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d746e:	2200      	movs	r2, #0
   d7470:	4611      	mov	r1, r2
   d7472:	6840      	ldr	r0, [r0, #4]
   d7474:	f7ff b980 	b.w	d6778 <network_connecting>

000d7478 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7478:	2200      	movs	r2, #0
   d747a:	2102      	movs	r1, #2
   d747c:	6840      	ldr	r0, [r0, #4]
   d747e:	f7ff b983 	b.w	d6788 <network_disconnect>

000d7482 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7482:	2300      	movs	r3, #0
   d7484:	461a      	mov	r2, r3
   d7486:	6840      	ldr	r0, [r0, #4]
   d7488:	f7ff b96e 	b.w	d6768 <network_connect>

000d748c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d748c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d748e:	4605      	mov	r5, r0
   d7490:	b188      	cbz	r0, d74b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7492:	6804      	ldr	r4, [r0, #0]
   d7494:	b14c      	cbz	r4, d74aa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7496:	68a3      	ldr	r3, [r4, #8]
   d7498:	b11b      	cbz	r3, d74a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d749a:	2203      	movs	r2, #3
   d749c:	4621      	mov	r1, r4
   d749e:	4620      	mov	r0, r4
   d74a0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d74a2:	2110      	movs	r1, #16
   d74a4:	4620      	mov	r0, r4
   d74a6:	f000 ff74 	bl	d8392 <_ZdlPvj>
   d74aa:	4628      	mov	r0, r5
   d74ac:	2114      	movs	r1, #20
      }
   d74ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d74b2:	f000 bf6e 	b.w	d8392 <_ZdlPvj>
   d74b6:	bd38      	pop	{r3, r4, r5, pc}

000d74b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d74b8:	b110      	cbz	r0, d74c0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d74ba:	6803      	ldr	r3, [r0, #0]
   d74bc:	685b      	ldr	r3, [r3, #4]
   d74be:	4718      	bx	r3
   d74c0:	4770      	bx	lr

000d74c2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d74c2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d74c4:	6803      	ldr	r3, [r0, #0]
   d74c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d74c8:	b1bb      	cbz	r3, d74fa <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d74ca:	6858      	ldr	r0, [r3, #4]
   d74cc:	f7fe fe62 	bl	d6194 <os_thread_is_current>
   d74d0:	b978      	cbnz	r0, d74f2 <_ZN6ThreadD1Ev+0x30>
   d74d2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d74d4:	7c5a      	ldrb	r2, [r3, #17]
   d74d6:	b912      	cbnz	r2, d74de <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d74d8:	6858      	ldr	r0, [r3, #4]
   d74da:	f7fe fe6b 	bl	d61b4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d74de:	6823      	ldr	r3, [r4, #0]
   d74e0:	6858      	ldr	r0, [r3, #4]
   d74e2:	f7fe fe6f 	bl	d61c4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74e6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d74e8:	2300      	movs	r3, #0
   d74ea:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d74ec:	b128      	cbz	r0, d74fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d74ee:	f7ff ffcd 	bl	d748c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d74f2:	6820      	ldr	r0, [r4, #0]
   d74f4:	b108      	cbz	r0, d74fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d74f6:	f7ff ffc9 	bl	d748c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d74fa:	4620      	mov	r0, r4
   d74fc:	bd10      	pop	{r4, pc}

000d74fe <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d74fe:	b538      	push	{r3, r4, r5, lr}
   d7500:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7502:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7506:	b108      	cbz	r0, d750c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7508:	f7fc fdcb 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d750c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7510:	b108      	cbz	r0, d7516 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7512:	f7fe fe8f 	bl	d6234 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7516:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d751a:	b135      	cbz	r5, d752a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d751c:	4628      	mov	r0, r5
   d751e:	f7ff ffd0 	bl	d74c2 <_ZN6ThreadD1Ev>
   d7522:	2104      	movs	r1, #4
   d7524:	4628      	mov	r0, r5
   d7526:	f000 ff34 	bl	d8392 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d752a:	6820      	ldr	r0, [r4, #0]
   d752c:	b108      	cbz	r0, d7532 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d752e:	f7ff ffc3 	bl	d74b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7532:	4620      	mov	r0, r4
   d7534:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7538 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7538:	b510      	push	{r4, lr}
   d753a:	4b04      	ldr	r3, [pc, #16]	; (d754c <_ZN5spark9MeshClassD1Ev+0x14>)
   d753c:	4604      	mov	r4, r0
   d753e:	f840 3b08 	str.w	r3, [r0], #8
   d7542:	f7ff ffdc 	bl	d74fe <_ZN5spark11MeshPublishD1Ev>
   d7546:	4620      	mov	r0, r4
   d7548:	bd10      	pop	{r4, pc}
   d754a:	bf00      	nop
   d754c:	000dc08c 	.word	0x000dc08c

000d7550 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7550:	b538      	push	{r3, r4, r5, lr}
   d7552:	4c0e      	ldr	r4, [pc, #56]	; (d758c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7554:	4b0e      	ldr	r3, [pc, #56]	; (d7590 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7556:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7558:	2500      	movs	r5, #0
   d755a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d755c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7560:	6063      	str	r3, [r4, #4]
   d7562:	60a5      	str	r5, [r4, #8]
   d7564:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7568:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d756c:	f7fe fe5a 	bl	d6224 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7570:	4b08      	ldr	r3, [pc, #32]	; (d7594 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7572:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7576:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d757a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d757c:	4620      	mov	r0, r4
   d757e:	4a06      	ldr	r2, [pc, #24]	; (d7598 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7580:	4906      	ldr	r1, [pc, #24]	; (d759c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7586:	f000 beff 	b.w	d8388 <__aeabi_atexit>
   d758a:	bf00      	nop
   d758c:	2003e370 	.word	0x2003e370
   d7590:	000dc0c0 	.word	0x000dc0c0
   d7594:	000dc08c 	.word	0x000dc08c
   d7598:	2003e1b0 	.word	0x2003e1b0
   d759c:	000d7539 	.word	0x000d7539

000d75a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d75a0:	2300      	movs	r3, #0
   d75a2:	461a      	mov	r2, r3
   d75a4:	6840      	ldr	r0, [r0, #4]
   d75a6:	f7ff b8df 	b.w	d6768 <network_connect>

000d75aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d75aa:	2200      	movs	r2, #0
   d75ac:	2102      	movs	r1, #2
   d75ae:	6840      	ldr	r0, [r0, #4]
   d75b0:	f7ff b8ea 	b.w	d6788 <network_disconnect>

000d75b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d75b4:	2200      	movs	r2, #0
   d75b6:	4611      	mov	r1, r2
   d75b8:	6840      	ldr	r0, [r0, #4]
   d75ba:	f7ff b8dd 	b.w	d6778 <network_connecting>

000d75be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d75be:	2200      	movs	r2, #0
   d75c0:	4611      	mov	r1, r2
   d75c2:	6840      	ldr	r0, [r0, #4]
   d75c4:	f7ff b8e8 	b.w	d6798 <network_ready>

000d75c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d75c8:	2300      	movs	r3, #0
   d75ca:	461a      	mov	r2, r3
   d75cc:	4619      	mov	r1, r3
   d75ce:	6840      	ldr	r0, [r0, #4]
   d75d0:	f7ff b8ea 	b.w	d67a8 <network_on>

000d75d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d75d4:	2300      	movs	r3, #0
   d75d6:	461a      	mov	r2, r3
   d75d8:	4619      	mov	r1, r3
   d75da:	6840      	ldr	r0, [r0, #4]
   d75dc:	f7ff b8ec 	b.w	d67b8 <network_off>

000d75e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d75e0:	2200      	movs	r2, #0
   d75e2:	f081 0101 	eor.w	r1, r1, #1
   d75e6:	6840      	ldr	r0, [r0, #4]
   d75e8:	f7ff b8ee 	b.w	d67c8 <network_listen>

000d75ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d75ec:	2200      	movs	r2, #0
   d75ee:	6840      	ldr	r0, [r0, #4]
   d75f0:	f7ff b8fa 	b.w	d67e8 <network_set_listen_timeout>

000d75f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d75f4:	2200      	movs	r2, #0
   d75f6:	4611      	mov	r1, r2
   d75f8:	6840      	ldr	r0, [r0, #4]
   d75fa:	f7ff b8fd 	b.w	d67f8 <network_get_listen_timeout>

000d75fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d75fe:	2200      	movs	r2, #0
   d7600:	4611      	mov	r1, r2
   d7602:	6840      	ldr	r0, [r0, #4]
   d7604:	f7ff b8e8 	b.w	d67d8 <network_listening>

000d7608 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d760c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d760e:	b095      	sub	sp, #84	; 0x54
   d7610:	4616      	mov	r6, r2
   d7612:	460d      	mov	r5, r1
   d7614:	4607      	mov	r7, r0
    IPAddress addr;
   d7616:	f7ff fec5 	bl	d73a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d761a:	4621      	mov	r1, r4
   d761c:	2220      	movs	r2, #32
   d761e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7620:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7622:	f001 fe72 	bl	d930a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7626:	2340      	movs	r3, #64	; 0x40
   d7628:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d762a:	4621      	mov	r1, r4
   d762c:	466b      	mov	r3, sp
   d762e:	aa0c      	add	r2, sp, #48	; 0x30
   d7630:	4630      	mov	r0, r6
   d7632:	f7fe ff2f 	bl	d6494 <netdb_getaddrinfo>
    if (!r) {
   d7636:	4604      	mov	r4, r0
   d7638:	2800      	cmp	r0, #0
   d763a:	d144      	bne.n	d76c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d763c:	4602      	mov	r2, r0
   d763e:	2101      	movs	r1, #1
   d7640:	6868      	ldr	r0, [r5, #4]
   d7642:	f7ff f8a9 	bl	d6798 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7646:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7648:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d764a:	4622      	mov	r2, r4
   d764c:	6868      	ldr	r0, [r5, #4]
   d764e:	f7ff f8a3 	bl	d6798 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7652:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7654:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7656:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7658:	2e00      	cmp	r6, #0
   d765a:	d034      	beq.n	d76c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d765c:	2900      	cmp	r1, #0
   d765e:	d132      	bne.n	d76c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7660:	6873      	ldr	r3, [r6, #4]
   d7662:	2b02      	cmp	r3, #2
   d7664:	d002      	beq.n	d766c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7666:	2b0a      	cmp	r3, #10
   d7668:	d009      	beq.n	d767e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d766a:	e02a      	b.n	d76c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d766c:	f1b8 0f00 	cmp.w	r8, #0
   d7670:	d027      	beq.n	d76c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7672:	6971      	ldr	r1, [r6, #20]
   d7674:	4638      	mov	r0, r7
   d7676:	3104      	adds	r1, #4
   d7678:	f7ff fec1 	bl	d73fe <_ZN9IPAddressaSEPKh>
   d767c:	e020      	b.n	d76c0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d767e:	f1b9 0f00 	cmp.w	r9, #0
   d7682:	d01e      	beq.n	d76c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7684:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7686:	2211      	movs	r2, #17
   d7688:	a801      	add	r0, sp, #4
   d768a:	f001 fe3e 	bl	d930a <memset>
                    a.v = 6;
   d768e:	2306      	movs	r3, #6
   d7690:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7694:	ad01      	add	r5, sp, #4
   d7696:	f104 0308 	add.w	r3, r4, #8
   d769a:	3418      	adds	r4, #24
   d769c:	6818      	ldr	r0, [r3, #0]
   d769e:	6859      	ldr	r1, [r3, #4]
   d76a0:	462a      	mov	r2, r5
   d76a2:	c203      	stmia	r2!, {r0, r1}
   d76a4:	3308      	adds	r3, #8
   d76a6:	42a3      	cmp	r3, r4
   d76a8:	4615      	mov	r5, r2
   d76aa:	d1f7      	bne.n	d769c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d76ac:	a901      	add	r1, sp, #4
   d76ae:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d76b0:	ad07      	add	r5, sp, #28
   d76b2:	f7ff fe85 	bl	d73c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d76b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76b8:	1d3c      	adds	r4, r7, #4
   d76ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76bc:	682b      	ldr	r3, [r5, #0]
   d76be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d76c0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76c2:	69f6      	ldr	r6, [r6, #28]
   d76c4:	e7c8      	b.n	d7658 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d76c6:	9800      	ldr	r0, [sp, #0]
   d76c8:	f7fe fedc 	bl	d6484 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d76cc:	4638      	mov	r0, r7
   d76ce:	b015      	add	sp, #84	; 0x54
   d76d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d76d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d76d4:	4b02      	ldr	r3, [pc, #8]	; (d76e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d76d6:	4a03      	ldr	r2, [pc, #12]	; (d76e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d76d8:	601a      	str	r2, [r3, #0]
   d76da:	2200      	movs	r2, #0
   d76dc:	605a      	str	r2, [r3, #4]
   d76de:	4770      	bx	lr
   d76e0:	2003e544 	.word	0x2003e544
   d76e4:	000dc0c0 	.word	0x000dc0c0

000d76e8 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d76e8:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d76ea:	f000 fe27 	bl	d833c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d76ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d76f2:	f7ff be0a 	b.w	d730a <_ZN7TwoWire4lockEv>

000d76f6 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d76f6:	b510      	push	{r4, lr}
   d76f8:	4604      	mov	r4, r0
    lock_(_lock)
   d76fa:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d76fc:	b109      	cbz	r1, d7702 <_ZN4PMICC1Eb+0xc>
        lock();
   d76fe:	f7ff fff3 	bl	d76e8 <_ZN4PMIC4lockEv>
    }
}
   d7702:	4620      	mov	r0, r4
   d7704:	bd10      	pop	{r4, pc}

000d7706 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d7706:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7708:	f000 fe18 	bl	d833c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d770c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d7710:	f7ff be04 	b.w	d731c <_ZN7TwoWire6unlockEv>

000d7714 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7714:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7716:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7718:	4604      	mov	r4, r0
{
    if (lock_) {
   d771a:	b10b      	cbz	r3, d7720 <_ZN4PMICD1Ev+0xc>
        unlock();
   d771c:	f7ff fff3 	bl	d7706 <_ZN4PMIC6unlockEv>
    }
}
   d7720:	4620      	mov	r0, r4
   d7722:	bd10      	pop	{r4, pc}

000d7724 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7724:	b510      	push	{r4, lr}
   d7726:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7728:	6800      	ldr	r0, [r0, #0]
   d772a:	f7ff ffec 	bl	d7706 <_ZN4PMIC6unlockEv>
   d772e:	4620      	mov	r0, r4
   d7730:	bd10      	pop	{r4, pc}

000d7732 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d7732:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7734:	ac02      	add	r4, sp, #8
   d7736:	460d      	mov	r5, r1
   d7738:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d773c:	f7ff ffd4 	bl	d76e8 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7740:	f000 fdfc 	bl	d833c <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d7744:	216b      	movs	r1, #107	; 0x6b
   d7746:	f7ff fdd2 	bl	d72ee <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d774a:	f000 fdf7 	bl	d833c <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d774e:	6803      	ldr	r3, [r0, #0]
   d7750:	4629      	mov	r1, r5
   d7752:	689b      	ldr	r3, [r3, #8]
   d7754:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7756:	f000 fdf1 	bl	d833c <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d775a:	2101      	movs	r1, #1
   d775c:	f7ff fdca 	bl	d72f4 <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7760:	f000 fdec 	bl	d833c <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d7764:	2301      	movs	r3, #1
   d7766:	461a      	mov	r2, r3
   d7768:	216b      	movs	r1, #107	; 0x6b
   d776a:	f7ff fda7 	bl	d72bc <_ZN7TwoWire11requestFromEhjh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d776e:	f000 fde5 	bl	d833c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d7772:	6803      	ldr	r3, [r0, #0]
   d7774:	695b      	ldr	r3, [r3, #20]
   d7776:	4798      	blx	r3
   d7778:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d777a:	4620      	mov	r0, r4
   d777c:	f7ff ffd2 	bl	d7724 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d7780:	b2e8      	uxtb	r0, r5
   d7782:	b003      	add	sp, #12
   d7784:	bd30      	pop	{r4, r5, pc}

000d7786 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d7786:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7788:	ac02      	add	r4, sp, #8
   d778a:	4615      	mov	r5, r2
   d778c:	460e      	mov	r6, r1
   d778e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7792:	f7ff ffa9 	bl	d76e8 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7796:	f000 fdd1 	bl	d833c <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d779a:	216b      	movs	r1, #107	; 0x6b
   d779c:	f7ff fda7 	bl	d72ee <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77a0:	f000 fdcc 	bl	d833c <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d77a4:	6803      	ldr	r3, [r0, #0]
   d77a6:	4631      	mov	r1, r6
   d77a8:	689b      	ldr	r3, [r3, #8]
   d77aa:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77ac:	f000 fdc6 	bl	d833c <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d77b0:	6803      	ldr	r3, [r0, #0]
   d77b2:	4629      	mov	r1, r5
   d77b4:	689b      	ldr	r3, [r3, #8]
   d77b6:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77b8:	f000 fdc0 	bl	d833c <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d77bc:	2101      	movs	r1, #1
   d77be:	f7ff fd99 	bl	d72f4 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d77c2:	4620      	mov	r0, r4
   d77c4:	f7ff ffae 	bl	d7724 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d77c8:	b002      	add	sp, #8
   d77ca:	bd70      	pop	{r4, r5, r6, pc}

000d77cc <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
   d77cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d77ce:	ac02      	add	r4, sp, #8
   d77d0:	4605      	mov	r5, r0
   d77d2:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d77d6:	f7ff ff87 	bl	d76e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d77da:	2101      	movs	r1, #1
   d77dc:	4628      	mov	r0, r5
   d77de:	f7ff ffa8 	bl	d7732 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d77e2:	2101      	movs	r1, #1
   d77e4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d77e8:	4628      	mov	r0, r5
   d77ea:	f7ff ffcc 	bl	d7786 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
   d77ee:	4620      	mov	r0, r4
   d77f0:	f7ff ff98 	bl	d7724 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
   d77f4:	2001      	movs	r0, #1
   d77f6:	b003      	add	sp, #12
   d77f8:	bd30      	pop	{r4, r5, pc}

000d77fa <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
   d77fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d77fc:	ac02      	add	r4, sp, #8
   d77fe:	4605      	mov	r5, r0
   d7800:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7804:	f7ff ff70 	bl	d76e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d7808:	2101      	movs	r1, #1
   d780a:	4628      	mov	r0, r5
   d780c:	f7ff ff91 	bl	d7732 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d7810:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d7814:	f042 0210 	orr.w	r2, r2, #16
   d7818:	2101      	movs	r1, #1
   d781a:	4628      	mov	r0, r5
   d781c:	f7ff ffb3 	bl	d7786 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
   d7820:	4620      	mov	r0, r4
   d7822:	f7ff ff7f 	bl	d7724 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
   d7826:	2001      	movs	r0, #1
   d7828:	b003      	add	sp, #12
   d782a:	bd30      	pop	{r4, r5, pc}

000d782c <_ZN4PMIC14enableChargingEv>:
   d782c:	f7ff bfe5 	b.w	d77fa <_ZN4PMIC10disableOTGEv>

000d7830 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7832:	4606      	mov	r6, r0
   d7834:	460d      	mov	r5, r1
   d7836:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7838:	2400      	movs	r4, #0
  while (size--) {
   d783a:	42bd      	cmp	r5, r7
   d783c:	d00c      	beq.n	d7858 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d783e:	6833      	ldr	r3, [r6, #0]
   d7840:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7844:	689b      	ldr	r3, [r3, #8]
   d7846:	4630      	mov	r0, r6
   d7848:	4798      	blx	r3
     if (chunk>=0)
   d784a:	2800      	cmp	r0, #0
   d784c:	db01      	blt.n	d7852 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d784e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7850:	e7f3      	b.n	d783a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7852:	2c00      	cmp	r4, #0
   d7854:	bf08      	it	eq
   d7856:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7858:	4620      	mov	r0, r4
   d785a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d785c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d785c:	b570      	push	{r4, r5, r6, lr}
   d785e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7860:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7862:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7864:	b149      	cbz	r1, d787a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7866:	f001 fdae 	bl	d93c6 <strlen>
   d786a:	682b      	ldr	r3, [r5, #0]
   d786c:	4602      	mov	r2, r0
   d786e:	4621      	mov	r1, r4
   d7870:	4628      	mov	r0, r5
   d7872:	68db      	ldr	r3, [r3, #12]
    }
   d7874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7878:	4718      	bx	r3
    }
   d787a:	bd70      	pop	{r4, r5, r6, pc}

000d787c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d787c:	6803      	ldr	r3, [r0, #0]
   d787e:	689b      	ldr	r3, [r3, #8]
   d7880:	4718      	bx	r3

000d7882 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7882:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7884:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7886:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7888:	f7ff fff8 	bl	d787c <_ZN5Print5printEc>
  n += print('\n');
   d788c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d788e:	4604      	mov	r4, r0
  n += print('\n');
   d7890:	4628      	mov	r0, r5
   d7892:	f7ff fff3 	bl	d787c <_ZN5Print5printEc>
  return n;
}
   d7896:	4420      	add	r0, r4
   d7898:	bd38      	pop	{r3, r4, r5, pc}

000d789a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d789a:	b538      	push	{r3, r4, r5, lr}
   d789c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d789e:	f7ff ffdd 	bl	d785c <_ZN5Print5writeEPKc>
   d78a2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d78a4:	4628      	mov	r0, r5
   d78a6:	f7ff ffec 	bl	d7882 <_ZN5Print7printlnEv>
  return n;
}
   d78aa:	4420      	add	r0, r4
   d78ac:	bd38      	pop	{r3, r4, r5, pc}

000d78ae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d78ae:	b530      	push	{r4, r5, lr}
   d78b0:	b08b      	sub	sp, #44	; 0x2c
   d78b2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d78b4:	2100      	movs	r1, #0
   d78b6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d78ba:	2a01      	cmp	r2, #1
   d78bc:	bf98      	it	ls
   d78be:	220a      	movls	r2, #10
   d78c0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d78c4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d78c8:	fb05 3312 	mls	r3, r5, r2, r3
   d78cc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d78d0:	2b09      	cmp	r3, #9
   d78d2:	bf94      	ite	ls
   d78d4:	3330      	addls	r3, #48	; 0x30
   d78d6:	3337      	addhi	r3, #55	; 0x37
   d78d8:	b2db      	uxtb	r3, r3
   d78da:	4621      	mov	r1, r4
   d78dc:	f804 3901 	strb.w	r3, [r4], #-1
   d78e0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d78e2:	2d00      	cmp	r5, #0
   d78e4:	d1ee      	bne.n	d78c4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d78e6:	f7ff ffb9 	bl	d785c <_ZN5Print5writeEPKc>
}
   d78ea:	b00b      	add	sp, #44	; 0x2c
   d78ec:	bd30      	pop	{r4, r5, pc}

000d78ee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d78ee:	b510      	push	{r4, lr}
   d78f0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78f2:	f7fc fc52 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d78f6:	4620      	mov	r0, r4
   d78f8:	bd10      	pop	{r4, pc}
	...

000d78fc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78fc:	4803      	ldr	r0, [pc, #12]	; (d790c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d78fe:	4a04      	ldr	r2, [pc, #16]	; (d7910 <_GLOBAL__sub_I_RGB+0x14>)
   d7900:	4904      	ldr	r1, [pc, #16]	; (d7914 <_GLOBAL__sub_I_RGB+0x18>)
   d7902:	2300      	movs	r3, #0
   d7904:	6083      	str	r3, [r0, #8]
   d7906:	f000 bd3f 	b.w	d8388 <__aeabi_atexit>
   d790a:	bf00      	nop
   d790c:	2003e54c 	.word	0x2003e54c
   d7910:	2003e1b0 	.word	0x2003e1b0
   d7914:	000d78ef 	.word	0x000d78ef

000d7918 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7918:	b510      	push	{r4, lr}
   d791a:	4604      	mov	r4, r0
{
    _spi = spi;
   d791c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d791e:	4608      	mov	r0, r1
   d7920:	f7fe fdc0 	bl	d64a4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7924:	2300      	movs	r3, #0
   d7926:	6063      	str	r3, [r4, #4]
}
   d7928:	4620      	mov	r0, r4
   d792a:	bd10      	pop	{r4, pc}

000d792c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d792c:	7800      	ldrb	r0, [r0, #0]
   d792e:	f7fe bdc1 	b.w	d64b4 <HAL_SPI_Is_Enabled>

000d7932 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7932:	b510      	push	{r4, lr}
   d7934:	4604      	mov	r4, r0
{
	free(buffer);
   d7936:	6800      	ldr	r0, [r0, #0]
   d7938:	f7fe ff6e 	bl	d6818 <free>
}
   d793c:	4620      	mov	r0, r4
   d793e:	bd10      	pop	{r4, pc}

000d7940 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7940:	b510      	push	{r4, lr}
   d7942:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7944:	6800      	ldr	r0, [r0, #0]
   d7946:	b108      	cbz	r0, d794c <_ZN6String10invalidateEv+0xc>
   d7948:	f7fe ff66 	bl	d6818 <free>
	buffer = NULL;
   d794c:	2300      	movs	r3, #0
   d794e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7950:	60a3      	str	r3, [r4, #8]
   d7952:	6063      	str	r3, [r4, #4]
   d7954:	bd10      	pop	{r4, pc}

000d7956 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7956:	b538      	push	{r3, r4, r5, lr}
   d7958:	4604      	mov	r4, r0
   d795a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d795c:	6800      	ldr	r0, [r0, #0]
   d795e:	3101      	adds	r1, #1
   d7960:	f7fe ff62 	bl	d6828 <realloc>
	if (newbuffer) {
   d7964:	b110      	cbz	r0, d796c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7966:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d796a:	2001      	movs	r0, #1
	}
	return 0;
}
   d796c:	bd38      	pop	{r3, r4, r5, pc}

000d796e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d796e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7970:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7972:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7974:	b113      	cbz	r3, d797c <_ZN6String7reserveEj+0xe>
   d7976:	6843      	ldr	r3, [r0, #4]
   d7978:	428b      	cmp	r3, r1
   d797a:	d207      	bcs.n	d798c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d797c:	4620      	mov	r0, r4
   d797e:	f7ff ffea 	bl	d7956 <_ZN6String12changeBufferEj>
   d7982:	b120      	cbz	r0, d798e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7984:	68a3      	ldr	r3, [r4, #8]
   d7986:	b90b      	cbnz	r3, d798c <_ZN6String7reserveEj+0x1e>
   d7988:	6822      	ldr	r2, [r4, #0]
   d798a:	7013      	strb	r3, [r2, #0]
   d798c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d798e:	bd10      	pop	{r4, pc}

000d7990 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7990:	b570      	push	{r4, r5, r6, lr}
   d7992:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7994:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7996:	4604      	mov	r4, r0
   d7998:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d799a:	f7ff ffe8 	bl	d796e <_ZN6String7reserveEj>
   d799e:	b918      	cbnz	r0, d79a8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d79a0:	4620      	mov	r0, r4
   d79a2:	f7ff ffcd 	bl	d7940 <_ZN6String10invalidateEv>
		return *this;
   d79a6:	e009      	b.n	d79bc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d79a8:	462a      	mov	r2, r5
   d79aa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d79ac:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d79ae:	6820      	ldr	r0, [r4, #0]
   d79b0:	f001 fca0 	bl	d92f4 <memcpy>
	buffer[len] = 0;
   d79b4:	6822      	ldr	r2, [r4, #0]
   d79b6:	68a3      	ldr	r3, [r4, #8]
   d79b8:	2100      	movs	r1, #0
   d79ba:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d79bc:	4620      	mov	r0, r4
   d79be:	bd70      	pop	{r4, r5, r6, pc}

000d79c0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d79c0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d79c2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d79c4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d79c6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d79c8:	6043      	str	r3, [r0, #4]
	len = 0;
   d79ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d79cc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d79ce:	460d      	mov	r5, r1
   d79d0:	b139      	cbz	r1, d79e2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d79d2:	4608      	mov	r0, r1
   d79d4:	f001 fcf7 	bl	d93c6 <strlen>
   d79d8:	4629      	mov	r1, r5
   d79da:	4602      	mov	r2, r0
   d79dc:	4620      	mov	r0, r4
   d79de:	f7ff ffd7 	bl	d7990 <_ZN6String4copyEPKcj>
}
   d79e2:	4620      	mov	r0, r4
   d79e4:	bd38      	pop	{r3, r4, r5, pc}

000d79e6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d79e6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d79e8:	b510      	push	{r4, lr}
   d79ea:	460b      	mov	r3, r1
   d79ec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d79ee:	d007      	beq.n	d7a00 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d79f0:	6809      	ldr	r1, [r1, #0]
   d79f2:	b119      	cbz	r1, d79fc <_ZN6StringaSERKS_+0x16>
   d79f4:	689a      	ldr	r2, [r3, #8]
   d79f6:	f7ff ffcb 	bl	d7990 <_ZN6String4copyEPKcj>
   d79fa:	e001      	b.n	d7a00 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d79fc:	f7ff ffa0 	bl	d7940 <_ZN6String10invalidateEv>

	return *this;
}
   d7a00:	4620      	mov	r0, r4
   d7a02:	bd10      	pop	{r4, pc}

000d7a04 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7a04:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7a06:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7a08:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7a0a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7a0c:	6043      	str	r3, [r0, #4]
	len = 0;
   d7a0e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7a10:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7a12:	f7ff ffe8 	bl	d79e6 <_ZN6StringaSERKS_>
}
   d7a16:	4620      	mov	r0, r4
   d7a18:	bd10      	pop	{r4, pc}

000d7a1a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7a1a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7a1c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7a1e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7a20:	b912      	cbnz	r2, d7a28 <_ZNK6String6equalsEPKc+0xe>
   d7a22:	b919      	cbnz	r1, d7a2c <_ZNK6String6equalsEPKc+0x12>
   d7a24:	2001      	movs	r0, #1
   d7a26:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7a28:	b911      	cbnz	r1, d7a30 <_ZNK6String6equalsEPKc+0x16>
   d7a2a:	6803      	ldr	r3, [r0, #0]
   d7a2c:	7818      	ldrb	r0, [r3, #0]
   d7a2e:	e002      	b.n	d7a36 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7a30:	6800      	ldr	r0, [r0, #0]
   d7a32:	f001 fc9b 	bl	d936c <strcmp>
   d7a36:	fab0 f080 	clz	r0, r0
   d7a3a:	0940      	lsrs	r0, r0, #5
}
   d7a3c:	bd08      	pop	{r3, pc}

000d7a3e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7a3e:	b570      	push	{r4, r5, r6, lr}
   d7a40:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7a42:	b19a      	cbz	r2, d7a6c <_ZNK6String8getBytesEPhjj+0x2e>
   d7a44:	b191      	cbz	r1, d7a6c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d7a46:	6885      	ldr	r5, [r0, #8]
   d7a48:	429d      	cmp	r5, r3
   d7a4a:	d802      	bhi.n	d7a52 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7a4c:	2300      	movs	r3, #0
   d7a4e:	700b      	strb	r3, [r1, #0]
		return;
   d7a50:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7a52:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d7a54:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d7a56:	6801      	ldr	r1, [r0, #0]
   d7a58:	42ac      	cmp	r4, r5
   d7a5a:	bf28      	it	cs
   d7a5c:	462c      	movcs	r4, r5
   d7a5e:	4419      	add	r1, r3
   d7a60:	4622      	mov	r2, r4
   d7a62:	4630      	mov	r0, r6
   d7a64:	f001 fccc 	bl	d9400 <strncpy>
	buf[n] = 0;
   d7a68:	2300      	movs	r3, #0
   d7a6a:	5533      	strb	r3, [r6, r4]
   d7a6c:	bd70      	pop	{r4, r5, r6, pc}

000d7a6e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7a6e:	b510      	push	{r4, lr}
   d7a70:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7a72:	6800      	ldr	r0, [r0, #0]
   d7a74:	b118      	cbz	r0, d7a7e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7a76:	f7fe fecf 	bl	d6818 <free>
            wakeupSource_ = nullptr;
   d7a7a:	2300      	movs	r3, #0
   d7a7c:	6023      	str	r3, [r4, #0]
   d7a7e:	bd10      	pop	{r4, pc}

000d7a80 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7a80:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7a82:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7a86:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7a88:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7a8a:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7a8c:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7a90:	f8c0 2006 	str.w	r2, [r0, #6]
   d7a94:	889b      	ldrh	r3, [r3, #4]
   d7a96:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7a98:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d7a9a:	f7ff ffe8 	bl	d7a6e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d7a9e:	682b      	ldr	r3, [r5, #0]
   d7aa0:	b113      	cbz	r3, d7aa8 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7aa2:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7aa4:	2300      	movs	r3, #0
   d7aa6:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d7aa8:	4620      	mov	r0, r4
   d7aaa:	bd38      	pop	{r3, r4, r5, pc}

000d7aac <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d7aac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d7ab0:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d7ab2:	b90b      	cbnz	r3, d7ab8 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d7ab4:	680a      	ldr	r2, [r1, #0]
   d7ab6:	b19a      	cbz	r2, d7ae0 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d7ab8:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d7aba:	b15c      	cbz	r4, d7ad4 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d7abc:	88a2      	ldrh	r2, [r4, #4]
   d7abe:	2a01      	cmp	r2, #1
   d7ac0:	d003      	beq.n	d7aca <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d7ac2:	2a04      	cmp	r2, #4
   d7ac4:	d106      	bne.n	d7ad4 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d7ac6:	2202      	movs	r2, #2
   d7ac8:	e005      	b.n	d7ad6 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d7aca:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d7acc:	814c      	strh	r4, [r1, #10]
   d7ace:	718a      	strb	r2, [r1, #6]
   d7ad0:	810b      	strh	r3, [r1, #8]
                    break;
   d7ad2:	e005      	b.n	d7ae0 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7ad4:	2204      	movs	r2, #4
   d7ad6:	810b      	strh	r3, [r1, #8]
   d7ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7adc:	718a      	strb	r2, [r1, #6]
   d7ade:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d7ae0:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d7ae4:	6003      	str	r3, [r0, #0]
   d7ae6:	888b      	ldrh	r3, [r1, #4]
   d7ae8:	8083      	strh	r3, [r0, #4]
    }
   d7aea:	bd10      	pop	{r4, pc}

000d7aec <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d7aec:	b538      	push	{r3, r4, r5, lr}
   d7aee:	460c      	mov	r4, r1
   d7af0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d7af2:	f7ff ffbc 	bl	d7a6e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d7af6:	b144      	cbz	r4, d7b0a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d7af8:	8820      	ldrh	r0, [r4, #0]
   d7afa:	f7fe fe85 	bl	d6808 <malloc>
   d7afe:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7b00:	b128      	cbz	r0, d7b0e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7b02:	8822      	ldrh	r2, [r4, #0]
   d7b04:	4621      	mov	r1, r4
   d7b06:	f001 fbf5 	bl	d92f4 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d7b0a:	2000      	movs	r0, #0
   d7b0c:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d7b0e:	4801      	ldr	r0, [pc, #4]	; (d7b14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d7b10:	bd38      	pop	{r3, r4, r5, pc}
   d7b12:	bf00      	nop
   d7b14:	fffffefc 	.word	0xfffffefc

000d7b18 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d7b18:	4601      	mov	r1, r0
   d7b1a:	2200      	movs	r2, #0
   d7b1c:	208c      	movs	r0, #140	; 0x8c
   d7b1e:	f7fe bba9 	b.w	d6274 <HAL_Core_System_Reset_Ex>

000d7b22 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d7b22:	2000      	movs	r0, #0
   d7b24:	f7ff bff8 	b.w	d7b18 <_ZN11SystemClass5resetEm>

000d7b28 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d7b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b2a:	4d30      	ldr	r5, [pc, #192]	; (d7bec <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7b2c:	7d0b      	ldrb	r3, [r1, #20]
   d7b2e:	4604      	mov	r4, r0
   d7b30:	b08b      	sub	sp, #44	; 0x2c
   d7b32:	4608      	mov	r0, r1
   d7b34:	1daf      	adds	r7, r5, #6
   d7b36:	b313      	cbz	r3, d7b7e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d7b38:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7b3a:	791b      	ldrb	r3, [r3, #4]
   d7b3c:	b1fb      	cbz	r3, d7b7e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7b3e:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7b44:	a902      	add	r1, sp, #8
   d7b46:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7b48:	9202      	str	r2, [sp, #8]
   d7b4a:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7b4e:	f88d 200e 	strb.w	r2, [sp, #14]
   d7b52:	f8ad 2010 	strh.w	r2, [sp, #16]
   d7b56:	f8ad 3012 	strh.w	r3, [sp, #18]
   d7b5a:	f7fe fd9b 	bl	d6694 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7b5e:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d7b60:	b200      	sxth	r0, r0
   d7b62:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d7b66:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7b6a:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d7b6c:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d7b6e:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d7b72:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7b74:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7b76:	4628      	mov	r0, r5
   d7b78:	f7ff ffb8 	bl	d7aec <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d7b7c:	e01c      	b.n	d7bb8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d7b7e:	2320      	movs	r3, #32
   d7b80:	2600      	movs	r6, #0
   d7b82:	9302      	str	r3, [sp, #8]
   d7b84:	4b1a      	ldr	r3, [pc, #104]	; (d7bf0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d7b86:	9300      	str	r3, [sp, #0]
   d7b88:	491a      	ldr	r1, [pc, #104]	; (d7bf4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d7b8a:	9603      	str	r6, [sp, #12]
   d7b8c:	4633      	mov	r3, r6
   d7b8e:	2032      	movs	r0, #50	; 0x32
   d7b90:	aa02      	add	r2, sp, #8
   d7b92:	f7fe fd0f 	bl	d65b4 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7b9a:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d7b9e:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7ba0:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d7ba4:	4811      	ldr	r0, [pc, #68]	; (d7bec <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7ba6:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7ba8:	f88d 600e 	strb.w	r6, [sp, #14]
   d7bac:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7bb0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7bb4:	f7ff ff64 	bl	d7a80 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7bb8:	a802      	add	r0, sp, #8
   d7bba:	f7ff ff58 	bl	d7a6e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7bbe:	2300      	movs	r3, #0
   d7bc0:	6023      	str	r3, [r4, #0]
   d7bc2:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7bc4:	71a3      	strb	r3, [r4, #6]
   d7bc6:	8123      	strh	r3, [r4, #8]
   d7bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7bcc:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d7bce:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d7bd2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7bd4:	683b      	ldr	r3, [r7, #0]
   d7bd6:	f8c4 3006 	str.w	r3, [r4, #6]
   d7bda:	88bb      	ldrh	r3, [r7, #4]
   d7bdc:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7bde:	6829      	ldr	r1, [r5, #0]
   d7be0:	4620      	mov	r0, r4
   d7be2:	f7ff ff83 	bl	d7aec <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d7be6:	4620      	mov	r0, r4
   d7be8:	b00b      	add	sp, #44	; 0x2c
   d7bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7bec:	2003e55c 	.word	0x2003e55c
   d7bf0:	000dc0f3 	.word	0x000dc0f3
   d7bf4:	000dc0ec 	.word	0x000dc0ec

000d7bf8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d7bf8:	b530      	push	{r4, r5, lr}
   d7bfa:	4604      	mov	r4, r0
   d7bfc:	b085      	sub	sp, #20
   d7bfe:	4608      	mov	r0, r1
   d7c00:	4611      	mov	r1, r2
   d7c02:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d7c04:	2300      	movs	r3, #0
   d7c06:	f7fe fcff 	bl	d6608 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d7c0a:	4d0d      	ldr	r5, [pc, #52]	; (d7c40 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d7c0c:	f8ad 000c 	strh.w	r0, [sp, #12]
   d7c10:	2300      	movs	r3, #0
   d7c12:	a901      	add	r1, sp, #4
   d7c14:	9301      	str	r3, [sp, #4]
   d7c16:	f8ad 3008 	strh.w	r3, [sp, #8]
   d7c1a:	f88d 300a 	strb.w	r3, [sp, #10]
   d7c1e:	4628      	mov	r0, r5
   d7c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7c24:	f8ad 300e 	strh.w	r3, [sp, #14]
   d7c28:	f7ff ff2a 	bl	d7a80 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7c2c:	a801      	add	r0, sp, #4
   d7c2e:	f7ff ff1e 	bl	d7a6e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d7c32:	4620      	mov	r0, r4
   d7c34:	4629      	mov	r1, r5
   d7c36:	f7ff ff39 	bl	d7aac <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	b005      	add	sp, #20
   d7c3e:	bd30      	pop	{r4, r5, pc}
   d7c40:	2003e55c 	.word	0x2003e55c

000d7c44 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7c44:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7c46:	4c09      	ldr	r4, [pc, #36]	; (d7c6c <_GLOBAL__sub_I_System+0x28>)
   d7c48:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7c4e:	6020      	str	r0, [r4, #0]
   d7c50:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7c52:	71a0      	strb	r0, [r4, #6]
   d7c54:	8120      	strh	r0, [r4, #8]
   d7c56:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7c58:	f7fe fcc6 	bl	d65e8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7c5c:	4620      	mov	r0, r4
   d7c5e:	4a04      	ldr	r2, [pc, #16]	; (d7c70 <_GLOBAL__sub_I_System+0x2c>)
   d7c60:	4904      	ldr	r1, [pc, #16]	; (d7c74 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7c66:	f000 bb8f 	b.w	d8388 <__aeabi_atexit>
   d7c6a:	bf00      	nop
   d7c6c:	2003e55c 	.word	0x2003e55c
   d7c70:	2003e1b0 	.word	0x2003e1b0
   d7c74:	000d418b 	.word	0x000d418b

000d7c78 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d7c7a:	4b14      	ldr	r3, [pc, #80]	; (d7ccc <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7c7c:	4f14      	ldr	r7, [pc, #80]	; (d7cd0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7c7e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7c80:	4b14      	ldr	r3, [pc, #80]	; (d7cd4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7c82:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7c84:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7c86:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7c88:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d7c8a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7c8c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7c8e:	d01b      	beq.n	d7cc8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7c90:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7c92:	ad01      	add	r5, sp, #4
   d7c94:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7c98:	f001 fa30 	bl	d90fc <localtime>
	calendar_time->tm_year += 1900;
   d7c9c:	6943      	ldr	r3, [r0, #20]
   d7c9e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7ca2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7ca4:	4604      	mov	r4, r0
   d7ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7cae:	f8d4 e000 	ldr.w	lr, [r4]
   d7cb2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7cb6:	ad01      	add	r5, sp, #4
   d7cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7cba:	4c07      	ldr	r4, [pc, #28]	; (d7cd8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7cc2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7cc4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7cc8:	b00b      	add	sp, #44	; 0x2c
   d7cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ccc:	2003e598 	.word	0x2003e598
   d7cd0:	2003e594 	.word	0x2003e594
   d7cd4:	2003e590 	.word	0x2003e590
   d7cd8:	2003e568 	.word	0x2003e568

000d7cdc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7cdc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7cde:	2000      	movs	r0, #0
   d7ce0:	f7fe fd32 	bl	d6748 <spark_sync_time_pending>
   d7ce4:	b128      	cbz	r0, d7cf2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7ce6:	f7fe fd07 	bl	d66f8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7cea:	f080 0001 	eor.w	r0, r0, #1
   d7cee:	b2c0      	uxtb	r0, r0
   d7cf0:	bd08      	pop	{r3, pc}
   d7cf2:	2001      	movs	r0, #1
    }
   d7cf4:	bd08      	pop	{r3, pc}
	...

000d7cf8 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7cf8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7cfc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7d04:	d40f      	bmi.n	d7d26 <_ZN9TimeClass4zoneEf+0x2e>
   d7d06:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7d0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7d12:	dc08      	bgt.n	d7d26 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7d14:	eddf 7a04 	vldr	s15, [pc, #16]	; d7d28 <_ZN9TimeClass4zoneEf+0x30>
   d7d18:	4b04      	ldr	r3, [pc, #16]	; (d7d2c <_ZN9TimeClass4zoneEf+0x34>)
   d7d1a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7d1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d7d22:	ed83 0a00 	vstr	s0, [r3]
   d7d26:	4770      	bx	lr
   d7d28:	45610000 	.word	0x45610000
   d7d2c:	2003e598 	.word	0x2003e598

000d7d30 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d7d32:	4b0e      	ldr	r3, [pc, #56]	; (d7d6c <_ZN9TimeClass7timeStrEl+0x3c>)
   d7d34:	681b      	ldr	r3, [r3, #0]
   d7d36:	4419      	add	r1, r3
   d7d38:	4b0d      	ldr	r3, [pc, #52]	; (d7d70 <_ZN9TimeClass7timeStrEl+0x40>)
   d7d3a:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7d3c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d7d3e:	a802      	add	r0, sp, #8
   d7d40:	4419      	add	r1, r3
   d7d42:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d7d46:	f001 f9d9 	bl	d90fc <localtime>
        char* ascstr = asctime(calendar_time);
   d7d4a:	f001 f989 	bl	d9060 <asctime>
   d7d4e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d7d50:	f001 fb39 	bl	d93c6 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d7d54:	4428      	add	r0, r5
   d7d56:	2300      	movs	r3, #0
   d7d58:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7d5c:	4629      	mov	r1, r5
   d7d5e:	4620      	mov	r0, r4
   d7d60:	f7ff fe2e 	bl	d79c0 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7d64:	4620      	mov	r0, r4
   d7d66:	b003      	add	sp, #12
   d7d68:	bd30      	pop	{r4, r5, pc}
   d7d6a:	bf00      	nop
   d7d6c:	2003e598 	.word	0x2003e598
   d7d70:	2003e590 	.word	0x2003e590

000d7d74 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7d74:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7d76:	2000      	movs	r0, #0
   d7d78:	f7fe facc 	bl	d6314 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7d7c:	4604      	mov	r4, r0
   d7d7e:	b968      	cbnz	r0, d7d9c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7d80:	f7fe fc2a 	bl	d65d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7d84:	2801      	cmp	r0, #1
   d7d86:	d10b      	bne.n	d7da0 <_ZN9TimeClass7isValidEv+0x2c>
   d7d88:	4620      	mov	r0, r4
   d7d8a:	f7fe fc5d 	bl	d6648 <system_thread_get_state>
   d7d8e:	b938      	cbnz	r0, d7da0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7d90:	f7ff ffa4 	bl	d7cdc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7d94:	b930      	cbnz	r0, d7da4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7d96:	f7fe fc97 	bl	d66c8 <spark_process>
   d7d9a:	e7f9      	b.n	d7d90 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7d9c:	2001      	movs	r0, #1
   d7d9e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7da0:	2000      	movs	r0, #0
   d7da2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7da4:	f7ff ff9a 	bl	d7cdc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7da8:	2000      	movs	r0, #0
   d7daa:	f7fe fab3 	bl	d6314 <HAL_RTC_Time_Is_Valid>
   d7dae:	3000      	adds	r0, #0
   d7db0:	bf18      	it	ne
   d7db2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7db4:	bd10      	pop	{r4, pc}

000d7db6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7db6:	b508      	push	{r3, lr}
    (void)isValid();
   d7db8:	f7ff ffdc 	bl	d7d74 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7dc0:	f7fe ba80 	b.w	d62c4 <HAL_RTC_Get_UnixTime>

000d7dc4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d7dc4:	b508      	push	{r3, lr}
	return hour(now());
   d7dc6:	f7ff fff6 	bl	d7db6 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7dca:	f7ff ff55 	bl	d7c78 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d7dce:	4b01      	ldr	r3, [pc, #4]	; (d7dd4 <_ZN9TimeClass4hourEv+0x10>)
   d7dd0:	6898      	ldr	r0, [r3, #8]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	2003e568 	.word	0x2003e568

000d7dd8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d7dd8:	b508      	push	{r3, lr}
	return minute(now());
   d7dda:	f7ff ffec 	bl	d7db6 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7dde:	f7ff ff4b 	bl	d7c78 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d7de2:	4b01      	ldr	r3, [pc, #4]	; (d7de8 <_ZN9TimeClass6minuteEv+0x10>)
   d7de4:	6858      	ldr	r0, [r3, #4]
   d7de6:	bd08      	pop	{r3, pc}
   d7de8:	2003e568 	.word	0x2003e568

000d7dec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7dec:	4b02      	ldr	r3, [pc, #8]	; (d7df8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7dee:	681a      	ldr	r2, [r3, #0]
   d7df0:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7df2:	601a      	str	r2, [r3, #0]
   d7df4:	4770      	bx	lr
   d7df6:	bf00      	nop
   d7df8:	2003e0c0 	.word	0x2003e0c0
   d7dfc:	2003e58c 	.word	0x2003e58c

000d7e00 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7e00:	4770      	bx	lr

000d7e02 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e02:	7441      	strb	r1, [r0, #17]
   d7e04:	4770      	bx	lr

000d7e06 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7e06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7e08:	7c00      	ldrb	r0, [r0, #16]
   d7e0a:	f7fe fb93 	bl	d6534 <HAL_USART_Available_Data_For_Write>
}
   d7e0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e12:	bd08      	pop	{r3, pc}

000d7e14 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7e14:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7e16:	7c00      	ldrb	r0, [r0, #16]
   d7e18:	f7fe fb64 	bl	d64e4 <HAL_USART_Available_Data>
}
   d7e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e20:	bd08      	pop	{r3, pc}

000d7e22 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7e22:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7e24:	7c00      	ldrb	r0, [r0, #16]
   d7e26:	f7fe fb6d 	bl	d6504 <HAL_USART_Peek_Data>
}
   d7e2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e2e:	bf28      	it	cs
   d7e30:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7e34:	bd08      	pop	{r3, pc}

000d7e36 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7e36:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7e38:	7c00      	ldrb	r0, [r0, #16]
   d7e3a:	f7fe fb5b 	bl	d64f4 <HAL_USART_Read_Data>
}
   d7e3e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e42:	bf28      	it	cs
   d7e44:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7e48:	bd08      	pop	{r3, pc}

000d7e4a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7e4a:	7c00      	ldrb	r0, [r0, #16]
   d7e4c:	f7fe bb62 	b.w	d6514 <HAL_USART_Flush_Data>

000d7e50 <_ZN11USARTSerialD0Ev>:
   d7e50:	b510      	push	{r4, lr}
   d7e52:	2114      	movs	r1, #20
   d7e54:	4604      	mov	r4, r0
   d7e56:	f000 fa9c 	bl	d8392 <_ZdlPvj>
   d7e5a:	4620      	mov	r0, r4
   d7e5c:	bd10      	pop	{r4, pc}

000d7e5e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7e5e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7e60:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7e62:	4604      	mov	r4, r0
   d7e64:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7e66:	b925      	cbnz	r5, d7e72 <_ZN11USARTSerial5writeEh+0x14>
   d7e68:	7c00      	ldrb	r0, [r0, #16]
   d7e6a:	f7fe fb63 	bl	d6534 <HAL_USART_Available_Data_For_Write>
   d7e6e:	2800      	cmp	r0, #0
   d7e70:	dd05      	ble.n	d7e7e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7e72:	4631      	mov	r1, r6
   d7e74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7e7a:	f7fe bb2b 	b.w	d64d4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7e7e:	4628      	mov	r0, r5
   d7e80:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7e84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7e84:	b510      	push	{r4, lr}
   d7e86:	4604      	mov	r4, r0
   d7e88:	4608      	mov	r0, r1
   d7e8a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7e8c:	2200      	movs	r2, #0
   d7e8e:	6062      	str	r2, [r4, #4]
   d7e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7e94:	60a2      	str	r2, [r4, #8]
   d7e96:	4a05      	ldr	r2, [pc, #20]	; (d7eac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7e98:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7e9a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7e9c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7e9e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7ea0:	461a      	mov	r2, r3
   d7ea2:	f7fe fb0f 	bl	d64c4 <HAL_USART_Init>
}
   d7ea6:	4620      	mov	r0, r4
   d7ea8:	bd10      	pop	{r4, pc}
   d7eaa:	bf00      	nop
   d7eac:	000dc14c 	.word	0x000dc14c

000d7eb0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7eb0:	7c00      	ldrb	r0, [r0, #16]
   d7eb2:	f7fe bb37 	b.w	d6524 <HAL_USART_Is_Enabled>
	...

000d7eb8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7eb8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7eba:	4d0c      	ldr	r5, [pc, #48]	; (d7eec <_Z22__fetch_global_Serial1v+0x34>)
   d7ebc:	6829      	ldr	r1, [r5, #0]
   d7ebe:	f011 0401 	ands.w	r4, r1, #1
   d7ec2:	d111      	bne.n	d7ee8 <_Z22__fetch_global_Serial1v+0x30>
   d7ec4:	4628      	mov	r0, r5
   d7ec6:	f7fc f8ee 	bl	d40a6 <__cxa_guard_acquire>
   d7eca:	b168      	cbz	r0, d7ee8 <_Z22__fetch_global_Serial1v+0x30>
   d7ecc:	4a08      	ldr	r2, [pc, #32]	; (d7ef0 <_Z22__fetch_global_Serial1v+0x38>)
   d7ece:	4b09      	ldr	r3, [pc, #36]	; (d7ef4 <_Z22__fetch_global_Serial1v+0x3c>)
   d7ed0:	4809      	ldr	r0, [pc, #36]	; (d7ef8 <_Z22__fetch_global_Serial1v+0x40>)
   d7ed2:	4621      	mov	r1, r4
   d7ed4:	f7ff ffd6 	bl	d7e84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7ed8:	4628      	mov	r0, r5
   d7eda:	f7fc f8e9 	bl	d40b0 <__cxa_guard_release>
   d7ede:	4a07      	ldr	r2, [pc, #28]	; (d7efc <_Z22__fetch_global_Serial1v+0x44>)
   d7ee0:	4907      	ldr	r1, [pc, #28]	; (d7f00 <_Z22__fetch_global_Serial1v+0x48>)
   d7ee2:	4805      	ldr	r0, [pc, #20]	; (d7ef8 <_Z22__fetch_global_Serial1v+0x40>)
   d7ee4:	f000 fa50 	bl	d8388 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7ee8:	4803      	ldr	r0, [pc, #12]	; (d7ef8 <_Z22__fetch_global_Serial1v+0x40>)
   d7eea:	bd38      	pop	{r3, r4, r5, pc}
   d7eec:	2003e634 	.word	0x2003e634
   d7ef0:	2003e638 	.word	0x2003e638
   d7ef4:	2003e5b0 	.word	0x2003e5b0
   d7ef8:	2003e59c 	.word	0x2003e59c
   d7efc:	2003e1b0 	.word	0x2003e1b0
   d7f00:	000d7e01 	.word	0x000d7e01

000d7f04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f04:	7441      	strb	r1, [r0, #17]
   d7f06:	4770      	bx	lr

000d7f08 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7f08:	4770      	bx	lr

000d7f0a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7f0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7f0c:	2100      	movs	r1, #0
   d7f0e:	7c00      	ldrb	r0, [r0, #16]
   d7f10:	f7fe fb30 	bl	d6574 <HAL_USB_USART_Receive_Data>
}
   d7f14:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f18:	bf28      	it	cs
   d7f1a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7f1e:	bd08      	pop	{r3, pc}

000d7f20 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7f20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7f22:	2101      	movs	r1, #1
   d7f24:	7c00      	ldrb	r0, [r0, #16]
   d7f26:	f7fe fb25 	bl	d6574 <HAL_USB_USART_Receive_Data>
}
   d7f2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f2e:	bf28      	it	cs
   d7f30:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7f34:	bd08      	pop	{r3, pc}

000d7f36 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7f36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7f38:	7c00      	ldrb	r0, [r0, #16]
   d7f3a:	f7fe fb13 	bl	d6564 <HAL_USB_USART_Available_Data_For_Write>
}
   d7f3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f42:	bd08      	pop	{r3, pc}

000d7f44 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7f44:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7f46:	7c00      	ldrb	r0, [r0, #16]
   d7f48:	f7fe fb04 	bl	d6554 <HAL_USB_USART_Available_Data>
}
   d7f4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f50:	bd08      	pop	{r3, pc}

000d7f52 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7f52:	7c00      	ldrb	r0, [r0, #16]
   d7f54:	f7fe bb1e 	b.w	d6594 <HAL_USB_USART_Flush_Data>

000d7f58 <_ZN9USBSerialD0Ev>:
   d7f58:	b510      	push	{r4, lr}
   d7f5a:	2114      	movs	r1, #20
   d7f5c:	4604      	mov	r4, r0
   d7f5e:	f000 fa18 	bl	d8392 <_ZdlPvj>
   d7f62:	4620      	mov	r0, r4
   d7f64:	bd10      	pop	{r4, pc}

000d7f66 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f66:	b538      	push	{r3, r4, r5, lr}
   d7f68:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f6a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f6c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f6e:	f7fe faf9 	bl	d6564 <HAL_USB_USART_Available_Data_For_Write>
   d7f72:	2800      	cmp	r0, #0
   d7f74:	dc01      	bgt.n	d7f7a <_ZN9USBSerial5writeEh+0x14>
   d7f76:	7c60      	ldrb	r0, [r4, #17]
   d7f78:	b128      	cbz	r0, d7f86 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7f7a:	4629      	mov	r1, r5
   d7f7c:	7c20      	ldrb	r0, [r4, #16]
   d7f7e:	f7fe fb01 	bl	d6584 <HAL_USB_USART_Send_Data>
   d7f82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7f86:	bd38      	pop	{r3, r4, r5, pc}

000d7f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7f88:	b510      	push	{r4, lr}
   d7f8a:	4604      	mov	r4, r0
   d7f8c:	2300      	movs	r3, #0
   d7f8e:	6063      	str	r3, [r4, #4]
   d7f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7f94:	60a3      	str	r3, [r4, #8]
   d7f96:	4b05      	ldr	r3, [pc, #20]	; (d7fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7f98:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7f9a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7f9c:	4608      	mov	r0, r1
{
  _serial = serial;
   d7f9e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7fa0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7fa2:	4611      	mov	r1, r2
   d7fa4:	f7fe face 	bl	d6544 <HAL_USB_USART_Init>
}
   d7fa8:	4620      	mov	r0, r4
   d7faa:	bd10      	pop	{r4, pc}
   d7fac:	000dc17c 	.word	0x000dc17c

000d7fb0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7fb0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7fb2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7fb4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7fb6:	2100      	movs	r1, #0
   d7fb8:	f001 f9a7 	bl	d930a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7fbc:	4620      	mov	r0, r4
   d7fbe:	bd10      	pop	{r4, pc}

000d7fc0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7fc0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7fc2:	4d0e      	ldr	r5, [pc, #56]	; (d7ffc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7fc4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7fc6:	a801      	add	r0, sp, #4
   d7fc8:	f7ff fff2 	bl	d7fb0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7fcc:	6829      	ldr	r1, [r5, #0]
   d7fce:	f011 0401 	ands.w	r4, r1, #1
   d7fd2:	d110      	bne.n	d7ff6 <_Z16_fetch_usbserialv+0x36>
   d7fd4:	4628      	mov	r0, r5
   d7fd6:	f7fc f866 	bl	d40a6 <__cxa_guard_acquire>
   d7fda:	b160      	cbz	r0, d7ff6 <_Z16_fetch_usbserialv+0x36>
   d7fdc:	aa01      	add	r2, sp, #4
   d7fde:	4621      	mov	r1, r4
   d7fe0:	4807      	ldr	r0, [pc, #28]	; (d8000 <_Z16_fetch_usbserialv+0x40>)
   d7fe2:	f7ff ffd1 	bl	d7f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7fe6:	4628      	mov	r0, r5
   d7fe8:	f7fc f862 	bl	d40b0 <__cxa_guard_release>
   d7fec:	4a05      	ldr	r2, [pc, #20]	; (d8004 <_Z16_fetch_usbserialv+0x44>)
   d7fee:	4906      	ldr	r1, [pc, #24]	; (d8008 <_Z16_fetch_usbserialv+0x48>)
   d7ff0:	4803      	ldr	r0, [pc, #12]	; (d8000 <_Z16_fetch_usbserialv+0x40>)
   d7ff2:	f000 f9c9 	bl	d8388 <__aeabi_atexit>
	return _usbserial;
}
   d7ff6:	4802      	ldr	r0, [pc, #8]	; (d8000 <_Z16_fetch_usbserialv+0x40>)
   d7ff8:	b007      	add	sp, #28
   d7ffa:	bd30      	pop	{r4, r5, pc}
   d7ffc:	2003e6bc 	.word	0x2003e6bc
   d8000:	2003e6c0 	.word	0x2003e6c0
   d8004:	2003e1b0 	.word	0x2003e1b0
   d8008:	000d7f09 	.word	0x000d7f09

000d800c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d800c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d800e:	4b0c      	ldr	r3, [pc, #48]	; (d8040 <serialEventRun+0x34>)
   d8010:	b133      	cbz	r3, d8020 <serialEventRun+0x14>
   d8012:	f7ff ffd5 	bl	d7fc0 <_Z16_fetch_usbserialv>
   d8016:	6803      	ldr	r3, [r0, #0]
   d8018:	691b      	ldr	r3, [r3, #16]
   d801a:	4798      	blx	r3
   d801c:	2800      	cmp	r0, #0
   d801e:	dc09      	bgt.n	d8034 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8020:	4b08      	ldr	r3, [pc, #32]	; (d8044 <serialEventRun+0x38>)
   d8022:	b163      	cbz	r3, d803e <serialEventRun+0x32>
   d8024:	f7ff ff48 	bl	d7eb8 <_Z22__fetch_global_Serial1v>
   d8028:	6803      	ldr	r3, [r0, #0]
   d802a:	691b      	ldr	r3, [r3, #16]
   d802c:	4798      	blx	r3
   d802e:	2800      	cmp	r0, #0
   d8030:	dc03      	bgt.n	d803a <serialEventRun+0x2e>
   d8032:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8034:	f3af 8000 	nop.w
   d8038:	e7f2      	b.n	d8020 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d803a:	f3af 8000 	nop.w
   d803e:	bd08      	pop	{r3, pc}
	...

000d8048 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8048:	b508      	push	{r3, lr}
	serialEventRun();
   d804a:	f7ff ffdf 	bl	d800c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d804e:	f7fe f931 	bl	d62b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8052:	4b01      	ldr	r3, [pc, #4]	; (d8058 <_post_loop+0x10>)
   d8054:	6018      	str	r0, [r3, #0]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	2003e6e8 	.word	0x2003e6e8

000d805c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d805c:	4802      	ldr	r0, [pc, #8]	; (d8068 <_Z33system_initialize_user_backup_ramv+0xc>)
   d805e:	4a03      	ldr	r2, [pc, #12]	; (d806c <_Z33system_initialize_user_backup_ramv+0x10>)
   d8060:	4903      	ldr	r1, [pc, #12]	; (d8070 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8062:	1a12      	subs	r2, r2, r0
   d8064:	f001 b946 	b.w	d92f4 <memcpy>
   d8068:	2003f400 	.word	0x2003f400
   d806c:	2003f404 	.word	0x2003f404
   d8070:	000dc5b0 	.word	0x000dc5b0

000d8074 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8074:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8076:	2300      	movs	r3, #0
   d8078:	9300      	str	r3, [sp, #0]
   d807a:	461a      	mov	r2, r3
   d807c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8080:	f7fe faf4 	bl	d666c <system_ctrl_set_result>
}
   d8084:	b003      	add	sp, #12
   d8086:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d808c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d808c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d808e:	8843      	ldrh	r3, [r0, #2]
   d8090:	2b0a      	cmp	r3, #10
   d8092:	d008      	beq.n	d80a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8094:	2b50      	cmp	r3, #80	; 0x50
   d8096:	d109      	bne.n	d80ac <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8098:	4b09      	ldr	r3, [pc, #36]	; (d80c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d809a:	681b      	ldr	r3, [r3, #0]
   d809c:	b13b      	cbz	r3, d80ae <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d809e:	b003      	add	sp, #12
   d80a0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d80a4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d80a6:	f7ff ffe5 	bl	d8074 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d80aa:	e006      	b.n	d80ba <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d80ac:	2300      	movs	r3, #0
   d80ae:	9300      	str	r3, [sp, #0]
   d80b0:	461a      	mov	r2, r3
   d80b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d80b6:	f7fe fad9 	bl	d666c <system_ctrl_set_result>
        break;
    }
}
   d80ba:	b003      	add	sp, #12
   d80bc:	f85d fb04 	ldr.w	pc, [sp], #4
   d80c0:	2003e6d4 	.word	0x2003e6d4

000d80c4 <module_user_init_hook>:

void module_user_init_hook()
{
   d80c4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d80c6:	4c10      	ldr	r4, [pc, #64]	; (d8108 <module_user_init_hook+0x44>)
   d80c8:	4d10      	ldr	r5, [pc, #64]	; (d810c <module_user_init_hook+0x48>)
   d80ca:	6823      	ldr	r3, [r4, #0]
   d80cc:	42ab      	cmp	r3, r5
   d80ce:	4b10      	ldr	r3, [pc, #64]	; (d8110 <module_user_init_hook+0x4c>)
   d80d0:	bf0c      	ite	eq
   d80d2:	2201      	moveq	r2, #1
   d80d4:	2200      	movne	r2, #0
   d80d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d80d8:	d002      	beq.n	d80e0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d80da:	f7ff ffbf 	bl	d805c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d80de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d80e0:	f7fe f8d8 	bl	d6294 <HAL_RNG_GetRandomNumber>
   d80e4:	4604      	mov	r4, r0
    srand(seed);
   d80e6:	f001 f919 	bl	d931c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d80ea:	4b0a      	ldr	r3, [pc, #40]	; (d8114 <module_user_init_hook+0x50>)
   d80ec:	b113      	cbz	r3, d80f4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d80ee:	4620      	mov	r0, r4
   d80f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d80f4:	2100      	movs	r1, #0
   d80f6:	4807      	ldr	r0, [pc, #28]	; (d8114 <module_user_init_hook+0x50>)
   d80f8:	f7fe fb2e 	bl	d6758 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d80fc:	2100      	movs	r1, #0
   d80fe:	4806      	ldr	r0, [pc, #24]	; (d8118 <module_user_init_hook+0x54>)
}
   d8100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8104:	f7fe baa8 	b.w	d6658 <system_ctrl_set_app_request_handler>
   d8108:	2003f400 	.word	0x2003f400
   d810c:	9a271c1e 	.word	0x9a271c1e
   d8110:	2003e6d8 	.word	0x2003e6d8
   d8114:	00000000 	.word	0x00000000
   d8118:	000d808d 	.word	0x000d808d

000d811c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <spark_protocol_instance+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	681b      	ldr	r3, [r3, #0]
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	0003025c 	.word	0x0003025c

000d812c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b02      	ldr	r3, [pc, #8]	; (d8138 <spark_protocol_set_product_id+0xc>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	685b      	ldr	r3, [r3, #4]
   d8134:	9301      	str	r3, [sp, #4]
   d8136:	bd08      	pop	{r3, pc}
   d8138:	0003025c 	.word	0x0003025c

000d813c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d813c:	b508      	push	{r3, lr}
   d813e:	4b02      	ldr	r3, [pc, #8]	; (d8148 <spark_protocol_set_product_firmware_version+0xc>)
   d8140:	681b      	ldr	r3, [r3, #0]
   d8142:	689b      	ldr	r3, [r3, #8]
   d8144:	9301      	str	r3, [sp, #4]
   d8146:	bd08      	pop	{r3, pc}
   d8148:	0003025c 	.word	0x0003025c

000d814c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d814c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d814e:	4e18      	ldr	r6, [pc, #96]	; (d81b0 <pinAvailable+0x64>)
   d8150:	6831      	ldr	r1, [r6, #0]
   d8152:	f011 0501 	ands.w	r5, r1, #1
   d8156:	4604      	mov	r4, r0
   d8158:	d10a      	bne.n	d8170 <pinAvailable+0x24>
   d815a:	4630      	mov	r0, r6
   d815c:	f7fb ffa3 	bl	d40a6 <__cxa_guard_acquire>
   d8160:	b130      	cbz	r0, d8170 <pinAvailable+0x24>
   d8162:	4629      	mov	r1, r5
   d8164:	4813      	ldr	r0, [pc, #76]	; (d81b4 <pinAvailable+0x68>)
   d8166:	f7ff fbd7 	bl	d7918 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d816a:	4630      	mov	r0, r6
   d816c:	f7fb ffa0 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8170:	4810      	ldr	r0, [pc, #64]	; (d81b4 <pinAvailable+0x68>)
   d8172:	f7ff fbdb 	bl	d792c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8176:	b128      	cbz	r0, d8184 <pinAvailable+0x38>
   d8178:	f1a4 030b 	sub.w	r3, r4, #11
   d817c:	2b02      	cmp	r3, #2
   d817e:	d801      	bhi.n	d8184 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8180:	2000      	movs	r0, #0
   d8182:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8184:	f000 f8b4 	bl	d82f0 <_Z19__fetch_global_Wirev>
   d8188:	f7ff f8bb 	bl	d7302 <_ZN7TwoWire9isEnabledEv>
   d818c:	b108      	cbz	r0, d8192 <pinAvailable+0x46>
   d818e:	2c01      	cmp	r4, #1
   d8190:	d9f6      	bls.n	d8180 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8192:	f7ff fe91 	bl	d7eb8 <_Z22__fetch_global_Serial1v>
   d8196:	f7ff fe8b 	bl	d7eb0 <_ZN11USARTSerial9isEnabledEv>
   d819a:	b118      	cbz	r0, d81a4 <pinAvailable+0x58>
   d819c:	f1a4 0309 	sub.w	r3, r4, #9
   d81a0:	2b01      	cmp	r3, #1
   d81a2:	d9ed      	bls.n	d8180 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d81a4:	2c23      	cmp	r4, #35	; 0x23
   d81a6:	bf8c      	ite	hi
   d81a8:	2000      	movhi	r0, #0
   d81aa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d81ac:	bd70      	pop	{r4, r5, r6, pc}
   d81ae:	bf00      	nop
   d81b0:	2003e6dc 	.word	0x2003e6dc
   d81b4:	2003e6e0 	.word	0x2003e6e0

000d81b8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d81b8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d81ba:	b538      	push	{r3, r4, r5, lr}
   d81bc:	4604      	mov	r4, r0
   d81be:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d81c0:	d80a      	bhi.n	d81d8 <pinMode+0x20>
   d81c2:	29ff      	cmp	r1, #255	; 0xff
   d81c4:	d008      	beq.n	d81d8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d81c6:	f7ff ffc1 	bl	d814c <pinAvailable>
   d81ca:	b128      	cbz	r0, d81d8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d81cc:	4629      	mov	r1, r5
   d81ce:	4620      	mov	r0, r4
}
   d81d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d81d4:	f7fe b8be 	b.w	d6354 <HAL_Pin_Mode>
   d81d8:	bd38      	pop	{r3, r4, r5, pc}

000d81da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d81da:	b538      	push	{r3, r4, r5, lr}
   d81dc:	4604      	mov	r4, r0
   d81de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d81e0:	f7fe f8c0 	bl	d6364 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d81e4:	28ff      	cmp	r0, #255	; 0xff
   d81e6:	d010      	beq.n	d820a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d81e8:	2806      	cmp	r0, #6
   d81ea:	d804      	bhi.n	d81f6 <digitalWrite+0x1c>
   d81ec:	234d      	movs	r3, #77	; 0x4d
   d81ee:	fa23 f000 	lsr.w	r0, r3, r0
   d81f2:	07c3      	lsls	r3, r0, #31
   d81f4:	d409      	bmi.n	d820a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d81f6:	4620      	mov	r0, r4
   d81f8:	f7ff ffa8 	bl	d814c <pinAvailable>
   d81fc:	b128      	cbz	r0, d820a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d81fe:	4629      	mov	r1, r5
   d8200:	4620      	mov	r0, r4
}
   d8202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8206:	f7fe b8b5 	b.w	d6374 <HAL_GPIO_Write>
   d820a:	bd38      	pop	{r3, r4, r5, pc}

000d820c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d820c:	b510      	push	{r4, lr}
   d820e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8210:	f7fe f8a8 	bl	d6364 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8214:	3804      	subs	r0, #4
   d8216:	b2c0      	uxtb	r0, r0
   d8218:	2801      	cmp	r0, #1
   d821a:	d908      	bls.n	d822e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d821c:	4620      	mov	r0, r4
   d821e:	f7ff ff95 	bl	d814c <pinAvailable>
   d8222:	b120      	cbz	r0, d822e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8224:	4620      	mov	r0, r4
}
   d8226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d822a:	f7fe b8ab 	b.w	d6384 <HAL_GPIO_Read>
}
   d822e:	2000      	movs	r0, #0
   d8230:	bd10      	pop	{r4, pc}

000d8232 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8232:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8234:	b510      	push	{r4, lr}
   d8236:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8238:	bf9c      	itt	ls
   d823a:	340e      	addls	r4, #14
   d823c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d823e:	4620      	mov	r0, r4
   d8240:	f7ff ff84 	bl	d814c <pinAvailable>
   d8244:	b150      	cbz	r0, d825c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8246:	2103      	movs	r1, #3
   d8248:	4620      	mov	r0, r4
   d824a:	f7fe f87b 	bl	d6344 <HAL_Validate_Pin_Function>
   d824e:	2803      	cmp	r0, #3
   d8250:	d104      	bne.n	d825c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8252:	4620      	mov	r0, r4
}
   d8254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8258:	f7fe b89c 	b.w	d6394 <HAL_ADC_Read>
}
   d825c:	2000      	movs	r0, #0
   d825e:	bd10      	pop	{r4, pc}

000d8260 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8260:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8262:	4c07      	ldr	r4, [pc, #28]	; (d8280 <_Z21__fetch_global_EEPROMv+0x20>)
   d8264:	6823      	ldr	r3, [r4, #0]
   d8266:	07db      	lsls	r3, r3, #31
   d8268:	d408      	bmi.n	d827c <_Z21__fetch_global_EEPROMv+0x1c>
   d826a:	4620      	mov	r0, r4
   d826c:	f7fb ff1b 	bl	d40a6 <__cxa_guard_acquire>
   d8270:	b120      	cbz	r0, d827c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8272:	f7fe f82f 	bl	d62d4 <HAL_EEPROM_Init>
   d8276:	4620      	mov	r0, r4
   d8278:	f7fb ff1a 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d827c:	4801      	ldr	r0, [pc, #4]	; (d8284 <_Z21__fetch_global_EEPROMv+0x24>)
   d827e:	bd10      	pop	{r4, pc}
   d8280:	2003e6ec 	.word	0x2003e6ec
   d8284:	2003e6f0 	.word	0x2003e6f0

000d8288 <_Z17acquireWireBufferv>:
   d8288:	b570      	push	{r4, r5, r6, lr}
   d828a:	4604      	mov	r4, r0
   d828c:	2514      	movs	r5, #20
   d828e:	462a      	mov	r2, r5
   d8290:	4e09      	ldr	r6, [pc, #36]	; (d82b8 <_Z17acquireWireBufferv+0x30>)
   d8292:	2100      	movs	r1, #0
   d8294:	f001 f839 	bl	d930a <memset>
   d8298:	8025      	strh	r5, [r4, #0]
   d829a:	2520      	movs	r5, #32
   d829c:	4631      	mov	r1, r6
   d829e:	60a5      	str	r5, [r4, #8]
   d82a0:	6125      	str	r5, [r4, #16]
   d82a2:	4628      	mov	r0, r5
   d82a4:	f000 f88f 	bl	d83c6 <_ZnajRKSt9nothrow_t>
   d82a8:	4631      	mov	r1, r6
   d82aa:	6060      	str	r0, [r4, #4]
   d82ac:	4628      	mov	r0, r5
   d82ae:	f000 f88a 	bl	d83c6 <_ZnajRKSt9nothrow_t>
   d82b2:	60e0      	str	r0, [r4, #12]
   d82b4:	4620      	mov	r0, r4
   d82b6:	bd70      	pop	{r4, r5, r6, pc}
   d82b8:	000dc1a4 	.word	0x000dc1a4

000d82bc <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d82bc:	b570      	push	{r4, r5, r6, lr}
   d82be:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d82c0:	2514      	movs	r5, #20
   d82c2:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82c4:	4e09      	ldr	r6, [pc, #36]	; (d82ec <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d82c6:	2100      	movs	r1, #0
   d82c8:	f001 f81f 	bl	d930a <memset>
   d82cc:	8025      	strh	r5, [r4, #0]
   d82ce:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82d0:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d82d2:	60a5      	str	r5, [r4, #8]
   d82d4:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82d6:	4628      	mov	r0, r5
   d82d8:	f000 f875 	bl	d83c6 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82dc:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d82de:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82e0:	4628      	mov	r0, r5
   d82e2:	f000 f870 	bl	d83c6 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d82e6:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d82e8:	4620      	mov	r0, r4
   d82ea:	bd70      	pop	{r4, r5, r6, pc}
   d82ec:	000dc1a4 	.word	0x000dc1a4

000d82f0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d82f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82f2:	4d0e      	ldr	r5, [pc, #56]	; (d832c <_Z19__fetch_global_Wirev+0x3c>)
   d82f4:	6829      	ldr	r1, [r5, #0]
   d82f6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d82fa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82fc:	d113      	bne.n	d8326 <_Z19__fetch_global_Wirev+0x36>
   d82fe:	4628      	mov	r0, r5
   d8300:	f7fb fed1 	bl	d40a6 <__cxa_guard_acquire>
   d8304:	b178      	cbz	r0, d8326 <_Z19__fetch_global_Wirev+0x36>
   d8306:	a801      	add	r0, sp, #4
   d8308:	f7ff ffbe 	bl	d8288 <_Z17acquireWireBufferv>
   d830c:	aa01      	add	r2, sp, #4
   d830e:	4621      	mov	r1, r4
   d8310:	4807      	ldr	r0, [pc, #28]	; (d8330 <_Z19__fetch_global_Wirev+0x40>)
   d8312:	f7fe ff9f 	bl	d7254 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8316:	4628      	mov	r0, r5
   d8318:	f7fb feca 	bl	d40b0 <__cxa_guard_release>
   d831c:	4a05      	ldr	r2, [pc, #20]	; (d8334 <_Z19__fetch_global_Wirev+0x44>)
   d831e:	4906      	ldr	r1, [pc, #24]	; (d8338 <_Z19__fetch_global_Wirev+0x48>)
   d8320:	4803      	ldr	r0, [pc, #12]	; (d8330 <_Z19__fetch_global_Wirev+0x40>)
   d8322:	f000 f831 	bl	d8388 <__aeabi_atexit>
	return wire;
}
   d8326:	4802      	ldr	r0, [pc, #8]	; (d8330 <_Z19__fetch_global_Wirev+0x40>)
   d8328:	b007      	add	sp, #28
   d832a:	bd30      	pop	{r4, r5, pc}
   d832c:	2003e6f4 	.word	0x2003e6f4
   d8330:	2003e70c 	.word	0x2003e70c
   d8334:	2003e1b0 	.word	0x2003e1b0
   d8338:	000d71fd 	.word	0x000d71fd

000d833c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d833c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d833e:	4c0e      	ldr	r4, [pc, #56]	; (d8378 <_Z20__fetch_global_Wire1v+0x3c>)
   d8340:	6823      	ldr	r3, [r4, #0]
   d8342:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8344:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8346:	d413      	bmi.n	d8370 <_Z20__fetch_global_Wire1v+0x34>
   d8348:	4620      	mov	r0, r4
   d834a:	f7fb feac 	bl	d40a6 <__cxa_guard_acquire>
   d834e:	b178      	cbz	r0, d8370 <_Z20__fetch_global_Wire1v+0x34>
   d8350:	a801      	add	r0, sp, #4
   d8352:	f7ff ffb3 	bl	d82bc <_Z18acquireWire1Bufferv>
   d8356:	aa01      	add	r2, sp, #4
   d8358:	2101      	movs	r1, #1
   d835a:	4808      	ldr	r0, [pc, #32]	; (d837c <_Z20__fetch_global_Wire1v+0x40>)
   d835c:	f7fe ff7a 	bl	d7254 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8360:	4620      	mov	r0, r4
   d8362:	f7fb fea5 	bl	d40b0 <__cxa_guard_release>
   d8366:	4a06      	ldr	r2, [pc, #24]	; (d8380 <_Z20__fetch_global_Wire1v+0x44>)
   d8368:	4906      	ldr	r1, [pc, #24]	; (d8384 <_Z20__fetch_global_Wire1v+0x48>)
   d836a:	4804      	ldr	r0, [pc, #16]	; (d837c <_Z20__fetch_global_Wire1v+0x40>)
   d836c:	f000 f80c 	bl	d8388 <__aeabi_atexit>
	return wire;
}
   d8370:	4802      	ldr	r0, [pc, #8]	; (d837c <_Z20__fetch_global_Wire1v+0x40>)
   d8372:	b006      	add	sp, #24
   d8374:	bd10      	pop	{r4, pc}
   d8376:	bf00      	nop
   d8378:	2003e720 	.word	0x2003e720
   d837c:	2003e6f8 	.word	0x2003e6f8
   d8380:	2003e1b0 	.word	0x2003e1b0
   d8384:	000d71fd 	.word	0x000d71fd

000d8388 <__aeabi_atexit>:
   d8388:	460b      	mov	r3, r1
   d838a:	4601      	mov	r1, r0
   d838c:	4618      	mov	r0, r3
   d838e:	f000 bea7 	b.w	d90e0 <__cxa_atexit>

000d8392 <_ZdlPvj>:
   d8392:	f7fb be84 	b.w	d409e <_ZdlPv>
	...

000d8398 <_ZSt15get_new_handlerv>:
   d8398:	4b02      	ldr	r3, [pc, #8]	; (d83a4 <_ZSt15get_new_handlerv+0xc>)
   d839a:	6818      	ldr	r0, [r3, #0]
   d839c:	f3bf 8f5f 	dmb	sy
   d83a0:	4770      	bx	lr
   d83a2:	bf00      	nop
   d83a4:	2003e724 	.word	0x2003e724

000d83a8 <_ZnwjRKSt9nothrow_t>:
   d83a8:	b510      	push	{r4, lr}
   d83aa:	2800      	cmp	r0, #0
   d83ac:	bf14      	ite	ne
   d83ae:	4604      	movne	r4, r0
   d83b0:	2401      	moveq	r4, #1
   d83b2:	4620      	mov	r0, r4
   d83b4:	f7fe fa28 	bl	d6808 <malloc>
   d83b8:	b920      	cbnz	r0, d83c4 <_ZnwjRKSt9nothrow_t+0x1c>
   d83ba:	f7ff ffed 	bl	d8398 <_ZSt15get_new_handlerv>
   d83be:	b108      	cbz	r0, d83c4 <_ZnwjRKSt9nothrow_t+0x1c>
   d83c0:	4780      	blx	r0
   d83c2:	e7f6      	b.n	d83b2 <_ZnwjRKSt9nothrow_t+0xa>
   d83c4:	bd10      	pop	{r4, pc}

000d83c6 <_ZnajRKSt9nothrow_t>:
   d83c6:	f7ff bfef 	b.w	d83a8 <_ZnwjRKSt9nothrow_t>

000d83ca <_ZSt25__throw_bad_function_callv>:
   d83ca:	b508      	push	{r3, lr}
   d83cc:	f7fe fa4c 	bl	d6868 <abort>

000d83d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d83d0:	4b24      	ldr	r3, [pc, #144]	; (d8464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d83d2:	681a      	ldr	r2, [r3, #0]
   d83d4:	07d0      	lsls	r0, r2, #31
   d83d6:	bf5c      	itt	pl
   d83d8:	2201      	movpl	r2, #1
   d83da:	601a      	strpl	r2, [r3, #0]
   d83dc:	4b22      	ldr	r3, [pc, #136]	; (d8468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d83de:	681a      	ldr	r2, [r3, #0]
   d83e0:	07d1      	lsls	r1, r2, #31
   d83e2:	bf5c      	itt	pl
   d83e4:	2201      	movpl	r2, #1
   d83e6:	601a      	strpl	r2, [r3, #0]
   d83e8:	4b20      	ldr	r3, [pc, #128]	; (d846c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d83ea:	681a      	ldr	r2, [r3, #0]
   d83ec:	07d2      	lsls	r2, r2, #31
   d83ee:	bf5c      	itt	pl
   d83f0:	2201      	movpl	r2, #1
   d83f2:	601a      	strpl	r2, [r3, #0]
   d83f4:	4b1e      	ldr	r3, [pc, #120]	; (d8470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d83f6:	681a      	ldr	r2, [r3, #0]
   d83f8:	07d0      	lsls	r0, r2, #31
   d83fa:	bf5c      	itt	pl
   d83fc:	2201      	movpl	r2, #1
   d83fe:	601a      	strpl	r2, [r3, #0]
   d8400:	4b1c      	ldr	r3, [pc, #112]	; (d8474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8402:	681a      	ldr	r2, [r3, #0]
   d8404:	07d1      	lsls	r1, r2, #31
   d8406:	bf5c      	itt	pl
   d8408:	2201      	movpl	r2, #1
   d840a:	601a      	strpl	r2, [r3, #0]
   d840c:	4b1a      	ldr	r3, [pc, #104]	; (d8478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d840e:	681a      	ldr	r2, [r3, #0]
   d8410:	07d2      	lsls	r2, r2, #31
   d8412:	bf5c      	itt	pl
   d8414:	2201      	movpl	r2, #1
   d8416:	601a      	strpl	r2, [r3, #0]
   d8418:	4b18      	ldr	r3, [pc, #96]	; (d847c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d841a:	681a      	ldr	r2, [r3, #0]
   d841c:	07d0      	lsls	r0, r2, #31
   d841e:	bf5c      	itt	pl
   d8420:	2201      	movpl	r2, #1
   d8422:	601a      	strpl	r2, [r3, #0]
   d8424:	4b16      	ldr	r3, [pc, #88]	; (d8480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8426:	681a      	ldr	r2, [r3, #0]
   d8428:	07d1      	lsls	r1, r2, #31
   d842a:	bf5c      	itt	pl
   d842c:	2201      	movpl	r2, #1
   d842e:	601a      	strpl	r2, [r3, #0]
   d8430:	4b14      	ldr	r3, [pc, #80]	; (d8484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8432:	681a      	ldr	r2, [r3, #0]
   d8434:	07d2      	lsls	r2, r2, #31
   d8436:	bf5c      	itt	pl
   d8438:	2201      	movpl	r2, #1
   d843a:	601a      	strpl	r2, [r3, #0]
   d843c:	4b12      	ldr	r3, [pc, #72]	; (d8488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d843e:	681a      	ldr	r2, [r3, #0]
   d8440:	07d0      	lsls	r0, r2, #31
   d8442:	bf5c      	itt	pl
   d8444:	2201      	movpl	r2, #1
   d8446:	601a      	strpl	r2, [r3, #0]
   d8448:	4b10      	ldr	r3, [pc, #64]	; (d848c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d844a:	681a      	ldr	r2, [r3, #0]
   d844c:	07d1      	lsls	r1, r2, #31
   d844e:	bf5c      	itt	pl
   d8450:	2201      	movpl	r2, #1
   d8452:	601a      	strpl	r2, [r3, #0]
   d8454:	4b0e      	ldr	r3, [pc, #56]	; (d8490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8456:	681a      	ldr	r2, [r3, #0]
   d8458:	07d2      	lsls	r2, r2, #31
   d845a:	bf5c      	itt	pl
   d845c:	2201      	movpl	r2, #1
   d845e:	601a      	strpl	r2, [r3, #0]
   d8460:	4770      	bx	lr
   d8462:	bf00      	nop
   d8464:	2003e754 	.word	0x2003e754
   d8468:	2003e750 	.word	0x2003e750
   d846c:	2003e74c 	.word	0x2003e74c
   d8470:	2003e748 	.word	0x2003e748
   d8474:	2003e744 	.word	0x2003e744
   d8478:	2003e740 	.word	0x2003e740
   d847c:	2003e73c 	.word	0x2003e73c
   d8480:	2003e738 	.word	0x2003e738
   d8484:	2003e734 	.word	0x2003e734
   d8488:	2003e730 	.word	0x2003e730
   d848c:	2003e72c 	.word	0x2003e72c
   d8490:	2003e728 	.word	0x2003e728

000d8494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8494:	4b18      	ldr	r3, [pc, #96]	; (d84f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8496:	681a      	ldr	r2, [r3, #0]
   d8498:	07d1      	lsls	r1, r2, #31
   d849a:	bf5c      	itt	pl
   d849c:	2201      	movpl	r2, #1
   d849e:	601a      	strpl	r2, [r3, #0]
   d84a0:	4b16      	ldr	r3, [pc, #88]	; (d84fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d84a2:	681a      	ldr	r2, [r3, #0]
   d84a4:	07d2      	lsls	r2, r2, #31
   d84a6:	bf5c      	itt	pl
   d84a8:	2201      	movpl	r2, #1
   d84aa:	601a      	strpl	r2, [r3, #0]
   d84ac:	4b14      	ldr	r3, [pc, #80]	; (d8500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d84ae:	681a      	ldr	r2, [r3, #0]
   d84b0:	07d0      	lsls	r0, r2, #31
   d84b2:	bf5c      	itt	pl
   d84b4:	2201      	movpl	r2, #1
   d84b6:	601a      	strpl	r2, [r3, #0]
   d84b8:	4b12      	ldr	r3, [pc, #72]	; (d8504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d84ba:	681a      	ldr	r2, [r3, #0]
   d84bc:	07d1      	lsls	r1, r2, #31
   d84be:	bf5c      	itt	pl
   d84c0:	2201      	movpl	r2, #1
   d84c2:	601a      	strpl	r2, [r3, #0]
   d84c4:	4b10      	ldr	r3, [pc, #64]	; (d8508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d84c6:	681a      	ldr	r2, [r3, #0]
   d84c8:	07d2      	lsls	r2, r2, #31
   d84ca:	bf5c      	itt	pl
   d84cc:	2201      	movpl	r2, #1
   d84ce:	601a      	strpl	r2, [r3, #0]
   d84d0:	4b0e      	ldr	r3, [pc, #56]	; (d850c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d84d2:	681a      	ldr	r2, [r3, #0]
   d84d4:	07d0      	lsls	r0, r2, #31
   d84d6:	bf5c      	itt	pl
   d84d8:	2201      	movpl	r2, #1
   d84da:	601a      	strpl	r2, [r3, #0]
   d84dc:	4b0c      	ldr	r3, [pc, #48]	; (d8510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d84de:	681a      	ldr	r2, [r3, #0]
   d84e0:	07d1      	lsls	r1, r2, #31
   d84e2:	bf5c      	itt	pl
   d84e4:	2201      	movpl	r2, #1
   d84e6:	601a      	strpl	r2, [r3, #0]
   d84e8:	4b0a      	ldr	r3, [pc, #40]	; (d8514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d84ea:	681a      	ldr	r2, [r3, #0]
   d84ec:	07d2      	lsls	r2, r2, #31
   d84ee:	bf5c      	itt	pl
   d84f0:	2201      	movpl	r2, #1
   d84f2:	601a      	strpl	r2, [r3, #0]
   d84f4:	4770      	bx	lr
   d84f6:	bf00      	nop
   d84f8:	2003e774 	.word	0x2003e774
   d84fc:	2003e770 	.word	0x2003e770
   d8500:	2003e76c 	.word	0x2003e76c
   d8504:	2003e768 	.word	0x2003e768
   d8508:	2003e764 	.word	0x2003e764
   d850c:	2003e760 	.word	0x2003e760
   d8510:	2003e75c 	.word	0x2003e75c
   d8514:	2003e758 	.word	0x2003e758

000d8518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8518:	4b18      	ldr	r3, [pc, #96]	; (d857c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d851a:	681a      	ldr	r2, [r3, #0]
   d851c:	07d1      	lsls	r1, r2, #31
   d851e:	bf5c      	itt	pl
   d8520:	2201      	movpl	r2, #1
   d8522:	601a      	strpl	r2, [r3, #0]
   d8524:	4b16      	ldr	r3, [pc, #88]	; (d8580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8526:	681a      	ldr	r2, [r3, #0]
   d8528:	07d2      	lsls	r2, r2, #31
   d852a:	bf5c      	itt	pl
   d852c:	2201      	movpl	r2, #1
   d852e:	601a      	strpl	r2, [r3, #0]
   d8530:	4b14      	ldr	r3, [pc, #80]	; (d8584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8532:	681a      	ldr	r2, [r3, #0]
   d8534:	07d0      	lsls	r0, r2, #31
   d8536:	bf5c      	itt	pl
   d8538:	2201      	movpl	r2, #1
   d853a:	601a      	strpl	r2, [r3, #0]
   d853c:	4b12      	ldr	r3, [pc, #72]	; (d8588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d853e:	681a      	ldr	r2, [r3, #0]
   d8540:	07d1      	lsls	r1, r2, #31
   d8542:	bf5c      	itt	pl
   d8544:	2201      	movpl	r2, #1
   d8546:	601a      	strpl	r2, [r3, #0]
   d8548:	4b10      	ldr	r3, [pc, #64]	; (d858c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d854a:	681a      	ldr	r2, [r3, #0]
   d854c:	07d2      	lsls	r2, r2, #31
   d854e:	bf5c      	itt	pl
   d8550:	2201      	movpl	r2, #1
   d8552:	601a      	strpl	r2, [r3, #0]
   d8554:	4b0e      	ldr	r3, [pc, #56]	; (d8590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8556:	681a      	ldr	r2, [r3, #0]
   d8558:	07d0      	lsls	r0, r2, #31
   d855a:	bf5c      	itt	pl
   d855c:	2201      	movpl	r2, #1
   d855e:	601a      	strpl	r2, [r3, #0]
   d8560:	4b0c      	ldr	r3, [pc, #48]	; (d8594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8562:	681a      	ldr	r2, [r3, #0]
   d8564:	07d1      	lsls	r1, r2, #31
   d8566:	bf5c      	itt	pl
   d8568:	2201      	movpl	r2, #1
   d856a:	601a      	strpl	r2, [r3, #0]
   d856c:	4b0a      	ldr	r3, [pc, #40]	; (d8598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d856e:	681a      	ldr	r2, [r3, #0]
   d8570:	07d2      	lsls	r2, r2, #31
   d8572:	bf5c      	itt	pl
   d8574:	2201      	movpl	r2, #1
   d8576:	601a      	strpl	r2, [r3, #0]
   d8578:	4770      	bx	lr
   d857a:	bf00      	nop
   d857c:	2003e794 	.word	0x2003e794
   d8580:	2003e790 	.word	0x2003e790
   d8584:	2003e78c 	.word	0x2003e78c
   d8588:	2003e788 	.word	0x2003e788
   d858c:	2003e784 	.word	0x2003e784
   d8590:	2003e780 	.word	0x2003e780
   d8594:	2003e77c 	.word	0x2003e77c
   d8598:	2003e778 	.word	0x2003e778

000d859c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d859c:	4b24      	ldr	r3, [pc, #144]	; (d8630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d859e:	681a      	ldr	r2, [r3, #0]
   d85a0:	07d0      	lsls	r0, r2, #31
   d85a2:	bf5c      	itt	pl
   d85a4:	2201      	movpl	r2, #1
   d85a6:	601a      	strpl	r2, [r3, #0]
   d85a8:	4b22      	ldr	r3, [pc, #136]	; (d8634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d85aa:	681a      	ldr	r2, [r3, #0]
   d85ac:	07d1      	lsls	r1, r2, #31
   d85ae:	bf5c      	itt	pl
   d85b0:	2201      	movpl	r2, #1
   d85b2:	601a      	strpl	r2, [r3, #0]
   d85b4:	4b20      	ldr	r3, [pc, #128]	; (d8638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d85b6:	681a      	ldr	r2, [r3, #0]
   d85b8:	07d2      	lsls	r2, r2, #31
   d85ba:	bf5c      	itt	pl
   d85bc:	2201      	movpl	r2, #1
   d85be:	601a      	strpl	r2, [r3, #0]
   d85c0:	4b1e      	ldr	r3, [pc, #120]	; (d863c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d85c2:	681a      	ldr	r2, [r3, #0]
   d85c4:	07d0      	lsls	r0, r2, #31
   d85c6:	bf5c      	itt	pl
   d85c8:	2201      	movpl	r2, #1
   d85ca:	601a      	strpl	r2, [r3, #0]
   d85cc:	4b1c      	ldr	r3, [pc, #112]	; (d8640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d85ce:	681a      	ldr	r2, [r3, #0]
   d85d0:	07d1      	lsls	r1, r2, #31
   d85d2:	bf5c      	itt	pl
   d85d4:	2201      	movpl	r2, #1
   d85d6:	601a      	strpl	r2, [r3, #0]
   d85d8:	4b1a      	ldr	r3, [pc, #104]	; (d8644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d85da:	681a      	ldr	r2, [r3, #0]
   d85dc:	07d2      	lsls	r2, r2, #31
   d85de:	bf5c      	itt	pl
   d85e0:	2201      	movpl	r2, #1
   d85e2:	601a      	strpl	r2, [r3, #0]
   d85e4:	4b18      	ldr	r3, [pc, #96]	; (d8648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d85e6:	681a      	ldr	r2, [r3, #0]
   d85e8:	07d0      	lsls	r0, r2, #31
   d85ea:	bf5c      	itt	pl
   d85ec:	2201      	movpl	r2, #1
   d85ee:	601a      	strpl	r2, [r3, #0]
   d85f0:	4b16      	ldr	r3, [pc, #88]	; (d864c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d85f2:	681a      	ldr	r2, [r3, #0]
   d85f4:	07d1      	lsls	r1, r2, #31
   d85f6:	bf5c      	itt	pl
   d85f8:	2201      	movpl	r2, #1
   d85fa:	601a      	strpl	r2, [r3, #0]
   d85fc:	4b14      	ldr	r3, [pc, #80]	; (d8650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d85fe:	681a      	ldr	r2, [r3, #0]
   d8600:	07d2      	lsls	r2, r2, #31
   d8602:	bf5c      	itt	pl
   d8604:	2201      	movpl	r2, #1
   d8606:	601a      	strpl	r2, [r3, #0]
   d8608:	4b12      	ldr	r3, [pc, #72]	; (d8654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d860a:	681a      	ldr	r2, [r3, #0]
   d860c:	07d0      	lsls	r0, r2, #31
   d860e:	bf5c      	itt	pl
   d8610:	2201      	movpl	r2, #1
   d8612:	601a      	strpl	r2, [r3, #0]
   d8614:	4b10      	ldr	r3, [pc, #64]	; (d8658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8616:	681a      	ldr	r2, [r3, #0]
   d8618:	07d1      	lsls	r1, r2, #31
   d861a:	bf5c      	itt	pl
   d861c:	2201      	movpl	r2, #1
   d861e:	601a      	strpl	r2, [r3, #0]
   d8620:	4b0e      	ldr	r3, [pc, #56]	; (d865c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8622:	681a      	ldr	r2, [r3, #0]
   d8624:	07d2      	lsls	r2, r2, #31
   d8626:	bf5c      	itt	pl
   d8628:	2201      	movpl	r2, #1
   d862a:	601a      	strpl	r2, [r3, #0]
   d862c:	4770      	bx	lr
   d862e:	bf00      	nop
   d8630:	2003e7c4 	.word	0x2003e7c4
   d8634:	2003e7c0 	.word	0x2003e7c0
   d8638:	2003e7bc 	.word	0x2003e7bc
   d863c:	2003e7b8 	.word	0x2003e7b8
   d8640:	2003e7b4 	.word	0x2003e7b4
   d8644:	2003e7b0 	.word	0x2003e7b0
   d8648:	2003e7ac 	.word	0x2003e7ac
   d864c:	2003e7a8 	.word	0x2003e7a8
   d8650:	2003e7a4 	.word	0x2003e7a4
   d8654:	2003e7a0 	.word	0x2003e7a0
   d8658:	2003e79c 	.word	0x2003e79c
   d865c:	2003e798 	.word	0x2003e798

000d8660 <__aeabi_drsub>:
   d8660:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8664:	e002      	b.n	d866c <__adddf3>
   d8666:	bf00      	nop

000d8668 <__aeabi_dsub>:
   d8668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d866c <__adddf3>:
   d866c:	b530      	push	{r4, r5, lr}
   d866e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8672:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8676:	ea94 0f05 	teq	r4, r5
   d867a:	bf08      	it	eq
   d867c:	ea90 0f02 	teqeq	r0, r2
   d8680:	bf1f      	itttt	ne
   d8682:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8686:	ea55 0c02 	orrsne.w	ip, r5, r2
   d868a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d868e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8692:	f000 80e2 	beq.w	d885a <__adddf3+0x1ee>
   d8696:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d869a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d869e:	bfb8      	it	lt
   d86a0:	426d      	neglt	r5, r5
   d86a2:	dd0c      	ble.n	d86be <__adddf3+0x52>
   d86a4:	442c      	add	r4, r5
   d86a6:	ea80 0202 	eor.w	r2, r0, r2
   d86aa:	ea81 0303 	eor.w	r3, r1, r3
   d86ae:	ea82 0000 	eor.w	r0, r2, r0
   d86b2:	ea83 0101 	eor.w	r1, r3, r1
   d86b6:	ea80 0202 	eor.w	r2, r0, r2
   d86ba:	ea81 0303 	eor.w	r3, r1, r3
   d86be:	2d36      	cmp	r5, #54	; 0x36
   d86c0:	bf88      	it	hi
   d86c2:	bd30      	pophi	{r4, r5, pc}
   d86c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d86c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d86cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d86d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d86d4:	d002      	beq.n	d86dc <__adddf3+0x70>
   d86d6:	4240      	negs	r0, r0
   d86d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d86dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d86e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d86e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d86e8:	d002      	beq.n	d86f0 <__adddf3+0x84>
   d86ea:	4252      	negs	r2, r2
   d86ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d86f0:	ea94 0f05 	teq	r4, r5
   d86f4:	f000 80a7 	beq.w	d8846 <__adddf3+0x1da>
   d86f8:	f1a4 0401 	sub.w	r4, r4, #1
   d86fc:	f1d5 0e20 	rsbs	lr, r5, #32
   d8700:	db0d      	blt.n	d871e <__adddf3+0xb2>
   d8702:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8706:	fa22 f205 	lsr.w	r2, r2, r5
   d870a:	1880      	adds	r0, r0, r2
   d870c:	f141 0100 	adc.w	r1, r1, #0
   d8710:	fa03 f20e 	lsl.w	r2, r3, lr
   d8714:	1880      	adds	r0, r0, r2
   d8716:	fa43 f305 	asr.w	r3, r3, r5
   d871a:	4159      	adcs	r1, r3
   d871c:	e00e      	b.n	d873c <__adddf3+0xd0>
   d871e:	f1a5 0520 	sub.w	r5, r5, #32
   d8722:	f10e 0e20 	add.w	lr, lr, #32
   d8726:	2a01      	cmp	r2, #1
   d8728:	fa03 fc0e 	lsl.w	ip, r3, lr
   d872c:	bf28      	it	cs
   d872e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8732:	fa43 f305 	asr.w	r3, r3, r5
   d8736:	18c0      	adds	r0, r0, r3
   d8738:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d873c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8740:	d507      	bpl.n	d8752 <__adddf3+0xe6>
   d8742:	f04f 0e00 	mov.w	lr, #0
   d8746:	f1dc 0c00 	rsbs	ip, ip, #0
   d874a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d874e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8752:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8756:	d31b      	bcc.n	d8790 <__adddf3+0x124>
   d8758:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d875c:	d30c      	bcc.n	d8778 <__adddf3+0x10c>
   d875e:	0849      	lsrs	r1, r1, #1
   d8760:	ea5f 0030 	movs.w	r0, r0, rrx
   d8764:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8768:	f104 0401 	add.w	r4, r4, #1
   d876c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8770:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8774:	f080 809a 	bcs.w	d88ac <__adddf3+0x240>
   d8778:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d877c:	bf08      	it	eq
   d877e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8782:	f150 0000 	adcs.w	r0, r0, #0
   d8786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d878a:	ea41 0105 	orr.w	r1, r1, r5
   d878e:	bd30      	pop	{r4, r5, pc}
   d8790:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8794:	4140      	adcs	r0, r0
   d8796:	eb41 0101 	adc.w	r1, r1, r1
   d879a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d879e:	f1a4 0401 	sub.w	r4, r4, #1
   d87a2:	d1e9      	bne.n	d8778 <__adddf3+0x10c>
   d87a4:	f091 0f00 	teq	r1, #0
   d87a8:	bf04      	itt	eq
   d87aa:	4601      	moveq	r1, r0
   d87ac:	2000      	moveq	r0, #0
   d87ae:	fab1 f381 	clz	r3, r1
   d87b2:	bf08      	it	eq
   d87b4:	3320      	addeq	r3, #32
   d87b6:	f1a3 030b 	sub.w	r3, r3, #11
   d87ba:	f1b3 0220 	subs.w	r2, r3, #32
   d87be:	da0c      	bge.n	d87da <__adddf3+0x16e>
   d87c0:	320c      	adds	r2, #12
   d87c2:	dd08      	ble.n	d87d6 <__adddf3+0x16a>
   d87c4:	f102 0c14 	add.w	ip, r2, #20
   d87c8:	f1c2 020c 	rsb	r2, r2, #12
   d87cc:	fa01 f00c 	lsl.w	r0, r1, ip
   d87d0:	fa21 f102 	lsr.w	r1, r1, r2
   d87d4:	e00c      	b.n	d87f0 <__adddf3+0x184>
   d87d6:	f102 0214 	add.w	r2, r2, #20
   d87da:	bfd8      	it	le
   d87dc:	f1c2 0c20 	rsble	ip, r2, #32
   d87e0:	fa01 f102 	lsl.w	r1, r1, r2
   d87e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d87e8:	bfdc      	itt	le
   d87ea:	ea41 010c 	orrle.w	r1, r1, ip
   d87ee:	4090      	lslle	r0, r2
   d87f0:	1ae4      	subs	r4, r4, r3
   d87f2:	bfa2      	ittt	ge
   d87f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d87f8:	4329      	orrge	r1, r5
   d87fa:	bd30      	popge	{r4, r5, pc}
   d87fc:	ea6f 0404 	mvn.w	r4, r4
   d8800:	3c1f      	subs	r4, #31
   d8802:	da1c      	bge.n	d883e <__adddf3+0x1d2>
   d8804:	340c      	adds	r4, #12
   d8806:	dc0e      	bgt.n	d8826 <__adddf3+0x1ba>
   d8808:	f104 0414 	add.w	r4, r4, #20
   d880c:	f1c4 0220 	rsb	r2, r4, #32
   d8810:	fa20 f004 	lsr.w	r0, r0, r4
   d8814:	fa01 f302 	lsl.w	r3, r1, r2
   d8818:	ea40 0003 	orr.w	r0, r0, r3
   d881c:	fa21 f304 	lsr.w	r3, r1, r4
   d8820:	ea45 0103 	orr.w	r1, r5, r3
   d8824:	bd30      	pop	{r4, r5, pc}
   d8826:	f1c4 040c 	rsb	r4, r4, #12
   d882a:	f1c4 0220 	rsb	r2, r4, #32
   d882e:	fa20 f002 	lsr.w	r0, r0, r2
   d8832:	fa01 f304 	lsl.w	r3, r1, r4
   d8836:	ea40 0003 	orr.w	r0, r0, r3
   d883a:	4629      	mov	r1, r5
   d883c:	bd30      	pop	{r4, r5, pc}
   d883e:	fa21 f004 	lsr.w	r0, r1, r4
   d8842:	4629      	mov	r1, r5
   d8844:	bd30      	pop	{r4, r5, pc}
   d8846:	f094 0f00 	teq	r4, #0
   d884a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d884e:	bf06      	itte	eq
   d8850:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8854:	3401      	addeq	r4, #1
   d8856:	3d01      	subne	r5, #1
   d8858:	e74e      	b.n	d86f8 <__adddf3+0x8c>
   d885a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d885e:	bf18      	it	ne
   d8860:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8864:	d029      	beq.n	d88ba <__adddf3+0x24e>
   d8866:	ea94 0f05 	teq	r4, r5
   d886a:	bf08      	it	eq
   d886c:	ea90 0f02 	teqeq	r0, r2
   d8870:	d005      	beq.n	d887e <__adddf3+0x212>
   d8872:	ea54 0c00 	orrs.w	ip, r4, r0
   d8876:	bf04      	itt	eq
   d8878:	4619      	moveq	r1, r3
   d887a:	4610      	moveq	r0, r2
   d887c:	bd30      	pop	{r4, r5, pc}
   d887e:	ea91 0f03 	teq	r1, r3
   d8882:	bf1e      	ittt	ne
   d8884:	2100      	movne	r1, #0
   d8886:	2000      	movne	r0, #0
   d8888:	bd30      	popne	{r4, r5, pc}
   d888a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d888e:	d105      	bne.n	d889c <__adddf3+0x230>
   d8890:	0040      	lsls	r0, r0, #1
   d8892:	4149      	adcs	r1, r1
   d8894:	bf28      	it	cs
   d8896:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d889a:	bd30      	pop	{r4, r5, pc}
   d889c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d88a0:	bf3c      	itt	cc
   d88a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d88a6:	bd30      	popcc	{r4, r5, pc}
   d88a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d88b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d88b4:	f04f 0000 	mov.w	r0, #0
   d88b8:	bd30      	pop	{r4, r5, pc}
   d88ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88be:	bf1a      	itte	ne
   d88c0:	4619      	movne	r1, r3
   d88c2:	4610      	movne	r0, r2
   d88c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d88c8:	bf1c      	itt	ne
   d88ca:	460b      	movne	r3, r1
   d88cc:	4602      	movne	r2, r0
   d88ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d88d2:	bf06      	itte	eq
   d88d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d88d8:	ea91 0f03 	teqeq	r1, r3
   d88dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d88e0:	bd30      	pop	{r4, r5, pc}
   d88e2:	bf00      	nop

000d88e4 <__aeabi_ui2d>:
   d88e4:	f090 0f00 	teq	r0, #0
   d88e8:	bf04      	itt	eq
   d88ea:	2100      	moveq	r1, #0
   d88ec:	4770      	bxeq	lr
   d88ee:	b530      	push	{r4, r5, lr}
   d88f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d88f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d88f8:	f04f 0500 	mov.w	r5, #0
   d88fc:	f04f 0100 	mov.w	r1, #0
   d8900:	e750      	b.n	d87a4 <__adddf3+0x138>
   d8902:	bf00      	nop

000d8904 <__aeabi_i2d>:
   d8904:	f090 0f00 	teq	r0, #0
   d8908:	bf04      	itt	eq
   d890a:	2100      	moveq	r1, #0
   d890c:	4770      	bxeq	lr
   d890e:	b530      	push	{r4, r5, lr}
   d8910:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8914:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8918:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d891c:	bf48      	it	mi
   d891e:	4240      	negmi	r0, r0
   d8920:	f04f 0100 	mov.w	r1, #0
   d8924:	e73e      	b.n	d87a4 <__adddf3+0x138>
   d8926:	bf00      	nop

000d8928 <__aeabi_f2d>:
   d8928:	0042      	lsls	r2, r0, #1
   d892a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d892e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8932:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8936:	bf1f      	itttt	ne
   d8938:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d893c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8940:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8944:	4770      	bxne	lr
   d8946:	f092 0f00 	teq	r2, #0
   d894a:	bf14      	ite	ne
   d894c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8950:	4770      	bxeq	lr
   d8952:	b530      	push	{r4, r5, lr}
   d8954:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8958:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d895c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8960:	e720      	b.n	d87a4 <__adddf3+0x138>
   d8962:	bf00      	nop

000d8964 <__aeabi_ul2d>:
   d8964:	ea50 0201 	orrs.w	r2, r0, r1
   d8968:	bf08      	it	eq
   d896a:	4770      	bxeq	lr
   d896c:	b530      	push	{r4, r5, lr}
   d896e:	f04f 0500 	mov.w	r5, #0
   d8972:	e00a      	b.n	d898a <__aeabi_l2d+0x16>

000d8974 <__aeabi_l2d>:
   d8974:	ea50 0201 	orrs.w	r2, r0, r1
   d8978:	bf08      	it	eq
   d897a:	4770      	bxeq	lr
   d897c:	b530      	push	{r4, r5, lr}
   d897e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8982:	d502      	bpl.n	d898a <__aeabi_l2d+0x16>
   d8984:	4240      	negs	r0, r0
   d8986:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d898a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d898e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8992:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8996:	f43f aedc 	beq.w	d8752 <__adddf3+0xe6>
   d899a:	f04f 0203 	mov.w	r2, #3
   d899e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89a2:	bf18      	it	ne
   d89a4:	3203      	addne	r2, #3
   d89a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89aa:	bf18      	it	ne
   d89ac:	3203      	addne	r2, #3
   d89ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d89b2:	f1c2 0320 	rsb	r3, r2, #32
   d89b6:	fa00 fc03 	lsl.w	ip, r0, r3
   d89ba:	fa20 f002 	lsr.w	r0, r0, r2
   d89be:	fa01 fe03 	lsl.w	lr, r1, r3
   d89c2:	ea40 000e 	orr.w	r0, r0, lr
   d89c6:	fa21 f102 	lsr.w	r1, r1, r2
   d89ca:	4414      	add	r4, r2
   d89cc:	e6c1      	b.n	d8752 <__adddf3+0xe6>
   d89ce:	bf00      	nop

000d89d0 <__aeabi_dmul>:
   d89d0:	b570      	push	{r4, r5, r6, lr}
   d89d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d89d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d89da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d89de:	bf1d      	ittte	ne
   d89e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d89e4:	ea94 0f0c 	teqne	r4, ip
   d89e8:	ea95 0f0c 	teqne	r5, ip
   d89ec:	f000 f8de 	bleq	d8bac <__aeabi_dmul+0x1dc>
   d89f0:	442c      	add	r4, r5
   d89f2:	ea81 0603 	eor.w	r6, r1, r3
   d89f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d89fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d89fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a02:	bf18      	it	ne
   d8a04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a10:	d038      	beq.n	d8a84 <__aeabi_dmul+0xb4>
   d8a12:	fba0 ce02 	umull	ip, lr, r0, r2
   d8a16:	f04f 0500 	mov.w	r5, #0
   d8a1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8a1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8a22:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8a26:	f04f 0600 	mov.w	r6, #0
   d8a2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8a2e:	f09c 0f00 	teq	ip, #0
   d8a32:	bf18      	it	ne
   d8a34:	f04e 0e01 	orrne.w	lr, lr, #1
   d8a38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8a3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8a40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8a44:	d204      	bcs.n	d8a50 <__aeabi_dmul+0x80>
   d8a46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8a4a:	416d      	adcs	r5, r5
   d8a4c:	eb46 0606 	adc.w	r6, r6, r6
   d8a50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8a54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8a58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8a5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8a60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8a64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a68:	bf88      	it	hi
   d8a6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a6e:	d81e      	bhi.n	d8aae <__aeabi_dmul+0xde>
   d8a70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8a74:	bf08      	it	eq
   d8a76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8a7a:	f150 0000 	adcs.w	r0, r0, #0
   d8a7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a82:	bd70      	pop	{r4, r5, r6, pc}
   d8a84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8a88:	ea46 0101 	orr.w	r1, r6, r1
   d8a8c:	ea40 0002 	orr.w	r0, r0, r2
   d8a90:	ea81 0103 	eor.w	r1, r1, r3
   d8a94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8a98:	bfc2      	ittt	gt
   d8a9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8a9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8aa2:	bd70      	popgt	{r4, r5, r6, pc}
   d8aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8aa8:	f04f 0e00 	mov.w	lr, #0
   d8aac:	3c01      	subs	r4, #1
   d8aae:	f300 80ab 	bgt.w	d8c08 <__aeabi_dmul+0x238>
   d8ab2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8ab6:	bfde      	ittt	le
   d8ab8:	2000      	movle	r0, #0
   d8aba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8abe:	bd70      	pople	{r4, r5, r6, pc}
   d8ac0:	f1c4 0400 	rsb	r4, r4, #0
   d8ac4:	3c20      	subs	r4, #32
   d8ac6:	da35      	bge.n	d8b34 <__aeabi_dmul+0x164>
   d8ac8:	340c      	adds	r4, #12
   d8aca:	dc1b      	bgt.n	d8b04 <__aeabi_dmul+0x134>
   d8acc:	f104 0414 	add.w	r4, r4, #20
   d8ad0:	f1c4 0520 	rsb	r5, r4, #32
   d8ad4:	fa00 f305 	lsl.w	r3, r0, r5
   d8ad8:	fa20 f004 	lsr.w	r0, r0, r4
   d8adc:	fa01 f205 	lsl.w	r2, r1, r5
   d8ae0:	ea40 0002 	orr.w	r0, r0, r2
   d8ae4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8ae8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8aec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8af0:	fa21 f604 	lsr.w	r6, r1, r4
   d8af4:	eb42 0106 	adc.w	r1, r2, r6
   d8af8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8afc:	bf08      	it	eq
   d8afe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b02:	bd70      	pop	{r4, r5, r6, pc}
   d8b04:	f1c4 040c 	rsb	r4, r4, #12
   d8b08:	f1c4 0520 	rsb	r5, r4, #32
   d8b0c:	fa00 f304 	lsl.w	r3, r0, r4
   d8b10:	fa20 f005 	lsr.w	r0, r0, r5
   d8b14:	fa01 f204 	lsl.w	r2, r1, r4
   d8b18:	ea40 0002 	orr.w	r0, r0, r2
   d8b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b24:	f141 0100 	adc.w	r1, r1, #0
   d8b28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b2c:	bf08      	it	eq
   d8b2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b32:	bd70      	pop	{r4, r5, r6, pc}
   d8b34:	f1c4 0520 	rsb	r5, r4, #32
   d8b38:	fa00 f205 	lsl.w	r2, r0, r5
   d8b3c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8b40:	fa20 f304 	lsr.w	r3, r0, r4
   d8b44:	fa01 f205 	lsl.w	r2, r1, r5
   d8b48:	ea43 0302 	orr.w	r3, r3, r2
   d8b4c:	fa21 f004 	lsr.w	r0, r1, r4
   d8b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b54:	fa21 f204 	lsr.w	r2, r1, r4
   d8b58:	ea20 0002 	bic.w	r0, r0, r2
   d8b5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8b60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b64:	bf08      	it	eq
   d8b66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b6a:	bd70      	pop	{r4, r5, r6, pc}
   d8b6c:	f094 0f00 	teq	r4, #0
   d8b70:	d10f      	bne.n	d8b92 <__aeabi_dmul+0x1c2>
   d8b72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8b76:	0040      	lsls	r0, r0, #1
   d8b78:	eb41 0101 	adc.w	r1, r1, r1
   d8b7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b80:	bf08      	it	eq
   d8b82:	3c01      	subeq	r4, #1
   d8b84:	d0f7      	beq.n	d8b76 <__aeabi_dmul+0x1a6>
   d8b86:	ea41 0106 	orr.w	r1, r1, r6
   d8b8a:	f095 0f00 	teq	r5, #0
   d8b8e:	bf18      	it	ne
   d8b90:	4770      	bxne	lr
   d8b92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8b96:	0052      	lsls	r2, r2, #1
   d8b98:	eb43 0303 	adc.w	r3, r3, r3
   d8b9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8ba0:	bf08      	it	eq
   d8ba2:	3d01      	subeq	r5, #1
   d8ba4:	d0f7      	beq.n	d8b96 <__aeabi_dmul+0x1c6>
   d8ba6:	ea43 0306 	orr.w	r3, r3, r6
   d8baa:	4770      	bx	lr
   d8bac:	ea94 0f0c 	teq	r4, ip
   d8bb0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8bb4:	bf18      	it	ne
   d8bb6:	ea95 0f0c 	teqne	r5, ip
   d8bba:	d00c      	beq.n	d8bd6 <__aeabi_dmul+0x206>
   d8bbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8bc0:	bf18      	it	ne
   d8bc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8bc6:	d1d1      	bne.n	d8b6c <__aeabi_dmul+0x19c>
   d8bc8:	ea81 0103 	eor.w	r1, r1, r3
   d8bcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bd0:	f04f 0000 	mov.w	r0, #0
   d8bd4:	bd70      	pop	{r4, r5, r6, pc}
   d8bd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8bda:	bf06      	itte	eq
   d8bdc:	4610      	moveq	r0, r2
   d8bde:	4619      	moveq	r1, r3
   d8be0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8be4:	d019      	beq.n	d8c1a <__aeabi_dmul+0x24a>
   d8be6:	ea94 0f0c 	teq	r4, ip
   d8bea:	d102      	bne.n	d8bf2 <__aeabi_dmul+0x222>
   d8bec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8bf0:	d113      	bne.n	d8c1a <__aeabi_dmul+0x24a>
   d8bf2:	ea95 0f0c 	teq	r5, ip
   d8bf6:	d105      	bne.n	d8c04 <__aeabi_dmul+0x234>
   d8bf8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8bfc:	bf1c      	itt	ne
   d8bfe:	4610      	movne	r0, r2
   d8c00:	4619      	movne	r1, r3
   d8c02:	d10a      	bne.n	d8c1a <__aeabi_dmul+0x24a>
   d8c04:	ea81 0103 	eor.w	r1, r1, r3
   d8c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c14:	f04f 0000 	mov.w	r0, #0
   d8c18:	bd70      	pop	{r4, r5, r6, pc}
   d8c1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8c22:	bd70      	pop	{r4, r5, r6, pc}

000d8c24 <__aeabi_ddiv>:
   d8c24:	b570      	push	{r4, r5, r6, lr}
   d8c26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c32:	bf1d      	ittte	ne
   d8c34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c38:	ea94 0f0c 	teqne	r4, ip
   d8c3c:	ea95 0f0c 	teqne	r5, ip
   d8c40:	f000 f8a7 	bleq	d8d92 <__aeabi_ddiv+0x16e>
   d8c44:	eba4 0405 	sub.w	r4, r4, r5
   d8c48:	ea81 0e03 	eor.w	lr, r1, r3
   d8c4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8c50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8c54:	f000 8088 	beq.w	d8d68 <__aeabi_ddiv+0x144>
   d8c58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8c5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8c60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8c64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8c68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8c6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8c70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8c74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8c78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8c7c:	429d      	cmp	r5, r3
   d8c7e:	bf08      	it	eq
   d8c80:	4296      	cmpeq	r6, r2
   d8c82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8c86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8c8a:	d202      	bcs.n	d8c92 <__aeabi_ddiv+0x6e>
   d8c8c:	085b      	lsrs	r3, r3, #1
   d8c8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c92:	1ab6      	subs	r6, r6, r2
   d8c94:	eb65 0503 	sbc.w	r5, r5, r3
   d8c98:	085b      	lsrs	r3, r3, #1
   d8c9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8ca2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8ca6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8caa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cae:	bf22      	ittt	cs
   d8cb0:	1ab6      	subcs	r6, r6, r2
   d8cb2:	4675      	movcs	r5, lr
   d8cb4:	ea40 000c 	orrcs.w	r0, r0, ip
   d8cb8:	085b      	lsrs	r3, r3, #1
   d8cba:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cc6:	bf22      	ittt	cs
   d8cc8:	1ab6      	subcs	r6, r6, r2
   d8cca:	4675      	movcs	r5, lr
   d8ccc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8cd0:	085b      	lsrs	r3, r3, #1
   d8cd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cde:	bf22      	ittt	cs
   d8ce0:	1ab6      	subcs	r6, r6, r2
   d8ce2:	4675      	movcs	r5, lr
   d8ce4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8ce8:	085b      	lsrs	r3, r3, #1
   d8cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cee:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cf6:	bf22      	ittt	cs
   d8cf8:	1ab6      	subcs	r6, r6, r2
   d8cfa:	4675      	movcs	r5, lr
   d8cfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d00:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d04:	d018      	beq.n	d8d38 <__aeabi_ddiv+0x114>
   d8d06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8d16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8d1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8d1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8d22:	d1c0      	bne.n	d8ca6 <__aeabi_ddiv+0x82>
   d8d24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d28:	d10b      	bne.n	d8d42 <__aeabi_ddiv+0x11e>
   d8d2a:	ea41 0100 	orr.w	r1, r1, r0
   d8d2e:	f04f 0000 	mov.w	r0, #0
   d8d32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8d36:	e7b6      	b.n	d8ca6 <__aeabi_ddiv+0x82>
   d8d38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d3c:	bf04      	itt	eq
   d8d3e:	4301      	orreq	r1, r0
   d8d40:	2000      	moveq	r0, #0
   d8d42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d46:	bf88      	it	hi
   d8d48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d4c:	f63f aeaf 	bhi.w	d8aae <__aeabi_dmul+0xde>
   d8d50:	ebb5 0c03 	subs.w	ip, r5, r3
   d8d54:	bf04      	itt	eq
   d8d56:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8d5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8d5e:	f150 0000 	adcs.w	r0, r0, #0
   d8d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d66:	bd70      	pop	{r4, r5, r6, pc}
   d8d68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8d6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8d70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8d74:	bfc2      	ittt	gt
   d8d76:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d7e:	bd70      	popgt	{r4, r5, r6, pc}
   d8d80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d84:	f04f 0e00 	mov.w	lr, #0
   d8d88:	3c01      	subs	r4, #1
   d8d8a:	e690      	b.n	d8aae <__aeabi_dmul+0xde>
   d8d8c:	ea45 0e06 	orr.w	lr, r5, r6
   d8d90:	e68d      	b.n	d8aae <__aeabi_dmul+0xde>
   d8d92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d96:	ea94 0f0c 	teq	r4, ip
   d8d9a:	bf08      	it	eq
   d8d9c:	ea95 0f0c 	teqeq	r5, ip
   d8da0:	f43f af3b 	beq.w	d8c1a <__aeabi_dmul+0x24a>
   d8da4:	ea94 0f0c 	teq	r4, ip
   d8da8:	d10a      	bne.n	d8dc0 <__aeabi_ddiv+0x19c>
   d8daa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8dae:	f47f af34 	bne.w	d8c1a <__aeabi_dmul+0x24a>
   d8db2:	ea95 0f0c 	teq	r5, ip
   d8db6:	f47f af25 	bne.w	d8c04 <__aeabi_dmul+0x234>
   d8dba:	4610      	mov	r0, r2
   d8dbc:	4619      	mov	r1, r3
   d8dbe:	e72c      	b.n	d8c1a <__aeabi_dmul+0x24a>
   d8dc0:	ea95 0f0c 	teq	r5, ip
   d8dc4:	d106      	bne.n	d8dd4 <__aeabi_ddiv+0x1b0>
   d8dc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8dca:	f43f aefd 	beq.w	d8bc8 <__aeabi_dmul+0x1f8>
   d8dce:	4610      	mov	r0, r2
   d8dd0:	4619      	mov	r1, r3
   d8dd2:	e722      	b.n	d8c1a <__aeabi_dmul+0x24a>
   d8dd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8dd8:	bf18      	it	ne
   d8dda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8dde:	f47f aec5 	bne.w	d8b6c <__aeabi_dmul+0x19c>
   d8de2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8de6:	f47f af0d 	bne.w	d8c04 <__aeabi_dmul+0x234>
   d8dea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8dee:	f47f aeeb 	bne.w	d8bc8 <__aeabi_dmul+0x1f8>
   d8df2:	e712      	b.n	d8c1a <__aeabi_dmul+0x24a>

000d8df4 <__gedf2>:
   d8df4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8df8:	e006      	b.n	d8e08 <__cmpdf2+0x4>
   d8dfa:	bf00      	nop

000d8dfc <__ledf2>:
   d8dfc:	f04f 0c01 	mov.w	ip, #1
   d8e00:	e002      	b.n	d8e08 <__cmpdf2+0x4>
   d8e02:	bf00      	nop

000d8e04 <__cmpdf2>:
   d8e04:	f04f 0c01 	mov.w	ip, #1
   d8e08:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e18:	bf18      	it	ne
   d8e1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8e1e:	d01b      	beq.n	d8e58 <__cmpdf2+0x54>
   d8e20:	b001      	add	sp, #4
   d8e22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8e26:	bf0c      	ite	eq
   d8e28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8e2c:	ea91 0f03 	teqne	r1, r3
   d8e30:	bf02      	ittt	eq
   d8e32:	ea90 0f02 	teqeq	r0, r2
   d8e36:	2000      	moveq	r0, #0
   d8e38:	4770      	bxeq	lr
   d8e3a:	f110 0f00 	cmn.w	r0, #0
   d8e3e:	ea91 0f03 	teq	r1, r3
   d8e42:	bf58      	it	pl
   d8e44:	4299      	cmppl	r1, r3
   d8e46:	bf08      	it	eq
   d8e48:	4290      	cmpeq	r0, r2
   d8e4a:	bf2c      	ite	cs
   d8e4c:	17d8      	asrcs	r0, r3, #31
   d8e4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8e52:	f040 0001 	orr.w	r0, r0, #1
   d8e56:	4770      	bx	lr
   d8e58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e60:	d102      	bne.n	d8e68 <__cmpdf2+0x64>
   d8e62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8e66:	d107      	bne.n	d8e78 <__cmpdf2+0x74>
   d8e68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e70:	d1d6      	bne.n	d8e20 <__cmpdf2+0x1c>
   d8e72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8e76:	d0d3      	beq.n	d8e20 <__cmpdf2+0x1c>
   d8e78:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8e7c:	4770      	bx	lr
   d8e7e:	bf00      	nop

000d8e80 <__aeabi_cdrcmple>:
   d8e80:	4684      	mov	ip, r0
   d8e82:	4610      	mov	r0, r2
   d8e84:	4662      	mov	r2, ip
   d8e86:	468c      	mov	ip, r1
   d8e88:	4619      	mov	r1, r3
   d8e8a:	4663      	mov	r3, ip
   d8e8c:	e000      	b.n	d8e90 <__aeabi_cdcmpeq>
   d8e8e:	bf00      	nop

000d8e90 <__aeabi_cdcmpeq>:
   d8e90:	b501      	push	{r0, lr}
   d8e92:	f7ff ffb7 	bl	d8e04 <__cmpdf2>
   d8e96:	2800      	cmp	r0, #0
   d8e98:	bf48      	it	mi
   d8e9a:	f110 0f00 	cmnmi.w	r0, #0
   d8e9e:	bd01      	pop	{r0, pc}

000d8ea0 <__aeabi_dcmpeq>:
   d8ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ea4:	f7ff fff4 	bl	d8e90 <__aeabi_cdcmpeq>
   d8ea8:	bf0c      	ite	eq
   d8eaa:	2001      	moveq	r0, #1
   d8eac:	2000      	movne	r0, #0
   d8eae:	f85d fb08 	ldr.w	pc, [sp], #8
   d8eb2:	bf00      	nop

000d8eb4 <__aeabi_dcmplt>:
   d8eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8eb8:	f7ff ffea 	bl	d8e90 <__aeabi_cdcmpeq>
   d8ebc:	bf34      	ite	cc
   d8ebe:	2001      	movcc	r0, #1
   d8ec0:	2000      	movcs	r0, #0
   d8ec2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ec6:	bf00      	nop

000d8ec8 <__aeabi_dcmple>:
   d8ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ecc:	f7ff ffe0 	bl	d8e90 <__aeabi_cdcmpeq>
   d8ed0:	bf94      	ite	ls
   d8ed2:	2001      	movls	r0, #1
   d8ed4:	2000      	movhi	r0, #0
   d8ed6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8eda:	bf00      	nop

000d8edc <__aeabi_dcmpge>:
   d8edc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ee0:	f7ff ffce 	bl	d8e80 <__aeabi_cdrcmple>
   d8ee4:	bf94      	ite	ls
   d8ee6:	2001      	movls	r0, #1
   d8ee8:	2000      	movhi	r0, #0
   d8eea:	f85d fb08 	ldr.w	pc, [sp], #8
   d8eee:	bf00      	nop

000d8ef0 <__aeabi_dcmpgt>:
   d8ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ef4:	f7ff ffc4 	bl	d8e80 <__aeabi_cdrcmple>
   d8ef8:	bf34      	ite	cc
   d8efa:	2001      	movcc	r0, #1
   d8efc:	2000      	movcs	r0, #0
   d8efe:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f02:	bf00      	nop

000d8f04 <__aeabi_dcmpun>:
   d8f04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f0c:	d102      	bne.n	d8f14 <__aeabi_dcmpun+0x10>
   d8f0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f12:	d10a      	bne.n	d8f2a <__aeabi_dcmpun+0x26>
   d8f14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f1c:	d102      	bne.n	d8f24 <__aeabi_dcmpun+0x20>
   d8f1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f22:	d102      	bne.n	d8f2a <__aeabi_dcmpun+0x26>
   d8f24:	f04f 0000 	mov.w	r0, #0
   d8f28:	4770      	bx	lr
   d8f2a:	f04f 0001 	mov.w	r0, #1
   d8f2e:	4770      	bx	lr

000d8f30 <__aeabi_d2iz>:
   d8f30:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8f38:	d215      	bcs.n	d8f66 <__aeabi_d2iz+0x36>
   d8f3a:	d511      	bpl.n	d8f60 <__aeabi_d2iz+0x30>
   d8f3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8f40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8f44:	d912      	bls.n	d8f6c <__aeabi_d2iz+0x3c>
   d8f46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8f4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8f52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8f56:	fa23 f002 	lsr.w	r0, r3, r2
   d8f5a:	bf18      	it	ne
   d8f5c:	4240      	negne	r0, r0
   d8f5e:	4770      	bx	lr
   d8f60:	f04f 0000 	mov.w	r0, #0
   d8f64:	4770      	bx	lr
   d8f66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8f6a:	d105      	bne.n	d8f78 <__aeabi_d2iz+0x48>
   d8f6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8f70:	bf08      	it	eq
   d8f72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8f76:	4770      	bx	lr
   d8f78:	f04f 0000 	mov.w	r0, #0
   d8f7c:	4770      	bx	lr
   d8f7e:	bf00      	nop

000d8f80 <__aeabi_d2uiz>:
   d8f80:	004a      	lsls	r2, r1, #1
   d8f82:	d211      	bcs.n	d8fa8 <__aeabi_d2uiz+0x28>
   d8f84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8f88:	d211      	bcs.n	d8fae <__aeabi_d2uiz+0x2e>
   d8f8a:	d50d      	bpl.n	d8fa8 <__aeabi_d2uiz+0x28>
   d8f8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8f90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8f94:	d40e      	bmi.n	d8fb4 <__aeabi_d2uiz+0x34>
   d8f96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8f9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8fa2:	fa23 f002 	lsr.w	r0, r3, r2
   d8fa6:	4770      	bx	lr
   d8fa8:	f04f 0000 	mov.w	r0, #0
   d8fac:	4770      	bx	lr
   d8fae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8fb2:	d102      	bne.n	d8fba <__aeabi_d2uiz+0x3a>
   d8fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8fb8:	4770      	bx	lr
   d8fba:	f04f 0000 	mov.w	r0, #0
   d8fbe:	4770      	bx	lr

000d8fc0 <__aeabi_d2f>:
   d8fc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8fc8:	bf24      	itt	cs
   d8fca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8fce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8fd2:	d90d      	bls.n	d8ff0 <__aeabi_d2f+0x30>
   d8fd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8fd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8fdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8fe0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8fe4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8fe8:	bf08      	it	eq
   d8fea:	f020 0001 	biceq.w	r0, r0, #1
   d8fee:	4770      	bx	lr
   d8ff0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8ff4:	d121      	bne.n	d903a <__aeabi_d2f+0x7a>
   d8ff6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8ffa:	bfbc      	itt	lt
   d8ffc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9000:	4770      	bxlt	lr
   d9002:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9006:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d900a:	f1c2 0218 	rsb	r2, r2, #24
   d900e:	f1c2 0c20 	rsb	ip, r2, #32
   d9012:	fa10 f30c 	lsls.w	r3, r0, ip
   d9016:	fa20 f002 	lsr.w	r0, r0, r2
   d901a:	bf18      	it	ne
   d901c:	f040 0001 	orrne.w	r0, r0, #1
   d9020:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9024:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9028:	fa03 fc0c 	lsl.w	ip, r3, ip
   d902c:	ea40 000c 	orr.w	r0, r0, ip
   d9030:	fa23 f302 	lsr.w	r3, r3, r2
   d9034:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9038:	e7cc      	b.n	d8fd4 <__aeabi_d2f+0x14>
   d903a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d903e:	d107      	bne.n	d9050 <__aeabi_d2f+0x90>
   d9040:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9044:	bf1e      	ittt	ne
   d9046:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d904a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d904e:	4770      	bxne	lr
   d9050:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9054:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9058:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d905c:	4770      	bx	lr
   d905e:	bf00      	nop

000d9060 <asctime>:
   d9060:	4b09      	ldr	r3, [pc, #36]	; (d9088 <asctime+0x28>)
   d9062:	b570      	push	{r4, r5, r6, lr}
   d9064:	681c      	ldr	r4, [r3, #0]
   d9066:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d9068:	4606      	mov	r6, r0
   d906a:	b93d      	cbnz	r5, d907c <asctime+0x1c>
   d906c:	201a      	movs	r0, #26
   d906e:	f7fd fbcb 	bl	d6808 <malloc>
   d9072:	221a      	movs	r2, #26
   d9074:	6420      	str	r0, [r4, #64]	; 0x40
   d9076:	4629      	mov	r1, r5
   d9078:	f000 f947 	bl	d930a <memset>
   d907c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d907e:	4630      	mov	r0, r6
   d9080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9084:	f000 b802 	b.w	d908c <asctime_r>
   d9088:	2003e128 	.word	0x2003e128

000d908c <asctime_r>:
   d908c:	b510      	push	{r4, lr}
   d908e:	460c      	mov	r4, r1
   d9090:	6941      	ldr	r1, [r0, #20]
   d9092:	6903      	ldr	r3, [r0, #16]
   d9094:	6982      	ldr	r2, [r0, #24]
   d9096:	b086      	sub	sp, #24
   d9098:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d909c:	9104      	str	r1, [sp, #16]
   d909e:	6801      	ldr	r1, [r0, #0]
   d90a0:	9103      	str	r1, [sp, #12]
   d90a2:	6841      	ldr	r1, [r0, #4]
   d90a4:	9102      	str	r1, [sp, #8]
   d90a6:	6881      	ldr	r1, [r0, #8]
   d90a8:	9101      	str	r1, [sp, #4]
   d90aa:	68c1      	ldr	r1, [r0, #12]
   d90ac:	9100      	str	r1, [sp, #0]
   d90ae:	4907      	ldr	r1, [pc, #28]	; (d90cc <asctime_r+0x40>)
   d90b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d90b4:	440b      	add	r3, r1
   d90b6:	4906      	ldr	r1, [pc, #24]	; (d90d0 <asctime_r+0x44>)
   d90b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d90bc:	440a      	add	r2, r1
   d90be:	4620      	mov	r0, r4
   d90c0:	4904      	ldr	r1, [pc, #16]	; (d90d4 <asctime_r+0x48>)
   d90c2:	f7fd fbb9 	bl	d6838 <siprintf>
   d90c6:	4620      	mov	r0, r4
   d90c8:	b006      	add	sp, #24
   d90ca:	bd10      	pop	{r4, pc}
   d90cc:	000dc1ba 	.word	0x000dc1ba
   d90d0:	000dc1a5 	.word	0x000dc1a5
   d90d4:	000dc1de 	.word	0x000dc1de

000d90d8 <atoi>:
   d90d8:	220a      	movs	r2, #10
   d90da:	2100      	movs	r1, #0
   d90dc:	f001 b866 	b.w	da1ac <strtol>

000d90e0 <__cxa_atexit>:
   d90e0:	b510      	push	{r4, lr}
   d90e2:	4c05      	ldr	r4, [pc, #20]	; (d90f8 <__cxa_atexit+0x18>)
   d90e4:	4613      	mov	r3, r2
   d90e6:	b12c      	cbz	r4, d90f4 <__cxa_atexit+0x14>
   d90e8:	460a      	mov	r2, r1
   d90ea:	4601      	mov	r1, r0
   d90ec:	2002      	movs	r0, #2
   d90ee:	f3af 8000 	nop.w
   d90f2:	bd10      	pop	{r4, pc}
   d90f4:	4620      	mov	r0, r4
   d90f6:	bd10      	pop	{r4, pc}
   d90f8:	00000000 	.word	0x00000000

000d90fc <localtime>:
   d90fc:	b538      	push	{r3, r4, r5, lr}
   d90fe:	4b07      	ldr	r3, [pc, #28]	; (d911c <localtime+0x20>)
   d9100:	681c      	ldr	r4, [r3, #0]
   d9102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9104:	4605      	mov	r5, r0
   d9106:	b91b      	cbnz	r3, d9110 <localtime+0x14>
   d9108:	2024      	movs	r0, #36	; 0x24
   d910a:	f7fd fb7d 	bl	d6808 <malloc>
   d910e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9112:	4628      	mov	r0, r5
   d9114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9118:	f000 b802 	b.w	d9120 <localtime_r>
   d911c:	2003e128 	.word	0x2003e128

000d9120 <localtime_r>:
   d9120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9124:	460c      	mov	r4, r1
   d9126:	4680      	mov	r8, r0
   d9128:	f001 fe64 	bl	dadf4 <__gettzinfo>
   d912c:	4621      	mov	r1, r4
   d912e:	4607      	mov	r7, r0
   d9130:	4640      	mov	r0, r8
   d9132:	f001 fe63 	bl	dadfc <gmtime_r>
   d9136:	6946      	ldr	r6, [r0, #20]
   d9138:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d913c:	07b3      	lsls	r3, r6, #30
   d913e:	4604      	mov	r4, r0
   d9140:	d105      	bne.n	d914e <localtime_r+0x2e>
   d9142:	2264      	movs	r2, #100	; 0x64
   d9144:	fb96 f3f2 	sdiv	r3, r6, r2
   d9148:	fb02 6313 	mls	r3, r2, r3, r6
   d914c:	b94b      	cbnz	r3, d9162 <localtime_r+0x42>
   d914e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9152:	fb96 f3f5 	sdiv	r3, r6, r5
   d9156:	fb05 6513 	mls	r5, r5, r3, r6
   d915a:	fab5 f385 	clz	r3, r5
   d915e:	095b      	lsrs	r3, r3, #5
   d9160:	e000      	b.n	d9164 <localtime_r+0x44>
   d9162:	2301      	movs	r3, #1
   d9164:	4a5f      	ldr	r2, [pc, #380]	; (d92e4 <localtime_r+0x1c4>)
   d9166:	2530      	movs	r5, #48	; 0x30
   d9168:	fb05 2503 	mla	r5, r5, r3, r2
   d916c:	f001 f958 	bl	da420 <__tz_lock>
   d9170:	f001 f958 	bl	da424 <_tzset_unlocked>
   d9174:	4b5c      	ldr	r3, [pc, #368]	; (d92e8 <localtime_r+0x1c8>)
   d9176:	681b      	ldr	r3, [r3, #0]
   d9178:	b1f3      	cbz	r3, d91b8 <localtime_r+0x98>
   d917a:	687b      	ldr	r3, [r7, #4]
   d917c:	429e      	cmp	r6, r3
   d917e:	d105      	bne.n	d918c <localtime_r+0x6c>
   d9180:	6839      	ldr	r1, [r7, #0]
   d9182:	f8d8 3000 	ldr.w	r3, [r8]
   d9186:	69fa      	ldr	r2, [r7, #28]
   d9188:	b941      	cbnz	r1, d919c <localtime_r+0x7c>
   d918a:	e00a      	b.n	d91a2 <localtime_r+0x82>
   d918c:	4630      	mov	r0, r6
   d918e:	f001 f89f 	bl	da2d0 <__tzcalc_limits>
   d9192:	2800      	cmp	r0, #0
   d9194:	d1f4      	bne.n	d9180 <localtime_r+0x60>
   d9196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d919a:	e00d      	b.n	d91b8 <localtime_r+0x98>
   d919c:	4293      	cmp	r3, r2
   d919e:	db08      	blt.n	d91b2 <localtime_r+0x92>
   d91a0:	e001      	b.n	d91a6 <localtime_r+0x86>
   d91a2:	4293      	cmp	r3, r2
   d91a4:	da07      	bge.n	d91b6 <localtime_r+0x96>
   d91a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d91a8:	4293      	cmp	r3, r2
   d91aa:	bfac      	ite	ge
   d91ac:	2300      	movge	r3, #0
   d91ae:	2301      	movlt	r3, #1
   d91b0:	e002      	b.n	d91b8 <localtime_r+0x98>
   d91b2:	2300      	movs	r3, #0
   d91b4:	e000      	b.n	d91b8 <localtime_r+0x98>
   d91b6:	2301      	movs	r3, #1
   d91b8:	6223      	str	r3, [r4, #32]
   d91ba:	6a23      	ldr	r3, [r4, #32]
   d91bc:	2b01      	cmp	r3, #1
   d91be:	bf0c      	ite	eq
   d91c0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d91c2:	6a39      	ldrne	r1, [r7, #32]
   d91c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d91c8:	203c      	movs	r0, #60	; 0x3c
   d91ca:	fb91 f6f3 	sdiv	r6, r1, r3
   d91ce:	fb03 1316 	mls	r3, r3, r6, r1
   d91d2:	6861      	ldr	r1, [r4, #4]
   d91d4:	fb93 f2f0 	sdiv	r2, r3, r0
   d91d8:	fb00 3012 	mls	r0, r0, r2, r3
   d91dc:	6823      	ldr	r3, [r4, #0]
   d91de:	1a89      	subs	r1, r1, r2
   d91e0:	68a2      	ldr	r2, [r4, #8]
   d91e2:	6061      	str	r1, [r4, #4]
   d91e4:	1a1b      	subs	r3, r3, r0
   d91e6:	1b92      	subs	r2, r2, r6
   d91e8:	2b3b      	cmp	r3, #59	; 0x3b
   d91ea:	6023      	str	r3, [r4, #0]
   d91ec:	60a2      	str	r2, [r4, #8]
   d91ee:	dd03      	ble.n	d91f8 <localtime_r+0xd8>
   d91f0:	3101      	adds	r1, #1
   d91f2:	6061      	str	r1, [r4, #4]
   d91f4:	3b3c      	subs	r3, #60	; 0x3c
   d91f6:	e004      	b.n	d9202 <localtime_r+0xe2>
   d91f8:	2b00      	cmp	r3, #0
   d91fa:	da03      	bge.n	d9204 <localtime_r+0xe4>
   d91fc:	3901      	subs	r1, #1
   d91fe:	6061      	str	r1, [r4, #4]
   d9200:	333c      	adds	r3, #60	; 0x3c
   d9202:	6023      	str	r3, [r4, #0]
   d9204:	6863      	ldr	r3, [r4, #4]
   d9206:	2b3b      	cmp	r3, #59	; 0x3b
   d9208:	dd03      	ble.n	d9212 <localtime_r+0xf2>
   d920a:	3201      	adds	r2, #1
   d920c:	60a2      	str	r2, [r4, #8]
   d920e:	3b3c      	subs	r3, #60	; 0x3c
   d9210:	e004      	b.n	d921c <localtime_r+0xfc>
   d9212:	2b00      	cmp	r3, #0
   d9214:	da03      	bge.n	d921e <localtime_r+0xfe>
   d9216:	3a01      	subs	r2, #1
   d9218:	60a2      	str	r2, [r4, #8]
   d921a:	333c      	adds	r3, #60	; 0x3c
   d921c:	6063      	str	r3, [r4, #4]
   d921e:	68a3      	ldr	r3, [r4, #8]
   d9220:	2b17      	cmp	r3, #23
   d9222:	dd22      	ble.n	d926a <localtime_r+0x14a>
   d9224:	69e2      	ldr	r2, [r4, #28]
   d9226:	3201      	adds	r2, #1
   d9228:	61e2      	str	r2, [r4, #28]
   d922a:	69a2      	ldr	r2, [r4, #24]
   d922c:	3201      	adds	r2, #1
   d922e:	2a06      	cmp	r2, #6
   d9230:	bfc8      	it	gt
   d9232:	2200      	movgt	r2, #0
   d9234:	61a2      	str	r2, [r4, #24]
   d9236:	68e2      	ldr	r2, [r4, #12]
   d9238:	3b18      	subs	r3, #24
   d923a:	3201      	adds	r2, #1
   d923c:	60a3      	str	r3, [r4, #8]
   d923e:	6923      	ldr	r3, [r4, #16]
   d9240:	60e2      	str	r2, [r4, #12]
   d9242:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d9246:	428a      	cmp	r2, r1
   d9248:	dd46      	ble.n	d92d8 <localtime_r+0x1b8>
   d924a:	3301      	adds	r3, #1
   d924c:	2b0c      	cmp	r3, #12
   d924e:	bf0c      	ite	eq
   d9250:	6963      	ldreq	r3, [r4, #20]
   d9252:	6123      	strne	r3, [r4, #16]
   d9254:	eba2 0201 	sub.w	r2, r2, r1
   d9258:	60e2      	str	r2, [r4, #12]
   d925a:	bf01      	itttt	eq
   d925c:	3301      	addeq	r3, #1
   d925e:	2200      	moveq	r2, #0
   d9260:	6122      	streq	r2, [r4, #16]
   d9262:	6163      	streq	r3, [r4, #20]
   d9264:	bf08      	it	eq
   d9266:	61e2      	streq	r2, [r4, #28]
   d9268:	e036      	b.n	d92d8 <localtime_r+0x1b8>
   d926a:	2b00      	cmp	r3, #0
   d926c:	da34      	bge.n	d92d8 <localtime_r+0x1b8>
   d926e:	69e2      	ldr	r2, [r4, #28]
   d9270:	3a01      	subs	r2, #1
   d9272:	61e2      	str	r2, [r4, #28]
   d9274:	69a2      	ldr	r2, [r4, #24]
   d9276:	3a01      	subs	r2, #1
   d9278:	bf48      	it	mi
   d927a:	2206      	movmi	r2, #6
   d927c:	61a2      	str	r2, [r4, #24]
   d927e:	68e2      	ldr	r2, [r4, #12]
   d9280:	3318      	adds	r3, #24
   d9282:	3a01      	subs	r2, #1
   d9284:	60e2      	str	r2, [r4, #12]
   d9286:	60a3      	str	r3, [r4, #8]
   d9288:	bb32      	cbnz	r2, d92d8 <localtime_r+0x1b8>
   d928a:	6923      	ldr	r3, [r4, #16]
   d928c:	3b01      	subs	r3, #1
   d928e:	d401      	bmi.n	d9294 <localtime_r+0x174>
   d9290:	6123      	str	r3, [r4, #16]
   d9292:	e01d      	b.n	d92d0 <localtime_r+0x1b0>
   d9294:	230b      	movs	r3, #11
   d9296:	6123      	str	r3, [r4, #16]
   d9298:	6963      	ldr	r3, [r4, #20]
   d929a:	1e5a      	subs	r2, r3, #1
   d929c:	f012 0f03 	tst.w	r2, #3
   d92a0:	6162      	str	r2, [r4, #20]
   d92a2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d92a6:	d105      	bne.n	d92b4 <localtime_r+0x194>
   d92a8:	2164      	movs	r1, #100	; 0x64
   d92aa:	fb93 f2f1 	sdiv	r2, r3, r1
   d92ae:	fb01 3212 	mls	r2, r1, r2, r3
   d92b2:	b94a      	cbnz	r2, d92c8 <localtime_r+0x1a8>
   d92b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d92b8:	fb93 f2f1 	sdiv	r2, r3, r1
   d92bc:	fb01 3312 	mls	r3, r1, r2, r3
   d92c0:	fab3 f383 	clz	r3, r3
   d92c4:	095b      	lsrs	r3, r3, #5
   d92c6:	e000      	b.n	d92ca <localtime_r+0x1aa>
   d92c8:	2301      	movs	r3, #1
   d92ca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d92ce:	61e3      	str	r3, [r4, #28]
   d92d0:	6923      	ldr	r3, [r4, #16]
   d92d2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d92d6:	60e3      	str	r3, [r4, #12]
   d92d8:	f001 f8a3 	bl	da422 <__tz_unlock>
   d92dc:	4620      	mov	r0, r4
   d92de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d92e2:	bf00      	nop
   d92e4:	000dc368 	.word	0x000dc368
   d92e8:	2003e7e4 	.word	0x2003e7e4

000d92ec <_localeconv_r>:
   d92ec:	4800      	ldr	r0, [pc, #0]	; (d92f0 <_localeconv_r+0x4>)
   d92ee:	4770      	bx	lr
   d92f0:	2003e12c 	.word	0x2003e12c

000d92f4 <memcpy>:
   d92f4:	b510      	push	{r4, lr}
   d92f6:	1e43      	subs	r3, r0, #1
   d92f8:	440a      	add	r2, r1
   d92fa:	4291      	cmp	r1, r2
   d92fc:	d004      	beq.n	d9308 <memcpy+0x14>
   d92fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9302:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9306:	e7f8      	b.n	d92fa <memcpy+0x6>
   d9308:	bd10      	pop	{r4, pc}

000d930a <memset>:
   d930a:	4402      	add	r2, r0
   d930c:	4603      	mov	r3, r0
   d930e:	4293      	cmp	r3, r2
   d9310:	d002      	beq.n	d9318 <memset+0xe>
   d9312:	f803 1b01 	strb.w	r1, [r3], #1
   d9316:	e7fa      	b.n	d930e <memset+0x4>
   d9318:	4770      	bx	lr
	...

000d931c <srand>:
   d931c:	b538      	push	{r3, r4, r5, lr}
   d931e:	4b12      	ldr	r3, [pc, #72]	; (d9368 <srand+0x4c>)
   d9320:	681c      	ldr	r4, [r3, #0]
   d9322:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9324:	4605      	mov	r5, r0
   d9326:	b9d3      	cbnz	r3, d935e <srand+0x42>
   d9328:	2018      	movs	r0, #24
   d932a:	f7fd fa6d 	bl	d6808 <malloc>
   d932e:	f243 330e 	movw	r3, #13070	; 0x330e
   d9332:	63a0      	str	r0, [r4, #56]	; 0x38
   d9334:	8003      	strh	r3, [r0, #0]
   d9336:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d933a:	8043      	strh	r3, [r0, #2]
   d933c:	f241 2334 	movw	r3, #4660	; 0x1234
   d9340:	8083      	strh	r3, [r0, #4]
   d9342:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9346:	80c3      	strh	r3, [r0, #6]
   d9348:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d934c:	8103      	strh	r3, [r0, #8]
   d934e:	2305      	movs	r3, #5
   d9350:	8143      	strh	r3, [r0, #10]
   d9352:	230b      	movs	r3, #11
   d9354:	8183      	strh	r3, [r0, #12]
   d9356:	2201      	movs	r2, #1
   d9358:	2300      	movs	r3, #0
   d935a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d935e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9360:	2200      	movs	r2, #0
   d9362:	611d      	str	r5, [r3, #16]
   d9364:	615a      	str	r2, [r3, #20]
   d9366:	bd38      	pop	{r3, r4, r5, pc}
   d9368:	2003e128 	.word	0x2003e128

000d936c <strcmp>:
   d936c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9370:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9374:	2a01      	cmp	r2, #1
   d9376:	bf28      	it	cs
   d9378:	429a      	cmpcs	r2, r3
   d937a:	d0f7      	beq.n	d936c <strcmp>
   d937c:	1ad0      	subs	r0, r2, r3
   d937e:	4770      	bx	lr

000d9380 <strcpy>:
   d9380:	4603      	mov	r3, r0
   d9382:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9386:	f803 2b01 	strb.w	r2, [r3], #1
   d938a:	2a00      	cmp	r2, #0
   d938c:	d1f9      	bne.n	d9382 <strcpy+0x2>
   d938e:	4770      	bx	lr

000d9390 <strdup>:
   d9390:	4b02      	ldr	r3, [pc, #8]	; (d939c <strdup+0xc>)
   d9392:	4601      	mov	r1, r0
   d9394:	6818      	ldr	r0, [r3, #0]
   d9396:	f000 b803 	b.w	d93a0 <_strdup_r>
   d939a:	bf00      	nop
   d939c:	2003e128 	.word	0x2003e128

000d93a0 <_strdup_r>:
   d93a0:	b570      	push	{r4, r5, r6, lr}
   d93a2:	4606      	mov	r6, r0
   d93a4:	4608      	mov	r0, r1
   d93a6:	460c      	mov	r4, r1
   d93a8:	f000 f80d 	bl	d93c6 <strlen>
   d93ac:	1c45      	adds	r5, r0, #1
   d93ae:	4629      	mov	r1, r5
   d93b0:	4630      	mov	r0, r6
   d93b2:	f7fd fa61 	bl	d6878 <_malloc_r>
   d93b6:	4606      	mov	r6, r0
   d93b8:	b118      	cbz	r0, d93c2 <_strdup_r+0x22>
   d93ba:	462a      	mov	r2, r5
   d93bc:	4621      	mov	r1, r4
   d93be:	f7ff ff99 	bl	d92f4 <memcpy>
   d93c2:	4630      	mov	r0, r6
   d93c4:	bd70      	pop	{r4, r5, r6, pc}

000d93c6 <strlen>:
   d93c6:	4603      	mov	r3, r0
   d93c8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d93cc:	2a00      	cmp	r2, #0
   d93ce:	d1fb      	bne.n	d93c8 <strlen+0x2>
   d93d0:	1a18      	subs	r0, r3, r0
   d93d2:	3801      	subs	r0, #1
   d93d4:	4770      	bx	lr

000d93d6 <strncmp>:
   d93d6:	b530      	push	{r4, r5, lr}
   d93d8:	b182      	cbz	r2, d93fc <strncmp+0x26>
   d93da:	1e45      	subs	r5, r0, #1
   d93dc:	3901      	subs	r1, #1
   d93de:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d93e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d93e6:	42a3      	cmp	r3, r4
   d93e8:	d106      	bne.n	d93f8 <strncmp+0x22>
   d93ea:	43ec      	mvns	r4, r5
   d93ec:	4414      	add	r4, r2
   d93ee:	42e0      	cmn	r0, r4
   d93f0:	d001      	beq.n	d93f6 <strncmp+0x20>
   d93f2:	2b00      	cmp	r3, #0
   d93f4:	d1f3      	bne.n	d93de <strncmp+0x8>
   d93f6:	461c      	mov	r4, r3
   d93f8:	1b18      	subs	r0, r3, r4
   d93fa:	bd30      	pop	{r4, r5, pc}
   d93fc:	4610      	mov	r0, r2
   d93fe:	bd30      	pop	{r4, r5, pc}

000d9400 <strncpy>:
   d9400:	b510      	push	{r4, lr}
   d9402:	4603      	mov	r3, r0
   d9404:	b142      	cbz	r2, d9418 <strncpy+0x18>
   d9406:	f811 4b01 	ldrb.w	r4, [r1], #1
   d940a:	f803 4b01 	strb.w	r4, [r3], #1
   d940e:	3a01      	subs	r2, #1
   d9410:	2c00      	cmp	r4, #0
   d9412:	d1f7      	bne.n	d9404 <strncpy+0x4>
   d9414:	441a      	add	r2, r3
   d9416:	e000      	b.n	d941a <strncpy+0x1a>
   d9418:	bd10      	pop	{r4, pc}
   d941a:	4293      	cmp	r3, r2
   d941c:	d002      	beq.n	d9424 <strncpy+0x24>
   d941e:	f803 4b01 	strb.w	r4, [r3], #1
   d9422:	e7fa      	b.n	d941a <strncpy+0x1a>
   d9424:	bd10      	pop	{r4, pc}

000d9426 <sulp>:
   d9426:	b570      	push	{r4, r5, r6, lr}
   d9428:	4604      	mov	r4, r0
   d942a:	460d      	mov	r5, r1
   d942c:	ec45 4b10 	vmov	d0, r4, r5
   d9430:	4616      	mov	r6, r2
   d9432:	f002 f841 	bl	db4b8 <__ulp>
   d9436:	ec51 0b10 	vmov	r0, r1, d0
   d943a:	b17e      	cbz	r6, d945c <sulp+0x36>
   d943c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9440:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9444:	2b00      	cmp	r3, #0
   d9446:	dd09      	ble.n	d945c <sulp+0x36>
   d9448:	051b      	lsls	r3, r3, #20
   d944a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d944e:	2400      	movs	r4, #0
   d9450:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9454:	4622      	mov	r2, r4
   d9456:	462b      	mov	r3, r5
   d9458:	f7ff faba 	bl	d89d0 <__aeabi_dmul>
   d945c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9460 <_strtod_r>:
   d9460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9464:	b09d      	sub	sp, #116	; 0x74
   d9466:	2300      	movs	r3, #0
   d9468:	9002      	str	r0, [sp, #8]
   d946a:	460c      	mov	r4, r1
   d946c:	9213      	str	r2, [sp, #76]	; 0x4c
   d946e:	9318      	str	r3, [sp, #96]	; 0x60
   d9470:	f04f 0a00 	mov.w	sl, #0
   d9474:	f04f 0b00 	mov.w	fp, #0
   d9478:	9117      	str	r1, [sp, #92]	; 0x5c
   d947a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d947c:	781a      	ldrb	r2, [r3, #0]
   d947e:	2a0d      	cmp	r2, #13
   d9480:	d805      	bhi.n	d948e <_strtod_r+0x2e>
   d9482:	2a09      	cmp	r2, #9
   d9484:	d213      	bcs.n	d94ae <_strtod_r+0x4e>
   d9486:	2a00      	cmp	r2, #0
   d9488:	f000 81ac 	beq.w	d97e4 <_strtod_r+0x384>
   d948c:	e012      	b.n	d94b4 <_strtod_r+0x54>
   d948e:	2a2b      	cmp	r2, #43	; 0x2b
   d9490:	d004      	beq.n	d949c <_strtod_r+0x3c>
   d9492:	2a2d      	cmp	r2, #45	; 0x2d
   d9494:	d004      	beq.n	d94a0 <_strtod_r+0x40>
   d9496:	2a20      	cmp	r2, #32
   d9498:	d10c      	bne.n	d94b4 <_strtod_r+0x54>
   d949a:	e008      	b.n	d94ae <_strtod_r+0x4e>
   d949c:	2200      	movs	r2, #0
   d949e:	e000      	b.n	d94a2 <_strtod_r+0x42>
   d94a0:	2201      	movs	r2, #1
   d94a2:	920c      	str	r2, [sp, #48]	; 0x30
   d94a4:	1c5a      	adds	r2, r3, #1
   d94a6:	9217      	str	r2, [sp, #92]	; 0x5c
   d94a8:	785b      	ldrb	r3, [r3, #1]
   d94aa:	b92b      	cbnz	r3, d94b8 <_strtod_r+0x58>
   d94ac:	e19a      	b.n	d97e4 <_strtod_r+0x384>
   d94ae:	3301      	adds	r3, #1
   d94b0:	9317      	str	r3, [sp, #92]	; 0x5c
   d94b2:	e7e2      	b.n	d947a <_strtod_r+0x1a>
   d94b4:	2300      	movs	r3, #0
   d94b6:	930c      	str	r3, [sp, #48]	; 0x30
   d94b8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d94ba:	782b      	ldrb	r3, [r5, #0]
   d94bc:	2b30      	cmp	r3, #48	; 0x30
   d94be:	d15c      	bne.n	d957a <_strtod_r+0x11a>
   d94c0:	786b      	ldrb	r3, [r5, #1]
   d94c2:	2b58      	cmp	r3, #88	; 0x58
   d94c4:	d001      	beq.n	d94ca <_strtod_r+0x6a>
   d94c6:	2b78      	cmp	r3, #120	; 0x78
   d94c8:	d14c      	bne.n	d9564 <_strtod_r+0x104>
   d94ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d94cc:	9301      	str	r3, [sp, #4]
   d94ce:	ab18      	add	r3, sp, #96	; 0x60
   d94d0:	9300      	str	r3, [sp, #0]
   d94d2:	4aa9      	ldr	r2, [pc, #676]	; (d9778 <_strtod_r+0x318>)
   d94d4:	9802      	ldr	r0, [sp, #8]
   d94d6:	ab19      	add	r3, sp, #100	; 0x64
   d94d8:	a917      	add	r1, sp, #92	; 0x5c
   d94da:	f001 f974 	bl	da7c6 <__gethex>
   d94de:	f010 0607 	ands.w	r6, r0, #7
   d94e2:	4604      	mov	r4, r0
   d94e4:	f000 8587 	beq.w	d9ff6 <_strtod_r+0xb96>
   d94e8:	2e06      	cmp	r6, #6
   d94ea:	d105      	bne.n	d94f8 <_strtod_r+0x98>
   d94ec:	3501      	adds	r5, #1
   d94ee:	2300      	movs	r3, #0
   d94f0:	9517      	str	r5, [sp, #92]	; 0x5c
   d94f2:	930c      	str	r3, [sp, #48]	; 0x30
   d94f4:	f000 bd7f 	b.w	d9ff6 <_strtod_r+0xb96>
   d94f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d94fa:	b13a      	cbz	r2, d950c <_strtod_r+0xac>
   d94fc:	2135      	movs	r1, #53	; 0x35
   d94fe:	a81a      	add	r0, sp, #104	; 0x68
   d9500:	f002 f8c7 	bl	db692 <__copybits>
   d9504:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9506:	9802      	ldr	r0, [sp, #8]
   d9508:	f001 fd45 	bl	daf96 <_Bfree>
   d950c:	2e06      	cmp	r6, #6
   d950e:	d822      	bhi.n	d9556 <_strtod_r+0xf6>
   d9510:	e8df f006 	tbb	[pc, r6]
   d9514:	18080d04 	.word	0x18080d04
   d9518:	0d1d      	.short	0x0d1d
   d951a:	04          	.byte	0x04
   d951b:	00          	.byte	0x00
   d951c:	f04f 0b00 	mov.w	fp, #0
   d9520:	46da      	mov	sl, fp
   d9522:	e018      	b.n	d9556 <_strtod_r+0xf6>
   d9524:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9528:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d952c:	e013      	b.n	d9556 <_strtod_r+0xf6>
   d952e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9530:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9532:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9536:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d953a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d953e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9542:	e008      	b.n	d9556 <_strtod_r+0xf6>
   d9544:	f8df b234 	ldr.w	fp, [pc, #564]	; d977c <_strtod_r+0x31c>
   d9548:	f04f 0a00 	mov.w	sl, #0
   d954c:	e003      	b.n	d9556 <_strtod_r+0xf6>
   d954e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9552:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9556:	0721      	lsls	r1, r4, #28
   d9558:	f140 854d 	bpl.w	d9ff6 <_strtod_r+0xb96>
   d955c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9560:	f000 bd49 	b.w	d9ff6 <_strtod_r+0xb96>
   d9564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9566:	1c5a      	adds	r2, r3, #1
   d9568:	9217      	str	r2, [sp, #92]	; 0x5c
   d956a:	785b      	ldrb	r3, [r3, #1]
   d956c:	2b30      	cmp	r3, #48	; 0x30
   d956e:	d0f9      	beq.n	d9564 <_strtod_r+0x104>
   d9570:	2b00      	cmp	r3, #0
   d9572:	f000 8540 	beq.w	d9ff6 <_strtod_r+0xb96>
   d9576:	2301      	movs	r3, #1
   d9578:	e000      	b.n	d957c <_strtod_r+0x11c>
   d957a:	2300      	movs	r3, #0
   d957c:	f04f 0800 	mov.w	r8, #0
   d9580:	9306      	str	r3, [sp, #24]
   d9582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9584:	9307      	str	r3, [sp, #28]
   d9586:	f8cd 8014 	str.w	r8, [sp, #20]
   d958a:	f8cd 8010 	str.w	r8, [sp, #16]
   d958e:	220a      	movs	r2, #10
   d9590:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9592:	782e      	ldrb	r6, [r5, #0]
   d9594:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9598:	b2d9      	uxtb	r1, r3
   d959a:	2909      	cmp	r1, #9
   d959c:	d80e      	bhi.n	d95bc <_strtod_r+0x15c>
   d959e:	9904      	ldr	r1, [sp, #16]
   d95a0:	2908      	cmp	r1, #8
   d95a2:	bfdd      	ittte	le
   d95a4:	9905      	ldrle	r1, [sp, #20]
   d95a6:	fb02 3301 	mlale	r3, r2, r1, r3
   d95aa:	9305      	strle	r3, [sp, #20]
   d95ac:	fb02 3808 	mlagt	r8, r2, r8, r3
   d95b0:	9b04      	ldr	r3, [sp, #16]
   d95b2:	3501      	adds	r5, #1
   d95b4:	3301      	adds	r3, #1
   d95b6:	9304      	str	r3, [sp, #16]
   d95b8:	9517      	str	r5, [sp, #92]	; 0x5c
   d95ba:	e7e9      	b.n	d9590 <_strtod_r+0x130>
   d95bc:	9802      	ldr	r0, [sp, #8]
   d95be:	f7ff fe95 	bl	d92ec <_localeconv_r>
   d95c2:	6807      	ldr	r7, [r0, #0]
   d95c4:	9802      	ldr	r0, [sp, #8]
   d95c6:	f7ff fe91 	bl	d92ec <_localeconv_r>
   d95ca:	6800      	ldr	r0, [r0, #0]
   d95cc:	f7ff fefb 	bl	d93c6 <strlen>
   d95d0:	4639      	mov	r1, r7
   d95d2:	4602      	mov	r2, r0
   d95d4:	4628      	mov	r0, r5
   d95d6:	f7ff fefe 	bl	d93d6 <strncmp>
   d95da:	4607      	mov	r7, r0
   d95dc:	b128      	cbz	r0, d95ea <_strtod_r+0x18a>
   d95de:	2000      	movs	r0, #0
   d95e0:	4633      	mov	r3, r6
   d95e2:	9d04      	ldr	r5, [sp, #16]
   d95e4:	4602      	mov	r2, r0
   d95e6:	4601      	mov	r1, r0
   d95e8:	e057      	b.n	d969a <_strtod_r+0x23a>
   d95ea:	9802      	ldr	r0, [sp, #8]
   d95ec:	f7ff fe7e 	bl	d92ec <_localeconv_r>
   d95f0:	6800      	ldr	r0, [r0, #0]
   d95f2:	f7ff fee8 	bl	d93c6 <strlen>
   d95f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d95f8:	181a      	adds	r2, r3, r0
   d95fa:	9217      	str	r2, [sp, #92]	; 0x5c
   d95fc:	9a04      	ldr	r2, [sp, #16]
   d95fe:	5c1b      	ldrb	r3, [r3, r0]
   d9600:	2a00      	cmp	r2, #0
   d9602:	d142      	bne.n	d968a <_strtod_r+0x22a>
   d9604:	4610      	mov	r0, r2
   d9606:	2b30      	cmp	r3, #48	; 0x30
   d9608:	d105      	bne.n	d9616 <_strtod_r+0x1b6>
   d960a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d960c:	1c5a      	adds	r2, r3, #1
   d960e:	9217      	str	r2, [sp, #92]	; 0x5c
   d9610:	3001      	adds	r0, #1
   d9612:	785b      	ldrb	r3, [r3, #1]
   d9614:	e7f7      	b.n	d9606 <_strtod_r+0x1a6>
   d9616:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d961a:	2a08      	cmp	r2, #8
   d961c:	d843      	bhi.n	d96a6 <_strtod_r+0x246>
   d961e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d9620:	9207      	str	r2, [sp, #28]
   d9622:	4602      	mov	r2, r0
   d9624:	2000      	movs	r0, #0
   d9626:	4605      	mov	r5, r0
   d9628:	3b30      	subs	r3, #48	; 0x30
   d962a:	f100 0101 	add.w	r1, r0, #1
   d962e:	d026      	beq.n	d967e <_strtod_r+0x21e>
   d9630:	440a      	add	r2, r1
   d9632:	eb05 0c00 	add.w	ip, r5, r0
   d9636:	4629      	mov	r1, r5
   d9638:	260a      	movs	r6, #10
   d963a:	4561      	cmp	r1, ip
   d963c:	d00e      	beq.n	d965c <_strtod_r+0x1fc>
   d963e:	3101      	adds	r1, #1
   d9640:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d9644:	f1be 0f08 	cmp.w	lr, #8
   d9648:	dc03      	bgt.n	d9652 <_strtod_r+0x1f2>
   d964a:	9f05      	ldr	r7, [sp, #20]
   d964c:	4377      	muls	r7, r6
   d964e:	9705      	str	r7, [sp, #20]
   d9650:	e7f3      	b.n	d963a <_strtod_r+0x1da>
   d9652:	2910      	cmp	r1, #16
   d9654:	bfd8      	it	le
   d9656:	fb06 f808 	mulle.w	r8, r6, r8
   d965a:	e7ee      	b.n	d963a <_strtod_r+0x1da>
   d965c:	4428      	add	r0, r5
   d965e:	2808      	cmp	r0, #8
   d9660:	f100 0501 	add.w	r5, r0, #1
   d9664:	dc05      	bgt.n	d9672 <_strtod_r+0x212>
   d9666:	9805      	ldr	r0, [sp, #20]
   d9668:	210a      	movs	r1, #10
   d966a:	fb01 3300 	mla	r3, r1, r0, r3
   d966e:	9305      	str	r3, [sp, #20]
   d9670:	e004      	b.n	d967c <_strtod_r+0x21c>
   d9672:	2d10      	cmp	r5, #16
   d9674:	bfdc      	itt	le
   d9676:	210a      	movle	r1, #10
   d9678:	fb01 3808 	mlale	r8, r1, r8, r3
   d967c:	2100      	movs	r1, #0
   d967e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9680:	1c58      	adds	r0, r3, #1
   d9682:	9017      	str	r0, [sp, #92]	; 0x5c
   d9684:	785b      	ldrb	r3, [r3, #1]
   d9686:	4608      	mov	r0, r1
   d9688:	e002      	b.n	d9690 <_strtod_r+0x230>
   d968a:	9d04      	ldr	r5, [sp, #16]
   d968c:	4638      	mov	r0, r7
   d968e:	463a      	mov	r2, r7
   d9690:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9694:	2909      	cmp	r1, #9
   d9696:	d9c7      	bls.n	d9628 <_strtod_r+0x1c8>
   d9698:	2101      	movs	r1, #1
   d969a:	2b65      	cmp	r3, #101	; 0x65
   d969c:	d001      	beq.n	d96a2 <_strtod_r+0x242>
   d969e:	2b45      	cmp	r3, #69	; 0x45
   d96a0:	d151      	bne.n	d9746 <_strtod_r+0x2e6>
   d96a2:	b96d      	cbnz	r5, d96c0 <_strtod_r+0x260>
   d96a4:	e004      	b.n	d96b0 <_strtod_r+0x250>
   d96a6:	2b65      	cmp	r3, #101	; 0x65
   d96a8:	f040 84b3 	bne.w	da012 <_strtod_r+0xbb2>
   d96ac:	2200      	movs	r2, #0
   d96ae:	2101      	movs	r1, #1
   d96b0:	b928      	cbnz	r0, d96be <_strtod_r+0x25e>
   d96b2:	9b06      	ldr	r3, [sp, #24]
   d96b4:	2b00      	cmp	r3, #0
   d96b6:	f000 8095 	beq.w	d97e4 <_strtod_r+0x384>
   d96ba:	4605      	mov	r5, r0
   d96bc:	e000      	b.n	d96c0 <_strtod_r+0x260>
   d96be:	2500      	movs	r5, #0
   d96c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d96c2:	1c63      	adds	r3, r4, #1
   d96c4:	9317      	str	r3, [sp, #92]	; 0x5c
   d96c6:	7863      	ldrb	r3, [r4, #1]
   d96c8:	2b2b      	cmp	r3, #43	; 0x2b
   d96ca:	d006      	beq.n	d96da <_strtod_r+0x27a>
   d96cc:	2b2d      	cmp	r3, #45	; 0x2d
   d96ce:	d002      	beq.n	d96d6 <_strtod_r+0x276>
   d96d0:	2600      	movs	r6, #0
   d96d2:	9603      	str	r6, [sp, #12]
   d96d4:	e006      	b.n	d96e4 <_strtod_r+0x284>
   d96d6:	2301      	movs	r3, #1
   d96d8:	e000      	b.n	d96dc <_strtod_r+0x27c>
   d96da:	2300      	movs	r3, #0
   d96dc:	9303      	str	r3, [sp, #12]
   d96de:	1ca3      	adds	r3, r4, #2
   d96e0:	9317      	str	r3, [sp, #92]	; 0x5c
   d96e2:	78a3      	ldrb	r3, [r4, #2]
   d96e4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d96e8:	2e09      	cmp	r6, #9
   d96ea:	d82b      	bhi.n	d9744 <_strtod_r+0x2e4>
   d96ec:	2b30      	cmp	r3, #48	; 0x30
   d96ee:	d104      	bne.n	d96fa <_strtod_r+0x29a>
   d96f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d96f2:	1c5e      	adds	r6, r3, #1
   d96f4:	9617      	str	r6, [sp, #92]	; 0x5c
   d96f6:	785b      	ldrb	r3, [r3, #1]
   d96f8:	e7f8      	b.n	d96ec <_strtod_r+0x28c>
   d96fa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d96fe:	2e08      	cmp	r6, #8
   d9700:	d821      	bhi.n	d9746 <_strtod_r+0x2e6>
   d9702:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9706:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9708:	f04f 0c0a 	mov.w	ip, #10
   d970c:	461f      	mov	r7, r3
   d970e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9710:	1c5e      	adds	r6, r3, #1
   d9712:	9617      	str	r6, [sp, #92]	; 0x5c
   d9714:	785b      	ldrb	r3, [r3, #1]
   d9716:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d971a:	f1b9 0f09 	cmp.w	r9, #9
   d971e:	d804      	bhi.n	d972a <_strtod_r+0x2ca>
   d9720:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d9724:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9728:	e7f1      	b.n	d970e <_strtod_r+0x2ae>
   d972a:	1bf6      	subs	r6, r6, r7
   d972c:	2e08      	cmp	r6, #8
   d972e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d9732:	dc02      	bgt.n	d973a <_strtod_r+0x2da>
   d9734:	45f1      	cmp	r9, lr
   d9736:	bfa8      	it	ge
   d9738:	46f1      	movge	r9, lr
   d973a:	9e03      	ldr	r6, [sp, #12]
   d973c:	b12e      	cbz	r6, d974a <_strtod_r+0x2ea>
   d973e:	f1c9 0900 	rsb	r9, r9, #0
   d9742:	e002      	b.n	d974a <_strtod_r+0x2ea>
   d9744:	9417      	str	r4, [sp, #92]	; 0x5c
   d9746:	f04f 0900 	mov.w	r9, #0
   d974a:	2d00      	cmp	r5, #0
   d974c:	d153      	bne.n	d97f6 <_strtod_r+0x396>
   d974e:	2800      	cmp	r0, #0
   d9750:	f040 8451 	bne.w	d9ff6 <_strtod_r+0xb96>
   d9754:	9a06      	ldr	r2, [sp, #24]
   d9756:	2a00      	cmp	r2, #0
   d9758:	f040 844d 	bne.w	d9ff6 <_strtod_r+0xb96>
   d975c:	2900      	cmp	r1, #0
   d975e:	d141      	bne.n	d97e4 <_strtod_r+0x384>
   d9760:	2b4e      	cmp	r3, #78	; 0x4e
   d9762:	d020      	beq.n	d97a6 <_strtod_r+0x346>
   d9764:	dc02      	bgt.n	d976c <_strtod_r+0x30c>
   d9766:	2b49      	cmp	r3, #73	; 0x49
   d9768:	d00a      	beq.n	d9780 <_strtod_r+0x320>
   d976a:	e03b      	b.n	d97e4 <_strtod_r+0x384>
   d976c:	2b69      	cmp	r3, #105	; 0x69
   d976e:	d007      	beq.n	d9780 <_strtod_r+0x320>
   d9770:	2b6e      	cmp	r3, #110	; 0x6e
   d9772:	d018      	beq.n	d97a6 <_strtod_r+0x346>
   d9774:	e036      	b.n	d97e4 <_strtod_r+0x384>
   d9776:	bf00      	nop
   d9778:	000dc3c8 	.word	0x000dc3c8
   d977c:	7ff00000 	.word	0x7ff00000
   d9780:	49a8      	ldr	r1, [pc, #672]	; (d9a24 <_strtod_r+0x5c4>)
   d9782:	a817      	add	r0, sp, #92	; 0x5c
   d9784:	f001 fa50 	bl	dac28 <__match>
   d9788:	b360      	cbz	r0, d97e4 <_strtod_r+0x384>
   d978a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d978c:	49a6      	ldr	r1, [pc, #664]	; (d9a28 <_strtod_r+0x5c8>)
   d978e:	3b01      	subs	r3, #1
   d9790:	a817      	add	r0, sp, #92	; 0x5c
   d9792:	9317      	str	r3, [sp, #92]	; 0x5c
   d9794:	f001 fa48 	bl	dac28 <__match>
   d9798:	b910      	cbnz	r0, d97a0 <_strtod_r+0x340>
   d979a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d979c:	3301      	adds	r3, #1
   d979e:	9317      	str	r3, [sp, #92]	; 0x5c
   d97a0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d9a44 <_strtod_r+0x5e4>
   d97a4:	e01a      	b.n	d97dc <_strtod_r+0x37c>
   d97a6:	49a1      	ldr	r1, [pc, #644]	; (d9a2c <_strtod_r+0x5cc>)
   d97a8:	a817      	add	r0, sp, #92	; 0x5c
   d97aa:	f001 fa3d 	bl	dac28 <__match>
   d97ae:	b1c8      	cbz	r0, d97e4 <_strtod_r+0x384>
   d97b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d97b2:	781b      	ldrb	r3, [r3, #0]
   d97b4:	2b28      	cmp	r3, #40	; 0x28
   d97b6:	d10f      	bne.n	d97d8 <_strtod_r+0x378>
   d97b8:	aa1a      	add	r2, sp, #104	; 0x68
   d97ba:	499d      	ldr	r1, [pc, #628]	; (d9a30 <_strtod_r+0x5d0>)
   d97bc:	a817      	add	r0, sp, #92	; 0x5c
   d97be:	f001 fa46 	bl	dac4e <__hexnan>
   d97c2:	2805      	cmp	r0, #5
   d97c4:	d108      	bne.n	d97d8 <_strtod_r+0x378>
   d97c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d97c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d97cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d97d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d97d4:	f000 bc0f 	b.w	d9ff6 <_strtod_r+0xb96>
   d97d8:	f8df b26c 	ldr.w	fp, [pc, #620]	; d9a48 <_strtod_r+0x5e8>
   d97dc:	f04f 0a00 	mov.w	sl, #0
   d97e0:	f000 bc09 	b.w	d9ff6 <_strtod_r+0xb96>
   d97e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d97e6:	9417      	str	r4, [sp, #92]	; 0x5c
   d97e8:	2b00      	cmp	r3, #0
   d97ea:	f000 840f 	beq.w	da00c <_strtod_r+0xbac>
   d97ee:	2300      	movs	r3, #0
   d97f0:	930c      	str	r3, [sp, #48]	; 0x30
   d97f2:	f000 bc02 	b.w	d9ffa <_strtod_r+0xb9a>
   d97f6:	9b04      	ldr	r3, [sp, #16]
   d97f8:	9805      	ldr	r0, [sp, #20]
   d97fa:	2b00      	cmp	r3, #0
   d97fc:	bf08      	it	eq
   d97fe:	462b      	moveq	r3, r5
   d9800:	2d10      	cmp	r5, #16
   d9802:	462c      	mov	r4, r5
   d9804:	ebc2 0909 	rsb	r9, r2, r9
   d9808:	bfa8      	it	ge
   d980a:	2410      	movge	r4, #16
   d980c:	9304      	str	r3, [sp, #16]
   d980e:	f7ff f869 	bl	d88e4 <__aeabi_ui2d>
   d9812:	2c09      	cmp	r4, #9
   d9814:	4682      	mov	sl, r0
   d9816:	468b      	mov	fp, r1
   d9818:	dd13      	ble.n	d9842 <_strtod_r+0x3e2>
   d981a:	4b86      	ldr	r3, [pc, #536]	; (d9a34 <_strtod_r+0x5d4>)
   d981c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d9820:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9824:	f7ff f8d4 	bl	d89d0 <__aeabi_dmul>
   d9828:	4606      	mov	r6, r0
   d982a:	4640      	mov	r0, r8
   d982c:	460f      	mov	r7, r1
   d982e:	f7ff f859 	bl	d88e4 <__aeabi_ui2d>
   d9832:	4602      	mov	r2, r0
   d9834:	460b      	mov	r3, r1
   d9836:	4630      	mov	r0, r6
   d9838:	4639      	mov	r1, r7
   d983a:	f7fe ff17 	bl	d866c <__adddf3>
   d983e:	4682      	mov	sl, r0
   d9840:	468b      	mov	fp, r1
   d9842:	2d0f      	cmp	r5, #15
   d9844:	dc36      	bgt.n	d98b4 <_strtod_r+0x454>
   d9846:	f1b9 0f00 	cmp.w	r9, #0
   d984a:	f000 83d4 	beq.w	d9ff6 <_strtod_r+0xb96>
   d984e:	dd24      	ble.n	d989a <_strtod_r+0x43a>
   d9850:	f1b9 0f16 	cmp.w	r9, #22
   d9854:	dc07      	bgt.n	d9866 <_strtod_r+0x406>
   d9856:	4d77      	ldr	r5, [pc, #476]	; (d9a34 <_strtod_r+0x5d4>)
   d9858:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d985c:	4652      	mov	r2, sl
   d985e:	465b      	mov	r3, fp
   d9860:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9864:	e014      	b.n	d9890 <_strtod_r+0x430>
   d9866:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d986a:	4599      	cmp	r9, r3
   d986c:	dc22      	bgt.n	d98b4 <_strtod_r+0x454>
   d986e:	4c71      	ldr	r4, [pc, #452]	; (d9a34 <_strtod_r+0x5d4>)
   d9870:	f1c5 050f 	rsb	r5, r5, #15
   d9874:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9878:	ebc5 0509 	rsb	r5, r5, r9
   d987c:	4652      	mov	r2, sl
   d987e:	465b      	mov	r3, fp
   d9880:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9884:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9888:	f7ff f8a2 	bl	d89d0 <__aeabi_dmul>
   d988c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9890:	f7ff f89e 	bl	d89d0 <__aeabi_dmul>
   d9894:	4682      	mov	sl, r0
   d9896:	468b      	mov	fp, r1
   d9898:	e3ad      	b.n	d9ff6 <_strtod_r+0xb96>
   d989a:	f119 0f16 	cmn.w	r9, #22
   d989e:	db09      	blt.n	d98b4 <_strtod_r+0x454>
   d98a0:	4d64      	ldr	r5, [pc, #400]	; (d9a34 <_strtod_r+0x5d4>)
   d98a2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d98a6:	e9d9 2300 	ldrd	r2, r3, [r9]
   d98aa:	4650      	mov	r0, sl
   d98ac:	4659      	mov	r1, fp
   d98ae:	f7ff f9b9 	bl	d8c24 <__aeabi_ddiv>
   d98b2:	e7ef      	b.n	d9894 <_strtod_r+0x434>
   d98b4:	1b2c      	subs	r4, r5, r4
   d98b6:	444c      	add	r4, r9
   d98b8:	2c00      	cmp	r4, #0
   d98ba:	dd57      	ble.n	d996c <_strtod_r+0x50c>
   d98bc:	f014 010f 	ands.w	r1, r4, #15
   d98c0:	d00a      	beq.n	d98d8 <_strtod_r+0x478>
   d98c2:	4b5c      	ldr	r3, [pc, #368]	; (d9a34 <_strtod_r+0x5d4>)
   d98c4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d98c8:	4652      	mov	r2, sl
   d98ca:	465b      	mov	r3, fp
   d98cc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d98d0:	f7ff f87e 	bl	d89d0 <__aeabi_dmul>
   d98d4:	4682      	mov	sl, r0
   d98d6:	468b      	mov	fp, r1
   d98d8:	f034 040f 	bics.w	r4, r4, #15
   d98dc:	f000 80b8 	beq.w	d9a50 <_strtod_r+0x5f0>
   d98e0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d98e4:	dd0b      	ble.n	d98fe <_strtod_r+0x49e>
   d98e6:	2400      	movs	r4, #0
   d98e8:	4625      	mov	r5, r4
   d98ea:	9405      	str	r4, [sp, #20]
   d98ec:	9404      	str	r4, [sp, #16]
   d98ee:	9a02      	ldr	r2, [sp, #8]
   d98f0:	f8df b150 	ldr.w	fp, [pc, #336]	; d9a44 <_strtod_r+0x5e4>
   d98f4:	2322      	movs	r3, #34	; 0x22
   d98f6:	6013      	str	r3, [r2, #0]
   d98f8:	f04f 0a00 	mov.w	sl, #0
   d98fc:	e187      	b.n	d9c0e <_strtod_r+0x7ae>
   d98fe:	4e4e      	ldr	r6, [pc, #312]	; (d9a38 <_strtod_r+0x5d8>)
   d9900:	2300      	movs	r3, #0
   d9902:	1124      	asrs	r4, r4, #4
   d9904:	4650      	mov	r0, sl
   d9906:	4659      	mov	r1, fp
   d9908:	4698      	mov	r8, r3
   d990a:	4637      	mov	r7, r6
   d990c:	2c01      	cmp	r4, #1
   d990e:	dd0b      	ble.n	d9928 <_strtod_r+0x4c8>
   d9910:	07e2      	lsls	r2, r4, #31
   d9912:	d504      	bpl.n	d991e <_strtod_r+0x4be>
   d9914:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9918:	f7ff f85a 	bl	d89d0 <__aeabi_dmul>
   d991c:	2301      	movs	r3, #1
   d991e:	f108 0801 	add.w	r8, r8, #1
   d9922:	1064      	asrs	r4, r4, #1
   d9924:	3608      	adds	r6, #8
   d9926:	e7f1      	b.n	d990c <_strtod_r+0x4ac>
   d9928:	b10b      	cbz	r3, d992e <_strtod_r+0x4ce>
   d992a:	4682      	mov	sl, r0
   d992c:	468b      	mov	fp, r1
   d992e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9932:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d9936:	4652      	mov	r2, sl
   d9938:	465b      	mov	r3, fp
   d993a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d993e:	f7ff f847 	bl	d89d0 <__aeabi_dmul>
   d9942:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9946:	468b      	mov	fp, r1
   d9948:	460a      	mov	r2, r1
   d994a:	0d1b      	lsrs	r3, r3, #20
   d994c:	493b      	ldr	r1, [pc, #236]	; (d9a3c <_strtod_r+0x5dc>)
   d994e:	051b      	lsls	r3, r3, #20
   d9950:	428b      	cmp	r3, r1
   d9952:	4682      	mov	sl, r0
   d9954:	d8c7      	bhi.n	d98e6 <_strtod_r+0x486>
   d9956:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d995a:	428b      	cmp	r3, r1
   d995c:	bf86      	itte	hi
   d995e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d9a4c <_strtod_r+0x5ec>
   d9962:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9966:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d996a:	e071      	b.n	d9a50 <_strtod_r+0x5f0>
   d996c:	d070      	beq.n	d9a50 <_strtod_r+0x5f0>
   d996e:	4264      	negs	r4, r4
   d9970:	f014 020f 	ands.w	r2, r4, #15
   d9974:	d00a      	beq.n	d998c <_strtod_r+0x52c>
   d9976:	4b2f      	ldr	r3, [pc, #188]	; (d9a34 <_strtod_r+0x5d4>)
   d9978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d997c:	4650      	mov	r0, sl
   d997e:	4659      	mov	r1, fp
   d9980:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9984:	f7ff f94e 	bl	d8c24 <__aeabi_ddiv>
   d9988:	4682      	mov	sl, r0
   d998a:	468b      	mov	fp, r1
   d998c:	1124      	asrs	r4, r4, #4
   d998e:	d05f      	beq.n	d9a50 <_strtod_r+0x5f0>
   d9990:	2c1f      	cmp	r4, #31
   d9992:	dd04      	ble.n	d999e <_strtod_r+0x53e>
   d9994:	2400      	movs	r4, #0
   d9996:	4625      	mov	r5, r4
   d9998:	9405      	str	r4, [sp, #20]
   d999a:	9404      	str	r4, [sp, #16]
   d999c:	e130      	b.n	d9c00 <_strtod_r+0x7a0>
   d999e:	f014 0f10 	tst.w	r4, #16
   d99a2:	bf0c      	ite	eq
   d99a4:	2300      	moveq	r3, #0
   d99a6:	236a      	movne	r3, #106	; 0x6a
   d99a8:	4e25      	ldr	r6, [pc, #148]	; (d9a40 <_strtod_r+0x5e0>)
   d99aa:	9303      	str	r3, [sp, #12]
   d99ac:	4650      	mov	r0, sl
   d99ae:	4659      	mov	r1, fp
   d99b0:	2300      	movs	r3, #0
   d99b2:	2c00      	cmp	r4, #0
   d99b4:	dd09      	ble.n	d99ca <_strtod_r+0x56a>
   d99b6:	07e2      	lsls	r2, r4, #31
   d99b8:	d504      	bpl.n	d99c4 <_strtod_r+0x564>
   d99ba:	e9d6 2300 	ldrd	r2, r3, [r6]
   d99be:	f7ff f807 	bl	d89d0 <__aeabi_dmul>
   d99c2:	2301      	movs	r3, #1
   d99c4:	1064      	asrs	r4, r4, #1
   d99c6:	3608      	adds	r6, #8
   d99c8:	e7f3      	b.n	d99b2 <_strtod_r+0x552>
   d99ca:	b10b      	cbz	r3, d99d0 <_strtod_r+0x570>
   d99cc:	4682      	mov	sl, r0
   d99ce:	468b      	mov	fp, r1
   d99d0:	9b03      	ldr	r3, [sp, #12]
   d99d2:	b1eb      	cbz	r3, d9a10 <_strtod_r+0x5b0>
   d99d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d99d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d99dc:	2b00      	cmp	r3, #0
   d99de:	4659      	mov	r1, fp
   d99e0:	dd16      	ble.n	d9a10 <_strtod_r+0x5b0>
   d99e2:	2b1f      	cmp	r3, #31
   d99e4:	dd0e      	ble.n	d9a04 <_strtod_r+0x5a4>
   d99e6:	2b34      	cmp	r3, #52	; 0x34
   d99e8:	bfde      	ittt	le
   d99ea:	3b20      	suble	r3, #32
   d99ec:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d99f0:	fa02 f303 	lslle.w	r3, r2, r3
   d99f4:	f04f 0a00 	mov.w	sl, #0
   d99f8:	bfcc      	ite	gt
   d99fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d99fe:	ea03 0b01 	andle.w	fp, r3, r1
   d9a02:	e005      	b.n	d9a10 <_strtod_r+0x5b0>
   d9a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9a08:	fa02 f303 	lsl.w	r3, r2, r3
   d9a0c:	ea03 0a0a 	and.w	sl, r3, sl
   d9a10:	2200      	movs	r2, #0
   d9a12:	2300      	movs	r3, #0
   d9a14:	4650      	mov	r0, sl
   d9a16:	4659      	mov	r1, fp
   d9a18:	f7ff fa42 	bl	d8ea0 <__aeabi_dcmpeq>
   d9a1c:	2800      	cmp	r0, #0
   d9a1e:	d1b9      	bne.n	d9994 <_strtod_r+0x534>
   d9a20:	e018      	b.n	d9a54 <_strtod_r+0x5f4>
   d9a22:	bf00      	nop
   d9a24:	000dc3f0 	.word	0x000dc3f0
   d9a28:	000dc3f3 	.word	0x000dc3f3
   d9a2c:	000dc3f9 	.word	0x000dc3f9
   d9a30:	000dc3dc 	.word	0x000dc3dc
   d9a34:	000dc468 	.word	0x000dc468
   d9a38:	000dc530 	.word	0x000dc530
   d9a3c:	7ca00000 	.word	0x7ca00000
   d9a40:	000dc400 	.word	0x000dc400
   d9a44:	7ff00000 	.word	0x7ff00000
   d9a48:	fff80000 	.word	0xfff80000
   d9a4c:	7fefffff 	.word	0x7fefffff
   d9a50:	2300      	movs	r3, #0
   d9a52:	9303      	str	r3, [sp, #12]
   d9a54:	9b05      	ldr	r3, [sp, #20]
   d9a56:	9300      	str	r3, [sp, #0]
   d9a58:	9a04      	ldr	r2, [sp, #16]
   d9a5a:	9907      	ldr	r1, [sp, #28]
   d9a5c:	9802      	ldr	r0, [sp, #8]
   d9a5e:	462b      	mov	r3, r5
   d9a60:	f001 faeb 	bl	db03a <__s2b>
   d9a64:	9005      	str	r0, [sp, #20]
   d9a66:	2800      	cmp	r0, #0
   d9a68:	f43f af3d 	beq.w	d98e6 <_strtod_r+0x486>
   d9a6c:	f1b9 0f00 	cmp.w	r9, #0
   d9a70:	f1c9 0300 	rsb	r3, r9, #0
   d9a74:	bfa8      	it	ge
   d9a76:	2300      	movge	r3, #0
   d9a78:	930d      	str	r3, [sp, #52]	; 0x34
   d9a7a:	2400      	movs	r4, #0
   d9a7c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d9a80:	9312      	str	r3, [sp, #72]	; 0x48
   d9a82:	4625      	mov	r5, r4
   d9a84:	9b05      	ldr	r3, [sp, #20]
   d9a86:	9802      	ldr	r0, [sp, #8]
   d9a88:	6859      	ldr	r1, [r3, #4]
   d9a8a:	f001 fa4f 	bl	daf2c <_Balloc>
   d9a8e:	9004      	str	r0, [sp, #16]
   d9a90:	2800      	cmp	r0, #0
   d9a92:	f43f af2c 	beq.w	d98ee <_strtod_r+0x48e>
   d9a96:	9b05      	ldr	r3, [sp, #20]
   d9a98:	691a      	ldr	r2, [r3, #16]
   d9a9a:	3202      	adds	r2, #2
   d9a9c:	f103 010c 	add.w	r1, r3, #12
   d9aa0:	0092      	lsls	r2, r2, #2
   d9aa2:	300c      	adds	r0, #12
   d9aa4:	f7ff fc26 	bl	d92f4 <memcpy>
   d9aa8:	aa1a      	add	r2, sp, #104	; 0x68
   d9aaa:	a919      	add	r1, sp, #100	; 0x64
   d9aac:	ec4b ab10 	vmov	d0, sl, fp
   d9ab0:	9802      	ldr	r0, [sp, #8]
   d9ab2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9ab6:	f001 fd74 	bl	db5a2 <__d2b>
   d9aba:	9018      	str	r0, [sp, #96]	; 0x60
   d9abc:	2800      	cmp	r0, #0
   d9abe:	f43f af16 	beq.w	d98ee <_strtod_r+0x48e>
   d9ac2:	2101      	movs	r1, #1
   d9ac4:	9802      	ldr	r0, [sp, #8]
   d9ac6:	f001 fb43 	bl	db150 <__i2b>
   d9aca:	4605      	mov	r5, r0
   d9acc:	2800      	cmp	r0, #0
   d9ace:	f43f af0e 	beq.w	d98ee <_strtod_r+0x48e>
   d9ad2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9ad4:	9903      	ldr	r1, [sp, #12]
   d9ad6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d9ad8:	2b00      	cmp	r3, #0
   d9ada:	bfad      	iteet	ge
   d9adc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d9ade:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d9ae0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d9ae4:	eb02 0803 	addge.w	r8, r2, r3
   d9ae8:	bfb8      	it	lt
   d9aea:	1ad2      	sublt	r2, r2, r3
   d9aec:	eba3 0301 	sub.w	r3, r3, r1
   d9af0:	4433      	add	r3, r6
   d9af2:	49b5      	ldr	r1, [pc, #724]	; (d9dc8 <_strtod_r+0x968>)
   d9af4:	bfa8      	it	ge
   d9af6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d9af8:	3b01      	subs	r3, #1
   d9afa:	428b      	cmp	r3, r1
   d9afc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d9b00:	f280 808a 	bge.w	d9c18 <_strtod_r+0x7b8>
   d9b04:	1ac9      	subs	r1, r1, r3
   d9b06:	291f      	cmp	r1, #31
   d9b08:	bfc8      	it	gt
   d9b0a:	4fb0      	ldrgt	r7, [pc, #704]	; (d9dcc <_strtod_r+0x96c>)
   d9b0c:	f04f 0901 	mov.w	r9, #1
   d9b10:	bfd4      	ite	le
   d9b12:	fa09 f301 	lslle.w	r3, r9, r1
   d9b16:	1aff      	subgt	r7, r7, r3
   d9b18:	eba6 0601 	sub.w	r6, r6, r1
   d9b1c:	bfd9      	ittee	le
   d9b1e:	9306      	strle	r3, [sp, #24]
   d9b20:	2700      	movle	r7, #0
   d9b22:	fa09 f707 	lslgt.w	r7, r9, r7
   d9b26:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d9b2a:	eb08 0906 	add.w	r9, r8, r6
   d9b2e:	9b03      	ldr	r3, [sp, #12]
   d9b30:	45c8      	cmp	r8, r9
   d9b32:	4416      	add	r6, r2
   d9b34:	441e      	add	r6, r3
   d9b36:	4643      	mov	r3, r8
   d9b38:	bfa8      	it	ge
   d9b3a:	464b      	movge	r3, r9
   d9b3c:	42b3      	cmp	r3, r6
   d9b3e:	bfa8      	it	ge
   d9b40:	4633      	movge	r3, r6
   d9b42:	2b00      	cmp	r3, #0
   d9b44:	bfc2      	ittt	gt
   d9b46:	ebc3 0909 	rsbgt	r9, r3, r9
   d9b4a:	1af6      	subgt	r6, r6, r3
   d9b4c:	ebc3 0808 	rsbgt	r8, r3, r8
   d9b50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9b52:	2b00      	cmp	r3, #0
   d9b54:	d164      	bne.n	d9c20 <_strtod_r+0x7c0>
   d9b56:	f1b9 0f00 	cmp.w	r9, #0
   d9b5a:	dc7a      	bgt.n	d9c52 <_strtod_r+0x7f2>
   d9b5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d9b5e:	2b00      	cmp	r3, #0
   d9b60:	f040 8081 	bne.w	d9c66 <_strtod_r+0x806>
   d9b64:	2e00      	cmp	r6, #0
   d9b66:	f300 8088 	bgt.w	d9c7a <_strtod_r+0x81a>
   d9b6a:	f1b8 0f00 	cmp.w	r8, #0
   d9b6e:	f300 808e 	bgt.w	d9c8e <_strtod_r+0x82e>
   d9b72:	9a04      	ldr	r2, [sp, #16]
   d9b74:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9b76:	9802      	ldr	r0, [sp, #8]
   d9b78:	f001 fc3f 	bl	db3fa <__mdiff>
   d9b7c:	4604      	mov	r4, r0
   d9b7e:	2800      	cmp	r0, #0
   d9b80:	f43f aeb5 	beq.w	d98ee <_strtod_r+0x48e>
   d9b84:	68c3      	ldr	r3, [r0, #12]
   d9b86:	9307      	str	r3, [sp, #28]
   d9b88:	2300      	movs	r3, #0
   d9b8a:	60c3      	str	r3, [r0, #12]
   d9b8c:	4629      	mov	r1, r5
   d9b8e:	f001 fc18 	bl	db3c2 <__mcmp>
   d9b92:	2800      	cmp	r0, #0
   d9b94:	f280 8089 	bge.w	d9caa <_strtod_r+0x84a>
   d9b98:	9b07      	ldr	r3, [sp, #28]
   d9b9a:	2b00      	cmp	r3, #0
   d9b9c:	f040 8204 	bne.w	d9fa8 <_strtod_r+0xb48>
   d9ba0:	f1ba 0f00 	cmp.w	sl, #0
   d9ba4:	f040 8200 	bne.w	d9fa8 <_strtod_r+0xb48>
   d9ba8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9bac:	2b00      	cmp	r3, #0
   d9bae:	f040 81fb 	bne.w	d9fa8 <_strtod_r+0xb48>
   d9bb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9bb6:	0d1b      	lsrs	r3, r3, #20
   d9bb8:	051b      	lsls	r3, r3, #20
   d9bba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9bbe:	f240 81f3 	bls.w	d9fa8 <_strtod_r+0xb48>
   d9bc2:	6963      	ldr	r3, [r4, #20]
   d9bc4:	2b00      	cmp	r3, #0
   d9bc6:	d06c      	beq.n	d9ca2 <_strtod_r+0x842>
   d9bc8:	4621      	mov	r1, r4
   d9bca:	2201      	movs	r2, #1
   d9bcc:	9802      	ldr	r0, [sp, #8]
   d9bce:	f001 fba7 	bl	db320 <__lshift>
   d9bd2:	4629      	mov	r1, r5
   d9bd4:	4604      	mov	r4, r0
   d9bd6:	f001 fbf4 	bl	db3c2 <__mcmp>
   d9bda:	2800      	cmp	r0, #0
   d9bdc:	f340 81e4 	ble.w	d9fa8 <_strtod_r+0xb48>
   d9be0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9be4:	9a03      	ldr	r2, [sp, #12]
   d9be6:	0d1b      	lsrs	r3, r3, #20
   d9be8:	051b      	lsls	r3, r3, #20
   d9bea:	2a00      	cmp	r2, #0
   d9bec:	f000 808c 	beq.w	d9d08 <_strtod_r+0x8a8>
   d9bf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9bf4:	f300 8088 	bgt.w	d9d08 <_strtod_r+0x8a8>
   d9bf8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d9bfc:	f300 81d6 	bgt.w	d9fac <_strtod_r+0xb4c>
   d9c00:	9a02      	ldr	r2, [sp, #8]
   d9c02:	2322      	movs	r3, #34	; 0x22
   d9c04:	f04f 0a00 	mov.w	sl, #0
   d9c08:	f04f 0b00 	mov.w	fp, #0
   d9c0c:	6013      	str	r3, [r2, #0]
   d9c0e:	9b05      	ldr	r3, [sp, #20]
   d9c10:	2b00      	cmp	r3, #0
   d9c12:	f040 81dc 	bne.w	d9fce <_strtod_r+0xb6e>
   d9c16:	e1ee      	b.n	d9ff6 <_strtod_r+0xb96>
   d9c18:	2301      	movs	r3, #1
   d9c1a:	2700      	movs	r7, #0
   d9c1c:	9306      	str	r3, [sp, #24]
   d9c1e:	e784      	b.n	d9b2a <_strtod_r+0x6ca>
   d9c20:	4629      	mov	r1, r5
   d9c22:	461a      	mov	r2, r3
   d9c24:	9802      	ldr	r0, [sp, #8]
   d9c26:	f001 fb2d 	bl	db284 <__pow5mult>
   d9c2a:	4605      	mov	r5, r0
   d9c2c:	2800      	cmp	r0, #0
   d9c2e:	f43f ae5e 	beq.w	d98ee <_strtod_r+0x48e>
   d9c32:	4601      	mov	r1, r0
   d9c34:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9c36:	9802      	ldr	r0, [sp, #8]
   d9c38:	f001 fa93 	bl	db162 <__multiply>
   d9c3c:	9007      	str	r0, [sp, #28]
   d9c3e:	2800      	cmp	r0, #0
   d9c40:	f43f ae55 	beq.w	d98ee <_strtod_r+0x48e>
   d9c44:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9c46:	9802      	ldr	r0, [sp, #8]
   d9c48:	f001 f9a5 	bl	daf96 <_Bfree>
   d9c4c:	9b07      	ldr	r3, [sp, #28]
   d9c4e:	9318      	str	r3, [sp, #96]	; 0x60
   d9c50:	e781      	b.n	d9b56 <_strtod_r+0x6f6>
   d9c52:	464a      	mov	r2, r9
   d9c54:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9c56:	9802      	ldr	r0, [sp, #8]
   d9c58:	f001 fb62 	bl	db320 <__lshift>
   d9c5c:	9018      	str	r0, [sp, #96]	; 0x60
   d9c5e:	2800      	cmp	r0, #0
   d9c60:	f47f af7c 	bne.w	d9b5c <_strtod_r+0x6fc>
   d9c64:	e643      	b.n	d98ee <_strtod_r+0x48e>
   d9c66:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9c68:	9904      	ldr	r1, [sp, #16]
   d9c6a:	9802      	ldr	r0, [sp, #8]
   d9c6c:	f001 fb0a 	bl	db284 <__pow5mult>
   d9c70:	9004      	str	r0, [sp, #16]
   d9c72:	2800      	cmp	r0, #0
   d9c74:	f47f af76 	bne.w	d9b64 <_strtod_r+0x704>
   d9c78:	e639      	b.n	d98ee <_strtod_r+0x48e>
   d9c7a:	4632      	mov	r2, r6
   d9c7c:	9904      	ldr	r1, [sp, #16]
   d9c7e:	9802      	ldr	r0, [sp, #8]
   d9c80:	f001 fb4e 	bl	db320 <__lshift>
   d9c84:	9004      	str	r0, [sp, #16]
   d9c86:	2800      	cmp	r0, #0
   d9c88:	f47f af6f 	bne.w	d9b6a <_strtod_r+0x70a>
   d9c8c:	e62f      	b.n	d98ee <_strtod_r+0x48e>
   d9c8e:	4629      	mov	r1, r5
   d9c90:	4642      	mov	r2, r8
   d9c92:	9802      	ldr	r0, [sp, #8]
   d9c94:	f001 fb44 	bl	db320 <__lshift>
   d9c98:	4605      	mov	r5, r0
   d9c9a:	2800      	cmp	r0, #0
   d9c9c:	f47f af69 	bne.w	d9b72 <_strtod_r+0x712>
   d9ca0:	e625      	b.n	d98ee <_strtod_r+0x48e>
   d9ca2:	6923      	ldr	r3, [r4, #16]
   d9ca4:	2b01      	cmp	r3, #1
   d9ca6:	dc8f      	bgt.n	d9bc8 <_strtod_r+0x768>
   d9ca8:	e17e      	b.n	d9fa8 <_strtod_r+0xb48>
   d9caa:	d161      	bne.n	d9d70 <_strtod_r+0x910>
   d9cac:	9a07      	ldr	r2, [sp, #28]
   d9cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9cb2:	b322      	cbz	r2, d9cfe <_strtod_r+0x89e>
   d9cb4:	4946      	ldr	r1, [pc, #280]	; (d9dd0 <_strtod_r+0x970>)
   d9cb6:	428b      	cmp	r3, r1
   d9cb8:	465a      	mov	r2, fp
   d9cba:	d12e      	bne.n	d9d1a <_strtod_r+0x8ba>
   d9cbc:	9b03      	ldr	r3, [sp, #12]
   d9cbe:	4651      	mov	r1, sl
   d9cc0:	b163      	cbz	r3, d9cdc <_strtod_r+0x87c>
   d9cc2:	4b44      	ldr	r3, [pc, #272]	; (d9dd4 <_strtod_r+0x974>)
   d9cc4:	4013      	ands	r3, r2
   d9cc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9cca:	d807      	bhi.n	d9cdc <_strtod_r+0x87c>
   d9ccc:	0d1b      	lsrs	r3, r3, #20
   d9cce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9cd6:	fa00 f303 	lsl.w	r3, r0, r3
   d9cda:	e001      	b.n	d9ce0 <_strtod_r+0x880>
   d9cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9ce0:	428b      	cmp	r3, r1
   d9ce2:	d11a      	bne.n	d9d1a <_strtod_r+0x8ba>
   d9ce4:	493c      	ldr	r1, [pc, #240]	; (d9dd8 <_strtod_r+0x978>)
   d9ce6:	428a      	cmp	r2, r1
   d9ce8:	d102      	bne.n	d9cf0 <_strtod_r+0x890>
   d9cea:	3301      	adds	r3, #1
   d9cec:	f43f adff 	beq.w	d98ee <_strtod_r+0x48e>
   d9cf0:	4b38      	ldr	r3, [pc, #224]	; (d9dd4 <_strtod_r+0x974>)
   d9cf2:	4013      	ands	r3, r2
   d9cf4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9cf8:	f04f 0a00 	mov.w	sl, #0
   d9cfc:	e154      	b.n	d9fa8 <_strtod_r+0xb48>
   d9cfe:	b963      	cbnz	r3, d9d1a <_strtod_r+0x8ba>
   d9d00:	f1ba 0f00 	cmp.w	sl, #0
   d9d04:	d109      	bne.n	d9d1a <_strtod_r+0x8ba>
   d9d06:	e76b      	b.n	d9be0 <_strtod_r+0x780>
   d9d08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9d0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9d10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9d14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9d18:	e146      	b.n	d9fa8 <_strtod_r+0xb48>
   d9d1a:	b117      	cbz	r7, d9d22 <_strtod_r+0x8c2>
   d9d1c:	ea17 0f0b 	tst.w	r7, fp
   d9d20:	e002      	b.n	d9d28 <_strtod_r+0x8c8>
   d9d22:	9b06      	ldr	r3, [sp, #24]
   d9d24:	ea13 0f0a 	tst.w	r3, sl
   d9d28:	f000 813e 	beq.w	d9fa8 <_strtod_r+0xb48>
   d9d2c:	9b07      	ldr	r3, [sp, #28]
   d9d2e:	9a03      	ldr	r2, [sp, #12]
   d9d30:	4650      	mov	r0, sl
   d9d32:	4659      	mov	r1, fp
   d9d34:	b153      	cbz	r3, d9d4c <_strtod_r+0x8ec>
   d9d36:	f7ff fb76 	bl	d9426 <sulp>
   d9d3a:	4602      	mov	r2, r0
   d9d3c:	460b      	mov	r3, r1
   d9d3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9d42:	f7fe fc93 	bl	d866c <__adddf3>
   d9d46:	4682      	mov	sl, r0
   d9d48:	468b      	mov	fp, r1
   d9d4a:	e12d      	b.n	d9fa8 <_strtod_r+0xb48>
   d9d4c:	f7ff fb6b 	bl	d9426 <sulp>
   d9d50:	4602      	mov	r2, r0
   d9d52:	460b      	mov	r3, r1
   d9d54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9d58:	f7fe fc86 	bl	d8668 <__aeabi_dsub>
   d9d5c:	2200      	movs	r2, #0
   d9d5e:	2300      	movs	r3, #0
   d9d60:	4682      	mov	sl, r0
   d9d62:	468b      	mov	fp, r1
   d9d64:	f7ff f89c 	bl	d8ea0 <__aeabi_dcmpeq>
   d9d68:	2800      	cmp	r0, #0
   d9d6a:	f47f af49 	bne.w	d9c00 <_strtod_r+0x7a0>
   d9d6e:	e11b      	b.n	d9fa8 <_strtod_r+0xb48>
   d9d70:	4629      	mov	r1, r5
   d9d72:	4620      	mov	r0, r4
   d9d74:	f001 fc63 	bl	db63e <__ratio>
   d9d78:	ec57 6b10 	vmov	r6, r7, d0
   d9d7c:	2200      	movs	r2, #0
   d9d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9d82:	ee10 0a10 	vmov	r0, s0
   d9d86:	4639      	mov	r1, r7
   d9d88:	f7ff f89e 	bl	d8ec8 <__aeabi_dcmple>
   d9d8c:	2800      	cmp	r0, #0
   d9d8e:	d042      	beq.n	d9e16 <_strtod_r+0x9b6>
   d9d90:	9b07      	ldr	r3, [sp, #28]
   d9d92:	b123      	cbz	r3, d9d9e <_strtod_r+0x93e>
   d9d94:	f04f 0800 	mov.w	r8, #0
   d9d98:	f8df 9040 	ldr.w	r9, [pc, #64]	; d9ddc <_strtod_r+0x97c>
   d9d9c:	e011      	b.n	d9dc2 <_strtod_r+0x962>
   d9d9e:	f1ba 0f00 	cmp.w	sl, #0
   d9da2:	d103      	bne.n	d9dac <_strtod_r+0x94c>
   d9da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9da8:	b93b      	cbnz	r3, d9dba <_strtod_r+0x95a>
   d9daa:	e01b      	b.n	d9de4 <_strtod_r+0x984>
   d9dac:	f1ba 0f01 	cmp.w	sl, #1
   d9db0:	d103      	bne.n	d9dba <_strtod_r+0x95a>
   d9db2:	f1bb 0f00 	cmp.w	fp, #0
   d9db6:	f43f af23 	beq.w	d9c00 <_strtod_r+0x7a0>
   d9dba:	f8df 9024 	ldr.w	r9, [pc, #36]	; d9de0 <_strtod_r+0x980>
   d9dbe:	f04f 0800 	mov.w	r8, #0
   d9dc2:	2600      	movs	r6, #0
   d9dc4:	4f05      	ldr	r7, [pc, #20]	; (d9ddc <_strtod_r+0x97c>)
   d9dc6:	e039      	b.n	d9e3c <_strtod_r+0x9dc>
   d9dc8:	fffffc02 	.word	0xfffffc02
   d9dcc:	fffffbe2 	.word	0xfffffbe2
   d9dd0:	000fffff 	.word	0x000fffff
   d9dd4:	7ff00000 	.word	0x7ff00000
   d9dd8:	7fefffff 	.word	0x7fefffff
   d9ddc:	3ff00000 	.word	0x3ff00000
   d9de0:	bff00000 	.word	0xbff00000
   d9de4:	2200      	movs	r2, #0
   d9de6:	4b98      	ldr	r3, [pc, #608]	; (da048 <_strtod_r+0xbe8>)
   d9de8:	4630      	mov	r0, r6
   d9dea:	4639      	mov	r1, r7
   d9dec:	f7ff f862 	bl	d8eb4 <__aeabi_dcmplt>
   d9df0:	b940      	cbnz	r0, d9e04 <_strtod_r+0x9a4>
   d9df2:	4630      	mov	r0, r6
   d9df4:	4639      	mov	r1, r7
   d9df6:	2200      	movs	r2, #0
   d9df8:	4b94      	ldr	r3, [pc, #592]	; (da04c <_strtod_r+0xbec>)
   d9dfa:	f7fe fde9 	bl	d89d0 <__aeabi_dmul>
   d9dfe:	4606      	mov	r6, r0
   d9e00:	460f      	mov	r7, r1
   d9e02:	e001      	b.n	d9e08 <_strtod_r+0x9a8>
   d9e04:	4f91      	ldr	r7, [pc, #580]	; (da04c <_strtod_r+0xbec>)
   d9e06:	2600      	movs	r6, #0
   d9e08:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9e0c:	9614      	str	r6, [sp, #80]	; 0x50
   d9e0e:	9315      	str	r3, [sp, #84]	; 0x54
   d9e10:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d9e14:	e012      	b.n	d9e3c <_strtod_r+0x9dc>
   d9e16:	4b8d      	ldr	r3, [pc, #564]	; (da04c <_strtod_r+0xbec>)
   d9e18:	4630      	mov	r0, r6
   d9e1a:	4639      	mov	r1, r7
   d9e1c:	2200      	movs	r2, #0
   d9e1e:	f7fe fdd7 	bl	d89d0 <__aeabi_dmul>
   d9e22:	9b07      	ldr	r3, [sp, #28]
   d9e24:	4606      	mov	r6, r0
   d9e26:	460f      	mov	r7, r1
   d9e28:	b923      	cbnz	r3, d9e34 <_strtod_r+0x9d4>
   d9e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9e2e:	900e      	str	r0, [sp, #56]	; 0x38
   d9e30:	930f      	str	r3, [sp, #60]	; 0x3c
   d9e32:	e001      	b.n	d9e38 <_strtod_r+0x9d8>
   d9e34:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9e38:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d9e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9e40:	0d1b      	lsrs	r3, r3, #20
   d9e42:	051b      	lsls	r3, r3, #20
   d9e44:	9306      	str	r3, [sp, #24]
   d9e46:	9a06      	ldr	r2, [sp, #24]
   d9e48:	4b81      	ldr	r3, [pc, #516]	; (da050 <_strtod_r+0xbf0>)
   d9e4a:	429a      	cmp	r2, r3
   d9e4c:	d12b      	bne.n	d9ea6 <_strtod_r+0xa46>
   d9e4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9e52:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9e56:	ec4b ab10 	vmov	d0, sl, fp
   d9e5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d9e5e:	f001 fb2b 	bl	db4b8 <__ulp>
   d9e62:	4640      	mov	r0, r8
   d9e64:	ec53 2b10 	vmov	r2, r3, d0
   d9e68:	4649      	mov	r1, r9
   d9e6a:	f7fe fdb1 	bl	d89d0 <__aeabi_dmul>
   d9e6e:	4652      	mov	r2, sl
   d9e70:	465b      	mov	r3, fp
   d9e72:	f7fe fbfb 	bl	d866c <__adddf3>
   d9e76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9e7a:	0d1b      	lsrs	r3, r3, #20
   d9e7c:	4a75      	ldr	r2, [pc, #468]	; (da054 <_strtod_r+0xbf4>)
   d9e7e:	051b      	lsls	r3, r3, #20
   d9e80:	4293      	cmp	r3, r2
   d9e82:	4682      	mov	sl, r0
   d9e84:	d90c      	bls.n	d9ea0 <_strtod_r+0xa40>
   d9e86:	4b74      	ldr	r3, [pc, #464]	; (da058 <_strtod_r+0xbf8>)
   d9e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9e8a:	429a      	cmp	r2, r3
   d9e8c:	d103      	bne.n	d9e96 <_strtod_r+0xa36>
   d9e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9e90:	3301      	adds	r3, #1
   d9e92:	f43f ad2c 	beq.w	d98ee <_strtod_r+0x48e>
   d9e96:	f8df b1c0 	ldr.w	fp, [pc, #448]	; da058 <_strtod_r+0xbf8>
   d9e9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9e9e:	e072      	b.n	d9f86 <_strtod_r+0xb26>
   d9ea0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d9ea4:	e038      	b.n	d9f18 <_strtod_r+0xab8>
   d9ea6:	9b03      	ldr	r3, [sp, #12]
   d9ea8:	b333      	cbz	r3, d9ef8 <_strtod_r+0xa98>
   d9eaa:	9b06      	ldr	r3, [sp, #24]
   d9eac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9eb0:	d822      	bhi.n	d9ef8 <_strtod_r+0xa98>
   d9eb2:	a35d      	add	r3, pc, #372	; (adr r3, da028 <_strtod_r+0xbc8>)
   d9eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9eb8:	4630      	mov	r0, r6
   d9eba:	4639      	mov	r1, r7
   d9ebc:	f7ff f804 	bl	d8ec8 <__aeabi_dcmple>
   d9ec0:	b1a8      	cbz	r0, d9eee <_strtod_r+0xa8e>
   d9ec2:	4639      	mov	r1, r7
   d9ec4:	4630      	mov	r0, r6
   d9ec6:	f7ff f85b 	bl	d8f80 <__aeabi_d2uiz>
   d9eca:	2800      	cmp	r0, #0
   d9ecc:	bf08      	it	eq
   d9ece:	2001      	moveq	r0, #1
   d9ed0:	f7fe fd08 	bl	d88e4 <__aeabi_ui2d>
   d9ed4:	9b07      	ldr	r3, [sp, #28]
   d9ed6:	4606      	mov	r6, r0
   d9ed8:	460f      	mov	r7, r1
   d9eda:	b923      	cbnz	r3, d9ee6 <_strtod_r+0xa86>
   d9edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9ee0:	9010      	str	r0, [sp, #64]	; 0x40
   d9ee2:	9311      	str	r3, [sp, #68]	; 0x44
   d9ee4:	e001      	b.n	d9eea <_strtod_r+0xa8a>
   d9ee6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d9eea:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d9eee:	9a06      	ldr	r2, [sp, #24]
   d9ef0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d9ef4:	ebc2 0903 	rsb	r9, r2, r3
   d9ef8:	ed9d 0b08 	vldr	d0, [sp, #32]
   d9efc:	f001 fadc 	bl	db4b8 <__ulp>
   d9f00:	4640      	mov	r0, r8
   d9f02:	ec53 2b10 	vmov	r2, r3, d0
   d9f06:	4649      	mov	r1, r9
   d9f08:	f7fe fd62 	bl	d89d0 <__aeabi_dmul>
   d9f0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9f10:	f7fe fbac 	bl	d866c <__adddf3>
   d9f14:	4682      	mov	sl, r0
   d9f16:	468b      	mov	fp, r1
   d9f18:	9b03      	ldr	r3, [sp, #12]
   d9f1a:	bba3      	cbnz	r3, d9f86 <_strtod_r+0xb26>
   d9f1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9f20:	0d1b      	lsrs	r3, r3, #20
   d9f22:	9a06      	ldr	r2, [sp, #24]
   d9f24:	051b      	lsls	r3, r3, #20
   d9f26:	429a      	cmp	r2, r3
   d9f28:	46d8      	mov	r8, fp
   d9f2a:	d12c      	bne.n	d9f86 <_strtod_r+0xb26>
   d9f2c:	4639      	mov	r1, r7
   d9f2e:	4630      	mov	r0, r6
   d9f30:	f7fe fffe 	bl	d8f30 <__aeabi_d2iz>
   d9f34:	f7fe fce6 	bl	d8904 <__aeabi_i2d>
   d9f38:	460b      	mov	r3, r1
   d9f3a:	4602      	mov	r2, r0
   d9f3c:	4639      	mov	r1, r7
   d9f3e:	4630      	mov	r0, r6
   d9f40:	f7fe fb92 	bl	d8668 <__aeabi_dsub>
   d9f44:	9b07      	ldr	r3, [sp, #28]
   d9f46:	4606      	mov	r6, r0
   d9f48:	460f      	mov	r7, r1
   d9f4a:	b92b      	cbnz	r3, d9f58 <_strtod_r+0xaf8>
   d9f4c:	f1ba 0f00 	cmp.w	sl, #0
   d9f50:	d102      	bne.n	d9f58 <_strtod_r+0xaf8>
   d9f52:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9f56:	b183      	cbz	r3, d9f7a <_strtod_r+0xb1a>
   d9f58:	a335      	add	r3, pc, #212	; (adr r3, da030 <_strtod_r+0xbd0>)
   d9f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f5e:	4630      	mov	r0, r6
   d9f60:	4639      	mov	r1, r7
   d9f62:	f7fe ffa7 	bl	d8eb4 <__aeabi_dcmplt>
   d9f66:	2800      	cmp	r0, #0
   d9f68:	d131      	bne.n	d9fce <_strtod_r+0xb6e>
   d9f6a:	a333      	add	r3, pc, #204	; (adr r3, da038 <_strtod_r+0xbd8>)
   d9f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f70:	4630      	mov	r0, r6
   d9f72:	4639      	mov	r1, r7
   d9f74:	f7fe ffbc 	bl	d8ef0 <__aeabi_dcmpgt>
   d9f78:	e004      	b.n	d9f84 <_strtod_r+0xb24>
   d9f7a:	a331      	add	r3, pc, #196	; (adr r3, da040 <_strtod_r+0xbe0>)
   d9f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f80:	f7fe ff98 	bl	d8eb4 <__aeabi_dcmplt>
   d9f84:	bb18      	cbnz	r0, d9fce <_strtod_r+0xb6e>
   d9f86:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9f88:	9802      	ldr	r0, [sp, #8]
   d9f8a:	f001 f804 	bl	daf96 <_Bfree>
   d9f8e:	9904      	ldr	r1, [sp, #16]
   d9f90:	9802      	ldr	r0, [sp, #8]
   d9f92:	f001 f800 	bl	daf96 <_Bfree>
   d9f96:	4629      	mov	r1, r5
   d9f98:	9802      	ldr	r0, [sp, #8]
   d9f9a:	f000 fffc 	bl	daf96 <_Bfree>
   d9f9e:	4621      	mov	r1, r4
   d9fa0:	9802      	ldr	r0, [sp, #8]
   d9fa2:	f000 fff8 	bl	daf96 <_Bfree>
   d9fa6:	e56d      	b.n	d9a84 <_strtod_r+0x624>
   d9fa8:	9b03      	ldr	r3, [sp, #12]
   d9faa:	b183      	cbz	r3, d9fce <_strtod_r+0xb6e>
   d9fac:	4b2b      	ldr	r3, [pc, #172]	; (da05c <_strtod_r+0xbfc>)
   d9fae:	930b      	str	r3, [sp, #44]	; 0x2c
   d9fb0:	2300      	movs	r3, #0
   d9fb2:	930a      	str	r3, [sp, #40]	; 0x28
   d9fb4:	4650      	mov	r0, sl
   d9fb6:	4659      	mov	r1, fp
   d9fb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9fbc:	f7fe fd08 	bl	d89d0 <__aeabi_dmul>
   d9fc0:	4682      	mov	sl, r0
   d9fc2:	468b      	mov	fp, r1
   d9fc4:	b919      	cbnz	r1, d9fce <_strtod_r+0xb6e>
   d9fc6:	b910      	cbnz	r0, d9fce <_strtod_r+0xb6e>
   d9fc8:	9a02      	ldr	r2, [sp, #8]
   d9fca:	2322      	movs	r3, #34	; 0x22
   d9fcc:	6013      	str	r3, [r2, #0]
   d9fce:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9fd0:	9802      	ldr	r0, [sp, #8]
   d9fd2:	f000 ffe0 	bl	daf96 <_Bfree>
   d9fd6:	9904      	ldr	r1, [sp, #16]
   d9fd8:	9802      	ldr	r0, [sp, #8]
   d9fda:	f000 ffdc 	bl	daf96 <_Bfree>
   d9fde:	4629      	mov	r1, r5
   d9fe0:	9802      	ldr	r0, [sp, #8]
   d9fe2:	f000 ffd8 	bl	daf96 <_Bfree>
   d9fe6:	9905      	ldr	r1, [sp, #20]
   d9fe8:	9802      	ldr	r0, [sp, #8]
   d9fea:	f000 ffd4 	bl	daf96 <_Bfree>
   d9fee:	4621      	mov	r1, r4
   d9ff0:	9802      	ldr	r0, [sp, #8]
   d9ff2:	f000 ffd0 	bl	daf96 <_Bfree>
   d9ff6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9ff8:	b113      	cbz	r3, da000 <_strtod_r+0xba0>
   d9ffa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d9ffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9ffe:	6013      	str	r3, [r2, #0]
   da000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da002:	b11b      	cbz	r3, da00c <_strtod_r+0xbac>
   da004:	4652      	mov	r2, sl
   da006:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da00a:	e007      	b.n	da01c <_strtod_r+0xbbc>
   da00c:	4652      	mov	r2, sl
   da00e:	465b      	mov	r3, fp
   da010:	e004      	b.n	da01c <_strtod_r+0xbbc>
   da012:	2500      	movs	r5, #0
   da014:	462a      	mov	r2, r5
   da016:	2101      	movs	r1, #1
   da018:	f7ff bb41 	b.w	d969e <_strtod_r+0x23e>
   da01c:	ec43 2b10 	vmov	d0, r2, r3
   da020:	b01d      	add	sp, #116	; 0x74
   da022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da026:	bf00      	nop
   da028:	ffc00000 	.word	0xffc00000
   da02c:	41dfffff 	.word	0x41dfffff
   da030:	94a03595 	.word	0x94a03595
   da034:	3fdfffff 	.word	0x3fdfffff
   da038:	35afe535 	.word	0x35afe535
   da03c:	3fe00000 	.word	0x3fe00000
   da040:	94a03595 	.word	0x94a03595
   da044:	3fcfffff 	.word	0x3fcfffff
   da048:	3ff00000 	.word	0x3ff00000
   da04c:	3fe00000 	.word	0x3fe00000
   da050:	7fe00000 	.word	0x7fe00000
   da054:	7c9fffff 	.word	0x7c9fffff
   da058:	7fefffff 	.word	0x7fefffff
   da05c:	39500000 	.word	0x39500000

000da060 <strtof>:
   da060:	b538      	push	{r3, r4, r5, lr}
   da062:	4b0e      	ldr	r3, [pc, #56]	; (da09c <strtof+0x3c>)
   da064:	460a      	mov	r2, r1
   da066:	4601      	mov	r1, r0
   da068:	6818      	ldr	r0, [r3, #0]
   da06a:	f7ff f9f9 	bl	d9460 <_strtod_r>
   da06e:	ec55 4b10 	vmov	r4, r5, d0
   da072:	ee10 2a10 	vmov	r2, s0
   da076:	462b      	mov	r3, r5
   da078:	ee10 0a10 	vmov	r0, s0
   da07c:	4629      	mov	r1, r5
   da07e:	f7fe ff41 	bl	d8f04 <__aeabi_dcmpun>
   da082:	b120      	cbz	r0, da08e <strtof+0x2e>
   da084:	2000      	movs	r0, #0
   da086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da08a:	f001 bb4d 	b.w	db728 <nanf>
   da08e:	4620      	mov	r0, r4
   da090:	4629      	mov	r1, r5
   da092:	f7fe ff95 	bl	d8fc0 <__aeabi_d2f>
   da096:	ee00 0a10 	vmov	s0, r0
   da09a:	bd38      	pop	{r3, r4, r5, pc}
   da09c:	2003e128 	.word	0x2003e128

000da0a0 <_strtol_r>:
   da0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da0a4:	4680      	mov	r8, r0
   da0a6:	4840      	ldr	r0, [pc, #256]	; (da1a8 <_strtol_r+0x108>)
   da0a8:	f8d0 9000 	ldr.w	r9, [r0]
   da0ac:	460f      	mov	r7, r1
   da0ae:	463d      	mov	r5, r7
   da0b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   da0b4:	eb09 0004 	add.w	r0, r9, r4
   da0b8:	7840      	ldrb	r0, [r0, #1]
   da0ba:	f000 0008 	and.w	r0, r0, #8
   da0be:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   da0c2:	b108      	cbz	r0, da0c8 <_strtol_r+0x28>
   da0c4:	462f      	mov	r7, r5
   da0c6:	e7f2      	b.n	da0ae <_strtol_r+0xe>
   da0c8:	2c2d      	cmp	r4, #45	; 0x2d
   da0ca:	d103      	bne.n	da0d4 <_strtol_r+0x34>
   da0cc:	1cbd      	adds	r5, r7, #2
   da0ce:	787c      	ldrb	r4, [r7, #1]
   da0d0:	2601      	movs	r6, #1
   da0d2:	e003      	b.n	da0dc <_strtol_r+0x3c>
   da0d4:	2c2b      	cmp	r4, #43	; 0x2b
   da0d6:	bf04      	itt	eq
   da0d8:	787c      	ldrbeq	r4, [r7, #1]
   da0da:	1cbd      	addeq	r5, r7, #2
   da0dc:	b113      	cbz	r3, da0e4 <_strtol_r+0x44>
   da0de:	2b10      	cmp	r3, #16
   da0e0:	d10a      	bne.n	da0f8 <_strtol_r+0x58>
   da0e2:	e05b      	b.n	da19c <_strtol_r+0xfc>
   da0e4:	2c30      	cmp	r4, #48	; 0x30
   da0e6:	d157      	bne.n	da198 <_strtol_r+0xf8>
   da0e8:	7828      	ldrb	r0, [r5, #0]
   da0ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da0ee:	2858      	cmp	r0, #88	; 0x58
   da0f0:	d14d      	bne.n	da18e <_strtol_r+0xee>
   da0f2:	786c      	ldrb	r4, [r5, #1]
   da0f4:	2310      	movs	r3, #16
   da0f6:	3502      	adds	r5, #2
   da0f8:	2e00      	cmp	r6, #0
   da0fa:	bf14      	ite	ne
   da0fc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   da100:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   da104:	2700      	movs	r7, #0
   da106:	fbbc faf3 	udiv	sl, ip, r3
   da10a:	4638      	mov	r0, r7
   da10c:	fb03 cc1a 	mls	ip, r3, sl, ip
   da110:	eb09 0e04 	add.w	lr, r9, r4
   da114:	f89e e001 	ldrb.w	lr, [lr, #1]
   da118:	f01e 0f04 	tst.w	lr, #4
   da11c:	d001      	beq.n	da122 <_strtol_r+0x82>
   da11e:	3c30      	subs	r4, #48	; 0x30
   da120:	e00b      	b.n	da13a <_strtol_r+0x9a>
   da122:	f01e 0e03 	ands.w	lr, lr, #3
   da126:	d01b      	beq.n	da160 <_strtol_r+0xc0>
   da128:	f1be 0f01 	cmp.w	lr, #1
   da12c:	bf0c      	ite	eq
   da12e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da132:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da136:	ebce 0404 	rsb	r4, lr, r4
   da13a:	42a3      	cmp	r3, r4
   da13c:	dd10      	ble.n	da160 <_strtol_r+0xc0>
   da13e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   da142:	d00a      	beq.n	da15a <_strtol_r+0xba>
   da144:	4550      	cmp	r0, sl
   da146:	d806      	bhi.n	da156 <_strtol_r+0xb6>
   da148:	d101      	bne.n	da14e <_strtol_r+0xae>
   da14a:	4564      	cmp	r4, ip
   da14c:	dc03      	bgt.n	da156 <_strtol_r+0xb6>
   da14e:	fb03 4000 	mla	r0, r3, r0, r4
   da152:	2701      	movs	r7, #1
   da154:	e001      	b.n	da15a <_strtol_r+0xba>
   da156:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da15a:	f815 4b01 	ldrb.w	r4, [r5], #1
   da15e:	e7d7      	b.n	da110 <_strtol_r+0x70>
   da160:	1c7b      	adds	r3, r7, #1
   da162:	d10c      	bne.n	da17e <_strtol_r+0xde>
   da164:	2e00      	cmp	r6, #0
   da166:	f04f 0322 	mov.w	r3, #34	; 0x22
   da16a:	bf14      	ite	ne
   da16c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   da170:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da174:	f8c8 3000 	str.w	r3, [r8]
   da178:	b92a      	cbnz	r2, da186 <_strtol_r+0xe6>
   da17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da17e:	b106      	cbz	r6, da182 <_strtol_r+0xe2>
   da180:	4240      	negs	r0, r0
   da182:	b172      	cbz	r2, da1a2 <_strtol_r+0x102>
   da184:	b107      	cbz	r7, da188 <_strtol_r+0xe8>
   da186:	1e69      	subs	r1, r5, #1
   da188:	6011      	str	r1, [r2, #0]
   da18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da18e:	2430      	movs	r4, #48	; 0x30
   da190:	2b00      	cmp	r3, #0
   da192:	d1b1      	bne.n	da0f8 <_strtol_r+0x58>
   da194:	2308      	movs	r3, #8
   da196:	e7af      	b.n	da0f8 <_strtol_r+0x58>
   da198:	230a      	movs	r3, #10
   da19a:	e7ad      	b.n	da0f8 <_strtol_r+0x58>
   da19c:	2c30      	cmp	r4, #48	; 0x30
   da19e:	d0a3      	beq.n	da0e8 <_strtol_r+0x48>
   da1a0:	e7aa      	b.n	da0f8 <_strtol_r+0x58>
   da1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da1a6:	bf00      	nop
   da1a8:	2003e0c4 	.word	0x2003e0c4

000da1ac <strtol>:
   da1ac:	4613      	mov	r3, r2
   da1ae:	460a      	mov	r2, r1
   da1b0:	4601      	mov	r1, r0
   da1b2:	4802      	ldr	r0, [pc, #8]	; (da1bc <strtol+0x10>)
   da1b4:	6800      	ldr	r0, [r0, #0]
   da1b6:	f7ff bf73 	b.w	da0a0 <_strtol_r>
   da1ba:	bf00      	nop
   da1bc:	2003e128 	.word	0x2003e128

000da1c0 <_strtoul_r>:
   da1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da1c4:	4680      	mov	r8, r0
   da1c6:	483c      	ldr	r0, [pc, #240]	; (da2b8 <_strtoul_r+0xf8>)
   da1c8:	f8d0 9000 	ldr.w	r9, [r0]
   da1cc:	460e      	mov	r6, r1
   da1ce:	4635      	mov	r5, r6
   da1d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   da1d4:	eb09 0004 	add.w	r0, r9, r4
   da1d8:	7840      	ldrb	r0, [r0, #1]
   da1da:	f000 0008 	and.w	r0, r0, #8
   da1de:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da1e2:	b108      	cbz	r0, da1e8 <_strtoul_r+0x28>
   da1e4:	462e      	mov	r6, r5
   da1e6:	e7f2      	b.n	da1ce <_strtoul_r+0xe>
   da1e8:	2c2d      	cmp	r4, #45	; 0x2d
   da1ea:	d103      	bne.n	da1f4 <_strtoul_r+0x34>
   da1ec:	1cb5      	adds	r5, r6, #2
   da1ee:	7874      	ldrb	r4, [r6, #1]
   da1f0:	2701      	movs	r7, #1
   da1f2:	e003      	b.n	da1fc <_strtoul_r+0x3c>
   da1f4:	2c2b      	cmp	r4, #43	; 0x2b
   da1f6:	bf04      	itt	eq
   da1f8:	7874      	ldrbeq	r4, [r6, #1]
   da1fa:	1cb5      	addeq	r5, r6, #2
   da1fc:	b113      	cbz	r3, da204 <_strtoul_r+0x44>
   da1fe:	2b10      	cmp	r3, #16
   da200:	d10a      	bne.n	da218 <_strtoul_r+0x58>
   da202:	e053      	b.n	da2ac <_strtoul_r+0xec>
   da204:	2c30      	cmp	r4, #48	; 0x30
   da206:	d14f      	bne.n	da2a8 <_strtoul_r+0xe8>
   da208:	7828      	ldrb	r0, [r5, #0]
   da20a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da20e:	2858      	cmp	r0, #88	; 0x58
   da210:	d145      	bne.n	da29e <_strtoul_r+0xde>
   da212:	786c      	ldrb	r4, [r5, #1]
   da214:	2310      	movs	r3, #16
   da216:	3502      	adds	r5, #2
   da218:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da21c:	2600      	movs	r6, #0
   da21e:	fbbc fcf3 	udiv	ip, ip, r3
   da222:	fb03 fa0c 	mul.w	sl, r3, ip
   da226:	ea6f 0a0a 	mvn.w	sl, sl
   da22a:	4630      	mov	r0, r6
   da22c:	eb09 0e04 	add.w	lr, r9, r4
   da230:	f89e e001 	ldrb.w	lr, [lr, #1]
   da234:	f01e 0f04 	tst.w	lr, #4
   da238:	d001      	beq.n	da23e <_strtoul_r+0x7e>
   da23a:	3c30      	subs	r4, #48	; 0x30
   da23c:	e00b      	b.n	da256 <_strtoul_r+0x96>
   da23e:	f01e 0e03 	ands.w	lr, lr, #3
   da242:	d01a      	beq.n	da27a <_strtoul_r+0xba>
   da244:	f1be 0f01 	cmp.w	lr, #1
   da248:	bf0c      	ite	eq
   da24a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da24e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da252:	ebce 0404 	rsb	r4, lr, r4
   da256:	42a3      	cmp	r3, r4
   da258:	dd0f      	ble.n	da27a <_strtoul_r+0xba>
   da25a:	2e00      	cmp	r6, #0
   da25c:	db08      	blt.n	da270 <_strtoul_r+0xb0>
   da25e:	4560      	cmp	r0, ip
   da260:	d806      	bhi.n	da270 <_strtoul_r+0xb0>
   da262:	d101      	bne.n	da268 <_strtoul_r+0xa8>
   da264:	4554      	cmp	r4, sl
   da266:	dc03      	bgt.n	da270 <_strtoul_r+0xb0>
   da268:	fb03 4000 	mla	r0, r3, r0, r4
   da26c:	2601      	movs	r6, #1
   da26e:	e001      	b.n	da274 <_strtoul_r+0xb4>
   da270:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da274:	f815 4b01 	ldrb.w	r4, [r5], #1
   da278:	e7d8      	b.n	da22c <_strtoul_r+0x6c>
   da27a:	2e00      	cmp	r6, #0
   da27c:	da07      	bge.n	da28e <_strtoul_r+0xce>
   da27e:	2322      	movs	r3, #34	; 0x22
   da280:	f8c8 3000 	str.w	r3, [r8]
   da284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da288:	b92a      	cbnz	r2, da296 <_strtoul_r+0xd6>
   da28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da28e:	b107      	cbz	r7, da292 <_strtoul_r+0xd2>
   da290:	4240      	negs	r0, r0
   da292:	b172      	cbz	r2, da2b2 <_strtoul_r+0xf2>
   da294:	b106      	cbz	r6, da298 <_strtoul_r+0xd8>
   da296:	1e69      	subs	r1, r5, #1
   da298:	6011      	str	r1, [r2, #0]
   da29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da29e:	2430      	movs	r4, #48	; 0x30
   da2a0:	2b00      	cmp	r3, #0
   da2a2:	d1b9      	bne.n	da218 <_strtoul_r+0x58>
   da2a4:	2308      	movs	r3, #8
   da2a6:	e7b7      	b.n	da218 <_strtoul_r+0x58>
   da2a8:	230a      	movs	r3, #10
   da2aa:	e7b5      	b.n	da218 <_strtoul_r+0x58>
   da2ac:	2c30      	cmp	r4, #48	; 0x30
   da2ae:	d0ab      	beq.n	da208 <_strtoul_r+0x48>
   da2b0:	e7b2      	b.n	da218 <_strtoul_r+0x58>
   da2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da2b6:	bf00      	nop
   da2b8:	2003e0c4 	.word	0x2003e0c4

000da2bc <strtoul>:
   da2bc:	4613      	mov	r3, r2
   da2be:	460a      	mov	r2, r1
   da2c0:	4601      	mov	r1, r0
   da2c2:	4802      	ldr	r0, [pc, #8]	; (da2cc <strtoul+0x10>)
   da2c4:	6800      	ldr	r0, [r0, #0]
   da2c6:	f7ff bf7b 	b.w	da1c0 <_strtoul_r>
   da2ca:	bf00      	nop
   da2cc:	2003e128 	.word	0x2003e128

000da2d0 <__tzcalc_limits>:
   da2d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da2d4:	4604      	mov	r4, r0
   da2d6:	f000 fd8d 	bl	dadf4 <__gettzinfo>
   da2da:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da2de:	429c      	cmp	r4, r3
   da2e0:	f340 8096 	ble.w	da410 <__tzcalc_limits+0x140>
   da2e4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da2e8:	18e3      	adds	r3, r4, r3
   da2ea:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da2ee:	109b      	asrs	r3, r3, #2
   da2f0:	f240 156d 	movw	r5, #365	; 0x16d
   da2f4:	fb05 3502 	mla	r5, r5, r2, r3
   da2f8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da2fc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da300:	fb92 f3f3 	sdiv	r3, r2, r3
   da304:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da308:	442b      	add	r3, r5
   da30a:	18a5      	adds	r5, r4, r2
   da30c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da310:	fb95 f5f2 	sdiv	r5, r5, r2
   da314:	441d      	add	r5, r3
   da316:	2364      	movs	r3, #100	; 0x64
   da318:	fb94 f7f2 	sdiv	r7, r4, r2
   da31c:	fb94 f6f3 	sdiv	r6, r4, r3
   da320:	fb02 4717 	mls	r7, r2, r7, r4
   da324:	fb03 4616 	mls	r6, r3, r6, r4
   da328:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da32c:	fab7 fe87 	clz	lr, r7
   da330:	9301      	str	r3, [sp, #4]
   da332:	f004 0303 	and.w	r3, r4, #3
   da336:	6044      	str	r4, [r0, #4]
   da338:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da33c:	4601      	mov	r1, r0
   da33e:	9300      	str	r3, [sp, #0]
   da340:	f04f 0c07 	mov.w	ip, #7
   da344:	7a0b      	ldrb	r3, [r1, #8]
   da346:	2b4a      	cmp	r3, #74	; 0x4a
   da348:	d10e      	bne.n	da368 <__tzcalc_limits+0x98>
   da34a:	694b      	ldr	r3, [r1, #20]
   da34c:	9a00      	ldr	r2, [sp, #0]
   da34e:	18ec      	adds	r4, r5, r3
   da350:	b902      	cbnz	r2, da354 <__tzcalc_limits+0x84>
   da352:	b906      	cbnz	r6, da356 <__tzcalc_limits+0x86>
   da354:	b927      	cbnz	r7, da360 <__tzcalc_limits+0x90>
   da356:	2b3b      	cmp	r3, #59	; 0x3b
   da358:	bfd4      	ite	le
   da35a:	2300      	movle	r3, #0
   da35c:	2301      	movgt	r3, #1
   da35e:	e000      	b.n	da362 <__tzcalc_limits+0x92>
   da360:	2300      	movs	r3, #0
   da362:	4423      	add	r3, r4
   da364:	3b01      	subs	r3, #1
   da366:	e03f      	b.n	da3e8 <__tzcalc_limits+0x118>
   da368:	2b44      	cmp	r3, #68	; 0x44
   da36a:	d102      	bne.n	da372 <__tzcalc_limits+0xa2>
   da36c:	694b      	ldr	r3, [r1, #20]
   da36e:	442b      	add	r3, r5
   da370:	e03a      	b.n	da3e8 <__tzcalc_limits+0x118>
   da372:	9b00      	ldr	r3, [sp, #0]
   da374:	b92b      	cbnz	r3, da382 <__tzcalc_limits+0xb2>
   da376:	2e00      	cmp	r6, #0
   da378:	bf0c      	ite	eq
   da37a:	46f0      	moveq	r8, lr
   da37c:	f04f 0801 	movne.w	r8, #1
   da380:	e000      	b.n	da384 <__tzcalc_limits+0xb4>
   da382:	46f0      	mov	r8, lr
   da384:	4b24      	ldr	r3, [pc, #144]	; (da418 <__tzcalc_limits+0x148>)
   da386:	68cc      	ldr	r4, [r1, #12]
   da388:	2230      	movs	r2, #48	; 0x30
   da38a:	fb02 3808 	mla	r8, r2, r8, r3
   da38e:	f1a8 0a04 	sub.w	sl, r8, #4
   da392:	46a9      	mov	r9, r5
   da394:	2301      	movs	r3, #1
   da396:	42a3      	cmp	r3, r4
   da398:	da04      	bge.n	da3a4 <__tzcalc_limits+0xd4>
   da39a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da39e:	3301      	adds	r3, #1
   da3a0:	44d9      	add	r9, fp
   da3a2:	e7f8      	b.n	da396 <__tzcalc_limits+0xc6>
   da3a4:	f109 0304 	add.w	r3, r9, #4
   da3a8:	fb93 fbfc 	sdiv	fp, r3, ip
   da3ac:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da3b0:	2c01      	cmp	r4, #1
   da3b2:	ebca 0a03 	rsb	sl, sl, r3
   da3b6:	694b      	ldr	r3, [r1, #20]
   da3b8:	bfb8      	it	lt
   da3ba:	2401      	movlt	r4, #1
   da3bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da3c0:	ebb3 0a0a 	subs.w	sl, r3, sl
   da3c4:	690b      	ldr	r3, [r1, #16]
   da3c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   da3ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   da3ce:	bf48      	it	mi
   da3d0:	f10a 0a07 	addmi.w	sl, sl, #7
   da3d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da3d8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da3dc:	4453      	add	r3, sl
   da3de:	42a3      	cmp	r3, r4
   da3e0:	db01      	blt.n	da3e6 <__tzcalc_limits+0x116>
   da3e2:	3b07      	subs	r3, #7
   da3e4:	e7fb      	b.n	da3de <__tzcalc_limits+0x10e>
   da3e6:	444b      	add	r3, r9
   da3e8:	698c      	ldr	r4, [r1, #24]
   da3ea:	4a0c      	ldr	r2, [pc, #48]	; (da41c <__tzcalc_limits+0x14c>)
   da3ec:	fb02 4303 	mla	r3, r2, r3, r4
   da3f0:	6a0c      	ldr	r4, [r1, #32]
   da3f2:	4423      	add	r3, r4
   da3f4:	f841 3f1c 	str.w	r3, [r1, #28]!
   da3f8:	9b01      	ldr	r3, [sp, #4]
   da3fa:	4299      	cmp	r1, r3
   da3fc:	d1a2      	bne.n	da344 <__tzcalc_limits+0x74>
   da3fe:	69c3      	ldr	r3, [r0, #28]
   da400:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da402:	4293      	cmp	r3, r2
   da404:	bfac      	ite	ge
   da406:	2300      	movge	r3, #0
   da408:	2301      	movlt	r3, #1
   da40a:	6003      	str	r3, [r0, #0]
   da40c:	2001      	movs	r0, #1
   da40e:	e000      	b.n	da412 <__tzcalc_limits+0x142>
   da410:	2000      	movs	r0, #0
   da412:	b003      	add	sp, #12
   da414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da418:	000dc368 	.word	0x000dc368
   da41c:	00015180 	.word	0x00015180

000da420 <__tz_lock>:
   da420:	4770      	bx	lr

000da422 <__tz_unlock>:
   da422:	4770      	bx	lr

000da424 <_tzset_unlocked>:
   da424:	4b01      	ldr	r3, [pc, #4]	; (da42c <_tzset_unlocked+0x8>)
   da426:	6818      	ldr	r0, [r3, #0]
   da428:	f000 b802 	b.w	da430 <_tzset_unlocked_r>
   da42c:	2003e128 	.word	0x2003e128

000da430 <_tzset_unlocked_r>:
   da430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da434:	b08d      	sub	sp, #52	; 0x34
   da436:	4607      	mov	r7, r0
   da438:	f000 fcdc 	bl	dadf4 <__gettzinfo>
   da43c:	49b0      	ldr	r1, [pc, #704]	; (da700 <_tzset_unlocked_r+0x2d0>)
   da43e:	4eb1      	ldr	r6, [pc, #708]	; (da704 <_tzset_unlocked_r+0x2d4>)
   da440:	4604      	mov	r4, r0
   da442:	4638      	mov	r0, r7
   da444:	f000 fcce 	bl	dade4 <_getenv_r>
   da448:	4605      	mov	r5, r0
   da44a:	b960      	cbnz	r0, da466 <_tzset_unlocked_r+0x36>
   da44c:	4bae      	ldr	r3, [pc, #696]	; (da708 <_tzset_unlocked_r+0x2d8>)
   da44e:	4aaf      	ldr	r2, [pc, #700]	; (da70c <_tzset_unlocked_r+0x2dc>)
   da450:	6018      	str	r0, [r3, #0]
   da452:	4baf      	ldr	r3, [pc, #700]	; (da710 <_tzset_unlocked_r+0x2e0>)
   da454:	6018      	str	r0, [r3, #0]
   da456:	4baf      	ldr	r3, [pc, #700]	; (da714 <_tzset_unlocked_r+0x2e4>)
   da458:	6830      	ldr	r0, [r6, #0]
   da45a:	601a      	str	r2, [r3, #0]
   da45c:	605a      	str	r2, [r3, #4]
   da45e:	f7fc f9db 	bl	d6818 <free>
   da462:	6035      	str	r5, [r6, #0]
   da464:	e148      	b.n	da6f8 <_tzset_unlocked_r+0x2c8>
   da466:	6831      	ldr	r1, [r6, #0]
   da468:	b979      	cbnz	r1, da48a <_tzset_unlocked_r+0x5a>
   da46a:	6830      	ldr	r0, [r6, #0]
   da46c:	f7fc f9d4 	bl	d6818 <free>
   da470:	4628      	mov	r0, r5
   da472:	f7fe ffa8 	bl	d93c6 <strlen>
   da476:	1c41      	adds	r1, r0, #1
   da478:	4638      	mov	r0, r7
   da47a:	f7fc f9fd 	bl	d6878 <_malloc_r>
   da47e:	6030      	str	r0, [r6, #0]
   da480:	b148      	cbz	r0, da496 <_tzset_unlocked_r+0x66>
   da482:	4629      	mov	r1, r5
   da484:	f7fe ff7c 	bl	d9380 <strcpy>
   da488:	e005      	b.n	da496 <_tzset_unlocked_r+0x66>
   da48a:	f7fe ff6f 	bl	d936c <strcmp>
   da48e:	2800      	cmp	r0, #0
   da490:	f000 8132 	beq.w	da6f8 <_tzset_unlocked_r+0x2c8>
   da494:	e7e9      	b.n	da46a <_tzset_unlocked_r+0x3a>
   da496:	782b      	ldrb	r3, [r5, #0]
   da498:	4a9f      	ldr	r2, [pc, #636]	; (da718 <_tzset_unlocked_r+0x2e8>)
   da49a:	49a0      	ldr	r1, [pc, #640]	; (da71c <_tzset_unlocked_r+0x2ec>)
   da49c:	2b3a      	cmp	r3, #58	; 0x3a
   da49e:	bf08      	it	eq
   da4a0:	3501      	addeq	r5, #1
   da4a2:	ae0a      	add	r6, sp, #40	; 0x28
   da4a4:	4633      	mov	r3, r6
   da4a6:	4628      	mov	r0, r5
   da4a8:	f7fc f9ce 	bl	d6848 <siscanf>
   da4ac:	2800      	cmp	r0, #0
   da4ae:	f340 8123 	ble.w	da6f8 <_tzset_unlocked_r+0x2c8>
   da4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da4b4:	18ef      	adds	r7, r5, r3
   da4b6:	5ceb      	ldrb	r3, [r5, r3]
   da4b8:	2b2d      	cmp	r3, #45	; 0x2d
   da4ba:	d103      	bne.n	da4c4 <_tzset_unlocked_r+0x94>
   da4bc:	3701      	adds	r7, #1
   da4be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da4c2:	e003      	b.n	da4cc <_tzset_unlocked_r+0x9c>
   da4c4:	2b2b      	cmp	r3, #43	; 0x2b
   da4c6:	bf08      	it	eq
   da4c8:	3701      	addeq	r7, #1
   da4ca:	2501      	movs	r5, #1
   da4cc:	f10d 0a20 	add.w	sl, sp, #32
   da4d0:	f10d 0b1e 	add.w	fp, sp, #30
   da4d4:	f04f 0800 	mov.w	r8, #0
   da4d8:	9603      	str	r6, [sp, #12]
   da4da:	f8cd a008 	str.w	sl, [sp, #8]
   da4de:	9601      	str	r6, [sp, #4]
   da4e0:	f8cd b000 	str.w	fp, [sp]
   da4e4:	4633      	mov	r3, r6
   da4e6:	aa07      	add	r2, sp, #28
   da4e8:	498d      	ldr	r1, [pc, #564]	; (da720 <_tzset_unlocked_r+0x2f0>)
   da4ea:	f8ad 801e 	strh.w	r8, [sp, #30]
   da4ee:	4638      	mov	r0, r7
   da4f0:	f8ad 8020 	strh.w	r8, [sp, #32]
   da4f4:	f7fc f9a8 	bl	d6848 <siscanf>
   da4f8:	4540      	cmp	r0, r8
   da4fa:	f340 80fd 	ble.w	da6f8 <_tzset_unlocked_r+0x2c8>
   da4fe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da502:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da506:	f8df 9224 	ldr.w	r9, [pc, #548]	; da72c <_tzset_unlocked_r+0x2fc>
   da50a:	213c      	movs	r1, #60	; 0x3c
   da50c:	fb01 3302 	mla	r3, r1, r2, r3
   da510:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da514:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da518:	fb01 3302 	mla	r3, r1, r2, r3
   da51c:	435d      	muls	r5, r3
   da51e:	6225      	str	r5, [r4, #32]
   da520:	4d7c      	ldr	r5, [pc, #496]	; (da714 <_tzset_unlocked_r+0x2e4>)
   da522:	4b7d      	ldr	r3, [pc, #500]	; (da718 <_tzset_unlocked_r+0x2e8>)
   da524:	602b      	str	r3, [r5, #0]
   da526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da528:	497c      	ldr	r1, [pc, #496]	; (da71c <_tzset_unlocked_r+0x2ec>)
   da52a:	441f      	add	r7, r3
   da52c:	464a      	mov	r2, r9
   da52e:	4633      	mov	r3, r6
   da530:	4638      	mov	r0, r7
   da532:	f7fc f989 	bl	d6848 <siscanf>
   da536:	4540      	cmp	r0, r8
   da538:	dc08      	bgt.n	da54c <_tzset_unlocked_r+0x11c>
   da53a:	682b      	ldr	r3, [r5, #0]
   da53c:	606b      	str	r3, [r5, #4]
   da53e:	4b72      	ldr	r3, [pc, #456]	; (da708 <_tzset_unlocked_r+0x2d8>)
   da540:	6a22      	ldr	r2, [r4, #32]
   da542:	601a      	str	r2, [r3, #0]
   da544:	4b72      	ldr	r3, [pc, #456]	; (da710 <_tzset_unlocked_r+0x2e0>)
   da546:	f8c3 8000 	str.w	r8, [r3]
   da54a:	e0d5      	b.n	da6f8 <_tzset_unlocked_r+0x2c8>
   da54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da54e:	f8c5 9004 	str.w	r9, [r5, #4]
   da552:	18fd      	adds	r5, r7, r3
   da554:	5cfb      	ldrb	r3, [r7, r3]
   da556:	2b2d      	cmp	r3, #45	; 0x2d
   da558:	d103      	bne.n	da562 <_tzset_unlocked_r+0x132>
   da55a:	3501      	adds	r5, #1
   da55c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da560:	e003      	b.n	da56a <_tzset_unlocked_r+0x13a>
   da562:	2b2b      	cmp	r3, #43	; 0x2b
   da564:	bf08      	it	eq
   da566:	3501      	addeq	r5, #1
   da568:	2701      	movs	r7, #1
   da56a:	2300      	movs	r3, #0
   da56c:	f8ad 301c 	strh.w	r3, [sp, #28]
   da570:	f8ad 301e 	strh.w	r3, [sp, #30]
   da574:	f8ad 3020 	strh.w	r3, [sp, #32]
   da578:	930a      	str	r3, [sp, #40]	; 0x28
   da57a:	9603      	str	r6, [sp, #12]
   da57c:	f8cd a008 	str.w	sl, [sp, #8]
   da580:	9601      	str	r6, [sp, #4]
   da582:	f8cd b000 	str.w	fp, [sp]
   da586:	4633      	mov	r3, r6
   da588:	aa07      	add	r2, sp, #28
   da58a:	4965      	ldr	r1, [pc, #404]	; (da720 <_tzset_unlocked_r+0x2f0>)
   da58c:	4628      	mov	r0, r5
   da58e:	f7fc f95b 	bl	d6848 <siscanf>
   da592:	2800      	cmp	r0, #0
   da594:	dc04      	bgt.n	da5a0 <_tzset_unlocked_r+0x170>
   da596:	6a23      	ldr	r3, [r4, #32]
   da598:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da59c:	63e3      	str	r3, [r4, #60]	; 0x3c
   da59e:	e00e      	b.n	da5be <_tzset_unlocked_r+0x18e>
   da5a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da5a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da5a8:	213c      	movs	r1, #60	; 0x3c
   da5aa:	fb01 3302 	mla	r3, r1, r2, r3
   da5ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da5b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da5b6:	fb01 3302 	mla	r3, r1, r2, r3
   da5ba:	435f      	muls	r7, r3
   da5bc:	63e7      	str	r7, [r4, #60]	; 0x3c
   da5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da5c0:	4627      	mov	r7, r4
   da5c2:	441d      	add	r5, r3
   da5c4:	f04f 0900 	mov.w	r9, #0
   da5c8:	782b      	ldrb	r3, [r5, #0]
   da5ca:	2b2c      	cmp	r3, #44	; 0x2c
   da5cc:	bf08      	it	eq
   da5ce:	3501      	addeq	r5, #1
   da5d0:	f895 8000 	ldrb.w	r8, [r5]
   da5d4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da5d8:	d126      	bne.n	da628 <_tzset_unlocked_r+0x1f8>
   da5da:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da5de:	9302      	str	r3, [sp, #8]
   da5e0:	ab09      	add	r3, sp, #36	; 0x24
   da5e2:	9300      	str	r3, [sp, #0]
   da5e4:	9603      	str	r6, [sp, #12]
   da5e6:	9601      	str	r6, [sp, #4]
   da5e8:	4633      	mov	r3, r6
   da5ea:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da5ee:	494d      	ldr	r1, [pc, #308]	; (da724 <_tzset_unlocked_r+0x2f4>)
   da5f0:	4628      	mov	r0, r5
   da5f2:	f7fc f929 	bl	d6848 <siscanf>
   da5f6:	2803      	cmp	r0, #3
   da5f8:	d17e      	bne.n	da6f8 <_tzset_unlocked_r+0x2c8>
   da5fa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da5fe:	1e4b      	subs	r3, r1, #1
   da600:	2b0b      	cmp	r3, #11
   da602:	d879      	bhi.n	da6f8 <_tzset_unlocked_r+0x2c8>
   da604:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da608:	1e53      	subs	r3, r2, #1
   da60a:	2b04      	cmp	r3, #4
   da60c:	d874      	bhi.n	da6f8 <_tzset_unlocked_r+0x2c8>
   da60e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da612:	2b06      	cmp	r3, #6
   da614:	d870      	bhi.n	da6f8 <_tzset_unlocked_r+0x2c8>
   da616:	f887 8008 	strb.w	r8, [r7, #8]
   da61a:	60f9      	str	r1, [r7, #12]
   da61c:	613a      	str	r2, [r7, #16]
   da61e:	617b      	str	r3, [r7, #20]
   da620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da622:	eb05 0803 	add.w	r8, r5, r3
   da626:	e02a      	b.n	da67e <_tzset_unlocked_r+0x24e>
   da628:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da62c:	bf06      	itte	eq
   da62e:	3501      	addeq	r5, #1
   da630:	4643      	moveq	r3, r8
   da632:	2344      	movne	r3, #68	; 0x44
   da634:	220a      	movs	r2, #10
   da636:	a90b      	add	r1, sp, #44	; 0x2c
   da638:	4628      	mov	r0, r5
   da63a:	9305      	str	r3, [sp, #20]
   da63c:	f7ff fe3e 	bl	da2bc <strtoul>
   da640:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da644:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da648:	4545      	cmp	r5, r8
   da64a:	9b05      	ldr	r3, [sp, #20]
   da64c:	d114      	bne.n	da678 <_tzset_unlocked_r+0x248>
   da64e:	234d      	movs	r3, #77	; 0x4d
   da650:	f1b9 0f00 	cmp.w	r9, #0
   da654:	d107      	bne.n	da666 <_tzset_unlocked_r+0x236>
   da656:	7223      	strb	r3, [r4, #8]
   da658:	2303      	movs	r3, #3
   da65a:	60e3      	str	r3, [r4, #12]
   da65c:	2302      	movs	r3, #2
   da65e:	6123      	str	r3, [r4, #16]
   da660:	f8c4 9014 	str.w	r9, [r4, #20]
   da664:	e00b      	b.n	da67e <_tzset_unlocked_r+0x24e>
   da666:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da66a:	230b      	movs	r3, #11
   da66c:	62a3      	str	r3, [r4, #40]	; 0x28
   da66e:	2301      	movs	r3, #1
   da670:	62e3      	str	r3, [r4, #44]	; 0x2c
   da672:	2300      	movs	r3, #0
   da674:	6323      	str	r3, [r4, #48]	; 0x30
   da676:	e002      	b.n	da67e <_tzset_unlocked_r+0x24e>
   da678:	b280      	uxth	r0, r0
   da67a:	723b      	strb	r3, [r7, #8]
   da67c:	6178      	str	r0, [r7, #20]
   da67e:	2302      	movs	r3, #2
   da680:	f8ad 301c 	strh.w	r3, [sp, #28]
   da684:	2300      	movs	r3, #0
   da686:	f8ad 301e 	strh.w	r3, [sp, #30]
   da68a:	f8ad 3020 	strh.w	r3, [sp, #32]
   da68e:	930a      	str	r3, [sp, #40]	; 0x28
   da690:	f898 3000 	ldrb.w	r3, [r8]
   da694:	2b2f      	cmp	r3, #47	; 0x2f
   da696:	d10b      	bne.n	da6b0 <_tzset_unlocked_r+0x280>
   da698:	9603      	str	r6, [sp, #12]
   da69a:	f8cd a008 	str.w	sl, [sp, #8]
   da69e:	9601      	str	r6, [sp, #4]
   da6a0:	f8cd b000 	str.w	fp, [sp]
   da6a4:	4633      	mov	r3, r6
   da6a6:	aa07      	add	r2, sp, #28
   da6a8:	491f      	ldr	r1, [pc, #124]	; (da728 <_tzset_unlocked_r+0x2f8>)
   da6aa:	4640      	mov	r0, r8
   da6ac:	f7fc f8cc 	bl	d6848 <siscanf>
   da6b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da6b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da6b8:	213c      	movs	r1, #60	; 0x3c
   da6ba:	fb01 3302 	mla	r3, r1, r2, r3
   da6be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da6c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da6c6:	fb01 3302 	mla	r3, r1, r2, r3
   da6ca:	61bb      	str	r3, [r7, #24]
   da6cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da6ce:	f109 0901 	add.w	r9, r9, #1
   da6d2:	f1b9 0f02 	cmp.w	r9, #2
   da6d6:	4445      	add	r5, r8
   da6d8:	f107 071c 	add.w	r7, r7, #28
   da6dc:	f47f af74 	bne.w	da5c8 <_tzset_unlocked_r+0x198>
   da6e0:	6860      	ldr	r0, [r4, #4]
   da6e2:	f7ff fdf5 	bl	da2d0 <__tzcalc_limits>
   da6e6:	4b08      	ldr	r3, [pc, #32]	; (da708 <_tzset_unlocked_r+0x2d8>)
   da6e8:	6a22      	ldr	r2, [r4, #32]
   da6ea:	601a      	str	r2, [r3, #0]
   da6ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da6ee:	1a9b      	subs	r3, r3, r2
   da6f0:	4a07      	ldr	r2, [pc, #28]	; (da710 <_tzset_unlocked_r+0x2e0>)
   da6f2:	bf18      	it	ne
   da6f4:	2301      	movne	r3, #1
   da6f6:	6013      	str	r3, [r2, #0]
   da6f8:	b00d      	add	sp, #52	; 0x34
   da6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da6fe:	bf00      	nop
   da700:	000dc428 	.word	0x000dc428
   da704:	2003e7e0 	.word	0x2003e7e0
   da708:	2003e7e8 	.word	0x2003e7e8
   da70c:	000dc42b 	.word	0x000dc42b
   da710:	2003e7e4 	.word	0x2003e7e4
   da714:	2003e164 	.word	0x2003e164
   da718:	2003e7d3 	.word	0x2003e7d3
   da71c:	000dc42f 	.word	0x000dc42f
   da720:	000dc452 	.word	0x000dc452
   da724:	000dc43e 	.word	0x000dc43e
   da728:	000dc451 	.word	0x000dc451
   da72c:	2003e7c8 	.word	0x2003e7c8

000da730 <rshift>:
   da730:	b5f0      	push	{r4, r5, r6, r7, lr}
   da732:	6906      	ldr	r6, [r0, #16]
   da734:	114b      	asrs	r3, r1, #5
   da736:	42b3      	cmp	r3, r6
   da738:	f100 0514 	add.w	r5, r0, #20
   da73c:	da27      	bge.n	da78e <rshift+0x5e>
   da73e:	f011 011f 	ands.w	r1, r1, #31
   da742:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   da746:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   da74a:	d101      	bne.n	da750 <rshift+0x20>
   da74c:	4629      	mov	r1, r5
   da74e:	e016      	b.n	da77e <rshift+0x4e>
   da750:	1d14      	adds	r4, r2, #4
   da752:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   da756:	f1c1 0e20 	rsb	lr, r1, #32
   da75a:	40ca      	lsrs	r2, r1
   da75c:	462b      	mov	r3, r5
   da75e:	42b4      	cmp	r4, r6
   da760:	d209      	bcs.n	da776 <rshift+0x46>
   da762:	6827      	ldr	r7, [r4, #0]
   da764:	fa07 f70e 	lsl.w	r7, r7, lr
   da768:	433a      	orrs	r2, r7
   da76a:	f843 2b04 	str.w	r2, [r3], #4
   da76e:	f854 2b04 	ldr.w	r2, [r4], #4
   da772:	40ca      	lsrs	r2, r1
   da774:	e7f3      	b.n	da75e <rshift+0x2e>
   da776:	601a      	str	r2, [r3, #0]
   da778:	b152      	cbz	r2, da790 <rshift+0x60>
   da77a:	3304      	adds	r3, #4
   da77c:	e008      	b.n	da790 <rshift+0x60>
   da77e:	42b2      	cmp	r2, r6
   da780:	460b      	mov	r3, r1
   da782:	d205      	bcs.n	da790 <rshift+0x60>
   da784:	f852 3b04 	ldr.w	r3, [r2], #4
   da788:	f841 3b04 	str.w	r3, [r1], #4
   da78c:	e7f7      	b.n	da77e <rshift+0x4e>
   da78e:	462b      	mov	r3, r5
   da790:	1b5b      	subs	r3, r3, r5
   da792:	109b      	asrs	r3, r3, #2
   da794:	6103      	str	r3, [r0, #16]
   da796:	b903      	cbnz	r3, da79a <rshift+0x6a>
   da798:	6143      	str	r3, [r0, #20]
   da79a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da79c <__hexdig_fun>:
   da79c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da7a0:	2b09      	cmp	r3, #9
   da7a2:	d801      	bhi.n	da7a8 <__hexdig_fun+0xc>
   da7a4:	3820      	subs	r0, #32
   da7a6:	e00a      	b.n	da7be <__hexdig_fun+0x22>
   da7a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da7ac:	2b05      	cmp	r3, #5
   da7ae:	d801      	bhi.n	da7b4 <__hexdig_fun+0x18>
   da7b0:	3847      	subs	r0, #71	; 0x47
   da7b2:	e004      	b.n	da7be <__hexdig_fun+0x22>
   da7b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da7b8:	2b05      	cmp	r3, #5
   da7ba:	d802      	bhi.n	da7c2 <__hexdig_fun+0x26>
   da7bc:	3827      	subs	r0, #39	; 0x27
   da7be:	b2c0      	uxtb	r0, r0
   da7c0:	4770      	bx	lr
   da7c2:	2000      	movs	r0, #0
   da7c4:	4770      	bx	lr

000da7c6 <__gethex>:
   da7c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7ca:	b08b      	sub	sp, #44	; 0x2c
   da7cc:	468a      	mov	sl, r1
   da7ce:	4690      	mov	r8, r2
   da7d0:	9306      	str	r3, [sp, #24]
   da7d2:	9002      	str	r0, [sp, #8]
   da7d4:	f7fe fd8a 	bl	d92ec <_localeconv_r>
   da7d8:	6803      	ldr	r3, [r0, #0]
   da7da:	9303      	str	r3, [sp, #12]
   da7dc:	4618      	mov	r0, r3
   da7de:	f7fe fdf2 	bl	d93c6 <strlen>
   da7e2:	9b03      	ldr	r3, [sp, #12]
   da7e4:	9001      	str	r0, [sp, #4]
   da7e6:	4403      	add	r3, r0
   da7e8:	f04f 0b00 	mov.w	fp, #0
   da7ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da7f0:	9307      	str	r3, [sp, #28]
   da7f2:	f8da 3000 	ldr.w	r3, [sl]
   da7f6:	3302      	adds	r3, #2
   da7f8:	461f      	mov	r7, r3
   da7fa:	f813 0b01 	ldrb.w	r0, [r3], #1
   da7fe:	2830      	cmp	r0, #48	; 0x30
   da800:	d102      	bne.n	da808 <__gethex+0x42>
   da802:	f10b 0b01 	add.w	fp, fp, #1
   da806:	e7f7      	b.n	da7f8 <__gethex+0x32>
   da808:	f7ff ffc8 	bl	da79c <__hexdig_fun>
   da80c:	4604      	mov	r4, r0
   da80e:	b9e0      	cbnz	r0, da84a <__gethex+0x84>
   da810:	9a01      	ldr	r2, [sp, #4]
   da812:	9903      	ldr	r1, [sp, #12]
   da814:	4638      	mov	r0, r7
   da816:	f7fe fdde 	bl	d93d6 <strncmp>
   da81a:	2800      	cmp	r0, #0
   da81c:	d134      	bne.n	da888 <__gethex+0xc2>
   da81e:	9b01      	ldr	r3, [sp, #4]
   da820:	5cf8      	ldrb	r0, [r7, r3]
   da822:	18fe      	adds	r6, r7, r3
   da824:	f7ff ffba 	bl	da79c <__hexdig_fun>
   da828:	b380      	cbz	r0, da88c <__gethex+0xc6>
   da82a:	4633      	mov	r3, r6
   da82c:	7818      	ldrb	r0, [r3, #0]
   da82e:	2830      	cmp	r0, #48	; 0x30
   da830:	461f      	mov	r7, r3
   da832:	f103 0301 	add.w	r3, r3, #1
   da836:	d0f9      	beq.n	da82c <__gethex+0x66>
   da838:	f7ff ffb0 	bl	da79c <__hexdig_fun>
   da83c:	fab0 f580 	clz	r5, r0
   da840:	096d      	lsrs	r5, r5, #5
   da842:	4634      	mov	r4, r6
   da844:	f04f 0b01 	mov.w	fp, #1
   da848:	e001      	b.n	da84e <__gethex+0x88>
   da84a:	2500      	movs	r5, #0
   da84c:	462c      	mov	r4, r5
   da84e:	463a      	mov	r2, r7
   da850:	4616      	mov	r6, r2
   da852:	3201      	adds	r2, #1
   da854:	7830      	ldrb	r0, [r6, #0]
   da856:	f7ff ffa1 	bl	da79c <__hexdig_fun>
   da85a:	2800      	cmp	r0, #0
   da85c:	d1f8      	bne.n	da850 <__gethex+0x8a>
   da85e:	9a01      	ldr	r2, [sp, #4]
   da860:	9903      	ldr	r1, [sp, #12]
   da862:	4630      	mov	r0, r6
   da864:	f7fe fdb7 	bl	d93d6 <strncmp>
   da868:	b950      	cbnz	r0, da880 <__gethex+0xba>
   da86a:	b954      	cbnz	r4, da882 <__gethex+0xbc>
   da86c:	9b01      	ldr	r3, [sp, #4]
   da86e:	18f4      	adds	r4, r6, r3
   da870:	4622      	mov	r2, r4
   da872:	4616      	mov	r6, r2
   da874:	3201      	adds	r2, #1
   da876:	7830      	ldrb	r0, [r6, #0]
   da878:	f7ff ff90 	bl	da79c <__hexdig_fun>
   da87c:	2800      	cmp	r0, #0
   da87e:	d1f8      	bne.n	da872 <__gethex+0xac>
   da880:	b134      	cbz	r4, da890 <__gethex+0xca>
   da882:	1ba4      	subs	r4, r4, r6
   da884:	00a4      	lsls	r4, r4, #2
   da886:	e003      	b.n	da890 <__gethex+0xca>
   da888:	463e      	mov	r6, r7
   da88a:	e000      	b.n	da88e <__gethex+0xc8>
   da88c:	4604      	mov	r4, r0
   da88e:	2501      	movs	r5, #1
   da890:	7833      	ldrb	r3, [r6, #0]
   da892:	2b50      	cmp	r3, #80	; 0x50
   da894:	d001      	beq.n	da89a <__gethex+0xd4>
   da896:	2b70      	cmp	r3, #112	; 0x70
   da898:	d12a      	bne.n	da8f0 <__gethex+0x12a>
   da89a:	7873      	ldrb	r3, [r6, #1]
   da89c:	2b2b      	cmp	r3, #43	; 0x2b
   da89e:	d008      	beq.n	da8b2 <__gethex+0xec>
   da8a0:	2b2d      	cmp	r3, #45	; 0x2d
   da8a2:	d003      	beq.n	da8ac <__gethex+0xe6>
   da8a4:	1c71      	adds	r1, r6, #1
   da8a6:	f04f 0900 	mov.w	r9, #0
   da8aa:	e005      	b.n	da8b8 <__gethex+0xf2>
   da8ac:	f04f 0901 	mov.w	r9, #1
   da8b0:	e001      	b.n	da8b6 <__gethex+0xf0>
   da8b2:	f04f 0900 	mov.w	r9, #0
   da8b6:	1cb1      	adds	r1, r6, #2
   da8b8:	7808      	ldrb	r0, [r1, #0]
   da8ba:	f7ff ff6f 	bl	da79c <__hexdig_fun>
   da8be:	1e43      	subs	r3, r0, #1
   da8c0:	b2db      	uxtb	r3, r3
   da8c2:	2b18      	cmp	r3, #24
   da8c4:	d814      	bhi.n	da8f0 <__gethex+0x12a>
   da8c6:	f1a0 0210 	sub.w	r2, r0, #16
   da8ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da8ce:	f7ff ff65 	bl	da79c <__hexdig_fun>
   da8d2:	1e43      	subs	r3, r0, #1
   da8d4:	b2db      	uxtb	r3, r3
   da8d6:	2b18      	cmp	r3, #24
   da8d8:	d804      	bhi.n	da8e4 <__gethex+0x11e>
   da8da:	230a      	movs	r3, #10
   da8dc:	fb03 0202 	mla	r2, r3, r2, r0
   da8e0:	3a10      	subs	r2, #16
   da8e2:	e7f2      	b.n	da8ca <__gethex+0x104>
   da8e4:	f1b9 0f00 	cmp.w	r9, #0
   da8e8:	d000      	beq.n	da8ec <__gethex+0x126>
   da8ea:	4252      	negs	r2, r2
   da8ec:	4414      	add	r4, r2
   da8ee:	e000      	b.n	da8f2 <__gethex+0x12c>
   da8f0:	4631      	mov	r1, r6
   da8f2:	f8ca 1000 	str.w	r1, [sl]
   da8f6:	b12d      	cbz	r5, da904 <__gethex+0x13e>
   da8f8:	f1bb 0f00 	cmp.w	fp, #0
   da8fc:	bf14      	ite	ne
   da8fe:	2000      	movne	r0, #0
   da900:	2006      	moveq	r0, #6
   da902:	e17c      	b.n	dabfe <__gethex+0x438>
   da904:	1bf3      	subs	r3, r6, r7
   da906:	3b01      	subs	r3, #1
   da908:	4629      	mov	r1, r5
   da90a:	2b07      	cmp	r3, #7
   da90c:	dd02      	ble.n	da914 <__gethex+0x14e>
   da90e:	3101      	adds	r1, #1
   da910:	105b      	asrs	r3, r3, #1
   da912:	e7fa      	b.n	da90a <__gethex+0x144>
   da914:	9802      	ldr	r0, [sp, #8]
   da916:	f000 fb09 	bl	daf2c <_Balloc>
   da91a:	9b01      	ldr	r3, [sp, #4]
   da91c:	f100 0a14 	add.w	sl, r0, #20
   da920:	f04f 0900 	mov.w	r9, #0
   da924:	f1c3 0301 	rsb	r3, r3, #1
   da928:	4605      	mov	r5, r0
   da92a:	f8cd a010 	str.w	sl, [sp, #16]
   da92e:	46cb      	mov	fp, r9
   da930:	9308      	str	r3, [sp, #32]
   da932:	42b7      	cmp	r7, r6
   da934:	d22f      	bcs.n	da996 <__gethex+0x1d0>
   da936:	1e73      	subs	r3, r6, #1
   da938:	9305      	str	r3, [sp, #20]
   da93a:	9a07      	ldr	r2, [sp, #28]
   da93c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da940:	4293      	cmp	r3, r2
   da942:	d00b      	beq.n	da95c <__gethex+0x196>
   da944:	f1bb 0f20 	cmp.w	fp, #32
   da948:	d116      	bne.n	da978 <__gethex+0x1b2>
   da94a:	9b04      	ldr	r3, [sp, #16]
   da94c:	f8c3 9000 	str.w	r9, [r3]
   da950:	3304      	adds	r3, #4
   da952:	f04f 0900 	mov.w	r9, #0
   da956:	9304      	str	r3, [sp, #16]
   da958:	46cb      	mov	fp, r9
   da95a:	e00d      	b.n	da978 <__gethex+0x1b2>
   da95c:	9b05      	ldr	r3, [sp, #20]
   da95e:	9a08      	ldr	r2, [sp, #32]
   da960:	4413      	add	r3, r2
   da962:	429f      	cmp	r7, r3
   da964:	d8ee      	bhi.n	da944 <__gethex+0x17e>
   da966:	4618      	mov	r0, r3
   da968:	9a01      	ldr	r2, [sp, #4]
   da96a:	9903      	ldr	r1, [sp, #12]
   da96c:	9309      	str	r3, [sp, #36]	; 0x24
   da96e:	f7fe fd32 	bl	d93d6 <strncmp>
   da972:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da974:	b168      	cbz	r0, da992 <__gethex+0x1cc>
   da976:	e7e5      	b.n	da944 <__gethex+0x17e>
   da978:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da97c:	f7ff ff0e 	bl	da79c <__hexdig_fun>
   da980:	f000 000f 	and.w	r0, r0, #15
   da984:	fa00 f00b 	lsl.w	r0, r0, fp
   da988:	9b05      	ldr	r3, [sp, #20]
   da98a:	ea49 0900 	orr.w	r9, r9, r0
   da98e:	f10b 0b04 	add.w	fp, fp, #4
   da992:	461e      	mov	r6, r3
   da994:	e7cd      	b.n	da932 <__gethex+0x16c>
   da996:	9804      	ldr	r0, [sp, #16]
   da998:	f840 9b04 	str.w	r9, [r0], #4
   da99c:	ebca 0000 	rsb	r0, sl, r0
   da9a0:	1080      	asrs	r0, r0, #2
   da9a2:	6128      	str	r0, [r5, #16]
   da9a4:	0147      	lsls	r7, r0, #5
   da9a6:	4648      	mov	r0, r9
   da9a8:	f000 fb85 	bl	db0b6 <__hi0bits>
   da9ac:	f8d8 6000 	ldr.w	r6, [r8]
   da9b0:	1a38      	subs	r0, r7, r0
   da9b2:	42b0      	cmp	r0, r6
   da9b4:	dd26      	ble.n	daa04 <__gethex+0x23e>
   da9b6:	1b87      	subs	r7, r0, r6
   da9b8:	4639      	mov	r1, r7
   da9ba:	4628      	mov	r0, r5
   da9bc:	f000 fe83 	bl	db6c6 <__any_on>
   da9c0:	b1c8      	cbz	r0, da9f6 <__gethex+0x230>
   da9c2:	1e7b      	subs	r3, r7, #1
   da9c4:	1159      	asrs	r1, r3, #5
   da9c6:	f003 021f 	and.w	r2, r3, #31
   da9ca:	f04f 0901 	mov.w	r9, #1
   da9ce:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   da9d2:	fa09 f202 	lsl.w	r2, r9, r2
   da9d6:	420a      	tst	r2, r1
   da9d8:	d00e      	beq.n	da9f8 <__gethex+0x232>
   da9da:	454b      	cmp	r3, r9
   da9dc:	dc02      	bgt.n	da9e4 <__gethex+0x21e>
   da9de:	f04f 0902 	mov.w	r9, #2
   da9e2:	e009      	b.n	da9f8 <__gethex+0x232>
   da9e4:	1eb9      	subs	r1, r7, #2
   da9e6:	4628      	mov	r0, r5
   da9e8:	f000 fe6d 	bl	db6c6 <__any_on>
   da9ec:	2800      	cmp	r0, #0
   da9ee:	d0f6      	beq.n	da9de <__gethex+0x218>
   da9f0:	f04f 0903 	mov.w	r9, #3
   da9f4:	e000      	b.n	da9f8 <__gethex+0x232>
   da9f6:	4681      	mov	r9, r0
   da9f8:	4639      	mov	r1, r7
   da9fa:	4628      	mov	r0, r5
   da9fc:	f7ff fe98 	bl	da730 <rshift>
   daa00:	443c      	add	r4, r7
   daa02:	e00c      	b.n	daa1e <__gethex+0x258>
   daa04:	da09      	bge.n	daa1a <__gethex+0x254>
   daa06:	1a37      	subs	r7, r6, r0
   daa08:	4629      	mov	r1, r5
   daa0a:	463a      	mov	r2, r7
   daa0c:	9802      	ldr	r0, [sp, #8]
   daa0e:	f000 fc87 	bl	db320 <__lshift>
   daa12:	1be4      	subs	r4, r4, r7
   daa14:	4605      	mov	r5, r0
   daa16:	f100 0a14 	add.w	sl, r0, #20
   daa1a:	f04f 0900 	mov.w	r9, #0
   daa1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daa22:	429c      	cmp	r4, r3
   daa24:	dd08      	ble.n	daa38 <__gethex+0x272>
   daa26:	9802      	ldr	r0, [sp, #8]
   daa28:	4629      	mov	r1, r5
   daa2a:	f000 fab4 	bl	daf96 <_Bfree>
   daa2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daa30:	2300      	movs	r3, #0
   daa32:	6013      	str	r3, [r2, #0]
   daa34:	20a3      	movs	r0, #163	; 0xa3
   daa36:	e0e2      	b.n	dabfe <__gethex+0x438>
   daa38:	f8d8 0004 	ldr.w	r0, [r8, #4]
   daa3c:	4284      	cmp	r4, r0
   daa3e:	da53      	bge.n	daae8 <__gethex+0x322>
   daa40:	1b04      	subs	r4, r0, r4
   daa42:	42a6      	cmp	r6, r4
   daa44:	dc2e      	bgt.n	daaa4 <__gethex+0x2de>
   daa46:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daa4a:	2b02      	cmp	r3, #2
   daa4c:	d01a      	beq.n	daa84 <__gethex+0x2be>
   daa4e:	2b03      	cmp	r3, #3
   daa50:	d01c      	beq.n	daa8c <__gethex+0x2c6>
   daa52:	2b01      	cmp	r3, #1
   daa54:	d11d      	bne.n	daa92 <__gethex+0x2cc>
   daa56:	42a6      	cmp	r6, r4
   daa58:	d11b      	bne.n	daa92 <__gethex+0x2cc>
   daa5a:	2e01      	cmp	r6, #1
   daa5c:	dc0b      	bgt.n	daa76 <__gethex+0x2b0>
   daa5e:	9a06      	ldr	r2, [sp, #24]
   daa60:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daa64:	6013      	str	r3, [r2, #0]
   daa66:	2301      	movs	r3, #1
   daa68:	612b      	str	r3, [r5, #16]
   daa6a:	f8ca 3000 	str.w	r3, [sl]
   daa6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daa70:	2062      	movs	r0, #98	; 0x62
   daa72:	601d      	str	r5, [r3, #0]
   daa74:	e0c3      	b.n	dabfe <__gethex+0x438>
   daa76:	1e71      	subs	r1, r6, #1
   daa78:	4628      	mov	r0, r5
   daa7a:	f000 fe24 	bl	db6c6 <__any_on>
   daa7e:	2800      	cmp	r0, #0
   daa80:	d1ed      	bne.n	daa5e <__gethex+0x298>
   daa82:	e006      	b.n	daa92 <__gethex+0x2cc>
   daa84:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daa86:	2b00      	cmp	r3, #0
   daa88:	d0e9      	beq.n	daa5e <__gethex+0x298>
   daa8a:	e002      	b.n	daa92 <__gethex+0x2cc>
   daa8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daa8e:	2b00      	cmp	r3, #0
   daa90:	d1e5      	bne.n	daa5e <__gethex+0x298>
   daa92:	9802      	ldr	r0, [sp, #8]
   daa94:	4629      	mov	r1, r5
   daa96:	f000 fa7e 	bl	daf96 <_Bfree>
   daa9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daa9c:	2300      	movs	r3, #0
   daa9e:	6013      	str	r3, [r2, #0]
   daaa0:	2050      	movs	r0, #80	; 0x50
   daaa2:	e0ac      	b.n	dabfe <__gethex+0x438>
   daaa4:	1e67      	subs	r7, r4, #1
   daaa6:	f1b9 0f00 	cmp.w	r9, #0
   daaaa:	d106      	bne.n	daaba <__gethex+0x2f4>
   daaac:	b13f      	cbz	r7, daabe <__gethex+0x2f8>
   daaae:	4639      	mov	r1, r7
   daab0:	4628      	mov	r0, r5
   daab2:	f000 fe08 	bl	db6c6 <__any_on>
   daab6:	4681      	mov	r9, r0
   daab8:	e001      	b.n	daabe <__gethex+0x2f8>
   daaba:	f04f 0901 	mov.w	r9, #1
   daabe:	117a      	asrs	r2, r7, #5
   daac0:	2301      	movs	r3, #1
   daac2:	f007 071f 	and.w	r7, r7, #31
   daac6:	fa03 f707 	lsl.w	r7, r3, r7
   daaca:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   daace:	4621      	mov	r1, r4
   daad0:	421f      	tst	r7, r3
   daad2:	4628      	mov	r0, r5
   daad4:	bf18      	it	ne
   daad6:	f049 0902 	orrne.w	r9, r9, #2
   daada:	1b36      	subs	r6, r6, r4
   daadc:	f7ff fe28 	bl	da730 <rshift>
   daae0:	2702      	movs	r7, #2
   daae2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   daae6:	e000      	b.n	daaea <__gethex+0x324>
   daae8:	2701      	movs	r7, #1
   daaea:	f1b9 0f00 	cmp.w	r9, #0
   daaee:	f000 8081 	beq.w	dabf4 <__gethex+0x42e>
   daaf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daaf6:	2b02      	cmp	r3, #2
   daaf8:	d00e      	beq.n	dab18 <__gethex+0x352>
   daafa:	2b03      	cmp	r3, #3
   daafc:	d010      	beq.n	dab20 <__gethex+0x35a>
   daafe:	2b01      	cmp	r3, #1
   dab00:	d176      	bne.n	dabf0 <__gethex+0x42a>
   dab02:	f019 0f02 	tst.w	r9, #2
   dab06:	d073      	beq.n	dabf0 <__gethex+0x42a>
   dab08:	f8da 0000 	ldr.w	r0, [sl]
   dab0c:	ea49 0900 	orr.w	r9, r9, r0
   dab10:	f019 0f01 	tst.w	r9, #1
   dab14:	d107      	bne.n	dab26 <__gethex+0x360>
   dab16:	e06b      	b.n	dabf0 <__gethex+0x42a>
   dab18:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dab1a:	f1c3 0301 	rsb	r3, r3, #1
   dab1e:	9315      	str	r3, [sp, #84]	; 0x54
   dab20:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dab22:	2b00      	cmp	r3, #0
   dab24:	d064      	beq.n	dabf0 <__gethex+0x42a>
   dab26:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dab2a:	f105 0314 	add.w	r3, r5, #20
   dab2e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dab32:	eb03 0109 	add.w	r1, r3, r9
   dab36:	2000      	movs	r0, #0
   dab38:	681a      	ldr	r2, [r3, #0]
   dab3a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dab3e:	d002      	beq.n	dab46 <__gethex+0x380>
   dab40:	3201      	adds	r2, #1
   dab42:	601a      	str	r2, [r3, #0]
   dab44:	e020      	b.n	dab88 <__gethex+0x3c2>
   dab46:	f843 0b04 	str.w	r0, [r3], #4
   dab4a:	4299      	cmp	r1, r3
   dab4c:	d8f4      	bhi.n	dab38 <__gethex+0x372>
   dab4e:	68ab      	ldr	r3, [r5, #8]
   dab50:	459a      	cmp	sl, r3
   dab52:	db12      	blt.n	dab7a <__gethex+0x3b4>
   dab54:	6869      	ldr	r1, [r5, #4]
   dab56:	9802      	ldr	r0, [sp, #8]
   dab58:	3101      	adds	r1, #1
   dab5a:	f000 f9e7 	bl	daf2c <_Balloc>
   dab5e:	692a      	ldr	r2, [r5, #16]
   dab60:	3202      	adds	r2, #2
   dab62:	f105 010c 	add.w	r1, r5, #12
   dab66:	4683      	mov	fp, r0
   dab68:	0092      	lsls	r2, r2, #2
   dab6a:	300c      	adds	r0, #12
   dab6c:	f7fe fbc2 	bl	d92f4 <memcpy>
   dab70:	4629      	mov	r1, r5
   dab72:	9802      	ldr	r0, [sp, #8]
   dab74:	f000 fa0f 	bl	daf96 <_Bfree>
   dab78:	465d      	mov	r5, fp
   dab7a:	692b      	ldr	r3, [r5, #16]
   dab7c:	1c5a      	adds	r2, r3, #1
   dab7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dab82:	612a      	str	r2, [r5, #16]
   dab84:	2201      	movs	r2, #1
   dab86:	615a      	str	r2, [r3, #20]
   dab88:	2f02      	cmp	r7, #2
   dab8a:	f105 0214 	add.w	r2, r5, #20
   dab8e:	d111      	bne.n	dabb4 <__gethex+0x3ee>
   dab90:	f8d8 3000 	ldr.w	r3, [r8]
   dab94:	3b01      	subs	r3, #1
   dab96:	429e      	cmp	r6, r3
   dab98:	d127      	bne.n	dabea <__gethex+0x424>
   dab9a:	1171      	asrs	r1, r6, #5
   dab9c:	2301      	movs	r3, #1
   dab9e:	f006 061f 	and.w	r6, r6, #31
   daba2:	fa03 f606 	lsl.w	r6, r3, r6
   daba6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dabaa:	421e      	tst	r6, r3
   dabac:	bf0c      	ite	eq
   dabae:	2702      	moveq	r7, #2
   dabb0:	2701      	movne	r7, #1
   dabb2:	e01a      	b.n	dabea <__gethex+0x424>
   dabb4:	692b      	ldr	r3, [r5, #16]
   dabb6:	459a      	cmp	sl, r3
   dabb8:	da0a      	bge.n	dabd0 <__gethex+0x40a>
   dabba:	2101      	movs	r1, #1
   dabbc:	4628      	mov	r0, r5
   dabbe:	f7ff fdb7 	bl	da730 <rshift>
   dabc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dabc6:	3401      	adds	r4, #1
   dabc8:	429c      	cmp	r4, r3
   dabca:	f73f af2c 	bgt.w	daa26 <__gethex+0x260>
   dabce:	e00b      	b.n	dabe8 <__gethex+0x422>
   dabd0:	f016 061f 	ands.w	r6, r6, #31
   dabd4:	d008      	beq.n	dabe8 <__gethex+0x422>
   dabd6:	4491      	add	r9, r2
   dabd8:	f1c6 0620 	rsb	r6, r6, #32
   dabdc:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dabe0:	f000 fa69 	bl	db0b6 <__hi0bits>
   dabe4:	42b0      	cmp	r0, r6
   dabe6:	dbe8      	blt.n	dabba <__gethex+0x3f4>
   dabe8:	2701      	movs	r7, #1
   dabea:	f047 0720 	orr.w	r7, r7, #32
   dabee:	e001      	b.n	dabf4 <__gethex+0x42e>
   dabf0:	f047 0710 	orr.w	r7, r7, #16
   dabf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dabf6:	601d      	str	r5, [r3, #0]
   dabf8:	9b06      	ldr	r3, [sp, #24]
   dabfa:	4638      	mov	r0, r7
   dabfc:	601c      	str	r4, [r3, #0]
   dabfe:	b00b      	add	sp, #44	; 0x2c
   dac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dac04 <L_shift>:
   dac04:	f1c2 0208 	rsb	r2, r2, #8
   dac08:	0092      	lsls	r2, r2, #2
   dac0a:	b570      	push	{r4, r5, r6, lr}
   dac0c:	f1c2 0620 	rsb	r6, r2, #32
   dac10:	6843      	ldr	r3, [r0, #4]
   dac12:	6805      	ldr	r5, [r0, #0]
   dac14:	fa03 f406 	lsl.w	r4, r3, r6
   dac18:	432c      	orrs	r4, r5
   dac1a:	40d3      	lsrs	r3, r2
   dac1c:	6004      	str	r4, [r0, #0]
   dac1e:	f840 3f04 	str.w	r3, [r0, #4]!
   dac22:	4288      	cmp	r0, r1
   dac24:	d3f4      	bcc.n	dac10 <L_shift+0xc>
   dac26:	bd70      	pop	{r4, r5, r6, pc}

000dac28 <__match>:
   dac28:	b530      	push	{r4, r5, lr}
   dac2a:	6803      	ldr	r3, [r0, #0]
   dac2c:	f811 4b01 	ldrb.w	r4, [r1], #1
   dac30:	3301      	adds	r3, #1
   dac32:	b14c      	cbz	r4, dac48 <__match+0x20>
   dac34:	781a      	ldrb	r2, [r3, #0]
   dac36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dac3a:	2d19      	cmp	r5, #25
   dac3c:	bf98      	it	ls
   dac3e:	3220      	addls	r2, #32
   dac40:	42a2      	cmp	r2, r4
   dac42:	d0f3      	beq.n	dac2c <__match+0x4>
   dac44:	2000      	movs	r0, #0
   dac46:	bd30      	pop	{r4, r5, pc}
   dac48:	6003      	str	r3, [r0, #0]
   dac4a:	2001      	movs	r0, #1
   dac4c:	bd30      	pop	{r4, r5, pc}

000dac4e <__hexnan>:
   dac4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac52:	680b      	ldr	r3, [r1, #0]
   dac54:	f8d0 b000 	ldr.w	fp, [r0]
   dac58:	115e      	asrs	r6, r3, #5
   dac5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dac5e:	f013 031f 	ands.w	r3, r3, #31
   dac62:	b085      	sub	sp, #20
   dac64:	bf18      	it	ne
   dac66:	3604      	addne	r6, #4
   dac68:	1f35      	subs	r5, r6, #4
   dac6a:	4617      	mov	r7, r2
   dac6c:	2200      	movs	r2, #0
   dac6e:	4682      	mov	sl, r0
   dac70:	9301      	str	r3, [sp, #4]
   dac72:	f846 2c04 	str.w	r2, [r6, #-4]
   dac76:	46a8      	mov	r8, r5
   dac78:	462c      	mov	r4, r5
   dac7a:	9200      	str	r2, [sp, #0]
   dac7c:	4691      	mov	r9, r2
   dac7e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dac82:	2900      	cmp	r1, #0
   dac84:	d03c      	beq.n	dad00 <__hexnan+0xb2>
   dac86:	4608      	mov	r0, r1
   dac88:	9203      	str	r2, [sp, #12]
   dac8a:	9102      	str	r1, [sp, #8]
   dac8c:	f7ff fd86 	bl	da79c <__hexdig_fun>
   dac90:	9a03      	ldr	r2, [sp, #12]
   dac92:	bb00      	cbnz	r0, dacd6 <__hexnan+0x88>
   dac94:	9902      	ldr	r1, [sp, #8]
   dac96:	2920      	cmp	r1, #32
   dac98:	d816      	bhi.n	dacc8 <__hexnan+0x7a>
   dac9a:	9b00      	ldr	r3, [sp, #0]
   dac9c:	4599      	cmp	r9, r3
   dac9e:	ddee      	ble.n	dac7e <__hexnan+0x30>
   daca0:	4544      	cmp	r4, r8
   daca2:	d205      	bcs.n	dacb0 <__hexnan+0x62>
   daca4:	2a07      	cmp	r2, #7
   daca6:	dc03      	bgt.n	dacb0 <__hexnan+0x62>
   daca8:	4641      	mov	r1, r8
   dacaa:	4620      	mov	r0, r4
   dacac:	f7ff ffaa 	bl	dac04 <L_shift>
   dacb0:	42bc      	cmp	r4, r7
   dacb2:	d923      	bls.n	dacfc <__hexnan+0xae>
   dacb4:	2300      	movs	r3, #0
   dacb6:	f1a4 0804 	sub.w	r8, r4, #4
   dacba:	f844 3c04 	str.w	r3, [r4, #-4]
   dacbe:	f8cd 9000 	str.w	r9, [sp]
   dacc2:	4644      	mov	r4, r8
   dacc4:	461a      	mov	r2, r3
   dacc6:	e7da      	b.n	dac7e <__hexnan+0x30>
   dacc8:	2929      	cmp	r1, #41	; 0x29
   dacca:	d148      	bne.n	dad5e <__hexnan+0x110>
   daccc:	f10b 0301 	add.w	r3, fp, #1
   dacd0:	f8ca 3000 	str.w	r3, [sl]
   dacd4:	e014      	b.n	dad00 <__hexnan+0xb2>
   dacd6:	3201      	adds	r2, #1
   dacd8:	2a08      	cmp	r2, #8
   dacda:	f109 0901 	add.w	r9, r9, #1
   dacde:	dd06      	ble.n	dacee <__hexnan+0xa0>
   dace0:	42bc      	cmp	r4, r7
   dace2:	d9cc      	bls.n	dac7e <__hexnan+0x30>
   dace4:	2300      	movs	r3, #0
   dace6:	f844 3c04 	str.w	r3, [r4, #-4]
   dacea:	2201      	movs	r2, #1
   dacec:	3c04      	subs	r4, #4
   dacee:	6821      	ldr	r1, [r4, #0]
   dacf0:	f000 000f 	and.w	r0, r0, #15
   dacf4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dacf8:	6020      	str	r0, [r4, #0]
   dacfa:	e7c0      	b.n	dac7e <__hexnan+0x30>
   dacfc:	2208      	movs	r2, #8
   dacfe:	e7be      	b.n	dac7e <__hexnan+0x30>
   dad00:	f1b9 0f00 	cmp.w	r9, #0
   dad04:	d02b      	beq.n	dad5e <__hexnan+0x110>
   dad06:	4544      	cmp	r4, r8
   dad08:	d205      	bcs.n	dad16 <__hexnan+0xc8>
   dad0a:	2a07      	cmp	r2, #7
   dad0c:	dc03      	bgt.n	dad16 <__hexnan+0xc8>
   dad0e:	4641      	mov	r1, r8
   dad10:	4620      	mov	r0, r4
   dad12:	f7ff ff77 	bl	dac04 <L_shift>
   dad16:	42bc      	cmp	r4, r7
   dad18:	d90c      	bls.n	dad34 <__hexnan+0xe6>
   dad1a:	463b      	mov	r3, r7
   dad1c:	f854 2b04 	ldr.w	r2, [r4], #4
   dad20:	f843 2b04 	str.w	r2, [r3], #4
   dad24:	42a5      	cmp	r5, r4
   dad26:	d2f9      	bcs.n	dad1c <__hexnan+0xce>
   dad28:	2200      	movs	r2, #0
   dad2a:	f843 2b04 	str.w	r2, [r3], #4
   dad2e:	429d      	cmp	r5, r3
   dad30:	d2fb      	bcs.n	dad2a <__hexnan+0xdc>
   dad32:	e00b      	b.n	dad4c <__hexnan+0xfe>
   dad34:	9b01      	ldr	r3, [sp, #4]
   dad36:	b14b      	cbz	r3, dad4c <__hexnan+0xfe>
   dad38:	f1c3 0220 	rsb	r2, r3, #32
   dad3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dad40:	40d3      	lsrs	r3, r2
   dad42:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dad46:	4013      	ands	r3, r2
   dad48:	f846 3c04 	str.w	r3, [r6, #-4]
   dad4c:	682b      	ldr	r3, [r5, #0]
   dad4e:	b943      	cbnz	r3, dad62 <__hexnan+0x114>
   dad50:	42bd      	cmp	r5, r7
   dad52:	d102      	bne.n	dad5a <__hexnan+0x10c>
   dad54:	2301      	movs	r3, #1
   dad56:	602b      	str	r3, [r5, #0]
   dad58:	e003      	b.n	dad62 <__hexnan+0x114>
   dad5a:	3d04      	subs	r5, #4
   dad5c:	e7f6      	b.n	dad4c <__hexnan+0xfe>
   dad5e:	2004      	movs	r0, #4
   dad60:	e000      	b.n	dad64 <__hexnan+0x116>
   dad62:	2005      	movs	r0, #5
   dad64:	b005      	add	sp, #20
   dad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dad6c <_findenv_r>:
   dad6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad70:	4607      	mov	r7, r0
   dad72:	468b      	mov	fp, r1
   dad74:	4690      	mov	r8, r2
   dad76:	f000 fcdd 	bl	db734 <__env_lock>
   dad7a:	4b19      	ldr	r3, [pc, #100]	; (dade0 <_findenv_r+0x74>)
   dad7c:	681d      	ldr	r5, [r3, #0]
   dad7e:	469a      	mov	sl, r3
   dad80:	b13d      	cbz	r5, dad92 <_findenv_r+0x26>
   dad82:	465c      	mov	r4, fp
   dad84:	4623      	mov	r3, r4
   dad86:	f813 2b01 	ldrb.w	r2, [r3], #1
   dad8a:	b142      	cbz	r2, dad9e <_findenv_r+0x32>
   dad8c:	2a3d      	cmp	r2, #61	; 0x3d
   dad8e:	461c      	mov	r4, r3
   dad90:	d1f8      	bne.n	dad84 <_findenv_r+0x18>
   dad92:	4638      	mov	r0, r7
   dad94:	f000 fccf 	bl	db736 <__env_unlock>
   dad98:	2000      	movs	r0, #0
   dad9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dad9e:	ebcb 0404 	rsb	r4, fp, r4
   dada2:	46a9      	mov	r9, r5
   dada4:	f859 0b04 	ldr.w	r0, [r9], #4
   dada8:	2800      	cmp	r0, #0
   dadaa:	d0f2      	beq.n	dad92 <_findenv_r+0x26>
   dadac:	4622      	mov	r2, r4
   dadae:	4659      	mov	r1, fp
   dadb0:	f7fe fb11 	bl	d93d6 <strncmp>
   dadb4:	b988      	cbnz	r0, dadda <_findenv_r+0x6e>
   dadb6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dadba:	191e      	adds	r6, r3, r4
   dadbc:	5d1b      	ldrb	r3, [r3, r4]
   dadbe:	2b3d      	cmp	r3, #61	; 0x3d
   dadc0:	d10b      	bne.n	dadda <_findenv_r+0x6e>
   dadc2:	f8da 3000 	ldr.w	r3, [sl]
   dadc6:	1aed      	subs	r5, r5, r3
   dadc8:	10ad      	asrs	r5, r5, #2
   dadca:	4638      	mov	r0, r7
   dadcc:	f8c8 5000 	str.w	r5, [r8]
   dadd0:	f000 fcb1 	bl	db736 <__env_unlock>
   dadd4:	1c70      	adds	r0, r6, #1
   dadd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dadda:	464d      	mov	r5, r9
   daddc:	e7e1      	b.n	dada2 <_findenv_r+0x36>
   dadde:	bf00      	nop
   dade0:	2003e1ac 	.word	0x2003e1ac

000dade4 <_getenv_r>:
   dade4:	b507      	push	{r0, r1, r2, lr}
   dade6:	aa01      	add	r2, sp, #4
   dade8:	f7ff ffc0 	bl	dad6c <_findenv_r>
   dadec:	b003      	add	sp, #12
   dadee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dadf4 <__gettzinfo>:
   dadf4:	4800      	ldr	r0, [pc, #0]	; (dadf8 <__gettzinfo+0x4>)
   dadf6:	4770      	bx	lr
   dadf8:	2003e16c 	.word	0x2003e16c

000dadfc <gmtime_r>:
   dadfc:	6802      	ldr	r2, [r0, #0]
   dadfe:	4b47      	ldr	r3, [pc, #284]	; (daf1c <gmtime_r+0x120>)
   dae00:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae02:	fb92 f4f3 	sdiv	r4, r2, r3
   dae06:	fb03 2214 	mls	r2, r3, r4, r2
   dae0a:	2a00      	cmp	r2, #0
   dae0c:	bfbc      	itt	lt
   dae0e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dae12:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dae16:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dae1a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dae1e:	fb92 f3f0 	sdiv	r3, r2, r0
   dae22:	fb00 2213 	mls	r2, r0, r3, r2
   dae26:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dae2a:	bfac      	ite	ge
   dae2c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dae30:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dae34:	608b      	str	r3, [r1, #8]
   dae36:	fb92 f3f0 	sdiv	r3, r2, r0
   dae3a:	fb00 2213 	mls	r2, r0, r3, r2
   dae3e:	604b      	str	r3, [r1, #4]
   dae40:	600a      	str	r2, [r1, #0]
   dae42:	2307      	movs	r3, #7
   dae44:	1ce2      	adds	r2, r4, #3
   dae46:	fb92 f3f3 	sdiv	r3, r2, r3
   dae4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dae4e:	1ad3      	subs	r3, r2, r3
   dae50:	618b      	str	r3, [r1, #24]
   dae52:	4b33      	ldr	r3, [pc, #204]	; (daf20 <gmtime_r+0x124>)
   dae54:	4d33      	ldr	r5, [pc, #204]	; (daf24 <gmtime_r+0x128>)
   dae56:	fb94 f5f5 	sdiv	r5, r4, r5
   dae5a:	fb03 4405 	mla	r4, r3, r5, r4
   dae5e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dae62:	fbb4 f2f2 	udiv	r2, r4, r2
   dae66:	4422      	add	r2, r4
   dae68:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dae6c:	fbb4 f3f7 	udiv	r3, r4, r7
   dae70:	1ad2      	subs	r2, r2, r3
   dae72:	482d      	ldr	r0, [pc, #180]	; (daf28 <gmtime_r+0x12c>)
   dae74:	fbb4 f0f0 	udiv	r0, r4, r0
   dae78:	f648 6694 	movw	r6, #36500	; 0x8e94
   dae7c:	1a13      	subs	r3, r2, r0
   dae7e:	fbb3 f6f6 	udiv	r6, r3, r6
   dae82:	4434      	add	r4, r6
   dae84:	f240 126d 	movw	r2, #365	; 0x16d
   dae88:	fbb3 f0f2 	udiv	r0, r3, r2
   dae8c:	fbb3 f3f7 	udiv	r3, r3, r7
   dae90:	1ae3      	subs	r3, r4, r3
   dae92:	fb02 3310 	mls	r3, r2, r0, r3
   dae96:	2499      	movs	r4, #153	; 0x99
   dae98:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dae9c:	3202      	adds	r2, #2
   dae9e:	fbb2 f2f4 	udiv	r2, r2, r4
   daea2:	2a0a      	cmp	r2, #10
   daea4:	fb04 f402 	mul.w	r4, r4, r2
   daea8:	f104 0602 	add.w	r6, r4, #2
   daeac:	f04f 0405 	mov.w	r4, #5
   daeb0:	fbb6 f4f4 	udiv	r4, r6, r4
   daeb4:	bf34      	ite	cc
   daeb6:	2602      	movcc	r6, #2
   daeb8:	f06f 0609 	mvncs.w	r6, #9
   daebc:	4416      	add	r6, r2
   daebe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daec2:	fb02 0505 	mla	r5, r2, r5, r0
   daec6:	1c5f      	adds	r7, r3, #1
   daec8:	2e01      	cmp	r6, #1
   daeca:	bf98      	it	ls
   daecc:	3501      	addls	r5, #1
   daece:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   daed2:	eba7 0704 	sub.w	r7, r7, r4
   daed6:	d302      	bcc.n	daede <gmtime_r+0xe2>
   daed8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   daedc:	e014      	b.n	daf08 <gmtime_r+0x10c>
   daede:	0782      	lsls	r2, r0, #30
   daee0:	d105      	bne.n	daeee <gmtime_r+0xf2>
   daee2:	2464      	movs	r4, #100	; 0x64
   daee4:	fbb0 f2f4 	udiv	r2, r0, r4
   daee8:	fb04 0212 	mls	r2, r4, r2, r0
   daeec:	b94a      	cbnz	r2, daf02 <gmtime_r+0x106>
   daeee:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daef2:	fbb0 f4f2 	udiv	r4, r0, r2
   daef6:	fb02 0014 	mls	r0, r2, r4, r0
   daefa:	fab0 f280 	clz	r2, r0
   daefe:	0952      	lsrs	r2, r2, #5
   daf00:	e000      	b.n	daf04 <gmtime_r+0x108>
   daf02:	2201      	movs	r2, #1
   daf04:	333b      	adds	r3, #59	; 0x3b
   daf06:	441a      	add	r2, r3
   daf08:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   daf0c:	2300      	movs	r3, #0
   daf0e:	61ca      	str	r2, [r1, #28]
   daf10:	614d      	str	r5, [r1, #20]
   daf12:	610e      	str	r6, [r1, #16]
   daf14:	60cf      	str	r7, [r1, #12]
   daf16:	620b      	str	r3, [r1, #32]
   daf18:	4608      	mov	r0, r1
   daf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daf1c:	00015180 	.word	0x00015180
   daf20:	fffdc54f 	.word	0xfffdc54f
   daf24:	00023ab1 	.word	0x00023ab1
   daf28:	00023ab0 	.word	0x00023ab0

000daf2c <_Balloc>:
   daf2c:	b570      	push	{r4, r5, r6, lr}
   daf2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   daf30:	4604      	mov	r4, r0
   daf32:	460e      	mov	r6, r1
   daf34:	b93d      	cbnz	r5, daf46 <_Balloc+0x1a>
   daf36:	2010      	movs	r0, #16
   daf38:	f7fb fc66 	bl	d6808 <malloc>
   daf3c:	6260      	str	r0, [r4, #36]	; 0x24
   daf3e:	6045      	str	r5, [r0, #4]
   daf40:	6085      	str	r5, [r0, #8]
   daf42:	6005      	str	r5, [r0, #0]
   daf44:	60c5      	str	r5, [r0, #12]
   daf46:	6a65      	ldr	r5, [r4, #36]	; 0x24
   daf48:	68eb      	ldr	r3, [r5, #12]
   daf4a:	b143      	cbz	r3, daf5e <_Balloc+0x32>
   daf4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daf4e:	68db      	ldr	r3, [r3, #12]
   daf50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   daf54:	b178      	cbz	r0, daf76 <_Balloc+0x4a>
   daf56:	6802      	ldr	r2, [r0, #0]
   daf58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   daf5c:	e017      	b.n	daf8e <_Balloc+0x62>
   daf5e:	2221      	movs	r2, #33	; 0x21
   daf60:	2104      	movs	r1, #4
   daf62:	4620      	mov	r0, r4
   daf64:	f000 fbd1 	bl	db70a <_calloc_r>
   daf68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daf6a:	60e8      	str	r0, [r5, #12]
   daf6c:	68db      	ldr	r3, [r3, #12]
   daf6e:	2b00      	cmp	r3, #0
   daf70:	d1ec      	bne.n	daf4c <_Balloc+0x20>
   daf72:	2000      	movs	r0, #0
   daf74:	bd70      	pop	{r4, r5, r6, pc}
   daf76:	2101      	movs	r1, #1
   daf78:	fa01 f506 	lsl.w	r5, r1, r6
   daf7c:	1d6a      	adds	r2, r5, #5
   daf7e:	0092      	lsls	r2, r2, #2
   daf80:	4620      	mov	r0, r4
   daf82:	f000 fbc2 	bl	db70a <_calloc_r>
   daf86:	2800      	cmp	r0, #0
   daf88:	d0f3      	beq.n	daf72 <_Balloc+0x46>
   daf8a:	6046      	str	r6, [r0, #4]
   daf8c:	6085      	str	r5, [r0, #8]
   daf8e:	2300      	movs	r3, #0
   daf90:	6103      	str	r3, [r0, #16]
   daf92:	60c3      	str	r3, [r0, #12]
   daf94:	bd70      	pop	{r4, r5, r6, pc}

000daf96 <_Bfree>:
   daf96:	b570      	push	{r4, r5, r6, lr}
   daf98:	6a44      	ldr	r4, [r0, #36]	; 0x24
   daf9a:	4606      	mov	r6, r0
   daf9c:	460d      	mov	r5, r1
   daf9e:	b93c      	cbnz	r4, dafb0 <_Bfree+0x1a>
   dafa0:	2010      	movs	r0, #16
   dafa2:	f7fb fc31 	bl	d6808 <malloc>
   dafa6:	6270      	str	r0, [r6, #36]	; 0x24
   dafa8:	6044      	str	r4, [r0, #4]
   dafaa:	6084      	str	r4, [r0, #8]
   dafac:	6004      	str	r4, [r0, #0]
   dafae:	60c4      	str	r4, [r0, #12]
   dafb0:	b13d      	cbz	r5, dafc2 <_Bfree+0x2c>
   dafb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dafb4:	686a      	ldr	r2, [r5, #4]
   dafb6:	68db      	ldr	r3, [r3, #12]
   dafb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dafbc:	6029      	str	r1, [r5, #0]
   dafbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dafc2:	bd70      	pop	{r4, r5, r6, pc}

000dafc4 <__multadd>:
   dafc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dafc8:	690d      	ldr	r5, [r1, #16]
   dafca:	461f      	mov	r7, r3
   dafcc:	4606      	mov	r6, r0
   dafce:	460c      	mov	r4, r1
   dafd0:	f101 0e14 	add.w	lr, r1, #20
   dafd4:	2300      	movs	r3, #0
   dafd6:	f8de 0000 	ldr.w	r0, [lr]
   dafda:	b281      	uxth	r1, r0
   dafdc:	fb02 7101 	mla	r1, r2, r1, r7
   dafe0:	0c0f      	lsrs	r7, r1, #16
   dafe2:	0c00      	lsrs	r0, r0, #16
   dafe4:	fb02 7000 	mla	r0, r2, r0, r7
   dafe8:	b289      	uxth	r1, r1
   dafea:	3301      	adds	r3, #1
   dafec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   daff0:	429d      	cmp	r5, r3
   daff2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   daff6:	f84e 1b04 	str.w	r1, [lr], #4
   daffa:	dcec      	bgt.n	dafd6 <__multadd+0x12>
   daffc:	b1d7      	cbz	r7, db034 <__multadd+0x70>
   daffe:	68a3      	ldr	r3, [r4, #8]
   db000:	429d      	cmp	r5, r3
   db002:	db12      	blt.n	db02a <__multadd+0x66>
   db004:	6861      	ldr	r1, [r4, #4]
   db006:	4630      	mov	r0, r6
   db008:	3101      	adds	r1, #1
   db00a:	f7ff ff8f 	bl	daf2c <_Balloc>
   db00e:	6922      	ldr	r2, [r4, #16]
   db010:	3202      	adds	r2, #2
   db012:	f104 010c 	add.w	r1, r4, #12
   db016:	4680      	mov	r8, r0
   db018:	0092      	lsls	r2, r2, #2
   db01a:	300c      	adds	r0, #12
   db01c:	f7fe f96a 	bl	d92f4 <memcpy>
   db020:	4621      	mov	r1, r4
   db022:	4630      	mov	r0, r6
   db024:	f7ff ffb7 	bl	daf96 <_Bfree>
   db028:	4644      	mov	r4, r8
   db02a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db02e:	3501      	adds	r5, #1
   db030:	615f      	str	r7, [r3, #20]
   db032:	6125      	str	r5, [r4, #16]
   db034:	4620      	mov	r0, r4
   db036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db03a <__s2b>:
   db03a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db03e:	460c      	mov	r4, r1
   db040:	4615      	mov	r5, r2
   db042:	461f      	mov	r7, r3
   db044:	2209      	movs	r2, #9
   db046:	3308      	adds	r3, #8
   db048:	4606      	mov	r6, r0
   db04a:	fb93 f3f2 	sdiv	r3, r3, r2
   db04e:	2100      	movs	r1, #0
   db050:	2201      	movs	r2, #1
   db052:	429a      	cmp	r2, r3
   db054:	da02      	bge.n	db05c <__s2b+0x22>
   db056:	0052      	lsls	r2, r2, #1
   db058:	3101      	adds	r1, #1
   db05a:	e7fa      	b.n	db052 <__s2b+0x18>
   db05c:	4630      	mov	r0, r6
   db05e:	f7ff ff65 	bl	daf2c <_Balloc>
   db062:	9b08      	ldr	r3, [sp, #32]
   db064:	6143      	str	r3, [r0, #20]
   db066:	2d09      	cmp	r5, #9
   db068:	f04f 0301 	mov.w	r3, #1
   db06c:	6103      	str	r3, [r0, #16]
   db06e:	dd11      	ble.n	db094 <__s2b+0x5a>
   db070:	f104 0809 	add.w	r8, r4, #9
   db074:	46c1      	mov	r9, r8
   db076:	442c      	add	r4, r5
   db078:	f819 3b01 	ldrb.w	r3, [r9], #1
   db07c:	4601      	mov	r1, r0
   db07e:	3b30      	subs	r3, #48	; 0x30
   db080:	220a      	movs	r2, #10
   db082:	4630      	mov	r0, r6
   db084:	f7ff ff9e 	bl	dafc4 <__multadd>
   db088:	45a1      	cmp	r9, r4
   db08a:	d1f5      	bne.n	db078 <__s2b+0x3e>
   db08c:	eb08 0405 	add.w	r4, r8, r5
   db090:	3c08      	subs	r4, #8
   db092:	e001      	b.n	db098 <__s2b+0x5e>
   db094:	340a      	adds	r4, #10
   db096:	2509      	movs	r5, #9
   db098:	1b2d      	subs	r5, r5, r4
   db09a:	1963      	adds	r3, r4, r5
   db09c:	429f      	cmp	r7, r3
   db09e:	dd08      	ble.n	db0b2 <__s2b+0x78>
   db0a0:	f814 3b01 	ldrb.w	r3, [r4], #1
   db0a4:	4601      	mov	r1, r0
   db0a6:	3b30      	subs	r3, #48	; 0x30
   db0a8:	220a      	movs	r2, #10
   db0aa:	4630      	mov	r0, r6
   db0ac:	f7ff ff8a 	bl	dafc4 <__multadd>
   db0b0:	e7f3      	b.n	db09a <__s2b+0x60>
   db0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db0b6 <__hi0bits>:
   db0b6:	0c03      	lsrs	r3, r0, #16
   db0b8:	041b      	lsls	r3, r3, #16
   db0ba:	b913      	cbnz	r3, db0c2 <__hi0bits+0xc>
   db0bc:	0400      	lsls	r0, r0, #16
   db0be:	2310      	movs	r3, #16
   db0c0:	e000      	b.n	db0c4 <__hi0bits+0xe>
   db0c2:	2300      	movs	r3, #0
   db0c4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db0c8:	bf04      	itt	eq
   db0ca:	0200      	lsleq	r0, r0, #8
   db0cc:	3308      	addeq	r3, #8
   db0ce:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db0d2:	bf04      	itt	eq
   db0d4:	0100      	lsleq	r0, r0, #4
   db0d6:	3304      	addeq	r3, #4
   db0d8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db0dc:	bf04      	itt	eq
   db0de:	0080      	lsleq	r0, r0, #2
   db0e0:	3302      	addeq	r3, #2
   db0e2:	2800      	cmp	r0, #0
   db0e4:	db03      	blt.n	db0ee <__hi0bits+0x38>
   db0e6:	0042      	lsls	r2, r0, #1
   db0e8:	d503      	bpl.n	db0f2 <__hi0bits+0x3c>
   db0ea:	1c58      	adds	r0, r3, #1
   db0ec:	4770      	bx	lr
   db0ee:	4618      	mov	r0, r3
   db0f0:	4770      	bx	lr
   db0f2:	2020      	movs	r0, #32
   db0f4:	4770      	bx	lr

000db0f6 <__lo0bits>:
   db0f6:	6803      	ldr	r3, [r0, #0]
   db0f8:	f013 0207 	ands.w	r2, r3, #7
   db0fc:	d00b      	beq.n	db116 <__lo0bits+0x20>
   db0fe:	07d9      	lsls	r1, r3, #31
   db100:	d422      	bmi.n	db148 <__lo0bits+0x52>
   db102:	079a      	lsls	r2, r3, #30
   db104:	bf4b      	itete	mi
   db106:	085b      	lsrmi	r3, r3, #1
   db108:	089b      	lsrpl	r3, r3, #2
   db10a:	6003      	strmi	r3, [r0, #0]
   db10c:	6003      	strpl	r3, [r0, #0]
   db10e:	bf4c      	ite	mi
   db110:	2001      	movmi	r0, #1
   db112:	2002      	movpl	r0, #2
   db114:	4770      	bx	lr
   db116:	b299      	uxth	r1, r3
   db118:	b909      	cbnz	r1, db11e <__lo0bits+0x28>
   db11a:	0c1b      	lsrs	r3, r3, #16
   db11c:	2210      	movs	r2, #16
   db11e:	f013 0fff 	tst.w	r3, #255	; 0xff
   db122:	bf04      	itt	eq
   db124:	0a1b      	lsreq	r3, r3, #8
   db126:	3208      	addeq	r2, #8
   db128:	0719      	lsls	r1, r3, #28
   db12a:	bf04      	itt	eq
   db12c:	091b      	lsreq	r3, r3, #4
   db12e:	3204      	addeq	r2, #4
   db130:	0799      	lsls	r1, r3, #30
   db132:	bf04      	itt	eq
   db134:	089b      	lsreq	r3, r3, #2
   db136:	3202      	addeq	r2, #2
   db138:	07d9      	lsls	r1, r3, #31
   db13a:	d402      	bmi.n	db142 <__lo0bits+0x4c>
   db13c:	085b      	lsrs	r3, r3, #1
   db13e:	d005      	beq.n	db14c <__lo0bits+0x56>
   db140:	3201      	adds	r2, #1
   db142:	6003      	str	r3, [r0, #0]
   db144:	4610      	mov	r0, r2
   db146:	4770      	bx	lr
   db148:	2000      	movs	r0, #0
   db14a:	4770      	bx	lr
   db14c:	2020      	movs	r0, #32
   db14e:	4770      	bx	lr

000db150 <__i2b>:
   db150:	b510      	push	{r4, lr}
   db152:	460c      	mov	r4, r1
   db154:	2101      	movs	r1, #1
   db156:	f7ff fee9 	bl	daf2c <_Balloc>
   db15a:	2201      	movs	r2, #1
   db15c:	6144      	str	r4, [r0, #20]
   db15e:	6102      	str	r2, [r0, #16]
   db160:	bd10      	pop	{r4, pc}

000db162 <__multiply>:
   db162:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db166:	4614      	mov	r4, r2
   db168:	690a      	ldr	r2, [r1, #16]
   db16a:	6923      	ldr	r3, [r4, #16]
   db16c:	429a      	cmp	r2, r3
   db16e:	bfb8      	it	lt
   db170:	460b      	movlt	r3, r1
   db172:	4688      	mov	r8, r1
   db174:	bfbc      	itt	lt
   db176:	46a0      	movlt	r8, r4
   db178:	461c      	movlt	r4, r3
   db17a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db17e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db182:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db186:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db18a:	eb07 0609 	add.w	r6, r7, r9
   db18e:	429e      	cmp	r6, r3
   db190:	bfc8      	it	gt
   db192:	3101      	addgt	r1, #1
   db194:	f7ff feca 	bl	daf2c <_Balloc>
   db198:	f100 0514 	add.w	r5, r0, #20
   db19c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db1a0:	462b      	mov	r3, r5
   db1a2:	2200      	movs	r2, #0
   db1a4:	4563      	cmp	r3, ip
   db1a6:	d202      	bcs.n	db1ae <__multiply+0x4c>
   db1a8:	f843 2b04 	str.w	r2, [r3], #4
   db1ac:	e7fa      	b.n	db1a4 <__multiply+0x42>
   db1ae:	f104 0214 	add.w	r2, r4, #20
   db1b2:	f108 0114 	add.w	r1, r8, #20
   db1b6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db1ba:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db1be:	9300      	str	r3, [sp, #0]
   db1c0:	9b00      	ldr	r3, [sp, #0]
   db1c2:	9201      	str	r2, [sp, #4]
   db1c4:	4293      	cmp	r3, r2
   db1c6:	d957      	bls.n	db278 <__multiply+0x116>
   db1c8:	f8b2 b000 	ldrh.w	fp, [r2]
   db1cc:	f1bb 0f00 	cmp.w	fp, #0
   db1d0:	d023      	beq.n	db21a <__multiply+0xb8>
   db1d2:	4689      	mov	r9, r1
   db1d4:	46ae      	mov	lr, r5
   db1d6:	f04f 0800 	mov.w	r8, #0
   db1da:	f859 4b04 	ldr.w	r4, [r9], #4
   db1de:	f8be a000 	ldrh.w	sl, [lr]
   db1e2:	b2a3      	uxth	r3, r4
   db1e4:	fb0b a303 	mla	r3, fp, r3, sl
   db1e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db1ec:	f8de 4000 	ldr.w	r4, [lr]
   db1f0:	4443      	add	r3, r8
   db1f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db1f6:	fb0b 840a 	mla	r4, fp, sl, r8
   db1fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db1fe:	46f2      	mov	sl, lr
   db200:	b29b      	uxth	r3, r3
   db202:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db206:	454f      	cmp	r7, r9
   db208:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db20c:	f84a 3b04 	str.w	r3, [sl], #4
   db210:	d901      	bls.n	db216 <__multiply+0xb4>
   db212:	46d6      	mov	lr, sl
   db214:	e7e1      	b.n	db1da <__multiply+0x78>
   db216:	f8ce 8004 	str.w	r8, [lr, #4]
   db21a:	9b01      	ldr	r3, [sp, #4]
   db21c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db220:	3204      	adds	r2, #4
   db222:	f1ba 0f00 	cmp.w	sl, #0
   db226:	d021      	beq.n	db26c <__multiply+0x10a>
   db228:	682b      	ldr	r3, [r5, #0]
   db22a:	462c      	mov	r4, r5
   db22c:	4689      	mov	r9, r1
   db22e:	f04f 0800 	mov.w	r8, #0
   db232:	f8b9 e000 	ldrh.w	lr, [r9]
   db236:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db23a:	fb0a be0e 	mla	lr, sl, lr, fp
   db23e:	44f0      	add	r8, lr
   db240:	46a3      	mov	fp, r4
   db242:	b29b      	uxth	r3, r3
   db244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db248:	f84b 3b04 	str.w	r3, [fp], #4
   db24c:	f859 3b04 	ldr.w	r3, [r9], #4
   db250:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db254:	0c1b      	lsrs	r3, r3, #16
   db256:	fb0a e303 	mla	r3, sl, r3, lr
   db25a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db25e:	454f      	cmp	r7, r9
   db260:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db264:	d901      	bls.n	db26a <__multiply+0x108>
   db266:	465c      	mov	r4, fp
   db268:	e7e3      	b.n	db232 <__multiply+0xd0>
   db26a:	6063      	str	r3, [r4, #4]
   db26c:	3504      	adds	r5, #4
   db26e:	e7a7      	b.n	db1c0 <__multiply+0x5e>
   db270:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db274:	b913      	cbnz	r3, db27c <__multiply+0x11a>
   db276:	3e01      	subs	r6, #1
   db278:	2e00      	cmp	r6, #0
   db27a:	dcf9      	bgt.n	db270 <__multiply+0x10e>
   db27c:	6106      	str	r6, [r0, #16]
   db27e:	b003      	add	sp, #12
   db280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db284 <__pow5mult>:
   db284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db288:	4615      	mov	r5, r2
   db28a:	f012 0203 	ands.w	r2, r2, #3
   db28e:	4606      	mov	r6, r0
   db290:	460f      	mov	r7, r1
   db292:	d007      	beq.n	db2a4 <__pow5mult+0x20>
   db294:	3a01      	subs	r2, #1
   db296:	4c21      	ldr	r4, [pc, #132]	; (db31c <__pow5mult+0x98>)
   db298:	2300      	movs	r3, #0
   db29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db29e:	f7ff fe91 	bl	dafc4 <__multadd>
   db2a2:	4607      	mov	r7, r0
   db2a4:	10ad      	asrs	r5, r5, #2
   db2a6:	d036      	beq.n	db316 <__pow5mult+0x92>
   db2a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db2aa:	b93c      	cbnz	r4, db2bc <__pow5mult+0x38>
   db2ac:	2010      	movs	r0, #16
   db2ae:	f7fb faab 	bl	d6808 <malloc>
   db2b2:	6270      	str	r0, [r6, #36]	; 0x24
   db2b4:	6044      	str	r4, [r0, #4]
   db2b6:	6084      	str	r4, [r0, #8]
   db2b8:	6004      	str	r4, [r0, #0]
   db2ba:	60c4      	str	r4, [r0, #12]
   db2bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db2c4:	b94c      	cbnz	r4, db2da <__pow5mult+0x56>
   db2c6:	f240 2171 	movw	r1, #625	; 0x271
   db2ca:	4630      	mov	r0, r6
   db2cc:	f7ff ff40 	bl	db150 <__i2b>
   db2d0:	2300      	movs	r3, #0
   db2d2:	f8c8 0008 	str.w	r0, [r8, #8]
   db2d6:	4604      	mov	r4, r0
   db2d8:	6003      	str	r3, [r0, #0]
   db2da:	f04f 0800 	mov.w	r8, #0
   db2de:	07eb      	lsls	r3, r5, #31
   db2e0:	d50a      	bpl.n	db2f8 <__pow5mult+0x74>
   db2e2:	4639      	mov	r1, r7
   db2e4:	4622      	mov	r2, r4
   db2e6:	4630      	mov	r0, r6
   db2e8:	f7ff ff3b 	bl	db162 <__multiply>
   db2ec:	4639      	mov	r1, r7
   db2ee:	4681      	mov	r9, r0
   db2f0:	4630      	mov	r0, r6
   db2f2:	f7ff fe50 	bl	daf96 <_Bfree>
   db2f6:	464f      	mov	r7, r9
   db2f8:	106d      	asrs	r5, r5, #1
   db2fa:	d00c      	beq.n	db316 <__pow5mult+0x92>
   db2fc:	6820      	ldr	r0, [r4, #0]
   db2fe:	b108      	cbz	r0, db304 <__pow5mult+0x80>
   db300:	4604      	mov	r4, r0
   db302:	e7ec      	b.n	db2de <__pow5mult+0x5a>
   db304:	4622      	mov	r2, r4
   db306:	4621      	mov	r1, r4
   db308:	4630      	mov	r0, r6
   db30a:	f7ff ff2a 	bl	db162 <__multiply>
   db30e:	6020      	str	r0, [r4, #0]
   db310:	f8c0 8000 	str.w	r8, [r0]
   db314:	e7f4      	b.n	db300 <__pow5mult+0x7c>
   db316:	4638      	mov	r0, r7
   db318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db31c:	000dc558 	.word	0x000dc558

000db320 <__lshift>:
   db320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db324:	460c      	mov	r4, r1
   db326:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db32a:	6926      	ldr	r6, [r4, #16]
   db32c:	6849      	ldr	r1, [r1, #4]
   db32e:	68a3      	ldr	r3, [r4, #8]
   db330:	4456      	add	r6, sl
   db332:	4607      	mov	r7, r0
   db334:	4691      	mov	r9, r2
   db336:	1c75      	adds	r5, r6, #1
   db338:	42ab      	cmp	r3, r5
   db33a:	da02      	bge.n	db342 <__lshift+0x22>
   db33c:	3101      	adds	r1, #1
   db33e:	005b      	lsls	r3, r3, #1
   db340:	e7fa      	b.n	db338 <__lshift+0x18>
   db342:	4638      	mov	r0, r7
   db344:	f7ff fdf2 	bl	daf2c <_Balloc>
   db348:	2300      	movs	r3, #0
   db34a:	4680      	mov	r8, r0
   db34c:	f100 0114 	add.w	r1, r0, #20
   db350:	461a      	mov	r2, r3
   db352:	4553      	cmp	r3, sl
   db354:	da03      	bge.n	db35e <__lshift+0x3e>
   db356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db35a:	3301      	adds	r3, #1
   db35c:	e7f9      	b.n	db352 <__lshift+0x32>
   db35e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db362:	6920      	ldr	r0, [r4, #16]
   db364:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db368:	f019 091f 	ands.w	r9, r9, #31
   db36c:	f104 0114 	add.w	r1, r4, #20
   db370:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db374:	d014      	beq.n	db3a0 <__lshift+0x80>
   db376:	f1c9 0c20 	rsb	ip, r9, #32
   db37a:	2200      	movs	r2, #0
   db37c:	6808      	ldr	r0, [r1, #0]
   db37e:	fa00 f009 	lsl.w	r0, r0, r9
   db382:	4302      	orrs	r2, r0
   db384:	469a      	mov	sl, r3
   db386:	f843 2b04 	str.w	r2, [r3], #4
   db38a:	f851 2b04 	ldr.w	r2, [r1], #4
   db38e:	458e      	cmp	lr, r1
   db390:	fa22 f20c 	lsr.w	r2, r2, ip
   db394:	d8f2      	bhi.n	db37c <__lshift+0x5c>
   db396:	f8ca 2004 	str.w	r2, [sl, #4]
   db39a:	b142      	cbz	r2, db3ae <__lshift+0x8e>
   db39c:	1cb5      	adds	r5, r6, #2
   db39e:	e006      	b.n	db3ae <__lshift+0x8e>
   db3a0:	3b04      	subs	r3, #4
   db3a2:	f851 2b04 	ldr.w	r2, [r1], #4
   db3a6:	f843 2f04 	str.w	r2, [r3, #4]!
   db3aa:	458e      	cmp	lr, r1
   db3ac:	d8f9      	bhi.n	db3a2 <__lshift+0x82>
   db3ae:	3d01      	subs	r5, #1
   db3b0:	4638      	mov	r0, r7
   db3b2:	f8c8 5010 	str.w	r5, [r8, #16]
   db3b6:	4621      	mov	r1, r4
   db3b8:	f7ff fded 	bl	daf96 <_Bfree>
   db3bc:	4640      	mov	r0, r8
   db3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db3c2 <__mcmp>:
   db3c2:	6903      	ldr	r3, [r0, #16]
   db3c4:	690a      	ldr	r2, [r1, #16]
   db3c6:	1a9b      	subs	r3, r3, r2
   db3c8:	b510      	push	{r4, lr}
   db3ca:	d111      	bne.n	db3f0 <__mcmp+0x2e>
   db3cc:	0092      	lsls	r2, r2, #2
   db3ce:	3014      	adds	r0, #20
   db3d0:	3114      	adds	r1, #20
   db3d2:	1883      	adds	r3, r0, r2
   db3d4:	440a      	add	r2, r1
   db3d6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db3da:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db3de:	428c      	cmp	r4, r1
   db3e0:	d002      	beq.n	db3e8 <__mcmp+0x26>
   db3e2:	d307      	bcc.n	db3f4 <__mcmp+0x32>
   db3e4:	2001      	movs	r0, #1
   db3e6:	bd10      	pop	{r4, pc}
   db3e8:	4298      	cmp	r0, r3
   db3ea:	d3f4      	bcc.n	db3d6 <__mcmp+0x14>
   db3ec:	2000      	movs	r0, #0
   db3ee:	bd10      	pop	{r4, pc}
   db3f0:	4618      	mov	r0, r3
   db3f2:	bd10      	pop	{r4, pc}
   db3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db3f8:	bd10      	pop	{r4, pc}

000db3fa <__mdiff>:
   db3fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db3fe:	460c      	mov	r4, r1
   db400:	4607      	mov	r7, r0
   db402:	4611      	mov	r1, r2
   db404:	4620      	mov	r0, r4
   db406:	4615      	mov	r5, r2
   db408:	f7ff ffdb 	bl	db3c2 <__mcmp>
   db40c:	1e06      	subs	r6, r0, #0
   db40e:	d108      	bne.n	db422 <__mdiff+0x28>
   db410:	4631      	mov	r1, r6
   db412:	4638      	mov	r0, r7
   db414:	f7ff fd8a 	bl	daf2c <_Balloc>
   db418:	2301      	movs	r3, #1
   db41a:	6103      	str	r3, [r0, #16]
   db41c:	6146      	str	r6, [r0, #20]
   db41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db422:	bfbc      	itt	lt
   db424:	4623      	movlt	r3, r4
   db426:	462c      	movlt	r4, r5
   db428:	4638      	mov	r0, r7
   db42a:	6861      	ldr	r1, [r4, #4]
   db42c:	bfba      	itte	lt
   db42e:	461d      	movlt	r5, r3
   db430:	2601      	movlt	r6, #1
   db432:	2600      	movge	r6, #0
   db434:	f7ff fd7a 	bl	daf2c <_Balloc>
   db438:	692b      	ldr	r3, [r5, #16]
   db43a:	60c6      	str	r6, [r0, #12]
   db43c:	6926      	ldr	r6, [r4, #16]
   db43e:	f105 0914 	add.w	r9, r5, #20
   db442:	3414      	adds	r4, #20
   db444:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db448:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db44c:	f100 0514 	add.w	r5, r0, #20
   db450:	f04f 0c00 	mov.w	ip, #0
   db454:	f854 3b04 	ldr.w	r3, [r4], #4
   db458:	f859 2b04 	ldr.w	r2, [r9], #4
   db45c:	fa1c f183 	uxtah	r1, ip, r3
   db460:	fa1f fe82 	uxth.w	lr, r2
   db464:	0c12      	lsrs	r2, r2, #16
   db466:	ebce 0101 	rsb	r1, lr, r1
   db46a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db46e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db472:	b289      	uxth	r1, r1
   db474:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db478:	45c8      	cmp	r8, r9
   db47a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db47e:	46a6      	mov	lr, r4
   db480:	f845 3b04 	str.w	r3, [r5], #4
   db484:	d8e6      	bhi.n	db454 <__mdiff+0x5a>
   db486:	45be      	cmp	lr, r7
   db488:	d20e      	bcs.n	db4a8 <__mdiff+0xae>
   db48a:	f85e 1b04 	ldr.w	r1, [lr], #4
   db48e:	fa1c f281 	uxtah	r2, ip, r1
   db492:	1413      	asrs	r3, r2, #16
   db494:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db498:	b292      	uxth	r2, r2
   db49a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db49e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db4a2:	f845 2b04 	str.w	r2, [r5], #4
   db4a6:	e7ee      	b.n	db486 <__mdiff+0x8c>
   db4a8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db4ac:	b90b      	cbnz	r3, db4b2 <__mdiff+0xb8>
   db4ae:	3e01      	subs	r6, #1
   db4b0:	e7fa      	b.n	db4a8 <__mdiff+0xae>
   db4b2:	6106      	str	r6, [r0, #16]
   db4b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db4b8 <__ulp>:
   db4b8:	4b12      	ldr	r3, [pc, #72]	; (db504 <__ulp+0x4c>)
   db4ba:	ee10 2a90 	vmov	r2, s1
   db4be:	401a      	ands	r2, r3
   db4c0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db4c4:	2b00      	cmp	r3, #0
   db4c6:	dd02      	ble.n	db4ce <__ulp+0x16>
   db4c8:	2000      	movs	r0, #0
   db4ca:	4619      	mov	r1, r3
   db4cc:	e017      	b.n	db4fe <__ulp+0x46>
   db4ce:	425b      	negs	r3, r3
   db4d0:	151b      	asrs	r3, r3, #20
   db4d2:	2b13      	cmp	r3, #19
   db4d4:	f04f 0000 	mov.w	r0, #0
   db4d8:	f04f 0100 	mov.w	r1, #0
   db4dc:	dc04      	bgt.n	db4e8 <__ulp+0x30>
   db4de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db4e2:	fa42 f103 	asr.w	r1, r2, r3
   db4e6:	e00a      	b.n	db4fe <__ulp+0x46>
   db4e8:	3b14      	subs	r3, #20
   db4ea:	2b1e      	cmp	r3, #30
   db4ec:	f04f 0201 	mov.w	r2, #1
   db4f0:	bfda      	itte	le
   db4f2:	f1c3 031f 	rsble	r3, r3, #31
   db4f6:	fa02 f303 	lslle.w	r3, r2, r3
   db4fa:	4613      	movgt	r3, r2
   db4fc:	4618      	mov	r0, r3
   db4fe:	ec41 0b10 	vmov	d0, r0, r1
   db502:	4770      	bx	lr
   db504:	7ff00000 	.word	0x7ff00000

000db508 <__b2d>:
   db508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db50a:	6905      	ldr	r5, [r0, #16]
   db50c:	f100 0614 	add.w	r6, r0, #20
   db510:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db514:	1f2f      	subs	r7, r5, #4
   db516:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db51a:	4620      	mov	r0, r4
   db51c:	f7ff fdcb 	bl	db0b6 <__hi0bits>
   db520:	f1c0 0320 	rsb	r3, r0, #32
   db524:	280a      	cmp	r0, #10
   db526:	600b      	str	r3, [r1, #0]
   db528:	dc14      	bgt.n	db554 <__b2d+0x4c>
   db52a:	f1c0 0e0b 	rsb	lr, r0, #11
   db52e:	fa24 f10e 	lsr.w	r1, r4, lr
   db532:	42be      	cmp	r6, r7
   db534:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db538:	bf34      	ite	cc
   db53a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db53e:	2100      	movcs	r1, #0
   db540:	3015      	adds	r0, #21
   db542:	fa04 f000 	lsl.w	r0, r4, r0
   db546:	fa21 f10e 	lsr.w	r1, r1, lr
   db54a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db54e:	ea40 0201 	orr.w	r2, r0, r1
   db552:	e023      	b.n	db59c <__b2d+0x94>
   db554:	42be      	cmp	r6, r7
   db556:	bf3a      	itte	cc
   db558:	f1a5 0708 	subcc.w	r7, r5, #8
   db55c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db560:	2100      	movcs	r1, #0
   db562:	380b      	subs	r0, #11
   db564:	d015      	beq.n	db592 <__b2d+0x8a>
   db566:	4084      	lsls	r4, r0
   db568:	f1c0 0520 	rsb	r5, r0, #32
   db56c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db570:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db574:	42b7      	cmp	r7, r6
   db576:	fa21 fe05 	lsr.w	lr, r1, r5
   db57a:	ea44 030e 	orr.w	r3, r4, lr
   db57e:	bf8c      	ite	hi
   db580:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db584:	2400      	movls	r4, #0
   db586:	fa01 f000 	lsl.w	r0, r1, r0
   db58a:	40ec      	lsrs	r4, r5
   db58c:	ea40 0204 	orr.w	r2, r0, r4
   db590:	e004      	b.n	db59c <__b2d+0x94>
   db592:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   db596:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db59a:	460a      	mov	r2, r1
   db59c:	ec43 2b10 	vmov	d0, r2, r3
   db5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db5a2 <__d2b>:
   db5a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db5a6:	460e      	mov	r6, r1
   db5a8:	2101      	movs	r1, #1
   db5aa:	ec59 8b10 	vmov	r8, r9, d0
   db5ae:	4615      	mov	r5, r2
   db5b0:	f7ff fcbc 	bl	daf2c <_Balloc>
   db5b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   db5b8:	4607      	mov	r7, r0
   db5ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
   db5be:	b10c      	cbz	r4, db5c4 <__d2b+0x22>
   db5c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db5c4:	9301      	str	r3, [sp, #4]
   db5c6:	f1b8 0f00 	cmp.w	r8, #0
   db5ca:	d019      	beq.n	db600 <__d2b+0x5e>
   db5cc:	a802      	add	r0, sp, #8
   db5ce:	f840 8d08 	str.w	r8, [r0, #-8]!
   db5d2:	f7ff fd90 	bl	db0f6 <__lo0bits>
   db5d6:	9b00      	ldr	r3, [sp, #0]
   db5d8:	b148      	cbz	r0, db5ee <__d2b+0x4c>
   db5da:	9a01      	ldr	r2, [sp, #4]
   db5dc:	f1c0 0120 	rsb	r1, r0, #32
   db5e0:	fa02 f101 	lsl.w	r1, r2, r1
   db5e4:	430b      	orrs	r3, r1
   db5e6:	40c2      	lsrs	r2, r0
   db5e8:	617b      	str	r3, [r7, #20]
   db5ea:	9201      	str	r2, [sp, #4]
   db5ec:	e000      	b.n	db5f0 <__d2b+0x4e>
   db5ee:	617b      	str	r3, [r7, #20]
   db5f0:	9b01      	ldr	r3, [sp, #4]
   db5f2:	61bb      	str	r3, [r7, #24]
   db5f4:	2b00      	cmp	r3, #0
   db5f6:	bf14      	ite	ne
   db5f8:	2102      	movne	r1, #2
   db5fa:	2101      	moveq	r1, #1
   db5fc:	6139      	str	r1, [r7, #16]
   db5fe:	e007      	b.n	db610 <__d2b+0x6e>
   db600:	a801      	add	r0, sp, #4
   db602:	f7ff fd78 	bl	db0f6 <__lo0bits>
   db606:	9b01      	ldr	r3, [sp, #4]
   db608:	617b      	str	r3, [r7, #20]
   db60a:	2101      	movs	r1, #1
   db60c:	6139      	str	r1, [r7, #16]
   db60e:	3020      	adds	r0, #32
   db610:	b134      	cbz	r4, db620 <__d2b+0x7e>
   db612:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   db616:	4404      	add	r4, r0
   db618:	6034      	str	r4, [r6, #0]
   db61a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db61e:	e009      	b.n	db634 <__d2b+0x92>
   db620:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   db624:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db628:	6030      	str	r0, [r6, #0]
   db62a:	6918      	ldr	r0, [r3, #16]
   db62c:	f7ff fd43 	bl	db0b6 <__hi0bits>
   db630:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   db634:	6028      	str	r0, [r5, #0]
   db636:	4638      	mov	r0, r7
   db638:	b003      	add	sp, #12
   db63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db63e <__ratio>:
   db63e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db642:	4688      	mov	r8, r1
   db644:	4669      	mov	r1, sp
   db646:	4681      	mov	r9, r0
   db648:	f7ff ff5e 	bl	db508 <__b2d>
   db64c:	a901      	add	r1, sp, #4
   db64e:	4640      	mov	r0, r8
   db650:	ec55 4b10 	vmov	r4, r5, d0
   db654:	f7ff ff58 	bl	db508 <__b2d>
   db658:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db65c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db660:	1a9a      	subs	r2, r3, r2
   db662:	e89d 000a 	ldmia.w	sp, {r1, r3}
   db666:	1ac9      	subs	r1, r1, r3
   db668:	ec57 6b10 	vmov	r6, r7, d0
   db66c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   db670:	2b00      	cmp	r3, #0
   db672:	bfcc      	ite	gt
   db674:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   db678:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   db67c:	4632      	mov	r2, r6
   db67e:	463b      	mov	r3, r7
   db680:	4620      	mov	r0, r4
   db682:	4629      	mov	r1, r5
   db684:	f7fd face 	bl	d8c24 <__aeabi_ddiv>
   db688:	ec41 0b10 	vmov	d0, r0, r1
   db68c:	b003      	add	sp, #12
   db68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db692 <__copybits>:
   db692:	3901      	subs	r1, #1
   db694:	b510      	push	{r4, lr}
   db696:	1149      	asrs	r1, r1, #5
   db698:	6914      	ldr	r4, [r2, #16]
   db69a:	3101      	adds	r1, #1
   db69c:	f102 0314 	add.w	r3, r2, #20
   db6a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db6a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db6a8:	42a3      	cmp	r3, r4
   db6aa:	4602      	mov	r2, r0
   db6ac:	d204      	bcs.n	db6b8 <__copybits+0x26>
   db6ae:	f853 2b04 	ldr.w	r2, [r3], #4
   db6b2:	f840 2b04 	str.w	r2, [r0], #4
   db6b6:	e7f7      	b.n	db6a8 <__copybits+0x16>
   db6b8:	2300      	movs	r3, #0
   db6ba:	428a      	cmp	r2, r1
   db6bc:	d202      	bcs.n	db6c4 <__copybits+0x32>
   db6be:	f842 3b04 	str.w	r3, [r2], #4
   db6c2:	e7fa      	b.n	db6ba <__copybits+0x28>
   db6c4:	bd10      	pop	{r4, pc}

000db6c6 <__any_on>:
   db6c6:	f100 0214 	add.w	r2, r0, #20
   db6ca:	6900      	ldr	r0, [r0, #16]
   db6cc:	114b      	asrs	r3, r1, #5
   db6ce:	4298      	cmp	r0, r3
   db6d0:	b510      	push	{r4, lr}
   db6d2:	db0c      	blt.n	db6ee <__any_on+0x28>
   db6d4:	dd0c      	ble.n	db6f0 <__any_on+0x2a>
   db6d6:	f011 011f 	ands.w	r1, r1, #31
   db6da:	d009      	beq.n	db6f0 <__any_on+0x2a>
   db6dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db6e0:	fa24 f001 	lsr.w	r0, r4, r1
   db6e4:	fa00 f101 	lsl.w	r1, r0, r1
   db6e8:	428c      	cmp	r4, r1
   db6ea:	d10c      	bne.n	db706 <__any_on+0x40>
   db6ec:	e000      	b.n	db6f0 <__any_on+0x2a>
   db6ee:	4603      	mov	r3, r0
   db6f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db6f4:	4293      	cmp	r3, r2
   db6f6:	d904      	bls.n	db702 <__any_on+0x3c>
   db6f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db6fc:	2900      	cmp	r1, #0
   db6fe:	d0f9      	beq.n	db6f4 <__any_on+0x2e>
   db700:	e001      	b.n	db706 <__any_on+0x40>
   db702:	2000      	movs	r0, #0
   db704:	bd10      	pop	{r4, pc}
   db706:	2001      	movs	r0, #1
   db708:	bd10      	pop	{r4, pc}

000db70a <_calloc_r>:
   db70a:	b538      	push	{r3, r4, r5, lr}
   db70c:	fb02 f401 	mul.w	r4, r2, r1
   db710:	4621      	mov	r1, r4
   db712:	f7fb f8b1 	bl	d6878 <_malloc_r>
   db716:	4605      	mov	r5, r0
   db718:	b118      	cbz	r0, db722 <_calloc_r+0x18>
   db71a:	4622      	mov	r2, r4
   db71c:	2100      	movs	r1, #0
   db71e:	f7fd fdf4 	bl	d930a <memset>
   db722:	4628      	mov	r0, r5
   db724:	bd38      	pop	{r3, r4, r5, pc}
	...

000db728 <nanf>:
   db728:	ed9f 0a01 	vldr	s0, [pc, #4]	; db730 <nanf+0x8>
   db72c:	4770      	bx	lr
   db72e:	bf00      	nop
   db730:	7fc00000 	.word	0x7fc00000

000db734 <__env_lock>:
   db734:	4770      	bx	lr

000db736 <__env_unlock>:
   db736:	4770      	bx	lr

000db738 <dynalib_user>:
   db738:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db748:	0000 0000                                   ....

000db74c <_ZTV5Timer>:
	...
   db754:	4359 000d 43a1 000d 4129 000d be35 000d     YC...C..)A..5...
   db764:	be70 000d be75 000d be7a 000d be7e 000d     p...u...z...~...
   db774:	be83 000d be88 000d be8c 000d be97 000d     ................
   db784:	bea2 000d be35 000d be3d 000d be41 000d     ....5...=...A...
   db794:	be4a 000d be52 000d be5e 000d be64 000d     J...R...^...d...
   db7a4:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   db7b4:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000db7e4 <_ZL16MemVersionNumber>:
   db7e4:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   db7f4:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   db804:	4643 4e55 313d 0d36 000a 3425 312e 2066     CFUN=16...%4.1f 
   db814:	0043 3425 312e 2066 2525 2500 2e34 6631     C.%4.1f %%.%4.1f
   db824:	6c20 7875 2500 2069 2525 7b00 5422 6d65      lux.%i %%.{"Tem
   db834:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
   db844:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   db854:	2c66 2220 694c 6867 4c74 7665 6c65 3a22     f, "LightLevel":
   db864:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   db874:	7574 6572 2231 253a 2c69 2220 6f53 6c69     ture1":%i, "Soil
   db884:	6f6d 7369 7574 6572 2232 253a 2c69 2220     moisture2":%i, "
   db894:	6177 6574 5072 6572 7373 7275 2265 253a     waterPressure":%
   db8a4:	2c69 2220 6f53 656c 6f6e 6469 3a22 6925     i, "Solenoid":%i
   db8b4:	202c 6222 7461 6574 7972 3a22 6925 202c     , "battery":%i, 
   db8c4:	6b22 7965 2231 223a 7325 2c22 2220 6552     "key1":"%s", "Re
   db8d4:	6573 7374 3a22 6925 202c 4122 656c 7472     sets":%i, "Alert
   db8e4:	2273 253a 7d69 5200 6177 646e 2d61 6553     s":%i}.Rwanda-Se
   db8f4:	736e 2d65 6e41 2d64 6f43 746e 6f72 2d6c     nse-And-Control-
   db904:	6c45 7361 6974 0063 6761 6972 7563 746c     Elastic.agricult
   db914:	7275 2d65 7761 2d73 6577 6862 6f6f 006b     ure-aws-webhook.
   db924:	7752 6e61 6164 532d 6e65 6573 412d 646e     Rwanda-Sense-And
   db934:	432d 6e6f 7274 6c6f 4e00 206f 6144 6174     -Control.No Data
   db944:	5500 6962 6f64 7374 4820 6f6f 006b 6552     .Ubidots Hook.Re
   db954:	7073 6e6f 6573 5220 6365 6965 6576 0064     sponse Received.
   db964:	6e55 6e6b 776f 206e 6572 7073 6e6f 6573     Unknown response
   db974:	7220 6365 7665 6569 2064 6925 3000 4e00      recevied %i.0.N
   db984:	206f 6f53 6c69 5320 6e65 6f73 7372 4300     o Soil Sensors.C
   db994:	6e6f 6966 0067 6e4f 2065 6f53 6c69 5320     onfig.One Soil S
   db9a4:	6e65 6f73 0072 7754 206f 6f53 6c69 5320     ensor.Two Soil S
   db9b4:	6e65 6f73 7372 4e00 206f 7250 7365 7573     ensors.No Pressu
   db9c4:	6572 5320 6e65 6f73 0072 7250 7365 7573     re Sensor.Pressu
   db9d4:	6572 5320 6e65 6f73 2072 7250 7365 6e65     re Sensor Presen
   db9e4:	0074 6f4e 4c20 6769 7468 5320 6e65 6f73     t.No Light Senso
   db9f4:	0072 694c 6867 2074 6553 736e 726f 5020     r.Light Sensor P
   dba04:	6572 6573 746e 4e00 206f 6554 706d 2f20     resent.No Temp /
   dba14:	4820 6d75 6469 7469 2079 6553 736e 726f      Humidity Sensor
   dba24:	5020 6572 6573 746e 4d00 726f 696e 676e      Present.Morning
   dba34:	5720 7461 7265 6e69 2067 7544 6172 6974      Watering Durati
   dba44:	6e6f 7320 7465 7420 206f 6925 4400 7275     on set to %i.Dur
   dba54:	7461 6f69 006e 754c 636e 2068 6157 6574     ation.Lunch Wate
   dba64:	6972 676e 4420 7275 7461 6f69 206e 6573     ring Duration se
   dba74:	2074 6f74 2520 0069 6157 6574 6972 676e     t to %i.Watering
   dba84:	6220 6765 6e69 2073 7461 3520 6d61 6620      begins at 5am f
   dba94:	726f 2520 2069 6f68 7275 0073 3225 312e     or %i hours.%2.1
   dbaa4:	2066 2525 5300 7465 5620 7265 6f62 6573     f %%.Set Verbose
   dbab4:	4d20 646f 0065 6c43 6165 6572 2064 6556      Mode.Cleared Ve
   dbac4:	6272 736f 2065 6f4d 6564 4c00 776f 5020     rbose Mode.Low P
   dbad4:	776f 7265 4d20 646f 0065 6f4e 6d72 6c61     ower Mode.Normal
   dbae4:	4f20 6570 6172 6974 6e6f 0073 704f 6e65      Operations.Open
   dbaf4:	7420 6568 5620 6c61 6576 5700 7461 7265      the Valve.Water
   dbb04:	6e69 0067 6c43 736f 2065 6874 2065 6176     ing.Close the va
   dbb14:	766c 0065 6f4e 5320 6c6f 6e65 696f 2064     lve.No Solenoid 
   dbb24:	7441 6174 6863 6465 4600 6f72 206d 7325     Attached.From %s
   dbb34:	7420 206f 7325 5300 6174 6574 5420 6172      to %s.State Tra
   dbb44:	736e 7469 6f69 006e 6f44 656e 7720 7469     nsition.Done wit
   dbb54:	2068 6177 6574 6972 676e 6320 6379 656c     h watering cycle
   dbb64:	5700 7461 7265 6e69 2067 654e 6465 6465     .Watering Needed
   dbb74:	6220 7475 6220 7461 6574 7972 7420 6f6f      but battery too
   dbb84:	6c20 776f 5700 7461 7265 6e69 2067 656e      low.Watering ne
   dbb94:	6465 6465 2d20 7320 6174 7472 6e69 2067     eded - starting 
   dbba4:	6177 6574 6972 676e 6320 6379 656c 5700     watering cycle.W
   dbbb4:	7461 7265 6e69 2067 6f6e 2074 656e 6465     atering not need
   dbbc4:	6465 7300 6170 6b72 642f 7665 6369 2f65     ed.spark/device/
   dbbd4:	6573 7373 6f69 2f6e 6e65 0064 6154 696b     session/end.Taki
   dbbe4:	676e 6120 4e20 7061 5300 6174 6574 4c00     ng a Nap.State.L
   dbbf4:	776f 4220 7461 6574 7972 2d20 5320 656c     ow Battery - Sle
   dbc04:	7065 6e69 0067 7245 6f72 2072 7453 7461     eping.Error Stat
   dbc14:	2065 202d 6552 6573 0074 7245 6f72 2072     e - Reset.Error 
   dbc24:	7453 7461 2065 202d 6f50 6577 2072 7943     State - Power Cy
   dbc34:	6c63 0065 7245 6f72 2072 7453 7461 2065     cle.Error State 
   dbc44:	202d 7546 6c6c 4d20 646f 6d65 5220 7365     - Full Modem Res
   dbc54:	7465 4500 7272 726f 7420 6b61 6e69 2067     et.Error taking 
   dbc64:	654d 7361 7275 6d65 6e65 7374 4e00 746f     Measurements.Not
   dbc74:	7420 6d69 2065 6f74 7720 7461 7265 5300      time to water.S
   dbc84:	6769 616e 006c 6552 6573 4374 756f 746e     ignal.ResetCount
   dbc94:	5200 6c65 6165 6573 5300 6174 6574 664f     .Release.StateOf
   dbca4:	6843 0067 6142 7474 7265 4379 6e6f 6574     Chg.BatteryConte
   dbcb4:	7478 5700 7461 7265 6e69 5467 7268 7365     xt.WateringThres
   dbcc4:	6f68 646c 5400 6d65 6570 6172 7574 6572     hold.Temperature
   dbcd4:	4800 6d75 6469 7469 0079 754c 696d 6f6e     .Humidity.Lumino
   dbce4:	6973 7974 5300 696f 4d6c 696f 7473 7275     sity.SoilMoistur
   dbcf4:	3165 5300 696f 4d6c 696f 7473 7275 3265     e1.SoilMoisture2
   dbd04:	5000 6572 7373 7275 0065 6157 6574 5772     .Pressure.WaterW
   dbd14:	6e69 6f64 0077 654d 7361 7275 2d65 6f4e     indow.Measure-No
   dbd24:	0077 6f4c 5077 776f 7265 6f4d 6564 5600     w.LowPowerMode.V
   dbd34:	7265 6f62 6573 4d2d 646f 0065 6553 5374     erbose-Mode.SetS
   dbd44:	696f 536c 6e65 6f73 7372 5300 7465 7250     oilSensors.SetPr
   dbd54:	7365 7573 6572 6553 736e 726f 5300 7465     essureSensor.Set
   dbd64:	694c 6867 5374 6e65 6f73 0072 6f53 656c     LightSensor.Sole
   dbd74:	6f6e 6469 7250 7365 6e65 0074 6553 5474     noidPresent.SetT
   dbd84:	6d65 4870 6d75 6469 6553 736e 726f 5300     empHumidSensor.S
   dbd94:	7465 7544 6172 6974 6e6f 6f4d 6e72 6e69     etDurationMornin
   dbda4:	0067 6553 4474 7275 7461 6f69 4c6e 6e75     g.SetDurationLun
   dbdb4:	6863 5300 7465 7544 6172 6974 6e6f 7645     ch.SetDurationEv
   dbdc4:	6e65 6e69 0067 6553 5774 7461 7265 6854     ening.SetWaterTh
   dbdd4:	6572 6873 6c6f 0064 6554 706d 482f 6d75     reshold.Temp/Hum
   dbde4:	6469 7469 2079 6553 736e 726f 4620 6961     idity Sensor Fai
   dbdf4:	656c 2064 6f74 4920 696e 6c61 7a69 2065     led to Inialize 
   dbe04:	202d 6964 6173 6c62 6e69 0067 6146 6c69     - disabling.Fail
   dbe14:	6465 7420 206f 6f63 6e6e 6365 0074 7453     ed to connect.St
   dbe24:	7261 7574 0070 6f4c 6163 206c 6954 656d     artup.Local Time
   dbe34:	5500 6b6e 6f6e 6e77 4e00 746f 4320 6168     .Unknown.Not Cha
   dbe44:	6772 6e69 0067 6843 7261 6567 0064 6944     rging.Charged.Di
   dbe54:	6373 6168 6772 6e69 0067 6146 6c75 0074     scharging.Fault.
   dbe64:	6944 6f63 6e6e 6365 6574 0064 6f4e 656e     Diconnected.None
   dbe74:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dbe84:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dbe94:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dbea4:	5f45 4143 5f54 424e 0031                    E_CAT_NB1.

000dbeae <_ZL13releaseNumber>:
   dbeae:	3233 0000 0000                              32....

000dbeb4 <_ZTVN5spark13CellularClassE>:
	...
   dbebc:	6973 000d 6969 000d 695f 000d 6915 000d     si..ii.._i...i..
   dbecc:	6953 000d 6947 000d 693b 000d 6933 000d     Si..Gi..;i..3i..
   dbedc:	6929 000d 691f 000d 7609 000d               )i...i...v..

000dbee8 <_ZTV14CellularSignal>:
	...
   dbef0:	6a21 000d 6a81 000d 6a23 000d 6ac5 000d     !j...j..#j...j..
   dbf00:	6a29 000d 6a91 000d 6a55 000d 6b4f 000d     )j...j..Uj..Ok..
   dbf10:	fffc ffff 0000 0000 6b79 000d               ........yk..

000dbf1c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbf24:	6b81 000d 6b87 000d 6bcb 000d 6b95 000d     .k...k...k...k..
   dbf34:	6b83 000d                                   .k..

000dbf38 <_ZTVN5spark13EthernetClassE>:
	...
   dbf40:	71df 000d 71d5 000d 71cb 000d 71c1 000d     .q...q...q...q..
   dbf50:	71b5 000d 71a9 000d 719d 000d 7195 000d     .q...q...q...q..
   dbf60:	718b 000d 7181 000d 7609 000d               .q...q...v..

000dbf6c <_ZTV7TwoWire>:
	...
   dbf74:	71fd 000d 7247 000d 721f 000d 71ff 000d     .q..Gr...r...q..
   dbf84:	7227 000d 722f 000d 7237 000d 723f 000d     'r../r..7r..?r..

000dbf94 <_ZTV9IPAddress>:
	...
   dbf9c:	733f 000d 732f 000d 7331 000d 6162 6475     ?s../s..1s..baud
   dbfac:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dbfbc:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   dbfcc:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   dbfdc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   dbfec:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   dbffc:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   dc00c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   dc01c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   dc02c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   dc03c:	203d 6400 7465 6961 736c 3d20 0020 6e6c     = .details = .ln
   dc04c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   dc05c:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   dc06c:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   dc07c:	6100 6c6c 0000 0000                         .all....

000dc084 <_ZTVN5spark9MeshClassE>:
	...
   dc08c:	7483 000d 7479 000d 746f 000d 7465 000d     .t..yt..ot..et..
   dc09c:	7459 000d 744d 000d 7441 000d 7439 000d     Yt..Mt..At..9t..
   dc0ac:	742f 000d 7425 000d 7609 000d               /t..%t...v..

000dc0b8 <_ZTVN5spark12NetworkClassE>:
	...
   dc0c0:	75a1 000d 75ab 000d 75b5 000d 75bf 000d     .u...u...u...u..
   dc0d0:	75c9 000d 75d5 000d 75e1 000d 75ed 000d     .u...u...u...u..
   dc0e0:	75f5 000d 75ff 000d 7609 000d 6977 6972     .u...u...v..wiri
   dc0f0:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   dc100:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   dc110:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
   dc120:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   dc130:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   dc140:	0000 0000                                   ....

000dc144 <_ZTV11USARTSerial>:
	...
   dc14c:	7e01 000d 7e51 000d 7e5f 000d 7831 000d     .~..Q~.._~..1x..
   dc15c:	7e15 000d 7e37 000d 7e23 000d 7e4b 000d     .~..7~..#~..K~..
   dc16c:	7e03 000d 7e07 000d                         .~...~..

000dc174 <_ZTV9USBSerial>:
	...
   dc17c:	7f09 000d 7f59 000d 7f67 000d 7831 000d     ....Y...g...1x..
   dc18c:	7f45 000d 7f0b 000d 7f21 000d 7f53 000d     E.......!...S...
   dc19c:	7f37 000d 7f05 000d                         7.......

000dc1a4 <_ZSt7nothrow>:
	...

000dc1a5 <day_name.4725>:
   dc1a5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc1b5:	6972 6153 4a74                                   riSat

000dc1ba <mon_name.4726>:
   dc1ba:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc1ca:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc1da:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dc1ea:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dc1fa:	6425 000a                                   %d..

000dc1fe <_ctype_>:
   dc1fe:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc20e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc21e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc22e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc23e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc24e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc25e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc26e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc27e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc300 <__sf_fake_stdin>:
	...

000dc320 <__sf_fake_stdout>:
	...

000dc340 <__sf_fake_stderr>:
	...
   dc360:	4f50 4953 0058 0000                         POSIX...

000dc368 <__month_lengths>:
   dc368:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc378:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc388:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc398:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc3a8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc3b8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dc3c8 <fpi.5344>:
   dc3c8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc3d8:	0000 0000                                   ....

000dc3dc <fpinan.5380>:
   dc3dc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc3ec:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dc3fc:	0000 0000                                   ....

000dc400 <tinytens>:
   dc400:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc410:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc420:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dc430:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dc440:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dc450:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dc460:	2575 006e 0000 0000                         u%n.....

000dc468 <__mprec_tens>:
   dc468:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc478:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc488:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc498:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc4a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc4b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc4c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc4d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc4e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc4f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc508:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc518:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc528:	9db4 79d9 7843 44ea                         ...yCx.D

000dc530 <__mprec_bigtens>:
   dc530:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc540:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc550:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc558 <p05.5387>:
   dc558:	0005 0000 0019 0000 007d 0000               ........}...

000dc564 <link_const_variable_data_end>:
   dc564:	000d5d85 	.word	0x000d5d85
   dc568:	000d5fbf 	.word	0x000d5fbf
   dc56c:	000d6171 	.word	0x000d6171
   dc570:	000d68ed 	.word	0x000d68ed
   dc574:	000d69f1 	.word	0x000d69f1
   dc578:	000d71e9 	.word	0x000d71e9
   dc57c:	000d7415 	.word	0x000d7415
   dc580:	000d7551 	.word	0x000d7551
   dc584:	000d76d5 	.word	0x000d76d5
   dc588:	000d78fd 	.word	0x000d78fd
   dc58c:	000d7c45 	.word	0x000d7c45
   dc590:	000d7ded 	.word	0x000d7ded
   dc594:	000d83d1 	.word	0x000d83d1
   dc598:	000d8495 	.word	0x000d8495
   dc59c:	000d8519 	.word	0x000d8519
   dc5a0:	000d859d 	.word	0x000d859d

000dc5a4 <link_constructors_end>:
	...
