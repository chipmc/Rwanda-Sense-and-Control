
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/1.5.1/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006110  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da130  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000138  2003e088  000da134  0001e088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000630  2003e1c0  2003e1c0  0002e1c0  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000da26c  000da26c  0002a26c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000da298  000da298  0002a298  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00101803  00000000  00000000  0002a29c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014176  00000000  00000000  0012ba9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023bd1  00000000  00000000  0013fc15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e88  00000000  00000000  001637e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000056c8  00000000  00000000  0016666e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000398f7  00000000  00000000  0016bd36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031947  00000000  00000000  001a562d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010bb1c  00000000  00000000  001d6f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ea74  00000000  00000000  002e2a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe1b 	bl	d8c6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe20 	bl	d8c82 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e088 	.word	0x2003e088
   d404c:	000da134 	.word	0x000da134
   d4050:	2003e1c0 	.word	0x2003e1c0
   d4054:	2003e1c0 	.word	0x2003e1c0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fd8b 	bl	d7b78 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da130 	.word	0x000da130
   d4084:	000da0f0 	.word	0x000da0f0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 ba1e 	b.w	d54c8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 ff83 	bl	d4f98 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bd31 	b.w	d7afc <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b955 	b.w	d6348 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b95b 	b.w	d6358 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b959 	b.w	d6358 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z16wateringTimerISRv>:
  currentStatusWriteNeeded = true;
  return true;
}

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z16wateringTimerISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e235 	.word	0x2003e235

000d40c4 <_Z13awakeTimerISRv>:
}

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40c4:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z13awakeTimerISRv+0xc>)
   d40c6:	2301      	movs	r3, #1
   d40c8:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40ca:	4a02      	ldr	r2, [pc, #8]	; (d40d4 <_Z13awakeTimerISRv+0x10>)
   d40cc:	7013      	strb	r3, [r2, #0]
   d40ce:	4770      	bx	lr
   d40d0:	2003e310 	.word	0x2003e310
   d40d4:	2003e1f9 	.word	0x2003e1f9

000d40d8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d8:	6803      	ldr	r3, [r0, #0]
   d40da:	4718      	bx	r3

000d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40dc:	2a01      	cmp	r2, #1
   d40de:	d002      	beq.n	d40e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40e0:	2a02      	cmp	r2, #2
   d40e2:	d002      	beq.n	d40ea <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40e4:	e004      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e6:	6001      	str	r1, [r0, #0]
	      break;
   d40e8:	e002      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40ea:	680b      	ldr	r3, [r1, #0]
   d40ec:	b100      	cbz	r0, d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ee:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40f0:	2000      	movs	r0, #0
   d40f2:	4770      	bx	lr

000d40f4 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40f4:	b538      	push	{r3, r4, r5, lr}
   d40f6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40f8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40fa:	b128      	cbz	r0, d4108 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40fc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40fe:	210c      	movs	r1, #12
   d4100:	f003 fea1 	bl	d7e46 <_ZdlPvj>
            wakeupSource = next;
   d4104:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d4106:	e7f8      	b.n	d40fa <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4108:	4620      	mov	r0, r4
   d410a:	bd38      	pop	{r3, r4, r5, pc}

000d410c <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d410c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410e:	4904      	ldr	r1, [pc, #16]	; (d4120 <_Z10measureNow6String+0x14>)
   d4110:	f003 fa1b 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4114:	b118      	cbz	r0, d411e <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4116:	4b03      	ldr	r3, [pc, #12]	; (d4124 <_Z10measureNow6String+0x18>)
   d4118:	2203      	movs	r2, #3
   d411a:	701a      	strb	r2, [r3, #0]
    return 1;
   d411c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d411e:	bd08      	pop	{r3, pc}
   d4120:	000d9bf8 	.word	0x000d9bf8
   d4124:	2003e1fa 	.word	0x2003e1fa

000d4128 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4128:	6943      	ldr	r3, [r0, #20]
   d412a:	b113      	cbz	r3, d4132 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d412c:	6983      	ldr	r3, [r0, #24]
   d412e:	300c      	adds	r0, #12
   d4130:	4718      	bx	r3
   d4132:	4770      	bx	lr

000d4134 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4134:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4136:	2100      	movs	r1, #0
   d4138:	4604      	mov	r4, r0
   d413a:	4608      	mov	r0, r1
   d413c:	f001 fdf2 	bl	d5d24 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4140:	a902      	add	r1, sp, #8
   d4142:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4144:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4146:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d414a:	f001 fe03 	bl	d5d54 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d414e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4150:	b10c      	cbz	r4, d4156 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4152:	2301      	movs	r3, #1
   d4154:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4156:	2100      	movs	r1, #0
   d4158:	2001      	movs	r0, #1
   d415a:	f001 fde3 	bl	d5d24 <os_thread_scheduling>
            }
        }
        if (t) {
   d415e:	b12c      	cbz	r4, d416c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4798      	blx	r3
            t->running = false;
   d4168:	2300      	movs	r3, #0
   d416a:	7123      	strb	r3, [r4, #4]
        }
    }
   d416c:	b002      	add	sp, #8
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4170:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4172:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4176:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4178:	f88d 3000 	strb.w	r3, [sp]
   d417c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d417e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4180:	f002 fc14 	bl	d69ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4184:	4628      	mov	r0, r5
   d4186:	b003      	add	sp, #12
   d4188:	bd30      	pop	{r4, r5, pc}

000d418a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d418a:	b510      	push	{r4, lr}
   d418c:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d418e:	6800      	ldr	r0, [r0, #0]
   d4190:	b108      	cbz	r0, d4196 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4192:	f002 f8e1 	bl	d6358 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4196:	4620      	mov	r0, r4
   d4198:	bd10      	pop	{r4, pc}

000d419a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d419c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d41a0:	b113      	cbz	r3, d41a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41a2:	2203      	movs	r2, #3
   d41a4:	4601      	mov	r1, r0
   d41a6:	4798      	blx	r3
    }
   d41a8:	4620      	mov	r0, r4
   d41aa:	bd10      	pop	{r4, pc}

000d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41ac:	6803      	ldr	r3, [r0, #0]
   d41ae:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41b0:	b120      	cbz	r0, d41bc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d41b2:	8883      	ldrh	r3, [r0, #4]
   d41b4:	428b      	cmp	r3, r1
   d41b6:	d001      	beq.n	d41bc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d41b8:	6880      	ldr	r0, [r0, #8]
   d41ba:	e7f9      	b.n	d41b0 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d41bc:	4770      	bx	lr
	...

000d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d41c4:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41c6:	4605      	mov	r5, r0
   d41c8:	460f      	mov	r7, r1
   d41ca:	4616      	mov	r6, r2
        if (valid_) {
   d41cc:	b33b      	cbz	r3, d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d41ce:	2101      	movs	r1, #1
   d41d0:	f7ff ffec 	bl	d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d41d4:	b150      	cbz	r0, d41ec <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d41d6:	8983      	ldrh	r3, [r0, #12]
   d41d8:	42bb      	cmp	r3, r7
   d41da:	d104      	bne.n	d41e6 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
   d41dc:	7386      	strb	r6, [r0, #14]
                    return *this;
   d41de:	e01e      	b.n	d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d41e0:	8883      	ldrh	r3, [r0, #4]
   d41e2:	2b01      	cmp	r3, #1
   d41e4:	d0f6      	beq.n	d41d4 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41e6:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d41e8:	2800      	cmp	r0, #0
   d41ea:	d1f9      	bne.n	d41e0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41ec:	490d      	ldr	r1, [pc, #52]	; (d4224 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41ee:	2010      	movs	r0, #16
   d41f0:	f003 fe34 	bl	d7e5c <_ZnwjRKSt9nothrow_t>
   d41f4:	4604      	mov	r4, r0
   d41f6:	b188      	cbz	r0, d421c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41f8:	f04f 0810 	mov.w	r8, #16
   d41fc:	4642      	mov	r2, r8
   d41fe:	2100      	movs	r1, #0
   d4200:	f004 fd3f 	bl	d8c82 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4204:	2302      	movs	r3, #2
   d4206:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4208:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d420a:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d420e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4210:	692b      	ldr	r3, [r5, #16]
   d4212:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4214:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4216:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4218:	612c      	str	r4, [r5, #16]
   d421a:	e000      	b.n	d421e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d421c:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d421e:	4628      	mov	r0, r5
   d4220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4224:	000d9ef0 	.word	0x000d9ef0

000d4228 <_ZN24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d422c:	7d03      	ldrb	r3, [r0, #20]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d422e:	4605      	mov	r5, r0
   d4230:	460f      	mov	r7, r1
        if (valid_) {
   d4232:	b1f3      	cbz	r3, d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d4234:	2104      	movs	r1, #4
   d4236:	f7ff ffb9 	bl	d41ac <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d423a:	4606      	mov	r6, r0
   d423c:	b108      	cbz	r0, d4242 <_ZN24SystemSleepConfiguration8durationEm+0x1a>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d423e:	60c7      	str	r7, [r0, #12]
                return *this;
   d4240:	e017      	b.n	d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4242:	490d      	ldr	r1, [pc, #52]	; (d4278 <_ZN24SystemSleepConfiguration8durationEm+0x50>)
   d4244:	2010      	movs	r0, #16
   d4246:	f003 fe09 	bl	d7e5c <_ZnwjRKSt9nothrow_t>
   d424a:	4604      	mov	r4, r0
   d424c:	b180      	cbz	r0, d4270 <_ZN24SystemSleepConfiguration8durationEm+0x48>
   d424e:	f04f 0810 	mov.w	r8, #16
   d4252:	4642      	mov	r2, r8
   d4254:	4631      	mov	r1, r6
   d4256:	f004 fd14 	bl	d8c82 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d425a:	2302      	movs	r3, #2
   d425c:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d425e:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4260:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4264:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4266:	692b      	ldr	r3, [r5, #16]
   d4268:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d426a:	60e7      	str	r7, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d426c:	612c      	str	r4, [r5, #16]
   d426e:	e000      	b.n	d4272 <_ZN24SystemSleepConfiguration8durationEm+0x4a>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d4270:	7528      	strb	r0, [r5, #20]
            wakeupSource->base.next = config_.wakeup_sources;
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4272:	4628      	mov	r0, r5
   d4274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4278:	000d9ef0 	.word	0x000d9ef0

000d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d427c:	b508      	push	{r3, lr}
   d427e:	ed2d 8b02 	vpush	{d8}
   d4282:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4286:	b128      	cbz	r0, d4294 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4288:	3801      	subs	r0, #1
   d428a:	f7ff fff7 	bl	d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d428e:	ee28 0a00 	vmul.f32	s0, s16, s0
   d4292:	e001      	b.n	d4298 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d4294:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d4298:	ecbd 8b02 	vpop	{d8}
   d429c:	bd08      	pop	{r3, pc}
	...

000d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d42a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42a2:	2500      	movs	r5, #0
   d42a4:	468e      	mov	lr, r1
   d42a6:	4915      	ldr	r1, [pc, #84]	; (d42fc <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42a8:	7105      	strb	r5, [r0, #4]
   d42aa:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d42ac:	6145      	str	r5, [r0, #20]
   d42ae:	6001      	str	r1, [r0, #0]
   d42b0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b2:	e892 0003 	ldmia.w	r2, {r0, r1}
   d42b6:	b085      	sub	sp, #20
   d42b8:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d42ba:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42be:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42c2:	e896 0003 	ldmia.w	r6, {r0, r1}
   d42c6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42ca:	e897 0003 	ldmia.w	r7, {r0, r1}
   d42ce:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42d2:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d42d4:	6960      	ldr	r0, [r4, #20]
   d42d6:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d42d8:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42da:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42dc:	69a0      	ldr	r0, [r4, #24]
   d42de:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42e0:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d42e2:	e88d 0028 	stmia.w	sp, {r3, r5}
   d42e6:	4a06      	ldr	r2, [pc, #24]	; (d4300 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d42e8:	4623      	mov	r3, r4
   d42ea:	4671      	mov	r1, lr
   d42ec:	f104 0008 	add.w	r0, r4, #8
   d42f0:	f001 fd20 	bl	d5d34 <os_timer_create>
    }
   d42f4:	4620      	mov	r0, r4
   d42f6:	b005      	add	sp, #20
   d42f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42fa:	bf00      	nop
   d42fc:	000d9610 	.word	0x000d9610
   d4300:	000d4135 	.word	0x000d4135

000d4304 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4304:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4306:	6880      	ldr	r0, [r0, #8]
   d4308:	2300      	movs	r3, #0
   d430a:	b138      	cbz	r0, d431c <_ZN5Timer5_stopEjb+0x18>
   d430c:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4310:	2102      	movs	r1, #2
   d4312:	f001 fd27 	bl	d5d64 <os_timer_change>
   d4316:	fab0 f080 	clz	r0, r0
   d431a:	0940      	lsrs	r0, r0, #5
    }
   d431c:	b003      	add	sp, #12
   d431e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4324 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4324:	b538      	push	{r3, r4, r5, lr}
   d4326:	4b10      	ldr	r3, [pc, #64]	; (d4368 <_ZN5TimerD1Ev+0x44>)
   d4328:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d432a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d432c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d432e:	b1a3      	cbz	r3, d435a <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4334:	2200      	movs	r2, #0
   d4336:	f7ff ffe5 	bl	d4304 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d433a:	2100      	movs	r1, #0
   d433c:	68a0      	ldr	r0, [r4, #8]
   d433e:	f001 fd29 	bl	d5d94 <os_timer_set_id>
            while (running) {
   d4342:	7923      	ldrb	r3, [r4, #4]
   d4344:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4348:	b113      	cbz	r3, d4350 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d434a:	f001 fcd3 	bl	d5cf4 <os_thread_yield>
   d434e:	e7f8      	b.n	d4342 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4350:	4629      	mov	r1, r5
   d4352:	68a0      	ldr	r0, [r4, #8]
   d4354:	f001 fcf6 	bl	d5d44 <os_timer_destroy>
            handle = nullptr;
   d4358:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d435a:	f104 000c 	add.w	r0, r4, #12
   d435e:	f7ff ff1c 	bl	d419a <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4362:	4620      	mov	r0, r4
   d4364:	bd38      	pop	{r3, r4, r5, pc}
   d4366:	bf00      	nop
   d4368:	000d9610 	.word	0x000d9610

000d436c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d436c:	b510      	push	{r4, lr}
   d436e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4370:	f7ff ffd8 	bl	d4324 <_ZN5TimerD1Ev>
   d4374:	4620      	mov	r0, r4
   d4376:	211c      	movs	r1, #28
   d4378:	f003 fd65 	bl	d7e46 <_ZdlPvj>
   d437c:	4620      	mov	r0, r4
   d437e:	bd10      	pop	{r4, pc}

000d4380 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4380:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4382:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4384:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4386:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4388:	4611      	mov	r1, r2
   d438a:	f7ff ffbb 	bl	d4304 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d438e:	68a8      	ldr	r0, [r5, #8]
   d4390:	2300      	movs	r3, #0
   d4392:	b140      	cbz	r0, d43a6 <_ZN5Timer5startEj+0x26>
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	9400      	str	r4, [sp, #0]
   d4398:	461a      	mov	r2, r3
   d439a:	4619      	mov	r1, r3
   d439c:	f001 fce2 	bl	d5d64 <os_timer_change>
   d43a0:	fab0 f080 	clz	r0, r0
   d43a4:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43a6:	b003      	add	sp, #12
   d43a8:	bd30      	pop	{r4, r5, pc}
	...

000d43ac <_Z17getSignalStrengthv>:

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d43ac:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43ae:	4d19      	ldr	r5, [pc, #100]	; (d4414 <_Z17getSignalStrengthv+0x68>)
   d43b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
  return 1;
}

void getSignalStrength() {
   d43b2:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43b4:	ac04      	add	r4, sp, #16
   d43b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d43ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43bc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d43c0:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d43c4:	4914      	ldr	r1, [pc, #80]	; (d4418 <_Z17getSignalStrengthv+0x6c>)
   d43c6:	a80e      	add	r0, sp, #56	; 0x38
   d43c8:	f002 f870 	bl	d64ac <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d43cc:	a80e      	add	r0, sp, #56	; 0x38
   d43ce:	f002 f8c0 	bl	d6552 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d43d2:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d43d4:	a80e      	add	r0, sp, #56	; 0x38
   d43d6:	f002 f90d 	bl	d65f4 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d43da:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d43dc:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d43e0:	f002 f8ee 	bl	d65c0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d43e4:	ab18      	add	r3, sp, #96	; 0x60
   d43e6:	ee10 0a10 	vmov	r0, s0
   d43ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d43ee:	f003 fff5 	bl	d83dc <__aeabi_f2d>
   d43f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43f6:	4628      	mov	r0, r5
   d43f8:	f003 fff0 	bl	d83dc <__aeabi_f2d>
   d43fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4400:	4a06      	ldr	r2, [pc, #24]	; (d441c <_Z17getSignalStrengthv+0x70>)
   d4402:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4406:	4806      	ldr	r0, [pc, #24]	; (d4420 <_Z17getSignalStrengthv+0x74>)
   d4408:	2140      	movs	r1, #64	; 0x40
   d440a:	f001 ffbd 	bl	d6388 <snprintf>
}
   d440e:	b019      	add	sp, #100	; 0x64
   d4410:	bd30      	pop	{r4, r5, pc}
   d4412:	bf00      	nop
   d4414:	000d961c 	.word	0x000d961c
   d4418:	2003e334 	.word	0x2003e334
   d441c:	000d96a4 	.word	0x000d96a4
   d4420:	2003e274 	.word	0x2003e274

000d4424 <_Z17connectToParticlev>:

}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4424:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4428:	481a      	ldr	r0, [pc, #104]	; (d4494 <_Z17connectToParticlev+0x70>)
   d442a:	2300      	movs	r3, #0
   d442c:	461a      	mov	r2, r3
   d442e:	4619      	mov	r1, r3
   d4430:	6840      	ldr	r0, [r0, #4]
   d4432:	f001 ff59 	bl	d62e8 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4436:	f001 feef 	bl	d6218 <spark_cloud_flag_connect>
   d443a:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d443e:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4442:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4444:	2000      	movs	r0, #0
   d4446:	f001 fd0d 	bl	d5e64 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d444a:	f04f 0900 	mov.w	r9, #0
   d444e:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4450:	2000      	movs	r0, #0
   d4452:	f001 fd07 	bl	d5e64 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4456:	ebb0 0008 	subs.w	r0, r0, r8
   d445a:	eb61 0109 	sbc.w	r1, r1, r9
   d445e:	428f      	cmp	r7, r1
   d4460:	bf08      	it	eq
   d4462:	4286      	cmpeq	r6, r0
   d4464:	d305      	bcc.n	d4472 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4466:	f001 fee7 	bl	d6238 <spark_cloud_flag_connected>
   d446a:	b910      	cbnz	r0, d4472 <_Z17connectToParticlev+0x4e>
            spark_process();
   d446c:	f001 fecc 	bl	d6208 <spark_process>
   d4470:	e7ee      	b.n	d4450 <_Z17connectToParticlev+0x2c>
   d4472:	f001 fee1 	bl	d6238 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4476:	b118      	cbz	r0, d4480 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4478:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d447c:	f001 bedc 	b.w	d6238 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4480:	f001 fcb8 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4484:	4b04      	ldr	r3, [pc, #16]	; (d4498 <_Z17connectToParticlev+0x74>)
   d4486:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4488:	f001 febe 	bl	d6208 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d448c:	3c01      	subs	r4, #1
   d448e:	d0f3      	beq.n	d4478 <_Z17connectToParticlev+0x54>
   d4490:	e7d8      	b.n	d4444 <_Z17connectToParticlev+0x20>
   d4492:	bf00      	nop
   d4494:	2003e334 	.word	0x2003e334
   d4498:	2003e6e8 	.word	0x2003e6e8

000d449c <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d449c:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d449e:	f001 fecb 	bl	d6238 <spark_cloud_flag_connected>
    return !Particle.connected();
   d44a2:	f080 0001 	eor.w	r0, r0, #1
}
   d44a6:	b2c0      	uxtb	r0, r0
   d44a8:	bd08      	pop	{r3, pc}
	...

000d44ac <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d44ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d44ae:	f001 febb 	bl	d6228 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44b2:	2000      	movs	r0, #0
   d44b4:	f001 fcd6 	bl	d5e64 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44b8:	2500      	movs	r5, #0
   d44ba:	4604      	mov	r4, r0
   d44bc:	f643 2697 	movw	r6, #14999	; 0x3a97
   d44c0:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44c2:	2000      	movs	r0, #0
   d44c4:	f001 fcce 	bl	d5e64 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44c8:	1b00      	subs	r0, r0, r4
   d44ca:	eb61 0105 	sbc.w	r1, r1, r5
   d44ce:	428f      	cmp	r7, r1
   d44d0:	bf08      	it	eq
   d44d2:	4286      	cmpeq	r6, r0
   d44d4:	d305      	bcc.n	d44e2 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d44d6:	f7ff ffe1 	bl	d449c <_Z12notConnectedv>
   d44da:	b910      	cbnz	r0, d44e2 <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d44dc:	f001 fe94 	bl	d6208 <spark_process>
   d44e0:	e7ef      	b.n	d44c2 <_Z22disconnectFromParticlev+0x16>
   d44e2:	f7ff ffdb 	bl	d449c <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d44e6:	4806      	ldr	r0, [pc, #24]	; (d4500 <_Z22disconnectFromParticlev+0x54>)
   d44e8:	2300      	movs	r3, #0
   d44ea:	461a      	mov	r2, r3
   d44ec:	4619      	mov	r1, r3
   d44ee:	6840      	ldr	r0, [r0, #4]
   d44f0:	f001 ff02 	bl	d62f8 <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
   d44f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d44f8:	f001 ff6a 	bl	d63d0 <delay>
  return true;
}
   d44fc:	2001      	movs	r0, #1
   d44fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4500:	2003e334 	.word	0x2003e334

000d4504 <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
   d4504:	b513      	push	{r0, r1, r4, lr}
   d4506:	4604      	mov	r4, r0
  PMIC pmic(true);
   d4508:	2101      	movs	r1, #1
   d450a:	a801      	add	r0, sp, #4
   d450c:	f002 fe8b 	bl	d7226 <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
   d4510:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
   d4512:	b11c      	cbz	r4, d451c <_Z14enableChargingb+0x18>
    pmic.enableCharging();
   d4514:	f002 ff22 	bl	d735c <_ZN4PMIC14enableChargingEv>
    return TRUE;
   d4518:	2401      	movs	r4, #1
   d451a:	e001      	b.n	d4520 <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
   d451c:	f002 feee 	bl	d72fc <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
   d4520:	a801      	add	r0, sp, #4
   d4522:	f002 fe8f 	bl	d7244 <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
   d4526:	4620      	mov	r0, r4
   d4528:	b002      	add	sp, #8
   d452a:	bd10      	pop	{r4, pc}

000d452c <_Z14setPowerConfigv>:
  }
  else return 0;
}

// Power Management function
int setPowerConfig() {
   d452c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d452e:	2420      	movs	r4, #32
   d4530:	b090      	sub	sp, #64	; 0x40
   d4532:	4622      	mov	r2, r4
   d4534:	2100      	movs	r1, #0
   d4536:	4668      	mov	r0, sp
   d4538:	f004 fba3 	bl	d8c82 <memset>
   d453c:	4622      	mov	r2, r4
   d453e:	2100      	movs	r1, #0
   d4540:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4544:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4548:	f004 fb9b 	bl	d8c82 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d454c:	2100      	movs	r1, #0
   d454e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4552:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4556:	f001 fe33 	bl	d61c0 <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
   d455a:	4b1a      	ldr	r3, [pc, #104]	; (d45c4 <_Z14setPowerConfigv+0x98>)
   d455c:	7959      	ldrb	r1, [r3, #5]
   d455e:	9b00      	ldr	r3, [sp, #0]
   d4560:	b1a1      	cbz	r1, d458c <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4562:	f240 2226 	movw	r2, #550	; 0x226
   d4566:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d456a:	f241 22e8 	movw	r2, #4840	; 0x12e8
   d456e:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4572:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4576:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d457a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d457e:	f241 0272 	movw	r2, #4210	; 0x1072
   d4582:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4586:	9300      	str	r3, [sp, #0]
   d4588:	2100      	movs	r1, #0
   d458a:	e010      	b.n	d45ae <_Z14setPowerConfigv+0x82>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d458c:	f44f 7261 	mov.w	r2, #900	; 0x384
   d4590:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4594:	f241 0070 	movw	r0, #4208	; 0x1070
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4598:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d459c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45a0:	f241 0210 	movw	r2, #4112	; 0x1010

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45a4:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45a8:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45ac:	9300      	str	r3, [sp, #0]
   d45ae:	4668      	mov	r0, sp
   d45b0:	f001 fe06 	bl	d61c0 <system_power_management_set_config>
   d45b4:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                     // This is the default value for the Boron
        .batteryChargeCurrent(900)                                      // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                      // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
   d45b6:	2001      	movs	r0, #1
   d45b8:	f7ff ffa4 	bl	d4504 <_Z14enableChargingb>
    return res;
  }
}
   d45bc:	4620      	mov	r0, r4
   d45be:	b010      	add	sp, #64	; 0x40
   d45c0:	bd10      	pop	{r4, pc}
   d45c2:	bf00      	nop
   d45c4:	2003e310 	.word	0x2003e310

000d45c8 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d45c8:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d45ca:	4c07      	ldr	r4, [pc, #28]	; (d45e8 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45cc:	f001 fc12 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
   d45d0:	6823      	ldr	r3, [r4, #0]
   d45d2:	1ac0      	subs	r0, r0, r3
   d45d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d45d8:	d304      	bcc.n	d45e4 <_Z20meterParticlePublishv+0x1c>
   d45da:	f001 fc0b 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d45de:	6020      	str	r0, [r4, #0]
   d45e0:	2001      	movs	r0, #1
   d45e2:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d45e4:	2000      	movs	r0, #0
}
   d45e6:	bd10      	pop	{r4, pc}
   d45e8:	2003e2b4 	.word	0x2003e2b4

000d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d45ec:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d45ee:	f7ff ffeb 	bl	d45c8 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45f2:	b118      	cbz	r0, d45fc <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d45f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d45f8:	f7ff bfe6 	b.w	d45c8 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d45fc:	f001 fe04 	bl	d6208 <spark_process>
   d4600:	e7f5      	b.n	d45ee <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53+0x2>
	...

000d4604 <_Z14fullModemResetv>:
    return 1;
  }
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4604:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4606:	f001 fe0f 	bl	d6228 <spark_cloud_flag_disconnect>
   d460a:	f001 fbf3 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d460e:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4612:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4614:	f001 fe10 	bl	d6238 <spark_cloud_flag_connected>
   d4618:	b140      	cbz	r0, d462c <_Z14fullModemResetv+0x28>
   d461a:	f001 fbeb 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
   d461e:	1b00      	subs	r0, r0, r4
   d4620:	42a8      	cmp	r0, r5
   d4622:	d803      	bhi.n	d462c <_Z14fullModemResetv+0x28>
		delay(100);
   d4624:	2064      	movs	r0, #100	; 0x64
   d4626:	f001 fed3 	bl	d63d0 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d462a:	e7f3      	b.n	d4614 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d462c:	2100      	movs	r1, #0
   d462e:	4b09      	ldr	r3, [pc, #36]	; (d4654 <_Z14fullModemResetv+0x50>)
   d4630:	f247 5230 	movw	r2, #30000	; 0x7530
   d4634:	4608      	mov	r0, r1
   d4636:	f001 fb4d 	bl	d5cd4 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d463a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d463e:	f001 fec7 	bl	d63d0 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4642:	4b05      	ldr	r3, [pc, #20]	; (d4658 <_Z14fullModemResetv+0x54>)
   d4644:	220a      	movs	r2, #10
   d4646:	681b      	ldr	r3, [r3, #0]
   d4648:	2101      	movs	r1, #1
   d464a:	4668      	mov	r0, sp
   d464c:	f003 f86c 	bl	d7728 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4650:	b003      	add	sp, #12
   d4652:	bd30      	pop	{r4, r5, pc}
   d4654:	000d96bd 	.word	0x000d96bd
   d4658:	2003e250 	.word	0x2003e250

000d465c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d465c:	b530      	push	{r4, r5, lr}
   d465e:	b085      	sub	sp, #20
   d4660:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4662:	a904      	add	r1, sp, #16
   d4664:	2200      	movs	r2, #0
   d4666:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d466a:	f001 fd4b 	bl	d6104 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d466e:	b9a8      	cbnz	r0, d469c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4670:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d4672:	b10c      	cbz	r4, d4678 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d4674:	6923      	ldr	r3, [r4, #16]
   d4676:	b923      	cbnz	r3, d4682 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d4678:	4a09      	ldr	r2, [pc, #36]	; (d46a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d467a:	2100      	movs	r1, #0
   d467c:	200a      	movs	r0, #10
   d467e:	f001 fd31 	bl	d60e4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4682:	2300      	movs	r3, #0
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	230c      	movs	r3, #12
   d4688:	f8ad 3004 	strh.w	r3, [sp, #4]
   d468c:	2304      	movs	r3, #4
   d468e:	9303      	str	r3, [sp, #12]
   d4690:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4692:	6923      	ldr	r3, [r4, #16]
   d4694:	aa01      	add	r2, sp, #4
   d4696:	2101      	movs	r1, #1
   d4698:	4620      	mov	r0, r4
   d469a:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d469c:	b005      	add	sp, #20
   d469e:	bd30      	pop	{r4, r5, pc}
   d46a0:	000d5de5 	.word	0x000d5de5

000d46a4 <_Z17getBatteryContextv>:

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d46a4:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46a6:	4d0e      	ldr	r5, [pc, #56]	; (d46e0 <_Z17getBatteryContextv+0x3c>)
   d46a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


void getBatteryContext() {
   d46aa:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46ac:	ac01      	add	r4, sp, #4
   d46ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d46b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d46b8:	4669      	mov	r1, sp
   d46ba:	2007      	movs	r0, #7
   d46bc:	f7ff ffce 	bl	d465c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d46c0:	2800      	cmp	r0, #0
        return val;
   d46c2:	bfa8      	it	ge
   d46c4:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d46c6:	4a07      	ldr	r2, [pc, #28]	; (d46e4 <_Z17getBatteryContextv+0x40>)
   d46c8:	ab08      	add	r3, sp, #32
   d46ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d46ce:	2110      	movs	r1, #16
   d46d0:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d46d4:	4804      	ldr	r0, [pc, #16]	; (d46e8 <_Z17getBatteryContextv+0x44>)
   d46d6:	f001 fe57 	bl	d6388 <snprintf>

}
   d46da:	b009      	add	sp, #36	; 0x24
   d46dc:	bd30      	pop	{r4, r5, pc}
   d46de:	bf00      	nop
   d46e0:	000d9644 	.word	0x000d9644
   d46e4:	000d9983 	.word	0x000d9983
   d46e8:	2003e1e9 	.word	0x2003e1e9

000d46ec <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d46ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d46ee:	4d59      	ldr	r5, [pc, #356]	; (d4854 <_Z16takeMeasurementsv+0x168>)
   d46f0:	4c59      	ldr	r4, [pc, #356]	; (d4858 <_Z16takeMeasurementsv+0x16c>)
   d46f2:	7b2b      	ldrb	r3, [r5, #12]
   d46f4:	b13b      	cbz	r3, d4706 <_Z16takeMeasurementsv+0x1a>
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
   d46f6:	4859      	ldr	r0, [pc, #356]	; (d485c <_Z16takeMeasurementsv+0x170>)
   d46f8:	f001 fac6 	bl	d5c88 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d46fc:	eeb4 0a40 	vcmp.f32	s0, s0
   d4700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4704:	d703      	bvc.n	d470e <_Z16takeMeasurementsv+0x22>
   d4706:	2300      	movs	r3, #0
   d4708:	61a3      	str	r3, [r4, #24]
   d470a:	6163      	str	r3, [r4, #20]
   d470c:	e009      	b.n	d4722 <_Z16takeMeasurementsv+0x36>
    else {
    current.temperature = tempHumidSensor.readTemperature();
   d470e:	4853      	ldr	r0, [pc, #332]	; (d485c <_Z16takeMeasurementsv+0x170>)
   d4710:	f001 faba 	bl	d5c88 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d4714:	4851      	ldr	r0, [pc, #324]	; (d485c <_Z16takeMeasurementsv+0x170>)
  // Read values from the sensor

  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
    else {
    current.temperature = tempHumidSensor.readTemperature();
   d4716:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d471a:	f001 fac3 	bl	d5ca4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d471e:	ed84 0a06 	vstr	s0, [r4, #24]
    }

  }
  else current.temperature = current.humidity = 0.0;
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4722:	6960      	ldr	r0, [r4, #20]
   d4724:	4e4c      	ldr	r6, [pc, #304]	; (d4858 <_Z16takeMeasurementsv+0x16c>)
   d4726:	f003 fe59 	bl	d83dc <__aeabi_f2d>
   d472a:	4a4d      	ldr	r2, [pc, #308]	; (d4860 <_Z16takeMeasurementsv+0x174>)
   d472c:	e9cd 0100 	strd	r0, r1, [sp]
   d4730:	2110      	movs	r1, #16
   d4732:	484c      	ldr	r0, [pc, #304]	; (d4864 <_Z16takeMeasurementsv+0x178>)
   d4734:	f001 fe28 	bl	d6388 <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d4738:	69a0      	ldr	r0, [r4, #24]
   d473a:	f003 fe4f 	bl	d83dc <__aeabi_f2d>
   d473e:	4a4a      	ldr	r2, [pc, #296]	; (d4868 <_Z16takeMeasurementsv+0x17c>)
   d4740:	e9cd 0100 	strd	r0, r1, [sp]
   d4744:	2110      	movs	r1, #16
   d4746:	4849      	ldr	r0, [pc, #292]	; (d486c <_Z16takeMeasurementsv+0x180>)
   d4748:	f001 fe1e 	bl	d6388 <snprintf>

  if (sysStatus.lightSensorConfig) {
   d474c:	7c2b      	ldrb	r3, [r5, #16]
   d474e:	b143      	cbz	r3, d4762 <_Z16takeMeasurementsv+0x76>
    lightSensor.make_forced_measurement();
   d4750:	4847      	ldr	r0, [pc, #284]	; (d4870 <_Z16takeMeasurementsv+0x184>)
   d4752:	f001 f9c3 	bl	d5adc <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d4756:	4846      	ldr	r0, [pc, #280]	; (d4870 <_Z16takeMeasurementsv+0x184>)
   d4758:	f001 f97a 	bl	d5a50 <_ZN6BH175015get_light_levelEv>
   d475c:	ed86 0a07 	vstr	s0, [r6, #28]
   d4760:	e001      	b.n	d4766 <_Z16takeMeasurementsv+0x7a>
  }
  else current.lightLevel = 0.0;
   d4762:	2300      	movs	r3, #0
   d4764:	61f3      	str	r3, [r6, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d4766:	69e0      	ldr	r0, [r4, #28]
   d4768:	4e3b      	ldr	r6, [pc, #236]	; (d4858 <_Z16takeMeasurementsv+0x16c>)
   d476a:	f003 fe37 	bl	d83dc <__aeabi_f2d>
   d476e:	4a41      	ldr	r2, [pc, #260]	; (d4874 <_Z16takeMeasurementsv+0x188>)
   d4770:	e9cd 0100 	strd	r0, r1, [sp]
   d4774:	2110      	movs	r1, #16
   d4776:	4840      	ldr	r0, [pc, #256]	; (d4878 <_Z16takeMeasurementsv+0x18c>)
   d4778:	f001 fe06 	bl	d6388 <snprintf>

  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d477c:	7bab      	ldrb	r3, [r5, #14]
   d477e:	b163      	cbz	r3, d479a <_Z16takeMeasurementsv+0xae>
   d4780:	2013      	movs	r0, #19
   d4782:	f003 fab0 	bl	d7ce6 <analogRead>
   d4786:	2364      	movs	r3, #100	; 0x64
   d4788:	9300      	str	r3, [sp, #0]
   d478a:	2300      	movs	r3, #0
   d478c:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4790:	4619      	mov	r1, r3
   d4792:	f001 fe11 	bl	d63b8 <_Z3mapiiiii>
   d4796:	6030      	str	r0, [r6, #0]
   d4798:	e000      	b.n	d479c <_Z16takeMeasurementsv+0xb0>
  else current.soilMoisture1 = 0;
   d479a:	6033      	str	r3, [r6, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d479c:	7bab      	ldrb	r3, [r5, #14]
   d479e:	2b02      	cmp	r3, #2
   d47a0:	d10c      	bne.n	d47bc <_Z16takeMeasurementsv+0xd0>
   d47a2:	2012      	movs	r0, #18
   d47a4:	f003 fa9f 	bl	d7ce6 <analogRead>
   d47a8:	2364      	movs	r3, #100	; 0x64
   d47aa:	9300      	str	r3, [sp, #0]
   d47ac:	2300      	movs	r3, #0
   d47ae:	f640 628a 	movw	r2, #3722	; 0xe8a
   d47b2:	4619      	mov	r1, r3
   d47b4:	f001 fe00 	bl	d63b8 <_Z3mapiiiii>
   d47b8:	6060      	str	r0, [r4, #4]
   d47ba:	e001      	b.n	d47c0 <_Z16takeMeasurementsv+0xd4>
  else current.soilMoisture2 = 0;
   d47bc:	2300      	movs	r3, #0
   d47be:	6063      	str	r3, [r4, #4]


  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d47c0:	7beb      	ldrb	r3, [r5, #15]
   d47c2:	2b01      	cmp	r3, #1
   d47c4:	d10d      	bne.n	d47e2 <_Z16takeMeasurementsv+0xf6>
   d47c6:	2011      	movs	r0, #17
   d47c8:	f003 fa8d 	bl	d7ce6 <analogRead>
   d47cc:	231e      	movs	r3, #30
   d47ce:	9300      	str	r3, [sp, #0]
   d47d0:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d47d4:	2300      	movs	r3, #0
   d47d6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d47da:	f001 fded 	bl	d63b8 <_Z3mapiiiii>
   d47de:	60a0      	str	r0, [r4, #8]
   d47e0:	e002      	b.n	d47e8 <_Z16takeMeasurementsv+0xfc>
  else sysStatus.pressureSensorConfig = 0;
   d47e2:	4b1c      	ldr	r3, [pc, #112]	; (d4854 <_Z16takeMeasurementsv+0x168>)
   d47e4:	2200      	movs	r2, #0
   d47e6:	73da      	strb	r2, [r3, #15]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d47e8:	4b24      	ldr	r3, [pc, #144]	; (d487c <_Z16takeMeasurementsv+0x190>)
   d47ea:	2200      	movs	r2, #0
   d47ec:	4611      	mov	r1, r2
   d47ee:	6858      	ldr	r0, [r3, #4]
   d47f0:	f001 fd72 	bl	d62d8 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d47f4:	b108      	cbz	r0, d47fa <_Z16takeMeasurementsv+0x10e>
   d47f6:	f7ff fdd9 	bl	d43ac <_Z17getSignalStrengthv>
   d47fa:	a903      	add	r1, sp, #12
   d47fc:	2003      	movs	r0, #3
   d47fe:	f7ff ff2d 	bl	d465c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4802:	b988      	cbnz	r0, d4828 <_Z16takeMeasurementsv+0x13c>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4804:	2006      	movs	r0, #6
   d4806:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d480a:	f7ff fd37 	bl	d427c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d480e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4812:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4816:	ee07 3a10 	vmov	s14, r3
   d481a:	ee30 0a00 	vadd.f32	s0, s0, s0
   d481e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4822:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4826:	e001      	b.n	d482c <_Z16takeMeasurementsv+0x140>
            return -1.0f;
   d4828:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0

  // sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d482c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4830:	4a13      	ldr	r2, [pc, #76]	; (d4880 <_Z16takeMeasurementsv+0x194>)
   d4832:	4814      	ldr	r0, [pc, #80]	; (d4884 <_Z16takeMeasurementsv+0x198>)
  else sysStatus.pressureSensorConfig = 0;

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready

  // sysStatus.stateOfCharge = int(System.batteryCharge());                       // Percentage of full charge
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d4834:	edc5 7a02 	vstr	s15, [r5, #8]
   d4838:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d483c:	2108      	movs	r1, #8
   d483e:	f001 fda3 	bl	d6388 <snprintf>

  getBatteryContext();                                                 // What is the battery doing.
   d4842:	f7ff ff2f 	bl	d46a4 <_Z17getBatteryContextv>

  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d4846:	4b10      	ldr	r3, [pc, #64]	; (d4888 <_Z16takeMeasurementsv+0x19c>)
   d4848:	2001      	movs	r0, #1
   d484a:	7018      	strb	r0, [r3, #0]
   d484c:	4b0f      	ldr	r3, [pc, #60]	; (d488c <_Z16takeMeasurementsv+0x1a0>)
   d484e:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4850:	b004      	add	sp, #16
   d4852:	bd70      	pop	{r4, r5, r6, pc}
   d4854:	2003e310 	.word	0x2003e310
   d4858:	2003e2c4 	.word	0x2003e2c4
   d485c:	2003e264 	.word	0x2003e264
   d4860:	000d96ca 	.word	0x000d96ca
   d4864:	2003e1c4 	.word	0x2003e1c4
   d4868:	000d96d2 	.word	0x000d96d2
   d486c:	2003e2e8 	.word	0x2003e2e8
   d4870:	2003e1e0 	.word	0x2003e1e0
   d4874:	000d96db 	.word	0x000d96db
   d4878:	2003e300 	.word	0x2003e300
   d487c:	2003e334 	.word	0x2003e334
   d4880:	000d96e5 	.word	0x000d96e5
   d4884:	2003e2f8 	.word	0x2003e2f8
   d4888:	2003e234 	.word	0x2003e234
   d488c:	2003e1f9 	.word	0x2003e1f9

000d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4890:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4892:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4894:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4896:	b17c      	cbz	r4, d48b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4898:	6863      	ldr	r3, [r4, #4]
   d489a:	3b01      	subs	r3, #1
   d489c:	6063      	str	r3, [r4, #4]
   d489e:	b95b      	cbnz	r3, d48b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d48a0:	6823      	ldr	r3, [r4, #0]
   d48a2:	4620      	mov	r0, r4
   d48a4:	689b      	ldr	r3, [r3, #8]
   d48a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48a8:	68a3      	ldr	r3, [r4, #8]
   d48aa:	3b01      	subs	r3, #1
   d48ac:	60a3      	str	r3, [r4, #8]
   d48ae:	b91b      	cbnz	r3, d48b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d48b0:	6823      	ldr	r3, [r4, #0]
   d48b2:	4620      	mov	r0, r4
   d48b4:	68db      	ldr	r3, [r3, #12]
   d48b6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d48b8:	4628      	mov	r0, r5
   d48ba:	bd38      	pop	{r3, r4, r5, pc}

000d48bc <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d48bc:	b530      	push	{r4, r5, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d48be:	4c2f      	ldr	r4, [pc, #188]	; (d497c <_Z9sendEventv+0xc0>)
   d48c0:	4d2f      	ldr	r5, [pc, #188]	; (d4980 <_Z9sendEventv+0xc4>)
   d48c2:	6a23      	ldr	r3, [r4, #32]
    break;
  }
}

void sendEvent()
{
   d48c4:	b0d1      	sub	sp, #324	; 0x144
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d48c6:	930d      	str	r3, [sp, #52]	; 0x34
   d48c8:	4b2e      	ldr	r3, [pc, #184]	; (d4984 <_Z9sendEventv+0xc8>)
   d48ca:	699a      	ldr	r2, [r3, #24]
   d48cc:	920c      	str	r2, [sp, #48]	; 0x30
   d48ce:	4a2e      	ldr	r2, [pc, #184]	; (d4988 <_Z9sendEventv+0xcc>)
   d48d0:	920b      	str	r2, [sp, #44]	; 0x2c
   d48d2:	689b      	ldr	r3, [r3, #8]
   d48d4:	930a      	str	r3, [sp, #40]	; 0x28
   d48d6:	68e3      	ldr	r3, [r4, #12]
   d48d8:	9309      	str	r3, [sp, #36]	; 0x24
   d48da:	68a3      	ldr	r3, [r4, #8]
   d48dc:	9308      	str	r3, [sp, #32]
   d48de:	6863      	ldr	r3, [r4, #4]
   d48e0:	9307      	str	r3, [sp, #28]
   d48e2:	6823      	ldr	r3, [r4, #0]
   d48e4:	9306      	str	r3, [sp, #24]
   d48e6:	69e0      	ldr	r0, [r4, #28]
   d48e8:	f003 fd78 	bl	d83dc <__aeabi_f2d>
   d48ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d48f0:	69a0      	ldr	r0, [r4, #24]
   d48f2:	f003 fd73 	bl	d83dc <__aeabi_f2d>
   d48f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d48fa:	6960      	ldr	r0, [r4, #20]
   d48fc:	f003 fd6e 	bl	d83dc <__aeabi_f2d>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4900:	2400      	movs	r4, #0
   d4902:	e9cd 0100 	strd	r0, r1, [sp]
   d4906:	4a21      	ldr	r2, [pc, #132]	; (d498c <_Z9sendEventv+0xd0>)
   d4908:	f44f 7180 	mov.w	r1, #256	; 0x100
   d490c:	a810      	add	r0, sp, #64	; 0x40
   d490e:	f001 fd3b 	bl	d6388 <snprintf>
  waitUntil(meterParticlePublish);
   d4912:	f7ff fe6b 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4916:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control-Elastic", data, PRIVATE);
   d4918:	491d      	ldr	r1, [pc, #116]	; (d4990 <_Z9sendEventv+0xd4>)
   d491a:	f88d 4000 	strb.w	r4, [sp]
   d491e:	aa10      	add	r2, sp, #64	; 0x40
   d4920:	a80e      	add	r0, sp, #56	; 0x38
   d4922:	f7ff fc25 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4926:	a80f      	add	r0, sp, #60	; 0x3c
   d4928:	f7ff ffb2 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d492c:	f7ff fe5e 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d4930:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("agriculture-aws-webhook",data,PRIVATE);
   d4932:	4918      	ldr	r1, [pc, #96]	; (d4994 <_Z9sendEventv+0xd8>)
   d4934:	f88d 4000 	strb.w	r4, [sp]
   d4938:	aa10      	add	r2, sp, #64	; 0x40
   d493a:	a80e      	add	r0, sp, #56	; 0x38
   d493c:	f7ff fc18 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4940:	a80f      	add	r0, sp, #60	; 0x3c
   d4942:	f7ff ffa5 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4946:	f7ff fe51 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d494a:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d494c:	4912      	ldr	r1, [pc, #72]	; (d4998 <_Z9sendEventv+0xdc>)
   d494e:	f88d 4000 	strb.w	r4, [sp]
   d4952:	aa10      	add	r2, sp, #64	; 0x40
   d4954:	a80e      	add	r0, sp, #56	; 0x38
   d4956:	f7ff fc0b 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d495a:	a80f      	add	r0, sp, #60	; 0x3c
   d495c:	f7ff ff98 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d4960:	f002 ff8a 	bl	d7878 <_ZN9TimeClass4hourEv>
   d4964:	4b0d      	ldr	r3, [pc, #52]	; (d499c <_Z9sendEventv+0xe0>)
   d4966:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d4968:	4b0d      	ldr	r3, [pc, #52]	; (d49a0 <_Z9sendEventv+0xe4>)
   d496a:	2201      	movs	r2, #1
   d496c:	701a      	strb	r2, [r3, #0]
   d496e:	f001 fa41 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4972:	4b0c      	ldr	r3, [pc, #48]	; (d49a4 <_Z9sendEventv+0xe8>)
   d4974:	6018      	str	r0, [r3, #0]
}
   d4976:	b051      	add	sp, #324	; 0x144
   d4978:	bd30      	pop	{r4, r5, pc}
   d497a:	bf00      	nop
   d497c:	2003e2c4 	.word	0x2003e2c4
   d4980:	2003e1dc 	.word	0x2003e1dc
   d4984:	2003e310 	.word	0x2003e310
   d4988:	2003e1e9 	.word	0x2003e1e9
   d498c:	000d96eb 	.word	0x000d96eb
   d4990:	000d97a7 	.word	0x000d97a7
   d4994:	000d97c8 	.word	0x000d97c8
   d4998:	000d97e0 	.word	0x000d97e0
   d499c:	2003e236 	.word	0x2003e236
   d49a0:	2003e106 	.word	0x2003e106
   d49a4:	2003e1d8 	.word	0x2003e1d8

000d49a8 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49a8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d49aa:	780b      	ldrb	r3, [r1, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49ac:	b094      	sub	sp, #80	; 0x50
   d49ae:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d49b0:	b923      	cbnz	r3, d49bc <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d49b2:	491c      	ldr	r1, [pc, #112]	; (d4a24 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d49b4:	a804      	add	r0, sp, #16
   d49b6:	f004 f99f 	bl	d8cf8 <strcpy>
   d49ba:	e017      	b.n	d49ec <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d49bc:	4608      	mov	r0, r1
   d49be:	f004 f84b 	bl	d8a58 <atoi>
   d49c2:	28c8      	cmp	r0, #200	; 0xc8
   d49c4:	d004      	beq.n	d49d0 <_Z14UbidotsHandlerPKcS0_+0x28>
   d49c6:	4620      	mov	r0, r4
   d49c8:	f004 f846 	bl	d8a58 <atoi>
   d49cc:	28c9      	cmp	r0, #201	; 0xc9
   d49ce:	d11e      	bne.n	d4a0e <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d49d0:	4915      	ldr	r1, [pc, #84]	; (d4a28 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d49d2:	a804      	add	r0, sp, #16
   d49d4:	f004 f990 	bl	d8cf8 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d49d8:	f002 ff46 	bl	d7868 <_ZN9TimeClass3nowEv>
   d49dc:	4b13      	ldr	r3, [pc, #76]	; (d4a2c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d49de:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d49e0:	4b13      	ldr	r3, [pc, #76]	; (d4a30 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d49e2:	2201      	movs	r2, #1
   d49e4:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d49e6:	4b13      	ldr	r3, [pc, #76]	; (d4a34 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d49e8:	2200      	movs	r2, #0
   d49ea:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d49ec:	f7ff fdfe 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d49f0:	4b11      	ldr	r3, [pc, #68]	; (d4a38 <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d49f2:	4912      	ldr	r1, [pc, #72]	; (d4a3c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d49f4:	781b      	ldrb	r3, [r3, #0]
   d49f6:	2200      	movs	r2, #0
   d49f8:	f88d 2000 	strb.w	r2, [sp]
   d49fc:	a802      	add	r0, sp, #8
   d49fe:	aa04      	add	r2, sp, #16
   d4a00:	f7ff fbb6 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4a04:	a803      	add	r0, sp, #12
   d4a06:	f7ff ff43 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4a0a:	b014      	add	sp, #80	; 0x50
   d4a0c:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4a0e:	4620      	mov	r0, r4
   d4a10:	f004 f822 	bl	d8a58 <atoi>
   d4a14:	4a0a      	ldr	r2, [pc, #40]	; (d4a40 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4a16:	4603      	mov	r3, r0
   d4a18:	2140      	movs	r1, #64	; 0x40
   d4a1a:	a804      	add	r0, sp, #16
   d4a1c:	f001 fcb4 	bl	d6388 <snprintf>
   d4a20:	e7e4      	b.n	d49ec <_Z14UbidotsHandlerPKcS0_+0x44>
   d4a22:	bf00      	nop
   d4a24:	000d97f9 	.word	0x000d97f9
   d4a28:	000d980e 	.word	0x000d980e
   d4a2c:	2003e310 	.word	0x2003e310
   d4a30:	2003e1f9 	.word	0x2003e1f9
   d4a34:	2003e106 	.word	0x2003e106
   d4a38:	2003e1dc 	.word	0x2003e1dc
   d4a3c:	000d9801 	.word	0x000d9801
   d4a40:	000d9820 	.word	0x000d9820

000d4a44 <_Z14setSoilSensors6String>:
  }
}


int setSoilSensors (String command) // Function to force sending data in current hour
{
   d4a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4a46:	491e      	ldr	r1, [pc, #120]	; (d4ac0 <_Z14setSoilSensors6String+0x7c>)
   d4a48:	4604      	mov	r4, r0
   d4a4a:	f002 fd7e 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4a4e:	4606      	mov	r6, r0
   d4a50:	b158      	cbz	r0, d4a6a <_Z14setSoilSensors6String+0x26>
  {
    sysStatus.soilSensorConfig = 0;
   d4a52:	4b1c      	ldr	r3, [pc, #112]	; (d4ac4 <_Z14setSoilSensors6String+0x80>)
   d4a54:	2200      	movs	r2, #0
   d4a56:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4a58:	4b1b      	ldr	r3, [pc, #108]	; (d4ac8 <_Z14setSoilSensors6String+0x84>)
   d4a5a:	2401      	movs	r4, #1
   d4a5c:	701c      	strb	r4, [r3, #0]
   d4a5e:	4b1b      	ldr	r3, [pc, #108]	; (d4acc <_Z14setSoilSensors6String+0x88>)
   d4a60:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d4a62:	f88d 2000 	strb.w	r2, [sp]
   d4a66:	4a1a      	ldr	r2, [pc, #104]	; (d4ad0 <_Z14setSoilSensors6String+0x8c>)
   d4a68:	e020      	b.n	d4aac <_Z14setSoilSensors6String+0x68>
   d4a6a:	491a      	ldr	r1, [pc, #104]	; (d4ad4 <_Z14setSoilSensors6String+0x90>)
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	f002 fd6c 	bl	d754a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4a72:	4605      	mov	r5, r0
   d4a74:	b150      	cbz	r0, d4a8c <_Z14setSoilSensors6String+0x48>
  {
    sysStatus.soilSensorConfig = 1;
   d4a76:	4b13      	ldr	r3, [pc, #76]	; (d4ac4 <_Z14setSoilSensors6String+0x80>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4a78:	4a17      	ldr	r2, [pc, #92]	; (d4ad8 <_Z14setSoilSensors6String+0x94>)
    Particle.publish("Config","No Soil Sensors",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.soilSensorConfig = 1;
   d4a7a:	2401      	movs	r4, #1
   d4a7c:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d4a7e:	4b12      	ldr	r3, [pc, #72]	; (d4ac8 <_Z14setSoilSensors6String+0x84>)
   d4a80:	701c      	strb	r4, [r3, #0]
   d4a82:	4b12      	ldr	r3, [pc, #72]	; (d4acc <_Z14setSoilSensors6String+0x88>)
   d4a84:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4a86:	f88d 6000 	strb.w	r6, [sp]
   d4a8a:	e00f      	b.n	d4aac <_Z14setSoilSensors6String+0x68>
   d4a8c:	4913      	ldr	r1, [pc, #76]	; (d4adc <_Z14setSoilSensors6String+0x98>)
   d4a8e:	4620      	mov	r0, r4
   d4a90:	f002 fd5b 	bl	d754a <_ZNK6String6equalsEPKc>
    return 1;
  }
    else if (command == "2")
   d4a94:	b190      	cbz	r0, d4abc <_Z14setSoilSensors6String+0x78>
  {
    sysStatus.soilSensorConfig = 2;
   d4a96:	4b0b      	ldr	r3, [pc, #44]	; (d4ac4 <_Z14setSoilSensors6String+0x80>)
   d4a98:	2202      	movs	r2, #2
   d4a9a:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4a9c:	4b0a      	ldr	r3, [pc, #40]	; (d4ac8 <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4a9e:	4a10      	ldr	r2, [pc, #64]	; (d4ae0 <_Z14setSoilSensors6String+0x9c>)
    return 1;
  }
    else if (command == "2")
  {
    sysStatus.soilSensorConfig = 2;
    systemStatusWriteNeeded = true;
   d4aa0:	2401      	movs	r4, #1
   d4aa2:	701c      	strb	r4, [r3, #0]
   d4aa4:	4b09      	ldr	r3, [pc, #36]	; (d4acc <_Z14setSoilSensors6String+0x88>)
   d4aa6:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4aa8:	f88d 5000 	strb.w	r5, [sp]
   d4aac:	490d      	ldr	r1, [pc, #52]	; (d4ae4 <_Z14setSoilSensors6String+0xa0>)
   d4aae:	a802      	add	r0, sp, #8
   d4ab0:	f7ff fb5e 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4ab4:	a803      	add	r0, sp, #12
   d4ab6:	f7ff feeb 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4aba:	4620      	mov	r0, r4
  }
  else return 0;
}
   d4abc:	b004      	add	sp, #16
   d4abe:	bd70      	pop	{r4, r5, r6, pc}
   d4ac0:	000d983d 	.word	0x000d983d
   d4ac4:	2003e310 	.word	0x2003e310
   d4ac8:	2003e1f9 	.word	0x2003e1f9
   d4acc:	2003e1dc 	.word	0x2003e1dc
   d4ad0:	000d983f 	.word	0x000d983f
   d4ad4:	000d9bf8 	.word	0x000d9bf8
   d4ad8:	000d9856 	.word	0x000d9856
   d4adc:	000d9abc 	.word	0x000d9abc
   d4ae0:	000d9866 	.word	0x000d9866
   d4ae4:	000d984f 	.word	0x000d984f

000d4ae8 <_Z17setPressureSensor6String>:

int setPressureSensor (String command) // Function to force sending data in current hour
{
   d4ae8:	b530      	push	{r4, r5, lr}
   d4aea:	4916      	ldr	r1, [pc, #88]	; (d4b44 <_Z17setPressureSensor6String+0x5c>)
   d4aec:	b085      	sub	sp, #20
   d4aee:	4604      	mov	r4, r0
   d4af0:	f002 fd2b 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4af4:	4605      	mov	r5, r0
   d4af6:	b158      	cbz	r0, d4b10 <_Z17setPressureSensor6String+0x28>
  {
    sysStatus.pressureSensorConfig = 0;
   d4af8:	4b13      	ldr	r3, [pc, #76]	; (d4b48 <_Z17setPressureSensor6String+0x60>)
   d4afa:	2200      	movs	r2, #0
   d4afc:	73da      	strb	r2, [r3, #15]
    systemStatusWriteNeeded = true;
   d4afe:	4b13      	ldr	r3, [pc, #76]	; (d4b4c <_Z17setPressureSensor6String+0x64>)
   d4b00:	2401      	movs	r4, #1
   d4b02:	701c      	strb	r4, [r3, #0]
   d4b04:	4b12      	ldr	r3, [pc, #72]	; (d4b50 <_Z17setPressureSensor6String+0x68>)
   d4b06:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d4b08:	f88d 2000 	strb.w	r2, [sp]
   d4b0c:	4a11      	ldr	r2, [pc, #68]	; (d4b54 <_Z17setPressureSensor6String+0x6c>)
   d4b0e:	e00e      	b.n	d4b2e <_Z17setPressureSensor6String+0x46>
   d4b10:	4911      	ldr	r1, [pc, #68]	; (d4b58 <_Z17setPressureSensor6String+0x70>)
   d4b12:	4620      	mov	r0, r4
   d4b14:	f002 fd19 	bl	d754a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4b18:	b188      	cbz	r0, d4b3e <_Z17setPressureSensor6String+0x56>
  {
    sysStatus.pressureSensorConfig = 1;
   d4b1a:	4b0b      	ldr	r3, [pc, #44]	; (d4b48 <_Z17setPressureSensor6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b1c:	4a0f      	ldr	r2, [pc, #60]	; (d4b5c <_Z17setPressureSensor6String+0x74>)
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.pressureSensorConfig = 1;
   d4b1e:	2401      	movs	r4, #1
   d4b20:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d4b22:	4b0a      	ldr	r3, [pc, #40]	; (d4b4c <_Z17setPressureSensor6String+0x64>)
   d4b24:	701c      	strb	r4, [r3, #0]
   d4b26:	4b0a      	ldr	r3, [pc, #40]	; (d4b50 <_Z17setPressureSensor6String+0x68>)
   d4b28:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b2a:	f88d 5000 	strb.w	r5, [sp]
   d4b2e:	490c      	ldr	r1, [pc, #48]	; (d4b60 <_Z17setPressureSensor6String+0x78>)
   d4b30:	a802      	add	r0, sp, #8
   d4b32:	f7ff fb1d 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4b36:	a803      	add	r0, sp, #12
   d4b38:	f7ff feaa 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b3c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4b3e:	b005      	add	sp, #20
   d4b40:	bd30      	pop	{r4, r5, pc}
   d4b42:	bf00      	nop
   d4b44:	000d983d 	.word	0x000d983d
   d4b48:	2003e310 	.word	0x2003e310
   d4b4c:	2003e1f9 	.word	0x2003e1f9
   d4b50:	2003e1dc 	.word	0x2003e1dc
   d4b54:	000d9877 	.word	0x000d9877
   d4b58:	000d9bf8 	.word	0x000d9bf8
   d4b5c:	000d988a 	.word	0x000d988a
   d4b60:	000d984f 	.word	0x000d984f

000d4b64 <_Z14setLightSensor6String>:

int setLightSensor (String command) // Function to force sending data in current hour
{
   d4b64:	b530      	push	{r4, r5, lr}
   d4b66:	4919      	ldr	r1, [pc, #100]	; (d4bcc <_Z14setLightSensor6String+0x68>)
   d4b68:	b085      	sub	sp, #20
   d4b6a:	4604      	mov	r4, r0
   d4b6c:	f002 fced 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4b70:	4605      	mov	r5, r0
   d4b72:	b158      	cbz	r0, d4b8c <_Z14setLightSensor6String+0x28>
  {
    sysStatus.lightSensorConfig = 0;
   d4b74:	4b16      	ldr	r3, [pc, #88]	; (d4bd0 <_Z14setLightSensor6String+0x6c>)
   d4b76:	2200      	movs	r2, #0
   d4b78:	741a      	strb	r2, [r3, #16]
    systemStatusWriteNeeded = true;
   d4b7a:	4b16      	ldr	r3, [pc, #88]	; (d4bd4 <_Z14setLightSensor6String+0x70>)
   d4b7c:	2401      	movs	r4, #1
   d4b7e:	701c      	strb	r4, [r3, #0]
   d4b80:	4b15      	ldr	r3, [pc, #84]	; (d4bd8 <_Z14setLightSensor6String+0x74>)
   d4b82:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d4b84:	f88d 2000 	strb.w	r2, [sp]
   d4b88:	4a14      	ldr	r2, [pc, #80]	; (d4bdc <_Z14setLightSensor6String+0x78>)
   d4b8a:	e015      	b.n	d4bb8 <_Z14setLightSensor6String+0x54>
   d4b8c:	4914      	ldr	r1, [pc, #80]	; (d4be0 <_Z14setLightSensor6String+0x7c>)
   d4b8e:	4620      	mov	r0, r4
   d4b90:	f002 fcdb 	bl	d754a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4b94:	b1c0      	cbz	r0, d4bc8 <_Z14setLightSensor6String+0x64>
  {
    sysStatus.lightSensorConfig = 1;
   d4b96:	4b0e      	ldr	r3, [pc, #56]	; (d4bd0 <_Z14setLightSensor6String+0x6c>)
    systemStatusWriteNeeded = true;
    lightSensor.begin();
   d4b98:	4812      	ldr	r0, [pc, #72]	; (d4be4 <_Z14setLightSensor6String+0x80>)
    Particle.publish("Config","No Light Sensor",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.lightSensorConfig = 1;
   d4b9a:	2401      	movs	r4, #1
   d4b9c:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d4b9e:	4b0d      	ldr	r3, [pc, #52]	; (d4bd4 <_Z14setLightSensor6String+0x70>)
   d4ba0:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4ba2:	f000 ff4a 	bl	d5a3a <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4ba6:	2120      	movs	r1, #32
   d4ba8:	480e      	ldr	r0, [pc, #56]	; (d4be4 <_Z14setLightSensor6String+0x80>)
   d4baa:	f000 ff82 	bl	d5ab2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
   d4bae:	4b0a      	ldr	r3, [pc, #40]	; (d4bd8 <_Z14setLightSensor6String+0x74>)
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4bb0:	4a0d      	ldr	r2, [pc, #52]	; (d4be8 <_Z14setLightSensor6String+0x84>)
   d4bb2:	781b      	ldrb	r3, [r3, #0]
   d4bb4:	f88d 5000 	strb.w	r5, [sp]
   d4bb8:	490c      	ldr	r1, [pc, #48]	; (d4bec <_Z14setLightSensor6String+0x88>)
   d4bba:	a802      	add	r0, sp, #8
   d4bbc:	f7ff fad8 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4bc0:	a803      	add	r0, sp, #12
   d4bc2:	f7ff fe65 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc6:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4bc8:	b005      	add	sp, #20
   d4bca:	bd30      	pop	{r4, r5, pc}
   d4bcc:	000d983d 	.word	0x000d983d
   d4bd0:	2003e310 	.word	0x2003e310
   d4bd4:	2003e1f9 	.word	0x2003e1f9
   d4bd8:	2003e1dc 	.word	0x2003e1dc
   d4bdc:	000d98a2 	.word	0x000d98a2
   d4be0:	000d9bf8 	.word	0x000d9bf8
   d4be4:	2003e1e0 	.word	0x2003e1e0
   d4be8:	000d98b2 	.word	0x000d98b2
   d4bec:	000d984f 	.word	0x000d984f

000d4bf0 <_Z18setTempHumidSensor6String>:

int setTempHumidSensor (String command) // Function to force sending data in current hour
{
   d4bf0:	b530      	push	{r4, r5, lr}
   d4bf2:	4918      	ldr	r1, [pc, #96]	; (d4c54 <_Z18setTempHumidSensor6String+0x64>)
   d4bf4:	b085      	sub	sp, #20
   d4bf6:	4604      	mov	r4, r0
   d4bf8:	f002 fca7 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4bfc:	4605      	mov	r5, r0
   d4bfe:	b158      	cbz	r0, d4c18 <_Z18setTempHumidSensor6String+0x28>
  {
    sysStatus.TempHumidConfig = 0;
   d4c00:	4b15      	ldr	r3, [pc, #84]	; (d4c58 <_Z18setTempHumidSensor6String+0x68>)
   d4c02:	2200      	movs	r2, #0
   d4c04:	731a      	strb	r2, [r3, #12]
    systemStatusWriteNeeded = true;
   d4c06:	4b15      	ldr	r3, [pc, #84]	; (d4c5c <_Z18setTempHumidSensor6String+0x6c>)
   d4c08:	2401      	movs	r4, #1
   d4c0a:	701c      	strb	r4, [r3, #0]
   d4c0c:	4b14      	ldr	r3, [pc, #80]	; (d4c60 <_Z18setTempHumidSensor6String+0x70>)
   d4c0e:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4c10:	f88d 2000 	strb.w	r2, [sp]
   d4c14:	4a13      	ldr	r2, [pc, #76]	; (d4c64 <_Z18setTempHumidSensor6String+0x74>)
   d4c16:	e012      	b.n	d4c3e <_Z18setTempHumidSensor6String+0x4e>
   d4c18:	4913      	ldr	r1, [pc, #76]	; (d4c68 <_Z18setTempHumidSensor6String+0x78>)
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	f002 fc95 	bl	d754a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
   d4c20:	b1a8      	cbz	r0, d4c4e <_Z18setTempHumidSensor6String+0x5e>
  {
    sysStatus.TempHumidConfig = 1;
   d4c22:	4b0d      	ldr	r3, [pc, #52]	; (d4c58 <_Z18setTempHumidSensor6String+0x68>)
    systemStatusWriteNeeded = true;
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c24:	4811      	ldr	r0, [pc, #68]	; (d4c6c <_Z18setTempHumidSensor6String+0x7c>)
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
   d4c26:	2401      	movs	r4, #1
   d4c28:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d4c2a:	4b0c      	ldr	r3, [pc, #48]	; (d4c5c <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c2c:	2144      	movs	r1, #68	; 0x44
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.TempHumidConfig = 1;
    systemStatusWriteNeeded = true;
   d4c2e:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c30:	f000 ff94 	bl	d5b5c <_ZN14Adafruit_SHT315beginEh>
   d4c34:	4b0a      	ldr	r3, [pc, #40]	; (d4c60 <_Z18setTempHumidSensor6String+0x70>)
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4c36:	4a0e      	ldr	r2, [pc, #56]	; (d4c70 <_Z18setTempHumidSensor6String+0x80>)
   d4c38:	781b      	ldrb	r3, [r3, #0]
   d4c3a:	f88d 5000 	strb.w	r5, [sp]
   d4c3e:	490d      	ldr	r1, [pc, #52]	; (d4c74 <_Z18setTempHumidSensor6String+0x84>)
   d4c40:	a802      	add	r0, sp, #8
   d4c42:	f7ff fa95 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4c46:	a803      	add	r0, sp, #12
   d4c48:	f7ff fe22 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c4c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c4e:	b005      	add	sp, #20
   d4c50:	bd30      	pop	{r4, r5, pc}
   d4c52:	bf00      	nop
   d4c54:	000d983d 	.word	0x000d983d
   d4c58:	2003e310 	.word	0x2003e310
   d4c5c:	2003e1f9 	.word	0x2003e1f9
   d4c60:	2003e1dc 	.word	0x2003e1dc
   d4c64:	000d98c7 	.word	0x000d98c7
   d4c68:	000d9bf8 	.word	0x000d9bf8
   d4c6c:	2003e264 	.word	0x2003e264
   d4c70:	000d98ca 	.word	0x000d98ca
   d4c74:	000d984f 	.word	0x000d984f

000d4c78 <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4c78:	b530      	push	{r4, r5, lr}
   d4c7a:	4916      	ldr	r1, [pc, #88]	; (d4cd4 <_Z14setVerboseMode6String+0x5c>)
   d4c7c:	b085      	sub	sp, #20
   d4c7e:	4604      	mov	r4, r0
   d4c80:	f002 fc63 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4c84:	4605      	mov	r5, r0
   d4c86:	b158      	cbz	r0, d4ca0 <_Z14setVerboseMode6String+0x28>
  {
    sysStatus.verboseMode = true;
   d4c88:	4b13      	ldr	r3, [pc, #76]	; (d4cd8 <_Z14setVerboseMode6String+0x60>)
   d4c8a:	2401      	movs	r4, #1
   d4c8c:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c8e:	4b13      	ldr	r3, [pc, #76]	; (d4cdc <_Z14setVerboseMode6String+0x64>)
   d4c90:	701c      	strb	r4, [r3, #0]
   d4c92:	4b13      	ldr	r3, [pc, #76]	; (d4ce0 <_Z14setVerboseMode6String+0x68>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4c94:	2200      	movs	r2, #0
   d4c96:	781b      	ldrb	r3, [r3, #0]
   d4c98:	f88d 2000 	strb.w	r2, [sp]
   d4c9c:	4a11      	ldr	r2, [pc, #68]	; (d4ce4 <_Z14setVerboseMode6String+0x6c>)
   d4c9e:	e00e      	b.n	d4cbe <_Z14setVerboseMode6String+0x46>
   d4ca0:	4911      	ldr	r1, [pc, #68]	; (d4ce8 <_Z14setVerboseMode6String+0x70>)
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	f002 fc51 	bl	d754a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4ca8:	b188      	cbz	r0, d4cce <_Z14setVerboseMode6String+0x56>
  {
    sysStatus.verboseMode = false;
   d4caa:	4b0b      	ldr	r3, [pc, #44]	; (d4cd8 <_Z14setVerboseMode6String+0x60>)
    systemStatusWriteNeeded = true;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4cac:	4a0f      	ldr	r2, [pc, #60]	; (d4cec <_Z14setVerboseMode6String+0x74>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
   d4cae:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4cb0:	4b0a      	ldr	r3, [pc, #40]	; (d4cdc <_Z14setVerboseMode6String+0x64>)
   d4cb2:	2401      	movs	r4, #1
   d4cb4:	701c      	strb	r4, [r3, #0]
   d4cb6:	4b0a      	ldr	r3, [pc, #40]	; (d4ce0 <_Z14setVerboseMode6String+0x68>)
   d4cb8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4cba:	f88d 5000 	strb.w	r5, [sp]
   d4cbe:	490c      	ldr	r1, [pc, #48]	; (d4cf0 <_Z14setVerboseMode6String+0x78>)
   d4cc0:	a802      	add	r0, sp, #8
   d4cc2:	f7ff fa55 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4cc6:	a803      	add	r0, sp, #12
   d4cc8:	f7ff fde2 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ccc:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4cce:	b005      	add	sp, #20
   d4cd0:	bd30      	pop	{r4, r5, pc}
   d4cd2:	bf00      	nop
   d4cd4:	000d9bf8 	.word	0x000d9bf8
   d4cd8:	2003e310 	.word	0x2003e310
   d4cdc:	2003e1f9 	.word	0x2003e1f9
   d4ce0:	2003e1dc 	.word	0x2003e1dc
   d4ce4:	000d98e9 	.word	0x000d98e9
   d4ce8:	000d983d 	.word	0x000d983d
   d4cec:	000d98fa 	.word	0x000d98fa
   d4cf0:	000d990a 	.word	0x000d990a

000d4cf4 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4cf4:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4cf6:	492b      	ldr	r1, [pc, #172]	; (d4da4 <_Z15setLowPowerMode6String+0xb0>)
   d4cf8:	b085      	sub	sp, #20
   d4cfa:	4604      	mov	r4, r0
   d4cfc:	f002 fc25 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4d00:	b928      	cbnz	r0, d4d0e <_Z15setLowPowerMode6String+0x1a>
   d4d02:	4929      	ldr	r1, [pc, #164]	; (d4da8 <_Z15setLowPowerMode6String+0xb4>)
   d4d04:	4620      	mov	r0, r4
   d4d06:	f002 fc20 	bl	d754a <_ZNK6String6equalsEPKc>
   d4d0a:	2800      	cmp	r0, #0
   d4d0c:	d048      	beq.n	d4da0 <_Z15setLowPowerMode6String+0xac>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4d0e:	4925      	ldr	r1, [pc, #148]	; (d4da4 <_Z15setLowPowerMode6String+0xb0>)
   d4d10:	4620      	mov	r0, r4
   d4d12:	f002 fc1a 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4d16:	b1b0      	cbz	r0, d4d46 <_Z15setLowPowerMode6String+0x52>
   d4d18:	f001 fa8e 	bl	d6238 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4d1c:	b170      	cbz	r0, d4d3c <_Z15setLowPowerMode6String+0x48>
      waitUntil(meterParticlePublish);
   d4d1e:	f7ff fc65 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d4d22:	4b22      	ldr	r3, [pc, #136]	; (d4dac <_Z15setLowPowerMode6String+0xb8>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4d24:	4922      	ldr	r1, [pc, #136]	; (d4db0 <_Z15setLowPowerMode6String+0xbc>)
   d4d26:	781b      	ldrb	r3, [r3, #0]
   d4d28:	2200      	movs	r2, #0
   d4d2a:	f88d 2000 	strb.w	r2, [sp]
   d4d2e:	a802      	add	r0, sp, #8
   d4d30:	4a20      	ldr	r2, [pc, #128]	; (d4db4 <_Z15setLowPowerMode6String+0xc0>)
   d4d32:	f7ff fa1d 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4d36:	a803      	add	r0, sp, #12
   d4d38:	f7ff fdaa 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
   d4d3c:	4b1e      	ldr	r3, [pc, #120]	; (d4db8 <_Z15setLowPowerMode6String+0xc4>)
    strcpy(lowPowerModeStr,"True");
   d4d3e:	491f      	ldr	r1, [pc, #124]	; (d4dbc <_Z15setLowPowerMode6String+0xc8>)
  {
    if (Particle.connected()) {
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power Mode", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4d40:	2201      	movs	r2, #1
   d4d42:	719a      	strb	r2, [r3, #6]
   d4d44:	e026      	b.n	d4d94 <_Z15setLowPowerMode6String+0xa0>
   d4d46:	4918      	ldr	r1, [pc, #96]	; (d4da8 <_Z15setLowPowerMode6String+0xb4>)
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f002 fbfe 	bl	d754a <_ZNK6String6equalsEPKc>
    strcpy(lowPowerModeStr,"True");
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4d4e:	b320      	cbz	r0, d4d9a <_Z15setLowPowerMode6String+0xa6>
   d4d50:	f001 fa72 	bl	d6238 <spark_cloud_flag_connected>
   d4d54:	4c18      	ldr	r4, [pc, #96]	; (d4db8 <_Z15setLowPowerMode6String+0xc4>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4d56:	b918      	cbnz	r0, d4d60 <_Z15setLowPowerMode6String+0x6c>
      connectToParticle();
   d4d58:	f7ff fb64 	bl	d4424 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4d5c:	2301      	movs	r3, #1
   d4d5e:	70e3      	strb	r3, [r4, #3]
    }
    waitUntil(meterParticlePublish);
   d4d60:	f7ff fc44 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d4d64:	4b11      	ldr	r3, [pc, #68]	; (d4dac <_Z15setLowPowerMode6String+0xb8>)
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4d66:	4a16      	ldr	r2, [pc, #88]	; (d4dc0 <_Z15setLowPowerMode6String+0xcc>)
   d4d68:	781b      	ldrb	r3, [r3, #0]
   d4d6a:	4911      	ldr	r1, [pc, #68]	; (d4db0 <_Z15setLowPowerMode6String+0xbc>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4d6c:	2500      	movs	r5, #0
   d4d6e:	a802      	add	r0, sp, #8
   d4d70:	f88d 5000 	strb.w	r5, [sp]
   d4d74:	f7ff f9fc 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4d78:	a803      	add	r0, sp, #12
   d4d7a:	f7ff fd89 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4d82:	f001 fb25 	bl	d63d0 <delay>
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
   d4d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4d8a:	480e      	ldr	r0, [pc, #56]	; (d4dc4 <_Z15setLowPowerMode6String+0xd0>)
   d4d8c:	f7ff faf8 	bl	d4380 <_ZN5Timer5startEj>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4d90:	490d      	ldr	r1, [pc, #52]	; (d4dc8 <_Z15setLowPowerMode6String+0xd4>)
    }
    waitUntil(meterParticlePublish);
    Particle.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4d92:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4d94:	480d      	ldr	r0, [pc, #52]	; (d4dcc <_Z15setLowPowerMode6String+0xd8>)
   d4d96:	f003 ffaf 	bl	d8cf8 <strcpy>
  }
  systemStatusWriteNeeded = true;
   d4d9a:	4b0d      	ldr	r3, [pc, #52]	; (d4dd0 <_Z15setLowPowerMode6String+0xdc>)
   d4d9c:	2001      	movs	r0, #1
   d4d9e:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4da0:	b005      	add	sp, #20
   d4da2:	bd30      	pop	{r4, r5, pc}
   d4da4:	000d9bf8 	.word	0x000d9bf8
   d4da8:	000d983d 	.word	0x000d983d
   d4dac:	2003e1dc 	.word	0x2003e1dc
   d4db0:	000d990a 	.word	0x000d990a
   d4db4:	000d990f 	.word	0x000d990f
   d4db8:	2003e310 	.word	0x2003e310
   d4dbc:	000d991e 	.word	0x000d991e
   d4dc0:	000d9923 	.word	0x000d9923
   d4dc4:	2003e1fc 	.word	0x2003e1fc
   d4dc8:	000d9935 	.word	0x000d9935
   d4dcc:	2003e2bc 	.word	0x2003e2bc
   d4dd0:	2003e1f9 	.word	0x2003e1f9

000d4dd4 <_Z12controlValve6String>:

int controlValve(String command)                                   // Function to force sending data in current hour
{
   d4dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4dd6:	4926      	ldr	r1, [pc, #152]	; (d4e70 <_Z12controlValve6String+0x9c>)
   d4dd8:	b085      	sub	sp, #20
   d4dda:	4604      	mov	r4, r0
   d4ddc:	f002 fbb5 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
   d4de0:	b928      	cbnz	r0, d4dee <_Z12controlValve6String+0x1a>
   d4de2:	4924      	ldr	r1, [pc, #144]	; (d4e74 <_Z12controlValve6String+0xa0>)
   d4de4:	4620      	mov	r0, r4
   d4de6:	f002 fbb0 	bl	d754a <_ZNK6String6equalsEPKc>
   d4dea:	2800      	cmp	r0, #0
   d4dec:	d03d      	beq.n	d4e6a <_Z12controlValve6String+0x96>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4dee:	4620      	mov	r0, r4
   d4df0:	491f      	ldr	r1, [pc, #124]	; (d4e70 <_Z12controlValve6String+0x9c>)
   d4df2:	4d21      	ldr	r5, [pc, #132]	; (d4e78 <_Z12controlValve6String+0xa4>)
   d4df4:	4e21      	ldr	r6, [pc, #132]	; (d4e7c <_Z12controlValve6String+0xa8>)
   d4df6:	4f22      	ldr	r7, [pc, #136]	; (d4e80 <_Z12controlValve6String+0xac>)
   d4df8:	f002 fba7 	bl	d754a <_ZNK6String6equalsEPKc>
  else if (command == "1") {                                     // Open the water valve
   d4dfc:	4604      	mov	r4, r0
   d4dfe:	b1b0      	cbz	r0, d4e2e <_Z12controlValve6String+0x5a>
    current.solenoidState = true;
   d4e00:	2401      	movs	r4, #1
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4e02:	4621      	mov	r1, r4
   d4e04:	2002      	movs	r0, #2

int controlValve(String command)                                   // Function to force sending data in current hour
{
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
  else if (command == "1") {                                     // Open the water valve
    current.solenoidState = true;
   d4e06:	60ec      	str	r4, [r5, #12]
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d4e08:	f002 ff41 	bl	d7c8e <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4e0c:	2100      	movs	r1, #0
   d4e0e:	2003      	movs	r0, #3
   d4e10:	f002 ff3d 	bl	d7c8e <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4e14:	6970      	ldr	r0, [r6, #20]
   d4e16:	f001 fadb 	bl	d63d0 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4e1a:	4621      	mov	r1, r4
   d4e1c:	2003      	movs	r0, #3
   d4e1e:	f002 ff36 	bl	d7c8e <digitalWrite>
   d4e22:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4e24:	783b      	ldrb	r3, [r7, #0]
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d4e26:	f88d 2000 	strb.w	r2, [sp]
   d4e2a:	4a16      	ldr	r2, [pc, #88]	; (d4e84 <_Z12controlValve6String+0xb0>)
   d4e2c:	e013      	b.n	d4e56 <_Z12controlValve6String+0x82>
  }
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
   d4e2e:	4621      	mov	r1, r4
   d4e30:	2002      	movs	r0, #2
   d4e32:	f002 ff2c 	bl	d7c8e <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d4e36:	4621      	mov	r1, r4
   d4e38:	2003      	movs	r0, #3
   d4e3a:	f002 ff28 	bl	d7c8e <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d4e3e:	6970      	ldr	r0, [r6, #20]
   d4e40:	f001 fac6 	bl	d63d0 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d4e44:	2101      	movs	r1, #1
   d4e46:	2003      	movs	r0, #3
   d4e48:	f002 ff21 	bl	d7c8e <digitalWrite>
    current.solenoidState = false;
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4e4c:	4a0e      	ldr	r2, [pc, #56]	; (d4e88 <_Z12controlValve6String+0xb4>)
   d4e4e:	783b      	ldrb	r3, [r7, #0]
  else {                                                          // Close the water valve
    digitalWrite(solDirection,LOW);                               // Close the valve
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
    delay(sysStatus.solenoidHoldTime);
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
    current.solenoidState = false;
   d4e50:	60ec      	str	r4, [r5, #12]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d4e52:	f88d 4000 	strb.w	r4, [sp]
   d4e56:	490d      	ldr	r1, [pc, #52]	; (d4e8c <_Z12controlValve6String+0xb8>)
   d4e58:	a802      	add	r0, sp, #8
   d4e5a:	f7ff f989 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4e5e:	a803      	add	r0, sp, #12
   d4e60:	f7ff fd16 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  currentStatusWriteNeeded = true;
   d4e64:	4b0a      	ldr	r3, [pc, #40]	; (d4e90 <_Z12controlValve6String+0xbc>)
   d4e66:	2001      	movs	r0, #1
   d4e68:	7018      	strb	r0, [r3, #0]
  return true;
}
   d4e6a:	b005      	add	sp, #20
   d4e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e6e:	bf00      	nop
   d4e70:	000d9bf8 	.word	0x000d9bf8
   d4e74:	000d983d 	.word	0x000d983d
   d4e78:	2003e2c4 	.word	0x2003e2c4
   d4e7c:	2003e310 	.word	0x2003e310
   d4e80:	2003e1dc 	.word	0x2003e1dc
   d4e84:	000d993b 	.word	0x000d993b
   d4e88:	000d9953 	.word	0x000d9953
   d4e8c:	000d994a 	.word	0x000d994a
   d4e90:	2003e234 	.word	0x2003e234

000d4e94 <_Z18setSolenoidPresent6String>:
  }
  else return 0;
}

int setSolenoidPresent(String command) // Function to force sending data in current hour
{
   d4e94:	b530      	push	{r4, r5, lr}
   d4e96:	b087      	sub	sp, #28
  controlValve("0");                                            // Make sure it is turned off
   d4e98:	491a      	ldr	r1, [pc, #104]	; (d4f04 <_Z18setSolenoidPresent6String+0x70>)
  }
  else return 0;
}

int setSolenoidPresent(String command) // Function to force sending data in current hour
{
   d4e9a:	4604      	mov	r4, r0
  controlValve("0");                                            // Make sure it is turned off
   d4e9c:	a802      	add	r0, sp, #8
   d4e9e:	f002 fb27 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
   d4ea2:	a802      	add	r0, sp, #8
   d4ea4:	f7ff ff96 	bl	d4dd4 <_Z12controlValve6String>
   d4ea8:	a802      	add	r0, sp, #8
   d4eaa:	f002 fada 	bl	d7462 <_ZN6StringD1Ev>
   d4eae:	4916      	ldr	r1, [pc, #88]	; (d4f08 <_Z18setSolenoidPresent6String+0x74>)
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	f002 fb4a 	bl	d754a <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d4eb6:	4605      	mov	r5, r0
   d4eb8:	b158      	cbz	r0, d4ed2 <_Z18setSolenoidPresent6String+0x3e>
    sysStatus.solenoidConfig = 1;
   d4eba:	4b14      	ldr	r3, [pc, #80]	; (d4f0c <_Z18setSolenoidPresent6String+0x78>)
   d4ebc:	2401      	movs	r4, #1
   d4ebe:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d4ec0:	4b13      	ldr	r3, [pc, #76]	; (d4f10 <_Z18setSolenoidPresent6String+0x7c>)
   d4ec2:	701c      	strb	r4, [r3, #0]
   d4ec4:	4b13      	ldr	r3, [pc, #76]	; (d4f14 <_Z18setSolenoidPresent6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4ec6:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4ec8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d4eca:	f88d 2000 	strb.w	r2, [sp]
   d4ece:	4a12      	ldr	r2, [pc, #72]	; (d4f18 <_Z18setSolenoidPresent6String+0x84>)
   d4ed0:	e00e      	b.n	d4ef0 <_Z18setSolenoidPresent6String+0x5c>
   d4ed2:	490c      	ldr	r1, [pc, #48]	; (d4f04 <_Z18setSolenoidPresent6String+0x70>)
   d4ed4:	4620      	mov	r0, r4
   d4ed6:	f002 fb38 	bl	d754a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0") {
   d4eda:	b188      	cbz	r0, d4f00 <_Z18setSolenoidPresent6String+0x6c>
    sysStatus.solenoidConfig = 0;
   d4edc:	4b0b      	ldr	r3, [pc, #44]	; (d4f0c <_Z18setSolenoidPresent6String+0x78>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d4ede:	4a0f      	ldr	r2, [pc, #60]	; (d4f1c <_Z18setSolenoidPresent6String+0x88>)
    systemStatusWriteNeeded = true;
    Particle.publish("Config","Solenoid Attached",PRIVATE);
    return 1;
  }
  else if (command == "0") {
    sysStatus.solenoidConfig = 0;
   d4ee0:	745d      	strb	r5, [r3, #17]
    systemStatusWriteNeeded = true;
   d4ee2:	4b0b      	ldr	r3, [pc, #44]	; (d4f10 <_Z18setSolenoidPresent6String+0x7c>)
   d4ee4:	2401      	movs	r4, #1
   d4ee6:	701c      	strb	r4, [r3, #0]
   d4ee8:	4b0a      	ldr	r3, [pc, #40]	; (d4f14 <_Z18setSolenoidPresent6String+0x80>)
   d4eea:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d4eec:	f88d 5000 	strb.w	r5, [sp]
   d4ef0:	490b      	ldr	r1, [pc, #44]	; (d4f20 <_Z18setSolenoidPresent6String+0x8c>)
   d4ef2:	a802      	add	r0, sp, #8
   d4ef4:	f7ff f93c 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4ef8:	a803      	add	r0, sp, #12
   d4efa:	f7ff fcc9 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4efe:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4f00:	b007      	add	sp, #28
   d4f02:	bd30      	pop	{r4, r5, pc}
   d4f04:	000d983d 	.word	0x000d983d
   d4f08:	000d9bf8 	.word	0x000d9bf8
   d4f0c:	2003e310 	.word	0x2003e310
   d4f10:	2003e1f9 	.word	0x2003e1f9
   d4f14:	2003e1dc 	.word	0x2003e1dc
   d4f18:	000d9966 	.word	0x000d9966
   d4f1c:	000d9963 	.word	0x000d9963
   d4f20:	000d984f 	.word	0x000d984f

000d4f24 <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d4f24:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4f26:	4d16      	ldr	r5, [pc, #88]	; (d4f80 <_Z22publishStateTransitionv+0x5c>)
   d4f28:	4c16      	ldr	r4, [pc, #88]	; (d4f84 <_Z22publishStateTransitionv+0x60>)
   d4f2a:	4917      	ldr	r1, [pc, #92]	; (d4f88 <_Z22publishStateTransitionv+0x64>)
   d4f2c:	782a      	ldrb	r2, [r5, #0]
   d4f2e:	7820      	ldrb	r0, [r4, #0]
  systemStatusWriteNeeded = true;
}


void publishStateTransition(void)
{
   d4f30:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4f32:	230e      	movs	r3, #14
   d4f34:	fb03 1202 	mla	r2, r3, r2, r1
   d4f38:	9200      	str	r2, [sp, #0]
   d4f3a:	fb03 1300 	mla	r3, r3, r0, r1
   d4f3e:	4a13      	ldr	r2, [pc, #76]	; (d4f8c <_Z22publishStateTransitionv+0x68>)
   d4f40:	2128      	movs	r1, #40	; 0x28
   d4f42:	a804      	add	r0, sp, #16
   d4f44:	f001 fa20 	bl	d6388 <snprintf>
  oldState = state;
   d4f48:	782b      	ldrb	r3, [r5, #0]
   d4f4a:	7023      	strb	r3, [r4, #0]
   d4f4c:	f001 f974 	bl	d6238 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4f50:	b170      	cbz	r0, d4f70 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d4f52:	f7ff fb4b 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d4f56:	4b0e      	ldr	r3, [pc, #56]	; (d4f90 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4f58:	490e      	ldr	r1, [pc, #56]	; (d4f94 <_Z22publishStateTransitionv+0x70>)
   d4f5a:	781b      	ldrb	r3, [r3, #0]
   d4f5c:	2200      	movs	r2, #0
   d4f5e:	f88d 2000 	strb.w	r2, [sp]
   d4f62:	a802      	add	r0, sp, #8
   d4f64:	aa04      	add	r2, sp, #16
   d4f66:	f7ff f903 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d4f6a:	a803      	add	r0, sp, #12
   d4f6c:	f7ff fc90 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d4f70:	f002 fd80 	bl	d7a74 <_Z16_fetch_usbserialv>
   d4f74:	a904      	add	r1, sp, #16
   d4f76:	f002 fa28 	bl	d73ca <_ZN5Print7printlnEPKc>
}
   d4f7a:	b00f      	add	sp, #60	; 0x3c
   d4f7c:	bd30      	pop	{r4, r5, pc}
   d4f7e:	bf00      	nop
   d4f80:	2003e1fa 	.word	0x2003e1fa
   d4f84:	2003e1e8 	.word	0x2003e1e8
   d4f88:	2003e088 	.word	0x2003e088
   d4f8c:	000d9978 	.word	0x000d9978
   d4f90:	2003e1dc 	.word	0x2003e1dc
   d4f94:	000d9986 	.word	0x000d9986

000d4f98 <loop>:

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4f98:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d4f9a:	4c86      	ldr	r4, [pc, #536]	; (d51b4 <loop+0x21c>)
   d4f9c:	7823      	ldrb	r3, [r4, #0]
   d4f9e:	3b01      	subs	r3, #1

  systemStatusWriteNeeded = true;                                       // likely something has changed
}

void loop()
{
   d4fa0:	b08a      	sub	sp, #40	; 0x28
  switch(state) {
   d4fa2:	2b07      	cmp	r3, #7
   d4fa4:	f200 8267 	bhi.w	d5476 <loop+0x4de>
   d4fa8:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4fac:	000801f0 	.word	0x000801f0
   d4fb0:	007f004e 	.word	0x007f004e
   d4fb4:	00d200ac 	.word	0x00d200ac
   d4fb8:	01980132 	.word	0x01980132
  case IDLE_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fbc:	4d7e      	ldr	r5, [pc, #504]	; (d51b8 <loop+0x220>)
   d4fbe:	792b      	ldrb	r3, [r5, #4]
   d4fc0:	b12b      	cbz	r3, d4fce <loop+0x36>
   d4fc2:	4b7e      	ldr	r3, [pc, #504]	; (d51bc <loop+0x224>)
   d4fc4:	781b      	ldrb	r3, [r3, #0]
   d4fc6:	2b02      	cmp	r3, #2
   d4fc8:	d001      	beq.n	d4fce <loop+0x36>
   d4fca:	f7ff ffab 	bl	d4f24 <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d4fce:	4e7c      	ldr	r6, [pc, #496]	; (d51c0 <loop+0x228>)
   d4fd0:	7833      	ldrb	r3, [r6, #0]
   d4fd2:	b143      	cbz	r3, d4fe6 <loop+0x4e>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d4fd4:	f002 fe9e 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4fd8:	2220      	movs	r2, #32
   d4fda:	4977      	ldr	r1, [pc, #476]	; (d51b8 <loop+0x220>)
   d4fdc:	2001      	movs	r0, #1
   d4fde:	f000 ff31 	bl	d5e44 <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d4fe2:	2300      	movs	r3, #0
   d4fe4:	7033      	strb	r3, [r6, #0]
    }
    if (currentStatusWriteNeeded) {
   d4fe6:	4e77      	ldr	r6, [pc, #476]	; (d51c4 <loop+0x22c>)
   d4fe8:	7833      	ldrb	r3, [r6, #0]
   d4fea:	b143      	cbz	r3, d4ffe <loop+0x66>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d4fec:	f002 fe92 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
   d4ff0:	2224      	movs	r2, #36	; 0x24
   d4ff2:	4975      	ldr	r1, [pc, #468]	; (d51c8 <loop+0x230>)
   d4ff4:	2050      	movs	r0, #80	; 0x50
   d4ff6:	f000 ff25 	bl	d5e44 <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	7033      	strb	r3, [r6, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d4ffe:	79ab      	ldrb	r3, [r5, #6]
   d5000:	b163      	cbz	r3, d501c <loop+0x84>
   d5002:	f000 fef7 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
   d5006:	4b71      	ldr	r3, [pc, #452]	; (d51cc <loop+0x234>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	1ac0      	subs	r0, r0, r3
   d500c:	4b70      	ldr	r3, [pc, #448]	; (d51d0 <loop+0x238>)
   d500e:	4298      	cmp	r0, r3
   d5010:	d904      	bls.n	d501c <loop+0x84>
   d5012:	4b6d      	ldr	r3, [pc, #436]	; (d51c8 <loop+0x230>)
   d5014:	68db      	ldr	r3, [r3, #12]
   d5016:	2b00      	cmp	r3, #0
   d5018:	f000 822a 	beq.w	d5470 <loop+0x4d8>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d501c:	f002 fc2c 	bl	d7878 <_ZN9TimeClass4hourEv>
   d5020:	4b6c      	ldr	r3, [pc, #432]	; (d51d4 <loop+0x23c>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d5022:	68aa      	ldr	r2, [r5, #8]
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d5024:	781b      	ldrb	r3, [r3, #0]
   d5026:	4298      	cmp	r0, r3
   d5028:	bf1c      	itt	ne
   d502a:	2303      	movne	r3, #3
   d502c:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d502e:	4b6a      	ldr	r3, [pc, #424]	; (d51d8 <loop+0x240>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	429a      	cmp	r2, r3
   d5034:	bfdc      	itt	le
   d5036:	2308      	movle	r3, #8
   d5038:	7023      	strble	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                 // Most important - turn off water when done!
   d503a:	4b68      	ldr	r3, [pc, #416]	; (d51dc <loop+0x244>)
   d503c:	781b      	ldrb	r3, [r3, #0]
   d503e:	2b00      	cmp	r3, #0
   d5040:	f000 8219 	beq.w	d5476 <loop+0x4de>
   d5044:	2304      	movs	r3, #4
   d5046:	e02e      	b.n	d50a6 <loop+0x10e>
    break;

  case MEASURING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5048:	4d5b      	ldr	r5, [pc, #364]	; (d51b8 <loop+0x220>)
   d504a:	792b      	ldrb	r3, [r5, #4]
   d504c:	b12b      	cbz	r3, d505a <loop+0xc2>
   d504e:	4b5b      	ldr	r3, [pc, #364]	; (d51bc <loop+0x224>)
   d5050:	781b      	ldrb	r3, [r3, #0]
   d5052:	2b03      	cmp	r3, #3
   d5054:	d001      	beq.n	d505a <loop+0xc2>
   d5056:	f7ff ff65 	bl	d4f24 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d505a:	f7ff fb47 	bl	d46ec <_Z16takeMeasurementsv>
   d505e:	4606      	mov	r6, r0
   d5060:	b9e8      	cbnz	r0, d509e <loop+0x106>
    {
      state = ERROR_STATE;
   d5062:	2301      	movs	r3, #1
   d5064:	7023      	strb	r3, [r4, #0]
   d5066:	f000 fec5 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d506a:	4b5d      	ldr	r3, [pc, #372]	; (d51e0 <loop+0x248>)
   d506c:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d506e:	792b      	ldrb	r3, [r5, #4]
   d5070:	2b00      	cmp	r3, #0
   d5072:	f000 8200 	beq.w	d5476 <loop+0x4de>
   d5076:	f001 f8df 	bl	d6238 <spark_cloud_flag_connected>
   d507a:	2800      	cmp	r0, #0
   d507c:	f000 81fb 	beq.w	d5476 <loop+0x4de>
        waitUntil(meterParticlePublish);
   d5080:	f7ff fab4 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d5084:	4b57      	ldr	r3, [pc, #348]	; (d51e4 <loop+0x24c>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d5086:	4a58      	ldr	r2, [pc, #352]	; (d51e8 <loop+0x250>)
   d5088:	781b      	ldrb	r3, [r3, #0]
   d508a:	4958      	ldr	r1, [pc, #352]	; (d51ec <loop+0x254>)
   d508c:	f88d 6000 	strb.w	r6, [sp]
   d5090:	a806      	add	r0, sp, #24
   d5092:	f7ff f86d 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d5096:	a807      	add	r0, sp, #28
   d5098:	f7ff fbfa 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d509c:	e1eb      	b.n	d5476 <loop+0x4de>
      }
    }
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d509e:	7c6b      	ldrb	r3, [r5, #17]
   d50a0:	2b00      	cmp	r3, #0
   d50a2:	d1cf      	bne.n	d5044 <loop+0xac>
    else state = REPORTING_STATE;
   d50a4:	2305      	movs	r3, #5
   d50a6:	7023      	strb	r3, [r4, #0]
   d50a8:	e1e5      	b.n	d5476 <loop+0x4de>
    break;

  case WATERING_STATE:                                                    // This state will examing soil values and decide on watering
    if (wateringTimerFlag) {
   d50aa:	4d4c      	ldr	r5, [pc, #304]	; (d51dc <loop+0x244>)
   d50ac:	782b      	ldrb	r3, [r5, #0]
   d50ae:	b163      	cbz	r3, d50ca <loop+0x132>
      controlValve("0");
   d50b0:	494f      	ldr	r1, [pc, #316]	; (d51f0 <loop+0x258>)
   d50b2:	a806      	add	r0, sp, #24
   d50b4:	f002 fa1c 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
   d50b8:	a806      	add	r0, sp, #24
   d50ba:	f7ff fe8b 	bl	d4dd4 <_Z12controlValve6String>
   d50be:	a806      	add	r0, sp, #24
   d50c0:	f002 f9cf 	bl	d7462 <_ZN6StringD1Ev>
      wateringTimerFlag = false;
   d50c4:	2300      	movs	r3, #0
   d50c6:	702b      	strb	r3, [r5, #0]
   d50c8:	e7ec      	b.n	d50a4 <loop+0x10c>
    }
    else if (current.soilMoisture1 < 30.0 && !current.solenoidState) {  // Water if dry and if we are not already watering
   d50ca:	4d3f      	ldr	r5, [pc, #252]	; (d51c8 <loop+0x230>)
   d50cc:	6828      	ldr	r0, [r5, #0]
   d50ce:	f003 f973 	bl	d83b8 <__aeabi_i2d>
   d50d2:	2200      	movs	r2, #0
   d50d4:	4b47      	ldr	r3, [pc, #284]	; (d51f4 <loop+0x25c>)
   d50d6:	f003 fc47 	bl	d8968 <__aeabi_dcmplt>
   d50da:	2800      	cmp	r0, #0
   d50dc:	d0e2      	beq.n	d50a4 <loop+0x10c>
   d50de:	68eb      	ldr	r3, [r5, #12]
   d50e0:	2b00      	cmp	r3, #0
   d50e2:	d1df      	bne.n	d50a4 <loop+0x10c>
      controlValve("1");
   d50e4:	4944      	ldr	r1, [pc, #272]	; (d51f8 <loop+0x260>)
   d50e6:	a806      	add	r0, sp, #24
   d50e8:	f002 fa02 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
   d50ec:	a806      	add	r0, sp, #24
   d50ee:	f7ff fe71 	bl	d4dd4 <_Z12controlValve6String>
   d50f2:	a806      	add	r0, sp, #24
   d50f4:	f002 f9b5 	bl	d7462 <_ZN6StringD1Ev>
      wateringTimer.start();                                                    // Start the timer to keep track of the watering time
   d50f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d50fc:	483f      	ldr	r0, [pc, #252]	; (d51fc <loop+0x264>)
   d50fe:	f7ff f93f 	bl	d4380 <_ZN5Timer5startEj>
   d5102:	e7cf      	b.n	d50a4 <loop+0x10c>
    }
    state = REPORTING_STATE;
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5104:	4d2c      	ldr	r5, [pc, #176]	; (d51b8 <loop+0x220>)
   d5106:	792b      	ldrb	r3, [r5, #4]
   d5108:	b12b      	cbz	r3, d5116 <loop+0x17e>
   d510a:	4b2c      	ldr	r3, [pc, #176]	; (d51bc <loop+0x224>)
   d510c:	781b      	ldrb	r3, [r3, #0]
   d510e:	2b05      	cmp	r3, #5
   d5110:	d001      	beq.n	d5116 <loop+0x17e>
   d5112:	f7ff ff07 	bl	d4f24 <_Z22publishStateTransitionv>
   d5116:	f001 f88f 	bl	d6238 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d511a:	b190      	cbz	r0, d5142 <loop+0x1aa>
      if (Time.hour() == 0) {
   d511c:	f002 fbac 	bl	d7878 <_ZN9TimeClass4hourEv>
   d5120:	4606      	mov	r6, r0
   d5122:	b950      	cbnz	r0, d513a <loop+0x1a2>
        sysStatus.verboseMode = false;                                    // Turn off Verbose mode
   d5124:	7128      	strb	r0, [r5, #4]
   d5126:	f001 f887 	bl	d6238 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d512a:	b110      	cbz	r0, d5132 <loop+0x19a>
            return false;
        }
        return spark_sync_time(NULL);
   d512c:	4630      	mov	r0, r6
   d512e:	f001 f8a3 	bl	d6278 <spark_sync_time>
        Particle.syncTime();                                              // Set the clock each day
        current.alertCount = sysStatus.resetCount = 0;                    // Reset these each day as well
   d5132:	4a25      	ldr	r2, [pc, #148]	; (d51c8 <loop+0x230>)
   d5134:	2300      	movs	r3, #0
   d5136:	61ab      	str	r3, [r5, #24]
   d5138:	6213      	str	r3, [r2, #32]
      }
      sendEvent();                                                        // Send data to Ubidots
   d513a:	f7ff fbbf 	bl	d48bc <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d513e:	2306      	movs	r3, #6
   d5140:	e7b1      	b.n	d50a6 <loop+0x10e>
    }
    else if (!connectToParticle()) state = ERROR_STATE;                   // In case we timed out on our 1st attempt to connect
   d5142:	f7ff f96f 	bl	d4424 <_Z17connectToParticlev>
   d5146:	2800      	cmp	r0, #0
   d5148:	f040 8195 	bne.w	d5476 <loop+0x4de>
   d514c:	2301      	movs	r3, #1
   d514e:	e7aa      	b.n	d50a6 <loop+0x10e>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5150:	4b19      	ldr	r3, [pc, #100]	; (d51b8 <loop+0x220>)
   d5152:	791b      	ldrb	r3, [r3, #4]
   d5154:	b12b      	cbz	r3, d5162 <loop+0x1ca>
   d5156:	4b19      	ldr	r3, [pc, #100]	; (d51bc <loop+0x224>)
   d5158:	781b      	ldrb	r3, [r3, #0]
   d515a:	2b06      	cmp	r3, #6
   d515c:	d001      	beq.n	d5162 <loop+0x1ca>
   d515e:	f7ff fee1 	bl	d4f24 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d5162:	4b27      	ldr	r3, [pc, #156]	; (d5200 <loop+0x268>)
   d5164:	781b      	ldrb	r3, [r3, #0]
   d5166:	b92b      	cbnz	r3, d5174 <loop+0x1dc>
   d5168:	f000 fe44 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
    {
      stayAwakeTimeStamp = millis();
   d516c:	4b17      	ldr	r3, [pc, #92]	; (d51cc <loop+0x234>)
   d516e:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d5170:	2302      	movs	r3, #2
   d5172:	e798      	b.n	d50a6 <loop+0x10e>
   d5174:	f000 fe3e 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5178:	4b22      	ldr	r3, [pc, #136]	; (d5204 <loop+0x26c>)
   d517a:	681b      	ldr	r3, [r3, #0]
   d517c:	1ac0      	subs	r0, r0, r3
   d517e:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5182:	4298      	cmp	r0, r3
   d5184:	f240 8177 	bls.w	d5476 <loop+0x4de>
   d5188:	f000 fe34 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d518c:	4b14      	ldr	r3, [pc, #80]	; (d51e0 <loop+0x248>)
   d518e:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5190:	f001 f852 	bl	d6238 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5194:	2800      	cmp	r0, #0
   d5196:	d0d9      	beq.n	d514c <loop+0x1b4>
   d5198:	4b12      	ldr	r3, [pc, #72]	; (d51e4 <loop+0x24c>)
   d519a:	491b      	ldr	r1, [pc, #108]	; (d5208 <loop+0x270>)
   d519c:	781b      	ldrb	r3, [r3, #0]
   d519e:	2200      	movs	r2, #0
   d51a0:	f88d 2000 	strb.w	r2, [sp]
   d51a4:	a806      	add	r0, sp, #24
   d51a6:	4a19      	ldr	r2, [pc, #100]	; (d520c <loop+0x274>)
   d51a8:	f7fe ffe2 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d51ac:	a807      	add	r0, sp, #28
   d51ae:	f7ff fb6f 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51b2:	e7cb      	b.n	d514c <loop+0x1b4>
   d51b4:	2003e1fa 	.word	0x2003e1fa
   d51b8:	2003e310 	.word	0x2003e310
   d51bc:	2003e1e8 	.word	0x2003e1e8
   d51c0:	2003e1f9 	.word	0x2003e1f9
   d51c4:	2003e234 	.word	0x2003e234
   d51c8:	2003e2c4 	.word	0x2003e2c4
   d51cc:	2003e270 	.word	0x2003e270
   d51d0:	00015f90 	.word	0x00015f90
   d51d4:	2003e236 	.word	0x2003e236
   d51d8:	2003e1d4 	.word	0x2003e1d4
   d51dc:	2003e235 	.word	0x2003e235
   d51e0:	2003e2b8 	.word	0x2003e2b8
   d51e4:	2003e1dc 	.word	0x2003e1dc
   d51e8:	000d9a27 	.word	0x000d9a27
   d51ec:	000d99bd 	.word	0x000d99bd
   d51f0:	000d983d 	.word	0x000d983d
   d51f4:	403e0000 	.word	0x403e0000
   d51f8:	000d9bf8 	.word	0x000d9bf8
   d51fc:	2003e218 	.word	0x2003e218
   d5200:	2003e106 	.word	0x2003e106
   d5204:	2003e1d8 	.word	0x2003e1d8
   d5208:	000d9997 	.word	0x000d9997
   d520c:	000d96c9 	.word	0x000d96c9
      state = ERROR_STATE;                                            // Response timed out
    }
    break;

  case NAPPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5210:	4b9a      	ldr	r3, [pc, #616]	; (d547c <loop+0x4e4>)
   d5212:	791a      	ldrb	r2, [r3, #4]
   d5214:	461d      	mov	r5, r3
   d5216:	b12a      	cbz	r2, d5224 <loop+0x28c>
   d5218:	4b99      	ldr	r3, [pc, #612]	; (d5480 <loop+0x4e8>)
   d521a:	781b      	ldrb	r3, [r3, #0]
   d521c:	2b07      	cmp	r3, #7
   d521e:	d001      	beq.n	d5224 <loop+0x28c>
   d5220:	f7ff fe80 	bl	d4f24 <_Z22publishStateTransitionv>
   d5224:	f001 f808 	bl	d6238 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5228:	b1b0      	cbz	r0, d5258 <loop+0x2c0>
      if (sysStatus.verboseMode) {
   d522a:	792b      	ldrb	r3, [r5, #4]
   d522c:	b173      	cbz	r3, d524c <loop+0x2b4>
        waitUntil(meterParticlePublish);
   d522e:	f7ff f9dd 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d5232:	4b94      	ldr	r3, [pc, #592]	; (d5484 <loop+0x4ec>)
        Particle.publish("State","Taking a Nap",PRIVATE);
   d5234:	4994      	ldr	r1, [pc, #592]	; (d5488 <loop+0x4f0>)
   d5236:	781b      	ldrb	r3, [r3, #0]
   d5238:	2200      	movs	r2, #0
   d523a:	f88d 2000 	strb.w	r2, [sp]
   d523e:	a806      	add	r0, sp, #24
   d5240:	4a92      	ldr	r2, [pc, #584]	; (d548c <loop+0x4f4>)
   d5242:	f7fe ff95 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d5246:	a807      	add	r0, sp, #28
   d5248:	f7ff fb22 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                      // Time to send last update
   d524c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5250:	f001 f8be 	bl	d63d0 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d5254:	f7ff f92a 	bl	d44ac <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5258:	2100      	movs	r1, #0
   d525a:	2007      	movs	r0, #7
   d525c:	f002 fd17 	bl	d7c8e <digitalWrite>
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d5260:	2100      	movs	r1, #0
   d5262:	200e      	movs	r0, #14
   d5264:	f002 fd13 	bl	d7c8e <digitalWrite>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5268:	f002 fb10 	bl	d788c <_ZN9TimeClass6minuteEv>
   d526c:	233c      	movs	r3, #60	; 0x3c
   d526e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d5272:	fb03 f500 	mul.w	r5, r3, r0
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5276:	4b86      	ldr	r3, [pc, #536]	; (d5490 <loop+0x4f8>)
   d5278:	7d1a      	ldrb	r2, [r3, #20]
   d527a:	b10a      	cbz	r2, d5280 <loop+0x2e8>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d527c:	2201      	movs	r2, #1
   d527e:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5280:	2200      	movs	r2, #0
   d5282:	2104      	movs	r1, #4
   d5284:	4882      	ldr	r0, [pc, #520]	; (d5490 <loop+0x4f8>)
   d5286:	f7fe ff9b 	bl	d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d528a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d528e:	4369      	muls	r1, r5
   d5290:	f7fe ffca 	bl	d4228 <_ZN24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5294:	497e      	ldr	r1, [pc, #504]	; (d5490 <loop+0x4f8>)
   d5296:	a803      	add	r0, sp, #12
   d5298:	f002 f9de 	bl	d7658 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d529c:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d529e:	b17b      	cbz	r3, d52c0 <loop+0x328>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d52a0:	889a      	ldrh	r2, [r3, #4]
   d52a2:	2a01      	cmp	r2, #1
   d52a4:	d10c      	bne.n	d52c0 <loop+0x328>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d52a6:	899b      	ldrh	r3, [r3, #12]
   d52a8:	2b04      	cmp	r3, #4
   d52aa:	d109      	bne.n	d52c0 <loop+0x328>
   d52ac:	4979      	ldr	r1, [pc, #484]	; (d5494 <loop+0x4fc>)
   d52ae:	a806      	add	r0, sp, #24
   d52b0:	f002 f91e 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
   d52b4:	a806      	add	r0, sp, #24
   d52b6:	f7ff fd1d 	bl	d4cf4 <_Z15setLowPowerMode6String>
   d52ba:	a806      	add	r0, sp, #24
   d52bc:	f002 f8d1 	bl	d7462 <_ZN6StringD1Ev>
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d52c0:	2101      	movs	r1, #1
   d52c2:	2007      	movs	r0, #7
   d52c4:	f002 fce3 	bl	d7c8e <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d52c8:	2101      	movs	r1, #1
   d52ca:	200e      	movs	r0, #14
   d52cc:	f002 fcdf 	bl	d7c8e <digitalWrite>
    connectToParticle();                                                // Wakey Wakey and get connected.
   d52d0:	f7ff f8a8 	bl	d4424 <_Z17connectToParticlev>
    state = IDLE_STATE;                                                 // Awake now, we need to go back to the IDLE state for next tasking
   d52d4:	2302      	movs	r3, #2
   d52d6:	7023      	strb	r3, [r4, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d52d8:	9803      	ldr	r0, [sp, #12]
   d52da:	e052      	b.n	d5382 <loop+0x3ea>
    } break;

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52dc:	4b67      	ldr	r3, [pc, #412]	; (d547c <loop+0x4e4>)
   d52de:	791a      	ldrb	r2, [r3, #4]
   d52e0:	461d      	mov	r5, r3
   d52e2:	b12a      	cbz	r2, d52f0 <loop+0x358>
   d52e4:	4b66      	ldr	r3, [pc, #408]	; (d5480 <loop+0x4e8>)
   d52e6:	781b      	ldrb	r3, [r3, #0]
   d52e8:	2b08      	cmp	r3, #8
   d52ea:	d001      	beq.n	d52f0 <loop+0x358>
   d52ec:	f7ff fe1a 	bl	d4f24 <_Z22publishStateTransitionv>
   d52f0:	f000 ffa2 	bl	d6238 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d52f4:	b1a0      	cbz	r0, d5320 <loop+0x388>
      waitUntil(meterParticlePublish);
   d52f6:	f7ff f979 	bl	d45ec <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE_EEbT_.isra.53>
   d52fa:	4b62      	ldr	r3, [pc, #392]	; (d5484 <loop+0x4ec>)
      Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d52fc:	4962      	ldr	r1, [pc, #392]	; (d5488 <loop+0x4f0>)
   d52fe:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5300:	2200      	movs	r2, #0
   d5302:	f88d 2000 	strb.w	r2, [sp]
   d5306:	a806      	add	r0, sp, #24
   d5308:	4a63      	ldr	r2, [pc, #396]	; (d5498 <loop+0x500>)
   d530a:	f7fe ff31 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d530e:	a807      	add	r0, sp, #28
   d5310:	f7ff fabe 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                                      // Time to send last update
   d5314:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5318:	f001 f85a 	bl	d63d0 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d531c:	f7ff f8c6 	bl	d44ac <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5320:	2100      	movs	r1, #0
   d5322:	2007      	movs	r0, #7
   d5324:	f002 fcb3 	bl	d7c8e <digitalWrite>
    if (sysStatus.solenoidConfig) controlValve("0");                  // Make darn sure the water is off
   d5328:	7c6b      	ldrb	r3, [r5, #17]
   d532a:	b14b      	cbz	r3, d5340 <loop+0x3a8>
   d532c:	4959      	ldr	r1, [pc, #356]	; (d5494 <loop+0x4fc>)
   d532e:	a806      	add	r0, sp, #24
   d5330:	f002 f8de 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
   d5334:	a806      	add	r0, sp, #24
   d5336:	f7ff fd4d 	bl	d4dd4 <_Z12controlValve6String>
   d533a:	a806      	add	r0, sp, #24
   d533c:	f002 f891 	bl	d7462 <_ZN6StringD1Ev>
    delay(5000);
   d5340:	f241 3088 	movw	r0, #5000	; 0x1388
   d5344:	f001 f844 	bl	d63d0 <delay>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5348:	f002 faa0 	bl	d788c <_ZN9TimeClass6minuteEv>
   d534c:	233c      	movs	r3, #60	; 0x3c
   d534e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d5352:	fb03 f500 	mul.w	r5, r3, r0
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5356:	4b4e      	ldr	r3, [pc, #312]	; (d5490 <loop+0x4f8>)
   d5358:	7d1a      	ldrb	r2, [r3, #20]
   d535a:	b10a      	cbz	r2, d5360 <loop+0x3c8>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d535c:	2201      	movs	r2, #1
   d535e:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5360:	2200      	movs	r2, #0
   d5362:	2104      	movs	r1, #4
   d5364:	484a      	ldr	r0, [pc, #296]	; (d5490 <loop+0x4f8>)
   d5366:	f7fe ff2b 	bl	d41c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d536a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d536e:	4369      	muls	r1, r5
   d5370:	f7fe ff5a 	bl	d4228 <_ZN24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5374:	a806      	add	r0, sp, #24
   d5376:	4946      	ldr	r1, [pc, #280]	; (d5490 <loop+0x4f8>)
   d5378:	f002 f96e 	bl	d7658 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d537c:	2302      	movs	r3, #2
   d537e:	9806      	ldr	r0, [sp, #24]
   d5380:	7023      	strb	r3, [r4, #0]
   d5382:	2800      	cmp	r0, #0
   d5384:	d077      	beq.n	d5476 <loop+0x4de>
            free(wakeupSource_);
   d5386:	f000 ffe7 	bl	d6358 <free>
    } break;
   d538a:	e074      	b.n	d5476 <loop+0x4de>

  case ERROR_STATE:                                                     // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d538c:	4c3b      	ldr	r4, [pc, #236]	; (d547c <loop+0x4e4>)
   d538e:	7923      	ldrb	r3, [r4, #4]
   d5390:	b12b      	cbz	r3, d539e <loop+0x406>
   d5392:	4b3b      	ldr	r3, [pc, #236]	; (d5480 <loop+0x4e8>)
   d5394:	781b      	ldrb	r3, [r3, #0]
   d5396:	2b01      	cmp	r3, #1
   d5398:	d001      	beq.n	d539e <loop+0x406>
   d539a:	f7ff fdc3 	bl	d4f24 <_Z22publishStateTransitionv>
   d539e:	f000 fd29 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d53a2:	4b3e      	ldr	r3, [pc, #248]	; (d549c <loop+0x504>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d53aa:	3330      	adds	r3, #48	; 0x30
   d53ac:	4298      	cmp	r0, r3
   d53ae:	d962      	bls.n	d5476 <loop+0x4de>
    {
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d53b0:	69a3      	ldr	r3, [r4, #24]
   d53b2:	2b03      	cmp	r3, #3
   d53b4:	dc14      	bgt.n	d53e0 <loop+0x448>
   d53b6:	f000 ff3f 	bl	d6238 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d53ba:	b160      	cbz	r0, d53d6 <loop+0x43e>
   d53bc:	4b31      	ldr	r3, [pc, #196]	; (d5484 <loop+0x4ec>)
   d53be:	4932      	ldr	r1, [pc, #200]	; (d5488 <loop+0x4f0>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d53c0:	781b      	ldrb	r3, [r3, #0]
   d53c2:	2200      	movs	r2, #0
   d53c4:	f88d 2000 	strb.w	r2, [sp]
   d53c8:	a806      	add	r0, sp, #24
   d53ca:	4a35      	ldr	r2, [pc, #212]	; (d54a0 <loop+0x508>)
   d53cc:	f7fe fed0 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d53d0:	a807      	add	r0, sp, #28
   d53d2:	f7ff fa5d 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d53d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d53da:	f000 fff9 	bl	d63d0 <delay>
   d53de:	e024      	b.n	d542a <loop+0x492>
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d53e0:	f002 fa42 	bl	d7868 <_ZN9TimeClass3nowEv>
   d53e4:	4b25      	ldr	r3, [pc, #148]	; (d547c <loop+0x4e4>)
   d53e6:	69db      	ldr	r3, [r3, #28]
   d53e8:	1ac0      	subs	r0, r0, r3
   d53ea:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d53ee:	d91f      	bls.n	d5430 <loop+0x498>
   d53f0:	f000 ff22 	bl	d6238 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d53f4:	b160      	cbz	r0, d5410 <loop+0x478>
   d53f6:	4b23      	ldr	r3, [pc, #140]	; (d5484 <loop+0x4ec>)
   d53f8:	4923      	ldr	r1, [pc, #140]	; (d5488 <loop+0x4f0>)
   d53fa:	781b      	ldrb	r3, [r3, #0]
   d53fc:	2200      	movs	r2, #0
   d53fe:	f88d 2000 	strb.w	r2, [sp]
   d5402:	a806      	add	r0, sp, #24
   d5404:	4a27      	ldr	r2, [pc, #156]	; (d54a4 <loop+0x50c>)
   d5406:	f7fe feb3 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d540a:	a807      	add	r0, sp, #28
   d540c:	f7ff fa40 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5414:	f000 ffdc 	bl	d63d0 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d5418:	2300      	movs	r3, #0
   d541a:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d541c:	f002 fc7a 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
   d5420:	2220      	movs	r2, #32
   d5422:	4916      	ldr	r1, [pc, #88]	; (d547c <loop+0x4e4>)
   d5424:	2001      	movs	r0, #1
   d5426:	f000 fd0d 	bl	d5e44 <HAL_EEPROM_Put>
        System.reset();
   d542a:	f002 f912 	bl	d7652 <_ZN11SystemClass5resetEv>
   d542e:	e022      	b.n	d5476 <loop+0x4de>
   d5430:	f000 ff02 	bl	d6238 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5434:	b160      	cbz	r0, d5450 <loop+0x4b8>
   d5436:	4b13      	ldr	r3, [pc, #76]	; (d5484 <loop+0x4ec>)
   d5438:	4913      	ldr	r1, [pc, #76]	; (d5488 <loop+0x4f0>)
   d543a:	781b      	ldrb	r3, [r3, #0]
   d543c:	2200      	movs	r2, #0
   d543e:	f88d 2000 	strb.w	r2, [sp]
   d5442:	a806      	add	r0, sp, #24
   d5444:	4a18      	ldr	r2, [pc, #96]	; (d54a8 <loop+0x510>)
   d5446:	f7fe fe93 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d544a:	a807      	add	r0, sp, #28
   d544c:	f7ff fa20 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5450:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5454:	f000 ffbc 	bl	d63d0 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d5458:	2300      	movs	r3, #0
   d545a:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d545c:	f002 fc5a 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
   d5460:	2220      	movs	r2, #32
   d5462:	4906      	ldr	r1, [pc, #24]	; (d547c <loop+0x4e4>)
   d5464:	2001      	movs	r0, #1
   d5466:	f000 fced 	bl	d5e44 <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d546a:	f7ff f8cb 	bl	d4604 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
   d546e:	e002      	b.n	d5476 <loop+0x4de>
    }
    if (currentStatusWriteNeeded) {
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
      currentStatusWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d5470:	2307      	movs	r3, #7
   d5472:	7023      	strb	r3, [r4, #0]
   d5474:	e5d2      	b.n	d501c <loop+0x84>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d5476:	b00a      	add	sp, #40	; 0x28
   d5478:	bd70      	pop	{r4, r5, r6, pc}
   d547a:	bf00      	nop
   d547c:	2003e310 	.word	0x2003e310
   d5480:	2003e1e8 	.word	0x2003e1e8
   d5484:	2003e1dc 	.word	0x2003e1dc
   d5488:	000d99bd 	.word	0x000d99bd
   d548c:	000d99b0 	.word	0x000d99b0
   d5490:	2003e238 	.word	0x2003e238
   d5494:	000d983d 	.word	0x000d983d
   d5498:	000d99c3 	.word	0x000d99c3
   d549c:	2003e2b8 	.word	0x2003e2b8
   d54a0:	000d99da 	.word	0x000d99da
   d54a4:	000d99ee 	.word	0x000d99ee
   d54a8:	000d9a08 	.word	0x000d9a08

000d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d54ac:	2300      	movs	r3, #0
   d54ae:	2204      	movs	r2, #4
   d54b0:	f000 be9a 	b.w	d61e8 <spark_variable>

000d54b4 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>:
   d54b4:	2300      	movs	r3, #0
   d54b6:	2202      	movs	r2, #2
   d54b8:	f000 be96 	b.w	d61e8 <spark_variable>

000d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d54bc:	4602      	mov	r2, r0
   d54be:	4801      	ldr	r0, [pc, #4]	; (d54c4 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d54c0:	f001 b954 	b.w	d676c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54c4:	000d6741 	.word	0x000d6741

000d54c8 <setup>:

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d54c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d54ca:	4bae      	ldr	r3, [pc, #696]	; (d5784 <setup+0x2bc>)

// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
   d54cc:	b0bb      	sub	sp, #236	; 0xec
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d54ce:	aa0a      	add	r2, sp, #40	; 0x28
   d54d0:	f103 0510 	add.w	r5, r3, #16
   d54d4:	4616      	mov	r6, r2
   d54d6:	6818      	ldr	r0, [r3, #0]
   d54d8:	6859      	ldr	r1, [r3, #4]
   d54da:	4614      	mov	r4, r2
   d54dc:	c403      	stmia	r4!, {r0, r1}
   d54de:	3308      	adds	r3, #8
   d54e0:	42ab      	cmp	r3, r5
   d54e2:	4622      	mov	r2, r4
   d54e4:	d1f7      	bne.n	d54d6 <setup+0xe>
   d54e6:	8819      	ldrh	r1, [r3, #0]
   d54e8:	789b      	ldrb	r3, [r3, #2]
   d54ea:	8021      	strh	r1, [r4, #0]
   d54ec:	70a3      	strb	r3, [r4, #2]
   d54ee:	222d      	movs	r2, #45	; 0x2d
   d54f0:	2100      	movs	r1, #0
   d54f2:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = IDLE_STATE;
   d54f6:	4fa4      	ldr	r7, [pc, #656]	; (d5788 <setup+0x2c0>)
// Battery monitoring
int lowBattLimit;                                                 // Trigger for Low Batt State

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d54f8:	f003 fbc3 	bl	d8c82 <memset>
  state = IDLE_STATE;
   d54fc:	2302      	movs	r3, #2
   d54fe:	703b      	strb	r3, [r7, #0]

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5500:	4ba2      	ldr	r3, [pc, #648]	; (d578c <setup+0x2c4>)
   d5502:	681b      	ldr	r3, [r3, #0]
   d5504:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   d5508:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d550c:	f003 031f 	and.w	r3, r3, #31
   d5510:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5514:	2d2f      	cmp	r5, #47	; 0x2f
   d5516:	dd05      	ble.n	d5524 <setup+0x5c>
   d5518:	4a9d      	ldr	r2, [pc, #628]	; (d5790 <setup+0x2c8>)
   d551a:	2100      	movs	r1, #0
   d551c:	200a      	movs	r0, #10
   d551e:	f000 fde1 	bl	d60e4 <panic_>
   d5522:	e001      	b.n	d5528 <setup+0x60>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d5524:	2d1f      	cmp	r5, #31
   d5526:	dd03      	ble.n	d5530 <setup+0x68>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d5528:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
   d552c:	4b99      	ldr	r3, [pc, #612]	; (d5794 <setup+0x2cc>)
   d552e:	e001      	b.n	d5534 <setup+0x6c>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d5530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d5534:	2401      	movs	r4, #1
   d5536:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d553a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508

  pinSetFast(solEnablePin);                                       // Make sure the Solenoid is off
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d553e:	4621      	mov	r1, r4
   d5540:	2007      	movs	r0, #7
   d5542:	f002 fb93 	bl	d7c6c <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d5546:	2100      	movs	r1, #0
   d5548:	2004      	movs	r0, #4
   d554a:	f002 fb8f 	bl	d7c6c <pinMode>
  pinMode(soilPin1, INPUT);
   d554e:	2100      	movs	r1, #0
   d5550:	2013      	movs	r0, #19
   d5552:	f002 fb8b 	bl	d7c6c <pinMode>
  pinMode(soilPin2, INPUT);
   d5556:	2100      	movs	r1, #0
   d5558:	2012      	movs	r0, #18
   d555a:	f002 fb87 	bl	d7c6c <pinMode>
  pinMode(pressurePin, INPUT);
   d555e:	2100      	movs	r1, #0
   d5560:	2011      	movs	r0, #17
   d5562:	f002 fb83 	bl	d7c6c <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d5566:	4621      	mov	r1, r4
   d5568:	200e      	movs	r0, #14
   d556a:	f002 fb7f 	bl	d7c6c <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d556e:	4621      	mov	r1, r4
   d5570:	200e      	movs	r0, #14
   d5572:	f002 fb8c 	bl	d7c8e <digitalWrite>
  pinMode(solEnablePin,OUTPUT);
   d5576:	4621      	mov	r1, r4
   d5578:	2003      	movs	r0, #3
   d557a:	f002 fb77 	bl	d7c6c <pinMode>
  pinMode(solDirection,OUTPUT);
   d557e:	4621      	mov	r1, r4
   d5580:	2002      	movs	r0, #2
   d5582:	f002 fb73 	bl	d7c6c <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d5586:	4621      	mov	r1, r4
   d5588:	2003      	movs	r0, #3
   d558a:	f002 fb80 	bl	d7c8e <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d558e:	2100      	movs	r1, #0
   d5590:	2002      	movs	r0, #2
   d5592:	f002 fb7c 	bl	d7c8e <digitalWrite>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5596:	a802      	add	r0, sp, #8
   d5598:	f000 fe56 	bl	d6248 <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d559c:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d559e:	2300      	movs	r3, #0
   d55a0:	227d      	movs	r2, #125	; 0x7d
   d55a2:	a91a      	add	r1, sp, #104	; 0x68
   d55a4:	a802      	add	r0, sp, #8
   d55a6:	f001 ffe2 	bl	d756e <_ZNK6String8getBytesEPhjj>
   d55aa:	462b      	mov	r3, r5
   d55ac:	462a      	mov	r2, r5
   d55ae:	497a      	ldr	r1, [pc, #488]	; (d5798 <setup+0x2d0>)
   d55b0:	9501      	str	r5, [sp, #4]
   d55b2:	9500      	str	r5, [sp, #0]
   d55b4:	a81a      	add	r0, sp, #104	; 0x68
   d55b6:	f000 fe57 	bl	d6268 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d55ba:	4978      	ldr	r1, [pc, #480]	; (d579c <setup+0x2d4>)
   d55bc:	4878      	ldr	r0, [pc, #480]	; (d57a0 <setup+0x2d8>)
   d55be:	f7ff ff75 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d55c2:	4978      	ldr	r1, [pc, #480]	; (d57a4 <setup+0x2dc>)
   d55c4:	4878      	ldr	r0, [pc, #480]	; (d57a8 <setup+0x2e0>)
   d55c6:	f7ff ff75 	bl	d54b4 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",releaseNumber);
   d55ca:	4978      	ldr	r1, [pc, #480]	; (d57ac <setup+0x2e4>)
   d55cc:	4878      	ldr	r0, [pc, #480]	; (d57b0 <setup+0x2e8>)
   d55ce:	f7ff ff6d 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("StateOfChg", batteryString);
   d55d2:	4978      	ldr	r1, [pc, #480]	; (d57b4 <setup+0x2ec>)
   d55d4:	4878      	ldr	r0, [pc, #480]	; (d57b8 <setup+0x2f0>)
   d55d6:	f7ff ff69 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d55da:	4978      	ldr	r1, [pc, #480]	; (d57bc <setup+0x2f4>)
   d55dc:	4878      	ldr	r0, [pc, #480]	; (d57c0 <setup+0x2f8>)
   d55de:	f7ff ff65 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("LowPowerMode",lowPowerModeStr);
   d55e2:	4978      	ldr	r1, [pc, #480]	; (d57c4 <setup+0x2fc>)
   d55e4:	4878      	ldr	r0, [pc, #480]	; (d57c8 <setup+0x300>)
   d55e6:	f7ff ff61 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Temperature", temperatureString);
   d55ea:	4978      	ldr	r1, [pc, #480]	; (d57cc <setup+0x304>)
   d55ec:	4878      	ldr	r0, [pc, #480]	; (d57d0 <setup+0x308>)
   d55ee:	f7ff ff5d 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Humidity", humidityString);
   d55f2:	4978      	ldr	r1, [pc, #480]	; (d57d4 <setup+0x30c>)
   d55f4:	4878      	ldr	r0, [pc, #480]	; (d57d8 <setup+0x310>)
   d55f6:	f7ff ff59 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Luminosity",lightLevelString);
   d55fa:	4978      	ldr	r1, [pc, #480]	; (d57dc <setup+0x314>)
   d55fc:	4878      	ldr	r0, [pc, #480]	; (d57e0 <setup+0x318>)
   d55fe:	f7ff ff55 	bl	d54ac <_ZN10CloudClass8variableIA11_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture1", current.soilMoisture1);
   d5602:	4978      	ldr	r1, [pc, #480]	; (d57e4 <setup+0x31c>)
   d5604:	4878      	ldr	r0, [pc, #480]	; (d57e8 <setup+0x320>)
   d5606:	f7ff ff55 	bl	d54b4 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("SoilMoisture2", current.soilMoisture2);
   d560a:	4978      	ldr	r1, [pc, #480]	; (d57ec <setup+0x324>)
   d560c:	4878      	ldr	r0, [pc, #480]	; (d57f0 <setup+0x328>)
   d560e:	f7ff ff51 	bl	d54b4 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Pressure", current.pressure);
   d5612:	4978      	ldr	r1, [pc, #480]	; (d57f4 <setup+0x32c>)
   d5614:	4878      	ldr	r0, [pc, #480]	; (d57f8 <setup+0x330>)
   d5616:	f7ff ff4d 	bl	d54b4 <_ZN10CloudClass8variableIA9_cIRiEEEbRKT_DpOT0_>

  Particle.function("Measure-Now",measureNow);
   d561a:	4978      	ldr	r1, [pc, #480]	; (d57fc <setup+0x334>)
   d561c:	4878      	ldr	r0, [pc, #480]	; (d5800 <setup+0x338>)
   d561e:	f7ff ff4d 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d5622:	4978      	ldr	r1, [pc, #480]	; (d5804 <setup+0x33c>)
   d5624:	4868      	ldr	r0, [pc, #416]	; (d57c8 <setup+0x300>)
   d5626:	f7ff ff49 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d562a:	4977      	ldr	r1, [pc, #476]	; (d5808 <setup+0x340>)
   d562c:	4877      	ldr	r0, [pc, #476]	; (d580c <setup+0x344>)
   d562e:	f7ff ff45 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Watering",controlValve);
   d5632:	4977      	ldr	r1, [pc, #476]	; (d5810 <setup+0x348>)
   d5634:	4877      	ldr	r0, [pc, #476]	; (d5814 <setup+0x34c>)
   d5636:	f7ff ff41 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetSoilSensors",setSoilSensors);
   d563a:	4977      	ldr	r1, [pc, #476]	; (d5818 <setup+0x350>)
   d563c:	4877      	ldr	r0, [pc, #476]	; (d581c <setup+0x354>)
   d563e:	f7ff ff3d 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPressureSensor", setPressureSensor);
   d5642:	4977      	ldr	r1, [pc, #476]	; (d5820 <setup+0x358>)
   d5644:	4877      	ldr	r0, [pc, #476]	; (d5824 <setup+0x35c>)
   d5646:	f7ff ff39 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetLightSensor",setLightSensor);
   d564a:	4977      	ldr	r1, [pc, #476]	; (d5828 <setup+0x360>)
   d564c:	4877      	ldr	r0, [pc, #476]	; (d582c <setup+0x364>)
   d564e:	f7ff ff35 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SolenoidPresent",setSolenoidPresent);
   d5652:	4977      	ldr	r1, [pc, #476]	; (d5830 <setup+0x368>)
   d5654:	4877      	ldr	r0, [pc, #476]	; (d5834 <setup+0x36c>)
   d5656:	f7ff ff31 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTempHumidSensor",setTempHumidSensor);
   d565a:	4977      	ldr	r1, [pc, #476]	; (d5838 <setup+0x370>)
   d565c:	4877      	ldr	r0, [pc, #476]	; (d583c <setup+0x374>)
   d565e:	f7ff ff2d 	bl	d54bc <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d5662:	f002 fb57 	bl	d7d14 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d5666:	4628      	mov	r0, r5
   d5668:	f000 fbdc 	bl	d5e24 <HAL_EEPROM_Read>
   d566c:	2802      	cmp	r0, #2
   d566e:	d111      	bne.n	d5694 <setup+0x1cc>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5670:	4c73      	ldr	r4, [pc, #460]	; (d5840 <setup+0x378>)
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d5672:	f002 fb4f 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
   d5676:	2220      	movs	r2, #32
   d5678:	4621      	mov	r1, r4
   d567a:	2001      	movs	r0, #1
   d567c:	f000 fbda 	bl	d5e34 <HAL_EEPROM_Get>
  EEPROM.get(MEM_MAP::currentStatusAddr,current);
   d5680:	f002 fb48 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
   d5684:	2224      	movs	r2, #36	; 0x24
   d5686:	4957      	ldr	r1, [pc, #348]	; (d57e4 <setup+0x31c>)
   d5688:	2050      	movs	r0, #80	; 0x50
   d568a:	f000 fbd3 	bl	d5e34 <HAL_EEPROM_Get>

  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
   d568e:	7b23      	ldrb	r3, [r4, #12]
   d5690:	b1eb      	cbz	r3, d56ce <setup+0x206>
   d5692:	e012      	b.n	d56ba <setup+0x1f2>
  Particle.function("SetLightSensor",setLightSensor);
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d5694:	f002 fb3e 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5698:	2204      	movs	r2, #4
   d569a:	496a      	ldr	r1, [pc, #424]	; (d5844 <setup+0x37c>)
   d569c:	4628      	mov	r0, r5
   d569e:	f000 fbd1 	bl	d5e44 <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d56a2:	f002 fb37 	bl	d7d14 <_Z21__fetch_global_EEPROMv>
   d56a6:	4620      	mov	r0, r4
   d56a8:	2204      	movs	r2, #4
   d56aa:	a906      	add	r1, sp, #24
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d56ac:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d56ae:	9506      	str	r5, [sp, #24]
   d56b0:	f000 fbc8 	bl	d5e44 <HAL_EEPROM_Put>
  Particle.function("SolenoidPresent",setSolenoidPresent);
  Particle.function("SetTempHumidSensor",setTempHumidSensor);

  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
    for (int i=1; i < 0xF0; i++) {
   d56b4:	2cf0      	cmp	r4, #240	; 0xf0
   d56b6:	d1f4      	bne.n	d56a2 <setup+0x1da>
   d56b8:	e7da      	b.n	d5670 <setup+0x1a8>

  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
  EEPROM.get(MEM_MAP::currentStatusAddr,current);

  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
    if (!tempHumidSensor.begin(0x44)) {
   d56ba:	2144      	movs	r1, #68	; 0x44
   d56bc:	4862      	ldr	r0, [pc, #392]	; (d5848 <setup+0x380>)
   d56be:	f000 fa4d 	bl	d5b5c <_ZN14Adafruit_SHT315beginEh>
   d56c2:	b920      	cbnz	r0, d56ce <setup+0x206>
      sysStatus.TempHumidConfig = false;                                // Set to 0x45 for alternate i2c addr - turns off the sensor if it fails to initalize
   d56c4:	7320      	strb	r0, [r4, #12]
      strcpy(StartupMessage,"Temp/Humidity Sensor Failed to Inialize - disabling");
   d56c6:	4961      	ldr	r1, [pc, #388]	; (d584c <setup+0x384>)
   d56c8:	4630      	mov	r0, r6
   d56ca:	f003 fb15 	bl	d8cf8 <strcpy>
    } 
  }

  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d56ce:	7c23      	ldrb	r3, [r4, #16]
   d56d0:	b133      	cbz	r3, d56e0 <setup+0x218>
    lightSensor.begin();
   d56d2:	485f      	ldr	r0, [pc, #380]	; (d5850 <setup+0x388>)
   d56d4:	f000 f9b1 	bl	d5a3a <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d56d8:	2120      	movs	r1, #32
   d56da:	485d      	ldr	r0, [pc, #372]	; (d5850 <setup+0x388>)
   d56dc:	f000 f9e9 	bl	d5ab2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d56e0:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d56e2:	4611      	mov	r1, r2
   d56e4:	a806      	add	r0, sp, #24
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d56e6:	9206      	str	r2, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d56e8:	f000 fb6c 	bl	d5dc4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d56ec:	9b06      	ldr	r3, [sp, #24]
  }

  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d56ee:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d56f0:	bf02      	ittt	eq
   d56f2:	69a3      	ldreq	r3, [r4, #24]
   d56f4:	3301      	addeq	r3, #1
   d56f6:	61a3      	streq	r3, [r4, #24]
  }
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d56f8:	69a3      	ldr	r3, [r4, #24]
   d56fa:	2b05      	cmp	r3, #5
   d56fc:	dd04      	ble.n	d5708 <setup+0x240>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d56fe:	4b50      	ldr	r3, [pc, #320]	; (d5840 <setup+0x378>)
   d5700:	2204      	movs	r2, #4
   d5702:	619a      	str	r2, [r3, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d5704:	f7fe ff7e 	bl	d4604 <_Z14fullModemResetv>
  }

  if(!sysStatus.lowPowerMode) {
   d5708:	79a3      	ldrb	r3, [r4, #6]
   d570a:	b94b      	cbnz	r3, d5720 <setup+0x258>
    strcpy(lowPowerModeStr,"False");
   d570c:	4951      	ldr	r1, [pc, #324]	; (d5854 <setup+0x38c>)
   d570e:	482d      	ldr	r0, [pc, #180]	; (d57c4 <setup+0x2fc>)
   d5710:	f003 faf2 	bl	d8cf8 <strcpy>
    awakeTimer.start();
   d5714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5718:	484f      	ldr	r0, [pc, #316]	; (d5858 <setup+0x390>)
   d571a:	f7fe fe31 	bl	d4380 <_ZN5Timer5startEj>
   d571e:	e003      	b.n	d5728 <setup+0x260>
  }
  else strcpy(lowPowerModeStr,"True");
   d5720:	494e      	ldr	r1, [pc, #312]	; (d585c <setup+0x394>)
   d5722:	4828      	ldr	r0, [pc, #160]	; (d57c4 <setup+0x2fc>)
   d5724:	f003 fae8 	bl	d8cf8 <strcpy>

  sysStatus.solenoidHoldTime = 5;                                      // Set a reasonable value - based on testing 8mSec
   d5728:	2305      	movs	r3, #5
   d572a:	6163      	str	r3, [r4, #20]

  if (sysStatus.solenoidConfig && current.solenoidState) controlValve("0");   // Can start watering until we get to the main loop
   d572c:	7c63      	ldrb	r3, [r4, #17]
   d572e:	b163      	cbz	r3, d574a <setup+0x282>
   d5730:	4b2c      	ldr	r3, [pc, #176]	; (d57e4 <setup+0x31c>)
   d5732:	68db      	ldr	r3, [r3, #12]
   d5734:	b14b      	cbz	r3, d574a <setup+0x282>
   d5736:	494a      	ldr	r1, [pc, #296]	; (d5860 <setup+0x398>)
   d5738:	a806      	add	r0, sp, #24
   d573a:	f001 fed9 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
   d573e:	a806      	add	r0, sp, #24
   d5740:	f7ff fb48 	bl	d4dd4 <_Z12controlValve6String>
   d5744:	a806      	add	r0, sp, #24
   d5746:	f001 fe8c 	bl	d7462 <_ZN6StringD1Ev>

  sysStatus.solarPowerMode = true;                                      // Set this as a default
   d574a:	2301      	movs	r3, #1
   d574c:	7163      	strb	r3, [r4, #5]
  setPowerConfig();                                                     // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d574e:	f7fe feed 	bl	d452c <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) setLowPowerMode("0");                   // Rescue mode to take out of low power mode and connect
   d5752:	2004      	movs	r0, #4
   d5754:	f002 fab4 	bl	d7cc0 <digitalRead>
   d5758:	b948      	cbnz	r0, d576e <setup+0x2a6>
   d575a:	4941      	ldr	r1, [pc, #260]	; (d5860 <setup+0x398>)
   d575c:	a806      	add	r0, sp, #24
   d575e:	f001 fec7 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
   d5762:	a806      	add	r0, sp, #24
   d5764:	f7ff fac6 	bl	d4cf4 <_Z15setLowPowerMode6String>
   d5768:	a806      	add	r0, sp, #24
   d576a:	f001 fe7a 	bl	d7462 <_ZN6StringD1Ev>

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d576e:	f7fe ffbd 	bl	d46ec <_Z16takeMeasurementsv>

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d5772:	4b3c      	ldr	r3, [pc, #240]	; (d5864 <setup+0x39c>)
   d5774:	68a2      	ldr	r2, [r4, #8]
   d5776:	681b      	ldr	r3, [r3, #0]
   d5778:	429a      	cmp	r2, r3
   d577a:	dc75      	bgt.n	d5868 <setup+0x3a0>
   d577c:	2308      	movs	r3, #8
   d577e:	703b      	strb	r3, [r7, #0]
   d5780:	e07f      	b.n	d5882 <setup+0x3ba>
   d5782:	bf00      	nop
   d5784:	000d9660 	.word	0x000d9660
   d5788:	2003e1fa 	.word	0x2003e1fa
   d578c:	2003e260 	.word	0x2003e260
   d5790:	000d5de5 	.word	0x000d5de5
   d5794:	50000300 	.word	0x50000300
   d5798:	000d49a9 	.word	0x000d49a9
   d579c:	2003e274 	.word	0x2003e274
   d57a0:	000d9a41 	.word	0x000d9a41
   d57a4:	2003e328 	.word	0x2003e328
   d57a8:	000d9a48 	.word	0x000d9a48
   d57ac:	000d9bfa 	.word	0x000d9bfa
   d57b0:	000d9a53 	.word	0x000d9a53
   d57b4:	2003e2f8 	.word	0x2003e2f8
   d57b8:	000d9a5b 	.word	0x000d9a5b
   d57bc:	2003e1e9 	.word	0x2003e1e9
   d57c0:	000d9a66 	.word	0x000d9a66
   d57c4:	2003e2bc 	.word	0x2003e2bc
   d57c8:	000d9a75 	.word	0x000d9a75
   d57cc:	2003e1c4 	.word	0x2003e1c4
   d57d0:	000d9a82 	.word	0x000d9a82
   d57d4:	2003e2e8 	.word	0x2003e2e8
   d57d8:	000d9a8e 	.word	0x000d9a8e
   d57dc:	2003e300 	.word	0x2003e300
   d57e0:	000d9a97 	.word	0x000d9a97
   d57e4:	2003e2c4 	.word	0x2003e2c4
   d57e8:	000d9aa2 	.word	0x000d9aa2
   d57ec:	2003e2c8 	.word	0x2003e2c8
   d57f0:	000d9ab0 	.word	0x000d9ab0
   d57f4:	2003e2cc 	.word	0x2003e2cc
   d57f8:	000d9abe 	.word	0x000d9abe
   d57fc:	000d410d 	.word	0x000d410d
   d5800:	000d9ac7 	.word	0x000d9ac7
   d5804:	000d4cf5 	.word	0x000d4cf5
   d5808:	000d4c79 	.word	0x000d4c79
   d580c:	000d9ad3 	.word	0x000d9ad3
   d5810:	000d4dd5 	.word	0x000d4dd5
   d5814:	000d994a 	.word	0x000d994a
   d5818:	000d4a45 	.word	0x000d4a45
   d581c:	000d9ae0 	.word	0x000d9ae0
   d5820:	000d4ae9 	.word	0x000d4ae9
   d5824:	000d9aef 	.word	0x000d9aef
   d5828:	000d4b65 	.word	0x000d4b65
   d582c:	000d9b01 	.word	0x000d9b01
   d5830:	000d4e95 	.word	0x000d4e95
   d5834:	000d9b10 	.word	0x000d9b10
   d5838:	000d4bf1 	.word	0x000d4bf1
   d583c:	000d9b20 	.word	0x000d9b20
   d5840:	2003e310 	.word	0x2003e310
   d5844:	000d96a0 	.word	0x000d96a0
   d5848:	2003e264 	.word	0x2003e264
   d584c:	000d9b33 	.word	0x000d9b33
   d5850:	2003e1e0 	.word	0x2003e1e0
   d5854:	000d9935 	.word	0x000d9935
   d5858:	2003e1fc 	.word	0x2003e1fc
   d585c:	000d991e 	.word	0x000d991e
   d5860:	000d983d 	.word	0x000d983d
   d5864:	2003e1d4 	.word	0x2003e1d4
  else if(!connectToParticle()) {
   d5868:	f7fe fddc 	bl	d4424 <_Z17connectToParticlev>
   d586c:	b948      	cbnz	r0, d5882 <setup+0x3ba>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d586e:	2301      	movs	r3, #1
   d5870:	703b      	strb	r3, [r7, #0]
   d5872:	f000 fabf 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5876:	4b13      	ldr	r3, [pc, #76]	; (d58c4 <setup+0x3fc>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5878:	4913      	ldr	r1, [pc, #76]	; (d58c8 <setup+0x400>)
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d587a:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d587c:	4630      	mov	r0, r6
   d587e:	f003 fa3b 	bl	d8cf8 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5882:	f000 fcd9 	bl	d6238 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5886:	b108      	cbz	r0, d588c <setup+0x3c4>
   d5888:	7923      	ldrb	r3, [r4, #4]
   d588a:	b963      	cbnz	r3, d58a6 <setup+0x3de>
  Serial.println(StartupMessage);
   d588c:	f002 f8f2 	bl	d7a74 <_Z16_fetch_usbserialv>
   d5890:	4631      	mov	r1, r6
   d5892:	f001 fd9a 	bl	d73ca <_ZN5Print7printlnEPKc>

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d5896:	4b0d      	ldr	r3, [pc, #52]	; (d58cc <setup+0x404>)
   d5898:	2201      	movs	r2, #1
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d589a:	a802      	add	r0, sp, #8
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
   d589c:	701a      	strb	r2, [r3, #0]
  pinMode(solDirection,OUTPUT);
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
  digitalWrite(solDirection,LOW);                                // Set to close the valve

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d589e:	f001 fde0 	bl	d7462 <_ZN6StringD1Ev>

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  Serial.println(StartupMessage);

  systemStatusWriteNeeded = true;                                       // likely something has changed
}
   d58a2:	b03b      	add	sp, #236	; 0xec
   d58a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58a6:	4b0a      	ldr	r3, [pc, #40]	; (d58d0 <setup+0x408>)
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d58a8:	490a      	ldr	r1, [pc, #40]	; (d58d4 <setup+0x40c>)
   d58aa:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d58ac:	2200      	movs	r2, #0
   d58ae:	f88d 2000 	strb.w	r2, [sp]
   d58b2:	a806      	add	r0, sp, #24
   d58b4:	4632      	mov	r2, r6
   d58b6:	f7fe fc5b 	bl	d4170 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.74.constprop.92>
   d58ba:	a807      	add	r0, sp, #28
   d58bc:	f7fe ffe8 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58c0:	e7e4      	b.n	d588c <setup+0x3c4>
   d58c2:	bf00      	nop
   d58c4:	2003e2b8 	.word	0x2003e2b8
   d58c8:	000d9b67 	.word	0x000d9b67
   d58cc:	2003e1f9 	.word	0x2003e1f9
   d58d0:	2003e1dc 	.word	0x2003e1dc
   d58d4:	000d9b79 	.word	0x000d9b79

000d58d8 <_GLOBAL__sub_I___appProductID>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d58d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d58dc:	4b3f      	ldr	r3, [pc, #252]	; (d59dc <_GLOBAL__sub_I___appProductID+0x104>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d58de:	4e40      	ldr	r6, [pc, #256]	; (d59e0 <_GLOBAL__sub_I___appProductID+0x108>)
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d58e0:	4f40      	ldr	r7, [pc, #256]	; (d59e4 <_GLOBAL__sub_I___appProductID+0x10c>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d58e2:	f8df 913c 	ldr.w	r9, [pc, #316]	; d5a20 <_GLOBAL__sub_I___appProductID+0x148>
   d58e6:	2400      	movs	r4, #0
   d58e8:	601c      	str	r4, [r3, #0]
   d58ea:	4b3f      	ldr	r3, [pc, #252]	; (d59e8 <_GLOBAL__sub_I___appProductID+0x110>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d58ec:	b085      	sub	sp, #20
   d58ee:	2501      	movs	r5, #1
   d58f0:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d58f2:	f000 fabf 	bl	d5e74 <HAL_Pin_Map>
   d58f6:	4b3d      	ldr	r3, [pc, #244]	; (d59ec <_GLOBAL__sub_I___appProductID+0x114>)
   d58f8:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d58fa:	f002 f969 	bl	d7bd0 <spark_protocol_instance>
   d58fe:	4623      	mov	r3, r4
   d5900:	4622      	mov	r2, r4
   d5902:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5906:	f002 f96b 	bl	d7be0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d590a:	f002 f961 	bl	d7bd0 <spark_protocol_instance>
   d590e:	4622      	mov	r2, r4
   d5910:	4623      	mov	r3, r4
   d5912:	211a      	movs	r1, #26
   d5914:	f002 f96c 	bl	d7bf0 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5918:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d591c:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d591e:	6034      	str	r4, [r6, #0]
   d5920:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5922:	71b4      	strb	r4, [r6, #6]
   d5924:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5926:	2002      	movs	r0, #2
   d5928:	f000 fbfe 	bl	d6128 <set_system_mode>
#include "adafruit-sht31.h"
#include "DevicePinoutdoc.h"
#include "BH1750.h"

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d592c:	463a      	mov	r2, r7
   d592e:	4930      	ldr	r1, [pc, #192]	; (d59f0 <_GLOBAL__sub_I___appProductID+0x118>)
   d5930:	4630      	mov	r0, r6
   d5932:	f002 fa83 	bl	d7e3c <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5936:	4e2f      	ldr	r6, [pc, #188]	; (d59f4 <_GLOBAL__sub_I___appProductID+0x11c>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5938:	4621      	mov	r1, r4
   d593a:	4628      	mov	r0, r5
   d593c:	f000 fc0c 	bl	d6158 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5940:	4629      	mov	r1, r5
   d5942:	2004      	movs	r0, #4
   d5944:	f000 fa2e 	bl	d5da4 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5948:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d594c:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d594e:	4642      	mov	r2, r8
   d5950:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5952:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5954:	f003 f995 	bl	d8c82 <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5958:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
   d595a:	463a      	mov	r2, r7
   d595c:	4926      	ldr	r1, [pc, #152]	; (d59f8 <_GLOBAL__sub_I___appProductID+0x120>)
   d595e:	80f3      	strh	r3, [r6, #6]
   d5960:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5962:	7535      	strb	r5, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5964:	f8a6 8004 	strh.w	r8, [r6, #4]
   d5968:	f002 fa68 	bl	d7e3c <__aeabi_atexit>
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d596c:	4823      	ldr	r0, [pc, #140]	; (d59fc <_GLOBAL__sub_I___appProductID+0x124>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d596e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; d5a24 <_GLOBAL__sub_I___appProductID+0x14c>
	    _M_manager = &_My_handler::_M_manager;
   d5972:	4c23      	ldr	r4, [pc, #140]	; (d5a00 <_GLOBAL__sub_I___appProductID+0x128>)
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d5974:	4e23      	ldr	r6, [pc, #140]	; (d5a04 <_GLOBAL__sub_I___appProductID+0x12c>)
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5976:	f000 f8ce 	bl	d5b16 <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                     // Light sensor measures light level in Lux
   d597a:	f002 fa13 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d597e:	2123      	movs	r1, #35	; 0x23
   d5980:	4602      	mov	r2, r0
   d5982:	4821      	ldr	r0, [pc, #132]	; (d5a08 <_GLOBAL__sub_I___appProductID+0x130>)
   d5984:	f000 f854 	bl	d5a30 <_ZN6BH1750C1EhR7TwoWire>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5988:	4b20      	ldr	r3, [pc, #128]	; (d5a0c <_GLOBAL__sub_I___appProductID+0x134>)
   d598a:	9300      	str	r3, [sp, #0]
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, MEASURING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE, NAPPING_STATE, LOW_BATTERY_STATE};
char stateNames[9][14] = {"Initialize", "Error", "Idle", "Measuring", "Watering", "Reporting", "Response Wait", "Napping", "Low Battery"};
State state = INITIALIZATION_STATE;
State oldState = INITIALIZATION_STATE;

Timer wateringTimer(1200000, wateringTimerISR, true);     // 20 minute timer, calls the WateringTimerISR and is a one-shot timer
   d598c:	466a      	mov	r2, sp
   d598e:	462b      	mov	r3, r5
   d5990:	491f      	ldr	r1, [pc, #124]	; (d5a10 <_GLOBAL__sub_I___appProductID+0x138>)

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5992:	9402      	str	r4, [sp, #8]
   d5994:	4648      	mov	r0, r9
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5996:	f8cd 800c 	str.w	r8, [sp, #12]
   d599a:	f7fe fc81 	bl	d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d599e:	4668      	mov	r0, sp
   d59a0:	f7fe fbfb 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d59a4:	463a      	mov	r2, r7
   d59a6:	4631      	mov	r1, r6
   d59a8:	4648      	mov	r0, r9
   d59aa:	f002 fa47 	bl	d7e3c <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d59ae:	9402      	str	r4, [sp, #8]
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d59b0:	4c18      	ldr	r4, [pc, #96]	; (d5a14 <_GLOBAL__sub_I___appProductID+0x13c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d59b2:	4b19      	ldr	r3, [pc, #100]	; (d5a18 <_GLOBAL__sub_I___appProductID+0x140>)
   d59b4:	9300      	str	r3, [sp, #0]
   d59b6:	466a      	mov	r2, sp
   d59b8:	462b      	mov	r3, r5
   d59ba:	4918      	ldr	r1, [pc, #96]	; (d5a1c <_GLOBAL__sub_I___appProductID+0x144>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d59bc:	f8cd 800c 	str.w	r8, [sp, #12]
   d59c0:	4620      	mov	r0, r4
   d59c2:	f7fe fc6d 	bl	d42a0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59c6:	4668      	mov	r0, sp
   d59c8:	f7fe fbe7 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d59cc:	463a      	mov	r2, r7
   d59ce:	4631      	mov	r1, r6
   d59d0:	4620      	mov	r0, r4
   d59d2:	f002 fa33 	bl	d7e3c <__aeabi_atexit>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d59d6:	b005      	add	sp, #20
   d59d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d59dc:	2003e250 	.word	0x2003e250
   d59e0:	2003e254 	.word	0x2003e254
   d59e4:	2003e1c0 	.word	0x2003e1c0
   d59e8:	2003e1dc 	.word	0x2003e1dc
   d59ec:	2003e260 	.word	0x2003e260
   d59f0:	000d418b 	.word	0x000d418b
   d59f4:	2003e238 	.word	0x2003e238
   d59f8:	000d40f5 	.word	0x000d40f5
   d59fc:	2003e264 	.word	0x2003e264
   d5a00:	000d40dd 	.word	0x000d40dd
   d5a04:	000d4325 	.word	0x000d4325
   d5a08:	2003e1e0 	.word	0x2003e1e0
   d5a0c:	000d40b9 	.word	0x000d40b9
   d5a10:	00124f80 	.word	0x00124f80
   d5a14:	2003e1fc 	.word	0x2003e1fc
   d5a18:	000d40c5 	.word	0x000d40c5
   d5a1c:	001b7740 	.word	0x001b7740
   d5a20:	2003e218 	.word	0x2003e218
   d5a24:	000d40d9 	.word	0x000d40d9

000d5a28 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5a28:	6803      	ldr	r3, [r0, #0]
   d5a2a:	b2c9      	uxtb	r1, r1
   d5a2c:	689b      	ldr	r3, [r3, #8]
   d5a2e:	4718      	bx	r3

000d5a30 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5a30:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d5a32:	2211      	movs	r2, #17
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5a34:	7041      	strb	r1, [r0, #1]
{
  m_mode = continuous_high_res2;
   d5a36:	7002      	strb	r2, [r0, #0]
}
   d5a38:	4770      	bx	lr

000d5a3a <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d5a3e:	6840      	ldr	r0, [r0, #4]
   d5a40:	f001 f9f7 	bl	d6e32 <_ZN7TwoWire9isEnabledEv>
   d5a44:	b910      	cbnz	r0, d5a4c <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d5a46:	6860      	ldr	r0, [r4, #4]
   d5a48:	f001 f9ae 	bl	d6da8 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d5a4c:	2001      	movs	r0, #1
   d5a4e:	bd10      	pop	{r4, pc}

000d5a50 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d5a50:	b570      	push	{r4, r5, r6, lr}
   d5a52:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d5a54:	7841      	ldrb	r1, [r0, #1]
   d5a56:	6840      	ldr	r0, [r0, #4]
   d5a58:	f001 f9dd 	bl	d6e16 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d5a5c:	2202      	movs	r2, #2
   d5a5e:	7869      	ldrb	r1, [r5, #1]
   d5a60:	6868      	ldr	r0, [r5, #4]
   d5a62:	f001 f9d5 	bl	d6e10 <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d5a66:	6868      	ldr	r0, [r5, #4]
   d5a68:	6803      	ldr	r3, [r0, #0]
   d5a6a:	695b      	ldr	r3, [r3, #20]
   d5a6c:	4798      	blx	r3
   d5a6e:	4606      	mov	r6, r0
   d5a70:	6868      	ldr	r0, [r5, #4]
   d5a72:	6803      	ldr	r3, [r0, #0]
   d5a74:	695b      	ldr	r3, [r3, #20]
   d5a76:	4798      	blx	r3
   d5a78:	4604      	mov	r4, r0
  m_i2c.endTransmission();

  return (float)level / 1.2f; // convert to lux
   d5a7a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5a7e:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   d5a80:	b2a4      	uxth	r4, r4
float BH1750::get_light_level()
{
  m_i2c.beginTransmission(m_i2c_addr);
  m_i2c.requestFrom(m_i2c_addr, 2);
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
  m_i2c.endTransmission();
   d5a82:	f001 f9d3 	bl	d6e2c <_ZN7TwoWire15endTransmissionEv>

  return (float)level / 1.2f; // convert to lux
   d5a86:	ee07 4a90 	vmov	s15, r4
   d5a8a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d5a8e:	eddf 7a02 	vldr	s15, [pc, #8]	; d5a98 <_ZN6BH175015get_light_levelEv+0x48>
   d5a92:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5a96:	bd70      	pop	{r4, r5, r6, pc}
   d5a98:	3f99999a 	.word	0x3f99999a

000d5a9c <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d5a9c:	7803      	ldrb	r3, [r0, #0]
   d5a9e:	2b23      	cmp	r3, #35	; 0x23
   d5aa0:	d004      	beq.n	d5aac <_ZN6BH175020wait_for_measurementEv+0x10>
   d5aa2:	2b13      	cmp	r3, #19
   d5aa4:	bf0c      	ite	eq
   d5aa6:	2018      	moveq	r0, #24
   d5aa8:	20b4      	movne	r0, #180	; 0xb4
   d5aaa:	e000      	b.n	d5aae <_ZN6BH175020wait_for_measurementEv+0x12>
   d5aac:	2018      	movs	r0, #24
         m_mode == continuous_low_res) ? 24 : 180); // max measurement time 24 for low res and 180 for high res
   d5aae:	f000 bc8f 	b.w	d63d0 <delay>

000d5ab2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
  return m_mode;
}

void BH1750::set_sensor_mode(SensMode _mode)
{
   d5ab2:	b538      	push	{r3, r4, r5, lr}
   d5ab4:	4604      	mov	r4, r0
   d5ab6:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d5ab8:	7841      	ldrb	r1, [r0, #1]
   d5aba:	6840      	ldr	r0, [r0, #4]
   d5abc:	f001 f9ab 	bl	d6e16 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d5ac0:	6860      	ldr	r0, [r4, #4]
   d5ac2:	6803      	ldr	r3, [r0, #0]
   d5ac4:	4629      	mov	r1, r5
   d5ac6:	689b      	ldr	r3, [r3, #8]
   d5ac8:	4798      	blx	r3
  m_i2c.endTransmission();
   d5aca:	6860      	ldr	r0, [r4, #4]
   d5acc:	f001 f9ae 	bl	d6e2c <_ZN7TwoWire15endTransmissionEv>

  m_mode = _mode;
   d5ad0:	7025      	strb	r5, [r4, #0]

  wait_for_measurement();
   d5ad2:	4620      	mov	r0, r4
}
   d5ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  m_i2c.write((uint8_t)_mode);
  m_i2c.endTransmission();

  m_mode = _mode;

  wait_for_measurement();
   d5ad8:	f7ff bfe0 	b.w	d5a9c <_ZN6BH175020wait_for_measurementEv>

000d5adc <_ZN6BH175023make_forced_measurementEv>:
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5adc:	b510      	push	{r4, lr}
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5ade:	7803      	ldrb	r3, [r0, #0]
   d5ae0:	f1a3 0220 	sub.w	r2, r3, #32
   d5ae4:	2a01      	cmp	r2, #1
  m_i2c.write(CMD_SET_MS_TIME_L | ((uint8_t)_time & 0x1f));
  m_i2c.endTransmission();
}

void BH1750::make_forced_measurement()
{
   d5ae6:	4604      	mov	r4, r0
  // If we are in forced mode, the BH sensor goes back to sleep after each
  // measurement and we need to set it to forced mode once at this point, so
  // it will take the next measurement and then return to sleep again.
  // In normal mode simply does new measurements periodically.

  if (m_mode == forced_mode_high_res  ||
   d5ae8:	d901      	bls.n	d5aee <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5aea:	2b23      	cmp	r3, #35	; 0x23
   d5aec:	d110      	bne.n	d5b10 <_ZN6BH175023make_forced_measurementEv+0x34>
      m_mode == forced_mode_low_res)
  {
    m_i2c.beginTransmission(m_i2c_addr);
   d5aee:	7861      	ldrb	r1, [r4, #1]
   d5af0:	6860      	ldr	r0, [r4, #4]
   d5af2:	f001 f990 	bl	d6e16 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d5af6:	6860      	ldr	r0, [r4, #4]
   d5af8:	7821      	ldrb	r1, [r4, #0]
   d5afa:	6803      	ldr	r3, [r0, #0]
   d5afc:	689b      	ldr	r3, [r3, #8]
   d5afe:	4798      	blx	r3
    m_i2c.endTransmission();
   d5b00:	6860      	ldr	r0, [r4, #4]
   d5b02:	f001 f993 	bl	d6e2c <_ZN7TwoWire15endTransmissionEv>

    wait_for_measurement();
   d5b06:	4620      	mov	r0, r4
  }
}
   d5b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    m_i2c.beginTransmission(m_i2c_addr);
    m_i2c.write((uint8_t)m_mode);
    m_i2c.endTransmission();

    wait_for_measurement();
   d5b0c:	f7ff bfc6 	b.w	d5a9c <_ZN6BH175020wait_for_measurementEv>
   d5b10:	bd10      	pop	{r4, pc}

000d5b12 <_GLOBAL__sub_I__ZN6BH1750C2EhR7TwoWire>:
   d5b12:	f000 b9af 	b.w	d5e74 <HAL_Pin_Map>

000d5b16 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5b16:	4770      	bx	lr

000d5b18 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5b18:	b538      	push	{r3, r4, r5, lr}
   d5b1a:	4605      	mov	r5, r0
   d5b1c:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5b1e:	f002 f941 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d5b22:	7829      	ldrb	r1, [r5, #0]
   d5b24:	f001 f977 	bl	d6e16 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5b28:	f002 f93c 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d5b2c:	0a21      	lsrs	r1, r4, #8
   d5b2e:	f7ff ff7b 	bl	d5a28 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5b32:	f002 f937 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d5b36:	b2e1      	uxtb	r1, r4
   d5b38:	f7ff ff76 	bl	d5a28 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5b3c:	f002 f932 	bl	d7da4 <_Z19__fetch_global_Wirev>
}
   d5b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d5b44:	f001 b972 	b.w	d6e2c <_ZN7TwoWire15endTransmissionEv>

000d5b48 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d5b48:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5b4a:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5b4e:	f7ff ffe3 	bl	d5b18 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d5b52:	200a      	movs	r0, #10
}
   d5b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d5b58:	f000 bc3a 	b.w	d63d0 <delay>

000d5b5c <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5b5c:	b538      	push	{r3, r4, r5, lr}
   d5b5e:	4604      	mov	r4, r0
   d5b60:	460d      	mov	r5, r1
  Wire.begin();
   d5b62:	f002 f91f 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d5b66:	f001 f91f 	bl	d6da8 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d5b6a:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d5b6c:	7025      	strb	r5, [r4, #0]
  reset();
   d5b6e:	f7ff ffeb 	bl	d5b48 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d5b72:	2001      	movs	r0, #1
   d5b74:	bd38      	pop	{r3, r4, r5, pc}

000d5b76 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d5b76:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d5b78:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d5b7a:	4291      	cmp	r1, r2
   d5b7c:	d00e      	beq.n	d5b9c <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d5b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5b82:	4058      	eors	r0, r3
   d5b84:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5b86:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5b8a:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d5b8e:	bf18      	it	ne
   d5b90:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5b94:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d5b96:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d5b98:	d1f5      	bne.n	d5b86 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5b9a:	e7ee      	b.n	d5b7a <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d5b9c:	4770      	bx	lr
	...

000d5ba0 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5ba2:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d5ba6:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d5ba8:	f7ff ffb6 	bl	d5b18 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d5bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5bb0:	f000 fc0e 	bl	d63d0 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d5bb4:	f002 f8f6 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d5bb8:	2206      	movs	r2, #6
   d5bba:	7821      	ldrb	r1, [r4, #0]
   d5bbc:	f001 f928 	bl	d6e10 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5bc0:	f002 f8f0 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d5bc4:	6803      	ldr	r3, [r0, #0]
   d5bc6:	691b      	ldr	r3, [r3, #16]
   d5bc8:	4798      	blx	r3
   d5bca:	2806      	cmp	r0, #6
   d5bcc:	d14a      	bne.n	d5c64 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d5bce:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d5bd0:	f002 f8e8 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d5bd4:	6803      	ldr	r3, [r0, #0]
   d5bd6:	695b      	ldr	r3, [r3, #20]
   d5bd8:	4798      	blx	r3
   d5bda:	f80d 0005 	strb.w	r0, [sp, r5]
   d5bde:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d5be0:	2d06      	cmp	r5, #6
   d5be2:	d1f5      	bne.n	d5bd0 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5be4:	2202      	movs	r2, #2
   d5be6:	4669      	mov	r1, sp
   d5be8:	4620      	mov	r0, r4
   d5bea:	f7ff ffc4 	bl	d5b76 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5bee:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d5bf2:	4285      	cmp	r5, r0
   d5bf4:	d136      	bne.n	d5c64 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5bf6:	2202      	movs	r2, #2
   d5bf8:	f10d 0103 	add.w	r1, sp, #3
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	f7ff ffba 	bl	d5b76 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5c02:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d5c06:	4285      	cmp	r5, r0
   d5c08:	d12c      	bne.n	d5c64 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5c0a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d5c0e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d5c12:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d5c16:	ba40      	rev16	r0, r0
   d5c18:	b280      	uxth	r0, r0
   d5c1a:	f002 fbbd 	bl	d8398 <__aeabi_ui2d>
  stemp *= 175;
   d5c1e:	a318      	add	r3, pc, #96	; (adr r3, d5c80 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5c20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c24:	f002 fc2e 	bl	d8484 <__aeabi_dmul>
  stemp /= 0xffff;
   d5c28:	a311      	add	r3, pc, #68	; (adr r3, d5c70 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c2e:	f002 fd53 	bl	d86d8 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d5c32:	2200      	movs	r2, #0
   d5c34:	4b10      	ldr	r3, [pc, #64]	; (d5c78 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d5c36:	f002 fa71 	bl	d811c <__aeabi_dsub>
   d5c3a:	f002 febd 	bl	d89b8 <__aeabi_d2f>
   d5c3e:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d5c40:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d5c44:	f002 fba8 	bl	d8398 <__aeabi_ui2d>
  shum *= 100;
   d5c48:	2200      	movs	r2, #0
   d5c4a:	4b0c      	ldr	r3, [pc, #48]	; (d5c7c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5c4c:	f002 fc1a 	bl	d8484 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d5c50:	a307      	add	r3, pc, #28	; (adr r3, d5c70 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5c52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c56:	f002 fd3f 	bl	d86d8 <__aeabi_ddiv>
   d5c5a:	f002 fead 	bl	d89b8 <__aeabi_d2f>
   d5c5e:	6060      	str	r0, [r4, #4]
  
  return true;
   d5c60:	2001      	movs	r0, #1
   d5c62:	e000      	b.n	d5c66 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d5c64:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d5c66:	b002      	add	sp, #8
   d5c68:	bd70      	pop	{r4, r5, r6, pc}
   d5c6a:	bf00      	nop
   d5c6c:	f3af 8000 	nop.w
   d5c70:	00000000 	.word	0x00000000
   d5c74:	40efffe0 	.word	0x40efffe0
   d5c78:	40468000 	.word	0x40468000
   d5c7c:	40590000 	.word	0x40590000
   d5c80:	00000000 	.word	0x00000000
   d5c84:	4065e000 	.word	0x4065e000

000d5c88 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d5c88:	b510      	push	{r4, lr}
   d5c8a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5c8c:	f7ff ff88 	bl	d5ba0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5c90:	b110      	cbz	r0, d5c98 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d5c92:	ed94 0a02 	vldr	s0, [r4, #8]
   d5c96:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d5c98:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5ca0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d5c9c:	bd10      	pop	{r4, pc}
   d5c9e:	bf00      	nop
   d5ca0:	7fc00000 	.word	0x7fc00000

000d5ca4 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d5ca4:	b510      	push	{r4, lr}
   d5ca6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5ca8:	f7ff ff7a 	bl	d5ba0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5cac:	b110      	cbz	r0, d5cb4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d5cae:	ed94 0a01 	vldr	s0, [r4, #4]
   d5cb2:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d5cb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5cbc <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d5cb8:	bd10      	pop	{r4, pc}
   d5cba:	bf00      	nop
   d5cbc:	7fc00000 	.word	0x7fc00000

000d5cc0 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d5cc0:	f000 b8d8 	b.w	d5e74 <HAL_Pin_Map>

000d5cc4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <cellular_signal+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030274 	.word	0x00030274

000d5cd4 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <cellular_command+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030274 	.word	0x00030274

000d5ce4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <os_thread_is_current+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	689b      	ldr	r3, [r3, #8]
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030248 	.word	0x00030248

000d5cf4 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <os_thread_yield+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	68db      	ldr	r3, [r3, #12]
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030248 	.word	0x00030248

000d5d04 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <os_thread_join+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	691b      	ldr	r3, [r3, #16]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030248 	.word	0x00030248

000d5d14 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <os_thread_cleanup+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	695b      	ldr	r3, [r3, #20]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030248 	.word	0x00030248

000d5d24 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <os_thread_scheduling+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	69db      	ldr	r3, [r3, #28]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030248 	.word	0x00030248

000d5d34 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <os_timer_create+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	6a1b      	ldr	r3, [r3, #32]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030248 	.word	0x00030248

000d5d44 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <os_timer_destroy+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030248 	.word	0x00030248

000d5d54 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <os_timer_get_id+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030248 	.word	0x00030248

000d5d64 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <os_timer_change+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030248 	.word	0x00030248

000d5d74 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <os_mutex_recursive_create+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030248 	.word	0x00030248

000d5d84 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <os_mutex_recursive_destroy+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030248 	.word	0x00030248

000d5d94 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <os_timer_set_id+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030248 	.word	0x00030248

000d5da4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <HAL_Feature_Set+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030234 	.word	0x00030234

000d5db4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <HAL_Core_System_Reset_Ex+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030234 	.word	0x00030234

000d5dc4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030234 	.word	0x00030234

000d5dd4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <HAL_RNG_GetRandomNumber+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	685b      	ldr	r3, [r3, #4]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030218 	.word	0x00030218

000d5de4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <HAL_Delay_Microseconds+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	68db      	ldr	r3, [r3, #12]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030218 	.word	0x00030218

000d5df4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	695b      	ldr	r3, [r3, #20]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030218 	.word	0x00030218

000d5e04 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <HAL_RTC_Get_UnixTime+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	69db      	ldr	r3, [r3, #28]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030218 	.word	0x00030218

000d5e14 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <HAL_EEPROM_Init+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030218 	.word	0x00030218

000d5e24 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <HAL_EEPROM_Read+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030218 	.word	0x00030218

000d5e34 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <HAL_EEPROM_Get+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030218 	.word	0x00030218

000d5e44 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <HAL_EEPROM_Put+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	00030218 	.word	0x00030218

000d5e54 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <HAL_RTC_Time_Is_Valid+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030218 	.word	0x00030218

000d5e64 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <hal_timer_millis+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030218 	.word	0x00030218

000d5e74 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <HAL_Pin_Map+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	681b      	ldr	r3, [r3, #0]
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	0003022c 	.word	0x0003022c

000d5e84 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <HAL_Validate_Pin_Function+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	685b      	ldr	r3, [r3, #4]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	0003022c 	.word	0x0003022c

000d5e94 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <HAL_Pin_Mode+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	689b      	ldr	r3, [r3, #8]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	0003022c 	.word	0x0003022c

000d5ea4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <HAL_Get_Pin_Mode+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	68db      	ldr	r3, [r3, #12]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	0003022c 	.word	0x0003022c

000d5eb4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <HAL_GPIO_Write+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	691b      	ldr	r3, [r3, #16]
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	0003022c 	.word	0x0003022c

000d5ec4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <HAL_GPIO_Read+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	695b      	ldr	r3, [r3, #20]
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	0003022c 	.word	0x0003022c

000d5ed4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <HAL_ADC_Read+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	0003022c 	.word	0x0003022c

000d5ee4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <HAL_I2C_Begin+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	68db      	ldr	r3, [r3, #12]
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	00030228 	.word	0x00030228

000d5ef4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <HAL_I2C_Begin_Transmission+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	699b      	ldr	r3, [r3, #24]
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030228 	.word	0x00030228

000d5f04 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <HAL_I2C_End_Transmission+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	69db      	ldr	r3, [r3, #28]
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030228 	.word	0x00030228

000d5f14 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <HAL_I2C_Write_Data+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	6a1b      	ldr	r3, [r3, #32]
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	00030228 	.word	0x00030228

000d5f24 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <HAL_I2C_Available_Data+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	00030228 	.word	0x00030228

000d5f34 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <HAL_I2C_Read_Data+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	00030228 	.word	0x00030228

000d5f44 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <HAL_I2C_Peek_Data+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	00030228 	.word	0x00030228

000d5f54 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <HAL_I2C_Flush_Data+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	00030228 	.word	0x00030228

000d5f64 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <HAL_I2C_Is_Enabled+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	00030228 	.word	0x00030228

000d5f74 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <HAL_I2C_Init+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	00030228 	.word	0x00030228

000d5f84 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <HAL_I2C_Acquire+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	00030228 	.word	0x00030228

000d5f94 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <HAL_I2C_Release+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	00030228 	.word	0x00030228

000d5fa4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <HAL_I2C_Request_Data_Ex+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	00030228 	.word	0x00030228

000d5fb4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <inet_inet_ntop+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	695b      	ldr	r3, [r3, #20]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	00030264 	.word	0x00030264

000d5fc4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <netdb_freeaddrinfo+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	689b      	ldr	r3, [r3, #8]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	00030268 	.word	0x00030268

000d5fd4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <netdb_getaddrinfo+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	68db      	ldr	r3, [r3, #12]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	00030268 	.word	0x00030268

000d5fe4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <HAL_SPI_Init+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	69db      	ldr	r3, [r3, #28]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	00030230 	.word	0x00030230

000d5ff4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <HAL_SPI_Is_Enabled+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	6a1b      	ldr	r3, [r3, #32]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	00030230 	.word	0x00030230

000d6004 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <HAL_USART_Init+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	681b      	ldr	r3, [r3, #0]
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	0003023c 	.word	0x0003023c

000d6014 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <HAL_USART_Write_Data+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	68db      	ldr	r3, [r3, #12]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	0003023c 	.word	0x0003023c

000d6024 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <HAL_USART_Available_Data+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	691b      	ldr	r3, [r3, #16]
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	0003023c 	.word	0x0003023c

000d6034 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <HAL_USART_Read_Data+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	695b      	ldr	r3, [r3, #20]
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	0003023c 	.word	0x0003023c

000d6044 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <HAL_USART_Peek_Data+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	699b      	ldr	r3, [r3, #24]
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	0003023c 	.word	0x0003023c

000d6054 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <HAL_USART_Flush_Data+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	69db      	ldr	r3, [r3, #28]
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	0003023c 	.word	0x0003023c

000d6064 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <HAL_USART_Is_Enabled+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	6a1b      	ldr	r3, [r3, #32]
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	0003023c 	.word	0x0003023c

000d6074 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <HAL_USART_Available_Data_For_Write+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	0003023c 	.word	0x0003023c

000d6084 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <HAL_USB_USART_Init+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	681b      	ldr	r3, [r3, #0]
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	0003024c 	.word	0x0003024c

000d6094 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <HAL_USB_USART_Available_Data+0xc>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	691b      	ldr	r3, [r3, #16]
   d609c:	9301      	str	r3, [sp, #4]
   d609e:	bd08      	pop	{r3, pc}
   d60a0:	0003024c 	.word	0x0003024c

000d60a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b02      	ldr	r3, [pc, #8]	; (d60b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	695b      	ldr	r3, [r3, #20]
   d60ac:	9301      	str	r3, [sp, #4]
   d60ae:	bd08      	pop	{r3, pc}
   d60b0:	0003024c 	.word	0x0003024c

000d60b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d60b4:	b508      	push	{r3, lr}
   d60b6:	4b02      	ldr	r3, [pc, #8]	; (d60c0 <HAL_USB_USART_Receive_Data+0xc>)
   d60b8:	681b      	ldr	r3, [r3, #0]
   d60ba:	699b      	ldr	r3, [r3, #24]
   d60bc:	9301      	str	r3, [sp, #4]
   d60be:	bd08      	pop	{r3, pc}
   d60c0:	0003024c 	.word	0x0003024c

000d60c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d60c4:	b508      	push	{r3, lr}
   d60c6:	4b02      	ldr	r3, [pc, #8]	; (d60d0 <HAL_USB_USART_Send_Data+0xc>)
   d60c8:	681b      	ldr	r3, [r3, #0]
   d60ca:	69db      	ldr	r3, [r3, #28]
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	bd08      	pop	{r3, pc}
   d60d0:	0003024c 	.word	0x0003024c

000d60d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d60d4:	b508      	push	{r3, lr}
   d60d6:	4b02      	ldr	r3, [pc, #8]	; (d60e0 <HAL_USB_USART_Flush_Data+0xc>)
   d60d8:	681b      	ldr	r3, [r3, #0]
   d60da:	6a1b      	ldr	r3, [r3, #32]
   d60dc:	9301      	str	r3, [sp, #4]
   d60de:	bd08      	pop	{r3, pc}
   d60e0:	0003024c 	.word	0x0003024c

000d60e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d60e4:	b508      	push	{r3, lr}
   d60e6:	4b02      	ldr	r3, [pc, #8]	; (d60f0 <panic_+0xc>)
   d60e8:	681b      	ldr	r3, [r3, #0]
   d60ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d60ec:	9301      	str	r3, [sp, #4]
   d60ee:	bd08      	pop	{r3, pc}
   d60f0:	00030260 	.word	0x00030260

000d60f4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d60f4:	b508      	push	{r3, lr}
   d60f6:	4b02      	ldr	r3, [pc, #8]	; (d6100 <log_message+0xc>)
   d60f8:	681b      	ldr	r3, [r3, #0]
   d60fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d60fc:	9301      	str	r3, [sp, #4]
   d60fe:	bd08      	pop	{r3, pc}
   d6100:	00030260 	.word	0x00030260

000d6104 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6104:	b508      	push	{r3, lr}
   d6106:	4b03      	ldr	r3, [pc, #12]	; (d6114 <diag_get_source+0x10>)
   d6108:	681b      	ldr	r3, [r3, #0]
   d610a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d610e:	9301      	str	r3, [sp, #4]
   d6110:	bd08      	pop	{r3, pc}
   d6112:	0000      	.short	0x0000
   d6114:	00030260 	.word	0x00030260

000d6118 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <system_mode+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	681b      	ldr	r3, [r3, #0]
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030220 	.word	0x00030220

000d6128 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <set_system_mode+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	685b      	ldr	r3, [r3, #4]
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030220 	.word	0x00030220

000d6138 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <system_delay_ms+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	695b      	ldr	r3, [r3, #20]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030220 	.word	0x00030220

000d6148 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <system_sleep+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	699b      	ldr	r3, [r3, #24]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030220 	.word	0x00030220

000d6158 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <system_thread_set_state+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030220 	.word	0x00030220

000d6168 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <application_thread_current+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030220 	.word	0x00030220

000d6178 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <application_thread_invoke+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	00030220 	.word	0x00030220

000d6188 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <system_thread_get_state+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030220 	.word	0x00030220

000d6198 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b03      	ldr	r3, [pc, #12]	; (d61a8 <system_ctrl_set_app_request_handler+0x10>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d61a2:	9301      	str	r3, [sp, #4]
   d61a4:	bd08      	pop	{r3, pc}
   d61a6:	0000      	.short	0x0000
   d61a8:	00030220 	.word	0x00030220

000d61ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b03      	ldr	r3, [pc, #12]	; (d61bc <system_ctrl_set_result+0x10>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d61b6:	9301      	str	r3, [sp, #4]
   d61b8:	bd08      	pop	{r3, pc}
   d61ba:	0000      	.short	0x0000
   d61bc:	00030220 	.word	0x00030220

000d61c0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b03      	ldr	r3, [pc, #12]	; (d61d0 <system_power_management_set_config+0x10>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d61ca:	9301      	str	r3, [sp, #4]
   d61cc:	bd08      	pop	{r3, pc}
   d61ce:	0000      	.short	0x0000
   d61d0:	00030220 	.word	0x00030220

000d61d4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d61d4:	b508      	push	{r3, lr}
   d61d6:	4b03      	ldr	r3, [pc, #12]	; (d61e4 <system_sleep_ext+0x10>)
   d61d8:	681b      	ldr	r3, [r3, #0]
   d61da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d61de:	9301      	str	r3, [sp, #4]
   d61e0:	bd08      	pop	{r3, pc}
   d61e2:	0000      	.short	0x0000
   d61e4:	00030220 	.word	0x00030220

000d61e8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <spark_variable+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	681b      	ldr	r3, [r3, #0]
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	00030244 	.word	0x00030244

000d61f8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <spark_function+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	685b      	ldr	r3, [r3, #4]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	00030244 	.word	0x00030244

000d6208 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <spark_process+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	689b      	ldr	r3, [r3, #8]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030244 	.word	0x00030244

000d6218 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <spark_cloud_flag_connect+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	68db      	ldr	r3, [r3, #12]
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030244 	.word	0x00030244

000d6228 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <spark_cloud_flag_disconnect+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	691b      	ldr	r3, [r3, #16]
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030244 	.word	0x00030244

000d6238 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <spark_cloud_flag_connected+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	695b      	ldr	r3, [r3, #20]
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030244 	.word	0x00030244

000d6248 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <spark_deviceID+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	69db      	ldr	r3, [r3, #28]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030244 	.word	0x00030244

000d6258 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <spark_send_event+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	6a1b      	ldr	r3, [r3, #32]
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030244 	.word	0x00030244

000d6268 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <spark_subscribe+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030244 	.word	0x00030244

000d6278 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <spark_sync_time+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030244 	.word	0x00030244

000d6288 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <spark_sync_time_pending+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	00030244 	.word	0x00030244

000d6298 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	00030244 	.word	0x00030244

000d62a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <network_connect+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	685b      	ldr	r3, [r3, #4]
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	00030240 	.word	0x00030240

000d62b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <network_connecting+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	689b      	ldr	r3, [r3, #8]
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	00030240 	.word	0x00030240

000d62c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <network_disconnect+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	68db      	ldr	r3, [r3, #12]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	00030240 	.word	0x00030240

000d62d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <network_ready+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	691b      	ldr	r3, [r3, #16]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	00030240 	.word	0x00030240

000d62e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <network_on+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	695b      	ldr	r3, [r3, #20]
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	00030240 	.word	0x00030240

000d62f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <network_off+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	699b      	ldr	r3, [r3, #24]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	00030240 	.word	0x00030240

000d6308 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <network_listen+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	69db      	ldr	r3, [r3, #28]
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	00030240 	.word	0x00030240

000d6318 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <network_listening+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	6a1b      	ldr	r3, [r3, #32]
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	00030240 	.word	0x00030240

000d6328 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <network_set_listen_timeout+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	00030240 	.word	0x00030240

000d6338 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <network_get_listen_timeout+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	00030240 	.word	0x00030240

000d6348 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <malloc+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	681b      	ldr	r3, [r3, #0]
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	0003021c 	.word	0x0003021c

000d6358 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6358:	b508      	push	{r3, lr}
   d635a:	4b02      	ldr	r3, [pc, #8]	; (d6364 <free+0xc>)
   d635c:	681b      	ldr	r3, [r3, #0]
   d635e:	685b      	ldr	r3, [r3, #4]
   d6360:	9301      	str	r3, [sp, #4]
   d6362:	bd08      	pop	{r3, pc}
   d6364:	0003021c 	.word	0x0003021c

000d6368 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6368:	b508      	push	{r3, lr}
   d636a:	4b02      	ldr	r3, [pc, #8]	; (d6374 <realloc+0xc>)
   d636c:	681b      	ldr	r3, [r3, #0]
   d636e:	689b      	ldr	r3, [r3, #8]
   d6370:	9301      	str	r3, [sp, #4]
   d6372:	bd08      	pop	{r3, pc}
   d6374:	0003021c 	.word	0x0003021c

000d6378 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b02      	ldr	r3, [pc, #8]	; (d6384 <siscanf+0xc>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	699b      	ldr	r3, [r3, #24]
   d6380:	9301      	str	r3, [sp, #4]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	0003021c 	.word	0x0003021c

000d6388 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6388:	b508      	push	{r3, lr}
   d638a:	4b02      	ldr	r3, [pc, #8]	; (d6394 <snprintf+0xc>)
   d638c:	681b      	ldr	r3, [r3, #0]
   d638e:	69db      	ldr	r3, [r3, #28]
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	bd08      	pop	{r3, pc}
   d6394:	0003021c 	.word	0x0003021c

000d6398 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6398:	b508      	push	{r3, lr}
   d639a:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <abort+0xc>)
   d639c:	681b      	ldr	r3, [r3, #0]
   d639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63a0:	9301      	str	r3, [sp, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	0003021c 	.word	0x0003021c

000d63a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d63a8:	b508      	push	{r3, lr}
   d63aa:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <_malloc_r+0xc>)
   d63ac:	681b      	ldr	r3, [r3, #0]
   d63ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63b0:	9301      	str	r3, [sp, #4]
   d63b2:	bd08      	pop	{r3, pc}
   d63b4:	0003021c 	.word	0x0003021c

000d63b8 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d63b8:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d63ba:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d63bc:	d007      	beq.n	d63ce <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d63be:	9d03      	ldr	r5, [sp, #12]
   d63c0:	1a44      	subs	r4, r0, r1
   d63c2:	1aed      	subs	r5, r5, r3
   d63c4:	436c      	muls	r4, r5
   d63c6:	1a52      	subs	r2, r2, r1
   d63c8:	fb94 f4f2 	sdiv	r4, r4, r2
   d63cc:	18e0      	adds	r0, r4, r3
}
   d63ce:	bd30      	pop	{r4, r5, pc}

000d63d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d63d0:	2100      	movs	r1, #0
   d63d2:	f7ff beb1 	b.w	d6138 <system_delay_ms>

000d63d6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d63d6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d63d8:	6883      	ldr	r3, [r0, #8]
   d63da:	4604      	mov	r4, r0
   d63dc:	b90b      	cbnz	r3, d63e2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d63de:	f001 fd4e 	bl	d7e7e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d63e2:	68c3      	ldr	r3, [r0, #12]
   d63e4:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d63e6:	68a3      	ldr	r3, [r4, #8]
   d63e8:	b11b      	cbz	r3, d63f2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63ea:	2203      	movs	r2, #3
   d63ec:	4621      	mov	r1, r4
   d63ee:	4620      	mov	r0, r4
   d63f0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d63f2:	4620      	mov	r0, r4
   d63f4:	2110      	movs	r1, #16
}
   d63f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d63fa:	f001 bd24 	b.w	d7e46 <_ZdlPvj>

000d63fe <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d63fe:	b510      	push	{r4, lr}
   d6400:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6402:	6800      	ldr	r0, [r0, #0]
   d6404:	b108      	cbz	r0, d640a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6406:	f7ff fcbd 	bl	d5d84 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d640a:	4620      	mov	r0, r4
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d640e:	680b      	ldr	r3, [r1, #0]
   d6410:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6412:	b113      	cbz	r3, d641a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6414:	685a      	ldr	r2, [r3, #4]
   d6416:	3201      	adds	r2, #1
   d6418:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d641a:	4770      	bx	lr

000d641c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d641c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d641e:	4c06      	ldr	r4, [pc, #24]	; (d6438 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6420:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6422:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6424:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6426:	f7ff fca5 	bl	d5d74 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d642a:	4620      	mov	r0, r4
   d642c:	4a03      	ldr	r2, [pc, #12]	; (d643c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d642e:	4904      	ldr	r1, [pc, #16]	; (d6440 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6434:	f001 bd02 	b.w	d7e3c <__aeabi_atexit>
   d6438:	2003e330 	.word	0x2003e330
   d643c:	2003e1c0 	.word	0x2003e1c0
   d6440:	000d63ff 	.word	0x000d63ff

000d6444 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6444:	2200      	movs	r2, #0
   d6446:	4611      	mov	r1, r2
   d6448:	6840      	ldr	r0, [r0, #4]
   d644a:	f7ff bf45 	b.w	d62d8 <network_ready>

000d644e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d644e:	2200      	movs	r2, #0
   d6450:	4611      	mov	r1, r2
   d6452:	6840      	ldr	r0, [r0, #4]
   d6454:	f7ff bf60 	b.w	d6318 <network_listening>

000d6458 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6458:	2200      	movs	r2, #0
   d645a:	4611      	mov	r1, r2
   d645c:	6840      	ldr	r0, [r0, #4]
   d645e:	f7ff bf6b 	b.w	d6338 <network_get_listen_timeout>

000d6462 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6462:	2200      	movs	r2, #0
   d6464:	6840      	ldr	r0, [r0, #4]
   d6466:	f7ff bf5f 	b.w	d6328 <network_set_listen_timeout>

000d646a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d646a:	2200      	movs	r2, #0
   d646c:	f081 0101 	eor.w	r1, r1, #1
   d6470:	6840      	ldr	r0, [r0, #4]
   d6472:	f7ff bf49 	b.w	d6308 <network_listen>

000d6476 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6476:	2300      	movs	r3, #0
   d6478:	461a      	mov	r2, r3
   d647a:	4619      	mov	r1, r3
   d647c:	6840      	ldr	r0, [r0, #4]
   d647e:	f7ff bf3b 	b.w	d62f8 <network_off>

000d6482 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6482:	2300      	movs	r3, #0
   d6484:	461a      	mov	r2, r3
   d6486:	4619      	mov	r1, r3
   d6488:	6840      	ldr	r0, [r0, #4]
   d648a:	f7ff bf2d 	b.w	d62e8 <network_on>

000d648e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d648e:	2200      	movs	r2, #0
   d6490:	4611      	mov	r1, r2
   d6492:	6840      	ldr	r0, [r0, #4]
   d6494:	f7ff bf10 	b.w	d62b8 <network_connecting>

000d6498 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6498:	2200      	movs	r2, #0
   d649a:	2102      	movs	r1, #2
   d649c:	6840      	ldr	r0, [r0, #4]
   d649e:	f7ff bf13 	b.w	d62c8 <network_disconnect>

000d64a2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64a2:	2300      	movs	r3, #0
   d64a4:	461a      	mov	r2, r3
   d64a6:	6840      	ldr	r0, [r0, #4]
   d64a8:	f7ff befe 	b.w	d62a8 <network_connect>

000d64ac <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d64ac:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d64ae:	4b1b      	ldr	r3, [pc, #108]	; (d651c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d64b0:	6003      	str	r3, [r0, #0]
   d64b2:	2500      	movs	r5, #0
   d64b4:	460f      	mov	r7, r1
   d64b6:	3328      	adds	r3, #40	; 0x28
   d64b8:	2618      	movs	r6, #24
   d64ba:	b089      	sub	sp, #36	; 0x24
   d64bc:	6043      	str	r3, [r0, #4]
   d64be:	6085      	str	r5, [r0, #8]
   d64c0:	60c5      	str	r5, [r0, #12]
   d64c2:	4632      	mov	r2, r6
   d64c4:	4629      	mov	r1, r5
   d64c6:	4604      	mov	r4, r0
   d64c8:	3010      	adds	r0, #16
   d64ca:	f002 fbda 	bl	d8c82 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d64ce:	462a      	mov	r2, r5
   d64d0:	4629      	mov	r1, r5
   d64d2:	6878      	ldr	r0, [r7, #4]
   d64d4:	f7ff ff00 	bl	d62d8 <network_ready>
   d64d8:	b908      	cbnz	r0, d64de <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d64da:	60a0      	str	r0, [r4, #8]
            return sig;
   d64dc:	e01b      	b.n	d6516 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d64de:	4629      	mov	r1, r5
   d64e0:	4632      	mov	r2, r6
   d64e2:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d64e4:	9500      	str	r5, [sp, #0]
   d64e6:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d64e8:	f002 fbcb 	bl	d8c82 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d64ec:	a902      	add	r1, sp, #8
   d64ee:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d64f0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d64f4:	f7ff fbe6 	bl	d5cc4 <cellular_signal>
   d64f8:	b110      	cbz	r0, d6500 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d64fa:	2301      	movs	r3, #1
   d64fc:	60a3      	str	r3, [r4, #8]
            return sig;
   d64fe:	e00a      	b.n	d6516 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6500:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6502:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6504:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6506:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6508:	b90b      	cbnz	r3, d650e <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d650a:	2302      	movs	r3, #2
   d650c:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d650e:	a902      	add	r1, sp, #8
   d6510:	4620      	mov	r0, r4
   d6512:	f000 f889 	bl	d6628 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6516:	4620      	mov	r0, r4
   d6518:	b009      	add	sp, #36	; 0x24
   d651a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d651c:	000d9c3c 	.word	0x000d9c3c

000d6520 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6520:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6522:	4c08      	ldr	r4, [pc, #32]	; (d6544 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6524:	2528      	movs	r5, #40	; 0x28
   d6526:	462a      	mov	r2, r5
   d6528:	2100      	movs	r1, #0
   d652a:	4620      	mov	r0, r4
   d652c:	f002 fba9 	bl	d8c82 <memset>
        cid = -1;
   d6530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6534:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6536:	4b04      	ldr	r3, [pc, #16]	; (d6548 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6538:	8025      	strh	r5, [r4, #0]
   d653a:	2204      	movs	r2, #4
   d653c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d653e:	4a03      	ldr	r2, [pc, #12]	; (d654c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6540:	601a      	str	r2, [r3, #0]
   d6542:	bd38      	pop	{r3, r4, r5, pc}
   d6544:	2003e33c 	.word	0x2003e33c
   d6548:	2003e334 	.word	0x2003e334
   d654c:	000d9c08 	.word	0x000d9c08

000d6550 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d6550:	4770      	bx	lr

000d6552 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d6552:	7d00      	ldrb	r0, [r0, #20]
   d6554:	4770      	bx	lr
	...

000d6558 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d6558:	7d03      	ldrb	r3, [r0, #20]
   d655a:	b11b      	cbz	r3, d6564 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d655c:	6983      	ldr	r3, [r0, #24]
   d655e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6562:	d102      	bne.n	d656a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d6564:	ed9f 0a05 	vldr	s0, [pc, #20]	; d657c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d6568:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d656a:	ee07 3a90 	vmov	s15, r3
   d656e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6580 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d6572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6576:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d657a:	4770      	bx	lr
   d657c:	00000000 	.word	0x00000000
   d6580:	42c80000 	.word	0x42c80000

000d6584 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6584:	7d03      	ldrb	r3, [r0, #20]
   d6586:	b11b      	cbz	r3, d6590 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d6588:	6a03      	ldr	r3, [r0, #32]
   d658a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d658e:	d102      	bne.n	d6596 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d6590:	ed9f 0a05 	vldr	s0, [pc, #20]	; d65a8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6594:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d6596:	ee07 3a90 	vmov	s15, r3
   d659a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d65ac <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d659e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d65a2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d65a6:	4770      	bx	lr
   d65a8:	00000000 	.word	0x00000000
   d65ac:	42c80000 	.word	0x42c80000

000d65b0 <_ZN14CellularSignalD0Ev>:
   d65b0:	b510      	push	{r4, lr}
   d65b2:	2128      	movs	r1, #40	; 0x28
   d65b4:	4604      	mov	r4, r0
   d65b6:	f001 fc46 	bl	d7e46 <_ZdlPvj>
   d65ba:	4620      	mov	r0, r4
   d65bc:	bd10      	pop	{r4, pc}
	...

000d65c0 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d65c0:	7d03      	ldrb	r3, [r0, #20]
   d65c2:	b17b      	cbz	r3, d65e4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d65c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d65c6:	2b00      	cmp	r3, #0
   d65c8:	db0c      	blt.n	d65e4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d65ca:	ee07 3a90 	vmov	s15, r3
   d65ce:	eddf 6a07 	vldr	s13, [pc, #28]	; d65ec <_ZNK14CellularSignal10getQualityEv+0x2c>
   d65d2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d65f0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d65d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d65da:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d65de:	ee27 0a80 	vmul.f32	s0, s15, s0
   d65e2:	4770      	bx	lr
    }

    return -1.0f;
   d65e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d65e8:	4770      	bx	lr
   d65ea:	bf00      	nop
   d65ec:	477fff00 	.word	0x477fff00
   d65f0:	42c80000 	.word	0x42c80000

000d65f4 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d65f4:	7d03      	ldrb	r3, [r0, #20]
   d65f6:	b17b      	cbz	r3, d6618 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d65f8:	69c3      	ldr	r3, [r0, #28]
   d65fa:	2b00      	cmp	r3, #0
   d65fc:	db0c      	blt.n	d6618 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d65fe:	ee07 3a90 	vmov	s15, r3
   d6602:	eddf 6a07 	vldr	s13, [pc, #28]	; d6620 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d6606:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6624 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d660a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d660e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6612:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6616:	4770      	bx	lr
    }

    return -1.0f;
   d6618:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d661c:	4770      	bx	lr
   d661e:	bf00      	nop
   d6620:	477fff00 	.word	0x477fff00
   d6624:	42c80000 	.word	0x42c80000

000d6628 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d6628:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d662a:	460d      	mov	r5, r1
   d662c:	f100 0410 	add.w	r4, r0, #16
   d6630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6634:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6638:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d663c:	2001      	movs	r0, #1
   d663e:	bd30      	pop	{r4, r5, pc}

000d6640 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d6640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6644:	4607      	mov	r7, r0
   d6646:	460c      	mov	r4, r1
{
    if (base == 0) {
   d6648:	4615      	mov	r5, r2
   d664a:	b92a      	cbnz	r2, d6658 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d664c:	6803      	ldr	r3, [r0, #0]
   d664e:	b2c9      	uxtb	r1, r1
   d6650:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d6652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d6656:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6658:	2900      	cmp	r1, #0
   d665a:	da07      	bge.n	d666c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d665c:	2a0a      	cmp	r2, #10
   d665e:	d105      	bne.n	d666c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d6660:	212d      	movs	r1, #45	; 0x2d
   d6662:	f000 fea3 	bl	d73ac <_ZN5Print5printEc>
            val = -n;
   d6666:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6668:	4606      	mov	r6, r0
            val = -n;
   d666a:	e001      	b.n	d6670 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d666c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d666e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6670:	b2ea      	uxtb	r2, r5
   d6672:	4638      	mov	r0, r7
   d6674:	f000 feb3 	bl	d73de <_ZN5Print11printNumberEmh>
    }
}
   d6678:	4430      	add	r0, r6
   d667a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d667e <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d667e:	b570      	push	{r4, r5, r6, lr}
   d6680:	460d      	mov	r5, r1
   d6682:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6684:	220a      	movs	r2, #10
   d6686:	6881      	ldr	r1, [r0, #8]
   d6688:	4628      	mov	r0, r5
   d668a:	f7ff ffd9 	bl	d6640 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d668e:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6690:	4604      	mov	r4, r0
    n += p.print(',');
   d6692:	4628      	mov	r0, r5
   d6694:	f000 fe8a 	bl	d73ac <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d6698:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d669a:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d669c:	68f1      	ldr	r1, [r6, #12]
   d669e:	4628      	mov	r0, r5
   d66a0:	f7ff ffce 	bl	d6640 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d66a4:	4420      	add	r0, r4
   d66a6:	bd70      	pop	{r4, r5, r6, pc}

000d66a8 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d66a8:	f1a0 0004 	sub.w	r0, r0, #4
   d66ac:	f7ff bfe7 	b.w	d667e <_ZNK14CellularSignal7printToER5Print>

000d66b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d66b0:	4770      	bx	lr

000d66b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d66b2:	2000      	movs	r0, #0
   d66b4:	4770      	bx	lr

000d66b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d66b6:	b510      	push	{r4, lr}
   d66b8:	2110      	movs	r1, #16
   d66ba:	4604      	mov	r4, r0
   d66bc:	f001 fbc3 	bl	d7e46 <_ZdlPvj>
   d66c0:	4620      	mov	r0, r4
   d66c2:	bd10      	pop	{r4, pc}

000d66c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d66c4:	b508      	push	{r3, lr}
      { delete this; }
   d66c6:	b108      	cbz	r0, d66cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d66c8:	f7ff fff5 	bl	d66b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d66cc:	bd08      	pop	{r3, pc}

000d66ce <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d66ce:	2200      	movs	r2, #0
   d66d0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d66d2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d66d4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d66d8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d66da:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d66de:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d66e0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66e2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d66e4:	680c      	ldr	r4, [r1, #0]
   d66e6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d66e8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d66ea:	bd10      	pop	{r4, pc}

000d66ec <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d66ec:	b510      	push	{r4, lr}
   d66ee:	4604      	mov	r4, r0
    free((void*)msg_);
   d66f0:	6800      	ldr	r0, [r0, #0]
   d66f2:	f7ff fe31 	bl	d6358 <free>
}
   d66f6:	4620      	mov	r0, r4
   d66f8:	bd10      	pop	{r4, pc}

000d66fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d66fa:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d66fc:	68c4      	ldr	r4, [r0, #12]
   d66fe:	b1f4      	cbz	r4, d673e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6700:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6702:	2b02      	cmp	r3, #2
   d6704:	d103      	bne.n	d670e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6706:	f104 000c 	add.w	r0, r4, #12
   d670a:	f7ff ffef 	bl	d66ec <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d670e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6710:	b135      	cbz	r5, d6720 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6712:	4628      	mov	r0, r5
   d6714:	f7fd fd41 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d6718:	2110      	movs	r1, #16
   d671a:	4628      	mov	r0, r5
   d671c:	f001 fb93 	bl	d7e46 <_ZdlPvj>
   d6720:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6722:	b135      	cbz	r5, d6732 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6724:	4628      	mov	r0, r5
   d6726:	f7fd fd38 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d672a:	2110      	movs	r1, #16
   d672c:	4628      	mov	r0, r5
   d672e:	f001 fb8a 	bl	d7e46 <_ZdlPvj>
   d6732:	4620      	mov	r0, r4
   d6734:	2114      	movs	r1, #20
   d6736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d673a:	f001 bb84 	b.w	d7e46 <_ZdlPvj>
   d673e:	bd38      	pop	{r3, r4, r5, pc}

000d6740 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6740:	b510      	push	{r4, lr}
   d6742:	b088      	sub	sp, #32
   d6744:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6746:	4668      	mov	r0, sp
   d6748:	f000 fed2 	bl	d74f0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d674c:	4669      	mov	r1, sp
   d674e:	a804      	add	r0, sp, #16
   d6750:	f000 fef0 	bl	d7534 <_ZN6StringC1ERKS_>
   d6754:	a804      	add	r0, sp, #16
   d6756:	47a0      	blx	r4
   d6758:	4604      	mov	r4, r0
   d675a:	a804      	add	r0, sp, #16
   d675c:	f000 fe81 	bl	d7462 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6760:	4668      	mov	r0, sp
   d6762:	f000 fe7e 	bl	d7462 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d6766:	4620      	mov	r0, r4
   d6768:	b008      	add	sp, #32
   d676a:	bd10      	pop	{r4, pc}

000d676c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d676c:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d676e:	2410      	movs	r4, #16
   d6770:	b085      	sub	sp, #20
   d6772:	4607      	mov	r7, r0
   d6774:	460e      	mov	r6, r1
   d6776:	4615      	mov	r5, r2
   d6778:	2100      	movs	r1, #0
   d677a:	4622      	mov	r2, r4
   d677c:	4668      	mov	r0, sp
   d677e:	f002 fa80 	bl	d8c82 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6782:	2200      	movs	r2, #0
   d6784:	4669      	mov	r1, sp
   d6786:	4610      	mov	r0, r2
         size = sizeof(*this);
   d6788:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d678c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d678e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d6790:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6792:	f7ff fd31 	bl	d61f8 <spark_function>
}
   d6796:	b005      	add	sp, #20
   d6798:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d679a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d679a:	b513      	push	{r0, r1, r4, lr}
   d679c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d679e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d67a2:	2300      	movs	r3, #0
   d67a4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d67a6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d67a8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d67aa:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67ac:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d67ae:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d67b0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67b2:	f7fe f86d 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67b6:	4620      	mov	r0, r4
   d67b8:	b002      	add	sp, #8
   d67ba:	bd10      	pop	{r4, pc}

000d67bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d67bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d67be:	460c      	mov	r4, r1
   d67c0:	ad02      	add	r5, sp, #8
   d67c2:	f854 3b04 	ldr.w	r3, [r4], #4
   d67c6:	f845 3d08 	str.w	r3, [r5, #-8]!
   d67ca:	4606      	mov	r6, r0
   d67cc:	460f      	mov	r7, r1
   d67ce:	a801      	add	r0, sp, #4
   d67d0:	4621      	mov	r1, r4
   d67d2:	f7ff fe1c 	bl	d640e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d67d6:	4629      	mov	r1, r5
   d67d8:	4630      	mov	r0, r6
   d67da:	f7ff ffde 	bl	d679a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67de:	a801      	add	r0, sp, #4
   d67e0:	f7fe f856 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67e4:	4620      	mov	r0, r4
   d67e6:	f7fe f853 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d67ea:	4638      	mov	r0, r7
   d67ec:	2108      	movs	r1, #8
   d67ee:	f001 fb2a 	bl	d7e46 <_ZdlPvj>
        return p;
    }
   d67f2:	4630      	mov	r0, r6
   d67f4:	b003      	add	sp, #12
   d67f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d67f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d67f8:	b513      	push	{r0, r1, r4, lr}
   d67fa:	460b      	mov	r3, r1
   d67fc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67fe:	c803      	ldmia	r0, {r0, r1}
   d6800:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6804:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6808:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d680c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6810:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6814:	b002      	add	sp, #8
   d6816:	bd10      	pop	{r4, pc}

000d6818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6818:	b538      	push	{r3, r4, r5, lr}
   d681a:	2300      	movs	r3, #0
   d681c:	4604      	mov	r4, r0
   d681e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6820:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6822:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6824:	f7fd fc39 	bl	d409a <_Znwj>
   d6828:	b128      	cbz	r0, d6836 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d682a:	2301      	movs	r3, #1
   d682c:	6043      	str	r3, [r0, #4]
   d682e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6830:	4b02      	ldr	r3, [pc, #8]	; (d683c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6832:	6003      	str	r3, [r0, #0]
   d6834:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6836:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6838:	4620      	mov	r0, r4
   d683a:	bd38      	pop	{r3, r4, r5, pc}
   d683c:	000d9c70 	.word	0x000d9c70

000d6840 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6840:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6842:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6844:	b90a      	cbnz	r2, d684a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6846:	f001 fb1a 	bl	d7e7e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d684a:	68c3      	ldr	r3, [r0, #12]
    }
   d684c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6850:	4718      	bx	r3

000d6852 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6852:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6854:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6856:	f100 0110 	add.w	r1, r0, #16
   d685a:	f7ff fff1 	bl	d6840 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d685e:	bd08      	pop	{r3, pc}

000d6860 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6860:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6862:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6864:	b90a      	cbnz	r2, d686a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6866:	f001 fb0a 	bl	d7e7e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d686a:	68c3      	ldr	r3, [r0, #12]
    }
   d686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6870:	4718      	bx	r3

000d6872 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6872:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6874:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6876:	f100 0110 	add.w	r1, r0, #16
   d687a:	f7ff fff1 	bl	d6860 <_ZNKSt8functionIFvRKbEEclES1_>
   d687e:	bd08      	pop	{r3, pc}

000d6880 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6880:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6882:	2300      	movs	r3, #0
   d6884:	6083      	str	r3, [r0, #8]
   d6886:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6888:	4604      	mov	r4, r0
   d688a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d688c:	b12b      	cbz	r3, d689a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d688e:	2202      	movs	r2, #2
   d6890:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6892:	68eb      	ldr	r3, [r5, #12]
   d6894:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6896:	68ab      	ldr	r3, [r5, #8]
   d6898:	60a3      	str	r3, [r4, #8]
	}
    }
   d689a:	4620      	mov	r0, r4
   d689c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d68a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d68a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d68a2:	b089      	sub	sp, #36	; 0x24
   d68a4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d68a6:	4668      	mov	r0, sp
   d68a8:	f7ff ff11 	bl	d66ce <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d68ac:	2300      	movs	r3, #0
   d68ae:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d68b2:	f04f 0202 	mov.w	r2, #2
   d68b6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d68ba:	2b00      	cmp	r3, #0
   d68bc:	d103      	bne.n	d68c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d68be:	e8c4 2f41 	strexb	r1, r2, [r4]
   d68c2:	2900      	cmp	r1, #0
   d68c4:	d1f7      	bne.n	d68b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d68c6:	d002      	beq.n	d68ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d68c8:	f88d 3008 	strb.w	r3, [sp, #8]
   d68cc:	e063      	b.n	d6996 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d68ce:	f114 050c 	adds.w	r5, r4, #12
   d68d2:	d003      	beq.n	d68dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d68d4:	4669      	mov	r1, sp
   d68d6:	4628      	mov	r0, r5
   d68d8:	f7ff fef9 	bl	d66ce <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d68dc:	f3bf 8f5f 	dmb	sy
   d68e0:	2301      	movs	r3, #1
   d68e2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d68e4:	2000      	movs	r0, #0
   d68e6:	f104 0308 	add.w	r3, r4, #8
   d68ea:	f3bf 8f5f 	dmb	sy
   d68ee:	e853 6f00 	ldrex	r6, [r3]
   d68f2:	e843 0200 	strex	r2, r0, [r3]
   d68f6:	2a00      	cmp	r2, #0
   d68f8:	d1f9      	bne.n	d68ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d68fa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d68fe:	2e00      	cmp	r6, #0
   d6900:	d049      	beq.n	d6996 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6902:	f7ff fc31 	bl	d6168 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6906:	b120      	cbz	r0, d6912 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6908:	4629      	mov	r1, r5
   d690a:	4630      	mov	r0, r6
   d690c:	f7ff ff98 	bl	d6840 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6910:	e03a      	b.n	d6988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6912:	4631      	mov	r1, r6
   d6914:	a802      	add	r0, sp, #8
   d6916:	f7ff ffb3 	bl	d6880 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d691a:	68e0      	ldr	r0, [r4, #12]
   d691c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6920:	b108      	cbz	r0, d6926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6922:	f002 f9f1 	bl	d8d08 <strdup>
   d6926:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6928:	2010      	movs	r0, #16
   d692a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d692e:	f7fd fbb4 	bl	d409a <_Znwj>
   d6932:	4605      	mov	r5, r0
   d6934:	b1e8      	cbz	r0, d6972 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6936:	2700      	movs	r7, #0
   d6938:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d693a:	2018      	movs	r0, #24
   d693c:	f7fd fbad 	bl	d409a <_Znwj>
   d6940:	4604      	mov	r4, r0
   d6942:	b188      	cbz	r0, d6968 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6944:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6946:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6948:	a802      	add	r0, sp, #8
   d694a:	f7ff ff55 	bl	d67f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d694e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6950:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6952:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6954:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6956:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6958:	a906      	add	r1, sp, #24
   d695a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d695c:	60e3      	str	r3, [r4, #12]
   d695e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6962:	9205      	str	r2, [sp, #20]
   d6964:	f7ff feb3 	bl	d66ce <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6968:	4b0d      	ldr	r3, [pc, #52]	; (d69a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d696a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d696c:	4b0d      	ldr	r3, [pc, #52]	; (d69a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d696e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6970:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6972:	a806      	add	r0, sp, #24
   d6974:	f7ff feba 	bl	d66ec <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6978:	a802      	add	r0, sp, #8
   d697a:	f7fd fc0e 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d697e:	2200      	movs	r2, #0
   d6980:	4629      	mov	r1, r5
   d6982:	4809      	ldr	r0, [pc, #36]	; (d69a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6984:	f7ff fbf8 	bl	d6178 <application_thread_invoke>
   d6988:	4630      	mov	r0, r6
   d698a:	f7fd fc06 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d698e:	2110      	movs	r1, #16
   d6990:	4630      	mov	r0, r6
   d6992:	f001 fa58 	bl	d7e46 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6996:	4668      	mov	r0, sp
   d6998:	f7ff fea8 	bl	d66ec <_ZN8particle5ErrorD1Ev>
    }
   d699c:	b009      	add	sp, #36	; 0x24
   d699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d69a0:	000d6853 	.word	0x000d6853
   d69a4:	000d6ac9 	.word	0x000d6ac9
   d69a8:	000d63d7 	.word	0x000d63d7

000d69ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d69ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69b0:	b08b      	sub	sp, #44	; 0x2c
   d69b2:	4606      	mov	r6, r0
   d69b4:	460f      	mov	r7, r1
   d69b6:	4690      	mov	r8, r2
   d69b8:	4699      	mov	r9, r3
   d69ba:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d69be:	f7ff fc3b 	bl	d6238 <spark_cloud_flag_connected>
   d69c2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d69c4:	4683      	mov	fp, r0
   d69c6:	bb30      	cbnz	r0, d6a16 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d69c8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d69cc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d69ce:	a905      	add	r1, sp, #20
   d69d0:	4628      	mov	r0, r5
   d69d2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d69d6:	f7ff fe7a 	bl	d66ce <_ZN8particle5ErrorC1EOS0_>
   d69da:	2014      	movs	r0, #20
   d69dc:	f7fd fb5d 	bl	d409a <_Znwj>
   d69e0:	4604      	mov	r4, r0
   d69e2:	b158      	cbz	r0, d69fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d69e4:	2302      	movs	r3, #2
   d69e6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d69e8:	2301      	movs	r3, #1
   d69ea:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d69ec:	f8c0 b004 	str.w	fp, [r0, #4]
   d69f0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d69f4:	4629      	mov	r1, r5
   d69f6:	300c      	adds	r0, #12
   d69f8:	f7ff fe69 	bl	d66ce <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d69fc:	4630      	mov	r0, r6
   d69fe:	4621      	mov	r1, r4
   d6a00:	f840 4b04 	str.w	r4, [r0], #4
   d6a04:	f7ff ff08 	bl	d6818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6a08:	4628      	mov	r0, r5
   d6a0a:	f7ff fe6f 	bl	d66ec <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6a0e:	a805      	add	r0, sp, #20
   d6a10:	f7ff fe6c 	bl	d66ec <_ZN8particle5ErrorD1Ev>
   d6a14:	e052      	b.n	d6abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6a16:	2400      	movs	r4, #0
   d6a18:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6a1a:	2014      	movs	r0, #20
   d6a1c:	606c      	str	r4, [r5, #4]
   d6a1e:	60ac      	str	r4, [r5, #8]
   d6a20:	9307      	str	r3, [sp, #28]
   d6a22:	f7fd fb3a 	bl	d409a <_Znwj>
   d6a26:	4601      	mov	r1, r0
   d6a28:	b118      	cbz	r0, d6a32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6a2a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6a2c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6a2e:	6044      	str	r4, [r0, #4]
   d6a30:	6084      	str	r4, [r0, #8]
   d6a32:	a804      	add	r0, sp, #16
   d6a34:	9103      	str	r1, [sp, #12]
   d6a36:	f7ff feef 	bl	d6818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6a3a:	4b22      	ldr	r3, [pc, #136]	; (d6ac4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6a3c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6a3e:	2008      	movs	r0, #8
   d6a40:	f7fd fb2b 	bl	d409a <_Znwj>
   d6a44:	4604      	mov	r4, r0
   d6a46:	b128      	cbz	r0, d6a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a48:	9b03      	ldr	r3, [sp, #12]
   d6a4a:	f840 3b04 	str.w	r3, [r0], #4
   d6a4e:	a904      	add	r1, sp, #16
   d6a50:	f7ff fcdd 	bl	d640e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6a54:	9500      	str	r5, [sp, #0]
   d6a56:	fa5f f38a 	uxtb.w	r3, sl
   d6a5a:	464a      	mov	r2, r9
   d6a5c:	4641      	mov	r1, r8
   d6a5e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6a60:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6a62:	f7ff fbf9 	bl	d6258 <spark_send_event>
   d6a66:	b920      	cbnz	r0, d6a72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6a68:	9b03      	ldr	r3, [sp, #12]
   d6a6a:	785b      	ldrb	r3, [r3, #1]
   d6a6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6a70:	b183      	cbz	r3, d6a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6a72:	9b03      	ldr	r3, [sp, #12]
   d6a74:	9305      	str	r3, [sp, #20]
   d6a76:	a904      	add	r1, sp, #16
   d6a78:	a806      	add	r0, sp, #24
   d6a7a:	f7ff fcc8 	bl	d640e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6a7e:	a905      	add	r1, sp, #20
   d6a80:	4630      	mov	r0, r6
   d6a82:	f7ff fe8a 	bl	d679a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a86:	a806      	add	r0, sp, #24
   d6a88:	f7fd ff02 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a8c:	a804      	add	r0, sp, #16
   d6a8e:	f7fd feff 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a92:	e013      	b.n	d6abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6a94:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6a98:	a905      	add	r1, sp, #20
   d6a9a:	a803      	add	r0, sp, #12
   d6a9c:	9205      	str	r2, [sp, #20]
   d6a9e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6aa2:	f7ff fefd 	bl	d68a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6aa6:	a805      	add	r0, sp, #20
   d6aa8:	f7ff fe20 	bl	d66ec <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6aac:	a805      	add	r0, sp, #20
   d6aae:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6ab0:	f7ff fe84 	bl	d67bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6ab4:	a806      	add	r0, sp, #24
   d6ab6:	f7fd feeb 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6aba:	e7da      	b.n	d6a72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6abc:	4630      	mov	r0, r6
   d6abe:	b00b      	add	sp, #44	; 0x2c
   d6ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ac4:	000d6c39 	.word	0x000d6c39

000d6ac8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ac8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6acc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ace:	d006      	beq.n	d6ade <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6ad0:	2a03      	cmp	r2, #3
   d6ad2:	d017      	beq.n	d6b04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6ad4:	2a01      	cmp	r2, #1
   d6ad6:	d122      	bne.n	d6b1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6ad8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6ada:	6003      	str	r3, [r0, #0]
	      break;
   d6adc:	e01f      	b.n	d6b1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6ade:	2018      	movs	r0, #24
   d6ae0:	680e      	ldr	r6, [r1, #0]
   d6ae2:	f7fd fada 	bl	d409a <_Znwj>
   d6ae6:	4605      	mov	r5, r0
   d6ae8:	b150      	cbz	r0, d6b00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6aea:	4631      	mov	r1, r6
   d6aec:	f7ff fec8 	bl	d6880 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6af0:	6930      	ldr	r0, [r6, #16]
   d6af2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6af6:	b108      	cbz	r0, d6afc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6af8:	f002 f906 	bl	d8d08 <strdup>
   d6afc:	6128      	str	r0, [r5, #16]
   d6afe:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6b00:	6025      	str	r5, [r4, #0]
   d6b02:	e00c      	b.n	d6b1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b04:	6804      	ldr	r4, [r0, #0]
   d6b06:	b154      	cbz	r4, d6b1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6b08:	f104 0010 	add.w	r0, r4, #16
   d6b0c:	f7ff fdee 	bl	d66ec <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b10:	4620      	mov	r0, r4
   d6b12:	f7fd fb42 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b16:	2118      	movs	r1, #24
   d6b18:	4620      	mov	r0, r4
   d6b1a:	f001 f994 	bl	d7e46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6b1e:	2000      	movs	r0, #0
   d6b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b22 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6b22:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b24:	2300      	movs	r3, #0
   d6b26:	6083      	str	r3, [r0, #8]
   d6b28:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6b2a:	4604      	mov	r4, r0
   d6b2c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6b2e:	b12b      	cbz	r3, d6b3c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6b30:	2202      	movs	r2, #2
   d6b32:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6b34:	68eb      	ldr	r3, [r5, #12]
   d6b36:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6b38:	68ab      	ldr	r3, [r5, #8]
   d6b3a:	60a3      	str	r3, [r4, #8]
	}
    }
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	bd38      	pop	{r3, r4, r5, pc}

000d6b40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6b40:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6b42:	b570      	push	{r4, r5, r6, lr}
   d6b44:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6b46:	d006      	beq.n	d6b56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6b48:	2a03      	cmp	r2, #3
   d6b4a:	d011      	beq.n	d6b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6b4c:	2a01      	cmp	r2, #1
   d6b4e:	d118      	bne.n	d6b82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6b50:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6b52:	6003      	str	r3, [r0, #0]
	      break;
   d6b54:	e015      	b.n	d6b82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6b56:	2014      	movs	r0, #20
   d6b58:	680e      	ldr	r6, [r1, #0]
   d6b5a:	f7fd fa9e 	bl	d409a <_Znwj>
   d6b5e:	4605      	mov	r5, r0
   d6b60:	b120      	cbz	r0, d6b6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6b62:	4631      	mov	r1, r6
   d6b64:	f7ff ffdd 	bl	d6b22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6b68:	7c33      	ldrb	r3, [r6, #16]
   d6b6a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6b6c:	6025      	str	r5, [r4, #0]
   d6b6e:	e008      	b.n	d6b82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b70:	6804      	ldr	r4, [r0, #0]
   d6b72:	b134      	cbz	r4, d6b82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b74:	4620      	mov	r0, r4
   d6b76:	f7fd fb10 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b7a:	2114      	movs	r1, #20
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	f001 f962 	bl	d7e46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6b82:	2000      	movs	r0, #0
   d6b84:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6b88:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6b8a:	2300      	movs	r3, #0
   d6b8c:	b087      	sub	sp, #28
   d6b8e:	460c      	mov	r4, r1
   d6b90:	f3bf 8f5f 	dmb	sy
   d6b94:	e850 6f00 	ldrex	r6, [r0]
   d6b98:	e840 3200 	strex	r2, r3, [r0]
   d6b9c:	2a00      	cmp	r2, #0
   d6b9e:	d1f9      	bne.n	d6b94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6ba0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6ba4:	2e00      	cmp	r6, #0
   d6ba6:	d03f      	beq.n	d6c28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6ba8:	4618      	mov	r0, r3
   d6baa:	f7ff fadd 	bl	d6168 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6bae:	4607      	mov	r7, r0
   d6bb0:	b120      	cbz	r0, d6bbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6bb2:	4621      	mov	r1, r4
   d6bb4:	4630      	mov	r0, r6
   d6bb6:	f7ff fe53 	bl	d6860 <_ZNKSt8functionIFvRKbEEclES1_>
   d6bba:	e02e      	b.n	d6c1a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6bbc:	4631      	mov	r1, r6
   d6bbe:	a801      	add	r0, sp, #4
   d6bc0:	f7ff ffaf 	bl	d6b22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6bc4:	7823      	ldrb	r3, [r4, #0]
   d6bc6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6bca:	2010      	movs	r0, #16
   d6bcc:	f7fd fa65 	bl	d409a <_Znwj>
   d6bd0:	4605      	mov	r5, r0
   d6bd2:	b1d0      	cbz	r0, d6c0a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6bd4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6bd6:	2014      	movs	r0, #20
   d6bd8:	f7fd fa5f 	bl	d409a <_Znwj>
   d6bdc:	4604      	mov	r4, r0
   d6bde:	b178      	cbz	r0, d6c00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6be0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6be2:	4601      	mov	r1, r0
   d6be4:	a801      	add	r0, sp, #4
   d6be6:	f7ff fe07 	bl	d67f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bea:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6bec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bf0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6bf2:	9203      	str	r2, [sp, #12]
   d6bf4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bf6:	60e3      	str	r3, [r4, #12]
   d6bf8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6bfc:	9204      	str	r2, [sp, #16]
   d6bfe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6c00:	4b0a      	ldr	r3, [pc, #40]	; (d6c2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6c02:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6c04:	4b0a      	ldr	r3, [pc, #40]	; (d6c30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6c06:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6c08:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6c0a:	a801      	add	r0, sp, #4
   d6c0c:	f7fd fac5 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6c10:	2200      	movs	r2, #0
   d6c12:	4629      	mov	r1, r5
   d6c14:	4807      	ldr	r0, [pc, #28]	; (d6c34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6c16:	f7ff faaf 	bl	d6178 <application_thread_invoke>
   d6c1a:	4630      	mov	r0, r6
   d6c1c:	f7fd fabd 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6c20:	2110      	movs	r1, #16
   d6c22:	4630      	mov	r0, r6
   d6c24:	f001 f90f 	bl	d7e46 <_ZdlPvj>
        }
    }
   d6c28:	b007      	add	sp, #28
   d6c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c2c:	000d6873 	.word	0x000d6873
   d6c30:	000d6b41 	.word	0x000d6b41
   d6c34:	000d63d7 	.word	0x000d63d7

000d6c38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6c38:	b530      	push	{r4, r5, lr}
   d6c3a:	b085      	sub	sp, #20
   d6c3c:	4604      	mov	r4, r0
   d6c3e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6c40:	4668      	mov	r0, sp
   d6c42:	4611      	mov	r1, r2
   d6c44:	f7ff fdba 	bl	d67bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6c48:	b17c      	cbz	r4, d6c6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6c4a:	b224      	sxth	r4, r4
   d6c4c:	4628      	mov	r0, r5
   d6c4e:	b10d      	cbz	r5, d6c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6c50:	f002 f85a 	bl	d8d08 <strdup>
   d6c54:	9002      	str	r0, [sp, #8]
   d6c56:	a902      	add	r1, sp, #8
   d6c58:	4668      	mov	r0, sp
   d6c5a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6c5e:	f7ff fe1f 	bl	d68a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6c62:	a802      	add	r0, sp, #8
   d6c64:	f7ff fd42 	bl	d66ec <_ZN8particle5ErrorD1Ev>
   d6c68:	e01d      	b.n	d6ca6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6c6a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6c6c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6c70:	f04f 0201 	mov.w	r2, #1
   d6c74:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6c78:	42a3      	cmp	r3, r4
   d6c7a:	d103      	bne.n	d6c84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6c7c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6c80:	2900      	cmp	r1, #0
   d6c82:	d1f7      	bne.n	d6c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6c84:	d002      	beq.n	d6c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6c86:	f88d 3008 	strb.w	r3, [sp, #8]
   d6c8a:	e00c      	b.n	d6ca6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6c8c:	f110 010c 	adds.w	r1, r0, #12
   d6c90:	f04f 0301 	mov.w	r3, #1
   d6c94:	bf18      	it	ne
   d6c96:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6c98:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6c9c:	3004      	adds	r0, #4
   d6c9e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6ca2:	f7ff ff71 	bl	d6b88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6ca6:	a801      	add	r0, sp, #4
   d6ca8:	f7fd fdf2 	bl	d4890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6cac:	b005      	add	sp, #20
   d6cae:	bd30      	pop	{r4, r5, pc}

000d6cb0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	4611      	mov	r1, r2
   d6cb4:	6840      	ldr	r0, [r0, #4]
   d6cb6:	f7ff bb2f 	b.w	d6318 <network_listening>

000d6cba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6cba:	2200      	movs	r2, #0
   d6cbc:	4611      	mov	r1, r2
   d6cbe:	6840      	ldr	r0, [r0, #4]
   d6cc0:	f7ff bb3a 	b.w	d6338 <network_get_listen_timeout>

000d6cc4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6cc4:	2200      	movs	r2, #0
   d6cc6:	6840      	ldr	r0, [r0, #4]
   d6cc8:	f7ff bb2e 	b.w	d6328 <network_set_listen_timeout>

000d6ccc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ccc:	2200      	movs	r2, #0
   d6cce:	f081 0101 	eor.w	r1, r1, #1
   d6cd2:	6840      	ldr	r0, [r0, #4]
   d6cd4:	f7ff bb18 	b.w	d6308 <network_listen>

000d6cd8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6cd8:	2300      	movs	r3, #0
   d6cda:	461a      	mov	r2, r3
   d6cdc:	4619      	mov	r1, r3
   d6cde:	6840      	ldr	r0, [r0, #4]
   d6ce0:	f7ff bb0a 	b.w	d62f8 <network_off>

000d6ce4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ce4:	2300      	movs	r3, #0
   d6ce6:	461a      	mov	r2, r3
   d6ce8:	4619      	mov	r1, r3
   d6cea:	6840      	ldr	r0, [r0, #4]
   d6cec:	f7ff bafc 	b.w	d62e8 <network_on>

000d6cf0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6cf0:	2200      	movs	r2, #0
   d6cf2:	4611      	mov	r1, r2
   d6cf4:	6840      	ldr	r0, [r0, #4]
   d6cf6:	f7ff baef 	b.w	d62d8 <network_ready>

000d6cfa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6cfa:	2200      	movs	r2, #0
   d6cfc:	4611      	mov	r1, r2
   d6cfe:	6840      	ldr	r0, [r0, #4]
   d6d00:	f7ff bada 	b.w	d62b8 <network_connecting>

000d6d04 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d04:	2200      	movs	r2, #0
   d6d06:	2102      	movs	r1, #2
   d6d08:	6840      	ldr	r0, [r0, #4]
   d6d0a:	f7ff badd 	b.w	d62c8 <network_disconnect>

000d6d0e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d0e:	2300      	movs	r3, #0
   d6d10:	461a      	mov	r2, r3
   d6d12:	6840      	ldr	r0, [r0, #4]
   d6d14:	f7ff bac8 	b.w	d62a8 <network_connect>

000d6d18 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6d18:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6d1a:	2203      	movs	r2, #3
   d6d1c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6d1e:	4a02      	ldr	r2, [pc, #8]	; (d6d28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6d20:	601a      	str	r2, [r3, #0]
   d6d22:	4770      	bx	lr
   d6d24:	2003e364 	.word	0x2003e364
   d6d28:	000d9c8c 	.word	0x000d9c8c

000d6d2c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6d2c:	4770      	bx	lr

000d6d2e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d30:	4606      	mov	r6, r0
   d6d32:	4615      	mov	r5, r2
   d6d34:	460c      	mov	r4, r1
   d6d36:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d38:	42bc      	cmp	r4, r7
   d6d3a:	d006      	beq.n	d6d4a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6d3c:	6833      	ldr	r3, [r6, #0]
   d6d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6d42:	689b      	ldr	r3, [r3, #8]
   d6d44:	4630      	mov	r0, r6
   d6d46:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d48:	e7f6      	b.n	d6d38 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6d4a:	4628      	mov	r0, r5
   d6d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d4e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6d4e:	2200      	movs	r2, #0
   d6d50:	7c00      	ldrb	r0, [r0, #16]
   d6d52:	f7ff b8df 	b.w	d5f14 <HAL_I2C_Write_Data>

000d6d56 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6d56:	2100      	movs	r1, #0
   d6d58:	7c00      	ldrb	r0, [r0, #16]
   d6d5a:	f7ff b8e3 	b.w	d5f24 <HAL_I2C_Available_Data>

000d6d5e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6d5e:	2100      	movs	r1, #0
   d6d60:	7c00      	ldrb	r0, [r0, #16]
   d6d62:	f7ff b8e7 	b.w	d5f34 <HAL_I2C_Read_Data>

000d6d66 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d66:	2100      	movs	r1, #0
   d6d68:	7c00      	ldrb	r0, [r0, #16]
   d6d6a:	f7ff b8eb 	b.w	d5f44 <HAL_I2C_Peek_Data>

000d6d6e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d6e:	2100      	movs	r1, #0
   d6d70:	7c00      	ldrb	r0, [r0, #16]
   d6d72:	f7ff b8ef 	b.w	d5f54 <HAL_I2C_Flush_Data>

000d6d76 <_ZN7TwoWireD0Ev>:
   d6d76:	b510      	push	{r4, lr}
   d6d78:	2114      	movs	r1, #20
   d6d7a:	4604      	mov	r4, r0
   d6d7c:	f001 f863 	bl	d7e46 <_ZdlPvj>
   d6d80:	4620      	mov	r0, r4
   d6d82:	bd10      	pop	{r4, pc}

000d6d84 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d84:	b510      	push	{r4, lr}
   d6d86:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6d88:	2300      	movs	r3, #0
   d6d8a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d90:	60a3      	str	r3, [r4, #8]
   d6d92:	4b04      	ldr	r3, [pc, #16]	; (d6da4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6d94:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d96:	4608      	mov	r0, r1
   d6d98:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6d9a:	4611      	mov	r1, r2
   d6d9c:	f7ff f8ea 	bl	d5f74 <HAL_I2C_Init>
}
   d6da0:	4620      	mov	r0, r4
   d6da2:	bd10      	pop	{r4, pc}
   d6da4:	000d9cc0 	.word	0x000d9cc0

000d6da8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6da8:	2300      	movs	r3, #0
   d6daa:	461a      	mov	r2, r3
   d6dac:	4619      	mov	r1, r3
   d6dae:	7c00      	ldrb	r0, [r0, #16]
   d6db0:	f7ff b898 	b.w	d5ee4 <HAL_I2C_Begin>

000d6db4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6db4:	b570      	push	{r4, r5, r6, lr}
   d6db6:	460c      	mov	r4, r1
   d6db8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6dba:	2514      	movs	r5, #20
   d6dbc:	4606      	mov	r6, r0
   d6dbe:	462a      	mov	r2, r5
   d6dc0:	2100      	movs	r1, #0
   d6dc2:	a801      	add	r0, sp, #4
   d6dc4:	f001 ff5d 	bl	d8c82 <memset>
   d6dc8:	7823      	ldrb	r3, [r4, #0]
   d6dca:	f88d 3008 	strb.w	r3, [sp, #8]
   d6dce:	6863      	ldr	r3, [r4, #4]
   d6dd0:	9303      	str	r3, [sp, #12]
   d6dd2:	68e3      	ldr	r3, [r4, #12]
   d6dd4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6dd6:	2200      	movs	r2, #0
   d6dd8:	7a23      	ldrb	r3, [r4, #8]
   d6dda:	7c30      	ldrb	r0, [r6, #16]
   d6ddc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6de0:	a901      	add	r1, sp, #4
   d6de2:	9305      	str	r3, [sp, #20]
   d6de4:	f7ff f8de 	bl	d5fa4 <HAL_I2C_Request_Data_Ex>
}
   d6de8:	b006      	add	sp, #24
   d6dea:	bd70      	pop	{r4, r5, r6, pc}

000d6dec <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dee:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6df0:	f88d 1000 	strb.w	r1, [sp]
   d6df4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6df8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dfa:	bf18      	it	ne
   d6dfc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6dfe:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6e00:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6e02:	f88d 3008 	strb.w	r3, [sp, #8]
   d6e06:	f7ff ffd5 	bl	d6db4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6e0a:	b005      	add	sp, #20
   d6e0c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6e10 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6e10:	2301      	movs	r3, #1
   d6e12:	f7ff bfeb 	b.w	d6dec <_ZN7TwoWire11requestFromEhjh>

000d6e16 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6e16:	2200      	movs	r2, #0
   d6e18:	7c00      	ldrb	r0, [r0, #16]
   d6e1a:	f7ff b86b 	b.w	d5ef4 <HAL_I2C_Begin_Transmission>

000d6e1e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6e1e:	b2c9      	uxtb	r1, r1
   d6e20:	f7ff bff9 	b.w	d6e16 <_ZN7TwoWire17beginTransmissionEh>

000d6e24 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6e24:	2200      	movs	r2, #0
   d6e26:	7c00      	ldrb	r0, [r0, #16]
   d6e28:	f7ff b86c 	b.w	d5f04 <HAL_I2C_End_Transmission>

000d6e2c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6e2c:	2101      	movs	r1, #1
   d6e2e:	f7ff bff9 	b.w	d6e24 <_ZN7TwoWire15endTransmissionEh>

000d6e32 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6e32:	2100      	movs	r1, #0
   d6e34:	7c00      	ldrb	r0, [r0, #16]
   d6e36:	f7ff b895 	b.w	d5f64 <HAL_I2C_Is_Enabled>

000d6e3a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6e3a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6e3c:	2100      	movs	r1, #0
   d6e3e:	7c00      	ldrb	r0, [r0, #16]
   d6e40:	f7ff f8a0 	bl	d5f84 <HAL_I2C_Acquire>
}
   d6e44:	fab0 f080 	clz	r0, r0
   d6e48:	0940      	lsrs	r0, r0, #5
   d6e4a:	bd08      	pop	{r3, pc}

000d6e4c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6e4c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6e4e:	2100      	movs	r1, #0
   d6e50:	7c00      	ldrb	r0, [r0, #16]
   d6e52:	f7ff f89f 	bl	d5f94 <HAL_I2C_Release>
}
   d6e56:	fab0 f080 	clz	r0, r0
   d6e5a:	0940      	lsrs	r0, r0, #5
   d6e5c:	bd08      	pop	{r3, pc}

000d6e5e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6e5e:	4770      	bx	lr

000d6e60 <_ZN9IPAddressD0Ev>:
   d6e60:	b510      	push	{r4, lr}
   d6e62:	2118      	movs	r1, #24
   d6e64:	4604      	mov	r4, r0
   d6e66:	f000 ffee 	bl	d7e46 <_ZdlPvj>
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	bd10      	pop	{r4, pc}

000d6e6e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e70:	7d03      	ldrb	r3, [r0, #20]
   d6e72:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e74:	b08d      	sub	sp, #52	; 0x34
   d6e76:	460e      	mov	r6, r1
   d6e78:	f100 0704 	add.w	r7, r0, #4
   d6e7c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e80:	d002      	beq.n	d6e88 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e82:	f100 0508 	add.w	r5, r0, #8
   d6e86:	e018      	b.n	d6eba <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e88:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e8a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e8c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e90:	232f      	movs	r3, #47	; 0x2f
   d6e92:	462a      	mov	r2, r5
   d6e94:	200a      	movs	r0, #10
   d6e96:	f7ff f88d 	bl	d5fb4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e9a:	4628      	mov	r0, r5
   d6e9c:	f001 ff4f 	bl	d8d3e <strlen>
   d6ea0:	6833      	ldr	r3, [r6, #0]
   d6ea2:	4602      	mov	r2, r0
   d6ea4:	68db      	ldr	r3, [r3, #12]
   d6ea6:	4629      	mov	r1, r5
   d6ea8:	4630      	mov	r0, r6
   d6eaa:	4798      	blx	r3
   d6eac:	e00f      	b.n	d6ece <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6eae:	b124      	cbz	r4, d6eba <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6eb0:	212e      	movs	r1, #46	; 0x2e
   d6eb2:	4630      	mov	r0, r6
   d6eb4:	f000 fa7a 	bl	d73ac <_ZN5Print5printEc>
   d6eb8:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6eba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ebe:	220a      	movs	r2, #10
   d6ec0:	4630      	mov	r0, r6
   d6ec2:	f000 fa8c 	bl	d73de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6ec6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6ec8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6eca:	d1f0      	bne.n	d6eae <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6ecc:	4620      	mov	r0, r4
    }
    return n;
}
   d6ece:	b00d      	add	sp, #52	; 0x34
   d6ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6ed4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6ed4:	b510      	push	{r4, lr}
   d6ed6:	4b05      	ldr	r3, [pc, #20]	; (d6eec <_ZN9IPAddressC1Ev+0x18>)
   d6ed8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6eda:	2211      	movs	r2, #17
   d6edc:	f840 3b04 	str.w	r3, [r0], #4
   d6ee0:	2100      	movs	r1, #0
   d6ee2:	f001 fece 	bl	d8c82 <memset>
{
    clear();
}
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	bd10      	pop	{r4, pc}
   d6eea:	bf00      	nop
   d6eec:	000d9ce8 	.word	0x000d9ce8

000d6ef0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6ef0:	4603      	mov	r3, r0
   d6ef2:	4a07      	ldr	r2, [pc, #28]	; (d6f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6ef4:	b510      	push	{r4, lr}
   d6ef6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6efa:	f101 0210 	add.w	r2, r1, #16
   d6efe:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f02:	f843 4b04 	str.w	r4, [r3], #4
   d6f06:	4291      	cmp	r1, r2
   d6f08:	d1f9      	bne.n	d6efe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6f0a:	780a      	ldrb	r2, [r1, #0]
   d6f0c:	701a      	strb	r2, [r3, #0]
}
   d6f0e:	bd10      	pop	{r4, pc}
   d6f10:	000d9ce8 	.word	0x000d9ce8

000d6f14 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6f14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6f16:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6f1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6f1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6f22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6f26:	2304      	movs	r3, #4
   d6f28:	6041      	str	r1, [r0, #4]
   d6f2a:	7503      	strb	r3, [r0, #20]
   d6f2c:	bd10      	pop	{r4, pc}

000d6f2e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6f30:	780d      	ldrb	r5, [r1, #0]
   d6f32:	788b      	ldrb	r3, [r1, #2]
   d6f34:	784a      	ldrb	r2, [r1, #1]
   d6f36:	78c9      	ldrb	r1, [r1, #3]
   d6f38:	9100      	str	r1, [sp, #0]
   d6f3a:	4629      	mov	r1, r5
   d6f3c:	f7ff ffea 	bl	d6f14 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6f40:	b003      	add	sp, #12
   d6f42:	bd30      	pop	{r4, r5, pc}

000d6f44 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6f44:	4b01      	ldr	r3, [pc, #4]	; (d6f4c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6f46:	4a02      	ldr	r2, [pc, #8]	; (d6f50 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6f48:	601a      	str	r2, [r3, #0]
   d6f4a:	4770      	bx	lr
   d6f4c:	2003e36c 	.word	0x2003e36c
   d6f50:	000d9d67 	.word	0x000d9d67

000d6f54 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f54:	2200      	movs	r2, #0
   d6f56:	4611      	mov	r1, r2
   d6f58:	6840      	ldr	r0, [r0, #4]
   d6f5a:	f7ff b9dd 	b.w	d6318 <network_listening>

000d6f5e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f5e:	2200      	movs	r2, #0
   d6f60:	4611      	mov	r1, r2
   d6f62:	6840      	ldr	r0, [r0, #4]
   d6f64:	f7ff b9e8 	b.w	d6338 <network_get_listen_timeout>

000d6f68 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6f68:	2200      	movs	r2, #0
   d6f6a:	6840      	ldr	r0, [r0, #4]
   d6f6c:	f7ff b9dc 	b.w	d6328 <network_set_listen_timeout>

000d6f70 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f70:	2200      	movs	r2, #0
   d6f72:	f081 0101 	eor.w	r1, r1, #1
   d6f76:	6840      	ldr	r0, [r0, #4]
   d6f78:	f7ff b9c6 	b.w	d6308 <network_listen>

000d6f7c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6f7c:	2300      	movs	r3, #0
   d6f7e:	461a      	mov	r2, r3
   d6f80:	2101      	movs	r1, #1
   d6f82:	6840      	ldr	r0, [r0, #4]
   d6f84:	f7ff b9b8 	b.w	d62f8 <network_off>

000d6f88 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f88:	2300      	movs	r3, #0
   d6f8a:	461a      	mov	r2, r3
   d6f8c:	4619      	mov	r1, r3
   d6f8e:	6840      	ldr	r0, [r0, #4]
   d6f90:	f7ff b9aa 	b.w	d62e8 <network_on>

000d6f94 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f94:	2200      	movs	r2, #0
   d6f96:	4611      	mov	r1, r2
   d6f98:	6840      	ldr	r0, [r0, #4]
   d6f9a:	f7ff b99d 	b.w	d62d8 <network_ready>

000d6f9e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f9e:	2200      	movs	r2, #0
   d6fa0:	4611      	mov	r1, r2
   d6fa2:	6840      	ldr	r0, [r0, #4]
   d6fa4:	f7ff b988 	b.w	d62b8 <network_connecting>

000d6fa8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6fa8:	2200      	movs	r2, #0
   d6faa:	2102      	movs	r1, #2
   d6fac:	6840      	ldr	r0, [r0, #4]
   d6fae:	f7ff b98b 	b.w	d62c8 <network_disconnect>

000d6fb2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6fb2:	2300      	movs	r3, #0
   d6fb4:	461a      	mov	r2, r3
   d6fb6:	6840      	ldr	r0, [r0, #4]
   d6fb8:	f7ff b976 	b.w	d62a8 <network_connect>

000d6fbc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6fbc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fbe:	4605      	mov	r5, r0
   d6fc0:	b188      	cbz	r0, d6fe6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fc2:	6804      	ldr	r4, [r0, #0]
   d6fc4:	b14c      	cbz	r4, d6fda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6fc6:	68a3      	ldr	r3, [r4, #8]
   d6fc8:	b11b      	cbz	r3, d6fd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6fca:	2203      	movs	r2, #3
   d6fcc:	4621      	mov	r1, r4
   d6fce:	4620      	mov	r0, r4
   d6fd0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fd2:	2110      	movs	r1, #16
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	f000 ff36 	bl	d7e46 <_ZdlPvj>
   d6fda:	4628      	mov	r0, r5
   d6fdc:	2114      	movs	r1, #20
      }
   d6fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fe2:	f000 bf30 	b.w	d7e46 <_ZdlPvj>
   d6fe6:	bd38      	pop	{r3, r4, r5, pc}

000d6fe8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6fe8:	b110      	cbz	r0, d6ff0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6fea:	6803      	ldr	r3, [r0, #0]
   d6fec:	685b      	ldr	r3, [r3, #4]
   d6fee:	4718      	bx	r3
   d6ff0:	4770      	bx	lr

000d6ff2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6ff2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ff4:	6803      	ldr	r3, [r0, #0]
   d6ff6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6ff8:	b1bb      	cbz	r3, d702a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6ffa:	6858      	ldr	r0, [r3, #4]
   d6ffc:	f7fe fe72 	bl	d5ce4 <os_thread_is_current>
   d7000:	b978      	cbnz	r0, d7022 <_ZN6ThreadD1Ev+0x30>
   d7002:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7004:	7c5a      	ldrb	r2, [r3, #17]
   d7006:	b912      	cbnz	r2, d700e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7008:	6858      	ldr	r0, [r3, #4]
   d700a:	f7fe fe7b 	bl	d5d04 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d700e:	6823      	ldr	r3, [r4, #0]
   d7010:	6858      	ldr	r0, [r3, #4]
   d7012:	f7fe fe7f 	bl	d5d14 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7016:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7018:	2300      	movs	r3, #0
   d701a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d701c:	b128      	cbz	r0, d702a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d701e:	f7ff ffcd 	bl	d6fbc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7022:	6820      	ldr	r0, [r4, #0]
   d7024:	b108      	cbz	r0, d702a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7026:	f7ff ffc9 	bl	d6fbc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d702a:	4620      	mov	r0, r4
   d702c:	bd10      	pop	{r4, pc}

000d702e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d702e:	b538      	push	{r3, r4, r5, lr}
   d7030:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7032:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7036:	b108      	cbz	r0, d703c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7038:	f7fd f833 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d703c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7040:	b108      	cbz	r0, d7046 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7042:	f7fe fe9f 	bl	d5d84 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7046:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d704a:	b135      	cbz	r5, d705a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d704c:	4628      	mov	r0, r5
   d704e:	f7ff ffd0 	bl	d6ff2 <_ZN6ThreadD1Ev>
   d7052:	2104      	movs	r1, #4
   d7054:	4628      	mov	r0, r5
   d7056:	f000 fef6 	bl	d7e46 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d705a:	6820      	ldr	r0, [r4, #0]
   d705c:	b108      	cbz	r0, d7062 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d705e:	f7ff ffc3 	bl	d6fe8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7062:	4620      	mov	r0, r4
   d7064:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7068 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7068:	b510      	push	{r4, lr}
   d706a:	4b04      	ldr	r3, [pc, #16]	; (d707c <_ZN5spark9MeshClassD1Ev+0x14>)
   d706c:	4604      	mov	r4, r0
   d706e:	f840 3b08 	str.w	r3, [r0], #8
   d7072:	f7ff ffdc 	bl	d702e <_ZN5spark11MeshPublishD1Ev>
   d7076:	4620      	mov	r0, r4
   d7078:	bd10      	pop	{r4, pc}
   d707a:	bf00      	nop
   d707c:	000d9dd8 	.word	0x000d9dd8

000d7080 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7080:	b538      	push	{r3, r4, r5, lr}
   d7082:	4c0e      	ldr	r4, [pc, #56]	; (d70bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7084:	4b0e      	ldr	r3, [pc, #56]	; (d70c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7086:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7088:	2500      	movs	r5, #0
   d708a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d708c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7090:	6063      	str	r3, [r4, #4]
   d7092:	60a5      	str	r5, [r4, #8]
   d7094:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7098:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d709c:	f7fe fe6a 	bl	d5d74 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d70a0:	4b08      	ldr	r3, [pc, #32]	; (d70c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d70a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d70a6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d70aa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d70ac:	4620      	mov	r0, r4
   d70ae:	4a06      	ldr	r2, [pc, #24]	; (d70c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d70b0:	4906      	ldr	r1, [pc, #24]	; (d70cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d70b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d70b6:	f000 bec1 	b.w	d7e3c <__aeabi_atexit>
   d70ba:	bf00      	nop
   d70bc:	2003e370 	.word	0x2003e370
   d70c0:	000d9e0c 	.word	0x000d9e0c
   d70c4:	000d9dd8 	.word	0x000d9dd8
   d70c8:	2003e1c0 	.word	0x2003e1c0
   d70cc:	000d7069 	.word	0x000d7069

000d70d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d70d0:	2300      	movs	r3, #0
   d70d2:	461a      	mov	r2, r3
   d70d4:	6840      	ldr	r0, [r0, #4]
   d70d6:	f7ff b8e7 	b.w	d62a8 <network_connect>

000d70da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d70da:	2200      	movs	r2, #0
   d70dc:	2102      	movs	r1, #2
   d70de:	6840      	ldr	r0, [r0, #4]
   d70e0:	f7ff b8f2 	b.w	d62c8 <network_disconnect>

000d70e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d70e4:	2200      	movs	r2, #0
   d70e6:	4611      	mov	r1, r2
   d70e8:	6840      	ldr	r0, [r0, #4]
   d70ea:	f7ff b8e5 	b.w	d62b8 <network_connecting>

000d70ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d70ee:	2200      	movs	r2, #0
   d70f0:	4611      	mov	r1, r2
   d70f2:	6840      	ldr	r0, [r0, #4]
   d70f4:	f7ff b8f0 	b.w	d62d8 <network_ready>

000d70f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d70f8:	2300      	movs	r3, #0
   d70fa:	461a      	mov	r2, r3
   d70fc:	4619      	mov	r1, r3
   d70fe:	6840      	ldr	r0, [r0, #4]
   d7100:	f7ff b8f2 	b.w	d62e8 <network_on>

000d7104 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7104:	2300      	movs	r3, #0
   d7106:	461a      	mov	r2, r3
   d7108:	4619      	mov	r1, r3
   d710a:	6840      	ldr	r0, [r0, #4]
   d710c:	f7ff b8f4 	b.w	d62f8 <network_off>

000d7110 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7110:	2200      	movs	r2, #0
   d7112:	f081 0101 	eor.w	r1, r1, #1
   d7116:	6840      	ldr	r0, [r0, #4]
   d7118:	f7ff b8f6 	b.w	d6308 <network_listen>

000d711c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d711c:	2200      	movs	r2, #0
   d711e:	6840      	ldr	r0, [r0, #4]
   d7120:	f7ff b902 	b.w	d6328 <network_set_listen_timeout>

000d7124 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7124:	2200      	movs	r2, #0
   d7126:	4611      	mov	r1, r2
   d7128:	6840      	ldr	r0, [r0, #4]
   d712a:	f7ff b905 	b.w	d6338 <network_get_listen_timeout>

000d712e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d712e:	2200      	movs	r2, #0
   d7130:	4611      	mov	r1, r2
   d7132:	6840      	ldr	r0, [r0, #4]
   d7134:	f7ff b8f0 	b.w	d6318 <network_listening>

000d7138 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d713c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d713e:	b095      	sub	sp, #84	; 0x54
   d7140:	4616      	mov	r6, r2
   d7142:	460d      	mov	r5, r1
   d7144:	4607      	mov	r7, r0
    IPAddress addr;
   d7146:	f7ff fec5 	bl	d6ed4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d714a:	4621      	mov	r1, r4
   d714c:	2220      	movs	r2, #32
   d714e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7150:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7152:	f001 fd96 	bl	d8c82 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7156:	2340      	movs	r3, #64	; 0x40
   d7158:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d715a:	4621      	mov	r1, r4
   d715c:	466b      	mov	r3, sp
   d715e:	aa0c      	add	r2, sp, #48	; 0x30
   d7160:	4630      	mov	r0, r6
   d7162:	f7fe ff37 	bl	d5fd4 <netdb_getaddrinfo>
    if (!r) {
   d7166:	4604      	mov	r4, r0
   d7168:	2800      	cmp	r0, #0
   d716a:	d144      	bne.n	d71f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d716c:	4602      	mov	r2, r0
   d716e:	2101      	movs	r1, #1
   d7170:	6868      	ldr	r0, [r5, #4]
   d7172:	f7ff f8b1 	bl	d62d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7176:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7178:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d717a:	4622      	mov	r2, r4
   d717c:	6868      	ldr	r0, [r5, #4]
   d717e:	f7ff f8ab 	bl	d62d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7182:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7184:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7186:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7188:	2e00      	cmp	r6, #0
   d718a:	d034      	beq.n	d71f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d718c:	2900      	cmp	r1, #0
   d718e:	d132      	bne.n	d71f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7190:	6873      	ldr	r3, [r6, #4]
   d7192:	2b02      	cmp	r3, #2
   d7194:	d002      	beq.n	d719c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7196:	2b0a      	cmp	r3, #10
   d7198:	d009      	beq.n	d71ae <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d719a:	e02a      	b.n	d71f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d719c:	f1b8 0f00 	cmp.w	r8, #0
   d71a0:	d027      	beq.n	d71f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d71a2:	6971      	ldr	r1, [r6, #20]
   d71a4:	4638      	mov	r0, r7
   d71a6:	3104      	adds	r1, #4
   d71a8:	f7ff fec1 	bl	d6f2e <_ZN9IPAddressaSEPKh>
   d71ac:	e020      	b.n	d71f0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d71ae:	f1b9 0f00 	cmp.w	r9, #0
   d71b2:	d01e      	beq.n	d71f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d71b4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d71b6:	2211      	movs	r2, #17
   d71b8:	a801      	add	r0, sp, #4
   d71ba:	f001 fd62 	bl	d8c82 <memset>
                    a.v = 6;
   d71be:	2306      	movs	r3, #6
   d71c0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d71c4:	ad01      	add	r5, sp, #4
   d71c6:	f104 0308 	add.w	r3, r4, #8
   d71ca:	3418      	adds	r4, #24
   d71cc:	6818      	ldr	r0, [r3, #0]
   d71ce:	6859      	ldr	r1, [r3, #4]
   d71d0:	462a      	mov	r2, r5
   d71d2:	c203      	stmia	r2!, {r0, r1}
   d71d4:	3308      	adds	r3, #8
   d71d6:	42a3      	cmp	r3, r4
   d71d8:	4615      	mov	r5, r2
   d71da:	d1f7      	bne.n	d71cc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d71dc:	a901      	add	r1, sp, #4
   d71de:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d71e0:	ad07      	add	r5, sp, #28
   d71e2:	f7ff fe85 	bl	d6ef0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71e8:	1d3c      	adds	r4, r7, #4
   d71ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71ec:	682b      	ldr	r3, [r5, #0]
   d71ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d71f0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d71f2:	69f6      	ldr	r6, [r6, #28]
   d71f4:	e7c8      	b.n	d7188 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d71f6:	9800      	ldr	r0, [sp, #0]
   d71f8:	f7fe fee4 	bl	d5fc4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d71fc:	4638      	mov	r0, r7
   d71fe:	b015      	add	sp, #84	; 0x54
   d7200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7204 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7204:	4b02      	ldr	r3, [pc, #8]	; (d7210 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7206:	4a03      	ldr	r2, [pc, #12]	; (d7214 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7208:	601a      	str	r2, [r3, #0]
   d720a:	2200      	movs	r2, #0
   d720c:	605a      	str	r2, [r3, #4]
   d720e:	4770      	bx	lr
   d7210:	2003e544 	.word	0x2003e544
   d7214:	000d9e0c 	.word	0x000d9e0c

000d7218 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d7218:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d721a:	f000 fde9 	bl	d7df0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d721e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d7222:	f7ff be0a 	b.w	d6e3a <_ZN7TwoWire4lockEv>

000d7226 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d7226:	b510      	push	{r4, lr}
   d7228:	4604      	mov	r4, r0
    lock_(_lock)
   d722a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d722c:	b109      	cbz	r1, d7232 <_ZN4PMICC1Eb+0xc>
        lock();
   d722e:	f7ff fff3 	bl	d7218 <_ZN4PMIC4lockEv>
    }
}
   d7232:	4620      	mov	r0, r4
   d7234:	bd10      	pop	{r4, pc}

000d7236 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d7236:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7238:	f000 fdda 	bl	d7df0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d723c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d7240:	f7ff be04 	b.w	d6e4c <_ZN7TwoWire6unlockEv>

000d7244 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7244:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7246:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7248:	4604      	mov	r4, r0
{
    if (lock_) {
   d724a:	b10b      	cbz	r3, d7250 <_ZN4PMICD1Ev+0xc>
        unlock();
   d724c:	f7ff fff3 	bl	d7236 <_ZN4PMIC6unlockEv>
    }
}
   d7250:	4620      	mov	r0, r4
   d7252:	bd10      	pop	{r4, pc}

000d7254 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7254:	b510      	push	{r4, lr}
   d7256:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7258:	6800      	ldr	r0, [r0, #0]
   d725a:	f7ff ffec 	bl	d7236 <_ZN4PMIC6unlockEv>
   d725e:	4620      	mov	r0, r4
   d7260:	bd10      	pop	{r4, pc}

000d7262 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d7262:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7264:	ac02      	add	r4, sp, #8
   d7266:	460d      	mov	r5, r1
   d7268:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d726c:	f7ff ffd4 	bl	d7218 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7270:	f000 fdbe 	bl	d7df0 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d7274:	216b      	movs	r1, #107	; 0x6b
   d7276:	f7ff fdd2 	bl	d6e1e <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d727a:	f000 fdb9 	bl	d7df0 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d727e:	6803      	ldr	r3, [r0, #0]
   d7280:	4629      	mov	r1, r5
   d7282:	689b      	ldr	r3, [r3, #8]
   d7284:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7286:	f000 fdb3 	bl	d7df0 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d728a:	2101      	movs	r1, #1
   d728c:	f7ff fdca 	bl	d6e24 <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7290:	f000 fdae 	bl	d7df0 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d7294:	2301      	movs	r3, #1
   d7296:	461a      	mov	r2, r3
   d7298:	216b      	movs	r1, #107	; 0x6b
   d729a:	f7ff fda7 	bl	d6dec <_ZN7TwoWire11requestFromEhjh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d729e:	f000 fda7 	bl	d7df0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d72a2:	6803      	ldr	r3, [r0, #0]
   d72a4:	695b      	ldr	r3, [r3, #20]
   d72a6:	4798      	blx	r3
   d72a8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d72aa:	4620      	mov	r0, r4
   d72ac:	f7ff ffd2 	bl	d7254 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d72b0:	b2e8      	uxtb	r0, r5
   d72b2:	b003      	add	sp, #12
   d72b4:	bd30      	pop	{r4, r5, pc}

000d72b6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d72b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72b8:	ac02      	add	r4, sp, #8
   d72ba:	4615      	mov	r5, r2
   d72bc:	460e      	mov	r6, r1
   d72be:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d72c2:	f7ff ffa9 	bl	d7218 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d72c6:	f000 fd93 	bl	d7df0 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d72ca:	216b      	movs	r1, #107	; 0x6b
   d72cc:	f7ff fda7 	bl	d6e1e <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d72d0:	f000 fd8e 	bl	d7df0 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d72d4:	6803      	ldr	r3, [r0, #0]
   d72d6:	4631      	mov	r1, r6
   d72d8:	689b      	ldr	r3, [r3, #8]
   d72da:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d72dc:	f000 fd88 	bl	d7df0 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d72e0:	6803      	ldr	r3, [r0, #0]
   d72e2:	4629      	mov	r1, r5
   d72e4:	689b      	ldr	r3, [r3, #8]
   d72e6:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d72e8:	f000 fd82 	bl	d7df0 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d72ec:	2101      	movs	r1, #1
   d72ee:	f7ff fd99 	bl	d6e24 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d72f2:	4620      	mov	r0, r4
   d72f4:	f7ff ffae 	bl	d7254 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d72f8:	b002      	add	sp, #8
   d72fa:	bd70      	pop	{r4, r5, r6, pc}

000d72fc <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
   d72fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72fe:	ac02      	add	r4, sp, #8
   d7300:	4605      	mov	r5, r0
   d7302:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7306:	f7ff ff87 	bl	d7218 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d730a:	2101      	movs	r1, #1
   d730c:	4628      	mov	r0, r5
   d730e:	f7ff ffa8 	bl	d7262 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d7312:	2101      	movs	r1, #1
   d7314:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d7318:	4628      	mov	r0, r5
   d731a:	f7ff ffcc 	bl	d72b6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
   d731e:	4620      	mov	r0, r4
   d7320:	f7ff ff98 	bl	d7254 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
   d7324:	2001      	movs	r0, #1
   d7326:	b003      	add	sp, #12
   d7328:	bd30      	pop	{r4, r5, pc}

000d732a <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
   d732a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d732c:	ac02      	add	r4, sp, #8
   d732e:	4605      	mov	r5, r0
   d7330:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7334:	f7ff ff70 	bl	d7218 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d7338:	2101      	movs	r1, #1
   d733a:	4628      	mov	r0, r5
   d733c:	f7ff ff91 	bl	d7262 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d7340:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d7344:	f042 0210 	orr.w	r2, r2, #16
   d7348:	2101      	movs	r1, #1
   d734a:	4628      	mov	r0, r5
   d734c:	f7ff ffb3 	bl	d72b6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
   d7350:	4620      	mov	r0, r4
   d7352:	f7ff ff7f 	bl	d7254 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
   d7356:	2001      	movs	r0, #1
   d7358:	b003      	add	sp, #12
   d735a:	bd30      	pop	{r4, r5, pc}

000d735c <_ZN4PMIC14enableChargingEv>:
   d735c:	f7ff bfe5 	b.w	d732a <_ZN4PMIC10disableOTGEv>

000d7360 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7362:	4606      	mov	r6, r0
   d7364:	460d      	mov	r5, r1
   d7366:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7368:	2400      	movs	r4, #0
  while (size--) {
   d736a:	42bd      	cmp	r5, r7
   d736c:	d00c      	beq.n	d7388 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d736e:	6833      	ldr	r3, [r6, #0]
   d7370:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7374:	689b      	ldr	r3, [r3, #8]
   d7376:	4630      	mov	r0, r6
   d7378:	4798      	blx	r3
     if (chunk>=0)
   d737a:	2800      	cmp	r0, #0
   d737c:	db01      	blt.n	d7382 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d737e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7380:	e7f3      	b.n	d736a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7382:	2c00      	cmp	r4, #0
   d7384:	bf08      	it	eq
   d7386:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7388:	4620      	mov	r0, r4
   d738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d738c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d738c:	b570      	push	{r4, r5, r6, lr}
   d738e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7390:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7392:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7394:	b149      	cbz	r1, d73aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7396:	f001 fcd2 	bl	d8d3e <strlen>
   d739a:	682b      	ldr	r3, [r5, #0]
   d739c:	4602      	mov	r2, r0
   d739e:	4621      	mov	r1, r4
   d73a0:	4628      	mov	r0, r5
   d73a2:	68db      	ldr	r3, [r3, #12]
    }
   d73a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d73a8:	4718      	bx	r3
    }
   d73aa:	bd70      	pop	{r4, r5, r6, pc}

000d73ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d73ac:	6803      	ldr	r3, [r0, #0]
   d73ae:	689b      	ldr	r3, [r3, #8]
   d73b0:	4718      	bx	r3

000d73b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d73b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d73b8:	f7ff fff8 	bl	d73ac <_ZN5Print5printEc>
  n += print('\n');
   d73bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d73be:	4604      	mov	r4, r0
  n += print('\n');
   d73c0:	4628      	mov	r0, r5
   d73c2:	f7ff fff3 	bl	d73ac <_ZN5Print5printEc>
  return n;
}
   d73c6:	4420      	add	r0, r4
   d73c8:	bd38      	pop	{r3, r4, r5, pc}

000d73ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d73ca:	b538      	push	{r3, r4, r5, lr}
   d73cc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d73ce:	f7ff ffdd 	bl	d738c <_ZN5Print5writeEPKc>
   d73d2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d73d4:	4628      	mov	r0, r5
   d73d6:	f7ff ffec 	bl	d73b2 <_ZN5Print7printlnEv>
  return n;
}
   d73da:	4420      	add	r0, r4
   d73dc:	bd38      	pop	{r3, r4, r5, pc}

000d73de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d73de:	b530      	push	{r4, r5, lr}
   d73e0:	b08b      	sub	sp, #44	; 0x2c
   d73e2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d73e4:	2100      	movs	r1, #0
   d73e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d73ea:	2a01      	cmp	r2, #1
   d73ec:	bf98      	it	ls
   d73ee:	220a      	movls	r2, #10
   d73f0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d73f4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d73f8:	fb05 3312 	mls	r3, r5, r2, r3
   d73fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7400:	2b09      	cmp	r3, #9
   d7402:	bf94      	ite	ls
   d7404:	3330      	addls	r3, #48	; 0x30
   d7406:	3337      	addhi	r3, #55	; 0x37
   d7408:	b2db      	uxtb	r3, r3
   d740a:	4621      	mov	r1, r4
   d740c:	f804 3901 	strb.w	r3, [r4], #-1
   d7410:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7412:	2d00      	cmp	r5, #0
   d7414:	d1ee      	bne.n	d73f4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7416:	f7ff ffb9 	bl	d738c <_ZN5Print5writeEPKc>
}
   d741a:	b00b      	add	sp, #44	; 0x2c
   d741c:	bd30      	pop	{r4, r5, pc}

000d741e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d741e:	b510      	push	{r4, lr}
   d7420:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7422:	f7fc feba 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d7426:	4620      	mov	r0, r4
   d7428:	bd10      	pop	{r4, pc}
	...

000d742c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d742c:	4803      	ldr	r0, [pc, #12]	; (d743c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d742e:	4a04      	ldr	r2, [pc, #16]	; (d7440 <_GLOBAL__sub_I_RGB+0x14>)
   d7430:	4904      	ldr	r1, [pc, #16]	; (d7444 <_GLOBAL__sub_I_RGB+0x18>)
   d7432:	2300      	movs	r3, #0
   d7434:	6083      	str	r3, [r0, #8]
   d7436:	f000 bd01 	b.w	d7e3c <__aeabi_atexit>
   d743a:	bf00      	nop
   d743c:	2003e54c 	.word	0x2003e54c
   d7440:	2003e1c0 	.word	0x2003e1c0
   d7444:	000d741f 	.word	0x000d741f

000d7448 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7448:	b510      	push	{r4, lr}
   d744a:	4604      	mov	r4, r0
{
    _spi = spi;
   d744c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d744e:	4608      	mov	r0, r1
   d7450:	f7fe fdc8 	bl	d5fe4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7454:	2300      	movs	r3, #0
   d7456:	6063      	str	r3, [r4, #4]
}
   d7458:	4620      	mov	r0, r4
   d745a:	bd10      	pop	{r4, pc}

000d745c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d745c:	7800      	ldrb	r0, [r0, #0]
   d745e:	f7fe bdc9 	b.w	d5ff4 <HAL_SPI_Is_Enabled>

000d7462 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7462:	b510      	push	{r4, lr}
   d7464:	4604      	mov	r4, r0
{
	free(buffer);
   d7466:	6800      	ldr	r0, [r0, #0]
   d7468:	f7fe ff76 	bl	d6358 <free>
}
   d746c:	4620      	mov	r0, r4
   d746e:	bd10      	pop	{r4, pc}

000d7470 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7470:	b510      	push	{r4, lr}
   d7472:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7474:	6800      	ldr	r0, [r0, #0]
   d7476:	b108      	cbz	r0, d747c <_ZN6String10invalidateEv+0xc>
   d7478:	f7fe ff6e 	bl	d6358 <free>
	buffer = NULL;
   d747c:	2300      	movs	r3, #0
   d747e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7480:	60a3      	str	r3, [r4, #8]
   d7482:	6063      	str	r3, [r4, #4]
   d7484:	bd10      	pop	{r4, pc}

000d7486 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7486:	b538      	push	{r3, r4, r5, lr}
   d7488:	4604      	mov	r4, r0
   d748a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d748c:	6800      	ldr	r0, [r0, #0]
   d748e:	3101      	adds	r1, #1
   d7490:	f7fe ff6a 	bl	d6368 <realloc>
	if (newbuffer) {
   d7494:	b110      	cbz	r0, d749c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7496:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d749a:	2001      	movs	r0, #1
	}
	return 0;
}
   d749c:	bd38      	pop	{r3, r4, r5, pc}

000d749e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d749e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d74a0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d74a2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d74a4:	b113      	cbz	r3, d74ac <_ZN6String7reserveEj+0xe>
   d74a6:	6843      	ldr	r3, [r0, #4]
   d74a8:	428b      	cmp	r3, r1
   d74aa:	d207      	bcs.n	d74bc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d74ac:	4620      	mov	r0, r4
   d74ae:	f7ff ffea 	bl	d7486 <_ZN6String12changeBufferEj>
   d74b2:	b120      	cbz	r0, d74be <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d74b4:	68a3      	ldr	r3, [r4, #8]
   d74b6:	b90b      	cbnz	r3, d74bc <_ZN6String7reserveEj+0x1e>
   d74b8:	6822      	ldr	r2, [r4, #0]
   d74ba:	7013      	strb	r3, [r2, #0]
   d74bc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d74be:	bd10      	pop	{r4, pc}

000d74c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d74c0:	b570      	push	{r4, r5, r6, lr}
   d74c2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d74c4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d74c6:	4604      	mov	r4, r0
   d74c8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d74ca:	f7ff ffe8 	bl	d749e <_ZN6String7reserveEj>
   d74ce:	b918      	cbnz	r0, d74d8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d74d0:	4620      	mov	r0, r4
   d74d2:	f7ff ffcd 	bl	d7470 <_ZN6String10invalidateEv>
		return *this;
   d74d6:	e009      	b.n	d74ec <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d74d8:	462a      	mov	r2, r5
   d74da:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d74dc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d74de:	6820      	ldr	r0, [r4, #0]
   d74e0:	f001 fbc4 	bl	d8c6c <memcpy>
	buffer[len] = 0;
   d74e4:	6822      	ldr	r2, [r4, #0]
   d74e6:	68a3      	ldr	r3, [r4, #8]
   d74e8:	2100      	movs	r1, #0
   d74ea:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d74ec:	4620      	mov	r0, r4
   d74ee:	bd70      	pop	{r4, r5, r6, pc}

000d74f0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d74f0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d74f2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d74f4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d74f6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d74f8:	6043      	str	r3, [r0, #4]
	len = 0;
   d74fa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d74fc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d74fe:	460d      	mov	r5, r1
   d7500:	b139      	cbz	r1, d7512 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7502:	4608      	mov	r0, r1
   d7504:	f001 fc1b 	bl	d8d3e <strlen>
   d7508:	4629      	mov	r1, r5
   d750a:	4602      	mov	r2, r0
   d750c:	4620      	mov	r0, r4
   d750e:	f7ff ffd7 	bl	d74c0 <_ZN6String4copyEPKcj>
}
   d7512:	4620      	mov	r0, r4
   d7514:	bd38      	pop	{r3, r4, r5, pc}

000d7516 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7516:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7518:	b510      	push	{r4, lr}
   d751a:	460b      	mov	r3, r1
   d751c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d751e:	d007      	beq.n	d7530 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7520:	6809      	ldr	r1, [r1, #0]
   d7522:	b119      	cbz	r1, d752c <_ZN6StringaSERKS_+0x16>
   d7524:	689a      	ldr	r2, [r3, #8]
   d7526:	f7ff ffcb 	bl	d74c0 <_ZN6String4copyEPKcj>
   d752a:	e001      	b.n	d7530 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d752c:	f7ff ffa0 	bl	d7470 <_ZN6String10invalidateEv>

	return *this;
}
   d7530:	4620      	mov	r0, r4
   d7532:	bd10      	pop	{r4, pc}

000d7534 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7534:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7536:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7538:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d753a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d753c:	6043      	str	r3, [r0, #4]
	len = 0;
   d753e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7540:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7542:	f7ff ffe8 	bl	d7516 <_ZN6StringaSERKS_>
}
   d7546:	4620      	mov	r0, r4
   d7548:	bd10      	pop	{r4, pc}

000d754a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d754a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d754c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d754e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7550:	b912      	cbnz	r2, d7558 <_ZNK6String6equalsEPKc+0xe>
   d7552:	b919      	cbnz	r1, d755c <_ZNK6String6equalsEPKc+0x12>
   d7554:	2001      	movs	r0, #1
   d7556:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7558:	b911      	cbnz	r1, d7560 <_ZNK6String6equalsEPKc+0x16>
   d755a:	6803      	ldr	r3, [r0, #0]
   d755c:	7818      	ldrb	r0, [r3, #0]
   d755e:	e002      	b.n	d7566 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7560:	6800      	ldr	r0, [r0, #0]
   d7562:	f001 fbbf 	bl	d8ce4 <strcmp>
   d7566:	fab0 f080 	clz	r0, r0
   d756a:	0940      	lsrs	r0, r0, #5
}
   d756c:	bd08      	pop	{r3, pc}

000d756e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d756e:	b570      	push	{r4, r5, r6, lr}
   d7570:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7572:	b19a      	cbz	r2, d759c <_ZNK6String8getBytesEPhjj+0x2e>
   d7574:	b191      	cbz	r1, d759c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d7576:	6885      	ldr	r5, [r0, #8]
   d7578:	429d      	cmp	r5, r3
   d757a:	d802      	bhi.n	d7582 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d757c:	2300      	movs	r3, #0
   d757e:	700b      	strb	r3, [r1, #0]
		return;
   d7580:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7582:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d7584:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d7586:	6801      	ldr	r1, [r0, #0]
   d7588:	42ac      	cmp	r4, r5
   d758a:	bf28      	it	cs
   d758c:	462c      	movcs	r4, r5
   d758e:	4419      	add	r1, r3
   d7590:	4622      	mov	r2, r4
   d7592:	4630      	mov	r0, r6
   d7594:	f001 fbf0 	bl	d8d78 <strncpy>
	buf[n] = 0;
   d7598:	2300      	movs	r3, #0
   d759a:	5533      	strb	r3, [r6, r4]
   d759c:	bd70      	pop	{r4, r5, r6, pc}

000d759e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d759e:	b510      	push	{r4, lr}
   d75a0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d75a2:	6800      	ldr	r0, [r0, #0]
   d75a4:	b118      	cbz	r0, d75ae <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d75a6:	f7fe fed7 	bl	d6358 <free>
            wakeupSource_ = nullptr;
   d75aa:	2300      	movs	r3, #0
   d75ac:	6023      	str	r3, [r4, #0]
   d75ae:	bd10      	pop	{r4, pc}

000d75b0 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d75b0:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d75b2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d75b6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d75b8:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d75ba:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d75bc:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d75c0:	f8c0 2006 	str.w	r2, [r0, #6]
   d75c4:	889b      	ldrh	r3, [r3, #4]
   d75c6:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d75c8:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d75ca:	f7ff ffe8 	bl	d759e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d75ce:	682b      	ldr	r3, [r5, #0]
   d75d0:	b113      	cbz	r3, d75d8 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d75d2:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d75d4:	2300      	movs	r3, #0
   d75d6:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d75d8:	4620      	mov	r0, r4
   d75da:	bd38      	pop	{r3, r4, r5, pc}

000d75dc <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d75dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d75e0:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d75e2:	b90b      	cbnz	r3, d75e8 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d75e4:	680a      	ldr	r2, [r1, #0]
   d75e6:	b19a      	cbz	r2, d7610 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d75e8:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d75ea:	b15c      	cbz	r4, d7604 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d75ec:	88a2      	ldrh	r2, [r4, #4]
   d75ee:	2a01      	cmp	r2, #1
   d75f0:	d003      	beq.n	d75fa <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d75f2:	2a04      	cmp	r2, #4
   d75f4:	d106      	bne.n	d7604 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d75f6:	2202      	movs	r2, #2
   d75f8:	e005      	b.n	d7606 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d75fa:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d75fc:	814c      	strh	r4, [r1, #10]
   d75fe:	718a      	strb	r2, [r1, #6]
   d7600:	810b      	strh	r3, [r1, #8]
                    break;
   d7602:	e005      	b.n	d7610 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7604:	2204      	movs	r2, #4
   d7606:	810b      	strh	r3, [r1, #8]
   d7608:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d760c:	718a      	strb	r2, [r1, #6]
   d760e:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d7610:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d7614:	6003      	str	r3, [r0, #0]
   d7616:	888b      	ldrh	r3, [r1, #4]
   d7618:	8083      	strh	r3, [r0, #4]
    }
   d761a:	bd10      	pop	{r4, pc}

000d761c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d761c:	b538      	push	{r3, r4, r5, lr}
   d761e:	460c      	mov	r4, r1
   d7620:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d7622:	f7ff ffbc 	bl	d759e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d7626:	b144      	cbz	r4, d763a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d7628:	8820      	ldrh	r0, [r4, #0]
   d762a:	f7fe fe8d 	bl	d6348 <malloc>
   d762e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7630:	b128      	cbz	r0, d763e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7632:	8822      	ldrh	r2, [r4, #0]
   d7634:	4621      	mov	r1, r4
   d7636:	f001 fb19 	bl	d8c6c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d763a:	2000      	movs	r0, #0
   d763c:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d763e:	4801      	ldr	r0, [pc, #4]	; (d7644 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d7640:	bd38      	pop	{r3, r4, r5, pc}
   d7642:	bf00      	nop
   d7644:	fffffefc 	.word	0xfffffefc

000d7648 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d7648:	4601      	mov	r1, r0
   d764a:	2200      	movs	r2, #0
   d764c:	208c      	movs	r0, #140	; 0x8c
   d764e:	f7fe bbb1 	b.w	d5db4 <HAL_Core_System_Reset_Ex>

000d7652 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d7652:	2000      	movs	r0, #0
   d7654:	f7ff bff8 	b.w	d7648 <_ZN11SystemClass5resetEm>

000d7658 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d7658:	b5f0      	push	{r4, r5, r6, r7, lr}
   d765a:	4d30      	ldr	r5, [pc, #192]	; (d771c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d765c:	7d0b      	ldrb	r3, [r1, #20]
   d765e:	4604      	mov	r4, r0
   d7660:	b08b      	sub	sp, #44	; 0x2c
   d7662:	4608      	mov	r0, r1
   d7664:	1daf      	adds	r7, r5, #6
   d7666:	b313      	cbz	r3, d76ae <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d7668:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d766a:	791b      	ldrb	r3, [r3, #4]
   d766c:	b1fb      	cbz	r3, d76ae <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d766e:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7670:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7674:	a902      	add	r1, sp, #8
   d7676:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7678:	9202      	str	r2, [sp, #8]
   d767a:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d767e:	f88d 200e 	strb.w	r2, [sp, #14]
   d7682:	f8ad 2010 	strh.w	r2, [sp, #16]
   d7686:	f8ad 3012 	strh.w	r3, [sp, #18]
   d768a:	f7fe fda3 	bl	d61d4 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d768e:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d7690:	b200      	sxth	r0, r0
   d7692:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d7696:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d769a:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d769c:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d769e:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d76a2:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d76a4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d76a6:	4628      	mov	r0, r5
   d76a8:	f7ff ffb8 	bl	d761c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d76ac:	e01c      	b.n	d76e8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d76ae:	2320      	movs	r3, #32
   d76b0:	2600      	movs	r6, #0
   d76b2:	9302      	str	r3, [sp, #8]
   d76b4:	4b1a      	ldr	r3, [pc, #104]	; (d7720 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d76b6:	9300      	str	r3, [sp, #0]
   d76b8:	491a      	ldr	r1, [pc, #104]	; (d7724 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d76ba:	9603      	str	r6, [sp, #12]
   d76bc:	4633      	mov	r3, r6
   d76be:	2032      	movs	r0, #50	; 0x32
   d76c0:	aa02      	add	r2, sp, #8
   d76c2:	f7fe fd17 	bl	d60f4 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d76ca:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d76ce:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d76d0:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d76d4:	4811      	ldr	r0, [pc, #68]	; (d771c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d76d6:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76d8:	f88d 600e 	strb.w	r6, [sp, #14]
   d76dc:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d76e0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d76e4:	f7ff ff64 	bl	d75b0 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d76e8:	a802      	add	r0, sp, #8
   d76ea:	f7ff ff58 	bl	d759e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d76ee:	2300      	movs	r3, #0
   d76f0:	6023      	str	r3, [r4, #0]
   d76f2:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76f4:	71a3      	strb	r3, [r4, #6]
   d76f6:	8123      	strh	r3, [r4, #8]
   d76f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d76fc:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d76fe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d7702:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7704:	683b      	ldr	r3, [r7, #0]
   d7706:	f8c4 3006 	str.w	r3, [r4, #6]
   d770a:	88bb      	ldrh	r3, [r7, #4]
   d770c:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d770e:	6829      	ldr	r1, [r5, #0]
   d7710:	4620      	mov	r0, r4
   d7712:	f7ff ff83 	bl	d761c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d7716:	4620      	mov	r0, r4
   d7718:	b00b      	add	sp, #44	; 0x2c
   d771a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d771c:	2003e55c 	.word	0x2003e55c
   d7720:	000d9e3f 	.word	0x000d9e3f
   d7724:	000d9e38 	.word	0x000d9e38

000d7728 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d7728:	b530      	push	{r4, r5, lr}
   d772a:	4604      	mov	r4, r0
   d772c:	b085      	sub	sp, #20
   d772e:	4608      	mov	r0, r1
   d7730:	4611      	mov	r1, r2
   d7732:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d7734:	2300      	movs	r3, #0
   d7736:	f7fe fd07 	bl	d6148 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d773a:	4d0d      	ldr	r5, [pc, #52]	; (d7770 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d773c:	f8ad 000c 	strh.w	r0, [sp, #12]
   d7740:	2300      	movs	r3, #0
   d7742:	a901      	add	r1, sp, #4
   d7744:	9301      	str	r3, [sp, #4]
   d7746:	f8ad 3008 	strh.w	r3, [sp, #8]
   d774a:	f88d 300a 	strb.w	r3, [sp, #10]
   d774e:	4628      	mov	r0, r5
   d7750:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7754:	f8ad 300e 	strh.w	r3, [sp, #14]
   d7758:	f7ff ff2a 	bl	d75b0 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d775c:	a801      	add	r0, sp, #4
   d775e:	f7ff ff1e 	bl	d759e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d7762:	4620      	mov	r0, r4
   d7764:	4629      	mov	r1, r5
   d7766:	f7ff ff39 	bl	d75dc <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d776a:	4620      	mov	r0, r4
   d776c:	b005      	add	sp, #20
   d776e:	bd30      	pop	{r4, r5, pc}
   d7770:	2003e55c 	.word	0x2003e55c

000d7774 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7774:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7776:	4c09      	ldr	r4, [pc, #36]	; (d779c <_GLOBAL__sub_I_System+0x28>)
   d7778:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d777a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d777e:	6020      	str	r0, [r4, #0]
   d7780:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7782:	71a0      	strb	r0, [r4, #6]
   d7784:	8120      	strh	r0, [r4, #8]
   d7786:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7788:	f7fe fcce 	bl	d6128 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d778c:	4620      	mov	r0, r4
   d778e:	4a04      	ldr	r2, [pc, #16]	; (d77a0 <_GLOBAL__sub_I_System+0x2c>)
   d7790:	4904      	ldr	r1, [pc, #16]	; (d77a4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7796:	f000 bb51 	b.w	d7e3c <__aeabi_atexit>
   d779a:	bf00      	nop
   d779c:	2003e55c 	.word	0x2003e55c
   d77a0:	2003e1c0 	.word	0x2003e1c0
   d77a4:	000d418b 	.word	0x000d418b

000d77a8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d77a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d77aa:	4b14      	ldr	r3, [pc, #80]	; (d77fc <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d77ac:	4f14      	ldr	r7, [pc, #80]	; (d7800 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d77ae:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d77b0:	4b14      	ldr	r3, [pc, #80]	; (d7804 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d77b2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d77b4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d77b6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d77b8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d77ba:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d77bc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d77be:	d01b      	beq.n	d77f8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d77c0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d77c2:	ad01      	add	r5, sp, #4
   d77c4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d77c8:	f001 f958 	bl	d8a7c <localtime>
	calendar_time->tm_year += 1900;
   d77cc:	6943      	ldr	r3, [r0, #20]
   d77ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d77d2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d77d4:	4604      	mov	r4, r0
   d77d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d77d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d77dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77de:	f8d4 e000 	ldr.w	lr, [r4]
   d77e2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d77e6:	ad01      	add	r5, sp, #4
   d77e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77ea:	4c07      	ldr	r4, [pc, #28]	; (d7808 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d77ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d77f2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d77f4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d77f8:	b00b      	add	sp, #44	; 0x2c
   d77fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d77fc:	2003e598 	.word	0x2003e598
   d7800:	2003e594 	.word	0x2003e594
   d7804:	2003e590 	.word	0x2003e590
   d7808:	2003e568 	.word	0x2003e568

000d780c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d780c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d780e:	2000      	movs	r0, #0
   d7810:	f7fe fd3a 	bl	d6288 <spark_sync_time_pending>
   d7814:	b128      	cbz	r0, d7822 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7816:	f7fe fd0f 	bl	d6238 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d781a:	f080 0001 	eor.w	r0, r0, #1
   d781e:	b2c0      	uxtb	r0, r0
   d7820:	bd08      	pop	{r3, pc}
   d7822:	2001      	movs	r0, #1
    }
   d7824:	bd08      	pop	{r3, pc}

000d7826 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7826:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7828:	2000      	movs	r0, #0
   d782a:	f7fe fb13 	bl	d5e54 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d782e:	4604      	mov	r4, r0
   d7830:	b968      	cbnz	r0, d784e <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7832:	f7fe fc71 	bl	d6118 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7836:	2801      	cmp	r0, #1
   d7838:	d10b      	bne.n	d7852 <_ZN9TimeClass7isValidEv+0x2c>
   d783a:	4620      	mov	r0, r4
   d783c:	f7fe fca4 	bl	d6188 <system_thread_get_state>
   d7840:	b938      	cbnz	r0, d7852 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7842:	f7ff ffe3 	bl	d780c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7846:	b930      	cbnz	r0, d7856 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7848:	f7fe fcde 	bl	d6208 <spark_process>
   d784c:	e7f9      	b.n	d7842 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d784e:	2001      	movs	r0, #1
   d7850:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7852:	2000      	movs	r0, #0
   d7854:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7856:	f7ff ffd9 	bl	d780c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d785a:	2000      	movs	r0, #0
   d785c:	f7fe fafa 	bl	d5e54 <HAL_RTC_Time_Is_Valid>
   d7860:	3000      	adds	r0, #0
   d7862:	bf18      	it	ne
   d7864:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7866:	bd10      	pop	{r4, pc}

000d7868 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7868:	b508      	push	{r3, lr}
    (void)isValid();
   d786a:	f7ff ffdc 	bl	d7826 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d786e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7872:	f7fe bac7 	b.w	d5e04 <HAL_RTC_Get_UnixTime>
	...

000d7878 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d7878:	b508      	push	{r3, lr}
	return hour(now());
   d787a:	f7ff fff5 	bl	d7868 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d787e:	f7ff ff93 	bl	d77a8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d7882:	4b01      	ldr	r3, [pc, #4]	; (d7888 <_ZN9TimeClass4hourEv+0x10>)
   d7884:	6898      	ldr	r0, [r3, #8]
   d7886:	bd08      	pop	{r3, pc}
   d7888:	2003e568 	.word	0x2003e568

000d788c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d788c:	b508      	push	{r3, lr}
	return minute(now());
   d788e:	f7ff ffeb 	bl	d7868 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7892:	f7ff ff89 	bl	d77a8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d7896:	4b01      	ldr	r3, [pc, #4]	; (d789c <_ZN9TimeClass6minuteEv+0x10>)
   d7898:	6858      	ldr	r0, [r3, #4]
   d789a:	bd08      	pop	{r3, pc}
   d789c:	2003e568 	.word	0x2003e568

000d78a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d78a0:	4b02      	ldr	r3, [pc, #8]	; (d78ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d78a2:	681a      	ldr	r2, [r3, #0]
   d78a4:	4b02      	ldr	r3, [pc, #8]	; (d78b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d78a6:	601a      	str	r2, [r3, #0]
   d78a8:	4770      	bx	lr
   d78aa:	bf00      	nop
   d78ac:	2003e108 	.word	0x2003e108
   d78b0:	2003e58c 	.word	0x2003e58c

000d78b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d78b4:	4770      	bx	lr

000d78b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78b6:	7441      	strb	r1, [r0, #17]
   d78b8:	4770      	bx	lr

000d78ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d78ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d78bc:	7c00      	ldrb	r0, [r0, #16]
   d78be:	f7fe fbd9 	bl	d6074 <HAL_USART_Available_Data_For_Write>
}
   d78c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78c6:	bd08      	pop	{r3, pc}

000d78c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d78c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d78ca:	7c00      	ldrb	r0, [r0, #16]
   d78cc:	f7fe fbaa 	bl	d6024 <HAL_USART_Available_Data>
}
   d78d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78d4:	bd08      	pop	{r3, pc}

000d78d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d78d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d78d8:	7c00      	ldrb	r0, [r0, #16]
   d78da:	f7fe fbb3 	bl	d6044 <HAL_USART_Peek_Data>
}
   d78de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d78e2:	bf28      	it	cs
   d78e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d78e8:	bd08      	pop	{r3, pc}

000d78ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d78ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d78ec:	7c00      	ldrb	r0, [r0, #16]
   d78ee:	f7fe fba1 	bl	d6034 <HAL_USART_Read_Data>
}
   d78f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d78f6:	bf28      	it	cs
   d78f8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d78fc:	bd08      	pop	{r3, pc}

000d78fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d78fe:	7c00      	ldrb	r0, [r0, #16]
   d7900:	f7fe bba8 	b.w	d6054 <HAL_USART_Flush_Data>

000d7904 <_ZN11USARTSerialD0Ev>:
   d7904:	b510      	push	{r4, lr}
   d7906:	2114      	movs	r1, #20
   d7908:	4604      	mov	r4, r0
   d790a:	f000 fa9c 	bl	d7e46 <_ZdlPvj>
   d790e:	4620      	mov	r0, r4
   d7910:	bd10      	pop	{r4, pc}

000d7912 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7912:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7914:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7916:	4604      	mov	r4, r0
   d7918:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d791a:	b925      	cbnz	r5, d7926 <_ZN11USARTSerial5writeEh+0x14>
   d791c:	7c00      	ldrb	r0, [r0, #16]
   d791e:	f7fe fba9 	bl	d6074 <HAL_USART_Available_Data_For_Write>
   d7922:	2800      	cmp	r0, #0
   d7924:	dd05      	ble.n	d7932 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7926:	4631      	mov	r1, r6
   d7928:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d792a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d792e:	f7fe bb71 	b.w	d6014 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7932:	4628      	mov	r0, r5
   d7934:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7938 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7938:	b510      	push	{r4, lr}
   d793a:	4604      	mov	r4, r0
   d793c:	4608      	mov	r0, r1
   d793e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7940:	2200      	movs	r2, #0
   d7942:	6062      	str	r2, [r4, #4]
   d7944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7948:	60a2      	str	r2, [r4, #8]
   d794a:	4a05      	ldr	r2, [pc, #20]	; (d7960 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d794c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d794e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7950:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7952:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7954:	461a      	mov	r2, r3
   d7956:	f7fe fb55 	bl	d6004 <HAL_USART_Init>
}
   d795a:	4620      	mov	r0, r4
   d795c:	bd10      	pop	{r4, pc}
   d795e:	bf00      	nop
   d7960:	000d9e98 	.word	0x000d9e98

000d7964 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7964:	7c00      	ldrb	r0, [r0, #16]
   d7966:	f7fe bb7d 	b.w	d6064 <HAL_USART_Is_Enabled>
	...

000d796c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d796c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d796e:	4d0c      	ldr	r5, [pc, #48]	; (d79a0 <_Z22__fetch_global_Serial1v+0x34>)
   d7970:	6829      	ldr	r1, [r5, #0]
   d7972:	f011 0401 	ands.w	r4, r1, #1
   d7976:	d111      	bne.n	d799c <_Z22__fetch_global_Serial1v+0x30>
   d7978:	4628      	mov	r0, r5
   d797a:	f7fc fb94 	bl	d40a6 <__cxa_guard_acquire>
   d797e:	b168      	cbz	r0, d799c <_Z22__fetch_global_Serial1v+0x30>
   d7980:	4a08      	ldr	r2, [pc, #32]	; (d79a4 <_Z22__fetch_global_Serial1v+0x38>)
   d7982:	4b09      	ldr	r3, [pc, #36]	; (d79a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7984:	4809      	ldr	r0, [pc, #36]	; (d79ac <_Z22__fetch_global_Serial1v+0x40>)
   d7986:	4621      	mov	r1, r4
   d7988:	f7ff ffd6 	bl	d7938 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d798c:	4628      	mov	r0, r5
   d798e:	f7fc fb8f 	bl	d40b0 <__cxa_guard_release>
   d7992:	4a07      	ldr	r2, [pc, #28]	; (d79b0 <_Z22__fetch_global_Serial1v+0x44>)
   d7994:	4907      	ldr	r1, [pc, #28]	; (d79b4 <_Z22__fetch_global_Serial1v+0x48>)
   d7996:	4805      	ldr	r0, [pc, #20]	; (d79ac <_Z22__fetch_global_Serial1v+0x40>)
   d7998:	f000 fa50 	bl	d7e3c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d799c:	4803      	ldr	r0, [pc, #12]	; (d79ac <_Z22__fetch_global_Serial1v+0x40>)
   d799e:	bd38      	pop	{r3, r4, r5, pc}
   d79a0:	2003e634 	.word	0x2003e634
   d79a4:	2003e638 	.word	0x2003e638
   d79a8:	2003e5b0 	.word	0x2003e5b0
   d79ac:	2003e59c 	.word	0x2003e59c
   d79b0:	2003e1c0 	.word	0x2003e1c0
   d79b4:	000d78b5 	.word	0x000d78b5

000d79b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d79b8:	7441      	strb	r1, [r0, #17]
   d79ba:	4770      	bx	lr

000d79bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d79bc:	4770      	bx	lr

000d79be <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d79be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d79c0:	2100      	movs	r1, #0
   d79c2:	7c00      	ldrb	r0, [r0, #16]
   d79c4:	f7fe fb76 	bl	d60b4 <HAL_USB_USART_Receive_Data>
}
   d79c8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d79cc:	bf28      	it	cs
   d79ce:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d79d2:	bd08      	pop	{r3, pc}

000d79d4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d79d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d79d6:	2101      	movs	r1, #1
   d79d8:	7c00      	ldrb	r0, [r0, #16]
   d79da:	f7fe fb6b 	bl	d60b4 <HAL_USB_USART_Receive_Data>
}
   d79de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d79e2:	bf28      	it	cs
   d79e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d79e8:	bd08      	pop	{r3, pc}

000d79ea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d79ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d79ec:	7c00      	ldrb	r0, [r0, #16]
   d79ee:	f7fe fb59 	bl	d60a4 <HAL_USB_USART_Available_Data_For_Write>
}
   d79f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d79f6:	bd08      	pop	{r3, pc}

000d79f8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d79f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d79fa:	7c00      	ldrb	r0, [r0, #16]
   d79fc:	f7fe fb4a 	bl	d6094 <HAL_USB_USART_Available_Data>
}
   d7a00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a04:	bd08      	pop	{r3, pc}

000d7a06 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7a06:	7c00      	ldrb	r0, [r0, #16]
   d7a08:	f7fe bb64 	b.w	d60d4 <HAL_USB_USART_Flush_Data>

000d7a0c <_ZN9USBSerialD0Ev>:
   d7a0c:	b510      	push	{r4, lr}
   d7a0e:	2114      	movs	r1, #20
   d7a10:	4604      	mov	r4, r0
   d7a12:	f000 fa18 	bl	d7e46 <_ZdlPvj>
   d7a16:	4620      	mov	r0, r4
   d7a18:	bd10      	pop	{r4, pc}

000d7a1a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a1a:	b538      	push	{r3, r4, r5, lr}
   d7a1c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a1e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a20:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a22:	f7fe fb3f 	bl	d60a4 <HAL_USB_USART_Available_Data_For_Write>
   d7a26:	2800      	cmp	r0, #0
   d7a28:	dc01      	bgt.n	d7a2e <_ZN9USBSerial5writeEh+0x14>
   d7a2a:	7c60      	ldrb	r0, [r4, #17]
   d7a2c:	b128      	cbz	r0, d7a3a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7a2e:	4629      	mov	r1, r5
   d7a30:	7c20      	ldrb	r0, [r4, #16]
   d7a32:	f7fe fb47 	bl	d60c4 <HAL_USB_USART_Send_Data>
   d7a36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7a3a:	bd38      	pop	{r3, r4, r5, pc}

000d7a3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a3c:	b510      	push	{r4, lr}
   d7a3e:	4604      	mov	r4, r0
   d7a40:	2300      	movs	r3, #0
   d7a42:	6063      	str	r3, [r4, #4]
   d7a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a48:	60a3      	str	r3, [r4, #8]
   d7a4a:	4b05      	ldr	r3, [pc, #20]	; (d7a60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7a4c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7a4e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a50:	4608      	mov	r0, r1
{
  _serial = serial;
   d7a52:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7a54:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7a56:	4611      	mov	r1, r2
   d7a58:	f7fe fb14 	bl	d6084 <HAL_USB_USART_Init>
}
   d7a5c:	4620      	mov	r0, r4
   d7a5e:	bd10      	pop	{r4, pc}
   d7a60:	000d9ec8 	.word	0x000d9ec8

000d7a64 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7a66:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a68:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7a6a:	2100      	movs	r1, #0
   d7a6c:	f001 f909 	bl	d8c82 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7a70:	4620      	mov	r0, r4
   d7a72:	bd10      	pop	{r4, pc}

000d7a74 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7a74:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a76:	4d0e      	ldr	r5, [pc, #56]	; (d7ab0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7a78:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7a7a:	a801      	add	r0, sp, #4
   d7a7c:	f7ff fff2 	bl	d7a64 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a80:	6829      	ldr	r1, [r5, #0]
   d7a82:	f011 0401 	ands.w	r4, r1, #1
   d7a86:	d110      	bne.n	d7aaa <_Z16_fetch_usbserialv+0x36>
   d7a88:	4628      	mov	r0, r5
   d7a8a:	f7fc fb0c 	bl	d40a6 <__cxa_guard_acquire>
   d7a8e:	b160      	cbz	r0, d7aaa <_Z16_fetch_usbserialv+0x36>
   d7a90:	aa01      	add	r2, sp, #4
   d7a92:	4621      	mov	r1, r4
   d7a94:	4807      	ldr	r0, [pc, #28]	; (d7ab4 <_Z16_fetch_usbserialv+0x40>)
   d7a96:	f7ff ffd1 	bl	d7a3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7a9a:	4628      	mov	r0, r5
   d7a9c:	f7fc fb08 	bl	d40b0 <__cxa_guard_release>
   d7aa0:	4a05      	ldr	r2, [pc, #20]	; (d7ab8 <_Z16_fetch_usbserialv+0x44>)
   d7aa2:	4906      	ldr	r1, [pc, #24]	; (d7abc <_Z16_fetch_usbserialv+0x48>)
   d7aa4:	4803      	ldr	r0, [pc, #12]	; (d7ab4 <_Z16_fetch_usbserialv+0x40>)
   d7aa6:	f000 f9c9 	bl	d7e3c <__aeabi_atexit>
	return _usbserial;
}
   d7aaa:	4802      	ldr	r0, [pc, #8]	; (d7ab4 <_Z16_fetch_usbserialv+0x40>)
   d7aac:	b007      	add	sp, #28
   d7aae:	bd30      	pop	{r4, r5, pc}
   d7ab0:	2003e6bc 	.word	0x2003e6bc
   d7ab4:	2003e6c0 	.word	0x2003e6c0
   d7ab8:	2003e1c0 	.word	0x2003e1c0
   d7abc:	000d79bd 	.word	0x000d79bd

000d7ac0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7ac0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7ac2:	4b0c      	ldr	r3, [pc, #48]	; (d7af4 <serialEventRun+0x34>)
   d7ac4:	b133      	cbz	r3, d7ad4 <serialEventRun+0x14>
   d7ac6:	f7ff ffd5 	bl	d7a74 <_Z16_fetch_usbserialv>
   d7aca:	6803      	ldr	r3, [r0, #0]
   d7acc:	691b      	ldr	r3, [r3, #16]
   d7ace:	4798      	blx	r3
   d7ad0:	2800      	cmp	r0, #0
   d7ad2:	dc09      	bgt.n	d7ae8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7ad4:	4b08      	ldr	r3, [pc, #32]	; (d7af8 <serialEventRun+0x38>)
   d7ad6:	b163      	cbz	r3, d7af2 <serialEventRun+0x32>
   d7ad8:	f7ff ff48 	bl	d796c <_Z22__fetch_global_Serial1v>
   d7adc:	6803      	ldr	r3, [r0, #0]
   d7ade:	691b      	ldr	r3, [r3, #16]
   d7ae0:	4798      	blx	r3
   d7ae2:	2800      	cmp	r0, #0
   d7ae4:	dc03      	bgt.n	d7aee <serialEventRun+0x2e>
   d7ae6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7ae8:	f3af 8000 	nop.w
   d7aec:	e7f2      	b.n	d7ad4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7aee:	f3af 8000 	nop.w
   d7af2:	bd08      	pop	{r3, pc}
	...

000d7afc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7afc:	b508      	push	{r3, lr}
	serialEventRun();
   d7afe:	f7ff ffdf 	bl	d7ac0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7b02:	f7fe f977 	bl	d5df4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7b06:	4b01      	ldr	r3, [pc, #4]	; (d7b0c <_post_loop+0x10>)
   d7b08:	6018      	str	r0, [r3, #0]
   d7b0a:	bd08      	pop	{r3, pc}
   d7b0c:	2003e6e8 	.word	0x2003e6e8

000d7b10 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7b10:	4802      	ldr	r0, [pc, #8]	; (d7b1c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7b12:	4a03      	ldr	r2, [pc, #12]	; (d7b20 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7b14:	4903      	ldr	r1, [pc, #12]	; (d7b24 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7b16:	1a12      	subs	r2, r2, r0
   d7b18:	f001 b8a8 	b.w	d8c6c <memcpy>
   d7b1c:	2003f400 	.word	0x2003f400
   d7b20:	2003f404 	.word	0x2003f404
   d7b24:	000da130 	.word	0x000da130

000d7b28 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7b28:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7b2a:	2300      	movs	r3, #0
   d7b2c:	9300      	str	r3, [sp, #0]
   d7b2e:	461a      	mov	r2, r3
   d7b30:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7b34:	f7fe fb3a 	bl	d61ac <system_ctrl_set_result>
}
   d7b38:	b003      	add	sp, #12
   d7b3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7b40 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7b40:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7b42:	8843      	ldrh	r3, [r0, #2]
   d7b44:	2b0a      	cmp	r3, #10
   d7b46:	d008      	beq.n	d7b5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7b48:	2b50      	cmp	r3, #80	; 0x50
   d7b4a:	d109      	bne.n	d7b60 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7b4c:	4b09      	ldr	r3, [pc, #36]	; (d7b74 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7b4e:	681b      	ldr	r3, [r3, #0]
   d7b50:	b13b      	cbz	r3, d7b62 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7b52:	b003      	add	sp, #12
   d7b54:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7b58:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7b5a:	f7ff ffe5 	bl	d7b28 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7b5e:	e006      	b.n	d7b6e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7b60:	2300      	movs	r3, #0
   d7b62:	9300      	str	r3, [sp, #0]
   d7b64:	461a      	mov	r2, r3
   d7b66:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7b6a:	f7fe fb1f 	bl	d61ac <system_ctrl_set_result>
        break;
    }
}
   d7b6e:	b003      	add	sp, #12
   d7b70:	f85d fb04 	ldr.w	pc, [sp], #4
   d7b74:	2003e6d4 	.word	0x2003e6d4

000d7b78 <module_user_init_hook>:

void module_user_init_hook()
{
   d7b78:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7b7a:	4c10      	ldr	r4, [pc, #64]	; (d7bbc <module_user_init_hook+0x44>)
   d7b7c:	4d10      	ldr	r5, [pc, #64]	; (d7bc0 <module_user_init_hook+0x48>)
   d7b7e:	6823      	ldr	r3, [r4, #0]
   d7b80:	42ab      	cmp	r3, r5
   d7b82:	4b10      	ldr	r3, [pc, #64]	; (d7bc4 <module_user_init_hook+0x4c>)
   d7b84:	bf0c      	ite	eq
   d7b86:	2201      	moveq	r2, #1
   d7b88:	2200      	movne	r2, #0
   d7b8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7b8c:	d002      	beq.n	d7b94 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7b8e:	f7ff ffbf 	bl	d7b10 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7b92:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7b94:	f7fe f91e 	bl	d5dd4 <HAL_RNG_GetRandomNumber>
   d7b98:	4604      	mov	r4, r0
    srand(seed);
   d7b9a:	f001 f87b 	bl	d8c94 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7b9e:	4b0a      	ldr	r3, [pc, #40]	; (d7bc8 <module_user_init_hook+0x50>)
   d7ba0:	b113      	cbz	r3, d7ba8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7ba2:	4620      	mov	r0, r4
   d7ba4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7ba8:	2100      	movs	r1, #0
   d7baa:	4807      	ldr	r0, [pc, #28]	; (d7bc8 <module_user_init_hook+0x50>)
   d7bac:	f7fe fb74 	bl	d6298 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7bb0:	2100      	movs	r1, #0
   d7bb2:	4806      	ldr	r0, [pc, #24]	; (d7bcc <module_user_init_hook+0x54>)
}
   d7bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7bb8:	f7fe baee 	b.w	d6198 <system_ctrl_set_app_request_handler>
   d7bbc:	2003f400 	.word	0x2003f400
   d7bc0:	9a271c1e 	.word	0x9a271c1e
   d7bc4:	2003e6d8 	.word	0x2003e6d8
   d7bc8:	00000000 	.word	0x00000000
   d7bcc:	000d7b41 	.word	0x000d7b41

000d7bd0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7bd0:	b508      	push	{r3, lr}
   d7bd2:	4b02      	ldr	r3, [pc, #8]	; (d7bdc <spark_protocol_instance+0xc>)
   d7bd4:	681b      	ldr	r3, [r3, #0]
   d7bd6:	681b      	ldr	r3, [r3, #0]
   d7bd8:	9301      	str	r3, [sp, #4]
   d7bda:	bd08      	pop	{r3, pc}
   d7bdc:	0003025c 	.word	0x0003025c

000d7be0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7be0:	b508      	push	{r3, lr}
   d7be2:	4b02      	ldr	r3, [pc, #8]	; (d7bec <spark_protocol_set_product_id+0xc>)
   d7be4:	681b      	ldr	r3, [r3, #0]
   d7be6:	685b      	ldr	r3, [r3, #4]
   d7be8:	9301      	str	r3, [sp, #4]
   d7bea:	bd08      	pop	{r3, pc}
   d7bec:	0003025c 	.word	0x0003025c

000d7bf0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7bf0:	b508      	push	{r3, lr}
   d7bf2:	4b02      	ldr	r3, [pc, #8]	; (d7bfc <spark_protocol_set_product_firmware_version+0xc>)
   d7bf4:	681b      	ldr	r3, [r3, #0]
   d7bf6:	689b      	ldr	r3, [r3, #8]
   d7bf8:	9301      	str	r3, [sp, #4]
   d7bfa:	bd08      	pop	{r3, pc}
   d7bfc:	0003025c 	.word	0x0003025c

000d7c00 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7c00:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7c02:	4e18      	ldr	r6, [pc, #96]	; (d7c64 <pinAvailable+0x64>)
   d7c04:	6831      	ldr	r1, [r6, #0]
   d7c06:	f011 0501 	ands.w	r5, r1, #1
   d7c0a:	4604      	mov	r4, r0
   d7c0c:	d10a      	bne.n	d7c24 <pinAvailable+0x24>
   d7c0e:	4630      	mov	r0, r6
   d7c10:	f7fc fa49 	bl	d40a6 <__cxa_guard_acquire>
   d7c14:	b130      	cbz	r0, d7c24 <pinAvailable+0x24>
   d7c16:	4629      	mov	r1, r5
   d7c18:	4813      	ldr	r0, [pc, #76]	; (d7c68 <pinAvailable+0x68>)
   d7c1a:	f7ff fc15 	bl	d7448 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7c1e:	4630      	mov	r0, r6
   d7c20:	f7fc fa46 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7c24:	4810      	ldr	r0, [pc, #64]	; (d7c68 <pinAvailable+0x68>)
   d7c26:	f7ff fc19 	bl	d745c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7c2a:	b128      	cbz	r0, d7c38 <pinAvailable+0x38>
   d7c2c:	f1a4 030b 	sub.w	r3, r4, #11
   d7c30:	2b02      	cmp	r3, #2
   d7c32:	d801      	bhi.n	d7c38 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7c34:	2000      	movs	r0, #0
   d7c36:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7c38:	f000 f8b4 	bl	d7da4 <_Z19__fetch_global_Wirev>
   d7c3c:	f7ff f8f9 	bl	d6e32 <_ZN7TwoWire9isEnabledEv>
   d7c40:	b108      	cbz	r0, d7c46 <pinAvailable+0x46>
   d7c42:	2c01      	cmp	r4, #1
   d7c44:	d9f6      	bls.n	d7c34 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7c46:	f7ff fe91 	bl	d796c <_Z22__fetch_global_Serial1v>
   d7c4a:	f7ff fe8b 	bl	d7964 <_ZN11USARTSerial9isEnabledEv>
   d7c4e:	b118      	cbz	r0, d7c58 <pinAvailable+0x58>
   d7c50:	f1a4 0309 	sub.w	r3, r4, #9
   d7c54:	2b01      	cmp	r3, #1
   d7c56:	d9ed      	bls.n	d7c34 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7c58:	2c23      	cmp	r4, #35	; 0x23
   d7c5a:	bf8c      	ite	hi
   d7c5c:	2000      	movhi	r0, #0
   d7c5e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7c60:	bd70      	pop	{r4, r5, r6, pc}
   d7c62:	bf00      	nop
   d7c64:	2003e6dc 	.word	0x2003e6dc
   d7c68:	2003e6e0 	.word	0x2003e6e0

000d7c6c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c6c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7c6e:	b538      	push	{r3, r4, r5, lr}
   d7c70:	4604      	mov	r4, r0
   d7c72:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c74:	d80a      	bhi.n	d7c8c <pinMode+0x20>
   d7c76:	29ff      	cmp	r1, #255	; 0xff
   d7c78:	d008      	beq.n	d7c8c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7c7a:	f7ff ffc1 	bl	d7c00 <pinAvailable>
   d7c7e:	b128      	cbz	r0, d7c8c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7c80:	4629      	mov	r1, r5
   d7c82:	4620      	mov	r0, r4
}
   d7c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7c88:	f7fe b904 	b.w	d5e94 <HAL_Pin_Mode>
   d7c8c:	bd38      	pop	{r3, r4, r5, pc}

000d7c8e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7c8e:	b538      	push	{r3, r4, r5, lr}
   d7c90:	4604      	mov	r4, r0
   d7c92:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c94:	f7fe f906 	bl	d5ea4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7c98:	28ff      	cmp	r0, #255	; 0xff
   d7c9a:	d010      	beq.n	d7cbe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7c9c:	2806      	cmp	r0, #6
   d7c9e:	d804      	bhi.n	d7caa <digitalWrite+0x1c>
   d7ca0:	234d      	movs	r3, #77	; 0x4d
   d7ca2:	fa23 f000 	lsr.w	r0, r3, r0
   d7ca6:	07c3      	lsls	r3, r0, #31
   d7ca8:	d409      	bmi.n	d7cbe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7caa:	4620      	mov	r0, r4
   d7cac:	f7ff ffa8 	bl	d7c00 <pinAvailable>
   d7cb0:	b128      	cbz	r0, d7cbe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7cb2:	4629      	mov	r1, r5
   d7cb4:	4620      	mov	r0, r4
}
   d7cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7cba:	f7fe b8fb 	b.w	d5eb4 <HAL_GPIO_Write>
   d7cbe:	bd38      	pop	{r3, r4, r5, pc}

000d7cc0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7cc0:	b510      	push	{r4, lr}
   d7cc2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7cc4:	f7fe f8ee 	bl	d5ea4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7cc8:	3804      	subs	r0, #4
   d7cca:	b2c0      	uxtb	r0, r0
   d7ccc:	2801      	cmp	r0, #1
   d7cce:	d908      	bls.n	d7ce2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7cd0:	4620      	mov	r0, r4
   d7cd2:	f7ff ff95 	bl	d7c00 <pinAvailable>
   d7cd6:	b120      	cbz	r0, d7ce2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7cd8:	4620      	mov	r0, r4
}
   d7cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7cde:	f7fe b8f1 	b.w	d5ec4 <HAL_GPIO_Read>
}
   d7ce2:	2000      	movs	r0, #0
   d7ce4:	bd10      	pop	{r4, pc}

000d7ce6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7ce6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7ce8:	b510      	push	{r4, lr}
   d7cea:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7cec:	bf9c      	itt	ls
   d7cee:	340e      	addls	r4, #14
   d7cf0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7cf2:	4620      	mov	r0, r4
   d7cf4:	f7ff ff84 	bl	d7c00 <pinAvailable>
   d7cf8:	b150      	cbz	r0, d7d10 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7cfa:	2103      	movs	r1, #3
   d7cfc:	4620      	mov	r0, r4
   d7cfe:	f7fe f8c1 	bl	d5e84 <HAL_Validate_Pin_Function>
   d7d02:	2803      	cmp	r0, #3
   d7d04:	d104      	bne.n	d7d10 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7d06:	4620      	mov	r0, r4
}
   d7d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7d0c:	f7fe b8e2 	b.w	d5ed4 <HAL_ADC_Read>
}
   d7d10:	2000      	movs	r0, #0
   d7d12:	bd10      	pop	{r4, pc}

000d7d14 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7d14:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7d16:	4c07      	ldr	r4, [pc, #28]	; (d7d34 <_Z21__fetch_global_EEPROMv+0x20>)
   d7d18:	6823      	ldr	r3, [r4, #0]
   d7d1a:	07db      	lsls	r3, r3, #31
   d7d1c:	d408      	bmi.n	d7d30 <_Z21__fetch_global_EEPROMv+0x1c>
   d7d1e:	4620      	mov	r0, r4
   d7d20:	f7fc f9c1 	bl	d40a6 <__cxa_guard_acquire>
   d7d24:	b120      	cbz	r0, d7d30 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7d26:	f7fe f875 	bl	d5e14 <HAL_EEPROM_Init>
   d7d2a:	4620      	mov	r0, r4
   d7d2c:	f7fc f9c0 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7d30:	4801      	ldr	r0, [pc, #4]	; (d7d38 <_Z21__fetch_global_EEPROMv+0x24>)
   d7d32:	bd10      	pop	{r4, pc}
   d7d34:	2003e6ec 	.word	0x2003e6ec
   d7d38:	2003e6f0 	.word	0x2003e6f0

000d7d3c <_Z17acquireWireBufferv>:
   d7d3c:	b570      	push	{r4, r5, r6, lr}
   d7d3e:	4604      	mov	r4, r0
   d7d40:	2514      	movs	r5, #20
   d7d42:	462a      	mov	r2, r5
   d7d44:	4e09      	ldr	r6, [pc, #36]	; (d7d6c <_Z17acquireWireBufferv+0x30>)
   d7d46:	2100      	movs	r1, #0
   d7d48:	f000 ff9b 	bl	d8c82 <memset>
   d7d4c:	8025      	strh	r5, [r4, #0]
   d7d4e:	2520      	movs	r5, #32
   d7d50:	4631      	mov	r1, r6
   d7d52:	60a5      	str	r5, [r4, #8]
   d7d54:	6125      	str	r5, [r4, #16]
   d7d56:	4628      	mov	r0, r5
   d7d58:	f000 f88f 	bl	d7e7a <_ZnajRKSt9nothrow_t>
   d7d5c:	4631      	mov	r1, r6
   d7d5e:	6060      	str	r0, [r4, #4]
   d7d60:	4628      	mov	r0, r5
   d7d62:	f000 f88a 	bl	d7e7a <_ZnajRKSt9nothrow_t>
   d7d66:	60e0      	str	r0, [r4, #12]
   d7d68:	4620      	mov	r0, r4
   d7d6a:	bd70      	pop	{r4, r5, r6, pc}
   d7d6c:	000d9ef0 	.word	0x000d9ef0

000d7d70 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d7d70:	b570      	push	{r4, r5, r6, lr}
   d7d72:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7d74:	2514      	movs	r5, #20
   d7d76:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d78:	4e09      	ldr	r6, [pc, #36]	; (d7da0 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7d7a:	2100      	movs	r1, #0
   d7d7c:	f000 ff81 	bl	d8c82 <memset>
   d7d80:	8025      	strh	r5, [r4, #0]
   d7d82:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d84:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7d86:	60a5      	str	r5, [r4, #8]
   d7d88:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d8a:	4628      	mov	r0, r5
   d7d8c:	f000 f875 	bl	d7e7a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d90:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7d92:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d94:	4628      	mov	r0, r5
   d7d96:	f000 f870 	bl	d7e7a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7d9a:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d7d9c:	4620      	mov	r0, r4
   d7d9e:	bd70      	pop	{r4, r5, r6, pc}
   d7da0:	000d9ef0 	.word	0x000d9ef0

000d7da4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7da4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7da6:	4d0e      	ldr	r5, [pc, #56]	; (d7de0 <_Z19__fetch_global_Wirev+0x3c>)
   d7da8:	6829      	ldr	r1, [r5, #0]
   d7daa:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7dae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7db0:	d113      	bne.n	d7dda <_Z19__fetch_global_Wirev+0x36>
   d7db2:	4628      	mov	r0, r5
   d7db4:	f7fc f977 	bl	d40a6 <__cxa_guard_acquire>
   d7db8:	b178      	cbz	r0, d7dda <_Z19__fetch_global_Wirev+0x36>
   d7dba:	a801      	add	r0, sp, #4
   d7dbc:	f7ff ffbe 	bl	d7d3c <_Z17acquireWireBufferv>
   d7dc0:	aa01      	add	r2, sp, #4
   d7dc2:	4621      	mov	r1, r4
   d7dc4:	4807      	ldr	r0, [pc, #28]	; (d7de4 <_Z19__fetch_global_Wirev+0x40>)
   d7dc6:	f7fe ffdd 	bl	d6d84 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7dca:	4628      	mov	r0, r5
   d7dcc:	f7fc f970 	bl	d40b0 <__cxa_guard_release>
   d7dd0:	4a05      	ldr	r2, [pc, #20]	; (d7de8 <_Z19__fetch_global_Wirev+0x44>)
   d7dd2:	4906      	ldr	r1, [pc, #24]	; (d7dec <_Z19__fetch_global_Wirev+0x48>)
   d7dd4:	4803      	ldr	r0, [pc, #12]	; (d7de4 <_Z19__fetch_global_Wirev+0x40>)
   d7dd6:	f000 f831 	bl	d7e3c <__aeabi_atexit>
	return wire;
}
   d7dda:	4802      	ldr	r0, [pc, #8]	; (d7de4 <_Z19__fetch_global_Wirev+0x40>)
   d7ddc:	b007      	add	sp, #28
   d7dde:	bd30      	pop	{r4, r5, pc}
   d7de0:	2003e6f4 	.word	0x2003e6f4
   d7de4:	2003e70c 	.word	0x2003e70c
   d7de8:	2003e1c0 	.word	0x2003e1c0
   d7dec:	000d6d2d 	.word	0x000d6d2d

000d7df0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7df0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7df2:	4c0e      	ldr	r4, [pc, #56]	; (d7e2c <_Z20__fetch_global_Wire1v+0x3c>)
   d7df4:	6823      	ldr	r3, [r4, #0]
   d7df6:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7df8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7dfa:	d413      	bmi.n	d7e24 <_Z20__fetch_global_Wire1v+0x34>
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	f7fc f952 	bl	d40a6 <__cxa_guard_acquire>
   d7e02:	b178      	cbz	r0, d7e24 <_Z20__fetch_global_Wire1v+0x34>
   d7e04:	a801      	add	r0, sp, #4
   d7e06:	f7ff ffb3 	bl	d7d70 <_Z18acquireWire1Bufferv>
   d7e0a:	aa01      	add	r2, sp, #4
   d7e0c:	2101      	movs	r1, #1
   d7e0e:	4808      	ldr	r0, [pc, #32]	; (d7e30 <_Z20__fetch_global_Wire1v+0x40>)
   d7e10:	f7fe ffb8 	bl	d6d84 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7e14:	4620      	mov	r0, r4
   d7e16:	f7fc f94b 	bl	d40b0 <__cxa_guard_release>
   d7e1a:	4a06      	ldr	r2, [pc, #24]	; (d7e34 <_Z20__fetch_global_Wire1v+0x44>)
   d7e1c:	4906      	ldr	r1, [pc, #24]	; (d7e38 <_Z20__fetch_global_Wire1v+0x48>)
   d7e1e:	4804      	ldr	r0, [pc, #16]	; (d7e30 <_Z20__fetch_global_Wire1v+0x40>)
   d7e20:	f000 f80c 	bl	d7e3c <__aeabi_atexit>
	return wire;
}
   d7e24:	4802      	ldr	r0, [pc, #8]	; (d7e30 <_Z20__fetch_global_Wire1v+0x40>)
   d7e26:	b006      	add	sp, #24
   d7e28:	bd10      	pop	{r4, pc}
   d7e2a:	bf00      	nop
   d7e2c:	2003e720 	.word	0x2003e720
   d7e30:	2003e6f8 	.word	0x2003e6f8
   d7e34:	2003e1c0 	.word	0x2003e1c0
   d7e38:	000d6d2d 	.word	0x000d6d2d

000d7e3c <__aeabi_atexit>:
   d7e3c:	460b      	mov	r3, r1
   d7e3e:	4601      	mov	r1, r0
   d7e40:	4618      	mov	r0, r3
   d7e42:	f000 be0d 	b.w	d8a60 <__cxa_atexit>

000d7e46 <_ZdlPvj>:
   d7e46:	f7fc b92a 	b.w	d409e <_ZdlPv>
	...

000d7e4c <_ZSt15get_new_handlerv>:
   d7e4c:	4b02      	ldr	r3, [pc, #8]	; (d7e58 <_ZSt15get_new_handlerv+0xc>)
   d7e4e:	6818      	ldr	r0, [r3, #0]
   d7e50:	f3bf 8f5f 	dmb	sy
   d7e54:	4770      	bx	lr
   d7e56:	bf00      	nop
   d7e58:	2003e724 	.word	0x2003e724

000d7e5c <_ZnwjRKSt9nothrow_t>:
   d7e5c:	b510      	push	{r4, lr}
   d7e5e:	2800      	cmp	r0, #0
   d7e60:	bf14      	ite	ne
   d7e62:	4604      	movne	r4, r0
   d7e64:	2401      	moveq	r4, #1
   d7e66:	4620      	mov	r0, r4
   d7e68:	f7fe fa6e 	bl	d6348 <malloc>
   d7e6c:	b920      	cbnz	r0, d7e78 <_ZnwjRKSt9nothrow_t+0x1c>
   d7e6e:	f7ff ffed 	bl	d7e4c <_ZSt15get_new_handlerv>
   d7e72:	b108      	cbz	r0, d7e78 <_ZnwjRKSt9nothrow_t+0x1c>
   d7e74:	4780      	blx	r0
   d7e76:	e7f6      	b.n	d7e66 <_ZnwjRKSt9nothrow_t+0xa>
   d7e78:	bd10      	pop	{r4, pc}

000d7e7a <_ZnajRKSt9nothrow_t>:
   d7e7a:	f7ff bfef 	b.w	d7e5c <_ZnwjRKSt9nothrow_t>

000d7e7e <_ZSt25__throw_bad_function_callv>:
   d7e7e:	b508      	push	{r3, lr}
   d7e80:	f7fe fa8a 	bl	d6398 <abort>

000d7e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7e84:	4b24      	ldr	r3, [pc, #144]	; (d7f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7e86:	681a      	ldr	r2, [r3, #0]
   d7e88:	07d0      	lsls	r0, r2, #31
   d7e8a:	bf5c      	itt	pl
   d7e8c:	2201      	movpl	r2, #1
   d7e8e:	601a      	strpl	r2, [r3, #0]
   d7e90:	4b22      	ldr	r3, [pc, #136]	; (d7f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7e92:	681a      	ldr	r2, [r3, #0]
   d7e94:	07d1      	lsls	r1, r2, #31
   d7e96:	bf5c      	itt	pl
   d7e98:	2201      	movpl	r2, #1
   d7e9a:	601a      	strpl	r2, [r3, #0]
   d7e9c:	4b20      	ldr	r3, [pc, #128]	; (d7f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7e9e:	681a      	ldr	r2, [r3, #0]
   d7ea0:	07d2      	lsls	r2, r2, #31
   d7ea2:	bf5c      	itt	pl
   d7ea4:	2201      	movpl	r2, #1
   d7ea6:	601a      	strpl	r2, [r3, #0]
   d7ea8:	4b1e      	ldr	r3, [pc, #120]	; (d7f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7eaa:	681a      	ldr	r2, [r3, #0]
   d7eac:	07d0      	lsls	r0, r2, #31
   d7eae:	bf5c      	itt	pl
   d7eb0:	2201      	movpl	r2, #1
   d7eb2:	601a      	strpl	r2, [r3, #0]
   d7eb4:	4b1c      	ldr	r3, [pc, #112]	; (d7f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7eb6:	681a      	ldr	r2, [r3, #0]
   d7eb8:	07d1      	lsls	r1, r2, #31
   d7eba:	bf5c      	itt	pl
   d7ebc:	2201      	movpl	r2, #1
   d7ebe:	601a      	strpl	r2, [r3, #0]
   d7ec0:	4b1a      	ldr	r3, [pc, #104]	; (d7f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7ec2:	681a      	ldr	r2, [r3, #0]
   d7ec4:	07d2      	lsls	r2, r2, #31
   d7ec6:	bf5c      	itt	pl
   d7ec8:	2201      	movpl	r2, #1
   d7eca:	601a      	strpl	r2, [r3, #0]
   d7ecc:	4b18      	ldr	r3, [pc, #96]	; (d7f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7ece:	681a      	ldr	r2, [r3, #0]
   d7ed0:	07d0      	lsls	r0, r2, #31
   d7ed2:	bf5c      	itt	pl
   d7ed4:	2201      	movpl	r2, #1
   d7ed6:	601a      	strpl	r2, [r3, #0]
   d7ed8:	4b16      	ldr	r3, [pc, #88]	; (d7f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7eda:	681a      	ldr	r2, [r3, #0]
   d7edc:	07d1      	lsls	r1, r2, #31
   d7ede:	bf5c      	itt	pl
   d7ee0:	2201      	movpl	r2, #1
   d7ee2:	601a      	strpl	r2, [r3, #0]
   d7ee4:	4b14      	ldr	r3, [pc, #80]	; (d7f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7ee6:	681a      	ldr	r2, [r3, #0]
   d7ee8:	07d2      	lsls	r2, r2, #31
   d7eea:	bf5c      	itt	pl
   d7eec:	2201      	movpl	r2, #1
   d7eee:	601a      	strpl	r2, [r3, #0]
   d7ef0:	4b12      	ldr	r3, [pc, #72]	; (d7f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7ef2:	681a      	ldr	r2, [r3, #0]
   d7ef4:	07d0      	lsls	r0, r2, #31
   d7ef6:	bf5c      	itt	pl
   d7ef8:	2201      	movpl	r2, #1
   d7efa:	601a      	strpl	r2, [r3, #0]
   d7efc:	4b10      	ldr	r3, [pc, #64]	; (d7f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7efe:	681a      	ldr	r2, [r3, #0]
   d7f00:	07d1      	lsls	r1, r2, #31
   d7f02:	bf5c      	itt	pl
   d7f04:	2201      	movpl	r2, #1
   d7f06:	601a      	strpl	r2, [r3, #0]
   d7f08:	4b0e      	ldr	r3, [pc, #56]	; (d7f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7f0a:	681a      	ldr	r2, [r3, #0]
   d7f0c:	07d2      	lsls	r2, r2, #31
   d7f0e:	bf5c      	itt	pl
   d7f10:	2201      	movpl	r2, #1
   d7f12:	601a      	strpl	r2, [r3, #0]
   d7f14:	4770      	bx	lr
   d7f16:	bf00      	nop
   d7f18:	2003e754 	.word	0x2003e754
   d7f1c:	2003e750 	.word	0x2003e750
   d7f20:	2003e74c 	.word	0x2003e74c
   d7f24:	2003e748 	.word	0x2003e748
   d7f28:	2003e744 	.word	0x2003e744
   d7f2c:	2003e740 	.word	0x2003e740
   d7f30:	2003e73c 	.word	0x2003e73c
   d7f34:	2003e738 	.word	0x2003e738
   d7f38:	2003e734 	.word	0x2003e734
   d7f3c:	2003e730 	.word	0x2003e730
   d7f40:	2003e72c 	.word	0x2003e72c
   d7f44:	2003e728 	.word	0x2003e728

000d7f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f48:	4b18      	ldr	r3, [pc, #96]	; (d7fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f4a:	681a      	ldr	r2, [r3, #0]
   d7f4c:	07d1      	lsls	r1, r2, #31
   d7f4e:	bf5c      	itt	pl
   d7f50:	2201      	movpl	r2, #1
   d7f52:	601a      	strpl	r2, [r3, #0]
   d7f54:	4b16      	ldr	r3, [pc, #88]	; (d7fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7f56:	681a      	ldr	r2, [r3, #0]
   d7f58:	07d2      	lsls	r2, r2, #31
   d7f5a:	bf5c      	itt	pl
   d7f5c:	2201      	movpl	r2, #1
   d7f5e:	601a      	strpl	r2, [r3, #0]
   d7f60:	4b14      	ldr	r3, [pc, #80]	; (d7fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f62:	681a      	ldr	r2, [r3, #0]
   d7f64:	07d0      	lsls	r0, r2, #31
   d7f66:	bf5c      	itt	pl
   d7f68:	2201      	movpl	r2, #1
   d7f6a:	601a      	strpl	r2, [r3, #0]
   d7f6c:	4b12      	ldr	r3, [pc, #72]	; (d7fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f6e:	681a      	ldr	r2, [r3, #0]
   d7f70:	07d1      	lsls	r1, r2, #31
   d7f72:	bf5c      	itt	pl
   d7f74:	2201      	movpl	r2, #1
   d7f76:	601a      	strpl	r2, [r3, #0]
   d7f78:	4b10      	ldr	r3, [pc, #64]	; (d7fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f7a:	681a      	ldr	r2, [r3, #0]
   d7f7c:	07d2      	lsls	r2, r2, #31
   d7f7e:	bf5c      	itt	pl
   d7f80:	2201      	movpl	r2, #1
   d7f82:	601a      	strpl	r2, [r3, #0]
   d7f84:	4b0e      	ldr	r3, [pc, #56]	; (d7fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f86:	681a      	ldr	r2, [r3, #0]
   d7f88:	07d0      	lsls	r0, r2, #31
   d7f8a:	bf5c      	itt	pl
   d7f8c:	2201      	movpl	r2, #1
   d7f8e:	601a      	strpl	r2, [r3, #0]
   d7f90:	4b0c      	ldr	r3, [pc, #48]	; (d7fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f92:	681a      	ldr	r2, [r3, #0]
   d7f94:	07d1      	lsls	r1, r2, #31
   d7f96:	bf5c      	itt	pl
   d7f98:	2201      	movpl	r2, #1
   d7f9a:	601a      	strpl	r2, [r3, #0]
   d7f9c:	4b0a      	ldr	r3, [pc, #40]	; (d7fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f9e:	681a      	ldr	r2, [r3, #0]
   d7fa0:	07d2      	lsls	r2, r2, #31
   d7fa2:	bf5c      	itt	pl
   d7fa4:	2201      	movpl	r2, #1
   d7fa6:	601a      	strpl	r2, [r3, #0]
   d7fa8:	4770      	bx	lr
   d7faa:	bf00      	nop
   d7fac:	2003e774 	.word	0x2003e774
   d7fb0:	2003e770 	.word	0x2003e770
   d7fb4:	2003e76c 	.word	0x2003e76c
   d7fb8:	2003e768 	.word	0x2003e768
   d7fbc:	2003e764 	.word	0x2003e764
   d7fc0:	2003e760 	.word	0x2003e760
   d7fc4:	2003e75c 	.word	0x2003e75c
   d7fc8:	2003e758 	.word	0x2003e758

000d7fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7fcc:	4b18      	ldr	r3, [pc, #96]	; (d8030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7fce:	681a      	ldr	r2, [r3, #0]
   d7fd0:	07d1      	lsls	r1, r2, #31
   d7fd2:	bf5c      	itt	pl
   d7fd4:	2201      	movpl	r2, #1
   d7fd6:	601a      	strpl	r2, [r3, #0]
   d7fd8:	4b16      	ldr	r3, [pc, #88]	; (d8034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7fda:	681a      	ldr	r2, [r3, #0]
   d7fdc:	07d2      	lsls	r2, r2, #31
   d7fde:	bf5c      	itt	pl
   d7fe0:	2201      	movpl	r2, #1
   d7fe2:	601a      	strpl	r2, [r3, #0]
   d7fe4:	4b14      	ldr	r3, [pc, #80]	; (d8038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7fe6:	681a      	ldr	r2, [r3, #0]
   d7fe8:	07d0      	lsls	r0, r2, #31
   d7fea:	bf5c      	itt	pl
   d7fec:	2201      	movpl	r2, #1
   d7fee:	601a      	strpl	r2, [r3, #0]
   d7ff0:	4b12      	ldr	r3, [pc, #72]	; (d803c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7ff2:	681a      	ldr	r2, [r3, #0]
   d7ff4:	07d1      	lsls	r1, r2, #31
   d7ff6:	bf5c      	itt	pl
   d7ff8:	2201      	movpl	r2, #1
   d7ffa:	601a      	strpl	r2, [r3, #0]
   d7ffc:	4b10      	ldr	r3, [pc, #64]	; (d8040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7ffe:	681a      	ldr	r2, [r3, #0]
   d8000:	07d2      	lsls	r2, r2, #31
   d8002:	bf5c      	itt	pl
   d8004:	2201      	movpl	r2, #1
   d8006:	601a      	strpl	r2, [r3, #0]
   d8008:	4b0e      	ldr	r3, [pc, #56]	; (d8044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d800a:	681a      	ldr	r2, [r3, #0]
   d800c:	07d0      	lsls	r0, r2, #31
   d800e:	bf5c      	itt	pl
   d8010:	2201      	movpl	r2, #1
   d8012:	601a      	strpl	r2, [r3, #0]
   d8014:	4b0c      	ldr	r3, [pc, #48]	; (d8048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8016:	681a      	ldr	r2, [r3, #0]
   d8018:	07d1      	lsls	r1, r2, #31
   d801a:	bf5c      	itt	pl
   d801c:	2201      	movpl	r2, #1
   d801e:	601a      	strpl	r2, [r3, #0]
   d8020:	4b0a      	ldr	r3, [pc, #40]	; (d804c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8022:	681a      	ldr	r2, [r3, #0]
   d8024:	07d2      	lsls	r2, r2, #31
   d8026:	bf5c      	itt	pl
   d8028:	2201      	movpl	r2, #1
   d802a:	601a      	strpl	r2, [r3, #0]
   d802c:	4770      	bx	lr
   d802e:	bf00      	nop
   d8030:	2003e794 	.word	0x2003e794
   d8034:	2003e790 	.word	0x2003e790
   d8038:	2003e78c 	.word	0x2003e78c
   d803c:	2003e788 	.word	0x2003e788
   d8040:	2003e784 	.word	0x2003e784
   d8044:	2003e780 	.word	0x2003e780
   d8048:	2003e77c 	.word	0x2003e77c
   d804c:	2003e778 	.word	0x2003e778

000d8050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8050:	4b24      	ldr	r3, [pc, #144]	; (d80e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8052:	681a      	ldr	r2, [r3, #0]
   d8054:	07d0      	lsls	r0, r2, #31
   d8056:	bf5c      	itt	pl
   d8058:	2201      	movpl	r2, #1
   d805a:	601a      	strpl	r2, [r3, #0]
   d805c:	4b22      	ldr	r3, [pc, #136]	; (d80e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d805e:	681a      	ldr	r2, [r3, #0]
   d8060:	07d1      	lsls	r1, r2, #31
   d8062:	bf5c      	itt	pl
   d8064:	2201      	movpl	r2, #1
   d8066:	601a      	strpl	r2, [r3, #0]
   d8068:	4b20      	ldr	r3, [pc, #128]	; (d80ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d806a:	681a      	ldr	r2, [r3, #0]
   d806c:	07d2      	lsls	r2, r2, #31
   d806e:	bf5c      	itt	pl
   d8070:	2201      	movpl	r2, #1
   d8072:	601a      	strpl	r2, [r3, #0]
   d8074:	4b1e      	ldr	r3, [pc, #120]	; (d80f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8076:	681a      	ldr	r2, [r3, #0]
   d8078:	07d0      	lsls	r0, r2, #31
   d807a:	bf5c      	itt	pl
   d807c:	2201      	movpl	r2, #1
   d807e:	601a      	strpl	r2, [r3, #0]
   d8080:	4b1c      	ldr	r3, [pc, #112]	; (d80f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8082:	681a      	ldr	r2, [r3, #0]
   d8084:	07d1      	lsls	r1, r2, #31
   d8086:	bf5c      	itt	pl
   d8088:	2201      	movpl	r2, #1
   d808a:	601a      	strpl	r2, [r3, #0]
   d808c:	4b1a      	ldr	r3, [pc, #104]	; (d80f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d808e:	681a      	ldr	r2, [r3, #0]
   d8090:	07d2      	lsls	r2, r2, #31
   d8092:	bf5c      	itt	pl
   d8094:	2201      	movpl	r2, #1
   d8096:	601a      	strpl	r2, [r3, #0]
   d8098:	4b18      	ldr	r3, [pc, #96]	; (d80fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d809a:	681a      	ldr	r2, [r3, #0]
   d809c:	07d0      	lsls	r0, r2, #31
   d809e:	bf5c      	itt	pl
   d80a0:	2201      	movpl	r2, #1
   d80a2:	601a      	strpl	r2, [r3, #0]
   d80a4:	4b16      	ldr	r3, [pc, #88]	; (d8100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d80a6:	681a      	ldr	r2, [r3, #0]
   d80a8:	07d1      	lsls	r1, r2, #31
   d80aa:	bf5c      	itt	pl
   d80ac:	2201      	movpl	r2, #1
   d80ae:	601a      	strpl	r2, [r3, #0]
   d80b0:	4b14      	ldr	r3, [pc, #80]	; (d8104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d80b2:	681a      	ldr	r2, [r3, #0]
   d80b4:	07d2      	lsls	r2, r2, #31
   d80b6:	bf5c      	itt	pl
   d80b8:	2201      	movpl	r2, #1
   d80ba:	601a      	strpl	r2, [r3, #0]
   d80bc:	4b12      	ldr	r3, [pc, #72]	; (d8108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d80be:	681a      	ldr	r2, [r3, #0]
   d80c0:	07d0      	lsls	r0, r2, #31
   d80c2:	bf5c      	itt	pl
   d80c4:	2201      	movpl	r2, #1
   d80c6:	601a      	strpl	r2, [r3, #0]
   d80c8:	4b10      	ldr	r3, [pc, #64]	; (d810c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d80ca:	681a      	ldr	r2, [r3, #0]
   d80cc:	07d1      	lsls	r1, r2, #31
   d80ce:	bf5c      	itt	pl
   d80d0:	2201      	movpl	r2, #1
   d80d2:	601a      	strpl	r2, [r3, #0]
   d80d4:	4b0e      	ldr	r3, [pc, #56]	; (d8110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d80d6:	681a      	ldr	r2, [r3, #0]
   d80d8:	07d2      	lsls	r2, r2, #31
   d80da:	bf5c      	itt	pl
   d80dc:	2201      	movpl	r2, #1
   d80de:	601a      	strpl	r2, [r3, #0]
   d80e0:	4770      	bx	lr
   d80e2:	bf00      	nop
   d80e4:	2003e7c4 	.word	0x2003e7c4
   d80e8:	2003e7c0 	.word	0x2003e7c0
   d80ec:	2003e7bc 	.word	0x2003e7bc
   d80f0:	2003e7b8 	.word	0x2003e7b8
   d80f4:	2003e7b4 	.word	0x2003e7b4
   d80f8:	2003e7b0 	.word	0x2003e7b0
   d80fc:	2003e7ac 	.word	0x2003e7ac
   d8100:	2003e7a8 	.word	0x2003e7a8
   d8104:	2003e7a4 	.word	0x2003e7a4
   d8108:	2003e7a0 	.word	0x2003e7a0
   d810c:	2003e79c 	.word	0x2003e79c
   d8110:	2003e798 	.word	0x2003e798

000d8114 <__aeabi_drsub>:
   d8114:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8118:	e002      	b.n	d8120 <__adddf3>
   d811a:	bf00      	nop

000d811c <__aeabi_dsub>:
   d811c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8120 <__adddf3>:
   d8120:	b530      	push	{r4, r5, lr}
   d8122:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8126:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d812a:	ea94 0f05 	teq	r4, r5
   d812e:	bf08      	it	eq
   d8130:	ea90 0f02 	teqeq	r0, r2
   d8134:	bf1f      	itttt	ne
   d8136:	ea54 0c00 	orrsne.w	ip, r4, r0
   d813a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d813e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8142:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8146:	f000 80e2 	beq.w	d830e <__adddf3+0x1ee>
   d814a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d814e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8152:	bfb8      	it	lt
   d8154:	426d      	neglt	r5, r5
   d8156:	dd0c      	ble.n	d8172 <__adddf3+0x52>
   d8158:	442c      	add	r4, r5
   d815a:	ea80 0202 	eor.w	r2, r0, r2
   d815e:	ea81 0303 	eor.w	r3, r1, r3
   d8162:	ea82 0000 	eor.w	r0, r2, r0
   d8166:	ea83 0101 	eor.w	r1, r3, r1
   d816a:	ea80 0202 	eor.w	r2, r0, r2
   d816e:	ea81 0303 	eor.w	r3, r1, r3
   d8172:	2d36      	cmp	r5, #54	; 0x36
   d8174:	bf88      	it	hi
   d8176:	bd30      	pophi	{r4, r5, pc}
   d8178:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d817c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8180:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8184:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8188:	d002      	beq.n	d8190 <__adddf3+0x70>
   d818a:	4240      	negs	r0, r0
   d818c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8190:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8194:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8198:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d819c:	d002      	beq.n	d81a4 <__adddf3+0x84>
   d819e:	4252      	negs	r2, r2
   d81a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d81a4:	ea94 0f05 	teq	r4, r5
   d81a8:	f000 80a7 	beq.w	d82fa <__adddf3+0x1da>
   d81ac:	f1a4 0401 	sub.w	r4, r4, #1
   d81b0:	f1d5 0e20 	rsbs	lr, r5, #32
   d81b4:	db0d      	blt.n	d81d2 <__adddf3+0xb2>
   d81b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d81ba:	fa22 f205 	lsr.w	r2, r2, r5
   d81be:	1880      	adds	r0, r0, r2
   d81c0:	f141 0100 	adc.w	r1, r1, #0
   d81c4:	fa03 f20e 	lsl.w	r2, r3, lr
   d81c8:	1880      	adds	r0, r0, r2
   d81ca:	fa43 f305 	asr.w	r3, r3, r5
   d81ce:	4159      	adcs	r1, r3
   d81d0:	e00e      	b.n	d81f0 <__adddf3+0xd0>
   d81d2:	f1a5 0520 	sub.w	r5, r5, #32
   d81d6:	f10e 0e20 	add.w	lr, lr, #32
   d81da:	2a01      	cmp	r2, #1
   d81dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d81e0:	bf28      	it	cs
   d81e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d81e6:	fa43 f305 	asr.w	r3, r3, r5
   d81ea:	18c0      	adds	r0, r0, r3
   d81ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d81f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d81f4:	d507      	bpl.n	d8206 <__adddf3+0xe6>
   d81f6:	f04f 0e00 	mov.w	lr, #0
   d81fa:	f1dc 0c00 	rsbs	ip, ip, #0
   d81fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8202:	eb6e 0101 	sbc.w	r1, lr, r1
   d8206:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d820a:	d31b      	bcc.n	d8244 <__adddf3+0x124>
   d820c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8210:	d30c      	bcc.n	d822c <__adddf3+0x10c>
   d8212:	0849      	lsrs	r1, r1, #1
   d8214:	ea5f 0030 	movs.w	r0, r0, rrx
   d8218:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d821c:	f104 0401 	add.w	r4, r4, #1
   d8220:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8224:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8228:	f080 809a 	bcs.w	d8360 <__adddf3+0x240>
   d822c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8230:	bf08      	it	eq
   d8232:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8236:	f150 0000 	adcs.w	r0, r0, #0
   d823a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d823e:	ea41 0105 	orr.w	r1, r1, r5
   d8242:	bd30      	pop	{r4, r5, pc}
   d8244:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8248:	4140      	adcs	r0, r0
   d824a:	eb41 0101 	adc.w	r1, r1, r1
   d824e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8252:	f1a4 0401 	sub.w	r4, r4, #1
   d8256:	d1e9      	bne.n	d822c <__adddf3+0x10c>
   d8258:	f091 0f00 	teq	r1, #0
   d825c:	bf04      	itt	eq
   d825e:	4601      	moveq	r1, r0
   d8260:	2000      	moveq	r0, #0
   d8262:	fab1 f381 	clz	r3, r1
   d8266:	bf08      	it	eq
   d8268:	3320      	addeq	r3, #32
   d826a:	f1a3 030b 	sub.w	r3, r3, #11
   d826e:	f1b3 0220 	subs.w	r2, r3, #32
   d8272:	da0c      	bge.n	d828e <__adddf3+0x16e>
   d8274:	320c      	adds	r2, #12
   d8276:	dd08      	ble.n	d828a <__adddf3+0x16a>
   d8278:	f102 0c14 	add.w	ip, r2, #20
   d827c:	f1c2 020c 	rsb	r2, r2, #12
   d8280:	fa01 f00c 	lsl.w	r0, r1, ip
   d8284:	fa21 f102 	lsr.w	r1, r1, r2
   d8288:	e00c      	b.n	d82a4 <__adddf3+0x184>
   d828a:	f102 0214 	add.w	r2, r2, #20
   d828e:	bfd8      	it	le
   d8290:	f1c2 0c20 	rsble	ip, r2, #32
   d8294:	fa01 f102 	lsl.w	r1, r1, r2
   d8298:	fa20 fc0c 	lsr.w	ip, r0, ip
   d829c:	bfdc      	itt	le
   d829e:	ea41 010c 	orrle.w	r1, r1, ip
   d82a2:	4090      	lslle	r0, r2
   d82a4:	1ae4      	subs	r4, r4, r3
   d82a6:	bfa2      	ittt	ge
   d82a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d82ac:	4329      	orrge	r1, r5
   d82ae:	bd30      	popge	{r4, r5, pc}
   d82b0:	ea6f 0404 	mvn.w	r4, r4
   d82b4:	3c1f      	subs	r4, #31
   d82b6:	da1c      	bge.n	d82f2 <__adddf3+0x1d2>
   d82b8:	340c      	adds	r4, #12
   d82ba:	dc0e      	bgt.n	d82da <__adddf3+0x1ba>
   d82bc:	f104 0414 	add.w	r4, r4, #20
   d82c0:	f1c4 0220 	rsb	r2, r4, #32
   d82c4:	fa20 f004 	lsr.w	r0, r0, r4
   d82c8:	fa01 f302 	lsl.w	r3, r1, r2
   d82cc:	ea40 0003 	orr.w	r0, r0, r3
   d82d0:	fa21 f304 	lsr.w	r3, r1, r4
   d82d4:	ea45 0103 	orr.w	r1, r5, r3
   d82d8:	bd30      	pop	{r4, r5, pc}
   d82da:	f1c4 040c 	rsb	r4, r4, #12
   d82de:	f1c4 0220 	rsb	r2, r4, #32
   d82e2:	fa20 f002 	lsr.w	r0, r0, r2
   d82e6:	fa01 f304 	lsl.w	r3, r1, r4
   d82ea:	ea40 0003 	orr.w	r0, r0, r3
   d82ee:	4629      	mov	r1, r5
   d82f0:	bd30      	pop	{r4, r5, pc}
   d82f2:	fa21 f004 	lsr.w	r0, r1, r4
   d82f6:	4629      	mov	r1, r5
   d82f8:	bd30      	pop	{r4, r5, pc}
   d82fa:	f094 0f00 	teq	r4, #0
   d82fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8302:	bf06      	itte	eq
   d8304:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8308:	3401      	addeq	r4, #1
   d830a:	3d01      	subne	r5, #1
   d830c:	e74e      	b.n	d81ac <__adddf3+0x8c>
   d830e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8312:	bf18      	it	ne
   d8314:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8318:	d029      	beq.n	d836e <__adddf3+0x24e>
   d831a:	ea94 0f05 	teq	r4, r5
   d831e:	bf08      	it	eq
   d8320:	ea90 0f02 	teqeq	r0, r2
   d8324:	d005      	beq.n	d8332 <__adddf3+0x212>
   d8326:	ea54 0c00 	orrs.w	ip, r4, r0
   d832a:	bf04      	itt	eq
   d832c:	4619      	moveq	r1, r3
   d832e:	4610      	moveq	r0, r2
   d8330:	bd30      	pop	{r4, r5, pc}
   d8332:	ea91 0f03 	teq	r1, r3
   d8336:	bf1e      	ittt	ne
   d8338:	2100      	movne	r1, #0
   d833a:	2000      	movne	r0, #0
   d833c:	bd30      	popne	{r4, r5, pc}
   d833e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8342:	d105      	bne.n	d8350 <__adddf3+0x230>
   d8344:	0040      	lsls	r0, r0, #1
   d8346:	4149      	adcs	r1, r1
   d8348:	bf28      	it	cs
   d834a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d834e:	bd30      	pop	{r4, r5, pc}
   d8350:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8354:	bf3c      	itt	cc
   d8356:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d835a:	bd30      	popcc	{r4, r5, pc}
   d835c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8360:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8364:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8368:	f04f 0000 	mov.w	r0, #0
   d836c:	bd30      	pop	{r4, r5, pc}
   d836e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8372:	bf1a      	itte	ne
   d8374:	4619      	movne	r1, r3
   d8376:	4610      	movne	r0, r2
   d8378:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d837c:	bf1c      	itt	ne
   d837e:	460b      	movne	r3, r1
   d8380:	4602      	movne	r2, r0
   d8382:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8386:	bf06      	itte	eq
   d8388:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d838c:	ea91 0f03 	teqeq	r1, r3
   d8390:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8394:	bd30      	pop	{r4, r5, pc}
   d8396:	bf00      	nop

000d8398 <__aeabi_ui2d>:
   d8398:	f090 0f00 	teq	r0, #0
   d839c:	bf04      	itt	eq
   d839e:	2100      	moveq	r1, #0
   d83a0:	4770      	bxeq	lr
   d83a2:	b530      	push	{r4, r5, lr}
   d83a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83ac:	f04f 0500 	mov.w	r5, #0
   d83b0:	f04f 0100 	mov.w	r1, #0
   d83b4:	e750      	b.n	d8258 <__adddf3+0x138>
   d83b6:	bf00      	nop

000d83b8 <__aeabi_i2d>:
   d83b8:	f090 0f00 	teq	r0, #0
   d83bc:	bf04      	itt	eq
   d83be:	2100      	moveq	r1, #0
   d83c0:	4770      	bxeq	lr
   d83c2:	b530      	push	{r4, r5, lr}
   d83c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d83d0:	bf48      	it	mi
   d83d2:	4240      	negmi	r0, r0
   d83d4:	f04f 0100 	mov.w	r1, #0
   d83d8:	e73e      	b.n	d8258 <__adddf3+0x138>
   d83da:	bf00      	nop

000d83dc <__aeabi_f2d>:
   d83dc:	0042      	lsls	r2, r0, #1
   d83de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d83e2:	ea4f 0131 	mov.w	r1, r1, rrx
   d83e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d83ea:	bf1f      	itttt	ne
   d83ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d83f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d83f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d83f8:	4770      	bxne	lr
   d83fa:	f092 0f00 	teq	r2, #0
   d83fe:	bf14      	ite	ne
   d8400:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8404:	4770      	bxeq	lr
   d8406:	b530      	push	{r4, r5, lr}
   d8408:	f44f 7460 	mov.w	r4, #896	; 0x380
   d840c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8410:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8414:	e720      	b.n	d8258 <__adddf3+0x138>
   d8416:	bf00      	nop

000d8418 <__aeabi_ul2d>:
   d8418:	ea50 0201 	orrs.w	r2, r0, r1
   d841c:	bf08      	it	eq
   d841e:	4770      	bxeq	lr
   d8420:	b530      	push	{r4, r5, lr}
   d8422:	f04f 0500 	mov.w	r5, #0
   d8426:	e00a      	b.n	d843e <__aeabi_l2d+0x16>

000d8428 <__aeabi_l2d>:
   d8428:	ea50 0201 	orrs.w	r2, r0, r1
   d842c:	bf08      	it	eq
   d842e:	4770      	bxeq	lr
   d8430:	b530      	push	{r4, r5, lr}
   d8432:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8436:	d502      	bpl.n	d843e <__aeabi_l2d+0x16>
   d8438:	4240      	negs	r0, r0
   d843a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d843e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8442:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8446:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d844a:	f43f aedc 	beq.w	d8206 <__adddf3+0xe6>
   d844e:	f04f 0203 	mov.w	r2, #3
   d8452:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8456:	bf18      	it	ne
   d8458:	3203      	addne	r2, #3
   d845a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d845e:	bf18      	it	ne
   d8460:	3203      	addne	r2, #3
   d8462:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8466:	f1c2 0320 	rsb	r3, r2, #32
   d846a:	fa00 fc03 	lsl.w	ip, r0, r3
   d846e:	fa20 f002 	lsr.w	r0, r0, r2
   d8472:	fa01 fe03 	lsl.w	lr, r1, r3
   d8476:	ea40 000e 	orr.w	r0, r0, lr
   d847a:	fa21 f102 	lsr.w	r1, r1, r2
   d847e:	4414      	add	r4, r2
   d8480:	e6c1      	b.n	d8206 <__adddf3+0xe6>
   d8482:	bf00      	nop

000d8484 <__aeabi_dmul>:
   d8484:	b570      	push	{r4, r5, r6, lr}
   d8486:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d848a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d848e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8492:	bf1d      	ittte	ne
   d8494:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8498:	ea94 0f0c 	teqne	r4, ip
   d849c:	ea95 0f0c 	teqne	r5, ip
   d84a0:	f000 f8de 	bleq	d8660 <__aeabi_dmul+0x1dc>
   d84a4:	442c      	add	r4, r5
   d84a6:	ea81 0603 	eor.w	r6, r1, r3
   d84aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d84ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d84b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d84b6:	bf18      	it	ne
   d84b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d84bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d84c4:	d038      	beq.n	d8538 <__aeabi_dmul+0xb4>
   d84c6:	fba0 ce02 	umull	ip, lr, r0, r2
   d84ca:	f04f 0500 	mov.w	r5, #0
   d84ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   d84d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d84d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d84da:	f04f 0600 	mov.w	r6, #0
   d84de:	fbe1 5603 	umlal	r5, r6, r1, r3
   d84e2:	f09c 0f00 	teq	ip, #0
   d84e6:	bf18      	it	ne
   d84e8:	f04e 0e01 	orrne.w	lr, lr, #1
   d84ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d84f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d84f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d84f8:	d204      	bcs.n	d8504 <__aeabi_dmul+0x80>
   d84fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d84fe:	416d      	adcs	r5, r5
   d8500:	eb46 0606 	adc.w	r6, r6, r6
   d8504:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8508:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d850c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8510:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8514:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8518:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d851c:	bf88      	it	hi
   d851e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8522:	d81e      	bhi.n	d8562 <__aeabi_dmul+0xde>
   d8524:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8528:	bf08      	it	eq
   d852a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d852e:	f150 0000 	adcs.w	r0, r0, #0
   d8532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8536:	bd70      	pop	{r4, r5, r6, pc}
   d8538:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d853c:	ea46 0101 	orr.w	r1, r6, r1
   d8540:	ea40 0002 	orr.w	r0, r0, r2
   d8544:	ea81 0103 	eor.w	r1, r1, r3
   d8548:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d854c:	bfc2      	ittt	gt
   d854e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8552:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8556:	bd70      	popgt	{r4, r5, r6, pc}
   d8558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d855c:	f04f 0e00 	mov.w	lr, #0
   d8560:	3c01      	subs	r4, #1
   d8562:	f300 80ab 	bgt.w	d86bc <__aeabi_dmul+0x238>
   d8566:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d856a:	bfde      	ittt	le
   d856c:	2000      	movle	r0, #0
   d856e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8572:	bd70      	pople	{r4, r5, r6, pc}
   d8574:	f1c4 0400 	rsb	r4, r4, #0
   d8578:	3c20      	subs	r4, #32
   d857a:	da35      	bge.n	d85e8 <__aeabi_dmul+0x164>
   d857c:	340c      	adds	r4, #12
   d857e:	dc1b      	bgt.n	d85b8 <__aeabi_dmul+0x134>
   d8580:	f104 0414 	add.w	r4, r4, #20
   d8584:	f1c4 0520 	rsb	r5, r4, #32
   d8588:	fa00 f305 	lsl.w	r3, r0, r5
   d858c:	fa20 f004 	lsr.w	r0, r0, r4
   d8590:	fa01 f205 	lsl.w	r2, r1, r5
   d8594:	ea40 0002 	orr.w	r0, r0, r2
   d8598:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d859c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d85a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85a4:	fa21 f604 	lsr.w	r6, r1, r4
   d85a8:	eb42 0106 	adc.w	r1, r2, r6
   d85ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85b0:	bf08      	it	eq
   d85b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85b6:	bd70      	pop	{r4, r5, r6, pc}
   d85b8:	f1c4 040c 	rsb	r4, r4, #12
   d85bc:	f1c4 0520 	rsb	r5, r4, #32
   d85c0:	fa00 f304 	lsl.w	r3, r0, r4
   d85c4:	fa20 f005 	lsr.w	r0, r0, r5
   d85c8:	fa01 f204 	lsl.w	r2, r1, r4
   d85cc:	ea40 0002 	orr.w	r0, r0, r2
   d85d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85d8:	f141 0100 	adc.w	r1, r1, #0
   d85dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85e0:	bf08      	it	eq
   d85e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85e6:	bd70      	pop	{r4, r5, r6, pc}
   d85e8:	f1c4 0520 	rsb	r5, r4, #32
   d85ec:	fa00 f205 	lsl.w	r2, r0, r5
   d85f0:	ea4e 0e02 	orr.w	lr, lr, r2
   d85f4:	fa20 f304 	lsr.w	r3, r0, r4
   d85f8:	fa01 f205 	lsl.w	r2, r1, r5
   d85fc:	ea43 0302 	orr.w	r3, r3, r2
   d8600:	fa21 f004 	lsr.w	r0, r1, r4
   d8604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8608:	fa21 f204 	lsr.w	r2, r1, r4
   d860c:	ea20 0002 	bic.w	r0, r0, r2
   d8610:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8618:	bf08      	it	eq
   d861a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d861e:	bd70      	pop	{r4, r5, r6, pc}
   d8620:	f094 0f00 	teq	r4, #0
   d8624:	d10f      	bne.n	d8646 <__aeabi_dmul+0x1c2>
   d8626:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d862a:	0040      	lsls	r0, r0, #1
   d862c:	eb41 0101 	adc.w	r1, r1, r1
   d8630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8634:	bf08      	it	eq
   d8636:	3c01      	subeq	r4, #1
   d8638:	d0f7      	beq.n	d862a <__aeabi_dmul+0x1a6>
   d863a:	ea41 0106 	orr.w	r1, r1, r6
   d863e:	f095 0f00 	teq	r5, #0
   d8642:	bf18      	it	ne
   d8644:	4770      	bxne	lr
   d8646:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d864a:	0052      	lsls	r2, r2, #1
   d864c:	eb43 0303 	adc.w	r3, r3, r3
   d8650:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8654:	bf08      	it	eq
   d8656:	3d01      	subeq	r5, #1
   d8658:	d0f7      	beq.n	d864a <__aeabi_dmul+0x1c6>
   d865a:	ea43 0306 	orr.w	r3, r3, r6
   d865e:	4770      	bx	lr
   d8660:	ea94 0f0c 	teq	r4, ip
   d8664:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8668:	bf18      	it	ne
   d866a:	ea95 0f0c 	teqne	r5, ip
   d866e:	d00c      	beq.n	d868a <__aeabi_dmul+0x206>
   d8670:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8674:	bf18      	it	ne
   d8676:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d867a:	d1d1      	bne.n	d8620 <__aeabi_dmul+0x19c>
   d867c:	ea81 0103 	eor.w	r1, r1, r3
   d8680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8684:	f04f 0000 	mov.w	r0, #0
   d8688:	bd70      	pop	{r4, r5, r6, pc}
   d868a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d868e:	bf06      	itte	eq
   d8690:	4610      	moveq	r0, r2
   d8692:	4619      	moveq	r1, r3
   d8694:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8698:	d019      	beq.n	d86ce <__aeabi_dmul+0x24a>
   d869a:	ea94 0f0c 	teq	r4, ip
   d869e:	d102      	bne.n	d86a6 <__aeabi_dmul+0x222>
   d86a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d86a4:	d113      	bne.n	d86ce <__aeabi_dmul+0x24a>
   d86a6:	ea95 0f0c 	teq	r5, ip
   d86aa:	d105      	bne.n	d86b8 <__aeabi_dmul+0x234>
   d86ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d86b0:	bf1c      	itt	ne
   d86b2:	4610      	movne	r0, r2
   d86b4:	4619      	movne	r1, r3
   d86b6:	d10a      	bne.n	d86ce <__aeabi_dmul+0x24a>
   d86b8:	ea81 0103 	eor.w	r1, r1, r3
   d86bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d86c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d86c8:	f04f 0000 	mov.w	r0, #0
   d86cc:	bd70      	pop	{r4, r5, r6, pc}
   d86ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d86d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d86d6:	bd70      	pop	{r4, r5, r6, pc}

000d86d8 <__aeabi_ddiv>:
   d86d8:	b570      	push	{r4, r5, r6, lr}
   d86da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d86de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86e6:	bf1d      	ittte	ne
   d86e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d86ec:	ea94 0f0c 	teqne	r4, ip
   d86f0:	ea95 0f0c 	teqne	r5, ip
   d86f4:	f000 f8a7 	bleq	d8846 <__aeabi_ddiv+0x16e>
   d86f8:	eba4 0405 	sub.w	r4, r4, r5
   d86fc:	ea81 0e03 	eor.w	lr, r1, r3
   d8700:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8704:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8708:	f000 8088 	beq.w	d881c <__aeabi_ddiv+0x144>
   d870c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8710:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8714:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8718:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d871c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8720:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8724:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8728:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d872c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8730:	429d      	cmp	r5, r3
   d8732:	bf08      	it	eq
   d8734:	4296      	cmpeq	r6, r2
   d8736:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d873a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d873e:	d202      	bcs.n	d8746 <__aeabi_ddiv+0x6e>
   d8740:	085b      	lsrs	r3, r3, #1
   d8742:	ea4f 0232 	mov.w	r2, r2, rrx
   d8746:	1ab6      	subs	r6, r6, r2
   d8748:	eb65 0503 	sbc.w	r5, r5, r3
   d874c:	085b      	lsrs	r3, r3, #1
   d874e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8752:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8756:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d875a:	ebb6 0e02 	subs.w	lr, r6, r2
   d875e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8762:	bf22      	ittt	cs
   d8764:	1ab6      	subcs	r6, r6, r2
   d8766:	4675      	movcs	r5, lr
   d8768:	ea40 000c 	orrcs.w	r0, r0, ip
   d876c:	085b      	lsrs	r3, r3, #1
   d876e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8772:	ebb6 0e02 	subs.w	lr, r6, r2
   d8776:	eb75 0e03 	sbcs.w	lr, r5, r3
   d877a:	bf22      	ittt	cs
   d877c:	1ab6      	subcs	r6, r6, r2
   d877e:	4675      	movcs	r5, lr
   d8780:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8784:	085b      	lsrs	r3, r3, #1
   d8786:	ea4f 0232 	mov.w	r2, r2, rrx
   d878a:	ebb6 0e02 	subs.w	lr, r6, r2
   d878e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8792:	bf22      	ittt	cs
   d8794:	1ab6      	subcs	r6, r6, r2
   d8796:	4675      	movcs	r5, lr
   d8798:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d879c:	085b      	lsrs	r3, r3, #1
   d879e:	ea4f 0232 	mov.w	r2, r2, rrx
   d87a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d87a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87aa:	bf22      	ittt	cs
   d87ac:	1ab6      	subcs	r6, r6, r2
   d87ae:	4675      	movcs	r5, lr
   d87b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d87b4:	ea55 0e06 	orrs.w	lr, r5, r6
   d87b8:	d018      	beq.n	d87ec <__aeabi_ddiv+0x114>
   d87ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d87be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d87c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d87c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d87ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d87ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d87d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d87d6:	d1c0      	bne.n	d875a <__aeabi_ddiv+0x82>
   d87d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87dc:	d10b      	bne.n	d87f6 <__aeabi_ddiv+0x11e>
   d87de:	ea41 0100 	orr.w	r1, r1, r0
   d87e2:	f04f 0000 	mov.w	r0, #0
   d87e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d87ea:	e7b6      	b.n	d875a <__aeabi_ddiv+0x82>
   d87ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87f0:	bf04      	itt	eq
   d87f2:	4301      	orreq	r1, r0
   d87f4:	2000      	moveq	r0, #0
   d87f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d87fa:	bf88      	it	hi
   d87fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8800:	f63f aeaf 	bhi.w	d8562 <__aeabi_dmul+0xde>
   d8804:	ebb5 0c03 	subs.w	ip, r5, r3
   d8808:	bf04      	itt	eq
   d880a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d880e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8812:	f150 0000 	adcs.w	r0, r0, #0
   d8816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d881a:	bd70      	pop	{r4, r5, r6, pc}
   d881c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8820:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8824:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8828:	bfc2      	ittt	gt
   d882a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d882e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8832:	bd70      	popgt	{r4, r5, r6, pc}
   d8834:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8838:	f04f 0e00 	mov.w	lr, #0
   d883c:	3c01      	subs	r4, #1
   d883e:	e690      	b.n	d8562 <__aeabi_dmul+0xde>
   d8840:	ea45 0e06 	orr.w	lr, r5, r6
   d8844:	e68d      	b.n	d8562 <__aeabi_dmul+0xde>
   d8846:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d884a:	ea94 0f0c 	teq	r4, ip
   d884e:	bf08      	it	eq
   d8850:	ea95 0f0c 	teqeq	r5, ip
   d8854:	f43f af3b 	beq.w	d86ce <__aeabi_dmul+0x24a>
   d8858:	ea94 0f0c 	teq	r4, ip
   d885c:	d10a      	bne.n	d8874 <__aeabi_ddiv+0x19c>
   d885e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8862:	f47f af34 	bne.w	d86ce <__aeabi_dmul+0x24a>
   d8866:	ea95 0f0c 	teq	r5, ip
   d886a:	f47f af25 	bne.w	d86b8 <__aeabi_dmul+0x234>
   d886e:	4610      	mov	r0, r2
   d8870:	4619      	mov	r1, r3
   d8872:	e72c      	b.n	d86ce <__aeabi_dmul+0x24a>
   d8874:	ea95 0f0c 	teq	r5, ip
   d8878:	d106      	bne.n	d8888 <__aeabi_ddiv+0x1b0>
   d887a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d887e:	f43f aefd 	beq.w	d867c <__aeabi_dmul+0x1f8>
   d8882:	4610      	mov	r0, r2
   d8884:	4619      	mov	r1, r3
   d8886:	e722      	b.n	d86ce <__aeabi_dmul+0x24a>
   d8888:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d888c:	bf18      	it	ne
   d888e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8892:	f47f aec5 	bne.w	d8620 <__aeabi_dmul+0x19c>
   d8896:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d889a:	f47f af0d 	bne.w	d86b8 <__aeabi_dmul+0x234>
   d889e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d88a2:	f47f aeeb 	bne.w	d867c <__aeabi_dmul+0x1f8>
   d88a6:	e712      	b.n	d86ce <__aeabi_dmul+0x24a>

000d88a8 <__gedf2>:
   d88a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d88ac:	e006      	b.n	d88bc <__cmpdf2+0x4>
   d88ae:	bf00      	nop

000d88b0 <__ledf2>:
   d88b0:	f04f 0c01 	mov.w	ip, #1
   d88b4:	e002      	b.n	d88bc <__cmpdf2+0x4>
   d88b6:	bf00      	nop

000d88b8 <__cmpdf2>:
   d88b8:	f04f 0c01 	mov.w	ip, #1
   d88bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d88c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d88c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d88cc:	bf18      	it	ne
   d88ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d88d2:	d01b      	beq.n	d890c <__cmpdf2+0x54>
   d88d4:	b001      	add	sp, #4
   d88d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d88da:	bf0c      	ite	eq
   d88dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d88e0:	ea91 0f03 	teqne	r1, r3
   d88e4:	bf02      	ittt	eq
   d88e6:	ea90 0f02 	teqeq	r0, r2
   d88ea:	2000      	moveq	r0, #0
   d88ec:	4770      	bxeq	lr
   d88ee:	f110 0f00 	cmn.w	r0, #0
   d88f2:	ea91 0f03 	teq	r1, r3
   d88f6:	bf58      	it	pl
   d88f8:	4299      	cmppl	r1, r3
   d88fa:	bf08      	it	eq
   d88fc:	4290      	cmpeq	r0, r2
   d88fe:	bf2c      	ite	cs
   d8900:	17d8      	asrcs	r0, r3, #31
   d8902:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8906:	f040 0001 	orr.w	r0, r0, #1
   d890a:	4770      	bx	lr
   d890c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8914:	d102      	bne.n	d891c <__cmpdf2+0x64>
   d8916:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d891a:	d107      	bne.n	d892c <__cmpdf2+0x74>
   d891c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8924:	d1d6      	bne.n	d88d4 <__cmpdf2+0x1c>
   d8926:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d892a:	d0d3      	beq.n	d88d4 <__cmpdf2+0x1c>
   d892c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8930:	4770      	bx	lr
   d8932:	bf00      	nop

000d8934 <__aeabi_cdrcmple>:
   d8934:	4684      	mov	ip, r0
   d8936:	4610      	mov	r0, r2
   d8938:	4662      	mov	r2, ip
   d893a:	468c      	mov	ip, r1
   d893c:	4619      	mov	r1, r3
   d893e:	4663      	mov	r3, ip
   d8940:	e000      	b.n	d8944 <__aeabi_cdcmpeq>
   d8942:	bf00      	nop

000d8944 <__aeabi_cdcmpeq>:
   d8944:	b501      	push	{r0, lr}
   d8946:	f7ff ffb7 	bl	d88b8 <__cmpdf2>
   d894a:	2800      	cmp	r0, #0
   d894c:	bf48      	it	mi
   d894e:	f110 0f00 	cmnmi.w	r0, #0
   d8952:	bd01      	pop	{r0, pc}

000d8954 <__aeabi_dcmpeq>:
   d8954:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8958:	f7ff fff4 	bl	d8944 <__aeabi_cdcmpeq>
   d895c:	bf0c      	ite	eq
   d895e:	2001      	moveq	r0, #1
   d8960:	2000      	movne	r0, #0
   d8962:	f85d fb08 	ldr.w	pc, [sp], #8
   d8966:	bf00      	nop

000d8968 <__aeabi_dcmplt>:
   d8968:	f84d ed08 	str.w	lr, [sp, #-8]!
   d896c:	f7ff ffea 	bl	d8944 <__aeabi_cdcmpeq>
   d8970:	bf34      	ite	cc
   d8972:	2001      	movcc	r0, #1
   d8974:	2000      	movcs	r0, #0
   d8976:	f85d fb08 	ldr.w	pc, [sp], #8
   d897a:	bf00      	nop

000d897c <__aeabi_dcmple>:
   d897c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8980:	f7ff ffe0 	bl	d8944 <__aeabi_cdcmpeq>
   d8984:	bf94      	ite	ls
   d8986:	2001      	movls	r0, #1
   d8988:	2000      	movhi	r0, #0
   d898a:	f85d fb08 	ldr.w	pc, [sp], #8
   d898e:	bf00      	nop

000d8990 <__aeabi_dcmpge>:
   d8990:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8994:	f7ff ffce 	bl	d8934 <__aeabi_cdrcmple>
   d8998:	bf94      	ite	ls
   d899a:	2001      	movls	r0, #1
   d899c:	2000      	movhi	r0, #0
   d899e:	f85d fb08 	ldr.w	pc, [sp], #8
   d89a2:	bf00      	nop

000d89a4 <__aeabi_dcmpgt>:
   d89a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89a8:	f7ff ffc4 	bl	d8934 <__aeabi_cdrcmple>
   d89ac:	bf34      	ite	cc
   d89ae:	2001      	movcc	r0, #1
   d89b0:	2000      	movcs	r0, #0
   d89b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d89b6:	bf00      	nop

000d89b8 <__aeabi_d2f>:
   d89b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d89bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d89c0:	bf24      	itt	cs
   d89c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d89c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d89ca:	d90d      	bls.n	d89e8 <__aeabi_d2f+0x30>
   d89cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d89d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d89d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d89d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d89dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d89e0:	bf08      	it	eq
   d89e2:	f020 0001 	biceq.w	r0, r0, #1
   d89e6:	4770      	bx	lr
   d89e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d89ec:	d121      	bne.n	d8a32 <__aeabi_d2f+0x7a>
   d89ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d89f2:	bfbc      	itt	lt
   d89f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d89f8:	4770      	bxlt	lr
   d89fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d89fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8a02:	f1c2 0218 	rsb	r2, r2, #24
   d8a06:	f1c2 0c20 	rsb	ip, r2, #32
   d8a0a:	fa10 f30c 	lsls.w	r3, r0, ip
   d8a0e:	fa20 f002 	lsr.w	r0, r0, r2
   d8a12:	bf18      	it	ne
   d8a14:	f040 0001 	orrne.w	r0, r0, #1
   d8a18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8a20:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8a24:	ea40 000c 	orr.w	r0, r0, ip
   d8a28:	fa23 f302 	lsr.w	r3, r3, r2
   d8a2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8a30:	e7cc      	b.n	d89cc <__aeabi_d2f+0x14>
   d8a32:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8a36:	d107      	bne.n	d8a48 <__aeabi_d2f+0x90>
   d8a38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8a3c:	bf1e      	ittt	ne
   d8a3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8a42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8a46:	4770      	bxne	lr
   d8a48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8a4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8a50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8a54:	4770      	bx	lr
   d8a56:	bf00      	nop

000d8a58 <atoi>:
   d8a58:	220a      	movs	r2, #10
   d8a5a:	2100      	movs	r1, #0
   d8a5c:	f000 ba26 	b.w	d8eac <strtol>

000d8a60 <__cxa_atexit>:
   d8a60:	b510      	push	{r4, lr}
   d8a62:	4c05      	ldr	r4, [pc, #20]	; (d8a78 <__cxa_atexit+0x18>)
   d8a64:	4613      	mov	r3, r2
   d8a66:	b12c      	cbz	r4, d8a74 <__cxa_atexit+0x14>
   d8a68:	460a      	mov	r2, r1
   d8a6a:	4601      	mov	r1, r0
   d8a6c:	2002      	movs	r0, #2
   d8a6e:	f3af 8000 	nop.w
   d8a72:	bd10      	pop	{r4, pc}
   d8a74:	4620      	mov	r0, r4
   d8a76:	bd10      	pop	{r4, pc}
   d8a78:	00000000 	.word	0x00000000

000d8a7c <localtime>:
   d8a7c:	b538      	push	{r3, r4, r5, lr}
   d8a7e:	4b07      	ldr	r3, [pc, #28]	; (d8a9c <localtime+0x20>)
   d8a80:	681c      	ldr	r4, [r3, #0]
   d8a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8a84:	4605      	mov	r5, r0
   d8a86:	b91b      	cbnz	r3, d8a90 <localtime+0x14>
   d8a88:	2024      	movs	r0, #36	; 0x24
   d8a8a:	f7fd fc5d 	bl	d6348 <malloc>
   d8a8e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8a90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8a92:	4628      	mov	r0, r5
   d8a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8a98:	f000 b802 	b.w	d8aa0 <localtime_r>
   d8a9c:	2003e170 	.word	0x2003e170

000d8aa0 <localtime_r>:
   d8aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8aa4:	460c      	mov	r4, r1
   d8aa6:	4680      	mov	r8, r0
   d8aa8:	f000 fd06 	bl	d94b8 <__gettzinfo>
   d8aac:	4621      	mov	r1, r4
   d8aae:	4607      	mov	r7, r0
   d8ab0:	4640      	mov	r0, r8
   d8ab2:	f000 fd05 	bl	d94c0 <gmtime_r>
   d8ab6:	6946      	ldr	r6, [r0, #20]
   d8ab8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8abc:	07b3      	lsls	r3, r6, #30
   d8abe:	4604      	mov	r4, r0
   d8ac0:	d105      	bne.n	d8ace <localtime_r+0x2e>
   d8ac2:	2264      	movs	r2, #100	; 0x64
   d8ac4:	fb96 f3f2 	sdiv	r3, r6, r2
   d8ac8:	fb02 6313 	mls	r3, r2, r3, r6
   d8acc:	b94b      	cbnz	r3, d8ae2 <localtime_r+0x42>
   d8ace:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d8ad2:	fb96 f3f5 	sdiv	r3, r6, r5
   d8ad6:	fb05 6513 	mls	r5, r5, r3, r6
   d8ada:	fab5 f385 	clz	r3, r5
   d8ade:	095b      	lsrs	r3, r3, #5
   d8ae0:	e000      	b.n	d8ae4 <localtime_r+0x44>
   d8ae2:	2301      	movs	r3, #1
   d8ae4:	4a5f      	ldr	r2, [pc, #380]	; (d8c64 <localtime_r+0x1c4>)
   d8ae6:	2530      	movs	r5, #48	; 0x30
   d8ae8:	fb05 2503 	mla	r5, r5, r3, r2
   d8aec:	f000 fb18 	bl	d9120 <__tz_lock>
   d8af0:	f000 fb18 	bl	d9124 <_tzset_unlocked>
   d8af4:	4b5c      	ldr	r3, [pc, #368]	; (d8c68 <localtime_r+0x1c8>)
   d8af6:	681b      	ldr	r3, [r3, #0]
   d8af8:	b1f3      	cbz	r3, d8b38 <localtime_r+0x98>
   d8afa:	687b      	ldr	r3, [r7, #4]
   d8afc:	429e      	cmp	r6, r3
   d8afe:	d105      	bne.n	d8b0c <localtime_r+0x6c>
   d8b00:	6839      	ldr	r1, [r7, #0]
   d8b02:	f8d8 3000 	ldr.w	r3, [r8]
   d8b06:	69fa      	ldr	r2, [r7, #28]
   d8b08:	b941      	cbnz	r1, d8b1c <localtime_r+0x7c>
   d8b0a:	e00a      	b.n	d8b22 <localtime_r+0x82>
   d8b0c:	4630      	mov	r0, r6
   d8b0e:	f000 fa5f 	bl	d8fd0 <__tzcalc_limits>
   d8b12:	2800      	cmp	r0, #0
   d8b14:	d1f4      	bne.n	d8b00 <localtime_r+0x60>
   d8b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8b1a:	e00d      	b.n	d8b38 <localtime_r+0x98>
   d8b1c:	4293      	cmp	r3, r2
   d8b1e:	db08      	blt.n	d8b32 <localtime_r+0x92>
   d8b20:	e001      	b.n	d8b26 <localtime_r+0x86>
   d8b22:	4293      	cmp	r3, r2
   d8b24:	da07      	bge.n	d8b36 <localtime_r+0x96>
   d8b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8b28:	4293      	cmp	r3, r2
   d8b2a:	bfac      	ite	ge
   d8b2c:	2300      	movge	r3, #0
   d8b2e:	2301      	movlt	r3, #1
   d8b30:	e002      	b.n	d8b38 <localtime_r+0x98>
   d8b32:	2300      	movs	r3, #0
   d8b34:	e000      	b.n	d8b38 <localtime_r+0x98>
   d8b36:	2301      	movs	r3, #1
   d8b38:	6223      	str	r3, [r4, #32]
   d8b3a:	6a23      	ldr	r3, [r4, #32]
   d8b3c:	2b01      	cmp	r3, #1
   d8b3e:	bf0c      	ite	eq
   d8b40:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8b42:	6a39      	ldrne	r1, [r7, #32]
   d8b44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8b48:	203c      	movs	r0, #60	; 0x3c
   d8b4a:	fb91 f6f3 	sdiv	r6, r1, r3
   d8b4e:	fb03 1316 	mls	r3, r3, r6, r1
   d8b52:	6861      	ldr	r1, [r4, #4]
   d8b54:	fb93 f2f0 	sdiv	r2, r3, r0
   d8b58:	fb00 3012 	mls	r0, r0, r2, r3
   d8b5c:	6823      	ldr	r3, [r4, #0]
   d8b5e:	1a89      	subs	r1, r1, r2
   d8b60:	68a2      	ldr	r2, [r4, #8]
   d8b62:	6061      	str	r1, [r4, #4]
   d8b64:	1a1b      	subs	r3, r3, r0
   d8b66:	1b92      	subs	r2, r2, r6
   d8b68:	2b3b      	cmp	r3, #59	; 0x3b
   d8b6a:	6023      	str	r3, [r4, #0]
   d8b6c:	60a2      	str	r2, [r4, #8]
   d8b6e:	dd03      	ble.n	d8b78 <localtime_r+0xd8>
   d8b70:	3101      	adds	r1, #1
   d8b72:	6061      	str	r1, [r4, #4]
   d8b74:	3b3c      	subs	r3, #60	; 0x3c
   d8b76:	e004      	b.n	d8b82 <localtime_r+0xe2>
   d8b78:	2b00      	cmp	r3, #0
   d8b7a:	da03      	bge.n	d8b84 <localtime_r+0xe4>
   d8b7c:	3901      	subs	r1, #1
   d8b7e:	6061      	str	r1, [r4, #4]
   d8b80:	333c      	adds	r3, #60	; 0x3c
   d8b82:	6023      	str	r3, [r4, #0]
   d8b84:	6863      	ldr	r3, [r4, #4]
   d8b86:	2b3b      	cmp	r3, #59	; 0x3b
   d8b88:	dd03      	ble.n	d8b92 <localtime_r+0xf2>
   d8b8a:	3201      	adds	r2, #1
   d8b8c:	60a2      	str	r2, [r4, #8]
   d8b8e:	3b3c      	subs	r3, #60	; 0x3c
   d8b90:	e004      	b.n	d8b9c <localtime_r+0xfc>
   d8b92:	2b00      	cmp	r3, #0
   d8b94:	da03      	bge.n	d8b9e <localtime_r+0xfe>
   d8b96:	3a01      	subs	r2, #1
   d8b98:	60a2      	str	r2, [r4, #8]
   d8b9a:	333c      	adds	r3, #60	; 0x3c
   d8b9c:	6063      	str	r3, [r4, #4]
   d8b9e:	68a3      	ldr	r3, [r4, #8]
   d8ba0:	2b17      	cmp	r3, #23
   d8ba2:	dd22      	ble.n	d8bea <localtime_r+0x14a>
   d8ba4:	69e2      	ldr	r2, [r4, #28]
   d8ba6:	3201      	adds	r2, #1
   d8ba8:	61e2      	str	r2, [r4, #28]
   d8baa:	69a2      	ldr	r2, [r4, #24]
   d8bac:	3201      	adds	r2, #1
   d8bae:	2a06      	cmp	r2, #6
   d8bb0:	bfc8      	it	gt
   d8bb2:	2200      	movgt	r2, #0
   d8bb4:	61a2      	str	r2, [r4, #24]
   d8bb6:	68e2      	ldr	r2, [r4, #12]
   d8bb8:	3b18      	subs	r3, #24
   d8bba:	3201      	adds	r2, #1
   d8bbc:	60a3      	str	r3, [r4, #8]
   d8bbe:	6923      	ldr	r3, [r4, #16]
   d8bc0:	60e2      	str	r2, [r4, #12]
   d8bc2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8bc6:	428a      	cmp	r2, r1
   d8bc8:	dd46      	ble.n	d8c58 <localtime_r+0x1b8>
   d8bca:	3301      	adds	r3, #1
   d8bcc:	2b0c      	cmp	r3, #12
   d8bce:	bf0c      	ite	eq
   d8bd0:	6963      	ldreq	r3, [r4, #20]
   d8bd2:	6123      	strne	r3, [r4, #16]
   d8bd4:	eba2 0201 	sub.w	r2, r2, r1
   d8bd8:	60e2      	str	r2, [r4, #12]
   d8bda:	bf01      	itttt	eq
   d8bdc:	3301      	addeq	r3, #1
   d8bde:	2200      	moveq	r2, #0
   d8be0:	6122      	streq	r2, [r4, #16]
   d8be2:	6163      	streq	r3, [r4, #20]
   d8be4:	bf08      	it	eq
   d8be6:	61e2      	streq	r2, [r4, #28]
   d8be8:	e036      	b.n	d8c58 <localtime_r+0x1b8>
   d8bea:	2b00      	cmp	r3, #0
   d8bec:	da34      	bge.n	d8c58 <localtime_r+0x1b8>
   d8bee:	69e2      	ldr	r2, [r4, #28]
   d8bf0:	3a01      	subs	r2, #1
   d8bf2:	61e2      	str	r2, [r4, #28]
   d8bf4:	69a2      	ldr	r2, [r4, #24]
   d8bf6:	3a01      	subs	r2, #1
   d8bf8:	bf48      	it	mi
   d8bfa:	2206      	movmi	r2, #6
   d8bfc:	61a2      	str	r2, [r4, #24]
   d8bfe:	68e2      	ldr	r2, [r4, #12]
   d8c00:	3318      	adds	r3, #24
   d8c02:	3a01      	subs	r2, #1
   d8c04:	60e2      	str	r2, [r4, #12]
   d8c06:	60a3      	str	r3, [r4, #8]
   d8c08:	bb32      	cbnz	r2, d8c58 <localtime_r+0x1b8>
   d8c0a:	6923      	ldr	r3, [r4, #16]
   d8c0c:	3b01      	subs	r3, #1
   d8c0e:	d401      	bmi.n	d8c14 <localtime_r+0x174>
   d8c10:	6123      	str	r3, [r4, #16]
   d8c12:	e01d      	b.n	d8c50 <localtime_r+0x1b0>
   d8c14:	230b      	movs	r3, #11
   d8c16:	6123      	str	r3, [r4, #16]
   d8c18:	6963      	ldr	r3, [r4, #20]
   d8c1a:	1e5a      	subs	r2, r3, #1
   d8c1c:	f012 0f03 	tst.w	r2, #3
   d8c20:	6162      	str	r2, [r4, #20]
   d8c22:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8c26:	d105      	bne.n	d8c34 <localtime_r+0x194>
   d8c28:	2164      	movs	r1, #100	; 0x64
   d8c2a:	fb93 f2f1 	sdiv	r2, r3, r1
   d8c2e:	fb01 3212 	mls	r2, r1, r2, r3
   d8c32:	b94a      	cbnz	r2, d8c48 <localtime_r+0x1a8>
   d8c34:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8c38:	fb93 f2f1 	sdiv	r2, r3, r1
   d8c3c:	fb01 3312 	mls	r3, r1, r2, r3
   d8c40:	fab3 f383 	clz	r3, r3
   d8c44:	095b      	lsrs	r3, r3, #5
   d8c46:	e000      	b.n	d8c4a <localtime_r+0x1aa>
   d8c48:	2301      	movs	r3, #1
   d8c4a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8c4e:	61e3      	str	r3, [r4, #28]
   d8c50:	6923      	ldr	r3, [r4, #16]
   d8c52:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8c56:	60e3      	str	r3, [r4, #12]
   d8c58:	f000 fa63 	bl	d9122 <__tz_unlock>
   d8c5c:	4620      	mov	r0, r4
   d8c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8c62:	bf00      	nop
   d8c64:	000da054 	.word	0x000da054
   d8c68:	2003e7e4 	.word	0x2003e7e4

000d8c6c <memcpy>:
   d8c6c:	b510      	push	{r4, lr}
   d8c6e:	1e43      	subs	r3, r0, #1
   d8c70:	440a      	add	r2, r1
   d8c72:	4291      	cmp	r1, r2
   d8c74:	d004      	beq.n	d8c80 <memcpy+0x14>
   d8c76:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8c7e:	e7f8      	b.n	d8c72 <memcpy+0x6>
   d8c80:	bd10      	pop	{r4, pc}

000d8c82 <memset>:
   d8c82:	4402      	add	r2, r0
   d8c84:	4603      	mov	r3, r0
   d8c86:	4293      	cmp	r3, r2
   d8c88:	d002      	beq.n	d8c90 <memset+0xe>
   d8c8a:	f803 1b01 	strb.w	r1, [r3], #1
   d8c8e:	e7fa      	b.n	d8c86 <memset+0x4>
   d8c90:	4770      	bx	lr
	...

000d8c94 <srand>:
   d8c94:	b538      	push	{r3, r4, r5, lr}
   d8c96:	4b12      	ldr	r3, [pc, #72]	; (d8ce0 <srand+0x4c>)
   d8c98:	681c      	ldr	r4, [r3, #0]
   d8c9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8c9c:	4605      	mov	r5, r0
   d8c9e:	b9d3      	cbnz	r3, d8cd6 <srand+0x42>
   d8ca0:	2018      	movs	r0, #24
   d8ca2:	f7fd fb51 	bl	d6348 <malloc>
   d8ca6:	f243 330e 	movw	r3, #13070	; 0x330e
   d8caa:	63a0      	str	r0, [r4, #56]	; 0x38
   d8cac:	8003      	strh	r3, [r0, #0]
   d8cae:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8cb2:	8043      	strh	r3, [r0, #2]
   d8cb4:	f241 2334 	movw	r3, #4660	; 0x1234
   d8cb8:	8083      	strh	r3, [r0, #4]
   d8cba:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8cbe:	80c3      	strh	r3, [r0, #6]
   d8cc0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8cc4:	8103      	strh	r3, [r0, #8]
   d8cc6:	2305      	movs	r3, #5
   d8cc8:	8143      	strh	r3, [r0, #10]
   d8cca:	230b      	movs	r3, #11
   d8ccc:	8183      	strh	r3, [r0, #12]
   d8cce:	2201      	movs	r2, #1
   d8cd0:	2300      	movs	r3, #0
   d8cd2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8cd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8cd8:	2200      	movs	r2, #0
   d8cda:	611d      	str	r5, [r3, #16]
   d8cdc:	615a      	str	r2, [r3, #20]
   d8cde:	bd38      	pop	{r3, r4, r5, pc}
   d8ce0:	2003e170 	.word	0x2003e170

000d8ce4 <strcmp>:
   d8ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8cec:	2a01      	cmp	r2, #1
   d8cee:	bf28      	it	cs
   d8cf0:	429a      	cmpcs	r2, r3
   d8cf2:	d0f7      	beq.n	d8ce4 <strcmp>
   d8cf4:	1ad0      	subs	r0, r2, r3
   d8cf6:	4770      	bx	lr

000d8cf8 <strcpy>:
   d8cf8:	4603      	mov	r3, r0
   d8cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8cfe:	f803 2b01 	strb.w	r2, [r3], #1
   d8d02:	2a00      	cmp	r2, #0
   d8d04:	d1f9      	bne.n	d8cfa <strcpy+0x2>
   d8d06:	4770      	bx	lr

000d8d08 <strdup>:
   d8d08:	4b02      	ldr	r3, [pc, #8]	; (d8d14 <strdup+0xc>)
   d8d0a:	4601      	mov	r1, r0
   d8d0c:	6818      	ldr	r0, [r3, #0]
   d8d0e:	f000 b803 	b.w	d8d18 <_strdup_r>
   d8d12:	bf00      	nop
   d8d14:	2003e170 	.word	0x2003e170

000d8d18 <_strdup_r>:
   d8d18:	b570      	push	{r4, r5, r6, lr}
   d8d1a:	4606      	mov	r6, r0
   d8d1c:	4608      	mov	r0, r1
   d8d1e:	460c      	mov	r4, r1
   d8d20:	f000 f80d 	bl	d8d3e <strlen>
   d8d24:	1c45      	adds	r5, r0, #1
   d8d26:	4629      	mov	r1, r5
   d8d28:	4630      	mov	r0, r6
   d8d2a:	f7fd fb3d 	bl	d63a8 <_malloc_r>
   d8d2e:	4606      	mov	r6, r0
   d8d30:	b118      	cbz	r0, d8d3a <_strdup_r+0x22>
   d8d32:	462a      	mov	r2, r5
   d8d34:	4621      	mov	r1, r4
   d8d36:	f7ff ff99 	bl	d8c6c <memcpy>
   d8d3a:	4630      	mov	r0, r6
   d8d3c:	bd70      	pop	{r4, r5, r6, pc}

000d8d3e <strlen>:
   d8d3e:	4603      	mov	r3, r0
   d8d40:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8d44:	2a00      	cmp	r2, #0
   d8d46:	d1fb      	bne.n	d8d40 <strlen+0x2>
   d8d48:	1a18      	subs	r0, r3, r0
   d8d4a:	3801      	subs	r0, #1
   d8d4c:	4770      	bx	lr

000d8d4e <strncmp>:
   d8d4e:	b530      	push	{r4, r5, lr}
   d8d50:	b182      	cbz	r2, d8d74 <strncmp+0x26>
   d8d52:	1e45      	subs	r5, r0, #1
   d8d54:	3901      	subs	r1, #1
   d8d56:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8d5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8d5e:	42a3      	cmp	r3, r4
   d8d60:	d106      	bne.n	d8d70 <strncmp+0x22>
   d8d62:	43ec      	mvns	r4, r5
   d8d64:	4414      	add	r4, r2
   d8d66:	42e0      	cmn	r0, r4
   d8d68:	d001      	beq.n	d8d6e <strncmp+0x20>
   d8d6a:	2b00      	cmp	r3, #0
   d8d6c:	d1f3      	bne.n	d8d56 <strncmp+0x8>
   d8d6e:	461c      	mov	r4, r3
   d8d70:	1b18      	subs	r0, r3, r4
   d8d72:	bd30      	pop	{r4, r5, pc}
   d8d74:	4610      	mov	r0, r2
   d8d76:	bd30      	pop	{r4, r5, pc}

000d8d78 <strncpy>:
   d8d78:	b510      	push	{r4, lr}
   d8d7a:	4603      	mov	r3, r0
   d8d7c:	b142      	cbz	r2, d8d90 <strncpy+0x18>
   d8d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d82:	f803 4b01 	strb.w	r4, [r3], #1
   d8d86:	3a01      	subs	r2, #1
   d8d88:	2c00      	cmp	r4, #0
   d8d8a:	d1f7      	bne.n	d8d7c <strncpy+0x4>
   d8d8c:	441a      	add	r2, r3
   d8d8e:	e000      	b.n	d8d92 <strncpy+0x1a>
   d8d90:	bd10      	pop	{r4, pc}
   d8d92:	4293      	cmp	r3, r2
   d8d94:	d002      	beq.n	d8d9c <strncpy+0x24>
   d8d96:	f803 4b01 	strb.w	r4, [r3], #1
   d8d9a:	e7fa      	b.n	d8d92 <strncpy+0x1a>
   d8d9c:	bd10      	pop	{r4, pc}
	...

000d8da0 <_strtol_r>:
   d8da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8da4:	4680      	mov	r8, r0
   d8da6:	4840      	ldr	r0, [pc, #256]	; (d8ea8 <_strtol_r+0x108>)
   d8da8:	f8d0 9000 	ldr.w	r9, [r0]
   d8dac:	460f      	mov	r7, r1
   d8dae:	463d      	mov	r5, r7
   d8db0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8db4:	eb09 0004 	add.w	r0, r9, r4
   d8db8:	7840      	ldrb	r0, [r0, #1]
   d8dba:	f000 0008 	and.w	r0, r0, #8
   d8dbe:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8dc2:	b108      	cbz	r0, d8dc8 <_strtol_r+0x28>
   d8dc4:	462f      	mov	r7, r5
   d8dc6:	e7f2      	b.n	d8dae <_strtol_r+0xe>
   d8dc8:	2c2d      	cmp	r4, #45	; 0x2d
   d8dca:	d103      	bne.n	d8dd4 <_strtol_r+0x34>
   d8dcc:	1cbd      	adds	r5, r7, #2
   d8dce:	787c      	ldrb	r4, [r7, #1]
   d8dd0:	2601      	movs	r6, #1
   d8dd2:	e003      	b.n	d8ddc <_strtol_r+0x3c>
   d8dd4:	2c2b      	cmp	r4, #43	; 0x2b
   d8dd6:	bf04      	itt	eq
   d8dd8:	787c      	ldrbeq	r4, [r7, #1]
   d8dda:	1cbd      	addeq	r5, r7, #2
   d8ddc:	b113      	cbz	r3, d8de4 <_strtol_r+0x44>
   d8dde:	2b10      	cmp	r3, #16
   d8de0:	d10a      	bne.n	d8df8 <_strtol_r+0x58>
   d8de2:	e05b      	b.n	d8e9c <_strtol_r+0xfc>
   d8de4:	2c30      	cmp	r4, #48	; 0x30
   d8de6:	d157      	bne.n	d8e98 <_strtol_r+0xf8>
   d8de8:	7828      	ldrb	r0, [r5, #0]
   d8dea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8dee:	2858      	cmp	r0, #88	; 0x58
   d8df0:	d14d      	bne.n	d8e8e <_strtol_r+0xee>
   d8df2:	786c      	ldrb	r4, [r5, #1]
   d8df4:	2310      	movs	r3, #16
   d8df6:	3502      	adds	r5, #2
   d8df8:	2e00      	cmp	r6, #0
   d8dfa:	bf14      	ite	ne
   d8dfc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8e00:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8e04:	2700      	movs	r7, #0
   d8e06:	fbbc faf3 	udiv	sl, ip, r3
   d8e0a:	4638      	mov	r0, r7
   d8e0c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8e10:	eb09 0e04 	add.w	lr, r9, r4
   d8e14:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8e18:	f01e 0f04 	tst.w	lr, #4
   d8e1c:	d001      	beq.n	d8e22 <_strtol_r+0x82>
   d8e1e:	3c30      	subs	r4, #48	; 0x30
   d8e20:	e00b      	b.n	d8e3a <_strtol_r+0x9a>
   d8e22:	f01e 0e03 	ands.w	lr, lr, #3
   d8e26:	d01b      	beq.n	d8e60 <_strtol_r+0xc0>
   d8e28:	f1be 0f01 	cmp.w	lr, #1
   d8e2c:	bf0c      	ite	eq
   d8e2e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8e32:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8e36:	ebce 0404 	rsb	r4, lr, r4
   d8e3a:	42a3      	cmp	r3, r4
   d8e3c:	dd10      	ble.n	d8e60 <_strtol_r+0xc0>
   d8e3e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8e42:	d00a      	beq.n	d8e5a <_strtol_r+0xba>
   d8e44:	4550      	cmp	r0, sl
   d8e46:	d806      	bhi.n	d8e56 <_strtol_r+0xb6>
   d8e48:	d101      	bne.n	d8e4e <_strtol_r+0xae>
   d8e4a:	4564      	cmp	r4, ip
   d8e4c:	dc03      	bgt.n	d8e56 <_strtol_r+0xb6>
   d8e4e:	fb03 4000 	mla	r0, r3, r0, r4
   d8e52:	2701      	movs	r7, #1
   d8e54:	e001      	b.n	d8e5a <_strtol_r+0xba>
   d8e56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8e5e:	e7d7      	b.n	d8e10 <_strtol_r+0x70>
   d8e60:	1c7b      	adds	r3, r7, #1
   d8e62:	d10c      	bne.n	d8e7e <_strtol_r+0xde>
   d8e64:	2e00      	cmp	r6, #0
   d8e66:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8e6a:	bf14      	ite	ne
   d8e6c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8e70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8e74:	f8c8 3000 	str.w	r3, [r8]
   d8e78:	b92a      	cbnz	r2, d8e86 <_strtol_r+0xe6>
   d8e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8e7e:	b106      	cbz	r6, d8e82 <_strtol_r+0xe2>
   d8e80:	4240      	negs	r0, r0
   d8e82:	b172      	cbz	r2, d8ea2 <_strtol_r+0x102>
   d8e84:	b107      	cbz	r7, d8e88 <_strtol_r+0xe8>
   d8e86:	1e69      	subs	r1, r5, #1
   d8e88:	6011      	str	r1, [r2, #0]
   d8e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8e8e:	2430      	movs	r4, #48	; 0x30
   d8e90:	2b00      	cmp	r3, #0
   d8e92:	d1b1      	bne.n	d8df8 <_strtol_r+0x58>
   d8e94:	2308      	movs	r3, #8
   d8e96:	e7af      	b.n	d8df8 <_strtol_r+0x58>
   d8e98:	230a      	movs	r3, #10
   d8e9a:	e7ad      	b.n	d8df8 <_strtol_r+0x58>
   d8e9c:	2c30      	cmp	r4, #48	; 0x30
   d8e9e:	d0a3      	beq.n	d8de8 <_strtol_r+0x48>
   d8ea0:	e7aa      	b.n	d8df8 <_strtol_r+0x58>
   d8ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ea6:	bf00      	nop
   d8ea8:	2003e10c 	.word	0x2003e10c

000d8eac <strtol>:
   d8eac:	4613      	mov	r3, r2
   d8eae:	460a      	mov	r2, r1
   d8eb0:	4601      	mov	r1, r0
   d8eb2:	4802      	ldr	r0, [pc, #8]	; (d8ebc <strtol+0x10>)
   d8eb4:	6800      	ldr	r0, [r0, #0]
   d8eb6:	f7ff bf73 	b.w	d8da0 <_strtol_r>
   d8eba:	bf00      	nop
   d8ebc:	2003e170 	.word	0x2003e170

000d8ec0 <_strtoul_r>:
   d8ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8ec4:	4680      	mov	r8, r0
   d8ec6:	483c      	ldr	r0, [pc, #240]	; (d8fb8 <_strtoul_r+0xf8>)
   d8ec8:	f8d0 9000 	ldr.w	r9, [r0]
   d8ecc:	460e      	mov	r6, r1
   d8ece:	4635      	mov	r5, r6
   d8ed0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8ed4:	eb09 0004 	add.w	r0, r9, r4
   d8ed8:	7840      	ldrb	r0, [r0, #1]
   d8eda:	f000 0008 	and.w	r0, r0, #8
   d8ede:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d8ee2:	b108      	cbz	r0, d8ee8 <_strtoul_r+0x28>
   d8ee4:	462e      	mov	r6, r5
   d8ee6:	e7f2      	b.n	d8ece <_strtoul_r+0xe>
   d8ee8:	2c2d      	cmp	r4, #45	; 0x2d
   d8eea:	d103      	bne.n	d8ef4 <_strtoul_r+0x34>
   d8eec:	1cb5      	adds	r5, r6, #2
   d8eee:	7874      	ldrb	r4, [r6, #1]
   d8ef0:	2701      	movs	r7, #1
   d8ef2:	e003      	b.n	d8efc <_strtoul_r+0x3c>
   d8ef4:	2c2b      	cmp	r4, #43	; 0x2b
   d8ef6:	bf04      	itt	eq
   d8ef8:	7874      	ldrbeq	r4, [r6, #1]
   d8efa:	1cb5      	addeq	r5, r6, #2
   d8efc:	b113      	cbz	r3, d8f04 <_strtoul_r+0x44>
   d8efe:	2b10      	cmp	r3, #16
   d8f00:	d10a      	bne.n	d8f18 <_strtoul_r+0x58>
   d8f02:	e053      	b.n	d8fac <_strtoul_r+0xec>
   d8f04:	2c30      	cmp	r4, #48	; 0x30
   d8f06:	d14f      	bne.n	d8fa8 <_strtoul_r+0xe8>
   d8f08:	7828      	ldrb	r0, [r5, #0]
   d8f0a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8f0e:	2858      	cmp	r0, #88	; 0x58
   d8f10:	d145      	bne.n	d8f9e <_strtoul_r+0xde>
   d8f12:	786c      	ldrb	r4, [r5, #1]
   d8f14:	2310      	movs	r3, #16
   d8f16:	3502      	adds	r5, #2
   d8f18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8f1c:	2600      	movs	r6, #0
   d8f1e:	fbbc fcf3 	udiv	ip, ip, r3
   d8f22:	fb03 fa0c 	mul.w	sl, r3, ip
   d8f26:	ea6f 0a0a 	mvn.w	sl, sl
   d8f2a:	4630      	mov	r0, r6
   d8f2c:	eb09 0e04 	add.w	lr, r9, r4
   d8f30:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8f34:	f01e 0f04 	tst.w	lr, #4
   d8f38:	d001      	beq.n	d8f3e <_strtoul_r+0x7e>
   d8f3a:	3c30      	subs	r4, #48	; 0x30
   d8f3c:	e00b      	b.n	d8f56 <_strtoul_r+0x96>
   d8f3e:	f01e 0e03 	ands.w	lr, lr, #3
   d8f42:	d01a      	beq.n	d8f7a <_strtoul_r+0xba>
   d8f44:	f1be 0f01 	cmp.w	lr, #1
   d8f48:	bf0c      	ite	eq
   d8f4a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8f4e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8f52:	ebce 0404 	rsb	r4, lr, r4
   d8f56:	42a3      	cmp	r3, r4
   d8f58:	dd0f      	ble.n	d8f7a <_strtoul_r+0xba>
   d8f5a:	2e00      	cmp	r6, #0
   d8f5c:	db08      	blt.n	d8f70 <_strtoul_r+0xb0>
   d8f5e:	4560      	cmp	r0, ip
   d8f60:	d806      	bhi.n	d8f70 <_strtoul_r+0xb0>
   d8f62:	d101      	bne.n	d8f68 <_strtoul_r+0xa8>
   d8f64:	4554      	cmp	r4, sl
   d8f66:	dc03      	bgt.n	d8f70 <_strtoul_r+0xb0>
   d8f68:	fb03 4000 	mla	r0, r3, r0, r4
   d8f6c:	2601      	movs	r6, #1
   d8f6e:	e001      	b.n	d8f74 <_strtoul_r+0xb4>
   d8f70:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8f74:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8f78:	e7d8      	b.n	d8f2c <_strtoul_r+0x6c>
   d8f7a:	2e00      	cmp	r6, #0
   d8f7c:	da07      	bge.n	d8f8e <_strtoul_r+0xce>
   d8f7e:	2322      	movs	r3, #34	; 0x22
   d8f80:	f8c8 3000 	str.w	r3, [r8]
   d8f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8f88:	b92a      	cbnz	r2, d8f96 <_strtoul_r+0xd6>
   d8f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f8e:	b107      	cbz	r7, d8f92 <_strtoul_r+0xd2>
   d8f90:	4240      	negs	r0, r0
   d8f92:	b172      	cbz	r2, d8fb2 <_strtoul_r+0xf2>
   d8f94:	b106      	cbz	r6, d8f98 <_strtoul_r+0xd8>
   d8f96:	1e69      	subs	r1, r5, #1
   d8f98:	6011      	str	r1, [r2, #0]
   d8f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f9e:	2430      	movs	r4, #48	; 0x30
   d8fa0:	2b00      	cmp	r3, #0
   d8fa2:	d1b9      	bne.n	d8f18 <_strtoul_r+0x58>
   d8fa4:	2308      	movs	r3, #8
   d8fa6:	e7b7      	b.n	d8f18 <_strtoul_r+0x58>
   d8fa8:	230a      	movs	r3, #10
   d8faa:	e7b5      	b.n	d8f18 <_strtoul_r+0x58>
   d8fac:	2c30      	cmp	r4, #48	; 0x30
   d8fae:	d0ab      	beq.n	d8f08 <_strtoul_r+0x48>
   d8fb0:	e7b2      	b.n	d8f18 <_strtoul_r+0x58>
   d8fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8fb6:	bf00      	nop
   d8fb8:	2003e10c 	.word	0x2003e10c

000d8fbc <strtoul>:
   d8fbc:	4613      	mov	r3, r2
   d8fbe:	460a      	mov	r2, r1
   d8fc0:	4601      	mov	r1, r0
   d8fc2:	4802      	ldr	r0, [pc, #8]	; (d8fcc <strtoul+0x10>)
   d8fc4:	6800      	ldr	r0, [r0, #0]
   d8fc6:	f7ff bf7b 	b.w	d8ec0 <_strtoul_r>
   d8fca:	bf00      	nop
   d8fcc:	2003e170 	.word	0x2003e170

000d8fd0 <__tzcalc_limits>:
   d8fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fd4:	4604      	mov	r4, r0
   d8fd6:	f000 fa6f 	bl	d94b8 <__gettzinfo>
   d8fda:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d8fde:	429c      	cmp	r4, r3
   d8fe0:	f340 8096 	ble.w	d9110 <__tzcalc_limits+0x140>
   d8fe4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8fe8:	18e3      	adds	r3, r4, r3
   d8fea:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d8fee:	109b      	asrs	r3, r3, #2
   d8ff0:	f240 156d 	movw	r5, #365	; 0x16d
   d8ff4:	fb05 3502 	mla	r5, r5, r2, r3
   d8ff8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8ffc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d9000:	fb92 f3f3 	sdiv	r3, r2, r3
   d9004:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9008:	442b      	add	r3, r5
   d900a:	18a5      	adds	r5, r4, r2
   d900c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9010:	fb95 f5f2 	sdiv	r5, r5, r2
   d9014:	441d      	add	r5, r3
   d9016:	2364      	movs	r3, #100	; 0x64
   d9018:	fb94 f7f2 	sdiv	r7, r4, r2
   d901c:	fb94 f6f3 	sdiv	r6, r4, r3
   d9020:	fb02 4717 	mls	r7, r2, r7, r4
   d9024:	fb03 4616 	mls	r6, r3, r6, r4
   d9028:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d902c:	fab7 fe87 	clz	lr, r7
   d9030:	9301      	str	r3, [sp, #4]
   d9032:	f004 0303 	and.w	r3, r4, #3
   d9036:	6044      	str	r4, [r0, #4]
   d9038:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d903c:	4601      	mov	r1, r0
   d903e:	9300      	str	r3, [sp, #0]
   d9040:	f04f 0c07 	mov.w	ip, #7
   d9044:	7a0b      	ldrb	r3, [r1, #8]
   d9046:	2b4a      	cmp	r3, #74	; 0x4a
   d9048:	d10e      	bne.n	d9068 <__tzcalc_limits+0x98>
   d904a:	694b      	ldr	r3, [r1, #20]
   d904c:	9a00      	ldr	r2, [sp, #0]
   d904e:	18ec      	adds	r4, r5, r3
   d9050:	b902      	cbnz	r2, d9054 <__tzcalc_limits+0x84>
   d9052:	b906      	cbnz	r6, d9056 <__tzcalc_limits+0x86>
   d9054:	b927      	cbnz	r7, d9060 <__tzcalc_limits+0x90>
   d9056:	2b3b      	cmp	r3, #59	; 0x3b
   d9058:	bfd4      	ite	le
   d905a:	2300      	movle	r3, #0
   d905c:	2301      	movgt	r3, #1
   d905e:	e000      	b.n	d9062 <__tzcalc_limits+0x92>
   d9060:	2300      	movs	r3, #0
   d9062:	4423      	add	r3, r4
   d9064:	3b01      	subs	r3, #1
   d9066:	e03f      	b.n	d90e8 <__tzcalc_limits+0x118>
   d9068:	2b44      	cmp	r3, #68	; 0x44
   d906a:	d102      	bne.n	d9072 <__tzcalc_limits+0xa2>
   d906c:	694b      	ldr	r3, [r1, #20]
   d906e:	442b      	add	r3, r5
   d9070:	e03a      	b.n	d90e8 <__tzcalc_limits+0x118>
   d9072:	9b00      	ldr	r3, [sp, #0]
   d9074:	b92b      	cbnz	r3, d9082 <__tzcalc_limits+0xb2>
   d9076:	2e00      	cmp	r6, #0
   d9078:	bf0c      	ite	eq
   d907a:	46f0      	moveq	r8, lr
   d907c:	f04f 0801 	movne.w	r8, #1
   d9080:	e000      	b.n	d9084 <__tzcalc_limits+0xb4>
   d9082:	46f0      	mov	r8, lr
   d9084:	4b24      	ldr	r3, [pc, #144]	; (d9118 <__tzcalc_limits+0x148>)
   d9086:	68cc      	ldr	r4, [r1, #12]
   d9088:	2230      	movs	r2, #48	; 0x30
   d908a:	fb02 3808 	mla	r8, r2, r8, r3
   d908e:	f1a8 0a04 	sub.w	sl, r8, #4
   d9092:	46a9      	mov	r9, r5
   d9094:	2301      	movs	r3, #1
   d9096:	42a3      	cmp	r3, r4
   d9098:	da04      	bge.n	d90a4 <__tzcalc_limits+0xd4>
   d909a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d909e:	3301      	adds	r3, #1
   d90a0:	44d9      	add	r9, fp
   d90a2:	e7f8      	b.n	d9096 <__tzcalc_limits+0xc6>
   d90a4:	f109 0304 	add.w	r3, r9, #4
   d90a8:	fb93 fbfc 	sdiv	fp, r3, ip
   d90ac:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d90b0:	2c01      	cmp	r4, #1
   d90b2:	ebca 0a03 	rsb	sl, sl, r3
   d90b6:	694b      	ldr	r3, [r1, #20]
   d90b8:	bfb8      	it	lt
   d90ba:	2401      	movlt	r4, #1
   d90bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d90c0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d90c4:	690b      	ldr	r3, [r1, #16]
   d90c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d90ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d90ce:	bf48      	it	mi
   d90d0:	f10a 0a07 	addmi.w	sl, sl, #7
   d90d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d90d8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d90dc:	4453      	add	r3, sl
   d90de:	42a3      	cmp	r3, r4
   d90e0:	db01      	blt.n	d90e6 <__tzcalc_limits+0x116>
   d90e2:	3b07      	subs	r3, #7
   d90e4:	e7fb      	b.n	d90de <__tzcalc_limits+0x10e>
   d90e6:	444b      	add	r3, r9
   d90e8:	698c      	ldr	r4, [r1, #24]
   d90ea:	4a0c      	ldr	r2, [pc, #48]	; (d911c <__tzcalc_limits+0x14c>)
   d90ec:	fb02 4303 	mla	r3, r2, r3, r4
   d90f0:	6a0c      	ldr	r4, [r1, #32]
   d90f2:	4423      	add	r3, r4
   d90f4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d90f8:	9b01      	ldr	r3, [sp, #4]
   d90fa:	4299      	cmp	r1, r3
   d90fc:	d1a2      	bne.n	d9044 <__tzcalc_limits+0x74>
   d90fe:	69c3      	ldr	r3, [r0, #28]
   d9100:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d9102:	4293      	cmp	r3, r2
   d9104:	bfac      	ite	ge
   d9106:	2300      	movge	r3, #0
   d9108:	2301      	movlt	r3, #1
   d910a:	6003      	str	r3, [r0, #0]
   d910c:	2001      	movs	r0, #1
   d910e:	e000      	b.n	d9112 <__tzcalc_limits+0x142>
   d9110:	2000      	movs	r0, #0
   d9112:	b003      	add	sp, #12
   d9114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9118:	000da054 	.word	0x000da054
   d911c:	00015180 	.word	0x00015180

000d9120 <__tz_lock>:
   d9120:	4770      	bx	lr

000d9122 <__tz_unlock>:
   d9122:	4770      	bx	lr

000d9124 <_tzset_unlocked>:
   d9124:	4b01      	ldr	r3, [pc, #4]	; (d912c <_tzset_unlocked+0x8>)
   d9126:	6818      	ldr	r0, [r3, #0]
   d9128:	f000 b802 	b.w	d9130 <_tzset_unlocked_r>
   d912c:	2003e170 	.word	0x2003e170

000d9130 <_tzset_unlocked_r>:
   d9130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9134:	b08d      	sub	sp, #52	; 0x34
   d9136:	4607      	mov	r7, r0
   d9138:	f000 f9be 	bl	d94b8 <__gettzinfo>
   d913c:	49b0      	ldr	r1, [pc, #704]	; (d9400 <_tzset_unlocked_r+0x2d0>)
   d913e:	4eb1      	ldr	r6, [pc, #708]	; (d9404 <_tzset_unlocked_r+0x2d4>)
   d9140:	4604      	mov	r4, r0
   d9142:	4638      	mov	r0, r7
   d9144:	f000 f9b0 	bl	d94a8 <_getenv_r>
   d9148:	4605      	mov	r5, r0
   d914a:	b960      	cbnz	r0, d9166 <_tzset_unlocked_r+0x36>
   d914c:	4bae      	ldr	r3, [pc, #696]	; (d9408 <_tzset_unlocked_r+0x2d8>)
   d914e:	4aaf      	ldr	r2, [pc, #700]	; (d940c <_tzset_unlocked_r+0x2dc>)
   d9150:	6018      	str	r0, [r3, #0]
   d9152:	4baf      	ldr	r3, [pc, #700]	; (d9410 <_tzset_unlocked_r+0x2e0>)
   d9154:	6018      	str	r0, [r3, #0]
   d9156:	4baf      	ldr	r3, [pc, #700]	; (d9414 <_tzset_unlocked_r+0x2e4>)
   d9158:	6830      	ldr	r0, [r6, #0]
   d915a:	601a      	str	r2, [r3, #0]
   d915c:	605a      	str	r2, [r3, #4]
   d915e:	f7fd f8fb 	bl	d6358 <free>
   d9162:	6035      	str	r5, [r6, #0]
   d9164:	e148      	b.n	d93f8 <_tzset_unlocked_r+0x2c8>
   d9166:	6831      	ldr	r1, [r6, #0]
   d9168:	b979      	cbnz	r1, d918a <_tzset_unlocked_r+0x5a>
   d916a:	6830      	ldr	r0, [r6, #0]
   d916c:	f7fd f8f4 	bl	d6358 <free>
   d9170:	4628      	mov	r0, r5
   d9172:	f7ff fde4 	bl	d8d3e <strlen>
   d9176:	1c41      	adds	r1, r0, #1
   d9178:	4638      	mov	r0, r7
   d917a:	f7fd f915 	bl	d63a8 <_malloc_r>
   d917e:	6030      	str	r0, [r6, #0]
   d9180:	b148      	cbz	r0, d9196 <_tzset_unlocked_r+0x66>
   d9182:	4629      	mov	r1, r5
   d9184:	f7ff fdb8 	bl	d8cf8 <strcpy>
   d9188:	e005      	b.n	d9196 <_tzset_unlocked_r+0x66>
   d918a:	f7ff fdab 	bl	d8ce4 <strcmp>
   d918e:	2800      	cmp	r0, #0
   d9190:	f000 8132 	beq.w	d93f8 <_tzset_unlocked_r+0x2c8>
   d9194:	e7e9      	b.n	d916a <_tzset_unlocked_r+0x3a>
   d9196:	782b      	ldrb	r3, [r5, #0]
   d9198:	4a9f      	ldr	r2, [pc, #636]	; (d9418 <_tzset_unlocked_r+0x2e8>)
   d919a:	49a0      	ldr	r1, [pc, #640]	; (d941c <_tzset_unlocked_r+0x2ec>)
   d919c:	2b3a      	cmp	r3, #58	; 0x3a
   d919e:	bf08      	it	eq
   d91a0:	3501      	addeq	r5, #1
   d91a2:	ae0a      	add	r6, sp, #40	; 0x28
   d91a4:	4633      	mov	r3, r6
   d91a6:	4628      	mov	r0, r5
   d91a8:	f7fd f8e6 	bl	d6378 <siscanf>
   d91ac:	2800      	cmp	r0, #0
   d91ae:	f340 8123 	ble.w	d93f8 <_tzset_unlocked_r+0x2c8>
   d91b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d91b4:	18ef      	adds	r7, r5, r3
   d91b6:	5ceb      	ldrb	r3, [r5, r3]
   d91b8:	2b2d      	cmp	r3, #45	; 0x2d
   d91ba:	d103      	bne.n	d91c4 <_tzset_unlocked_r+0x94>
   d91bc:	3701      	adds	r7, #1
   d91be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d91c2:	e003      	b.n	d91cc <_tzset_unlocked_r+0x9c>
   d91c4:	2b2b      	cmp	r3, #43	; 0x2b
   d91c6:	bf08      	it	eq
   d91c8:	3701      	addeq	r7, #1
   d91ca:	2501      	movs	r5, #1
   d91cc:	f10d 0a20 	add.w	sl, sp, #32
   d91d0:	f10d 0b1e 	add.w	fp, sp, #30
   d91d4:	f04f 0800 	mov.w	r8, #0
   d91d8:	9603      	str	r6, [sp, #12]
   d91da:	f8cd a008 	str.w	sl, [sp, #8]
   d91de:	9601      	str	r6, [sp, #4]
   d91e0:	f8cd b000 	str.w	fp, [sp]
   d91e4:	4633      	mov	r3, r6
   d91e6:	aa07      	add	r2, sp, #28
   d91e8:	498d      	ldr	r1, [pc, #564]	; (d9420 <_tzset_unlocked_r+0x2f0>)
   d91ea:	f8ad 801e 	strh.w	r8, [sp, #30]
   d91ee:	4638      	mov	r0, r7
   d91f0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d91f4:	f7fd f8c0 	bl	d6378 <siscanf>
   d91f8:	4540      	cmp	r0, r8
   d91fa:	f340 80fd 	ble.w	d93f8 <_tzset_unlocked_r+0x2c8>
   d91fe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9202:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9206:	f8df 9224 	ldr.w	r9, [pc, #548]	; d942c <_tzset_unlocked_r+0x2fc>
   d920a:	213c      	movs	r1, #60	; 0x3c
   d920c:	fb01 3302 	mla	r3, r1, r2, r3
   d9210:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9214:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9218:	fb01 3302 	mla	r3, r1, r2, r3
   d921c:	435d      	muls	r5, r3
   d921e:	6225      	str	r5, [r4, #32]
   d9220:	4d7c      	ldr	r5, [pc, #496]	; (d9414 <_tzset_unlocked_r+0x2e4>)
   d9222:	4b7d      	ldr	r3, [pc, #500]	; (d9418 <_tzset_unlocked_r+0x2e8>)
   d9224:	602b      	str	r3, [r5, #0]
   d9226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9228:	497c      	ldr	r1, [pc, #496]	; (d941c <_tzset_unlocked_r+0x2ec>)
   d922a:	441f      	add	r7, r3
   d922c:	464a      	mov	r2, r9
   d922e:	4633      	mov	r3, r6
   d9230:	4638      	mov	r0, r7
   d9232:	f7fd f8a1 	bl	d6378 <siscanf>
   d9236:	4540      	cmp	r0, r8
   d9238:	dc08      	bgt.n	d924c <_tzset_unlocked_r+0x11c>
   d923a:	682b      	ldr	r3, [r5, #0]
   d923c:	606b      	str	r3, [r5, #4]
   d923e:	4b72      	ldr	r3, [pc, #456]	; (d9408 <_tzset_unlocked_r+0x2d8>)
   d9240:	6a22      	ldr	r2, [r4, #32]
   d9242:	601a      	str	r2, [r3, #0]
   d9244:	4b72      	ldr	r3, [pc, #456]	; (d9410 <_tzset_unlocked_r+0x2e0>)
   d9246:	f8c3 8000 	str.w	r8, [r3]
   d924a:	e0d5      	b.n	d93f8 <_tzset_unlocked_r+0x2c8>
   d924c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d924e:	f8c5 9004 	str.w	r9, [r5, #4]
   d9252:	18fd      	adds	r5, r7, r3
   d9254:	5cfb      	ldrb	r3, [r7, r3]
   d9256:	2b2d      	cmp	r3, #45	; 0x2d
   d9258:	d103      	bne.n	d9262 <_tzset_unlocked_r+0x132>
   d925a:	3501      	adds	r5, #1
   d925c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9260:	e003      	b.n	d926a <_tzset_unlocked_r+0x13a>
   d9262:	2b2b      	cmp	r3, #43	; 0x2b
   d9264:	bf08      	it	eq
   d9266:	3501      	addeq	r5, #1
   d9268:	2701      	movs	r7, #1
   d926a:	2300      	movs	r3, #0
   d926c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9270:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9274:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9278:	930a      	str	r3, [sp, #40]	; 0x28
   d927a:	9603      	str	r6, [sp, #12]
   d927c:	f8cd a008 	str.w	sl, [sp, #8]
   d9280:	9601      	str	r6, [sp, #4]
   d9282:	f8cd b000 	str.w	fp, [sp]
   d9286:	4633      	mov	r3, r6
   d9288:	aa07      	add	r2, sp, #28
   d928a:	4965      	ldr	r1, [pc, #404]	; (d9420 <_tzset_unlocked_r+0x2f0>)
   d928c:	4628      	mov	r0, r5
   d928e:	f7fd f873 	bl	d6378 <siscanf>
   d9292:	2800      	cmp	r0, #0
   d9294:	dc04      	bgt.n	d92a0 <_tzset_unlocked_r+0x170>
   d9296:	6a23      	ldr	r3, [r4, #32]
   d9298:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d929c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d929e:	e00e      	b.n	d92be <_tzset_unlocked_r+0x18e>
   d92a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d92a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d92a8:	213c      	movs	r1, #60	; 0x3c
   d92aa:	fb01 3302 	mla	r3, r1, r2, r3
   d92ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d92b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d92b6:	fb01 3302 	mla	r3, r1, r2, r3
   d92ba:	435f      	muls	r7, r3
   d92bc:	63e7      	str	r7, [r4, #60]	; 0x3c
   d92be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d92c0:	4627      	mov	r7, r4
   d92c2:	441d      	add	r5, r3
   d92c4:	f04f 0900 	mov.w	r9, #0
   d92c8:	782b      	ldrb	r3, [r5, #0]
   d92ca:	2b2c      	cmp	r3, #44	; 0x2c
   d92cc:	bf08      	it	eq
   d92ce:	3501      	addeq	r5, #1
   d92d0:	f895 8000 	ldrb.w	r8, [r5]
   d92d4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d92d8:	d126      	bne.n	d9328 <_tzset_unlocked_r+0x1f8>
   d92da:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d92de:	9302      	str	r3, [sp, #8]
   d92e0:	ab09      	add	r3, sp, #36	; 0x24
   d92e2:	9300      	str	r3, [sp, #0]
   d92e4:	9603      	str	r6, [sp, #12]
   d92e6:	9601      	str	r6, [sp, #4]
   d92e8:	4633      	mov	r3, r6
   d92ea:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d92ee:	494d      	ldr	r1, [pc, #308]	; (d9424 <_tzset_unlocked_r+0x2f4>)
   d92f0:	4628      	mov	r0, r5
   d92f2:	f7fd f841 	bl	d6378 <siscanf>
   d92f6:	2803      	cmp	r0, #3
   d92f8:	d17e      	bne.n	d93f8 <_tzset_unlocked_r+0x2c8>
   d92fa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d92fe:	1e4b      	subs	r3, r1, #1
   d9300:	2b0b      	cmp	r3, #11
   d9302:	d879      	bhi.n	d93f8 <_tzset_unlocked_r+0x2c8>
   d9304:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9308:	1e53      	subs	r3, r2, #1
   d930a:	2b04      	cmp	r3, #4
   d930c:	d874      	bhi.n	d93f8 <_tzset_unlocked_r+0x2c8>
   d930e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9312:	2b06      	cmp	r3, #6
   d9314:	d870      	bhi.n	d93f8 <_tzset_unlocked_r+0x2c8>
   d9316:	f887 8008 	strb.w	r8, [r7, #8]
   d931a:	60f9      	str	r1, [r7, #12]
   d931c:	613a      	str	r2, [r7, #16]
   d931e:	617b      	str	r3, [r7, #20]
   d9320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9322:	eb05 0803 	add.w	r8, r5, r3
   d9326:	e02a      	b.n	d937e <_tzset_unlocked_r+0x24e>
   d9328:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d932c:	bf06      	itte	eq
   d932e:	3501      	addeq	r5, #1
   d9330:	4643      	moveq	r3, r8
   d9332:	2344      	movne	r3, #68	; 0x44
   d9334:	220a      	movs	r2, #10
   d9336:	a90b      	add	r1, sp, #44	; 0x2c
   d9338:	4628      	mov	r0, r5
   d933a:	9305      	str	r3, [sp, #20]
   d933c:	f7ff fe3e 	bl	d8fbc <strtoul>
   d9340:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9344:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9348:	4545      	cmp	r5, r8
   d934a:	9b05      	ldr	r3, [sp, #20]
   d934c:	d114      	bne.n	d9378 <_tzset_unlocked_r+0x248>
   d934e:	234d      	movs	r3, #77	; 0x4d
   d9350:	f1b9 0f00 	cmp.w	r9, #0
   d9354:	d107      	bne.n	d9366 <_tzset_unlocked_r+0x236>
   d9356:	7223      	strb	r3, [r4, #8]
   d9358:	2303      	movs	r3, #3
   d935a:	60e3      	str	r3, [r4, #12]
   d935c:	2302      	movs	r3, #2
   d935e:	6123      	str	r3, [r4, #16]
   d9360:	f8c4 9014 	str.w	r9, [r4, #20]
   d9364:	e00b      	b.n	d937e <_tzset_unlocked_r+0x24e>
   d9366:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d936a:	230b      	movs	r3, #11
   d936c:	62a3      	str	r3, [r4, #40]	; 0x28
   d936e:	2301      	movs	r3, #1
   d9370:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9372:	2300      	movs	r3, #0
   d9374:	6323      	str	r3, [r4, #48]	; 0x30
   d9376:	e002      	b.n	d937e <_tzset_unlocked_r+0x24e>
   d9378:	b280      	uxth	r0, r0
   d937a:	723b      	strb	r3, [r7, #8]
   d937c:	6178      	str	r0, [r7, #20]
   d937e:	2302      	movs	r3, #2
   d9380:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9384:	2300      	movs	r3, #0
   d9386:	f8ad 301e 	strh.w	r3, [sp, #30]
   d938a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d938e:	930a      	str	r3, [sp, #40]	; 0x28
   d9390:	f898 3000 	ldrb.w	r3, [r8]
   d9394:	2b2f      	cmp	r3, #47	; 0x2f
   d9396:	d10b      	bne.n	d93b0 <_tzset_unlocked_r+0x280>
   d9398:	9603      	str	r6, [sp, #12]
   d939a:	f8cd a008 	str.w	sl, [sp, #8]
   d939e:	9601      	str	r6, [sp, #4]
   d93a0:	f8cd b000 	str.w	fp, [sp]
   d93a4:	4633      	mov	r3, r6
   d93a6:	aa07      	add	r2, sp, #28
   d93a8:	491f      	ldr	r1, [pc, #124]	; (d9428 <_tzset_unlocked_r+0x2f8>)
   d93aa:	4640      	mov	r0, r8
   d93ac:	f7fc ffe4 	bl	d6378 <siscanf>
   d93b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d93b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d93b8:	213c      	movs	r1, #60	; 0x3c
   d93ba:	fb01 3302 	mla	r3, r1, r2, r3
   d93be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d93c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d93c6:	fb01 3302 	mla	r3, r1, r2, r3
   d93ca:	61bb      	str	r3, [r7, #24]
   d93cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d93ce:	f109 0901 	add.w	r9, r9, #1
   d93d2:	f1b9 0f02 	cmp.w	r9, #2
   d93d6:	4445      	add	r5, r8
   d93d8:	f107 071c 	add.w	r7, r7, #28
   d93dc:	f47f af74 	bne.w	d92c8 <_tzset_unlocked_r+0x198>
   d93e0:	6860      	ldr	r0, [r4, #4]
   d93e2:	f7ff fdf5 	bl	d8fd0 <__tzcalc_limits>
   d93e6:	4b08      	ldr	r3, [pc, #32]	; (d9408 <_tzset_unlocked_r+0x2d8>)
   d93e8:	6a22      	ldr	r2, [r4, #32]
   d93ea:	601a      	str	r2, [r3, #0]
   d93ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d93ee:	1a9b      	subs	r3, r3, r2
   d93f0:	4a07      	ldr	r2, [pc, #28]	; (d9410 <_tzset_unlocked_r+0x2e0>)
   d93f2:	bf18      	it	ne
   d93f4:	2301      	movne	r3, #1
   d93f6:	6013      	str	r3, [r2, #0]
   d93f8:	b00d      	add	sp, #52	; 0x34
   d93fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93fe:	bf00      	nop
   d9400:	000da0b4 	.word	0x000da0b4
   d9404:	2003e7e0 	.word	0x2003e7e0
   d9408:	2003e7e8 	.word	0x2003e7e8
   d940c:	000da0b7 	.word	0x000da0b7
   d9410:	2003e7e4 	.word	0x2003e7e4
   d9414:	2003e174 	.word	0x2003e174
   d9418:	2003e7d3 	.word	0x2003e7d3
   d941c:	000da0bb 	.word	0x000da0bb
   d9420:	000da0de 	.word	0x000da0de
   d9424:	000da0ca 	.word	0x000da0ca
   d9428:	000da0dd 	.word	0x000da0dd
   d942c:	2003e7c8 	.word	0x2003e7c8

000d9430 <_findenv_r>:
   d9430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9434:	4607      	mov	r7, r0
   d9436:	468b      	mov	fp, r1
   d9438:	4690      	mov	r8, r2
   d943a:	f000 f8d9 	bl	d95f0 <__env_lock>
   d943e:	4b19      	ldr	r3, [pc, #100]	; (d94a4 <_findenv_r+0x74>)
   d9440:	681d      	ldr	r5, [r3, #0]
   d9442:	469a      	mov	sl, r3
   d9444:	b13d      	cbz	r5, d9456 <_findenv_r+0x26>
   d9446:	465c      	mov	r4, fp
   d9448:	4623      	mov	r3, r4
   d944a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d944e:	b142      	cbz	r2, d9462 <_findenv_r+0x32>
   d9450:	2a3d      	cmp	r2, #61	; 0x3d
   d9452:	461c      	mov	r4, r3
   d9454:	d1f8      	bne.n	d9448 <_findenv_r+0x18>
   d9456:	4638      	mov	r0, r7
   d9458:	f000 f8cb 	bl	d95f2 <__env_unlock>
   d945c:	2000      	movs	r0, #0
   d945e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9462:	ebcb 0404 	rsb	r4, fp, r4
   d9466:	46a9      	mov	r9, r5
   d9468:	f859 0b04 	ldr.w	r0, [r9], #4
   d946c:	2800      	cmp	r0, #0
   d946e:	d0f2      	beq.n	d9456 <_findenv_r+0x26>
   d9470:	4622      	mov	r2, r4
   d9472:	4659      	mov	r1, fp
   d9474:	f7ff fc6b 	bl	d8d4e <strncmp>
   d9478:	b988      	cbnz	r0, d949e <_findenv_r+0x6e>
   d947a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d947e:	191e      	adds	r6, r3, r4
   d9480:	5d1b      	ldrb	r3, [r3, r4]
   d9482:	2b3d      	cmp	r3, #61	; 0x3d
   d9484:	d10b      	bne.n	d949e <_findenv_r+0x6e>
   d9486:	f8da 3000 	ldr.w	r3, [sl]
   d948a:	1aed      	subs	r5, r5, r3
   d948c:	10ad      	asrs	r5, r5, #2
   d948e:	4638      	mov	r0, r7
   d9490:	f8c8 5000 	str.w	r5, [r8]
   d9494:	f000 f8ad 	bl	d95f2 <__env_unlock>
   d9498:	1c70      	adds	r0, r6, #1
   d949a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d949e:	464d      	mov	r5, r9
   d94a0:	e7e1      	b.n	d9466 <_findenv_r+0x36>
   d94a2:	bf00      	nop
   d94a4:	2003e1bc 	.word	0x2003e1bc

000d94a8 <_getenv_r>:
   d94a8:	b507      	push	{r0, r1, r2, lr}
   d94aa:	aa01      	add	r2, sp, #4
   d94ac:	f7ff ffc0 	bl	d9430 <_findenv_r>
   d94b0:	b003      	add	sp, #12
   d94b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d94b8 <__gettzinfo>:
   d94b8:	4800      	ldr	r0, [pc, #0]	; (d94bc <__gettzinfo+0x4>)
   d94ba:	4770      	bx	lr
   d94bc:	2003e17c 	.word	0x2003e17c

000d94c0 <gmtime_r>:
   d94c0:	6802      	ldr	r2, [r0, #0]
   d94c2:	4b47      	ldr	r3, [pc, #284]	; (d95e0 <gmtime_r+0x120>)
   d94c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d94c6:	fb92 f4f3 	sdiv	r4, r2, r3
   d94ca:	fb03 2214 	mls	r2, r3, r4, r2
   d94ce:	2a00      	cmp	r2, #0
   d94d0:	bfbc      	itt	lt
   d94d2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d94d6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d94da:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d94de:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d94e2:	fb92 f3f0 	sdiv	r3, r2, r0
   d94e6:	fb00 2213 	mls	r2, r0, r3, r2
   d94ea:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d94ee:	bfac      	ite	ge
   d94f0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d94f4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d94f8:	608b      	str	r3, [r1, #8]
   d94fa:	fb92 f3f0 	sdiv	r3, r2, r0
   d94fe:	fb00 2213 	mls	r2, r0, r3, r2
   d9502:	604b      	str	r3, [r1, #4]
   d9504:	600a      	str	r2, [r1, #0]
   d9506:	2307      	movs	r3, #7
   d9508:	1ce2      	adds	r2, r4, #3
   d950a:	fb92 f3f3 	sdiv	r3, r2, r3
   d950e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9512:	1ad3      	subs	r3, r2, r3
   d9514:	618b      	str	r3, [r1, #24]
   d9516:	4b33      	ldr	r3, [pc, #204]	; (d95e4 <gmtime_r+0x124>)
   d9518:	4d33      	ldr	r5, [pc, #204]	; (d95e8 <gmtime_r+0x128>)
   d951a:	fb94 f5f5 	sdiv	r5, r4, r5
   d951e:	fb03 4405 	mla	r4, r3, r5, r4
   d9522:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9526:	fbb4 f2f2 	udiv	r2, r4, r2
   d952a:	4422      	add	r2, r4
   d952c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9530:	fbb4 f3f7 	udiv	r3, r4, r7
   d9534:	1ad2      	subs	r2, r2, r3
   d9536:	482d      	ldr	r0, [pc, #180]	; (d95ec <gmtime_r+0x12c>)
   d9538:	fbb4 f0f0 	udiv	r0, r4, r0
   d953c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9540:	1a13      	subs	r3, r2, r0
   d9542:	fbb3 f6f6 	udiv	r6, r3, r6
   d9546:	4434      	add	r4, r6
   d9548:	f240 126d 	movw	r2, #365	; 0x16d
   d954c:	fbb3 f0f2 	udiv	r0, r3, r2
   d9550:	fbb3 f3f7 	udiv	r3, r3, r7
   d9554:	1ae3      	subs	r3, r4, r3
   d9556:	fb02 3310 	mls	r3, r2, r0, r3
   d955a:	2499      	movs	r4, #153	; 0x99
   d955c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9560:	3202      	adds	r2, #2
   d9562:	fbb2 f2f4 	udiv	r2, r2, r4
   d9566:	2a0a      	cmp	r2, #10
   d9568:	fb04 f402 	mul.w	r4, r4, r2
   d956c:	f104 0602 	add.w	r6, r4, #2
   d9570:	f04f 0405 	mov.w	r4, #5
   d9574:	fbb6 f4f4 	udiv	r4, r6, r4
   d9578:	bf34      	ite	cc
   d957a:	2602      	movcc	r6, #2
   d957c:	f06f 0609 	mvncs.w	r6, #9
   d9580:	4416      	add	r6, r2
   d9582:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9586:	fb02 0505 	mla	r5, r2, r5, r0
   d958a:	1c5f      	adds	r7, r3, #1
   d958c:	2e01      	cmp	r6, #1
   d958e:	bf98      	it	ls
   d9590:	3501      	addls	r5, #1
   d9592:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9596:	eba7 0704 	sub.w	r7, r7, r4
   d959a:	d302      	bcc.n	d95a2 <gmtime_r+0xe2>
   d959c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d95a0:	e014      	b.n	d95cc <gmtime_r+0x10c>
   d95a2:	0782      	lsls	r2, r0, #30
   d95a4:	d105      	bne.n	d95b2 <gmtime_r+0xf2>
   d95a6:	2464      	movs	r4, #100	; 0x64
   d95a8:	fbb0 f2f4 	udiv	r2, r0, r4
   d95ac:	fb04 0212 	mls	r2, r4, r2, r0
   d95b0:	b94a      	cbnz	r2, d95c6 <gmtime_r+0x106>
   d95b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d95b6:	fbb0 f4f2 	udiv	r4, r0, r2
   d95ba:	fb02 0014 	mls	r0, r2, r4, r0
   d95be:	fab0 f280 	clz	r2, r0
   d95c2:	0952      	lsrs	r2, r2, #5
   d95c4:	e000      	b.n	d95c8 <gmtime_r+0x108>
   d95c6:	2201      	movs	r2, #1
   d95c8:	333b      	adds	r3, #59	; 0x3b
   d95ca:	441a      	add	r2, r3
   d95cc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d95d0:	2300      	movs	r3, #0
   d95d2:	61ca      	str	r2, [r1, #28]
   d95d4:	614d      	str	r5, [r1, #20]
   d95d6:	610e      	str	r6, [r1, #16]
   d95d8:	60cf      	str	r7, [r1, #12]
   d95da:	620b      	str	r3, [r1, #32]
   d95dc:	4608      	mov	r0, r1
   d95de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d95e0:	00015180 	.word	0x00015180
   d95e4:	fffdc54f 	.word	0xfffdc54f
   d95e8:	00023ab1 	.word	0x00023ab1
   d95ec:	00023ab0 	.word	0x00023ab0

000d95f0 <__env_lock>:
   d95f0:	4770      	bx	lr

000d95f2 <__env_unlock>:
   d95f2:	4770      	bx	lr

000d95f4 <dynalib_user>:
   d95f4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9604:	0000 0000                                   ....

000d9608 <_ZTV5Timer>:
	...
   d9610:	4325 000d 436d 000d 4129 000d 9b81 000d     %C..mC..)A......
   d9620:	9bbc 000d 9bc1 000d 9bc6 000d 9bca 000d     ................
   d9630:	9bcf 000d 9bd4 000d 9bd8 000d 9be3 000d     ................
   d9640:	9bee 000d 9b81 000d 9b89 000d 9b8d 000d     ................
   d9650:	9b96 000d 9b9e 000d 9baa 000d 9bb0 000d     ................
   d9660:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   d9670:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000d96a0 <_ZL16MemVersionNumber>:
   d96a0:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   d96b0:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   d96c0:	4643 4e55 313d 0d36 000a 3425 312e 2066     CFUN=16...%4.1f 
   d96d0:	0043 3425 312e 2066 2525 2500 2e34 6631     C.%4.1f %%.%4.1f
   d96e0:	6c20 7875 2500 2069 2525 7b00 5422 6d65      lux.%i %%.{"Tem
   d96f0:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
   d9700:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   d9710:	2c66 2220 694c 6867 4c74 7665 6c65 3a22     f, "LightLevel":
   d9720:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   d9730:	7574 6572 2231 253a 2c69 2220 6f53 6c69     ture1":%i, "Soil
   d9740:	6f6d 7369 7574 6572 2232 253a 2c69 2220     moisture2":%i, "
   d9750:	6177 6574 5072 6572 7373 7275 2265 253a     waterPressure":%
   d9760:	2c69 2220 6f53 656c 6f6e 6469 3a22 6925     i, "Solenoid":%i
   d9770:	202c 6222 7461 6574 7972 3a22 6925 202c     , "battery":%i, 
   d9780:	6b22 7965 2231 223a 7325 2c22 2220 6552     "key1":"%s", "Re
   d9790:	6573 7374 3a22 6925 202c 4122 656c 7472     sets":%i, "Alert
   d97a0:	2273 253a 7d69 5200 6177 646e 2d61 6553     s":%i}.Rwanda-Se
   d97b0:	736e 2d65 6e41 2d64 6f43 746e 6f72 2d6c     nse-And-Control-
   d97c0:	6c45 7361 6974 0063 6761 6972 7563 746c     Elastic.agricult
   d97d0:	7275 2d65 7761 2d73 6577 6862 6f6f 006b     ure-aws-webhook.
   d97e0:	7752 6e61 6164 532d 6e65 6573 412d 646e     Rwanda-Sense-And
   d97f0:	432d 6e6f 7274 6c6f 4e00 206f 6144 6174     -Control.No Data
   d9800:	5500 6962 6f64 7374 4820 6f6f 006b 6552     .Ubidots Hook.Re
   d9810:	7073 6e6f 6573 5220 6365 6965 6576 0064     sponse Received.
   d9820:	6e55 6e6b 776f 206e 6572 7073 6e6f 6573     Unknown response
   d9830:	7220 6365 7665 6569 2064 6925 3000 4e00      recevied %i.0.N
   d9840:	206f 6f53 6c69 5320 6e65 6f73 7372 4300     o Soil Sensors.C
   d9850:	6e6f 6966 0067 6e4f 2065 6f53 6c69 5320     onfig.One Soil S
   d9860:	6e65 6f73 0072 7754 206f 6f53 6c69 5320     ensor.Two Soil S
   d9870:	6e65 6f73 7372 4e00 206f 7250 7365 7573     ensors.No Pressu
   d9880:	6572 5320 6e65 6f73 0072 7250 7365 7573     re Sensor.Pressu
   d9890:	6572 5320 6e65 6f73 2072 7250 7365 6e65     re Sensor Presen
   d98a0:	0074 6f4e 4c20 6769 7468 5320 6e65 6f73     t.No Light Senso
   d98b0:	0072 694c 6867 2074 6553 736e 726f 5020     r.Light Sensor P
   d98c0:	6572 6573 746e 4e00 206f 6554 706d 2f20     resent.No Temp /
   d98d0:	4820 6d75 6469 7469 2079 6553 736e 726f      Humidity Sensor
   d98e0:	5020 6572 6573 746e 5300 7465 5620 7265      Present.Set Ver
   d98f0:	6f62 6573 4d20 646f 0065 6c43 6165 6572     bose Mode.Cleare
   d9900:	2064 6556 6272 736f 2065 6f4d 6564 4c00     d Verbose Mode.L
   d9910:	776f 5020 776f 7265 4d20 646f 0065 7254     ow Power Mode.Tr
   d9920:	6575 4e00 726f 616d 206c 704f 7265 7461     ue.Normal Operat
   d9930:	6f69 736e 4600 6c61 6573 4f00 6570 206e     ions.False.Open 
   d9940:	6874 2065 6156 766c 0065 6157 6574 6972     the Valve.Wateri
   d9950:	676e 4300 6f6c 6573 7420 6568 7620 6c61     ng.Close the val
   d9960:	6576 4e00 206f 6f53 656c 6f6e 6469 4120     ve.No Solenoid A
   d9970:	7474 6361 6568 0064 7246 6d6f 2520 2073     ttached.From %s 
   d9980:	6f74 2520 0073 7453 7461 2065 7254 6e61     to %s.State Tran
   d9990:	6973 6974 6e6f 7300 6170 6b72 642f 7665     sition.spark/dev
   d99a0:	6369 2f65 6573 7373 6f69 2f6e 6e65 0064     ice/session/end.
   d99b0:	6154 696b 676e 6120 4e20 7061 5300 6174     Taking a Nap.Sta
   d99c0:	6574 4c00 776f 4220 7461 6574 7972 2d20     te.Low Battery -
   d99d0:	5320 656c 7065 6e69 0067 7245 6f72 2072      Sleeping.Error 
   d99e0:	7453 7461 2065 202d 6552 6573 0074 7245     State - Reset.Er
   d99f0:	6f72 2072 7453 7461 2065 202d 6f50 6577     ror State - Powe
   d9a00:	2072 7943 6c63 0065 7245 6f72 2072 7453     r Cycle.Error St
   d9a10:	7461 2065 202d 7546 6c6c 4d20 646f 6d65     ate - Full Modem
   d9a20:	5220 7365 7465 4500 7272 726f 7420 6b61      Reset.Error tak
   d9a30:	6e69 2067 654d 7361 7275 6d65 6e65 7374     ing Measurements
   d9a40:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
   d9a50:	746e 5200 6c65 6165 6573 5300 6174 6574     nt.Release.State
   d9a60:	664f 6843 0067 6142 7474 7265 4379 6e6f     OfChg.BatteryCon
   d9a70:	6574 7478 4c00 776f 6f50 6577 4d72 646f     text.LowPowerMod
   d9a80:	0065 6554 706d 7265 7461 7275 0065 7548     e.Temperature.Hu
   d9a90:	696d 6964 7974 4c00 6d75 6e69 736f 7469     midity.Luminosit
   d9aa0:	0079 6f53 6c69 6f4d 7369 7574 6572 0031     y.SoilMoisture1.
   d9ab0:	6f53 6c69 6f4d 7369 7574 6572 0032 7250     SoilMoisture2.Pr
   d9ac0:	7365 7573 6572 4d00 6165 7573 6572 4e2d     essure.Measure-N
   d9ad0:	776f 5600 7265 6f62 6573 4d2d 646f 0065     ow.Verbose-Mode.
   d9ae0:	6553 5374 696f 536c 6e65 6f73 7372 5300     SetSoilSensors.S
   d9af0:	7465 7250 7365 7573 6572 6553 736e 726f     etPressureSensor
   d9b00:	5300 7465 694c 6867 5374 6e65 6f73 0072     .SetLightSensor.
   d9b10:	6f53 656c 6f6e 6469 7250 7365 6e65 0074     SolenoidPresent.
   d9b20:	6553 5474 6d65 4870 6d75 6469 6553 736e     SetTempHumidSens
   d9b30:	726f 5400 6d65 2f70 7548 696d 6964 7974     or.Temp/Humidity
   d9b40:	5320 6e65 6f73 2072 6146 6c69 6465 7420      Sensor Failed t
   d9b50:	206f 6e49 6169 696c 657a 2d20 6420 7369     o Inialize - dis
   d9b60:	6261 696c 676e 4600 6961 656c 2064 6f74     abling.Failed to
   d9b70:	6320 6e6f 656e 7463 5300 6174 7472 7075      connect.Startup
   d9b80:	5500 6b6e 6f6e 6e77 4e00 746f 4320 6168     .Unknown.Not Cha
   d9b90:	6772 6e69 0067 6843 7261 6567 0064 6944     rging.Charged.Di
   d9ba0:	6373 6168 6772 6e69 0067 6146 6c75 0074     scharging.Fault.
   d9bb0:	6944 6f63 6e6e 6365 6574 0064 6f4e 656e     Diconnected.None
   d9bc0:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   d9bd0:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   d9be0:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   d9bf0:	5f45 4143 5f54 424e 0031                    E_CAT_NB1.

000d9bfa <_ZL13releaseNumber>:
   d9bfa:	3632 0000 0000                              26....

000d9c00 <_ZTVN5spark13CellularClassE>:
	...
   d9c08:	64a3 000d 6499 000d 648f 000d 6445 000d     .d...d...d..Ed..
   d9c18:	6483 000d 6477 000d 646b 000d 6463 000d     .d..wd..kd..cd..
   d9c28:	6459 000d 644f 000d 7139 000d               Yd..Od..9q..

000d9c34 <_ZTV14CellularSignal>:
	...
   d9c3c:	6551 000d 65b1 000d 6553 000d 65f5 000d     Qe...e..Se...e..
   d9c4c:	6559 000d 65c1 000d 6585 000d 667f 000d     Ye...e...e...f..
   d9c5c:	fffc ffff 0000 0000 66a9 000d               .........f..

000d9c68 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9c70:	66b1 000d 66b7 000d 66fb 000d 66c5 000d     .f...f...f...f..
   d9c80:	66b3 000d                                   .f..

000d9c84 <_ZTVN5spark13EthernetClassE>:
	...
   d9c8c:	6d0f 000d 6d05 000d 6cfb 000d 6cf1 000d     .m...m...l...l..
   d9c9c:	6ce5 000d 6cd9 000d 6ccd 000d 6cc5 000d     .l...l...l...l..
   d9cac:	6cbb 000d 6cb1 000d 7139 000d               .l...l..9q..

000d9cb8 <_ZTV7TwoWire>:
	...
   d9cc0:	6d2d 000d 6d77 000d 6d4f 000d 6d2f 000d     -m..wm..Om../m..
   d9cd0:	6d57 000d 6d5f 000d 6d67 000d 6d6f 000d     Wm.._m..gm..om..

000d9ce0 <_ZTV9IPAddress>:
	...
   d9ce8:	6e6f 000d 6e5f 000d 6e61 000d 6162 6475     on.._n..an..baud
   d9cf8:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9d08:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9d18:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9d28:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9d38:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9d48:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9d58:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9d68:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d9d78:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d9d88:	203d 6400 7465 6961 736c 3d20 0020 0066     = .details = .f.
   d9d98:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d9da8:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d9db8:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d9dc8:	6369 6100 6c6c 0000                         ic.all..

000d9dd0 <_ZTVN5spark9MeshClassE>:
	...
   d9dd8:	6fb3 000d 6fa9 000d 6f9f 000d 6f95 000d     .o...o...o...o..
   d9de8:	6f89 000d 6f7d 000d 6f71 000d 6f69 000d     .o..}o..qo..io..
   d9df8:	6f5f 000d 6f55 000d 7139 000d               _o..Uo..9q..

000d9e04 <_ZTVN5spark12NetworkClassE>:
	...
   d9e0c:	70d1 000d 70db 000d 70e5 000d 70ef 000d     .p...p...p...p..
   d9e1c:	70f9 000d 7105 000d 7111 000d 711d 000d     .p...q...q...q..
   d9e2c:	7125 000d 712f 000d 7139 000d 6977 6972     %q../q..9q..wiri
   d9e3c:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d9e4c:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d9e5c:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
   d9e6c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d9e7c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d9e8c:	0000 0000                                   ....

000d9e90 <_ZTV11USARTSerial>:
	...
   d9e98:	78b5 000d 7905 000d 7913 000d 7361 000d     .x...y...y..as..
   d9ea8:	78c9 000d 78eb 000d 78d7 000d 78ff 000d     .x...x...x...x..
   d9eb8:	78b7 000d 78bb 000d                         .x...x..

000d9ec0 <_ZTV9USBSerial>:
	...
   d9ec8:	79bd 000d 7a0d 000d 7a1b 000d 7361 000d     .y...z...z..as..
   d9ed8:	79f9 000d 79bf 000d 79d5 000d 7a07 000d     .y...y...y...z..
   d9ee8:	79eb 000d 79b9 000d                         .y...y..

000d9ef0 <_ZSt7nothrow>:
	...

000d9ef1 <_ctype_>:
   d9ef1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9f01:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9f11:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9f21:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9f31:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9f41:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9f51:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9f61:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9f71:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9ff4 <__sf_fake_stdin>:
	...

000da014 <__sf_fake_stdout>:
	...

000da034 <__sf_fake_stderr>:
	...

000da054 <__month_lengths>:
   da054:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da064:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da074:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da084:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da094:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da0a4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da0b4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   da0c4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   da0d4:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   da0e4:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000da0f0 <link_const_variable_data_end>:
   da0f0:	000d58d9 	.word	0x000d58d9
   da0f4:	000d5b13 	.word	0x000d5b13
   da0f8:	000d5cc1 	.word	0x000d5cc1
   da0fc:	000d641d 	.word	0x000d641d
   da100:	000d6521 	.word	0x000d6521
   da104:	000d6d19 	.word	0x000d6d19
   da108:	000d6f45 	.word	0x000d6f45
   da10c:	000d7081 	.word	0x000d7081
   da110:	000d7205 	.word	0x000d7205
   da114:	000d742d 	.word	0x000d742d
   da118:	000d7775 	.word	0x000d7775
   da11c:	000d78a1 	.word	0x000d78a1
   da120:	000d7e85 	.word	0x000d7e85
   da124:	000d7f49 	.word	0x000d7f49
   da128:	000d7fcd 	.word	0x000d7fcd
   da12c:	000d8051 	.word	0x000d8051
