
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/2.0.0-rc.2/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000085f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dc610  000dc610  0000c610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dc618  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002c4  2003e130  000dc61c  0001e130  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003fc  2003e3f8  2003e3f8  0002e3f8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000dc8e0  000dc8e0  0002c8e0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000dc90c  000dc90c  0002c90c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0017fc1b  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000188e6  00000000  00000000  001ac52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003062c  00000000  00000000  001c4e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e68  00000000  00000000  001f543d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008998  00000000  00000000  001f82a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003aba8  00000000  00000000  00200c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003f743  00000000  00000000  0023b7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010eacb  00000000  00000000  0027af28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000088dc  00000000  00000000  003899f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f8d5 	bl	d91e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f8dd 	bl	d91fc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e130 	.word	0x2003e130
   d404c:	000dc61c 	.word	0x000dc61c
   d4050:	2003e3f4 	.word	0x2003e3f4
   d4054:	2003e3f8 	.word	0x2003e3f8
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 ff7d 	bl	d7f60 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc5e4 	.word	0x000dc5e4
   d4080:	000dc608 	.word	0x000dc608

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b870 	b.w	d5168 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fb5b 	bl	d5744 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bf27 	b.w	d7ee4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bb8f 	b.w	d67b8 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bb8d 	b.w	d67b8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bb93 	b.w	d67c8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z16wateringTimerISRv>:
  currentStatusWriteNeeded = true;
  return true;
}

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40b4:	4b01      	ldr	r3, [pc, #4]	; (d40bc <_Z16wateringTimerISRv+0x8>)
   d40b6:	2201      	movs	r2, #1
   d40b8:	701a      	strb	r2, [r3, #0]
}
   d40ba:	4770      	bx	lr
   d40bc:	2003e584 	.word	0x2003e584

000d40c0 <_Z13awakeTimerISRv>:

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40c0:	4a02      	ldr	r2, [pc, #8]	; (d40cc <_Z13awakeTimerISRv+0xc>)
   d40c2:	2301      	movs	r3, #1
   d40c4:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40c6:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z13awakeTimerISRv+0x10>)
   d40c8:	7013      	strb	r3, [r2, #0]
}
   d40ca:	4770      	bx	lr
   d40cc:	2003e50c 	.word	0x2003e50c
   d40d0:	2003e540 	.word	0x2003e540

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40ee <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40ee:	b538      	push	{r3, r4, r5, lr}
   d40f0:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40f2:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40f4:	b128      	cbz	r0, d4102 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40f6:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40f8:	210c      	movs	r1, #12
   d40fa:	f004 f8a8 	bl	d824e <_ZdlPvj>
            wakeupSource = next;
   d40fe:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4100:	e7f8      	b.n	d40f4 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4102:	4620      	mov	r0, r4
   d4104:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4108 <_Z10measureNow6String>:
{
   d4108:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410a:	4904      	ldr	r1, [pc, #16]	; (d411c <_Z10measureNow6String+0x14>)
   d410c:	f003 fb9f 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4110:	b118      	cbz	r0, d411a <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d4112:	4b03      	ldr	r3, [pc, #12]	; (d4120 <_Z10measureNow6String+0x18>)
   d4114:	2203      	movs	r2, #3
   d4116:	701a      	strb	r2, [r3, #0]
    return 1;
   d4118:	2001      	movs	r0, #1
}
   d411a:	bd08      	pop	{r3, pc}
   d411c:	000db978 	.word	0x000db978
   d4120:	2003e504 	.word	0x2003e504

000d4124 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4124:	6943      	ldr	r3, [r0, #20]
   d4126:	b113      	cbz	r3, d412e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4128:	6983      	ldr	r3, [r0, #24]
   d412a:	300c      	adds	r0, #12
   d412c:	4718      	bx	r3
            callback();
        }
    }
   d412e:	4770      	bx	lr

000d4130 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4130:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4132:	2100      	movs	r1, #0
   d4134:	4604      	mov	r4, r0
   d4136:	4608      	mov	r0, r1
   d4138:	f002 f822 	bl	d6180 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d413c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d413e:	4620      	mov	r0, r4
   d4140:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4142:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4144:	f002 f834 	bl	d61b0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4148:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d414a:	b10c      	cbz	r4, d4150 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d414c:	2301      	movs	r3, #1
   d414e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4150:	2100      	movs	r1, #0
   d4152:	2001      	movs	r0, #1
   d4154:	f002 f814 	bl	d6180 <os_thread_scheduling>
            }
        }
        if (t) {
   d4158:	b12c      	cbz	r4, d4166 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d415a:	6823      	ldr	r3, [r4, #0]
   d415c:	4620      	mov	r0, r4
   d415e:	689b      	ldr	r3, [r3, #8]
   d4160:	4798      	blx	r3
            t->running = false;
   d4162:	2300      	movs	r3, #0
   d4164:	7123      	strb	r3, [r4, #4]
        }
    }
   d4166:	b002      	add	sp, #8
   d4168:	bd10      	pop	{r4, pc}

000d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d416a:	2300      	movs	r3, #0
   d416c:	2202      	movs	r2, #2
   d416e:	f002 ba73 	b.w	d6658 <spark_variable>

000d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
   d4172:	2300      	movs	r3, #0
   d4174:	2204      	movs	r2, #4
   d4176:	f002 ba6f 	b.w	d6658 <spark_variable>

000d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d417a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d417c:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4180:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4182:	f88d 5000 	strb.w	r5, [sp]
   d4186:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4188:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d418a:	f002 fe3b 	bl	d6e04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d418e:	4620      	mov	r0, r4
   d4190:	b003      	add	sp, #12
   d4192:	bd30      	pop	{r4, r5, pc}

000d4194 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4198:	6800      	ldr	r0, [r0, #0]
   d419a:	b108      	cbz	r0, d41a0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d419c:	f002 fb14 	bl	d67c8 <free>
class SystemClass {
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d41a4:	b510      	push	{r4, lr}
      if (_M_manager)
   d41a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d41a8:	4604      	mov	r4, r0
      if (_M_manager)
   d41aa:	b113      	cbz	r3, d41b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41ac:	2203      	movs	r2, #3
   d41ae:	4601      	mov	r1, r0
   d41b0:	4798      	blx	r3
    }
   d41b2:	4620      	mov	r0, r4
   d41b4:	bd10      	pop	{r4, pc}
	...

000d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d41ba:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41bc:	4605      	mov	r5, r0
   d41be:	460f      	mov	r7, r1
   d41c0:	4616      	mov	r6, r2
        if (valid_) {
   d41c2:	b18b      	cbz	r3, d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41c4:	6803      	ldr	r3, [r0, #0]
   d41c6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41c8:	b183      	cbz	r3, d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41ca:	889a      	ldrh	r2, [r3, #4]
   d41cc:	2a01      	cmp	r2, #1
   d41ce:	d006      	beq.n	d41de <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41d0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41d2:	e7f9      	b.n	d41c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41d4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41d6:	b14b      	cbz	r3, d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41d8:	889a      	ldrh	r2, [r3, #4]
   d41da:	2a01      	cmp	r2, #1
   d41dc:	d1fa      	bne.n	d41d4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41de:	b12b      	cbz	r3, d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d41e0:	899a      	ldrh	r2, [r3, #12]
   d41e2:	42ba      	cmp	r2, r7
   d41e4:	d1f6      	bne.n	d41d4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d41e6:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d41e8:	4628      	mov	r0, r5
   d41ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41ec:	490a      	ldr	r1, [pc, #40]	; (d4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d41ee:	2010      	movs	r0, #16
   d41f0:	f004 f82f 	bl	d8252 <_ZnwjRKSt9nothrow_t>
   d41f4:	4604      	mov	r4, r0
   d41f6:	b168      	cbz	r0, d4214 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41f8:	2210      	movs	r2, #16
   d41fa:	2100      	movs	r1, #0
   d41fc:	f004 fffe 	bl	d91fc <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4200:	4b06      	ldr	r3, [pc, #24]	; (d421c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4202:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4204:	2301      	movs	r3, #1
   d4206:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4208:	692b      	ldr	r3, [r5, #16]
   d420a:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d420c:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d420e:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4210:	612c      	str	r4, [r5, #16]
   d4212:	e7e9      	b.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4214:	7528      	strb	r0, [r5, #20]
                return *this;
   d4216:	e7e7      	b.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4218:	000dc278 	.word	0x000dc278
   d421c:	00030010 	.word	0x00030010

000d4220 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4220:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4222:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4224:	4605      	mov	r5, r0
   d4226:	460e      	mov	r6, r1
        if (valid_) {
   d4228:	b1cb      	cbz	r3, d425e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d422a:	6803      	ldr	r3, [r0, #0]
   d422c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d422e:	b123      	cbz	r3, d423a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4230:	889a      	ldrh	r2, [r3, #4]
   d4232:	2a04      	cmp	r2, #4
   d4234:	d017      	beq.n	d4266 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4236:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4238:	e7f9      	b.n	d422e <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d423a:	490c      	ldr	r1, [pc, #48]	; (d426c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d423c:	2010      	movs	r0, #16
   d423e:	f004 f808 	bl	d8252 <_ZnwjRKSt9nothrow_t>
   d4242:	4604      	mov	r4, r0
   d4244:	b168      	cbz	r0, d4262 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4246:	2210      	movs	r2, #16
   d4248:	2100      	movs	r1, #0
   d424a:	f004 ffd7 	bl	d91fc <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d424e:	4b08      	ldr	r3, [pc, #32]	; (d4270 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4250:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4252:	2304      	movs	r3, #4
   d4254:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4256:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4258:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d425a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d425e:	4628      	mov	r0, r5
   d4260:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4262:	7528      	strb	r0, [r5, #20]
                return *this;
   d4264:	e7fb      	b.n	d425e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4266:	60de      	str	r6, [r3, #12]
                return *this;
   d4268:	e7f9      	b.n	d425e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d426a:	bf00      	nop
   d426c:	000dc278 	.word	0x000dc278
   d4270:	00030010 	.word	0x00030010

000d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4274:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4276:	4801      	ldr	r0, [pc, #4]	; (d427c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4278:	f002 bcac 	b.w	d6bd4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d427c:	000d6ba9 	.word	0x000d6ba9

000d4280 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4280:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4282:	468c      	mov	ip, r1
   d4284:	2500      	movs	r5, #0
   d4286:	4914      	ldr	r1, [pc, #80]	; (d42d8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   d4288:	7105      	strb	r5, [r0, #4]
   d428a:	4604      	mov	r4, r0
   d428c:	6085      	str	r5, [r0, #8]
   d428e:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4290:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4294:	b085      	sub	sp, #20
   d4296:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4298:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d429c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42a0:	e896 0003 	ldmia.w	r6, {r0, r1}
   d42a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42a8:	e897 0003 	ldmia.w	r7, {r0, r1}
   d42ac:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b0:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d42b2:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d42b4:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b6:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42b8:	6095      	str	r5, [r2, #8]
   d42ba:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42bc:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d42be:	e9cd 3500 	strd	r3, r5, [sp]
   d42c2:	4a06      	ldr	r2, [pc, #24]	; (d42dc <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42c4:	4623      	mov	r3, r4
   d42c6:	4661      	mov	r1, ip
   d42c8:	f104 0008 	add.w	r0, r4, #8
   d42cc:	f001 ff60 	bl	d6190 <os_timer_create>
    }
   d42d0:	4620      	mov	r0, r4
   d42d2:	b005      	add	sp, #20
   d42d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42d6:	bf00      	nop
   d42d8:	000dc004 	.word	0x000dc004
   d42dc:	000d4131 	.word	0x000d4131

000d42e0 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42e0:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42e2:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42e4:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42e6:	2100      	movs	r1, #0
   d42e8:	b140      	cbz	r0, d42fc <_ZN5Timer12changePeriodEjj+0x1c>
   d42ea:	e9cd 2100 	strd	r2, r1, [sp]
   d42ee:	460a      	mov	r2, r1
   d42f0:	2103      	movs	r1, #3
   d42f2:	f001 ff65 	bl	d61c0 <os_timer_change>
   d42f6:	fab0 f080 	clz	r0, r0
   d42fa:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42fc:	b003      	add	sp, #12
   d42fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d4302 <_ZNK5Timer8isActiveEv>:
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4302:	b508      	push	{r3, lr}
    bool isValid() const { return handle!=nullptr; }
   d4304:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4306:	b128      	cbz	r0, d4314 <_ZNK5Timer8isActiveEv+0x12>
   d4308:	2100      	movs	r1, #0
   d430a:	f001 ff71 	bl	d61f0 <os_timer_is_active>
   d430e:	3800      	subs	r0, #0
   d4310:	bf18      	it	ne
   d4312:	2001      	movne	r0, #1
   d4314:	bd08      	pop	{r3, pc}

000d4316 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d4316:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4318:	6880      	ldr	r0, [r0, #8]
   d431a:	2300      	movs	r3, #0
   d431c:	b138      	cbz	r0, d432e <_ZN5Timer5_stopEjb+0x18>
   d431e:	e9cd 1300 	strd	r1, r3, [sp]
   d4322:	2102      	movs	r1, #2
   d4324:	f001 ff4c 	bl	d61c0 <os_timer_change>
   d4328:	fab0 f080 	clz	r0, r0
   d432c:	0940      	lsrs	r0, r0, #5
    }
   d432e:	b003      	add	sp, #12
   d4330:	f85d fb04 	ldr.w	pc, [sp], #4

000d4334 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4334:	b538      	push	{r3, r4, r5, lr}
   d4336:	4b10      	ldr	r3, [pc, #64]	; (d4378 <_ZN5TimerD1Ev+0x44>)
   d4338:	6003      	str	r3, [r0, #0]
        if (handle) {
   d433a:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d433c:	4604      	mov	r4, r0
        if (handle) {
   d433e:	b1a3      	cbz	r3, d436a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4344:	2200      	movs	r2, #0
   d4346:	f7ff ffe6 	bl	d4316 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d434a:	68a0      	ldr	r0, [r4, #8]
   d434c:	2100      	movs	r1, #0
   d434e:	f001 ff57 	bl	d6200 <os_timer_set_id>
            while (running) {
   d4352:	7923      	ldrb	r3, [r4, #4]
   d4354:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4358:	b113      	cbz	r3, d4360 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d435a:	f001 ff09 	bl	d6170 <os_thread_yield>
            while (running) {
   d435e:	e7f8      	b.n	d4352 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4360:	68a0      	ldr	r0, [r4, #8]
   d4362:	4629      	mov	r1, r5
   d4364:	f001 ff1c 	bl	d61a0 <os_timer_destroy>
            handle = nullptr;
   d4368:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d436a:	f104 000c 	add.w	r0, r4, #12
   d436e:	f7ff ff19 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
    }
   d4372:	4620      	mov	r0, r4
   d4374:	bd38      	pop	{r3, r4, r5, pc}
   d4376:	bf00      	nop
   d4378:	000dc004 	.word	0x000dc004

000d437c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d437c:	b510      	push	{r4, lr}
   d437e:	4604      	mov	r4, r0
    }
   d4380:	f7ff ffd8 	bl	d4334 <_ZN5TimerD1Ev>
   d4384:	4620      	mov	r0, r4
   d4386:	211c      	movs	r1, #28
   d4388:	f003 ff61 	bl	d824e <_ZdlPvj>
   d438c:	4620      	mov	r0, r4
   d438e:	bd10      	pop	{r4, pc}

000d4390 <_ZN5Timer5startEj>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4392:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4394:	2200      	movs	r2, #0
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4396:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4398:	4611      	mov	r1, r2
   d439a:	f7ff ffbc 	bl	d4316 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d439e:	68a8      	ldr	r0, [r5, #8]
   d43a0:	2300      	movs	r3, #0
   d43a2:	b140      	cbz	r0, d43b6 <_ZN5Timer5startEj+0x26>
   d43a4:	e9cd 4300 	strd	r4, r3, [sp]
   d43a8:	461a      	mov	r2, r3
   d43aa:	4619      	mov	r1, r3
   d43ac:	f001 ff08 	bl	d61c0 <os_timer_change>
   d43b0:	fab0 f080 	clz	r0, r0
   d43b4:	0940      	lsrs	r0, r0, #5
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43b6:	b003      	add	sp, #12
   d43b8:	bd30      	pop	{r4, r5, pc}
	...

000d43bc <fastPinGetPinmap>:

/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

inline const Hal_Pin_Info* fastPinGetPinmap() {
   d43bc:	b538      	push	{r3, r4, r5, lr}
    static Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43be:	4c0a      	ldr	r4, [pc, #40]	; (d43e8 <fastPinGetPinmap+0x2c>)
   d43c0:	4d0a      	ldr	r5, [pc, #40]	; (d43ec <fastPinGetPinmap+0x30>)
   d43c2:	7823      	ldrb	r3, [r4, #0]
   d43c4:	f3bf 8f5b 	dmb	ish
   d43c8:	f013 0f01 	tst.w	r3, #1
   d43cc:	d109      	bne.n	d43e2 <fastPinGetPinmap+0x26>
   d43ce:	4620      	mov	r0, r4
   d43d0:	f7ff fe67 	bl	d40a2 <__cxa_guard_acquire>
   d43d4:	b128      	cbz	r0, d43e2 <fastPinGetPinmap+0x26>
   d43d6:	f001 ff7b 	bl	d62d0 <HAL_Pin_Map>
   d43da:	6028      	str	r0, [r5, #0]
   d43dc:	4620      	mov	r0, r4
   d43de:	f7ff fe65 	bl	d40ac <__cxa_guard_release>
    return pinMap;
}
   d43e2:	6828      	ldr	r0, [r5, #0]
   d43e4:	bd38      	pop	{r3, r4, r5, pc}
   d43e6:	bf00      	nop
   d43e8:	2003e3fc 	.word	0x2003e3fc
   d43ec:	2003e400 	.word	0x2003e400

000d43f0 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d43f0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43f2:	4d19      	ldr	r5, [pc, #100]	; (d4458 <_Z17getSignalStrengthv+0x68>)
   d43f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d43f6:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43f8:	ac04      	add	r4, sp, #16
   d43fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d43fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4400:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4404:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4408:	4914      	ldr	r1, [pc, #80]	; (d445c <_Z17getSignalStrengthv+0x6c>)
   d440a:	a80e      	add	r0, sp, #56	; 0x38
   d440c:	f002 fa96 	bl	d693c <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4410:	a80e      	add	r0, sp, #56	; 0x38
   d4412:	f002 fae6 	bl	d69e2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4416:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4418:	a80e      	add	r0, sp, #56	; 0x38
   d441a:	f002 faeb 	bl	d69f4 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d441e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4420:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4424:	f002 fb16 	bl	d6a54 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4428:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d442a:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d442e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4432:	f004 f879 	bl	d8528 <__aeabi_f2d>
   d4436:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d443a:	4628      	mov	r0, r5
   d443c:	f004 f874 	bl	d8528 <__aeabi_f2d>
   d4440:	e9cd 0100 	strd	r0, r1, [sp]
   d4444:	4a06      	ldr	r2, [pc, #24]	; (d4460 <_Z17getSignalStrengthv+0x70>)
   d4446:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d444a:	4806      	ldr	r0, [pc, #24]	; (d4464 <_Z17getSignalStrengthv+0x74>)
   d444c:	2140      	movs	r1, #64	; 0x40
   d444e:	f002 f9db 	bl	d6808 <snprintf>
}
   d4452:	b019      	add	sp, #100	; 0x64
   d4454:	bd30      	pop	{r4, r5, pc}
   d4456:	bf00      	nop
   d4458:	000dc010 	.word	0x000dc010
   d445c:	2003e590 	.word	0x2003e590
   d4460:	000db9ad 	.word	0x000db9ad
   d4464:	2003e404 	.word	0x2003e404

000d4468 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d446c:	481b      	ldr	r0, [pc, #108]	; (d44dc <_Z17connectToParticlev+0x74>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d446e:	f8df a070 	ldr.w	sl, [pc, #112]	; d44e0 <_Z17connectToParticlev+0x78>
   d4472:	6840      	ldr	r0, [r0, #4]
   d4474:	2300      	movs	r3, #0
   d4476:	461a      	mov	r2, r3
   d4478:	4619      	mov	r1, r3
   d447a:	f002 f96d 	bl	d6758 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d447e:	f002 f903 	bl	d6688 <spark_cloud_flag_connect>
   d4482:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4486:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d448a:	f240 38e7 	movw	r8, #999	; 0x3e7
   d448e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4492:	2000      	movs	r0, #0
   d4494:	f001 ff0c 	bl	d62b0 <hal_timer_millis>
   d4498:	4605      	mov	r5, r0
   d449a:	2000      	movs	r0, #0
   d449c:	f001 ff08 	bl	d62b0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d44a0:	1b46      	subs	r6, r0, r5
   d44a2:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d44a6:	45b9      	cmp	r9, r7
   d44a8:	bf08      	it	eq
   d44aa:	45b0      	cmpeq	r8, r6
   d44ac:	d305      	bcc.n	d44ba <_Z17connectToParticlev+0x52>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44ae:	f002 f8f3 	bl	d6698 <spark_cloud_flag_connected>
   d44b2:	b910      	cbnz	r0, d44ba <_Z17connectToParticlev+0x52>
            spark_process();
   d44b4:	f002 f8e0 	bl	d6678 <spark_process>
        while (_while() && !_condition()) {
   d44b8:	e7ef      	b.n	d449a <_Z17connectToParticlev+0x32>
   d44ba:	f002 f8ed 	bl	d6698 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44be:	b118      	cbz	r0, d44c8 <_Z17connectToParticlev+0x60>
}
   d44c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d44c4:	f002 b8e8 	b.w	d6698 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   d44c8:	f001 fec2 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d44cc:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d44d0:	f002 f8d2 	bl	d6678 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44d4:	3c01      	subs	r4, #1
   d44d6:	d1dc      	bne.n	d4492 <_Z17connectToParticlev+0x2a>
   d44d8:	e7f2      	b.n	d44c0 <_Z17connectToParticlev+0x58>
   d44da:	bf00      	nop
   d44dc:	2003e590 	.word	0x2003e590
   d44e0:	2003e784 	.word	0x2003e784

000d44e4 <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   d44e4:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44e6:	f002 f8d7 	bl	d6698 <spark_cloud_flag_connected>
    return !Particle.connected();
   d44ea:	f080 0001 	eor.w	r0, r0, #1
}
   d44ee:	b2c0      	uxtb	r0, r0
   d44f0:	bd08      	pop	{r3, pc}
	...

000d44f4 <_Z22disconnectFromParticlev>:
{
   d44f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d44f8:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d44fa:	2400      	movs	r4, #0
  Particle.disconnect();
   d44fc:	a801      	add	r0, sp, #4
   d44fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4502:	f88d 400c 	strb.w	r4, [sp, #12]
   d4506:	f002 fb76 	bl	d6bf6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d450a:	4620      	mov	r0, r4
   d450c:	f001 fed0 	bl	d62b0 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4510:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4514:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4516:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d451a:	2000      	movs	r0, #0
   d451c:	f001 fec8 	bl	d62b0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4520:	1b46      	subs	r6, r0, r5
   d4522:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4526:	45b9      	cmp	r9, r7
   d4528:	bf08      	it	eq
   d452a:	45b0      	cmpeq	r8, r6
   d452c:	d305      	bcc.n	d453a <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d452e:	f7ff ffd9 	bl	d44e4 <_Z12notConnectedv>
   d4532:	b910      	cbnz	r0, d453a <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d4534:	f002 f8a0 	bl	d6678 <spark_process>
        while (_while() && !_condition()) {
   d4538:	e7ef      	b.n	d451a <_Z22disconnectFromParticlev+0x26>
   d453a:	f7ff ffd3 	bl	d44e4 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d453e:	4807      	ldr	r0, [pc, #28]	; (d455c <_Z22disconnectFromParticlev+0x68>)
   d4540:	2300      	movs	r3, #0
   d4542:	461a      	mov	r2, r3
   d4544:	4619      	mov	r1, r3
   d4546:	6840      	ldr	r0, [r0, #4]
   d4548:	f002 f90e 	bl	d6768 <network_off>
  delay(2000);                                                    // Bummer but only should happen once an hour
   d454c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4550:	f002 f986 	bl	d6860 <delay>
}
   d4554:	2001      	movs	r0, #1
   d4556:	b005      	add	sp, #20
   d4558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d455c:	2003e590 	.word	0x2003e590

000d4560 <_Z9isDayTimev>:
bool isDayTime() {
   d4560:	b508      	push	{r3, lr}
  if (Time.hour() >= 19) return 0;
   d4562:	f003 fb79 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d4566:	2812      	cmp	r0, #18
   d4568:	dc06      	bgt.n	d4578 <_Z9isDayTimev+0x18>
  else if (Time.hour() < 6) return 0;
   d456a:	f003 fb75 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d456e:	2805      	cmp	r0, #5
   d4570:	bfd4      	ite	le
   d4572:	2000      	movle	r0, #0
   d4574:	2001      	movgt	r0, #1
}
   d4576:	bd08      	pop	{r3, pc}
  if (Time.hour() >= 19) return 0;
   d4578:	2000      	movs	r0, #0
   d457a:	e7fc      	b.n	d4576 <_Z9isDayTimev+0x16>

000d457c <_Z14enableChargingb>:
{
   d457c:	b513      	push	{r0, r1, r4, lr}
   d457e:	4604      	mov	r4, r0
  PMIC pmic(true);
   d4580:	2101      	movs	r1, #1
   d4582:	a801      	add	r0, sp, #4
   d4584:	f002 ffc5 	bl	d7512 <_ZN4PMICC1Eb>
    pmic.enableCharging();
   d4588:	a801      	add	r0, sp, #4
  if(enableCharge) {
   d458a:	b13c      	cbz	r4, d459c <_Z14enableChargingb+0x20>
    pmic.enableCharging();
   d458c:	f003 f83d 	bl	d760a <_ZN4PMIC14enableChargingEv>
  PMIC pmic(true);
   d4590:	a801      	add	r0, sp, #4
   d4592:	f002 ffcd 	bl	d7530 <_ZN4PMICD1Ev>
}
   d4596:	4620      	mov	r0, r4
   d4598:	b002      	add	sp, #8
   d459a:	bd10      	pop	{r4, pc}
    pmic.disableCharging();
   d459c:	f003 f84c 	bl	d7638 <_ZN4PMIC15disableChargingEv>
    return FALSE;
   d45a0:	e7f6      	b.n	d4590 <_Z14enableChargingb+0x14>
	...

000d45a4 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d45a4:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d45a6:	2420      	movs	r4, #32
   d45a8:	b090      	sub	sp, #64	; 0x40
   d45aa:	4622      	mov	r2, r4
   d45ac:	2100      	movs	r1, #0
   d45ae:	4668      	mov	r0, sp
   d45b0:	f004 fe24 	bl	d91fc <memset>
   d45b4:	4622      	mov	r2, r4
   d45b6:	2100      	movs	r1, #0
   d45b8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d45bc:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d45c0:	f004 fe1c 	bl	d91fc <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d45c4:	2100      	movs	r1, #0
   d45c6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d45ca:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d45ce:	f002 f825 	bl	d661c <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d45d2:	4b15      	ldr	r3, [pc, #84]	; (d4628 <_Z14setPowerConfigv+0x84>)
   d45d4:	7959      	ldrb	r1, [r3, #5]
   d45d6:	b1c1      	cbz	r1, d460a <_Z14setPowerConfigv+0x66>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45d8:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d45dc:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d45e0:	4b12      	ldr	r3, [pc, #72]	; (d462c <_Z14setPowerConfigv+0x88>)
   d45e2:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45e4:	f241 0370 	movw	r3, #4208	; 0x1070
   d45e8:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45ec:	9b00      	ldr	r3, [sp, #0]
   d45ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d45f2:	9300      	str	r3, [sp, #0]
   d45f4:	2100      	movs	r1, #0
   d45f6:	4668      	mov	r0, sp
   d45f8:	f002 f810 	bl	d661c <system_power_management_set_config>
   d45fc:	4604      	mov	r4, r0
    enableCharging(true);
   d45fe:	2001      	movs	r0, #1
   d4600:	f7ff ffbc 	bl	d457c <_Z14enableChargingb>
}
   d4604:	4620      	mov	r0, r4
   d4606:	b010      	add	sp, #64	; 0x40
   d4608:	bd10      	pop	{r4, pc}
        conf_.vin_min_voltage = voltage;
   d460a:	f241 0370 	movw	r3, #4208	; 0x1070
   d460e:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4612:	4b07      	ldr	r3, [pc, #28]	; (d4630 <_Z14setPowerConfigv+0x8c>)
   d4614:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4616:	f241 0310 	movw	r3, #4112	; 0x1010
   d461a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d461e:	9b00      	ldr	r3, [sp, #0]
   d4620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4624:	9300      	str	r3, [sp, #0]
   d4626:	e7e6      	b.n	d45f6 <_Z14setPowerConfigv+0x52>
   d4628:	2003e50c 	.word	0x2003e50c
   d462c:	04000384 	.word	0x04000384
   d4630:	03840384 	.word	0x03840384

000d4634 <_Z20meterParticlePublishv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
}

bool meterParticlePublish(void)
{
   d4634:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d4636:	4c07      	ldr	r4, [pc, #28]	; (d4654 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4638:	f001 fe0a 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
   d463c:	6823      	ldr	r3, [r4, #0]
   d463e:	1ac0      	subs	r0, r0, r3
   d4640:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4644:	d304      	bcc.n	d4650 <_Z20meterParticlePublishv+0x1c>
   d4646:	f001 fe03 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d464a:	6020      	str	r0, [r4, #0]
   d464c:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d464e:	bd10      	pop	{r4, pc}
  else return 0;
   d4650:	2000      	movs	r0, #0
   d4652:	e7fc      	b.n	d464e <_Z20meterParticlePublishv+0x1a>
   d4654:	2003e458 	.word	0x2003e458

000d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4658:	b508      	push	{r3, lr}
  waitUntil(meterParticlePublish);                                                
   d465a:	f7ff ffeb 	bl	d4634 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d465e:	b910      	cbnz	r0, d4666 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d4660:	f002 f80a 	bl	d6678 <spark_process>
        while (_while() && !_condition()) {
   d4664:	e7f9      	b.n	d465a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
    }
   d4666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d466a:	f7ff bfe3 	b.w	d4634 <_Z20meterParticlePublishv>
	...

000d4670 <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4670:	b530      	push	{r4, r5, lr}
   d4672:	b085      	sub	sp, #20
   d4674:	2300      	movs	r3, #0

	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d4676:	a801      	add	r0, sp, #4
   d4678:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d467c:	f88d 300c 	strb.w	r3, [sp, #12]
   d4680:	f002 fab9 	bl	d6bf6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d4684:	f001 fde4 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4688:	f643 2597 	movw	r5, #14999	; 0x3a97
   d468c:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d468e:	f002 f803 	bl	d6698 <spark_cloud_flag_connected>
   d4692:	b140      	cbz	r0, d46a6 <_Z14fullModemResetv+0x36>
   d4694:	f001 fddc 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
   d4698:	1b00      	subs	r0, r0, r4
   d469a:	42a8      	cmp	r0, r5
   d469c:	d803      	bhi.n	d46a6 <_Z14fullModemResetv+0x36>
		delay(100);
   d469e:	2064      	movs	r0, #100	; 0x64
   d46a0:	f002 f8de 	bl	d6860 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
   d46a4:	e7f3      	b.n	d468e <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d46a6:	2100      	movs	r1, #0
   d46a8:	4b09      	ldr	r3, [pc, #36]	; (d46d0 <_Z14fullModemResetv+0x60>)
   d46aa:	f247 5230 	movw	r2, #30000	; 0x7530
   d46ae:	4608      	mov	r0, r1
   d46b0:	f001 fd56 	bl	d6160 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d46b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d46b8:	f002 f8d2 	bl	d6860 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d46bc:	4b05      	ldr	r3, [pc, #20]	; (d46d4 <_Z14fullModemResetv+0x64>)
   d46be:	220a      	movs	r2, #10
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	2101      	movs	r1, #1
   d46c4:	a801      	add	r0, sp, #4
   d46c6:	f003 f9b9 	bl	d7a3c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d46ca:	b005      	add	sp, #20
   d46cc:	bd30      	pop	{r4, r5, pc}
   d46ce:	bf00      	nop
   d46d0:	000db9c6 	.word	0x000db9c6
   d46d4:	2003e450 	.word	0x2003e450

000d46d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d46d8:	b530      	push	{r4, r5, lr}
   d46da:	b085      	sub	sp, #20
   d46dc:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d46de:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d46e0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d46e2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d46e4:	f001 ff3c 	bl	d6560 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d46e8:	b9b0      	cbnz	r0, d4718 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d46ea:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d46ec:	b10c      	cbz	r4, d46f2 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d46ee:	6923      	ldr	r3, [r4, #16]
   d46f0:	b923      	cbnz	r3, d46fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d46f2:	4a0a      	ldr	r2, [pc, #40]	; (d471c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d46f4:	2100      	movs	r1, #0
   d46f6:	200a      	movs	r0, #10
   d46f8:	f001 ff22 	bl	d6540 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d46fc:	2300      	movs	r3, #0
   d46fe:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4702:	230c      	movs	r3, #12
   d4704:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4708:	2304      	movs	r3, #4
   d470a:	9303      	str	r3, [sp, #12]
   d470c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d470e:	6923      	ldr	r3, [r4, #16]
   d4710:	aa01      	add	r2, sp, #4
   d4712:	2101      	movs	r1, #1
   d4714:	4620      	mov	r0, r4
   d4716:	4798      	blx	r3
}
   d4718:	b005      	add	sp, #20
   d471a:	bd30      	pop	{r4, r5, pc}
   d471c:	000d6241 	.word	0x000d6241

000d4720 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4720:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4722:	4d0e      	ldr	r5, [pc, #56]	; (d475c <_Z17getBatteryContextv+0x3c>)
   d4724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4726:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4728:	ac01      	add	r4, sp, #4
   d472a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d472c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4734:	4669      	mov	r1, sp
   d4736:	2007      	movs	r0, #7
   d4738:	f7ff ffce 	bl	d46d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d473c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d473e:	bfa8      	it	ge
   d4740:	9800      	ldrge	r0, [sp, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4742:	4a07      	ldr	r2, [pc, #28]	; (d4760 <_Z17getBatteryContextv+0x40>)
   d4744:	ab08      	add	r3, sp, #32
   d4746:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d474a:	2110      	movs	r1, #16
   d474c:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4750:	4804      	ldr	r0, [pc, #16]	; (d4764 <_Z17getBatteryContextv+0x44>)
   d4752:	f002 f859 	bl	d6808 <snprintf>
}
   d4756:	b009      	add	sp, #36	; 0x24
   d4758:	bd30      	pop	{r4, r5, pc}
   d475a:	bf00      	nop
   d475c:	000dc038 	.word	0x000dc038
   d4760:	000dbeaf 	.word	0x000dbeaf
   d4764:	2003e47c 	.word	0x2003e47c

000d4768 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d476a:	4d52      	ldr	r5, [pc, #328]	; (d48b4 <_Z16takeMeasurementsv+0x14c>)
   d476c:	4c52      	ldr	r4, [pc, #328]	; (d48b8 <_Z16takeMeasurementsv+0x150>)
   d476e:	7b2b      	ldrb	r3, [r5, #12]
   d4770:	b13b      	cbz	r3, d4782 <_Z16takeMeasurementsv+0x1a>
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
   d4772:	4852      	ldr	r0, [pc, #328]	; (d48bc <_Z16takeMeasurementsv+0x154>)
   d4774:	f001 fcd0 	bl	d6118 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4778:	eeb4 0a40 	vcmp.f32	s0, s0
   d477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4780:	d73e      	bvc.n	d4800 <_Z16takeMeasurementsv+0x98>
   d4782:	2300      	movs	r3, #0
   d4784:	61a3      	str	r3, [r4, #24]
   d4786:	6163      	str	r3, [r4, #20]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4788:	6960      	ldr	r0, [r4, #20]
   d478a:	f003 fecd 	bl	d8528 <__aeabi_f2d>
   d478e:	4a4c      	ldr	r2, [pc, #304]	; (d48c0 <_Z16takeMeasurementsv+0x158>)
   d4790:	e9cd 0100 	strd	r0, r1, [sp]
   d4794:	2110      	movs	r1, #16
   d4796:	484b      	ldr	r0, [pc, #300]	; (d48c4 <_Z16takeMeasurementsv+0x15c>)
   d4798:	f002 f836 	bl	d6808 <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d479c:	69a0      	ldr	r0, [r4, #24]
   d479e:	f003 fec3 	bl	d8528 <__aeabi_f2d>
   d47a2:	4a49      	ldr	r2, [pc, #292]	; (d48c8 <_Z16takeMeasurementsv+0x160>)
   d47a4:	e9cd 0100 	strd	r0, r1, [sp]
   d47a8:	4848      	ldr	r0, [pc, #288]	; (d48cc <_Z16takeMeasurementsv+0x164>)
   d47aa:	2110      	movs	r1, #16
   d47ac:	f002 f82c 	bl	d6808 <snprintf>
  if (sysStatus.lightSensorConfig) {
   d47b0:	7c2b      	ldrb	r3, [r5, #16]
   d47b2:	b383      	cbz	r3, d4816 <_Z16takeMeasurementsv+0xae>
    lightSensor.make_forced_measurement();
   d47b4:	4846      	ldr	r0, [pc, #280]	; (d48d0 <_Z16takeMeasurementsv+0x168>)
   d47b6:	f001 fbdb 	bl	d5f70 <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d47ba:	4845      	ldr	r0, [pc, #276]	; (d48d0 <_Z16takeMeasurementsv+0x168>)
   d47bc:	f001 fb92 	bl	d5ee4 <_ZN6BH175015get_light_levelEv>
   d47c0:	ed84 0a07 	vstr	s0, [r4, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d47c4:	69e0      	ldr	r0, [r4, #28]
   d47c6:	f003 feaf 	bl	d8528 <__aeabi_f2d>
   d47ca:	4a42      	ldr	r2, [pc, #264]	; (d48d4 <_Z16takeMeasurementsv+0x16c>)
   d47cc:	e9cd 0100 	strd	r0, r1, [sp]
   d47d0:	4841      	ldr	r0, [pc, #260]	; (d48d8 <_Z16takeMeasurementsv+0x170>)
   d47d2:	2110      	movs	r1, #16
   d47d4:	f002 f818 	bl	d6808 <snprintf>
  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d47d8:	7bab      	ldrb	r3, [r5, #14]
   d47da:	b1fb      	cbz	r3, d481c <_Z16takeMeasurementsv+0xb4>
   d47dc:	2013      	movs	r0, #19
   d47de:	f003 fc84 	bl	d80ea <analogRead>
   d47e2:	2664      	movs	r6, #100	; 0x64
   d47e4:	2300      	movs	r3, #0
   d47e6:	4619      	mov	r1, r3
   d47e8:	9600      	str	r6, [sp, #0]
   d47ea:	f640 628a 	movw	r2, #3722	; 0xe8a
   d47ee:	f002 f82b 	bl	d6848 <_Z3mapiiiii>
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d47f2:	7bab      	ldrb	r3, [r5, #14]
  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d47f4:	6020      	str	r0, [r4, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d47f6:	2b02      	cmp	r3, #2
   d47f8:	d012      	beq.n	d4820 <_Z16takeMeasurementsv+0xb8>
  else current.soilMoisture2 = 0;
   d47fa:	2300      	movs	r3, #0
   d47fc:	6063      	str	r3, [r4, #4]
   d47fe:	e01a      	b.n	d4836 <_Z16takeMeasurementsv+0xce>
    current.temperature = tempHumidSensor.readTemperature();
   d4800:	482e      	ldr	r0, [pc, #184]	; (d48bc <_Z16takeMeasurementsv+0x154>)
   d4802:	f001 fc89 	bl	d6118 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d4806:	482d      	ldr	r0, [pc, #180]	; (d48bc <_Z16takeMeasurementsv+0x154>)
    current.temperature = tempHumidSensor.readTemperature();
   d4808:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d480c:	f001 fc92 	bl	d6134 <_ZN14Adafruit_SHT3112readHumidityEv>
   d4810:	ed84 0a06 	vstr	s0, [r4, #24]
   d4814:	e7b8      	b.n	d4788 <_Z16takeMeasurementsv+0x20>
  else current.lightLevel = 0.0;
   d4816:	2300      	movs	r3, #0
   d4818:	61e3      	str	r3, [r4, #28]
   d481a:	e7d3      	b.n	d47c4 <_Z16takeMeasurementsv+0x5c>
  else current.soilMoisture1 = 0;
   d481c:	6023      	str	r3, [r4, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d481e:	e7ec      	b.n	d47fa <_Z16takeMeasurementsv+0x92>
   d4820:	2012      	movs	r0, #18
   d4822:	f003 fc62 	bl	d80ea <analogRead>
   d4826:	2300      	movs	r3, #0
   d4828:	9600      	str	r6, [sp, #0]
   d482a:	f640 628a 	movw	r2, #3722	; 0xe8a
   d482e:	4619      	mov	r1, r3
   d4830:	f002 f80a 	bl	d6848 <_Z3mapiiiii>
   d4834:	6060      	str	r0, [r4, #4]
  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d4836:	7beb      	ldrb	r3, [r5, #15]
   d4838:	2b01      	cmp	r3, #1
   d483a:	d134      	bne.n	d48a6 <_Z16takeMeasurementsv+0x13e>
   d483c:	2011      	movs	r0, #17
   d483e:	f003 fc54 	bl	d80ea <analogRead>
   d4842:	231e      	movs	r3, #30
   d4844:	9300      	str	r3, [sp, #0]
   d4846:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d484a:	2300      	movs	r3, #0
   d484c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d4850:	f001 fffa 	bl	d6848 <_Z3mapiiiii>
   d4854:	60a0      	str	r0, [r4, #8]
        return network_ready(*this, 0,  NULL);
   d4856:	4b21      	ldr	r3, [pc, #132]	; (d48dc <_Z16takeMeasurementsv+0x174>)
   d4858:	2200      	movs	r2, #0
   d485a:	6858      	ldr	r0, [r3, #4]
   d485c:	4611      	mov	r1, r2
   d485e:	f001 ff73 	bl	d6748 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4862:	b108      	cbz	r0, d4868 <_Z16takeMeasurementsv+0x100>
   d4864:	f7ff fdc4 	bl	d43f0 <_Z17getSignalStrengthv>
   d4868:	a903      	add	r1, sp, #12
   d486a:	2003      	movs	r0, #3
   d486c:	f7ff ff34 	bl	d46d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4870:	b9e0      	cbnz	r0, d48ac <_Z16takeMeasurementsv+0x144>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4872:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4876:	ee07 3a90 	vmov	s15, r3
   d487a:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d487e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4882:	4a17      	ldr	r2, [pc, #92]	; (d48e0 <_Z16takeMeasurementsv+0x178>)
   d4884:	4817      	ldr	r0, [pc, #92]	; (d48e4 <_Z16takeMeasurementsv+0x17c>)
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d4886:	edc5 7a02 	vstr	s15, [r5, #8]
   d488a:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d488e:	2108      	movs	r1, #8
   d4890:	f001 ffba 	bl	d6808 <snprintf>
  getBatteryContext();                                                 // What is the battery doing.
   d4894:	f7ff ff44 	bl	d4720 <_Z17getBatteryContextv>
  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d4898:	4b13      	ldr	r3, [pc, #76]	; (d48e8 <_Z16takeMeasurementsv+0x180>)
   d489a:	2001      	movs	r0, #1
   d489c:	7018      	strb	r0, [r3, #0]
   d489e:	4b13      	ldr	r3, [pc, #76]	; (d48ec <_Z16takeMeasurementsv+0x184>)
   d48a0:	7018      	strb	r0, [r3, #0]
}
   d48a2:	b004      	add	sp, #16
   d48a4:	bd70      	pop	{r4, r5, r6, pc}
  else sysStatus.pressureSensorConfig = 0;
   d48a6:	2300      	movs	r3, #0
   d48a8:	73eb      	strb	r3, [r5, #15]
   d48aa:	e7d4      	b.n	d4856 <_Z16takeMeasurementsv+0xee>
            return -1.0f;
   d48ac:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d48b0:	e7e5      	b.n	d487e <_Z16takeMeasurementsv+0x116>
   d48b2:	bf00      	nop
   d48b4:	2003e50c 	.word	0x2003e50c
   d48b8:	2003e4ac 	.word	0x2003e4ac
   d48bc:	2003e544 	.word	0x2003e544
   d48c0:	000db9d3 	.word	0x000db9d3
   d48c4:	2003e550 	.word	0x2003e550
   d48c8:	000db9db 	.word	0x000db9db
   d48cc:	2003e4d2 	.word	0x2003e4d2
   d48d0:	2003e4f4 	.word	0x2003e4f4
   d48d4:	000db9e4 	.word	0x000db9e4
   d48d8:	2003e4e2 	.word	0x2003e4e2
   d48dc:	2003e590 	.word	0x2003e590
   d48e0:	000db9ee 	.word	0x000db9ee
   d48e4:	2003e48c 	.word	0x2003e48c
   d48e8:	2003e4d1 	.word	0x2003e4d1
   d48ec:	2003e540 	.word	0x2003e540

000d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d48f2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d48f4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d48f6:	b17c      	cbz	r4, d4918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d48f8:	6863      	ldr	r3, [r4, #4]
   d48fa:	3b01      	subs	r3, #1
   d48fc:	6063      	str	r3, [r4, #4]
   d48fe:	b95b      	cbnz	r3, d4918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4900:	6823      	ldr	r3, [r4, #0]
   d4902:	4620      	mov	r0, r4
   d4904:	689b      	ldr	r3, [r3, #8]
   d4906:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4908:	68a3      	ldr	r3, [r4, #8]
   d490a:	3b01      	subs	r3, #1
   d490c:	60a3      	str	r3, [r4, #8]
   d490e:	b91b      	cbnz	r3, d4918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4910:	6823      	ldr	r3, [r4, #0]
   d4912:	4620      	mov	r0, r4
   d4914:	68db      	ldr	r3, [r3, #12]
   d4916:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4918:	4628      	mov	r0, r5
   d491a:	bd38      	pop	{r3, r4, r5, pc}

000d491c <_Z9sendEventv>:
{
   d491c:	b530      	push	{r4, r5, lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d491e:	4c2f      	ldr	r4, [pc, #188]	; (d49dc <_Z9sendEventv+0xc0>)
{
   d4920:	b0d1      	sub	sp, #324	; 0x144
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d4922:	6a23      	ldr	r3, [r4, #32]
   d4924:	930d      	str	r3, [sp, #52]	; 0x34
   d4926:	4b2e      	ldr	r3, [pc, #184]	; (d49e0 <_Z9sendEventv+0xc4>)
   d4928:	699a      	ldr	r2, [r3, #24]
   d492a:	920c      	str	r2, [sp, #48]	; 0x30
   d492c:	4a2d      	ldr	r2, [pc, #180]	; (d49e4 <_Z9sendEventv+0xc8>)
   d492e:	920b      	str	r2, [sp, #44]	; 0x2c
   d4930:	689b      	ldr	r3, [r3, #8]
   d4932:	930a      	str	r3, [sp, #40]	; 0x28
   d4934:	68e3      	ldr	r3, [r4, #12]
   d4936:	9309      	str	r3, [sp, #36]	; 0x24
   d4938:	68a3      	ldr	r3, [r4, #8]
   d493a:	9308      	str	r3, [sp, #32]
   d493c:	6863      	ldr	r3, [r4, #4]
   d493e:	9307      	str	r3, [sp, #28]
   d4940:	6823      	ldr	r3, [r4, #0]
   d4942:	9306      	str	r3, [sp, #24]
   d4944:	69e0      	ldr	r0, [r4, #28]
   d4946:	f003 fdef 	bl	d8528 <__aeabi_f2d>
   d494a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d494e:	69a0      	ldr	r0, [r4, #24]
   d4950:	f003 fdea 	bl	d8528 <__aeabi_f2d>
   d4954:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4958:	6960      	ldr	r0, [r4, #20]
   d495a:	4c23      	ldr	r4, [pc, #140]	; (d49e8 <_Z9sendEventv+0xcc>)
   d495c:	f003 fde4 	bl	d8528 <__aeabi_f2d>
        val_(0) {
   d4960:	2500      	movs	r5, #0
   d4962:	e9cd 0100 	strd	r0, r1, [sp]
   d4966:	4a21      	ldr	r2, [pc, #132]	; (d49ec <_Z9sendEventv+0xd0>)
   d4968:	f44f 7180 	mov.w	r1, #256	; 0x100
   d496c:	a810      	add	r0, sp, #64	; 0x40
   d496e:	f001 ff4b 	bl	d6808 <snprintf>
        return waitConditionWhile(_condition, []{ return true; });
   d4972:	f7ff fe71 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Rwanda-Sense-And-Control-Elastic", data, PRIVATE);
   d4976:	f88d 5000 	strb.w	r5, [sp]
   d497a:	7823      	ldrb	r3, [r4, #0]
   d497c:	491c      	ldr	r1, [pc, #112]	; (d49f0 <_Z9sendEventv+0xd4>)
   d497e:	aa10      	add	r2, sp, #64	; 0x40
   d4980:	a80e      	add	r0, sp, #56	; 0x38
   d4982:	f7ff fbfa 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4986:	a80f      	add	r0, sp, #60	; 0x3c
   d4988:	f7ff ffb2 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d498c:	f7ff fe64 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("agriculture-aws-webhook",data,PRIVATE);
   d4990:	f88d 5000 	strb.w	r5, [sp]
   d4994:	7823      	ldrb	r3, [r4, #0]
   d4996:	4917      	ldr	r1, [pc, #92]	; (d49f4 <_Z9sendEventv+0xd8>)
   d4998:	aa10      	add	r2, sp, #64	; 0x40
   d499a:	a80e      	add	r0, sp, #56	; 0x38
   d499c:	f7ff fbed 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49a0:	a80f      	add	r0, sp, #60	; 0x3c
   d49a2:	f7ff ffa5 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49a6:	f7ff fe57 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d49aa:	f88d 5000 	strb.w	r5, [sp]
   d49ae:	7823      	ldrb	r3, [r4, #0]
   d49b0:	4911      	ldr	r1, [pc, #68]	; (d49f8 <_Z9sendEventv+0xdc>)
   d49b2:	aa10      	add	r2, sp, #64	; 0x40
   d49b4:	a80e      	add	r0, sp, #56	; 0x38
   d49b6:	f7ff fbe0 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49ba:	a80f      	add	r0, sp, #60	; 0x3c
   d49bc:	f7ff ff98 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d49c0:	f003 f94a 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d49c4:	4b0d      	ldr	r3, [pc, #52]	; (d49fc <_Z9sendEventv+0xe0>)
   d49c6:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d49c8:	4b0d      	ldr	r3, [pc, #52]	; (d4a00 <_Z9sendEventv+0xe4>)
   d49ca:	2201      	movs	r2, #1
   d49cc:	701a      	strb	r2, [r3, #0]
   d49ce:	f001 fc3f 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d49d2:	4b0c      	ldr	r3, [pc, #48]	; (d4a04 <_Z9sendEventv+0xe8>)
   d49d4:	6018      	str	r0, [r3, #0]
}
   d49d6:	b051      	add	sp, #324	; 0x144
   d49d8:	bd30      	pop	{r4, r5, pc}
   d49da:	bf00      	nop
   d49dc:	2003e4ac 	.word	0x2003e4ac
   d49e0:	2003e50c 	.word	0x2003e50c
   d49e4:	2003e47c 	.word	0x2003e47c
   d49e8:	2003e454 	.word	0x2003e454
   d49ec:	000db9f4 	.word	0x000db9f4
   d49f0:	000dbab0 	.word	0x000dbab0
   d49f4:	000dbad1 	.word	0x000dbad1
   d49f8:	000dbae9 	.word	0x000dbae9
   d49fc:	2003e4d0 	.word	0x2003e4d0
   d4a00:	2003e130 	.word	0x2003e130
   d4a04:	2003e588 	.word	0x2003e588

000d4a08 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4a08:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4a0a:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4a0c:	b094      	sub	sp, #80	; 0x50
   d4a0e:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4a10:	b9a3      	cbnz	r3, d4a3c <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4a12:	491c      	ldr	r1, [pc, #112]	; (d4a84 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4a14:	a804      	add	r0, sp, #16
   d4a16:	f004 fc27 	bl	d9268 <strcpy>
   d4a1a:	f7ff fe1d 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d4a1e:	2300      	movs	r3, #0
   d4a20:	f88d 3000 	strb.w	r3, [sp]
   d4a24:	4b18      	ldr	r3, [pc, #96]	; (d4a88 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4a26:	4919      	ldr	r1, [pc, #100]	; (d4a8c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4a28:	781b      	ldrb	r3, [r3, #0]
   d4a2a:	aa04      	add	r2, sp, #16
   d4a2c:	a802      	add	r0, sp, #8
   d4a2e:	f7ff fba4 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4a32:	a803      	add	r0, sp, #12
   d4a34:	f7ff ff5c 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4a38:	b014      	add	sp, #80	; 0x50
   d4a3a:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4a3c:	4608      	mov	r0, r1
   d4a3e:	f004 fac7 	bl	d8fd0 <atoi>
   d4a42:	28c8      	cmp	r0, #200	; 0xc8
   d4a44:	d10e      	bne.n	d4a64 <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4a46:	4912      	ldr	r1, [pc, #72]	; (d4a90 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4a48:	a804      	add	r0, sp, #16
   d4a4a:	f004 fc0d 	bl	d9268 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4a4e:	f003 f8f2 	bl	d7c36 <_ZN9TimeClass3nowEv>
   d4a52:	4b10      	ldr	r3, [pc, #64]	; (d4a94 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4a54:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4a56:	4b10      	ldr	r3, [pc, #64]	; (d4a98 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4a58:	2201      	movs	r2, #1
   d4a5a:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4a5c:	4b0f      	ldr	r3, [pc, #60]	; (d4a9c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4a5e:	2200      	movs	r2, #0
   d4a60:	701a      	strb	r2, [r3, #0]
   d4a62:	e7da      	b.n	d4a1a <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4a64:	4620      	mov	r0, r4
   d4a66:	f004 fab3 	bl	d8fd0 <atoi>
   d4a6a:	28c9      	cmp	r0, #201	; 0xc9
   d4a6c:	d0eb      	beq.n	d4a46 <_Z14UbidotsHandlerPKcS0_+0x3e>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4a6e:	4620      	mov	r0, r4
   d4a70:	f004 faae 	bl	d8fd0 <atoi>
   d4a74:	4a0a      	ldr	r2, [pc, #40]	; (d4aa0 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4a76:	4603      	mov	r3, r0
   d4a78:	2140      	movs	r1, #64	; 0x40
   d4a7a:	a804      	add	r0, sp, #16
   d4a7c:	f001 fec4 	bl	d6808 <snprintf>
   d4a80:	e7cb      	b.n	d4a1a <_Z14UbidotsHandlerPKcS0_+0x12>
   d4a82:	bf00      	nop
   d4a84:	000dbb02 	.word	0x000dbb02
   d4a88:	2003e454 	.word	0x2003e454
   d4a8c:	000dbb39 	.word	0x000dbb39
   d4a90:	000dbb0a 	.word	0x000dbb0a
   d4a94:	2003e50c 	.word	0x2003e50c
   d4a98:	2003e540 	.word	0x2003e540
   d4a9c:	2003e130 	.word	0x2003e130
   d4aa0:	000dbb1c 	.word	0x000dbb1c

000d4aa4 <_Z14setSoilSensors6String>:
{
   d4aa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4aa6:	491f      	ldr	r1, [pc, #124]	; (d4b24 <_Z14setSoilSensors6String+0x80>)
   d4aa8:	4604      	mov	r4, r0
   d4aaa:	f002 fed0 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4aae:	4606      	mov	r6, r0
   d4ab0:	b1a0      	cbz	r0, d4adc <_Z14setSoilSensors6String+0x38>
    sysStatus.soilSensorConfig = 0;
   d4ab2:	4a1d      	ldr	r2, [pc, #116]	; (d4b28 <_Z14setSoilSensors6String+0x84>)
   d4ab4:	2300      	movs	r3, #0
   d4ab6:	7393      	strb	r3, [r2, #14]
    systemStatusWriteNeeded = true;
   d4ab8:	4a1c      	ldr	r2, [pc, #112]	; (d4b2c <_Z14setSoilSensors6String+0x88>)
   d4aba:	2401      	movs	r4, #1
   d4abc:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d4abe:	f88d 3000 	strb.w	r3, [sp]
   d4ac2:	4b1b      	ldr	r3, [pc, #108]	; (d4b30 <_Z14setSoilSensors6String+0x8c>)
   d4ac4:	4a1b      	ldr	r2, [pc, #108]	; (d4b34 <_Z14setSoilSensors6String+0x90>)
   d4ac6:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4ac8:	491b      	ldr	r1, [pc, #108]	; (d4b38 <_Z14setSoilSensors6String+0x94>)
   d4aca:	a802      	add	r0, sp, #8
   d4acc:	f7ff fb55 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ad0:	a803      	add	r0, sp, #12
   d4ad2:	f7ff ff0d 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4ad6:	4620      	mov	r0, r4
}
   d4ad8:	b004      	add	sp, #16
   d4ada:	bd70      	pop	{r4, r5, r6, pc}
   d4adc:	4917      	ldr	r1, [pc, #92]	; (d4b3c <_Z14setSoilSensors6String+0x98>)
   d4ade:	4620      	mov	r0, r4
   d4ae0:	f002 feb5 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4ae4:	4605      	mov	r5, r0
   d4ae6:	b150      	cbz	r0, d4afe <_Z14setSoilSensors6String+0x5a>
    sysStatus.soilSensorConfig = 1;
   d4ae8:	4b0f      	ldr	r3, [pc, #60]	; (d4b28 <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4aea:	4a15      	ldr	r2, [pc, #84]	; (d4b40 <_Z14setSoilSensors6String+0x9c>)
    sysStatus.soilSensorConfig = 1;
   d4aec:	2401      	movs	r4, #1
   d4aee:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d4af0:	4b0e      	ldr	r3, [pc, #56]	; (d4b2c <_Z14setSoilSensors6String+0x88>)
   d4af2:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4af4:	4b0e      	ldr	r3, [pc, #56]	; (d4b30 <_Z14setSoilSensors6String+0x8c>)
   d4af6:	f88d 6000 	strb.w	r6, [sp]
   d4afa:	781b      	ldrb	r3, [r3, #0]
   d4afc:	e7e4      	b.n	d4ac8 <_Z14setSoilSensors6String+0x24>
   d4afe:	4911      	ldr	r1, [pc, #68]	; (d4b44 <_Z14setSoilSensors6String+0xa0>)
   d4b00:	4620      	mov	r0, r4
   d4b02:	f002 fea4 	bl	d784e <_ZNK6String6equalsEPKc>
    else if (command == "2")
   d4b06:	2800      	cmp	r0, #0
   d4b08:	d0e6      	beq.n	d4ad8 <_Z14setSoilSensors6String+0x34>
    sysStatus.soilSensorConfig = 2;
   d4b0a:	4b07      	ldr	r3, [pc, #28]	; (d4b28 <_Z14setSoilSensors6String+0x84>)
   d4b0c:	2202      	movs	r2, #2
   d4b0e:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4b10:	4b06      	ldr	r3, [pc, #24]	; (d4b2c <_Z14setSoilSensors6String+0x88>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4b12:	4a0d      	ldr	r2, [pc, #52]	; (d4b48 <_Z14setSoilSensors6String+0xa4>)
    systemStatusWriteNeeded = true;
   d4b14:	2401      	movs	r4, #1
   d4b16:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4b18:	4b05      	ldr	r3, [pc, #20]	; (d4b30 <_Z14setSoilSensors6String+0x8c>)
   d4b1a:	f88d 5000 	strb.w	r5, [sp]
   d4b1e:	781b      	ldrb	r3, [r3, #0]
   d4b20:	e7d2      	b.n	d4ac8 <_Z14setSoilSensors6String+0x24>
   d4b22:	bf00      	nop
   d4b24:	000dbb46 	.word	0x000dbb46
   d4b28:	2003e50c 	.word	0x2003e50c
   d4b2c:	2003e540 	.word	0x2003e540
   d4b30:	2003e454 	.word	0x2003e454
   d4b34:	000dbb48 	.word	0x000dbb48
   d4b38:	000dbb58 	.word	0x000dbb58
   d4b3c:	000db978 	.word	0x000db978
   d4b40:	000dbb5f 	.word	0x000dbb5f
   d4b44:	000dbd5d 	.word	0x000dbd5d
   d4b48:	000dbb6f 	.word	0x000dbb6f

000d4b4c <_Z17setPressureSensor6String>:
{
   d4b4c:	b530      	push	{r4, r5, lr}
   d4b4e:	4916      	ldr	r1, [pc, #88]	; (d4ba8 <_Z17setPressureSensor6String+0x5c>)
   d4b50:	b085      	sub	sp, #20
   d4b52:	4604      	mov	r4, r0
   d4b54:	f002 fe7b 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4b58:	4605      	mov	r5, r0
   d4b5a:	b1a0      	cbz	r0, d4b86 <_Z17setPressureSensor6String+0x3a>
    sysStatus.pressureSensorConfig = 0;
   d4b5c:	4a13      	ldr	r2, [pc, #76]	; (d4bac <_Z17setPressureSensor6String+0x60>)
   d4b5e:	2300      	movs	r3, #0
   d4b60:	73d3      	strb	r3, [r2, #15]
    systemStatusWriteNeeded = true;
   d4b62:	4a13      	ldr	r2, [pc, #76]	; (d4bb0 <_Z17setPressureSensor6String+0x64>)
   d4b64:	2401      	movs	r4, #1
   d4b66:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d4b68:	f88d 3000 	strb.w	r3, [sp]
   d4b6c:	4b11      	ldr	r3, [pc, #68]	; (d4bb4 <_Z17setPressureSensor6String+0x68>)
   d4b6e:	4a12      	ldr	r2, [pc, #72]	; (d4bb8 <_Z17setPressureSensor6String+0x6c>)
   d4b70:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b72:	4912      	ldr	r1, [pc, #72]	; (d4bbc <_Z17setPressureSensor6String+0x70>)
   d4b74:	a802      	add	r0, sp, #8
   d4b76:	f7ff fb00 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b7a:	a803      	add	r0, sp, #12
   d4b7c:	f7ff feb8 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b80:	4620      	mov	r0, r4
}
   d4b82:	b005      	add	sp, #20
   d4b84:	bd30      	pop	{r4, r5, pc}
   d4b86:	490e      	ldr	r1, [pc, #56]	; (d4bc0 <_Z17setPressureSensor6String+0x74>)
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f002 fe60 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4b8e:	2800      	cmp	r0, #0
   d4b90:	d0f7      	beq.n	d4b82 <_Z17setPressureSensor6String+0x36>
    sysStatus.pressureSensorConfig = 1;
   d4b92:	4b06      	ldr	r3, [pc, #24]	; (d4bac <_Z17setPressureSensor6String+0x60>)
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b94:	4a0b      	ldr	r2, [pc, #44]	; (d4bc4 <_Z17setPressureSensor6String+0x78>)
    sysStatus.pressureSensorConfig = 1;
   d4b96:	2401      	movs	r4, #1
   d4b98:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d4b9a:	4b05      	ldr	r3, [pc, #20]	; (d4bb0 <_Z17setPressureSensor6String+0x64>)
   d4b9c:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b9e:	4b05      	ldr	r3, [pc, #20]	; (d4bb4 <_Z17setPressureSensor6String+0x68>)
   d4ba0:	f88d 5000 	strb.w	r5, [sp]
   d4ba4:	781b      	ldrb	r3, [r3, #0]
   d4ba6:	e7e4      	b.n	d4b72 <_Z17setPressureSensor6String+0x26>
   d4ba8:	000dbb46 	.word	0x000dbb46
   d4bac:	2003e50c 	.word	0x2003e50c
   d4bb0:	2003e540 	.word	0x2003e540
   d4bb4:	2003e454 	.word	0x2003e454
   d4bb8:	000dbb80 	.word	0x000dbb80
   d4bbc:	000dbb58 	.word	0x000dbb58
   d4bc0:	000db978 	.word	0x000db978
   d4bc4:	000dbb93 	.word	0x000dbb93

000d4bc8 <_Z14setLightSensor6String>:
{
   d4bc8:	b530      	push	{r4, r5, lr}
   d4bca:	491a      	ldr	r1, [pc, #104]	; (d4c34 <_Z14setLightSensor6String+0x6c>)
   d4bcc:	b085      	sub	sp, #20
   d4bce:	4604      	mov	r4, r0
   d4bd0:	f002 fe3d 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4bd4:	4605      	mov	r5, r0
   d4bd6:	b1a0      	cbz	r0, d4c02 <_Z14setLightSensor6String+0x3a>
    sysStatus.lightSensorConfig = 0;
   d4bd8:	4a17      	ldr	r2, [pc, #92]	; (d4c38 <_Z14setLightSensor6String+0x70>)
   d4bda:	2300      	movs	r3, #0
   d4bdc:	7413      	strb	r3, [r2, #16]
    systemStatusWriteNeeded = true;
   d4bde:	4a17      	ldr	r2, [pc, #92]	; (d4c3c <_Z14setLightSensor6String+0x74>)
   d4be0:	2401      	movs	r4, #1
   d4be2:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d4be4:	f88d 3000 	strb.w	r3, [sp]
   d4be8:	4b15      	ldr	r3, [pc, #84]	; (d4c40 <_Z14setLightSensor6String+0x78>)
   d4bea:	4a16      	ldr	r2, [pc, #88]	; (d4c44 <_Z14setLightSensor6String+0x7c>)
   d4bec:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4bee:	4916      	ldr	r1, [pc, #88]	; (d4c48 <_Z14setLightSensor6String+0x80>)
   d4bf0:	a802      	add	r0, sp, #8
   d4bf2:	f7ff fac2 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4bf6:	a803      	add	r0, sp, #12
   d4bf8:	f7ff fe7a 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bfc:	4620      	mov	r0, r4
}
   d4bfe:	b005      	add	sp, #20
   d4c00:	bd30      	pop	{r4, r5, pc}
   d4c02:	4912      	ldr	r1, [pc, #72]	; (d4c4c <_Z14setLightSensor6String+0x84>)
   d4c04:	4620      	mov	r0, r4
   d4c06:	f002 fe22 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4c0a:	2800      	cmp	r0, #0
   d4c0c:	d0f7      	beq.n	d4bfe <_Z14setLightSensor6String+0x36>
    sysStatus.lightSensorConfig = 1;
   d4c0e:	4b0a      	ldr	r3, [pc, #40]	; (d4c38 <_Z14setLightSensor6String+0x70>)
    lightSensor.begin();
   d4c10:	480f      	ldr	r0, [pc, #60]	; (d4c50 <_Z14setLightSensor6String+0x88>)
    sysStatus.lightSensorConfig = 1;
   d4c12:	2401      	movs	r4, #1
   d4c14:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d4c16:	4b09      	ldr	r3, [pc, #36]	; (d4c3c <_Z14setLightSensor6String+0x74>)
   d4c18:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4c1a:	f001 f958 	bl	d5ece <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4c1e:	480c      	ldr	r0, [pc, #48]	; (d4c50 <_Z14setLightSensor6String+0x88>)
   d4c20:	2120      	movs	r1, #32
   d4c22:	f001 f990 	bl	d5f46 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4c26:	4b06      	ldr	r3, [pc, #24]	; (d4c40 <_Z14setLightSensor6String+0x78>)
   d4c28:	f88d 5000 	strb.w	r5, [sp]
   d4c2c:	781b      	ldrb	r3, [r3, #0]
   d4c2e:	4a09      	ldr	r2, [pc, #36]	; (d4c54 <_Z14setLightSensor6String+0x8c>)
   d4c30:	e7dd      	b.n	d4bee <_Z14setLightSensor6String+0x26>
   d4c32:	bf00      	nop
   d4c34:	000dbb46 	.word	0x000dbb46
   d4c38:	2003e50c 	.word	0x2003e50c
   d4c3c:	2003e540 	.word	0x2003e540
   d4c40:	2003e454 	.word	0x2003e454
   d4c44:	000dbbab 	.word	0x000dbbab
   d4c48:	000dbb58 	.word	0x000dbb58
   d4c4c:	000db978 	.word	0x000db978
   d4c50:	2003e4f4 	.word	0x2003e4f4
   d4c54:	000dbbbb 	.word	0x000dbbbb

000d4c58 <_Z18setTempHumidSensor6String>:
{
   d4c58:	b530      	push	{r4, r5, lr}
   d4c5a:	4918      	ldr	r1, [pc, #96]	; (d4cbc <_Z18setTempHumidSensor6String+0x64>)
   d4c5c:	b085      	sub	sp, #20
   d4c5e:	4604      	mov	r4, r0
   d4c60:	f002 fdf5 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4c64:	4605      	mov	r5, r0
   d4c66:	b1a0      	cbz	r0, d4c92 <_Z18setTempHumidSensor6String+0x3a>
    sysStatus.TempHumidConfig = 0;
   d4c68:	4a15      	ldr	r2, [pc, #84]	; (d4cc0 <_Z18setTempHumidSensor6String+0x68>)
   d4c6a:	2300      	movs	r3, #0
   d4c6c:	7313      	strb	r3, [r2, #12]
    systemStatusWriteNeeded = true;
   d4c6e:	4a15      	ldr	r2, [pc, #84]	; (d4cc4 <_Z18setTempHumidSensor6String+0x6c>)
   d4c70:	2401      	movs	r4, #1
   d4c72:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4c74:	f88d 3000 	strb.w	r3, [sp]
   d4c78:	4b13      	ldr	r3, [pc, #76]	; (d4cc8 <_Z18setTempHumidSensor6String+0x70>)
   d4c7a:	4a14      	ldr	r2, [pc, #80]	; (d4ccc <_Z18setTempHumidSensor6String+0x74>)
   d4c7c:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4c7e:	4914      	ldr	r1, [pc, #80]	; (d4cd0 <_Z18setTempHumidSensor6String+0x78>)
   d4c80:	a802      	add	r0, sp, #8
   d4c82:	f7ff fa7a 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c86:	a803      	add	r0, sp, #12
   d4c88:	f7ff fe32 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c8c:	4620      	mov	r0, r4
}
   d4c8e:	b005      	add	sp, #20
   d4c90:	bd30      	pop	{r4, r5, pc}
   d4c92:	4910      	ldr	r1, [pc, #64]	; (d4cd4 <_Z18setTempHumidSensor6String+0x7c>)
   d4c94:	4620      	mov	r0, r4
   d4c96:	f002 fdda 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4c9a:	2800      	cmp	r0, #0
   d4c9c:	d0f7      	beq.n	d4c8e <_Z18setTempHumidSensor6String+0x36>
    sysStatus.TempHumidConfig = 1;
   d4c9e:	4b08      	ldr	r3, [pc, #32]	; (d4cc0 <_Z18setTempHumidSensor6String+0x68>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4ca0:	480d      	ldr	r0, [pc, #52]	; (d4cd8 <_Z18setTempHumidSensor6String+0x80>)
    sysStatus.TempHumidConfig = 1;
   d4ca2:	2401      	movs	r4, #1
   d4ca4:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d4ca6:	4b07      	ldr	r3, [pc, #28]	; (d4cc4 <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4ca8:	2144      	movs	r1, #68	; 0x44
    systemStatusWriteNeeded = true;
   d4caa:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4cac:	f001 f99e 	bl	d5fec <_ZN14Adafruit_SHT315beginEh>
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4cb0:	4b05      	ldr	r3, [pc, #20]	; (d4cc8 <_Z18setTempHumidSensor6String+0x70>)
   d4cb2:	f88d 5000 	strb.w	r5, [sp]
   d4cb6:	781b      	ldrb	r3, [r3, #0]
   d4cb8:	4a08      	ldr	r2, [pc, #32]	; (d4cdc <_Z18setTempHumidSensor6String+0x84>)
   d4cba:	e7e0      	b.n	d4c7e <_Z18setTempHumidSensor6String+0x26>
   d4cbc:	000dbb46 	.word	0x000dbb46
   d4cc0:	2003e50c 	.word	0x2003e50c
   d4cc4:	2003e540 	.word	0x2003e540
   d4cc8:	2003e454 	.word	0x2003e454
   d4ccc:	000dbbd0 	.word	0x000dbbd0
   d4cd0:	000dbb58 	.word	0x000dbb58
   d4cd4:	000db978 	.word	0x000db978
   d4cd8:	2003e544 	.word	0x2003e544
   d4cdc:	000dbbd3 	.word	0x000dbbd3

000d4ce0 <_Z23setWaterDurationMorning6String>:
{
   d4ce0:	b510      	push	{r4, lr}
   d4ce2:	b0c6      	sub	sp, #280	; 0x118
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4ce4:	6800      	ldr	r0, [r0, #0]
   d4ce6:	220a      	movs	r2, #10
   d4ce8:	a903      	add	r1, sp, #12
   d4cea:	f005 fa0b 	bl	da104 <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4cee:	1e43      	subs	r3, r0, #1
   d4cf0:	2b36      	cmp	r3, #54	; 0x36
   d4cf2:	d82c      	bhi.n	d4d4e <_Z23setWaterDurationMorning6String+0x6e>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cf4:	4b17      	ldr	r3, [pc, #92]	; (d4d54 <_Z23setWaterDurationMorning6String+0x74>)
  sysStatus.wateringDurationMorning = tempDuration;
   d4cf6:	4c18      	ldr	r4, [pc, #96]	; (d4d58 <_Z23setWaterDurationMorning6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cf8:	2201      	movs	r2, #1
   d4cfa:	701a      	strb	r2, [r3, #0]
  sysStatus.wateringDurationMorning = tempDuration;
   d4cfc:	6220      	str	r0, [r4, #32]
  snprintf(data, sizeof(data), "Morning Watering Duration set to %i",sysStatus.wateringDurationMorning);
   d4cfe:	4603      	mov	r3, r0
   d4d00:	4a16      	ldr	r2, [pc, #88]	; (d4d5c <_Z23setWaterDurationMorning6String+0x7c>)
   d4d02:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d06:	a806      	add	r0, sp, #24
   d4d08:	f001 fd7e 	bl	d6808 <snprintf>
  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4d0c:	4814      	ldr	r0, [pc, #80]	; (d4d60 <_Z23setWaterDurationMorning6String+0x80>)
   d4d0e:	f7ff faf8 	bl	d4302 <_ZNK5Timer8isActiveEv>
   d4d12:	b140      	cbz	r0, d4d26 <_Z23setWaterDurationMorning6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMorning);
   d4d14:	6a23      	ldr	r3, [r4, #32]
   d4d16:	4812      	ldr	r0, [pc, #72]	; (d4d60 <_Z23setWaterDurationMorning6String+0x80>)
   d4d18:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4d1c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4d20:	4359      	muls	r1, r3
   d4d22:	f7ff fadd 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d4d26:	f7ff fc97 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4d2a:	f001 fcb5 	bl	d6698 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4d2e:	b160      	cbz	r0, d4d4a <_Z23setWaterDurationMorning6String+0x6a>
   d4d30:	2300      	movs	r3, #0
   d4d32:	f88d 3000 	strb.w	r3, [sp]
   d4d36:	4b0b      	ldr	r3, [pc, #44]	; (d4d64 <_Z23setWaterDurationMorning6String+0x84>)
   d4d38:	490b      	ldr	r1, [pc, #44]	; (d4d68 <_Z23setWaterDurationMorning6String+0x88>)
   d4d3a:	781b      	ldrb	r3, [r3, #0]
   d4d3c:	a804      	add	r0, sp, #16
   d4d3e:	aa06      	add	r2, sp, #24
   d4d40:	f7ff fa1b 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d44:	a805      	add	r0, sp, #20
   d4d46:	f7ff fdd3 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4d4a:	2001      	movs	r0, #1
   d4d4c:	e000      	b.n	d4d50 <_Z23setWaterDurationMorning6String+0x70>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d4e:	2000      	movs	r0, #0
}
   d4d50:	b046      	add	sp, #280	; 0x118
   d4d52:	bd10      	pop	{r4, pc}
   d4d54:	2003e540 	.word	0x2003e540
   d4d58:	2003e50c 	.word	0x2003e50c
   d4d5c:	000dbbf2 	.word	0x000dbbf2
   d4d60:	2003e568 	.word	0x2003e568
   d4d64:	2003e454 	.word	0x2003e454
   d4d68:	000dbc16 	.word	0x000dbc16

000d4d6c <_Z21setWaterDurationLunch6String>:
{
   d4d6c:	b510      	push	{r4, lr}
   d4d6e:	b0c6      	sub	sp, #280	; 0x118
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d70:	6800      	ldr	r0, [r0, #0]
   d4d72:	220a      	movs	r2, #10
   d4d74:	a903      	add	r1, sp, #12
   d4d76:	f005 f9c5 	bl	da104 <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d7a:	1e43      	subs	r3, r0, #1
   d4d7c:	2b36      	cmp	r3, #54	; 0x36
   d4d7e:	d82c      	bhi.n	d4dda <_Z21setWaterDurationLunch6String+0x6e>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d80:	4b17      	ldr	r3, [pc, #92]	; (d4de0 <_Z21setWaterDurationLunch6String+0x74>)
  sysStatus.wateringDurationLunch = tempDuration;
   d4d82:	4c18      	ldr	r4, [pc, #96]	; (d4de4 <_Z21setWaterDurationLunch6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d84:	2201      	movs	r2, #1
   d4d86:	701a      	strb	r2, [r3, #0]
  sysStatus.wateringDurationLunch = tempDuration;
   d4d88:	6260      	str	r0, [r4, #36]	; 0x24
  snprintf(data, sizeof(data), "Lunch Watering Duration set to %i",sysStatus.wateringDurationLunch);
   d4d8a:	4603      	mov	r3, r0
   d4d8c:	4a16      	ldr	r2, [pc, #88]	; (d4de8 <_Z21setWaterDurationLunch6String+0x7c>)
   d4d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d92:	a806      	add	r0, sp, #24
   d4d94:	f001 fd38 	bl	d6808 <snprintf>
  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4d98:	4814      	ldr	r0, [pc, #80]	; (d4dec <_Z21setWaterDurationLunch6String+0x80>)
   d4d9a:	f7ff fab2 	bl	d4302 <_ZNK5Timer8isActiveEv>
   d4d9e:	b140      	cbz	r0, d4db2 <_Z21setWaterDurationLunch6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationLunch);
   d4da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4da2:	4812      	ldr	r0, [pc, #72]	; (d4dec <_Z21setWaterDurationLunch6String+0x80>)
   d4da4:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4da8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4dac:	4359      	muls	r1, r3
   d4dae:	f7ff fa97 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d4db2:	f7ff fc51 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4db6:	f001 fc6f 	bl	d6698 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4dba:	b160      	cbz	r0, d4dd6 <_Z21setWaterDurationLunch6String+0x6a>
   d4dbc:	2300      	movs	r3, #0
   d4dbe:	f88d 3000 	strb.w	r3, [sp]
   d4dc2:	4b0b      	ldr	r3, [pc, #44]	; (d4df0 <_Z21setWaterDurationLunch6String+0x84>)
   d4dc4:	490b      	ldr	r1, [pc, #44]	; (d4df4 <_Z21setWaterDurationLunch6String+0x88>)
   d4dc6:	781b      	ldrb	r3, [r3, #0]
   d4dc8:	a804      	add	r0, sp, #16
   d4dca:	aa06      	add	r2, sp, #24
   d4dcc:	f7ff f9d5 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4dd0:	a805      	add	r0, sp, #20
   d4dd2:	f7ff fd8d 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4dd6:	2001      	movs	r0, #1
   d4dd8:	e000      	b.n	d4ddc <_Z21setWaterDurationLunch6String+0x70>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4dda:	2000      	movs	r0, #0
}
   d4ddc:	b046      	add	sp, #280	; 0x118
   d4dde:	bd10      	pop	{r4, pc}
   d4de0:	2003e540 	.word	0x2003e540
   d4de4:	2003e50c 	.word	0x2003e50c
   d4de8:	000dbc1f 	.word	0x000dbc1f
   d4dec:	2003e568 	.word	0x2003e568
   d4df0:	2003e454 	.word	0x2003e454
   d4df4:	000dbc16 	.word	0x000dbc16

000d4df8 <_Z23setWaterDurationEvening6String>:
{
   d4df8:	b510      	push	{r4, lr}
   d4dfa:	b0c6      	sub	sp, #280	; 0x118
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4dfc:	6800      	ldr	r0, [r0, #0]
   d4dfe:	220a      	movs	r2, #10
   d4e00:	a903      	add	r1, sp, #12
   d4e02:	f005 f97f 	bl	da104 <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e06:	1e43      	subs	r3, r0, #1
   d4e08:	2b36      	cmp	r3, #54	; 0x36
   d4e0a:	d82c      	bhi.n	d4e66 <_Z23setWaterDurationEvening6String+0x6e>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e0c:	4b17      	ldr	r3, [pc, #92]	; (d4e6c <_Z23setWaterDurationEvening6String+0x74>)
  sysStatus.wateringDurationEvening = tempDuration;
   d4e0e:	4c18      	ldr	r4, [pc, #96]	; (d4e70 <_Z23setWaterDurationEvening6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e10:	2201      	movs	r2, #1
   d4e12:	701a      	strb	r2, [r3, #0]
  sysStatus.wateringDurationEvening = tempDuration;
   d4e14:	62a0      	str	r0, [r4, #40]	; 0x28
  snprintf(data, sizeof(data), "Evening Watering Duration set to %i",sysStatus.wateringDurationEvening);
   d4e16:	4603      	mov	r3, r0
   d4e18:	4a16      	ldr	r2, [pc, #88]	; (d4e74 <_Z23setWaterDurationEvening6String+0x7c>)
   d4e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4e1e:	a806      	add	r0, sp, #24
   d4e20:	f001 fcf2 	bl	d6808 <snprintf>
  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4e24:	4814      	ldr	r0, [pc, #80]	; (d4e78 <_Z23setWaterDurationEvening6String+0x80>)
   d4e26:	f7ff fa6c 	bl	d4302 <_ZNK5Timer8isActiveEv>
   d4e2a:	b140      	cbz	r0, d4e3e <_Z23setWaterDurationEvening6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationEvening);
   d4e2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4e2e:	4812      	ldr	r0, [pc, #72]	; (d4e78 <_Z23setWaterDurationEvening6String+0x80>)
   d4e30:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4e34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4e38:	4359      	muls	r1, r3
   d4e3a:	f7ff fa51 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d4e3e:	f7ff fc0b 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4e42:	f001 fc29 	bl	d6698 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4e46:	b160      	cbz	r0, d4e62 <_Z23setWaterDurationEvening6String+0x6a>
   d4e48:	2300      	movs	r3, #0
   d4e4a:	f88d 3000 	strb.w	r3, [sp]
   d4e4e:	4b0b      	ldr	r3, [pc, #44]	; (d4e7c <_Z23setWaterDurationEvening6String+0x84>)
   d4e50:	490b      	ldr	r1, [pc, #44]	; (d4e80 <_Z23setWaterDurationEvening6String+0x88>)
   d4e52:	781b      	ldrb	r3, [r3, #0]
   d4e54:	a804      	add	r0, sp, #16
   d4e56:	aa06      	add	r2, sp, #24
   d4e58:	f7ff f98f 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4e5c:	a805      	add	r0, sp, #20
   d4e5e:	f7ff fd47 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4e62:	2001      	movs	r0, #1
   d4e64:	e000      	b.n	d4e68 <_Z23setWaterDurationEvening6String+0x70>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e66:	2000      	movs	r0, #0
}
   d4e68:	b046      	add	sp, #280	; 0x118
   d4e6a:	bd10      	pop	{r4, pc}
   d4e6c:	2003e540 	.word	0x2003e540
   d4e70:	2003e50c 	.word	0x2003e50c
   d4e74:	000dbc41 	.word	0x000dbc41
   d4e78:	2003e568 	.word	0x2003e568
   d4e7c:	2003e454 	.word	0x2003e454
   d4e80:	000dbc16 	.word	0x000dbc16

000d4e84 <_Z17setWaterThreshold6String>:
{
   d4e84:	b570      	push	{r4, r5, r6, lr}
   d4e86:	b086      	sub	sp, #24
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4e88:	6800      	ldr	r0, [r0, #0]
   d4e8a:	a903      	add	r1, sp, #12
   d4e8c:	f005 f866 	bl	d9f5c <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4e90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e98:	d432      	bmi.n	d4f00 <_Z17setWaterThreshold6String+0x7c>
   d4e9a:	eddf 7a1a 	vldr	s15, [pc, #104]	; d4f04 <_Z17setWaterThreshold6String+0x80>
   d4e9e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ea6:	bfcc      	ite	gt
   d4ea8:	2601      	movgt	r6, #1
   d4eaa:	2600      	movle	r6, #0
   d4eac:	dc28      	bgt.n	d4f00 <_Z17setWaterThreshold6String+0x7c>
  systemStatusWriteNeeded = true;
   d4eae:	4b16      	ldr	r3, [pc, #88]	; (d4f08 <_Z17setWaterThreshold6String+0x84>)
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4eb0:	4d16      	ldr	r5, [pc, #88]	; (d4f0c <_Z17setWaterThreshold6String+0x88>)
  systemStatusWriteNeeded = true;
   d4eb2:	2401      	movs	r4, #1
   d4eb4:	701c      	strb	r4, [r3, #0]
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4eb6:	ee10 0a10 	vmov	r0, s0
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4eba:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4ebe:	f003 fb33 	bl	d8528 <__aeabi_f2d>
   d4ec2:	4a13      	ldr	r2, [pc, #76]	; (d4f10 <_Z17setWaterThreshold6String+0x8c>)
   d4ec4:	e9cd 0100 	strd	r0, r1, [sp]
   d4ec8:	4812      	ldr	r0, [pc, #72]	; (d4f14 <_Z17setWaterThreshold6String+0x90>)
   d4eca:	2108      	movs	r1, #8
   d4ecc:	f001 fc9c 	bl	d6808 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4ed0:	792b      	ldrb	r3, [r5, #4]
   d4ed2:	b913      	cbnz	r3, d4eda <_Z17setWaterThreshold6String+0x56>
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4ed4:	2001      	movs	r0, #1
}
   d4ed6:	b006      	add	sp, #24
   d4ed8:	bd70      	pop	{r4, r5, r6, pc}
   d4eda:	f001 fbdd 	bl	d6698 <spark_cloud_flag_connected>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4ede:	2800      	cmp	r0, #0
   d4ee0:	d0f8      	beq.n	d4ed4 <_Z17setWaterThreshold6String+0x50>
   d4ee2:	f7ff fbb9 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d4ee6:	4b0c      	ldr	r3, [pc, #48]	; (d4f18 <_Z17setWaterThreshold6String+0x94>)
   d4ee8:	f88d 6000 	strb.w	r6, [sp]
   d4eec:	a804      	add	r0, sp, #16
   d4eee:	781b      	ldrb	r3, [r3, #0]
   d4ef0:	4a08      	ldr	r2, [pc, #32]	; (d4f14 <_Z17setWaterThreshold6String+0x90>)
   d4ef2:	490a      	ldr	r1, [pc, #40]	; (d4f1c <_Z17setWaterThreshold6String+0x98>)
   d4ef4:	f7ff f941 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ef8:	a805      	add	r0, sp, #20
   d4efa:	f7ff fcf9 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4efe:	e7e9      	b.n	d4ed4 <_Z17setWaterThreshold6String+0x50>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4f00:	2000      	movs	r0, #0
   d4f02:	e7e8      	b.n	d4ed6 <_Z17setWaterThreshold6String+0x52>
   d4f04:	42c80000 	.word	0x42c80000
   d4f08:	2003e540 	.word	0x2003e540
   d4f0c:	2003e50c 	.word	0x2003e50c
   d4f10:	000dbc65 	.word	0x000dbc65
   d4f14:	2003e560 	.word	0x2003e560
   d4f18:	2003e454 	.word	0x2003e454
   d4f1c:	000dbd19 	.word	0x000dbd19

000d4f20 <_Z14setVerboseMode6String>:
{
   d4f20:	b530      	push	{r4, r5, lr}
   d4f22:	4916      	ldr	r1, [pc, #88]	; (d4f7c <_Z14setVerboseMode6String+0x5c>)
   d4f24:	b085      	sub	sp, #20
   d4f26:	4604      	mov	r4, r0
   d4f28:	f002 fc91 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4f2c:	4605      	mov	r5, r0
   d4f2e:	b1a0      	cbz	r0, d4f5a <_Z14setVerboseMode6String+0x3a>
    sysStatus.verboseMode = true;
   d4f30:	4b13      	ldr	r3, [pc, #76]	; (d4f80 <_Z14setVerboseMode6String+0x60>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4f32:	4a14      	ldr	r2, [pc, #80]	; (d4f84 <_Z14setVerboseMode6String+0x64>)
    sysStatus.verboseMode = true;
   d4f34:	2401      	movs	r4, #1
   d4f36:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4f38:	4b13      	ldr	r3, [pc, #76]	; (d4f88 <_Z14setVerboseMode6String+0x68>)
   d4f3a:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4f3c:	2300      	movs	r3, #0
   d4f3e:	f88d 3000 	strb.w	r3, [sp]
   d4f42:	4b12      	ldr	r3, [pc, #72]	; (d4f8c <_Z14setVerboseMode6String+0x6c>)
   d4f44:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f46:	4912      	ldr	r1, [pc, #72]	; (d4f90 <_Z14setVerboseMode6String+0x70>)
   d4f48:	a802      	add	r0, sp, #8
   d4f4a:	f7ff f916 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4f4e:	a803      	add	r0, sp, #12
   d4f50:	f7ff fcce 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f54:	4620      	mov	r0, r4
}
   d4f56:	b005      	add	sp, #20
   d4f58:	bd30      	pop	{r4, r5, pc}
   d4f5a:	490e      	ldr	r1, [pc, #56]	; (d4f94 <_Z14setVerboseMode6String+0x74>)
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	f002 fc76 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4f62:	2800      	cmp	r0, #0
   d4f64:	d0f7      	beq.n	d4f56 <_Z14setVerboseMode6String+0x36>
    sysStatus.verboseMode = false;
   d4f66:	4b06      	ldr	r3, [pc, #24]	; (d4f80 <_Z14setVerboseMode6String+0x60>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f68:	4a0b      	ldr	r2, [pc, #44]	; (d4f98 <_Z14setVerboseMode6String+0x78>)
    sysStatus.verboseMode = false;
   d4f6a:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4f6c:	4b06      	ldr	r3, [pc, #24]	; (d4f88 <_Z14setVerboseMode6String+0x68>)
   d4f6e:	2401      	movs	r4, #1
   d4f70:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f72:	4b06      	ldr	r3, [pc, #24]	; (d4f8c <_Z14setVerboseMode6String+0x6c>)
   d4f74:	f88d 5000 	strb.w	r5, [sp]
   d4f78:	781b      	ldrb	r3, [r3, #0]
   d4f7a:	e7e4      	b.n	d4f46 <_Z14setVerboseMode6String+0x26>
   d4f7c:	000db978 	.word	0x000db978
   d4f80:	2003e50c 	.word	0x2003e50c
   d4f84:	000dbc6e 	.word	0x000dbc6e
   d4f88:	2003e540 	.word	0x2003e540
   d4f8c:	2003e454 	.word	0x2003e454
   d4f90:	000dbc8f 	.word	0x000dbc8f
   d4f94:	000dbb46 	.word	0x000dbb46
   d4f98:	000dbc7f 	.word	0x000dbc7f

000d4f9c <_Z15setLowPowerMode6String>:
{
   d4f9c:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4f9e:	492a      	ldr	r1, [pc, #168]	; (d5048 <_Z15setLowPowerMode6String+0xac>)
   d4fa0:	b085      	sub	sp, #20
   d4fa2:	4604      	mov	r4, r0
   d4fa4:	f002 fc53 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4fa8:	b360      	cbz	r0, d5004 <_Z15setLowPowerMode6String+0x68>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4faa:	4927      	ldr	r1, [pc, #156]	; (d5048 <_Z15setLowPowerMode6String+0xac>)
   d4fac:	4620      	mov	r0, r4
   d4fae:	f002 fc4e 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4fb2:	bb78      	cbnz	r0, d5014 <_Z15setLowPowerMode6String+0x78>
   d4fb4:	4925      	ldr	r1, [pc, #148]	; (d504c <_Z15setLowPowerMode6String+0xb0>)
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	f002 fc49 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4fbc:	2800      	cmp	r0, #0
   d4fbe:	d03e      	beq.n	d503e <_Z15setLowPowerMode6String+0xa2>
   d4fc0:	f001 fb6a 	bl	d6698 <spark_cloud_flag_connected>
   d4fc4:	4c22      	ldr	r4, [pc, #136]	; (d5050 <_Z15setLowPowerMode6String+0xb4>)
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4fc6:	b918      	cbnz	r0, d4fd0 <_Z15setLowPowerMode6String+0x34>
      connectToParticle();
   d4fc8:	f7ff fa4e 	bl	d4468 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4fcc:	2301      	movs	r3, #1
   d4fce:	70e3      	strb	r3, [r4, #3]
   d4fd0:	f7ff fb42 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4fd4:	2500      	movs	r5, #0
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4fd6:	4b1f      	ldr	r3, [pc, #124]	; (d5054 <_Z15setLowPowerMode6String+0xb8>)
   d4fd8:	f88d 5000 	strb.w	r5, [sp]
   d4fdc:	781b      	ldrb	r3, [r3, #0]
   d4fde:	4a1e      	ldr	r2, [pc, #120]	; (d5058 <_Z15setLowPowerMode6String+0xbc>)
   d4fe0:	491e      	ldr	r1, [pc, #120]	; (d505c <_Z15setLowPowerMode6String+0xc0>)
   d4fe2:	a802      	add	r0, sp, #8
   d4fe4:	f7ff f8c9 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4fe8:	a803      	add	r0, sp, #12
   d4fea:	f7ff fc81 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ff2:	f001 fc35 	bl	d6860 <delay>
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
   d4ff6:	481a      	ldr	r0, [pc, #104]	; (d5060 <_Z15setLowPowerMode6String+0xc4>)
   d4ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4ffc:	f7ff f9c8 	bl	d4390 <_ZN5Timer5startEj>
    sysStatus.lowPowerMode = false;                                   // update the system variable to reflect the new lowPowerMode
   d5000:	71a5      	strb	r5, [r4, #6]
   d5002:	e01c      	b.n	d503e <_Z15setLowPowerMode6String+0xa2>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5004:	4911      	ldr	r1, [pc, #68]	; (d504c <_Z15setLowPowerMode6String+0xb0>)
   d5006:	4620      	mov	r0, r4
   d5008:	f002 fc21 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d500c:	2800      	cmp	r0, #0
   d500e:	d1cc      	bne.n	d4faa <_Z15setLowPowerMode6String+0xe>
}
   d5010:	b005      	add	sp, #20
   d5012:	bd30      	pop	{r4, r5, pc}
   d5014:	f001 fb40 	bl	d6698 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5018:	b170      	cbz	r0, d5038 <_Z15setLowPowerMode6String+0x9c>
   d501a:	f7ff fb1d 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d501e:	2300      	movs	r3, #0
   d5020:	f88d 3000 	strb.w	r3, [sp]
   d5024:	4b0b      	ldr	r3, [pc, #44]	; (d5054 <_Z15setLowPowerMode6String+0xb8>)
   d5026:	4a0f      	ldr	r2, [pc, #60]	; (d5064 <_Z15setLowPowerMode6String+0xc8>)
   d5028:	781b      	ldrb	r3, [r3, #0]
   d502a:	490c      	ldr	r1, [pc, #48]	; (d505c <_Z15setLowPowerMode6String+0xc0>)
   d502c:	a802      	add	r0, sp, #8
   d502e:	f7ff f8a4 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5032:	a803      	add	r0, sp, #12
   d5034:	f7ff fc5c 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sysStatus.lowPowerMode = true;
   d5038:	4b05      	ldr	r3, [pc, #20]	; (d5050 <_Z15setLowPowerMode6String+0xb4>)
   d503a:	2201      	movs	r2, #1
   d503c:	719a      	strb	r2, [r3, #6]
  systemStatusWriteNeeded = true;
   d503e:	4b0a      	ldr	r3, [pc, #40]	; (d5068 <_Z15setLowPowerMode6String+0xcc>)
   d5040:	2001      	movs	r0, #1
   d5042:	7018      	strb	r0, [r3, #0]
  return 1;
   d5044:	e7e4      	b.n	d5010 <_Z15setLowPowerMode6String+0x74>
   d5046:	bf00      	nop
   d5048:	000db978 	.word	0x000db978
   d504c:	000dbb46 	.word	0x000dbb46
   d5050:	2003e50c 	.word	0x2003e50c
   d5054:	2003e454 	.word	0x2003e454
   d5058:	000dbca3 	.word	0x000dbca3
   d505c:	000dbc8f 	.word	0x000dbc8f
   d5060:	2003e460 	.word	0x2003e460
   d5064:	000dbc94 	.word	0x000dbc94
   d5068:	2003e540 	.word	0x2003e540

000d506c <_Z12controlValve6String>:
{
   d506c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d506e:	4935      	ldr	r1, [pc, #212]	; (d5144 <_Z12controlValve6String+0xd8>)
   d5070:	b085      	sub	sp, #20
   d5072:	4604      	mov	r4, r0
   d5074:	f002 fbeb 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
   d5078:	b360      	cbz	r0, d50d4 <_Z12controlValve6String+0x68>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d507a:	4620      	mov	r0, r4
   d507c:	4931      	ldr	r1, [pc, #196]	; (d5144 <_Z12controlValve6String+0xd8>)
   d507e:	4f32      	ldr	r7, [pc, #200]	; (d5148 <_Z12controlValve6String+0xdc>)
   d5080:	4d32      	ldr	r5, [pc, #200]	; (d514c <_Z12controlValve6String+0xe0>)
   d5082:	4e33      	ldr	r6, [pc, #204]	; (d5150 <_Z12controlValve6String+0xe4>)
   d5084:	f002 fbe3 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "1") {                                     // Open the water valve
   d5088:	4604      	mov	r4, r0
   d508a:	bb58      	cbnz	r0, d50e4 <_Z12controlValve6String+0x78>
    digitalWrite(solDirection,LOW);                               // Close the valve
   d508c:	4601      	mov	r1, r0
   d508e:	2002      	movs	r0, #2
   d5090:	f002 ffff 	bl	d8092 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d5094:	4621      	mov	r1, r4
   d5096:	2003      	movs	r0, #3
   d5098:	f002 fffb 	bl	d8092 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d509c:	6968      	ldr	r0, [r5, #20]
   d509e:	f001 fbdf 	bl	d6860 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d50a2:	2101      	movs	r1, #1
   d50a4:	2003      	movs	r0, #3
   d50a6:	f002 fff4 	bl	d8092 <digitalWrite>
    delay(1000);
   d50aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d50ae:	f001 fbd7 	bl	d6860 <delay>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d50b2:	4621      	mov	r1, r4
   d50b4:	2003      	movs	r0, #3
   d50b6:	f002 ffec 	bl	d8092 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d50ba:	6968      	ldr	r0, [r5, #20]
   d50bc:	f001 fbd0 	bl	d6860 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d50c0:	2101      	movs	r1, #1
   d50c2:	2003      	movs	r0, #3
   d50c4:	f002 ffe5 	bl	d8092 <digitalWrite>
    Particle.publish("Watering","Close the valve",PRIVATE);
   d50c8:	7833      	ldrb	r3, [r6, #0]
   d50ca:	4a22      	ldr	r2, [pc, #136]	; (d5154 <_Z12controlValve6String+0xe8>)
    current.solenoidState = false;
   d50cc:	60fc      	str	r4, [r7, #12]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d50ce:	f88d 4000 	strb.w	r4, [sp]
   d50d2:	e02c      	b.n	d512e <_Z12controlValve6String+0xc2>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d50d4:	4920      	ldr	r1, [pc, #128]	; (d5158 <_Z12controlValve6String+0xec>)
   d50d6:	4620      	mov	r0, r4
   d50d8:	f002 fbb9 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
   d50dc:	2800      	cmp	r0, #0
   d50de:	d1cc      	bne.n	d507a <_Z12controlValve6String+0xe>
}
   d50e0:	b005      	add	sp, #20
   d50e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    current.solenoidState = true;
   d50e4:	2401      	movs	r4, #1
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d50e6:	4621      	mov	r1, r4
   d50e8:	2002      	movs	r0, #2
    current.solenoidState = true;
   d50ea:	60fc      	str	r4, [r7, #12]
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d50ec:	f002 ffd1 	bl	d8092 <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d50f0:	2100      	movs	r1, #0
   d50f2:	2003      	movs	r0, #3
   d50f4:	f002 ffcd 	bl	d8092 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d50f8:	6968      	ldr	r0, [r5, #20]
   d50fa:	f001 fbb1 	bl	d6860 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d50fe:	4621      	mov	r1, r4
   d5100:	2003      	movs	r0, #3
   d5102:	f002 ffc6 	bl	d8092 <digitalWrite>
    delay(1000);
   d5106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d510a:	f001 fba9 	bl	d6860 <delay>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d510e:	2100      	movs	r1, #0
   d5110:	2003      	movs	r0, #3
   d5112:	f002 ffbe 	bl	d8092 <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d5116:	6968      	ldr	r0, [r5, #20]
   d5118:	f001 fba2 	bl	d6860 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d511c:	4621      	mov	r1, r4
   d511e:	2003      	movs	r0, #3
   d5120:	f002 ffb7 	bl	d8092 <digitalWrite>
   d5124:	2300      	movs	r3, #0
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d5126:	f88d 3000 	strb.w	r3, [sp]
   d512a:	4a0c      	ldr	r2, [pc, #48]	; (d515c <_Z12controlValve6String+0xf0>)
   d512c:	7833      	ldrb	r3, [r6, #0]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d512e:	490c      	ldr	r1, [pc, #48]	; (d5160 <_Z12controlValve6String+0xf4>)
   d5130:	a802      	add	r0, sp, #8
   d5132:	f7ff f822 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5136:	a803      	add	r0, sp, #12
   d5138:	f7ff fbda 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentStatusWriteNeeded = true;
   d513c:	4b09      	ldr	r3, [pc, #36]	; (d5164 <_Z12controlValve6String+0xf8>)
   d513e:	2001      	movs	r0, #1
   d5140:	7018      	strb	r0, [r3, #0]
  return true;
   d5142:	e7cd      	b.n	d50e0 <_Z12controlValve6String+0x74>
   d5144:	000db978 	.word	0x000db978
   d5148:	2003e4ac 	.word	0x2003e4ac
   d514c:	2003e50c 	.word	0x2003e50c
   d5150:	2003e454 	.word	0x2003e454
   d5154:	000dbccd 	.word	0x000dbccd
   d5158:	000dbb46 	.word	0x000dbb46
   d515c:	000dbcb5 	.word	0x000dbcb5
   d5160:	000dbcc4 	.word	0x000dbcc4
   d5164:	2003e4d1 	.word	0x2003e4d1

000d5168 <setup>:
{
   d5168:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d516a:	4bb9      	ldr	r3, [pc, #740]	; (d5450 <setup+0x2e8>)
{
   d516c:	b0bd      	sub	sp, #244	; 0xf4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d516e:	aa0c      	add	r2, sp, #48	; 0x30
   d5170:	f103 0510 	add.w	r5, r3, #16
   d5174:	4616      	mov	r6, r2
   d5176:	6818      	ldr	r0, [r3, #0]
   d5178:	6859      	ldr	r1, [r3, #4]
   d517a:	4614      	mov	r4, r2
   d517c:	c403      	stmia	r4!, {r0, r1}
   d517e:	3308      	adds	r3, #8
   d5180:	42ab      	cmp	r3, r5
   d5182:	4622      	mov	r2, r4
   d5184:	d1f7      	bne.n	d5176 <setup+0xe>
   d5186:	8819      	ldrh	r1, [r3, #0]
   d5188:	789b      	ldrb	r3, [r3, #2]
   d518a:	8021      	strh	r1, [r4, #0]
   d518c:	70a3      	strb	r3, [r4, #2]
   d518e:	222d      	movs	r2, #45	; 0x2d
   d5190:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d5192:	4fb0      	ldr	r7, [pc, #704]	; (d5454 <setup+0x2ec>)
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5194:	f10d 0043 	add.w	r0, sp, #67	; 0x43
   d5198:	f004 f830 	bl	d91fc <memset>
  state = IDLE_STATE;
   d519c:	2302      	movs	r3, #2
   d519e:	703b      	strb	r3, [r7, #0]
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d51a0:	f7ff f90c 	bl	d43bc <fastPinGetPinmap>
   d51a4:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
   d51a8:	f7ff f908 	bl	d43bc <fastPinGetPinmap>
   d51ac:	016c      	lsls	r4, r5, #5
   d51ae:	f890 5031 	ldrb.w	r5, [r0, #49]	; 0x31
   d51b2:	f005 051f 	and.w	r5, r5, #31
   d51b6:	4325      	orrs	r5, r4
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d51b8:	2d2f      	cmp	r5, #47	; 0x2f
   d51ba:	f340 8221 	ble.w	d5600 <setup+0x498>
   d51be:	4aa6      	ldr	r2, [pc, #664]	; (d5458 <setup+0x2f0>)
   d51c0:	2100      	movs	r1, #0
   d51c2:	200a      	movs	r0, #10
   d51c4:	f001 f9bc 	bl	d6540 <panic_>
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   d51c8:	4ba4      	ldr	r3, [pc, #656]	; (d545c <setup+0x2f4>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d51ca:	f005 051f 	and.w	r5, r5, #31

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d51ce:	2401      	movs	r4, #1
   d51d0:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d51d4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d51d8:	4621      	mov	r1, r4
   d51da:	2007      	movs	r0, #7
   d51dc:	f002 ff48 	bl	d8070 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d51e0:	2100      	movs	r1, #0
   d51e2:	2004      	movs	r0, #4
   d51e4:	f002 ff44 	bl	d8070 <pinMode>
  pinMode(soilPin1, INPUT);
   d51e8:	2100      	movs	r1, #0
   d51ea:	2013      	movs	r0, #19
   d51ec:	f002 ff40 	bl	d8070 <pinMode>
  pinMode(soilPin2, INPUT);
   d51f0:	2100      	movs	r1, #0
   d51f2:	2012      	movs	r0, #18
   d51f4:	f002 ff3c 	bl	d8070 <pinMode>
  pinMode(pressurePin, INPUT);
   d51f8:	2100      	movs	r1, #0
   d51fa:	2011      	movs	r0, #17
   d51fc:	f002 ff38 	bl	d8070 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d5200:	4621      	mov	r1, r4
   d5202:	200e      	movs	r0, #14
   d5204:	f002 ff34 	bl	d8070 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d5208:	4621      	mov	r1, r4
   d520a:	200e      	movs	r0, #14
   d520c:	f002 ff41 	bl	d8092 <digitalWrite>
  pinMode(solEnablePin,OUTPUT);
   d5210:	4621      	mov	r1, r4
   d5212:	2003      	movs	r0, #3
   d5214:	f002 ff2c 	bl	d8070 <pinMode>
  pinMode(solDirection,OUTPUT);
   d5218:	4621      	mov	r1, r4
   d521a:	2002      	movs	r0, #2
   d521c:	f002 ff28 	bl	d8070 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d5220:	4621      	mov	r1, r4
   d5222:	2003      	movs	r0, #3
   d5224:	f002 ff35 	bl	d8092 <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d5228:	2100      	movs	r1, #0
   d522a:	2002      	movs	r0, #2
   d522c:	f002 ff31 	bl	d8092 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d5230:	a804      	add	r0, sp, #16
   d5232:	f001 fa39 	bl	d66a8 <spark_deviceID>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5236:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5238:	2300      	movs	r3, #0
   d523a:	227d      	movs	r2, #125	; 0x7d
   d523c:	a91c      	add	r1, sp, #112	; 0x70
   d523e:	a804      	add	r0, sp, #16
   d5240:	f002 fb17 	bl	d7872 <_ZNK6String8getBytesEPhjj>
   d5244:	462b      	mov	r3, r5
   d5246:	462a      	mov	r2, r5
   d5248:	4985      	ldr	r1, [pc, #532]	; (d5460 <setup+0x2f8>)
   d524a:	e9cd 5500 	strd	r5, r5, [sp]
   d524e:	a81c      	add	r0, sp, #112	; 0x70
   d5250:	f001 fa3a 	bl	d66c8 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d5254:	4983      	ldr	r1, [pc, #524]	; (d5464 <setup+0x2fc>)
   d5256:	4884      	ldr	r0, [pc, #528]	; (d5468 <setup+0x300>)
   d5258:	f7fe ff8b 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, &var, INT);
   d525c:	4983      	ldr	r1, [pc, #524]	; (d546c <setup+0x304>)
   d525e:	4884      	ldr	r0, [pc, #528]	; (d5470 <setup+0x308>)
   d5260:	f7fe ff83 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, var, STRING);
   d5264:	4983      	ldr	r1, [pc, #524]	; (d5474 <setup+0x30c>)
   d5266:	4884      	ldr	r0, [pc, #528]	; (d5478 <setup+0x310>)
   d5268:	f7fe ff83 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d526c:	4983      	ldr	r1, [pc, #524]	; (d547c <setup+0x314>)
   d526e:	4884      	ldr	r0, [pc, #528]	; (d5480 <setup+0x318>)
   d5270:	f7fe ff7f 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5274:	4983      	ldr	r1, [pc, #524]	; (d5484 <setup+0x31c>)
   d5276:	4884      	ldr	r0, [pc, #528]	; (d5488 <setup+0x320>)
   d5278:	f7fe ff7b 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, &var, INT);
   d527c:	4983      	ldr	r1, [pc, #524]	; (d548c <setup+0x324>)
   d527e:	4884      	ldr	r0, [pc, #528]	; (d5490 <setup+0x328>)
   d5280:	f7fe ff73 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d5284:	4983      	ldr	r1, [pc, #524]	; (d5494 <setup+0x32c>)
   d5286:	4884      	ldr	r0, [pc, #528]	; (d5498 <setup+0x330>)
   d5288:	f7fe ff6f 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d528c:	4983      	ldr	r1, [pc, #524]	; (d549c <setup+0x334>)
   d528e:	4884      	ldr	r0, [pc, #528]	; (d54a0 <setup+0x338>)
   d5290:	f7fe ff6b 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, var, STRING);
   d5294:	4983      	ldr	r1, [pc, #524]	; (d54a4 <setup+0x33c>)
   d5296:	4884      	ldr	r0, [pc, #528]	; (d54a8 <setup+0x340>)
   d5298:	f7fe ff6b 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d529c:	4983      	ldr	r1, [pc, #524]	; (d54ac <setup+0x344>)
   d529e:	4884      	ldr	r0, [pc, #528]	; (d54b0 <setup+0x348>)
   d52a0:	f7fe ff67 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d52a4:	4983      	ldr	r1, [pc, #524]	; (d54b4 <setup+0x34c>)
   d52a6:	4884      	ldr	r0, [pc, #528]	; (d54b8 <setup+0x350>)
   d52a8:	f7fe ff63 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d52ac:	4983      	ldr	r1, [pc, #524]	; (d54bc <setup+0x354>)
   d52ae:	4884      	ldr	r0, [pc, #528]	; (d54c0 <setup+0x358>)
   d52b0:	f7fe ff5f 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, &var, INT);
   d52b4:	4983      	ldr	r1, [pc, #524]	; (d54c4 <setup+0x35c>)
   d52b6:	4884      	ldr	r0, [pc, #528]	; (d54c8 <setup+0x360>)
   d52b8:	f7fe ff57 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d52bc:	4983      	ldr	r1, [pc, #524]	; (d54cc <setup+0x364>)
   d52be:	4884      	ldr	r0, [pc, #528]	; (d54d0 <setup+0x368>)
   d52c0:	f7fe ff53 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d52c4:	4983      	ldr	r1, [pc, #524]	; (d54d4 <setup+0x36c>)
   d52c6:	4884      	ldr	r0, [pc, #528]	; (d54d8 <setup+0x370>)
   d52c8:	f7fe ff4f 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d52cc:	4983      	ldr	r1, [pc, #524]	; (d54dc <setup+0x374>)
   d52ce:	4884      	ldr	r0, [pc, #528]	; (d54e0 <setup+0x378>)
   d52d0:	f7fe ff4b 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d52d4:	4983      	ldr	r1, [pc, #524]	; (d54e4 <setup+0x37c>)
   d52d6:	4884      	ldr	r0, [pc, #528]	; (d54e8 <setup+0x380>)
   d52d8:	f7fe ffcc 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52dc:	4983      	ldr	r1, [pc, #524]	; (d54ec <setup+0x384>)
   d52de:	4884      	ldr	r0, [pc, #528]	; (d54f0 <setup+0x388>)
   d52e0:	f7fe ffc8 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52e4:	4983      	ldr	r1, [pc, #524]	; (d54f4 <setup+0x38c>)
   d52e6:	4884      	ldr	r0, [pc, #528]	; (d54f8 <setup+0x390>)
   d52e8:	f7fe ffc4 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52ec:	4983      	ldr	r1, [pc, #524]	; (d54fc <setup+0x394>)
   d52ee:	4884      	ldr	r0, [pc, #528]	; (d5500 <setup+0x398>)
   d52f0:	f7fe ffc0 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52f4:	4983      	ldr	r1, [pc, #524]	; (d5504 <setup+0x39c>)
   d52f6:	4884      	ldr	r0, [pc, #528]	; (d5508 <setup+0x3a0>)
   d52f8:	f7fe ffbc 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52fc:	4983      	ldr	r1, [pc, #524]	; (d550c <setup+0x3a4>)
   d52fe:	4884      	ldr	r0, [pc, #528]	; (d5510 <setup+0x3a8>)
   d5300:	f7fe ffb8 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5304:	4983      	ldr	r1, [pc, #524]	; (d5514 <setup+0x3ac>)
   d5306:	4884      	ldr	r0, [pc, #528]	; (d5518 <setup+0x3b0>)
   d5308:	f7fe ffb4 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d530c:	4983      	ldr	r1, [pc, #524]	; (d551c <setup+0x3b4>)
   d530e:	4884      	ldr	r0, [pc, #528]	; (d5520 <setup+0x3b8>)
   d5310:	f7fe ffb0 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5314:	4983      	ldr	r1, [pc, #524]	; (d5524 <setup+0x3bc>)
   d5316:	4884      	ldr	r0, [pc, #528]	; (d5528 <setup+0x3c0>)
   d5318:	f7fe ffac 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d531c:	4983      	ldr	r1, [pc, #524]	; (d552c <setup+0x3c4>)
   d531e:	4884      	ldr	r0, [pc, #528]	; (d5530 <setup+0x3c8>)
   d5320:	f7fe ffa8 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5324:	4983      	ldr	r1, [pc, #524]	; (d5534 <setup+0x3cc>)
   d5326:	4884      	ldr	r0, [pc, #528]	; (d5538 <setup+0x3d0>)
   d5328:	f7fe ffa4 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d532c:	4983      	ldr	r1, [pc, #524]	; (d553c <setup+0x3d4>)
   d532e:	4884      	ldr	r0, [pc, #528]	; (d5540 <setup+0x3d8>)
   d5330:	f7fe ffa0 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5334:	4983      	ldr	r1, [pc, #524]	; (d5544 <setup+0x3dc>)
   d5336:	4884      	ldr	r0, [pc, #528]	; (d5548 <setup+0x3e0>)
   d5338:	f7fe ff9c 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d533c:	f002 feec 	bl	d8118 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d5340:	4628      	mov	r0, r5
   d5342:	f000 ff95 	bl	d6270 <HAL_EEPROM_Read>
   d5346:	2802      	cmp	r0, #2
   d5348:	d011      	beq.n	d536e <setup+0x206>
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d534a:	f002 fee5 	bl	d8118 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d534e:	497f      	ldr	r1, [pc, #508]	; (d554c <setup+0x3e4>)
   d5350:	2204      	movs	r2, #4
   d5352:	4628      	mov	r0, r5
   d5354:	f000 ff9c 	bl	d6290 <HAL_EEPROM_Put>
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d5358:	f002 fede 	bl	d8118 <_Z21__fetch_global_EEPROMv>
   d535c:	4620      	mov	r0, r4
   d535e:	2204      	movs	r2, #4
   d5360:	a908      	add	r1, sp, #32
    for (int i=1; i < 0xF0; i++) {
   d5362:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d5364:	9508      	str	r5, [sp, #32]
   d5366:	f000 ff93 	bl	d6290 <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
   d536a:	2cf0      	cmp	r4, #240	; 0xf0
   d536c:	d1f4      	bne.n	d5358 <setup+0x1f0>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d536e:	4c78      	ldr	r4, [pc, #480]	; (d5550 <setup+0x3e8>)
  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d5370:	f002 fed2 	bl	d8118 <_Z21__fetch_global_EEPROMv>
   d5374:	2234      	movs	r2, #52	; 0x34
   d5376:	4621      	mov	r1, r4
   d5378:	2001      	movs	r0, #1
   d537a:	f000 ff81 	bl	d6280 <HAL_EEPROM_Get>
  EEPROM.get(MEM_MAP::currentStatusAddr,current);
   d537e:	f002 fecb 	bl	d8118 <_Z21__fetch_global_EEPROMv>
   d5382:	4950      	ldr	r1, [pc, #320]	; (d54c4 <setup+0x35c>)
   d5384:	2224      	movs	r2, #36	; 0x24
   d5386:	2050      	movs	r0, #80	; 0x50
   d5388:	f000 ff7a 	bl	d6280 <HAL_EEPROM_Get>
  if (!sysStatus.lowPowerMode) awakeTimer.start();                      // If we are not in low power mode, will start a 30 min timer then set it
   d538c:	79a3      	ldrb	r3, [r4, #6]
   d538e:	b923      	cbnz	r3, d539a <setup+0x232>
   d5390:	4870      	ldr	r0, [pc, #448]	; (d5554 <setup+0x3ec>)
   d5392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5396:	f7fe fffb 	bl	d4390 <_ZN5Timer5startEj>
  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
   d539a:	7b23      	ldrb	r3, [r4, #12]
   d539c:	b14b      	cbz	r3, d53b2 <setup+0x24a>
    if (!tempHumidSensor.begin(0x44)) {
   d539e:	486e      	ldr	r0, [pc, #440]	; (d5558 <setup+0x3f0>)
   d53a0:	2144      	movs	r1, #68	; 0x44
   d53a2:	f000 fe23 	bl	d5fec <_ZN14Adafruit_SHT315beginEh>
   d53a6:	b920      	cbnz	r0, d53b2 <setup+0x24a>
      sysStatus.TempHumidConfig = false;                                // Set to 0x45 for alternate i2c addr - turns off the sensor if it fails to initalize
   d53a8:	7320      	strb	r0, [r4, #12]
      strcpy(StartupMessage,"Temp/Humidity Sensor Failed to Inialize - disabling");
   d53aa:	496c      	ldr	r1, [pc, #432]	; (d555c <setup+0x3f4>)
   d53ac:	4630      	mov	r0, r6
   d53ae:	f003 ff5b 	bl	d9268 <strcpy>
  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d53b2:	7c23      	ldrb	r3, [r4, #16]
   d53b4:	b133      	cbz	r3, d53c4 <setup+0x25c>
    lightSensor.begin();
   d53b6:	486a      	ldr	r0, [pc, #424]	; (d5560 <setup+0x3f8>)
   d53b8:	f000 fd89 	bl	d5ece <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d53bc:	4868      	ldr	r0, [pc, #416]	; (d5560 <setup+0x3f8>)
   d53be:	2120      	movs	r1, #32
   d53c0:	f000 fdc1 	bl	d5f46 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        int reason = RESET_REASON_NONE;
   d53c4:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d53c6:	4611      	mov	r1, r2
   d53c8:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d53ca:	9208      	str	r2, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d53cc:	f000 ff28 	bl	d6220 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d53d0:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d53d2:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d53d4:	bf02      	ittt	eq
   d53d6:	69a3      	ldreq	r3, [r4, #24]
   d53d8:	3301      	addeq	r3, #1
   d53da:	61a3      	streq	r3, [r4, #24]
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d53dc:	69a3      	ldr	r3, [r4, #24]
   d53de:	2b05      	cmp	r3, #5
   d53e0:	dd03      	ble.n	d53ea <setup+0x282>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d53e2:	2304      	movs	r3, #4
   d53e4:	61a3      	str	r3, [r4, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d53e6:	f7ff f943 	bl	d4670 <_Z14fullModemResetv>
  if(sysStatus.solenoidConfig) {
   d53ea:	7c63      	ldrb	r3, [r4, #17]
   d53ec:	b14b      	cbz	r3, d5402 <setup+0x29a>
    snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d53ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d53f0:	f003 f89a 	bl	d8528 <__aeabi_f2d>
   d53f4:	4a5b      	ldr	r2, [pc, #364]	; (d5564 <setup+0x3fc>)
   d53f6:	e9cd 0100 	strd	r0, r1, [sp]
   d53fa:	482a      	ldr	r0, [pc, #168]	; (d54a4 <setup+0x33c>)
   d53fc:	2108      	movs	r1, #8
   d53fe:	f001 fa03 	bl	d6808 <snprintf>
  sysStatus.solenoidHoldTime = 6;                                      // Set a reasonable value - based on testing 8mSec
   d5402:	2306      	movs	r3, #6
   d5404:	6163      	str	r3, [r4, #20]
  if (sysStatus.solenoidConfig && current.solenoidState) controlValve("0");   // Can't start watering until we get to the main loop
   d5406:	7c63      	ldrb	r3, [r4, #17]
   d5408:	b163      	cbz	r3, d5424 <setup+0x2bc>
   d540a:	4b2e      	ldr	r3, [pc, #184]	; (d54c4 <setup+0x35c>)
   d540c:	68db      	ldr	r3, [r3, #12]
   d540e:	b14b      	cbz	r3, d5424 <setup+0x2bc>
   d5410:	4955      	ldr	r1, [pc, #340]	; (d5568 <setup+0x400>)
   d5412:	a808      	add	r0, sp, #32
   d5414:	f002 f9ed 	bl	d77f2 <_ZN6StringC1EPKc>
   d5418:	a808      	add	r0, sp, #32
   d541a:	f7ff fe27 	bl	d506c <_Z12controlValve6String>
   d541e:	a808      	add	r0, sp, #32
   d5420:	f002 f99c 	bl	d775c <_ZN6StringD1Ev>
  sysStatus.solarPowerMode = true;                                      // Set this as a default
   d5424:	2301      	movs	r3, #1
   d5426:	7163      	strb	r3, [r4, #5]
  setPowerConfig();                                                     // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d5428:	f7ff f8bc 	bl	d45a4 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) setLowPowerMode("0");                   // Rescue mode to take out of low power mode and connect
   d542c:	2004      	movs	r0, #4
   d542e:	f002 fe49 	bl	d80c4 <digitalRead>
   d5432:	2800      	cmp	r0, #0
   d5434:	f040 809a 	bne.w	d556c <setup+0x404>
   d5438:	494b      	ldr	r1, [pc, #300]	; (d5568 <setup+0x400>)
   d543a:	a808      	add	r0, sp, #32
   d543c:	f002 f9d9 	bl	d77f2 <_ZN6StringC1EPKc>
   d5440:	a808      	add	r0, sp, #32
   d5442:	f7ff fdab 	bl	d4f9c <_Z15setLowPowerMode6String>
   d5446:	a808      	add	r0, sp, #32
   d5448:	f002 f988 	bl	d775c <_ZN6StringD1Ev>
   d544c:	e08e      	b.n	d556c <setup+0x404>
   d544e:	bf00      	nop
   d5450:	000dc054 	.word	0x000dc054
   d5454:	2003e504 	.word	0x2003e504
   d5458:	000d6241 	.word	0x000d6241
   d545c:	50000300 	.word	0x50000300
   d5460:	000d4a09 	.word	0x000d4a09
   d5464:	2003e404 	.word	0x2003e404
   d5468:	000dbcdd 	.word	0x000dbcdd
   d546c:	2003e524 	.word	0x2003e524
   d5470:	000dbce4 	.word	0x000dbce4
   d5474:	000dc094 	.word	0x000dc094
   d5478:	000dbcef 	.word	0x000dbcef
   d547c:	2003e48c 	.word	0x2003e48c
   d5480:	000dbcf7 	.word	0x000dbcf7
   d5484:	2003e47c 	.word	0x2003e47c
   d5488:	000dbd02 	.word	0x000dbd02
   d548c:	2003e52c 	.word	0x2003e52c
   d5490:	000dbdf0 	.word	0x000dbdf0
   d5494:	2003e530 	.word	0x2003e530
   d5498:	000dbe03 	.word	0x000dbe03
   d549c:	2003e534 	.word	0x2003e534
   d54a0:	000dbe14 	.word	0x000dbe14
   d54a4:	2003e560 	.word	0x2003e560
   d54a8:	000dbd11 	.word	0x000dbd11
   d54ac:	2003e550 	.word	0x2003e550
   d54b0:	000dbd23 	.word	0x000dbd23
   d54b4:	2003e4d2 	.word	0x2003e4d2
   d54b8:	000dbd2f 	.word	0x000dbd2f
   d54bc:	2003e4e2 	.word	0x2003e4e2
   d54c0:	000dbd38 	.word	0x000dbd38
   d54c4:	2003e4ac 	.word	0x2003e4ac
   d54c8:	000dbd43 	.word	0x000dbd43
   d54cc:	2003e4b0 	.word	0x2003e4b0
   d54d0:	000dbd51 	.word	0x000dbd51
   d54d4:	2003e4b4 	.word	0x2003e4b4
   d54d8:	000dbd5f 	.word	0x000dbd5f
   d54dc:	2003e53c 	.word	0x2003e53c
   d54e0:	000dbd68 	.word	0x000dbd68
   d54e4:	000d4109 	.word	0x000d4109
   d54e8:	000dbd74 	.word	0x000dbd74
   d54ec:	000d4f9d 	.word	0x000d4f9d
   d54f0:	000dbd80 	.word	0x000dbd80
   d54f4:	000d4f21 	.word	0x000d4f21
   d54f8:	000dbd8d 	.word	0x000dbd8d
   d54fc:	000d506d 	.word	0x000d506d
   d5500:	000dbcc4 	.word	0x000dbcc4
   d5504:	000d4aa5 	.word	0x000d4aa5
   d5508:	000dbd9a 	.word	0x000dbd9a
   d550c:	000d4b4d 	.word	0x000d4b4d
   d5510:	000dbda9 	.word	0x000dbda9
   d5514:	000d4bc9 	.word	0x000d4bc9
   d5518:	000dbdbb 	.word	0x000dbdbb
   d551c:	000d5649 	.word	0x000d5649
   d5520:	000dbdca 	.word	0x000dbdca
   d5524:	000d4c59 	.word	0x000d4c59
   d5528:	000dbdda 	.word	0x000dbdda
   d552c:	000d4ce1 	.word	0x000d4ce1
   d5530:	000dbded 	.word	0x000dbded
   d5534:	000d4d6d 	.word	0x000d4d6d
   d5538:	000dbe00 	.word	0x000dbe00
   d553c:	000d4df9 	.word	0x000d4df9
   d5540:	000dbe11 	.word	0x000dbe11
   d5544:	000d4e85 	.word	0x000d4e85
   d5548:	000dbe24 	.word	0x000dbe24
   d554c:	000dc09c 	.word	0x000dc09c
   d5550:	2003e50c 	.word	0x2003e50c
   d5554:	2003e460 	.word	0x2003e460
   d5558:	2003e544 	.word	0x2003e544
   d555c:	000dbe36 	.word	0x000dbe36
   d5560:	2003e4f4 	.word	0x2003e4f4
   d5564:	000dbc65 	.word	0x000dbc65
   d5568:	000dbb46 	.word	0x000dbb46
  takeMeasurements();                                                   // For the benefit of monitoring the device
   d556c:	f7ff f8fc 	bl	d4768 <_Z16takeMeasurementsv>
  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d5570:	4b2e      	ldr	r3, [pc, #184]	; (d562c <setup+0x4c4>)
   d5572:	68a2      	ldr	r2, [r4, #8]
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	429a      	cmp	r2, r3
   d5578:	dc48      	bgt.n	d560c <setup+0x4a4>
   d557a:	2308      	movs	r3, #8
   d557c:	703b      	strb	r3, [r7, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d557e:	f001 f88b 	bl	d6698 <spark_cloud_flag_connected>
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5582:	b170      	cbz	r0, d55a2 <setup+0x43a>
   d5584:	7923      	ldrb	r3, [r4, #4]
   d5586:	b163      	cbz	r3, d55a2 <setup+0x43a>
   d5588:	2300      	movs	r3, #0
   d558a:	f88d 3000 	strb.w	r3, [sp]
   d558e:	4b28      	ldr	r3, [pc, #160]	; (d5630 <setup+0x4c8>)
   d5590:	4928      	ldr	r1, [pc, #160]	; (d5634 <setup+0x4cc>)
   d5592:	781b      	ldrb	r3, [r3, #0]
   d5594:	a808      	add	r0, sp, #32
   d5596:	4632      	mov	r2, r6
   d5598:	f7fe fdef 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d559c:	a809      	add	r0, sp, #36	; 0x24
   d559e:	f7ff f9a7 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.println(StartupMessage);
   d55a2:	f002 fc53 	bl	d7e4c <_Z16_fetch_usbserialv>
   d55a6:	4631      	mov	r1, r6
   d55a8:	f002 f892 	bl	d76d0 <_ZN5Print7printlnEPKc>
  Time.zone(2.0);                                                        // set timezone to Rwanda Time
   d55ac:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d55b0:	f002 facc 	bl	d7b4c <_ZN9TimeClass4zoneEf>
        return waitConditionWhile(_condition, []{ return true; });
   d55b4:	f7ff f850 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d55b8:	f001 f86e 	bl	d6698 <spark_cloud_flag_connected>
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Local Time",Time.timeStr(),PRIVATE);
   d55bc:	b1c0      	cbz	r0, d55f0 <setup+0x488>
   d55be:	7923      	ldrb	r3, [r4, #4]
   d55c0:	b1b3      	cbz	r3, d55f0 <setup+0x488>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d55c2:	f002 fb38 	bl	d7c36 <_ZN9TimeClass3nowEv>
   d55c6:	4602      	mov	r2, r0
   d55c8:	17c3      	asrs	r3, r0, #31
   d55ca:	a808      	add	r0, sp, #32
   d55cc:	f002 fade 	bl	d7b8c <_ZN9TimeClass7timeStrEx>
   d55d0:	2300      	movs	r3, #0
   d55d2:	f88d 3000 	strb.w	r3, [sp]
   d55d6:	4b16      	ldr	r3, [pc, #88]	; (d5630 <setup+0x4c8>)
   d55d8:	9a08      	ldr	r2, [sp, #32]
   d55da:	781b      	ldrb	r3, [r3, #0]
   d55dc:	4916      	ldr	r1, [pc, #88]	; (d5638 <setup+0x4d0>)
   d55de:	a802      	add	r0, sp, #8
   d55e0:	f7fe fdcb 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d55e4:	a803      	add	r0, sp, #12
   d55e6:	f7ff f983 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55ea:	a808      	add	r0, sp, #32
   d55ec:	f002 f8b6 	bl	d775c <_ZN6StringD1Ev>
  systemStatusWriteNeeded = true;                                       // likely something has changed
   d55f0:	4b12      	ldr	r3, [pc, #72]	; (d563c <setup+0x4d4>)
   d55f2:	2201      	movs	r2, #1
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d55f4:	a804      	add	r0, sp, #16
  systemStatusWriteNeeded = true;                                       // likely something has changed
   d55f6:	701a      	strb	r2, [r3, #0]
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d55f8:	f002 f8b0 	bl	d775c <_ZN6StringD1Ev>
}
   d55fc:	b03d      	add	sp, #244	; 0xf4
   d55fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*p_pin < P0_PIN_NUM)
   d5600:	2d1f      	cmp	r5, #31
   d5602:	f73f ade1 	bgt.w	d51c8 <setup+0x60>
        return NRF_P0;
   d5606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   d560a:	e5e0      	b.n	d51ce <setup+0x66>
  else if(!connectToParticle()) {
   d560c:	f7fe ff2c 	bl	d4468 <_Z17connectToParticlev>
   d5610:	2800      	cmp	r0, #0
   d5612:	d1b4      	bne.n	d557e <setup+0x416>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d5614:	2301      	movs	r3, #1
   d5616:	703b      	strb	r3, [r7, #0]
   d5618:	f000 fe1a 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d561c:	4b08      	ldr	r3, [pc, #32]	; (d5640 <setup+0x4d8>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d561e:	4909      	ldr	r1, [pc, #36]	; (d5644 <setup+0x4dc>)
    resetTimeStamp = millis();
   d5620:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5622:	4630      	mov	r0, r6
   d5624:	f003 fe20 	bl	d9268 <strcpy>
   d5628:	e7a9      	b.n	d557e <setup+0x416>
   d562a:	bf00      	nop
   d562c:	2003e134 	.word	0x2003e134
   d5630:	2003e454 	.word	0x2003e454
   d5634:	000dbe7c 	.word	0x000dbe7c
   d5638:	000dbe84 	.word	0x000dbe84
   d563c:	2003e540 	.word	0x2003e540
   d5640:	2003e500 	.word	0x2003e500
   d5644:	000dbe6a 	.word	0x000dbe6a

000d5648 <_Z18setSolenoidPresent6String>:
{
   d5648:	b530      	push	{r4, r5, lr}
   d564a:	b087      	sub	sp, #28
  controlValve("0");                                            // Make sure it is turned off
   d564c:	491b      	ldr	r1, [pc, #108]	; (d56bc <_Z18setSolenoidPresent6String+0x74>)
{
   d564e:	4604      	mov	r4, r0
  controlValve("0");                                            // Make sure it is turned off
   d5650:	a802      	add	r0, sp, #8
   d5652:	f002 f8ce 	bl	d77f2 <_ZN6StringC1EPKc>
   d5656:	a802      	add	r0, sp, #8
   d5658:	f7ff fd08 	bl	d506c <_Z12controlValve6String>
   d565c:	a802      	add	r0, sp, #8
   d565e:	f002 f87d 	bl	d775c <_ZN6StringD1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5662:	4917      	ldr	r1, [pc, #92]	; (d56c0 <_Z18setSolenoidPresent6String+0x78>)
   d5664:	4620      	mov	r0, r4
   d5666:	f002 f8f2 	bl	d784e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d566a:	4605      	mov	r5, r0
   d566c:	b1a0      	cbz	r0, d5698 <_Z18setSolenoidPresent6String+0x50>
    sysStatus.solenoidConfig = 1;
   d566e:	4b15      	ldr	r3, [pc, #84]	; (d56c4 <_Z18setSolenoidPresent6String+0x7c>)
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d5670:	4a15      	ldr	r2, [pc, #84]	; (d56c8 <_Z18setSolenoidPresent6String+0x80>)
    sysStatus.solenoidConfig = 1;
   d5672:	2401      	movs	r4, #1
   d5674:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d5676:	4b15      	ldr	r3, [pc, #84]	; (d56cc <_Z18setSolenoidPresent6String+0x84>)
   d5678:	701c      	strb	r4, [r3, #0]
   d567a:	2300      	movs	r3, #0
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d567c:	f88d 3000 	strb.w	r3, [sp]
   d5680:	4b13      	ldr	r3, [pc, #76]	; (d56d0 <_Z18setSolenoidPresent6String+0x88>)
   d5682:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d5684:	4913      	ldr	r1, [pc, #76]	; (d56d4 <_Z18setSolenoidPresent6String+0x8c>)
   d5686:	a802      	add	r0, sp, #8
   d5688:	f7fe fd77 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d568c:	a803      	add	r0, sp, #12
   d568e:	f7ff f92f 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5692:	4620      	mov	r0, r4
}
   d5694:	b007      	add	sp, #28
   d5696:	bd30      	pop	{r4, r5, pc}
   d5698:	4908      	ldr	r1, [pc, #32]	; (d56bc <_Z18setSolenoidPresent6String+0x74>)
   d569a:	4620      	mov	r0, r4
   d569c:	f002 f8d7 	bl	d784e <_ZNK6String6equalsEPKc>
  else if (command == "0") {
   d56a0:	2800      	cmp	r0, #0
   d56a2:	d0f7      	beq.n	d5694 <_Z18setSolenoidPresent6String+0x4c>
    sysStatus.solenoidConfig = 0;
   d56a4:	4b07      	ldr	r3, [pc, #28]	; (d56c4 <_Z18setSolenoidPresent6String+0x7c>)
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d56a6:	4a0c      	ldr	r2, [pc, #48]	; (d56d8 <_Z18setSolenoidPresent6String+0x90>)
    sysStatus.solenoidConfig = 0;
   d56a8:	745d      	strb	r5, [r3, #17]
    systemStatusWriteNeeded = true;
   d56aa:	4b08      	ldr	r3, [pc, #32]	; (d56cc <_Z18setSolenoidPresent6String+0x84>)
   d56ac:	2401      	movs	r4, #1
   d56ae:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d56b0:	4b07      	ldr	r3, [pc, #28]	; (d56d0 <_Z18setSolenoidPresent6String+0x88>)
   d56b2:	f88d 5000 	strb.w	r5, [sp]
   d56b6:	781b      	ldrb	r3, [r3, #0]
   d56b8:	e7e4      	b.n	d5684 <_Z18setSolenoidPresent6String+0x3c>
   d56ba:	bf00      	nop
   d56bc:	000dbb46 	.word	0x000dbb46
   d56c0:	000db978 	.word	0x000db978
   d56c4:	2003e50c 	.word	0x2003e50c
   d56c8:	000dbe92 	.word	0x000dbe92
   d56cc:	2003e540 	.word	0x2003e540
   d56d0:	2003e454 	.word	0x2003e454
   d56d4:	000dbb58 	.word	0x000dbb58
   d56d8:	000dbe8f 	.word	0x000dbe8f

000d56dc <_Z22publishStateTransitionv>:
{
   d56dc:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d56de:	4d13      	ldr	r5, [pc, #76]	; (d572c <_Z22publishStateTransitionv+0x50>)
   d56e0:	4c13      	ldr	r4, [pc, #76]	; (d5730 <_Z22publishStateTransitionv+0x54>)
   d56e2:	4914      	ldr	r1, [pc, #80]	; (d5734 <_Z22publishStateTransitionv+0x58>)
   d56e4:	782a      	ldrb	r2, [r5, #0]
   d56e6:	7820      	ldrb	r0, [r4, #0]
{
   d56e8:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d56ea:	230e      	movs	r3, #14
   d56ec:	fb03 1202 	mla	r2, r3, r2, r1
   d56f0:	9200      	str	r2, [sp, #0]
   d56f2:	fb03 1300 	mla	r3, r3, r0, r1
   d56f6:	4a10      	ldr	r2, [pc, #64]	; (d5738 <_Z22publishStateTransitionv+0x5c>)
   d56f8:	2128      	movs	r1, #40	; 0x28
   d56fa:	a804      	add	r0, sp, #16
   d56fc:	f001 f884 	bl	d6808 <snprintf>
  oldState = state;
   d5700:	782b      	ldrb	r3, [r5, #0]
   d5702:	7023      	strb	r3, [r4, #0]
   d5704:	f000 ffc8 	bl	d6698 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d5708:	b170      	cbz	r0, d5728 <_Z22publishStateTransitionv+0x4c>
   d570a:	f7fe ffa5 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d570e:	2300      	movs	r3, #0
   d5710:	f88d 3000 	strb.w	r3, [sp]
   d5714:	4b09      	ldr	r3, [pc, #36]	; (d573c <_Z22publishStateTransitionv+0x60>)
   d5716:	490a      	ldr	r1, [pc, #40]	; (d5740 <_Z22publishStateTransitionv+0x64>)
   d5718:	781b      	ldrb	r3, [r3, #0]
   d571a:	a802      	add	r0, sp, #8
   d571c:	aa04      	add	r2, sp, #16
   d571e:	f7fe fd2c 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5722:	a803      	add	r0, sp, #12
   d5724:	f7ff f8e4 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5728:	b00f      	add	sp, #60	; 0x3c
   d572a:	bd30      	pop	{r4, r5, pc}
   d572c:	2003e504 	.word	0x2003e504
   d5730:	2003e4fc 	.word	0x2003e4fc
   d5734:	2003e138 	.word	0x2003e138
   d5738:	000dbea4 	.word	0x000dbea4
   d573c:	2003e454 	.word	0x2003e454
   d5740:	000dbeb2 	.word	0x000dbeb2

000d5744 <loop>:
{
   d5744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(state) {
   d5748:	4ca2      	ldr	r4, [pc, #648]	; (d59d4 <loop+0x290>)
   d574a:	7823      	ldrb	r3, [r4, #0]
   d574c:	3b01      	subs	r3, #1
{
   d574e:	b08a      	sub	sp, #40	; 0x28
   d5750:	2b07      	cmp	r3, #7
   d5752:	d874      	bhi.n	d583e <loop+0xfa>
   d5754:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5758:	00080271 	.word	0x00080271
   d575c:	007b004d 	.word	0x007b004d
   d5760:	016e0117 	.word	0x016e0117
   d5764:	022101a0 	.word	0x022101a0
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5768:	4d9b      	ldr	r5, [pc, #620]	; (d59d8 <loop+0x294>)
   d576a:	792b      	ldrb	r3, [r5, #4]
   d576c:	b12b      	cbz	r3, d577a <loop+0x36>
   d576e:	4b9b      	ldr	r3, [pc, #620]	; (d59dc <loop+0x298>)
   d5770:	781b      	ldrb	r3, [r3, #0]
   d5772:	2b02      	cmp	r3, #2
   d5774:	d001      	beq.n	d577a <loop+0x36>
   d5776:	f7ff ffb1 	bl	d56dc <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d577a:	4e99      	ldr	r6, [pc, #612]	; (d59e0 <loop+0x29c>)
   d577c:	7833      	ldrb	r3, [r6, #0]
   d577e:	b143      	cbz	r3, d5792 <loop+0x4e>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5780:	f002 fcca 	bl	d8118 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5784:	4994      	ldr	r1, [pc, #592]	; (d59d8 <loop+0x294>)
   d5786:	2234      	movs	r2, #52	; 0x34
   d5788:	2001      	movs	r0, #1
   d578a:	f000 fd81 	bl	d6290 <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d578e:	2300      	movs	r3, #0
   d5790:	7033      	strb	r3, [r6, #0]
    if (currentStatusWriteNeeded) {
   d5792:	4e94      	ldr	r6, [pc, #592]	; (d59e4 <loop+0x2a0>)
   d5794:	7833      	ldrb	r3, [r6, #0]
   d5796:	b143      	cbz	r3, d57aa <loop+0x66>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d5798:	f002 fcbe 	bl	d8118 <_Z21__fetch_global_EEPROMv>
   d579c:	4992      	ldr	r1, [pc, #584]	; (d59e8 <loop+0x2a4>)
   d579e:	2224      	movs	r2, #36	; 0x24
   d57a0:	2050      	movs	r0, #80	; 0x50
   d57a2:	f000 fd75 	bl	d6290 <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d57a6:	2300      	movs	r3, #0
   d57a8:	7033      	strb	r3, [r6, #0]
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp > stayAwake) && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d57aa:	79ab      	ldrb	r3, [r5, #6]
   d57ac:	b163      	cbz	r3, d57c8 <loop+0x84>
   d57ae:	f000 fd4f 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
   d57b2:	4b8e      	ldr	r3, [pc, #568]	; (d59ec <loop+0x2a8>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	1ac0      	subs	r0, r0, r3
   d57b8:	4b8d      	ldr	r3, [pc, #564]	; (d59f0 <loop+0x2ac>)
   d57ba:	4298      	cmp	r0, r3
   d57bc:	d904      	bls.n	d57c8 <loop+0x84>
   d57be:	4b8a      	ldr	r3, [pc, #552]	; (d59e8 <loop+0x2a4>)
   d57c0:	68db      	ldr	r3, [r3, #12]
   d57c2:	b90b      	cbnz	r3, d57c8 <loop+0x84>
   d57c4:	2307      	movs	r3, #7
   d57c6:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d57c8:	f002 fa46 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d57cc:	4b89      	ldr	r3, [pc, #548]	; (d59f4 <loop+0x2b0>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d57ce:	68aa      	ldr	r2, [r5, #8]
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d57d0:	781b      	ldrb	r3, [r3, #0]
   d57d2:	4298      	cmp	r0, r3
   d57d4:	bf1c      	itt	ne
   d57d6:	2303      	movne	r3, #3
   d57d8:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d57da:	4b87      	ldr	r3, [pc, #540]	; (d59f8 <loop+0x2b4>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	429a      	cmp	r2, r3
   d57e0:	bfdc      	itt	le
   d57e2:	2308      	movle	r3, #8
   d57e4:	7023      	strble	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                 // Most important - turn off water when done!
   d57e6:	4b85      	ldr	r3, [pc, #532]	; (d59fc <loop+0x2b8>)
   d57e8:	781b      	ldrb	r3, [r3, #0]
   d57ea:	b343      	cbz	r3, d583e <loop+0xfa>
   d57ec:	2304      	movs	r3, #4
    else state = REPORTING_STATE;
   d57ee:	7023      	strb	r3, [r4, #0]
   d57f0:	e025      	b.n	d583e <loop+0xfa>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d57f2:	4d79      	ldr	r5, [pc, #484]	; (d59d8 <loop+0x294>)
   d57f4:	792b      	ldrb	r3, [r5, #4]
   d57f6:	b12b      	cbz	r3, d5804 <loop+0xc0>
   d57f8:	4b78      	ldr	r3, [pc, #480]	; (d59dc <loop+0x298>)
   d57fa:	781b      	ldrb	r3, [r3, #0]
   d57fc:	2b03      	cmp	r3, #3
   d57fe:	d001      	beq.n	d5804 <loop+0xc0>
   d5800:	f7ff ff6c 	bl	d56dc <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d5804:	f7fe ffb0 	bl	d4768 <_Z16takeMeasurementsv>
   d5808:	4606      	mov	r6, r0
   d580a:	b9d8      	cbnz	r0, d5844 <loop+0x100>
      state = ERROR_STATE;
   d580c:	2301      	movs	r3, #1
   d580e:	7023      	strb	r3, [r4, #0]
   d5810:	f000 fd1e 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5814:	4b7a      	ldr	r3, [pc, #488]	; (d5a00 <loop+0x2bc>)
   d5816:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d5818:	792b      	ldrb	r3, [r5, #4]
   d581a:	b183      	cbz	r3, d583e <loop+0xfa>
   d581c:	f000 ff3c 	bl	d6698 <spark_cloud_flag_connected>
   d5820:	b168      	cbz	r0, d583e <loop+0xfa>
   d5822:	f7fe ff19 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d5826:	4b77      	ldr	r3, [pc, #476]	; (d5a04 <loop+0x2c0>)
   d5828:	f88d 6000 	strb.w	r6, [sp]
   d582c:	a806      	add	r0, sp, #24
   d582e:	781b      	ldrb	r3, [r3, #0]
   d5830:	4a75      	ldr	r2, [pc, #468]	; (d5a08 <loop+0x2c4>)
   d5832:	4976      	ldr	r1, [pc, #472]	; (d5a0c <loop+0x2c8>)
   d5834:	f7fe fca1 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5838:	a807      	add	r0, sp, #28
   d583a:	f7ff f859 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d583e:	b00a      	add	sp, #40	; 0x28
   d5840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d5844:	7c6b      	ldrb	r3, [r5, #17]
   d5846:	2b00      	cmp	r3, #0
   d5848:	d1d0      	bne.n	d57ec <loop+0xa8>
    else state = REPORTING_STATE;
   d584a:	2305      	movs	r3, #5
   d584c:	e7cf      	b.n	d57ee <loop+0xaa>
    if (wateringTimerFlag) {                                              // Already watering - time to turn off the tap
   d584e:	4d6b      	ldr	r5, [pc, #428]	; (d59fc <loop+0x2b8>)
   d5850:	4e6c      	ldr	r6, [pc, #432]	; (d5a04 <loop+0x2c0>)
   d5852:	782b      	ldrb	r3, [r5, #0]
   d5854:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   d5858:	b1cb      	cbz	r3, d588e <loop+0x14a>
   d585a:	2700      	movs	r7, #0
   d585c:	f7fe fefc 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Watering","Done with watering cycle",PRIVATE);
   d5860:	f88d 7000 	strb.w	r7, [sp]
   d5864:	7833      	ldrb	r3, [r6, #0]
   d5866:	4a6a      	ldr	r2, [pc, #424]	; (d5a10 <loop+0x2cc>)
   d5868:	496a      	ldr	r1, [pc, #424]	; (d5a14 <loop+0x2d0>)
   d586a:	a806      	add	r0, sp, #24
   d586c:	f7fe fc85 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5870:	a807      	add	r0, sp, #28
   d5872:	f7ff f83d 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("0");
   d5876:	4968      	ldr	r1, [pc, #416]	; (d5a18 <loop+0x2d4>)
   d5878:	a806      	add	r0, sp, #24
   d587a:	f001 ffba 	bl	d77f2 <_ZN6StringC1EPKc>
   d587e:	a806      	add	r0, sp, #24
   d5880:	f7ff fbf4 	bl	d506c <_Z12controlValve6String>
   d5884:	a806      	add	r0, sp, #24
   d5886:	f001 ff69 	bl	d775c <_ZN6StringD1Ev>
      wateringTimerFlag = false;
   d588a:	702f      	strb	r7, [r5, #0]
   d588c:	e7dd      	b.n	d584a <loop+0x106>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d588e:	f002 f9e3 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d5892:	2808      	cmp	r0, #8
   d5894:	4d54      	ldr	r5, [pc, #336]	; (d59e8 <loop+0x2a4>)
   d5896:	d10b      	bne.n	d58b0 <loop+0x16c>
    else if (sysStatus.stateOfCharge < 50) {
   d5898:	4f4f      	ldr	r7, [pc, #316]	; (d59d8 <loop+0x294>)
   d589a:	68bb      	ldr	r3, [r7, #8]
   d589c:	2b31      	cmp	r3, #49	; 0x31
   d589e:	dc2a      	bgt.n	d58f6 <loop+0x1b2>
   d58a0:	f7fe feda 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d58a4:	2300      	movs	r3, #0
      Particle.publish("Watering","Watering Needed but battery too low",PRIVATE);
   d58a6:	f88d 3000 	strb.w	r3, [sp]
   d58aa:	7833      	ldrb	r3, [r6, #0]
   d58ac:	4a5b      	ldr	r2, [pc, #364]	; (d5a1c <loop+0x2d8>)
   d58ae:	e00d      	b.n	d58cc <loop+0x188>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d58b0:	f002 f9d2 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d58b4:	280c      	cmp	r0, #12
   d58b6:	d0ef      	beq.n	d5898 <loop+0x154>
   d58b8:	f002 f9ce 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d58bc:	2811      	cmp	r0, #17
   d58be:	d0eb      	beq.n	d5898 <loop+0x154>
   d58c0:	f7fe feca 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Watering","Not time to water",PRIVATE);
   d58c4:	f88d 7000 	strb.w	r7, [sp]
   d58c8:	7833      	ldrb	r3, [r6, #0]
   d58ca:	4a55      	ldr	r2, [pc, #340]	; (d5a20 <loop+0x2dc>)
      Particle.publish("Watering","Watering not needed",PRIVATE);
   d58cc:	4951      	ldr	r1, [pc, #324]	; (d5a14 <loop+0x2d0>)
   d58ce:	a806      	add	r0, sp, #24
   d58d0:	f7fe fc53 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d58d4:	a807      	add	r0, sp, #28
   d58d6:	f7ff f80b 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      if(current.solenoidState) controlValve("0");
   d58da:	68eb      	ldr	r3, [r5, #12]
   d58dc:	2b00      	cmp	r3, #0
   d58de:	d0b4      	beq.n	d584a <loop+0x106>
   d58e0:	494d      	ldr	r1, [pc, #308]	; (d5a18 <loop+0x2d4>)
   d58e2:	a806      	add	r0, sp, #24
   d58e4:	f001 ff85 	bl	d77f2 <_ZN6StringC1EPKc>
   d58e8:	a806      	add	r0, sp, #24
   d58ea:	f7ff fbbf 	bl	d506c <_Z12controlValve6String>
   d58ee:	a806      	add	r0, sp, #24
   d58f0:	f001 ff34 	bl	d775c <_ZN6StringD1Ev>
   d58f4:	e7a9      	b.n	d584a <loop+0x106>
    else if (current.soilMoisture1 < sysStatus.wateringThresholdPct && !current.solenoidState) {  // Water if dry and if we are not already watering
   d58f6:	edd5 7a00 	vldr	s15, [r5]
   d58fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   d58fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5902:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d590a:	d534      	bpl.n	d5976 <loop+0x232>
   d590c:	f8d5 800c 	ldr.w	r8, [r5, #12]
   d5910:	f1b8 0f00 	cmp.w	r8, #0
   d5914:	d12f      	bne.n	d5976 <loop+0x232>
   d5916:	f7fe fe9f 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Watering","Watering needed - starting watering cycle",PRIVATE);
   d591a:	f88d 8000 	strb.w	r8, [sp]
   d591e:	7833      	ldrb	r3, [r6, #0]
   d5920:	4a40      	ldr	r2, [pc, #256]	; (d5a24 <loop+0x2e0>)
   d5922:	493c      	ldr	r1, [pc, #240]	; (d5a14 <loop+0x2d0>)
   d5924:	a806      	add	r0, sp, #24
   d5926:	f7fe fc28 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d592a:	a807      	add	r0, sp, #28
   d592c:	f7fe ffe0 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("1");
   d5930:	493d      	ldr	r1, [pc, #244]	; (d5a28 <loop+0x2e4>)
   d5932:	a806      	add	r0, sp, #24
   d5934:	f001 ff5d 	bl	d77f2 <_ZN6StringC1EPKc>
   d5938:	a806      	add	r0, sp, #24
   d593a:	f7ff fb97 	bl	d506c <_Z12controlValve6String>
   d593e:	a806      	add	r0, sp, #24
   d5940:	f001 ff0c 	bl	d775c <_ZN6StringD1Ev>
      if (Time.hour() == 8) wateringTimer.changePeriod(sysStatus.wateringDurationMorning * 60 * 1000); // Start the timer to keep track of the watering time
   d5944:	f002 f988 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d5948:	2808      	cmp	r0, #8
   d594a:	d109      	bne.n	d5960 <loop+0x21c>
   d594c:	6a3b      	ldr	r3, [r7, #32]
   d594e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5952:	f64e 2160 	movw	r1, #60000	; 0xea60
      else wateringTimer.changePeriod(sysStatus.wateringDurationEvening * 60 * 1000);                                                
   d5956:	4359      	muls	r1, r3
   d5958:	4834      	ldr	r0, [pc, #208]	; (d5a2c <loop+0x2e8>)
   d595a:	f7fe fcc1 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d595e:	e774      	b.n	d584a <loop+0x106>
      else if (Time.hour() == 12 ) wateringTimer.changePeriod(sysStatus.wateringDurationLunch * 60 * 1000);
   d5960:	f002 f97a 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d5964:	280c      	cmp	r0, #12
   d5966:	bf0c      	ite	eq
   d5968:	6a79      	ldreq	r1, [r7, #36]	; 0x24
      else wateringTimer.changePeriod(sysStatus.wateringDurationEvening * 60 * 1000);                                                
   d596a:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
   d596c:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5970:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5974:	e7ef      	b.n	d5956 <loop+0x212>
   d5976:	f7fe fe6f 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d597a:	2300      	movs	r3, #0
      Particle.publish("Watering","Watering not needed",PRIVATE);
   d597c:	f88d 3000 	strb.w	r3, [sp]
   d5980:	7833      	ldrb	r3, [r6, #0]
   d5982:	4a2b      	ldr	r2, [pc, #172]	; (d5a30 <loop+0x2ec>)
   d5984:	e7a2      	b.n	d58cc <loop+0x188>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5986:	4d14      	ldr	r5, [pc, #80]	; (d59d8 <loop+0x294>)
   d5988:	792b      	ldrb	r3, [r5, #4]
   d598a:	b12b      	cbz	r3, d5998 <loop+0x254>
   d598c:	4b13      	ldr	r3, [pc, #76]	; (d59dc <loop+0x298>)
   d598e:	781b      	ldrb	r3, [r3, #0]
   d5990:	2b05      	cmp	r3, #5
   d5992:	d001      	beq.n	d5998 <loop+0x254>
   d5994:	f7ff fea2 	bl	d56dc <_Z22publishStateTransitionv>
   d5998:	f000 fe7e 	bl	d6698 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d599c:	b190      	cbz	r0, d59c4 <loop+0x280>
      if (Time.hour() == 0) {
   d599e:	f002 f95b 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d59a2:	4606      	mov	r6, r0
   d59a4:	b950      	cbnz	r0, d59bc <loop+0x278>
        sysStatus.verboseMode = false;                                    // Turn off Verbose mode
   d59a6:	7128      	strb	r0, [r5, #4]
   d59a8:	f000 fe76 	bl	d6698 <spark_cloud_flag_connected>
        if (!connected()) {
   d59ac:	b110      	cbz	r0, d59b4 <loop+0x270>
        return spark_sync_time(NULL);
   d59ae:	4630      	mov	r0, r6
   d59b0:	f000 fe92 	bl	d66d8 <spark_sync_time>
        current.alertCount = sysStatus.resetCount = 0;                    // Reset these each day as well
   d59b4:	4a0c      	ldr	r2, [pc, #48]	; (d59e8 <loop+0x2a4>)
   d59b6:	2300      	movs	r3, #0
   d59b8:	61ab      	str	r3, [r5, #24]
   d59ba:	6213      	str	r3, [r2, #32]
      sendEvent();                                                        // Send data to Ubidots
   d59bc:	f7fe ffae 	bl	d491c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d59c0:	2306      	movs	r3, #6
   d59c2:	e714      	b.n	d57ee <loop+0xaa>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d59c4:	f000 fe68 	bl	d6698 <spark_cloud_flag_connected>
    else if (!Particle.connected()) state = ERROR_STATE;                  // In case we timed out on our 1st attempt to connect
   d59c8:	2800      	cmp	r0, #0
   d59ca:	f47f af38 	bne.w	d583e <loop+0xfa>
   d59ce:	2301      	movs	r3, #1
   d59d0:	e70d      	b.n	d57ee <loop+0xaa>
   d59d2:	bf00      	nop
   d59d4:	2003e504 	.word	0x2003e504
   d59d8:	2003e50c 	.word	0x2003e50c
   d59dc:	2003e4fc 	.word	0x2003e4fc
   d59e0:	2003e540 	.word	0x2003e540
   d59e4:	2003e4d1 	.word	0x2003e4d1
   d59e8:	2003e4ac 	.word	0x2003e4ac
   d59ec:	2003e508 	.word	0x2003e508
   d59f0:	00015f90 	.word	0x00015f90
   d59f4:	2003e4d0 	.word	0x2003e4d0
   d59f8:	2003e134 	.word	0x2003e134
   d59fc:	2003e584 	.word	0x2003e584
   d5a00:	2003e500 	.word	0x2003e500
   d5a04:	2003e454 	.word	0x2003e454
   d5a08:	000dbec3 	.word	0x000dbec3
   d5a0c:	000dbedd 	.word	0x000dbedd
   d5a10:	000dbee3 	.word	0x000dbee3
   d5a14:	000dbcc4 	.word	0x000dbcc4
   d5a18:	000dbb46 	.word	0x000dbb46
   d5a1c:	000dbf0e 	.word	0x000dbf0e
   d5a20:	000dbefc 	.word	0x000dbefc
   d5a24:	000dbf32 	.word	0x000dbf32
   d5a28:	000db978 	.word	0x000db978
   d5a2c:	2003e568 	.word	0x2003e568
   d5a30:	000dbf5c 	.word	0x000dbf5c
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5a34:	4baa      	ldr	r3, [pc, #680]	; (d5ce0 <loop+0x59c>)
   d5a36:	791b      	ldrb	r3, [r3, #4]
   d5a38:	b12b      	cbz	r3, d5a46 <loop+0x302>
   d5a3a:	4baa      	ldr	r3, [pc, #680]	; (d5ce4 <loop+0x5a0>)
   d5a3c:	781b      	ldrb	r3, [r3, #0]
   d5a3e:	2b06      	cmp	r3, #6
   d5a40:	d001      	beq.n	d5a46 <loop+0x302>
   d5a42:	f7ff fe4b 	bl	d56dc <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d5a46:	4ba8      	ldr	r3, [pc, #672]	; (d5ce8 <loop+0x5a4>)
   d5a48:	781b      	ldrb	r3, [r3, #0]
   d5a4a:	b92b      	cbnz	r3, d5a58 <loop+0x314>
   d5a4c:	f000 fc00 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5a50:	4ba6      	ldr	r3, [pc, #664]	; (d5cec <loop+0x5a8>)
   d5a52:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d5a54:	2302      	movs	r3, #2
   d5a56:	e6ca      	b.n	d57ee <loop+0xaa>
   d5a58:	f000 fbfa 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5a5c:	4ba4      	ldr	r3, [pc, #656]	; (d5cf0 <loop+0x5ac>)
   d5a5e:	681b      	ldr	r3, [r3, #0]
   d5a60:	1ac0      	subs	r0, r0, r3
   d5a62:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5a66:	4298      	cmp	r0, r3
   d5a68:	f67f aee9 	bls.w	d583e <loop+0xfa>
   d5a6c:	f000 fbf0 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5a70:	4ba0      	ldr	r3, [pc, #640]	; (d5cf4 <loop+0x5b0>)
   d5a72:	6018      	str	r0, [r3, #0]
   d5a74:	f000 fe10 	bl	d6698 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5a78:	2800      	cmp	r0, #0
   d5a7a:	d0a8      	beq.n	d59ce <loop+0x28a>
   d5a7c:	2300      	movs	r3, #0
   d5a7e:	f88d 3000 	strb.w	r3, [sp]
   d5a82:	4b9d      	ldr	r3, [pc, #628]	; (d5cf8 <loop+0x5b4>)
   d5a84:	4a9d      	ldr	r2, [pc, #628]	; (d5cfc <loop+0x5b8>)
   d5a86:	781b      	ldrb	r3, [r3, #0]
   d5a88:	499d      	ldr	r1, [pc, #628]	; (d5d00 <loop+0x5bc>)
   d5a8a:	a806      	add	r0, sp, #24
   d5a8c:	f7fe fb75 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5a90:	a807      	add	r0, sp, #28
   d5a92:	f7fe ff2d 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a96:	e79a      	b.n	d59ce <loop+0x28a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5a98:	4d91      	ldr	r5, [pc, #580]	; (d5ce0 <loop+0x59c>)
   d5a9a:	792a      	ldrb	r2, [r5, #4]
   d5a9c:	b12a      	cbz	r2, d5aaa <loop+0x366>
   d5a9e:	4b91      	ldr	r3, [pc, #580]	; (d5ce4 <loop+0x5a0>)
   d5aa0:	781b      	ldrb	r3, [r3, #0]
   d5aa2:	2b07      	cmp	r3, #7
   d5aa4:	d001      	beq.n	d5aaa <loop+0x366>
   d5aa6:	f7ff fe19 	bl	d56dc <_Z22publishStateTransitionv>
    if (current.pressure > 1 && !pressureDetectedFlag) {               // If we detect pressure we will report again - once!
   d5aaa:	4b96      	ldr	r3, [pc, #600]	; (d5d04 <loop+0x5c0>)
   d5aac:	4e96      	ldr	r6, [pc, #600]	; (d5d08 <loop+0x5c4>)
   d5aae:	689b      	ldr	r3, [r3, #8]
   d5ab0:	2b01      	cmp	r3, #1
   d5ab2:	dd05      	ble.n	d5ac0 <loop+0x37c>
   d5ab4:	7833      	ldrb	r3, [r6, #0]
   d5ab6:	b91b      	cbnz	r3, d5ac0 <loop+0x37c>
      pressureDetectedFlag = true;
   d5ab8:	2301      	movs	r3, #1
   d5aba:	7033      	strb	r3, [r6, #0]
      state = MEASURING_STATE;
   d5abc:	2303      	movs	r3, #3
   d5abe:	e696      	b.n	d57ee <loop+0xaa>
   d5ac0:	f000 fdea 	bl	d6698 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5ac4:	b1b0      	cbz	r0, d5af4 <loop+0x3b0>
      if (sysStatus.verboseMode) {
   d5ac6:	792b      	ldrb	r3, [r5, #4]
   d5ac8:	b173      	cbz	r3, d5ae8 <loop+0x3a4>
   d5aca:	f7fe fdc5 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Taking a Nap",PRIVATE);
   d5ace:	2300      	movs	r3, #0
   d5ad0:	f88d 3000 	strb.w	r3, [sp]
   d5ad4:	4b88      	ldr	r3, [pc, #544]	; (d5cf8 <loop+0x5b4>)
   d5ad6:	4a8d      	ldr	r2, [pc, #564]	; (d5d0c <loop+0x5c8>)
   d5ad8:	781b      	ldrb	r3, [r3, #0]
   d5ada:	498d      	ldr	r1, [pc, #564]	; (d5d10 <loop+0x5cc>)
   d5adc:	a806      	add	r0, sp, #24
   d5ade:	f7fe fb4c 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5ae2:	a807      	add	r0, sp, #28
   d5ae4:	f7fe ff04 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(1000);                                                      // Time to send last update
   d5ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5aec:	f000 feb8 	bl	d6860 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d5af0:	f7fe fd00 	bl	d44f4 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5af4:	2100      	movs	r1, #0
   d5af6:	2007      	movs	r0, #7
   d5af8:	f002 facb 	bl	d8092 <digitalWrite>
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d5afc:	2100      	movs	r1, #0
   d5afe:	200e      	movs	r0, #14
   d5b00:	f002 fac7 	bl	d8092 <digitalWrite>
    pressureDetectedFlag = false;
   d5b04:	2300      	movs	r3, #0
   d5b06:	7033      	strb	r3, [r6, #0]
    secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5b08:	f002 f8b2 	bl	d7c70 <_ZN9TimeClass6minuteEv>
        if (valid_) {
   d5b0c:	4b81      	ldr	r3, [pc, #516]	; (d5d14 <loop+0x5d0>)
   d5b0e:	7d1a      	ldrb	r2, [r3, #20]
   d5b10:	f1c0 053c 	rsb	r5, r0, #60	; 0x3c
   d5b14:	b10a      	cbz	r2, d5b1a <loop+0x3d6>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5b16:	2201      	movs	r2, #1
   d5b18:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5b1a:	2200      	movs	r2, #0
   d5b1c:	2104      	movs	r1, #4
   d5b1e:	487d      	ldr	r0, [pc, #500]	; (d5d14 <loop+0x5d0>)
   d5b20:	f7fe fb4a 	bl	d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5b24:	f64e 2160 	movw	r1, #60000	; 0xea60
   d5b28:	4369      	muls	r1, r5
   d5b2a:	f7fe fb79 	bl	d4220 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5b2e:	4979      	ldr	r1, [pc, #484]	; (d5d14 <loop+0x5d0>)
   d5b30:	a803      	add	r0, sp, #12
   d5b32:	f001 ff1f 	bl	d7974 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5b36:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5b38:	b17b      	cbz	r3, d5b5a <loop+0x416>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5b3a:	889a      	ldrh	r2, [r3, #4]
   d5b3c:	2a01      	cmp	r2, #1
   d5b3e:	d10c      	bne.n	d5b5a <loop+0x416>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d5b40:	899b      	ldrh	r3, [r3, #12]
   d5b42:	2b04      	cmp	r3, #4
   d5b44:	d109      	bne.n	d5b5a <loop+0x416>
   d5b46:	4974      	ldr	r1, [pc, #464]	; (d5d18 <loop+0x5d4>)
   d5b48:	a806      	add	r0, sp, #24
   d5b4a:	f001 fe52 	bl	d77f2 <_ZN6StringC1EPKc>
   d5b4e:	a806      	add	r0, sp, #24
   d5b50:	f7ff fa24 	bl	d4f9c <_Z15setLowPowerMode6String>
   d5b54:	a806      	add	r0, sp, #24
   d5b56:	f001 fe01 	bl	d775c <_ZN6StringD1Ev>
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d5b5a:	2101      	movs	r1, #1
   d5b5c:	2007      	movs	r0, #7
   d5b5e:	f002 fa98 	bl	d8092 <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d5b62:	2101      	movs	r1, #1
   d5b64:	200e      	movs	r0, #14
   d5b66:	f002 fa94 	bl	d8092 <digitalWrite>
    if (!isDayTime() && Time.hour() % 2 == 0) {                         // At night, only connect every other hour
   d5b6a:	f7fe fcf9 	bl	d4560 <_Z9isDayTimev>
   d5b6e:	b168      	cbz	r0, d5b8c <loop+0x448>
    else if (isDayTime()){                                              // During the day, connect every hour
   d5b70:	f7fe fcf6 	bl	d4560 <_Z9isDayTimev>
   d5b74:	b178      	cbz	r0, d5b96 <loop+0x452>
      connectToParticle();                                              // Wakey Wakey and get connected.
   d5b76:	f7fe fc77 	bl	d4468 <_Z17connectToParticlev>
      state = IDLE_STATE;                                               // Awake now, we need to go back to the IDLE state for next tasking
   d5b7a:	2302      	movs	r3, #2
        if (wakeupSource_) {
   d5b7c:	9803      	ldr	r0, [sp, #12]
    else state = NAPPING_STATE;                                         // Otherwise sleep
   d5b7e:	7023      	strb	r3, [r4, #0]
   d5b80:	2800      	cmp	r0, #0
   d5b82:	f43f ae5c 	beq.w	d583e <loop+0xfa>
            free(wakeupSource_);
   d5b86:	f000 fe1f 	bl	d67c8 <free>
    } break;
   d5b8a:	e658      	b.n	d583e <loop+0xfa>
    if (!isDayTime() && Time.hour() % 2 == 0) {                         // At night, only connect every other hour
   d5b8c:	f002 f864 	bl	d7c58 <_ZN9TimeClass4hourEv>
   d5b90:	07c3      	lsls	r3, r0, #31
   d5b92:	d4ed      	bmi.n	d5b70 <loop+0x42c>
   d5b94:	e7ef      	b.n	d5b76 <loop+0x432>
    else state = NAPPING_STATE;                                         // Otherwise sleep
   d5b96:	2307      	movs	r3, #7
   d5b98:	e7f0      	b.n	d5b7c <loop+0x438>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5b9a:	4d51      	ldr	r5, [pc, #324]	; (d5ce0 <loop+0x59c>)
   d5b9c:	792a      	ldrb	r2, [r5, #4]
   d5b9e:	b12a      	cbz	r2, d5bac <loop+0x468>
   d5ba0:	4b50      	ldr	r3, [pc, #320]	; (d5ce4 <loop+0x5a0>)
   d5ba2:	781b      	ldrb	r3, [r3, #0]
   d5ba4:	2b08      	cmp	r3, #8
   d5ba6:	d001      	beq.n	d5bac <loop+0x468>
   d5ba8:	f7ff fd98 	bl	d56dc <_Z22publishStateTransitionv>
   d5bac:	f000 fd74 	bl	d6698 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5bb0:	b1a0      	cbz	r0, d5bdc <loop+0x498>
        return waitConditionWhile(_condition, []{ return true; });
   d5bb2:	f7fe fd51 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d5bb6:	2300      	movs	r3, #0
      Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d5bb8:	f88d 3000 	strb.w	r3, [sp]
   d5bbc:	4b4e      	ldr	r3, [pc, #312]	; (d5cf8 <loop+0x5b4>)
   d5bbe:	4a57      	ldr	r2, [pc, #348]	; (d5d1c <loop+0x5d8>)
   d5bc0:	781b      	ldrb	r3, [r3, #0]
   d5bc2:	4953      	ldr	r1, [pc, #332]	; (d5d10 <loop+0x5cc>)
   d5bc4:	a806      	add	r0, sp, #24
   d5bc6:	f7fe fad8 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5bca:	a807      	add	r0, sp, #28
   d5bcc:	f7fe fe90 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                                      // Time to send last update
   d5bd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5bd4:	f000 fe44 	bl	d6860 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d5bd8:	f7fe fc8c 	bl	d44f4 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5bdc:	2100      	movs	r1, #0
   d5bde:	2007      	movs	r0, #7
   d5be0:	f002 fa57 	bl	d8092 <digitalWrite>
    if (sysStatus.solenoidConfig) controlValve("0");                  // Make darn sure the water is off
   d5be4:	7c6b      	ldrb	r3, [r5, #17]
   d5be6:	b14b      	cbz	r3, d5bfc <loop+0x4b8>
   d5be8:	494b      	ldr	r1, [pc, #300]	; (d5d18 <loop+0x5d4>)
   d5bea:	a806      	add	r0, sp, #24
   d5bec:	f001 fe01 	bl	d77f2 <_ZN6StringC1EPKc>
   d5bf0:	a806      	add	r0, sp, #24
   d5bf2:	f7ff fa3b 	bl	d506c <_Z12controlValve6String>
   d5bf6:	a806      	add	r0, sp, #24
   d5bf8:	f001 fdb0 	bl	d775c <_ZN6StringD1Ev>
    delay(5000);
   d5bfc:	f241 3088 	movw	r0, #5000	; 0x1388
   d5c00:	f000 fe2e 	bl	d6860 <delay>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5c04:	f002 f834 	bl	d7c70 <_ZN9TimeClass6minuteEv>
        if (valid_) {
   d5c08:	4b42      	ldr	r3, [pc, #264]	; (d5d14 <loop+0x5d0>)
   d5c0a:	7d1a      	ldrb	r2, [r3, #20]
   d5c0c:	f1c0 053c 	rsb	r5, r0, #60	; 0x3c
   d5c10:	b10a      	cbz	r2, d5c16 <loop+0x4d2>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5c12:	2201      	movs	r2, #1
   d5c14:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5c16:	2200      	movs	r2, #0
   d5c18:	2104      	movs	r1, #4
   d5c1a:	483e      	ldr	r0, [pc, #248]	; (d5d14 <loop+0x5d0>)
   d5c1c:	f7fe facc 	bl	d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5c20:	f64e 2160 	movw	r1, #60000	; 0xea60
   d5c24:	4369      	muls	r1, r5
   d5c26:	f7fe fafb 	bl	d4220 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5c2a:	a806      	add	r0, sp, #24
   d5c2c:	4939      	ldr	r1, [pc, #228]	; (d5d14 <loop+0x5d0>)
   d5c2e:	f001 fea1 	bl	d7974 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d5c32:	2302      	movs	r3, #2
        if (wakeupSource_) {
   d5c34:	9806      	ldr	r0, [sp, #24]
   d5c36:	7023      	strb	r3, [r4, #0]
   d5c38:	e7a2      	b.n	d5b80 <loop+0x43c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5c3a:	4c29      	ldr	r4, [pc, #164]	; (d5ce0 <loop+0x59c>)
   d5c3c:	7923      	ldrb	r3, [r4, #4]
   d5c3e:	b12b      	cbz	r3, d5c4c <loop+0x508>
   d5c40:	4b28      	ldr	r3, [pc, #160]	; (d5ce4 <loop+0x5a0>)
   d5c42:	781b      	ldrb	r3, [r3, #0]
   d5c44:	2b01      	cmp	r3, #1
   d5c46:	d001      	beq.n	d5c4c <loop+0x508>
   d5c48:	f7ff fd48 	bl	d56dc <_Z22publishStateTransitionv>
   d5c4c:	f000 fb00 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d5c50:	4b28      	ldr	r3, [pc, #160]	; (d5cf4 <loop+0x5b0>)
   d5c52:	681b      	ldr	r3, [r3, #0]
   d5c54:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5c58:	3330      	adds	r3, #48	; 0x30
   d5c5a:	4283      	cmp	r3, r0
   d5c5c:	f4bf adef 	bcs.w	d583e <loop+0xfa>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5c60:	69a3      	ldr	r3, [r4, #24]
   d5c62:	2b03      	cmp	r3, #3
   d5c64:	dc16      	bgt.n	d5c94 <loop+0x550>
   d5c66:	f000 fd17 	bl	d6698 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5c6a:	b160      	cbz	r0, d5c86 <loop+0x542>
   d5c6c:	2300      	movs	r3, #0
   d5c6e:	f88d 3000 	strb.w	r3, [sp]
   d5c72:	4b21      	ldr	r3, [pc, #132]	; (d5cf8 <loop+0x5b4>)
   d5c74:	4a2a      	ldr	r2, [pc, #168]	; (d5d20 <loop+0x5dc>)
   d5c76:	781b      	ldrb	r3, [r3, #0]
   d5c78:	4925      	ldr	r1, [pc, #148]	; (d5d10 <loop+0x5cc>)
   d5c7a:	a806      	add	r0, sp, #24
   d5c7c:	f7fe fa7d 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5c80:	a807      	add	r0, sp, #28
   d5c82:	f7fe fe35 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5c86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5c8a:	f000 fde9 	bl	d6860 <delay>
        System.reset();
   d5c8e:	f001 fe6d 	bl	d796c <_ZN11SystemClass5resetEv>
   d5c92:	e5d4      	b.n	d583e <loop+0xfa>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5c94:	f001 ffcf 	bl	d7c36 <_ZN9TimeClass3nowEv>
   d5c98:	69e3      	ldr	r3, [r4, #28]
   d5c9a:	1ac0      	subs	r0, r0, r3
   d5c9c:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5ca0:	d942      	bls.n	d5d28 <loop+0x5e4>
   d5ca2:	f000 fcf9 	bl	d6698 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d5ca6:	b160      	cbz	r0, d5cc2 <loop+0x57e>
   d5ca8:	2300      	movs	r3, #0
   d5caa:	f88d 3000 	strb.w	r3, [sp]
   d5cae:	4b12      	ldr	r3, [pc, #72]	; (d5cf8 <loop+0x5b4>)
   d5cb0:	4a1c      	ldr	r2, [pc, #112]	; (d5d24 <loop+0x5e0>)
   d5cb2:	781b      	ldrb	r3, [r3, #0]
   d5cb4:	4916      	ldr	r1, [pc, #88]	; (d5d10 <loop+0x5cc>)
   d5cb6:	a806      	add	r0, sp, #24
   d5cb8:	f7fe fa5f 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5cbc:	a807      	add	r0, sp, #28
   d5cbe:	f7fe fe17 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5cc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5cc6:	f000 fdcb 	bl	d6860 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d5cca:	2300      	movs	r3, #0
   d5ccc:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5cce:	f002 fa23 	bl	d8118 <_Z21__fetch_global_EEPROMv>
   d5cd2:	4903      	ldr	r1, [pc, #12]	; (d5ce0 <loop+0x59c>)
   d5cd4:	2234      	movs	r2, #52	; 0x34
   d5cd6:	2001      	movs	r0, #1
   d5cd8:	f000 fada 	bl	d6290 <HAL_EEPROM_Put>
   d5cdc:	e7d7      	b.n	d5c8e <loop+0x54a>
   d5cde:	bf00      	nop
   d5ce0:	2003e50c 	.word	0x2003e50c
   d5ce4:	2003e4fc 	.word	0x2003e4fc
   d5ce8:	2003e130 	.word	0x2003e130
   d5cec:	2003e508 	.word	0x2003e508
   d5cf0:	2003e588 	.word	0x2003e588
   d5cf4:	2003e500 	.word	0x2003e500
   d5cf8:	2003e454 	.word	0x2003e454
   d5cfc:	000db9d2 	.word	0x000db9d2
   d5d00:	000dbf70 	.word	0x000dbf70
   d5d04:	2003e4ac 	.word	0x2003e4ac
   d5d08:	2003e45c 	.word	0x2003e45c
   d5d0c:	000dbf89 	.word	0x000dbf89
   d5d10:	000dbedd 	.word	0x000dbedd
   d5d14:	2003e494 	.word	0x2003e494
   d5d18:	000dbb46 	.word	0x000dbb46
   d5d1c:	000dbf96 	.word	0x000dbf96
   d5d20:	000dbfad 	.word	0x000dbfad
   d5d24:	000dbfc1 	.word	0x000dbfc1
   d5d28:	f000 fcb6 	bl	d6698 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5d2c:	b160      	cbz	r0, d5d48 <loop+0x604>
   d5d2e:	2300      	movs	r3, #0
   d5d30:	f88d 3000 	strb.w	r3, [sp]
   d5d34:	4b0c      	ldr	r3, [pc, #48]	; (d5d68 <loop+0x624>)
   d5d36:	4a0d      	ldr	r2, [pc, #52]	; (d5d6c <loop+0x628>)
   d5d38:	781b      	ldrb	r3, [r3, #0]
   d5d3a:	490d      	ldr	r1, [pc, #52]	; (d5d70 <loop+0x62c>)
   d5d3c:	a806      	add	r0, sp, #24
   d5d3e:	f7fe fa1c 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5d42:	a807      	add	r0, sp, #28
   d5d44:	f7fe fdd4 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5d4c:	f000 fd88 	bl	d6860 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d5d50:	2300      	movs	r3, #0
   d5d52:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5d54:	f002 f9e0 	bl	d8118 <_Z21__fetch_global_EEPROMv>
   d5d58:	4906      	ldr	r1, [pc, #24]	; (d5d74 <loop+0x630>)
   d5d5a:	2234      	movs	r2, #52	; 0x34
   d5d5c:	2001      	movs	r0, #1
   d5d5e:	f000 fa97 	bl	d6290 <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d5d62:	f7fe fc85 	bl	d4670 <_Z14fullModemResetv>
}
   d5d66:	e56a      	b.n	d583e <loop+0xfa>
   d5d68:	2003e454 	.word	0x2003e454
   d5d6c:	000dbfdb 	.word	0x000dbfdb
   d5d70:	000dbedd 	.word	0x000dbedd
   d5d74:	2003e50c 	.word	0x2003e50c

000d5d78 <_GLOBAL__sub_I___appProductID>:
}
   d5d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        val_(val) {
   d5d7c:	4b3b      	ldr	r3, [pc, #236]	; (d5e6c <_GLOBAL__sub_I___appProductID+0xf4>)
              error_(SYSTEM_ERROR_NONE) {
   d5d7e:	4e3c      	ldr	r6, [pc, #240]	; (d5e70 <_GLOBAL__sub_I___appProductID+0xf8>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5d80:	4f3c      	ldr	r7, [pc, #240]	; (d5e74 <_GLOBAL__sub_I___appProductID+0xfc>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5d82:	f8df 9130 	ldr.w	r9, [pc, #304]	; d5eb4 <_GLOBAL__sub_I___appProductID+0x13c>
	    _M_invoker = &_My_handler::_M_invoke;
   d5d86:	f8df 8130 	ldr.w	r8, [pc, #304]	; d5eb8 <_GLOBAL__sub_I___appProductID+0x140>
   d5d8a:	2400      	movs	r4, #0
   d5d8c:	601c      	str	r4, [r3, #0]
   d5d8e:	4b3a      	ldr	r3, [pc, #232]	; (d5e78 <_GLOBAL__sub_I___appProductID+0x100>)
   d5d90:	2501      	movs	r5, #1
}
   d5d92:	b085      	sub	sp, #20
   d5d94:	701d      	strb	r5, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5d96:	f002 f915 	bl	d7fc4 <spark_protocol_instance>
   d5d9a:	4623      	mov	r3, r4
   d5d9c:	4622      	mov	r2, r4
   d5d9e:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5da2:	f002 f917 	bl	d7fd4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5da6:	f002 f90d 	bl	d7fc4 <spark_protocol_instance>
   d5daa:	4622      	mov	r2, r4
   d5dac:	4623      	mov	r3, r4
   d5dae:	2125      	movs	r1, #37	; 0x25
   d5db0:	f002 f918 	bl	d7fe4 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d5db4:	4b31      	ldr	r3, [pc, #196]	; (d5e7c <_GLOBAL__sub_I___appProductID+0x104>)
   d5db6:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5db8:	6034      	str	r4, [r6, #0]
   d5dba:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d5dbc:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d5dbe:	2002      	movs	r0, #2
   d5dc0:	f000 fbe0 	bl	d6584 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5dc4:	463a      	mov	r2, r7
   d5dc6:	492e      	ldr	r1, [pc, #184]	; (d5e80 <_GLOBAL__sub_I___appProductID+0x108>)
   d5dc8:	4630      	mov	r0, r6
   d5dca:	f002 fa3b 	bl	d8244 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5dce:	4621      	mov	r1, r4
   d5dd0:	4628      	mov	r0, r5
   d5dd2:	f000 fbef 	bl	d65b4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5dd6:	4629      	mov	r1, r5
   d5dd8:	2004      	movs	r0, #4
   d5dda:	f000 fa19 	bl	d6210 <HAL_Feature_Set>
        : config_(config) {
   d5dde:	4829      	ldr	r0, [pc, #164]	; (d5e84 <_GLOBAL__sub_I___appProductID+0x10c>)
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
   d5de0:	4929      	ldr	r1, [pc, #164]	; (d5e88 <_GLOBAL__sub_I___appProductID+0x110>)
              valid_(true) {
   d5de2:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5de6:	4603      	mov	r3, r0
   d5de8:	1d02      	adds	r2, r0, #4
   d5dea:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5dee:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5df0:	4b26      	ldr	r3, [pc, #152]	; (d5e8c <_GLOBAL__sub_I___appProductID+0x114>)
   d5df2:	6043      	str	r3, [r0, #4]
   d5df4:	463a      	mov	r2, r7
        config_.wakeup_sources = nullptr;
   d5df6:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5dfa:	7505      	strb	r5, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5dfc:	7204      	strb	r4, [r0, #8]
   d5dfe:	f002 fa21 	bl	d8244 <__aeabi_atexit>
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5e02:	4823      	ldr	r0, [pc, #140]	; (d5e90 <_GLOBAL__sub_I___appProductID+0x118>)
	    _M_manager = &_My_handler::_M_manager;
   d5e04:	4c23      	ldr	r4, [pc, #140]	; (d5e94 <_GLOBAL__sub_I___appProductID+0x11c>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5e06:	4e24      	ldr	r6, [pc, #144]	; (d5e98 <_GLOBAL__sub_I___appProductID+0x120>)
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5e08:	f000 f8cd 	bl	d5fa6 <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                     // Light sensor measures light level in Lux
   d5e0c:	f002 f9ca 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d5e10:	2123      	movs	r1, #35	; 0x23
   d5e12:	4602      	mov	r2, r0
   d5e14:	4821      	ldr	r0, [pc, #132]	; (d5e9c <_GLOBAL__sub_I___appProductID+0x124>)
   d5e16:	f000 f855 	bl	d5ec4 <_ZN6BH1750C1EhR7TwoWire>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e1a:	4b21      	ldr	r3, [pc, #132]	; (d5ea0 <_GLOBAL__sub_I___appProductID+0x128>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5e1c:	4921      	ldr	r1, [pc, #132]	; (d5ea4 <_GLOBAL__sub_I___appProductID+0x12c>)
   d5e1e:	9300      	str	r3, [sp, #0]
   d5e20:	466a      	mov	r2, sp
   d5e22:	462b      	mov	r3, r5
   d5e24:	4648      	mov	r0, r9
	    _M_manager = &_My_handler::_M_manager;
   d5e26:	9402      	str	r4, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5e28:	f8cd 800c 	str.w	r8, [sp, #12]
   d5e2c:	f7fe fa28 	bl	d4280 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5e30:	4668      	mov	r0, sp
   d5e32:	f7fe f9b7 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d5e36:	463a      	mov	r2, r7
   d5e38:	4631      	mov	r1, r6
   d5e3a:	4648      	mov	r0, r9
   d5e3c:	f002 fa02 	bl	d8244 <__aeabi_atexit>
	    _M_manager = &_My_handler::_M_manager;
   d5e40:	e9cd 4802 	strd	r4, r8, [sp, #8]
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5e44:	4c18      	ldr	r4, [pc, #96]	; (d5ea8 <_GLOBAL__sub_I___appProductID+0x130>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e46:	4b19      	ldr	r3, [pc, #100]	; (d5eac <_GLOBAL__sub_I___appProductID+0x134>)
   d5e48:	4919      	ldr	r1, [pc, #100]	; (d5eb0 <_GLOBAL__sub_I___appProductID+0x138>)
   d5e4a:	9300      	str	r3, [sp, #0]
   d5e4c:	466a      	mov	r2, sp
   d5e4e:	462b      	mov	r3, r5
   d5e50:	4620      	mov	r0, r4
   d5e52:	f7fe fa15 	bl	d4280 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5e56:	4668      	mov	r0, sp
   d5e58:	f7fe f9a4 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d5e5c:	463a      	mov	r2, r7
   d5e5e:	4631      	mov	r1, r6
   d5e60:	4620      	mov	r0, r4
   d5e62:	f002 f9ef 	bl	d8244 <__aeabi_atexit>
}
   d5e66:	b005      	add	sp, #20
   d5e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e6c:	2003e450 	.word	0x2003e450
   d5e70:	2003e444 	.word	0x2003e444
   d5e74:	2003e3f8 	.word	0x2003e3f8
   d5e78:	2003e454 	.word	0x2003e454
   d5e7c:	ffff0000 	.word	0xffff0000
   d5e80:	000d4195 	.word	0x000d4195
   d5e84:	2003e494 	.word	0x2003e494
   d5e88:	000d40ef 	.word	0x000d40ef
   d5e8c:	00030010 	.word	0x00030010
   d5e90:	2003e544 	.word	0x2003e544
   d5e94:	000d40d9 	.word	0x000d40d9
   d5e98:	000d4335 	.word	0x000d4335
   d5e9c:	2003e4f4 	.word	0x2003e4f4
   d5ea0:	000d40b5 	.word	0x000d40b5
   d5ea4:	00124f80 	.word	0x00124f80
   d5ea8:	2003e460 	.word	0x2003e460
   d5eac:	000d40c1 	.word	0x000d40c1
   d5eb0:	001b7740 	.word	0x001b7740
   d5eb4:	2003e568 	.word	0x2003e568
   d5eb8:	000d40d5 	.word	0x000d40d5

000d5ebc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5ebc:	6803      	ldr	r3, [r0, #0]
   d5ebe:	b2c9      	uxtb	r1, r1
   d5ec0:	689b      	ldr	r3, [r3, #8]
   d5ec2:	4718      	bx	r3

000d5ec4 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5ec4:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d5ec6:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5ec8:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   d5eca:	7002      	strb	r2, [r0, #0]
}
   d5ecc:	4770      	bx	lr

000d5ece <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d5ece:	b510      	push	{r4, lr}
   d5ed0:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d5ed2:	6840      	ldr	r0, [r0, #4]
   d5ed4:	f001 f9dd 	bl	d7292 <_ZN7TwoWire9isEnabledEv>
   d5ed8:	b910      	cbnz	r0, d5ee0 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d5eda:	6860      	ldr	r0, [r4, #4]
   d5edc:	f001 f984 	bl	d71e8 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d5ee0:	2001      	movs	r0, #1
   d5ee2:	bd10      	pop	{r4, pc}

000d5ee4 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d5ee4:	b570      	push	{r4, r5, r6, lr}
   d5ee6:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d5ee8:	7841      	ldrb	r1, [r0, #1]
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	f001 f9ae 	bl	d724c <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d5ef0:	7869      	ldrb	r1, [r5, #1]
   d5ef2:	6868      	ldr	r0, [r5, #4]
   d5ef4:	2202      	movs	r2, #2
   d5ef6:	f001 f9a6 	bl	d7246 <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d5efa:	6868      	ldr	r0, [r5, #4]
   d5efc:	6803      	ldr	r3, [r0, #0]
   d5efe:	695b      	ldr	r3, [r3, #20]
   d5f00:	4798      	blx	r3
   d5f02:	4606      	mov	r6, r0
   d5f04:	6868      	ldr	r0, [r5, #4]
   d5f06:	6803      	ldr	r3, [r0, #0]
   d5f08:	695b      	ldr	r3, [r3, #20]
   d5f0a:	4798      	blx	r3
   d5f0c:	4604      	mov	r4, r0
  m_i2c.endTransmission();
   d5f0e:	6868      	ldr	r0, [r5, #4]
   d5f10:	f001 f9bc 	bl	d728c <_ZN7TwoWire15endTransmissionEv>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d5f14:	ea44 2006 	orr.w	r0, r4, r6, lsl #8

  return (float)level / 1.2f; // convert to lux
   d5f18:	b284      	uxth	r4, r0
   d5f1a:	ee07 4a90 	vmov	s15, r4
   d5f1e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d5f22:	eddf 7a02 	vldr	s15, [pc, #8]	; d5f2c <_ZN6BH175015get_light_levelEv+0x48>
   d5f26:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5f2a:	bd70      	pop	{r4, r5, r6, pc}
   d5f2c:	3f99999a 	.word	0x3f99999a

000d5f30 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d5f30:	7803      	ldrb	r3, [r0, #0]
   d5f32:	2b23      	cmp	r3, #35	; 0x23
   d5f34:	d005      	beq.n	d5f42 <_ZN6BH175020wait_for_measurementEv+0x12>
   d5f36:	2b13      	cmp	r3, #19
   d5f38:	bf0c      	ite	eq
   d5f3a:	2018      	moveq	r0, #24
   d5f3c:	20b4      	movne	r0, #180	; 0xb4
   d5f3e:	f000 bc8f 	b.w	d6860 <delay>
   d5f42:	2018      	movs	r0, #24
   d5f44:	e7fb      	b.n	d5f3e <_ZN6BH175020wait_for_measurementEv+0xe>

000d5f46 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   d5f46:	b538      	push	{r3, r4, r5, lr}
   d5f48:	4604      	mov	r4, r0
   d5f4a:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d5f4c:	7841      	ldrb	r1, [r0, #1]
   d5f4e:	6840      	ldr	r0, [r0, #4]
   d5f50:	f001 f97c 	bl	d724c <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d5f54:	6860      	ldr	r0, [r4, #4]
   d5f56:	6803      	ldr	r3, [r0, #0]
   d5f58:	4629      	mov	r1, r5
   d5f5a:	689b      	ldr	r3, [r3, #8]
   d5f5c:	4798      	blx	r3
  m_i2c.endTransmission();
   d5f5e:	6860      	ldr	r0, [r4, #4]
   d5f60:	f001 f994 	bl	d728c <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   d5f64:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   d5f66:	4620      	mov	r0, r4
}
   d5f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   d5f6c:	f7ff bfe0 	b.w	d5f30 <_ZN6BH175020wait_for_measurementEv>

000d5f70 <_ZN6BH175023make_forced_measurementEv>:
{
   d5f70:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   d5f72:	7803      	ldrb	r3, [r0, #0]
   d5f74:	f1a3 0220 	sub.w	r2, r3, #32
   d5f78:	2a01      	cmp	r2, #1
{
   d5f7a:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   d5f7c:	d901      	bls.n	d5f82 <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5f7e:	2b23      	cmp	r3, #35	; 0x23
   d5f80:	d110      	bne.n	d5fa4 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   d5f82:	7861      	ldrb	r1, [r4, #1]
   d5f84:	6860      	ldr	r0, [r4, #4]
   d5f86:	f001 f961 	bl	d724c <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d5f8a:	6860      	ldr	r0, [r4, #4]
   d5f8c:	7821      	ldrb	r1, [r4, #0]
   d5f8e:	6803      	ldr	r3, [r0, #0]
   d5f90:	689b      	ldr	r3, [r3, #8]
   d5f92:	4798      	blx	r3
    m_i2c.endTransmission();
   d5f94:	6860      	ldr	r0, [r4, #4]
   d5f96:	f001 f979 	bl	d728c <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   d5f9a:	4620      	mov	r0, r4
}
   d5f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   d5fa0:	f7ff bfc6 	b.w	d5f30 <_ZN6BH175020wait_for_measurementEv>
}
   d5fa4:	bd10      	pop	{r4, pc}

000d5fa6 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5fa6:	4770      	bx	lr

000d5fa8 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5fa8:	b538      	push	{r3, r4, r5, lr}
   d5faa:	4605      	mov	r5, r0
   d5fac:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5fae:	f002 f8f9 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d5fb2:	7829      	ldrb	r1, [r5, #0]
   d5fb4:	f001 f94a 	bl	d724c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5fb8:	f002 f8f4 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d5fbc:	0a21      	lsrs	r1, r4, #8
   d5fbe:	f7ff ff7d 	bl	d5ebc <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5fc2:	f002 f8ef 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d5fc6:	b2e1      	uxtb	r1, r4
   d5fc8:	f7ff ff78 	bl	d5ebc <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5fcc:	f002 f8ea 	bl	d81a4 <_Z19__fetch_global_Wirev>
}
   d5fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d5fd4:	f001 b95a 	b.w	d728c <_ZN7TwoWire15endTransmissionEv>

000d5fd8 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d5fd8:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5fda:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5fde:	f7ff ffe3 	bl	d5fa8 <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d5fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d5fe6:	200a      	movs	r0, #10
   d5fe8:	f000 bc3a 	b.w	d6860 <delay>

000d5fec <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5fec:	b538      	push	{r3, r4, r5, lr}
   d5fee:	4604      	mov	r4, r0
   d5ff0:	460d      	mov	r5, r1
  Wire.begin();
   d5ff2:	f002 f8d7 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d5ff6:	f001 f8f7 	bl	d71e8 <_ZN7TwoWire5beginEv>
  reset();
   d5ffa:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d5ffc:	7025      	strb	r5, [r4, #0]
  reset();
   d5ffe:	f7ff ffeb 	bl	d5fd8 <_ZN14Adafruit_SHT315resetEv>
}
   d6002:	2001      	movs	r0, #1
   d6004:	bd38      	pop	{r3, r4, r5, pc}

000d6006 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d6006:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d6008:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d600a:	4291      	cmp	r1, r2
   d600c:	d00e      	beq.n	d602c <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d600e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6012:	4058      	eors	r0, r3
   d6014:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d6016:	f010 0f80 	tst.w	r0, #128	; 0x80
   d601a:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d601e:	bf18      	it	ne
   d6020:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d6024:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d6026:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d6028:	d1f5      	bne.n	d6016 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d602a:	e7ee      	b.n	d600a <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d602c:	4770      	bx	lr
	...

000d6030 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d6030:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d6032:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d6036:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d6038:	f7ff ffb6 	bl	d5fa8 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d603c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6040:	f000 fc0e 	bl	d6860 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d6044:	f002 f8ae 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d6048:	7829      	ldrb	r1, [r5, #0]
   d604a:	2206      	movs	r2, #6
   d604c:	f001 f8fb 	bl	d7246 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d6050:	f002 f8a8 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d6054:	6803      	ldr	r3, [r0, #0]
   d6056:	691b      	ldr	r3, [r3, #16]
   d6058:	4798      	blx	r3
   d605a:	2806      	cmp	r0, #6
   d605c:	d14b      	bne.n	d60f6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d605e:	466e      	mov	r6, sp
   d6060:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d6062:	f002 f89f 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d6066:	6803      	ldr	r3, [r0, #0]
   d6068:	695b      	ldr	r3, [r3, #20]
   d606a:	4798      	blx	r3
   d606c:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d606e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d6072:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d6076:	4669      	mov	r1, sp
   d6078:	d1f3      	bne.n	d6062 <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d607a:	2202      	movs	r2, #2
   d607c:	4628      	mov	r0, r5
   d607e:	f7ff ffc2 	bl	d6006 <_ZN14Adafruit_SHT314crc8EPKhi>
   d6082:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d6086:	4286      	cmp	r6, r0
   d6088:	d135      	bne.n	d60f6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d608a:	2202      	movs	r2, #2
   d608c:	f10d 0103 	add.w	r1, sp, #3
   d6090:	4628      	mov	r0, r5
   d6092:	f7ff ffb8 	bl	d6006 <_ZN14Adafruit_SHT314crc8EPKhi>
   d6096:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d609a:	4286      	cmp	r6, r0
   d609c:	d12b      	bne.n	d60f6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d609e:	f8bd 0000 	ldrh.w	r0, [sp]
   d60a2:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d60a6:	ba40      	rev16	r0, r0
   d60a8:	b280      	uxth	r0, r0
   d60aa:	f002 fa1b 	bl	d84e4 <__aeabi_ui2d>
  stemp *= 175;
   d60ae:	a318      	add	r3, pc, #96	; (adr r3, d6110 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d60b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60b4:	f002 fa90 	bl	d85d8 <__aeabi_dmul>
  stemp /= 0xffff;
   d60b8:	a311      	add	r3, pc, #68	; (adr r3, d6100 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d60ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60be:	f002 fbb5 	bl	d882c <__aeabi_ddiv>
  stemp = -45 + stemp;
   d60c2:	4b11      	ldr	r3, [pc, #68]	; (d6108 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d60c4:	2200      	movs	r2, #0
   d60c6:	f002 f8cf 	bl	d8268 <__aeabi_dsub>
  temp = stemp;
   d60ca:	f002 fd55 	bl	d8b78 <__aeabi_d2f>
   d60ce:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d60d0:	ba60      	rev16	r0, r4
   d60d2:	b280      	uxth	r0, r0
   d60d4:	f002 fa06 	bl	d84e4 <__aeabi_ui2d>
  shum *= 100;
   d60d8:	4b0c      	ldr	r3, [pc, #48]	; (d610c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d60da:	2200      	movs	r2, #0
   d60dc:	f002 fa7c 	bl	d85d8 <__aeabi_dmul>
  shum /= 0xFFFF;
   d60e0:	a307      	add	r3, pc, #28	; (adr r3, d6100 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d60e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60e6:	f002 fba1 	bl	d882c <__aeabi_ddiv>
  humidity = shum;
   d60ea:	f002 fd45 	bl	d8b78 <__aeabi_d2f>
   d60ee:	6068      	str	r0, [r5, #4]
  return true;
   d60f0:	2001      	movs	r0, #1
}
   d60f2:	b002      	add	sp, #8
   d60f4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d60f6:	2000      	movs	r0, #0
   d60f8:	e7fb      	b.n	d60f2 <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d60fa:	bf00      	nop
   d60fc:	f3af 8000 	nop.w
   d6100:	00000000 	.word	0x00000000
   d6104:	40efffe0 	.word	0x40efffe0
   d6108:	40468000 	.word	0x40468000
   d610c:	40590000 	.word	0x40590000
   d6110:	00000000 	.word	0x00000000
   d6114:	4065e000 	.word	0x4065e000

000d6118 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d6118:	b510      	push	{r4, lr}
   d611a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d611c:	f7ff ff88 	bl	d6030 <_ZN14Adafruit_SHT3111readTempHumEv>
   d6120:	b110      	cbz	r0, d6128 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d6122:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d6126:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d6128:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6130 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d612c:	e7fb      	b.n	d6126 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d612e:	bf00      	nop
   d6130:	7fc00000 	.word	0x7fc00000

000d6134 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d6134:	b510      	push	{r4, lr}
   d6136:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d6138:	f7ff ff7a 	bl	d6030 <_ZN14Adafruit_SHT3111readTempHumEv>
   d613c:	b110      	cbz	r0, d6144 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d613e:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d6142:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d6144:	ed9f 0a01 	vldr	s0, [pc, #4]	; d614c <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d6148:	e7fb      	b.n	d6142 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d614a:	bf00      	nop
   d614c:	7fc00000 	.word	0x7fc00000

000d6150 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <cellular_signal+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030274 	.word	0x00030274

000d6160 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <cellular_command+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030274 	.word	0x00030274

000d6170 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <os_thread_yield+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	68db      	ldr	r3, [r3, #12]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030248 	.word	0x00030248

000d6180 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <os_thread_scheduling+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	69db      	ldr	r3, [r3, #28]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030248 	.word	0x00030248

000d6190 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <os_timer_create+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	6a1b      	ldr	r3, [r3, #32]
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030248 	.word	0x00030248

000d61a0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <os_timer_destroy+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030248 	.word	0x00030248

000d61b0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <os_timer_get_id+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030248 	.word	0x00030248

000d61c0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <os_timer_change+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	00030248 	.word	0x00030248

000d61d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <os_mutex_recursive_create+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	00030248 	.word	0x00030248

000d61e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <os_mutex_recursive_destroy+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	00030248 	.word	0x00030248

000d61f0 <os_timer_is_active>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <os_timer_is_active+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	00030248 	.word	0x00030248

000d6200 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <os_timer_set_id+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	00030248 	.word	0x00030248

000d6210 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <HAL_Feature_Set+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030234 	.word	0x00030234

000d6220 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	00030234 	.word	0x00030234

000d6230 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <HAL_RNG_GetRandomNumber+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	685b      	ldr	r3, [r3, #4]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	00030218 	.word	0x00030218

000d6240 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <HAL_Delay_Microseconds+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	68db      	ldr	r3, [r3, #12]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	00030218 	.word	0x00030218

000d6250 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	695b      	ldr	r3, [r3, #20]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030218 	.word	0x00030218

000d6260 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <HAL_EEPROM_Init+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030218 	.word	0x00030218

000d6270 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <HAL_EEPROM_Read+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030218 	.word	0x00030218

000d6280 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <HAL_EEPROM_Get+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	00030218 	.word	0x00030218

000d6290 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <HAL_EEPROM_Put+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030218 	.word	0x00030218

000d62a0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <hal_rtc_time_is_valid+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	00030218 	.word	0x00030218

000d62b0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <hal_timer_millis+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030218 	.word	0x00030218

000d62c0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <hal_rtc_get_time+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	00030218 	.word	0x00030218

000d62d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <HAL_Pin_Map+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	681b      	ldr	r3, [r3, #0]
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	0003022c 	.word	0x0003022c

000d62e0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <HAL_Validate_Pin_Function+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	685b      	ldr	r3, [r3, #4]
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	0003022c 	.word	0x0003022c

000d62f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <HAL_Pin_Mode+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	689b      	ldr	r3, [r3, #8]
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	0003022c 	.word	0x0003022c

000d6300 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <HAL_Get_Pin_Mode+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	68db      	ldr	r3, [r3, #12]
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	0003022c 	.word	0x0003022c

000d6310 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <HAL_GPIO_Write+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	691b      	ldr	r3, [r3, #16]
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	0003022c 	.word	0x0003022c

000d6320 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6320:	b508      	push	{r3, lr}
   d6322:	4b02      	ldr	r3, [pc, #8]	; (d632c <HAL_GPIO_Read+0xc>)
   d6324:	681b      	ldr	r3, [r3, #0]
   d6326:	695b      	ldr	r3, [r3, #20]
   d6328:	9301      	str	r3, [sp, #4]
   d632a:	bd08      	pop	{r3, pc}
   d632c:	0003022c 	.word	0x0003022c

000d6330 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b02      	ldr	r3, [pc, #8]	; (d633c <hal_adc_read+0xc>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6338:	9301      	str	r3, [sp, #4]
   d633a:	bd08      	pop	{r3, pc}
   d633c:	0003022c 	.word	0x0003022c

000d6340 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6340:	b508      	push	{r3, lr}
   d6342:	4b02      	ldr	r3, [pc, #8]	; (d634c <hal_i2c_begin+0xc>)
   d6344:	681b      	ldr	r3, [r3, #0]
   d6346:	68db      	ldr	r3, [r3, #12]
   d6348:	9301      	str	r3, [sp, #4]
   d634a:	bd08      	pop	{r3, pc}
   d634c:	00030228 	.word	0x00030228

000d6350 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6350:	b508      	push	{r3, lr}
   d6352:	4b02      	ldr	r3, [pc, #8]	; (d635c <hal_i2c_begin_transmission+0xc>)
   d6354:	681b      	ldr	r3, [r3, #0]
   d6356:	699b      	ldr	r3, [r3, #24]
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	bd08      	pop	{r3, pc}
   d635c:	00030228 	.word	0x00030228

000d6360 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6360:	b508      	push	{r3, lr}
   d6362:	4b02      	ldr	r3, [pc, #8]	; (d636c <hal_i2c_end_transmission+0xc>)
   d6364:	681b      	ldr	r3, [r3, #0]
   d6366:	69db      	ldr	r3, [r3, #28]
   d6368:	9301      	str	r3, [sp, #4]
   d636a:	bd08      	pop	{r3, pc}
   d636c:	00030228 	.word	0x00030228

000d6370 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6370:	b508      	push	{r3, lr}
   d6372:	4b02      	ldr	r3, [pc, #8]	; (d637c <hal_i2c_write+0xc>)
   d6374:	681b      	ldr	r3, [r3, #0]
   d6376:	6a1b      	ldr	r3, [r3, #32]
   d6378:	9301      	str	r3, [sp, #4]
   d637a:	bd08      	pop	{r3, pc}
   d637c:	00030228 	.word	0x00030228

000d6380 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6380:	b508      	push	{r3, lr}
   d6382:	4b02      	ldr	r3, [pc, #8]	; (d638c <hal_i2c_available+0xc>)
   d6384:	681b      	ldr	r3, [r3, #0]
   d6386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6388:	9301      	str	r3, [sp, #4]
   d638a:	bd08      	pop	{r3, pc}
   d638c:	00030228 	.word	0x00030228

000d6390 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6390:	b508      	push	{r3, lr}
   d6392:	4b02      	ldr	r3, [pc, #8]	; (d639c <hal_i2c_read+0xc>)
   d6394:	681b      	ldr	r3, [r3, #0]
   d6396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6398:	9301      	str	r3, [sp, #4]
   d639a:	bd08      	pop	{r3, pc}
   d639c:	00030228 	.word	0x00030228

000d63a0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d63a0:	b508      	push	{r3, lr}
   d63a2:	4b02      	ldr	r3, [pc, #8]	; (d63ac <hal_i2c_peek+0xc>)
   d63a4:	681b      	ldr	r3, [r3, #0]
   d63a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63a8:	9301      	str	r3, [sp, #4]
   d63aa:	bd08      	pop	{r3, pc}
   d63ac:	00030228 	.word	0x00030228

000d63b0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d63b0:	b508      	push	{r3, lr}
   d63b2:	4b02      	ldr	r3, [pc, #8]	; (d63bc <hal_i2c_flush+0xc>)
   d63b4:	681b      	ldr	r3, [r3, #0]
   d63b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63b8:	9301      	str	r3, [sp, #4]
   d63ba:	bd08      	pop	{r3, pc}
   d63bc:	00030228 	.word	0x00030228

000d63c0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d63c0:	b508      	push	{r3, lr}
   d63c2:	4b02      	ldr	r3, [pc, #8]	; (d63cc <hal_i2c_is_enabled+0xc>)
   d63c4:	681b      	ldr	r3, [r3, #0]
   d63c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d63c8:	9301      	str	r3, [sp, #4]
   d63ca:	bd08      	pop	{r3, pc}
   d63cc:	00030228 	.word	0x00030228

000d63d0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d63d0:	b508      	push	{r3, lr}
   d63d2:	4b02      	ldr	r3, [pc, #8]	; (d63dc <hal_i2c_init+0xc>)
   d63d4:	681b      	ldr	r3, [r3, #0]
   d63d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d63d8:	9301      	str	r3, [sp, #4]
   d63da:	bd08      	pop	{r3, pc}
   d63dc:	00030228 	.word	0x00030228

000d63e0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d63e0:	b508      	push	{r3, lr}
   d63e2:	4b02      	ldr	r3, [pc, #8]	; (d63ec <hal_i2c_lock+0xc>)
   d63e4:	681b      	ldr	r3, [r3, #0]
   d63e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d63e8:	9301      	str	r3, [sp, #4]
   d63ea:	bd08      	pop	{r3, pc}
   d63ec:	00030228 	.word	0x00030228

000d63f0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b02      	ldr	r3, [pc, #8]	; (d63fc <hal_i2c_unlock+0xc>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d63f8:	9301      	str	r3, [sp, #4]
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	00030228 	.word	0x00030228

000d6400 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6400:	b508      	push	{r3, lr}
   d6402:	4b02      	ldr	r3, [pc, #8]	; (d640c <hal_i2c_request_ex+0xc>)
   d6404:	681b      	ldr	r3, [r3, #0]
   d6406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6408:	9301      	str	r3, [sp, #4]
   d640a:	bd08      	pop	{r3, pc}
   d640c:	00030228 	.word	0x00030228

000d6410 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b02      	ldr	r3, [pc, #8]	; (d641c <inet_inet_ntop+0xc>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	695b      	ldr	r3, [r3, #20]
   d6418:	9301      	str	r3, [sp, #4]
   d641a:	bd08      	pop	{r3, pc}
   d641c:	00030264 	.word	0x00030264

000d6420 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b02      	ldr	r3, [pc, #8]	; (d642c <netdb_freeaddrinfo+0xc>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	689b      	ldr	r3, [r3, #8]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	bd08      	pop	{r3, pc}
   d642c:	00030268 	.word	0x00030268

000d6430 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6430:	b508      	push	{r3, lr}
   d6432:	4b02      	ldr	r3, [pc, #8]	; (d643c <netdb_getaddrinfo+0xc>)
   d6434:	681b      	ldr	r3, [r3, #0]
   d6436:	68db      	ldr	r3, [r3, #12]
   d6438:	9301      	str	r3, [sp, #4]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	00030268 	.word	0x00030268

000d6440 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6440:	b508      	push	{r3, lr}
   d6442:	4b02      	ldr	r3, [pc, #8]	; (d644c <hal_spi_init+0xc>)
   d6444:	681b      	ldr	r3, [r3, #0]
   d6446:	69db      	ldr	r3, [r3, #28]
   d6448:	9301      	str	r3, [sp, #4]
   d644a:	bd08      	pop	{r3, pc}
   d644c:	00030230 	.word	0x00030230

000d6450 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <hal_spi_is_enabled+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	6a1b      	ldr	r3, [r3, #32]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	00030230 	.word	0x00030230

000d6460 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <hal_usart_init+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	681b      	ldr	r3, [r3, #0]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	0003023c 	.word	0x0003023c

000d6470 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <hal_usart_write+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	68db      	ldr	r3, [r3, #12]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	0003023c 	.word	0x0003023c

000d6480 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <hal_usart_available+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	691b      	ldr	r3, [r3, #16]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	0003023c 	.word	0x0003023c

000d6490 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <hal_usart_read+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	695b      	ldr	r3, [r3, #20]
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	0003023c 	.word	0x0003023c

000d64a0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <hal_usart_peek+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	699b      	ldr	r3, [r3, #24]
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	0003023c 	.word	0x0003023c

000d64b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <hal_usart_flush+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	69db      	ldr	r3, [r3, #28]
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	0003023c 	.word	0x0003023c

000d64c0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <hal_usart_is_enabled+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	6a1b      	ldr	r3, [r3, #32]
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	0003023c 	.word	0x0003023c

000d64d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <hal_usart_available_data_for_write+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	0003023c 	.word	0x0003023c

000d64e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <HAL_USB_USART_Init+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	681b      	ldr	r3, [r3, #0]
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	0003024c 	.word	0x0003024c

000d64f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <HAL_USB_USART_Available_Data+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	691b      	ldr	r3, [r3, #16]
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	0003024c 	.word	0x0003024c

000d6500 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	695b      	ldr	r3, [r3, #20]
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	0003024c 	.word	0x0003024c

000d6510 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <HAL_USB_USART_Receive_Data+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	699b      	ldr	r3, [r3, #24]
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	0003024c 	.word	0x0003024c

000d6520 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <HAL_USB_USART_Send_Data+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	69db      	ldr	r3, [r3, #28]
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	0003024c 	.word	0x0003024c

000d6530 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <HAL_USB_USART_Flush_Data+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	6a1b      	ldr	r3, [r3, #32]
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	0003024c 	.word	0x0003024c

000d6540 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <panic_+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030260 	.word	0x00030260

000d6550 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <log_message+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030260 	.word	0x00030260

000d6560 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b03      	ldr	r3, [pc, #12]	; (d6570 <diag_get_source+0x10>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d656a:	9301      	str	r3, [sp, #4]
   d656c:	bd08      	pop	{r3, pc}
   d656e:	0000      	.short	0x0000
   d6570:	00030260 	.word	0x00030260

000d6574 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <system_mode+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	681b      	ldr	r3, [r3, #0]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	00030220 	.word	0x00030220

000d6584 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <set_system_mode+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	685b      	ldr	r3, [r3, #4]
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	00030220 	.word	0x00030220

000d6594 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <system_delay_ms+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	695b      	ldr	r3, [r3, #20]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	00030220 	.word	0x00030220

000d65a4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <system_sleep+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	699b      	ldr	r3, [r3, #24]
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	00030220 	.word	0x00030220

000d65b4 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <system_thread_set_state+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	00030220 	.word	0x00030220

000d65c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <application_thread_current+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	00030220 	.word	0x00030220

000d65d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <application_thread_invoke+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	00030220 	.word	0x00030220

000d65e4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <system_thread_get_state+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	00030220 	.word	0x00030220

000d65f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b03      	ldr	r3, [pc, #12]	; (d6604 <system_ctrl_set_app_request_handler+0x10>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d65fe:	9301      	str	r3, [sp, #4]
   d6600:	bd08      	pop	{r3, pc}
   d6602:	0000      	.short	0x0000
   d6604:	00030220 	.word	0x00030220

000d6608 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6608:	b508      	push	{r3, lr}
   d660a:	4b03      	ldr	r3, [pc, #12]	; (d6618 <system_ctrl_set_result+0x10>)
   d660c:	681b      	ldr	r3, [r3, #0]
   d660e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6612:	9301      	str	r3, [sp, #4]
   d6614:	bd08      	pop	{r3, pc}
   d6616:	0000      	.short	0x0000
   d6618:	00030220 	.word	0x00030220

000d661c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b03      	ldr	r3, [pc, #12]	; (d662c <system_power_management_set_config+0x10>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6626:	9301      	str	r3, [sp, #4]
   d6628:	bd08      	pop	{r3, pc}
   d662a:	0000      	.short	0x0000
   d662c:	00030220 	.word	0x00030220

000d6630 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b03      	ldr	r3, [pc, #12]	; (d6640 <system_sleep_ext+0x10>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d663a:	9301      	str	r3, [sp, #4]
   d663c:	bd08      	pop	{r3, pc}
   d663e:	0000      	.short	0x0000
   d6640:	00030220 	.word	0x00030220

000d6644 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b03      	ldr	r3, [pc, #12]	; (d6654 <system_reset+0x10>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d664e:	9301      	str	r3, [sp, #4]
   d6650:	bd08      	pop	{r3, pc}
   d6652:	0000      	.short	0x0000
   d6654:	00030220 	.word	0x00030220

000d6658 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6658:	b508      	push	{r3, lr}
   d665a:	4b02      	ldr	r3, [pc, #8]	; (d6664 <spark_variable+0xc>)
   d665c:	681b      	ldr	r3, [r3, #0]
   d665e:	681b      	ldr	r3, [r3, #0]
   d6660:	9301      	str	r3, [sp, #4]
   d6662:	bd08      	pop	{r3, pc}
   d6664:	00030244 	.word	0x00030244

000d6668 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6668:	b508      	push	{r3, lr}
   d666a:	4b02      	ldr	r3, [pc, #8]	; (d6674 <spark_function+0xc>)
   d666c:	681b      	ldr	r3, [r3, #0]
   d666e:	685b      	ldr	r3, [r3, #4]
   d6670:	9301      	str	r3, [sp, #4]
   d6672:	bd08      	pop	{r3, pc}
   d6674:	00030244 	.word	0x00030244

000d6678 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6678:	b508      	push	{r3, lr}
   d667a:	4b02      	ldr	r3, [pc, #8]	; (d6684 <spark_process+0xc>)
   d667c:	681b      	ldr	r3, [r3, #0]
   d667e:	689b      	ldr	r3, [r3, #8]
   d6680:	9301      	str	r3, [sp, #4]
   d6682:	bd08      	pop	{r3, pc}
   d6684:	00030244 	.word	0x00030244

000d6688 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6688:	b508      	push	{r3, lr}
   d668a:	4b02      	ldr	r3, [pc, #8]	; (d6694 <spark_cloud_flag_connect+0xc>)
   d668c:	681b      	ldr	r3, [r3, #0]
   d668e:	68db      	ldr	r3, [r3, #12]
   d6690:	9301      	str	r3, [sp, #4]
   d6692:	bd08      	pop	{r3, pc}
   d6694:	00030244 	.word	0x00030244

000d6698 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6698:	b508      	push	{r3, lr}
   d669a:	4b02      	ldr	r3, [pc, #8]	; (d66a4 <spark_cloud_flag_connected+0xc>)
   d669c:	681b      	ldr	r3, [r3, #0]
   d669e:	695b      	ldr	r3, [r3, #20]
   d66a0:	9301      	str	r3, [sp, #4]
   d66a2:	bd08      	pop	{r3, pc}
   d66a4:	00030244 	.word	0x00030244

000d66a8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d66a8:	b508      	push	{r3, lr}
   d66aa:	4b02      	ldr	r3, [pc, #8]	; (d66b4 <spark_deviceID+0xc>)
   d66ac:	681b      	ldr	r3, [r3, #0]
   d66ae:	69db      	ldr	r3, [r3, #28]
   d66b0:	9301      	str	r3, [sp, #4]
   d66b2:	bd08      	pop	{r3, pc}
   d66b4:	00030244 	.word	0x00030244

000d66b8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d66b8:	b508      	push	{r3, lr}
   d66ba:	4b02      	ldr	r3, [pc, #8]	; (d66c4 <spark_send_event+0xc>)
   d66bc:	681b      	ldr	r3, [r3, #0]
   d66be:	6a1b      	ldr	r3, [r3, #32]
   d66c0:	9301      	str	r3, [sp, #4]
   d66c2:	bd08      	pop	{r3, pc}
   d66c4:	00030244 	.word	0x00030244

000d66c8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d66c8:	b508      	push	{r3, lr}
   d66ca:	4b02      	ldr	r3, [pc, #8]	; (d66d4 <spark_subscribe+0xc>)
   d66cc:	681b      	ldr	r3, [r3, #0]
   d66ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d66d0:	9301      	str	r3, [sp, #4]
   d66d2:	bd08      	pop	{r3, pc}
   d66d4:	00030244 	.word	0x00030244

000d66d8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d66d8:	b508      	push	{r3, lr}
   d66da:	4b02      	ldr	r3, [pc, #8]	; (d66e4 <spark_sync_time+0xc>)
   d66dc:	681b      	ldr	r3, [r3, #0]
   d66de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66e0:	9301      	str	r3, [sp, #4]
   d66e2:	bd08      	pop	{r3, pc}
   d66e4:	00030244 	.word	0x00030244

000d66e8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d66e8:	b508      	push	{r3, lr}
   d66ea:	4b02      	ldr	r3, [pc, #8]	; (d66f4 <spark_sync_time_pending+0xc>)
   d66ec:	681b      	ldr	r3, [r3, #0]
   d66ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66f0:	9301      	str	r3, [sp, #4]
   d66f2:	bd08      	pop	{r3, pc}
   d66f4:	00030244 	.word	0x00030244

000d66f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d66f8:	b508      	push	{r3, lr}
   d66fa:	4b02      	ldr	r3, [pc, #8]	; (d6704 <spark_set_random_seed_from_cloud_handler+0xc>)
   d66fc:	681b      	ldr	r3, [r3, #0]
   d66fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6700:	9301      	str	r3, [sp, #4]
   d6702:	bd08      	pop	{r3, pc}
   d6704:	00030244 	.word	0x00030244

000d6708 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d6708:	b508      	push	{r3, lr}
   d670a:	4b02      	ldr	r3, [pc, #8]	; (d6714 <spark_cloud_disconnect+0xc>)
   d670c:	681b      	ldr	r3, [r3, #0]
   d670e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6710:	9301      	str	r3, [sp, #4]
   d6712:	bd08      	pop	{r3, pc}
   d6714:	00030244 	.word	0x00030244

000d6718 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6718:	b508      	push	{r3, lr}
   d671a:	4b02      	ldr	r3, [pc, #8]	; (d6724 <network_connect+0xc>)
   d671c:	681b      	ldr	r3, [r3, #0]
   d671e:	685b      	ldr	r3, [r3, #4]
   d6720:	9301      	str	r3, [sp, #4]
   d6722:	bd08      	pop	{r3, pc}
   d6724:	00030240 	.word	0x00030240

000d6728 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6728:	b508      	push	{r3, lr}
   d672a:	4b02      	ldr	r3, [pc, #8]	; (d6734 <network_connecting+0xc>)
   d672c:	681b      	ldr	r3, [r3, #0]
   d672e:	689b      	ldr	r3, [r3, #8]
   d6730:	9301      	str	r3, [sp, #4]
   d6732:	bd08      	pop	{r3, pc}
   d6734:	00030240 	.word	0x00030240

000d6738 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6738:	b508      	push	{r3, lr}
   d673a:	4b02      	ldr	r3, [pc, #8]	; (d6744 <network_disconnect+0xc>)
   d673c:	681b      	ldr	r3, [r3, #0]
   d673e:	68db      	ldr	r3, [r3, #12]
   d6740:	9301      	str	r3, [sp, #4]
   d6742:	bd08      	pop	{r3, pc}
   d6744:	00030240 	.word	0x00030240

000d6748 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6748:	b508      	push	{r3, lr}
   d674a:	4b02      	ldr	r3, [pc, #8]	; (d6754 <network_ready+0xc>)
   d674c:	681b      	ldr	r3, [r3, #0]
   d674e:	691b      	ldr	r3, [r3, #16]
   d6750:	9301      	str	r3, [sp, #4]
   d6752:	bd08      	pop	{r3, pc}
   d6754:	00030240 	.word	0x00030240

000d6758 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6758:	b508      	push	{r3, lr}
   d675a:	4b02      	ldr	r3, [pc, #8]	; (d6764 <network_on+0xc>)
   d675c:	681b      	ldr	r3, [r3, #0]
   d675e:	695b      	ldr	r3, [r3, #20]
   d6760:	9301      	str	r3, [sp, #4]
   d6762:	bd08      	pop	{r3, pc}
   d6764:	00030240 	.word	0x00030240

000d6768 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6768:	b508      	push	{r3, lr}
   d676a:	4b02      	ldr	r3, [pc, #8]	; (d6774 <network_off+0xc>)
   d676c:	681b      	ldr	r3, [r3, #0]
   d676e:	699b      	ldr	r3, [r3, #24]
   d6770:	9301      	str	r3, [sp, #4]
   d6772:	bd08      	pop	{r3, pc}
   d6774:	00030240 	.word	0x00030240

000d6778 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6778:	b508      	push	{r3, lr}
   d677a:	4b02      	ldr	r3, [pc, #8]	; (d6784 <network_listen+0xc>)
   d677c:	681b      	ldr	r3, [r3, #0]
   d677e:	69db      	ldr	r3, [r3, #28]
   d6780:	9301      	str	r3, [sp, #4]
   d6782:	bd08      	pop	{r3, pc}
   d6784:	00030240 	.word	0x00030240

000d6788 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6788:	b508      	push	{r3, lr}
   d678a:	4b02      	ldr	r3, [pc, #8]	; (d6794 <network_listening+0xc>)
   d678c:	681b      	ldr	r3, [r3, #0]
   d678e:	6a1b      	ldr	r3, [r3, #32]
   d6790:	9301      	str	r3, [sp, #4]
   d6792:	bd08      	pop	{r3, pc}
   d6794:	00030240 	.word	0x00030240

000d6798 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6798:	b508      	push	{r3, lr}
   d679a:	4b02      	ldr	r3, [pc, #8]	; (d67a4 <network_set_listen_timeout+0xc>)
   d679c:	681b      	ldr	r3, [r3, #0]
   d679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67a0:	9301      	str	r3, [sp, #4]
   d67a2:	bd08      	pop	{r3, pc}
   d67a4:	00030240 	.word	0x00030240

000d67a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d67a8:	b508      	push	{r3, lr}
   d67aa:	4b02      	ldr	r3, [pc, #8]	; (d67b4 <network_get_listen_timeout+0xc>)
   d67ac:	681b      	ldr	r3, [r3, #0]
   d67ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d67b0:	9301      	str	r3, [sp, #4]
   d67b2:	bd08      	pop	{r3, pc}
   d67b4:	00030240 	.word	0x00030240

000d67b8 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d67b8:	b508      	push	{r3, lr}
   d67ba:	4b02      	ldr	r3, [pc, #8]	; (d67c4 <malloc+0xc>)
   d67bc:	681b      	ldr	r3, [r3, #0]
   d67be:	681b      	ldr	r3, [r3, #0]
   d67c0:	9301      	str	r3, [sp, #4]
   d67c2:	bd08      	pop	{r3, pc}
   d67c4:	0003021c 	.word	0x0003021c

000d67c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d67c8:	b508      	push	{r3, lr}
   d67ca:	4b02      	ldr	r3, [pc, #8]	; (d67d4 <free+0xc>)
   d67cc:	681b      	ldr	r3, [r3, #0]
   d67ce:	685b      	ldr	r3, [r3, #4]
   d67d0:	9301      	str	r3, [sp, #4]
   d67d2:	bd08      	pop	{r3, pc}
   d67d4:	0003021c 	.word	0x0003021c

000d67d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d67d8:	b508      	push	{r3, lr}
   d67da:	4b02      	ldr	r3, [pc, #8]	; (d67e4 <realloc+0xc>)
   d67dc:	681b      	ldr	r3, [r3, #0]
   d67de:	689b      	ldr	r3, [r3, #8]
   d67e0:	9301      	str	r3, [sp, #4]
   d67e2:	bd08      	pop	{r3, pc}
   d67e4:	0003021c 	.word	0x0003021c

000d67e8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d67e8:	b508      	push	{r3, lr}
   d67ea:	4b02      	ldr	r3, [pc, #8]	; (d67f4 <siprintf+0xc>)
   d67ec:	681b      	ldr	r3, [r3, #0]
   d67ee:	691b      	ldr	r3, [r3, #16]
   d67f0:	9301      	str	r3, [sp, #4]
   d67f2:	bd08      	pop	{r3, pc}
   d67f4:	0003021c 	.word	0x0003021c

000d67f8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d67f8:	b508      	push	{r3, lr}
   d67fa:	4b02      	ldr	r3, [pc, #8]	; (d6804 <siscanf+0xc>)
   d67fc:	681b      	ldr	r3, [r3, #0]
   d67fe:	699b      	ldr	r3, [r3, #24]
   d6800:	9301      	str	r3, [sp, #4]
   d6802:	bd08      	pop	{r3, pc}
   d6804:	0003021c 	.word	0x0003021c

000d6808 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6808:	b508      	push	{r3, lr}
   d680a:	4b02      	ldr	r3, [pc, #8]	; (d6814 <snprintf+0xc>)
   d680c:	681b      	ldr	r3, [r3, #0]
   d680e:	69db      	ldr	r3, [r3, #28]
   d6810:	9301      	str	r3, [sp, #4]
   d6812:	bd08      	pop	{r3, pc}
   d6814:	0003021c 	.word	0x0003021c

000d6818 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6818:	b508      	push	{r3, lr}
   d681a:	4b02      	ldr	r3, [pc, #8]	; (d6824 <abort+0xc>)
   d681c:	681b      	ldr	r3, [r3, #0]
   d681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6820:	9301      	str	r3, [sp, #4]
   d6822:	bd08      	pop	{r3, pc}
   d6824:	0003021c 	.word	0x0003021c

000d6828 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6828:	b508      	push	{r3, lr}
   d682a:	4b02      	ldr	r3, [pc, #8]	; (d6834 <_malloc_r+0xc>)
   d682c:	681b      	ldr	r3, [r3, #0]
   d682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6830:	9301      	str	r3, [sp, #4]
   d6832:	bd08      	pop	{r3, pc}
   d6834:	0003021c 	.word	0x0003021c

000d6838 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6838:	b508      	push	{r3, lr}
   d683a:	4b02      	ldr	r3, [pc, #8]	; (d6844 <newlib_impure_ptr_callback+0xc>)
   d683c:	681b      	ldr	r3, [r3, #0]
   d683e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6840:	9301      	str	r3, [sp, #4]
   d6842:	bd08      	pop	{r3, pc}
   d6844:	0003021c 	.word	0x0003021c

000d6848 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d6848:	428a      	cmp	r2, r1
{
   d684a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d684c:	d007      	beq.n	d685e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d684e:	9c02      	ldr	r4, [sp, #8]
   d6850:	1a40      	subs	r0, r0, r1
   d6852:	1ae4      	subs	r4, r4, r3
   d6854:	4360      	muls	r0, r4
   d6856:	1a52      	subs	r2, r2, r1
   d6858:	fb90 f0f2 	sdiv	r0, r0, r2
   d685c:	4418      	add	r0, r3
}
   d685e:	bd10      	pop	{r4, pc}

000d6860 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6860:	2100      	movs	r1, #0
   d6862:	f7ff be97 	b.w	d6594 <system_delay_ms>

000d6866 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6866:	b510      	push	{r4, lr}
      if (_M_empty())
   d6868:	6883      	ldr	r3, [r0, #8]
   d686a:	4604      	mov	r4, r0
   d686c:	b90b      	cbnz	r3, d6872 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d686e:	f001 fcf4 	bl	d825a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6872:	68c3      	ldr	r3, [r0, #12]
   d6874:	4798      	blx	r3
      if (_M_manager)
   d6876:	68a3      	ldr	r3, [r4, #8]
   d6878:	b11b      	cbz	r3, d6882 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d687a:	2203      	movs	r2, #3
   d687c:	4621      	mov	r1, r4
   d687e:	4620      	mov	r0, r4
   d6880:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6882:	4620      	mov	r0, r4
   d6884:	2110      	movs	r1, #16
}
   d6886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d688a:	f001 bce0 	b.w	d824e <_ZdlPvj>

000d688e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d688e:	b510      	push	{r4, lr}
   d6890:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6892:	6800      	ldr	r0, [r0, #0]
   d6894:	b108      	cbz	r0, d689a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6896:	f7ff fca3 	bl	d61e0 <os_mutex_recursive_destroy>
    }
   d689a:	4620      	mov	r0, r4
   d689c:	bd10      	pop	{r4, pc}

000d689e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d689e:	680b      	ldr	r3, [r1, #0]
   d68a0:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d68a2:	b113      	cbz	r3, d68aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d68a4:	685a      	ldr	r2, [r3, #4]
   d68a6:	3201      	adds	r2, #1
   d68a8:	605a      	str	r2, [r3, #4]
      }
   d68aa:	4770      	bx	lr

000d68ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d68ac:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d68ae:	4c06      	ldr	r4, [pc, #24]	; (d68c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d68b0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d68b2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d68b4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d68b6:	f7ff fc8b 	bl	d61d0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d68ba:	4620      	mov	r0, r4
   d68bc:	4a03      	ldr	r2, [pc, #12]	; (d68cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d68be:	4904      	ldr	r1, [pc, #16]	; (d68d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d68c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d68c4:	f001 bcbe 	b.w	d8244 <__aeabi_atexit>
   d68c8:	2003e58c 	.word	0x2003e58c
   d68cc:	2003e3f8 	.word	0x2003e3f8
   d68d0:	000d688f 	.word	0x000d688f

000d68d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d68d4:	2200      	movs	r2, #0
   d68d6:	6840      	ldr	r0, [r0, #4]
   d68d8:	4611      	mov	r1, r2
   d68da:	f7ff bf35 	b.w	d6748 <network_ready>

000d68de <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d68de:	2200      	movs	r2, #0
   d68e0:	6840      	ldr	r0, [r0, #4]
   d68e2:	4611      	mov	r1, r2
   d68e4:	f7ff bf50 	b.w	d6788 <network_listening>

000d68e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d68e8:	2200      	movs	r2, #0
   d68ea:	6840      	ldr	r0, [r0, #4]
   d68ec:	4611      	mov	r1, r2
   d68ee:	f7ff bf5b 	b.w	d67a8 <network_get_listen_timeout>

000d68f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d68f2:	6840      	ldr	r0, [r0, #4]
   d68f4:	2200      	movs	r2, #0
   d68f6:	f7ff bf4f 	b.w	d6798 <network_set_listen_timeout>

000d68fa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d68fa:	6840      	ldr	r0, [r0, #4]
   d68fc:	2200      	movs	r2, #0
   d68fe:	f081 0101 	eor.w	r1, r1, #1
   d6902:	f7ff bf39 	b.w	d6778 <network_listen>

000d6906 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6906:	2300      	movs	r3, #0
   d6908:	6840      	ldr	r0, [r0, #4]
   d690a:	461a      	mov	r2, r3
   d690c:	4619      	mov	r1, r3
   d690e:	f7ff bf2b 	b.w	d6768 <network_off>

000d6912 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6912:	2300      	movs	r3, #0
   d6914:	6840      	ldr	r0, [r0, #4]
   d6916:	461a      	mov	r2, r3
   d6918:	4619      	mov	r1, r3
   d691a:	f7ff bf1d 	b.w	d6758 <network_on>

000d691e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d691e:	2200      	movs	r2, #0
   d6920:	6840      	ldr	r0, [r0, #4]
   d6922:	4611      	mov	r1, r2
   d6924:	f7ff bf00 	b.w	d6728 <network_connecting>

000d6928 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6928:	6840      	ldr	r0, [r0, #4]
   d692a:	2200      	movs	r2, #0
   d692c:	2102      	movs	r1, #2
   d692e:	f7ff bf03 	b.w	d6738 <network_disconnect>

000d6932 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6932:	2300      	movs	r3, #0
   d6934:	6840      	ldr	r0, [r0, #4]
   d6936:	461a      	mov	r2, r3
   d6938:	f7ff beee 	b.w	d6718 <network_connect>

000d693c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d693c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getSignalQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d693e:	4b1b      	ldr	r3, [pc, #108]	; (d69ac <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6940:	6003      	str	r3, [r0, #0]
   d6942:	2500      	movs	r5, #0
   d6944:	460f      	mov	r7, r1
   d6946:	3328      	adds	r3, #40	; 0x28
   d6948:	2618      	movs	r6, #24
   d694a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d694e:	b089      	sub	sp, #36	; 0x24
   d6950:	6043      	str	r3, [r0, #4]
   d6952:	4632      	mov	r2, r6
   d6954:	4629      	mov	r1, r5
   d6956:	4604      	mov	r4, r0
   d6958:	3010      	adds	r0, #16
   d695a:	f002 fc4f 	bl	d91fc <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d695e:	6878      	ldr	r0, [r7, #4]
   d6960:	462a      	mov	r2, r5
   d6962:	4629      	mov	r1, r5
   d6964:	f7ff fef0 	bl	d6748 <network_ready>
   d6968:	b918      	cbnz	r0, d6972 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d696a:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d696c:	4620      	mov	r0, r4
   d696e:	b009      	add	sp, #36	; 0x24
   d6970:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d6972:	4629      	mov	r1, r5
   d6974:	4632      	mov	r2, r6
   d6976:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d6978:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d697c:	f002 fc3e 	bl	d91fc <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6980:	a902      	add	r1, sp, #8
   d6982:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d6984:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6988:	f7ff fbe2 	bl	d6150 <cellular_signal>
   d698c:	b110      	cbz	r0, d6994 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d698e:	2301      	movs	r3, #1
   d6990:	60a3      	str	r3, [r4, #8]
            return sig;
   d6992:	e7eb      	b.n	d696c <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d6994:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6996:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d6998:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d699a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d699c:	b90b      	cbnz	r3, d69a2 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d699e:	2302      	movs	r3, #2
   d69a0:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d69a2:	a902      	add	r1, sp, #8
   d69a4:	4620      	mov	r0, r4
   d69a6:	f000 f8ae 	bl	d6b06 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d69aa:	e7df      	b.n	d696c <_ZN5spark13CellularClass4RSSIEv+0x30>
   d69ac:	000dc0dc 	.word	0x000dc0dc

000d69b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d69b0:	4b08      	ldr	r3, [pc, #32]	; (d69d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d69b2:	b510      	push	{r4, lr}
   d69b4:	2428      	movs	r4, #40	; 0x28
   d69b6:	4622      	mov	r2, r4
   d69b8:	4618      	mov	r0, r3
   d69ba:	2100      	movs	r1, #0
   d69bc:	f002 fc1e 	bl	d91fc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d69c0:	4b05      	ldr	r3, [pc, #20]	; (d69d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d69c2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d69c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d69c8:	6042      	str	r2, [r0, #4]
   d69ca:	2204      	movs	r2, #4
   d69cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d69ce:	4a03      	ldr	r2, [pc, #12]	; (d69dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d69d0:	601a      	str	r2, [r3, #0]
   d69d2:	bd10      	pop	{r4, pc}
   d69d4:	2003e598 	.word	0x2003e598
   d69d8:	2003e590 	.word	0x2003e590
   d69dc:	000dc0a8 	.word	0x000dc0a8

000d69e0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d69e0:	4770      	bx	lr

000d69e2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d69e2:	7d00      	ldrb	r0, [r0, #20]
   d69e4:	4770      	bx	lr

000d69e6 <_ZN14CellularSignalD0Ev>:
   d69e6:	b510      	push	{r4, lr}
   d69e8:	2128      	movs	r1, #40	; 0x28
   d69ea:	4604      	mov	r4, r0
   d69ec:	f001 fc2f 	bl	d824e <_ZdlPvj>
   d69f0:	4620      	mov	r0, r4
   d69f2:	bd10      	pop	{r4, pc}

000d69f4 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d69f4:	7d03      	ldrb	r3, [r0, #20]
   d69f6:	b17b      	cbz	r3, d6a18 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d69f8:	69c3      	ldr	r3, [r0, #28]
   d69fa:	2b00      	cmp	r3, #0
   d69fc:	db0c      	blt.n	d6a18 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d69fe:	ee07 3a90 	vmov	s15, r3
   d6a02:	ed9f 7a07 	vldr	s14, [pc, #28]	; d6a20 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d6a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a0a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6a0e:	eddf 7a05 	vldr	s15, [pc, #20]	; d6a24 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d6a12:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6a16:	4770      	bx	lr
    }

    return -1.0f;
   d6a18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6a1c:	4770      	bx	lr
   d6a1e:	bf00      	nop
   d6a20:	477fff00 	.word	0x477fff00
   d6a24:	42c80000 	.word	0x42c80000

000d6a28 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d6a28:	7d03      	ldrb	r3, [r0, #20]
   d6a2a:	b163      	cbz	r3, d6a46 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d6a2c:	6983      	ldr	r3, [r0, #24]
   d6a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6a32:	d008      	beq.n	d6a46 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d6a34:	ee07 3a90 	vmov	s15, r3
   d6a38:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6a4c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d6a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a40:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6a44:	4770      	bx	lr
    }

    return 0.0f;
   d6a46:	ed9f 0a02 	vldr	s0, [pc, #8]	; d6a50 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d6a4a:	4770      	bx	lr
   d6a4c:	42c80000 	.word	0x42c80000
   d6a50:	00000000 	.word	0x00000000

000d6a54 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6a54:	7d03      	ldrb	r3, [r0, #20]
   d6a56:	b17b      	cbz	r3, d6a78 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6a58:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d6a5a:	2b00      	cmp	r3, #0
   d6a5c:	db0c      	blt.n	d6a78 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d6a5e:	ee07 3a90 	vmov	s15, r3
   d6a62:	ed9f 7a07 	vldr	s14, [pc, #28]	; d6a80 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a6a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6a6e:	eddf 7a05 	vldr	s15, [pc, #20]	; d6a84 <_ZNK14CellularSignal10getQualityEv+0x30>
   d6a72:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6a76:	4770      	bx	lr
    }

    return -1.0f;
   d6a78:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6a7c:	4770      	bx	lr
   d6a7e:	bf00      	nop
   d6a80:	477fff00 	.word	0x477fff00
   d6a84:	42c80000 	.word	0x42c80000

000d6a88 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6a88:	7d03      	ldrb	r3, [r0, #20]
   d6a8a:	b163      	cbz	r3, d6aa6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d6a8c:	6a03      	ldr	r3, [r0, #32]
   d6a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6a92:	d008      	beq.n	d6aa6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d6a94:	ee07 3a90 	vmov	s15, r3
   d6a98:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6aac <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6aa0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6aa4:	4770      	bx	lr
    }

    return 0.0f;
   d6aa6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d6ab0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d6aaa:	4770      	bx	lr
   d6aac:	42c80000 	.word	0x42c80000
   d6ab0:	00000000 	.word	0x00000000

000d6ab4 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d6ab4:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d6ab6:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d6ab8:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d6aba:	da0a      	bge.n	d6ad2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d6abc:	212d      	movs	r1, #45	; 0x2d
   d6abe:	f000 fdf8 	bl	d76b2 <_ZN5Print5printEc>
            val = -n;
   d6ac2:	4261      	negs	r1, r4
            t = print('-');
   d6ac4:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6ac6:	220a      	movs	r2, #10
   d6ac8:	4630      	mov	r0, r6
   d6aca:	f000 fe0b 	bl	d76e4 <_ZN5Print11printNumberEmh>
    }
}
   d6ace:	4428      	add	r0, r5
   d6ad0:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d6ad2:	4621      	mov	r1, r4
        size_t t = 0;
   d6ad4:	2500      	movs	r5, #0
   d6ad6:	e7f6      	b.n	d6ac6 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d6ad8 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d6ad8:	b570      	push	{r4, r5, r6, lr}
   d6ada:	460c      	mov	r4, r1
   d6adc:	4605      	mov	r5, r0
   d6ade:	6881      	ldr	r1, [r0, #8]
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	f7ff ffe7 	bl	d6ab4 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d6ae6:	212c      	movs	r1, #44	; 0x2c
   d6ae8:	4606      	mov	r6, r0
   d6aea:	4620      	mov	r0, r4
   d6aec:	f000 fde1 	bl	d76b2 <_ZN5Print5printEc>
   d6af0:	68e9      	ldr	r1, [r5, #12]
   d6af2:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d6af4:	4620      	mov	r0, r4
   d6af6:	f7ff ffdd 	bl	d6ab4 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d6afa:	4430      	add	r0, r6
   d6afc:	bd70      	pop	{r4, r5, r6, pc}

000d6afe <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d6afe:	f1a0 0004 	sub.w	r0, r0, #4
   d6b02:	f7ff bfe9 	b.w	d6ad8 <_ZNK14CellularSignal7printToER5Print>

000d6b06 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d6b06:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d6b08:	460d      	mov	r5, r1
   d6b0a:	f100 0410 	add.w	r4, r0, #16
   d6b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b12:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6b16:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d6b1a:	2001      	movs	r0, #1
   d6b1c:	bd30      	pop	{r4, r5, pc}

000d6b1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b1e:	4770      	bx	lr

000d6b20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6b20:	2000      	movs	r0, #0
   d6b22:	4770      	bx	lr

000d6b24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b24:	b510      	push	{r4, lr}
   d6b26:	2110      	movs	r1, #16
   d6b28:	4604      	mov	r4, r0
   d6b2a:	f001 fb90 	bl	d824e <_ZdlPvj>
   d6b2e:	4620      	mov	r0, r4
   d6b30:	bd10      	pop	{r4, pc}

000d6b32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6b32:	b508      	push	{r3, lr}
      { delete this; }
   d6b34:	f7ff fff6 	bl	d6b24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6b38:	bd08      	pop	{r3, pc}

000d6b3a <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6b3a:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6b3c:	2200      	movs	r2, #0
   d6b3e:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6b42:	6002      	str	r2, [r0, #0]
   d6b44:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6b46:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b48:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6b4a:	680c      	ldr	r4, [r1, #0]
   d6b4c:	8085      	strh	r5, [r0, #4]
   d6b4e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b50:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6b52:	bd30      	pop	{r4, r5, pc}

000d6b54 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6b54:	b510      	push	{r4, lr}
   d6b56:	4604      	mov	r4, r0
    free((void*)msg_);
   d6b58:	6800      	ldr	r0, [r0, #0]
   d6b5a:	f7ff fe35 	bl	d67c8 <free>
}
   d6b5e:	4620      	mov	r0, r4
   d6b60:	bd10      	pop	{r4, pc}

000d6b62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6b62:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6b64:	68c4      	ldr	r4, [r0, #12]
   d6b66:	b1f4      	cbz	r4, d6ba6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6b68:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6b6a:	2b02      	cmp	r3, #2
   d6b6c:	d103      	bne.n	d6b76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6b6e:	f104 000c 	add.w	r0, r4, #12
   d6b72:	f7ff ffef 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6b76:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6b78:	b135      	cbz	r5, d6b88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6b7a:	4628      	mov	r0, r5
   d6b7c:	f7fd fb12 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d6b80:	2110      	movs	r1, #16
   d6b82:	4628      	mov	r0, r5
   d6b84:	f001 fb63 	bl	d824e <_ZdlPvj>
   d6b88:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6b8a:	b135      	cbz	r5, d6b9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6b8c:	4628      	mov	r0, r5
   d6b8e:	f7fd fb09 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d6b92:	2110      	movs	r1, #16
   d6b94:	4628      	mov	r0, r5
   d6b96:	f001 fb5a 	bl	d824e <_ZdlPvj>
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	2114      	movs	r1, #20
   d6b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6ba2:	f001 bb54 	b.w	d824e <_ZdlPvj>
   d6ba6:	bd38      	pop	{r3, r4, r5, pc}

000d6ba8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6ba8:	b510      	push	{r4, lr}
   d6baa:	b088      	sub	sp, #32
   d6bac:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6bae:	4668      	mov	r0, sp
   d6bb0:	f000 fe1f 	bl	d77f2 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d6bb4:	4669      	mov	r1, sp
   d6bb6:	a804      	add	r0, sp, #16
   d6bb8:	f000 fe3e 	bl	d7838 <_ZN6StringC1ERKS_>
   d6bbc:	a804      	add	r0, sp, #16
   d6bbe:	47a0      	blx	r4
   d6bc0:	4604      	mov	r4, r0
   d6bc2:	a804      	add	r0, sp, #16
   d6bc4:	f000 fdca 	bl	d775c <_ZN6StringD1Ev>
    String p(param);
   d6bc8:	4668      	mov	r0, sp
   d6bca:	f000 fdc7 	bl	d775c <_ZN6StringD1Ev>
}
   d6bce:	4620      	mov	r0, r4
   d6bd0:	b008      	add	sp, #32
   d6bd2:	bd10      	pop	{r4, pc}

000d6bd4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6bd6:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d6bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d6bdc:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d6bde:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6be0:	461a      	mov	r2, r3
   d6be2:	4669      	mov	r1, sp
   d6be4:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d6be6:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d6bea:	f8ad 4000 	strh.w	r4, [sp]
   d6bee:	f7ff fd3b 	bl	d6668 <spark_function>
}
   d6bf2:	b004      	add	sp, #16
   d6bf4:	bd10      	pop	{r4, pc}

000d6bf6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d6bf6:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d6bf8:	2308      	movs	r3, #8
   d6bfa:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d6bfe:	6803      	ldr	r3, [r0, #0]
   d6c00:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d6c04:	7a03      	ldrb	r3, [r0, #8]
   d6c06:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d6c0a:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d6c0c:	6843      	ldr	r3, [r0, #4]
   d6c0e:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d6c10:	4668      	mov	r0, sp
   d6c12:	f7ff fd79 	bl	d6708 <spark_cloud_disconnect>
}
   d6c16:	b003      	add	sp, #12
   d6c18:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c1e:	460e      	mov	r6, r1
   d6c20:	4604      	mov	r4, r0
   d6c22:	f856 3b04 	ldr.w	r3, [r6], #4
   d6c26:	9300      	str	r3, [sp, #0]
   d6c28:	460d      	mov	r5, r1
   d6c2a:	a801      	add	r0, sp, #4
   d6c2c:	4631      	mov	r1, r6
   d6c2e:	f7ff fe36 	bl	d689e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c32:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c34:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6c36:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c38:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6c3a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6c3c:	2300      	movs	r3, #0
   d6c3e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c40:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6c42:	f7fd fe55 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c46:	4630      	mov	r0, r6
   d6c48:	f7fd fe52 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6c4c:	4628      	mov	r0, r5
   d6c4e:	2108      	movs	r1, #8
   d6c50:	f001 fafd 	bl	d824e <_ZdlPvj>
        return p;
    }
   d6c54:	4620      	mov	r0, r4
   d6c56:	b002      	add	sp, #8
   d6c58:	bd70      	pop	{r4, r5, r6, pc}

000d6c5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6c5a:	b513      	push	{r0, r1, r4, lr}
   d6c5c:	460b      	mov	r3, r1
   d6c5e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c60:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6c64:	466c      	mov	r4, sp
   d6c66:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6c6a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6c6e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6c72:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6c76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6c7a:	b002      	add	sp, #8
   d6c7c:	bd10      	pop	{r4, pc}

000d6c7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6c7e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6c80:	b510      	push	{r4, lr}
      if (_M_empty())
   d6c82:	b90a      	cbnz	r2, d6c88 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6c84:	f001 fae9 	bl	d825a <_ZSt25__throw_bad_function_callv>
    }
   d6c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c8c:	68c3      	ldr	r3, [r0, #12]
   d6c8e:	4718      	bx	r3

000d6c90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6c90:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6c92:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6c94:	f100 0110 	add.w	r1, r0, #16
   d6c98:	f7ff fff1 	bl	d6c7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6c9c:	bd08      	pop	{r3, pc}

000d6c9e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6c9e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6ca0:	b510      	push	{r4, lr}
      if (_M_empty())
   d6ca2:	b90a      	cbnz	r2, d6ca8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6ca4:	f001 fad9 	bl	d825a <_ZSt25__throw_bad_function_callv>
    }
   d6ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cac:	68c3      	ldr	r3, [r0, #12]
   d6cae:	4718      	bx	r3

000d6cb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6cb0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6cb2:	6800      	ldr	r0, [r0, #0]
   d6cb4:	f100 0110 	add.w	r1, r0, #16
   d6cb8:	f7ff fff1 	bl	d6c9e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6cbc:	bd08      	pop	{r3, pc}
	...

000d6cc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6cc0:	b538      	push	{r3, r4, r5, lr}
   d6cc2:	2300      	movs	r3, #0
   d6cc4:	4604      	mov	r4, r0
   d6cc6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6cc8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6cca:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6ccc:	f7fd f9e3 	bl	d4096 <_Znwj>
   d6cd0:	b128      	cbz	r0, d6cde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6cd2:	2301      	movs	r3, #1
   d6cd4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6cd8:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6cda:	6003      	str	r3, [r0, #0]
   d6cdc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6cde:	6020      	str	r0, [r4, #0]
	}
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	bd38      	pop	{r3, r4, r5, pc}
   d6ce4:	000dc110 	.word	0x000dc110

000d6ce8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6ce8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6cea:	2300      	movs	r3, #0
   d6cec:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6cee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6cf0:	4604      	mov	r4, r0
   d6cf2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6cf4:	b12b      	cbz	r3, d6d02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6cf6:	2202      	movs	r2, #2
   d6cf8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6cfa:	68eb      	ldr	r3, [r5, #12]
   d6cfc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6cfe:	68ab      	ldr	r3, [r5, #8]
   d6d00:	60a3      	str	r3, [r4, #8]
    }
   d6d02:	4620      	mov	r0, r4
   d6d04:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d0a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6d0c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6d0e:	4668      	mov	r0, sp
   d6d10:	f7ff ff13 	bl	d6b3a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6d14:	f04f 0302 	mov.w	r3, #2
   d6d18:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6d1c:	2a00      	cmp	r2, #0
   d6d1e:	d103      	bne.n	d6d28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6d20:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6d24:	2900      	cmp	r1, #0
   d6d26:	d1f7      	bne.n	d6d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6d28:	d125      	bne.n	d6d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6d2a:	f104 050c 	add.w	r5, r4, #12
   d6d2e:	4669      	mov	r1, sp
   d6d30:	4628      	mov	r0, r5
   d6d32:	f7ff ff02 	bl	d6b3a <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6d36:	f3bf 8f5b 	dmb	ish
   d6d3a:	2301      	movs	r3, #1
   d6d3c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6d3e:	2000      	movs	r0, #0
   d6d40:	f104 0308 	add.w	r3, r4, #8
   d6d44:	f3bf 8f5b 	dmb	ish
   d6d48:	e853 6f00 	ldrex	r6, [r3]
   d6d4c:	e843 0200 	strex	r2, r0, [r3]
   d6d50:	2a00      	cmp	r2, #0
   d6d52:	d1f9      	bne.n	d6d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6d54:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6d58:	b16e      	cbz	r6, d6d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6d5a:	f7ff fc33 	bl	d65c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6d5e:	b178      	cbz	r0, d6d80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d60:	4629      	mov	r1, r5
   d6d62:	4630      	mov	r0, r6
   d6d64:	f7ff ff8b 	bl	d6c7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6d68:	4630      	mov	r0, r6
   d6d6a:	f7fd fa1b 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6d6e:	2110      	movs	r1, #16
   d6d70:	4630      	mov	r0, r6
   d6d72:	f001 fa6c 	bl	d824e <_ZdlPvj>
        p_->setError(std::move(error));
   d6d76:	4668      	mov	r0, sp
   d6d78:	f7ff feec 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
    }
   d6d7c:	b009      	add	sp, #36	; 0x24
   d6d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d80:	4631      	mov	r1, r6
   d6d82:	a802      	add	r0, sp, #8
   d6d84:	f7ff ffb0 	bl	d6ce8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6d88:	68e0      	ldr	r0, [r4, #12]
   d6d8a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6d8e:	b108      	cbz	r0, d6d94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6d90:	f002 fa72 	bl	d9278 <strdup>
        type_(type) {
   d6d94:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d96:	2010      	movs	r0, #16
   d6d98:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6d9c:	f7fd f97b 	bl	d4096 <_Znwj>
   d6da0:	4605      	mov	r5, r0
   d6da2:	b1e8      	cbz	r0, d6de0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6da4:	2700      	movs	r7, #0
   d6da6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6da8:	2018      	movs	r0, #24
   d6daa:	f7fd f974 	bl	d4096 <_Znwj>
   d6dae:	4604      	mov	r4, r0
   d6db0:	b188      	cbz	r0, d6dd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6db2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6db4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6db6:	a802      	add	r0, sp, #8
   d6db8:	f7ff ff4f 	bl	d6c5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dbc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6dbe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dc0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dc2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6dc4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6dc6:	a906      	add	r1, sp, #24
   d6dc8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dca:	60e3      	str	r3, [r4, #12]
   d6dcc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6dd0:	9205      	str	r2, [sp, #20]
   d6dd2:	f7ff feb2 	bl	d6b3a <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6dd6:	4b08      	ldr	r3, [pc, #32]	; (d6df8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6dd8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6dda:	4b08      	ldr	r3, [pc, #32]	; (d6dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ddc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6dde:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6de0:	a806      	add	r0, sp, #24
   d6de2:	f7ff feb7 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6de6:	a802      	add	r0, sp, #8
   d6de8:	f7fd f9dc 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6dec:	2200      	movs	r2, #0
   d6dee:	4629      	mov	r1, r5
   d6df0:	4803      	ldr	r0, [pc, #12]	; (d6e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6df2:	f7ff fbef 	bl	d65d4 <application_thread_invoke>
   d6df6:	e7b7      	b.n	d6d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6df8:	000d6c91 	.word	0x000d6c91
   d6dfc:	000d6f29 	.word	0x000d6f29
   d6e00:	000d6867 	.word	0x000d6867

000d6e04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e08:	b08a      	sub	sp, #40	; 0x28
   d6e0a:	4605      	mov	r5, r0
   d6e0c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6e10:	460c      	mov	r4, r1
   d6e12:	4617      	mov	r7, r2
   d6e14:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e16:	f7ff fc3f 	bl	d6698 <spark_cloud_flag_connected>
   d6e1a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6e1c:	4682      	mov	sl, r0
   d6e1e:	bb38      	cbnz	r0, d6e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6e20:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6e24:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e26:	a905      	add	r1, sp, #20
   d6e28:	4630      	mov	r0, r6
   d6e2a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6e2e:	f7ff fe84 	bl	d6b3a <_ZN8particle5ErrorC1EOS0_>
   d6e32:	2014      	movs	r0, #20
   d6e34:	f7fd f92f 	bl	d4096 <_Znwj>
   d6e38:	4604      	mov	r4, r0
   d6e3a:	b148      	cbz	r0, d6e50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6e3c:	2302      	movs	r3, #2
   d6e3e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e40:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e42:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e46:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6e48:	4631      	mov	r1, r6
   d6e4a:	300c      	adds	r0, #12
   d6e4c:	f7ff fe75 	bl	d6b3a <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e50:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6e52:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e54:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6e58:	f7ff ff32 	bl	d6cc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e5c:	4630      	mov	r0, r6
   d6e5e:	f7ff fe79 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6e62:	a805      	add	r0, sp, #20
   d6e64:	f7ff fe76 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
}
   d6e68:	4628      	mov	r0, r5
   d6e6a:	b00a      	add	sp, #40	; 0x28
   d6e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6e70:	230c      	movs	r3, #12
   d6e72:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6e76:	2014      	movs	r0, #20
   d6e78:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6e7c:	9307      	str	r3, [sp, #28]
   d6e7e:	f7fd f90a 	bl	d4096 <_Znwj>
   d6e82:	4601      	mov	r1, r0
   d6e84:	b128      	cbz	r0, d6e92 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e86:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6e8a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e8e:	f880 a001 	strb.w	sl, [r0, #1]
   d6e92:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e94:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6e96:	f7ff ff13 	bl	d6cc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6e9a:	4b22      	ldr	r3, [pc, #136]	; (d6f24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6e9c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6e9e:	2008      	movs	r0, #8
   d6ea0:	f7fd f8f9 	bl	d4096 <_Znwj>
   d6ea4:	4682      	mov	sl, r0
   d6ea6:	b128      	cbz	r0, d6eb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ea8:	9b03      	ldr	r3, [sp, #12]
   d6eaa:	f840 3b04 	str.w	r3, [r0], #4
   d6eae:	a904      	add	r1, sp, #16
   d6eb0:	f7ff fcf5 	bl	d689e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6eb4:	9600      	str	r6, [sp, #0]
   d6eb6:	fa5f f389 	uxtb.w	r3, r9
   d6eba:	4642      	mov	r2, r8
   d6ebc:	4639      	mov	r1, r7
   d6ebe:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6ec0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6ec4:	f7ff fbf8 	bl	d66b8 <spark_send_event>
   d6ec8:	b9b8      	cbnz	r0, d6efa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6eca:	9b03      	ldr	r3, [sp, #12]
   d6ecc:	785b      	ldrb	r3, [r3, #1]
   d6ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6ed2:	b993      	cbnz	r3, d6efa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6ed4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6ed8:	a905      	add	r1, sp, #20
   d6eda:	a803      	add	r0, sp, #12
   d6edc:	9205      	str	r2, [sp, #20]
   d6ede:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6ee2:	f7ff ff11 	bl	d6d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6ee6:	a805      	add	r0, sp, #20
   d6ee8:	f7ff fe34 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6eec:	a805      	add	r0, sp, #20
   d6eee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6ef0:	f7ff fe94 	bl	d6c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6ef4:	a806      	add	r0, sp, #24
   d6ef6:	f7fd fcfb 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6efa:	9b03      	ldr	r3, [sp, #12]
   d6efc:	9305      	str	r3, [sp, #20]
   d6efe:	a904      	add	r1, sp, #16
   d6f00:	a806      	add	r0, sp, #24
   d6f02:	f7ff fccc 	bl	d689e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6f06:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6f08:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6f0a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6f0c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6f0e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6f10:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6f12:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6f14:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6f16:	f7fd fceb 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f1a:	a804      	add	r0, sp, #16
   d6f1c:	f7fd fce8 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6f20:	e7a2      	b.n	d6e68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6f22:	bf00      	nop
   d6f24:	000d6fed 	.word	0x000d6fed

000d6f28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6f28:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f2c:	4605      	mov	r5, r0
	  switch (__op)
   d6f2e:	d007      	beq.n	d6f40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6f30:	2a03      	cmp	r2, #3
   d6f32:	d018      	beq.n	d6f66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6f34:	2a01      	cmp	r2, #1
   d6f36:	d101      	bne.n	d6f3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6f38:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f3a:	6003      	str	r3, [r0, #0]
	}
   d6f3c:	2000      	movs	r0, #0
   d6f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f40:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6f42:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f44:	f7fd f8a7 	bl	d4096 <_Znwj>
   d6f48:	4604      	mov	r4, r0
   d6f4a:	b150      	cbz	r0, d6f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6f4c:	4631      	mov	r1, r6
   d6f4e:	f7ff fecb 	bl	d6ce8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6f52:	6930      	ldr	r0, [r6, #16]
   d6f54:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6f58:	b108      	cbz	r0, d6f5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6f5a:	f002 f98d 	bl	d9278 <strdup>
        type_(type) {
   d6f5e:	6120      	str	r0, [r4, #16]
   d6f60:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6f62:	602c      	str	r4, [r5, #0]
	}
   d6f64:	e7ea      	b.n	d6f3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6f66:	6804      	ldr	r4, [r0, #0]
   d6f68:	2c00      	cmp	r4, #0
   d6f6a:	d0e7      	beq.n	d6f3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6f6c:	f104 0010 	add.w	r0, r4, #16
   d6f70:	f7ff fdf0 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6f74:	4620      	mov	r0, r4
   d6f76:	f7fd f915 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6f7a:	2118      	movs	r1, #24
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	f001 f966 	bl	d824e <_ZdlPvj>
   d6f82:	e7db      	b.n	d6f3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6f84 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6f84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6f86:	2300      	movs	r3, #0
   d6f88:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6f8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6f8c:	4604      	mov	r4, r0
   d6f8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6f90:	b12b      	cbz	r3, d6f9e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6f92:	2202      	movs	r2, #2
   d6f94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6f96:	68eb      	ldr	r3, [r5, #12]
   d6f98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6f9a:	68ab      	ldr	r3, [r5, #8]
   d6f9c:	60a3      	str	r3, [r4, #8]
    }
   d6f9e:	4620      	mov	r0, r4
   d6fa0:	bd38      	pop	{r3, r4, r5, pc}

000d6fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6fa2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6fa4:	b570      	push	{r4, r5, r6, lr}
   d6fa6:	4604      	mov	r4, r0
	  switch (__op)
   d6fa8:	d007      	beq.n	d6fba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6faa:	2a03      	cmp	r2, #3
   d6fac:	d012      	beq.n	d6fd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6fae:	2a01      	cmp	r2, #1
   d6fb0:	d101      	bne.n	d6fb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6fb2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6fb4:	6003      	str	r3, [r0, #0]
	}
   d6fb6:	2000      	movs	r0, #0
   d6fb8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6fba:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6fbc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6fbe:	f7fd f86a 	bl	d4096 <_Znwj>
   d6fc2:	4605      	mov	r5, r0
   d6fc4:	b120      	cbz	r0, d6fd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6fc6:	4631      	mov	r1, r6
   d6fc8:	f7ff ffdc 	bl	d6f84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6fcc:	7c33      	ldrb	r3, [r6, #16]
   d6fce:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6fd0:	6025      	str	r5, [r4, #0]
	}
   d6fd2:	e7f0      	b.n	d6fb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6fd4:	6804      	ldr	r4, [r0, #0]
   d6fd6:	2c00      	cmp	r4, #0
   d6fd8:	d0ed      	beq.n	d6fb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6fda:	4620      	mov	r0, r4
   d6fdc:	f7fd f8e2 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6fe0:	2114      	movs	r1, #20
   d6fe2:	4620      	mov	r0, r4
   d6fe4:	f001 f933 	bl	d824e <_ZdlPvj>
   d6fe8:	e7e5      	b.n	d6fb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6fec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6fee:	b089      	sub	sp, #36	; 0x24
   d6ff0:	4604      	mov	r4, r0
   d6ff2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6ff4:	a801      	add	r0, sp, #4
   d6ff6:	4611      	mov	r1, r2
   d6ff8:	f7ff fe10 	bl	d6c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6ffc:	b1a4      	cbz	r4, d7028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6ffe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7000:	b11d      	cbz	r5, d700a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7002:	4628      	mov	r0, r5
   d7004:	f002 f938 	bl	d9278 <strdup>
   d7008:	4605      	mov	r5, r0
   d700a:	a801      	add	r0, sp, #4
   d700c:	a903      	add	r1, sp, #12
        type_(type) {
   d700e:	9503      	str	r5, [sp, #12]
   d7010:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7014:	f7ff fe78 	bl	d6d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7018:	a803      	add	r0, sp, #12
   d701a:	f7ff fd9b 	bl	d6b54 <_ZN8particle5ErrorD1Ev>
   d701e:	a802      	add	r0, sp, #8
   d7020:	f7fd fc66 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7024:	b009      	add	sp, #36	; 0x24
   d7026:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7028:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d702a:	2301      	movs	r3, #1
   d702c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7030:	2a00      	cmp	r2, #0
   d7032:	d103      	bne.n	d703c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7034:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7038:	2900      	cmp	r1, #0
   d703a:	d1f7      	bne.n	d702c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d703c:	d1ef      	bne.n	d701e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d703e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7040:	f3bf 8f5b 	dmb	ish
   d7044:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7046:	1d2b      	adds	r3, r5, #4
   d7048:	f3bf 8f5b 	dmb	ish
   d704c:	e853 6f00 	ldrex	r6, [r3]
   d7050:	e843 4200 	strex	r2, r4, [r3]
   d7054:	2a00      	cmp	r2, #0
   d7056:	d1f9      	bne.n	d704c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7058:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d705c:	2e00      	cmp	r6, #0
   d705e:	d0de      	beq.n	d701e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7060:	4620      	mov	r0, r4
   d7062:	f7ff faaf 	bl	d65c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7066:	4607      	mov	r7, r0
   d7068:	b160      	cbz	r0, d7084 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d706a:	f105 010c 	add.w	r1, r5, #12
   d706e:	4630      	mov	r0, r6
   d7070:	f7ff fe15 	bl	d6c9e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7074:	4630      	mov	r0, r6
   d7076:	f7fd f895 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d707a:	2110      	movs	r1, #16
   d707c:	4630      	mov	r0, r6
   d707e:	f001 f8e6 	bl	d824e <_ZdlPvj>
   d7082:	e7cc      	b.n	d701e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7084:	4631      	mov	r1, r6
   d7086:	a803      	add	r0, sp, #12
   d7088:	f7ff ff7c 	bl	d6f84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d708c:	7b2b      	ldrb	r3, [r5, #12]
   d708e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7092:	2010      	movs	r0, #16
   d7094:	f7fc ffff 	bl	d4096 <_Znwj>
   d7098:	4605      	mov	r5, r0
   d709a:	b1d0      	cbz	r0, d70d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d709c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d709e:	2014      	movs	r0, #20
   d70a0:	f7fc fff9 	bl	d4096 <_Znwj>
   d70a4:	4604      	mov	r4, r0
   d70a6:	b178      	cbz	r0, d70c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d70a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d70aa:	4601      	mov	r1, r0
   d70ac:	a803      	add	r0, sp, #12
   d70ae:	f7ff fdd4 	bl	d6c5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d70b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d70b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d70ba:	9205      	str	r2, [sp, #20]
   d70bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d70be:	60e3      	str	r3, [r4, #12]
   d70c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d70c4:	9206      	str	r2, [sp, #24]
   d70c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d70c8:	4b06      	ldr	r3, [pc, #24]	; (d70e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d70ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d70cc:	4b06      	ldr	r3, [pc, #24]	; (d70e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d70ce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d70d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d70d2:	a803      	add	r0, sp, #12
   d70d4:	f7fd f866 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d70d8:	2200      	movs	r2, #0
   d70da:	4629      	mov	r1, r5
   d70dc:	4803      	ldr	r0, [pc, #12]	; (d70ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d70de:	f7ff fa79 	bl	d65d4 <application_thread_invoke>
   d70e2:	e7c7      	b.n	d7074 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d70e4:	000d6cb1 	.word	0x000d6cb1
   d70e8:	000d6fa3 	.word	0x000d6fa3
   d70ec:	000d6867 	.word	0x000d6867

000d70f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70f0:	2200      	movs	r2, #0
   d70f2:	6840      	ldr	r0, [r0, #4]
   d70f4:	4611      	mov	r1, r2
   d70f6:	f7ff bb47 	b.w	d6788 <network_listening>

000d70fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d70fa:	2200      	movs	r2, #0
   d70fc:	6840      	ldr	r0, [r0, #4]
   d70fe:	4611      	mov	r1, r2
   d7100:	f7ff bb52 	b.w	d67a8 <network_get_listen_timeout>

000d7104 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7104:	6840      	ldr	r0, [r0, #4]
   d7106:	2200      	movs	r2, #0
   d7108:	f7ff bb46 	b.w	d6798 <network_set_listen_timeout>

000d710c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d710c:	6840      	ldr	r0, [r0, #4]
   d710e:	2200      	movs	r2, #0
   d7110:	f081 0101 	eor.w	r1, r1, #1
   d7114:	f7ff bb30 	b.w	d6778 <network_listen>

000d7118 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7118:	2300      	movs	r3, #0
   d711a:	6840      	ldr	r0, [r0, #4]
   d711c:	461a      	mov	r2, r3
   d711e:	4619      	mov	r1, r3
   d7120:	f7ff bb22 	b.w	d6768 <network_off>

000d7124 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7124:	2300      	movs	r3, #0
   d7126:	6840      	ldr	r0, [r0, #4]
   d7128:	461a      	mov	r2, r3
   d712a:	4619      	mov	r1, r3
   d712c:	f7ff bb14 	b.w	d6758 <network_on>

000d7130 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7130:	2200      	movs	r2, #0
   d7132:	6840      	ldr	r0, [r0, #4]
   d7134:	4611      	mov	r1, r2
   d7136:	f7ff bb07 	b.w	d6748 <network_ready>

000d713a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d713a:	2200      	movs	r2, #0
   d713c:	6840      	ldr	r0, [r0, #4]
   d713e:	4611      	mov	r1, r2
   d7140:	f7ff baf2 	b.w	d6728 <network_connecting>

000d7144 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7144:	6840      	ldr	r0, [r0, #4]
   d7146:	2200      	movs	r2, #0
   d7148:	2102      	movs	r1, #2
   d714a:	f7ff baf5 	b.w	d6738 <network_disconnect>

000d714e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d714e:	2300      	movs	r3, #0
   d7150:	6840      	ldr	r0, [r0, #4]
   d7152:	461a      	mov	r2, r3
   d7154:	f7ff bae0 	b.w	d6718 <network_connect>

000d7158 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7158:	4b02      	ldr	r3, [pc, #8]	; (d7164 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d715a:	2203      	movs	r2, #3
   d715c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d715e:	4a02      	ldr	r2, [pc, #8]	; (d7168 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7160:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7162:	4770      	bx	lr
   d7164:	2003e5c0 	.word	0x2003e5c0
   d7168:	000dc12c 	.word	0x000dc12c

000d716c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d716c:	4770      	bx	lr

000d716e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d716e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7170:	4606      	mov	r6, r0
   d7172:	4615      	mov	r5, r2
   d7174:	460c      	mov	r4, r1
   d7176:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7178:	42bc      	cmp	r4, r7
   d717a:	d006      	beq.n	d718a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d717c:	6833      	ldr	r3, [r6, #0]
   d717e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7182:	689b      	ldr	r3, [r3, #8]
   d7184:	4630      	mov	r0, r6
   d7186:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7188:	e7f6      	b.n	d7178 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d718a:	4628      	mov	r0, r5
   d718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d718e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d718e:	7c00      	ldrb	r0, [r0, #16]
   d7190:	2200      	movs	r2, #0
   d7192:	f7ff b8ed 	b.w	d6370 <hal_i2c_write>

000d7196 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7196:	7c00      	ldrb	r0, [r0, #16]
   d7198:	2100      	movs	r1, #0
   d719a:	f7ff b8f1 	b.w	d6380 <hal_i2c_available>

000d719e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d719e:	7c00      	ldrb	r0, [r0, #16]
   d71a0:	2100      	movs	r1, #0
   d71a2:	f7ff b8f5 	b.w	d6390 <hal_i2c_read>

000d71a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d71a6:	7c00      	ldrb	r0, [r0, #16]
   d71a8:	2100      	movs	r1, #0
   d71aa:	f7ff b8f9 	b.w	d63a0 <hal_i2c_peek>

000d71ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d71ae:	7c00      	ldrb	r0, [r0, #16]
   d71b0:	2100      	movs	r1, #0
   d71b2:	f7ff b8fd 	b.w	d63b0 <hal_i2c_flush>

000d71b6 <_ZN7TwoWireD0Ev>:
   d71b6:	b510      	push	{r4, lr}
   d71b8:	2114      	movs	r1, #20
   d71ba:	4604      	mov	r4, r0
   d71bc:	f001 f847 	bl	d824e <_ZdlPvj>
   d71c0:	4620      	mov	r0, r4
   d71c2:	bd10      	pop	{r4, pc}

000d71c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d71c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d71c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d71ca:	4604      	mov	r4, r0
   d71cc:	4608      	mov	r0, r1
   d71ce:	2100      	movs	r1, #0
   d71d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d71d4:	4b03      	ldr	r3, [pc, #12]	; (d71e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d71d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d71d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d71da:	4611      	mov	r1, r2
   d71dc:	f7ff f8f8 	bl	d63d0 <hal_i2c_init>
}
   d71e0:	4620      	mov	r0, r4
   d71e2:	bd10      	pop	{r4, pc}
   d71e4:	000dc160 	.word	0x000dc160

000d71e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d71e8:	2300      	movs	r3, #0
   d71ea:	7c00      	ldrb	r0, [r0, #16]
   d71ec:	461a      	mov	r2, r3
   d71ee:	4619      	mov	r1, r3
   d71f0:	f7ff b8a6 	b.w	d6340 <hal_i2c_begin>

000d71f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d71f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d71f6:	2200      	movs	r2, #0
   d71f8:	2314      	movs	r3, #20
   d71fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d71fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7202:	780b      	ldrb	r3, [r1, #0]
   d7204:	f88d 3008 	strb.w	r3, [sp, #8]
   d7208:	684b      	ldr	r3, [r1, #4]
   d720a:	9303      	str	r3, [sp, #12]
   d720c:	68cb      	ldr	r3, [r1, #12]
   d720e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7210:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7212:	7a0b      	ldrb	r3, [r1, #8]
   d7214:	9305      	str	r3, [sp, #20]
   d7216:	a901      	add	r1, sp, #4
   d7218:	f7ff f8f2 	bl	d6400 <hal_i2c_request_ex>
}
   d721c:	b007      	add	sp, #28
   d721e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7222 <_ZN7TwoWire11requestFromEhjh>:
{
   d7222:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7224:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7226:	f88d 1000 	strb.w	r1, [sp]
   d722a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d722e:	9103      	str	r1, [sp, #12]
   d7230:	bf18      	it	ne
   d7232:	2301      	movne	r3, #1
   d7234:	4669      	mov	r1, sp
    size_ = size;
   d7236:	9201      	str	r2, [sp, #4]
   d7238:	f88d 3008 	strb.w	r3, [sp, #8]
   d723c:	f7ff ffda 	bl	d71f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7240:	b005      	add	sp, #20
   d7242:	f85d fb04 	ldr.w	pc, [sp], #4

000d7246 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7246:	2301      	movs	r3, #1
   d7248:	f7ff bfeb 	b.w	d7222 <_ZN7TwoWire11requestFromEhjh>

000d724c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d724c:	7c00      	ldrb	r0, [r0, #16]
   d724e:	2200      	movs	r2, #0
   d7250:	f7ff b87e 	b.w	d6350 <hal_i2c_begin_transmission>

000d7254 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d7254:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7256:	2300      	movs	r3, #0
   d7258:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d725c:	684a      	ldr	r2, [r1, #4]
   d725e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d7260:	2314      	movs	r3, #20
    };
   d7262:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d7264:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d7268:	780b      	ldrb	r3, [r1, #0]
    };
   d726a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d726c:	7a0a      	ldrb	r2, [r1, #8]
   d726e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d7270:	7c00      	ldrb	r0, [r0, #16]
    };
   d7272:	f88d 3008 	strb.w	r3, [sp, #8]
   d7276:	aa01      	add	r2, sp, #4
   d7278:	4619      	mov	r1, r3
   d727a:	f7ff f869 	bl	d6350 <hal_i2c_begin_transmission>
}
   d727e:	b007      	add	sp, #28
   d7280:	f85d fb04 	ldr.w	pc, [sp], #4

000d7284 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7284:	7c00      	ldrb	r0, [r0, #16]
   d7286:	2200      	movs	r2, #0
   d7288:	f7ff b86a 	b.w	d6360 <hal_i2c_end_transmission>

000d728c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d728c:	2101      	movs	r1, #1
   d728e:	f7ff bff9 	b.w	d7284 <_ZN7TwoWire15endTransmissionEh>

000d7292 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d7292:	7c00      	ldrb	r0, [r0, #16]
   d7294:	2100      	movs	r1, #0
   d7296:	f7ff b893 	b.w	d63c0 <hal_i2c_is_enabled>

000d729a <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d729a:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d729c:	2100      	movs	r1, #0
   d729e:	7c00      	ldrb	r0, [r0, #16]
   d72a0:	f7ff f89e 	bl	d63e0 <hal_i2c_lock>
}
   d72a4:	fab0 f080 	clz	r0, r0
   d72a8:	0940      	lsrs	r0, r0, #5
   d72aa:	bd08      	pop	{r3, pc}

000d72ac <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d72ac:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d72ae:	2100      	movs	r1, #0
   d72b0:	7c00      	ldrb	r0, [r0, #16]
   d72b2:	f7ff f89d 	bl	d63f0 <hal_i2c_unlock>
}
   d72b6:	fab0 f080 	clz	r0, r0
   d72ba:	0940      	lsrs	r0, r0, #5
   d72bc:	bd08      	pop	{r3, pc}

000d72be <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d72be:	4770      	bx	lr

000d72c0 <_ZN9IPAddressD0Ev>:
   d72c0:	b510      	push	{r4, lr}
   d72c2:	2118      	movs	r1, #24
   d72c4:	4604      	mov	r4, r0
   d72c6:	f000 ffc2 	bl	d824e <_ZdlPvj>
   d72ca:	4620      	mov	r0, r4
   d72cc:	bd10      	pop	{r4, pc}

000d72ce <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d72ce:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d72d0:	7d03      	ldrb	r3, [r0, #20]
   d72d2:	2b06      	cmp	r3, #6
{
   d72d4:	b08d      	sub	sp, #52	; 0x34
   d72d6:	460e      	mov	r6, r1
   d72d8:	f100 0704 	add.w	r7, r0, #4
   d72dc:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d72e0:	d012      	beq.n	d7308 <_ZNK9IPAddress7printToER5Print+0x3a>
   d72e2:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d72e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d72ea:	220a      	movs	r2, #10
   d72ec:	4630      	mov	r0, r6
   d72ee:	f000 f9f9 	bl	d76e4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d72f2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d72f4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d72f6:	d019      	beq.n	d732c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d72f8:	2c00      	cmp	r4, #0
   d72fa:	d0f4      	beq.n	d72e6 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d72fc:	212e      	movs	r1, #46	; 0x2e
   d72fe:	4630      	mov	r0, r6
   d7300:	f000 f9d7 	bl	d76b2 <_ZN5Print5printEc>
   d7304:	4404      	add	r4, r0
   d7306:	e7ee      	b.n	d72e6 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7308:	232f      	movs	r3, #47	; 0x2f
   d730a:	466a      	mov	r2, sp
   d730c:	4639      	mov	r1, r7
   d730e:	200a      	movs	r0, #10
		buf[0] = 0;
   d7310:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7314:	f7ff f87c 	bl	d6410 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7318:	4668      	mov	r0, sp
   d731a:	f001 ffca 	bl	d92b2 <strlen>
   d731e:	6833      	ldr	r3, [r6, #0]
   d7320:	4602      	mov	r2, r0
   d7322:	68db      	ldr	r3, [r3, #12]
   d7324:	4669      	mov	r1, sp
   d7326:	4630      	mov	r0, r6
   d7328:	4798      	blx	r3
   d732a:	4604      	mov	r4, r0
    }
    return n;
}
   d732c:	4620      	mov	r0, r4
   d732e:	b00d      	add	sp, #52	; 0x34
   d7330:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7334 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7334:	b510      	push	{r4, lr}
   d7336:	4b05      	ldr	r3, [pc, #20]	; (d734c <_ZN9IPAddressC1Ev+0x18>)
   d7338:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d733a:	2211      	movs	r2, #17
   d733c:	f840 3b04 	str.w	r3, [r0], #4
   d7340:	2100      	movs	r1, #0
   d7342:	f001 ff5b 	bl	d91fc <memset>
}
   d7346:	4620      	mov	r0, r4
   d7348:	bd10      	pop	{r4, pc}
   d734a:	bf00      	nop
   d734c:	000dc188 	.word	0x000dc188

000d7350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7350:	4603      	mov	r3, r0
   d7352:	4a07      	ldr	r2, [pc, #28]	; (d7370 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7354:	b510      	push	{r4, lr}
   d7356:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d735a:	f101 0210 	add.w	r2, r1, #16
   d735e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7362:	f843 4b04 	str.w	r4, [r3], #4
   d7366:	4291      	cmp	r1, r2
   d7368:	d1f9      	bne.n	d735e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d736a:	780a      	ldrb	r2, [r1, #0]
   d736c:	701a      	strb	r2, [r3, #0]
}
   d736e:	bd10      	pop	{r4, pc}
   d7370:	000dc188 	.word	0x000dc188

000d7374 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7374:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7376:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d737a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d737e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7382:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7386:	2304      	movs	r3, #4
   d7388:	6041      	str	r1, [r0, #4]
   d738a:	7503      	strb	r3, [r0, #20]
}
   d738c:	bd10      	pop	{r4, pc}

000d738e <_ZN9IPAddressaSEPKh>:
{
   d738e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7390:	78cb      	ldrb	r3, [r1, #3]
   d7392:	9300      	str	r3, [sp, #0]
   d7394:	788b      	ldrb	r3, [r1, #2]
   d7396:	784a      	ldrb	r2, [r1, #1]
   d7398:	7809      	ldrb	r1, [r1, #0]
   d739a:	f7ff ffeb 	bl	d7374 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d739e:	b002      	add	sp, #8
   d73a0:	bd10      	pop	{r4, pc}
	...

000d73a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d73a4:	4b01      	ldr	r3, [pc, #4]	; (d73ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d73a6:	4a02      	ldr	r2, [pc, #8]	; (d73b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d73a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d73aa:	4770      	bx	lr
   d73ac:	2003e5c8 	.word	0x2003e5c8
   d73b0:	000dc194 	.word	0x000dc194

000d73b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d73b4:	2300      	movs	r3, #0
   d73b6:	6840      	ldr	r0, [r0, #4]
   d73b8:	461a      	mov	r2, r3
   d73ba:	f7ff b9ad 	b.w	d6718 <network_connect>

000d73be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d73be:	6840      	ldr	r0, [r0, #4]
   d73c0:	2200      	movs	r2, #0
   d73c2:	2102      	movs	r1, #2
   d73c4:	f7ff b9b8 	b.w	d6738 <network_disconnect>

000d73c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d73c8:	2200      	movs	r2, #0
   d73ca:	6840      	ldr	r0, [r0, #4]
   d73cc:	4611      	mov	r1, r2
   d73ce:	f7ff b9ab 	b.w	d6728 <network_connecting>

000d73d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d73d2:	2200      	movs	r2, #0
   d73d4:	6840      	ldr	r0, [r0, #4]
   d73d6:	4611      	mov	r1, r2
   d73d8:	f7ff b9b6 	b.w	d6748 <network_ready>

000d73dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d73dc:	2300      	movs	r3, #0
   d73de:	6840      	ldr	r0, [r0, #4]
   d73e0:	461a      	mov	r2, r3
   d73e2:	4619      	mov	r1, r3
   d73e4:	f7ff b9b8 	b.w	d6758 <network_on>

000d73e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d73e8:	2300      	movs	r3, #0
   d73ea:	6840      	ldr	r0, [r0, #4]
   d73ec:	461a      	mov	r2, r3
   d73ee:	4619      	mov	r1, r3
   d73f0:	f7ff b9ba 	b.w	d6768 <network_off>

000d73f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d73f4:	6840      	ldr	r0, [r0, #4]
   d73f6:	2200      	movs	r2, #0
   d73f8:	f081 0101 	eor.w	r1, r1, #1
   d73fc:	f7ff b9bc 	b.w	d6778 <network_listen>

000d7400 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7400:	6840      	ldr	r0, [r0, #4]
   d7402:	2200      	movs	r2, #0
   d7404:	f7ff b9c8 	b.w	d6798 <network_set_listen_timeout>

000d7408 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7408:	2200      	movs	r2, #0
   d740a:	6840      	ldr	r0, [r0, #4]
   d740c:	4611      	mov	r1, r2
   d740e:	f7ff b9cb 	b.w	d67a8 <network_get_listen_timeout>

000d7412 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7412:	2200      	movs	r2, #0
   d7414:	6840      	ldr	r0, [r0, #4]
   d7416:	4611      	mov	r1, r2
   d7418:	f7ff b9b6 	b.w	d6788 <network_listening>

000d741c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d741c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7420:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7422:	b095      	sub	sp, #84	; 0x54
   d7424:	4616      	mov	r6, r2
   d7426:	460d      	mov	r5, r1
   d7428:	4607      	mov	r7, r0
    IPAddress addr;
   d742a:	f7ff ff83 	bl	d7334 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d742e:	4621      	mov	r1, r4
   d7430:	2218      	movs	r2, #24
   d7432:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7434:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7436:	f001 fee1 	bl	d91fc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d743a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d743c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7440:	4621      	mov	r1, r4
   d7442:	466b      	mov	r3, sp
   d7444:	aa0c      	add	r2, sp, #48	; 0x30
   d7446:	4630      	mov	r0, r6
   d7448:	f7fe fff2 	bl	d6430 <netdb_getaddrinfo>
    if (!r) {
   d744c:	4604      	mov	r4, r0
   d744e:	2800      	cmp	r0, #0
   d7450:	d146      	bne.n	d74e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7452:	4602      	mov	r2, r0
   d7454:	2101      	movs	r1, #1
   d7456:	6868      	ldr	r0, [r5, #4]
   d7458:	f7ff f976 	bl	d6748 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d745c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d745e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7460:	4622      	mov	r2, r4
   d7462:	6868      	ldr	r0, [r5, #4]
   d7464:	f7ff f970 	bl	d6748 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7468:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d746a:	4681      	mov	r9, r0
        bool ok = false;
   d746c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d746e:	2e00      	cmp	r6, #0
   d7470:	d036      	beq.n	d74e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7472:	2900      	cmp	r1, #0
   d7474:	d134      	bne.n	d74e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7476:	6873      	ldr	r3, [r6, #4]
   d7478:	2b02      	cmp	r3, #2
   d747a:	d003      	beq.n	d7484 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d747c:	2b0a      	cmp	r3, #10
   d747e:	d00b      	beq.n	d7498 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7480:	69f6      	ldr	r6, [r6, #28]
   d7482:	e7f4      	b.n	d746e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7484:	f1b8 0f00 	cmp.w	r8, #0
   d7488:	d004      	beq.n	d7494 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d748a:	6971      	ldr	r1, [r6, #20]
   d748c:	4638      	mov	r0, r7
   d748e:	3104      	adds	r1, #4
   d7490:	f7ff ff7d 	bl	d738e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7494:	4641      	mov	r1, r8
   d7496:	e7f3      	b.n	d7480 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7498:	f1b9 0f00 	cmp.w	r9, #0
   d749c:	d101      	bne.n	d74a2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d749e:	4649      	mov	r1, r9
   d74a0:	e7ee      	b.n	d7480 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d74a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d74a4:	2210      	movs	r2, #16
   d74a6:	a801      	add	r0, sp, #4
   d74a8:	f001 fea8 	bl	d91fc <memset>
                    a.v = 6;
   d74ac:	2306      	movs	r3, #6
   d74ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d74b2:	ad01      	add	r5, sp, #4
   d74b4:	f104 0308 	add.w	r3, r4, #8
   d74b8:	3418      	adds	r4, #24
   d74ba:	6818      	ldr	r0, [r3, #0]
   d74bc:	6859      	ldr	r1, [r3, #4]
   d74be:	462a      	mov	r2, r5
   d74c0:	c203      	stmia	r2!, {r0, r1}
   d74c2:	3308      	adds	r3, #8
   d74c4:	42a3      	cmp	r3, r4
   d74c6:	4615      	mov	r5, r2
   d74c8:	d1f7      	bne.n	d74ba <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d74ca:	a901      	add	r1, sp, #4
   d74cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d74ce:	ad07      	add	r5, sp, #28
   d74d0:	f7ff ff3e 	bl	d7350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d74d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74d6:	1d3c      	adds	r4, r7, #4
   d74d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74da:	682b      	ldr	r3, [r5, #0]
   d74dc:	7023      	strb	r3, [r4, #0]
   d74de:	e7de      	b.n	d749e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d74e0:	9800      	ldr	r0, [sp, #0]
   d74e2:	f7fe ff9d 	bl	d6420 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d74e6:	4638      	mov	r0, r7
   d74e8:	b015      	add	sp, #84	; 0x54
   d74ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d74f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d74f0:	4b02      	ldr	r3, [pc, #8]	; (d74fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d74f2:	4a03      	ldr	r2, [pc, #12]	; (d7500 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d74f4:	601a      	str	r2, [r3, #0]
   d74f6:	2200      	movs	r2, #0
   d74f8:	605a      	str	r2, [r3, #4]

} // spark
   d74fa:	4770      	bx	lr
   d74fc:	2003e5cc 	.word	0x2003e5cc
   d7500:	000dc1a0 	.word	0x000dc1a0

000d7504 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d7504:	b508      	push	{r3, lr}
            return &Wire1;
   d7506:	f000 fe75 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d750a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d750e:	f7ff bec4 	b.w	d729a <_ZN7TwoWire4lockEv>

000d7512 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d7512:	b510      	push	{r4, lr}
   d7514:	4604      	mov	r4, r0
    lock_(_lock)
   d7516:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d7518:	b109      	cbz	r1, d751e <_ZN4PMICC1Eb+0xc>
        lock();
   d751a:	f7ff fff3 	bl	d7504 <_ZN4PMIC4lockEv.constprop.0>
}
   d751e:	4620      	mov	r0, r4
   d7520:	bd10      	pop	{r4, pc}

000d7522 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d7522:	b508      	push	{r3, lr}
            return &Wire1;
   d7524:	f000 fe66 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d7528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d752c:	f7ff bebe 	b.w	d72ac <_ZN7TwoWire6unlockEv>

000d7530 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d7530:	b510      	push	{r4, lr}
    if (lock_) {
   d7532:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d7534:	4604      	mov	r4, r0
    if (lock_) {
   d7536:	b10b      	cbz	r3, d753c <_ZN4PMICD1Ev+0xc>
        unlock();
   d7538:	f7ff fff3 	bl	d7522 <_ZN4PMIC6unlockEv>
}
   d753c:	4620      	mov	r0, r4
   d753e:	bd10      	pop	{r4, pc}

000d7540 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7540:	b510      	push	{r4, lr}
   d7542:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7544:	6800      	ldr	r0, [r0, #0]
   d7546:	f7ff ffec 	bl	d7522 <_ZN4PMIC6unlockEv>
   d754a:	4620      	mov	r0, r4
   d754c:	bd10      	pop	{r4, pc}

000d754e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d754e:	b530      	push	{r4, r5, lr}
   d7550:	b087      	sub	sp, #28
   d7552:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7554:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7556:	f7ff ffd5 	bl	d7504 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d755a:	236b      	movs	r3, #107	; 0x6b
   d755c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7560:	2300      	movs	r3, #0
   d7562:	2401      	movs	r4, #1
   d7564:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d7566:	230a      	movs	r3, #10
   d7568:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d756a:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d756e:	f000 fe41 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d7572:	a902      	add	r1, sp, #8
   d7574:	f7ff fe6e 	bl	d7254 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d7578:	f000 fe3c 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d757c:	6803      	ldr	r3, [r0, #0]
   d757e:	4629      	mov	r1, r5
   d7580:	689b      	ldr	r3, [r3, #8]
   d7582:	4798      	blx	r3
            return &Wire1;
   d7584:	f000 fe36 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d7588:	4621      	mov	r1, r4
   d758a:	f7ff fe7b 	bl	d7284 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d758e:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d7590:	f000 fe30 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d7594:	a902      	add	r1, sp, #8
   d7596:	f7ff fe2d 	bl	d71f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d759a:	f000 fe2b 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d759e:	6803      	ldr	r3, [r0, #0]
   d75a0:	695b      	ldr	r3, [r3, #20]
   d75a2:	4798      	blx	r3
   d75a4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d75a6:	a801      	add	r0, sp, #4
   d75a8:	f7ff ffca 	bl	d7540 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d75ac:	b2e0      	uxtb	r0, r4
   d75ae:	b007      	add	sp, #28
   d75b0:	bd30      	pop	{r4, r5, pc}

000d75b2 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d75b2:	b570      	push	{r4, r5, r6, lr}
   d75b4:	b086      	sub	sp, #24
   d75b6:	4614      	mov	r4, r2
   d75b8:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d75ba:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d75bc:	f7ff ffa2 	bl	d7504 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d75c0:	236b      	movs	r3, #107	; 0x6b
   d75c2:	f88d 3008 	strb.w	r3, [sp, #8]
   d75c6:	2300      	movs	r3, #0
   d75c8:	9303      	str	r3, [sp, #12]
   d75ca:	2601      	movs	r6, #1
    timeout_ = ms;
   d75cc:	230a      	movs	r3, #10
   d75ce:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d75d0:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d75d4:	f000 fe0e 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d75d8:	a902      	add	r1, sp, #8
   d75da:	f7ff fe3b 	bl	d7254 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d75de:	f000 fe09 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d75e2:	6803      	ldr	r3, [r0, #0]
   d75e4:	4629      	mov	r1, r5
   d75e6:	689b      	ldr	r3, [r3, #8]
   d75e8:	4798      	blx	r3
            return &Wire1;
   d75ea:	f000 fe03 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d75ee:	6803      	ldr	r3, [r0, #0]
   d75f0:	4621      	mov	r1, r4
   d75f2:	689b      	ldr	r3, [r3, #8]
   d75f4:	4798      	blx	r3
            return &Wire1;
   d75f6:	f000 fdfd 	bl	d81f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d75fa:	4631      	mov	r1, r6
   d75fc:	f7ff fe42 	bl	d7284 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d7600:	a801      	add	r0, sp, #4
   d7602:	f7ff ff9d 	bl	d7540 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d7606:	b006      	add	sp, #24
   d7608:	bd70      	pop	{r4, r5, r6, pc}

000d760a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d760a:	b513      	push	{r0, r1, r4, lr}
   d760c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d760e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7610:	f7ff ff78 	bl	d7504 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d7614:	2101      	movs	r1, #1
   d7616:	4620      	mov	r0, r4
   d7618:	f7ff ff99 	bl	d754e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d761c:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d7620:	f040 0210 	orr.w	r2, r0, #16
   d7624:	2101      	movs	r1, #1
   d7626:	4620      	mov	r0, r4
   d7628:	f7ff ffc3 	bl	d75b2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d762c:	a801      	add	r0, sp, #4
   d762e:	f7ff ff87 	bl	d7540 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d7632:	2001      	movs	r0, #1
   d7634:	b002      	add	sp, #8
   d7636:	bd10      	pop	{r4, pc}

000d7638 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   d7638:	b513      	push	{r0, r1, r4, lr}
   d763a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d763c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d763e:	f7ff ff61 	bl	d7504 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d7642:	2101      	movs	r1, #1
   d7644:	4620      	mov	r0, r4
   d7646:	f7ff ff82 	bl	d754e <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d764a:	2101      	movs	r1, #1
   d764c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d7650:	4620      	mov	r0, r4
   d7652:	f7ff ffae 	bl	d75b2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d7656:	a801      	add	r0, sp, #4
   d7658:	f7ff ff72 	bl	d7540 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d765c:	2001      	movs	r0, #1
   d765e:	b002      	add	sp, #8
   d7660:	bd10      	pop	{r4, pc}

000d7662 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7664:	4606      	mov	r6, r0
   d7666:	460d      	mov	r5, r1
  size_t n = 0;
   d7668:	188f      	adds	r7, r1, r2
   d766a:	2400      	movs	r4, #0
  while (size--) {
   d766c:	42bd      	cmp	r5, r7
   d766e:	d00c      	beq.n	d768a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7670:	6833      	ldr	r3, [r6, #0]
   d7672:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7676:	689b      	ldr	r3, [r3, #8]
   d7678:	4630      	mov	r0, r6
   d767a:	4798      	blx	r3
     if (chunk>=0)
   d767c:	1e03      	subs	r3, r0, #0
   d767e:	db01      	blt.n	d7684 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7680:	441c      	add	r4, r3
  while (size--) {
   d7682:	e7f3      	b.n	d766c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7684:	2c00      	cmp	r4, #0
   d7686:	bf08      	it	eq
   d7688:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d768a:	4620      	mov	r0, r4
   d768c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d768e <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d768e:	b513      	push	{r0, r1, r4, lr}
   d7690:	4604      	mov	r4, r0
    }
   d7692:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7694:	b159      	cbz	r1, d76ae <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7696:	9101      	str	r1, [sp, #4]
   d7698:	f001 fe0b 	bl	d92b2 <strlen>
   d769c:	6823      	ldr	r3, [r4, #0]
   d769e:	9901      	ldr	r1, [sp, #4]
   d76a0:	68db      	ldr	r3, [r3, #12]
   d76a2:	4602      	mov	r2, r0
   d76a4:	4620      	mov	r0, r4
    }
   d76a6:	b002      	add	sp, #8
   d76a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d76ac:	4718      	bx	r3
    }
   d76ae:	b002      	add	sp, #8
   d76b0:	bd10      	pop	{r4, pc}

000d76b2 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d76b2:	6803      	ldr	r3, [r0, #0]
   d76b4:	689b      	ldr	r3, [r3, #8]
   d76b6:	4718      	bx	r3

000d76b8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d76b8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d76ba:	210d      	movs	r1, #13
{
   d76bc:	4605      	mov	r5, r0
  size_t n = print('\r');
   d76be:	f7ff fff8 	bl	d76b2 <_ZN5Print5printEc>
  n += print('\n');
   d76c2:	210a      	movs	r1, #10
  size_t n = print('\r');
   d76c4:	4604      	mov	r4, r0
  n += print('\n');
   d76c6:	4628      	mov	r0, r5
   d76c8:	f7ff fff3 	bl	d76b2 <_ZN5Print5printEc>
  return n;
}
   d76cc:	4420      	add	r0, r4
   d76ce:	bd38      	pop	{r3, r4, r5, pc}

000d76d0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d76d0:	b538      	push	{r3, r4, r5, lr}
   d76d2:	4605      	mov	r5, r0
  return write(str);
   d76d4:	f7ff ffdb 	bl	d768e <_ZN5Print5writeEPKc>
   d76d8:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d76da:	4628      	mov	r0, r5
   d76dc:	f7ff ffec 	bl	d76b8 <_ZN5Print7printlnEv>
  return n;
}
   d76e0:	4420      	add	r0, r4
   d76e2:	bd38      	pop	{r3, r4, r5, pc}

000d76e4 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d76e4:	b530      	push	{r4, r5, lr}
   d76e6:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d76e8:	2300      	movs	r3, #0
   d76ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d76ee:	2a01      	cmp	r2, #1
   d76f0:	bf98      	it	ls
   d76f2:	220a      	movls	r2, #10
   d76f4:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d76f6:	460d      	mov	r5, r1
   d76f8:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d76fc:	fb01 5312 	mls	r3, r1, r2, r5
   d7700:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7704:	2b09      	cmp	r3, #9
   d7706:	bf94      	ite	ls
   d7708:	3330      	addls	r3, #48	; 0x30
   d770a:	3337      	addhi	r3, #55	; 0x37
   d770c:	b2db      	uxtb	r3, r3
  } while(n);
   d770e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7710:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7714:	d9ef      	bls.n	d76f6 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7716:	4621      	mov	r1, r4
   d7718:	f7ff ffb9 	bl	d768e <_ZN5Print5writeEPKc>
}
   d771c:	b00b      	add	sp, #44	; 0x2c
   d771e:	bd30      	pop	{r4, r5, pc}

000d7720 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7720:	b510      	push	{r4, lr}
   d7722:	4604      	mov	r4, r0
   d7724:	f7fc fd3e 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d7728:	4620      	mov	r0, r4
   d772a:	bd10      	pop	{r4, pc}

000d772c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d772c:	4803      	ldr	r0, [pc, #12]	; (d773c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d772e:	4a04      	ldr	r2, [pc, #16]	; (d7740 <_GLOBAL__sub_I_RGB+0x14>)
   d7730:	4904      	ldr	r1, [pc, #16]	; (d7744 <_GLOBAL__sub_I_RGB+0x18>)
   d7732:	2300      	movs	r3, #0
   d7734:	6083      	str	r3, [r0, #8]
   d7736:	f000 bd85 	b.w	d8244 <__aeabi_atexit>
   d773a:	bf00      	nop
   d773c:	2003e5d4 	.word	0x2003e5d4
   d7740:	2003e3f8 	.word	0x2003e3f8
   d7744:	000d7721 	.word	0x000d7721

000d7748 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7748:	b510      	push	{r4, lr}
   d774a:	4604      	mov	r4, r0
   d774c:	4608      	mov	r0, r1
{
    _spi = spi;
   d774e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7750:	f7fe fe76 	bl	d6440 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7754:	2300      	movs	r3, #0
   d7756:	6063      	str	r3, [r4, #4]
}
   d7758:	4620      	mov	r0, r4
   d775a:	bd10      	pop	{r4, pc}

000d775c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d775c:	b510      	push	{r4, lr}
   d775e:	4604      	mov	r4, r0
{
	free(buffer);
   d7760:	6800      	ldr	r0, [r0, #0]
   d7762:	f7ff f831 	bl	d67c8 <free>
}
   d7766:	4620      	mov	r0, r4
   d7768:	bd10      	pop	{r4, pc}

000d776a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d776a:	b510      	push	{r4, lr}
   d776c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d776e:	6800      	ldr	r0, [r0, #0]
   d7770:	b108      	cbz	r0, d7776 <_ZN6String10invalidateEv+0xc>
   d7772:	f7ff f829 	bl	d67c8 <free>
	buffer = NULL;
   d7776:	2300      	movs	r3, #0
	capacity = len = 0;
   d7778:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d777c:	6023      	str	r3, [r4, #0]
}
   d777e:	bd10      	pop	{r4, pc}

000d7780 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7780:	b538      	push	{r3, r4, r5, lr}
   d7782:	4604      	mov	r4, r0
   d7784:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7786:	6800      	ldr	r0, [r0, #0]
   d7788:	3101      	adds	r1, #1
   d778a:	f7ff f825 	bl	d67d8 <realloc>
	if (newbuffer) {
   d778e:	b110      	cbz	r0, d7796 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7790:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7794:	2001      	movs	r0, #1
	}
	return 0;
}
   d7796:	bd38      	pop	{r3, r4, r5, pc}

000d7798 <_ZN6String7reserveEj>:
{
   d7798:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d779a:	6803      	ldr	r3, [r0, #0]
{
   d779c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d779e:	b123      	cbz	r3, d77aa <_ZN6String7reserveEj+0x12>
   d77a0:	6843      	ldr	r3, [r0, #4]
   d77a2:	428b      	cmp	r3, r1
   d77a4:	d301      	bcc.n	d77aa <_ZN6String7reserveEj+0x12>
   d77a6:	2001      	movs	r0, #1
}
   d77a8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d77aa:	4620      	mov	r0, r4
   d77ac:	f7ff ffe8 	bl	d7780 <_ZN6String12changeBufferEj>
   d77b0:	2800      	cmp	r0, #0
   d77b2:	d0f9      	beq.n	d77a8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d77b4:	68a3      	ldr	r3, [r4, #8]
   d77b6:	2b00      	cmp	r3, #0
   d77b8:	d1f5      	bne.n	d77a6 <_ZN6String7reserveEj+0xe>
   d77ba:	6822      	ldr	r2, [r4, #0]
   d77bc:	7013      	strb	r3, [r2, #0]
   d77be:	e7f2      	b.n	d77a6 <_ZN6String7reserveEj+0xe>

000d77c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d77c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d77c2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d77c4:	4611      	mov	r1, r2
   d77c6:	9201      	str	r2, [sp, #4]
{
   d77c8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d77ca:	f7ff ffe5 	bl	d7798 <_ZN6String7reserveEj>
   d77ce:	9a01      	ldr	r2, [sp, #4]
   d77d0:	b928      	cbnz	r0, d77de <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d77d2:	4620      	mov	r0, r4
   d77d4:	f7ff ffc9 	bl	d776a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d77d8:	4620      	mov	r0, r4
   d77da:	b003      	add	sp, #12
   d77dc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d77de:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d77e0:	4629      	mov	r1, r5
   d77e2:	6820      	ldr	r0, [r4, #0]
   d77e4:	f001 fcfc 	bl	d91e0 <memcpy>
	buffer[len] = 0;
   d77e8:	6822      	ldr	r2, [r4, #0]
   d77ea:	68a3      	ldr	r3, [r4, #8]
   d77ec:	2100      	movs	r1, #0
   d77ee:	54d1      	strb	r1, [r2, r3]
	return *this;
   d77f0:	e7f2      	b.n	d77d8 <_ZN6String4copyEPKcj+0x18>

000d77f2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d77f2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d77f4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d77f6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d77fa:	4604      	mov	r4, r0
	len = 0;
   d77fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d77fe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7800:	b141      	cbz	r1, d7814 <_ZN6StringC1EPKc+0x22>
   d7802:	4608      	mov	r0, r1
   d7804:	9101      	str	r1, [sp, #4]
   d7806:	f001 fd54 	bl	d92b2 <strlen>
   d780a:	9901      	ldr	r1, [sp, #4]
   d780c:	4602      	mov	r2, r0
   d780e:	4620      	mov	r0, r4
   d7810:	f7ff ffd6 	bl	d77c0 <_ZN6String4copyEPKcj>
}
   d7814:	4620      	mov	r0, r4
   d7816:	b002      	add	sp, #8
   d7818:	bd10      	pop	{r4, pc}

000d781a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d781a:	4288      	cmp	r0, r1
{
   d781c:	b510      	push	{r4, lr}
   d781e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7820:	d005      	beq.n	d782e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7822:	680b      	ldr	r3, [r1, #0]
   d7824:	b12b      	cbz	r3, d7832 <_ZN6StringaSERKS_+0x18>
   d7826:	688a      	ldr	r2, [r1, #8]
   d7828:	4619      	mov	r1, r3
   d782a:	f7ff ffc9 	bl	d77c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d782e:	4620      	mov	r0, r4
   d7830:	bd10      	pop	{r4, pc}
	else invalidate();
   d7832:	f7ff ff9a 	bl	d776a <_ZN6String10invalidateEv>
   d7836:	e7fa      	b.n	d782e <_ZN6StringaSERKS_+0x14>

000d7838 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7838:	b510      	push	{r4, lr}
	buffer = NULL;
   d783a:	2300      	movs	r3, #0
String::String(const String &value)
   d783c:	4604      	mov	r4, r0
	capacity = 0;
   d783e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7842:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7844:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7846:	f7ff ffe8 	bl	d781a <_ZN6StringaSERKS_>
}
   d784a:	4620      	mov	r0, r4
   d784c:	bd10      	pop	{r4, pc}

000d784e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d784e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7850:	6882      	ldr	r2, [r0, #8]
   d7852:	b93a      	cbnz	r2, d7864 <_ZNK6String6equalsEPKc+0x16>
   d7854:	b121      	cbz	r1, d7860 <_ZNK6String6equalsEPKc+0x12>
   d7856:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7858:	fab0 f080 	clz	r0, r0
   d785c:	0940      	lsrs	r0, r0, #5
   d785e:	e000      	b.n	d7862 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7860:	2001      	movs	r0, #1
}
   d7862:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7864:	6800      	ldr	r0, [r0, #0]
   d7866:	b909      	cbnz	r1, d786c <_ZNK6String6equalsEPKc+0x1e>
   d7868:	7800      	ldrb	r0, [r0, #0]
   d786a:	e7f5      	b.n	d7858 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d786c:	f001 fcf2 	bl	d9254 <strcmp>
   d7870:	e7f2      	b.n	d7858 <_ZNK6String6equalsEPKc+0xa>

000d7872 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7872:	b558      	push	{r3, r4, r6, lr}
   d7874:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7876:	b12a      	cbz	r2, d7884 <_ZNK6String8getBytesEPhjj+0x12>
   d7878:	b121      	cbz	r1, d7884 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d787a:	6884      	ldr	r4, [r0, #8]
   d787c:	429c      	cmp	r4, r3
   d787e:	d802      	bhi.n	d7886 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7880:	2300      	movs	r3, #0
   d7882:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d7884:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d7886:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d7888:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d788a:	6801      	ldr	r1, [r0, #0]
   d788c:	4294      	cmp	r4, r2
   d788e:	bf28      	it	cs
   d7890:	4614      	movcs	r4, r2
   d7892:	4419      	add	r1, r3
   d7894:	4622      	mov	r2, r4
   d7896:	4630      	mov	r0, r6
   d7898:	f001 fd25 	bl	d92e6 <strncpy>
	buf[n] = 0;
   d789c:	2300      	movs	r3, #0
   d789e:	5533      	strb	r3, [r6, r4]
   d78a0:	e7f0      	b.n	d7884 <_ZNK6String8getBytesEPhjj+0x12>

000d78a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d78a2:	b510      	push	{r4, lr}
   d78a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d78a6:	6800      	ldr	r0, [r0, #0]
   d78a8:	b118      	cbz	r0, d78b2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d78aa:	f7fe ff8d 	bl	d67c8 <free>
            wakeupSource_ = nullptr;
   d78ae:	2300      	movs	r3, #0
   d78b0:	6023      	str	r3, [r4, #0]
        }
    }
   d78b2:	bd10      	pop	{r4, pc}

000d78b4 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d78b4:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d78b6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d78ba:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d78bc:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d78be:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d78c0:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d78c4:	f8c0 2006 	str.w	r2, [r0, #6]
   d78c8:	889b      	ldrh	r3, [r3, #4]
   d78ca:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d78cc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d78ce:	f7ff ffe8 	bl	d78a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d78d2:	682b      	ldr	r3, [r5, #0]
   d78d4:	b113      	cbz	r3, d78dc <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d78d6:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d78d8:	2300      	movs	r3, #0
   d78da:	602b      	str	r3, [r5, #0]
    }
   d78dc:	4620      	mov	r0, r4
   d78de:	bd38      	pop	{r3, r4, r5, pc}

000d78e0 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   d78e0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d78e4:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   d78e6:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d78e8:	b933      	cbnz	r3, d78f8 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   d78ea:	b932      	cbnz	r2, d78fa <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   d78ec:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d78f0:	6003      	str	r3, [r0, #0]
   d78f2:	888b      	ldrh	r3, [r1, #4]
   d78f4:	8083      	strh	r3, [r0, #4]
    }
   d78f6:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   d78f8:	b122      	cbz	r2, d7904 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d78fa:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   d78fc:	2c01      	cmp	r4, #1
   d78fe:	d003      	beq.n	d7908 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   d7900:	2c04      	cmp	r4, #4
   d7902:	d006      	beq.n	d7912 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7904:	2204      	movs	r2, #4
   d7906:	e005      	b.n	d7914 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d7908:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d790a:	814a      	strh	r2, [r1, #10]
   d790c:	718c      	strb	r4, [r1, #6]
   d790e:	810b      	strh	r3, [r1, #8]
                    break;
   d7910:	e7ec      	b.n	d78ec <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d7912:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7914:	810b      	strh	r3, [r1, #8]
   d7916:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d791a:	718a      	strb	r2, [r1, #6]
   d791c:	814b      	strh	r3, [r1, #10]
                    break;
   d791e:	e7e5      	b.n	d78ec <_ZN17SystemSleepResult13toSleepResultEv+0xc>

000d7920 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d7920:	b538      	push	{r3, r4, r5, lr}
   d7922:	460c      	mov	r4, r1
   d7924:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d7926:	f7ff ffbc 	bl	d78a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d792a:	b144      	cbz	r4, d793e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d792c:	8820      	ldrh	r0, [r4, #0]
   d792e:	f7fe ff43 	bl	d67b8 <malloc>
   d7932:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7934:	b128      	cbz	r0, d7942 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7936:	8822      	ldrh	r2, [r4, #0]
   d7938:	4621      	mov	r1, r4
   d793a:	f001 fc51 	bl	d91e0 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d793e:	2000      	movs	r0, #0
    }
   d7940:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d7942:	4801      	ldr	r0, [pc, #4]	; (d7948 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d7944:	e7fc      	b.n	d7940 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d7946:	bf00      	nop
   d7948:	fffffefc 	.word	0xfffffefc

000d794c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d794c:	b507      	push	{r0, r1, r2, lr}
   d794e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7950:	2100      	movs	r1, #0
{
   d7952:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7954:	9100      	str	r1, [sp, #0]
   d7956:	2001      	movs	r0, #1
   d7958:	218c      	movs	r1, #140	; 0x8c
   d795a:	f7fe fe73 	bl	d6644 <system_reset>
}
   d795e:	b003      	add	sp, #12
   d7960:	f85d fb04 	ldr.w	pc, [sp], #4

000d7964 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7964:	4601      	mov	r1, r0
    reset(0, flags);
   d7966:	2000      	movs	r0, #0
   d7968:	f7ff bff0 	b.w	d794c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d796c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d796c:	2000      	movs	r0, #0
   d796e:	f7ff bff9 	b.w	d7964 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d7974 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d7974:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7976:	4d2d      	ldr	r5, [pc, #180]	; (d7a2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7978:	7d0b      	ldrb	r3, [r1, #20]
   d797a:	4604      	mov	r4, r0
   d797c:	b08b      	sub	sp, #44	; 0x2c
   d797e:	4608      	mov	r0, r1
   d7980:	1daf      	adds	r7, r5, #6
   d7982:	2b00      	cmp	r3, #0
   d7984:	d038      	beq.n	d79f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d7986:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7988:	791b      	ldrb	r3, [r3, #4]
   d798a:	2b00      	cmp	r3, #0
   d798c:	d034      	beq.n	d79f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d798e:	2200      	movs	r2, #0
    SleepResult() {}
   d7990:	4b27      	ldr	r3, [pc, #156]	; (d7a30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7992:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7994:	a902      	add	r1, sp, #8
   d7996:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7998:	9202      	str	r2, [sp, #8]
   d799a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d799e:	f88d 200e 	strb.w	r2, [sp, #14]
   d79a2:	f7fe fe45 	bl	d6630 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d79a6:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d79aa:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d79ae:	b200      	sxth	r0, r0
   d79b0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d79b4:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d79b8:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d79ba:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d79bc:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d79be:	4628      	mov	r0, r5
   d79c0:	f7ff ffae 	bl	d7920 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d79c4:	a802      	add	r0, sp, #8
   d79c6:	f7ff ff6c 	bl	d78a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d79ca:	2300      	movs	r3, #0
   d79cc:	6023      	str	r3, [r4, #0]
   d79ce:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d79d0:	71a3      	strb	r3, [r4, #6]
   d79d2:	8123      	strh	r3, [r4, #8]
   d79d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d79d8:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d79da:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d79de:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d79e0:	683b      	ldr	r3, [r7, #0]
   d79e2:	f8c4 3006 	str.w	r3, [r4, #6]
   d79e6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d79e8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d79ea:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d79ec:	4620      	mov	r0, r4
   d79ee:	f7ff ff97 	bl	d7920 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d79f2:	4620      	mov	r0, r4
   d79f4:	b00b      	add	sp, #44	; 0x2c
   d79f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d79f8:	2600      	movs	r6, #0
   d79fa:	2320      	movs	r3, #32
   d79fc:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d7a00:	4b0c      	ldr	r3, [pc, #48]	; (d7a34 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d7a02:	9300      	str	r3, [sp, #0]
   d7a04:	490c      	ldr	r1, [pc, #48]	; (d7a38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d7a06:	4633      	mov	r3, r6
   d7a08:	aa02      	add	r2, sp, #8
   d7a0a:	2032      	movs	r0, #50	; 0x32
   d7a0c:	f7fe fda0 	bl	d6550 <log_message>
    SleepResult() {}
   d7a10:	4b07      	ldr	r3, [pc, #28]	; (d7a30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7a12:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d7a14:	a902      	add	r1, sp, #8
        error_ = error;
   d7a16:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d7a1a:	4804      	ldr	r0, [pc, #16]	; (d7a2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d7a1c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d7a1e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d7a22:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7a26:	f7ff ff45 	bl	d78b4 <_ZN17SystemSleepResultaSEOS_>
   d7a2a:	e7cb      	b.n	d79c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d7a2c:	2003e5e4 	.word	0x2003e5e4
   d7a30:	ffff0000 	.word	0xffff0000
   d7a34:	000dc1d3 	.word	0x000dc1d3
   d7a38:	000dc1cc 	.word	0x000dc1cc

000d7a3c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d7a3c:	b530      	push	{r4, r5, lr}
   d7a3e:	4604      	mov	r4, r0
   d7a40:	b085      	sub	sp, #20
   d7a42:	4608      	mov	r0, r1
   d7a44:	4611      	mov	r1, r2
   d7a46:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d7a48:	2300      	movs	r3, #0
   d7a4a:	f7fe fdab 	bl	d65a4 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d7a4e:	4d0d      	ldr	r5, [pc, #52]	; (d7a84 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d7a50:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   d7a54:	2300      	movs	r3, #0
   d7a56:	a901      	add	r1, sp, #4
   d7a58:	9301      	str	r3, [sp, #4]
   d7a5a:	f8ad 3008 	strh.w	r3, [sp, #8]
   d7a5e:	f88d 300a 	strb.w	r3, [sp, #10]
   d7a62:	4628      	mov	r0, r5
   d7a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7a68:	f8ad 300e 	strh.w	r3, [sp, #14]
   d7a6c:	f7ff ff22 	bl	d78b4 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   d7a70:	a801      	add	r0, sp, #4
   d7a72:	f7ff ff16 	bl	d78a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   d7a76:	4620      	mov	r0, r4
   d7a78:	4629      	mov	r1, r5
   d7a7a:	f7ff ff31 	bl	d78e0 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d7a7e:	4620      	mov	r0, r4
   d7a80:	b005      	add	sp, #20
   d7a82:	bd30      	pop	{r4, r5, pc}
   d7a84:	2003e5e4 	.word	0x2003e5e4

000d7a88 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7a88:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7a8a:	4b09      	ldr	r3, [pc, #36]	; (d7ab0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d7a8c:	4c09      	ldr	r4, [pc, #36]	; (d7ab4 <_GLOBAL__sub_I_System+0x2c>)
   d7a8e:	2202      	movs	r2, #2
   d7a90:	2000      	movs	r0, #0
   d7a92:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7a94:	4b08      	ldr	r3, [pc, #32]	; (d7ab8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7a96:	6020      	str	r0, [r4, #0]
   d7a98:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7a9a:	71a0      	strb	r0, [r4, #6]
   d7a9c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7a9e:	f7fe fd71 	bl	d6584 <set_system_mode>
SystemClass System;
   d7aa2:	4620      	mov	r0, r4
   d7aa4:	4a05      	ldr	r2, [pc, #20]	; (d7abc <_GLOBAL__sub_I_System+0x34>)
   d7aa6:	4906      	ldr	r1, [pc, #24]	; (d7ac0 <_GLOBAL__sub_I_System+0x38>)
   d7aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7aac:	f000 bbca 	b.w	d8244 <__aeabi_atexit>
   d7ab0:	2003e5f0 	.word	0x2003e5f0
   d7ab4:	2003e5e4 	.word	0x2003e5e4
   d7ab8:	ffff0000 	.word	0xffff0000
   d7abc:	2003e3f8 	.word	0x2003e3f8
   d7ac0:	000d4195 	.word	0x000d4195

000d7ac4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7ac8:	4a15      	ldr	r2, [pc, #84]	; (d7b20 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7aca:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7b2c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7ace:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7ad2:	18c0      	adds	r0, r0, r3
   d7ad4:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7ad8:	4a12      	ldr	r2, [pc, #72]	; (d7b24 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7ada:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7ade:	18c6      	adds	r6, r0, r3
   d7ae0:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7ae4:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7ae8:	42bb      	cmp	r3, r7
   d7aea:	bf08      	it	eq
   d7aec:	42b2      	cmpeq	r2, r6
{
   d7aee:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7af0:	d013      	beq.n	d7b1a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7af2:	a903      	add	r1, sp, #12
   d7af4:	4668      	mov	r0, sp
   d7af6:	e9cd 6700 	strd	r6, r7, [sp]
   d7afa:	f001 fa7b 	bl	d8ff4 <localtime_r>
	calendar_time.tm_year += 1900;
   d7afe:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7b00:	4d09      	ldr	r5, [pc, #36]	; (d7b28 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7b02:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7b06:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7b08:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7b12:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7b16:	6823      	ldr	r3, [r4, #0]
   d7b18:	602b      	str	r3, [r5, #0]
    }
}
   d7b1a:	b00c      	add	sp, #48	; 0x30
   d7b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7b20:	2003e628 	.word	0x2003e628
   d7b24:	2003e620 	.word	0x2003e620
   d7b28:	2003e5f8 	.word	0x2003e5f8
   d7b2c:	2003e630 	.word	0x2003e630

000d7b30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7b30:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7b32:	2000      	movs	r0, #0
   d7b34:	f7fe fdd8 	bl	d66e8 <spark_sync_time_pending>
   d7b38:	b128      	cbz	r0, d7b46 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7b3a:	f7fe fdad 	bl	d6698 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7b3e:	f080 0001 	eor.w	r0, r0, #1
   d7b42:	b2c0      	uxtb	r0, r0
    }
   d7b44:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7b46:	2001      	movs	r0, #1
   d7b48:	e7fc      	b.n	d7b44 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d7b4c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7b4c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7b50:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d7b58:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7b5a:	d411      	bmi.n	d7b80 <_ZN9TimeClass4zoneEf+0x34>
   d7b5c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7b60:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7b68:	dc0a      	bgt.n	d7b80 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7b6a:	eddf 7a06 	vldr	s15, [pc, #24]	; d7b84 <_ZN9TimeClass4zoneEf+0x38>
   d7b6e:	ee60 7a27 	vmul.f32	s15, s0, s15
   d7b72:	ee17 0a90 	vmov	r0, s15
   d7b76:	f001 f84f 	bl	d8c18 <__aeabi_f2lz>
   d7b7a:	4b03      	ldr	r3, [pc, #12]	; (d7b88 <_ZN9TimeClass4zoneEf+0x3c>)
   d7b7c:	e9c3 0100 	strd	r0, r1, [r3]
}
   d7b80:	bd08      	pop	{r3, pc}
   d7b82:	bf00      	nop
   d7b84:	45610000 	.word	0x45610000
   d7b88:	2003e628 	.word	0x2003e628

000d7b8c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7b8c:	b530      	push	{r4, r5, lr}
   d7b8e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d7b90:	4818      	ldr	r0, [pc, #96]	; (d7bf4 <_ZN9TimeClass7timeStrEx+0x68>)
   d7b92:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7b96:	1852      	adds	r2, r2, r1
   d7b98:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7b9c:	4816      	ldr	r0, [pc, #88]	; (d7bf8 <_ZN9TimeClass7timeStrEx+0x6c>)
   d7b9e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7ba2:	1852      	adds	r2, r2, r1
{
   d7ba4:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d7ba6:	eb40 0303 	adc.w	r3, r0, r3
   d7baa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d7bae:	2224      	movs	r2, #36	; 0x24
   d7bb0:	eb0d 0002 	add.w	r0, sp, r2
   d7bb4:	2100      	movs	r1, #0
   d7bb6:	f001 fb21 	bl	d91fc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d7bba:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7bbc:	a909      	add	r1, sp, #36	; 0x24
   d7bbe:	4668      	mov	r0, sp
   d7bc0:	f001 fa18 	bl	d8ff4 <localtime_r>
    char ascstr[26] = {};
   d7bc4:	2216      	movs	r2, #22
   d7bc6:	4629      	mov	r1, r5
   d7bc8:	a803      	add	r0, sp, #12
   d7bca:	9502      	str	r5, [sp, #8]
   d7bcc:	f001 fb16 	bl	d91fc <memset>
    asctime_r(&calendar_time, ascstr);
   d7bd0:	a902      	add	r1, sp, #8
   d7bd2:	a809      	add	r0, sp, #36	; 0x24
   d7bd4:	f001 f9d6 	bl	d8f84 <asctime_r>
    int len = strlen(ascstr);
   d7bd8:	a802      	add	r0, sp, #8
   d7bda:	f001 fb6a 	bl	d92b2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7bde:	ab12      	add	r3, sp, #72	; 0x48
   d7be0:	4418      	add	r0, r3
    return String(ascstr);
   d7be2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7be4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7be8:	4620      	mov	r0, r4
   d7bea:	f7ff fe02 	bl	d77f2 <_ZN6StringC1EPKc>
}
   d7bee:	4620      	mov	r0, r4
   d7bf0:	b013      	add	sp, #76	; 0x4c
   d7bf2:	bd30      	pop	{r4, r5, pc}
   d7bf4:	2003e628 	.word	0x2003e628
   d7bf8:	2003e620 	.word	0x2003e620

000d7bfc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7bfc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7bfe:	2000      	movs	r0, #0
   d7c00:	f7fe fb4e 	bl	d62a0 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7c04:	4604      	mov	r4, r0
   d7c06:	b9a0      	cbnz	r0, d7c32 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7c08:	f7fe fcb4 	bl	d6574 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7c0c:	2801      	cmp	r0, #1
   d7c0e:	d110      	bne.n	d7c32 <_ZN9TimeClass7isValidEv+0x36>
   d7c10:	4620      	mov	r0, r4
   d7c12:	f7fe fce7 	bl	d65e4 <system_thread_get_state>
   d7c16:	b960      	cbnz	r0, d7c32 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7c18:	f7ff ff8a 	bl	d7b30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7c1c:	b910      	cbnz	r0, d7c24 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7c1e:	f7fe fd2b 	bl	d6678 <spark_process>
        while (_while() && !_condition()) {
   d7c22:	e7f9      	b.n	d7c18 <_ZN9TimeClass7isValidEv+0x1c>
   d7c24:	f7ff ff84 	bl	d7b30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7c2c:	2000      	movs	r0, #0
   d7c2e:	f7fe bb37 	b.w	d62a0 <hal_rtc_time_is_valid>
}
   d7c32:	4620      	mov	r0, r4
   d7c34:	bd10      	pop	{r4, pc}

000d7c36 <_ZN9TimeClass3nowEv>:
{
   d7c36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7c38:	f7ff ffe0 	bl	d7bfc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7c3c:	2210      	movs	r2, #16
   d7c3e:	2100      	movs	r1, #0
   d7c40:	4668      	mov	r0, sp
   d7c42:	f001 fadb 	bl	d91fc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7c46:	2100      	movs	r1, #0
   d7c48:	4668      	mov	r0, sp
   d7c4a:	f7fe fb39 	bl	d62c0 <hal_rtc_get_time>
}
   d7c4e:	9800      	ldr	r0, [sp, #0]
   d7c50:	b005      	add	sp, #20
   d7c52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7c58 <_ZN9TimeClass4hourEv>:
{
   d7c58:	b508      	push	{r3, lr}
	return hour(now());
   d7c5a:	f7ff ffec 	bl	d7c36 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7c5e:	17c1      	asrs	r1, r0, #31
   d7c60:	f7ff ff30 	bl	d7ac4 <_ZL22Refresh_UnixTime_Cachex>
}
   d7c64:	4b01      	ldr	r3, [pc, #4]	; (d7c6c <_ZN9TimeClass4hourEv+0x14>)
   d7c66:	6898      	ldr	r0, [r3, #8]
   d7c68:	bd08      	pop	{r3, pc}
   d7c6a:	bf00      	nop
   d7c6c:	2003e5f8 	.word	0x2003e5f8

000d7c70 <_ZN9TimeClass6minuteEv>:
{
   d7c70:	b508      	push	{r3, lr}
	return minute(now());
   d7c72:	f7ff ffe0 	bl	d7c36 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7c76:	17c1      	asrs	r1, r0, #31
   d7c78:	f7ff ff24 	bl	d7ac4 <_ZL22Refresh_UnixTime_Cachex>
}
   d7c7c:	4b01      	ldr	r3, [pc, #4]	; (d7c84 <_ZN9TimeClass6minuteEv+0x14>)
   d7c7e:	6858      	ldr	r0, [r3, #4]
   d7c80:	bd08      	pop	{r3, pc}
   d7c82:	bf00      	nop
   d7c84:	2003e5f8 	.word	0x2003e5f8

000d7c88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7c88:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7c8a:	681a      	ldr	r2, [r3, #0]
   d7c8c:	4b02      	ldr	r3, [pc, #8]	; (d7c98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7c8e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7c90:	4770      	bx	lr
   d7c92:	bf00      	nop
   d7c94:	2003e1b8 	.word	0x2003e1b8
   d7c98:	2003e5f4 	.word	0x2003e5f4

000d7c9c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7c9c:	4770      	bx	lr

000d7c9e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c9e:	7441      	strb	r1, [r0, #17]
}
   d7ca0:	4770      	bx	lr

000d7ca2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7ca2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7ca4:	7c00      	ldrb	r0, [r0, #16]
   d7ca6:	f7fe fc13 	bl	d64d0 <hal_usart_available_data_for_write>
}
   d7caa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cae:	bd08      	pop	{r3, pc}

000d7cb0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7cb0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7cb2:	7c00      	ldrb	r0, [r0, #16]
   d7cb4:	f7fe fbe4 	bl	d6480 <hal_usart_available>
}
   d7cb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cbc:	bd08      	pop	{r3, pc}

000d7cbe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7cbe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7cc0:	7c00      	ldrb	r0, [r0, #16]
   d7cc2:	f7fe fbed 	bl	d64a0 <hal_usart_peek>
}
   d7cc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7cca:	bd08      	pop	{r3, pc}

000d7ccc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7ccc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7cce:	7c00      	ldrb	r0, [r0, #16]
   d7cd0:	f7fe fbde 	bl	d6490 <hal_usart_read>
}
   d7cd4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7cd8:	bd08      	pop	{r3, pc}

000d7cda <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7cda:	7c00      	ldrb	r0, [r0, #16]
   d7cdc:	f7fe bbe8 	b.w	d64b0 <hal_usart_flush>

000d7ce0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ce2:	7c45      	ldrb	r5, [r0, #17]
{
   d7ce4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ce6:	b12d      	cbz	r5, d7cf4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7ce8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7cea:	b003      	add	sp, #12
   d7cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7cf0:	f7fe bbbe 	b.w	d6470 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7cf4:	7c00      	ldrb	r0, [r0, #16]
   d7cf6:	9101      	str	r1, [sp, #4]
   d7cf8:	f7fe fbea 	bl	d64d0 <hal_usart_available_data_for_write>
   d7cfc:	2800      	cmp	r0, #0
   d7cfe:	9901      	ldr	r1, [sp, #4]
   d7d00:	dcf2      	bgt.n	d7ce8 <_ZN11USARTSerial5writeEh+0x8>
}
   d7d02:	4628      	mov	r0, r5
   d7d04:	b003      	add	sp, #12
   d7d06:	bd30      	pop	{r4, r5, pc}

000d7d08 <_ZN11USARTSerialD0Ev>:
   d7d08:	b510      	push	{r4, lr}
   d7d0a:	2114      	movs	r1, #20
   d7d0c:	4604      	mov	r4, r0
   d7d0e:	f000 fa9e 	bl	d824e <_ZdlPvj>
   d7d12:	4620      	mov	r0, r4
   d7d14:	bd10      	pop	{r4, pc}
	...

000d7d18 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7d18:	b510      	push	{r4, lr}
   d7d1a:	f04f 0c00 	mov.w	ip, #0
   d7d1e:	4604      	mov	r4, r0
   d7d20:	4608      	mov	r0, r1
   d7d22:	4611      	mov	r1, r2
   d7d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7d28:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7d2c:	4a04      	ldr	r2, [pc, #16]	; (d7d40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7d2e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7d30:	2201      	movs	r2, #1
  _serial = serial;
   d7d32:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7d34:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7d36:	461a      	mov	r2, r3
   d7d38:	f7fe fb92 	bl	d6460 <hal_usart_init>
}
   d7d3c:	4620      	mov	r0, r4
   d7d3e:	bd10      	pop	{r4, pc}
   d7d40:	000dc220 	.word	0x000dc220

000d7d44 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7d44:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7d46:	4c0e      	ldr	r4, [pc, #56]	; (d7d80 <_Z22__fetch_global_Serial1v+0x3c>)
   d7d48:	7821      	ldrb	r1, [r4, #0]
   d7d4a:	f3bf 8f5b 	dmb	ish
   d7d4e:	f011 0101 	ands.w	r1, r1, #1
   d7d52:	d112      	bne.n	d7d7a <_Z22__fetch_global_Serial1v+0x36>
   d7d54:	4620      	mov	r0, r4
   d7d56:	9101      	str	r1, [sp, #4]
   d7d58:	f7fc f9a3 	bl	d40a2 <__cxa_guard_acquire>
   d7d5c:	9901      	ldr	r1, [sp, #4]
   d7d5e:	b160      	cbz	r0, d7d7a <_Z22__fetch_global_Serial1v+0x36>
   d7d60:	4a08      	ldr	r2, [pc, #32]	; (d7d84 <_Z22__fetch_global_Serial1v+0x40>)
   d7d62:	4b09      	ldr	r3, [pc, #36]	; (d7d88 <_Z22__fetch_global_Serial1v+0x44>)
   d7d64:	4809      	ldr	r0, [pc, #36]	; (d7d8c <_Z22__fetch_global_Serial1v+0x48>)
   d7d66:	f7ff ffd7 	bl	d7d18 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7d6a:	4620      	mov	r0, r4
   d7d6c:	f7fc f99e 	bl	d40ac <__cxa_guard_release>
   d7d70:	4a07      	ldr	r2, [pc, #28]	; (d7d90 <_Z22__fetch_global_Serial1v+0x4c>)
   d7d72:	4908      	ldr	r1, [pc, #32]	; (d7d94 <_Z22__fetch_global_Serial1v+0x50>)
   d7d74:	4805      	ldr	r0, [pc, #20]	; (d7d8c <_Z22__fetch_global_Serial1v+0x48>)
   d7d76:	f000 fa65 	bl	d8244 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7d7a:	4804      	ldr	r0, [pc, #16]	; (d7d8c <_Z22__fetch_global_Serial1v+0x48>)
   d7d7c:	b002      	add	sp, #8
   d7d7e:	bd10      	pop	{r4, pc}
   d7d80:	2003e638 	.word	0x2003e638
   d7d84:	2003e63c 	.word	0x2003e63c
   d7d88:	2003e6c0 	.word	0x2003e6c0
   d7d8c:	2003e744 	.word	0x2003e744
   d7d90:	2003e3f8 	.word	0x2003e3f8
   d7d94:	000d7c9d 	.word	0x000d7c9d

000d7d98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d98:	7441      	strb	r1, [r0, #17]
}
   d7d9a:	4770      	bx	lr

000d7d9c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7d9c:	4770      	bx	lr

000d7d9e <_ZN9USBSerial4readEv>:
{
   d7d9e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7da0:	2100      	movs	r1, #0
   d7da2:	7c00      	ldrb	r0, [r0, #16]
   d7da4:	f7fe fbb4 	bl	d6510 <HAL_USB_USART_Receive_Data>
}
   d7da8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7dac:	bd08      	pop	{r3, pc}

000d7dae <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7dae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7db0:	2101      	movs	r1, #1
   d7db2:	7c00      	ldrb	r0, [r0, #16]
   d7db4:	f7fe fbac 	bl	d6510 <HAL_USB_USART_Receive_Data>
}
   d7db8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7dbc:	bd08      	pop	{r3, pc}

000d7dbe <_ZN9USBSerial17availableForWriteEv>:
{
   d7dbe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7dc0:	7c00      	ldrb	r0, [r0, #16]
   d7dc2:	f7fe fb9d 	bl	d6500 <HAL_USB_USART_Available_Data_For_Write>
}
   d7dc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7dca:	bd08      	pop	{r3, pc}

000d7dcc <_ZN9USBSerial9availableEv>:
{
   d7dcc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7dce:	7c00      	ldrb	r0, [r0, #16]
   d7dd0:	f7fe fb8e 	bl	d64f0 <HAL_USB_USART_Available_Data>
}
   d7dd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7dd8:	bd08      	pop	{r3, pc}

000d7dda <_ZN9USBSerial5writeEh>:
{
   d7dda:	b513      	push	{r0, r1, r4, lr}
   d7ddc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7dde:	7c00      	ldrb	r0, [r0, #16]
{
   d7de0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7de2:	f7fe fb8d 	bl	d6500 <HAL_USB_USART_Available_Data_For_Write>
   d7de6:	2800      	cmp	r0, #0
   d7de8:	9901      	ldr	r1, [sp, #4]
   d7dea:	dc01      	bgt.n	d7df0 <_ZN9USBSerial5writeEh+0x16>
   d7dec:	7c60      	ldrb	r0, [r4, #17]
   d7dee:	b120      	cbz	r0, d7dfa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7df0:	7c20      	ldrb	r0, [r4, #16]
   d7df2:	f7fe fb95 	bl	d6520 <HAL_USB_USART_Send_Data>
   d7df6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7dfa:	b002      	add	sp, #8
   d7dfc:	bd10      	pop	{r4, pc}

000d7dfe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7dfe:	7c00      	ldrb	r0, [r0, #16]
   d7e00:	f7fe bb96 	b.w	d6530 <HAL_USB_USART_Flush_Data>

000d7e04 <_ZN9USBSerialD0Ev>:
   d7e04:	b510      	push	{r4, lr}
   d7e06:	2114      	movs	r1, #20
   d7e08:	4604      	mov	r4, r0
   d7e0a:	f000 fa20 	bl	d824e <_ZdlPvj>
   d7e0e:	4620      	mov	r0, r4
   d7e10:	bd10      	pop	{r4, pc}
	...

000d7e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7e14:	b510      	push	{r4, lr}
   d7e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7e1a:	4604      	mov	r4, r0
   d7e1c:	4608      	mov	r0, r1
   d7e1e:	2100      	movs	r1, #0
   d7e20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7e24:	4b04      	ldr	r3, [pc, #16]	; (d7e38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7e26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7e28:	2301      	movs	r3, #1
  _serial = serial;
   d7e2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7e2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7e2e:	4611      	mov	r1, r2
   d7e30:	f7fe fb56 	bl	d64e0 <HAL_USB_USART_Init>
}
   d7e34:	4620      	mov	r0, r4
   d7e36:	bd10      	pop	{r4, pc}
   d7e38:	000dc250 	.word	0x000dc250

000d7e3c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7e3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7e3e:	2214      	movs	r2, #20
{
   d7e40:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7e42:	2100      	movs	r1, #0
   d7e44:	f001 f9da 	bl	d91fc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7e48:	4620      	mov	r0, r4
   d7e4a:	bd10      	pop	{r4, pc}

000d7e4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7e4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e4e:	4c10      	ldr	r4, [pc, #64]	; (d7e90 <_Z16_fetch_usbserialv+0x44>)
{
   d7e50:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7e52:	a803      	add	r0, sp, #12
   d7e54:	f7ff fff2 	bl	d7e3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e58:	7821      	ldrb	r1, [r4, #0]
   d7e5a:	f3bf 8f5b 	dmb	ish
   d7e5e:	f011 0101 	ands.w	r1, r1, #1
   d7e62:	d111      	bne.n	d7e88 <_Z16_fetch_usbserialv+0x3c>
   d7e64:	4620      	mov	r0, r4
   d7e66:	9101      	str	r1, [sp, #4]
   d7e68:	f7fc f91b 	bl	d40a2 <__cxa_guard_acquire>
   d7e6c:	9901      	ldr	r1, [sp, #4]
   d7e6e:	b158      	cbz	r0, d7e88 <_Z16_fetch_usbserialv+0x3c>
   d7e70:	aa03      	add	r2, sp, #12
   d7e72:	4808      	ldr	r0, [pc, #32]	; (d7e94 <_Z16_fetch_usbserialv+0x48>)
   d7e74:	f7ff ffce 	bl	d7e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7e78:	4620      	mov	r0, r4
   d7e7a:	f7fc f917 	bl	d40ac <__cxa_guard_release>
   d7e7e:	4a06      	ldr	r2, [pc, #24]	; (d7e98 <_Z16_fetch_usbserialv+0x4c>)
   d7e80:	4906      	ldr	r1, [pc, #24]	; (d7e9c <_Z16_fetch_usbserialv+0x50>)
   d7e82:	4804      	ldr	r0, [pc, #16]	; (d7e94 <_Z16_fetch_usbserialv+0x48>)
   d7e84:	f000 f9de 	bl	d8244 <__aeabi_atexit>
	return _usbserial;
}
   d7e88:	4802      	ldr	r0, [pc, #8]	; (d7e94 <_Z16_fetch_usbserialv+0x48>)
   d7e8a:	b008      	add	sp, #32
   d7e8c:	bd10      	pop	{r4, pc}
   d7e8e:	bf00      	nop
   d7e90:	2003e758 	.word	0x2003e758
   d7e94:	2003e75c 	.word	0x2003e75c
   d7e98:	2003e3f8 	.word	0x2003e3f8
   d7e9c:	000d7d9d 	.word	0x000d7d9d

000d7ea0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7ea0:	4b01      	ldr	r3, [pc, #4]	; (d7ea8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7ea2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7ea4:	4770      	bx	lr
   d7ea6:	bf00      	nop
   d7ea8:	2003e1bc 	.word	0x2003e1bc

000d7eac <serialEventRun>:
{
   d7eac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7eae:	4b0b      	ldr	r3, [pc, #44]	; (d7edc <serialEventRun+0x30>)
   d7eb0:	b143      	cbz	r3, d7ec4 <serialEventRun+0x18>
   d7eb2:	f7ff ffcb 	bl	d7e4c <_Z16_fetch_usbserialv>
   d7eb6:	6803      	ldr	r3, [r0, #0]
   d7eb8:	691b      	ldr	r3, [r3, #16]
   d7eba:	4798      	blx	r3
   d7ebc:	2800      	cmp	r0, #0
   d7ebe:	dd01      	ble.n	d7ec4 <serialEventRun+0x18>
        serialEvent();
   d7ec0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7ec4:	4b06      	ldr	r3, [pc, #24]	; (d7ee0 <serialEventRun+0x34>)
   d7ec6:	b143      	cbz	r3, d7eda <serialEventRun+0x2e>
   d7ec8:	f7ff ff3c 	bl	d7d44 <_Z22__fetch_global_Serial1v>
   d7ecc:	6803      	ldr	r3, [r0, #0]
   d7ece:	691b      	ldr	r3, [r3, #16]
   d7ed0:	4798      	blx	r3
   d7ed2:	2800      	cmp	r0, #0
   d7ed4:	dd01      	ble.n	d7eda <serialEventRun+0x2e>
        serialEvent1();
   d7ed6:	f3af 8000 	nop.w
}
   d7eda:	bd08      	pop	{r3, pc}
	...

000d7ee4 <_post_loop>:
{
   d7ee4:	b508      	push	{r3, lr}
	serialEventRun();
   d7ee6:	f7ff ffe1 	bl	d7eac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7eea:	f7fe f9b1 	bl	d6250 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7eee:	4b01      	ldr	r3, [pc, #4]	; (d7ef4 <_post_loop+0x10>)
   d7ef0:	6018      	str	r0, [r3, #0]
}
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	2003e784 	.word	0x2003e784

000d7ef8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7ef8:	4802      	ldr	r0, [pc, #8]	; (d7f04 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7efa:	4a03      	ldr	r2, [pc, #12]	; (d7f08 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7efc:	4903      	ldr	r1, [pc, #12]	; (d7f0c <_Z33system_initialize_user_backup_ramv+0x14>)
   d7efe:	1a12      	subs	r2, r2, r0
   d7f00:	f001 b96e 	b.w	d91e0 <memcpy>
   d7f04:	2003f400 	.word	0x2003f400
   d7f08:	2003f404 	.word	0x2003f404
   d7f0c:	000dc618 	.word	0x000dc618

000d7f10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7f10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f12:	2300      	movs	r3, #0
   d7f14:	9300      	str	r3, [sp, #0]
   d7f16:	461a      	mov	r2, r3
   d7f18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f1c:	f7fe fb74 	bl	d6608 <system_ctrl_set_result>
}
   d7f20:	b003      	add	sp, #12
   d7f22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7f28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7f28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7f2a:	8843      	ldrh	r3, [r0, #2]
   d7f2c:	2b0a      	cmp	r3, #10
   d7f2e:	d008      	beq.n	d7f42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7f30:	2b50      	cmp	r3, #80	; 0x50
   d7f32:	d10b      	bne.n	d7f4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7f34:	4b09      	ldr	r3, [pc, #36]	; (d7f5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7f36:	681b      	ldr	r3, [r3, #0]
   d7f38:	b14b      	cbz	r3, d7f4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7f3a:	b003      	add	sp, #12
   d7f3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7f40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7f42:	f7ff ffe5 	bl	d7f10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7f46:	b003      	add	sp, #12
   d7f48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f4c:	2300      	movs	r3, #0
   d7f4e:	9300      	str	r3, [sp, #0]
   d7f50:	461a      	mov	r2, r3
   d7f52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f56:	f7fe fb57 	bl	d6608 <system_ctrl_set_result>
}
   d7f5a:	e7f4      	b.n	d7f46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7f5c:	2003e774 	.word	0x2003e774

000d7f60 <module_user_init_hook>:
{
   d7f60:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f62:	4c12      	ldr	r4, [pc, #72]	; (d7fac <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7f64:	4812      	ldr	r0, [pc, #72]	; (d7fb0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f66:	4d13      	ldr	r5, [pc, #76]	; (d7fb4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7f68:	2100      	movs	r1, #0
   d7f6a:	f7fe fc65 	bl	d6838 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f6e:	6823      	ldr	r3, [r4, #0]
   d7f70:	42ab      	cmp	r3, r5
   d7f72:	4b11      	ldr	r3, [pc, #68]	; (d7fb8 <module_user_init_hook+0x58>)
   d7f74:	bf0c      	ite	eq
   d7f76:	2201      	moveq	r2, #1
   d7f78:	2200      	movne	r2, #0
   d7f7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7f7c:	d002      	beq.n	d7f84 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7f7e:	f7ff ffbb 	bl	d7ef8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7f82:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7f84:	f7fe f954 	bl	d6230 <HAL_RNG_GetRandomNumber>
   d7f88:	4604      	mov	r4, r0
    srand(seed);
   d7f8a:	f001 f93f 	bl	d920c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7f8e:	4b0b      	ldr	r3, [pc, #44]	; (d7fbc <module_user_init_hook+0x5c>)
   d7f90:	b113      	cbz	r3, d7f98 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7f92:	4620      	mov	r0, r4
   d7f94:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7f98:	2100      	movs	r1, #0
   d7f9a:	4808      	ldr	r0, [pc, #32]	; (d7fbc <module_user_init_hook+0x5c>)
   d7f9c:	f7fe fbac 	bl	d66f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7fa4:	4806      	ldr	r0, [pc, #24]	; (d7fc0 <module_user_init_hook+0x60>)
   d7fa6:	2100      	movs	r1, #0
   d7fa8:	f7fe bb24 	b.w	d65f4 <system_ctrl_set_app_request_handler>
   d7fac:	2003f400 	.word	0x2003f400
   d7fb0:	000d7ea1 	.word	0x000d7ea1
   d7fb4:	9a271c1e 	.word	0x9a271c1e
   d7fb8:	2003e770 	.word	0x2003e770
   d7fbc:	00000000 	.word	0x00000000
   d7fc0:	000d7f29 	.word	0x000d7f29

000d7fc4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b02      	ldr	r3, [pc, #8]	; (d7fd0 <spark_protocol_instance+0xc>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	681b      	ldr	r3, [r3, #0]
   d7fcc:	9301      	str	r3, [sp, #4]
   d7fce:	bd08      	pop	{r3, pc}
   d7fd0:	0003025c 	.word	0x0003025c

000d7fd4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7fd4:	b508      	push	{r3, lr}
   d7fd6:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <spark_protocol_set_product_id+0xc>)
   d7fd8:	681b      	ldr	r3, [r3, #0]
   d7fda:	685b      	ldr	r3, [r3, #4]
   d7fdc:	9301      	str	r3, [sp, #4]
   d7fde:	bd08      	pop	{r3, pc}
   d7fe0:	0003025c 	.word	0x0003025c

000d7fe4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7fe4:	b508      	push	{r3, lr}
   d7fe6:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <spark_protocol_set_product_firmware_version+0xc>)
   d7fe8:	681b      	ldr	r3, [r3, #0]
   d7fea:	689b      	ldr	r3, [r3, #8]
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	bd08      	pop	{r3, pc}
   d7ff0:	0003025c 	.word	0x0003025c

000d7ff4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7ff4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7ff6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7ff8:	d902      	bls.n	d8000 <pinAvailable+0xc>
    return false;
   d7ffa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7ffc:	b002      	add	sp, #8
   d7ffe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8000:	f1a0 030b 	sub.w	r3, r0, #11
   d8004:	2b02      	cmp	r3, #2
   d8006:	d81a      	bhi.n	d803e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8008:	4c17      	ldr	r4, [pc, #92]	; (d8068 <pinAvailable+0x74>)
   d800a:	7821      	ldrb	r1, [r4, #0]
   d800c:	f3bf 8f5b 	dmb	ish
   d8010:	f011 0101 	ands.w	r1, r1, #1
   d8014:	d10b      	bne.n	d802e <pinAvailable+0x3a>
   d8016:	4620      	mov	r0, r4
   d8018:	9101      	str	r1, [sp, #4]
   d801a:	f7fc f842 	bl	d40a2 <__cxa_guard_acquire>
   d801e:	9901      	ldr	r1, [sp, #4]
   d8020:	b128      	cbz	r0, d802e <pinAvailable+0x3a>
   d8022:	4812      	ldr	r0, [pc, #72]	; (d806c <pinAvailable+0x78>)
   d8024:	f7ff fb90 	bl	d7748 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8028:	4620      	mov	r0, r4
   d802a:	f7fc f83f 	bl	d40ac <__cxa_guard_release>
   d802e:	4b0f      	ldr	r3, [pc, #60]	; (d806c <pinAvailable+0x78>)
   d8030:	7818      	ldrb	r0, [r3, #0]
   d8032:	f7fe fa0d 	bl	d6450 <hal_spi_is_enabled>
   d8036:	2800      	cmp	r0, #0
   d8038:	d1df      	bne.n	d7ffa <pinAvailable+0x6>
  return true; // 'pin' is available
   d803a:	2001      	movs	r0, #1
   d803c:	e7de      	b.n	d7ffc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d803e:	2801      	cmp	r0, #1
   d8040:	d809      	bhi.n	d8056 <pinAvailable+0x62>
   d8042:	f000 f8af 	bl	d81a4 <_Z19__fetch_global_Wirev>
   d8046:	2100      	movs	r1, #0
   d8048:	7c00      	ldrb	r0, [r0, #16]
   d804a:	f7fe f9b9 	bl	d63c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d804e:	f080 0001 	eor.w	r0, r0, #1
   d8052:	b2c0      	uxtb	r0, r0
   d8054:	e7d2      	b.n	d7ffc <pinAvailable+0x8>
   d8056:	3809      	subs	r0, #9
   d8058:	2801      	cmp	r0, #1
   d805a:	d8ee      	bhi.n	d803a <pinAvailable+0x46>
   d805c:	f7ff fe72 	bl	d7d44 <_Z22__fetch_global_Serial1v>
   d8060:	7c00      	ldrb	r0, [r0, #16]
   d8062:	f7fe fa2d 	bl	d64c0 <hal_usart_is_enabled>
   d8066:	e7f2      	b.n	d804e <pinAvailable+0x5a>
   d8068:	2003e778 	.word	0x2003e778
   d806c:	2003e77c 	.word	0x2003e77c

000d8070 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8070:	2823      	cmp	r0, #35	; 0x23
{
   d8072:	b538      	push	{r3, r4, r5, lr}
   d8074:	4604      	mov	r4, r0
   d8076:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8078:	d80a      	bhi.n	d8090 <pinMode+0x20>
   d807a:	29ff      	cmp	r1, #255	; 0xff
   d807c:	d008      	beq.n	d8090 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d807e:	f7ff ffb9 	bl	d7ff4 <pinAvailable>
   d8082:	b128      	cbz	r0, d8090 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8084:	4629      	mov	r1, r5
   d8086:	4620      	mov	r0, r4
}
   d8088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d808c:	f7fe b930 	b.w	d62f0 <HAL_Pin_Mode>
}
   d8090:	bd38      	pop	{r3, r4, r5, pc}

000d8092 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8092:	b538      	push	{r3, r4, r5, lr}
   d8094:	4604      	mov	r4, r0
   d8096:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8098:	f7fe f932 	bl	d6300 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d809c:	28ff      	cmp	r0, #255	; 0xff
   d809e:	d010      	beq.n	d80c2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d80a0:	2806      	cmp	r0, #6
   d80a2:	d804      	bhi.n	d80ae <digitalWrite+0x1c>
   d80a4:	234d      	movs	r3, #77	; 0x4d
   d80a6:	fa23 f000 	lsr.w	r0, r3, r0
   d80aa:	07c3      	lsls	r3, r0, #31
   d80ac:	d409      	bmi.n	d80c2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d80ae:	4620      	mov	r0, r4
   d80b0:	f7ff ffa0 	bl	d7ff4 <pinAvailable>
   d80b4:	b128      	cbz	r0, d80c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d80b6:	4629      	mov	r1, r5
   d80b8:	4620      	mov	r0, r4
}
   d80ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d80be:	f7fe b927 	b.w	d6310 <HAL_GPIO_Write>
}
   d80c2:	bd38      	pop	{r3, r4, r5, pc}

000d80c4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d80c4:	b510      	push	{r4, lr}
   d80c6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d80c8:	f7fe f91a 	bl	d6300 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d80cc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d80ce:	b2db      	uxtb	r3, r3
   d80d0:	2b01      	cmp	r3, #1
   d80d2:	d908      	bls.n	d80e6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d80d4:	4620      	mov	r0, r4
   d80d6:	f7ff ff8d 	bl	d7ff4 <pinAvailable>
   d80da:	b120      	cbz	r0, d80e6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d80dc:	4620      	mov	r0, r4
}
   d80de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d80e2:	f7fe b91d 	b.w	d6320 <HAL_GPIO_Read>
}
   d80e6:	2000      	movs	r0, #0
   d80e8:	bd10      	pop	{r4, pc}

000d80ea <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d80ea:	280d      	cmp	r0, #13
{
   d80ec:	b510      	push	{r4, lr}
   d80ee:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d80f0:	bf9c      	itt	ls
   d80f2:	340e      	addls	r4, #14
   d80f4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d80f6:	4620      	mov	r0, r4
   d80f8:	f7ff ff7c 	bl	d7ff4 <pinAvailable>
   d80fc:	b150      	cbz	r0, d8114 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d80fe:	2103      	movs	r1, #3
   d8100:	4620      	mov	r0, r4
   d8102:	f7fe f8ed 	bl	d62e0 <HAL_Validate_Pin_Function>
   d8106:	2803      	cmp	r0, #3
   d8108:	d104      	bne.n	d8114 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d810a:	4620      	mov	r0, r4
}
   d810c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8110:	f7fe b90e 	b.w	d6330 <hal_adc_read>
}
   d8114:	2000      	movs	r0, #0
   d8116:	bd10      	pop	{r4, pc}

000d8118 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8118:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d811a:	4c08      	ldr	r4, [pc, #32]	; (d813c <_Z21__fetch_global_EEPROMv+0x24>)
   d811c:	7823      	ldrb	r3, [r4, #0]
   d811e:	f3bf 8f5b 	dmb	ish
   d8122:	07db      	lsls	r3, r3, #31
   d8124:	d408      	bmi.n	d8138 <_Z21__fetch_global_EEPROMv+0x20>
   d8126:	4620      	mov	r0, r4
   d8128:	f7fb ffbb 	bl	d40a2 <__cxa_guard_acquire>
   d812c:	b120      	cbz	r0, d8138 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d812e:	f7fe f897 	bl	d6260 <HAL_EEPROM_Init>
   d8132:	4620      	mov	r0, r4
   d8134:	f7fb ffba 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d8138:	4801      	ldr	r0, [pc, #4]	; (d8140 <_Z21__fetch_global_EEPROMv+0x28>)
   d813a:	bd10      	pop	{r4, pc}
   d813c:	2003e788 	.word	0x2003e788
   d8140:	2003e78c 	.word	0x2003e78c

000d8144 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8144:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8146:	2300      	movs	r3, #0
   d8148:	2520      	movs	r5, #32
   d814a:	8043      	strh	r3, [r0, #2]
   d814c:	2314      	movs	r3, #20
{
   d814e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8150:	8003      	strh	r3, [r0, #0]
   d8152:	6085      	str	r5, [r0, #8]
   d8154:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8156:	4906      	ldr	r1, [pc, #24]	; (d8170 <_Z17acquireWireBufferv+0x2c>)
   d8158:	4628      	mov	r0, r5
   d815a:	f000 f87c 	bl	d8256 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d815e:	4904      	ldr	r1, [pc, #16]	; (d8170 <_Z17acquireWireBufferv+0x2c>)
	};
   d8160:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8162:	4628      	mov	r0, r5
   d8164:	f000 f877 	bl	d8256 <_ZnajRKSt9nothrow_t>
	};
   d8168:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d816a:	4620      	mov	r0, r4
   d816c:	bd38      	pop	{r3, r4, r5, pc}
   d816e:	bf00      	nop
   d8170:	000dc278 	.word	0x000dc278

000d8174 <_Z18acquireWire1Bufferv>:
   d8174:	b538      	push	{r3, r4, r5, lr}
   d8176:	2300      	movs	r3, #0
   d8178:	2520      	movs	r5, #32
   d817a:	8043      	strh	r3, [r0, #2]
   d817c:	2314      	movs	r3, #20
   d817e:	4604      	mov	r4, r0
   d8180:	8003      	strh	r3, [r0, #0]
   d8182:	6085      	str	r5, [r0, #8]
   d8184:	6105      	str	r5, [r0, #16]
   d8186:	4906      	ldr	r1, [pc, #24]	; (d81a0 <_Z18acquireWire1Bufferv+0x2c>)
   d8188:	4628      	mov	r0, r5
   d818a:	f000 f864 	bl	d8256 <_ZnajRKSt9nothrow_t>
   d818e:	4904      	ldr	r1, [pc, #16]	; (d81a0 <_Z18acquireWire1Bufferv+0x2c>)
   d8190:	6060      	str	r0, [r4, #4]
   d8192:	4628      	mov	r0, r5
   d8194:	f000 f85f 	bl	d8256 <_ZnajRKSt9nothrow_t>
   d8198:	60e0      	str	r0, [r4, #12]
   d819a:	4620      	mov	r0, r4
   d819c:	bd38      	pop	{r3, r4, r5, pc}
   d819e:	bf00      	nop
   d81a0:	000dc278 	.word	0x000dc278

000d81a4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d81a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d81a6:	4d0f      	ldr	r5, [pc, #60]	; (d81e4 <_Z19__fetch_global_Wirev+0x40>)
   d81a8:	7829      	ldrb	r1, [r5, #0]
   d81aa:	f3bf 8f5b 	dmb	ish
   d81ae:	f011 0401 	ands.w	r4, r1, #1
{
   d81b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d81b4:	d113      	bne.n	d81de <_Z19__fetch_global_Wirev+0x3a>
   d81b6:	4628      	mov	r0, r5
   d81b8:	f7fb ff73 	bl	d40a2 <__cxa_guard_acquire>
   d81bc:	b178      	cbz	r0, d81de <_Z19__fetch_global_Wirev+0x3a>
   d81be:	a801      	add	r0, sp, #4
   d81c0:	f7ff ffc0 	bl	d8144 <_Z17acquireWireBufferv>
   d81c4:	aa01      	add	r2, sp, #4
   d81c6:	4621      	mov	r1, r4
   d81c8:	4807      	ldr	r0, [pc, #28]	; (d81e8 <_Z19__fetch_global_Wirev+0x44>)
   d81ca:	f7fe fffb 	bl	d71c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d81ce:	4628      	mov	r0, r5
   d81d0:	f7fb ff6c 	bl	d40ac <__cxa_guard_release>
   d81d4:	4a05      	ldr	r2, [pc, #20]	; (d81ec <_Z19__fetch_global_Wirev+0x48>)
   d81d6:	4906      	ldr	r1, [pc, #24]	; (d81f0 <_Z19__fetch_global_Wirev+0x4c>)
   d81d8:	4803      	ldr	r0, [pc, #12]	; (d81e8 <_Z19__fetch_global_Wirev+0x44>)
   d81da:	f000 f833 	bl	d8244 <__aeabi_atexit>
	return wire;
}
   d81de:	4802      	ldr	r0, [pc, #8]	; (d81e8 <_Z19__fetch_global_Wirev+0x44>)
   d81e0:	b007      	add	sp, #28
   d81e2:	bd30      	pop	{r4, r5, pc}
   d81e4:	2003e790 	.word	0x2003e790
   d81e8:	2003e798 	.word	0x2003e798
   d81ec:	2003e3f8 	.word	0x2003e3f8
   d81f0:	000d716d 	.word	0x000d716d

000d81f4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d81f4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d81f6:	4c0f      	ldr	r4, [pc, #60]	; (d8234 <_Z20__fetch_global_Wire1v+0x40>)
   d81f8:	7823      	ldrb	r3, [r4, #0]
   d81fa:	f3bf 8f5b 	dmb	ish
   d81fe:	07db      	lsls	r3, r3, #31
{
   d8200:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8202:	d413      	bmi.n	d822c <_Z20__fetch_global_Wire1v+0x38>
   d8204:	4620      	mov	r0, r4
   d8206:	f7fb ff4c 	bl	d40a2 <__cxa_guard_acquire>
   d820a:	b178      	cbz	r0, d822c <_Z20__fetch_global_Wire1v+0x38>
   d820c:	a801      	add	r0, sp, #4
   d820e:	f7ff ffb1 	bl	d8174 <_Z18acquireWire1Bufferv>
   d8212:	aa01      	add	r2, sp, #4
   d8214:	2101      	movs	r1, #1
   d8216:	4808      	ldr	r0, [pc, #32]	; (d8238 <_Z20__fetch_global_Wire1v+0x44>)
   d8218:	f7fe ffd4 	bl	d71c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d821c:	4620      	mov	r0, r4
   d821e:	f7fb ff45 	bl	d40ac <__cxa_guard_release>
   d8222:	4a06      	ldr	r2, [pc, #24]	; (d823c <_Z20__fetch_global_Wire1v+0x48>)
   d8224:	4906      	ldr	r1, [pc, #24]	; (d8240 <_Z20__fetch_global_Wire1v+0x4c>)
   d8226:	4804      	ldr	r0, [pc, #16]	; (d8238 <_Z20__fetch_global_Wire1v+0x44>)
   d8228:	f000 f80c 	bl	d8244 <__aeabi_atexit>
	return wire;
}
   d822c:	4802      	ldr	r0, [pc, #8]	; (d8238 <_Z20__fetch_global_Wire1v+0x44>)
   d822e:	b006      	add	sp, #24
   d8230:	bd10      	pop	{r4, pc}
   d8232:	bf00      	nop
   d8234:	2003e794 	.word	0x2003e794
   d8238:	2003e7ac 	.word	0x2003e7ac
   d823c:	2003e3f8 	.word	0x2003e3f8
   d8240:	000d716d 	.word	0x000d716d

000d8244 <__aeabi_atexit>:
   d8244:	460b      	mov	r3, r1
   d8246:	4601      	mov	r1, r0
   d8248:	4618      	mov	r0, r3
   d824a:	f000 bec5 	b.w	d8fd8 <__cxa_atexit>

000d824e <_ZdlPvj>:
   d824e:	f7fb bf26 	b.w	d409e <_ZdlPv>

000d8252 <_ZnwjRKSt9nothrow_t>:
   d8252:	f7fb bf20 	b.w	d4096 <_Znwj>

000d8256 <_ZnajRKSt9nothrow_t>:
   d8256:	f7fb bf20 	b.w	d409a <_Znaj>

000d825a <_ZSt25__throw_bad_function_callv>:
   d825a:	b508      	push	{r3, lr}
   d825c:	f7fe fadc 	bl	d6818 <abort>

000d8260 <__aeabi_drsub>:
   d8260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8264:	e002      	b.n	d826c <__adddf3>
   d8266:	bf00      	nop

000d8268 <__aeabi_dsub>:
   d8268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d826c <__adddf3>:
   d826c:	b530      	push	{r4, r5, lr}
   d826e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8272:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8276:	ea94 0f05 	teq	r4, r5
   d827a:	bf08      	it	eq
   d827c:	ea90 0f02 	teqeq	r0, r2
   d8280:	bf1f      	itttt	ne
   d8282:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8286:	ea55 0c02 	orrsne.w	ip, r5, r2
   d828a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d828e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8292:	f000 80e2 	beq.w	d845a <__adddf3+0x1ee>
   d8296:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d829a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d829e:	bfb8      	it	lt
   d82a0:	426d      	neglt	r5, r5
   d82a2:	dd0c      	ble.n	d82be <__adddf3+0x52>
   d82a4:	442c      	add	r4, r5
   d82a6:	ea80 0202 	eor.w	r2, r0, r2
   d82aa:	ea81 0303 	eor.w	r3, r1, r3
   d82ae:	ea82 0000 	eor.w	r0, r2, r0
   d82b2:	ea83 0101 	eor.w	r1, r3, r1
   d82b6:	ea80 0202 	eor.w	r2, r0, r2
   d82ba:	ea81 0303 	eor.w	r3, r1, r3
   d82be:	2d36      	cmp	r5, #54	; 0x36
   d82c0:	bf88      	it	hi
   d82c2:	bd30      	pophi	{r4, r5, pc}
   d82c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d82c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d82cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d82d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d82d4:	d002      	beq.n	d82dc <__adddf3+0x70>
   d82d6:	4240      	negs	r0, r0
   d82d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d82dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d82e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d82e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d82e8:	d002      	beq.n	d82f0 <__adddf3+0x84>
   d82ea:	4252      	negs	r2, r2
   d82ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d82f0:	ea94 0f05 	teq	r4, r5
   d82f4:	f000 80a7 	beq.w	d8446 <__adddf3+0x1da>
   d82f8:	f1a4 0401 	sub.w	r4, r4, #1
   d82fc:	f1d5 0e20 	rsbs	lr, r5, #32
   d8300:	db0d      	blt.n	d831e <__adddf3+0xb2>
   d8302:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8306:	fa22 f205 	lsr.w	r2, r2, r5
   d830a:	1880      	adds	r0, r0, r2
   d830c:	f141 0100 	adc.w	r1, r1, #0
   d8310:	fa03 f20e 	lsl.w	r2, r3, lr
   d8314:	1880      	adds	r0, r0, r2
   d8316:	fa43 f305 	asr.w	r3, r3, r5
   d831a:	4159      	adcs	r1, r3
   d831c:	e00e      	b.n	d833c <__adddf3+0xd0>
   d831e:	f1a5 0520 	sub.w	r5, r5, #32
   d8322:	f10e 0e20 	add.w	lr, lr, #32
   d8326:	2a01      	cmp	r2, #1
   d8328:	fa03 fc0e 	lsl.w	ip, r3, lr
   d832c:	bf28      	it	cs
   d832e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8332:	fa43 f305 	asr.w	r3, r3, r5
   d8336:	18c0      	adds	r0, r0, r3
   d8338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d833c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8340:	d507      	bpl.n	d8352 <__adddf3+0xe6>
   d8342:	f04f 0e00 	mov.w	lr, #0
   d8346:	f1dc 0c00 	rsbs	ip, ip, #0
   d834a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d834e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8352:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8356:	d31b      	bcc.n	d8390 <__adddf3+0x124>
   d8358:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d835c:	d30c      	bcc.n	d8378 <__adddf3+0x10c>
   d835e:	0849      	lsrs	r1, r1, #1
   d8360:	ea5f 0030 	movs.w	r0, r0, rrx
   d8364:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8368:	f104 0401 	add.w	r4, r4, #1
   d836c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8370:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8374:	f080 809a 	bcs.w	d84ac <__adddf3+0x240>
   d8378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d837c:	bf08      	it	eq
   d837e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8382:	f150 0000 	adcs.w	r0, r0, #0
   d8386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d838a:	ea41 0105 	orr.w	r1, r1, r5
   d838e:	bd30      	pop	{r4, r5, pc}
   d8390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8394:	4140      	adcs	r0, r0
   d8396:	eb41 0101 	adc.w	r1, r1, r1
   d839a:	3c01      	subs	r4, #1
   d839c:	bf28      	it	cs
   d839e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d83a2:	d2e9      	bcs.n	d8378 <__adddf3+0x10c>
   d83a4:	f091 0f00 	teq	r1, #0
   d83a8:	bf04      	itt	eq
   d83aa:	4601      	moveq	r1, r0
   d83ac:	2000      	moveq	r0, #0
   d83ae:	fab1 f381 	clz	r3, r1
   d83b2:	bf08      	it	eq
   d83b4:	3320      	addeq	r3, #32
   d83b6:	f1a3 030b 	sub.w	r3, r3, #11
   d83ba:	f1b3 0220 	subs.w	r2, r3, #32
   d83be:	da0c      	bge.n	d83da <__adddf3+0x16e>
   d83c0:	320c      	adds	r2, #12
   d83c2:	dd08      	ble.n	d83d6 <__adddf3+0x16a>
   d83c4:	f102 0c14 	add.w	ip, r2, #20
   d83c8:	f1c2 020c 	rsb	r2, r2, #12
   d83cc:	fa01 f00c 	lsl.w	r0, r1, ip
   d83d0:	fa21 f102 	lsr.w	r1, r1, r2
   d83d4:	e00c      	b.n	d83f0 <__adddf3+0x184>
   d83d6:	f102 0214 	add.w	r2, r2, #20
   d83da:	bfd8      	it	le
   d83dc:	f1c2 0c20 	rsble	ip, r2, #32
   d83e0:	fa01 f102 	lsl.w	r1, r1, r2
   d83e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d83e8:	bfdc      	itt	le
   d83ea:	ea41 010c 	orrle.w	r1, r1, ip
   d83ee:	4090      	lslle	r0, r2
   d83f0:	1ae4      	subs	r4, r4, r3
   d83f2:	bfa2      	ittt	ge
   d83f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d83f8:	4329      	orrge	r1, r5
   d83fa:	bd30      	popge	{r4, r5, pc}
   d83fc:	ea6f 0404 	mvn.w	r4, r4
   d8400:	3c1f      	subs	r4, #31
   d8402:	da1c      	bge.n	d843e <__adddf3+0x1d2>
   d8404:	340c      	adds	r4, #12
   d8406:	dc0e      	bgt.n	d8426 <__adddf3+0x1ba>
   d8408:	f104 0414 	add.w	r4, r4, #20
   d840c:	f1c4 0220 	rsb	r2, r4, #32
   d8410:	fa20 f004 	lsr.w	r0, r0, r4
   d8414:	fa01 f302 	lsl.w	r3, r1, r2
   d8418:	ea40 0003 	orr.w	r0, r0, r3
   d841c:	fa21 f304 	lsr.w	r3, r1, r4
   d8420:	ea45 0103 	orr.w	r1, r5, r3
   d8424:	bd30      	pop	{r4, r5, pc}
   d8426:	f1c4 040c 	rsb	r4, r4, #12
   d842a:	f1c4 0220 	rsb	r2, r4, #32
   d842e:	fa20 f002 	lsr.w	r0, r0, r2
   d8432:	fa01 f304 	lsl.w	r3, r1, r4
   d8436:	ea40 0003 	orr.w	r0, r0, r3
   d843a:	4629      	mov	r1, r5
   d843c:	bd30      	pop	{r4, r5, pc}
   d843e:	fa21 f004 	lsr.w	r0, r1, r4
   d8442:	4629      	mov	r1, r5
   d8444:	bd30      	pop	{r4, r5, pc}
   d8446:	f094 0f00 	teq	r4, #0
   d844a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d844e:	bf06      	itte	eq
   d8450:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8454:	3401      	addeq	r4, #1
   d8456:	3d01      	subne	r5, #1
   d8458:	e74e      	b.n	d82f8 <__adddf3+0x8c>
   d845a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d845e:	bf18      	it	ne
   d8460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8464:	d029      	beq.n	d84ba <__adddf3+0x24e>
   d8466:	ea94 0f05 	teq	r4, r5
   d846a:	bf08      	it	eq
   d846c:	ea90 0f02 	teqeq	r0, r2
   d8470:	d005      	beq.n	d847e <__adddf3+0x212>
   d8472:	ea54 0c00 	orrs.w	ip, r4, r0
   d8476:	bf04      	itt	eq
   d8478:	4619      	moveq	r1, r3
   d847a:	4610      	moveq	r0, r2
   d847c:	bd30      	pop	{r4, r5, pc}
   d847e:	ea91 0f03 	teq	r1, r3
   d8482:	bf1e      	ittt	ne
   d8484:	2100      	movne	r1, #0
   d8486:	2000      	movne	r0, #0
   d8488:	bd30      	popne	{r4, r5, pc}
   d848a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d848e:	d105      	bne.n	d849c <__adddf3+0x230>
   d8490:	0040      	lsls	r0, r0, #1
   d8492:	4149      	adcs	r1, r1
   d8494:	bf28      	it	cs
   d8496:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d849a:	bd30      	pop	{r4, r5, pc}
   d849c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d84a0:	bf3c      	itt	cc
   d84a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d84a6:	bd30      	popcc	{r4, r5, pc}
   d84a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d84ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d84b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d84b4:	f04f 0000 	mov.w	r0, #0
   d84b8:	bd30      	pop	{r4, r5, pc}
   d84ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d84be:	bf1a      	itte	ne
   d84c0:	4619      	movne	r1, r3
   d84c2:	4610      	movne	r0, r2
   d84c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d84c8:	bf1c      	itt	ne
   d84ca:	460b      	movne	r3, r1
   d84cc:	4602      	movne	r2, r0
   d84ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d84d2:	bf06      	itte	eq
   d84d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d84d8:	ea91 0f03 	teqeq	r1, r3
   d84dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d84e0:	bd30      	pop	{r4, r5, pc}
   d84e2:	bf00      	nop

000d84e4 <__aeabi_ui2d>:
   d84e4:	f090 0f00 	teq	r0, #0
   d84e8:	bf04      	itt	eq
   d84ea:	2100      	moveq	r1, #0
   d84ec:	4770      	bxeq	lr
   d84ee:	b530      	push	{r4, r5, lr}
   d84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84f8:	f04f 0500 	mov.w	r5, #0
   d84fc:	f04f 0100 	mov.w	r1, #0
   d8500:	e750      	b.n	d83a4 <__adddf3+0x138>
   d8502:	bf00      	nop

000d8504 <__aeabi_i2d>:
   d8504:	f090 0f00 	teq	r0, #0
   d8508:	bf04      	itt	eq
   d850a:	2100      	moveq	r1, #0
   d850c:	4770      	bxeq	lr
   d850e:	b530      	push	{r4, r5, lr}
   d8510:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8514:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8518:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d851c:	bf48      	it	mi
   d851e:	4240      	negmi	r0, r0
   d8520:	f04f 0100 	mov.w	r1, #0
   d8524:	e73e      	b.n	d83a4 <__adddf3+0x138>
   d8526:	bf00      	nop

000d8528 <__aeabi_f2d>:
   d8528:	0042      	lsls	r2, r0, #1
   d852a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d852e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8532:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8536:	bf1f      	itttt	ne
   d8538:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d853c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8540:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8544:	4770      	bxne	lr
   d8546:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d854a:	bf08      	it	eq
   d854c:	4770      	bxeq	lr
   d854e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8552:	bf04      	itt	eq
   d8554:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8558:	4770      	bxeq	lr
   d855a:	b530      	push	{r4, r5, lr}
   d855c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8568:	e71c      	b.n	d83a4 <__adddf3+0x138>
   d856a:	bf00      	nop

000d856c <__aeabi_ul2d>:
   d856c:	ea50 0201 	orrs.w	r2, r0, r1
   d8570:	bf08      	it	eq
   d8572:	4770      	bxeq	lr
   d8574:	b530      	push	{r4, r5, lr}
   d8576:	f04f 0500 	mov.w	r5, #0
   d857a:	e00a      	b.n	d8592 <__aeabi_l2d+0x16>

000d857c <__aeabi_l2d>:
   d857c:	ea50 0201 	orrs.w	r2, r0, r1
   d8580:	bf08      	it	eq
   d8582:	4770      	bxeq	lr
   d8584:	b530      	push	{r4, r5, lr}
   d8586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d858a:	d502      	bpl.n	d8592 <__aeabi_l2d+0x16>
   d858c:	4240      	negs	r0, r0
   d858e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8592:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8596:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d859a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d859e:	f43f aed8 	beq.w	d8352 <__adddf3+0xe6>
   d85a2:	f04f 0203 	mov.w	r2, #3
   d85a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d85aa:	bf18      	it	ne
   d85ac:	3203      	addne	r2, #3
   d85ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d85b2:	bf18      	it	ne
   d85b4:	3203      	addne	r2, #3
   d85b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d85ba:	f1c2 0320 	rsb	r3, r2, #32
   d85be:	fa00 fc03 	lsl.w	ip, r0, r3
   d85c2:	fa20 f002 	lsr.w	r0, r0, r2
   d85c6:	fa01 fe03 	lsl.w	lr, r1, r3
   d85ca:	ea40 000e 	orr.w	r0, r0, lr
   d85ce:	fa21 f102 	lsr.w	r1, r1, r2
   d85d2:	4414      	add	r4, r2
   d85d4:	e6bd      	b.n	d8352 <__adddf3+0xe6>
   d85d6:	bf00      	nop

000d85d8 <__aeabi_dmul>:
   d85d8:	b570      	push	{r4, r5, r6, lr}
   d85da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d85de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d85e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d85e6:	bf1d      	ittte	ne
   d85e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d85ec:	ea94 0f0c 	teqne	r4, ip
   d85f0:	ea95 0f0c 	teqne	r5, ip
   d85f4:	f000 f8de 	bleq	d87b4 <__aeabi_dmul+0x1dc>
   d85f8:	442c      	add	r4, r5
   d85fa:	ea81 0603 	eor.w	r6, r1, r3
   d85fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d860a:	bf18      	it	ne
   d860c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8618:	d038      	beq.n	d868c <__aeabi_dmul+0xb4>
   d861a:	fba0 ce02 	umull	ip, lr, r0, r2
   d861e:	f04f 0500 	mov.w	r5, #0
   d8622:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8626:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d862a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d862e:	f04f 0600 	mov.w	r6, #0
   d8632:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8636:	f09c 0f00 	teq	ip, #0
   d863a:	bf18      	it	ne
   d863c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8640:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8644:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8648:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d864c:	d204      	bcs.n	d8658 <__aeabi_dmul+0x80>
   d864e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8652:	416d      	adcs	r5, r5
   d8654:	eb46 0606 	adc.w	r6, r6, r6
   d8658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d865c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d866c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8670:	bf88      	it	hi
   d8672:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8676:	d81e      	bhi.n	d86b6 <__aeabi_dmul+0xde>
   d8678:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d867c:	bf08      	it	eq
   d867e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8682:	f150 0000 	adcs.w	r0, r0, #0
   d8686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d868a:	bd70      	pop	{r4, r5, r6, pc}
   d868c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8690:	ea46 0101 	orr.w	r1, r6, r1
   d8694:	ea40 0002 	orr.w	r0, r0, r2
   d8698:	ea81 0103 	eor.w	r1, r1, r3
   d869c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d86a0:	bfc2      	ittt	gt
   d86a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d86a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d86aa:	bd70      	popgt	{r4, r5, r6, pc}
   d86ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86b0:	f04f 0e00 	mov.w	lr, #0
   d86b4:	3c01      	subs	r4, #1
   d86b6:	f300 80ab 	bgt.w	d8810 <__aeabi_dmul+0x238>
   d86ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d86be:	bfde      	ittt	le
   d86c0:	2000      	movle	r0, #0
   d86c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d86c6:	bd70      	pople	{r4, r5, r6, pc}
   d86c8:	f1c4 0400 	rsb	r4, r4, #0
   d86cc:	3c20      	subs	r4, #32
   d86ce:	da35      	bge.n	d873c <__aeabi_dmul+0x164>
   d86d0:	340c      	adds	r4, #12
   d86d2:	dc1b      	bgt.n	d870c <__aeabi_dmul+0x134>
   d86d4:	f104 0414 	add.w	r4, r4, #20
   d86d8:	f1c4 0520 	rsb	r5, r4, #32
   d86dc:	fa00 f305 	lsl.w	r3, r0, r5
   d86e0:	fa20 f004 	lsr.w	r0, r0, r4
   d86e4:	fa01 f205 	lsl.w	r2, r1, r5
   d86e8:	ea40 0002 	orr.w	r0, r0, r2
   d86ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d86f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d86f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d86f8:	fa21 f604 	lsr.w	r6, r1, r4
   d86fc:	eb42 0106 	adc.w	r1, r2, r6
   d8700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8704:	bf08      	it	eq
   d8706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d870a:	bd70      	pop	{r4, r5, r6, pc}
   d870c:	f1c4 040c 	rsb	r4, r4, #12
   d8710:	f1c4 0520 	rsb	r5, r4, #32
   d8714:	fa00 f304 	lsl.w	r3, r0, r4
   d8718:	fa20 f005 	lsr.w	r0, r0, r5
   d871c:	fa01 f204 	lsl.w	r2, r1, r4
   d8720:	ea40 0002 	orr.w	r0, r0, r2
   d8724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d872c:	f141 0100 	adc.w	r1, r1, #0
   d8730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8734:	bf08      	it	eq
   d8736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d873a:	bd70      	pop	{r4, r5, r6, pc}
   d873c:	f1c4 0520 	rsb	r5, r4, #32
   d8740:	fa00 f205 	lsl.w	r2, r0, r5
   d8744:	ea4e 0e02 	orr.w	lr, lr, r2
   d8748:	fa20 f304 	lsr.w	r3, r0, r4
   d874c:	fa01 f205 	lsl.w	r2, r1, r5
   d8750:	ea43 0302 	orr.w	r3, r3, r2
   d8754:	fa21 f004 	lsr.w	r0, r1, r4
   d8758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d875c:	fa21 f204 	lsr.w	r2, r1, r4
   d8760:	ea20 0002 	bic.w	r0, r0, r2
   d8764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d876c:	bf08      	it	eq
   d876e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8772:	bd70      	pop	{r4, r5, r6, pc}
   d8774:	f094 0f00 	teq	r4, #0
   d8778:	d10f      	bne.n	d879a <__aeabi_dmul+0x1c2>
   d877a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d877e:	0040      	lsls	r0, r0, #1
   d8780:	eb41 0101 	adc.w	r1, r1, r1
   d8784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8788:	bf08      	it	eq
   d878a:	3c01      	subeq	r4, #1
   d878c:	d0f7      	beq.n	d877e <__aeabi_dmul+0x1a6>
   d878e:	ea41 0106 	orr.w	r1, r1, r6
   d8792:	f095 0f00 	teq	r5, #0
   d8796:	bf18      	it	ne
   d8798:	4770      	bxne	lr
   d879a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d879e:	0052      	lsls	r2, r2, #1
   d87a0:	eb43 0303 	adc.w	r3, r3, r3
   d87a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d87a8:	bf08      	it	eq
   d87aa:	3d01      	subeq	r5, #1
   d87ac:	d0f7      	beq.n	d879e <__aeabi_dmul+0x1c6>
   d87ae:	ea43 0306 	orr.w	r3, r3, r6
   d87b2:	4770      	bx	lr
   d87b4:	ea94 0f0c 	teq	r4, ip
   d87b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d87bc:	bf18      	it	ne
   d87be:	ea95 0f0c 	teqne	r5, ip
   d87c2:	d00c      	beq.n	d87de <__aeabi_dmul+0x206>
   d87c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87c8:	bf18      	it	ne
   d87ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87ce:	d1d1      	bne.n	d8774 <__aeabi_dmul+0x19c>
   d87d0:	ea81 0103 	eor.w	r1, r1, r3
   d87d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87d8:	f04f 0000 	mov.w	r0, #0
   d87dc:	bd70      	pop	{r4, r5, r6, pc}
   d87de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87e2:	bf06      	itte	eq
   d87e4:	4610      	moveq	r0, r2
   d87e6:	4619      	moveq	r1, r3
   d87e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87ec:	d019      	beq.n	d8822 <__aeabi_dmul+0x24a>
   d87ee:	ea94 0f0c 	teq	r4, ip
   d87f2:	d102      	bne.n	d87fa <__aeabi_dmul+0x222>
   d87f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d87f8:	d113      	bne.n	d8822 <__aeabi_dmul+0x24a>
   d87fa:	ea95 0f0c 	teq	r5, ip
   d87fe:	d105      	bne.n	d880c <__aeabi_dmul+0x234>
   d8800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8804:	bf1c      	itt	ne
   d8806:	4610      	movne	r0, r2
   d8808:	4619      	movne	r1, r3
   d880a:	d10a      	bne.n	d8822 <__aeabi_dmul+0x24a>
   d880c:	ea81 0103 	eor.w	r1, r1, r3
   d8810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8814:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d881c:	f04f 0000 	mov.w	r0, #0
   d8820:	bd70      	pop	{r4, r5, r6, pc}
   d8822:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8826:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d882a:	bd70      	pop	{r4, r5, r6, pc}

000d882c <__aeabi_ddiv>:
   d882c:	b570      	push	{r4, r5, r6, lr}
   d882e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d883a:	bf1d      	ittte	ne
   d883c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8840:	ea94 0f0c 	teqne	r4, ip
   d8844:	ea95 0f0c 	teqne	r5, ip
   d8848:	f000 f8a7 	bleq	d899a <__aeabi_ddiv+0x16e>
   d884c:	eba4 0405 	sub.w	r4, r4, r5
   d8850:	ea81 0e03 	eor.w	lr, r1, r3
   d8854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8858:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d885c:	f000 8088 	beq.w	d8970 <__aeabi_ddiv+0x144>
   d8860:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8864:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d886c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8870:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d887c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8880:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8884:	429d      	cmp	r5, r3
   d8886:	bf08      	it	eq
   d8888:	4296      	cmpeq	r6, r2
   d888a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d888e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8892:	d202      	bcs.n	d889a <__aeabi_ddiv+0x6e>
   d8894:	085b      	lsrs	r3, r3, #1
   d8896:	ea4f 0232 	mov.w	r2, r2, rrx
   d889a:	1ab6      	subs	r6, r6, r2
   d889c:	eb65 0503 	sbc.w	r5, r5, r3
   d88a0:	085b      	lsrs	r3, r3, #1
   d88a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d88aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d88ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d88b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88b6:	bf22      	ittt	cs
   d88b8:	1ab6      	subcs	r6, r6, r2
   d88ba:	4675      	movcs	r5, lr
   d88bc:	ea40 000c 	orrcs.w	r0, r0, ip
   d88c0:	085b      	lsrs	r3, r3, #1
   d88c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d88ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88ce:	bf22      	ittt	cs
   d88d0:	1ab6      	subcs	r6, r6, r2
   d88d2:	4675      	movcs	r5, lr
   d88d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d88d8:	085b      	lsrs	r3, r3, #1
   d88da:	ea4f 0232 	mov.w	r2, r2, rrx
   d88de:	ebb6 0e02 	subs.w	lr, r6, r2
   d88e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88e6:	bf22      	ittt	cs
   d88e8:	1ab6      	subcs	r6, r6, r2
   d88ea:	4675      	movcs	r5, lr
   d88ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d88f0:	085b      	lsrs	r3, r3, #1
   d88f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d88fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88fe:	bf22      	ittt	cs
   d8900:	1ab6      	subcs	r6, r6, r2
   d8902:	4675      	movcs	r5, lr
   d8904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8908:	ea55 0e06 	orrs.w	lr, r5, r6
   d890c:	d018      	beq.n	d8940 <__aeabi_ddiv+0x114>
   d890e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8916:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d891a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d891e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d892a:	d1c0      	bne.n	d88ae <__aeabi_ddiv+0x82>
   d892c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8930:	d10b      	bne.n	d894a <__aeabi_ddiv+0x11e>
   d8932:	ea41 0100 	orr.w	r1, r1, r0
   d8936:	f04f 0000 	mov.w	r0, #0
   d893a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d893e:	e7b6      	b.n	d88ae <__aeabi_ddiv+0x82>
   d8940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8944:	bf04      	itt	eq
   d8946:	4301      	orreq	r1, r0
   d8948:	2000      	moveq	r0, #0
   d894a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d894e:	bf88      	it	hi
   d8950:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8954:	f63f aeaf 	bhi.w	d86b6 <__aeabi_dmul+0xde>
   d8958:	ebb5 0c03 	subs.w	ip, r5, r3
   d895c:	bf04      	itt	eq
   d895e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8966:	f150 0000 	adcs.w	r0, r0, #0
   d896a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d896e:	bd70      	pop	{r4, r5, r6, pc}
   d8970:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d897c:	bfc2      	ittt	gt
   d897e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8986:	bd70      	popgt	{r4, r5, r6, pc}
   d8988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d898c:	f04f 0e00 	mov.w	lr, #0
   d8990:	3c01      	subs	r4, #1
   d8992:	e690      	b.n	d86b6 <__aeabi_dmul+0xde>
   d8994:	ea45 0e06 	orr.w	lr, r5, r6
   d8998:	e68d      	b.n	d86b6 <__aeabi_dmul+0xde>
   d899a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d899e:	ea94 0f0c 	teq	r4, ip
   d89a2:	bf08      	it	eq
   d89a4:	ea95 0f0c 	teqeq	r5, ip
   d89a8:	f43f af3b 	beq.w	d8822 <__aeabi_dmul+0x24a>
   d89ac:	ea94 0f0c 	teq	r4, ip
   d89b0:	d10a      	bne.n	d89c8 <__aeabi_ddiv+0x19c>
   d89b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d89b6:	f47f af34 	bne.w	d8822 <__aeabi_dmul+0x24a>
   d89ba:	ea95 0f0c 	teq	r5, ip
   d89be:	f47f af25 	bne.w	d880c <__aeabi_dmul+0x234>
   d89c2:	4610      	mov	r0, r2
   d89c4:	4619      	mov	r1, r3
   d89c6:	e72c      	b.n	d8822 <__aeabi_dmul+0x24a>
   d89c8:	ea95 0f0c 	teq	r5, ip
   d89cc:	d106      	bne.n	d89dc <__aeabi_ddiv+0x1b0>
   d89ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d89d2:	f43f aefd 	beq.w	d87d0 <__aeabi_dmul+0x1f8>
   d89d6:	4610      	mov	r0, r2
   d89d8:	4619      	mov	r1, r3
   d89da:	e722      	b.n	d8822 <__aeabi_dmul+0x24a>
   d89dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d89e0:	bf18      	it	ne
   d89e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d89e6:	f47f aec5 	bne.w	d8774 <__aeabi_dmul+0x19c>
   d89ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d89ee:	f47f af0d 	bne.w	d880c <__aeabi_dmul+0x234>
   d89f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d89f6:	f47f aeeb 	bne.w	d87d0 <__aeabi_dmul+0x1f8>
   d89fa:	e712      	b.n	d8822 <__aeabi_dmul+0x24a>

000d89fc <__gedf2>:
   d89fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8a00:	e006      	b.n	d8a10 <__cmpdf2+0x4>
   d8a02:	bf00      	nop

000d8a04 <__ledf2>:
   d8a04:	f04f 0c01 	mov.w	ip, #1
   d8a08:	e002      	b.n	d8a10 <__cmpdf2+0x4>
   d8a0a:	bf00      	nop

000d8a0c <__cmpdf2>:
   d8a0c:	f04f 0c01 	mov.w	ip, #1
   d8a10:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a20:	bf18      	it	ne
   d8a22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8a26:	d01b      	beq.n	d8a60 <__cmpdf2+0x54>
   d8a28:	b001      	add	sp, #4
   d8a2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8a2e:	bf0c      	ite	eq
   d8a30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8a34:	ea91 0f03 	teqne	r1, r3
   d8a38:	bf02      	ittt	eq
   d8a3a:	ea90 0f02 	teqeq	r0, r2
   d8a3e:	2000      	moveq	r0, #0
   d8a40:	4770      	bxeq	lr
   d8a42:	f110 0f00 	cmn.w	r0, #0
   d8a46:	ea91 0f03 	teq	r1, r3
   d8a4a:	bf58      	it	pl
   d8a4c:	4299      	cmppl	r1, r3
   d8a4e:	bf08      	it	eq
   d8a50:	4290      	cmpeq	r0, r2
   d8a52:	bf2c      	ite	cs
   d8a54:	17d8      	asrcs	r0, r3, #31
   d8a56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8a5a:	f040 0001 	orr.w	r0, r0, #1
   d8a5e:	4770      	bx	lr
   d8a60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a68:	d102      	bne.n	d8a70 <__cmpdf2+0x64>
   d8a6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8a6e:	d107      	bne.n	d8a80 <__cmpdf2+0x74>
   d8a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a78:	d1d6      	bne.n	d8a28 <__cmpdf2+0x1c>
   d8a7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8a7e:	d0d3      	beq.n	d8a28 <__cmpdf2+0x1c>
   d8a80:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8a84:	4770      	bx	lr
   d8a86:	bf00      	nop

000d8a88 <__aeabi_cdrcmple>:
   d8a88:	4684      	mov	ip, r0
   d8a8a:	4610      	mov	r0, r2
   d8a8c:	4662      	mov	r2, ip
   d8a8e:	468c      	mov	ip, r1
   d8a90:	4619      	mov	r1, r3
   d8a92:	4663      	mov	r3, ip
   d8a94:	e000      	b.n	d8a98 <__aeabi_cdcmpeq>
   d8a96:	bf00      	nop

000d8a98 <__aeabi_cdcmpeq>:
   d8a98:	b501      	push	{r0, lr}
   d8a9a:	f7ff ffb7 	bl	d8a0c <__cmpdf2>
   d8a9e:	2800      	cmp	r0, #0
   d8aa0:	bf48      	it	mi
   d8aa2:	f110 0f00 	cmnmi.w	r0, #0
   d8aa6:	bd01      	pop	{r0, pc}

000d8aa8 <__aeabi_dcmpeq>:
   d8aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8aac:	f7ff fff4 	bl	d8a98 <__aeabi_cdcmpeq>
   d8ab0:	bf0c      	ite	eq
   d8ab2:	2001      	moveq	r0, #1
   d8ab4:	2000      	movne	r0, #0
   d8ab6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8aba:	bf00      	nop

000d8abc <__aeabi_dcmplt>:
   d8abc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ac0:	f7ff ffea 	bl	d8a98 <__aeabi_cdcmpeq>
   d8ac4:	bf34      	ite	cc
   d8ac6:	2001      	movcc	r0, #1
   d8ac8:	2000      	movcs	r0, #0
   d8aca:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ace:	bf00      	nop

000d8ad0 <__aeabi_dcmple>:
   d8ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ad4:	f7ff ffe0 	bl	d8a98 <__aeabi_cdcmpeq>
   d8ad8:	bf94      	ite	ls
   d8ada:	2001      	movls	r0, #1
   d8adc:	2000      	movhi	r0, #0
   d8ade:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ae2:	bf00      	nop

000d8ae4 <__aeabi_dcmpge>:
   d8ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ae8:	f7ff ffce 	bl	d8a88 <__aeabi_cdrcmple>
   d8aec:	bf94      	ite	ls
   d8aee:	2001      	movls	r0, #1
   d8af0:	2000      	movhi	r0, #0
   d8af2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8af6:	bf00      	nop

000d8af8 <__aeabi_dcmpgt>:
   d8af8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8afc:	f7ff ffc4 	bl	d8a88 <__aeabi_cdrcmple>
   d8b00:	bf34      	ite	cc
   d8b02:	2001      	movcc	r0, #1
   d8b04:	2000      	movcs	r0, #0
   d8b06:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b0a:	bf00      	nop

000d8b0c <__aeabi_dcmpun>:
   d8b0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b14:	d102      	bne.n	d8b1c <__aeabi_dcmpun+0x10>
   d8b16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8b1a:	d10a      	bne.n	d8b32 <__aeabi_dcmpun+0x26>
   d8b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b24:	d102      	bne.n	d8b2c <__aeabi_dcmpun+0x20>
   d8b26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b2a:	d102      	bne.n	d8b32 <__aeabi_dcmpun+0x26>
   d8b2c:	f04f 0000 	mov.w	r0, #0
   d8b30:	4770      	bx	lr
   d8b32:	f04f 0001 	mov.w	r0, #1
   d8b36:	4770      	bx	lr

000d8b38 <__aeabi_d2uiz>:
   d8b38:	004a      	lsls	r2, r1, #1
   d8b3a:	d211      	bcs.n	d8b60 <__aeabi_d2uiz+0x28>
   d8b3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b40:	d211      	bcs.n	d8b66 <__aeabi_d2uiz+0x2e>
   d8b42:	d50d      	bpl.n	d8b60 <__aeabi_d2uiz+0x28>
   d8b44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8b48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8b4c:	d40e      	bmi.n	d8b6c <__aeabi_d2uiz+0x34>
   d8b4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8b56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8b5a:	fa23 f002 	lsr.w	r0, r3, r2
   d8b5e:	4770      	bx	lr
   d8b60:	f04f 0000 	mov.w	r0, #0
   d8b64:	4770      	bx	lr
   d8b66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8b6a:	d102      	bne.n	d8b72 <__aeabi_d2uiz+0x3a>
   d8b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8b70:	4770      	bx	lr
   d8b72:	f04f 0000 	mov.w	r0, #0
   d8b76:	4770      	bx	lr

000d8b78 <__aeabi_d2f>:
   d8b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8b80:	bf24      	itt	cs
   d8b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8b8a:	d90d      	bls.n	d8ba8 <__aeabi_d2f+0x30>
   d8b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8ba0:	bf08      	it	eq
   d8ba2:	f020 0001 	biceq.w	r0, r0, #1
   d8ba6:	4770      	bx	lr
   d8ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8bac:	d121      	bne.n	d8bf2 <__aeabi_d2f+0x7a>
   d8bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8bb2:	bfbc      	itt	lt
   d8bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8bb8:	4770      	bxlt	lr
   d8bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8bc2:	f1c2 0218 	rsb	r2, r2, #24
   d8bc6:	f1c2 0c20 	rsb	ip, r2, #32
   d8bca:	fa10 f30c 	lsls.w	r3, r0, ip
   d8bce:	fa20 f002 	lsr.w	r0, r0, r2
   d8bd2:	bf18      	it	ne
   d8bd4:	f040 0001 	orrne.w	r0, r0, #1
   d8bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8be0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8be4:	ea40 000c 	orr.w	r0, r0, ip
   d8be8:	fa23 f302 	lsr.w	r3, r3, r2
   d8bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8bf0:	e7cc      	b.n	d8b8c <__aeabi_d2f+0x14>
   d8bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8bf6:	d107      	bne.n	d8c08 <__aeabi_d2f+0x90>
   d8bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8bfc:	bf1e      	ittt	ne
   d8bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8c06:	4770      	bxne	lr
   d8c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8c14:	4770      	bx	lr
   d8c16:	bf00      	nop

000d8c18 <__aeabi_f2lz>:
   d8c18:	ee07 0a90 	vmov	s15, r0
   d8c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d8c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8c24:	d401      	bmi.n	d8c2a <__aeabi_f2lz+0x12>
   d8c26:	f000 b80b 	b.w	d8c40 <__aeabi_f2ulz>
   d8c2a:	eef1 7a67 	vneg.f32	s15, s15
   d8c2e:	b508      	push	{r3, lr}
   d8c30:	ee17 0a90 	vmov	r0, s15
   d8c34:	f000 f804 	bl	d8c40 <__aeabi_f2ulz>
   d8c38:	4240      	negs	r0, r0
   d8c3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8c3e:	bd08      	pop	{r3, pc}

000d8c40 <__aeabi_f2ulz>:
   d8c40:	b5d0      	push	{r4, r6, r7, lr}
   d8c42:	f7ff fc71 	bl	d8528 <__aeabi_f2d>
   d8c46:	4b0c      	ldr	r3, [pc, #48]	; (d8c78 <__aeabi_f2ulz+0x38>)
   d8c48:	2200      	movs	r2, #0
   d8c4a:	4606      	mov	r6, r0
   d8c4c:	460f      	mov	r7, r1
   d8c4e:	f7ff fcc3 	bl	d85d8 <__aeabi_dmul>
   d8c52:	f7ff ff71 	bl	d8b38 <__aeabi_d2uiz>
   d8c56:	4604      	mov	r4, r0
   d8c58:	f7ff fc44 	bl	d84e4 <__aeabi_ui2d>
   d8c5c:	4b07      	ldr	r3, [pc, #28]	; (d8c7c <__aeabi_f2ulz+0x3c>)
   d8c5e:	2200      	movs	r2, #0
   d8c60:	f7ff fcba 	bl	d85d8 <__aeabi_dmul>
   d8c64:	4602      	mov	r2, r0
   d8c66:	460b      	mov	r3, r1
   d8c68:	4630      	mov	r0, r6
   d8c6a:	4639      	mov	r1, r7
   d8c6c:	f7ff fafc 	bl	d8268 <__aeabi_dsub>
   d8c70:	f7ff ff62 	bl	d8b38 <__aeabi_d2uiz>
   d8c74:	4621      	mov	r1, r4
   d8c76:	bdd0      	pop	{r4, r6, r7, pc}
   d8c78:	3df00000 	.word	0x3df00000
   d8c7c:	41f00000 	.word	0x41f00000

000d8c80 <__aeabi_d2ulz>:
   d8c80:	b5d0      	push	{r4, r6, r7, lr}
   d8c82:	4b0c      	ldr	r3, [pc, #48]	; (d8cb4 <__aeabi_d2ulz+0x34>)
   d8c84:	2200      	movs	r2, #0
   d8c86:	4606      	mov	r6, r0
   d8c88:	460f      	mov	r7, r1
   d8c8a:	f7ff fca5 	bl	d85d8 <__aeabi_dmul>
   d8c8e:	f7ff ff53 	bl	d8b38 <__aeabi_d2uiz>
   d8c92:	4604      	mov	r4, r0
   d8c94:	f7ff fc26 	bl	d84e4 <__aeabi_ui2d>
   d8c98:	4b07      	ldr	r3, [pc, #28]	; (d8cb8 <__aeabi_d2ulz+0x38>)
   d8c9a:	2200      	movs	r2, #0
   d8c9c:	f7ff fc9c 	bl	d85d8 <__aeabi_dmul>
   d8ca0:	4602      	mov	r2, r0
   d8ca2:	460b      	mov	r3, r1
   d8ca4:	4630      	mov	r0, r6
   d8ca6:	4639      	mov	r1, r7
   d8ca8:	f7ff fade 	bl	d8268 <__aeabi_dsub>
   d8cac:	f7ff ff44 	bl	d8b38 <__aeabi_d2uiz>
   d8cb0:	4621      	mov	r1, r4
   d8cb2:	bdd0      	pop	{r4, r6, r7, pc}
   d8cb4:	3df00000 	.word	0x3df00000
   d8cb8:	41f00000 	.word	0x41f00000

000d8cbc <__udivmoddi4>:
   d8cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8cc0:	9d08      	ldr	r5, [sp, #32]
   d8cc2:	4604      	mov	r4, r0
   d8cc4:	468c      	mov	ip, r1
   d8cc6:	2b00      	cmp	r3, #0
   d8cc8:	f040 8083 	bne.w	d8dd2 <__udivmoddi4+0x116>
   d8ccc:	428a      	cmp	r2, r1
   d8cce:	4617      	mov	r7, r2
   d8cd0:	d947      	bls.n	d8d62 <__udivmoddi4+0xa6>
   d8cd2:	fab2 f282 	clz	r2, r2
   d8cd6:	b142      	cbz	r2, d8cea <__udivmoddi4+0x2e>
   d8cd8:	f1c2 0020 	rsb	r0, r2, #32
   d8cdc:	fa24 f000 	lsr.w	r0, r4, r0
   d8ce0:	4091      	lsls	r1, r2
   d8ce2:	4097      	lsls	r7, r2
   d8ce4:	ea40 0c01 	orr.w	ip, r0, r1
   d8ce8:	4094      	lsls	r4, r2
   d8cea:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8cee:	0c23      	lsrs	r3, r4, #16
   d8cf0:	fbbc f6f8 	udiv	r6, ip, r8
   d8cf4:	fa1f fe87 	uxth.w	lr, r7
   d8cf8:	fb08 c116 	mls	r1, r8, r6, ip
   d8cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8d00:	fb06 f10e 	mul.w	r1, r6, lr
   d8d04:	4299      	cmp	r1, r3
   d8d06:	d909      	bls.n	d8d1c <__udivmoddi4+0x60>
   d8d08:	18fb      	adds	r3, r7, r3
   d8d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d8d0e:	f080 8119 	bcs.w	d8f44 <__udivmoddi4+0x288>
   d8d12:	4299      	cmp	r1, r3
   d8d14:	f240 8116 	bls.w	d8f44 <__udivmoddi4+0x288>
   d8d18:	3e02      	subs	r6, #2
   d8d1a:	443b      	add	r3, r7
   d8d1c:	1a5b      	subs	r3, r3, r1
   d8d1e:	b2a4      	uxth	r4, r4
   d8d20:	fbb3 f0f8 	udiv	r0, r3, r8
   d8d24:	fb08 3310 	mls	r3, r8, r0, r3
   d8d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d8d2c:	fb00 fe0e 	mul.w	lr, r0, lr
   d8d30:	45a6      	cmp	lr, r4
   d8d32:	d909      	bls.n	d8d48 <__udivmoddi4+0x8c>
   d8d34:	193c      	adds	r4, r7, r4
   d8d36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8d3a:	f080 8105 	bcs.w	d8f48 <__udivmoddi4+0x28c>
   d8d3e:	45a6      	cmp	lr, r4
   d8d40:	f240 8102 	bls.w	d8f48 <__udivmoddi4+0x28c>
   d8d44:	3802      	subs	r0, #2
   d8d46:	443c      	add	r4, r7
   d8d48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8d4c:	eba4 040e 	sub.w	r4, r4, lr
   d8d50:	2600      	movs	r6, #0
   d8d52:	b11d      	cbz	r5, d8d5c <__udivmoddi4+0xa0>
   d8d54:	40d4      	lsrs	r4, r2
   d8d56:	2300      	movs	r3, #0
   d8d58:	e9c5 4300 	strd	r4, r3, [r5]
   d8d5c:	4631      	mov	r1, r6
   d8d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d62:	b902      	cbnz	r2, d8d66 <__udivmoddi4+0xaa>
   d8d64:	deff      	udf	#255	; 0xff
   d8d66:	fab2 f282 	clz	r2, r2
   d8d6a:	2a00      	cmp	r2, #0
   d8d6c:	d150      	bne.n	d8e10 <__udivmoddi4+0x154>
   d8d6e:	1bcb      	subs	r3, r1, r7
   d8d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8d74:	fa1f f887 	uxth.w	r8, r7
   d8d78:	2601      	movs	r6, #1
   d8d7a:	fbb3 fcfe 	udiv	ip, r3, lr
   d8d7e:	0c21      	lsrs	r1, r4, #16
   d8d80:	fb0e 331c 	mls	r3, lr, ip, r3
   d8d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8d88:	fb08 f30c 	mul.w	r3, r8, ip
   d8d8c:	428b      	cmp	r3, r1
   d8d8e:	d907      	bls.n	d8da0 <__udivmoddi4+0xe4>
   d8d90:	1879      	adds	r1, r7, r1
   d8d92:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d8d96:	d202      	bcs.n	d8d9e <__udivmoddi4+0xe2>
   d8d98:	428b      	cmp	r3, r1
   d8d9a:	f200 80e9 	bhi.w	d8f70 <__udivmoddi4+0x2b4>
   d8d9e:	4684      	mov	ip, r0
   d8da0:	1ac9      	subs	r1, r1, r3
   d8da2:	b2a3      	uxth	r3, r4
   d8da4:	fbb1 f0fe 	udiv	r0, r1, lr
   d8da8:	fb0e 1110 	mls	r1, lr, r0, r1
   d8dac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d8db0:	fb08 f800 	mul.w	r8, r8, r0
   d8db4:	45a0      	cmp	r8, r4
   d8db6:	d907      	bls.n	d8dc8 <__udivmoddi4+0x10c>
   d8db8:	193c      	adds	r4, r7, r4
   d8dba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8dbe:	d202      	bcs.n	d8dc6 <__udivmoddi4+0x10a>
   d8dc0:	45a0      	cmp	r8, r4
   d8dc2:	f200 80d9 	bhi.w	d8f78 <__udivmoddi4+0x2bc>
   d8dc6:	4618      	mov	r0, r3
   d8dc8:	eba4 0408 	sub.w	r4, r4, r8
   d8dcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d8dd0:	e7bf      	b.n	d8d52 <__udivmoddi4+0x96>
   d8dd2:	428b      	cmp	r3, r1
   d8dd4:	d909      	bls.n	d8dea <__udivmoddi4+0x12e>
   d8dd6:	2d00      	cmp	r5, #0
   d8dd8:	f000 80b1 	beq.w	d8f3e <__udivmoddi4+0x282>
   d8ddc:	2600      	movs	r6, #0
   d8dde:	e9c5 0100 	strd	r0, r1, [r5]
   d8de2:	4630      	mov	r0, r6
   d8de4:	4631      	mov	r1, r6
   d8de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8dea:	fab3 f683 	clz	r6, r3
   d8dee:	2e00      	cmp	r6, #0
   d8df0:	d14a      	bne.n	d8e88 <__udivmoddi4+0x1cc>
   d8df2:	428b      	cmp	r3, r1
   d8df4:	d302      	bcc.n	d8dfc <__udivmoddi4+0x140>
   d8df6:	4282      	cmp	r2, r0
   d8df8:	f200 80b8 	bhi.w	d8f6c <__udivmoddi4+0x2b0>
   d8dfc:	1a84      	subs	r4, r0, r2
   d8dfe:	eb61 0103 	sbc.w	r1, r1, r3
   d8e02:	2001      	movs	r0, #1
   d8e04:	468c      	mov	ip, r1
   d8e06:	2d00      	cmp	r5, #0
   d8e08:	d0a8      	beq.n	d8d5c <__udivmoddi4+0xa0>
   d8e0a:	e9c5 4c00 	strd	r4, ip, [r5]
   d8e0e:	e7a5      	b.n	d8d5c <__udivmoddi4+0xa0>
   d8e10:	f1c2 0320 	rsb	r3, r2, #32
   d8e14:	fa20 f603 	lsr.w	r6, r0, r3
   d8e18:	4097      	lsls	r7, r2
   d8e1a:	fa01 f002 	lsl.w	r0, r1, r2
   d8e1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8e22:	40d9      	lsrs	r1, r3
   d8e24:	4330      	orrs	r0, r6
   d8e26:	0c03      	lsrs	r3, r0, #16
   d8e28:	fbb1 f6fe 	udiv	r6, r1, lr
   d8e2c:	fa1f f887 	uxth.w	r8, r7
   d8e30:	fb0e 1116 	mls	r1, lr, r6, r1
   d8e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8e38:	fb06 f108 	mul.w	r1, r6, r8
   d8e3c:	4299      	cmp	r1, r3
   d8e3e:	fa04 f402 	lsl.w	r4, r4, r2
   d8e42:	d909      	bls.n	d8e58 <__udivmoddi4+0x19c>
   d8e44:	18fb      	adds	r3, r7, r3
   d8e46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d8e4a:	f080 808d 	bcs.w	d8f68 <__udivmoddi4+0x2ac>
   d8e4e:	4299      	cmp	r1, r3
   d8e50:	f240 808a 	bls.w	d8f68 <__udivmoddi4+0x2ac>
   d8e54:	3e02      	subs	r6, #2
   d8e56:	443b      	add	r3, r7
   d8e58:	1a5b      	subs	r3, r3, r1
   d8e5a:	b281      	uxth	r1, r0
   d8e5c:	fbb3 f0fe 	udiv	r0, r3, lr
   d8e60:	fb0e 3310 	mls	r3, lr, r0, r3
   d8e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8e68:	fb00 f308 	mul.w	r3, r0, r8
   d8e6c:	428b      	cmp	r3, r1
   d8e6e:	d907      	bls.n	d8e80 <__udivmoddi4+0x1c4>
   d8e70:	1879      	adds	r1, r7, r1
   d8e72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d8e76:	d273      	bcs.n	d8f60 <__udivmoddi4+0x2a4>
   d8e78:	428b      	cmp	r3, r1
   d8e7a:	d971      	bls.n	d8f60 <__udivmoddi4+0x2a4>
   d8e7c:	3802      	subs	r0, #2
   d8e7e:	4439      	add	r1, r7
   d8e80:	1acb      	subs	r3, r1, r3
   d8e82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8e86:	e778      	b.n	d8d7a <__udivmoddi4+0xbe>
   d8e88:	f1c6 0c20 	rsb	ip, r6, #32
   d8e8c:	fa03 f406 	lsl.w	r4, r3, r6
   d8e90:	fa22 f30c 	lsr.w	r3, r2, ip
   d8e94:	431c      	orrs	r4, r3
   d8e96:	fa20 f70c 	lsr.w	r7, r0, ip
   d8e9a:	fa01 f306 	lsl.w	r3, r1, r6
   d8e9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d8ea2:	fa21 f10c 	lsr.w	r1, r1, ip
   d8ea6:	431f      	orrs	r7, r3
   d8ea8:	0c3b      	lsrs	r3, r7, #16
   d8eaa:	fbb1 f9fe 	udiv	r9, r1, lr
   d8eae:	fa1f f884 	uxth.w	r8, r4
   d8eb2:	fb0e 1119 	mls	r1, lr, r9, r1
   d8eb6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d8eba:	fb09 fa08 	mul.w	sl, r9, r8
   d8ebe:	458a      	cmp	sl, r1
   d8ec0:	fa02 f206 	lsl.w	r2, r2, r6
   d8ec4:	fa00 f306 	lsl.w	r3, r0, r6
   d8ec8:	d908      	bls.n	d8edc <__udivmoddi4+0x220>
   d8eca:	1861      	adds	r1, r4, r1
   d8ecc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d8ed0:	d248      	bcs.n	d8f64 <__udivmoddi4+0x2a8>
   d8ed2:	458a      	cmp	sl, r1
   d8ed4:	d946      	bls.n	d8f64 <__udivmoddi4+0x2a8>
   d8ed6:	f1a9 0902 	sub.w	r9, r9, #2
   d8eda:	4421      	add	r1, r4
   d8edc:	eba1 010a 	sub.w	r1, r1, sl
   d8ee0:	b2bf      	uxth	r7, r7
   d8ee2:	fbb1 f0fe 	udiv	r0, r1, lr
   d8ee6:	fb0e 1110 	mls	r1, lr, r0, r1
   d8eea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d8eee:	fb00 f808 	mul.w	r8, r0, r8
   d8ef2:	45b8      	cmp	r8, r7
   d8ef4:	d907      	bls.n	d8f06 <__udivmoddi4+0x24a>
   d8ef6:	19e7      	adds	r7, r4, r7
   d8ef8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d8efc:	d22e      	bcs.n	d8f5c <__udivmoddi4+0x2a0>
   d8efe:	45b8      	cmp	r8, r7
   d8f00:	d92c      	bls.n	d8f5c <__udivmoddi4+0x2a0>
   d8f02:	3802      	subs	r0, #2
   d8f04:	4427      	add	r7, r4
   d8f06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d8f0a:	eba7 0708 	sub.w	r7, r7, r8
   d8f0e:	fba0 8902 	umull	r8, r9, r0, r2
   d8f12:	454f      	cmp	r7, r9
   d8f14:	46c6      	mov	lr, r8
   d8f16:	4649      	mov	r1, r9
   d8f18:	d31a      	bcc.n	d8f50 <__udivmoddi4+0x294>
   d8f1a:	d017      	beq.n	d8f4c <__udivmoddi4+0x290>
   d8f1c:	b15d      	cbz	r5, d8f36 <__udivmoddi4+0x27a>
   d8f1e:	ebb3 020e 	subs.w	r2, r3, lr
   d8f22:	eb67 0701 	sbc.w	r7, r7, r1
   d8f26:	fa07 fc0c 	lsl.w	ip, r7, ip
   d8f2a:	40f2      	lsrs	r2, r6
   d8f2c:	ea4c 0202 	orr.w	r2, ip, r2
   d8f30:	40f7      	lsrs	r7, r6
   d8f32:	e9c5 2700 	strd	r2, r7, [r5]
   d8f36:	2600      	movs	r6, #0
   d8f38:	4631      	mov	r1, r6
   d8f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f3e:	462e      	mov	r6, r5
   d8f40:	4628      	mov	r0, r5
   d8f42:	e70b      	b.n	d8d5c <__udivmoddi4+0xa0>
   d8f44:	4606      	mov	r6, r0
   d8f46:	e6e9      	b.n	d8d1c <__udivmoddi4+0x60>
   d8f48:	4618      	mov	r0, r3
   d8f4a:	e6fd      	b.n	d8d48 <__udivmoddi4+0x8c>
   d8f4c:	4543      	cmp	r3, r8
   d8f4e:	d2e5      	bcs.n	d8f1c <__udivmoddi4+0x260>
   d8f50:	ebb8 0e02 	subs.w	lr, r8, r2
   d8f54:	eb69 0104 	sbc.w	r1, r9, r4
   d8f58:	3801      	subs	r0, #1
   d8f5a:	e7df      	b.n	d8f1c <__udivmoddi4+0x260>
   d8f5c:	4608      	mov	r0, r1
   d8f5e:	e7d2      	b.n	d8f06 <__udivmoddi4+0x24a>
   d8f60:	4660      	mov	r0, ip
   d8f62:	e78d      	b.n	d8e80 <__udivmoddi4+0x1c4>
   d8f64:	4681      	mov	r9, r0
   d8f66:	e7b9      	b.n	d8edc <__udivmoddi4+0x220>
   d8f68:	4666      	mov	r6, ip
   d8f6a:	e775      	b.n	d8e58 <__udivmoddi4+0x19c>
   d8f6c:	4630      	mov	r0, r6
   d8f6e:	e74a      	b.n	d8e06 <__udivmoddi4+0x14a>
   d8f70:	f1ac 0c02 	sub.w	ip, ip, #2
   d8f74:	4439      	add	r1, r7
   d8f76:	e713      	b.n	d8da0 <__udivmoddi4+0xe4>
   d8f78:	3802      	subs	r0, #2
   d8f7a:	443c      	add	r4, r7
   d8f7c:	e724      	b.n	d8dc8 <__udivmoddi4+0x10c>
   d8f7e:	bf00      	nop

000d8f80 <__aeabi_idiv0>:
   d8f80:	4770      	bx	lr
   d8f82:	bf00      	nop

000d8f84 <asctime_r>:
   d8f84:	b510      	push	{r4, lr}
   d8f86:	460c      	mov	r4, r1
   d8f88:	6941      	ldr	r1, [r0, #20]
   d8f8a:	6903      	ldr	r3, [r0, #16]
   d8f8c:	6982      	ldr	r2, [r0, #24]
   d8f8e:	b086      	sub	sp, #24
   d8f90:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8f94:	9104      	str	r1, [sp, #16]
   d8f96:	6801      	ldr	r1, [r0, #0]
   d8f98:	9103      	str	r1, [sp, #12]
   d8f9a:	6841      	ldr	r1, [r0, #4]
   d8f9c:	9102      	str	r1, [sp, #8]
   d8f9e:	6881      	ldr	r1, [r0, #8]
   d8fa0:	9101      	str	r1, [sp, #4]
   d8fa2:	68c1      	ldr	r1, [r0, #12]
   d8fa4:	9100      	str	r1, [sp, #0]
   d8fa6:	4907      	ldr	r1, [pc, #28]	; (d8fc4 <asctime_r+0x40>)
   d8fa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8fac:	440b      	add	r3, r1
   d8fae:	4906      	ldr	r1, [pc, #24]	; (d8fc8 <asctime_r+0x44>)
   d8fb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8fb4:	440a      	add	r2, r1
   d8fb6:	4620      	mov	r0, r4
   d8fb8:	4904      	ldr	r1, [pc, #16]	; (d8fcc <asctime_r+0x48>)
   d8fba:	f7fd fc15 	bl	d67e8 <siprintf>
   d8fbe:	4620      	mov	r0, r4
   d8fc0:	b006      	add	sp, #24
   d8fc2:	bd10      	pop	{r4, pc}
   d8fc4:	000dc2ae 	.word	0x000dc2ae
   d8fc8:	000dc299 	.word	0x000dc299
   d8fcc:	000dc279 	.word	0x000dc279

000d8fd0 <atoi>:
   d8fd0:	220a      	movs	r2, #10
   d8fd2:	2100      	movs	r1, #0
   d8fd4:	f001 b896 	b.w	da104 <strtol>

000d8fd8 <__cxa_atexit>:
   d8fd8:	b510      	push	{r4, lr}
   d8fda:	4c05      	ldr	r4, [pc, #20]	; (d8ff0 <__cxa_atexit+0x18>)
   d8fdc:	4613      	mov	r3, r2
   d8fde:	b12c      	cbz	r4, d8fec <__cxa_atexit+0x14>
   d8fe0:	460a      	mov	r2, r1
   d8fe2:	4601      	mov	r1, r0
   d8fe4:	2002      	movs	r0, #2
   d8fe6:	f3af 8000 	nop.w
   d8fea:	bd10      	pop	{r4, pc}
   d8fec:	4620      	mov	r0, r4
   d8fee:	e7fc      	b.n	d8fea <__cxa_atexit+0x12>
   d8ff0:	00000000 	.word	0x00000000

000d8ff4 <localtime_r>:
   d8ff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8ff8:	4607      	mov	r7, r0
   d8ffa:	9101      	str	r1, [sp, #4]
   d8ffc:	f001 fee8 	bl	dadd0 <__gettzinfo>
   d9000:	9901      	ldr	r1, [sp, #4]
   d9002:	4680      	mov	r8, r0
   d9004:	4638      	mov	r0, r7
   d9006:	f001 fee7 	bl	dadd8 <gmtime_r>
   d900a:	6943      	ldr	r3, [r0, #20]
   d900c:	079a      	lsls	r2, r3, #30
   d900e:	4604      	mov	r4, r0
   d9010:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d9014:	d105      	bne.n	d9022 <localtime_r+0x2e>
   d9016:	2264      	movs	r2, #100	; 0x64
   d9018:	fb96 f3f2 	sdiv	r3, r6, r2
   d901c:	fb02 6313 	mls	r3, r2, r3, r6
   d9020:	bb7b      	cbnz	r3, d9082 <localtime_r+0x8e>
   d9022:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d9026:	fb96 f5f3 	sdiv	r5, r6, r3
   d902a:	fb03 6515 	mls	r5, r3, r5, r6
   d902e:	fab5 f585 	clz	r5, r5
   d9032:	096d      	lsrs	r5, r5, #5
   d9034:	4b68      	ldr	r3, [pc, #416]	; (d91d8 <localtime_r+0x1e4>)
   d9036:	2230      	movs	r2, #48	; 0x30
   d9038:	fb02 3505 	mla	r5, r2, r5, r3
   d903c:	f001 f99a 	bl	da374 <__tz_lock>
   d9040:	f001 f9a4 	bl	da38c <_tzset_unlocked>
   d9044:	4b65      	ldr	r3, [pc, #404]	; (d91dc <localtime_r+0x1e8>)
   d9046:	681b      	ldr	r3, [r3, #0]
   d9048:	b353      	cbz	r3, d90a0 <localtime_r+0xac>
   d904a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d904e:	42b3      	cmp	r3, r6
   d9050:	d119      	bne.n	d9086 <localtime_r+0x92>
   d9052:	f8d8 1000 	ldr.w	r1, [r8]
   d9056:	e9d7 6700 	ldrd	r6, r7, [r7]
   d905a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
   d905e:	b9d1      	cbnz	r1, d9096 <localtime_r+0xa2>
   d9060:	4296      	cmp	r6, r2
   d9062:	eb77 0303 	sbcs.w	r3, r7, r3
   d9066:	da23      	bge.n	d90b0 <localtime_r+0xbc>
   d9068:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d906c:	4296      	cmp	r6, r2
   d906e:	eb77 0303 	sbcs.w	r3, r7, r3
   d9072:	bfb4      	ite	lt
   d9074:	2301      	movlt	r3, #1
   d9076:	2300      	movge	r3, #0
   d9078:	6223      	str	r3, [r4, #32]
   d907a:	db1b      	blt.n	d90b4 <localtime_r+0xc0>
   d907c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   d9080:	e01a      	b.n	d90b8 <localtime_r+0xc4>
   d9082:	2501      	movs	r5, #1
   d9084:	e7d6      	b.n	d9034 <localtime_r+0x40>
   d9086:	4630      	mov	r0, r6
   d9088:	f001 f8cc 	bl	da224 <__tzcalc_limits>
   d908c:	2800      	cmp	r0, #0
   d908e:	d1e0      	bne.n	d9052 <localtime_r+0x5e>
   d9090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9094:	e004      	b.n	d90a0 <localtime_r+0xac>
   d9096:	4296      	cmp	r6, r2
   d9098:	eb77 0303 	sbcs.w	r3, r7, r3
   d909c:	da02      	bge.n	d90a4 <localtime_r+0xb0>
   d909e:	2300      	movs	r3, #0
   d90a0:	6223      	str	r3, [r4, #32]
   d90a2:	e7eb      	b.n	d907c <localtime_r+0x88>
   d90a4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d90a8:	4296      	cmp	r6, r2
   d90aa:	eb77 0303 	sbcs.w	r3, r7, r3
   d90ae:	daf6      	bge.n	d909e <localtime_r+0xaa>
   d90b0:	2301      	movs	r3, #1
   d90b2:	6223      	str	r3, [r4, #32]
   d90b4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
   d90b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d90bc:	203c      	movs	r0, #60	; 0x3c
   d90be:	fb91 f6f3 	sdiv	r6, r1, r3
   d90c2:	fb03 1316 	mls	r3, r3, r6, r1
   d90c6:	6861      	ldr	r1, [r4, #4]
   d90c8:	fb93 f2f0 	sdiv	r2, r3, r0
   d90cc:	fb00 3012 	mls	r0, r0, r2, r3
   d90d0:	6823      	ldr	r3, [r4, #0]
   d90d2:	1a89      	subs	r1, r1, r2
   d90d4:	68a2      	ldr	r2, [r4, #8]
   d90d6:	6061      	str	r1, [r4, #4]
   d90d8:	1a1b      	subs	r3, r3, r0
   d90da:	1b92      	subs	r2, r2, r6
   d90dc:	2b3b      	cmp	r3, #59	; 0x3b
   d90de:	6023      	str	r3, [r4, #0]
   d90e0:	60a2      	str	r2, [r4, #8]
   d90e2:	dd35      	ble.n	d9150 <localtime_r+0x15c>
   d90e4:	3101      	adds	r1, #1
   d90e6:	6061      	str	r1, [r4, #4]
   d90e8:	3b3c      	subs	r3, #60	; 0x3c
   d90ea:	6023      	str	r3, [r4, #0]
   d90ec:	6863      	ldr	r3, [r4, #4]
   d90ee:	2b3b      	cmp	r3, #59	; 0x3b
   d90f0:	dd34      	ble.n	d915c <localtime_r+0x168>
   d90f2:	3201      	adds	r2, #1
   d90f4:	60a2      	str	r2, [r4, #8]
   d90f6:	3b3c      	subs	r3, #60	; 0x3c
   d90f8:	6063      	str	r3, [r4, #4]
   d90fa:	68a3      	ldr	r3, [r4, #8]
   d90fc:	2b17      	cmp	r3, #23
   d90fe:	dd33      	ble.n	d9168 <localtime_r+0x174>
   d9100:	69e2      	ldr	r2, [r4, #28]
   d9102:	3201      	adds	r2, #1
   d9104:	61e2      	str	r2, [r4, #28]
   d9106:	69a2      	ldr	r2, [r4, #24]
   d9108:	3201      	adds	r2, #1
   d910a:	2a06      	cmp	r2, #6
   d910c:	bfc8      	it	gt
   d910e:	2200      	movgt	r2, #0
   d9110:	61a2      	str	r2, [r4, #24]
   d9112:	68e2      	ldr	r2, [r4, #12]
   d9114:	3b18      	subs	r3, #24
   d9116:	3201      	adds	r2, #1
   d9118:	60a3      	str	r3, [r4, #8]
   d911a:	6923      	ldr	r3, [r4, #16]
   d911c:	60e2      	str	r2, [r4, #12]
   d911e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d9122:	428a      	cmp	r2, r1
   d9124:	dd0e      	ble.n	d9144 <localtime_r+0x150>
   d9126:	2b0b      	cmp	r3, #11
   d9128:	eba2 0201 	sub.w	r2, r2, r1
   d912c:	60e2      	str	r2, [r4, #12]
   d912e:	f103 0201 	add.w	r2, r3, #1
   d9132:	bf09      	itett	eq
   d9134:	6963      	ldreq	r3, [r4, #20]
   d9136:	6122      	strne	r2, [r4, #16]
   d9138:	2200      	moveq	r2, #0
   d913a:	3301      	addeq	r3, #1
   d913c:	bf02      	ittt	eq
   d913e:	6122      	streq	r2, [r4, #16]
   d9140:	6163      	streq	r3, [r4, #20]
   d9142:	61e2      	streq	r2, [r4, #28]
   d9144:	f001 f91c 	bl	da380 <__tz_unlock>
   d9148:	4620      	mov	r0, r4
   d914a:	b002      	add	sp, #8
   d914c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9150:	2b00      	cmp	r3, #0
   d9152:	dacb      	bge.n	d90ec <localtime_r+0xf8>
   d9154:	3901      	subs	r1, #1
   d9156:	6061      	str	r1, [r4, #4]
   d9158:	333c      	adds	r3, #60	; 0x3c
   d915a:	e7c6      	b.n	d90ea <localtime_r+0xf6>
   d915c:	2b00      	cmp	r3, #0
   d915e:	dacc      	bge.n	d90fa <localtime_r+0x106>
   d9160:	3a01      	subs	r2, #1
   d9162:	60a2      	str	r2, [r4, #8]
   d9164:	333c      	adds	r3, #60	; 0x3c
   d9166:	e7c7      	b.n	d90f8 <localtime_r+0x104>
   d9168:	2b00      	cmp	r3, #0
   d916a:	daeb      	bge.n	d9144 <localtime_r+0x150>
   d916c:	69e2      	ldr	r2, [r4, #28]
   d916e:	3a01      	subs	r2, #1
   d9170:	61e2      	str	r2, [r4, #28]
   d9172:	69a2      	ldr	r2, [r4, #24]
   d9174:	3a01      	subs	r2, #1
   d9176:	bf48      	it	mi
   d9178:	2206      	movmi	r2, #6
   d917a:	61a2      	str	r2, [r4, #24]
   d917c:	68e2      	ldr	r2, [r4, #12]
   d917e:	3318      	adds	r3, #24
   d9180:	3a01      	subs	r2, #1
   d9182:	60e2      	str	r2, [r4, #12]
   d9184:	60a3      	str	r3, [r4, #8]
   d9186:	2a00      	cmp	r2, #0
   d9188:	d1dc      	bne.n	d9144 <localtime_r+0x150>
   d918a:	6923      	ldr	r3, [r4, #16]
   d918c:	3b01      	subs	r3, #1
   d918e:	d405      	bmi.n	d919c <localtime_r+0x1a8>
   d9190:	6123      	str	r3, [r4, #16]
   d9192:	6923      	ldr	r3, [r4, #16]
   d9194:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9198:	60e3      	str	r3, [r4, #12]
   d919a:	e7d3      	b.n	d9144 <localtime_r+0x150>
   d919c:	230b      	movs	r3, #11
   d919e:	6123      	str	r3, [r4, #16]
   d91a0:	6963      	ldr	r3, [r4, #20]
   d91a2:	1e5a      	subs	r2, r3, #1
   d91a4:	6162      	str	r2, [r4, #20]
   d91a6:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   d91aa:	0793      	lsls	r3, r2, #30
   d91ac:	d105      	bne.n	d91ba <localtime_r+0x1c6>
   d91ae:	2164      	movs	r1, #100	; 0x64
   d91b0:	fb92 f3f1 	sdiv	r3, r2, r1
   d91b4:	fb01 2313 	mls	r3, r1, r3, r2
   d91b8:	b963      	cbnz	r3, d91d4 <localtime_r+0x1e0>
   d91ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d91be:	fb92 f3f1 	sdiv	r3, r2, r1
   d91c2:	fb01 2313 	mls	r3, r1, r3, r2
   d91c6:	fab3 f383 	clz	r3, r3
   d91ca:	095b      	lsrs	r3, r3, #5
   d91cc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d91d0:	61e3      	str	r3, [r4, #28]
   d91d2:	e7de      	b.n	d9192 <localtime_r+0x19e>
   d91d4:	2301      	movs	r3, #1
   d91d6:	e7f9      	b.n	d91cc <localtime_r+0x1d8>
   d91d8:	000dc2d4 	.word	0x000dc2d4
   d91dc:	2003e7dc 	.word	0x2003e7dc

000d91e0 <memcpy>:
   d91e0:	440a      	add	r2, r1
   d91e2:	4291      	cmp	r1, r2
   d91e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d91e8:	d100      	bne.n	d91ec <memcpy+0xc>
   d91ea:	4770      	bx	lr
   d91ec:	b510      	push	{r4, lr}
   d91ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d91f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d91f6:	4291      	cmp	r1, r2
   d91f8:	d1f9      	bne.n	d91ee <memcpy+0xe>
   d91fa:	bd10      	pop	{r4, pc}

000d91fc <memset>:
   d91fc:	4402      	add	r2, r0
   d91fe:	4603      	mov	r3, r0
   d9200:	4293      	cmp	r3, r2
   d9202:	d100      	bne.n	d9206 <memset+0xa>
   d9204:	4770      	bx	lr
   d9206:	f803 1b01 	strb.w	r1, [r3], #1
   d920a:	e7f9      	b.n	d9200 <memset+0x4>

000d920c <srand>:
   d920c:	b538      	push	{r3, r4, r5, lr}
   d920e:	4b0d      	ldr	r3, [pc, #52]	; (d9244 <srand+0x38>)
   d9210:	681d      	ldr	r5, [r3, #0]
   d9212:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9214:	4604      	mov	r4, r0
   d9216:	b97b      	cbnz	r3, d9238 <srand+0x2c>
   d9218:	2018      	movs	r0, #24
   d921a:	f7fd facd 	bl	d67b8 <malloc>
   d921e:	4a0a      	ldr	r2, [pc, #40]	; (d9248 <srand+0x3c>)
   d9220:	4b0a      	ldr	r3, [pc, #40]	; (d924c <srand+0x40>)
   d9222:	63a8      	str	r0, [r5, #56]	; 0x38
   d9224:	e9c0 2300 	strd	r2, r3, [r0]
   d9228:	4b09      	ldr	r3, [pc, #36]	; (d9250 <srand+0x44>)
   d922a:	6083      	str	r3, [r0, #8]
   d922c:	230b      	movs	r3, #11
   d922e:	8183      	strh	r3, [r0, #12]
   d9230:	2201      	movs	r2, #1
   d9232:	2300      	movs	r3, #0
   d9234:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9238:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d923a:	2200      	movs	r2, #0
   d923c:	611c      	str	r4, [r3, #16]
   d923e:	615a      	str	r2, [r3, #20]
   d9240:	bd38      	pop	{r3, r4, r5, pc}
   d9242:	bf00      	nop
   d9244:	2003e1bc 	.word	0x2003e1bc
   d9248:	abcd330e 	.word	0xabcd330e
   d924c:	e66d1234 	.word	0xe66d1234
   d9250:	0005deec 	.word	0x0005deec

000d9254 <strcmp>:
   d9254:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9258:	f811 3b01 	ldrb.w	r3, [r1], #1
   d925c:	2a01      	cmp	r2, #1
   d925e:	bf28      	it	cs
   d9260:	429a      	cmpcs	r2, r3
   d9262:	d0f7      	beq.n	d9254 <strcmp>
   d9264:	1ad0      	subs	r0, r2, r3
   d9266:	4770      	bx	lr

000d9268 <strcpy>:
   d9268:	4603      	mov	r3, r0
   d926a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d926e:	f803 2b01 	strb.w	r2, [r3], #1
   d9272:	2a00      	cmp	r2, #0
   d9274:	d1f9      	bne.n	d926a <strcpy+0x2>
   d9276:	4770      	bx	lr

000d9278 <strdup>:
   d9278:	4b02      	ldr	r3, [pc, #8]	; (d9284 <strdup+0xc>)
   d927a:	4601      	mov	r1, r0
   d927c:	6818      	ldr	r0, [r3, #0]
   d927e:	f000 b803 	b.w	d9288 <_strdup_r>
   d9282:	bf00      	nop
   d9284:	2003e1bc 	.word	0x2003e1bc

000d9288 <_strdup_r>:
   d9288:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d928a:	4604      	mov	r4, r0
   d928c:	4608      	mov	r0, r1
   d928e:	460d      	mov	r5, r1
   d9290:	f000 f80f 	bl	d92b2 <strlen>
   d9294:	1c42      	adds	r2, r0, #1
   d9296:	4611      	mov	r1, r2
   d9298:	4620      	mov	r0, r4
   d929a:	9201      	str	r2, [sp, #4]
   d929c:	f7fd fac4 	bl	d6828 <_malloc_r>
   d92a0:	4604      	mov	r4, r0
   d92a2:	b118      	cbz	r0, d92ac <_strdup_r+0x24>
   d92a4:	9a01      	ldr	r2, [sp, #4]
   d92a6:	4629      	mov	r1, r5
   d92a8:	f7ff ff9a 	bl	d91e0 <memcpy>
   d92ac:	4620      	mov	r0, r4
   d92ae:	b003      	add	sp, #12
   d92b0:	bd30      	pop	{r4, r5, pc}

000d92b2 <strlen>:
   d92b2:	4603      	mov	r3, r0
   d92b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d92b8:	2a00      	cmp	r2, #0
   d92ba:	d1fb      	bne.n	d92b4 <strlen+0x2>
   d92bc:	1a18      	subs	r0, r3, r0
   d92be:	3801      	subs	r0, #1
   d92c0:	4770      	bx	lr

000d92c2 <strncmp>:
   d92c2:	b510      	push	{r4, lr}
   d92c4:	b16a      	cbz	r2, d92e2 <strncmp+0x20>
   d92c6:	3901      	subs	r1, #1
   d92c8:	1884      	adds	r4, r0, r2
   d92ca:	f810 3b01 	ldrb.w	r3, [r0], #1
   d92ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d92d2:	4293      	cmp	r3, r2
   d92d4:	d103      	bne.n	d92de <strncmp+0x1c>
   d92d6:	42a0      	cmp	r0, r4
   d92d8:	d001      	beq.n	d92de <strncmp+0x1c>
   d92da:	2b00      	cmp	r3, #0
   d92dc:	d1f5      	bne.n	d92ca <strncmp+0x8>
   d92de:	1a98      	subs	r0, r3, r2
   d92e0:	bd10      	pop	{r4, pc}
   d92e2:	4610      	mov	r0, r2
   d92e4:	e7fc      	b.n	d92e0 <strncmp+0x1e>

000d92e6 <strncpy>:
   d92e6:	b510      	push	{r4, lr}
   d92e8:	3901      	subs	r1, #1
   d92ea:	4603      	mov	r3, r0
   d92ec:	b132      	cbz	r2, d92fc <strncpy+0x16>
   d92ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d92f2:	f803 4b01 	strb.w	r4, [r3], #1
   d92f6:	3a01      	subs	r2, #1
   d92f8:	2c00      	cmp	r4, #0
   d92fa:	d1f7      	bne.n	d92ec <strncpy+0x6>
   d92fc:	441a      	add	r2, r3
   d92fe:	2100      	movs	r1, #0
   d9300:	4293      	cmp	r3, r2
   d9302:	d100      	bne.n	d9306 <strncpy+0x20>
   d9304:	bd10      	pop	{r4, pc}
   d9306:	f803 1b01 	strb.w	r1, [r3], #1
   d930a:	e7f9      	b.n	d9300 <strncpy+0x1a>

000d930c <sulp>:
   d930c:	b570      	push	{r4, r5, r6, lr}
   d930e:	4604      	mov	r4, r0
   d9310:	460d      	mov	r5, r1
   d9312:	ec45 4b10 	vmov	d0, r4, r5
   d9316:	4616      	mov	r6, r2
   d9318:	f002 f920 	bl	db55c <__ulp>
   d931c:	ec51 0b10 	vmov	r0, r1, d0
   d9320:	b17e      	cbz	r6, d9342 <sulp+0x36>
   d9322:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9326:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d932a:	2b00      	cmp	r3, #0
   d932c:	dd09      	ble.n	d9342 <sulp+0x36>
   d932e:	051b      	lsls	r3, r3, #20
   d9330:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9334:	2400      	movs	r4, #0
   d9336:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d933a:	4622      	mov	r2, r4
   d933c:	462b      	mov	r3, r5
   d933e:	f7ff f94b 	bl	d85d8 <__aeabi_dmul>
   d9342:	bd70      	pop	{r4, r5, r6, pc}
   d9344:	0000      	movs	r0, r0
	...

000d9348 <_strtod_l>:
   d9348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d934c:	b0a3      	sub	sp, #140	; 0x8c
   d934e:	461f      	mov	r7, r3
   d9350:	2300      	movs	r3, #0
   d9352:	931e      	str	r3, [sp, #120]	; 0x78
   d9354:	4ba4      	ldr	r3, [pc, #656]	; (d95e8 <_strtod_l+0x2a0>)
   d9356:	9219      	str	r2, [sp, #100]	; 0x64
   d9358:	681b      	ldr	r3, [r3, #0]
   d935a:	9307      	str	r3, [sp, #28]
   d935c:	4604      	mov	r4, r0
   d935e:	4618      	mov	r0, r3
   d9360:	4688      	mov	r8, r1
   d9362:	f7ff ffa6 	bl	d92b2 <strlen>
   d9366:	f04f 0a00 	mov.w	sl, #0
   d936a:	4605      	mov	r5, r0
   d936c:	f04f 0b00 	mov.w	fp, #0
   d9370:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9376:	781a      	ldrb	r2, [r3, #0]
   d9378:	2a2b      	cmp	r2, #43	; 0x2b
   d937a:	d04c      	beq.n	d9416 <_strtod_l+0xce>
   d937c:	d839      	bhi.n	d93f2 <_strtod_l+0xaa>
   d937e:	2a0d      	cmp	r2, #13
   d9380:	d832      	bhi.n	d93e8 <_strtod_l+0xa0>
   d9382:	2a08      	cmp	r2, #8
   d9384:	d832      	bhi.n	d93ec <_strtod_l+0xa4>
   d9386:	2a00      	cmp	r2, #0
   d9388:	d03c      	beq.n	d9404 <_strtod_l+0xbc>
   d938a:	2300      	movs	r3, #0
   d938c:	930e      	str	r3, [sp, #56]	; 0x38
   d938e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9390:	7833      	ldrb	r3, [r6, #0]
   d9392:	2b30      	cmp	r3, #48	; 0x30
   d9394:	f040 80b4 	bne.w	d9500 <_strtod_l+0x1b8>
   d9398:	7873      	ldrb	r3, [r6, #1]
   d939a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d939e:	2b58      	cmp	r3, #88	; 0x58
   d93a0:	d16c      	bne.n	d947c <_strtod_l+0x134>
   d93a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d93a4:	9301      	str	r3, [sp, #4]
   d93a6:	ab1e      	add	r3, sp, #120	; 0x78
   d93a8:	9702      	str	r7, [sp, #8]
   d93aa:	9300      	str	r3, [sp, #0]
   d93ac:	4a8f      	ldr	r2, [pc, #572]	; (d95ec <_strtod_l+0x2a4>)
   d93ae:	ab1f      	add	r3, sp, #124	; 0x7c
   d93b0:	a91d      	add	r1, sp, #116	; 0x74
   d93b2:	4620      	mov	r0, r4
   d93b4:	f001 f9d4 	bl	da760 <__gethex>
   d93b8:	f010 0707 	ands.w	r7, r0, #7
   d93bc:	4605      	mov	r5, r0
   d93be:	d005      	beq.n	d93cc <_strtod_l+0x84>
   d93c0:	2f06      	cmp	r7, #6
   d93c2:	d12a      	bne.n	d941a <_strtod_l+0xd2>
   d93c4:	3601      	adds	r6, #1
   d93c6:	2300      	movs	r3, #0
   d93c8:	961d      	str	r6, [sp, #116]	; 0x74
   d93ca:	930e      	str	r3, [sp, #56]	; 0x38
   d93cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d93ce:	2b00      	cmp	r3, #0
   d93d0:	f040 8596 	bne.w	d9f00 <_strtod_l+0xbb8>
   d93d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d93d6:	b1db      	cbz	r3, d9410 <_strtod_l+0xc8>
   d93d8:	4652      	mov	r2, sl
   d93da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d93de:	ec43 2b10 	vmov	d0, r2, r3
   d93e2:	b023      	add	sp, #140	; 0x8c
   d93e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93e8:	2a20      	cmp	r2, #32
   d93ea:	d1ce      	bne.n	d938a <_strtod_l+0x42>
   d93ec:	3301      	adds	r3, #1
   d93ee:	931d      	str	r3, [sp, #116]	; 0x74
   d93f0:	e7c0      	b.n	d9374 <_strtod_l+0x2c>
   d93f2:	2a2d      	cmp	r2, #45	; 0x2d
   d93f4:	d1c9      	bne.n	d938a <_strtod_l+0x42>
   d93f6:	2201      	movs	r2, #1
   d93f8:	920e      	str	r2, [sp, #56]	; 0x38
   d93fa:	1c5a      	adds	r2, r3, #1
   d93fc:	921d      	str	r2, [sp, #116]	; 0x74
   d93fe:	785b      	ldrb	r3, [r3, #1]
   d9400:	2b00      	cmp	r3, #0
   d9402:	d1c4      	bne.n	d938e <_strtod_l+0x46>
   d9404:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9406:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d940a:	2b00      	cmp	r3, #0
   d940c:	f040 8576 	bne.w	d9efc <_strtod_l+0xbb4>
   d9410:	4652      	mov	r2, sl
   d9412:	465b      	mov	r3, fp
   d9414:	e7e3      	b.n	d93de <_strtod_l+0x96>
   d9416:	2200      	movs	r2, #0
   d9418:	e7ee      	b.n	d93f8 <_strtod_l+0xb0>
   d941a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d941c:	b13a      	cbz	r2, d942e <_strtod_l+0xe6>
   d941e:	2135      	movs	r1, #53	; 0x35
   d9420:	a820      	add	r0, sp, #128	; 0x80
   d9422:	f002 f99a 	bl	db75a <__copybits>
   d9426:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9428:	4620      	mov	r0, r4
   d942a:	f001 fdcf 	bl	dafcc <_Bfree>
   d942e:	3f01      	subs	r7, #1
   d9430:	2f05      	cmp	r7, #5
   d9432:	d807      	bhi.n	d9444 <_strtod_l+0xfc>
   d9434:	e8df f007 	tbb	[pc, r7]
   d9438:	1d180b0e 	.word	0x1d180b0e
   d943c:	030e      	.short	0x030e
   d943e:	f04f 0b00 	mov.w	fp, #0
   d9442:	46da      	mov	sl, fp
   d9444:	0728      	lsls	r0, r5, #28
   d9446:	d5c1      	bpl.n	d93cc <_strtod_l+0x84>
   d9448:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d944c:	e7be      	b.n	d93cc <_strtod_l+0x84>
   d944e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d9452:	e7f7      	b.n	d9444 <_strtod_l+0xfc>
   d9454:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9458:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d945a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d945e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9462:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9466:	e7ed      	b.n	d9444 <_strtod_l+0xfc>
   d9468:	f8df b184 	ldr.w	fp, [pc, #388]	; d95f0 <_strtod_l+0x2a8>
   d946c:	f04f 0a00 	mov.w	sl, #0
   d9470:	e7e8      	b.n	d9444 <_strtod_l+0xfc>
   d9472:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9476:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d947a:	e7e3      	b.n	d9444 <_strtod_l+0xfc>
   d947c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d947e:	1c5a      	adds	r2, r3, #1
   d9480:	921d      	str	r2, [sp, #116]	; 0x74
   d9482:	785b      	ldrb	r3, [r3, #1]
   d9484:	2b30      	cmp	r3, #48	; 0x30
   d9486:	d0f9      	beq.n	d947c <_strtod_l+0x134>
   d9488:	2b00      	cmp	r3, #0
   d948a:	d09f      	beq.n	d93cc <_strtod_l+0x84>
   d948c:	2301      	movs	r3, #1
   d948e:	f04f 0900 	mov.w	r9, #0
   d9492:	9304      	str	r3, [sp, #16]
   d9494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9496:	930a      	str	r3, [sp, #40]	; 0x28
   d9498:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d949c:	464f      	mov	r7, r9
   d949e:	220a      	movs	r2, #10
   d94a0:	981d      	ldr	r0, [sp, #116]	; 0x74
   d94a2:	7806      	ldrb	r6, [r0, #0]
   d94a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d94a8:	b2d9      	uxtb	r1, r3
   d94aa:	2909      	cmp	r1, #9
   d94ac:	d92a      	bls.n	d9504 <_strtod_l+0x1bc>
   d94ae:	9907      	ldr	r1, [sp, #28]
   d94b0:	462a      	mov	r2, r5
   d94b2:	f7ff ff06 	bl	d92c2 <strncmp>
   d94b6:	b398      	cbz	r0, d9520 <_strtod_l+0x1d8>
   d94b8:	2000      	movs	r0, #0
   d94ba:	4633      	mov	r3, r6
   d94bc:	463d      	mov	r5, r7
   d94be:	9007      	str	r0, [sp, #28]
   d94c0:	4602      	mov	r2, r0
   d94c2:	2b65      	cmp	r3, #101	; 0x65
   d94c4:	d001      	beq.n	d94ca <_strtod_l+0x182>
   d94c6:	2b45      	cmp	r3, #69	; 0x45
   d94c8:	d118      	bne.n	d94fc <_strtod_l+0x1b4>
   d94ca:	b91d      	cbnz	r5, d94d4 <_strtod_l+0x18c>
   d94cc:	9b04      	ldr	r3, [sp, #16]
   d94ce:	4303      	orrs	r3, r0
   d94d0:	d098      	beq.n	d9404 <_strtod_l+0xbc>
   d94d2:	2500      	movs	r5, #0
   d94d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d94d8:	f108 0301 	add.w	r3, r8, #1
   d94dc:	931d      	str	r3, [sp, #116]	; 0x74
   d94de:	f898 3001 	ldrb.w	r3, [r8, #1]
   d94e2:	2b2b      	cmp	r3, #43	; 0x2b
   d94e4:	d075      	beq.n	d95d2 <_strtod_l+0x28a>
   d94e6:	2b2d      	cmp	r3, #45	; 0x2d
   d94e8:	d07b      	beq.n	d95e2 <_strtod_l+0x29a>
   d94ea:	f04f 0c00 	mov.w	ip, #0
   d94ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d94f2:	2909      	cmp	r1, #9
   d94f4:	f240 8082 	bls.w	d95fc <_strtod_l+0x2b4>
   d94f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d94fc:	2600      	movs	r6, #0
   d94fe:	e09d      	b.n	d963c <_strtod_l+0x2f4>
   d9500:	2300      	movs	r3, #0
   d9502:	e7c4      	b.n	d948e <_strtod_l+0x146>
   d9504:	2f08      	cmp	r7, #8
   d9506:	bfd8      	it	le
   d9508:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d950a:	f100 0001 	add.w	r0, r0, #1
   d950e:	bfda      	itte	le
   d9510:	fb02 3301 	mlale	r3, r2, r1, r3
   d9514:	9309      	strle	r3, [sp, #36]	; 0x24
   d9516:	fb02 3909 	mlagt	r9, r2, r9, r3
   d951a:	3701      	adds	r7, #1
   d951c:	901d      	str	r0, [sp, #116]	; 0x74
   d951e:	e7bf      	b.n	d94a0 <_strtod_l+0x158>
   d9520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9522:	195a      	adds	r2, r3, r5
   d9524:	921d      	str	r2, [sp, #116]	; 0x74
   d9526:	5d5b      	ldrb	r3, [r3, r5]
   d9528:	2f00      	cmp	r7, #0
   d952a:	d037      	beq.n	d959c <_strtod_l+0x254>
   d952c:	9007      	str	r0, [sp, #28]
   d952e:	463d      	mov	r5, r7
   d9530:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d9534:	2a09      	cmp	r2, #9
   d9536:	d912      	bls.n	d955e <_strtod_l+0x216>
   d9538:	2201      	movs	r2, #1
   d953a:	e7c2      	b.n	d94c2 <_strtod_l+0x17a>
   d953c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d953e:	1c5a      	adds	r2, r3, #1
   d9540:	921d      	str	r2, [sp, #116]	; 0x74
   d9542:	785b      	ldrb	r3, [r3, #1]
   d9544:	3001      	adds	r0, #1
   d9546:	2b30      	cmp	r3, #48	; 0x30
   d9548:	d0f8      	beq.n	d953c <_strtod_l+0x1f4>
   d954a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d954e:	2a08      	cmp	r2, #8
   d9550:	f200 84db 	bhi.w	d9f0a <_strtod_l+0xbc2>
   d9554:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d9556:	9007      	str	r0, [sp, #28]
   d9558:	2000      	movs	r0, #0
   d955a:	920a      	str	r2, [sp, #40]	; 0x28
   d955c:	4605      	mov	r5, r0
   d955e:	3b30      	subs	r3, #48	; 0x30
   d9560:	f100 0201 	add.w	r2, r0, #1
   d9564:	d014      	beq.n	d9590 <_strtod_l+0x248>
   d9566:	9907      	ldr	r1, [sp, #28]
   d9568:	4411      	add	r1, r2
   d956a:	9107      	str	r1, [sp, #28]
   d956c:	462a      	mov	r2, r5
   d956e:	eb00 0e05 	add.w	lr, r0, r5
   d9572:	210a      	movs	r1, #10
   d9574:	4572      	cmp	r2, lr
   d9576:	d113      	bne.n	d95a0 <_strtod_l+0x258>
   d9578:	182a      	adds	r2, r5, r0
   d957a:	2a08      	cmp	r2, #8
   d957c:	f105 0501 	add.w	r5, r5, #1
   d9580:	4405      	add	r5, r0
   d9582:	dc1c      	bgt.n	d95be <_strtod_l+0x276>
   d9584:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9586:	220a      	movs	r2, #10
   d9588:	fb02 3301 	mla	r3, r2, r1, r3
   d958c:	9309      	str	r3, [sp, #36]	; 0x24
   d958e:	2200      	movs	r2, #0
   d9590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9592:	1c59      	adds	r1, r3, #1
   d9594:	911d      	str	r1, [sp, #116]	; 0x74
   d9596:	785b      	ldrb	r3, [r3, #1]
   d9598:	4610      	mov	r0, r2
   d959a:	e7c9      	b.n	d9530 <_strtod_l+0x1e8>
   d959c:	4638      	mov	r0, r7
   d959e:	e7d2      	b.n	d9546 <_strtod_l+0x1fe>
   d95a0:	2a08      	cmp	r2, #8
   d95a2:	dc04      	bgt.n	d95ae <_strtod_l+0x266>
   d95a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d95a6:	434e      	muls	r6, r1
   d95a8:	9609      	str	r6, [sp, #36]	; 0x24
   d95aa:	3201      	adds	r2, #1
   d95ac:	e7e2      	b.n	d9574 <_strtod_l+0x22c>
   d95ae:	f102 0c01 	add.w	ip, r2, #1
   d95b2:	f1bc 0f10 	cmp.w	ip, #16
   d95b6:	bfd8      	it	le
   d95b8:	fb01 f909 	mulle.w	r9, r1, r9
   d95bc:	e7f5      	b.n	d95aa <_strtod_l+0x262>
   d95be:	2d10      	cmp	r5, #16
   d95c0:	bfdc      	itt	le
   d95c2:	220a      	movle	r2, #10
   d95c4:	fb02 3909 	mlale	r9, r2, r9, r3
   d95c8:	e7e1      	b.n	d958e <_strtod_l+0x246>
   d95ca:	2300      	movs	r3, #0
   d95cc:	9307      	str	r3, [sp, #28]
   d95ce:	2201      	movs	r2, #1
   d95d0:	e77c      	b.n	d94cc <_strtod_l+0x184>
   d95d2:	f04f 0c00 	mov.w	ip, #0
   d95d6:	f108 0302 	add.w	r3, r8, #2
   d95da:	931d      	str	r3, [sp, #116]	; 0x74
   d95dc:	f898 3002 	ldrb.w	r3, [r8, #2]
   d95e0:	e785      	b.n	d94ee <_strtod_l+0x1a6>
   d95e2:	f04f 0c01 	mov.w	ip, #1
   d95e6:	e7f6      	b.n	d95d6 <_strtod_l+0x28e>
   d95e8:	000dc4d0 	.word	0x000dc4d0
   d95ec:	000dc340 	.word	0x000dc340
   d95f0:	7ff00000 	.word	0x7ff00000
   d95f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95f6:	1c59      	adds	r1, r3, #1
   d95f8:	911d      	str	r1, [sp, #116]	; 0x74
   d95fa:	785b      	ldrb	r3, [r3, #1]
   d95fc:	2b30      	cmp	r3, #48	; 0x30
   d95fe:	d0f9      	beq.n	d95f4 <_strtod_l+0x2ac>
   d9600:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d9604:	2908      	cmp	r1, #8
   d9606:	f63f af79 	bhi.w	d94fc <_strtod_l+0x1b4>
   d960a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d960e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9610:	9308      	str	r3, [sp, #32]
   d9612:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9614:	1c59      	adds	r1, r3, #1
   d9616:	911d      	str	r1, [sp, #116]	; 0x74
   d9618:	785b      	ldrb	r3, [r3, #1]
   d961a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d961e:	2e09      	cmp	r6, #9
   d9620:	d937      	bls.n	d9692 <_strtod_l+0x34a>
   d9622:	9e08      	ldr	r6, [sp, #32]
   d9624:	1b89      	subs	r1, r1, r6
   d9626:	2908      	cmp	r1, #8
   d9628:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d962c:	dc02      	bgt.n	d9634 <_strtod_l+0x2ec>
   d962e:	4576      	cmp	r6, lr
   d9630:	bfa8      	it	ge
   d9632:	4676      	movge	r6, lr
   d9634:	f1bc 0f00 	cmp.w	ip, #0
   d9638:	d000      	beq.n	d963c <_strtod_l+0x2f4>
   d963a:	4276      	negs	r6, r6
   d963c:	2d00      	cmp	r5, #0
   d963e:	d14f      	bne.n	d96e0 <_strtod_l+0x398>
   d9640:	9904      	ldr	r1, [sp, #16]
   d9642:	4301      	orrs	r1, r0
   d9644:	f47f aec2 	bne.w	d93cc <_strtod_l+0x84>
   d9648:	2a00      	cmp	r2, #0
   d964a:	f47f aedb 	bne.w	d9404 <_strtod_l+0xbc>
   d964e:	2b69      	cmp	r3, #105	; 0x69
   d9650:	d027      	beq.n	d96a2 <_strtod_l+0x35a>
   d9652:	dc24      	bgt.n	d969e <_strtod_l+0x356>
   d9654:	2b49      	cmp	r3, #73	; 0x49
   d9656:	d024      	beq.n	d96a2 <_strtod_l+0x35a>
   d9658:	2b4e      	cmp	r3, #78	; 0x4e
   d965a:	f47f aed3 	bne.w	d9404 <_strtod_l+0xbc>
   d965e:	499e      	ldr	r1, [pc, #632]	; (d98d8 <_strtod_l+0x590>)
   d9660:	a81d      	add	r0, sp, #116	; 0x74
   d9662:	f001 fac3 	bl	dabec <__match>
   d9666:	2800      	cmp	r0, #0
   d9668:	f43f aecc 	beq.w	d9404 <_strtod_l+0xbc>
   d966c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d966e:	781b      	ldrb	r3, [r3, #0]
   d9670:	2b28      	cmp	r3, #40	; 0x28
   d9672:	d12d      	bne.n	d96d0 <_strtod_l+0x388>
   d9674:	4999      	ldr	r1, [pc, #612]	; (d98dc <_strtod_l+0x594>)
   d9676:	aa20      	add	r2, sp, #128	; 0x80
   d9678:	a81d      	add	r0, sp, #116	; 0x74
   d967a:	f001 facb 	bl	dac14 <__hexnan>
   d967e:	2805      	cmp	r0, #5
   d9680:	d126      	bne.n	d96d0 <_strtod_l+0x388>
   d9682:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9684:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9688:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d968c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9690:	e69c      	b.n	d93cc <_strtod_l+0x84>
   d9692:	210a      	movs	r1, #10
   d9694:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9698:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d969c:	e7b9      	b.n	d9612 <_strtod_l+0x2ca>
   d969e:	2b6e      	cmp	r3, #110	; 0x6e
   d96a0:	e7db      	b.n	d965a <_strtod_l+0x312>
   d96a2:	498f      	ldr	r1, [pc, #572]	; (d98e0 <_strtod_l+0x598>)
   d96a4:	a81d      	add	r0, sp, #116	; 0x74
   d96a6:	f001 faa1 	bl	dabec <__match>
   d96aa:	2800      	cmp	r0, #0
   d96ac:	f43f aeaa 	beq.w	d9404 <_strtod_l+0xbc>
   d96b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d96b2:	498c      	ldr	r1, [pc, #560]	; (d98e4 <_strtod_l+0x59c>)
   d96b4:	3b01      	subs	r3, #1
   d96b6:	a81d      	add	r0, sp, #116	; 0x74
   d96b8:	931d      	str	r3, [sp, #116]	; 0x74
   d96ba:	f001 fa97 	bl	dabec <__match>
   d96be:	b910      	cbnz	r0, d96c6 <_strtod_l+0x37e>
   d96c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d96c2:	3301      	adds	r3, #1
   d96c4:	931d      	str	r3, [sp, #116]	; 0x74
   d96c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; d98f4 <_strtod_l+0x5ac>
   d96ca:	f04f 0a00 	mov.w	sl, #0
   d96ce:	e67d      	b.n	d93cc <_strtod_l+0x84>
   d96d0:	4885      	ldr	r0, [pc, #532]	; (d98e8 <_strtod_l+0x5a0>)
   d96d2:	f002 f895 	bl	db800 <nan>
   d96d6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d96da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d96de:	e675      	b.n	d93cc <_strtod_l+0x84>
   d96e0:	9b07      	ldr	r3, [sp, #28]
   d96e2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d96e4:	1af3      	subs	r3, r6, r3
   d96e6:	2f00      	cmp	r7, #0
   d96e8:	bf08      	it	eq
   d96ea:	462f      	moveq	r7, r5
   d96ec:	2d10      	cmp	r5, #16
   d96ee:	9308      	str	r3, [sp, #32]
   d96f0:	46a8      	mov	r8, r5
   d96f2:	bfa8      	it	ge
   d96f4:	f04f 0810 	movge.w	r8, #16
   d96f8:	f7fe fef4 	bl	d84e4 <__aeabi_ui2d>
   d96fc:	2d09      	cmp	r5, #9
   d96fe:	4682      	mov	sl, r0
   d9700:	468b      	mov	fp, r1
   d9702:	dd13      	ble.n	d972c <_strtod_l+0x3e4>
   d9704:	4b79      	ldr	r3, [pc, #484]	; (d98ec <_strtod_l+0x5a4>)
   d9706:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d970a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d970e:	f7fe ff63 	bl	d85d8 <__aeabi_dmul>
   d9712:	4682      	mov	sl, r0
   d9714:	4648      	mov	r0, r9
   d9716:	468b      	mov	fp, r1
   d9718:	f7fe fee4 	bl	d84e4 <__aeabi_ui2d>
   d971c:	4602      	mov	r2, r0
   d971e:	460b      	mov	r3, r1
   d9720:	4650      	mov	r0, sl
   d9722:	4659      	mov	r1, fp
   d9724:	f7fe fda2 	bl	d826c <__adddf3>
   d9728:	4682      	mov	sl, r0
   d972a:	468b      	mov	fp, r1
   d972c:	2d0f      	cmp	r5, #15
   d972e:	dc38      	bgt.n	d97a2 <_strtod_l+0x45a>
   d9730:	9b08      	ldr	r3, [sp, #32]
   d9732:	2b00      	cmp	r3, #0
   d9734:	f43f ae4a 	beq.w	d93cc <_strtod_l+0x84>
   d9738:	dd24      	ble.n	d9784 <_strtod_l+0x43c>
   d973a:	2b16      	cmp	r3, #22
   d973c:	dc0b      	bgt.n	d9756 <_strtod_l+0x40e>
   d973e:	4d6b      	ldr	r5, [pc, #428]	; (d98ec <_strtod_l+0x5a4>)
   d9740:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9744:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9748:	4652      	mov	r2, sl
   d974a:	465b      	mov	r3, fp
   d974c:	f7fe ff44 	bl	d85d8 <__aeabi_dmul>
   d9750:	4682      	mov	sl, r0
   d9752:	468b      	mov	fp, r1
   d9754:	e63a      	b.n	d93cc <_strtod_l+0x84>
   d9756:	9a08      	ldr	r2, [sp, #32]
   d9758:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d975c:	4293      	cmp	r3, r2
   d975e:	db20      	blt.n	d97a2 <_strtod_l+0x45a>
   d9760:	4c62      	ldr	r4, [pc, #392]	; (d98ec <_strtod_l+0x5a4>)
   d9762:	f1c5 050f 	rsb	r5, r5, #15
   d9766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d976a:	4652      	mov	r2, sl
   d976c:	465b      	mov	r3, fp
   d976e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9772:	f7fe ff31 	bl	d85d8 <__aeabi_dmul>
   d9776:	9b08      	ldr	r3, [sp, #32]
   d9778:	1b5d      	subs	r5, r3, r5
   d977a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d977e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9782:	e7e3      	b.n	d974c <_strtod_l+0x404>
   d9784:	9b08      	ldr	r3, [sp, #32]
   d9786:	3316      	adds	r3, #22
   d9788:	db0b      	blt.n	d97a2 <_strtod_l+0x45a>
   d978a:	9b07      	ldr	r3, [sp, #28]
   d978c:	4a57      	ldr	r2, [pc, #348]	; (d98ec <_strtod_l+0x5a4>)
   d978e:	1b9e      	subs	r6, r3, r6
   d9790:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9794:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9798:	4650      	mov	r0, sl
   d979a:	4659      	mov	r1, fp
   d979c:	f7ff f846 	bl	d882c <__aeabi_ddiv>
   d97a0:	e7d6      	b.n	d9750 <_strtod_l+0x408>
   d97a2:	9b08      	ldr	r3, [sp, #32]
   d97a4:	eba5 0808 	sub.w	r8, r5, r8
   d97a8:	4498      	add	r8, r3
   d97aa:	f1b8 0f00 	cmp.w	r8, #0
   d97ae:	dd71      	ble.n	d9894 <_strtod_l+0x54c>
   d97b0:	f018 030f 	ands.w	r3, r8, #15
   d97b4:	d00a      	beq.n	d97cc <_strtod_l+0x484>
   d97b6:	494d      	ldr	r1, [pc, #308]	; (d98ec <_strtod_l+0x5a4>)
   d97b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d97bc:	4652      	mov	r2, sl
   d97be:	465b      	mov	r3, fp
   d97c0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d97c4:	f7fe ff08 	bl	d85d8 <__aeabi_dmul>
   d97c8:	4682      	mov	sl, r0
   d97ca:	468b      	mov	fp, r1
   d97cc:	f038 080f 	bics.w	r8, r8, #15
   d97d0:	d04d      	beq.n	d986e <_strtod_l+0x526>
   d97d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d97d6:	dd22      	ble.n	d981e <_strtod_l+0x4d6>
   d97d8:	2500      	movs	r5, #0
   d97da:	462e      	mov	r6, r5
   d97dc:	9509      	str	r5, [sp, #36]	; 0x24
   d97de:	9507      	str	r5, [sp, #28]
   d97e0:	2322      	movs	r3, #34	; 0x22
   d97e2:	f8df b110 	ldr.w	fp, [pc, #272]	; d98f4 <_strtod_l+0x5ac>
   d97e6:	6023      	str	r3, [r4, #0]
   d97e8:	f04f 0a00 	mov.w	sl, #0
   d97ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d97ee:	2b00      	cmp	r3, #0
   d97f0:	f43f adec 	beq.w	d93cc <_strtod_l+0x84>
   d97f4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d97f6:	4620      	mov	r0, r4
   d97f8:	f001 fbe8 	bl	dafcc <_Bfree>
   d97fc:	9907      	ldr	r1, [sp, #28]
   d97fe:	4620      	mov	r0, r4
   d9800:	f001 fbe4 	bl	dafcc <_Bfree>
   d9804:	4631      	mov	r1, r6
   d9806:	4620      	mov	r0, r4
   d9808:	f001 fbe0 	bl	dafcc <_Bfree>
   d980c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d980e:	4620      	mov	r0, r4
   d9810:	f001 fbdc 	bl	dafcc <_Bfree>
   d9814:	4629      	mov	r1, r5
   d9816:	4620      	mov	r0, r4
   d9818:	f001 fbd8 	bl	dafcc <_Bfree>
   d981c:	e5d6      	b.n	d93cc <_strtod_l+0x84>
   d981e:	2300      	movs	r3, #0
   d9820:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9824:	4650      	mov	r0, sl
   d9826:	4659      	mov	r1, fp
   d9828:	4699      	mov	r9, r3
   d982a:	f1b8 0f01 	cmp.w	r8, #1
   d982e:	dc21      	bgt.n	d9874 <_strtod_l+0x52c>
   d9830:	b10b      	cbz	r3, d9836 <_strtod_l+0x4ee>
   d9832:	4682      	mov	sl, r0
   d9834:	468b      	mov	fp, r1
   d9836:	4b2e      	ldr	r3, [pc, #184]	; (d98f0 <_strtod_l+0x5a8>)
   d9838:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d983c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9840:	4652      	mov	r2, sl
   d9842:	465b      	mov	r3, fp
   d9844:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9848:	f7fe fec6 	bl	d85d8 <__aeabi_dmul>
   d984c:	4b29      	ldr	r3, [pc, #164]	; (d98f4 <_strtod_l+0x5ac>)
   d984e:	460a      	mov	r2, r1
   d9850:	400b      	ands	r3, r1
   d9852:	4929      	ldr	r1, [pc, #164]	; (d98f8 <_strtod_l+0x5b0>)
   d9854:	428b      	cmp	r3, r1
   d9856:	4682      	mov	sl, r0
   d9858:	d8be      	bhi.n	d97d8 <_strtod_l+0x490>
   d985a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d985e:	428b      	cmp	r3, r1
   d9860:	bf86      	itte	hi
   d9862:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d98fc <_strtod_l+0x5b4>
   d9866:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d986a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d986e:	2300      	movs	r3, #0
   d9870:	9304      	str	r3, [sp, #16]
   d9872:	e081      	b.n	d9978 <_strtod_l+0x630>
   d9874:	f018 0f01 	tst.w	r8, #1
   d9878:	d007      	beq.n	d988a <_strtod_l+0x542>
   d987a:	4b1d      	ldr	r3, [pc, #116]	; (d98f0 <_strtod_l+0x5a8>)
   d987c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9880:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9884:	f7fe fea8 	bl	d85d8 <__aeabi_dmul>
   d9888:	2301      	movs	r3, #1
   d988a:	f109 0901 	add.w	r9, r9, #1
   d988e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9892:	e7ca      	b.n	d982a <_strtod_l+0x4e2>
   d9894:	d0eb      	beq.n	d986e <_strtod_l+0x526>
   d9896:	f1c8 0800 	rsb	r8, r8, #0
   d989a:	f018 020f 	ands.w	r2, r8, #15
   d989e:	d00a      	beq.n	d98b6 <_strtod_l+0x56e>
   d98a0:	4b12      	ldr	r3, [pc, #72]	; (d98ec <_strtod_l+0x5a4>)
   d98a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d98a6:	4650      	mov	r0, sl
   d98a8:	4659      	mov	r1, fp
   d98aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98ae:	f7fe ffbd 	bl	d882c <__aeabi_ddiv>
   d98b2:	4682      	mov	sl, r0
   d98b4:	468b      	mov	fp, r1
   d98b6:	ea5f 1828 	movs.w	r8, r8, asr #4
   d98ba:	d0d8      	beq.n	d986e <_strtod_l+0x526>
   d98bc:	f1b8 0f1f 	cmp.w	r8, #31
   d98c0:	dd1e      	ble.n	d9900 <_strtod_l+0x5b8>
   d98c2:	2500      	movs	r5, #0
   d98c4:	462e      	mov	r6, r5
   d98c6:	9509      	str	r5, [sp, #36]	; 0x24
   d98c8:	9507      	str	r5, [sp, #28]
   d98ca:	2322      	movs	r3, #34	; 0x22
   d98cc:	f04f 0a00 	mov.w	sl, #0
   d98d0:	f04f 0b00 	mov.w	fp, #0
   d98d4:	6023      	str	r3, [r4, #0]
   d98d6:	e789      	b.n	d97ec <_strtod_l+0x4a4>
   d98d8:	000dc33d 	.word	0x000dc33d
   d98dc:	000dc354 	.word	0x000dc354
   d98e0:	000dc334 	.word	0x000dc334
   d98e4:	000dc337 	.word	0x000dc337
   d98e8:	000db9d2 	.word	0x000db9d2
   d98ec:	000dc510 	.word	0x000dc510
   d98f0:	000dc4e8 	.word	0x000dc4e8
   d98f4:	7ff00000 	.word	0x7ff00000
   d98f8:	7ca00000 	.word	0x7ca00000
   d98fc:	7fefffff 	.word	0x7fefffff
   d9900:	f018 0310 	ands.w	r3, r8, #16
   d9904:	bf18      	it	ne
   d9906:	236a      	movne	r3, #106	; 0x6a
   d9908:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9cc0 <_strtod_l+0x978>
   d990c:	9304      	str	r3, [sp, #16]
   d990e:	4650      	mov	r0, sl
   d9910:	4659      	mov	r1, fp
   d9912:	2300      	movs	r3, #0
   d9914:	f018 0f01 	tst.w	r8, #1
   d9918:	d004      	beq.n	d9924 <_strtod_l+0x5dc>
   d991a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d991e:	f7fe fe5b 	bl	d85d8 <__aeabi_dmul>
   d9922:	2301      	movs	r3, #1
   d9924:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9928:	f109 0908 	add.w	r9, r9, #8
   d992c:	d1f2      	bne.n	d9914 <_strtod_l+0x5cc>
   d992e:	b10b      	cbz	r3, d9934 <_strtod_l+0x5ec>
   d9930:	4682      	mov	sl, r0
   d9932:	468b      	mov	fp, r1
   d9934:	9b04      	ldr	r3, [sp, #16]
   d9936:	b1bb      	cbz	r3, d9968 <_strtod_l+0x620>
   d9938:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d993c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9940:	2b00      	cmp	r3, #0
   d9942:	4659      	mov	r1, fp
   d9944:	dd10      	ble.n	d9968 <_strtod_l+0x620>
   d9946:	2b1f      	cmp	r3, #31
   d9948:	f340 8128 	ble.w	d9b9c <_strtod_l+0x854>
   d994c:	2b34      	cmp	r3, #52	; 0x34
   d994e:	bfde      	ittt	le
   d9950:	3b20      	suble	r3, #32
   d9952:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9956:	fa02 f303 	lslle.w	r3, r2, r3
   d995a:	f04f 0a00 	mov.w	sl, #0
   d995e:	bfcc      	ite	gt
   d9960:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9964:	ea03 0b01 	andle.w	fp, r3, r1
   d9968:	2200      	movs	r2, #0
   d996a:	2300      	movs	r3, #0
   d996c:	4650      	mov	r0, sl
   d996e:	4659      	mov	r1, fp
   d9970:	f7ff f89a 	bl	d8aa8 <__aeabi_dcmpeq>
   d9974:	2800      	cmp	r0, #0
   d9976:	d1a4      	bne.n	d98c2 <_strtod_l+0x57a>
   d9978:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d997a:	9300      	str	r3, [sp, #0]
   d997c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d997e:	462b      	mov	r3, r5
   d9980:	463a      	mov	r2, r7
   d9982:	4620      	mov	r0, r4
   d9984:	f001 fb77 	bl	db076 <__s2b>
   d9988:	9009      	str	r0, [sp, #36]	; 0x24
   d998a:	2800      	cmp	r0, #0
   d998c:	f43f af24 	beq.w	d97d8 <_strtod_l+0x490>
   d9990:	9b07      	ldr	r3, [sp, #28]
   d9992:	1b9e      	subs	r6, r3, r6
   d9994:	9b08      	ldr	r3, [sp, #32]
   d9996:	2b00      	cmp	r3, #0
   d9998:	bfb4      	ite	lt
   d999a:	4633      	movlt	r3, r6
   d999c:	2300      	movge	r3, #0
   d999e:	9310      	str	r3, [sp, #64]	; 0x40
   d99a0:	9b08      	ldr	r3, [sp, #32]
   d99a2:	2500      	movs	r5, #0
   d99a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d99a8:	9318      	str	r3, [sp, #96]	; 0x60
   d99aa:	462e      	mov	r6, r5
   d99ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d99ae:	4620      	mov	r0, r4
   d99b0:	6859      	ldr	r1, [r3, #4]
   d99b2:	f001 fad7 	bl	daf64 <_Balloc>
   d99b6:	9007      	str	r0, [sp, #28]
   d99b8:	2800      	cmp	r0, #0
   d99ba:	f43f af11 	beq.w	d97e0 <_strtod_l+0x498>
   d99be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d99c0:	691a      	ldr	r2, [r3, #16]
   d99c2:	3202      	adds	r2, #2
   d99c4:	f103 010c 	add.w	r1, r3, #12
   d99c8:	0092      	lsls	r2, r2, #2
   d99ca:	300c      	adds	r0, #12
   d99cc:	f7ff fc08 	bl	d91e0 <memcpy>
   d99d0:	ec4b ab10 	vmov	d0, sl, fp
   d99d4:	aa20      	add	r2, sp, #128	; 0x80
   d99d6:	a91f      	add	r1, sp, #124	; 0x7c
   d99d8:	4620      	mov	r0, r4
   d99da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d99de:	f001 fe39 	bl	db654 <__d2b>
   d99e2:	901e      	str	r0, [sp, #120]	; 0x78
   d99e4:	2800      	cmp	r0, #0
   d99e6:	f43f aefb 	beq.w	d97e0 <_strtod_l+0x498>
   d99ea:	2101      	movs	r1, #1
   d99ec:	4620      	mov	r0, r4
   d99ee:	f001 fbd0 	bl	db192 <__i2b>
   d99f2:	4606      	mov	r6, r0
   d99f4:	2800      	cmp	r0, #0
   d99f6:	f43f aef3 	beq.w	d97e0 <_strtod_l+0x498>
   d99fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d99fc:	9904      	ldr	r1, [sp, #16]
   d99fe:	2b00      	cmp	r3, #0
   d9a00:	bfab      	itete	ge
   d9a02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d9a04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d9a06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9a08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d9a0c:	bfac      	ite	ge
   d9a0e:	eb03 0902 	addge.w	r9, r3, r2
   d9a12:	1ad7      	sublt	r7, r2, r3
   d9a14:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d9a16:	eba3 0801 	sub.w	r8, r3, r1
   d9a1a:	4490      	add	r8, r2
   d9a1c:	4ba3      	ldr	r3, [pc, #652]	; (d9cac <_strtod_l+0x964>)
   d9a1e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9a22:	4598      	cmp	r8, r3
   d9a24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9a28:	f280 80cc 	bge.w	d9bc4 <_strtod_l+0x87c>
   d9a2c:	eba3 0308 	sub.w	r3, r3, r8
   d9a30:	2b1f      	cmp	r3, #31
   d9a32:	eba2 0203 	sub.w	r2, r2, r3
   d9a36:	f04f 0101 	mov.w	r1, #1
   d9a3a:	f300 80b6 	bgt.w	d9baa <_strtod_l+0x862>
   d9a3e:	fa01 f303 	lsl.w	r3, r1, r3
   d9a42:	9311      	str	r3, [sp, #68]	; 0x44
   d9a44:	2300      	movs	r3, #0
   d9a46:	930c      	str	r3, [sp, #48]	; 0x30
   d9a48:	eb09 0802 	add.w	r8, r9, r2
   d9a4c:	9b04      	ldr	r3, [sp, #16]
   d9a4e:	45c1      	cmp	r9, r8
   d9a50:	4417      	add	r7, r2
   d9a52:	441f      	add	r7, r3
   d9a54:	464b      	mov	r3, r9
   d9a56:	bfa8      	it	ge
   d9a58:	4643      	movge	r3, r8
   d9a5a:	42bb      	cmp	r3, r7
   d9a5c:	bfa8      	it	ge
   d9a5e:	463b      	movge	r3, r7
   d9a60:	2b00      	cmp	r3, #0
   d9a62:	bfc2      	ittt	gt
   d9a64:	eba8 0803 	subgt.w	r8, r8, r3
   d9a68:	1aff      	subgt	r7, r7, r3
   d9a6a:	eba9 0903 	subgt.w	r9, r9, r3
   d9a6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9a70:	2b00      	cmp	r3, #0
   d9a72:	dd17      	ble.n	d9aa4 <_strtod_l+0x75c>
   d9a74:	4631      	mov	r1, r6
   d9a76:	461a      	mov	r2, r3
   d9a78:	4620      	mov	r0, r4
   d9a7a:	f001 fc2f 	bl	db2dc <__pow5mult>
   d9a7e:	4606      	mov	r6, r0
   d9a80:	2800      	cmp	r0, #0
   d9a82:	f43f aead 	beq.w	d97e0 <_strtod_l+0x498>
   d9a86:	4601      	mov	r1, r0
   d9a88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9a8a:	4620      	mov	r0, r4
   d9a8c:	f001 fb8a 	bl	db1a4 <__multiply>
   d9a90:	900f      	str	r0, [sp, #60]	; 0x3c
   d9a92:	2800      	cmp	r0, #0
   d9a94:	f43f aea4 	beq.w	d97e0 <_strtod_l+0x498>
   d9a98:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9a9a:	4620      	mov	r0, r4
   d9a9c:	f001 fa96 	bl	dafcc <_Bfree>
   d9aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9aa2:	931e      	str	r3, [sp, #120]	; 0x78
   d9aa4:	f1b8 0f00 	cmp.w	r8, #0
   d9aa8:	f300 8091 	bgt.w	d9bce <_strtod_l+0x886>
   d9aac:	9b08      	ldr	r3, [sp, #32]
   d9aae:	2b00      	cmp	r3, #0
   d9ab0:	dd08      	ble.n	d9ac4 <_strtod_l+0x77c>
   d9ab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9ab4:	9907      	ldr	r1, [sp, #28]
   d9ab6:	4620      	mov	r0, r4
   d9ab8:	f001 fc10 	bl	db2dc <__pow5mult>
   d9abc:	9007      	str	r0, [sp, #28]
   d9abe:	2800      	cmp	r0, #0
   d9ac0:	f43f ae8e 	beq.w	d97e0 <_strtod_l+0x498>
   d9ac4:	2f00      	cmp	r7, #0
   d9ac6:	dd08      	ble.n	d9ada <_strtod_l+0x792>
   d9ac8:	9907      	ldr	r1, [sp, #28]
   d9aca:	463a      	mov	r2, r7
   d9acc:	4620      	mov	r0, r4
   d9ace:	f001 fc53 	bl	db378 <__lshift>
   d9ad2:	9007      	str	r0, [sp, #28]
   d9ad4:	2800      	cmp	r0, #0
   d9ad6:	f43f ae83 	beq.w	d97e0 <_strtod_l+0x498>
   d9ada:	f1b9 0f00 	cmp.w	r9, #0
   d9ade:	dd08      	ble.n	d9af2 <_strtod_l+0x7aa>
   d9ae0:	4631      	mov	r1, r6
   d9ae2:	464a      	mov	r2, r9
   d9ae4:	4620      	mov	r0, r4
   d9ae6:	f001 fc47 	bl	db378 <__lshift>
   d9aea:	4606      	mov	r6, r0
   d9aec:	2800      	cmp	r0, #0
   d9aee:	f43f ae77 	beq.w	d97e0 <_strtod_l+0x498>
   d9af2:	9a07      	ldr	r2, [sp, #28]
   d9af4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9af6:	4620      	mov	r0, r4
   d9af8:	f001 fcb9 	bl	db46e <__mdiff>
   d9afc:	4605      	mov	r5, r0
   d9afe:	2800      	cmp	r0, #0
   d9b00:	f43f ae6e 	beq.w	d97e0 <_strtod_l+0x498>
   d9b04:	68c3      	ldr	r3, [r0, #12]
   d9b06:	930f      	str	r3, [sp, #60]	; 0x3c
   d9b08:	2300      	movs	r3, #0
   d9b0a:	60c3      	str	r3, [r0, #12]
   d9b0c:	4631      	mov	r1, r6
   d9b0e:	f001 fc92 	bl	db436 <__mcmp>
   d9b12:	2800      	cmp	r0, #0
   d9b14:	da65      	bge.n	d9be2 <_strtod_l+0x89a>
   d9b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9b18:	ea53 030a 	orrs.w	r3, r3, sl
   d9b1c:	f040 8087 	bne.w	d9c2e <_strtod_l+0x8e6>
   d9b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9b24:	2b00      	cmp	r3, #0
   d9b26:	f040 8082 	bne.w	d9c2e <_strtod_l+0x8e6>
   d9b2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9b2e:	0d1b      	lsrs	r3, r3, #20
   d9b30:	051b      	lsls	r3, r3, #20
   d9b32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9b36:	d97a      	bls.n	d9c2e <_strtod_l+0x8e6>
   d9b38:	696b      	ldr	r3, [r5, #20]
   d9b3a:	b913      	cbnz	r3, d9b42 <_strtod_l+0x7fa>
   d9b3c:	692b      	ldr	r3, [r5, #16]
   d9b3e:	2b01      	cmp	r3, #1
   d9b40:	dd75      	ble.n	d9c2e <_strtod_l+0x8e6>
   d9b42:	4629      	mov	r1, r5
   d9b44:	2201      	movs	r2, #1
   d9b46:	4620      	mov	r0, r4
   d9b48:	f001 fc16 	bl	db378 <__lshift>
   d9b4c:	4631      	mov	r1, r6
   d9b4e:	4605      	mov	r5, r0
   d9b50:	f001 fc71 	bl	db436 <__mcmp>
   d9b54:	2800      	cmp	r0, #0
   d9b56:	dd6a      	ble.n	d9c2e <_strtod_l+0x8e6>
   d9b58:	9904      	ldr	r1, [sp, #16]
   d9b5a:	4a55      	ldr	r2, [pc, #340]	; (d9cb0 <_strtod_l+0x968>)
   d9b5c:	465b      	mov	r3, fp
   d9b5e:	2900      	cmp	r1, #0
   d9b60:	f000 8085 	beq.w	d9c6e <_strtod_l+0x926>
   d9b64:	ea02 010b 	and.w	r1, r2, fp
   d9b68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9b6c:	dc7f      	bgt.n	d9c6e <_strtod_l+0x926>
   d9b6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9b72:	f77f aeaa 	ble.w	d98ca <_strtod_l+0x582>
   d9b76:	4a4f      	ldr	r2, [pc, #316]	; (d9cb4 <_strtod_l+0x96c>)
   d9b78:	2300      	movs	r3, #0
   d9b7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9b7e:	4650      	mov	r0, sl
   d9b80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9b84:	4659      	mov	r1, fp
   d9b86:	f7fe fd27 	bl	d85d8 <__aeabi_dmul>
   d9b8a:	460b      	mov	r3, r1
   d9b8c:	4303      	orrs	r3, r0
   d9b8e:	bf08      	it	eq
   d9b90:	2322      	moveq	r3, #34	; 0x22
   d9b92:	4682      	mov	sl, r0
   d9b94:	468b      	mov	fp, r1
   d9b96:	bf08      	it	eq
   d9b98:	6023      	streq	r3, [r4, #0]
   d9b9a:	e62b      	b.n	d97f4 <_strtod_l+0x4ac>
   d9b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9ba0:	fa02 f303 	lsl.w	r3, r2, r3
   d9ba4:	ea03 0a0a 	and.w	sl, r3, sl
   d9ba8:	e6de      	b.n	d9968 <_strtod_l+0x620>
   d9baa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9bae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9bb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9bb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9bba:	fa01 f308 	lsl.w	r3, r1, r8
   d9bbe:	930c      	str	r3, [sp, #48]	; 0x30
   d9bc0:	9111      	str	r1, [sp, #68]	; 0x44
   d9bc2:	e741      	b.n	d9a48 <_strtod_l+0x700>
   d9bc4:	2300      	movs	r3, #0
   d9bc6:	930c      	str	r3, [sp, #48]	; 0x30
   d9bc8:	2301      	movs	r3, #1
   d9bca:	9311      	str	r3, [sp, #68]	; 0x44
   d9bcc:	e73c      	b.n	d9a48 <_strtod_l+0x700>
   d9bce:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9bd0:	4642      	mov	r2, r8
   d9bd2:	4620      	mov	r0, r4
   d9bd4:	f001 fbd0 	bl	db378 <__lshift>
   d9bd8:	901e      	str	r0, [sp, #120]	; 0x78
   d9bda:	2800      	cmp	r0, #0
   d9bdc:	f47f af66 	bne.w	d9aac <_strtod_l+0x764>
   d9be0:	e5fe      	b.n	d97e0 <_strtod_l+0x498>
   d9be2:	465f      	mov	r7, fp
   d9be4:	d16e      	bne.n	d9cc4 <_strtod_l+0x97c>
   d9be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9be8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9bec:	b342      	cbz	r2, d9c40 <_strtod_l+0x8f8>
   d9bee:	4a32      	ldr	r2, [pc, #200]	; (d9cb8 <_strtod_l+0x970>)
   d9bf0:	4293      	cmp	r3, r2
   d9bf2:	d128      	bne.n	d9c46 <_strtod_l+0x8fe>
   d9bf4:	9b04      	ldr	r3, [sp, #16]
   d9bf6:	4650      	mov	r0, sl
   d9bf8:	b1eb      	cbz	r3, d9c36 <_strtod_l+0x8ee>
   d9bfa:	4a2d      	ldr	r2, [pc, #180]	; (d9cb0 <_strtod_l+0x968>)
   d9bfc:	403a      	ands	r2, r7
   d9bfe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9c02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9c06:	d819      	bhi.n	d9c3c <_strtod_l+0x8f4>
   d9c08:	0d12      	lsrs	r2, r2, #20
   d9c0a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d9c0e:	fa01 f303 	lsl.w	r3, r1, r3
   d9c12:	4298      	cmp	r0, r3
   d9c14:	d117      	bne.n	d9c46 <_strtod_l+0x8fe>
   d9c16:	4b29      	ldr	r3, [pc, #164]	; (d9cbc <_strtod_l+0x974>)
   d9c18:	429f      	cmp	r7, r3
   d9c1a:	d102      	bne.n	d9c22 <_strtod_l+0x8da>
   d9c1c:	3001      	adds	r0, #1
   d9c1e:	f43f addf 	beq.w	d97e0 <_strtod_l+0x498>
   d9c22:	4b23      	ldr	r3, [pc, #140]	; (d9cb0 <_strtod_l+0x968>)
   d9c24:	403b      	ands	r3, r7
   d9c26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9c2a:	f04f 0a00 	mov.w	sl, #0
   d9c2e:	9b04      	ldr	r3, [sp, #16]
   d9c30:	2b00      	cmp	r3, #0
   d9c32:	d1a0      	bne.n	d9b76 <_strtod_l+0x82e>
   d9c34:	e5de      	b.n	d97f4 <_strtod_l+0x4ac>
   d9c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9c3a:	e7ea      	b.n	d9c12 <_strtod_l+0x8ca>
   d9c3c:	460b      	mov	r3, r1
   d9c3e:	e7e8      	b.n	d9c12 <_strtod_l+0x8ca>
   d9c40:	ea53 030a 	orrs.w	r3, r3, sl
   d9c44:	d088      	beq.n	d9b58 <_strtod_l+0x810>
   d9c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9c48:	b1db      	cbz	r3, d9c82 <_strtod_l+0x93a>
   d9c4a:	423b      	tst	r3, r7
   d9c4c:	d0ef      	beq.n	d9c2e <_strtod_l+0x8e6>
   d9c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9c50:	9a04      	ldr	r2, [sp, #16]
   d9c52:	4650      	mov	r0, sl
   d9c54:	4659      	mov	r1, fp
   d9c56:	b1c3      	cbz	r3, d9c8a <_strtod_l+0x942>
   d9c58:	f7ff fb58 	bl	d930c <sulp>
   d9c5c:	4602      	mov	r2, r0
   d9c5e:	460b      	mov	r3, r1
   d9c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9c64:	f7fe fb02 	bl	d826c <__adddf3>
   d9c68:	4682      	mov	sl, r0
   d9c6a:	468b      	mov	fp, r1
   d9c6c:	e7df      	b.n	d9c2e <_strtod_l+0x8e6>
   d9c6e:	4013      	ands	r3, r2
   d9c70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9c74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9c78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9c7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9c80:	e7d5      	b.n	d9c2e <_strtod_l+0x8e6>
   d9c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9c84:	ea13 0f0a 	tst.w	r3, sl
   d9c88:	e7e0      	b.n	d9c4c <_strtod_l+0x904>
   d9c8a:	f7ff fb3f 	bl	d930c <sulp>
   d9c8e:	4602      	mov	r2, r0
   d9c90:	460b      	mov	r3, r1
   d9c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9c96:	f7fe fae7 	bl	d8268 <__aeabi_dsub>
   d9c9a:	2200      	movs	r2, #0
   d9c9c:	2300      	movs	r3, #0
   d9c9e:	4682      	mov	sl, r0
   d9ca0:	468b      	mov	fp, r1
   d9ca2:	f7fe ff01 	bl	d8aa8 <__aeabi_dcmpeq>
   d9ca6:	2800      	cmp	r0, #0
   d9ca8:	d0c1      	beq.n	d9c2e <_strtod_l+0x8e6>
   d9caa:	e60e      	b.n	d98ca <_strtod_l+0x582>
   d9cac:	fffffc02 	.word	0xfffffc02
   d9cb0:	7ff00000 	.word	0x7ff00000
   d9cb4:	39500000 	.word	0x39500000
   d9cb8:	000fffff 	.word	0x000fffff
   d9cbc:	7fefffff 	.word	0x7fefffff
   d9cc0:	000dc368 	.word	0x000dc368
   d9cc4:	4631      	mov	r1, r6
   d9cc6:	4628      	mov	r0, r5
   d9cc8:	f001 fd14 	bl	db6f4 <__ratio>
   d9ccc:	ec59 8b10 	vmov	r8, r9, d0
   d9cd0:	ee10 0a10 	vmov	r0, s0
   d9cd4:	2200      	movs	r2, #0
   d9cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9cda:	4649      	mov	r1, r9
   d9cdc:	f7fe fef8 	bl	d8ad0 <__aeabi_dcmple>
   d9ce0:	2800      	cmp	r0, #0
   d9ce2:	d07c      	beq.n	d9dde <_strtod_l+0xa96>
   d9ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9ce6:	2b00      	cmp	r3, #0
   d9ce8:	d04c      	beq.n	d9d84 <_strtod_l+0xa3c>
   d9cea:	4b95      	ldr	r3, [pc, #596]	; (d9f40 <_strtod_l+0xbf8>)
   d9cec:	2200      	movs	r2, #0
   d9cee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9cf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9f40 <_strtod_l+0xbf8>
   d9cf6:	f04f 0800 	mov.w	r8, #0
   d9cfa:	4b92      	ldr	r3, [pc, #584]	; (d9f44 <_strtod_l+0xbfc>)
   d9cfc:	403b      	ands	r3, r7
   d9cfe:	9311      	str	r3, [sp, #68]	; 0x44
   d9d00:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9d02:	4b91      	ldr	r3, [pc, #580]	; (d9f48 <_strtod_l+0xc00>)
   d9d04:	429a      	cmp	r2, r3
   d9d06:	f040 80b2 	bne.w	d9e6e <_strtod_l+0xb26>
   d9d0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9d12:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9d16:	ec4b ab10 	vmov	d0, sl, fp
   d9d1a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d9d1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9d22:	f001 fc1b 	bl	db55c <__ulp>
   d9d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9d2a:	ec53 2b10 	vmov	r2, r3, d0
   d9d2e:	f7fe fc53 	bl	d85d8 <__aeabi_dmul>
   d9d32:	4652      	mov	r2, sl
   d9d34:	465b      	mov	r3, fp
   d9d36:	f7fe fa99 	bl	d826c <__adddf3>
   d9d3a:	460b      	mov	r3, r1
   d9d3c:	4981      	ldr	r1, [pc, #516]	; (d9f44 <_strtod_l+0xbfc>)
   d9d3e:	4a83      	ldr	r2, [pc, #524]	; (d9f4c <_strtod_l+0xc04>)
   d9d40:	4019      	ands	r1, r3
   d9d42:	4291      	cmp	r1, r2
   d9d44:	4682      	mov	sl, r0
   d9d46:	d95e      	bls.n	d9e06 <_strtod_l+0xabe>
   d9d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9d4a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d9d4e:	4293      	cmp	r3, r2
   d9d50:	d103      	bne.n	d9d5a <_strtod_l+0xa12>
   d9d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9d54:	3301      	adds	r3, #1
   d9d56:	f43f ad43 	beq.w	d97e0 <_strtod_l+0x498>
   d9d5a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9f58 <_strtod_l+0xc10>
   d9d5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9d62:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9d64:	4620      	mov	r0, r4
   d9d66:	f001 f931 	bl	dafcc <_Bfree>
   d9d6a:	9907      	ldr	r1, [sp, #28]
   d9d6c:	4620      	mov	r0, r4
   d9d6e:	f001 f92d 	bl	dafcc <_Bfree>
   d9d72:	4631      	mov	r1, r6
   d9d74:	4620      	mov	r0, r4
   d9d76:	f001 f929 	bl	dafcc <_Bfree>
   d9d7a:	4629      	mov	r1, r5
   d9d7c:	4620      	mov	r0, r4
   d9d7e:	f001 f925 	bl	dafcc <_Bfree>
   d9d82:	e613      	b.n	d99ac <_strtod_l+0x664>
   d9d84:	f1ba 0f00 	cmp.w	sl, #0
   d9d88:	d11b      	bne.n	d9dc2 <_strtod_l+0xa7a>
   d9d8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9d8e:	b9f3      	cbnz	r3, d9dce <_strtod_l+0xa86>
   d9d90:	4b6b      	ldr	r3, [pc, #428]	; (d9f40 <_strtod_l+0xbf8>)
   d9d92:	2200      	movs	r2, #0
   d9d94:	4640      	mov	r0, r8
   d9d96:	4649      	mov	r1, r9
   d9d98:	f7fe fe90 	bl	d8abc <__aeabi_dcmplt>
   d9d9c:	b9d0      	cbnz	r0, d9dd4 <_strtod_l+0xa8c>
   d9d9e:	4640      	mov	r0, r8
   d9da0:	4649      	mov	r1, r9
   d9da2:	4b6b      	ldr	r3, [pc, #428]	; (d9f50 <_strtod_l+0xc08>)
   d9da4:	2200      	movs	r2, #0
   d9da6:	f7fe fc17 	bl	d85d8 <__aeabi_dmul>
   d9daa:	4680      	mov	r8, r0
   d9dac:	4689      	mov	r9, r1
   d9dae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9db2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9db6:	931b      	str	r3, [sp, #108]	; 0x6c
   d9db8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d9dbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9dc0:	e79b      	b.n	d9cfa <_strtod_l+0x9b2>
   d9dc2:	f1ba 0f01 	cmp.w	sl, #1
   d9dc6:	d102      	bne.n	d9dce <_strtod_l+0xa86>
   d9dc8:	2f00      	cmp	r7, #0
   d9dca:	f43f ad7e 	beq.w	d98ca <_strtod_l+0x582>
   d9dce:	4b61      	ldr	r3, [pc, #388]	; (d9f54 <_strtod_l+0xc0c>)
   d9dd0:	2200      	movs	r2, #0
   d9dd2:	e78c      	b.n	d9cee <_strtod_l+0x9a6>
   d9dd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9f50 <_strtod_l+0xc08>
   d9dd8:	f04f 0800 	mov.w	r8, #0
   d9ddc:	e7e7      	b.n	d9dae <_strtod_l+0xa66>
   d9dde:	4b5c      	ldr	r3, [pc, #368]	; (d9f50 <_strtod_l+0xc08>)
   d9de0:	4640      	mov	r0, r8
   d9de2:	4649      	mov	r1, r9
   d9de4:	2200      	movs	r2, #0
   d9de6:	f7fe fbf7 	bl	d85d8 <__aeabi_dmul>
   d9dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9dec:	4680      	mov	r8, r0
   d9dee:	4689      	mov	r9, r1
   d9df0:	b933      	cbnz	r3, d9e00 <_strtod_l+0xab8>
   d9df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9df6:	9012      	str	r0, [sp, #72]	; 0x48
   d9df8:	9313      	str	r3, [sp, #76]	; 0x4c
   d9dfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d9dfe:	e7dd      	b.n	d9dbc <_strtod_l+0xa74>
   d9e00:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9e04:	e7f9      	b.n	d9dfa <_strtod_l+0xab2>
   d9e06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d9e0a:	9b04      	ldr	r3, [sp, #16]
   d9e0c:	2b00      	cmp	r3, #0
   d9e0e:	d1a8      	bne.n	d9d62 <_strtod_l+0xa1a>
   d9e10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9e16:	0d1b      	lsrs	r3, r3, #20
   d9e18:	051b      	lsls	r3, r3, #20
   d9e1a:	429a      	cmp	r2, r3
   d9e1c:	d1a1      	bne.n	d9d62 <_strtod_l+0xa1a>
   d9e1e:	4640      	mov	r0, r8
   d9e20:	4649      	mov	r1, r9
   d9e22:	f001 fd65 	bl	db8f0 <__aeabi_d2lz>
   d9e26:	f7fe fba9 	bl	d857c <__aeabi_l2d>
   d9e2a:	4602      	mov	r2, r0
   d9e2c:	460b      	mov	r3, r1
   d9e2e:	4640      	mov	r0, r8
   d9e30:	4649      	mov	r1, r9
   d9e32:	f7fe fa19 	bl	d8268 <__aeabi_dsub>
   d9e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9e38:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9e3c:	ea43 030a 	orr.w	r3, r3, sl
   d9e40:	4313      	orrs	r3, r2
   d9e42:	4680      	mov	r8, r0
   d9e44:	4689      	mov	r9, r1
   d9e46:	d053      	beq.n	d9ef0 <_strtod_l+0xba8>
   d9e48:	a335      	add	r3, pc, #212	; (adr r3, d9f20 <_strtod_l+0xbd8>)
   d9e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e4e:	f7fe fe35 	bl	d8abc <__aeabi_dcmplt>
   d9e52:	2800      	cmp	r0, #0
   d9e54:	f47f acce 	bne.w	d97f4 <_strtod_l+0x4ac>
   d9e58:	a333      	add	r3, pc, #204	; (adr r3, d9f28 <_strtod_l+0xbe0>)
   d9e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e5e:	4640      	mov	r0, r8
   d9e60:	4649      	mov	r1, r9
   d9e62:	f7fe fe49 	bl	d8af8 <__aeabi_dcmpgt>
   d9e66:	2800      	cmp	r0, #0
   d9e68:	f43f af7b 	beq.w	d9d62 <_strtod_l+0xa1a>
   d9e6c:	e4c2      	b.n	d97f4 <_strtod_l+0x4ac>
   d9e6e:	9b04      	ldr	r3, [sp, #16]
   d9e70:	b333      	cbz	r3, d9ec0 <_strtod_l+0xb78>
   d9e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9e74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9e78:	d822      	bhi.n	d9ec0 <_strtod_l+0xb78>
   d9e7a:	a32d      	add	r3, pc, #180	; (adr r3, d9f30 <_strtod_l+0xbe8>)
   d9e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e80:	4640      	mov	r0, r8
   d9e82:	4649      	mov	r1, r9
   d9e84:	f7fe fe24 	bl	d8ad0 <__aeabi_dcmple>
   d9e88:	b1a0      	cbz	r0, d9eb4 <_strtod_l+0xb6c>
   d9e8a:	4649      	mov	r1, r9
   d9e8c:	4640      	mov	r0, r8
   d9e8e:	f7fe fe53 	bl	d8b38 <__aeabi_d2uiz>
   d9e92:	2801      	cmp	r0, #1
   d9e94:	bf38      	it	cc
   d9e96:	2001      	movcc	r0, #1
   d9e98:	f7fe fb24 	bl	d84e4 <__aeabi_ui2d>
   d9e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9e9e:	4680      	mov	r8, r0
   d9ea0:	4689      	mov	r9, r1
   d9ea2:	bb13      	cbnz	r3, d9eea <_strtod_l+0xba2>
   d9ea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9ea8:	9014      	str	r0, [sp, #80]	; 0x50
   d9eaa:	9315      	str	r3, [sp, #84]	; 0x54
   d9eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9eb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9eb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9eb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9ebc:	1a9b      	subs	r3, r3, r2
   d9ebe:	930d      	str	r3, [sp, #52]	; 0x34
   d9ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9ec4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9ec8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9ecc:	f001 fb46 	bl	db55c <__ulp>
   d9ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9ed4:	ec53 2b10 	vmov	r2, r3, d0
   d9ed8:	f7fe fb7e 	bl	d85d8 <__aeabi_dmul>
   d9edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9ee0:	f7fe f9c4 	bl	d826c <__adddf3>
   d9ee4:	4682      	mov	sl, r0
   d9ee6:	468b      	mov	fp, r1
   d9ee8:	e78f      	b.n	d9e0a <_strtod_l+0xac2>
   d9eea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d9eee:	e7dd      	b.n	d9eac <_strtod_l+0xb64>
   d9ef0:	a311      	add	r3, pc, #68	; (adr r3, d9f38 <_strtod_l+0xbf0>)
   d9ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ef6:	f7fe fde1 	bl	d8abc <__aeabi_dcmplt>
   d9efa:	e7b4      	b.n	d9e66 <_strtod_l+0xb1e>
   d9efc:	2300      	movs	r3, #0
   d9efe:	930e      	str	r3, [sp, #56]	; 0x38
   d9f00:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9f02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9f04:	6013      	str	r3, [r2, #0]
   d9f06:	f7ff ba65 	b.w	d93d4 <_strtod_l+0x8c>
   d9f0a:	2b65      	cmp	r3, #101	; 0x65
   d9f0c:	f43f ab5d 	beq.w	d95ca <_strtod_l+0x282>
   d9f10:	2b45      	cmp	r3, #69	; 0x45
   d9f12:	f43f ab5a 	beq.w	d95ca <_strtod_l+0x282>
   d9f16:	2201      	movs	r2, #1
   d9f18:	f7ff bb92 	b.w	d9640 <_strtod_l+0x2f8>
   d9f1c:	f3af 8000 	nop.w
   d9f20:	94a03595 	.word	0x94a03595
   d9f24:	3fdfffff 	.word	0x3fdfffff
   d9f28:	35afe535 	.word	0x35afe535
   d9f2c:	3fe00000 	.word	0x3fe00000
   d9f30:	ffc00000 	.word	0xffc00000
   d9f34:	41dfffff 	.word	0x41dfffff
   d9f38:	94a03595 	.word	0x94a03595
   d9f3c:	3fcfffff 	.word	0x3fcfffff
   d9f40:	3ff00000 	.word	0x3ff00000
   d9f44:	7ff00000 	.word	0x7ff00000
   d9f48:	7fe00000 	.word	0x7fe00000
   d9f4c:	7c9fffff 	.word	0x7c9fffff
   d9f50:	3fe00000 	.word	0x3fe00000
   d9f54:	bff00000 	.word	0xbff00000
   d9f58:	7fefffff 	.word	0x7fefffff

000d9f5c <strtof>:
   d9f5c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   d9f60:	4e26      	ldr	r6, [pc, #152]	; (d9ffc <strtof+0xa0>)
   d9f62:	4b27      	ldr	r3, [pc, #156]	; (da000 <strtof+0xa4>)
   d9f64:	460a      	mov	r2, r1
   d9f66:	ed2d 8b02 	vpush	{d8}
   d9f6a:	4601      	mov	r1, r0
   d9f6c:	6830      	ldr	r0, [r6, #0]
   d9f6e:	f7ff f9eb 	bl	d9348 <_strtod_l>
   d9f72:	ec55 4b10 	vmov	r4, r5, d0
   d9f76:	ee10 2a10 	vmov	r2, s0
   d9f7a:	ee10 0a10 	vmov	r0, s0
   d9f7e:	462b      	mov	r3, r5
   d9f80:	4629      	mov	r1, r5
   d9f82:	f7fe fdc3 	bl	d8b0c <__aeabi_dcmpun>
   d9f86:	b190      	cbz	r0, d9fae <strtof+0x52>
   d9f88:	2d00      	cmp	r5, #0
   d9f8a:	481e      	ldr	r0, [pc, #120]	; (da004 <strtof+0xa8>)
   d9f8c:	da09      	bge.n	d9fa2 <strtof+0x46>
   d9f8e:	f001 fc3f 	bl	db810 <nanf>
   d9f92:	eeb1 8a40 	vneg.f32	s16, s0
   d9f96:	eeb0 0a48 	vmov.f32	s0, s16
   d9f9a:	ecbd 8b02 	vpop	{d8}
   d9f9e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d9fa2:	ecbd 8b02 	vpop	{d8}
   d9fa6:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   d9faa:	f001 bc31 	b.w	db810 <nanf>
   d9fae:	4620      	mov	r0, r4
   d9fb0:	4629      	mov	r1, r5
   d9fb2:	f7fe fde1 	bl	d8b78 <__aeabi_d2f>
   d9fb6:	ee08 0a10 	vmov	s16, r0
   d9fba:	eddf 7a13 	vldr	s15, [pc, #76]	; da008 <strtof+0xac>
   d9fbe:	eeb0 7ac8 	vabs.f32	s14, s16
   d9fc2:	eeb4 7a67 	vcmp.f32	s14, s15
   d9fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9fca:	dde4      	ble.n	d9f96 <strtof+0x3a>
   d9fcc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   d9fd0:	4b0e      	ldr	r3, [pc, #56]	; (da00c <strtof+0xb0>)
   d9fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9fd6:	4620      	mov	r0, r4
   d9fd8:	4649      	mov	r1, r9
   d9fda:	f7fe fd97 	bl	d8b0c <__aeabi_dcmpun>
   d9fde:	b940      	cbnz	r0, d9ff2 <strtof+0x96>
   d9fe0:	4b0a      	ldr	r3, [pc, #40]	; (da00c <strtof+0xb0>)
   d9fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9fe6:	4620      	mov	r0, r4
   d9fe8:	4649      	mov	r1, r9
   d9fea:	f7fe fd71 	bl	d8ad0 <__aeabi_dcmple>
   d9fee:	2800      	cmp	r0, #0
   d9ff0:	d0d1      	beq.n	d9f96 <strtof+0x3a>
   d9ff2:	6833      	ldr	r3, [r6, #0]
   d9ff4:	2222      	movs	r2, #34	; 0x22
   d9ff6:	601a      	str	r2, [r3, #0]
   d9ff8:	e7cd      	b.n	d9f96 <strtof+0x3a>
   d9ffa:	bf00      	nop
   d9ffc:	2003e1bc 	.word	0x2003e1bc
   da000:	2003e284 	.word	0x2003e284
   da004:	000db9d2 	.word	0x000db9d2
   da008:	7f7fffff 	.word	0x7f7fffff
   da00c:	7fefffff 	.word	0x7fefffff

000da010 <_strtol_l.isra.0>:
   da010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da014:	4e3a      	ldr	r6, [pc, #232]	; (da100 <_strtol_l.isra.0+0xf0>)
   da016:	4686      	mov	lr, r0
   da018:	468c      	mov	ip, r1
   da01a:	4660      	mov	r0, ip
   da01c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da020:	5da5      	ldrb	r5, [r4, r6]
   da022:	f015 0508 	ands.w	r5, r5, #8
   da026:	d1f8      	bne.n	da01a <_strtol_l.isra.0+0xa>
   da028:	2c2d      	cmp	r4, #45	; 0x2d
   da02a:	d133      	bne.n	da094 <_strtol_l.isra.0+0x84>
   da02c:	f89c 4000 	ldrb.w	r4, [ip]
   da030:	f04f 0801 	mov.w	r8, #1
   da034:	f100 0c02 	add.w	ip, r0, #2
   da038:	2b00      	cmp	r3, #0
   da03a:	d05c      	beq.n	da0f6 <_strtol_l.isra.0+0xe6>
   da03c:	2b10      	cmp	r3, #16
   da03e:	d10c      	bne.n	da05a <_strtol_l.isra.0+0x4a>
   da040:	2c30      	cmp	r4, #48	; 0x30
   da042:	d10a      	bne.n	da05a <_strtol_l.isra.0+0x4a>
   da044:	f89c 0000 	ldrb.w	r0, [ip]
   da048:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da04c:	2858      	cmp	r0, #88	; 0x58
   da04e:	d14d      	bne.n	da0ec <_strtol_l.isra.0+0xdc>
   da050:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da054:	2310      	movs	r3, #16
   da056:	f10c 0c02 	add.w	ip, ip, #2
   da05a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da05e:	3f01      	subs	r7, #1
   da060:	2600      	movs	r6, #0
   da062:	fbb7 f9f3 	udiv	r9, r7, r3
   da066:	4630      	mov	r0, r6
   da068:	fb03 7a19 	mls	sl, r3, r9, r7
   da06c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da070:	2d09      	cmp	r5, #9
   da072:	d818      	bhi.n	da0a6 <_strtol_l.isra.0+0x96>
   da074:	462c      	mov	r4, r5
   da076:	42a3      	cmp	r3, r4
   da078:	dd24      	ble.n	da0c4 <_strtol_l.isra.0+0xb4>
   da07a:	1c75      	adds	r5, r6, #1
   da07c:	d007      	beq.n	da08e <_strtol_l.isra.0+0x7e>
   da07e:	4581      	cmp	r9, r0
   da080:	d31d      	bcc.n	da0be <_strtol_l.isra.0+0xae>
   da082:	d101      	bne.n	da088 <_strtol_l.isra.0+0x78>
   da084:	45a2      	cmp	sl, r4
   da086:	db1a      	blt.n	da0be <_strtol_l.isra.0+0xae>
   da088:	fb00 4003 	mla	r0, r0, r3, r4
   da08c:	2601      	movs	r6, #1
   da08e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da092:	e7eb      	b.n	da06c <_strtol_l.isra.0+0x5c>
   da094:	2c2b      	cmp	r4, #43	; 0x2b
   da096:	bf08      	it	eq
   da098:	f89c 4000 	ldrbeq.w	r4, [ip]
   da09c:	46a8      	mov	r8, r5
   da09e:	bf08      	it	eq
   da0a0:	f100 0c02 	addeq.w	ip, r0, #2
   da0a4:	e7c8      	b.n	da038 <_strtol_l.isra.0+0x28>
   da0a6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da0aa:	2d19      	cmp	r5, #25
   da0ac:	d801      	bhi.n	da0b2 <_strtol_l.isra.0+0xa2>
   da0ae:	3c37      	subs	r4, #55	; 0x37
   da0b0:	e7e1      	b.n	da076 <_strtol_l.isra.0+0x66>
   da0b2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da0b6:	2d19      	cmp	r5, #25
   da0b8:	d804      	bhi.n	da0c4 <_strtol_l.isra.0+0xb4>
   da0ba:	3c57      	subs	r4, #87	; 0x57
   da0bc:	e7db      	b.n	da076 <_strtol_l.isra.0+0x66>
   da0be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da0c2:	e7e4      	b.n	da08e <_strtol_l.isra.0+0x7e>
   da0c4:	1c73      	adds	r3, r6, #1
   da0c6:	d106      	bne.n	da0d6 <_strtol_l.isra.0+0xc6>
   da0c8:	2322      	movs	r3, #34	; 0x22
   da0ca:	f8ce 3000 	str.w	r3, [lr]
   da0ce:	4638      	mov	r0, r7
   da0d0:	b942      	cbnz	r2, da0e4 <_strtol_l.isra.0+0xd4>
   da0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da0d6:	f1b8 0f00 	cmp.w	r8, #0
   da0da:	d000      	beq.n	da0de <_strtol_l.isra.0+0xce>
   da0dc:	4240      	negs	r0, r0
   da0de:	2a00      	cmp	r2, #0
   da0e0:	d0f7      	beq.n	da0d2 <_strtol_l.isra.0+0xc2>
   da0e2:	b10e      	cbz	r6, da0e8 <_strtol_l.isra.0+0xd8>
   da0e4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da0e8:	6011      	str	r1, [r2, #0]
   da0ea:	e7f2      	b.n	da0d2 <_strtol_l.isra.0+0xc2>
   da0ec:	2430      	movs	r4, #48	; 0x30
   da0ee:	2b00      	cmp	r3, #0
   da0f0:	d1b3      	bne.n	da05a <_strtol_l.isra.0+0x4a>
   da0f2:	2308      	movs	r3, #8
   da0f4:	e7b1      	b.n	da05a <_strtol_l.isra.0+0x4a>
   da0f6:	2c30      	cmp	r4, #48	; 0x30
   da0f8:	d0a4      	beq.n	da044 <_strtol_l.isra.0+0x34>
   da0fa:	230a      	movs	r3, #10
   da0fc:	e7ad      	b.n	da05a <_strtol_l.isra.0+0x4a>
   da0fe:	bf00      	nop
   da100:	000dc3cd 	.word	0x000dc3cd

000da104 <strtol>:
   da104:	4613      	mov	r3, r2
   da106:	460a      	mov	r2, r1
   da108:	4601      	mov	r1, r0
   da10a:	4802      	ldr	r0, [pc, #8]	; (da114 <strtol+0x10>)
   da10c:	6800      	ldr	r0, [r0, #0]
   da10e:	f7ff bf7f 	b.w	da010 <_strtol_l.isra.0>
   da112:	bf00      	nop
   da114:	2003e1bc 	.word	0x2003e1bc

000da118 <_strtoul_l.isra.0>:
   da118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da11c:	4e3b      	ldr	r6, [pc, #236]	; (da20c <_strtoul_l.isra.0+0xf4>)
   da11e:	4686      	mov	lr, r0
   da120:	468c      	mov	ip, r1
   da122:	4660      	mov	r0, ip
   da124:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da128:	5da5      	ldrb	r5, [r4, r6]
   da12a:	f015 0508 	ands.w	r5, r5, #8
   da12e:	d1f8      	bne.n	da122 <_strtoul_l.isra.0+0xa>
   da130:	2c2d      	cmp	r4, #45	; 0x2d
   da132:	d134      	bne.n	da19e <_strtoul_l.isra.0+0x86>
   da134:	f89c 4000 	ldrb.w	r4, [ip]
   da138:	f04f 0801 	mov.w	r8, #1
   da13c:	f100 0c02 	add.w	ip, r0, #2
   da140:	2b00      	cmp	r3, #0
   da142:	d05e      	beq.n	da202 <_strtoul_l.isra.0+0xea>
   da144:	2b10      	cmp	r3, #16
   da146:	d10c      	bne.n	da162 <_strtoul_l.isra.0+0x4a>
   da148:	2c30      	cmp	r4, #48	; 0x30
   da14a:	d10a      	bne.n	da162 <_strtoul_l.isra.0+0x4a>
   da14c:	f89c 0000 	ldrb.w	r0, [ip]
   da150:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da154:	2858      	cmp	r0, #88	; 0x58
   da156:	d14f      	bne.n	da1f8 <_strtoul_l.isra.0+0xe0>
   da158:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da15c:	2310      	movs	r3, #16
   da15e:	f10c 0c02 	add.w	ip, ip, #2
   da162:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da166:	2500      	movs	r5, #0
   da168:	fbb7 f7f3 	udiv	r7, r7, r3
   da16c:	fb03 f907 	mul.w	r9, r3, r7
   da170:	ea6f 0909 	mvn.w	r9, r9
   da174:	4628      	mov	r0, r5
   da176:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   da17a:	2e09      	cmp	r6, #9
   da17c:	d818      	bhi.n	da1b0 <_strtoul_l.isra.0+0x98>
   da17e:	4634      	mov	r4, r6
   da180:	42a3      	cmp	r3, r4
   da182:	dd24      	ble.n	da1ce <_strtoul_l.isra.0+0xb6>
   da184:	2d00      	cmp	r5, #0
   da186:	db1f      	blt.n	da1c8 <_strtoul_l.isra.0+0xb0>
   da188:	4287      	cmp	r7, r0
   da18a:	d31d      	bcc.n	da1c8 <_strtoul_l.isra.0+0xb0>
   da18c:	d101      	bne.n	da192 <_strtoul_l.isra.0+0x7a>
   da18e:	45a1      	cmp	r9, r4
   da190:	db1a      	blt.n	da1c8 <_strtoul_l.isra.0+0xb0>
   da192:	fb00 4003 	mla	r0, r0, r3, r4
   da196:	2501      	movs	r5, #1
   da198:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da19c:	e7eb      	b.n	da176 <_strtoul_l.isra.0+0x5e>
   da19e:	2c2b      	cmp	r4, #43	; 0x2b
   da1a0:	bf08      	it	eq
   da1a2:	f89c 4000 	ldrbeq.w	r4, [ip]
   da1a6:	46a8      	mov	r8, r5
   da1a8:	bf08      	it	eq
   da1aa:	f100 0c02 	addeq.w	ip, r0, #2
   da1ae:	e7c7      	b.n	da140 <_strtoul_l.isra.0+0x28>
   da1b0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   da1b4:	2e19      	cmp	r6, #25
   da1b6:	d801      	bhi.n	da1bc <_strtoul_l.isra.0+0xa4>
   da1b8:	3c37      	subs	r4, #55	; 0x37
   da1ba:	e7e1      	b.n	da180 <_strtoul_l.isra.0+0x68>
   da1bc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   da1c0:	2e19      	cmp	r6, #25
   da1c2:	d804      	bhi.n	da1ce <_strtoul_l.isra.0+0xb6>
   da1c4:	3c57      	subs	r4, #87	; 0x57
   da1c6:	e7db      	b.n	da180 <_strtoul_l.isra.0+0x68>
   da1c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da1cc:	e7e4      	b.n	da198 <_strtoul_l.isra.0+0x80>
   da1ce:	2d00      	cmp	r5, #0
   da1d0:	da07      	bge.n	da1e2 <_strtoul_l.isra.0+0xca>
   da1d2:	2322      	movs	r3, #34	; 0x22
   da1d4:	f8ce 3000 	str.w	r3, [lr]
   da1d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da1dc:	b942      	cbnz	r2, da1f0 <_strtoul_l.isra.0+0xd8>
   da1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da1e2:	f1b8 0f00 	cmp.w	r8, #0
   da1e6:	d000      	beq.n	da1ea <_strtoul_l.isra.0+0xd2>
   da1e8:	4240      	negs	r0, r0
   da1ea:	2a00      	cmp	r2, #0
   da1ec:	d0f7      	beq.n	da1de <_strtoul_l.isra.0+0xc6>
   da1ee:	b10d      	cbz	r5, da1f4 <_strtoul_l.isra.0+0xdc>
   da1f0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da1f4:	6011      	str	r1, [r2, #0]
   da1f6:	e7f2      	b.n	da1de <_strtoul_l.isra.0+0xc6>
   da1f8:	2430      	movs	r4, #48	; 0x30
   da1fa:	2b00      	cmp	r3, #0
   da1fc:	d1b1      	bne.n	da162 <_strtoul_l.isra.0+0x4a>
   da1fe:	2308      	movs	r3, #8
   da200:	e7af      	b.n	da162 <_strtoul_l.isra.0+0x4a>
   da202:	2c30      	cmp	r4, #48	; 0x30
   da204:	d0a2      	beq.n	da14c <_strtoul_l.isra.0+0x34>
   da206:	230a      	movs	r3, #10
   da208:	e7ab      	b.n	da162 <_strtoul_l.isra.0+0x4a>
   da20a:	bf00      	nop
   da20c:	000dc3cd 	.word	0x000dc3cd

000da210 <strtoul>:
   da210:	4613      	mov	r3, r2
   da212:	460a      	mov	r2, r1
   da214:	4601      	mov	r1, r0
   da216:	4802      	ldr	r0, [pc, #8]	; (da220 <strtoul+0x10>)
   da218:	6800      	ldr	r0, [r0, #0]
   da21a:	f7ff bf7d 	b.w	da118 <_strtoul_l.isra.0>
   da21e:	bf00      	nop
   da220:	2003e1bc 	.word	0x2003e1bc

000da224 <__tzcalc_limits>:
   da224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da228:	4680      	mov	r8, r0
   da22a:	f000 fdd1 	bl	dadd0 <__gettzinfo>
   da22e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da232:	4598      	cmp	r8, r3
   da234:	f340 8098 	ble.w	da368 <__tzcalc_limits+0x144>
   da238:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da23c:	4443      	add	r3, r8
   da23e:	109b      	asrs	r3, r3, #2
   da240:	f240 126d 	movw	r2, #365	; 0x16d
   da244:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   da248:	fb02 3505 	mla	r5, r2, r5, r3
   da24c:	f06f 0263 	mvn.w	r2, #99	; 0x63
   da250:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   da254:	fb93 f3f2 	sdiv	r3, r3, r2
   da258:	441d      	add	r5, r3
   da25a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   da25e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da262:	fb98 f7f3 	sdiv	r7, r8, r3
   da266:	fb03 8717 	mls	r7, r3, r7, r8
   da26a:	4442      	add	r2, r8
   da26c:	fab7 fc87 	clz	ip, r7
   da270:	fbb2 f2f3 	udiv	r2, r2, r3
   da274:	f008 0303 	and.w	r3, r8, #3
   da278:	4415      	add	r5, r2
   da27a:	2264      	movs	r2, #100	; 0x64
   da27c:	f8c0 8004 	str.w	r8, [r0, #4]
   da280:	fb98 f6f2 	sdiv	r6, r8, r2
   da284:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   da288:	fb02 8616 	mls	r6, r2, r6, r8
   da28c:	4604      	mov	r4, r0
   da28e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   da292:	9300      	str	r3, [sp, #0]
   da294:	f04f 0e07 	mov.w	lr, #7
   da298:	7a22      	ldrb	r2, [r4, #8]
   da29a:	6963      	ldr	r3, [r4, #20]
   da29c:	2a4a      	cmp	r2, #74	; 0x4a
   da29e:	d128      	bne.n	da2f2 <__tzcalc_limits+0xce>
   da2a0:	9900      	ldr	r1, [sp, #0]
   da2a2:	18ea      	adds	r2, r5, r3
   da2a4:	b901      	cbnz	r1, da2a8 <__tzcalc_limits+0x84>
   da2a6:	b906      	cbnz	r6, da2aa <__tzcalc_limits+0x86>
   da2a8:	bb0f      	cbnz	r7, da2ee <__tzcalc_limits+0xca>
   da2aa:	2b3b      	cmp	r3, #59	; 0x3b
   da2ac:	bfd4      	ite	le
   da2ae:	2300      	movle	r3, #0
   da2b0:	2301      	movgt	r3, #1
   da2b2:	4413      	add	r3, r2
   da2b4:	1e5a      	subs	r2, r3, #1
   da2b6:	69a3      	ldr	r3, [r4, #24]
   da2b8:	492c      	ldr	r1, [pc, #176]	; (da36c <__tzcalc_limits+0x148>)
   da2ba:	fb01 3202 	mla	r2, r1, r2, r3
   da2be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   da2c0:	4413      	add	r3, r2
   da2c2:	461a      	mov	r2, r3
   da2c4:	17db      	asrs	r3, r3, #31
   da2c6:	e9c4 2308 	strd	r2, r3, [r4, #32]
   da2ca:	3428      	adds	r4, #40	; 0x28
   da2cc:	45a3      	cmp	fp, r4
   da2ce:	d1e3      	bne.n	da298 <__tzcalc_limits+0x74>
   da2d0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   da2d4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   da2d8:	4294      	cmp	r4, r2
   da2da:	eb75 0303 	sbcs.w	r3, r5, r3
   da2de:	bfb4      	ite	lt
   da2e0:	2301      	movlt	r3, #1
   da2e2:	2300      	movge	r3, #0
   da2e4:	6003      	str	r3, [r0, #0]
   da2e6:	2001      	movs	r0, #1
   da2e8:	b003      	add	sp, #12
   da2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da2ee:	2300      	movs	r3, #0
   da2f0:	e7df      	b.n	da2b2 <__tzcalc_limits+0x8e>
   da2f2:	2a44      	cmp	r2, #68	; 0x44
   da2f4:	d101      	bne.n	da2fa <__tzcalc_limits+0xd6>
   da2f6:	18ea      	adds	r2, r5, r3
   da2f8:	e7dd      	b.n	da2b6 <__tzcalc_limits+0x92>
   da2fa:	9a00      	ldr	r2, [sp, #0]
   da2fc:	bb72      	cbnz	r2, da35c <__tzcalc_limits+0x138>
   da2fe:	2e00      	cmp	r6, #0
   da300:	bf0c      	ite	eq
   da302:	46e0      	moveq	r8, ip
   da304:	f04f 0801 	movne.w	r8, #1
   da308:	4919      	ldr	r1, [pc, #100]	; (da370 <__tzcalc_limits+0x14c>)
   da30a:	68e2      	ldr	r2, [r4, #12]
   da30c:	9201      	str	r2, [sp, #4]
   da30e:	f04f 0a30 	mov.w	sl, #48	; 0x30
   da312:	fb0a 1808 	mla	r8, sl, r8, r1
   da316:	462a      	mov	r2, r5
   da318:	f04f 0900 	mov.w	r9, #0
   da31c:	f1a8 0804 	sub.w	r8, r8, #4
   da320:	9901      	ldr	r1, [sp, #4]
   da322:	f109 0901 	add.w	r9, r9, #1
   da326:	4549      	cmp	r1, r9
   da328:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   da32c:	dc18      	bgt.n	da360 <__tzcalc_limits+0x13c>
   da32e:	f102 0804 	add.w	r8, r2, #4
   da332:	fb98 f9fe 	sdiv	r9, r8, lr
   da336:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   da33a:	eba8 0909 	sub.w	r9, r8, r9
   da33e:	ebb3 0909 	subs.w	r9, r3, r9
   da342:	6923      	ldr	r3, [r4, #16]
   da344:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   da348:	bf48      	it	mi
   da34a:	f109 0907 	addmi.w	r9, r9, #7
   da34e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da352:	444b      	add	r3, r9
   da354:	4553      	cmp	r3, sl
   da356:	da05      	bge.n	da364 <__tzcalc_limits+0x140>
   da358:	441a      	add	r2, r3
   da35a:	e7ac      	b.n	da2b6 <__tzcalc_limits+0x92>
   da35c:	46e0      	mov	r8, ip
   da35e:	e7d3      	b.n	da308 <__tzcalc_limits+0xe4>
   da360:	4452      	add	r2, sl
   da362:	e7dd      	b.n	da320 <__tzcalc_limits+0xfc>
   da364:	3b07      	subs	r3, #7
   da366:	e7f5      	b.n	da354 <__tzcalc_limits+0x130>
   da368:	2000      	movs	r0, #0
   da36a:	e7bd      	b.n	da2e8 <__tzcalc_limits+0xc4>
   da36c:	00015180 	.word	0x00015180
   da370:	000dc2d4 	.word	0x000dc2d4

000da374 <__tz_lock>:
   da374:	4801      	ldr	r0, [pc, #4]	; (da37c <__tz_lock+0x8>)
   da376:	f000 bddf 	b.w	daf38 <__retarget_lock_acquire>
   da37a:	bf00      	nop
   da37c:	2003e7ef 	.word	0x2003e7ef

000da380 <__tz_unlock>:
   da380:	4801      	ldr	r0, [pc, #4]	; (da388 <__tz_unlock+0x8>)
   da382:	f000 bddb 	b.w	daf3c <__retarget_lock_release>
   da386:	bf00      	nop
   da388:	2003e7ef 	.word	0x2003e7ef

000da38c <_tzset_unlocked>:
   da38c:	4b01      	ldr	r3, [pc, #4]	; (da394 <_tzset_unlocked+0x8>)
   da38e:	6818      	ldr	r0, [r3, #0]
   da390:	f000 b802 	b.w	da398 <_tzset_unlocked_r>
   da394:	2003e1bc 	.word	0x2003e1bc

000da398 <_tzset_unlocked_r>:
   da398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da39c:	b08d      	sub	sp, #52	; 0x34
   da39e:	4607      	mov	r7, r0
   da3a0:	f000 fd16 	bl	dadd0 <__gettzinfo>
   da3a4:	49ae      	ldr	r1, [pc, #696]	; (da660 <_tzset_unlocked_r+0x2c8>)
   da3a6:	4eaf      	ldr	r6, [pc, #700]	; (da664 <_tzset_unlocked_r+0x2cc>)
   da3a8:	4605      	mov	r5, r0
   da3aa:	4638      	mov	r0, r7
   da3ac:	f000 fd08 	bl	dadc0 <_getenv_r>
   da3b0:	4604      	mov	r4, r0
   da3b2:	b970      	cbnz	r0, da3d2 <_tzset_unlocked_r+0x3a>
   da3b4:	4bac      	ldr	r3, [pc, #688]	; (da668 <_tzset_unlocked_r+0x2d0>)
   da3b6:	4aad      	ldr	r2, [pc, #692]	; (da66c <_tzset_unlocked_r+0x2d4>)
   da3b8:	6018      	str	r0, [r3, #0]
   da3ba:	4bad      	ldr	r3, [pc, #692]	; (da670 <_tzset_unlocked_r+0x2d8>)
   da3bc:	6018      	str	r0, [r3, #0]
   da3be:	4bad      	ldr	r3, [pc, #692]	; (da674 <_tzset_unlocked_r+0x2dc>)
   da3c0:	6830      	ldr	r0, [r6, #0]
   da3c2:	e9c3 2200 	strd	r2, r2, [r3]
   da3c6:	f7fc f9ff 	bl	d67c8 <free>
   da3ca:	6034      	str	r4, [r6, #0]
   da3cc:	b00d      	add	sp, #52	; 0x34
   da3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3d2:	6831      	ldr	r1, [r6, #0]
   da3d4:	2900      	cmp	r1, #0
   da3d6:	d15f      	bne.n	da498 <_tzset_unlocked_r+0x100>
   da3d8:	6830      	ldr	r0, [r6, #0]
   da3da:	f7fc f9f5 	bl	d67c8 <free>
   da3de:	4620      	mov	r0, r4
   da3e0:	f7fe ff67 	bl	d92b2 <strlen>
   da3e4:	1c41      	adds	r1, r0, #1
   da3e6:	4638      	mov	r0, r7
   da3e8:	f7fc fa1e 	bl	d6828 <_malloc_r>
   da3ec:	6030      	str	r0, [r6, #0]
   da3ee:	2800      	cmp	r0, #0
   da3f0:	d157      	bne.n	da4a2 <_tzset_unlocked_r+0x10a>
   da3f2:	7823      	ldrb	r3, [r4, #0]
   da3f4:	4aa0      	ldr	r2, [pc, #640]	; (da678 <_tzset_unlocked_r+0x2e0>)
   da3f6:	49a1      	ldr	r1, [pc, #644]	; (da67c <_tzset_unlocked_r+0x2e4>)
   da3f8:	2b3a      	cmp	r3, #58	; 0x3a
   da3fa:	bf08      	it	eq
   da3fc:	3401      	addeq	r4, #1
   da3fe:	ae0a      	add	r6, sp, #40	; 0x28
   da400:	4633      	mov	r3, r6
   da402:	4620      	mov	r0, r4
   da404:	f7fc f9f8 	bl	d67f8 <siscanf>
   da408:	2800      	cmp	r0, #0
   da40a:	dddf      	ble.n	da3cc <_tzset_unlocked_r+0x34>
   da40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da40e:	18e7      	adds	r7, r4, r3
   da410:	5ce3      	ldrb	r3, [r4, r3]
   da412:	2b2d      	cmp	r3, #45	; 0x2d
   da414:	d149      	bne.n	da4aa <_tzset_unlocked_r+0x112>
   da416:	3701      	adds	r7, #1
   da418:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   da41c:	f10d 0a20 	add.w	sl, sp, #32
   da420:	f10d 0b1e 	add.w	fp, sp, #30
   da424:	f04f 0800 	mov.w	r8, #0
   da428:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   da42c:	4994      	ldr	r1, [pc, #592]	; (da680 <_tzset_unlocked_r+0x2e8>)
   da42e:	9603      	str	r6, [sp, #12]
   da430:	f8cd b000 	str.w	fp, [sp]
   da434:	4633      	mov	r3, r6
   da436:	aa07      	add	r2, sp, #28
   da438:	4638      	mov	r0, r7
   da43a:	f8ad 801e 	strh.w	r8, [sp, #30]
   da43e:	f8ad 8020 	strh.w	r8, [sp, #32]
   da442:	f7fc f9d9 	bl	d67f8 <siscanf>
   da446:	4540      	cmp	r0, r8
   da448:	ddc0      	ble.n	da3cc <_tzset_unlocked_r+0x34>
   da44a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   da44e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   da452:	f8df 9238 	ldr.w	r9, [pc, #568]	; da68c <_tzset_unlocked_r+0x2f4>
   da456:	213c      	movs	r1, #60	; 0x3c
   da458:	fb01 2203 	mla	r2, r1, r3, r2
   da45c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   da460:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da464:	fb01 2303 	mla	r3, r1, r3, r2
   da468:	435c      	muls	r4, r3
   da46a:	62ac      	str	r4, [r5, #40]	; 0x28
   da46c:	4c81      	ldr	r4, [pc, #516]	; (da674 <_tzset_unlocked_r+0x2dc>)
   da46e:	4b82      	ldr	r3, [pc, #520]	; (da678 <_tzset_unlocked_r+0x2e0>)
   da470:	6023      	str	r3, [r4, #0]
   da472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da474:	4981      	ldr	r1, [pc, #516]	; (da67c <_tzset_unlocked_r+0x2e4>)
   da476:	441f      	add	r7, r3
   da478:	464a      	mov	r2, r9
   da47a:	4633      	mov	r3, r6
   da47c:	4638      	mov	r0, r7
   da47e:	f7fc f9bb 	bl	d67f8 <siscanf>
   da482:	4540      	cmp	r0, r8
   da484:	dc16      	bgt.n	da4b4 <_tzset_unlocked_r+0x11c>
   da486:	6823      	ldr	r3, [r4, #0]
   da488:	6063      	str	r3, [r4, #4]
   da48a:	4b77      	ldr	r3, [pc, #476]	; (da668 <_tzset_unlocked_r+0x2d0>)
   da48c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   da48e:	601a      	str	r2, [r3, #0]
   da490:	4b77      	ldr	r3, [pc, #476]	; (da670 <_tzset_unlocked_r+0x2d8>)
   da492:	f8c3 8000 	str.w	r8, [r3]
   da496:	e799      	b.n	da3cc <_tzset_unlocked_r+0x34>
   da498:	f7fe fedc 	bl	d9254 <strcmp>
   da49c:	2800      	cmp	r0, #0
   da49e:	d19b      	bne.n	da3d8 <_tzset_unlocked_r+0x40>
   da4a0:	e794      	b.n	da3cc <_tzset_unlocked_r+0x34>
   da4a2:	4621      	mov	r1, r4
   da4a4:	f7fe fee0 	bl	d9268 <strcpy>
   da4a8:	e7a3      	b.n	da3f2 <_tzset_unlocked_r+0x5a>
   da4aa:	2b2b      	cmp	r3, #43	; 0x2b
   da4ac:	bf08      	it	eq
   da4ae:	3701      	addeq	r7, #1
   da4b0:	2401      	movs	r4, #1
   da4b2:	e7b3      	b.n	da41c <_tzset_unlocked_r+0x84>
   da4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da4b6:	f8c4 9004 	str.w	r9, [r4, #4]
   da4ba:	18fc      	adds	r4, r7, r3
   da4bc:	5cfb      	ldrb	r3, [r7, r3]
   da4be:	2b2d      	cmp	r3, #45	; 0x2d
   da4c0:	f040 808b 	bne.w	da5da <_tzset_unlocked_r+0x242>
   da4c4:	3401      	adds	r4, #1
   da4c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da4ca:	2300      	movs	r3, #0
   da4cc:	f8ad 301c 	strh.w	r3, [sp, #28]
   da4d0:	f8ad 301e 	strh.w	r3, [sp, #30]
   da4d4:	f8ad 3020 	strh.w	r3, [sp, #32]
   da4d8:	930a      	str	r3, [sp, #40]	; 0x28
   da4da:	e9cd a602 	strd	sl, r6, [sp, #8]
   da4de:	e9cd b600 	strd	fp, r6, [sp]
   da4e2:	4967      	ldr	r1, [pc, #412]	; (da680 <_tzset_unlocked_r+0x2e8>)
   da4e4:	4633      	mov	r3, r6
   da4e6:	aa07      	add	r2, sp, #28
   da4e8:	4620      	mov	r0, r4
   da4ea:	f7fc f985 	bl	d67f8 <siscanf>
   da4ee:	2800      	cmp	r0, #0
   da4f0:	dc78      	bgt.n	da5e4 <_tzset_unlocked_r+0x24c>
   da4f2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   da4f4:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   da4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da4fa:	652f      	str	r7, [r5, #80]	; 0x50
   da4fc:	441c      	add	r4, r3
   da4fe:	462f      	mov	r7, r5
   da500:	f04f 0900 	mov.w	r9, #0
   da504:	7823      	ldrb	r3, [r4, #0]
   da506:	2b2c      	cmp	r3, #44	; 0x2c
   da508:	bf08      	it	eq
   da50a:	3401      	addeq	r4, #1
   da50c:	f894 8000 	ldrb.w	r8, [r4]
   da510:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da514:	d178      	bne.n	da608 <_tzset_unlocked_r+0x270>
   da516:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da51a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   da51e:	ab09      	add	r3, sp, #36	; 0x24
   da520:	9300      	str	r3, [sp, #0]
   da522:	4958      	ldr	r1, [pc, #352]	; (da684 <_tzset_unlocked_r+0x2ec>)
   da524:	9603      	str	r6, [sp, #12]
   da526:	4633      	mov	r3, r6
   da528:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da52c:	4620      	mov	r0, r4
   da52e:	f7fc f963 	bl	d67f8 <siscanf>
   da532:	2803      	cmp	r0, #3
   da534:	f47f af4a 	bne.w	da3cc <_tzset_unlocked_r+0x34>
   da538:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da53c:	1e4b      	subs	r3, r1, #1
   da53e:	2b0b      	cmp	r3, #11
   da540:	f63f af44 	bhi.w	da3cc <_tzset_unlocked_r+0x34>
   da544:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da548:	1e53      	subs	r3, r2, #1
   da54a:	2b04      	cmp	r3, #4
   da54c:	f63f af3e 	bhi.w	da3cc <_tzset_unlocked_r+0x34>
   da550:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da554:	2b06      	cmp	r3, #6
   da556:	f63f af39 	bhi.w	da3cc <_tzset_unlocked_r+0x34>
   da55a:	e9c7 1203 	strd	r1, r2, [r7, #12]
   da55e:	f887 8008 	strb.w	r8, [r7, #8]
   da562:	617b      	str	r3, [r7, #20]
   da564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da566:	eb04 0803 	add.w	r8, r4, r3
   da56a:	2302      	movs	r3, #2
   da56c:	f8ad 301c 	strh.w	r3, [sp, #28]
   da570:	2300      	movs	r3, #0
   da572:	f8ad 301e 	strh.w	r3, [sp, #30]
   da576:	f8ad 3020 	strh.w	r3, [sp, #32]
   da57a:	930a      	str	r3, [sp, #40]	; 0x28
   da57c:	f898 3000 	ldrb.w	r3, [r8]
   da580:	2b2f      	cmp	r3, #47	; 0x2f
   da582:	d109      	bne.n	da598 <_tzset_unlocked_r+0x200>
   da584:	e9cd a602 	strd	sl, r6, [sp, #8]
   da588:	e9cd b600 	strd	fp, r6, [sp]
   da58c:	493e      	ldr	r1, [pc, #248]	; (da688 <_tzset_unlocked_r+0x2f0>)
   da58e:	4633      	mov	r3, r6
   da590:	aa07      	add	r2, sp, #28
   da592:	4640      	mov	r0, r8
   da594:	f7fc f930 	bl	d67f8 <siscanf>
   da598:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   da59c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   da5a0:	213c      	movs	r1, #60	; 0x3c
   da5a2:	fb01 2203 	mla	r2, r1, r3, r2
   da5a6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   da5aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da5ae:	fb01 2303 	mla	r3, r1, r3, r2
   da5b2:	61bb      	str	r3, [r7, #24]
   da5b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   da5b6:	3728      	adds	r7, #40	; 0x28
   da5b8:	4444      	add	r4, r8
   da5ba:	f1b9 0f00 	cmp.w	r9, #0
   da5be:	d020      	beq.n	da602 <_tzset_unlocked_r+0x26a>
   da5c0:	6868      	ldr	r0, [r5, #4]
   da5c2:	f7ff fe2f 	bl	da224 <__tzcalc_limits>
   da5c6:	4b28      	ldr	r3, [pc, #160]	; (da668 <_tzset_unlocked_r+0x2d0>)
   da5c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   da5ca:	601a      	str	r2, [r3, #0]
   da5cc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   da5ce:	1a9b      	subs	r3, r3, r2
   da5d0:	4a27      	ldr	r2, [pc, #156]	; (da670 <_tzset_unlocked_r+0x2d8>)
   da5d2:	bf18      	it	ne
   da5d4:	2301      	movne	r3, #1
   da5d6:	6013      	str	r3, [r2, #0]
   da5d8:	e6f8      	b.n	da3cc <_tzset_unlocked_r+0x34>
   da5da:	2b2b      	cmp	r3, #43	; 0x2b
   da5dc:	bf08      	it	eq
   da5de:	3401      	addeq	r4, #1
   da5e0:	2701      	movs	r7, #1
   da5e2:	e772      	b.n	da4ca <_tzset_unlocked_r+0x132>
   da5e4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   da5e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   da5ec:	213c      	movs	r1, #60	; 0x3c
   da5ee:	fb01 2203 	mla	r2, r1, r3, r2
   da5f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   da5f6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da5fa:	fb01 2303 	mla	r3, r1, r3, r2
   da5fe:	435f      	muls	r7, r3
   da600:	e77a      	b.n	da4f8 <_tzset_unlocked_r+0x160>
   da602:	f04f 0901 	mov.w	r9, #1
   da606:	e77d      	b.n	da504 <_tzset_unlocked_r+0x16c>
   da608:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da60c:	bf06      	itte	eq
   da60e:	3401      	addeq	r4, #1
   da610:	4643      	moveq	r3, r8
   da612:	2344      	movne	r3, #68	; 0x44
   da614:	220a      	movs	r2, #10
   da616:	a90b      	add	r1, sp, #44	; 0x2c
   da618:	4620      	mov	r0, r4
   da61a:	9305      	str	r3, [sp, #20]
   da61c:	f7ff fdf8 	bl	da210 <strtoul>
   da620:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da624:	9b05      	ldr	r3, [sp, #20]
   da626:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da62a:	45a0      	cmp	r8, r4
   da62c:	d114      	bne.n	da658 <_tzset_unlocked_r+0x2c0>
   da62e:	234d      	movs	r3, #77	; 0x4d
   da630:	f1b9 0f00 	cmp.w	r9, #0
   da634:	d107      	bne.n	da646 <_tzset_unlocked_r+0x2ae>
   da636:	722b      	strb	r3, [r5, #8]
   da638:	2103      	movs	r1, #3
   da63a:	2302      	movs	r3, #2
   da63c:	e9c5 1303 	strd	r1, r3, [r5, #12]
   da640:	f8c5 9014 	str.w	r9, [r5, #20]
   da644:	e791      	b.n	da56a <_tzset_unlocked_r+0x1d2>
   da646:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   da64a:	220b      	movs	r2, #11
   da64c:	2301      	movs	r3, #1
   da64e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   da652:	2300      	movs	r3, #0
   da654:	63eb      	str	r3, [r5, #60]	; 0x3c
   da656:	e788      	b.n	da56a <_tzset_unlocked_r+0x1d2>
   da658:	b280      	uxth	r0, r0
   da65a:	723b      	strb	r3, [r7, #8]
   da65c:	6178      	str	r0, [r7, #20]
   da65e:	e784      	b.n	da56a <_tzset_unlocked_r+0x1d2>
   da660:	000dc390 	.word	0x000dc390
   da664:	2003e7d8 	.word	0x2003e7d8
   da668:	2003e7e0 	.word	0x2003e7e0
   da66c:	000dc393 	.word	0x000dc393
   da670:	2003e7dc 	.word	0x2003e7dc
   da674:	2003e220 	.word	0x2003e220
   da678:	2003e7cb 	.word	0x2003e7cb
   da67c:	000dc397 	.word	0x000dc397
   da680:	000dc3ba 	.word	0x000dc3ba
   da684:	000dc3a6 	.word	0x000dc3a6
   da688:	000dc3b9 	.word	0x000dc3b9
   da68c:	2003e7c0 	.word	0x2003e7c0

000da690 <rshift>:
   da690:	6903      	ldr	r3, [r0, #16]
   da692:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da69a:	ea4f 1261 	mov.w	r2, r1, asr #5
   da69e:	f100 0414 	add.w	r4, r0, #20
   da6a2:	dd45      	ble.n	da730 <rshift+0xa0>
   da6a4:	f011 011f 	ands.w	r1, r1, #31
   da6a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da6ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da6b0:	d10c      	bne.n	da6cc <rshift+0x3c>
   da6b2:	f100 0710 	add.w	r7, r0, #16
   da6b6:	4629      	mov	r1, r5
   da6b8:	42b1      	cmp	r1, r6
   da6ba:	d334      	bcc.n	da726 <rshift+0x96>
   da6bc:	1a9b      	subs	r3, r3, r2
   da6be:	009b      	lsls	r3, r3, #2
   da6c0:	1eea      	subs	r2, r5, #3
   da6c2:	4296      	cmp	r6, r2
   da6c4:	bf38      	it	cc
   da6c6:	2300      	movcc	r3, #0
   da6c8:	4423      	add	r3, r4
   da6ca:	e015      	b.n	da6f8 <rshift+0x68>
   da6cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da6d0:	f1c1 0820 	rsb	r8, r1, #32
   da6d4:	40cf      	lsrs	r7, r1
   da6d6:	f105 0e04 	add.w	lr, r5, #4
   da6da:	46a1      	mov	r9, r4
   da6dc:	4576      	cmp	r6, lr
   da6de:	46f4      	mov	ip, lr
   da6e0:	d815      	bhi.n	da70e <rshift+0x7e>
   da6e2:	1a9b      	subs	r3, r3, r2
   da6e4:	009a      	lsls	r2, r3, #2
   da6e6:	3a04      	subs	r2, #4
   da6e8:	3501      	adds	r5, #1
   da6ea:	42ae      	cmp	r6, r5
   da6ec:	bf38      	it	cc
   da6ee:	2200      	movcc	r2, #0
   da6f0:	18a3      	adds	r3, r4, r2
   da6f2:	50a7      	str	r7, [r4, r2]
   da6f4:	b107      	cbz	r7, da6f8 <rshift+0x68>
   da6f6:	3304      	adds	r3, #4
   da6f8:	1b1a      	subs	r2, r3, r4
   da6fa:	42a3      	cmp	r3, r4
   da6fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da700:	bf08      	it	eq
   da702:	2300      	moveq	r3, #0
   da704:	6102      	str	r2, [r0, #16]
   da706:	bf08      	it	eq
   da708:	6143      	streq	r3, [r0, #20]
   da70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da70e:	f8dc c000 	ldr.w	ip, [ip]
   da712:	fa0c fc08 	lsl.w	ip, ip, r8
   da716:	ea4c 0707 	orr.w	r7, ip, r7
   da71a:	f849 7b04 	str.w	r7, [r9], #4
   da71e:	f85e 7b04 	ldr.w	r7, [lr], #4
   da722:	40cf      	lsrs	r7, r1
   da724:	e7da      	b.n	da6dc <rshift+0x4c>
   da726:	f851 cb04 	ldr.w	ip, [r1], #4
   da72a:	f847 cf04 	str.w	ip, [r7, #4]!
   da72e:	e7c3      	b.n	da6b8 <rshift+0x28>
   da730:	4623      	mov	r3, r4
   da732:	e7e1      	b.n	da6f8 <rshift+0x68>

000da734 <__hexdig_fun>:
   da734:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da738:	2b09      	cmp	r3, #9
   da73a:	d802      	bhi.n	da742 <__hexdig_fun+0xe>
   da73c:	3820      	subs	r0, #32
   da73e:	b2c0      	uxtb	r0, r0
   da740:	4770      	bx	lr
   da742:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da746:	2b05      	cmp	r3, #5
   da748:	d801      	bhi.n	da74e <__hexdig_fun+0x1a>
   da74a:	3847      	subs	r0, #71	; 0x47
   da74c:	e7f7      	b.n	da73e <__hexdig_fun+0xa>
   da74e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da752:	2b05      	cmp	r3, #5
   da754:	d801      	bhi.n	da75a <__hexdig_fun+0x26>
   da756:	3827      	subs	r0, #39	; 0x27
   da758:	e7f1      	b.n	da73e <__hexdig_fun+0xa>
   da75a:	2000      	movs	r0, #0
   da75c:	4770      	bx	lr
	...

000da760 <__gethex>:
   da760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da764:	ed2d 8b02 	vpush	{d8}
   da768:	b089      	sub	sp, #36	; 0x24
   da76a:	ee08 0a10 	vmov	s16, r0
   da76e:	9304      	str	r3, [sp, #16]
   da770:	4bbc      	ldr	r3, [pc, #752]	; (daa64 <__gethex+0x304>)
   da772:	681b      	ldr	r3, [r3, #0]
   da774:	9301      	str	r3, [sp, #4]
   da776:	4618      	mov	r0, r3
   da778:	468b      	mov	fp, r1
   da77a:	4690      	mov	r8, r2
   da77c:	f7fe fd99 	bl	d92b2 <strlen>
   da780:	9b01      	ldr	r3, [sp, #4]
   da782:	f8db 2000 	ldr.w	r2, [fp]
   da786:	4403      	add	r3, r0
   da788:	4682      	mov	sl, r0
   da78a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da78e:	9305      	str	r3, [sp, #20]
   da790:	1c93      	adds	r3, r2, #2
   da792:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da796:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da79a:	32fe      	adds	r2, #254	; 0xfe
   da79c:	18d1      	adds	r1, r2, r3
   da79e:	461f      	mov	r7, r3
   da7a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   da7a4:	9100      	str	r1, [sp, #0]
   da7a6:	2830      	cmp	r0, #48	; 0x30
   da7a8:	d0f8      	beq.n	da79c <__gethex+0x3c>
   da7aa:	f7ff ffc3 	bl	da734 <__hexdig_fun>
   da7ae:	4604      	mov	r4, r0
   da7b0:	2800      	cmp	r0, #0
   da7b2:	d13a      	bne.n	da82a <__gethex+0xca>
   da7b4:	9901      	ldr	r1, [sp, #4]
   da7b6:	4652      	mov	r2, sl
   da7b8:	4638      	mov	r0, r7
   da7ba:	f7fe fd82 	bl	d92c2 <strncmp>
   da7be:	4605      	mov	r5, r0
   da7c0:	2800      	cmp	r0, #0
   da7c2:	d168      	bne.n	da896 <__gethex+0x136>
   da7c4:	f817 000a 	ldrb.w	r0, [r7, sl]
   da7c8:	eb07 060a 	add.w	r6, r7, sl
   da7cc:	f7ff ffb2 	bl	da734 <__hexdig_fun>
   da7d0:	2800      	cmp	r0, #0
   da7d2:	d062      	beq.n	da89a <__gethex+0x13a>
   da7d4:	4633      	mov	r3, r6
   da7d6:	7818      	ldrb	r0, [r3, #0]
   da7d8:	2830      	cmp	r0, #48	; 0x30
   da7da:	461f      	mov	r7, r3
   da7dc:	f103 0301 	add.w	r3, r3, #1
   da7e0:	d0f9      	beq.n	da7d6 <__gethex+0x76>
   da7e2:	f7ff ffa7 	bl	da734 <__hexdig_fun>
   da7e6:	2301      	movs	r3, #1
   da7e8:	fab0 f480 	clz	r4, r0
   da7ec:	0964      	lsrs	r4, r4, #5
   da7ee:	4635      	mov	r5, r6
   da7f0:	9300      	str	r3, [sp, #0]
   da7f2:	463a      	mov	r2, r7
   da7f4:	4616      	mov	r6, r2
   da7f6:	3201      	adds	r2, #1
   da7f8:	7830      	ldrb	r0, [r6, #0]
   da7fa:	f7ff ff9b 	bl	da734 <__hexdig_fun>
   da7fe:	2800      	cmp	r0, #0
   da800:	d1f8      	bne.n	da7f4 <__gethex+0x94>
   da802:	9901      	ldr	r1, [sp, #4]
   da804:	4652      	mov	r2, sl
   da806:	4630      	mov	r0, r6
   da808:	f7fe fd5b 	bl	d92c2 <strncmp>
   da80c:	b980      	cbnz	r0, da830 <__gethex+0xd0>
   da80e:	b94d      	cbnz	r5, da824 <__gethex+0xc4>
   da810:	eb06 050a 	add.w	r5, r6, sl
   da814:	462a      	mov	r2, r5
   da816:	4616      	mov	r6, r2
   da818:	3201      	adds	r2, #1
   da81a:	7830      	ldrb	r0, [r6, #0]
   da81c:	f7ff ff8a 	bl	da734 <__hexdig_fun>
   da820:	2800      	cmp	r0, #0
   da822:	d1f8      	bne.n	da816 <__gethex+0xb6>
   da824:	1bad      	subs	r5, r5, r6
   da826:	00ad      	lsls	r5, r5, #2
   da828:	e004      	b.n	da834 <__gethex+0xd4>
   da82a:	2400      	movs	r4, #0
   da82c:	4625      	mov	r5, r4
   da82e:	e7e0      	b.n	da7f2 <__gethex+0x92>
   da830:	2d00      	cmp	r5, #0
   da832:	d1f7      	bne.n	da824 <__gethex+0xc4>
   da834:	7833      	ldrb	r3, [r6, #0]
   da836:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da83a:	2b50      	cmp	r3, #80	; 0x50
   da83c:	d13b      	bne.n	da8b6 <__gethex+0x156>
   da83e:	7873      	ldrb	r3, [r6, #1]
   da840:	2b2b      	cmp	r3, #43	; 0x2b
   da842:	d02c      	beq.n	da89e <__gethex+0x13e>
   da844:	2b2d      	cmp	r3, #45	; 0x2d
   da846:	d02e      	beq.n	da8a6 <__gethex+0x146>
   da848:	1c71      	adds	r1, r6, #1
   da84a:	f04f 0900 	mov.w	r9, #0
   da84e:	7808      	ldrb	r0, [r1, #0]
   da850:	f7ff ff70 	bl	da734 <__hexdig_fun>
   da854:	1e43      	subs	r3, r0, #1
   da856:	b2db      	uxtb	r3, r3
   da858:	2b18      	cmp	r3, #24
   da85a:	d82c      	bhi.n	da8b6 <__gethex+0x156>
   da85c:	f1a0 0210 	sub.w	r2, r0, #16
   da860:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da864:	f7ff ff66 	bl	da734 <__hexdig_fun>
   da868:	1e43      	subs	r3, r0, #1
   da86a:	b2db      	uxtb	r3, r3
   da86c:	2b18      	cmp	r3, #24
   da86e:	d91d      	bls.n	da8ac <__gethex+0x14c>
   da870:	f1b9 0f00 	cmp.w	r9, #0
   da874:	d000      	beq.n	da878 <__gethex+0x118>
   da876:	4252      	negs	r2, r2
   da878:	4415      	add	r5, r2
   da87a:	f8cb 1000 	str.w	r1, [fp]
   da87e:	b1e4      	cbz	r4, da8ba <__gethex+0x15a>
   da880:	9b00      	ldr	r3, [sp, #0]
   da882:	2b00      	cmp	r3, #0
   da884:	bf14      	ite	ne
   da886:	2700      	movne	r7, #0
   da888:	2706      	moveq	r7, #6
   da88a:	4638      	mov	r0, r7
   da88c:	b009      	add	sp, #36	; 0x24
   da88e:	ecbd 8b02 	vpop	{d8}
   da892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da896:	463e      	mov	r6, r7
   da898:	4625      	mov	r5, r4
   da89a:	2401      	movs	r4, #1
   da89c:	e7ca      	b.n	da834 <__gethex+0xd4>
   da89e:	f04f 0900 	mov.w	r9, #0
   da8a2:	1cb1      	adds	r1, r6, #2
   da8a4:	e7d3      	b.n	da84e <__gethex+0xee>
   da8a6:	f04f 0901 	mov.w	r9, #1
   da8aa:	e7fa      	b.n	da8a2 <__gethex+0x142>
   da8ac:	230a      	movs	r3, #10
   da8ae:	fb03 0202 	mla	r2, r3, r2, r0
   da8b2:	3a10      	subs	r2, #16
   da8b4:	e7d4      	b.n	da860 <__gethex+0x100>
   da8b6:	4631      	mov	r1, r6
   da8b8:	e7df      	b.n	da87a <__gethex+0x11a>
   da8ba:	1bf3      	subs	r3, r6, r7
   da8bc:	3b01      	subs	r3, #1
   da8be:	4621      	mov	r1, r4
   da8c0:	2b07      	cmp	r3, #7
   da8c2:	dc52      	bgt.n	da96a <__gethex+0x20a>
   da8c4:	ee18 0a10 	vmov	r0, s16
   da8c8:	f000 fb4c 	bl	daf64 <_Balloc>
   da8cc:	f04f 0b00 	mov.w	fp, #0
   da8d0:	f100 0914 	add.w	r9, r0, #20
   da8d4:	f1ca 0301 	rsb	r3, sl, #1
   da8d8:	4604      	mov	r4, r0
   da8da:	f8cd 9008 	str.w	r9, [sp, #8]
   da8de:	f8cd b000 	str.w	fp, [sp]
   da8e2:	9306      	str	r3, [sp, #24]
   da8e4:	42b7      	cmp	r7, r6
   da8e6:	d343      	bcc.n	da970 <__gethex+0x210>
   da8e8:	9802      	ldr	r0, [sp, #8]
   da8ea:	9b00      	ldr	r3, [sp, #0]
   da8ec:	f840 3b04 	str.w	r3, [r0], #4
   da8f0:	eba0 0009 	sub.w	r0, r0, r9
   da8f4:	1080      	asrs	r0, r0, #2
   da8f6:	0146      	lsls	r6, r0, #5
   da8f8:	6120      	str	r0, [r4, #16]
   da8fa:	4618      	mov	r0, r3
   da8fc:	f000 fbf9 	bl	db0f2 <__hi0bits>
   da900:	1a30      	subs	r0, r6, r0
   da902:	f8d8 6000 	ldr.w	r6, [r8]
   da906:	42b0      	cmp	r0, r6
   da908:	dd66      	ble.n	da9d8 <__gethex+0x278>
   da90a:	1b87      	subs	r7, r0, r6
   da90c:	4639      	mov	r1, r7
   da90e:	4620      	mov	r0, r4
   da910:	f000 ff46 	bl	db7a0 <__any_on>
   da914:	4682      	mov	sl, r0
   da916:	b1a8      	cbz	r0, da944 <__gethex+0x1e4>
   da918:	1e7b      	subs	r3, r7, #1
   da91a:	1159      	asrs	r1, r3, #5
   da91c:	f003 021f 	and.w	r2, r3, #31
   da920:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da924:	f04f 0a01 	mov.w	sl, #1
   da928:	fa0a f202 	lsl.w	r2, sl, r2
   da92c:	420a      	tst	r2, r1
   da92e:	d009      	beq.n	da944 <__gethex+0x1e4>
   da930:	4553      	cmp	r3, sl
   da932:	dd05      	ble.n	da940 <__gethex+0x1e0>
   da934:	1eb9      	subs	r1, r7, #2
   da936:	4620      	mov	r0, r4
   da938:	f000 ff32 	bl	db7a0 <__any_on>
   da93c:	2800      	cmp	r0, #0
   da93e:	d148      	bne.n	da9d2 <__gethex+0x272>
   da940:	f04f 0a02 	mov.w	sl, #2
   da944:	4639      	mov	r1, r7
   da946:	4620      	mov	r0, r4
   da948:	f7ff fea2 	bl	da690 <rshift>
   da94c:	443d      	add	r5, r7
   da94e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da952:	42ab      	cmp	r3, r5
   da954:	da4f      	bge.n	da9f6 <__gethex+0x296>
   da956:	ee18 0a10 	vmov	r0, s16
   da95a:	4621      	mov	r1, r4
   da95c:	f000 fb36 	bl	dafcc <_Bfree>
   da960:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da962:	2300      	movs	r3, #0
   da964:	6013      	str	r3, [r2, #0]
   da966:	27a3      	movs	r7, #163	; 0xa3
   da968:	e78f      	b.n	da88a <__gethex+0x12a>
   da96a:	3101      	adds	r1, #1
   da96c:	105b      	asrs	r3, r3, #1
   da96e:	e7a7      	b.n	da8c0 <__gethex+0x160>
   da970:	1e73      	subs	r3, r6, #1
   da972:	9a05      	ldr	r2, [sp, #20]
   da974:	9303      	str	r3, [sp, #12]
   da976:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da97a:	4293      	cmp	r3, r2
   da97c:	d019      	beq.n	da9b2 <__gethex+0x252>
   da97e:	f1bb 0f20 	cmp.w	fp, #32
   da982:	d107      	bne.n	da994 <__gethex+0x234>
   da984:	9b02      	ldr	r3, [sp, #8]
   da986:	9a00      	ldr	r2, [sp, #0]
   da988:	f843 2b04 	str.w	r2, [r3], #4
   da98c:	9302      	str	r3, [sp, #8]
   da98e:	2300      	movs	r3, #0
   da990:	9300      	str	r3, [sp, #0]
   da992:	469b      	mov	fp, r3
   da994:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da998:	f7ff fecc 	bl	da734 <__hexdig_fun>
   da99c:	9b00      	ldr	r3, [sp, #0]
   da99e:	f000 000f 	and.w	r0, r0, #15
   da9a2:	fa00 f00b 	lsl.w	r0, r0, fp
   da9a6:	4303      	orrs	r3, r0
   da9a8:	9300      	str	r3, [sp, #0]
   da9aa:	f10b 0b04 	add.w	fp, fp, #4
   da9ae:	9b03      	ldr	r3, [sp, #12]
   da9b0:	e00d      	b.n	da9ce <__gethex+0x26e>
   da9b2:	9b03      	ldr	r3, [sp, #12]
   da9b4:	9a06      	ldr	r2, [sp, #24]
   da9b6:	4413      	add	r3, r2
   da9b8:	42bb      	cmp	r3, r7
   da9ba:	d3e0      	bcc.n	da97e <__gethex+0x21e>
   da9bc:	4618      	mov	r0, r3
   da9be:	9901      	ldr	r1, [sp, #4]
   da9c0:	9307      	str	r3, [sp, #28]
   da9c2:	4652      	mov	r2, sl
   da9c4:	f7fe fc7d 	bl	d92c2 <strncmp>
   da9c8:	9b07      	ldr	r3, [sp, #28]
   da9ca:	2800      	cmp	r0, #0
   da9cc:	d1d7      	bne.n	da97e <__gethex+0x21e>
   da9ce:	461e      	mov	r6, r3
   da9d0:	e788      	b.n	da8e4 <__gethex+0x184>
   da9d2:	f04f 0a03 	mov.w	sl, #3
   da9d6:	e7b5      	b.n	da944 <__gethex+0x1e4>
   da9d8:	da0a      	bge.n	da9f0 <__gethex+0x290>
   da9da:	1a37      	subs	r7, r6, r0
   da9dc:	4621      	mov	r1, r4
   da9de:	ee18 0a10 	vmov	r0, s16
   da9e2:	463a      	mov	r2, r7
   da9e4:	f000 fcc8 	bl	db378 <__lshift>
   da9e8:	1bed      	subs	r5, r5, r7
   da9ea:	4604      	mov	r4, r0
   da9ec:	f100 0914 	add.w	r9, r0, #20
   da9f0:	f04f 0a00 	mov.w	sl, #0
   da9f4:	e7ab      	b.n	da94e <__gethex+0x1ee>
   da9f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da9fa:	42a8      	cmp	r0, r5
   da9fc:	dd6d      	ble.n	daada <__gethex+0x37a>
   da9fe:	1b45      	subs	r5, r0, r5
   daa00:	42ae      	cmp	r6, r5
   daa02:	dc31      	bgt.n	daa68 <__gethex+0x308>
   daa04:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daa08:	2b02      	cmp	r3, #2
   daa0a:	d023      	beq.n	daa54 <__gethex+0x2f4>
   daa0c:	2b03      	cmp	r3, #3
   daa0e:	d025      	beq.n	daa5c <__gethex+0x2fc>
   daa10:	2b01      	cmp	r3, #1
   daa12:	d115      	bne.n	daa40 <__gethex+0x2e0>
   daa14:	42ae      	cmp	r6, r5
   daa16:	d113      	bne.n	daa40 <__gethex+0x2e0>
   daa18:	2e01      	cmp	r6, #1
   daa1a:	d10b      	bne.n	daa34 <__gethex+0x2d4>
   daa1c:	9a04      	ldr	r2, [sp, #16]
   daa1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daa22:	6013      	str	r3, [r2, #0]
   daa24:	2301      	movs	r3, #1
   daa26:	6123      	str	r3, [r4, #16]
   daa28:	f8c9 3000 	str.w	r3, [r9]
   daa2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daa2e:	2762      	movs	r7, #98	; 0x62
   daa30:	601c      	str	r4, [r3, #0]
   daa32:	e72a      	b.n	da88a <__gethex+0x12a>
   daa34:	1e71      	subs	r1, r6, #1
   daa36:	4620      	mov	r0, r4
   daa38:	f000 feb2 	bl	db7a0 <__any_on>
   daa3c:	2800      	cmp	r0, #0
   daa3e:	d1ed      	bne.n	daa1c <__gethex+0x2bc>
   daa40:	ee18 0a10 	vmov	r0, s16
   daa44:	4621      	mov	r1, r4
   daa46:	f000 fac1 	bl	dafcc <_Bfree>
   daa4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daa4c:	2300      	movs	r3, #0
   daa4e:	6013      	str	r3, [r2, #0]
   daa50:	2750      	movs	r7, #80	; 0x50
   daa52:	e71a      	b.n	da88a <__gethex+0x12a>
   daa54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daa56:	2b00      	cmp	r3, #0
   daa58:	d1f2      	bne.n	daa40 <__gethex+0x2e0>
   daa5a:	e7df      	b.n	daa1c <__gethex+0x2bc>
   daa5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daa5e:	2b00      	cmp	r3, #0
   daa60:	d1dc      	bne.n	daa1c <__gethex+0x2bc>
   daa62:	e7ed      	b.n	daa40 <__gethex+0x2e0>
   daa64:	000dc4d0 	.word	0x000dc4d0
   daa68:	1e6f      	subs	r7, r5, #1
   daa6a:	f1ba 0f00 	cmp.w	sl, #0
   daa6e:	d131      	bne.n	daad4 <__gethex+0x374>
   daa70:	b127      	cbz	r7, daa7c <__gethex+0x31c>
   daa72:	4639      	mov	r1, r7
   daa74:	4620      	mov	r0, r4
   daa76:	f000 fe93 	bl	db7a0 <__any_on>
   daa7a:	4682      	mov	sl, r0
   daa7c:	117b      	asrs	r3, r7, #5
   daa7e:	2101      	movs	r1, #1
   daa80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   daa84:	f007 071f 	and.w	r7, r7, #31
   daa88:	fa01 f707 	lsl.w	r7, r1, r7
   daa8c:	421f      	tst	r7, r3
   daa8e:	4629      	mov	r1, r5
   daa90:	4620      	mov	r0, r4
   daa92:	bf18      	it	ne
   daa94:	f04a 0a02 	orrne.w	sl, sl, #2
   daa98:	1b76      	subs	r6, r6, r5
   daa9a:	f7ff fdf9 	bl	da690 <rshift>
   daa9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   daaa2:	2702      	movs	r7, #2
   daaa4:	f1ba 0f00 	cmp.w	sl, #0
   daaa8:	d048      	beq.n	dab3c <__gethex+0x3dc>
   daaaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daaae:	2b02      	cmp	r3, #2
   daab0:	d015      	beq.n	daade <__gethex+0x37e>
   daab2:	2b03      	cmp	r3, #3
   daab4:	d017      	beq.n	daae6 <__gethex+0x386>
   daab6:	2b01      	cmp	r3, #1
   daab8:	d109      	bne.n	daace <__gethex+0x36e>
   daaba:	f01a 0f02 	tst.w	sl, #2
   daabe:	d006      	beq.n	daace <__gethex+0x36e>
   daac0:	f8d9 0000 	ldr.w	r0, [r9]
   daac4:	ea4a 0a00 	orr.w	sl, sl, r0
   daac8:	f01a 0f01 	tst.w	sl, #1
   daacc:	d10e      	bne.n	daaec <__gethex+0x38c>
   daace:	f047 0710 	orr.w	r7, r7, #16
   daad2:	e033      	b.n	dab3c <__gethex+0x3dc>
   daad4:	f04f 0a01 	mov.w	sl, #1
   daad8:	e7d0      	b.n	daa7c <__gethex+0x31c>
   daada:	2701      	movs	r7, #1
   daadc:	e7e2      	b.n	daaa4 <__gethex+0x344>
   daade:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daae0:	f1c3 0301 	rsb	r3, r3, #1
   daae4:	9315      	str	r3, [sp, #84]	; 0x54
   daae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daae8:	2b00      	cmp	r3, #0
   daaea:	d0f0      	beq.n	daace <__gethex+0x36e>
   daaec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   daaf0:	f104 0314 	add.w	r3, r4, #20
   daaf4:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   daaf8:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   daafc:	f04f 0c00 	mov.w	ip, #0
   dab00:	4618      	mov	r0, r3
   dab02:	f853 2b04 	ldr.w	r2, [r3], #4
   dab06:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dab0a:	d01c      	beq.n	dab46 <__gethex+0x3e6>
   dab0c:	3201      	adds	r2, #1
   dab0e:	6002      	str	r2, [r0, #0]
   dab10:	2f02      	cmp	r7, #2
   dab12:	f104 0314 	add.w	r3, r4, #20
   dab16:	d13a      	bne.n	dab8e <__gethex+0x42e>
   dab18:	f8d8 2000 	ldr.w	r2, [r8]
   dab1c:	3a01      	subs	r2, #1
   dab1e:	42b2      	cmp	r2, r6
   dab20:	d10a      	bne.n	dab38 <__gethex+0x3d8>
   dab22:	1171      	asrs	r1, r6, #5
   dab24:	2201      	movs	r2, #1
   dab26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dab2a:	f006 061f 	and.w	r6, r6, #31
   dab2e:	fa02 f606 	lsl.w	r6, r2, r6
   dab32:	421e      	tst	r6, r3
   dab34:	bf18      	it	ne
   dab36:	4617      	movne	r7, r2
   dab38:	f047 0720 	orr.w	r7, r7, #32
   dab3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dab3e:	601c      	str	r4, [r3, #0]
   dab40:	9b04      	ldr	r3, [sp, #16]
   dab42:	601d      	str	r5, [r3, #0]
   dab44:	e6a1      	b.n	da88a <__gethex+0x12a>
   dab46:	4299      	cmp	r1, r3
   dab48:	f843 cc04 	str.w	ip, [r3, #-4]
   dab4c:	d8d8      	bhi.n	dab00 <__gethex+0x3a0>
   dab4e:	68a3      	ldr	r3, [r4, #8]
   dab50:	4599      	cmp	r9, r3
   dab52:	db14      	blt.n	dab7e <__gethex+0x41e>
   dab54:	6861      	ldr	r1, [r4, #4]
   dab56:	ee18 0a10 	vmov	r0, s16
   dab5a:	3101      	adds	r1, #1
   dab5c:	f000 fa02 	bl	daf64 <_Balloc>
   dab60:	6922      	ldr	r2, [r4, #16]
   dab62:	3202      	adds	r2, #2
   dab64:	f104 010c 	add.w	r1, r4, #12
   dab68:	4682      	mov	sl, r0
   dab6a:	0092      	lsls	r2, r2, #2
   dab6c:	300c      	adds	r0, #12
   dab6e:	f7fe fb37 	bl	d91e0 <memcpy>
   dab72:	4621      	mov	r1, r4
   dab74:	ee18 0a10 	vmov	r0, s16
   dab78:	f000 fa28 	bl	dafcc <_Bfree>
   dab7c:	4654      	mov	r4, sl
   dab7e:	6923      	ldr	r3, [r4, #16]
   dab80:	1c5a      	adds	r2, r3, #1
   dab82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dab86:	6122      	str	r2, [r4, #16]
   dab88:	2201      	movs	r2, #1
   dab8a:	615a      	str	r2, [r3, #20]
   dab8c:	e7c0      	b.n	dab10 <__gethex+0x3b0>
   dab8e:	6922      	ldr	r2, [r4, #16]
   dab90:	454a      	cmp	r2, r9
   dab92:	dd0b      	ble.n	dabac <__gethex+0x44c>
   dab94:	2101      	movs	r1, #1
   dab96:	4620      	mov	r0, r4
   dab98:	f7ff fd7a 	bl	da690 <rshift>
   dab9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daba0:	3501      	adds	r5, #1
   daba2:	42ab      	cmp	r3, r5
   daba4:	f6ff aed7 	blt.w	da956 <__gethex+0x1f6>
   daba8:	2701      	movs	r7, #1
   dabaa:	e7c5      	b.n	dab38 <__gethex+0x3d8>
   dabac:	f016 061f 	ands.w	r6, r6, #31
   dabb0:	d0fa      	beq.n	daba8 <__gethex+0x448>
   dabb2:	449b      	add	fp, r3
   dabb4:	f1c6 0620 	rsb	r6, r6, #32
   dabb8:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dabbc:	f000 fa99 	bl	db0f2 <__hi0bits>
   dabc0:	42b0      	cmp	r0, r6
   dabc2:	dbe7      	blt.n	dab94 <__gethex+0x434>
   dabc4:	e7f0      	b.n	daba8 <__gethex+0x448>
   dabc6:	bf00      	nop

000dabc8 <L_shift>:
   dabc8:	f1c2 0208 	rsb	r2, r2, #8
   dabcc:	0092      	lsls	r2, r2, #2
   dabce:	b570      	push	{r4, r5, r6, lr}
   dabd0:	f1c2 0620 	rsb	r6, r2, #32
   dabd4:	6843      	ldr	r3, [r0, #4]
   dabd6:	6804      	ldr	r4, [r0, #0]
   dabd8:	fa03 f506 	lsl.w	r5, r3, r6
   dabdc:	432c      	orrs	r4, r5
   dabde:	40d3      	lsrs	r3, r2
   dabe0:	6004      	str	r4, [r0, #0]
   dabe2:	f840 3f04 	str.w	r3, [r0, #4]!
   dabe6:	4288      	cmp	r0, r1
   dabe8:	d3f4      	bcc.n	dabd4 <L_shift+0xc>
   dabea:	bd70      	pop	{r4, r5, r6, pc}

000dabec <__match>:
   dabec:	b530      	push	{r4, r5, lr}
   dabee:	6803      	ldr	r3, [r0, #0]
   dabf0:	3301      	adds	r3, #1
   dabf2:	f811 4b01 	ldrb.w	r4, [r1], #1
   dabf6:	b914      	cbnz	r4, dabfe <__match+0x12>
   dabf8:	6003      	str	r3, [r0, #0]
   dabfa:	2001      	movs	r0, #1
   dabfc:	bd30      	pop	{r4, r5, pc}
   dabfe:	f813 2b01 	ldrb.w	r2, [r3], #1
   dac02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dac06:	2d19      	cmp	r5, #25
   dac08:	bf98      	it	ls
   dac0a:	3220      	addls	r2, #32
   dac0c:	42a2      	cmp	r2, r4
   dac0e:	d0f0      	beq.n	dabf2 <__match+0x6>
   dac10:	2000      	movs	r0, #0
   dac12:	e7f3      	b.n	dabfc <__match+0x10>

000dac14 <__hexnan>:
   dac14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac18:	680b      	ldr	r3, [r1, #0]
   dac1a:	6801      	ldr	r1, [r0, #0]
   dac1c:	115e      	asrs	r6, r3, #5
   dac1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dac22:	f013 031f 	ands.w	r3, r3, #31
   dac26:	b087      	sub	sp, #28
   dac28:	bf18      	it	ne
   dac2a:	3604      	addne	r6, #4
   dac2c:	2500      	movs	r5, #0
   dac2e:	1f37      	subs	r7, r6, #4
   dac30:	4682      	mov	sl, r0
   dac32:	4690      	mov	r8, r2
   dac34:	9301      	str	r3, [sp, #4]
   dac36:	f846 5c04 	str.w	r5, [r6, #-4]
   dac3a:	46b9      	mov	r9, r7
   dac3c:	463c      	mov	r4, r7
   dac3e:	9502      	str	r5, [sp, #8]
   dac40:	46ab      	mov	fp, r5
   dac42:	784a      	ldrb	r2, [r1, #1]
   dac44:	1c4b      	adds	r3, r1, #1
   dac46:	9303      	str	r3, [sp, #12]
   dac48:	b342      	cbz	r2, dac9c <__hexnan+0x88>
   dac4a:	4610      	mov	r0, r2
   dac4c:	9105      	str	r1, [sp, #20]
   dac4e:	9204      	str	r2, [sp, #16]
   dac50:	f7ff fd70 	bl	da734 <__hexdig_fun>
   dac54:	2800      	cmp	r0, #0
   dac56:	d14f      	bne.n	dacf8 <__hexnan+0xe4>
   dac58:	9a04      	ldr	r2, [sp, #16]
   dac5a:	9905      	ldr	r1, [sp, #20]
   dac5c:	2a20      	cmp	r2, #32
   dac5e:	d818      	bhi.n	dac92 <__hexnan+0x7e>
   dac60:	9b02      	ldr	r3, [sp, #8]
   dac62:	459b      	cmp	fp, r3
   dac64:	dd13      	ble.n	dac8e <__hexnan+0x7a>
   dac66:	454c      	cmp	r4, r9
   dac68:	d206      	bcs.n	dac78 <__hexnan+0x64>
   dac6a:	2d07      	cmp	r5, #7
   dac6c:	dc04      	bgt.n	dac78 <__hexnan+0x64>
   dac6e:	462a      	mov	r2, r5
   dac70:	4649      	mov	r1, r9
   dac72:	4620      	mov	r0, r4
   dac74:	f7ff ffa8 	bl	dabc8 <L_shift>
   dac78:	4544      	cmp	r4, r8
   dac7a:	d950      	bls.n	dad1e <__hexnan+0x10a>
   dac7c:	2300      	movs	r3, #0
   dac7e:	f1a4 0904 	sub.w	r9, r4, #4
   dac82:	f844 3c04 	str.w	r3, [r4, #-4]
   dac86:	f8cd b008 	str.w	fp, [sp, #8]
   dac8a:	464c      	mov	r4, r9
   dac8c:	461d      	mov	r5, r3
   dac8e:	9903      	ldr	r1, [sp, #12]
   dac90:	e7d7      	b.n	dac42 <__hexnan+0x2e>
   dac92:	2a29      	cmp	r2, #41	; 0x29
   dac94:	d156      	bne.n	dad44 <__hexnan+0x130>
   dac96:	3102      	adds	r1, #2
   dac98:	f8ca 1000 	str.w	r1, [sl]
   dac9c:	f1bb 0f00 	cmp.w	fp, #0
   daca0:	d050      	beq.n	dad44 <__hexnan+0x130>
   daca2:	454c      	cmp	r4, r9
   daca4:	d206      	bcs.n	dacb4 <__hexnan+0xa0>
   daca6:	2d07      	cmp	r5, #7
   daca8:	dc04      	bgt.n	dacb4 <__hexnan+0xa0>
   dacaa:	462a      	mov	r2, r5
   dacac:	4649      	mov	r1, r9
   dacae:	4620      	mov	r0, r4
   dacb0:	f7ff ff8a 	bl	dabc8 <L_shift>
   dacb4:	4544      	cmp	r4, r8
   dacb6:	d934      	bls.n	dad22 <__hexnan+0x10e>
   dacb8:	f1a8 0204 	sub.w	r2, r8, #4
   dacbc:	4623      	mov	r3, r4
   dacbe:	f853 1b04 	ldr.w	r1, [r3], #4
   dacc2:	f842 1f04 	str.w	r1, [r2, #4]!
   dacc6:	429f      	cmp	r7, r3
   dacc8:	d2f9      	bcs.n	dacbe <__hexnan+0xaa>
   dacca:	1b3b      	subs	r3, r7, r4
   daccc:	f023 0303 	bic.w	r3, r3, #3
   dacd0:	3304      	adds	r3, #4
   dacd2:	3401      	adds	r4, #1
   dacd4:	3e03      	subs	r6, #3
   dacd6:	42b4      	cmp	r4, r6
   dacd8:	bf88      	it	hi
   dacda:	2304      	movhi	r3, #4
   dacdc:	4443      	add	r3, r8
   dacde:	2200      	movs	r2, #0
   dace0:	f843 2b04 	str.w	r2, [r3], #4
   dace4:	429f      	cmp	r7, r3
   dace6:	d2fb      	bcs.n	dace0 <__hexnan+0xcc>
   dace8:	683b      	ldr	r3, [r7, #0]
   dacea:	b91b      	cbnz	r3, dacf4 <__hexnan+0xe0>
   dacec:	4547      	cmp	r7, r8
   dacee:	d127      	bne.n	dad40 <__hexnan+0x12c>
   dacf0:	2301      	movs	r3, #1
   dacf2:	603b      	str	r3, [r7, #0]
   dacf4:	2005      	movs	r0, #5
   dacf6:	e026      	b.n	dad46 <__hexnan+0x132>
   dacf8:	3501      	adds	r5, #1
   dacfa:	2d08      	cmp	r5, #8
   dacfc:	f10b 0b01 	add.w	fp, fp, #1
   dad00:	dd06      	ble.n	dad10 <__hexnan+0xfc>
   dad02:	4544      	cmp	r4, r8
   dad04:	d9c3      	bls.n	dac8e <__hexnan+0x7a>
   dad06:	2300      	movs	r3, #0
   dad08:	f844 3c04 	str.w	r3, [r4, #-4]
   dad0c:	2501      	movs	r5, #1
   dad0e:	3c04      	subs	r4, #4
   dad10:	6822      	ldr	r2, [r4, #0]
   dad12:	f000 000f 	and.w	r0, r0, #15
   dad16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dad1a:	6022      	str	r2, [r4, #0]
   dad1c:	e7b7      	b.n	dac8e <__hexnan+0x7a>
   dad1e:	2508      	movs	r5, #8
   dad20:	e7b5      	b.n	dac8e <__hexnan+0x7a>
   dad22:	9b01      	ldr	r3, [sp, #4]
   dad24:	2b00      	cmp	r3, #0
   dad26:	d0df      	beq.n	dace8 <__hexnan+0xd4>
   dad28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dad2c:	f1c3 0320 	rsb	r3, r3, #32
   dad30:	fa22 f303 	lsr.w	r3, r2, r3
   dad34:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dad38:	401a      	ands	r2, r3
   dad3a:	f846 2c04 	str.w	r2, [r6, #-4]
   dad3e:	e7d3      	b.n	dace8 <__hexnan+0xd4>
   dad40:	3f04      	subs	r7, #4
   dad42:	e7d1      	b.n	dace8 <__hexnan+0xd4>
   dad44:	2004      	movs	r0, #4
   dad46:	b007      	add	sp, #28
   dad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dad4c <_findenv_r>:
   dad4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad50:	4607      	mov	r7, r0
   dad52:	4689      	mov	r9, r1
   dad54:	4616      	mov	r6, r2
   dad56:	f000 fd6f 	bl	db838 <__env_lock>
   dad5a:	4b18      	ldr	r3, [pc, #96]	; (dadbc <_findenv_r+0x70>)
   dad5c:	681c      	ldr	r4, [r3, #0]
   dad5e:	469a      	mov	sl, r3
   dad60:	b134      	cbz	r4, dad70 <_findenv_r+0x24>
   dad62:	464b      	mov	r3, r9
   dad64:	4698      	mov	r8, r3
   dad66:	f813 1b01 	ldrb.w	r1, [r3], #1
   dad6a:	b139      	cbz	r1, dad7c <_findenv_r+0x30>
   dad6c:	293d      	cmp	r1, #61	; 0x3d
   dad6e:	d1f9      	bne.n	dad64 <_findenv_r+0x18>
   dad70:	4638      	mov	r0, r7
   dad72:	f000 fd67 	bl	db844 <__env_unlock>
   dad76:	2000      	movs	r0, #0
   dad78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dad7c:	eba8 0809 	sub.w	r8, r8, r9
   dad80:	46a3      	mov	fp, r4
   dad82:	f854 0b04 	ldr.w	r0, [r4], #4
   dad86:	2800      	cmp	r0, #0
   dad88:	d0f2      	beq.n	dad70 <_findenv_r+0x24>
   dad8a:	4642      	mov	r2, r8
   dad8c:	4649      	mov	r1, r9
   dad8e:	f7fe fa98 	bl	d92c2 <strncmp>
   dad92:	2800      	cmp	r0, #0
   dad94:	d1f4      	bne.n	dad80 <_findenv_r+0x34>
   dad96:	f854 3c04 	ldr.w	r3, [r4, #-4]
   dad9a:	eb03 0508 	add.w	r5, r3, r8
   dad9e:	f813 3008 	ldrb.w	r3, [r3, r8]
   dada2:	2b3d      	cmp	r3, #61	; 0x3d
   dada4:	d1ec      	bne.n	dad80 <_findenv_r+0x34>
   dada6:	f8da 3000 	ldr.w	r3, [sl]
   dadaa:	ebab 0303 	sub.w	r3, fp, r3
   dadae:	109b      	asrs	r3, r3, #2
   dadb0:	4638      	mov	r0, r7
   dadb2:	6033      	str	r3, [r6, #0]
   dadb4:	f000 fd46 	bl	db844 <__env_unlock>
   dadb8:	1c68      	adds	r0, r5, #1
   dadba:	e7dd      	b.n	dad78 <_findenv_r+0x2c>
   dadbc:	2003e3f0 	.word	0x2003e3f0

000dadc0 <_getenv_r>:
   dadc0:	b507      	push	{r0, r1, r2, lr}
   dadc2:	aa01      	add	r2, sp, #4
   dadc4:	f7ff ffc2 	bl	dad4c <_findenv_r>
   dadc8:	b003      	add	sp, #12
   dadca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dadd0 <__gettzinfo>:
   dadd0:	4800      	ldr	r0, [pc, #0]	; (dadd4 <__gettzinfo+0x4>)
   dadd2:	4770      	bx	lr
   dadd4:	2003e228 	.word	0x2003e228

000dadd8 <gmtime_r>:
   dadd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daddc:	e9d0 6700 	ldrd	r6, r7, [r0]
   dade0:	460c      	mov	r4, r1
   dade2:	4a51      	ldr	r2, [pc, #324]	; (daf28 <gmtime_r+0x150>)
   dade4:	2300      	movs	r3, #0
   dade6:	4630      	mov	r0, r6
   dade8:	4639      	mov	r1, r7
   dadea:	f000 fd31 	bl	db850 <__aeabi_ldivmod>
   dadee:	4639      	mov	r1, r7
   dadf0:	4605      	mov	r5, r0
   dadf2:	4a4d      	ldr	r2, [pc, #308]	; (daf28 <gmtime_r+0x150>)
   dadf4:	4630      	mov	r0, r6
   dadf6:	2300      	movs	r3, #0
   dadf8:	f000 fd2a 	bl	db850 <__aeabi_ldivmod>
   dadfc:	2a00      	cmp	r2, #0
   dadfe:	bfbc      	itt	lt
   dae00:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dae04:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dae08:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dae0c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   dae10:	fbb2 f3f1 	udiv	r3, r2, r1
   dae14:	fb01 2213 	mls	r2, r1, r3, r2
   dae18:	f04f 013c 	mov.w	r1, #60	; 0x3c
   dae1c:	bfac      	ite	ge
   dae1e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   dae22:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   dae26:	60a3      	str	r3, [r4, #8]
   dae28:	fbb2 f3f1 	udiv	r3, r2, r1
   dae2c:	fb01 2213 	mls	r2, r1, r3, r2
   dae30:	6063      	str	r3, [r4, #4]
   dae32:	6022      	str	r2, [r4, #0]
   dae34:	1cc3      	adds	r3, r0, #3
   dae36:	2207      	movs	r2, #7
   dae38:	fb93 f2f2 	sdiv	r2, r3, r2
   dae3c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   dae40:	1a9b      	subs	r3, r3, r2
   dae42:	bf48      	it	mi
   dae44:	3307      	addmi	r3, #7
   dae46:	2800      	cmp	r0, #0
   dae48:	61a3      	str	r3, [r4, #24]
   dae4a:	bfb8      	it	lt
   dae4c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   dae50:	4936      	ldr	r1, [pc, #216]	; (daf2c <gmtime_r+0x154>)
   dae52:	bfae      	itee	ge
   dae54:	fb90 f1f1 	sdivge	r1, r0, r1
   dae58:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   dae5c:	fb93 f1f1 	sdivlt	r1, r3, r1
   dae60:	4b33      	ldr	r3, [pc, #204]	; (daf30 <gmtime_r+0x158>)
   dae62:	fb03 0001 	mla	r0, r3, r1, r0
   dae66:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dae6a:	fbb0 f2f2 	udiv	r2, r0, r2
   dae6e:	4402      	add	r2, r0
   dae70:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   dae74:	fbb0 f3fc 	udiv	r3, r0, ip
   dae78:	1ad2      	subs	r2, r2, r3
   dae7a:	f240 176d 	movw	r7, #365	; 0x16d
   dae7e:	4b2d      	ldr	r3, [pc, #180]	; (daf34 <gmtime_r+0x15c>)
   dae80:	fbb0 f3f3 	udiv	r3, r0, r3
   dae84:	2664      	movs	r6, #100	; 0x64
   dae86:	1ad3      	subs	r3, r2, r3
   dae88:	fbb3 f5f7 	udiv	r5, r3, r7
   dae8c:	fbb3 f3fc 	udiv	r3, r3, ip
   dae90:	fbb5 f2f6 	udiv	r2, r5, r6
   dae94:	1ad3      	subs	r3, r2, r3
   dae96:	4403      	add	r3, r0
   dae98:	fb07 3315 	mls	r3, r7, r5, r3
   dae9c:	2099      	movs	r0, #153	; 0x99
   dae9e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   daea2:	f10c 0c02 	add.w	ip, ip, #2
   daea6:	f103 0e01 	add.w	lr, r3, #1
   daeaa:	fbbc f7f0 	udiv	r7, ip, r0
   daeae:	4378      	muls	r0, r7
   daeb0:	3002      	adds	r0, #2
   daeb2:	f04f 0805 	mov.w	r8, #5
   daeb6:	fbb0 f0f8 	udiv	r0, r0, r8
   daeba:	ebae 0000 	sub.w	r0, lr, r0
   daebe:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   daec2:	45f4      	cmp	ip, lr
   daec4:	bf94      	ite	ls
   daec6:	f04f 0c02 	movls.w	ip, #2
   daeca:	f06f 0c09 	mvnhi.w	ip, #9
   daece:	4467      	add	r7, ip
   daed0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   daed4:	fb0c 5101 	mla	r1, ip, r1, r5
   daed8:	2f01      	cmp	r7, #1
   daeda:	bf98      	it	ls
   daedc:	3101      	addls	r1, #1
   daede:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   daee2:	d30c      	bcc.n	daefe <gmtime_r+0x126>
   daee4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   daee8:	61e3      	str	r3, [r4, #28]
   daeea:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   daeee:	2300      	movs	r3, #0
   daef0:	60e0      	str	r0, [r4, #12]
   daef2:	e9c4 7104 	strd	r7, r1, [r4, #16]
   daef6:	6223      	str	r3, [r4, #32]
   daef8:	4620      	mov	r0, r4
   daefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daefe:	f015 0f03 	tst.w	r5, #3
   daf02:	d102      	bne.n	daf0a <gmtime_r+0x132>
   daf04:	fb06 5212 	mls	r2, r6, r2, r5
   daf08:	b95a      	cbnz	r2, daf22 <gmtime_r+0x14a>
   daf0a:	f44f 76c8 	mov.w	r6, #400	; 0x190
   daf0e:	fbb5 f2f6 	udiv	r2, r5, r6
   daf12:	fb06 5212 	mls	r2, r6, r2, r5
   daf16:	fab2 f282 	clz	r2, r2
   daf1a:	0952      	lsrs	r2, r2, #5
   daf1c:	333b      	adds	r3, #59	; 0x3b
   daf1e:	4413      	add	r3, r2
   daf20:	e7e2      	b.n	daee8 <gmtime_r+0x110>
   daf22:	2201      	movs	r2, #1
   daf24:	e7fa      	b.n	daf1c <gmtime_r+0x144>
   daf26:	bf00      	nop
   daf28:	00015180 	.word	0x00015180
   daf2c:	00023ab1 	.word	0x00023ab1
   daf30:	fffdc54f 	.word	0xfffdc54f
   daf34:	00023ab0 	.word	0x00023ab0

000daf38 <__retarget_lock_acquire>:
   daf38:	4770      	bx	lr

000daf3a <__retarget_lock_acquire_recursive>:
   daf3a:	4770      	bx	lr

000daf3c <__retarget_lock_release>:
   daf3c:	4770      	bx	lr

000daf3e <__retarget_lock_release_recursive>:
   daf3e:	4770      	bx	lr

000daf40 <__ascii_mbtowc>:
   daf40:	b082      	sub	sp, #8
   daf42:	b901      	cbnz	r1, daf46 <__ascii_mbtowc+0x6>
   daf44:	a901      	add	r1, sp, #4
   daf46:	b142      	cbz	r2, daf5a <__ascii_mbtowc+0x1a>
   daf48:	b14b      	cbz	r3, daf5e <__ascii_mbtowc+0x1e>
   daf4a:	7813      	ldrb	r3, [r2, #0]
   daf4c:	600b      	str	r3, [r1, #0]
   daf4e:	7812      	ldrb	r2, [r2, #0]
   daf50:	1e10      	subs	r0, r2, #0
   daf52:	bf18      	it	ne
   daf54:	2001      	movne	r0, #1
   daf56:	b002      	add	sp, #8
   daf58:	4770      	bx	lr
   daf5a:	4610      	mov	r0, r2
   daf5c:	e7fb      	b.n	daf56 <__ascii_mbtowc+0x16>
   daf5e:	f06f 0001 	mvn.w	r0, #1
   daf62:	e7f8      	b.n	daf56 <__ascii_mbtowc+0x16>

000daf64 <_Balloc>:
   daf64:	b570      	push	{r4, r5, r6, lr}
   daf66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   daf68:	4604      	mov	r4, r0
   daf6a:	460d      	mov	r5, r1
   daf6c:	b93e      	cbnz	r6, daf7e <_Balloc+0x1a>
   daf6e:	2010      	movs	r0, #16
   daf70:	f7fb fc22 	bl	d67b8 <malloc>
   daf74:	e9c0 6601 	strd	r6, r6, [r0, #4]
   daf78:	6260      	str	r0, [r4, #36]	; 0x24
   daf7a:	6006      	str	r6, [r0, #0]
   daf7c:	60c6      	str	r6, [r0, #12]
   daf7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   daf80:	68f3      	ldr	r3, [r6, #12]
   daf82:	b183      	cbz	r3, dafa6 <_Balloc+0x42>
   daf84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daf86:	68db      	ldr	r3, [r3, #12]
   daf88:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   daf8c:	b9b8      	cbnz	r0, dafbe <_Balloc+0x5a>
   daf8e:	2101      	movs	r1, #1
   daf90:	fa01 f605 	lsl.w	r6, r1, r5
   daf94:	1d72      	adds	r2, r6, #5
   daf96:	0092      	lsls	r2, r2, #2
   daf98:	4620      	mov	r0, r4
   daf9a:	f000 fc22 	bl	db7e2 <_calloc_r>
   daf9e:	b160      	cbz	r0, dafba <_Balloc+0x56>
   dafa0:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dafa4:	e00e      	b.n	dafc4 <_Balloc+0x60>
   dafa6:	2221      	movs	r2, #33	; 0x21
   dafa8:	2104      	movs	r1, #4
   dafaa:	4620      	mov	r0, r4
   dafac:	f000 fc19 	bl	db7e2 <_calloc_r>
   dafb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dafb2:	60f0      	str	r0, [r6, #12]
   dafb4:	68db      	ldr	r3, [r3, #12]
   dafb6:	2b00      	cmp	r3, #0
   dafb8:	d1e4      	bne.n	daf84 <_Balloc+0x20>
   dafba:	2000      	movs	r0, #0
   dafbc:	bd70      	pop	{r4, r5, r6, pc}
   dafbe:	6802      	ldr	r2, [r0, #0]
   dafc0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dafc4:	2300      	movs	r3, #0
   dafc6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dafca:	e7f7      	b.n	dafbc <_Balloc+0x58>

000dafcc <_Bfree>:
   dafcc:	b570      	push	{r4, r5, r6, lr}
   dafce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dafd0:	4605      	mov	r5, r0
   dafd2:	460c      	mov	r4, r1
   dafd4:	b93e      	cbnz	r6, dafe6 <_Bfree+0x1a>
   dafd6:	2010      	movs	r0, #16
   dafd8:	f7fb fbee 	bl	d67b8 <malloc>
   dafdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dafe0:	6268      	str	r0, [r5, #36]	; 0x24
   dafe2:	6006      	str	r6, [r0, #0]
   dafe4:	60c6      	str	r6, [r0, #12]
   dafe6:	b13c      	cbz	r4, daff8 <_Bfree+0x2c>
   dafe8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dafea:	6862      	ldr	r2, [r4, #4]
   dafec:	68db      	ldr	r3, [r3, #12]
   dafee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   daff2:	6021      	str	r1, [r4, #0]
   daff4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   daff8:	bd70      	pop	{r4, r5, r6, pc}

000daffa <__multadd>:
   daffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daffe:	690e      	ldr	r6, [r1, #16]
   db000:	4607      	mov	r7, r0
   db002:	4698      	mov	r8, r3
   db004:	460c      	mov	r4, r1
   db006:	f101 0014 	add.w	r0, r1, #20
   db00a:	2300      	movs	r3, #0
   db00c:	6805      	ldr	r5, [r0, #0]
   db00e:	b2a9      	uxth	r1, r5
   db010:	fb02 8101 	mla	r1, r2, r1, r8
   db014:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   db018:	0c2d      	lsrs	r5, r5, #16
   db01a:	fb02 c505 	mla	r5, r2, r5, ip
   db01e:	b289      	uxth	r1, r1
   db020:	3301      	adds	r3, #1
   db022:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   db026:	429e      	cmp	r6, r3
   db028:	f840 1b04 	str.w	r1, [r0], #4
   db02c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   db030:	dcec      	bgt.n	db00c <__multadd+0x12>
   db032:	f1b8 0f00 	cmp.w	r8, #0
   db036:	d01b      	beq.n	db070 <__multadd+0x76>
   db038:	68a3      	ldr	r3, [r4, #8]
   db03a:	42b3      	cmp	r3, r6
   db03c:	dc12      	bgt.n	db064 <__multadd+0x6a>
   db03e:	6861      	ldr	r1, [r4, #4]
   db040:	4638      	mov	r0, r7
   db042:	3101      	adds	r1, #1
   db044:	f7ff ff8e 	bl	daf64 <_Balloc>
   db048:	6922      	ldr	r2, [r4, #16]
   db04a:	3202      	adds	r2, #2
   db04c:	f104 010c 	add.w	r1, r4, #12
   db050:	4605      	mov	r5, r0
   db052:	0092      	lsls	r2, r2, #2
   db054:	300c      	adds	r0, #12
   db056:	f7fe f8c3 	bl	d91e0 <memcpy>
   db05a:	4621      	mov	r1, r4
   db05c:	4638      	mov	r0, r7
   db05e:	f7ff ffb5 	bl	dafcc <_Bfree>
   db062:	462c      	mov	r4, r5
   db064:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   db068:	3601      	adds	r6, #1
   db06a:	f8c3 8014 	str.w	r8, [r3, #20]
   db06e:	6126      	str	r6, [r4, #16]
   db070:	4620      	mov	r0, r4
   db072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db076 <__s2b>:
   db076:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db07a:	460c      	mov	r4, r1
   db07c:	4615      	mov	r5, r2
   db07e:	461f      	mov	r7, r3
   db080:	2209      	movs	r2, #9
   db082:	3308      	adds	r3, #8
   db084:	4606      	mov	r6, r0
   db086:	fb93 f3f2 	sdiv	r3, r3, r2
   db08a:	2100      	movs	r1, #0
   db08c:	2201      	movs	r2, #1
   db08e:	429a      	cmp	r2, r3
   db090:	db20      	blt.n	db0d4 <__s2b+0x5e>
   db092:	4630      	mov	r0, r6
   db094:	f7ff ff66 	bl	daf64 <_Balloc>
   db098:	9b08      	ldr	r3, [sp, #32]
   db09a:	6143      	str	r3, [r0, #20]
   db09c:	2d09      	cmp	r5, #9
   db09e:	f04f 0301 	mov.w	r3, #1
   db0a2:	6103      	str	r3, [r0, #16]
   db0a4:	dd19      	ble.n	db0da <__s2b+0x64>
   db0a6:	f104 0909 	add.w	r9, r4, #9
   db0aa:	46c8      	mov	r8, r9
   db0ac:	442c      	add	r4, r5
   db0ae:	f818 3b01 	ldrb.w	r3, [r8], #1
   db0b2:	4601      	mov	r1, r0
   db0b4:	3b30      	subs	r3, #48	; 0x30
   db0b6:	220a      	movs	r2, #10
   db0b8:	4630      	mov	r0, r6
   db0ba:	f7ff ff9e 	bl	daffa <__multadd>
   db0be:	45a0      	cmp	r8, r4
   db0c0:	d1f5      	bne.n	db0ae <__s2b+0x38>
   db0c2:	f1a5 0408 	sub.w	r4, r5, #8
   db0c6:	444c      	add	r4, r9
   db0c8:	1b2d      	subs	r5, r5, r4
   db0ca:	1963      	adds	r3, r4, r5
   db0cc:	42bb      	cmp	r3, r7
   db0ce:	db07      	blt.n	db0e0 <__s2b+0x6a>
   db0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db0d4:	0052      	lsls	r2, r2, #1
   db0d6:	3101      	adds	r1, #1
   db0d8:	e7d9      	b.n	db08e <__s2b+0x18>
   db0da:	340a      	adds	r4, #10
   db0dc:	2509      	movs	r5, #9
   db0de:	e7f3      	b.n	db0c8 <__s2b+0x52>
   db0e0:	f814 3b01 	ldrb.w	r3, [r4], #1
   db0e4:	4601      	mov	r1, r0
   db0e6:	3b30      	subs	r3, #48	; 0x30
   db0e8:	220a      	movs	r2, #10
   db0ea:	4630      	mov	r0, r6
   db0ec:	f7ff ff85 	bl	daffa <__multadd>
   db0f0:	e7eb      	b.n	db0ca <__s2b+0x54>

000db0f2 <__hi0bits>:
   db0f2:	0c03      	lsrs	r3, r0, #16
   db0f4:	041b      	lsls	r3, r3, #16
   db0f6:	b9d3      	cbnz	r3, db12e <__hi0bits+0x3c>
   db0f8:	0400      	lsls	r0, r0, #16
   db0fa:	2310      	movs	r3, #16
   db0fc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db100:	bf04      	itt	eq
   db102:	0200      	lsleq	r0, r0, #8
   db104:	3308      	addeq	r3, #8
   db106:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db10a:	bf04      	itt	eq
   db10c:	0100      	lsleq	r0, r0, #4
   db10e:	3304      	addeq	r3, #4
   db110:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db114:	bf04      	itt	eq
   db116:	0080      	lsleq	r0, r0, #2
   db118:	3302      	addeq	r3, #2
   db11a:	2800      	cmp	r0, #0
   db11c:	db05      	blt.n	db12a <__hi0bits+0x38>
   db11e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   db122:	f103 0301 	add.w	r3, r3, #1
   db126:	bf08      	it	eq
   db128:	2320      	moveq	r3, #32
   db12a:	4618      	mov	r0, r3
   db12c:	4770      	bx	lr
   db12e:	2300      	movs	r3, #0
   db130:	e7e4      	b.n	db0fc <__hi0bits+0xa>

000db132 <__lo0bits>:
   db132:	6803      	ldr	r3, [r0, #0]
   db134:	f013 0207 	ands.w	r2, r3, #7
   db138:	4601      	mov	r1, r0
   db13a:	d00b      	beq.n	db154 <__lo0bits+0x22>
   db13c:	07da      	lsls	r2, r3, #31
   db13e:	d424      	bmi.n	db18a <__lo0bits+0x58>
   db140:	0798      	lsls	r0, r3, #30
   db142:	bf49      	itett	mi
   db144:	085b      	lsrmi	r3, r3, #1
   db146:	089b      	lsrpl	r3, r3, #2
   db148:	2001      	movmi	r0, #1
   db14a:	600b      	strmi	r3, [r1, #0]
   db14c:	bf5c      	itt	pl
   db14e:	600b      	strpl	r3, [r1, #0]
   db150:	2002      	movpl	r0, #2
   db152:	4770      	bx	lr
   db154:	b298      	uxth	r0, r3
   db156:	b9b0      	cbnz	r0, db186 <__lo0bits+0x54>
   db158:	0c1b      	lsrs	r3, r3, #16
   db15a:	2010      	movs	r0, #16
   db15c:	f013 0fff 	tst.w	r3, #255	; 0xff
   db160:	bf04      	itt	eq
   db162:	0a1b      	lsreq	r3, r3, #8
   db164:	3008      	addeq	r0, #8
   db166:	071a      	lsls	r2, r3, #28
   db168:	bf04      	itt	eq
   db16a:	091b      	lsreq	r3, r3, #4
   db16c:	3004      	addeq	r0, #4
   db16e:	079a      	lsls	r2, r3, #30
   db170:	bf04      	itt	eq
   db172:	089b      	lsreq	r3, r3, #2
   db174:	3002      	addeq	r0, #2
   db176:	07da      	lsls	r2, r3, #31
   db178:	d403      	bmi.n	db182 <__lo0bits+0x50>
   db17a:	085b      	lsrs	r3, r3, #1
   db17c:	f100 0001 	add.w	r0, r0, #1
   db180:	d005      	beq.n	db18e <__lo0bits+0x5c>
   db182:	600b      	str	r3, [r1, #0]
   db184:	4770      	bx	lr
   db186:	4610      	mov	r0, r2
   db188:	e7e8      	b.n	db15c <__lo0bits+0x2a>
   db18a:	2000      	movs	r0, #0
   db18c:	4770      	bx	lr
   db18e:	2020      	movs	r0, #32
   db190:	4770      	bx	lr

000db192 <__i2b>:
   db192:	b510      	push	{r4, lr}
   db194:	460c      	mov	r4, r1
   db196:	2101      	movs	r1, #1
   db198:	f7ff fee4 	bl	daf64 <_Balloc>
   db19c:	2201      	movs	r2, #1
   db19e:	6144      	str	r4, [r0, #20]
   db1a0:	6102      	str	r2, [r0, #16]
   db1a2:	bd10      	pop	{r4, pc}

000db1a4 <__multiply>:
   db1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db1a8:	4615      	mov	r5, r2
   db1aa:	690a      	ldr	r2, [r1, #16]
   db1ac:	692b      	ldr	r3, [r5, #16]
   db1ae:	429a      	cmp	r2, r3
   db1b0:	bfb8      	it	lt
   db1b2:	460b      	movlt	r3, r1
   db1b4:	460c      	mov	r4, r1
   db1b6:	bfbc      	itt	lt
   db1b8:	462c      	movlt	r4, r5
   db1ba:	461d      	movlt	r5, r3
   db1bc:	6927      	ldr	r7, [r4, #16]
   db1be:	f8d5 9010 	ldr.w	r9, [r5, #16]
   db1c2:	68a3      	ldr	r3, [r4, #8]
   db1c4:	6861      	ldr	r1, [r4, #4]
   db1c6:	eb07 0609 	add.w	r6, r7, r9
   db1ca:	42b3      	cmp	r3, r6
   db1cc:	bfb8      	it	lt
   db1ce:	3101      	addlt	r1, #1
   db1d0:	b085      	sub	sp, #20
   db1d2:	f7ff fec7 	bl	daf64 <_Balloc>
   db1d6:	f100 0114 	add.w	r1, r0, #20
   db1da:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   db1de:	460b      	mov	r3, r1
   db1e0:	2200      	movs	r2, #0
   db1e2:	4543      	cmp	r3, r8
   db1e4:	d31d      	bcc.n	db222 <__multiply+0x7e>
   db1e6:	f104 0314 	add.w	r3, r4, #20
   db1ea:	f105 0214 	add.w	r2, r5, #20
   db1ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   db1f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db1f6:	9302      	str	r3, [sp, #8]
   db1f8:	1b3b      	subs	r3, r7, r4
   db1fa:	3b15      	subs	r3, #21
   db1fc:	f023 0303 	bic.w	r3, r3, #3
   db200:	3304      	adds	r3, #4
   db202:	f104 0515 	add.w	r5, r4, #21
   db206:	42af      	cmp	r7, r5
   db208:	bf38      	it	cc
   db20a:	2304      	movcc	r3, #4
   db20c:	9301      	str	r3, [sp, #4]
   db20e:	9b02      	ldr	r3, [sp, #8]
   db210:	9203      	str	r2, [sp, #12]
   db212:	4293      	cmp	r3, r2
   db214:	d808      	bhi.n	db228 <__multiply+0x84>
   db216:	2e00      	cmp	r6, #0
   db218:	dc5a      	bgt.n	db2d0 <__multiply+0x12c>
   db21a:	6106      	str	r6, [r0, #16]
   db21c:	b005      	add	sp, #20
   db21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db222:	f843 2b04 	str.w	r2, [r3], #4
   db226:	e7dc      	b.n	db1e2 <__multiply+0x3e>
   db228:	f8b2 a000 	ldrh.w	sl, [r2]
   db22c:	f1ba 0f00 	cmp.w	sl, #0
   db230:	d024      	beq.n	db27c <__multiply+0xd8>
   db232:	f104 0e14 	add.w	lr, r4, #20
   db236:	4689      	mov	r9, r1
   db238:	f04f 0c00 	mov.w	ip, #0
   db23c:	f85e 5b04 	ldr.w	r5, [lr], #4
   db240:	f8d9 b000 	ldr.w	fp, [r9]
   db244:	b2ab      	uxth	r3, r5
   db246:	fa1f fb8b 	uxth.w	fp, fp
   db24a:	fb0a b303 	mla	r3, sl, r3, fp
   db24e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   db252:	f8d9 5000 	ldr.w	r5, [r9]
   db256:	4463      	add	r3, ip
   db258:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db25c:	fb0a c50b 	mla	r5, sl, fp, ip
   db260:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   db264:	b29b      	uxth	r3, r3
   db266:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   db26a:	4577      	cmp	r7, lr
   db26c:	f849 3b04 	str.w	r3, [r9], #4
   db270:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db274:	d8e2      	bhi.n	db23c <__multiply+0x98>
   db276:	9b01      	ldr	r3, [sp, #4]
   db278:	f841 c003 	str.w	ip, [r1, r3]
   db27c:	9b03      	ldr	r3, [sp, #12]
   db27e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   db282:	3204      	adds	r2, #4
   db284:	f1b9 0f00 	cmp.w	r9, #0
   db288:	d020      	beq.n	db2cc <__multiply+0x128>
   db28a:	680b      	ldr	r3, [r1, #0]
   db28c:	f104 0c14 	add.w	ip, r4, #20
   db290:	468e      	mov	lr, r1
   db292:	f04f 0a00 	mov.w	sl, #0
   db296:	f8bc 5000 	ldrh.w	r5, [ip]
   db29a:	f8be b002 	ldrh.w	fp, [lr, #2]
   db29e:	fb09 b505 	mla	r5, r9, r5, fp
   db2a2:	44aa      	add	sl, r5
   db2a4:	b29b      	uxth	r3, r3
   db2a6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   db2aa:	f84e 3b04 	str.w	r3, [lr], #4
   db2ae:	f85c 3b04 	ldr.w	r3, [ip], #4
   db2b2:	f8be 5000 	ldrh.w	r5, [lr]
   db2b6:	0c1b      	lsrs	r3, r3, #16
   db2b8:	fb09 5303 	mla	r3, r9, r3, r5
   db2bc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   db2c0:	4567      	cmp	r7, ip
   db2c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   db2c6:	d8e6      	bhi.n	db296 <__multiply+0xf2>
   db2c8:	9d01      	ldr	r5, [sp, #4]
   db2ca:	514b      	str	r3, [r1, r5]
   db2cc:	3104      	adds	r1, #4
   db2ce:	e79e      	b.n	db20e <__multiply+0x6a>
   db2d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   db2d4:	2b00      	cmp	r3, #0
   db2d6:	d1a0      	bne.n	db21a <__multiply+0x76>
   db2d8:	3e01      	subs	r6, #1
   db2da:	e79c      	b.n	db216 <__multiply+0x72>

000db2dc <__pow5mult>:
   db2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db2e0:	4615      	mov	r5, r2
   db2e2:	f012 0203 	ands.w	r2, r2, #3
   db2e6:	4606      	mov	r6, r0
   db2e8:	460f      	mov	r7, r1
   db2ea:	d007      	beq.n	db2fc <__pow5mult+0x20>
   db2ec:	4c21      	ldr	r4, [pc, #132]	; (db374 <__pow5mult+0x98>)
   db2ee:	3a01      	subs	r2, #1
   db2f0:	2300      	movs	r3, #0
   db2f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db2f6:	f7ff fe80 	bl	daffa <__multadd>
   db2fa:	4607      	mov	r7, r0
   db2fc:	10ad      	asrs	r5, r5, #2
   db2fe:	d035      	beq.n	db36c <__pow5mult+0x90>
   db300:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db302:	b93c      	cbnz	r4, db314 <__pow5mult+0x38>
   db304:	2010      	movs	r0, #16
   db306:	f7fb fa57 	bl	d67b8 <malloc>
   db30a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   db30e:	6270      	str	r0, [r6, #36]	; 0x24
   db310:	6004      	str	r4, [r0, #0]
   db312:	60c4      	str	r4, [r0, #12]
   db314:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db318:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db31c:	b94c      	cbnz	r4, db332 <__pow5mult+0x56>
   db31e:	f240 2171 	movw	r1, #625	; 0x271
   db322:	4630      	mov	r0, r6
   db324:	f7ff ff35 	bl	db192 <__i2b>
   db328:	2300      	movs	r3, #0
   db32a:	f8c8 0008 	str.w	r0, [r8, #8]
   db32e:	4604      	mov	r4, r0
   db330:	6003      	str	r3, [r0, #0]
   db332:	f04f 0900 	mov.w	r9, #0
   db336:	07eb      	lsls	r3, r5, #31
   db338:	d50a      	bpl.n	db350 <__pow5mult+0x74>
   db33a:	4639      	mov	r1, r7
   db33c:	4622      	mov	r2, r4
   db33e:	4630      	mov	r0, r6
   db340:	f7ff ff30 	bl	db1a4 <__multiply>
   db344:	4639      	mov	r1, r7
   db346:	4680      	mov	r8, r0
   db348:	4630      	mov	r0, r6
   db34a:	f7ff fe3f 	bl	dafcc <_Bfree>
   db34e:	4647      	mov	r7, r8
   db350:	106d      	asrs	r5, r5, #1
   db352:	d00b      	beq.n	db36c <__pow5mult+0x90>
   db354:	6820      	ldr	r0, [r4, #0]
   db356:	b938      	cbnz	r0, db368 <__pow5mult+0x8c>
   db358:	4622      	mov	r2, r4
   db35a:	4621      	mov	r1, r4
   db35c:	4630      	mov	r0, r6
   db35e:	f7ff ff21 	bl	db1a4 <__multiply>
   db362:	6020      	str	r0, [r4, #0]
   db364:	f8c0 9000 	str.w	r9, [r0]
   db368:	4604      	mov	r4, r0
   db36a:	e7e4      	b.n	db336 <__pow5mult+0x5a>
   db36c:	4638      	mov	r0, r7
   db36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db372:	bf00      	nop
   db374:	000dc5d8 	.word	0x000dc5d8

000db378 <__lshift>:
   db378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db37c:	460c      	mov	r4, r1
   db37e:	6849      	ldr	r1, [r1, #4]
   db380:	6923      	ldr	r3, [r4, #16]
   db382:	eb03 1862 	add.w	r8, r3, r2, asr #5
   db386:	68a3      	ldr	r3, [r4, #8]
   db388:	4607      	mov	r7, r0
   db38a:	4691      	mov	r9, r2
   db38c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db390:	f108 0601 	add.w	r6, r8, #1
   db394:	42b3      	cmp	r3, r6
   db396:	db3f      	blt.n	db418 <__lshift+0xa0>
   db398:	4638      	mov	r0, r7
   db39a:	f7ff fde3 	bl	daf64 <_Balloc>
   db39e:	2300      	movs	r3, #0
   db3a0:	4605      	mov	r5, r0
   db3a2:	f100 0114 	add.w	r1, r0, #20
   db3a6:	f100 0210 	add.w	r2, r0, #16
   db3aa:	4618      	mov	r0, r3
   db3ac:	4553      	cmp	r3, sl
   db3ae:	db36      	blt.n	db41e <__lshift+0xa6>
   db3b0:	6920      	ldr	r0, [r4, #16]
   db3b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   db3b6:	f104 0314 	add.w	r3, r4, #20
   db3ba:	f019 091f 	ands.w	r9, r9, #31
   db3be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   db3c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   db3c6:	d02e      	beq.n	db426 <__lshift+0xae>
   db3c8:	f1c9 0e20 	rsb	lr, r9, #32
   db3cc:	468a      	mov	sl, r1
   db3ce:	2200      	movs	r2, #0
   db3d0:	6818      	ldr	r0, [r3, #0]
   db3d2:	fa00 f009 	lsl.w	r0, r0, r9
   db3d6:	4302      	orrs	r2, r0
   db3d8:	f84a 2b04 	str.w	r2, [sl], #4
   db3dc:	f853 2b04 	ldr.w	r2, [r3], #4
   db3e0:	459c      	cmp	ip, r3
   db3e2:	fa22 f20e 	lsr.w	r2, r2, lr
   db3e6:	d8f3      	bhi.n	db3d0 <__lshift+0x58>
   db3e8:	ebac 0304 	sub.w	r3, ip, r4
   db3ec:	3b15      	subs	r3, #21
   db3ee:	f023 0303 	bic.w	r3, r3, #3
   db3f2:	3304      	adds	r3, #4
   db3f4:	f104 0015 	add.w	r0, r4, #21
   db3f8:	4560      	cmp	r0, ip
   db3fa:	bf88      	it	hi
   db3fc:	2304      	movhi	r3, #4
   db3fe:	50ca      	str	r2, [r1, r3]
   db400:	b10a      	cbz	r2, db406 <__lshift+0x8e>
   db402:	f108 0602 	add.w	r6, r8, #2
   db406:	3e01      	subs	r6, #1
   db408:	4638      	mov	r0, r7
   db40a:	612e      	str	r6, [r5, #16]
   db40c:	4621      	mov	r1, r4
   db40e:	f7ff fddd 	bl	dafcc <_Bfree>
   db412:	4628      	mov	r0, r5
   db414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db418:	3101      	adds	r1, #1
   db41a:	005b      	lsls	r3, r3, #1
   db41c:	e7ba      	b.n	db394 <__lshift+0x1c>
   db41e:	f842 0f04 	str.w	r0, [r2, #4]!
   db422:	3301      	adds	r3, #1
   db424:	e7c2      	b.n	db3ac <__lshift+0x34>
   db426:	3904      	subs	r1, #4
   db428:	f853 2b04 	ldr.w	r2, [r3], #4
   db42c:	f841 2f04 	str.w	r2, [r1, #4]!
   db430:	459c      	cmp	ip, r3
   db432:	d8f9      	bhi.n	db428 <__lshift+0xb0>
   db434:	e7e7      	b.n	db406 <__lshift+0x8e>

000db436 <__mcmp>:
   db436:	b530      	push	{r4, r5, lr}
   db438:	6902      	ldr	r2, [r0, #16]
   db43a:	690c      	ldr	r4, [r1, #16]
   db43c:	1b12      	subs	r2, r2, r4
   db43e:	d10e      	bne.n	db45e <__mcmp+0x28>
   db440:	f100 0314 	add.w	r3, r0, #20
   db444:	3114      	adds	r1, #20
   db446:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   db44a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   db44e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   db452:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   db456:	42a5      	cmp	r5, r4
   db458:	d003      	beq.n	db462 <__mcmp+0x2c>
   db45a:	d305      	bcc.n	db468 <__mcmp+0x32>
   db45c:	2201      	movs	r2, #1
   db45e:	4610      	mov	r0, r2
   db460:	bd30      	pop	{r4, r5, pc}
   db462:	4283      	cmp	r3, r0
   db464:	d3f3      	bcc.n	db44e <__mcmp+0x18>
   db466:	e7fa      	b.n	db45e <__mcmp+0x28>
   db468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db46c:	e7f7      	b.n	db45e <__mcmp+0x28>

000db46e <__mdiff>:
   db46e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db472:	460c      	mov	r4, r1
   db474:	4606      	mov	r6, r0
   db476:	4611      	mov	r1, r2
   db478:	4620      	mov	r0, r4
   db47a:	4617      	mov	r7, r2
   db47c:	f7ff ffdb 	bl	db436 <__mcmp>
   db480:	1e05      	subs	r5, r0, #0
   db482:	d108      	bne.n	db496 <__mdiff+0x28>
   db484:	4629      	mov	r1, r5
   db486:	4630      	mov	r0, r6
   db488:	f7ff fd6c 	bl	daf64 <_Balloc>
   db48c:	2301      	movs	r3, #1
   db48e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   db492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db496:	bfa4      	itt	ge
   db498:	463b      	movge	r3, r7
   db49a:	4627      	movge	r7, r4
   db49c:	4630      	mov	r0, r6
   db49e:	6879      	ldr	r1, [r7, #4]
   db4a0:	bfa6      	itte	ge
   db4a2:	461c      	movge	r4, r3
   db4a4:	2500      	movge	r5, #0
   db4a6:	2501      	movlt	r5, #1
   db4a8:	f7ff fd5c 	bl	daf64 <_Balloc>
   db4ac:	693e      	ldr	r6, [r7, #16]
   db4ae:	60c5      	str	r5, [r0, #12]
   db4b0:	6925      	ldr	r5, [r4, #16]
   db4b2:	f107 0114 	add.w	r1, r7, #20
   db4b6:	f104 0914 	add.w	r9, r4, #20
   db4ba:	f100 0e14 	add.w	lr, r0, #20
   db4be:	f107 0210 	add.w	r2, r7, #16
   db4c2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   db4c6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   db4ca:	46f2      	mov	sl, lr
   db4cc:	2700      	movs	r7, #0
   db4ce:	f859 3b04 	ldr.w	r3, [r9], #4
   db4d2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   db4d6:	fa1f f883 	uxth.w	r8, r3
   db4da:	fa17 f78b 	uxtah	r7, r7, fp
   db4de:	0c1b      	lsrs	r3, r3, #16
   db4e0:	eba7 0808 	sub.w	r8, r7, r8
   db4e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   db4e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   db4ec:	fa1f f888 	uxth.w	r8, r8
   db4f0:	141f      	asrs	r7, r3, #16
   db4f2:	454d      	cmp	r5, r9
   db4f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   db4f8:	f84a 3b04 	str.w	r3, [sl], #4
   db4fc:	d8e7      	bhi.n	db4ce <__mdiff+0x60>
   db4fe:	1b2b      	subs	r3, r5, r4
   db500:	3b15      	subs	r3, #21
   db502:	f023 0303 	bic.w	r3, r3, #3
   db506:	3304      	adds	r3, #4
   db508:	3415      	adds	r4, #21
   db50a:	42a5      	cmp	r5, r4
   db50c:	bf38      	it	cc
   db50e:	2304      	movcc	r3, #4
   db510:	4419      	add	r1, r3
   db512:	4473      	add	r3, lr
   db514:	469e      	mov	lr, r3
   db516:	460d      	mov	r5, r1
   db518:	4565      	cmp	r5, ip
   db51a:	d30e      	bcc.n	db53a <__mdiff+0xcc>
   db51c:	f10c 0203 	add.w	r2, ip, #3
   db520:	1a52      	subs	r2, r2, r1
   db522:	f022 0203 	bic.w	r2, r2, #3
   db526:	3903      	subs	r1, #3
   db528:	458c      	cmp	ip, r1
   db52a:	bf38      	it	cc
   db52c:	2200      	movcc	r2, #0
   db52e:	441a      	add	r2, r3
   db530:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   db534:	b17b      	cbz	r3, db556 <__mdiff+0xe8>
   db536:	6106      	str	r6, [r0, #16]
   db538:	e7ab      	b.n	db492 <__mdiff+0x24>
   db53a:	f855 8b04 	ldr.w	r8, [r5], #4
   db53e:	fa17 f488 	uxtah	r4, r7, r8
   db542:	1422      	asrs	r2, r4, #16
   db544:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   db548:	b2a4      	uxth	r4, r4
   db54a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   db54e:	f84e 4b04 	str.w	r4, [lr], #4
   db552:	1417      	asrs	r7, r2, #16
   db554:	e7e0      	b.n	db518 <__mdiff+0xaa>
   db556:	3e01      	subs	r6, #1
   db558:	e7ea      	b.n	db530 <__mdiff+0xc2>
	...

000db55c <__ulp>:
   db55c:	b082      	sub	sp, #8
   db55e:	ed8d 0b00 	vstr	d0, [sp]
   db562:	9b01      	ldr	r3, [sp, #4]
   db564:	4912      	ldr	r1, [pc, #72]	; (db5b0 <__ulp+0x54>)
   db566:	4019      	ands	r1, r3
   db568:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   db56c:	2900      	cmp	r1, #0
   db56e:	dd05      	ble.n	db57c <__ulp+0x20>
   db570:	2200      	movs	r2, #0
   db572:	460b      	mov	r3, r1
   db574:	ec43 2b10 	vmov	d0, r2, r3
   db578:	b002      	add	sp, #8
   db57a:	4770      	bx	lr
   db57c:	4249      	negs	r1, r1
   db57e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   db582:	ea4f 5021 	mov.w	r0, r1, asr #20
   db586:	f04f 0200 	mov.w	r2, #0
   db58a:	f04f 0300 	mov.w	r3, #0
   db58e:	da04      	bge.n	db59a <__ulp+0x3e>
   db590:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   db594:	fa41 f300 	asr.w	r3, r1, r0
   db598:	e7ec      	b.n	db574 <__ulp+0x18>
   db59a:	f1a0 0114 	sub.w	r1, r0, #20
   db59e:	291e      	cmp	r1, #30
   db5a0:	bfda      	itte	le
   db5a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   db5a6:	fa20 f101 	lsrle.w	r1, r0, r1
   db5aa:	2101      	movgt	r1, #1
   db5ac:	460a      	mov	r2, r1
   db5ae:	e7e1      	b.n	db574 <__ulp+0x18>
   db5b0:	7ff00000 	.word	0x7ff00000

000db5b4 <__b2d>:
   db5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db5b6:	6905      	ldr	r5, [r0, #16]
   db5b8:	f100 0714 	add.w	r7, r0, #20
   db5bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   db5c0:	1f2e      	subs	r6, r5, #4
   db5c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db5c6:	4620      	mov	r0, r4
   db5c8:	f7ff fd93 	bl	db0f2 <__hi0bits>
   db5cc:	f1c0 0320 	rsb	r3, r0, #32
   db5d0:	280a      	cmp	r0, #10
   db5d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; db650 <__b2d+0x9c>
   db5d6:	600b      	str	r3, [r1, #0]
   db5d8:	dc14      	bgt.n	db604 <__b2d+0x50>
   db5da:	f1c0 0e0b 	rsb	lr, r0, #11
   db5de:	fa24 f10e 	lsr.w	r1, r4, lr
   db5e2:	42b7      	cmp	r7, r6
   db5e4:	ea41 030c 	orr.w	r3, r1, ip
   db5e8:	bf34      	ite	cc
   db5ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db5ee:	2100      	movcs	r1, #0
   db5f0:	3015      	adds	r0, #21
   db5f2:	fa04 f000 	lsl.w	r0, r4, r0
   db5f6:	fa21 f10e 	lsr.w	r1, r1, lr
   db5fa:	ea40 0201 	orr.w	r2, r0, r1
   db5fe:	ec43 2b10 	vmov	d0, r2, r3
   db602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db604:	42b7      	cmp	r7, r6
   db606:	bf3a      	itte	cc
   db608:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db60c:	f1a5 0608 	subcc.w	r6, r5, #8
   db610:	2100      	movcs	r1, #0
   db612:	380b      	subs	r0, #11
   db614:	d017      	beq.n	db646 <__b2d+0x92>
   db616:	f1c0 0c20 	rsb	ip, r0, #32
   db61a:	fa04 f500 	lsl.w	r5, r4, r0
   db61e:	42be      	cmp	r6, r7
   db620:	fa21 f40c 	lsr.w	r4, r1, ip
   db624:	ea45 0504 	orr.w	r5, r5, r4
   db628:	bf8c      	ite	hi
   db62a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   db62e:	2400      	movls	r4, #0
   db630:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   db634:	fa01 f000 	lsl.w	r0, r1, r0
   db638:	fa24 f40c 	lsr.w	r4, r4, ip
   db63c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db640:	ea40 0204 	orr.w	r2, r0, r4
   db644:	e7db      	b.n	db5fe <__b2d+0x4a>
   db646:	ea44 030c 	orr.w	r3, r4, ip
   db64a:	460a      	mov	r2, r1
   db64c:	e7d7      	b.n	db5fe <__b2d+0x4a>
   db64e:	bf00      	nop
   db650:	3ff00000 	.word	0x3ff00000

000db654 <__d2b>:
   db654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db658:	4689      	mov	r9, r1
   db65a:	2101      	movs	r1, #1
   db65c:	ec57 6b10 	vmov	r6, r7, d0
   db660:	4690      	mov	r8, r2
   db662:	f7ff fc7f 	bl	daf64 <_Balloc>
   db666:	f3c7 550a 	ubfx	r5, r7, #20, #11
   db66a:	4604      	mov	r4, r0
   db66c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   db670:	bb35      	cbnz	r5, db6c0 <__d2b+0x6c>
   db672:	2e00      	cmp	r6, #0
   db674:	9301      	str	r3, [sp, #4]
   db676:	d028      	beq.n	db6ca <__d2b+0x76>
   db678:	4668      	mov	r0, sp
   db67a:	9600      	str	r6, [sp, #0]
   db67c:	f7ff fd59 	bl	db132 <__lo0bits>
   db680:	9900      	ldr	r1, [sp, #0]
   db682:	b300      	cbz	r0, db6c6 <__d2b+0x72>
   db684:	9a01      	ldr	r2, [sp, #4]
   db686:	f1c0 0320 	rsb	r3, r0, #32
   db68a:	fa02 f303 	lsl.w	r3, r2, r3
   db68e:	430b      	orrs	r3, r1
   db690:	40c2      	lsrs	r2, r0
   db692:	6163      	str	r3, [r4, #20]
   db694:	9201      	str	r2, [sp, #4]
   db696:	9b01      	ldr	r3, [sp, #4]
   db698:	61a3      	str	r3, [r4, #24]
   db69a:	2b00      	cmp	r3, #0
   db69c:	bf14      	ite	ne
   db69e:	2202      	movne	r2, #2
   db6a0:	2201      	moveq	r2, #1
   db6a2:	6122      	str	r2, [r4, #16]
   db6a4:	b1d5      	cbz	r5, db6dc <__d2b+0x88>
   db6a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   db6aa:	4405      	add	r5, r0
   db6ac:	f8c9 5000 	str.w	r5, [r9]
   db6b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db6b4:	f8c8 0000 	str.w	r0, [r8]
   db6b8:	4620      	mov	r0, r4
   db6ba:	b003      	add	sp, #12
   db6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db6c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db6c4:	e7d5      	b.n	db672 <__d2b+0x1e>
   db6c6:	6161      	str	r1, [r4, #20]
   db6c8:	e7e5      	b.n	db696 <__d2b+0x42>
   db6ca:	a801      	add	r0, sp, #4
   db6cc:	f7ff fd31 	bl	db132 <__lo0bits>
   db6d0:	9b01      	ldr	r3, [sp, #4]
   db6d2:	6163      	str	r3, [r4, #20]
   db6d4:	2201      	movs	r2, #1
   db6d6:	6122      	str	r2, [r4, #16]
   db6d8:	3020      	adds	r0, #32
   db6da:	e7e3      	b.n	db6a4 <__d2b+0x50>
   db6dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   db6e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db6e4:	f8c9 0000 	str.w	r0, [r9]
   db6e8:	6918      	ldr	r0, [r3, #16]
   db6ea:	f7ff fd02 	bl	db0f2 <__hi0bits>
   db6ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   db6f2:	e7df      	b.n	db6b4 <__d2b+0x60>

000db6f4 <__ratio>:
   db6f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db6f8:	4688      	mov	r8, r1
   db6fa:	4669      	mov	r1, sp
   db6fc:	4681      	mov	r9, r0
   db6fe:	f7ff ff59 	bl	db5b4 <__b2d>
   db702:	a901      	add	r1, sp, #4
   db704:	4640      	mov	r0, r8
   db706:	ec55 4b10 	vmov	r4, r5, d0
   db70a:	f7ff ff53 	bl	db5b4 <__b2d>
   db70e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db712:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db716:	eba3 0c02 	sub.w	ip, r3, r2
   db71a:	e9dd 3200 	ldrd	r3, r2, [sp]
   db71e:	1a9b      	subs	r3, r3, r2
   db720:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   db724:	ec51 0b10 	vmov	r0, r1, d0
   db728:	2b00      	cmp	r3, #0
   db72a:	bfd6      	itet	le
   db72c:	460a      	movle	r2, r1
   db72e:	462a      	movgt	r2, r5
   db730:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   db734:	468b      	mov	fp, r1
   db736:	462f      	mov	r7, r5
   db738:	bfd4      	ite	le
   db73a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   db73e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   db742:	4620      	mov	r0, r4
   db744:	ee10 2a10 	vmov	r2, s0
   db748:	465b      	mov	r3, fp
   db74a:	4639      	mov	r1, r7
   db74c:	f7fd f86e 	bl	d882c <__aeabi_ddiv>
   db750:	ec41 0b10 	vmov	d0, r0, r1
   db754:	b003      	add	sp, #12
   db756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db75a <__copybits>:
   db75a:	3901      	subs	r1, #1
   db75c:	b570      	push	{r4, r5, r6, lr}
   db75e:	1149      	asrs	r1, r1, #5
   db760:	6914      	ldr	r4, [r2, #16]
   db762:	3101      	adds	r1, #1
   db764:	f102 0314 	add.w	r3, r2, #20
   db768:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db76c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db770:	1f05      	subs	r5, r0, #4
   db772:	42a3      	cmp	r3, r4
   db774:	d30c      	bcc.n	db790 <__copybits+0x36>
   db776:	1aa3      	subs	r3, r4, r2
   db778:	3b11      	subs	r3, #17
   db77a:	f023 0303 	bic.w	r3, r3, #3
   db77e:	3211      	adds	r2, #17
   db780:	42a2      	cmp	r2, r4
   db782:	bf88      	it	hi
   db784:	2300      	movhi	r3, #0
   db786:	4418      	add	r0, r3
   db788:	2300      	movs	r3, #0
   db78a:	4288      	cmp	r0, r1
   db78c:	d305      	bcc.n	db79a <__copybits+0x40>
   db78e:	bd70      	pop	{r4, r5, r6, pc}
   db790:	f853 6b04 	ldr.w	r6, [r3], #4
   db794:	f845 6f04 	str.w	r6, [r5, #4]!
   db798:	e7eb      	b.n	db772 <__copybits+0x18>
   db79a:	f840 3b04 	str.w	r3, [r0], #4
   db79e:	e7f4      	b.n	db78a <__copybits+0x30>

000db7a0 <__any_on>:
   db7a0:	f100 0214 	add.w	r2, r0, #20
   db7a4:	6900      	ldr	r0, [r0, #16]
   db7a6:	114b      	asrs	r3, r1, #5
   db7a8:	4298      	cmp	r0, r3
   db7aa:	b510      	push	{r4, lr}
   db7ac:	db11      	blt.n	db7d2 <__any_on+0x32>
   db7ae:	dd0a      	ble.n	db7c6 <__any_on+0x26>
   db7b0:	f011 011f 	ands.w	r1, r1, #31
   db7b4:	d007      	beq.n	db7c6 <__any_on+0x26>
   db7b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db7ba:	fa24 f001 	lsr.w	r0, r4, r1
   db7be:	fa00 f101 	lsl.w	r1, r0, r1
   db7c2:	428c      	cmp	r4, r1
   db7c4:	d10b      	bne.n	db7de <__any_on+0x3e>
   db7c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db7ca:	4293      	cmp	r3, r2
   db7cc:	d803      	bhi.n	db7d6 <__any_on+0x36>
   db7ce:	2000      	movs	r0, #0
   db7d0:	bd10      	pop	{r4, pc}
   db7d2:	4603      	mov	r3, r0
   db7d4:	e7f7      	b.n	db7c6 <__any_on+0x26>
   db7d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db7da:	2900      	cmp	r1, #0
   db7dc:	d0f5      	beq.n	db7ca <__any_on+0x2a>
   db7de:	2001      	movs	r0, #1
   db7e0:	e7f6      	b.n	db7d0 <__any_on+0x30>

000db7e2 <_calloc_r>:
   db7e2:	b513      	push	{r0, r1, r4, lr}
   db7e4:	434a      	muls	r2, r1
   db7e6:	4611      	mov	r1, r2
   db7e8:	9201      	str	r2, [sp, #4]
   db7ea:	f7fb f81d 	bl	d6828 <_malloc_r>
   db7ee:	4604      	mov	r4, r0
   db7f0:	b118      	cbz	r0, db7fa <_calloc_r+0x18>
   db7f2:	9a01      	ldr	r2, [sp, #4]
   db7f4:	2100      	movs	r1, #0
   db7f6:	f7fd fd01 	bl	d91fc <memset>
   db7fa:	4620      	mov	r0, r4
   db7fc:	b002      	add	sp, #8
   db7fe:	bd10      	pop	{r4, pc}

000db800 <nan>:
   db800:	ed9f 0b01 	vldr	d0, [pc, #4]	; db808 <nan+0x8>
   db804:	4770      	bx	lr
   db806:	bf00      	nop
   db808:	00000000 	.word	0x00000000
   db80c:	7ff80000 	.word	0x7ff80000

000db810 <nanf>:
   db810:	ed9f 0a01 	vldr	s0, [pc, #4]	; db818 <nanf+0x8>
   db814:	4770      	bx	lr
   db816:	bf00      	nop
   db818:	7fc00000 	.word	0x7fc00000

000db81c <__ascii_wctomb>:
   db81c:	b149      	cbz	r1, db832 <__ascii_wctomb+0x16>
   db81e:	2aff      	cmp	r2, #255	; 0xff
   db820:	bf85      	ittet	hi
   db822:	238a      	movhi	r3, #138	; 0x8a
   db824:	6003      	strhi	r3, [r0, #0]
   db826:	700a      	strbls	r2, [r1, #0]
   db828:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   db82c:	bf98      	it	ls
   db82e:	2001      	movls	r0, #1
   db830:	4770      	bx	lr
   db832:	4608      	mov	r0, r1
   db834:	4770      	bx	lr
	...

000db838 <__env_lock>:
   db838:	4801      	ldr	r0, [pc, #4]	; (db840 <__env_lock+0x8>)
   db83a:	f7ff bb7e 	b.w	daf3a <__retarget_lock_acquire_recursive>
   db83e:	bf00      	nop
   db840:	2003e7ee 	.word	0x2003e7ee

000db844 <__env_unlock>:
   db844:	4801      	ldr	r0, [pc, #4]	; (db84c <__env_unlock+0x8>)
   db846:	f7ff bb7a 	b.w	daf3e <__retarget_lock_release_recursive>
   db84a:	bf00      	nop
   db84c:	2003e7ee 	.word	0x2003e7ee

000db850 <__aeabi_ldivmod>:
   db850:	b97b      	cbnz	r3, db872 <__aeabi_ldivmod+0x22>
   db852:	b972      	cbnz	r2, db872 <__aeabi_ldivmod+0x22>
   db854:	2900      	cmp	r1, #0
   db856:	bfbe      	ittt	lt
   db858:	2000      	movlt	r0, #0
   db85a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   db85e:	e006      	blt.n	db86e <__aeabi_ldivmod+0x1e>
   db860:	bf08      	it	eq
   db862:	2800      	cmpeq	r0, #0
   db864:	bf1c      	itt	ne
   db866:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   db86a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   db86e:	f7fd bb87 	b.w	d8f80 <__aeabi_idiv0>
   db872:	f1ad 0c08 	sub.w	ip, sp, #8
   db876:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   db87a:	2900      	cmp	r1, #0
   db87c:	db09      	blt.n	db892 <__aeabi_ldivmod+0x42>
   db87e:	2b00      	cmp	r3, #0
   db880:	db1a      	blt.n	db8b8 <__aeabi_ldivmod+0x68>
   db882:	f7fd fa1b 	bl	d8cbc <__udivmoddi4>
   db886:	f8dd e004 	ldr.w	lr, [sp, #4]
   db88a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db88e:	b004      	add	sp, #16
   db890:	4770      	bx	lr
   db892:	4240      	negs	r0, r0
   db894:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db898:	2b00      	cmp	r3, #0
   db89a:	db1b      	blt.n	db8d4 <__aeabi_ldivmod+0x84>
   db89c:	f7fd fa0e 	bl	d8cbc <__udivmoddi4>
   db8a0:	f8dd e004 	ldr.w	lr, [sp, #4]
   db8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db8a8:	b004      	add	sp, #16
   db8aa:	4240      	negs	r0, r0
   db8ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db8b0:	4252      	negs	r2, r2
   db8b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db8b6:	4770      	bx	lr
   db8b8:	4252      	negs	r2, r2
   db8ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db8be:	f7fd f9fd 	bl	d8cbc <__udivmoddi4>
   db8c2:	f8dd e004 	ldr.w	lr, [sp, #4]
   db8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db8ca:	b004      	add	sp, #16
   db8cc:	4240      	negs	r0, r0
   db8ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db8d2:	4770      	bx	lr
   db8d4:	4252      	negs	r2, r2
   db8d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db8da:	f7fd f9ef 	bl	d8cbc <__udivmoddi4>
   db8de:	f8dd e004 	ldr.w	lr, [sp, #4]
   db8e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db8e6:	b004      	add	sp, #16
   db8e8:	4252      	negs	r2, r2
   db8ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db8ee:	4770      	bx	lr

000db8f0 <__aeabi_d2lz>:
   db8f0:	b538      	push	{r3, r4, r5, lr}
   db8f2:	2200      	movs	r2, #0
   db8f4:	2300      	movs	r3, #0
   db8f6:	4604      	mov	r4, r0
   db8f8:	460d      	mov	r5, r1
   db8fa:	f7fd f8df 	bl	d8abc <__aeabi_dcmplt>
   db8fe:	b928      	cbnz	r0, db90c <__aeabi_d2lz+0x1c>
   db900:	4620      	mov	r0, r4
   db902:	4629      	mov	r1, r5
   db904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db908:	f7fd b9ba 	b.w	d8c80 <__aeabi_d2ulz>
   db90c:	4620      	mov	r0, r4
   db90e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db912:	f7fd f9b5 	bl	d8c80 <__aeabi_d2ulz>
   db916:	4240      	negs	r0, r0
   db918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db91c:	bd38      	pop	{r3, r4, r5, pc}
   db91e:	bf00      	nop

000db920 <dynalib_user>:
   db920:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db930:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   db940:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   db950:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   db960:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   db970:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   db980:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   db990:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   db9a0:	4400 6369 6e6f 656e 7463 6465 2500 2073     .Diconnected.%s 
   db9b0:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   db9c0:	6630 2525 0020 5441 432b 5546 3d4e 3631     0f%% .AT+CFUN=16
   db9d0:	0a0d 2500 2e34 6631 4320 2500 2e34 6631     ...%4.1f C.%4.1f
   db9e0:	2520 0025 3425 312e 2066 756c 0078 6925      %%.%4.1f lux.%i
   db9f0:	2520 0025 227b 6554 706d 7265 7461 7275      %%.{"Temperatur
   dba00:	2265 253a 2e34 6631 202c 4822 6d75 6469     e":%4.1f, "Humid
   dba10:	7469 2279 253a 2e34 6631 202c 4c22 6769     ity":%4.1f, "Lig
   dba20:	7468 654c 6576 226c 253a 2e34 6631 202c     htLevel":%4.1f, 
   dba30:	5322 696f 6d6c 696f 7473 7275 3165 3a22     "Soilmoisture1":
   dba40:	6925 202c 5322 696f 6d6c 696f 7473 7275     %i, "Soilmoistur
   dba50:	3265 3a22 6925 202c 7722 7461 7265 7250     e2":%i, "waterPr
   dba60:	7365 7573 6572 3a22 6925 202c 5322 6c6f     essure":%i, "Sol
   dba70:	6e65 696f 2264 253a 2c69 2220 6162 7474     enoid":%i, "batt
   dba80:	7265 2279 253a 2c69 2220 656b 3179 3a22     ery":%i, "key1":
   dba90:	2522 2273 202c 5222 7365 7465 2273 253a     "%s", "Resets":%
   dbaa0:	2c69 2220 6c41 7265 7374 3a22 6925 007d     i, "Alerts":%i}.
   dbab0:	7752 6e61 6164 532d 6e65 6573 412d 646e     Rwanda-Sense-And
   dbac0:	432d 6e6f 7274 6c6f 452d 616c 7473 6369     -Control-Elastic
   dbad0:	6100 7267 6369 6c75 7574 6572 612d 7377     .agriculture-aws
   dbae0:	772d 6265 6f68 6b6f 5200 6177 646e 2d61     -webhook.Rwanda-
   dbaf0:	6553 736e 2d65 6e41 2d64 6f43 746e 6f72     Sense-And-Contro
   dbb00:	006c 6f4e 4420 7461 0061 6552 7073 6e6f     l.No Data.Respon
   dbb10:	6573 5220 6365 6965 6576 0064 6e55 6e6b     se Received.Unkn
   dbb20:	776f 206e 6572 7073 6e6f 6573 7220 6365     own response rec
   dbb30:	7665 6569 2064 6925 5500 6962 6f64 7374     evied %i.Ubidots
   dbb40:	4820 6f6f 006b 0030 6f4e 5320 696f 206c      Hook.0.No Soil 
   dbb50:	6553 736e 726f 0073 6f43 666e 6769 4f00     Sensors.Config.O
   dbb60:	656e 5320 696f 206c 6553 736e 726f 5400     ne Soil Sensor.T
   dbb70:	6f77 5320 696f 206c 6553 736e 726f 0073     wo Soil Sensors.
   dbb80:	6f4e 5020 6572 7373 7275 2065 6553 736e     No Pressure Sens
   dbb90:	726f 5000 6572 7373 7275 2065 6553 736e     or.Pressure Sens
   dbba0:	726f 5020 6572 6573 746e 4e00 206f 694c     or Present.No Li
   dbbb0:	6867 2074 6553 736e 726f 4c00 6769 7468     ght Sensor.Light
   dbbc0:	5320 6e65 6f73 2072 7250 7365 6e65 0074      Sensor Present.
   dbbd0:	6f4e 5420 6d65 2070 202f 7548 696d 6964     No Temp / Humidi
   dbbe0:	7974 5320 6e65 6f73 2072 7250 7365 6e65     ty Sensor Presen
   dbbf0:	0074 6f4d 6e72 6e69 2067 6157 6574 6972     t.Morning Wateri
   dbc00:	676e 4420 7275 7461 6f69 206e 6573 2074     ng Duration set 
   dbc10:	6f74 2520 0069 7544 6172 6974 6e6f 4c00     to %i.Duration.L
   dbc20:	6e75 6863 5720 7461 7265 6e69 2067 7544     unch Watering Du
   dbc30:	6172 6974 6e6f 7320 7465 7420 206f 6925     ration set to %i
   dbc40:	4500 6576 696e 676e 5720 7461 7265 6e69     .Evening Waterin
   dbc50:	2067 7544 6172 6974 6e6f 7320 7465 7420     g Duration set t
   dbc60:	206f 6925 2500 2e32 6631 2520 0025 6553     o %i.%2.1f %%.Se
   dbc70:	2074 6556 6272 736f 2065 6f4d 6564 4300     t Verbose Mode.C
   dbc80:	656c 7261 6465 5620 7265 6f62 6573 4d20     leared Verbose M
   dbc90:	646f 0065 6f4c 2077 6f50 6577 2072 6f4d     ode.Low Power Mo
   dbca0:	6564 4e00 726f 616d 206c 704f 7265 7461     de.Normal Operat
   dbcb0:	6f69 736e 4f00 6570 206e 6874 2065 6156     ions.Open the Va
   dbcc0:	766c 0065 6157 6574 6972 676e 4300 6f6c     lve.Watering.Clo
   dbcd0:	6573 7420 6568 7620 6c61 6576 5300 6769     se the valve.Sig
   dbce0:	616e 006c 6552 6573 4374 756f 746e 5200     nal.ResetCount.R
   dbcf0:	6c65 6165 6573 5300 6174 6574 664f 6843     elease.StateOfCh
   dbd00:	0067 6142 7474 7265 4379 6e6f 6574 7478     g.BatteryContext
   dbd10:	5700 7461 7265 6e69 5467 7268 7365 6f68     .WateringThresho
   dbd20:	646c 5400 6d65 6570 6172 7574 6572 4800     ld.Temperature.H
   dbd30:	6d75 6469 7469 0079 754c 696d 6f6e 6973     umidity.Luminosi
   dbd40:	7974 5300 696f 4d6c 696f 7473 7275 3165     ty.SoilMoisture1
   dbd50:	5300 696f 4d6c 696f 7473 7275 3265 5000     .SoilMoisture2.P
   dbd60:	6572 7373 7275 0065 6157 6574 5772 6e69     ressure.WaterWin
   dbd70:	6f64 0077 654d 7361 7275 2d65 6f4e 0077     dow.Measure-Now.
   dbd80:	6f4c 5077 776f 7265 6f4d 6564 5600 7265     LowPowerMode.Ver
   dbd90:	6f62 6573 4d2d 646f 0065 6553 5374 696f     bose-Mode.SetSoi
   dbda0:	536c 6e65 6f73 7372 5300 7465 7250 7365     lSensors.SetPres
   dbdb0:	7573 6572 6553 736e 726f 5300 7465 694c     sureSensor.SetLi
   dbdc0:	6867 5374 6e65 6f73 0072 6f53 656c 6f6e     ghtSensor.Soleno
   dbdd0:	6469 7250 7365 6e65 0074 6553 5474 6d65     idPresent.SetTem
   dbde0:	4870 6d75 6469 6553 736e 726f 5300 7465     pHumidSensor.Set
   dbdf0:	7544 6172 6974 6e6f 6f4d 6e72 6e69 0067     DurationMorning.
   dbe00:	6553 4474 7275 7461 6f69 4c6e 6e75 6863     SetDurationLunch
   dbe10:	5300 7465 7544 6172 6974 6e6f 7645 6e65     .SetDurationEven
   dbe20:	6e69 0067 6553 5774 7461 7265 6854 6572     ing.SetWaterThre
   dbe30:	6873 6c6f 0064 6554 706d 482f 6d75 6469     shold.Temp/Humid
   dbe40:	7469 2079 6553 736e 726f 4620 6961 656c     ity Sensor Faile
   dbe50:	2064 6f74 4920 696e 6c61 7a69 2065 202d     d to Inialize - 
   dbe60:	6964 6173 6c62 6e69 0067 6146 6c69 6465     disabling.Failed
   dbe70:	7420 206f 6f63 6e6e 6365 0074 7453 7261      to connect.Star
   dbe80:	7574 0070 6f4c 6163 206c 6954 656d 4e00     tup.Local Time.N
   dbe90:	206f 6f53 656c 6f6e 6469 4120 7474 6361     o Solenoid Attac
   dbea0:	6568 0064 7246 6d6f 2520 2073 6f74 2520     hed.From %s to %
   dbeb0:	0073 7453 7461 2065 7254 6e61 6973 6974     s.State Transiti
   dbec0:	6e6f 4500 7272 726f 7420 6b61 6e69 2067     on.Error taking 
   dbed0:	654d 7361 7275 6d65 6e65 7374 5300 6174     Measurements.Sta
   dbee0:	6574 4400 6e6f 2065 6977 6874 7720 7461     te.Done with wat
   dbef0:	7265 6e69 2067 7963 6c63 0065 6f4e 2074     ering cycle.Not 
   dbf00:	6974 656d 7420 206f 6177 6574 0072 6157     time to water.Wa
   dbf10:	6574 6972 676e 4e20 6565 6564 2064 7562     tering Needed bu
   dbf20:	2074 6162 7474 7265 2079 6f74 206f 6f6c     t battery too lo
   dbf30:	0077 6157 6574 6972 676e 6e20 6565 6564     w.Watering neede
   dbf40:	2064 202d 7473 7261 6974 676e 7720 7461     d - starting wat
   dbf50:	7265 6e69 2067 7963 6c63 0065 6157 6574     ering cycle.Wate
   dbf60:	6972 676e 6e20 746f 6e20 6565 6564 0064     ring not needed.
   dbf70:	7073 7261 2f6b 6564 6976 6563 732f 7365     spark/device/ses
   dbf80:	6973 6e6f 652f 646e 5400 6b61 6e69 2067     sion/end.Taking 
   dbf90:	2061 614e 0070 6f4c 2077 6142 7474 7265     a Nap.Low Batter
   dbfa0:	2079 202d 6c53 6565 6970 676e 4500 7272     y - Sleeping.Err
   dbfb0:	726f 5320 6174 6574 2d20 5220 7365 7465     or State - Reset
   dbfc0:	4500 7272 726f 5320 6174 6574 2d20 5020     .Error State - P
   dbfd0:	776f 7265 4320 6379 656c 4500 7272 726f     ower Cycle.Error
   dbfe0:	5320 6174 6574 2d20 4620 6c75 206c 6f4d      State - Full Mo
   dbff0:	6564 206d 6552 6573 0074 0000               dem Reset...

000dbffc <_ZTV5Timer>:
	...
   dc004:	4335 000d 437d 000d 4125 000d b934 000d     5C..}C..%A..4...
   dc014:	b93c 000d b941 000d b946 000d b94a 000d     <...A...F...J...
   dc024:	b94f 000d b954 000d b958 000d b963 000d     O...T...X...c...
   dc034:	b96e 000d b934 000d b97a 000d b97e 000d     n...4...z...~...
   dc044:	b987 000d b98f 000d b99b 000d b9a1 000d     ................
   dc054:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dc064:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dc094 <_ZL13releaseNumber>:
   dc094:	3733 0000 0000 0000                         37......

000dc09c <_ZL16MemVersionNumber>:
   dc09c:	0002 0000                                   ....

000dc0a0 <_ZTVN5spark13CellularClassE>:
	...
   dc0a8:	6933 000d 6929 000d 691f 000d 68d5 000d     3i..)i...i...h..
   dc0b8:	6913 000d 6907 000d 68fb 000d 68f3 000d     .i...i...h...h..
   dc0c8:	68e9 000d 68df 000d 741d 000d               .h...h...t..

000dc0d4 <_ZTV14CellularSignal>:
	...
   dc0dc:	69e1 000d 69e7 000d 69e3 000d 69f5 000d     .i...i...i...i..
   dc0ec:	6a29 000d 6a55 000d 6a89 000d 6ad9 000d     )j..Uj...j...j..
   dc0fc:	fffc ffff 0000 0000 6aff 000d               .........j..

000dc108 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc110:	6b1f 000d 6b25 000d 6b63 000d 6b33 000d     .k..%k..ck..3k..
   dc120:	6b21 000d                                   !k..

000dc124 <_ZTVN5spark13EthernetClassE>:
	...
   dc12c:	714f 000d 7145 000d 713b 000d 7131 000d     Oq..Eq..;q..1q..
   dc13c:	7125 000d 7119 000d 710d 000d 7105 000d     %q...q...q...q..
   dc14c:	70fb 000d 70f1 000d 741d 000d               .p...p...t..

000dc158 <_ZTV7TwoWire>:
	...
   dc160:	716d 000d 71b7 000d 718f 000d 716f 000d     mq...q...q..oq..
   dc170:	7197 000d 719f 000d 71a7 000d 71af 000d     .q...q...q...q..

000dc180 <_ZTV9IPAddress>:
	...
   dc188:	72cf 000d 72bf 000d 72c1 000d 7061 0070     .r...r...r..app.

000dc198 <_ZTVN5spark12NetworkClassE>:
	...
   dc1a0:	73b5 000d 73bf 000d 73c9 000d 73d3 000d     .s...s...s...s..
   dc1b0:	73dd 000d 73e9 000d 73f5 000d 7401 000d     .s...s...s...t..
   dc1c0:	7409 000d 7413 000d 741d 000d 6977 6972     .t...t...t..wiri
   dc1d0:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   dc1e0:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   dc1f0:	6920 766e 6c61 6469 002e 5925 252d 2d6d      invalid..%Y-%m-
   dc200:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   dc210:	7463 6d69 0065 0000                         ctime...

000dc218 <_ZTV11USARTSerial>:
	...
   dc220:	7c9d 000d 7d09 000d 7ce1 000d 7663 000d     .|...}...|..cv..
   dc230:	7cb1 000d 7ccd 000d 7cbf 000d 7cdb 000d     .|...|...|...|..
   dc240:	7c9f 000d 7ca3 000d                         .|...|..

000dc248 <_ZTV9USBSerial>:
	...
   dc250:	7d9d 000d 7e05 000d 7ddb 000d 7663 000d     .}...~...}..cv..
   dc260:	7dcd 000d 7d9f 000d 7daf 000d 7dff 000d     .}...}...}...}..
   dc270:	7dbf 000d 7d99 000d                         .}...}..

000dc278 <_ZSt7nothrow>:
   dc278:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   dc288:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000dc299 <day_name.6145>:
   dc299:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc2a9:	6972 6153                                    riSat

000dc2ae <mon_name.6146>:
   dc2ae:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc2be:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc2ce:	4476 6365 0000                              vDec..

000dc2d4 <__month_lengths>:
   dc2d4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc2e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc2f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc304:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc314:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc324:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc334:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000dc340 <fpi.7566>:
   dc340:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc350:	0000 0000                                   ....

000dc354 <fpinan.7602>:
   dc354:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc364:	0000 0000                                   ....

000dc368 <tinytens>:
   dc368:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc378:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc388:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dc398:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dc3a8:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dc3b8:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dc3c8:	2575 006e                                   u%n.

000dc3cc <_ctype_>:
   dc3cc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc3dc:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc3ec:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc3fc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc40c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc41c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc42c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc43c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc44c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc4d0 <_C_numeric_locale>:
   dc4d0:	c1f8 000d b9d2 000d e280 2003 4f50 4953     ........... POSI
   dc4e0:	0058 0000 0000 0000                         X.......

000dc4e8 <__mprec_bigtens>:
   dc4e8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc4f8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc508:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc510 <__mprec_tens>:
   dc510:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc520:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc530:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc540:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc550:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc560:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc570:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc580:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc590:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc5a0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc5b0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc5c0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc5d0:	9db4 79d9 7843 44ea                         ...yCx.D

000dc5d8 <p05.7490>:
   dc5d8:	0005 0000 0019 0000 007d 0000               ........}...

000dc5e4 <link_const_variable_data_end>:
   dc5e4:	000d5d79 	.word	0x000d5d79
   dc5e8:	000d68ad 	.word	0x000d68ad
   dc5ec:	000d69b1 	.word	0x000d69b1
   dc5f0:	000d7159 	.word	0x000d7159
   dc5f4:	000d73a5 	.word	0x000d73a5
   dc5f8:	000d74f1 	.word	0x000d74f1
   dc5fc:	000d772d 	.word	0x000d772d
   dc600:	000d7a89 	.word	0x000d7a89
   dc604:	000d7c89 	.word	0x000d7c89

000dc608 <link_constructors_end>:
	...
