
/Users/chipmc/Documents/Maker/Particle/Projects/Rwanda-Sense-and-Control/target/2.0.0-rc.3/boron/Rwanda-Sense-and-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007800  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db820  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000260  2003e1c8  000db824  0001e1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003c8  2003e428  2003e428  0002e428  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dba84  000dba84  0002ba84  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dbab0  000dbab0  0002bab0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017fa03  00000000  00000000  0002bab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000188e6  00000000  00000000  001ab4b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030765  00000000  00000000  001c3d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002eb0  00000000  00000000  001f4502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008a10  00000000  00000000  001f73b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003abc0  00000000  00000000  001ffdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003f8c1  00000000  00000000  0023a982  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010eb6e  00000000  00000000  0027a243  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008604  00000000  00000000  00388db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe5f 	bl	d8cf4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe67 	bl	d8d10 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1c8 	.word	0x2003e1c8
   d404c:	000db824 	.word	0x000db824
   d4050:	2003e428 	.word	0x2003e428
   d4054:	2003e428 	.word	0x2003e428
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 ff61 	bl	d7f28 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db7fc 	.word	0x000db7fc
   d4080:	000db820 	.word	0x000db820

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b852 	b.w	d512c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fb3d 	bl	d5708 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bf0b 	b.w	d7eac <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bb73 	b.w	d6780 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bb71 	b.w	d6780 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bb77 	b.w	d6790 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z16wateringTimerISRv>:
  currentStatusWriteNeeded = true;
  return true;
}

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40b4:	4b01      	ldr	r3, [pc, #4]	; (d40bc <_Z16wateringTimerISRv+0x8>)
   d40b6:	2201      	movs	r2, #1
   d40b8:	701a      	strb	r2, [r3, #0]
}
   d40ba:	4770      	bx	lr
   d40bc:	2003e5b4 	.word	0x2003e5b4

000d40c0 <_Z13awakeTimerISRv>:

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40c0:	4a02      	ldr	r2, [pc, #8]	; (d40cc <_Z13awakeTimerISRv+0xc>)
   d40c2:	2301      	movs	r3, #1
   d40c4:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40c6:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z13awakeTimerISRv+0x10>)
   d40c8:	7013      	strb	r3, [r2, #0]
}
   d40ca:	4770      	bx	lr
   d40cc:	2003e53c 	.word	0x2003e53c
   d40d0:	2003e570 	.word	0x2003e570

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40ee <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40ee:	b538      	push	{r3, r4, r5, lr}
   d40f0:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40f2:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40f4:	b128      	cbz	r0, d4102 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40f6:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40f8:	210c      	movs	r1, #12
   d40fa:	f004 f88c 	bl	d8216 <_ZdlPvj>
            wakeupSource = next;
   d40fe:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4100:	e7f8      	b.n	d40f4 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4102:	4620      	mov	r0, r4
   d4104:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4108 <_Z10measureNow6String>:
{
   d4108:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410a:	4904      	ldr	r1, [pc, #16]	; (d411c <_Z10measureNow6String+0x14>)
   d410c:	f003 fb83 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4110:	b118      	cbz	r0, d411a <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d4112:	4b03      	ldr	r3, [pc, #12]	; (d4120 <_Z10measureNow6String+0x18>)
   d4114:	2203      	movs	r2, #3
   d4116:	701a      	strb	r2, [r3, #0]
    return 1;
   d4118:	2001      	movs	r0, #1
}
   d411a:	bd08      	pop	{r3, pc}
   d411c:	000dac68 	.word	0x000dac68
   d4120:	2003e534 	.word	0x2003e534

000d4124 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4124:	6943      	ldr	r3, [r0, #20]
   d4126:	b113      	cbz	r3, d412e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4128:	6983      	ldr	r3, [r0, #24]
   d412a:	300c      	adds	r0, #12
   d412c:	4718      	bx	r3
            callback();
        }
    }
   d412e:	4770      	bx	lr

000d4130 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4130:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4132:	2100      	movs	r1, #0
   d4134:	4604      	mov	r4, r0
   d4136:	4608      	mov	r0, r1
   d4138:	f002 f806 	bl	d6148 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d413c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d413e:	4620      	mov	r0, r4
   d4140:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4142:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4144:	f002 f818 	bl	d6178 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4148:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d414a:	b10c      	cbz	r4, d4150 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d414c:	2301      	movs	r3, #1
   d414e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4150:	2100      	movs	r1, #0
   d4152:	2001      	movs	r0, #1
   d4154:	f001 fff8 	bl	d6148 <os_thread_scheduling>
            }
        }
        if (t) {
   d4158:	b12c      	cbz	r4, d4166 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d415a:	6823      	ldr	r3, [r4, #0]
   d415c:	4620      	mov	r0, r4
   d415e:	689b      	ldr	r3, [r3, #8]
   d4160:	4798      	blx	r3
            t->running = false;
   d4162:	2300      	movs	r3, #0
   d4164:	7123      	strb	r3, [r4, #4]
        }
    }
   d4166:	b002      	add	sp, #8
   d4168:	bd10      	pop	{r4, pc}

000d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d416a:	2300      	movs	r3, #0
   d416c:	2202      	movs	r2, #2
   d416e:	f002 ba57 	b.w	d6620 <spark_variable>

000d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
   d4172:	2300      	movs	r3, #0
   d4174:	2204      	movs	r2, #4
   d4176:	f002 ba53 	b.w	d6620 <spark_variable>

000d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d417a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d417c:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4180:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4182:	f88d 5000 	strb.w	r5, [sp]
   d4186:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4188:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d418a:	f002 fe1f 	bl	d6dcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d418e:	4620      	mov	r0, r4
   d4190:	b003      	add	sp, #12
   d4192:	bd30      	pop	{r4, r5, pc}

000d4194 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4198:	6800      	ldr	r0, [r0, #0]
   d419a:	b108      	cbz	r0, d41a0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d419c:	f002 faf8 	bl	d6790 <free>
class SystemClass {
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d41a4:	b510      	push	{r4, lr}
      if (_M_manager)
   d41a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d41a8:	4604      	mov	r4, r0
      if (_M_manager)
   d41aa:	b113      	cbz	r3, d41b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41ac:	2203      	movs	r2, #3
   d41ae:	4601      	mov	r1, r0
   d41b0:	4798      	blx	r3
    }
   d41b2:	4620      	mov	r0, r4
   d41b4:	bd10      	pop	{r4, pc}
	...

000d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d41ba:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41bc:	4605      	mov	r5, r0
   d41be:	460f      	mov	r7, r1
   d41c0:	4616      	mov	r6, r2
        if (valid_) {
   d41c2:	b18b      	cbz	r3, d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41c4:	6803      	ldr	r3, [r0, #0]
   d41c6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41c8:	b183      	cbz	r3, d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41ca:	889a      	ldrh	r2, [r3, #4]
   d41cc:	2a01      	cmp	r2, #1
   d41ce:	d006      	beq.n	d41de <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41d0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41d2:	e7f9      	b.n	d41c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41d4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41d6:	b14b      	cbz	r3, d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41d8:	889a      	ldrh	r2, [r3, #4]
   d41da:	2a01      	cmp	r2, #1
   d41dc:	d1fa      	bne.n	d41d4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41de:	b12b      	cbz	r3, d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d41e0:	899a      	ldrh	r2, [r3, #12]
   d41e2:	42ba      	cmp	r2, r7
   d41e4:	d1f6      	bne.n	d41d4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d41e6:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d41e8:	4628      	mov	r0, r5
   d41ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41ec:	490a      	ldr	r1, [pc, #40]	; (d4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d41ee:	2010      	movs	r0, #16
   d41f0:	f004 f813 	bl	d821a <_ZnwjRKSt9nothrow_t>
   d41f4:	4604      	mov	r4, r0
   d41f6:	b168      	cbz	r0, d4214 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41f8:	2210      	movs	r2, #16
   d41fa:	2100      	movs	r1, #0
   d41fc:	f004 fd88 	bl	d8d10 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4200:	4b06      	ldr	r3, [pc, #24]	; (d421c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4202:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4204:	2301      	movs	r3, #1
   d4206:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4208:	692b      	ldr	r3, [r5, #16]
   d420a:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d420c:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d420e:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4210:	612c      	str	r4, [r5, #16]
   d4212:	e7e9      	b.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4214:	7528      	strb	r0, [r5, #20]
                return *this;
   d4216:	e7e7      	b.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4218:	000db530 	.word	0x000db530
   d421c:	00030010 	.word	0x00030010

000d4220 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4220:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4222:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4224:	4605      	mov	r5, r0
   d4226:	460e      	mov	r6, r1
        if (valid_) {
   d4228:	b1cb      	cbz	r3, d425e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d422a:	6803      	ldr	r3, [r0, #0]
   d422c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d422e:	b123      	cbz	r3, d423a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4230:	889a      	ldrh	r2, [r3, #4]
   d4232:	2a04      	cmp	r2, #4
   d4234:	d017      	beq.n	d4266 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4236:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4238:	e7f9      	b.n	d422e <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d423a:	490c      	ldr	r1, [pc, #48]	; (d426c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d423c:	2010      	movs	r0, #16
   d423e:	f003 ffec 	bl	d821a <_ZnwjRKSt9nothrow_t>
   d4242:	4604      	mov	r4, r0
   d4244:	b168      	cbz	r0, d4262 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4246:	2210      	movs	r2, #16
   d4248:	2100      	movs	r1, #0
   d424a:	f004 fd61 	bl	d8d10 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d424e:	4b08      	ldr	r3, [pc, #32]	; (d4270 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4250:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4252:	2304      	movs	r3, #4
   d4254:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4256:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4258:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d425a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d425e:	4628      	mov	r0, r5
   d4260:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4262:	7528      	strb	r0, [r5, #20]
                return *this;
   d4264:	e7fb      	b.n	d425e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4266:	60de      	str	r6, [r3, #12]
                return *this;
   d4268:	e7f9      	b.n	d425e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d426a:	bf00      	nop
   d426c:	000db530 	.word	0x000db530
   d4270:	00030010 	.word	0x00030010

000d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4274:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4276:	4801      	ldr	r0, [pc, #4]	; (d427c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4278:	f002 bc90 	b.w	d6b9c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d427c:	000d6b71 	.word	0x000d6b71

000d4280 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4280:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4282:	468c      	mov	ip, r1
   d4284:	2500      	movs	r5, #0
   d4286:	4914      	ldr	r1, [pc, #80]	; (d42d8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   d4288:	7105      	strb	r5, [r0, #4]
   d428a:	4604      	mov	r4, r0
   d428c:	6085      	str	r5, [r0, #8]
   d428e:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4290:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4294:	b085      	sub	sp, #20
   d4296:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4298:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d429c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42a0:	e896 0003 	ldmia.w	r6, {r0, r1}
   d42a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42a8:	e897 0003 	ldmia.w	r7, {r0, r1}
   d42ac:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b0:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d42b2:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d42b4:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b6:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42b8:	6095      	str	r5, [r2, #8]
   d42ba:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42bc:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d42be:	e9cd 3500 	strd	r3, r5, [sp]
   d42c2:	4a06      	ldr	r2, [pc, #24]	; (d42dc <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42c4:	4623      	mov	r3, r4
   d42c6:	4661      	mov	r1, ip
   d42c8:	f104 0008 	add.w	r0, r4, #8
   d42cc:	f001 ff44 	bl	d6158 <os_timer_create>
    }
   d42d0:	4620      	mov	r0, r4
   d42d2:	b005      	add	sp, #20
   d42d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42d6:	bf00      	nop
   d42d8:	000db2bc 	.word	0x000db2bc
   d42dc:	000d4131 	.word	0x000d4131

000d42e0 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42e0:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42e2:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42e4:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42e6:	2100      	movs	r1, #0
   d42e8:	b140      	cbz	r0, d42fc <_ZN5Timer12changePeriodEjj+0x1c>
   d42ea:	e9cd 2100 	strd	r2, r1, [sp]
   d42ee:	460a      	mov	r2, r1
   d42f0:	2103      	movs	r1, #3
   d42f2:	f001 ff49 	bl	d6188 <os_timer_change>
   d42f6:	fab0 f080 	clz	r0, r0
   d42fa:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42fc:	b003      	add	sp, #12
   d42fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d4302 <_ZNK5Timer8isActiveEv>:
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4302:	b508      	push	{r3, lr}
    bool isValid() const { return handle!=nullptr; }
   d4304:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4306:	b128      	cbz	r0, d4314 <_ZNK5Timer8isActiveEv+0x12>
   d4308:	2100      	movs	r1, #0
   d430a:	f001 ff55 	bl	d61b8 <os_timer_is_active>
   d430e:	3800      	subs	r0, #0
   d4310:	bf18      	it	ne
   d4312:	2001      	movne	r0, #1
   d4314:	bd08      	pop	{r3, pc}

000d4316 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d4316:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4318:	6880      	ldr	r0, [r0, #8]
   d431a:	2300      	movs	r3, #0
   d431c:	b138      	cbz	r0, d432e <_ZN5Timer5_stopEjb+0x18>
   d431e:	e9cd 1300 	strd	r1, r3, [sp]
   d4322:	2102      	movs	r1, #2
   d4324:	f001 ff30 	bl	d6188 <os_timer_change>
   d4328:	fab0 f080 	clz	r0, r0
   d432c:	0940      	lsrs	r0, r0, #5
    }
   d432e:	b003      	add	sp, #12
   d4330:	f85d fb04 	ldr.w	pc, [sp], #4

000d4334 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4334:	b538      	push	{r3, r4, r5, lr}
   d4336:	4b10      	ldr	r3, [pc, #64]	; (d4378 <_ZN5TimerD1Ev+0x44>)
   d4338:	6003      	str	r3, [r0, #0]
        if (handle) {
   d433a:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d433c:	4604      	mov	r4, r0
        if (handle) {
   d433e:	b1a3      	cbz	r3, d436a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4344:	2200      	movs	r2, #0
   d4346:	f7ff ffe6 	bl	d4316 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d434a:	68a0      	ldr	r0, [r4, #8]
   d434c:	2100      	movs	r1, #0
   d434e:	f001 ff3b 	bl	d61c8 <os_timer_set_id>
            while (running) {
   d4352:	7923      	ldrb	r3, [r4, #4]
   d4354:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4358:	b113      	cbz	r3, d4360 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d435a:	f001 feed 	bl	d6138 <os_thread_yield>
            while (running) {
   d435e:	e7f8      	b.n	d4352 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4360:	68a0      	ldr	r0, [r4, #8]
   d4362:	4629      	mov	r1, r5
   d4364:	f001 ff00 	bl	d6168 <os_timer_destroy>
            handle = nullptr;
   d4368:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d436a:	f104 000c 	add.w	r0, r4, #12
   d436e:	f7ff ff19 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
    }
   d4372:	4620      	mov	r0, r4
   d4374:	bd38      	pop	{r3, r4, r5, pc}
   d4376:	bf00      	nop
   d4378:	000db2bc 	.word	0x000db2bc

000d437c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d437c:	b510      	push	{r4, lr}
   d437e:	4604      	mov	r4, r0
    }
   d4380:	f7ff ffd8 	bl	d4334 <_ZN5TimerD1Ev>
   d4384:	4620      	mov	r0, r4
   d4386:	211c      	movs	r1, #28
   d4388:	f003 ff45 	bl	d8216 <_ZdlPvj>
   d438c:	4620      	mov	r0, r4
   d438e:	bd10      	pop	{r4, pc}

000d4390 <_ZN5Timer5startEj>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4392:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4394:	2200      	movs	r2, #0
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4396:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4398:	4611      	mov	r1, r2
   d439a:	f7ff ffbc 	bl	d4316 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d439e:	68a8      	ldr	r0, [r5, #8]
   d43a0:	2300      	movs	r3, #0
   d43a2:	b140      	cbz	r0, d43b6 <_ZN5Timer5startEj+0x26>
   d43a4:	e9cd 4300 	strd	r4, r3, [sp]
   d43a8:	461a      	mov	r2, r3
   d43aa:	4619      	mov	r1, r3
   d43ac:	f001 feec 	bl	d6188 <os_timer_change>
   d43b0:	fab0 f080 	clz	r0, r0
   d43b4:	0940      	lsrs	r0, r0, #5
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43b6:	b003      	add	sp, #12
   d43b8:	bd30      	pop	{r4, r5, pc}
	...

000d43bc <fastPinGetPinmap>:

/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

inline const Hal_Pin_Info* fastPinGetPinmap() {
   d43bc:	b538      	push	{r3, r4, r5, lr}
    static Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43be:	4c0a      	ldr	r4, [pc, #40]	; (d43e8 <fastPinGetPinmap+0x2c>)
   d43c0:	4d0a      	ldr	r5, [pc, #40]	; (d43ec <fastPinGetPinmap+0x30>)
   d43c2:	7823      	ldrb	r3, [r4, #0]
   d43c4:	f3bf 8f5b 	dmb	ish
   d43c8:	f013 0f01 	tst.w	r3, #1
   d43cc:	d109      	bne.n	d43e2 <fastPinGetPinmap+0x26>
   d43ce:	4620      	mov	r0, r4
   d43d0:	f7ff fe67 	bl	d40a2 <__cxa_guard_acquire>
   d43d4:	b128      	cbz	r0, d43e2 <fastPinGetPinmap+0x26>
   d43d6:	f001 ff5f 	bl	d6298 <HAL_Pin_Map>
   d43da:	6028      	str	r0, [r5, #0]
   d43dc:	4620      	mov	r0, r4
   d43de:	f7ff fe65 	bl	d40ac <__cxa_guard_release>
    return pinMap;
}
   d43e2:	6828      	ldr	r0, [r5, #0]
   d43e4:	bd38      	pop	{r3, r4, r5, pc}
   d43e6:	bf00      	nop
   d43e8:	2003e42c 	.word	0x2003e42c
   d43ec:	2003e430 	.word	0x2003e430

000d43f0 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d43f0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43f2:	4d19      	ldr	r5, [pc, #100]	; (d4458 <_Z17getSignalStrengthv+0x68>)
   d43f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d43f6:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d43f8:	ac04      	add	r4, sp, #16
   d43fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d43fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4400:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4404:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4408:	4914      	ldr	r1, [pc, #80]	; (d445c <_Z17getSignalStrengthv+0x6c>)
   d440a:	a80e      	add	r0, sp, #56	; 0x38
   d440c:	f002 fa7a 	bl	d6904 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4410:	a80e      	add	r0, sp, #56	; 0x38
   d4412:	f002 faca 	bl	d69aa <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4416:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4418:	a80e      	add	r0, sp, #56	; 0x38
   d441a:	f002 facf 	bl	d69bc <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d441e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4420:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4424:	f002 fafa 	bl	d6a1c <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4428:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d442a:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d442e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4432:	f004 f85d 	bl	d84f0 <__aeabi_f2d>
   d4436:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d443a:	4628      	mov	r0, r5
   d443c:	f004 f858 	bl	d84f0 <__aeabi_f2d>
   d4440:	e9cd 0100 	strd	r0, r1, [sp]
   d4444:	4a06      	ldr	r2, [pc, #24]	; (d4460 <_Z17getSignalStrengthv+0x70>)
   d4446:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d444a:	4806      	ldr	r0, [pc, #24]	; (d4464 <_Z17getSignalStrengthv+0x74>)
   d444c:	2140      	movs	r1, #64	; 0x40
   d444e:	f002 f9b7 	bl	d67c0 <snprintf>
}
   d4452:	b019      	add	sp, #100	; 0x64
   d4454:	bd30      	pop	{r4, r5, pc}
   d4456:	bf00      	nop
   d4458:	000db2c8 	.word	0x000db2c8
   d445c:	2003e5c0 	.word	0x2003e5c0
   d4460:	000dac9d 	.word	0x000dac9d
   d4464:	2003e434 	.word	0x2003e434

000d4468 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d446c:	481b      	ldr	r0, [pc, #108]	; (d44dc <_Z17connectToParticlev+0x74>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d446e:	f8df a070 	ldr.w	sl, [pc, #112]	; d44e0 <_Z17connectToParticlev+0x78>
   d4472:	6840      	ldr	r0, [r0, #4]
   d4474:	2300      	movs	r3, #0
   d4476:	461a      	mov	r2, r3
   d4478:	4619      	mov	r1, r3
   d447a:	f002 f951 	bl	d6720 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d447e:	f002 f8e7 	bl	d6650 <spark_cloud_flag_connect>
   d4482:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4486:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d448a:	f240 38e7 	movw	r8, #999	; 0x3e7
   d448e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4492:	2000      	movs	r0, #0
   d4494:	f001 fef0 	bl	d6278 <hal_timer_millis>
   d4498:	4605      	mov	r5, r0
   d449a:	2000      	movs	r0, #0
   d449c:	f001 feec 	bl	d6278 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d44a0:	1b46      	subs	r6, r0, r5
   d44a2:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d44a6:	45b9      	cmp	r9, r7
   d44a8:	bf08      	it	eq
   d44aa:	45b0      	cmpeq	r8, r6
   d44ac:	d305      	bcc.n	d44ba <_Z17connectToParticlev+0x52>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44ae:	f002 f8d7 	bl	d6660 <spark_cloud_flag_connected>
   d44b2:	b910      	cbnz	r0, d44ba <_Z17connectToParticlev+0x52>
            spark_process();
   d44b4:	f002 f8c4 	bl	d6640 <spark_process>
        while (_while() && !_condition()) {
   d44b8:	e7ef      	b.n	d449a <_Z17connectToParticlev+0x32>
   d44ba:	f002 f8d1 	bl	d6660 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44be:	b118      	cbz	r0, d44c8 <_Z17connectToParticlev+0x60>
}
   d44c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d44c4:	f002 b8cc 	b.w	d6660 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   d44c8:	f001 fea6 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d44cc:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d44d0:	f002 f8b6 	bl	d6640 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d44d4:	3c01      	subs	r4, #1
   d44d6:	d1dc      	bne.n	d4492 <_Z17connectToParticlev+0x2a>
   d44d8:	e7f2      	b.n	d44c0 <_Z17connectToParticlev+0x58>
   d44da:	bf00      	nop
   d44dc:	2003e5c0 	.word	0x2003e5c0
   d44e0:	2003e7b4 	.word	0x2003e7b4

000d44e4 <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   d44e4:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44e6:	f002 f8bb 	bl	d6660 <spark_cloud_flag_connected>
    return !Particle.connected();
   d44ea:	f080 0001 	eor.w	r0, r0, #1
}
   d44ee:	b2c0      	uxtb	r0, r0
   d44f0:	bd08      	pop	{r3, pc}
	...

000d44f4 <_Z22disconnectFromParticlev>:
{
   d44f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d44f8:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d44fa:	2400      	movs	r4, #0
  Particle.disconnect();
   d44fc:	a801      	add	r0, sp, #4
   d44fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4502:	f88d 400c 	strb.w	r4, [sp, #12]
   d4506:	f002 fb5a 	bl	d6bbe <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d450a:	4620      	mov	r0, r4
   d450c:	f001 feb4 	bl	d6278 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4510:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4514:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4516:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d451a:	2000      	movs	r0, #0
   d451c:	f001 feac 	bl	d6278 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4520:	1b46      	subs	r6, r0, r5
   d4522:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4526:	45b9      	cmp	r9, r7
   d4528:	bf08      	it	eq
   d452a:	45b0      	cmpeq	r8, r6
   d452c:	d305      	bcc.n	d453a <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d452e:	f7ff ffd9 	bl	d44e4 <_Z12notConnectedv>
   d4532:	b910      	cbnz	r0, d453a <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d4534:	f002 f884 	bl	d6640 <spark_process>
        while (_while() && !_condition()) {
   d4538:	e7ef      	b.n	d451a <_Z22disconnectFromParticlev+0x26>
   d453a:	f7ff ffd3 	bl	d44e4 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d453e:	4807      	ldr	r0, [pc, #28]	; (d455c <_Z22disconnectFromParticlev+0x68>)
   d4540:	2300      	movs	r3, #0
   d4542:	461a      	mov	r2, r3
   d4544:	4619      	mov	r1, r3
   d4546:	6840      	ldr	r0, [r0, #4]
   d4548:	f002 f8f2 	bl	d6730 <network_off>
  delay(2000);                                                    // Bummer but only should happen once an hour
   d454c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4550:	f002 f96a 	bl	d6828 <delay>
}
   d4554:	2001      	movs	r0, #1
   d4556:	b005      	add	sp, #20
   d4558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d455c:	2003e5c0 	.word	0x2003e5c0

000d4560 <_Z9isDayTimev>:
bool isDayTime() {
   d4560:	b508      	push	{r3, lr}
  if (Time.hour() >= 19) return 0;
   d4562:	f003 fb5d 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d4566:	2812      	cmp	r0, #18
   d4568:	dc06      	bgt.n	d4578 <_Z9isDayTimev+0x18>
  else if (Time.hour() < 6) return 0;
   d456a:	f003 fb59 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d456e:	2805      	cmp	r0, #5
   d4570:	bfd4      	ite	le
   d4572:	2000      	movle	r0, #0
   d4574:	2001      	movgt	r0, #1
}
   d4576:	bd08      	pop	{r3, pc}
  if (Time.hour() >= 19) return 0;
   d4578:	2000      	movs	r0, #0
   d457a:	e7fc      	b.n	d4576 <_Z9isDayTimev+0x16>

000d457c <_Z14enableChargingb>:
{
   d457c:	b513      	push	{r0, r1, r4, lr}
   d457e:	4604      	mov	r4, r0
  PMIC pmic(true);
   d4580:	2101      	movs	r1, #1
   d4582:	a801      	add	r0, sp, #4
   d4584:	f002 ffa9 	bl	d74da <_ZN4PMICC1Eb>
    pmic.enableCharging();
   d4588:	a801      	add	r0, sp, #4
  if(enableCharge) {
   d458a:	b13c      	cbz	r4, d459c <_Z14enableChargingb+0x20>
    pmic.enableCharging();
   d458c:	f003 f821 	bl	d75d2 <_ZN4PMIC14enableChargingEv>
  PMIC pmic(true);
   d4590:	a801      	add	r0, sp, #4
   d4592:	f002 ffb1 	bl	d74f8 <_ZN4PMICD1Ev>
}
   d4596:	4620      	mov	r0, r4
   d4598:	b002      	add	sp, #8
   d459a:	bd10      	pop	{r4, pc}
    pmic.disableCharging();
   d459c:	f003 f830 	bl	d7600 <_ZN4PMIC15disableChargingEv>
    return FALSE;
   d45a0:	e7f6      	b.n	d4590 <_Z14enableChargingb+0x14>
	...

000d45a4 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d45a4:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d45a6:	2420      	movs	r4, #32
   d45a8:	b090      	sub	sp, #64	; 0x40
   d45aa:	4622      	mov	r2, r4
   d45ac:	2100      	movs	r1, #0
   d45ae:	4668      	mov	r0, sp
   d45b0:	f004 fbae 	bl	d8d10 <memset>
   d45b4:	4622      	mov	r2, r4
   d45b6:	2100      	movs	r1, #0
   d45b8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d45bc:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d45c0:	f004 fba6 	bl	d8d10 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d45c4:	2100      	movs	r1, #0
   d45c6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d45ca:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d45ce:	f002 f809 	bl	d65e4 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d45d2:	4b15      	ldr	r3, [pc, #84]	; (d4628 <_Z14setPowerConfigv+0x84>)
   d45d4:	7959      	ldrb	r1, [r3, #5]
   d45d6:	b1c1      	cbz	r1, d460a <_Z14setPowerConfigv+0x66>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45d8:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d45dc:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d45e0:	4b12      	ldr	r3, [pc, #72]	; (d462c <_Z14setPowerConfigv+0x88>)
   d45e2:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45e4:	f241 0370 	movw	r3, #4208	; 0x1070
   d45e8:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45ec:	9b00      	ldr	r3, [sp, #0]
   d45ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d45f2:	9300      	str	r3, [sp, #0]
   d45f4:	2100      	movs	r1, #0
   d45f6:	4668      	mov	r0, sp
   d45f8:	f001 fff4 	bl	d65e4 <system_power_management_set_config>
   d45fc:	4604      	mov	r4, r0
    enableCharging(true);
   d45fe:	2001      	movs	r0, #1
   d4600:	f7ff ffbc 	bl	d457c <_Z14enableChargingb>
}
   d4604:	4620      	mov	r0, r4
   d4606:	b010      	add	sp, #64	; 0x40
   d4608:	bd10      	pop	{r4, pc}
        conf_.vin_min_voltage = voltage;
   d460a:	f241 0370 	movw	r3, #4208	; 0x1070
   d460e:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4612:	4b07      	ldr	r3, [pc, #28]	; (d4630 <_Z14setPowerConfigv+0x8c>)
   d4614:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4616:	f241 0310 	movw	r3, #4112	; 0x1010
   d461a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d461e:	9b00      	ldr	r3, [sp, #0]
   d4620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4624:	9300      	str	r3, [sp, #0]
   d4626:	e7e6      	b.n	d45f6 <_Z14setPowerConfigv+0x52>
   d4628:	2003e53c 	.word	0x2003e53c
   d462c:	04000384 	.word	0x04000384
   d4630:	03840384 	.word	0x03840384

000d4634 <_Z20meterParticlePublishv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
}

bool meterParticlePublish(void)
{
   d4634:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                            // Particle requires metering to once per second
   d4636:	4c07      	ldr	r4, [pc, #28]	; (d4654 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4638:	f001 fdee 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
   d463c:	6823      	ldr	r3, [r4, #0]
   d463e:	1ac0      	subs	r0, r0, r3
   d4640:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4644:	d304      	bcc.n	d4650 <_Z20meterParticlePublishv+0x1c>
   d4646:	f001 fde7 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d464a:	6020      	str	r0, [r4, #0]
   d464c:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d464e:	bd10      	pop	{r4, pc}
  else return 0;
   d4650:	2000      	movs	r0, #0
   d4652:	e7fc      	b.n	d464e <_Z20meterParticlePublishv+0x1a>
   d4654:	2003e488 	.word	0x2003e488

000d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4658:	b508      	push	{r3, lr}
  waitUntil(meterParticlePublish);                                                
   d465a:	f7ff ffeb 	bl	d4634 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d465e:	b910      	cbnz	r0, d4666 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d4660:	f001 ffee 	bl	d6640 <spark_process>
        while (_while() && !_condition()) {
   d4664:	e7f9      	b.n	d465a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
    }
   d4666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d466a:	f7ff bfe3 	b.w	d4634 <_Z20meterParticlePublishv>
	...

000d4670 <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4670:	b530      	push	{r4, r5, lr}
   d4672:	b085      	sub	sp, #20
   d4674:	2300      	movs	r3, #0

	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d4676:	a801      	add	r0, sp, #4
   d4678:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d467c:	f88d 300c 	strb.w	r3, [sp, #12]
   d4680:	f002 fa9d 	bl	d6bbe <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d4684:	f001 fdc8 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4688:	f643 2597 	movw	r5, #14999	; 0x3a97
   d468c:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d468e:	f001 ffe7 	bl	d6660 <spark_cloud_flag_connected>
   d4692:	b140      	cbz	r0, d46a6 <_Z14fullModemResetv+0x36>
   d4694:	f001 fdc0 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
   d4698:	1b00      	subs	r0, r0, r4
   d469a:	42a8      	cmp	r0, r5
   d469c:	d803      	bhi.n	d46a6 <_Z14fullModemResetv+0x36>
		delay(100);
   d469e:	2064      	movs	r0, #100	; 0x64
   d46a0:	f002 f8c2 	bl	d6828 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
   d46a4:	e7f3      	b.n	d468e <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d46a6:	2100      	movs	r1, #0
   d46a8:	4b09      	ldr	r3, [pc, #36]	; (d46d0 <_Z14fullModemResetv+0x60>)
   d46aa:	f247 5230 	movw	r2, #30000	; 0x7530
   d46ae:	4608      	mov	r0, r1
   d46b0:	f001 fd3a 	bl	d6128 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d46b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d46b8:	f002 f8b6 	bl	d6828 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d46bc:	4b05      	ldr	r3, [pc, #20]	; (d46d4 <_Z14fullModemResetv+0x64>)
   d46be:	220a      	movs	r2, #10
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	2101      	movs	r1, #1
   d46c4:	a801      	add	r0, sp, #4
   d46c6:	f003 f99d 	bl	d7a04 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d46ca:	b005      	add	sp, #20
   d46cc:	bd30      	pop	{r4, r5, pc}
   d46ce:	bf00      	nop
   d46d0:	000dacb6 	.word	0x000dacb6
   d46d4:	2003e480 	.word	0x2003e480

000d46d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d46d8:	b530      	push	{r4, r5, lr}
   d46da:	b085      	sub	sp, #20
   d46dc:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d46de:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d46e0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d46e2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d46e4:	f001 ff20 	bl	d6528 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d46e8:	b9b0      	cbnz	r0, d4718 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d46ea:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d46ec:	b10c      	cbz	r4, d46f2 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d46ee:	6923      	ldr	r3, [r4, #16]
   d46f0:	b923      	cbnz	r3, d46fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d46f2:	4a0a      	ldr	r2, [pc, #40]	; (d471c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d46f4:	2100      	movs	r1, #0
   d46f6:	200a      	movs	r0, #10
   d46f8:	f001 ff06 	bl	d6508 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d46fc:	2300      	movs	r3, #0
   d46fe:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4702:	230c      	movs	r3, #12
   d4704:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4708:	2304      	movs	r3, #4
   d470a:	9303      	str	r3, [sp, #12]
   d470c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d470e:	6923      	ldr	r3, [r4, #16]
   d4710:	aa01      	add	r2, sp, #4
   d4712:	2101      	movs	r1, #1
   d4714:	4620      	mov	r0, r4
   d4716:	4798      	blx	r3
}
   d4718:	b005      	add	sp, #20
   d471a:	bd30      	pop	{r4, r5, pc}
   d471c:	000d6209 	.word	0x000d6209

000d4720 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4720:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4722:	4d0e      	ldr	r5, [pc, #56]	; (d475c <_Z17getBatteryContextv+0x3c>)
   d4724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4726:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4728:	ac01      	add	r4, sp, #4
   d472a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d472c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4734:	4669      	mov	r1, sp
   d4736:	2007      	movs	r0, #7
   d4738:	f7ff ffce 	bl	d46d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d473c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d473e:	bfa8      	it	ge
   d4740:	9800      	ldrge	r0, [sp, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4742:	4a07      	ldr	r2, [pc, #28]	; (d4760 <_Z17getBatteryContextv+0x40>)
   d4744:	ab08      	add	r3, sp, #32
   d4746:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d474a:	2110      	movs	r1, #16
   d474c:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4750:	4804      	ldr	r0, [pc, #16]	; (d4764 <_Z17getBatteryContextv+0x44>)
   d4752:	f002 f835 	bl	d67c0 <snprintf>
}
   d4756:	b009      	add	sp, #36	; 0x24
   d4758:	bd30      	pop	{r4, r5, pc}
   d475a:	bf00      	nop
   d475c:	000db2f0 	.word	0x000db2f0
   d4760:	000db166 	.word	0x000db166
   d4764:	2003e4ac 	.word	0x2003e4ac

000d4768 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (sysStatus.TempHumidConfig) {                                             // Only read the sensor if it is present
   d476a:	4d52      	ldr	r5, [pc, #328]	; (d48b4 <_Z16takeMeasurementsv+0x14c>)
   d476c:	4c52      	ldr	r4, [pc, #328]	; (d48b8 <_Z16takeMeasurementsv+0x150>)
   d476e:	7b2b      	ldrb	r3, [r5, #12]
   d4770:	b13b      	cbz	r3, d4782 <_Z16takeMeasurementsv+0x1a>
    if (isnan(tempHumidSensor.readTemperature())) current.temperature = current.humidity = 0;
   d4772:	4852      	ldr	r0, [pc, #328]	; (d48bc <_Z16takeMeasurementsv+0x154>)
   d4774:	f001 fcb4 	bl	d60e0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4778:	eeb4 0a40 	vcmp.f32	s0, s0
   d477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4780:	d73e      	bvc.n	d4800 <_Z16takeMeasurementsv+0x98>
   d4782:	2300      	movs	r3, #0
   d4784:	61a3      	str	r3, [r4, #24]
   d4786:	6163      	str	r3, [r4, #20]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", current.temperature);
   d4788:	6960      	ldr	r0, [r4, #20]
   d478a:	f003 feb1 	bl	d84f0 <__aeabi_f2d>
   d478e:	4a4c      	ldr	r2, [pc, #304]	; (d48c0 <_Z16takeMeasurementsv+0x158>)
   d4790:	e9cd 0100 	strd	r0, r1, [sp]
   d4794:	2110      	movs	r1, #16
   d4796:	484b      	ldr	r0, [pc, #300]	; (d48c4 <_Z16takeMeasurementsv+0x15c>)
   d4798:	f002 f812 	bl	d67c0 <snprintf>
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", current.humidity);
   d479c:	69a0      	ldr	r0, [r4, #24]
   d479e:	f003 fea7 	bl	d84f0 <__aeabi_f2d>
   d47a2:	4a49      	ldr	r2, [pc, #292]	; (d48c8 <_Z16takeMeasurementsv+0x160>)
   d47a4:	e9cd 0100 	strd	r0, r1, [sp]
   d47a8:	4848      	ldr	r0, [pc, #288]	; (d48cc <_Z16takeMeasurementsv+0x164>)
   d47aa:	2110      	movs	r1, #16
   d47ac:	f002 f808 	bl	d67c0 <snprintf>
  if (sysStatus.lightSensorConfig) {
   d47b0:	7c2b      	ldrb	r3, [r5, #16]
   d47b2:	b383      	cbz	r3, d4816 <_Z16takeMeasurementsv+0xae>
    lightSensor.make_forced_measurement();
   d47b4:	4846      	ldr	r0, [pc, #280]	; (d48d0 <_Z16takeMeasurementsv+0x168>)
   d47b6:	f001 fbbd 	bl	d5f34 <_ZN6BH175023make_forced_measurementEv>
    current.lightLevel = lightSensor.get_light_level();
   d47ba:	4845      	ldr	r0, [pc, #276]	; (d48d0 <_Z16takeMeasurementsv+0x168>)
   d47bc:	f001 fb74 	bl	d5ea8 <_ZN6BH175015get_light_levelEv>
   d47c0:	ed84 0a07 	vstr	s0, [r4, #28]
  snprintf(lightLevelString, sizeof(lightLevelString), "%4.1f lux", current.lightLevel);
   d47c4:	69e0      	ldr	r0, [r4, #28]
   d47c6:	f003 fe93 	bl	d84f0 <__aeabi_f2d>
   d47ca:	4a42      	ldr	r2, [pc, #264]	; (d48d4 <_Z16takeMeasurementsv+0x16c>)
   d47cc:	e9cd 0100 	strd	r0, r1, [sp]
   d47d0:	4841      	ldr	r0, [pc, #260]	; (d48d8 <_Z16takeMeasurementsv+0x170>)
   d47d2:	2110      	movs	r1, #16
   d47d4:	f001 fff4 	bl	d67c0 <snprintf>
  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d47d8:	7bab      	ldrb	r3, [r5, #14]
   d47da:	b1fb      	cbz	r3, d481c <_Z16takeMeasurementsv+0xb4>
   d47dc:	2013      	movs	r0, #19
   d47de:	f003 fc68 	bl	d80b2 <analogRead>
   d47e2:	2664      	movs	r6, #100	; 0x64
   d47e4:	2300      	movs	r3, #0
   d47e6:	4619      	mov	r1, r3
   d47e8:	9600      	str	r6, [sp, #0]
   d47ea:	f640 628a 	movw	r2, #3722	; 0xe8a
   d47ee:	f002 f80f 	bl	d6810 <_Z3mapiiiii>
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d47f2:	7bab      	ldrb	r3, [r5, #14]
  if (sysStatus.soilSensorConfig >= 1) current.soilMoisture1 = map(analogRead(soilPin1),0,3722,0,100);             // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d47f4:	6020      	str	r0, [r4, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d47f6:	2b02      	cmp	r3, #2
   d47f8:	d012      	beq.n	d4820 <_Z16takeMeasurementsv+0xb8>
  else current.soilMoisture2 = 0;
   d47fa:	2300      	movs	r3, #0
   d47fc:	6063      	str	r3, [r4, #4]
   d47fe:	e01a      	b.n	d4836 <_Z16takeMeasurementsv+0xce>
    current.temperature = tempHumidSensor.readTemperature();
   d4800:	482e      	ldr	r0, [pc, #184]	; (d48bc <_Z16takeMeasurementsv+0x154>)
   d4802:	f001 fc6d 	bl	d60e0 <_ZN14Adafruit_SHT3115readTemperatureEv>
    current.humidity = tempHumidSensor.readHumidity();
   d4806:	482d      	ldr	r0, [pc, #180]	; (d48bc <_Z16takeMeasurementsv+0x154>)
    current.temperature = tempHumidSensor.readTemperature();
   d4808:	ed84 0a05 	vstr	s0, [r4, #20]
    current.humidity = tempHumidSensor.readHumidity();
   d480c:	f001 fc76 	bl	d60fc <_ZN14Adafruit_SHT3112readHumidityEv>
   d4810:	ed84 0a06 	vstr	s0, [r4, #24]
   d4814:	e7b8      	b.n	d4788 <_Z16takeMeasurementsv+0x20>
  else current.lightLevel = 0.0;
   d4816:	2300      	movs	r3, #0
   d4818:	61e3      	str	r3, [r4, #28]
   d481a:	e7d3      	b.n	d47c4 <_Z16takeMeasurementsv+0x5c>
  else current.soilMoisture1 = 0;
   d481c:	6023      	str	r3, [r4, #0]
  if (sysStatus.soilSensorConfig == 2)  current.soilMoisture2 = map(analogRead(soilPin2),0,3722,0,100);
   d481e:	e7ec      	b.n	d47fa <_Z16takeMeasurementsv+0x92>
   d4820:	2012      	movs	r0, #18
   d4822:	f003 fc46 	bl	d80b2 <analogRead>
   d4826:	2300      	movs	r3, #0
   d4828:	9600      	str	r6, [sp, #0]
   d482a:	f640 628a 	movw	r2, #3722	; 0xe8a
   d482e:	4619      	mov	r1, r3
   d4830:	f001 ffee 	bl	d6810 <_Z3mapiiiii>
   d4834:	6060      	str	r0, [r4, #4]
  if (sysStatus.pressureSensorConfig == 1) current.pressure = map(analogRead(pressurePin),428,2816,0,30);         // Sensor range is 0.5V (0 psi) to 4.5V (30psi) and there is a voltage divider (330 / 480) so...
   d4836:	7beb      	ldrb	r3, [r5, #15]
   d4838:	2b01      	cmp	r3, #1
   d483a:	d134      	bne.n	d48a6 <_Z16takeMeasurementsv+0x13e>
   d483c:	2011      	movs	r0, #17
   d483e:	f003 fc38 	bl	d80b2 <analogRead>
   d4842:	231e      	movs	r3, #30
   d4844:	9300      	str	r3, [sp, #0]
   d4846:	f44f 6230 	mov.w	r2, #2816	; 0xb00
   d484a:	2300      	movs	r3, #0
   d484c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   d4850:	f001 ffde 	bl	d6810 <_Z3mapiiiii>
   d4854:	60a0      	str	r0, [r4, #8]
        return network_ready(*this, 0,  NULL);
   d4856:	4b21      	ldr	r3, [pc, #132]	; (d48dc <_Z16takeMeasurementsv+0x174>)
   d4858:	2200      	movs	r2, #0
   d485a:	6858      	ldr	r0, [r3, #4]
   d485c:	4611      	mov	r1, r2
   d485e:	f001 ff57 	bl	d6710 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4862:	b108      	cbz	r0, d4868 <_Z16takeMeasurementsv+0x100>
   d4864:	f7ff fdc4 	bl	d43f0 <_Z17getSignalStrengthv>
   d4868:	a903      	add	r1, sp, #12
   d486a:	2003      	movs	r0, #3
   d486c:	f7ff ff34 	bl	d46d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4870:	b9e0      	cbnz	r0, d48ac <_Z16takeMeasurementsv+0x144>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4872:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4876:	ee07 3a90 	vmov	s15, r3
   d487a:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d487e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d4882:	4a17      	ldr	r2, [pc, #92]	; (d48e0 <_Z16takeMeasurementsv+0x178>)
   d4884:	4817      	ldr	r0, [pc, #92]	; (d48e4 <_Z16takeMeasurementsv+0x17c>)
  sysStatus.stateOfCharge = int(System.batteryCharge());
   d4886:	edc5 7a02 	vstr	s15, [r5, #8]
   d488a:	ee17 3a90 	vmov	r3, s15
  snprintf(batteryString, sizeof(batteryString), "%i %%", sysStatus.stateOfCharge);
   d488e:	2108      	movs	r1, #8
   d4890:	f001 ff96 	bl	d67c0 <snprintf>
  getBatteryContext();                                                 // What is the battery doing.
   d4894:	f7ff ff44 	bl	d4720 <_Z17getBatteryContextv>
  systemStatusWriteNeeded = currentStatusWriteNeeded = true;
   d4898:	4b13      	ldr	r3, [pc, #76]	; (d48e8 <_Z16takeMeasurementsv+0x180>)
   d489a:	2001      	movs	r0, #1
   d489c:	7018      	strb	r0, [r3, #0]
   d489e:	4b13      	ldr	r3, [pc, #76]	; (d48ec <_Z16takeMeasurementsv+0x184>)
   d48a0:	7018      	strb	r0, [r3, #0]
}
   d48a2:	b004      	add	sp, #16
   d48a4:	bd70      	pop	{r4, r5, r6, pc}
  else sysStatus.pressureSensorConfig = 0;
   d48a6:	2300      	movs	r3, #0
   d48a8:	73eb      	strb	r3, [r5, #15]
   d48aa:	e7d4      	b.n	d4856 <_Z16takeMeasurementsv+0xee>
            return -1.0f;
   d48ac:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d48b0:	e7e5      	b.n	d487e <_Z16takeMeasurementsv+0x116>
   d48b2:	bf00      	nop
   d48b4:	2003e53c 	.word	0x2003e53c
   d48b8:	2003e4dc 	.word	0x2003e4dc
   d48bc:	2003e574 	.word	0x2003e574
   d48c0:	000dacc3 	.word	0x000dacc3
   d48c4:	2003e580 	.word	0x2003e580
   d48c8:	000daccb 	.word	0x000daccb
   d48cc:	2003e502 	.word	0x2003e502
   d48d0:	2003e524 	.word	0x2003e524
   d48d4:	000dacd4 	.word	0x000dacd4
   d48d8:	2003e512 	.word	0x2003e512
   d48dc:	2003e5c0 	.word	0x2003e5c0
   d48e0:	000dacde 	.word	0x000dacde
   d48e4:	2003e4bc 	.word	0x2003e4bc
   d48e8:	2003e501 	.word	0x2003e501
   d48ec:	2003e570 	.word	0x2003e570

000d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d48f2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d48f4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d48f6:	b17c      	cbz	r4, d4918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d48f8:	6863      	ldr	r3, [r4, #4]
   d48fa:	3b01      	subs	r3, #1
   d48fc:	6063      	str	r3, [r4, #4]
   d48fe:	b95b      	cbnz	r3, d4918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4900:	6823      	ldr	r3, [r4, #0]
   d4902:	4620      	mov	r0, r4
   d4904:	689b      	ldr	r3, [r3, #8]
   d4906:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4908:	68a3      	ldr	r3, [r4, #8]
   d490a:	3b01      	subs	r3, #1
   d490c:	60a3      	str	r3, [r4, #8]
   d490e:	b91b      	cbnz	r3, d4918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4910:	6823      	ldr	r3, [r4, #0]
   d4912:	4620      	mov	r0, r4
   d4914:	68db      	ldr	r3, [r3, #12]
   d4916:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4918:	4628      	mov	r0, r5
   d491a:	bd38      	pop	{r3, r4, r5, pc}

000d491c <_Z9sendEventv>:
{
   d491c:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d491e:	4c22      	ldr	r4, [pc, #136]	; (d49a8 <_Z9sendEventv+0x8c>)
{
   d4920:	b0d0      	sub	sp, #320	; 0x140
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"LightLevel\":%4.1f, \"Soilmoisture1\":%i, \"Soilmoisture2\":%i, \"waterPressure\":%i, \"Solenoid\":%i, \"battery\":%i, \"key1\":\"%s\", \"Resets\":%i, \"Alerts\":%i}", current.temperature, current.humidity, current.lightLevel, current.soilMoisture1, current.soilMoisture2, current.pressure, current.solenoidState, sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount );
   d4922:	6a23      	ldr	r3, [r4, #32]
   d4924:	930d      	str	r3, [sp, #52]	; 0x34
   d4926:	4b21      	ldr	r3, [pc, #132]	; (d49ac <_Z9sendEventv+0x90>)
   d4928:	69e0      	ldr	r0, [r4, #28]
   d492a:	699a      	ldr	r2, [r3, #24]
   d492c:	920c      	str	r2, [sp, #48]	; 0x30
   d492e:	4a20      	ldr	r2, [pc, #128]	; (d49b0 <_Z9sendEventv+0x94>)
   d4930:	920b      	str	r2, [sp, #44]	; 0x2c
   d4932:	689b      	ldr	r3, [r3, #8]
   d4934:	930a      	str	r3, [sp, #40]	; 0x28
   d4936:	68e3      	ldr	r3, [r4, #12]
   d4938:	9309      	str	r3, [sp, #36]	; 0x24
   d493a:	68a3      	ldr	r3, [r4, #8]
   d493c:	9308      	str	r3, [sp, #32]
   d493e:	6863      	ldr	r3, [r4, #4]
   d4940:	9307      	str	r3, [sp, #28]
   d4942:	6823      	ldr	r3, [r4, #0]
   d4944:	9306      	str	r3, [sp, #24]
   d4946:	f003 fdd3 	bl	d84f0 <__aeabi_f2d>
   d494a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d494e:	69a0      	ldr	r0, [r4, #24]
   d4950:	f003 fdce 	bl	d84f0 <__aeabi_f2d>
   d4954:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4958:	6960      	ldr	r0, [r4, #20]
   d495a:	f003 fdc9 	bl	d84f0 <__aeabi_f2d>
   d495e:	4a15      	ldr	r2, [pc, #84]	; (d49b4 <_Z9sendEventv+0x98>)
   d4960:	e9cd 0100 	strd	r0, r1, [sp]
   d4964:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4968:	a810      	add	r0, sp, #64	; 0x40
   d496a:	f001 ff29 	bl	d67c0 <snprintf>
        return waitConditionWhile(_condition, []{ return true; });
   d496e:	f7ff fe73 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Rwanda-Sense-And-Control", data, PRIVATE);
   d4972:	2300      	movs	r3, #0
   d4974:	f88d 3000 	strb.w	r3, [sp]
   d4978:	4b0f      	ldr	r3, [pc, #60]	; (d49b8 <_Z9sendEventv+0x9c>)
   d497a:	4910      	ldr	r1, [pc, #64]	; (d49bc <_Z9sendEventv+0xa0>)
   d497c:	781b      	ldrb	r3, [r3, #0]
   d497e:	aa10      	add	r2, sp, #64	; 0x40
   d4980:	a80e      	add	r0, sp, #56	; 0x38
   d4982:	f7ff fbfa 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4986:	a80f      	add	r0, sp, #60	; 0x3c
   d4988:	f7ff ffb2 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
   d498c:	f003 f948 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d4990:	4b0b      	ldr	r3, [pc, #44]	; (d49c0 <_Z9sendEventv+0xa4>)
   d4992:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
   d4994:	4b0b      	ldr	r3, [pc, #44]	; (d49c4 <_Z9sendEventv+0xa8>)
   d4996:	2201      	movs	r2, #1
   d4998:	701a      	strb	r2, [r3, #0]
   d499a:	f001 fc3d 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d499e:	4b0a      	ldr	r3, [pc, #40]	; (d49c8 <_Z9sendEventv+0xac>)
   d49a0:	6018      	str	r0, [r3, #0]
}
   d49a2:	b050      	add	sp, #320	; 0x140
   d49a4:	bd10      	pop	{r4, pc}
   d49a6:	bf00      	nop
   d49a8:	2003e4dc 	.word	0x2003e4dc
   d49ac:	2003e53c 	.word	0x2003e53c
   d49b0:	2003e4ac 	.word	0x2003e4ac
   d49b4:	000dace4 	.word	0x000dace4
   d49b8:	2003e484 	.word	0x2003e484
   d49bc:	000dada0 	.word	0x000dada0
   d49c0:	2003e500 	.word	0x2003e500
   d49c4:	2003e1c8 	.word	0x2003e1c8
   d49c8:	2003e5b8 	.word	0x2003e5b8

000d49cc <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49cc:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d49ce:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49d0:	b094      	sub	sp, #80	; 0x50
   d49d2:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d49d4:	b9a3      	cbnz	r3, d4a00 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString),"No Data");
   d49d6:	491c      	ldr	r1, [pc, #112]	; (d4a48 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d49d8:	a804      	add	r0, sp, #16
   d49da:	f004 f9cf 	bl	d8d7c <strcpy>
   d49de:	f7ff fe3b 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d49e2:	2300      	movs	r3, #0
   d49e4:	f88d 3000 	strb.w	r3, [sp]
   d49e8:	4b18      	ldr	r3, [pc, #96]	; (d4a4c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d49ea:	4919      	ldr	r1, [pc, #100]	; (d4a50 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d49ec:	781b      	ldrb	r3, [r3, #0]
   d49ee:	aa04      	add	r2, sp, #16
   d49f0:	a802      	add	r0, sp, #8
   d49f2:	f7ff fbc2 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49f6:	a803      	add	r0, sp, #12
   d49f8:	f7ff ff7a 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d49fc:	b014      	add	sp, #80	; 0x50
   d49fe:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4a00:	4608      	mov	r0, r1
   d4a02:	f004 f965 	bl	d8cd0 <atoi>
   d4a06:	28c8      	cmp	r0, #200	; 0xc8
   d4a08:	d10e      	bne.n	d4a28 <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4a0a:	4912      	ldr	r1, [pc, #72]	; (d4a54 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4a0c:	a804      	add	r0, sp, #16
   d4a0e:	f004 f9b5 	bl	d8d7c <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4a12:	f003 f8f4 	bl	d7bfe <_ZN9TimeClass3nowEv>
   d4a16:	4b10      	ldr	r3, [pc, #64]	; (d4a58 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4a18:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4a1a:	4b10      	ldr	r3, [pc, #64]	; (d4a5c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4a1c:	2201      	movs	r2, #1
   d4a1e:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4a20:	4b0f      	ldr	r3, [pc, #60]	; (d4a60 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4a22:	2200      	movs	r2, #0
   d4a24:	701a      	strb	r2, [r3, #0]
   d4a26:	e7da      	b.n	d49de <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4a28:	4620      	mov	r0, r4
   d4a2a:	f004 f951 	bl	d8cd0 <atoi>
   d4a2e:	28c9      	cmp	r0, #201	; 0xc9
   d4a30:	d0eb      	beq.n	d4a0a <_Z14UbidotsHandlerPKcS0_+0x3e>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4a32:	4620      	mov	r0, r4
   d4a34:	f004 f94c 	bl	d8cd0 <atoi>
   d4a38:	4a0a      	ldr	r2, [pc, #40]	; (d4a64 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4a3a:	4603      	mov	r3, r0
   d4a3c:	2140      	movs	r1, #64	; 0x40
   d4a3e:	a804      	add	r0, sp, #16
   d4a40:	f001 febe 	bl	d67c0 <snprintf>
   d4a44:	e7cb      	b.n	d49de <_Z14UbidotsHandlerPKcS0_+0x12>
   d4a46:	bf00      	nop
   d4a48:	000dadb9 	.word	0x000dadb9
   d4a4c:	2003e484 	.word	0x2003e484
   d4a50:	000dadf0 	.word	0x000dadf0
   d4a54:	000dadc1 	.word	0x000dadc1
   d4a58:	2003e53c 	.word	0x2003e53c
   d4a5c:	2003e570 	.word	0x2003e570
   d4a60:	2003e1c8 	.word	0x2003e1c8
   d4a64:	000dadd3 	.word	0x000dadd3

000d4a68 <_Z14setSoilSensors6String>:
{
   d4a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4a6a:	491f      	ldr	r1, [pc, #124]	; (d4ae8 <_Z14setSoilSensors6String+0x80>)
   d4a6c:	4604      	mov	r4, r0
   d4a6e:	f002 fed2 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4a72:	4606      	mov	r6, r0
   d4a74:	b1a0      	cbz	r0, d4aa0 <_Z14setSoilSensors6String+0x38>
    sysStatus.soilSensorConfig = 0;
   d4a76:	4a1d      	ldr	r2, [pc, #116]	; (d4aec <_Z14setSoilSensors6String+0x84>)
   d4a78:	2300      	movs	r3, #0
   d4a7a:	7393      	strb	r3, [r2, #14]
    systemStatusWriteNeeded = true;
   d4a7c:	4a1c      	ldr	r2, [pc, #112]	; (d4af0 <_Z14setSoilSensors6String+0x88>)
   d4a7e:	2401      	movs	r4, #1
   d4a80:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Soil Sensors",PRIVATE);
   d4a82:	f88d 3000 	strb.w	r3, [sp]
   d4a86:	4b1b      	ldr	r3, [pc, #108]	; (d4af4 <_Z14setSoilSensors6String+0x8c>)
   d4a88:	4a1b      	ldr	r2, [pc, #108]	; (d4af8 <_Z14setSoilSensors6String+0x90>)
   d4a8a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4a8c:	491b      	ldr	r1, [pc, #108]	; (d4afc <_Z14setSoilSensors6String+0x94>)
   d4a8e:	a802      	add	r0, sp, #8
   d4a90:	f7ff fb73 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4a94:	a803      	add	r0, sp, #12
   d4a96:	f7ff ff2b 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4a9a:	4620      	mov	r0, r4
}
   d4a9c:	b004      	add	sp, #16
   d4a9e:	bd70      	pop	{r4, r5, r6, pc}
   d4aa0:	4917      	ldr	r1, [pc, #92]	; (d4b00 <_Z14setSoilSensors6String+0x98>)
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f002 feb7 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4aa8:	4605      	mov	r5, r0
   d4aaa:	b150      	cbz	r0, d4ac2 <_Z14setSoilSensors6String+0x5a>
    sysStatus.soilSensorConfig = 1;
   d4aac:	4b0f      	ldr	r3, [pc, #60]	; (d4aec <_Z14setSoilSensors6String+0x84>)
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4aae:	4a15      	ldr	r2, [pc, #84]	; (d4b04 <_Z14setSoilSensors6String+0x9c>)
    sysStatus.soilSensorConfig = 1;
   d4ab0:	2401      	movs	r4, #1
   d4ab2:	739c      	strb	r4, [r3, #14]
    systemStatusWriteNeeded = true;
   d4ab4:	4b0e      	ldr	r3, [pc, #56]	; (d4af0 <_Z14setSoilSensors6String+0x88>)
   d4ab6:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","One Soil Sensor",PRIVATE);
   d4ab8:	4b0e      	ldr	r3, [pc, #56]	; (d4af4 <_Z14setSoilSensors6String+0x8c>)
   d4aba:	f88d 6000 	strb.w	r6, [sp]
   d4abe:	781b      	ldrb	r3, [r3, #0]
   d4ac0:	e7e4      	b.n	d4a8c <_Z14setSoilSensors6String+0x24>
   d4ac2:	4911      	ldr	r1, [pc, #68]	; (d4b08 <_Z14setSoilSensors6String+0xa0>)
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f002 fea6 	bl	d7816 <_ZNK6String6equalsEPKc>
    else if (command == "2")
   d4aca:	2800      	cmp	r0, #0
   d4acc:	d0e6      	beq.n	d4a9c <_Z14setSoilSensors6String+0x34>
    sysStatus.soilSensorConfig = 2;
   d4ace:	4b07      	ldr	r3, [pc, #28]	; (d4aec <_Z14setSoilSensors6String+0x84>)
   d4ad0:	2202      	movs	r2, #2
   d4ad2:	739a      	strb	r2, [r3, #14]
    systemStatusWriteNeeded = true;
   d4ad4:	4b06      	ldr	r3, [pc, #24]	; (d4af0 <_Z14setSoilSensors6String+0x88>)
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4ad6:	4a0d      	ldr	r2, [pc, #52]	; (d4b0c <_Z14setSoilSensors6String+0xa4>)
    systemStatusWriteNeeded = true;
   d4ad8:	2401      	movs	r4, #1
   d4ada:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","Two Soil Sensors",PRIVATE);
   d4adc:	4b05      	ldr	r3, [pc, #20]	; (d4af4 <_Z14setSoilSensors6String+0x8c>)
   d4ade:	f88d 5000 	strb.w	r5, [sp]
   d4ae2:	781b      	ldrb	r3, [r3, #0]
   d4ae4:	e7d2      	b.n	d4a8c <_Z14setSoilSensors6String+0x24>
   d4ae6:	bf00      	nop
   d4ae8:	000dadfd 	.word	0x000dadfd
   d4aec:	2003e53c 	.word	0x2003e53c
   d4af0:	2003e570 	.word	0x2003e570
   d4af4:	2003e484 	.word	0x2003e484
   d4af8:	000dadff 	.word	0x000dadff
   d4afc:	000dae0f 	.word	0x000dae0f
   d4b00:	000dac68 	.word	0x000dac68
   d4b04:	000dae16 	.word	0x000dae16
   d4b08:	000db014 	.word	0x000db014
   d4b0c:	000dae26 	.word	0x000dae26

000d4b10 <_Z17setPressureSensor6String>:
{
   d4b10:	b530      	push	{r4, r5, lr}
   d4b12:	4916      	ldr	r1, [pc, #88]	; (d4b6c <_Z17setPressureSensor6String+0x5c>)
   d4b14:	b085      	sub	sp, #20
   d4b16:	4604      	mov	r4, r0
   d4b18:	f002 fe7d 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4b1c:	4605      	mov	r5, r0
   d4b1e:	b1a0      	cbz	r0, d4b4a <_Z17setPressureSensor6String+0x3a>
    sysStatus.pressureSensorConfig = 0;
   d4b20:	4a13      	ldr	r2, [pc, #76]	; (d4b70 <_Z17setPressureSensor6String+0x60>)
   d4b22:	2300      	movs	r3, #0
   d4b24:	73d3      	strb	r3, [r2, #15]
    systemStatusWriteNeeded = true;
   d4b26:	4a13      	ldr	r2, [pc, #76]	; (d4b74 <_Z17setPressureSensor6String+0x64>)
   d4b28:	2401      	movs	r4, #1
   d4b2a:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Pressure Sensor",PRIVATE);
   d4b2c:	f88d 3000 	strb.w	r3, [sp]
   d4b30:	4b11      	ldr	r3, [pc, #68]	; (d4b78 <_Z17setPressureSensor6String+0x68>)
   d4b32:	4a12      	ldr	r2, [pc, #72]	; (d4b7c <_Z17setPressureSensor6String+0x6c>)
   d4b34:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b36:	4912      	ldr	r1, [pc, #72]	; (d4b80 <_Z17setPressureSensor6String+0x70>)
   d4b38:	a802      	add	r0, sp, #8
   d4b3a:	f7ff fb1e 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b3e:	a803      	add	r0, sp, #12
   d4b40:	f7ff fed6 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b44:	4620      	mov	r0, r4
}
   d4b46:	b005      	add	sp, #20
   d4b48:	bd30      	pop	{r4, r5, pc}
   d4b4a:	490e      	ldr	r1, [pc, #56]	; (d4b84 <_Z17setPressureSensor6String+0x74>)
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	f002 fe62 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4b52:	2800      	cmp	r0, #0
   d4b54:	d0f7      	beq.n	d4b46 <_Z17setPressureSensor6String+0x36>
    sysStatus.pressureSensorConfig = 1;
   d4b56:	4b06      	ldr	r3, [pc, #24]	; (d4b70 <_Z17setPressureSensor6String+0x60>)
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b58:	4a0b      	ldr	r2, [pc, #44]	; (d4b88 <_Z17setPressureSensor6String+0x78>)
    sysStatus.pressureSensorConfig = 1;
   d4b5a:	2401      	movs	r4, #1
   d4b5c:	73dc      	strb	r4, [r3, #15]
    systemStatusWriteNeeded = true;
   d4b5e:	4b05      	ldr	r3, [pc, #20]	; (d4b74 <_Z17setPressureSensor6String+0x64>)
   d4b60:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","Pressure Sensor Present",PRIVATE);
   d4b62:	4b05      	ldr	r3, [pc, #20]	; (d4b78 <_Z17setPressureSensor6String+0x68>)
   d4b64:	f88d 5000 	strb.w	r5, [sp]
   d4b68:	781b      	ldrb	r3, [r3, #0]
   d4b6a:	e7e4      	b.n	d4b36 <_Z17setPressureSensor6String+0x26>
   d4b6c:	000dadfd 	.word	0x000dadfd
   d4b70:	2003e53c 	.word	0x2003e53c
   d4b74:	2003e570 	.word	0x2003e570
   d4b78:	2003e484 	.word	0x2003e484
   d4b7c:	000dae37 	.word	0x000dae37
   d4b80:	000dae0f 	.word	0x000dae0f
   d4b84:	000dac68 	.word	0x000dac68
   d4b88:	000dae4a 	.word	0x000dae4a

000d4b8c <_Z14setLightSensor6String>:
{
   d4b8c:	b530      	push	{r4, r5, lr}
   d4b8e:	491a      	ldr	r1, [pc, #104]	; (d4bf8 <_Z14setLightSensor6String+0x6c>)
   d4b90:	b085      	sub	sp, #20
   d4b92:	4604      	mov	r4, r0
   d4b94:	f002 fe3f 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4b98:	4605      	mov	r5, r0
   d4b9a:	b1a0      	cbz	r0, d4bc6 <_Z14setLightSensor6String+0x3a>
    sysStatus.lightSensorConfig = 0;
   d4b9c:	4a17      	ldr	r2, [pc, #92]	; (d4bfc <_Z14setLightSensor6String+0x70>)
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	7413      	strb	r3, [r2, #16]
    systemStatusWriteNeeded = true;
   d4ba2:	4a17      	ldr	r2, [pc, #92]	; (d4c00 <_Z14setLightSensor6String+0x74>)
   d4ba4:	2401      	movs	r4, #1
   d4ba6:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Light Sensor",PRIVATE);
   d4ba8:	f88d 3000 	strb.w	r3, [sp]
   d4bac:	4b15      	ldr	r3, [pc, #84]	; (d4c04 <_Z14setLightSensor6String+0x78>)
   d4bae:	4a16      	ldr	r2, [pc, #88]	; (d4c08 <_Z14setLightSensor6String+0x7c>)
   d4bb0:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4bb2:	4916      	ldr	r1, [pc, #88]	; (d4c0c <_Z14setLightSensor6String+0x80>)
   d4bb4:	a802      	add	r0, sp, #8
   d4bb6:	f7ff fae0 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4bba:	a803      	add	r0, sp, #12
   d4bbc:	f7ff fe98 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc0:	4620      	mov	r0, r4
}
   d4bc2:	b005      	add	sp, #20
   d4bc4:	bd30      	pop	{r4, r5, pc}
   d4bc6:	4912      	ldr	r1, [pc, #72]	; (d4c10 <_Z14setLightSensor6String+0x84>)
   d4bc8:	4620      	mov	r0, r4
   d4bca:	f002 fe24 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4bce:	2800      	cmp	r0, #0
   d4bd0:	d0f7      	beq.n	d4bc2 <_Z14setLightSensor6String+0x36>
    sysStatus.lightSensorConfig = 1;
   d4bd2:	4b0a      	ldr	r3, [pc, #40]	; (d4bfc <_Z14setLightSensor6String+0x70>)
    lightSensor.begin();
   d4bd4:	480f      	ldr	r0, [pc, #60]	; (d4c14 <_Z14setLightSensor6String+0x88>)
    sysStatus.lightSensorConfig = 1;
   d4bd6:	2401      	movs	r4, #1
   d4bd8:	741c      	strb	r4, [r3, #16]
    systemStatusWriteNeeded = true;
   d4bda:	4b09      	ldr	r3, [pc, #36]	; (d4c00 <_Z14setLightSensor6String+0x74>)
   d4bdc:	701c      	strb	r4, [r3, #0]
    lightSensor.begin();
   d4bde:	f001 f958 	bl	d5e92 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d4be2:	480c      	ldr	r0, [pc, #48]	; (d4c14 <_Z14setLightSensor6String+0x88>)
   d4be4:	2120      	movs	r1, #32
   d4be6:	f001 f990 	bl	d5f0a <_ZN6BH175015set_sensor_modeENS_8SensModeE>
    Particle.publish("Config","Light Sensor Present",PRIVATE);
   d4bea:	4b06      	ldr	r3, [pc, #24]	; (d4c04 <_Z14setLightSensor6String+0x78>)
   d4bec:	f88d 5000 	strb.w	r5, [sp]
   d4bf0:	781b      	ldrb	r3, [r3, #0]
   d4bf2:	4a09      	ldr	r2, [pc, #36]	; (d4c18 <_Z14setLightSensor6String+0x8c>)
   d4bf4:	e7dd      	b.n	d4bb2 <_Z14setLightSensor6String+0x26>
   d4bf6:	bf00      	nop
   d4bf8:	000dadfd 	.word	0x000dadfd
   d4bfc:	2003e53c 	.word	0x2003e53c
   d4c00:	2003e570 	.word	0x2003e570
   d4c04:	2003e484 	.word	0x2003e484
   d4c08:	000dae62 	.word	0x000dae62
   d4c0c:	000dae0f 	.word	0x000dae0f
   d4c10:	000dac68 	.word	0x000dac68
   d4c14:	2003e524 	.word	0x2003e524
   d4c18:	000dae72 	.word	0x000dae72

000d4c1c <_Z18setTempHumidSensor6String>:
{
   d4c1c:	b530      	push	{r4, r5, lr}
   d4c1e:	4918      	ldr	r1, [pc, #96]	; (d4c80 <_Z18setTempHumidSensor6String+0x64>)
   d4c20:	b085      	sub	sp, #20
   d4c22:	4604      	mov	r4, r0
   d4c24:	f002 fdf7 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4c28:	4605      	mov	r5, r0
   d4c2a:	b1a0      	cbz	r0, d4c56 <_Z18setTempHumidSensor6String+0x3a>
    sysStatus.TempHumidConfig = 0;
   d4c2c:	4a15      	ldr	r2, [pc, #84]	; (d4c84 <_Z18setTempHumidSensor6String+0x68>)
   d4c2e:	2300      	movs	r3, #0
   d4c30:	7313      	strb	r3, [r2, #12]
    systemStatusWriteNeeded = true;
   d4c32:	4a15      	ldr	r2, [pc, #84]	; (d4c88 <_Z18setTempHumidSensor6String+0x6c>)
   d4c34:	2401      	movs	r4, #1
   d4c36:	7014      	strb	r4, [r2, #0]
    Particle.publish("Config","No Temp / Humidity Sensor Present",PRIVATE);
   d4c38:	f88d 3000 	strb.w	r3, [sp]
   d4c3c:	4b13      	ldr	r3, [pc, #76]	; (d4c8c <_Z18setTempHumidSensor6String+0x70>)
   d4c3e:	4a14      	ldr	r2, [pc, #80]	; (d4c90 <_Z18setTempHumidSensor6String+0x74>)
   d4c40:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4c42:	4914      	ldr	r1, [pc, #80]	; (d4c94 <_Z18setTempHumidSensor6String+0x78>)
   d4c44:	a802      	add	r0, sp, #8
   d4c46:	f7ff fa98 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c4a:	a803      	add	r0, sp, #12
   d4c4c:	f7ff fe50 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c50:	4620      	mov	r0, r4
}
   d4c52:	b005      	add	sp, #20
   d4c54:	bd30      	pop	{r4, r5, pc}
   d4c56:	4910      	ldr	r1, [pc, #64]	; (d4c98 <_Z18setTempHumidSensor6String+0x7c>)
   d4c58:	4620      	mov	r0, r4
   d4c5a:	f002 fddc 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4c5e:	2800      	cmp	r0, #0
   d4c60:	d0f7      	beq.n	d4c52 <_Z18setTempHumidSensor6String+0x36>
    sysStatus.TempHumidConfig = 1;
   d4c62:	4b08      	ldr	r3, [pc, #32]	; (d4c84 <_Z18setTempHumidSensor6String+0x68>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c64:	480d      	ldr	r0, [pc, #52]	; (d4c9c <_Z18setTempHumidSensor6String+0x80>)
    sysStatus.TempHumidConfig = 1;
   d4c66:	2401      	movs	r4, #1
   d4c68:	731c      	strb	r4, [r3, #12]
    systemStatusWriteNeeded = true;
   d4c6a:	4b07      	ldr	r3, [pc, #28]	; (d4c88 <_Z18setTempHumidSensor6String+0x6c>)
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c6c:	2144      	movs	r1, #68	; 0x44
    systemStatusWriteNeeded = true;
   d4c6e:	701c      	strb	r4, [r3, #0]
    tempHumidSensor.begin(0x44);                                        // Set to 0x45 for alternate i2c addr
   d4c70:	f001 f99e 	bl	d5fb0 <_ZN14Adafruit_SHT315beginEh>
    Particle.publish("Config","Temp / Humidity Sensor Present",PRIVATE);
   d4c74:	4b05      	ldr	r3, [pc, #20]	; (d4c8c <_Z18setTempHumidSensor6String+0x70>)
   d4c76:	f88d 5000 	strb.w	r5, [sp]
   d4c7a:	781b      	ldrb	r3, [r3, #0]
   d4c7c:	4a08      	ldr	r2, [pc, #32]	; (d4ca0 <_Z18setTempHumidSensor6String+0x84>)
   d4c7e:	e7e0      	b.n	d4c42 <_Z18setTempHumidSensor6String+0x26>
   d4c80:	000dadfd 	.word	0x000dadfd
   d4c84:	2003e53c 	.word	0x2003e53c
   d4c88:	2003e570 	.word	0x2003e570
   d4c8c:	2003e484 	.word	0x2003e484
   d4c90:	000dae87 	.word	0x000dae87
   d4c94:	000dae0f 	.word	0x000dae0f
   d4c98:	000dac68 	.word	0x000dac68
   d4c9c:	2003e574 	.word	0x2003e574
   d4ca0:	000dae8a 	.word	0x000dae8a

000d4ca4 <_Z23setWaterDurationMorning6String>:
{
   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	b0c6      	sub	sp, #280	; 0x118
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4ca8:	6800      	ldr	r0, [r0, #0]
   d4caa:	220a      	movs	r2, #10
   d4cac:	a903      	add	r1, sp, #12
   d4cae:	f004 ffb1 	bl	d9c14 <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4cb2:	1e43      	subs	r3, r0, #1
   d4cb4:	2b36      	cmp	r3, #54	; 0x36
   d4cb6:	d82c      	bhi.n	d4d12 <_Z23setWaterDurationMorning6String+0x6e>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cb8:	4b17      	ldr	r3, [pc, #92]	; (d4d18 <_Z23setWaterDurationMorning6String+0x74>)
  sysStatus.wateringDurationMorning = tempDuration;
   d4cba:	4c18      	ldr	r4, [pc, #96]	; (d4d1c <_Z23setWaterDurationMorning6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cbc:	2201      	movs	r2, #1
   d4cbe:	701a      	strb	r2, [r3, #0]
  sysStatus.wateringDurationMorning = tempDuration;
   d4cc0:	6220      	str	r0, [r4, #32]
  snprintf(data, sizeof(data), "Morning Watering Duration set to %i",sysStatus.wateringDurationMorning);
   d4cc2:	4603      	mov	r3, r0
   d4cc4:	4a16      	ldr	r2, [pc, #88]	; (d4d20 <_Z23setWaterDurationMorning6String+0x7c>)
   d4cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4cca:	a806      	add	r0, sp, #24
   d4ccc:	f001 fd78 	bl	d67c0 <snprintf>
  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4cd0:	4814      	ldr	r0, [pc, #80]	; (d4d24 <_Z23setWaterDurationMorning6String+0x80>)
   d4cd2:	f7ff fb16 	bl	d4302 <_ZNK5Timer8isActiveEv>
   d4cd6:	b140      	cbz	r0, d4cea <_Z23setWaterDurationMorning6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationMorning);
   d4cd8:	6a23      	ldr	r3, [r4, #32]
   d4cda:	4812      	ldr	r0, [pc, #72]	; (d4d24 <_Z23setWaterDurationMorning6String+0x80>)
   d4cdc:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4ce0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4ce4:	4359      	muls	r1, r3
   d4ce6:	f7ff fafb 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d4cea:	f7ff fcb5 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4cee:	f001 fcb7 	bl	d6660 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4cf2:	b160      	cbz	r0, d4d0e <_Z23setWaterDurationMorning6String+0x6a>
   d4cf4:	2300      	movs	r3, #0
   d4cf6:	f88d 3000 	strb.w	r3, [sp]
   d4cfa:	4b0b      	ldr	r3, [pc, #44]	; (d4d28 <_Z23setWaterDurationMorning6String+0x84>)
   d4cfc:	490b      	ldr	r1, [pc, #44]	; (d4d2c <_Z23setWaterDurationMorning6String+0x88>)
   d4cfe:	781b      	ldrb	r3, [r3, #0]
   d4d00:	a804      	add	r0, sp, #16
   d4d02:	aa06      	add	r2, sp, #24
   d4d04:	f7ff fa39 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d08:	a805      	add	r0, sp, #20
   d4d0a:	f7ff fdf1 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4d0e:	2001      	movs	r0, #1
   d4d10:	e000      	b.n	d4d14 <_Z23setWaterDurationMorning6String+0x70>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d12:	2000      	movs	r0, #0
}
   d4d14:	b046      	add	sp, #280	; 0x118
   d4d16:	bd10      	pop	{r4, pc}
   d4d18:	2003e570 	.word	0x2003e570
   d4d1c:	2003e53c 	.word	0x2003e53c
   d4d20:	000daea9 	.word	0x000daea9
   d4d24:	2003e598 	.word	0x2003e598
   d4d28:	2003e484 	.word	0x2003e484
   d4d2c:	000daecd 	.word	0x000daecd

000d4d30 <_Z21setWaterDurationLunch6String>:
{
   d4d30:	b510      	push	{r4, lr}
   d4d32:	b0c6      	sub	sp, #280	; 0x118
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d34:	6800      	ldr	r0, [r0, #0]
   d4d36:	220a      	movs	r2, #10
   d4d38:	a903      	add	r1, sp, #12
   d4d3a:	f004 ff6b 	bl	d9c14 <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d3e:	1e43      	subs	r3, r0, #1
   d4d40:	2b36      	cmp	r3, #54	; 0x36
   d4d42:	d82c      	bhi.n	d4d9e <_Z21setWaterDurationLunch6String+0x6e>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d44:	4b17      	ldr	r3, [pc, #92]	; (d4da4 <_Z21setWaterDurationLunch6String+0x74>)
  sysStatus.wateringDurationLunch = tempDuration;
   d4d46:	4c18      	ldr	r4, [pc, #96]	; (d4da8 <_Z21setWaterDurationLunch6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d48:	2201      	movs	r2, #1
   d4d4a:	701a      	strb	r2, [r3, #0]
  sysStatus.wateringDurationLunch = tempDuration;
   d4d4c:	6260      	str	r0, [r4, #36]	; 0x24
  snprintf(data, sizeof(data), "Lunch Watering Duration set to %i",sysStatus.wateringDurationLunch);
   d4d4e:	4603      	mov	r3, r0
   d4d50:	4a16      	ldr	r2, [pc, #88]	; (d4dac <_Z21setWaterDurationLunch6String+0x7c>)
   d4d52:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d56:	a806      	add	r0, sp, #24
   d4d58:	f001 fd32 	bl	d67c0 <snprintf>
  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4d5c:	4814      	ldr	r0, [pc, #80]	; (d4db0 <_Z21setWaterDurationLunch6String+0x80>)
   d4d5e:	f7ff fad0 	bl	d4302 <_ZNK5Timer8isActiveEv>
   d4d62:	b140      	cbz	r0, d4d76 <_Z21setWaterDurationLunch6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationLunch);
   d4d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4d66:	4812      	ldr	r0, [pc, #72]	; (d4db0 <_Z21setWaterDurationLunch6String+0x80>)
   d4d68:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4d6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4d70:	4359      	muls	r1, r3
   d4d72:	f7ff fab5 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d4d76:	f7ff fc6f 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4d7a:	f001 fc71 	bl	d6660 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4d7e:	b160      	cbz	r0, d4d9a <_Z21setWaterDurationLunch6String+0x6a>
   d4d80:	2300      	movs	r3, #0
   d4d82:	f88d 3000 	strb.w	r3, [sp]
   d4d86:	4b0b      	ldr	r3, [pc, #44]	; (d4db4 <_Z21setWaterDurationLunch6String+0x84>)
   d4d88:	490b      	ldr	r1, [pc, #44]	; (d4db8 <_Z21setWaterDurationLunch6String+0x88>)
   d4d8a:	781b      	ldrb	r3, [r3, #0]
   d4d8c:	a804      	add	r0, sp, #16
   d4d8e:	aa06      	add	r2, sp, #24
   d4d90:	f7ff f9f3 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d94:	a805      	add	r0, sp, #20
   d4d96:	f7ff fdab 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4d9a:	2001      	movs	r0, #1
   d4d9c:	e000      	b.n	d4da0 <_Z21setWaterDurationLunch6String+0x70>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d9e:	2000      	movs	r0, #0
}
   d4da0:	b046      	add	sp, #280	; 0x118
   d4da2:	bd10      	pop	{r4, pc}
   d4da4:	2003e570 	.word	0x2003e570
   d4da8:	2003e53c 	.word	0x2003e53c
   d4dac:	000daed6 	.word	0x000daed6
   d4db0:	2003e598 	.word	0x2003e598
   d4db4:	2003e484 	.word	0x2003e484
   d4db8:	000daecd 	.word	0x000daecd

000d4dbc <_Z23setWaterDurationEvening6String>:
{
   d4dbc:	b510      	push	{r4, lr}
   d4dbe:	b0c6      	sub	sp, #280	; 0x118
  int tempDuration = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4dc0:	6800      	ldr	r0, [r0, #0]
   d4dc2:	220a      	movs	r2, #10
   d4dc4:	a903      	add	r1, sp, #12
   d4dc6:	f004 ff25 	bl	d9c14 <strtol>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4dca:	1e43      	subs	r3, r0, #1
   d4dcc:	2b36      	cmp	r3, #54	; 0x36
   d4dce:	d82c      	bhi.n	d4e2a <_Z23setWaterDurationEvening6String+0x6e>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4dd0:	4b17      	ldr	r3, [pc, #92]	; (d4e30 <_Z23setWaterDurationEvening6String+0x74>)
  sysStatus.wateringDurationEvening = tempDuration;
   d4dd2:	4c18      	ldr	r4, [pc, #96]	; (d4e34 <_Z23setWaterDurationEvening6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4dd4:	2201      	movs	r2, #1
   d4dd6:	701a      	strb	r2, [r3, #0]
  sysStatus.wateringDurationEvening = tempDuration;
   d4dd8:	62a0      	str	r0, [r4, #40]	; 0x28
  snprintf(data, sizeof(data), "Evening Watering Duration set to %i",sysStatus.wateringDurationEvening);
   d4dda:	4603      	mov	r3, r0
   d4ddc:	4a16      	ldr	r2, [pc, #88]	; (d4e38 <_Z23setWaterDurationEvening6String+0x7c>)
   d4dde:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4de2:	a806      	add	r0, sp, #24
   d4de4:	f001 fcec 	bl	d67c0 <snprintf>
  if (wateringTimer.isActive()){                                          // We can change the period of a running timer
   d4de8:	4814      	ldr	r0, [pc, #80]	; (d4e3c <_Z23setWaterDurationEvening6String+0x80>)
   d4dea:	f7ff fa8a 	bl	d4302 <_ZNK5Timer8isActiveEv>
   d4dee:	b140      	cbz	r0, d4e02 <_Z23setWaterDurationEvening6String+0x46>
    wateringTimer.changePeriod(1000*60*sysStatus.wateringDurationEvening);
   d4df0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4df2:	4812      	ldr	r0, [pc, #72]	; (d4e3c <_Z23setWaterDurationEvening6String+0x80>)
   d4df4:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4df8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4dfc:	4359      	muls	r1, r3
   d4dfe:	f7ff fa6f 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d4e02:	f7ff fc29 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4e06:	f001 fc2b 	bl	d6660 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Duration",data, PRIVATE);
   d4e0a:	b160      	cbz	r0, d4e26 <_Z23setWaterDurationEvening6String+0x6a>
   d4e0c:	2300      	movs	r3, #0
   d4e0e:	f88d 3000 	strb.w	r3, [sp]
   d4e12:	4b0b      	ldr	r3, [pc, #44]	; (d4e40 <_Z23setWaterDurationEvening6String+0x84>)
   d4e14:	490b      	ldr	r1, [pc, #44]	; (d4e44 <_Z23setWaterDurationEvening6String+0x88>)
   d4e16:	781b      	ldrb	r3, [r3, #0]
   d4e18:	a804      	add	r0, sp, #16
   d4e1a:	aa06      	add	r2, sp, #24
   d4e1c:	f7ff f9ad 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4e20:	a805      	add	r0, sp, #20
   d4e22:	f7ff fd65 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4e26:	2001      	movs	r0, #1
   d4e28:	e000      	b.n	d4e2c <_Z23setWaterDurationEvening6String+0x70>
  if ((tempDuration < 1) || (tempDuration > 55)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e2a:	2000      	movs	r0, #0
}
   d4e2c:	b046      	add	sp, #280	; 0x118
   d4e2e:	bd10      	pop	{r4, pc}
   d4e30:	2003e570 	.word	0x2003e570
   d4e34:	2003e53c 	.word	0x2003e53c
   d4e38:	000daef8 	.word	0x000daef8
   d4e3c:	2003e598 	.word	0x2003e598
   d4e40:	2003e484 	.word	0x2003e484
   d4e44:	000daecd 	.word	0x000daecd

000d4e48 <_Z17setWaterThreshold6String>:
{
   d4e48:	b570      	push	{r4, r5, r6, lr}
   d4e4a:	b086      	sub	sp, #24
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4e4c:	6800      	ldr	r0, [r0, #0]
   d4e4e:	a903      	add	r1, sp, #12
   d4e50:	f004 fe0c 	bl	d9a6c <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4e54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e5c:	d432      	bmi.n	d4ec4 <_Z17setWaterThreshold6String+0x7c>
   d4e5e:	eddf 7a1a 	vldr	s15, [pc, #104]	; d4ec8 <_Z17setWaterThreshold6String+0x80>
   d4e62:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e6a:	bfcc      	ite	gt
   d4e6c:	2601      	movgt	r6, #1
   d4e6e:	2600      	movle	r6, #0
   d4e70:	dc28      	bgt.n	d4ec4 <_Z17setWaterThreshold6String+0x7c>
  systemStatusWriteNeeded = true;
   d4e72:	4b16      	ldr	r3, [pc, #88]	; (d4ecc <_Z17setWaterThreshold6String+0x84>)
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4e74:	4d16      	ldr	r5, [pc, #88]	; (d4ed0 <_Z17setWaterThreshold6String+0x88>)
  systemStatusWriteNeeded = true;
   d4e76:	2401      	movs	r4, #1
   d4e78:	701c      	strb	r4, [r3, #0]
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4e7a:	ee10 0a10 	vmov	r0, s0
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4e7e:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4e82:	f003 fb35 	bl	d84f0 <__aeabi_f2d>
   d4e86:	4a13      	ldr	r2, [pc, #76]	; (d4ed4 <_Z17setWaterThreshold6String+0x8c>)
   d4e88:	e9cd 0100 	strd	r0, r1, [sp]
   d4e8c:	4812      	ldr	r0, [pc, #72]	; (d4ed8 <_Z17setWaterThreshold6String+0x90>)
   d4e8e:	2108      	movs	r1, #8
   d4e90:	f001 fc96 	bl	d67c0 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4e94:	792b      	ldrb	r3, [r5, #4]
   d4e96:	b913      	cbnz	r3, d4e9e <_Z17setWaterThreshold6String+0x56>
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4e98:	2001      	movs	r0, #1
}
   d4e9a:	b006      	add	sp, #24
   d4e9c:	bd70      	pop	{r4, r5, r6, pc}
   d4e9e:	f001 fbdf 	bl	d6660 <spark_cloud_flag_connected>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4ea2:	2800      	cmp	r0, #0
   d4ea4:	d0f8      	beq.n	d4e98 <_Z17setWaterThreshold6String+0x50>
   d4ea6:	f7ff fbd7 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d4eaa:	4b0c      	ldr	r3, [pc, #48]	; (d4edc <_Z17setWaterThreshold6String+0x94>)
   d4eac:	f88d 6000 	strb.w	r6, [sp]
   d4eb0:	a804      	add	r0, sp, #16
   d4eb2:	781b      	ldrb	r3, [r3, #0]
   d4eb4:	4a08      	ldr	r2, [pc, #32]	; (d4ed8 <_Z17setWaterThreshold6String+0x90>)
   d4eb6:	490a      	ldr	r1, [pc, #40]	; (d4ee0 <_Z17setWaterThreshold6String+0x98>)
   d4eb8:	f7ff f95f 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ebc:	a805      	add	r0, sp, #20
   d4ebe:	f7ff fd17 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ec2:	e7e9      	b.n	d4e98 <_Z17setWaterThreshold6String+0x50>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4ec4:	2000      	movs	r0, #0
   d4ec6:	e7e8      	b.n	d4e9a <_Z17setWaterThreshold6String+0x52>
   d4ec8:	42c80000 	.word	0x42c80000
   d4ecc:	2003e570 	.word	0x2003e570
   d4ed0:	2003e53c 	.word	0x2003e53c
   d4ed4:	000daf1c 	.word	0x000daf1c
   d4ed8:	2003e590 	.word	0x2003e590
   d4edc:	2003e484 	.word	0x2003e484
   d4ee0:	000dafd0 	.word	0x000dafd0

000d4ee4 <_Z14setVerboseMode6String>:
{
   d4ee4:	b530      	push	{r4, r5, lr}
   d4ee6:	4916      	ldr	r1, [pc, #88]	; (d4f40 <_Z14setVerboseMode6String+0x5c>)
   d4ee8:	b085      	sub	sp, #20
   d4eea:	4604      	mov	r4, r0
   d4eec:	f002 fc93 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4ef0:	4605      	mov	r5, r0
   d4ef2:	b1a0      	cbz	r0, d4f1e <_Z14setVerboseMode6String+0x3a>
    sysStatus.verboseMode = true;
   d4ef4:	4b13      	ldr	r3, [pc, #76]	; (d4f44 <_Z14setVerboseMode6String+0x60>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4ef6:	4a14      	ldr	r2, [pc, #80]	; (d4f48 <_Z14setVerboseMode6String+0x64>)
    sysStatus.verboseMode = true;
   d4ef8:	2401      	movs	r4, #1
   d4efa:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4efc:	4b13      	ldr	r3, [pc, #76]	; (d4f4c <_Z14setVerboseMode6String+0x68>)
   d4efe:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4f00:	2300      	movs	r3, #0
   d4f02:	f88d 3000 	strb.w	r3, [sp]
   d4f06:	4b12      	ldr	r3, [pc, #72]	; (d4f50 <_Z14setVerboseMode6String+0x6c>)
   d4f08:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f0a:	4912      	ldr	r1, [pc, #72]	; (d4f54 <_Z14setVerboseMode6String+0x70>)
   d4f0c:	a802      	add	r0, sp, #8
   d4f0e:	f7ff f934 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4f12:	a803      	add	r0, sp, #12
   d4f14:	f7ff fcec 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f18:	4620      	mov	r0, r4
}
   d4f1a:	b005      	add	sp, #20
   d4f1c:	bd30      	pop	{r4, r5, pc}
   d4f1e:	490e      	ldr	r1, [pc, #56]	; (d4f58 <_Z14setVerboseMode6String+0x74>)
   d4f20:	4620      	mov	r0, r4
   d4f22:	f002 fc78 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4f26:	2800      	cmp	r0, #0
   d4f28:	d0f7      	beq.n	d4f1a <_Z14setVerboseMode6String+0x36>
    sysStatus.verboseMode = false;
   d4f2a:	4b06      	ldr	r3, [pc, #24]	; (d4f44 <_Z14setVerboseMode6String+0x60>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f2c:	4a0b      	ldr	r2, [pc, #44]	; (d4f5c <_Z14setVerboseMode6String+0x78>)
    sysStatus.verboseMode = false;
   d4f2e:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4f30:	4b06      	ldr	r3, [pc, #24]	; (d4f4c <_Z14setVerboseMode6String+0x68>)
   d4f32:	2401      	movs	r4, #1
   d4f34:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4f36:	4b06      	ldr	r3, [pc, #24]	; (d4f50 <_Z14setVerboseMode6String+0x6c>)
   d4f38:	f88d 5000 	strb.w	r5, [sp]
   d4f3c:	781b      	ldrb	r3, [r3, #0]
   d4f3e:	e7e4      	b.n	d4f0a <_Z14setVerboseMode6String+0x26>
   d4f40:	000dac68 	.word	0x000dac68
   d4f44:	2003e53c 	.word	0x2003e53c
   d4f48:	000daf25 	.word	0x000daf25
   d4f4c:	2003e570 	.word	0x2003e570
   d4f50:	2003e484 	.word	0x2003e484
   d4f54:	000daf46 	.word	0x000daf46
   d4f58:	000dadfd 	.word	0x000dadfd
   d4f5c:	000daf36 	.word	0x000daf36

000d4f60 <_Z15setLowPowerMode6String>:
{
   d4f60:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4f62:	492a      	ldr	r1, [pc, #168]	; (d500c <_Z15setLowPowerMode6String+0xac>)
   d4f64:	b085      	sub	sp, #20
   d4f66:	4604      	mov	r4, r0
   d4f68:	f002 fc55 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4f6c:	b360      	cbz	r0, d4fc8 <_Z15setLowPowerMode6String+0x68>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4f6e:	4927      	ldr	r1, [pc, #156]	; (d500c <_Z15setLowPowerMode6String+0xac>)
   d4f70:	4620      	mov	r0, r4
   d4f72:	f002 fc50 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4f76:	bb78      	cbnz	r0, d4fd8 <_Z15setLowPowerMode6String+0x78>
   d4f78:	4925      	ldr	r1, [pc, #148]	; (d5010 <_Z15setLowPowerMode6String+0xb0>)
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	f002 fc4b 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4f80:	2800      	cmp	r0, #0
   d4f82:	d03e      	beq.n	d5002 <_Z15setLowPowerMode6String+0xa2>
   d4f84:	f001 fb6c 	bl	d6660 <spark_cloud_flag_connected>
   d4f88:	4c22      	ldr	r4, [pc, #136]	; (d5014 <_Z15setLowPowerMode6String+0xb4>)
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4f8a:	b918      	cbnz	r0, d4f94 <_Z15setLowPowerMode6String+0x34>
      connectToParticle();
   d4f8c:	f7ff fa6c 	bl	d4468 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4f90:	2301      	movs	r3, #1
   d4f92:	70e3      	strb	r3, [r4, #3]
   d4f94:	f7ff fb60 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        val_(0) {
   d4f98:	2500      	movs	r5, #0
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4f9a:	4b1f      	ldr	r3, [pc, #124]	; (d5018 <_Z15setLowPowerMode6String+0xb8>)
   d4f9c:	f88d 5000 	strb.w	r5, [sp]
   d4fa0:	781b      	ldrb	r3, [r3, #0]
   d4fa2:	4a1e      	ldr	r2, [pc, #120]	; (d501c <_Z15setLowPowerMode6String+0xbc>)
   d4fa4:	491e      	ldr	r1, [pc, #120]	; (d5020 <_Z15setLowPowerMode6String+0xc0>)
   d4fa6:	a802      	add	r0, sp, #8
   d4fa8:	f7ff f8e7 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4fac:	a803      	add	r0, sp, #12
   d4fae:	f7ff fc9f 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4fb6:	f001 fc37 	bl	d6828 <delay>
    awakeTimer.start();                                               // Wake for 30 minutes - then back to low power mode.  Resets timer if already running
   d4fba:	481a      	ldr	r0, [pc, #104]	; (d5024 <_Z15setLowPowerMode6String+0xc4>)
   d4fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4fc0:	f7ff f9e6 	bl	d4390 <_ZN5Timer5startEj>
    sysStatus.lowPowerMode = false;                                   // update the system variable to reflect the new lowPowerMode
   d4fc4:	71a5      	strb	r5, [r4, #6]
   d4fc6:	e01c      	b.n	d5002 <_Z15setLowPowerMode6String+0xa2>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4fc8:	4911      	ldr	r1, [pc, #68]	; (d5010 <_Z15setLowPowerMode6String+0xb0>)
   d4fca:	4620      	mov	r0, r4
   d4fcc:	f002 fc23 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4fd0:	2800      	cmp	r0, #0
   d4fd2:	d1cc      	bne.n	d4f6e <_Z15setLowPowerMode6String+0xe>
}
   d4fd4:	b005      	add	sp, #20
   d4fd6:	bd30      	pop	{r4, r5, pc}
   d4fd8:	f001 fb42 	bl	d6660 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4fdc:	b170      	cbz	r0, d4ffc <_Z15setLowPowerMode6String+0x9c>
   d4fde:	f7ff fb3b 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4fe2:	2300      	movs	r3, #0
   d4fe4:	f88d 3000 	strb.w	r3, [sp]
   d4fe8:	4b0b      	ldr	r3, [pc, #44]	; (d5018 <_Z15setLowPowerMode6String+0xb8>)
   d4fea:	4a0f      	ldr	r2, [pc, #60]	; (d5028 <_Z15setLowPowerMode6String+0xc8>)
   d4fec:	781b      	ldrb	r3, [r3, #0]
   d4fee:	490c      	ldr	r1, [pc, #48]	; (d5020 <_Z15setLowPowerMode6String+0xc0>)
   d4ff0:	a802      	add	r0, sp, #8
   d4ff2:	f7ff f8c2 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ff6:	a803      	add	r0, sp, #12
   d4ff8:	f7ff fc7a 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sysStatus.lowPowerMode = true;
   d4ffc:	4b05      	ldr	r3, [pc, #20]	; (d5014 <_Z15setLowPowerMode6String+0xb4>)
   d4ffe:	2201      	movs	r2, #1
   d5000:	719a      	strb	r2, [r3, #6]
  systemStatusWriteNeeded = true;
   d5002:	4b0a      	ldr	r3, [pc, #40]	; (d502c <_Z15setLowPowerMode6String+0xcc>)
   d5004:	2001      	movs	r0, #1
   d5006:	7018      	strb	r0, [r3, #0]
  return 1;
   d5008:	e7e4      	b.n	d4fd4 <_Z15setLowPowerMode6String+0x74>
   d500a:	bf00      	nop
   d500c:	000dac68 	.word	0x000dac68
   d5010:	000dadfd 	.word	0x000dadfd
   d5014:	2003e53c 	.word	0x2003e53c
   d5018:	2003e484 	.word	0x2003e484
   d501c:	000daf5a 	.word	0x000daf5a
   d5020:	000daf46 	.word	0x000daf46
   d5024:	2003e490 	.word	0x2003e490
   d5028:	000daf4b 	.word	0x000daf4b
   d502c:	2003e570 	.word	0x2003e570

000d5030 <_Z12controlValve6String>:
{
   d5030:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5032:	4935      	ldr	r1, [pc, #212]	; (d5108 <_Z12controlValve6String+0xd8>)
   d5034:	b085      	sub	sp, #20
   d5036:	4604      	mov	r4, r0
   d5038:	f002 fbed 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
   d503c:	b360      	cbz	r0, d5098 <_Z12controlValve6String+0x68>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d503e:	4620      	mov	r0, r4
   d5040:	4931      	ldr	r1, [pc, #196]	; (d5108 <_Z12controlValve6String+0xd8>)
   d5042:	4f32      	ldr	r7, [pc, #200]	; (d510c <_Z12controlValve6String+0xdc>)
   d5044:	4d32      	ldr	r5, [pc, #200]	; (d5110 <_Z12controlValve6String+0xe0>)
   d5046:	4e33      	ldr	r6, [pc, #204]	; (d5114 <_Z12controlValve6String+0xe4>)
   d5048:	f002 fbe5 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "1") {                                     // Open the water valve
   d504c:	4604      	mov	r4, r0
   d504e:	bb58      	cbnz	r0, d50a8 <_Z12controlValve6String+0x78>
    digitalWrite(solDirection,LOW);                               // Close the valve
   d5050:	4601      	mov	r1, r0
   d5052:	2002      	movs	r0, #2
   d5054:	f003 f801 	bl	d805a <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d5058:	4621      	mov	r1, r4
   d505a:	2003      	movs	r0, #3
   d505c:	f002 fffd 	bl	d805a <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d5060:	6968      	ldr	r0, [r5, #20]
   d5062:	f001 fbe1 	bl	d6828 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d5066:	2101      	movs	r1, #1
   d5068:	2003      	movs	r0, #3
   d506a:	f002 fff6 	bl	d805a <digitalWrite>
    delay(1000);
   d506e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5072:	f001 fbd9 	bl	d6828 <delay>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d5076:	4621      	mov	r1, r4
   d5078:	2003      	movs	r0, #3
   d507a:	f002 ffee 	bl	d805a <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d507e:	6968      	ldr	r0, [r5, #20]
   d5080:	f001 fbd2 	bl	d6828 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d5084:	2101      	movs	r1, #1
   d5086:	2003      	movs	r0, #3
   d5088:	f002 ffe7 	bl	d805a <digitalWrite>
    Particle.publish("Watering","Close the valve",PRIVATE);
   d508c:	7833      	ldrb	r3, [r6, #0]
   d508e:	4a22      	ldr	r2, [pc, #136]	; (d5118 <_Z12controlValve6String+0xe8>)
    current.solenoidState = false;
   d5090:	60fc      	str	r4, [r7, #12]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d5092:	f88d 4000 	strb.w	r4, [sp]
   d5096:	e02c      	b.n	d50f2 <_Z12controlValve6String+0xc2>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5098:	4920      	ldr	r1, [pc, #128]	; (d511c <_Z12controlValve6String+0xec>)
   d509a:	4620      	mov	r0, r4
   d509c:	f002 fbbb 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;              // Before we begin, let's make sure we have a valid input
   d50a0:	2800      	cmp	r0, #0
   d50a2:	d1cc      	bne.n	d503e <_Z12controlValve6String+0xe>
}
   d50a4:	b005      	add	sp, #20
   d50a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    current.solenoidState = true;
   d50a8:	2401      	movs	r4, #1
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d50aa:	4621      	mov	r1, r4
   d50ac:	2002      	movs	r0, #2
    current.solenoidState = true;
   d50ae:	60fc      	str	r4, [r7, #12]
    digitalWrite(solDirection,HIGH);                              // Open the valve
   d50b0:	f002 ffd3 	bl	d805a <digitalWrite>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d50b4:	2100      	movs	r1, #0
   d50b6:	2003      	movs	r0, #3
   d50b8:	f002 ffcf 	bl	d805a <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d50bc:	6968      	ldr	r0, [r5, #20]
   d50be:	f001 fbb3 	bl	d6828 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d50c2:	4621      	mov	r1, r4
   d50c4:	2003      	movs	r0, #3
   d50c6:	f002 ffc8 	bl	d805a <digitalWrite>
    delay(1000);
   d50ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d50ce:	f001 fbab 	bl	d6828 <delay>
    digitalWrite(solEnablePin,LOW);                               // Enable the solenoid
   d50d2:	2100      	movs	r1, #0
   d50d4:	2003      	movs	r0, #3
   d50d6:	f002 ffc0 	bl	d805a <digitalWrite>
    delay(sysStatus.solenoidHoldTime);
   d50da:	6968      	ldr	r0, [r5, #20]
   d50dc:	f001 fba4 	bl	d6828 <delay>
    digitalWrite(solEnablePin,HIGH);                              // Diable the solenoid
   d50e0:	4621      	mov	r1, r4
   d50e2:	2003      	movs	r0, #3
   d50e4:	f002 ffb9 	bl	d805a <digitalWrite>
   d50e8:	2300      	movs	r3, #0
    Particle.publish("Watering","Open the Valve",PRIVATE);
   d50ea:	f88d 3000 	strb.w	r3, [sp]
   d50ee:	4a0c      	ldr	r2, [pc, #48]	; (d5120 <_Z12controlValve6String+0xf0>)
   d50f0:	7833      	ldrb	r3, [r6, #0]
    Particle.publish("Watering","Close the valve",PRIVATE);
   d50f2:	490c      	ldr	r1, [pc, #48]	; (d5124 <_Z12controlValve6String+0xf4>)
   d50f4:	a802      	add	r0, sp, #8
   d50f6:	f7ff f840 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d50fa:	a803      	add	r0, sp, #12
   d50fc:	f7ff fbf8 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentStatusWriteNeeded = true;
   d5100:	4b09      	ldr	r3, [pc, #36]	; (d5128 <_Z12controlValve6String+0xf8>)
   d5102:	2001      	movs	r0, #1
   d5104:	7018      	strb	r0, [r3, #0]
  return true;
   d5106:	e7cd      	b.n	d50a4 <_Z12controlValve6String+0x74>
   d5108:	000dac68 	.word	0x000dac68
   d510c:	2003e4dc 	.word	0x2003e4dc
   d5110:	2003e53c 	.word	0x2003e53c
   d5114:	2003e484 	.word	0x2003e484
   d5118:	000daf84 	.word	0x000daf84
   d511c:	000dadfd 	.word	0x000dadfd
   d5120:	000daf6c 	.word	0x000daf6c
   d5124:	000daf7b 	.word	0x000daf7b
   d5128:	2003e501 	.word	0x2003e501

000d512c <setup>:
{
   d512c:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d512e:	4bb9      	ldr	r3, [pc, #740]	; (d5414 <setup+0x2e8>)
{
   d5130:	b0bd      	sub	sp, #244	; 0xf4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5132:	aa0c      	add	r2, sp, #48	; 0x30
   d5134:	f103 0510 	add.w	r5, r3, #16
   d5138:	4616      	mov	r6, r2
   d513a:	6818      	ldr	r0, [r3, #0]
   d513c:	6859      	ldr	r1, [r3, #4]
   d513e:	4614      	mov	r4, r2
   d5140:	c403      	stmia	r4!, {r0, r1}
   d5142:	3308      	adds	r3, #8
   d5144:	42ab      	cmp	r3, r5
   d5146:	4622      	mov	r2, r4
   d5148:	d1f7      	bne.n	d513a <setup+0xe>
   d514a:	8819      	ldrh	r1, [r3, #0]
   d514c:	789b      	ldrb	r3, [r3, #2]
   d514e:	8021      	strh	r1, [r4, #0]
   d5150:	70a3      	strb	r3, [r4, #2]
   d5152:	222d      	movs	r2, #45	; 0x2d
   d5154:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d5156:	4fb0      	ldr	r7, [pc, #704]	; (d5418 <setup+0x2ec>)
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d5158:	f10d 0043 	add.w	r0, sp, #67	; 0x43
   d515c:	f003 fdd8 	bl	d8d10 <memset>
  state = IDLE_STATE;
   d5160:	2302      	movs	r3, #2
   d5162:	703b      	strb	r3, [r7, #0]
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d5164:	f7ff f92a 	bl	d43bc <fastPinGetPinmap>
   d5168:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
   d516c:	f7ff f926 	bl	d43bc <fastPinGetPinmap>
   d5170:	016c      	lsls	r4, r5, #5
   d5172:	f890 5031 	ldrb.w	r5, [r0, #49]	; 0x31
   d5176:	f005 051f 	and.w	r5, r5, #31
   d517a:	4325      	orrs	r5, r4
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d517c:	2d2f      	cmp	r5, #47	; 0x2f
   d517e:	f340 8221 	ble.w	d55c4 <setup+0x498>
   d5182:	4aa6      	ldr	r2, [pc, #664]	; (d541c <setup+0x2f0>)
   d5184:	2100      	movs	r1, #0
   d5186:	200a      	movs	r0, #10
   d5188:	f001 f9be 	bl	d6508 <panic_>
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   d518c:	4ba4      	ldr	r3, [pc, #656]	; (d5420 <setup+0x2f4>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d518e:	f005 051f 	and.w	r5, r5, #31

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d5192:	2401      	movs	r4, #1
   d5194:	fa04 f505 	lsl.w	r5, r4, r5
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d5198:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d519c:	4621      	mov	r1, r4
   d519e:	2007      	movs	r0, #7
   d51a0:	f002 ff4a 	bl	d8038 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
   d51a4:	2100      	movs	r1, #0
   d51a6:	2004      	movs	r0, #4
   d51a8:	f002 ff46 	bl	d8038 <pinMode>
  pinMode(soilPin1, INPUT);
   d51ac:	2100      	movs	r1, #0
   d51ae:	2013      	movs	r0, #19
   d51b0:	f002 ff42 	bl	d8038 <pinMode>
  pinMode(soilPin2, INPUT);
   d51b4:	2100      	movs	r1, #0
   d51b6:	2012      	movs	r0, #18
   d51b8:	f002 ff3e 	bl	d8038 <pinMode>
  pinMode(pressurePin, INPUT);
   d51bc:	2100      	movs	r1, #0
   d51be:	2011      	movs	r0, #17
   d51c0:	f002 ff3a 	bl	d8038 <pinMode>
  pinMode(sensorShutdown, OUTPUT);
   d51c4:	4621      	mov	r1, r4
   d51c6:	200e      	movs	r0, #14
   d51c8:	f002 ff36 	bl	d8038 <pinMode>
  digitalWrite(sensorShutdown,HIGH);                              // Enable the sensors
   d51cc:	4621      	mov	r1, r4
   d51ce:	200e      	movs	r0, #14
   d51d0:	f002 ff43 	bl	d805a <digitalWrite>
  pinMode(solEnablePin,OUTPUT);
   d51d4:	4621      	mov	r1, r4
   d51d6:	2003      	movs	r0, #3
   d51d8:	f002 ff2e 	bl	d8038 <pinMode>
  pinMode(solDirection,OUTPUT);
   d51dc:	4621      	mov	r1, r4
   d51de:	2002      	movs	r0, #2
   d51e0:	f002 ff2a 	bl	d8038 <pinMode>
  digitalWrite(solEnablePin,HIGH);                               // Disables the solenoid valve
   d51e4:	4621      	mov	r1, r4
   d51e6:	2003      	movs	r0, #3
   d51e8:	f002 ff37 	bl	d805a <digitalWrite>
  digitalWrite(solDirection,LOW);                                // Set to close the valve
   d51ec:	2100      	movs	r1, #0
   d51ee:	2002      	movs	r0, #2
   d51f0:	f002 ff33 	bl	d805a <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d51f4:	a804      	add	r0, sp, #16
   d51f6:	f001 fa3b 	bl	d6670 <spark_deviceID>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d51fa:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d51fc:	2300      	movs	r3, #0
   d51fe:	227d      	movs	r2, #125	; 0x7d
   d5200:	a91c      	add	r1, sp, #112	; 0x70
   d5202:	a804      	add	r0, sp, #16
   d5204:	f002 fb19 	bl	d783a <_ZNK6String8getBytesEPhjj>
   d5208:	462b      	mov	r3, r5
   d520a:	462a      	mov	r2, r5
   d520c:	4985      	ldr	r1, [pc, #532]	; (d5424 <setup+0x2f8>)
   d520e:	e9cd 5500 	strd	r5, r5, [sp]
   d5212:	a81c      	add	r0, sp, #112	; 0x70
   d5214:	f001 fa3c 	bl	d6690 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d5218:	4983      	ldr	r1, [pc, #524]	; (d5428 <setup+0x2fc>)
   d521a:	4884      	ldr	r0, [pc, #528]	; (d542c <setup+0x300>)
   d521c:	f7fe ffa9 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, &var, INT);
   d5220:	4983      	ldr	r1, [pc, #524]	; (d5430 <setup+0x304>)
   d5222:	4884      	ldr	r0, [pc, #528]	; (d5434 <setup+0x308>)
   d5224:	f7fe ffa1 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, var, STRING);
   d5228:	4983      	ldr	r1, [pc, #524]	; (d5438 <setup+0x30c>)
   d522a:	4884      	ldr	r0, [pc, #528]	; (d543c <setup+0x310>)
   d522c:	f7fe ffa1 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5230:	4983      	ldr	r1, [pc, #524]	; (d5440 <setup+0x314>)
   d5232:	4884      	ldr	r0, [pc, #528]	; (d5444 <setup+0x318>)
   d5234:	f7fe ff9d 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5238:	4983      	ldr	r1, [pc, #524]	; (d5448 <setup+0x31c>)
   d523a:	4884      	ldr	r0, [pc, #528]	; (d544c <setup+0x320>)
   d523c:	f7fe ff99 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, &var, INT);
   d5240:	4983      	ldr	r1, [pc, #524]	; (d5450 <setup+0x324>)
   d5242:	4884      	ldr	r0, [pc, #528]	; (d5454 <setup+0x328>)
   d5244:	f7fe ff91 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d5248:	4983      	ldr	r1, [pc, #524]	; (d5458 <setup+0x32c>)
   d524a:	4884      	ldr	r0, [pc, #528]	; (d545c <setup+0x330>)
   d524c:	f7fe ff8d 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d5250:	4983      	ldr	r1, [pc, #524]	; (d5460 <setup+0x334>)
   d5252:	4884      	ldr	r0, [pc, #528]	; (d5464 <setup+0x338>)
   d5254:	f7fe ff89 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, var, STRING);
   d5258:	4983      	ldr	r1, [pc, #524]	; (d5468 <setup+0x33c>)
   d525a:	4884      	ldr	r0, [pc, #528]	; (d546c <setup+0x340>)
   d525c:	f7fe ff89 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5260:	4983      	ldr	r1, [pc, #524]	; (d5470 <setup+0x344>)
   d5262:	4884      	ldr	r0, [pc, #528]	; (d5474 <setup+0x348>)
   d5264:	f7fe ff85 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5268:	4983      	ldr	r1, [pc, #524]	; (d5478 <setup+0x34c>)
   d526a:	4884      	ldr	r0, [pc, #528]	; (d547c <setup+0x350>)
   d526c:	f7fe ff81 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5270:	4983      	ldr	r1, [pc, #524]	; (d5480 <setup+0x354>)
   d5272:	4884      	ldr	r0, [pc, #528]	; (d5484 <setup+0x358>)
   d5274:	f7fe ff7d 	bl	d4172 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _variable(varKey, &var, INT);
   d5278:	4983      	ldr	r1, [pc, #524]	; (d5488 <setup+0x35c>)
   d527a:	4884      	ldr	r0, [pc, #528]	; (d548c <setup+0x360>)
   d527c:	f7fe ff75 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d5280:	4983      	ldr	r1, [pc, #524]	; (d5490 <setup+0x364>)
   d5282:	4884      	ldr	r0, [pc, #528]	; (d5494 <setup+0x368>)
   d5284:	f7fe ff71 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d5288:	4983      	ldr	r1, [pc, #524]	; (d5498 <setup+0x36c>)
   d528a:	4884      	ldr	r0, [pc, #528]	; (d549c <setup+0x370>)
   d528c:	f7fe ff6d 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
   d5290:	4983      	ldr	r1, [pc, #524]	; (d54a0 <setup+0x374>)
   d5292:	4884      	ldr	r0, [pc, #528]	; (d54a4 <setup+0x378>)
   d5294:	f7fe ff69 	bl	d416a <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d5298:	4983      	ldr	r1, [pc, #524]	; (d54a8 <setup+0x37c>)
   d529a:	4884      	ldr	r0, [pc, #528]	; (d54ac <setup+0x380>)
   d529c:	f7fe ffea 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52a0:	4983      	ldr	r1, [pc, #524]	; (d54b0 <setup+0x384>)
   d52a2:	4884      	ldr	r0, [pc, #528]	; (d54b4 <setup+0x388>)
   d52a4:	f7fe ffe6 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52a8:	4983      	ldr	r1, [pc, #524]	; (d54b8 <setup+0x38c>)
   d52aa:	4884      	ldr	r0, [pc, #528]	; (d54bc <setup+0x390>)
   d52ac:	f7fe ffe2 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52b0:	4983      	ldr	r1, [pc, #524]	; (d54c0 <setup+0x394>)
   d52b2:	4884      	ldr	r0, [pc, #528]	; (d54c4 <setup+0x398>)
   d52b4:	f7fe ffde 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52b8:	4983      	ldr	r1, [pc, #524]	; (d54c8 <setup+0x39c>)
   d52ba:	4884      	ldr	r0, [pc, #528]	; (d54cc <setup+0x3a0>)
   d52bc:	f7fe ffda 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52c0:	4983      	ldr	r1, [pc, #524]	; (d54d0 <setup+0x3a4>)
   d52c2:	4884      	ldr	r0, [pc, #528]	; (d54d4 <setup+0x3a8>)
   d52c4:	f7fe ffd6 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52c8:	4983      	ldr	r1, [pc, #524]	; (d54d8 <setup+0x3ac>)
   d52ca:	4884      	ldr	r0, [pc, #528]	; (d54dc <setup+0x3b0>)
   d52cc:	f7fe ffd2 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52d0:	4983      	ldr	r1, [pc, #524]	; (d54e0 <setup+0x3b4>)
   d52d2:	4884      	ldr	r0, [pc, #528]	; (d54e4 <setup+0x3b8>)
   d52d4:	f7fe ffce 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52d8:	4983      	ldr	r1, [pc, #524]	; (d54e8 <setup+0x3bc>)
   d52da:	4884      	ldr	r0, [pc, #528]	; (d54ec <setup+0x3c0>)
   d52dc:	f7fe ffca 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52e0:	4983      	ldr	r1, [pc, #524]	; (d54f0 <setup+0x3c4>)
   d52e2:	4884      	ldr	r0, [pc, #528]	; (d54f4 <setup+0x3c8>)
   d52e4:	f7fe ffc6 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52e8:	4983      	ldr	r1, [pc, #524]	; (d54f8 <setup+0x3cc>)
   d52ea:	4884      	ldr	r0, [pc, #528]	; (d54fc <setup+0x3d0>)
   d52ec:	f7fe ffc2 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52f0:	4983      	ldr	r1, [pc, #524]	; (d5500 <setup+0x3d4>)
   d52f2:	4884      	ldr	r0, [pc, #528]	; (d5504 <setup+0x3d8>)
   d52f4:	f7fe ffbe 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52f8:	4983      	ldr	r1, [pc, #524]	; (d5508 <setup+0x3dc>)
   d52fa:	4884      	ldr	r0, [pc, #528]	; (d550c <setup+0x3e0>)
   d52fc:	f7fe ffba 	bl	d4274 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  if (MemVersionNumber != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d5300:	f002 feee 	bl	d80e0 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d5304:	4628      	mov	r0, r5
   d5306:	f000 ff97 	bl	d6238 <HAL_EEPROM_Read>
   d530a:	2802      	cmp	r0, #2
   d530c:	d011      	beq.n	d5332 <setup+0x206>
    EEPROM.put(MEM_MAP::versionAddr,MemVersionNumber);
   d530e:	f002 fee7 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5312:	497f      	ldr	r1, [pc, #508]	; (d5510 <setup+0x3e4>)
   d5314:	2204      	movs	r2, #4
   d5316:	4628      	mov	r0, r5
   d5318:	f000 ff9e 	bl	d6258 <HAL_EEPROM_Put>
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d531c:	f002 fee0 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
   d5320:	4620      	mov	r0, r4
   d5322:	2204      	movs	r2, #4
   d5324:	a908      	add	r1, sp, #32
    for (int i=1; i < 0xF0; i++) {
   d5326:	3401      	adds	r4, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d5328:	9508      	str	r5, [sp, #32]
   d532a:	f000 ff95 	bl	d6258 <HAL_EEPROM_Put>
    for (int i=1; i < 0xF0; i++) {
   d532e:	2cf0      	cmp	r4, #240	; 0xf0
   d5330:	d1f4      	bne.n	d531c <setup+0x1f0>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5332:	4c78      	ldr	r4, [pc, #480]	; (d5514 <setup+0x3e8>)
  EEPROM.get(MEM_MAP::systemStatusAddr,sysStatus);                      // Load the System Status Object
   d5334:	f002 fed4 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
   d5338:	2234      	movs	r2, #52	; 0x34
   d533a:	4621      	mov	r1, r4
   d533c:	2001      	movs	r0, #1
   d533e:	f000 ff83 	bl	d6248 <HAL_EEPROM_Get>
  EEPROM.get(MEM_MAP::currentStatusAddr,current);
   d5342:	f002 fecd 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
   d5346:	4950      	ldr	r1, [pc, #320]	; (d5488 <setup+0x35c>)
   d5348:	2224      	movs	r2, #36	; 0x24
   d534a:	2050      	movs	r0, #80	; 0x50
   d534c:	f000 ff7c 	bl	d6248 <HAL_EEPROM_Get>
  if (!sysStatus.lowPowerMode) awakeTimer.start();                      // If we are not in low power mode, will start a 30 min timer then set it
   d5350:	79a3      	ldrb	r3, [r4, #6]
   d5352:	b923      	cbnz	r3, d535e <setup+0x232>
   d5354:	4870      	ldr	r0, [pc, #448]	; (d5518 <setup+0x3ec>)
   d5356:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d535a:	f7ff f819 	bl	d4390 <_ZN5Timer5startEj>
  if (sysStatus.TempHumidConfig) {                                      // If there is a sensor present - initialize it
   d535e:	7b23      	ldrb	r3, [r4, #12]
   d5360:	b14b      	cbz	r3, d5376 <setup+0x24a>
    if (!tempHumidSensor.begin(0x44)) {
   d5362:	486e      	ldr	r0, [pc, #440]	; (d551c <setup+0x3f0>)
   d5364:	2144      	movs	r1, #68	; 0x44
   d5366:	f000 fe23 	bl	d5fb0 <_ZN14Adafruit_SHT315beginEh>
   d536a:	b920      	cbnz	r0, d5376 <setup+0x24a>
      sysStatus.TempHumidConfig = false;                                // Set to 0x45 for alternate i2c addr - turns off the sensor if it fails to initalize
   d536c:	7320      	strb	r0, [r4, #12]
      strcpy(StartupMessage,"Temp/Humidity Sensor Failed to Inialize - disabling");
   d536e:	496c      	ldr	r1, [pc, #432]	; (d5520 <setup+0x3f4>)
   d5370:	4630      	mov	r0, r6
   d5372:	f003 fd03 	bl	d8d7c <strcpy>
  if (sysStatus.lightSensorConfig) {                                    // This will tell us if we need to initialize the sensor or not
   d5376:	7c23      	ldrb	r3, [r4, #16]
   d5378:	b133      	cbz	r3, d5388 <setup+0x25c>
    lightSensor.begin();
   d537a:	486a      	ldr	r0, [pc, #424]	; (d5524 <setup+0x3f8>)
   d537c:	f000 fd89 	bl	d5e92 <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res);
   d5380:	4868      	ldr	r0, [pc, #416]	; (d5524 <setup+0x3f8>)
   d5382:	2120      	movs	r1, #32
   d5384:	f000 fdc1 	bl	d5f0a <_ZN6BH175015set_sensor_modeENS_8SensModeE>
        int reason = RESET_REASON_NONE;
   d5388:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d538a:	4611      	mov	r1, r2
   d538c:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d538e:	9208      	str	r2, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5390:	f000 ff2a 	bl	d61e8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5394:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET) {                 // Check to see if we are starting from a pin reset
   d5396:	2b14      	cmp	r3, #20
    sysStatus.resetCount++;
   d5398:	bf02      	ittt	eq
   d539a:	69a3      	ldreq	r3, [r4, #24]
   d539c:	3301      	addeq	r3, #1
   d539e:	61a3      	streq	r3, [r4, #24]
  if (sysStatus.resetCount >=6) {                                       // If we get to sysStatus.resetCount 4, we are resetting without entering the main loop
   d53a0:	69a3      	ldr	r3, [r4, #24]
   d53a2:	2b05      	cmp	r3, #5
   d53a4:	dd03      	ble.n	d53ae <setup+0x282>
    sysStatus.resetCount = 4;                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d53a6:	2304      	movs	r3, #4
   d53a8:	61a3      	str	r3, [r4, #24]
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d53aa:	f7ff f961 	bl	d4670 <_Z14fullModemResetv>
  if(sysStatus.solenoidConfig) {
   d53ae:	7c63      	ldrb	r3, [r4, #17]
   d53b0:	b14b      	cbz	r3, d53c6 <setup+0x29a>
    snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d53b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d53b4:	f003 f89c 	bl	d84f0 <__aeabi_f2d>
   d53b8:	4a5b      	ldr	r2, [pc, #364]	; (d5528 <setup+0x3fc>)
   d53ba:	e9cd 0100 	strd	r0, r1, [sp]
   d53be:	482a      	ldr	r0, [pc, #168]	; (d5468 <setup+0x33c>)
   d53c0:	2108      	movs	r1, #8
   d53c2:	f001 f9fd 	bl	d67c0 <snprintf>
  sysStatus.solenoidHoldTime = 6;                                      // Set a reasonable value - based on testing 8mSec
   d53c6:	2306      	movs	r3, #6
   d53c8:	6163      	str	r3, [r4, #20]
  if (sysStatus.solenoidConfig && current.solenoidState) controlValve("0");   // Can't start watering until we get to the main loop
   d53ca:	7c63      	ldrb	r3, [r4, #17]
   d53cc:	b163      	cbz	r3, d53e8 <setup+0x2bc>
   d53ce:	4b2e      	ldr	r3, [pc, #184]	; (d5488 <setup+0x35c>)
   d53d0:	68db      	ldr	r3, [r3, #12]
   d53d2:	b14b      	cbz	r3, d53e8 <setup+0x2bc>
   d53d4:	4955      	ldr	r1, [pc, #340]	; (d552c <setup+0x400>)
   d53d6:	a808      	add	r0, sp, #32
   d53d8:	f002 f9ef 	bl	d77ba <_ZN6StringC1EPKc>
   d53dc:	a808      	add	r0, sp, #32
   d53de:	f7ff fe27 	bl	d5030 <_Z12controlValve6String>
   d53e2:	a808      	add	r0, sp, #32
   d53e4:	f002 f99e 	bl	d7724 <_ZN6StringD1Ev>
  sysStatus.solarPowerMode = true;                                      // Set this as a default
   d53e8:	2301      	movs	r3, #1
   d53ea:	7163      	strb	r3, [r4, #5]
  setPowerConfig();                                                     // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
   d53ec:	f7ff f8da 	bl	d45a4 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) setLowPowerMode("0");                   // Rescue mode to take out of low power mode and connect
   d53f0:	2004      	movs	r0, #4
   d53f2:	f002 fe4b 	bl	d808c <digitalRead>
   d53f6:	2800      	cmp	r0, #0
   d53f8:	f040 809a 	bne.w	d5530 <setup+0x404>
   d53fc:	494b      	ldr	r1, [pc, #300]	; (d552c <setup+0x400>)
   d53fe:	a808      	add	r0, sp, #32
   d5400:	f002 f9db 	bl	d77ba <_ZN6StringC1EPKc>
   d5404:	a808      	add	r0, sp, #32
   d5406:	f7ff fdab 	bl	d4f60 <_Z15setLowPowerMode6String>
   d540a:	a808      	add	r0, sp, #32
   d540c:	f002 f98a 	bl	d7724 <_ZN6StringD1Ev>
   d5410:	e08e      	b.n	d5530 <setup+0x404>
   d5412:	bf00      	nop
   d5414:	000db30c 	.word	0x000db30c
   d5418:	2003e534 	.word	0x2003e534
   d541c:	000d6209 	.word	0x000d6209
   d5420:	50000300 	.word	0x50000300
   d5424:	000d49cd 	.word	0x000d49cd
   d5428:	2003e434 	.word	0x2003e434
   d542c:	000daf94 	.word	0x000daf94
   d5430:	2003e554 	.word	0x2003e554
   d5434:	000daf9b 	.word	0x000daf9b
   d5438:	000db34c 	.word	0x000db34c
   d543c:	000dafa6 	.word	0x000dafa6
   d5440:	2003e4bc 	.word	0x2003e4bc
   d5444:	000dafae 	.word	0x000dafae
   d5448:	2003e4ac 	.word	0x2003e4ac
   d544c:	000dafb9 	.word	0x000dafb9
   d5450:	2003e55c 	.word	0x2003e55c
   d5454:	000db0a7 	.word	0x000db0a7
   d5458:	2003e560 	.word	0x2003e560
   d545c:	000db0ba 	.word	0x000db0ba
   d5460:	2003e564 	.word	0x2003e564
   d5464:	000db0cb 	.word	0x000db0cb
   d5468:	2003e590 	.word	0x2003e590
   d546c:	000dafc8 	.word	0x000dafc8
   d5470:	2003e580 	.word	0x2003e580
   d5474:	000dafda 	.word	0x000dafda
   d5478:	2003e502 	.word	0x2003e502
   d547c:	000dafe6 	.word	0x000dafe6
   d5480:	2003e512 	.word	0x2003e512
   d5484:	000dafef 	.word	0x000dafef
   d5488:	2003e4dc 	.word	0x2003e4dc
   d548c:	000daffa 	.word	0x000daffa
   d5490:	2003e4e0 	.word	0x2003e4e0
   d5494:	000db008 	.word	0x000db008
   d5498:	2003e4e4 	.word	0x2003e4e4
   d549c:	000db016 	.word	0x000db016
   d54a0:	2003e56c 	.word	0x2003e56c
   d54a4:	000db01f 	.word	0x000db01f
   d54a8:	000d4109 	.word	0x000d4109
   d54ac:	000db02b 	.word	0x000db02b
   d54b0:	000d4f61 	.word	0x000d4f61
   d54b4:	000db037 	.word	0x000db037
   d54b8:	000d4ee5 	.word	0x000d4ee5
   d54bc:	000db044 	.word	0x000db044
   d54c0:	000d5031 	.word	0x000d5031
   d54c4:	000daf7b 	.word	0x000daf7b
   d54c8:	000d4a69 	.word	0x000d4a69
   d54cc:	000db051 	.word	0x000db051
   d54d0:	000d4b11 	.word	0x000d4b11
   d54d4:	000db060 	.word	0x000db060
   d54d8:	000d4b8d 	.word	0x000d4b8d
   d54dc:	000db072 	.word	0x000db072
   d54e0:	000d560d 	.word	0x000d560d
   d54e4:	000db081 	.word	0x000db081
   d54e8:	000d4c1d 	.word	0x000d4c1d
   d54ec:	000db091 	.word	0x000db091
   d54f0:	000d4ca5 	.word	0x000d4ca5
   d54f4:	000db0a4 	.word	0x000db0a4
   d54f8:	000d4d31 	.word	0x000d4d31
   d54fc:	000db0b7 	.word	0x000db0b7
   d5500:	000d4dbd 	.word	0x000d4dbd
   d5504:	000db0c8 	.word	0x000db0c8
   d5508:	000d4e49 	.word	0x000d4e49
   d550c:	000db0db 	.word	0x000db0db
   d5510:	000db354 	.word	0x000db354
   d5514:	2003e53c 	.word	0x2003e53c
   d5518:	2003e490 	.word	0x2003e490
   d551c:	2003e574 	.word	0x2003e574
   d5520:	000db0ed 	.word	0x000db0ed
   d5524:	2003e524 	.word	0x2003e524
   d5528:	000daf1c 	.word	0x000daf1c
   d552c:	000dadfd 	.word	0x000dadfd
  takeMeasurements();                                                   // For the benefit of monitoring the device
   d5530:	f7ff f91a 	bl	d4768 <_Z16takeMeasurementsv>
  if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d5534:	4b2e      	ldr	r3, [pc, #184]	; (d55f0 <setup+0x4c4>)
   d5536:	68a2      	ldr	r2, [r4, #8]
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	429a      	cmp	r2, r3
   d553c:	dc48      	bgt.n	d55d0 <setup+0x4a4>
   d553e:	2308      	movs	r3, #8
   d5540:	703b      	strb	r3, [r7, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5542:	f001 f88d 	bl	d6660 <spark_cloud_flag_connected>
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5546:	b170      	cbz	r0, d5566 <setup+0x43a>
   d5548:	7923      	ldrb	r3, [r4, #4]
   d554a:	b163      	cbz	r3, d5566 <setup+0x43a>
   d554c:	2300      	movs	r3, #0
   d554e:	f88d 3000 	strb.w	r3, [sp]
   d5552:	4b28      	ldr	r3, [pc, #160]	; (d55f4 <setup+0x4c8>)
   d5554:	4928      	ldr	r1, [pc, #160]	; (d55f8 <setup+0x4cc>)
   d5556:	781b      	ldrb	r3, [r3, #0]
   d5558:	a808      	add	r0, sp, #32
   d555a:	4632      	mov	r2, r6
   d555c:	f7fe fe0d 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5560:	a809      	add	r0, sp, #36	; 0x24
   d5562:	f7ff f9c5 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.println(StartupMessage);
   d5566:	f002 fc55 	bl	d7e14 <_Z16_fetch_usbserialv>
   d556a:	4631      	mov	r1, r6
   d556c:	f002 f894 	bl	d7698 <_ZN5Print7printlnEPKc>
  Time.zone(2.0);                                                        // set timezone to Rwanda Time
   d5570:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d5574:	f002 face 	bl	d7b14 <_ZN9TimeClass4zoneEf>
        return waitConditionWhile(_condition, []{ return true; });
   d5578:	f7ff f86e 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d557c:	f001 f870 	bl	d6660 <spark_cloud_flag_connected>
  if(Particle.connected() && sysStatus.verboseMode) Particle.publish("Local Time",Time.timeStr(),PRIVATE);
   d5580:	b1c0      	cbz	r0, d55b4 <setup+0x488>
   d5582:	7923      	ldrb	r3, [r4, #4]
   d5584:	b1b3      	cbz	r3, d55b4 <setup+0x488>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d5586:	f002 fb3a 	bl	d7bfe <_ZN9TimeClass3nowEv>
   d558a:	4602      	mov	r2, r0
   d558c:	17c3      	asrs	r3, r0, #31
   d558e:	a808      	add	r0, sp, #32
   d5590:	f002 fae0 	bl	d7b54 <_ZN9TimeClass7timeStrEx>
   d5594:	2300      	movs	r3, #0
   d5596:	f88d 3000 	strb.w	r3, [sp]
   d559a:	4b16      	ldr	r3, [pc, #88]	; (d55f4 <setup+0x4c8>)
   d559c:	9a08      	ldr	r2, [sp, #32]
   d559e:	781b      	ldrb	r3, [r3, #0]
   d55a0:	4916      	ldr	r1, [pc, #88]	; (d55fc <setup+0x4d0>)
   d55a2:	a802      	add	r0, sp, #8
   d55a4:	f7fe fde9 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d55a8:	a803      	add	r0, sp, #12
   d55aa:	f7ff f9a1 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55ae:	a808      	add	r0, sp, #32
   d55b0:	f002 f8b8 	bl	d7724 <_ZN6StringD1Ev>
  systemStatusWriteNeeded = true;                                       // likely something has changed
   d55b4:	4b12      	ldr	r3, [pc, #72]	; (d5600 <setup+0x4d4>)
   d55b6:	2201      	movs	r2, #1
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d55b8:	a804      	add	r0, sp, #16
  systemStatusWriteNeeded = true;                                       // likely something has changed
   d55ba:	701a      	strb	r2, [r3, #0]
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d55bc:	f002 f8b2 	bl	d7724 <_ZN6StringD1Ev>
}
   d55c0:	b03d      	add	sp, #244	; 0xf4
   d55c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*p_pin < P0_PIN_NUM)
   d55c4:	2d1f      	cmp	r5, #31
   d55c6:	f73f ade1 	bgt.w	d518c <setup+0x60>
        return NRF_P0;
   d55ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   d55ce:	e5e0      	b.n	d5192 <setup+0x66>
  else if(!connectToParticle()) {
   d55d0:	f7fe ff4a 	bl	d4468 <_Z17connectToParticlev>
   d55d4:	2800      	cmp	r0, #0
   d55d6:	d1b4      	bne.n	d5542 <setup+0x416>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d55d8:	2301      	movs	r3, #1
   d55da:	703b      	strb	r3, [r7, #0]
   d55dc:	f000 fe1c 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d55e0:	4b08      	ldr	r3, [pc, #32]	; (d5604 <setup+0x4d8>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d55e2:	4909      	ldr	r1, [pc, #36]	; (d5608 <setup+0x4dc>)
    resetTimeStamp = millis();
   d55e4:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d55e6:	4630      	mov	r0, r6
   d55e8:	f003 fbc8 	bl	d8d7c <strcpy>
   d55ec:	e7a9      	b.n	d5542 <setup+0x416>
   d55ee:	bf00      	nop
   d55f0:	2003e1cc 	.word	0x2003e1cc
   d55f4:	2003e484 	.word	0x2003e484
   d55f8:	000db133 	.word	0x000db133
   d55fc:	000db13b 	.word	0x000db13b
   d5600:	2003e570 	.word	0x2003e570
   d5604:	2003e530 	.word	0x2003e530
   d5608:	000db121 	.word	0x000db121

000d560c <_Z18setSolenoidPresent6String>:
{
   d560c:	b530      	push	{r4, r5, lr}
   d560e:	b087      	sub	sp, #28
  controlValve("0");                                            // Make sure it is turned off
   d5610:	491b      	ldr	r1, [pc, #108]	; (d5680 <_Z18setSolenoidPresent6String+0x74>)
{
   d5612:	4604      	mov	r4, r0
  controlValve("0");                                            // Make sure it is turned off
   d5614:	a802      	add	r0, sp, #8
   d5616:	f002 f8d0 	bl	d77ba <_ZN6StringC1EPKc>
   d561a:	a802      	add	r0, sp, #8
   d561c:	f7ff fd08 	bl	d5030 <_Z12controlValve6String>
   d5620:	a802      	add	r0, sp, #8
   d5622:	f002 f87f 	bl	d7724 <_ZN6StringD1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5626:	4917      	ldr	r1, [pc, #92]	; (d5684 <_Z18setSolenoidPresent6String+0x78>)
   d5628:	4620      	mov	r0, r4
   d562a:	f002 f8f4 	bl	d7816 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d562e:	4605      	mov	r5, r0
   d5630:	b1a0      	cbz	r0, d565c <_Z18setSolenoidPresent6String+0x50>
    sysStatus.solenoidConfig = 1;
   d5632:	4b15      	ldr	r3, [pc, #84]	; (d5688 <_Z18setSolenoidPresent6String+0x7c>)
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d5634:	4a15      	ldr	r2, [pc, #84]	; (d568c <_Z18setSolenoidPresent6String+0x80>)
    sysStatus.solenoidConfig = 1;
   d5636:	2401      	movs	r4, #1
   d5638:	745c      	strb	r4, [r3, #17]
    systemStatusWriteNeeded = true;
   d563a:	4b15      	ldr	r3, [pc, #84]	; (d5690 <_Z18setSolenoidPresent6String+0x84>)
   d563c:	701c      	strb	r4, [r3, #0]
   d563e:	2300      	movs	r3, #0
    Particle.publish("Config","Solenoid Attached",PRIVATE);
   d5640:	f88d 3000 	strb.w	r3, [sp]
   d5644:	4b13      	ldr	r3, [pc, #76]	; (d5694 <_Z18setSolenoidPresent6String+0x88>)
   d5646:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d5648:	4913      	ldr	r1, [pc, #76]	; (d5698 <_Z18setSolenoidPresent6String+0x8c>)
   d564a:	a802      	add	r0, sp, #8
   d564c:	f7fe fd95 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5650:	a803      	add	r0, sp, #12
   d5652:	f7ff f94d 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5656:	4620      	mov	r0, r4
}
   d5658:	b007      	add	sp, #28
   d565a:	bd30      	pop	{r4, r5, pc}
   d565c:	4908      	ldr	r1, [pc, #32]	; (d5680 <_Z18setSolenoidPresent6String+0x74>)
   d565e:	4620      	mov	r0, r4
   d5660:	f002 f8d9 	bl	d7816 <_ZNK6String6equalsEPKc>
  else if (command == "0") {
   d5664:	2800      	cmp	r0, #0
   d5666:	d0f7      	beq.n	d5658 <_Z18setSolenoidPresent6String+0x4c>
    sysStatus.solenoidConfig = 0;
   d5668:	4b07      	ldr	r3, [pc, #28]	; (d5688 <_Z18setSolenoidPresent6String+0x7c>)
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d566a:	4a0c      	ldr	r2, [pc, #48]	; (d569c <_Z18setSolenoidPresent6String+0x90>)
    sysStatus.solenoidConfig = 0;
   d566c:	745d      	strb	r5, [r3, #17]
    systemStatusWriteNeeded = true;
   d566e:	4b08      	ldr	r3, [pc, #32]	; (d5690 <_Z18setSolenoidPresent6String+0x84>)
   d5670:	2401      	movs	r4, #1
   d5672:	701c      	strb	r4, [r3, #0]
    Particle.publish("Config","No Solenoid Attached",PRIVATE);
   d5674:	4b07      	ldr	r3, [pc, #28]	; (d5694 <_Z18setSolenoidPresent6String+0x88>)
   d5676:	f88d 5000 	strb.w	r5, [sp]
   d567a:	781b      	ldrb	r3, [r3, #0]
   d567c:	e7e4      	b.n	d5648 <_Z18setSolenoidPresent6String+0x3c>
   d567e:	bf00      	nop
   d5680:	000dadfd 	.word	0x000dadfd
   d5684:	000dac68 	.word	0x000dac68
   d5688:	2003e53c 	.word	0x2003e53c
   d568c:	000db149 	.word	0x000db149
   d5690:	2003e570 	.word	0x2003e570
   d5694:	2003e484 	.word	0x2003e484
   d5698:	000dae0f 	.word	0x000dae0f
   d569c:	000db146 	.word	0x000db146

000d56a0 <_Z22publishStateTransitionv>:
{
   d56a0:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d56a2:	4d13      	ldr	r5, [pc, #76]	; (d56f0 <_Z22publishStateTransitionv+0x50>)
   d56a4:	4c13      	ldr	r4, [pc, #76]	; (d56f4 <_Z22publishStateTransitionv+0x54>)
   d56a6:	4914      	ldr	r1, [pc, #80]	; (d56f8 <_Z22publishStateTransitionv+0x58>)
   d56a8:	782a      	ldrb	r2, [r5, #0]
   d56aa:	7820      	ldrb	r0, [r4, #0]
{
   d56ac:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d56ae:	230e      	movs	r3, #14
   d56b0:	fb03 1202 	mla	r2, r3, r2, r1
   d56b4:	9200      	str	r2, [sp, #0]
   d56b6:	fb03 1300 	mla	r3, r3, r0, r1
   d56ba:	4a10      	ldr	r2, [pc, #64]	; (d56fc <_Z22publishStateTransitionv+0x5c>)
   d56bc:	2128      	movs	r1, #40	; 0x28
   d56be:	a804      	add	r0, sp, #16
   d56c0:	f001 f87e 	bl	d67c0 <snprintf>
  oldState = state;
   d56c4:	782b      	ldrb	r3, [r5, #0]
   d56c6:	7023      	strb	r3, [r4, #0]
   d56c8:	f000 ffca 	bl	d6660 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d56cc:	b170      	cbz	r0, d56ec <_Z22publishStateTransitionv+0x4c>
   d56ce:	f7fe ffc3 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d56d2:	2300      	movs	r3, #0
   d56d4:	f88d 3000 	strb.w	r3, [sp]
   d56d8:	4b09      	ldr	r3, [pc, #36]	; (d5700 <_Z22publishStateTransitionv+0x60>)
   d56da:	490a      	ldr	r1, [pc, #40]	; (d5704 <_Z22publishStateTransitionv+0x64>)
   d56dc:	781b      	ldrb	r3, [r3, #0]
   d56de:	a802      	add	r0, sp, #8
   d56e0:	aa04      	add	r2, sp, #16
   d56e2:	f7fe fd4a 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d56e6:	a803      	add	r0, sp, #12
   d56e8:	f7ff f902 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d56ec:	b00f      	add	sp, #60	; 0x3c
   d56ee:	bd30      	pop	{r4, r5, pc}
   d56f0:	2003e534 	.word	0x2003e534
   d56f4:	2003e52c 	.word	0x2003e52c
   d56f8:	2003e1d0 	.word	0x2003e1d0
   d56fc:	000db15b 	.word	0x000db15b
   d5700:	2003e484 	.word	0x2003e484
   d5704:	000db169 	.word	0x000db169

000d5708 <loop>:
{
   d5708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(state) {
   d570c:	4ca2      	ldr	r4, [pc, #648]	; (d5998 <loop+0x290>)
   d570e:	7823      	ldrb	r3, [r4, #0]
   d5710:	3b01      	subs	r3, #1
{
   d5712:	b08a      	sub	sp, #40	; 0x28
   d5714:	2b07      	cmp	r3, #7
   d5716:	d874      	bhi.n	d5802 <loop+0xfa>
   d5718:	e8df f013 	tbh	[pc, r3, lsl #1]
   d571c:	00080271 	.word	0x00080271
   d5720:	007b004d 	.word	0x007b004d
   d5724:	016e0117 	.word	0x016e0117
   d5728:	022101a0 	.word	0x022101a0
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d572c:	4d9b      	ldr	r5, [pc, #620]	; (d599c <loop+0x294>)
   d572e:	792b      	ldrb	r3, [r5, #4]
   d5730:	b12b      	cbz	r3, d573e <loop+0x36>
   d5732:	4b9b      	ldr	r3, [pc, #620]	; (d59a0 <loop+0x298>)
   d5734:	781b      	ldrb	r3, [r3, #0]
   d5736:	2b02      	cmp	r3, #2
   d5738:	d001      	beq.n	d573e <loop+0x36>
   d573a:	f7ff ffb1 	bl	d56a0 <_Z22publishStateTransitionv>
    if (systemStatusWriteNeeded) {
   d573e:	4e99      	ldr	r6, [pc, #612]	; (d59a4 <loop+0x29c>)
   d5740:	7833      	ldrb	r3, [r6, #0]
   d5742:	b143      	cbz	r3, d5756 <loop+0x4e>
      EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5744:	f002 fccc 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5748:	4994      	ldr	r1, [pc, #592]	; (d599c <loop+0x294>)
   d574a:	2234      	movs	r2, #52	; 0x34
   d574c:	2001      	movs	r0, #1
   d574e:	f000 fd83 	bl	d6258 <HAL_EEPROM_Put>
      systemStatusWriteNeeded = false;
   d5752:	2300      	movs	r3, #0
   d5754:	7033      	strb	r3, [r6, #0]
    if (currentStatusWriteNeeded) {
   d5756:	4e94      	ldr	r6, [pc, #592]	; (d59a8 <loop+0x2a0>)
   d5758:	7833      	ldrb	r3, [r6, #0]
   d575a:	b143      	cbz	r3, d576e <loop+0x66>
      EEPROM.put(MEM_MAP::currentStatusAddr ,current);
   d575c:	f002 fcc0 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
   d5760:	4992      	ldr	r1, [pc, #584]	; (d59ac <loop+0x2a4>)
   d5762:	2224      	movs	r2, #36	; 0x24
   d5764:	2050      	movs	r0, #80	; 0x50
   d5766:	f000 fd77 	bl	d6258 <HAL_EEPROM_Put>
      currentStatusWriteNeeded = false;
   d576a:	2300      	movs	r3, #0
   d576c:	7033      	strb	r3, [r6, #0]
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp > stayAwake) && !current.solenoidState) state = NAPPING_STATE;    // These state assignments are in order of precedence
   d576e:	79ab      	ldrb	r3, [r5, #6]
   d5770:	b163      	cbz	r3, d578c <loop+0x84>
   d5772:	f000 fd51 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
   d5776:	4b8e      	ldr	r3, [pc, #568]	; (d59b0 <loop+0x2a8>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	1ac0      	subs	r0, r0, r3
   d577c:	4b8d      	ldr	r3, [pc, #564]	; (d59b4 <loop+0x2ac>)
   d577e:	4298      	cmp	r0, r3
   d5780:	d904      	bls.n	d578c <loop+0x84>
   d5782:	4b8a      	ldr	r3, [pc, #552]	; (d59ac <loop+0x2a4>)
   d5784:	68db      	ldr	r3, [r3, #12]
   d5786:	b90b      	cbnz	r3, d578c <loop+0x84>
   d5788:	2307      	movs	r3, #7
   d578a:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d578c:	f002 fa48 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d5790:	4b89      	ldr	r3, [pc, #548]	; (d59b8 <loop+0x2b0>)
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d5792:	68aa      	ldr	r2, [r5, #8]
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;                                                               // We want to report on the hour but not after bedtime
   d5794:	781b      	ldrb	r3, [r3, #0]
   d5796:	4298      	cmp	r0, r3
   d5798:	bf1c      	itt	ne
   d579a:	2303      	movne	r3, #3
   d579c:	7023      	strbne	r3, [r4, #0]
    if (sysStatus.stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                                                        // The battery is low - sleep
   d579e:	4b87      	ldr	r3, [pc, #540]	; (d59bc <loop+0x2b4>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	429a      	cmp	r2, r3
   d57a4:	bfdc      	itt	le
   d57a6:	2308      	movle	r3, #8
   d57a8:	7023      	strble	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                 // Most important - turn off water when done!
   d57aa:	4b85      	ldr	r3, [pc, #532]	; (d59c0 <loop+0x2b8>)
   d57ac:	781b      	ldrb	r3, [r3, #0]
   d57ae:	b343      	cbz	r3, d5802 <loop+0xfa>
   d57b0:	2304      	movs	r3, #4
    else state = REPORTING_STATE;
   d57b2:	7023      	strb	r3, [r4, #0]
   d57b4:	e025      	b.n	d5802 <loop+0xfa>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d57b6:	4d79      	ldr	r5, [pc, #484]	; (d599c <loop+0x294>)
   d57b8:	792b      	ldrb	r3, [r5, #4]
   d57ba:	b12b      	cbz	r3, d57c8 <loop+0xc0>
   d57bc:	4b78      	ldr	r3, [pc, #480]	; (d59a0 <loop+0x298>)
   d57be:	781b      	ldrb	r3, [r3, #0]
   d57c0:	2b03      	cmp	r3, #3
   d57c2:	d001      	beq.n	d57c8 <loop+0xc0>
   d57c4:	f7ff ff6c 	bl	d56a0 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d57c8:	f7fe ffce 	bl	d4768 <_Z16takeMeasurementsv>
   d57cc:	4606      	mov	r6, r0
   d57ce:	b9d8      	cbnz	r0, d5808 <loop+0x100>
      state = ERROR_STATE;
   d57d0:	2301      	movs	r3, #1
   d57d2:	7023      	strb	r3, [r4, #0]
   d57d4:	f000 fd20 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d57d8:	4b7a      	ldr	r3, [pc, #488]	; (d59c4 <loop+0x2bc>)
   d57da:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode && Particle.connected()) {
   d57dc:	792b      	ldrb	r3, [r5, #4]
   d57de:	b183      	cbz	r3, d5802 <loop+0xfa>
   d57e0:	f000 ff3e 	bl	d6660 <spark_cloud_flag_connected>
   d57e4:	b168      	cbz	r0, d5802 <loop+0xfa>
   d57e6:	f7fe ff37 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d57ea:	4b77      	ldr	r3, [pc, #476]	; (d59c8 <loop+0x2c0>)
   d57ec:	f88d 6000 	strb.w	r6, [sp]
   d57f0:	a806      	add	r0, sp, #24
   d57f2:	781b      	ldrb	r3, [r3, #0]
   d57f4:	4a75      	ldr	r2, [pc, #468]	; (d59cc <loop+0x2c4>)
   d57f6:	4976      	ldr	r1, [pc, #472]	; (d59d0 <loop+0x2c8>)
   d57f8:	f7fe fcbf 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d57fc:	a807      	add	r0, sp, #28
   d57fe:	f7ff f877 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5802:	b00a      	add	sp, #40	; 0x28
   d5804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (sysStatus.solenoidConfig) state = WATERING_STATE;
   d5808:	7c6b      	ldrb	r3, [r5, #17]
   d580a:	2b00      	cmp	r3, #0
   d580c:	d1d0      	bne.n	d57b0 <loop+0xa8>
    else state = REPORTING_STATE;
   d580e:	2305      	movs	r3, #5
   d5810:	e7cf      	b.n	d57b2 <loop+0xaa>
    if (wateringTimerFlag) {                                              // Already watering - time to turn off the tap
   d5812:	4d6b      	ldr	r5, [pc, #428]	; (d59c0 <loop+0x2b8>)
   d5814:	4e6c      	ldr	r6, [pc, #432]	; (d59c8 <loop+0x2c0>)
   d5816:	782b      	ldrb	r3, [r5, #0]
   d5818:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   d581c:	b1cb      	cbz	r3, d5852 <loop+0x14a>
   d581e:	2700      	movs	r7, #0
   d5820:	f7fe ff1a 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Watering","Done with watering cycle",PRIVATE);
   d5824:	f88d 7000 	strb.w	r7, [sp]
   d5828:	7833      	ldrb	r3, [r6, #0]
   d582a:	4a6a      	ldr	r2, [pc, #424]	; (d59d4 <loop+0x2cc>)
   d582c:	496a      	ldr	r1, [pc, #424]	; (d59d8 <loop+0x2d0>)
   d582e:	a806      	add	r0, sp, #24
   d5830:	f7fe fca3 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5834:	a807      	add	r0, sp, #28
   d5836:	f7ff f85b 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("0");
   d583a:	4968      	ldr	r1, [pc, #416]	; (d59dc <loop+0x2d4>)
   d583c:	a806      	add	r0, sp, #24
   d583e:	f001 ffbc 	bl	d77ba <_ZN6StringC1EPKc>
   d5842:	a806      	add	r0, sp, #24
   d5844:	f7ff fbf4 	bl	d5030 <_Z12controlValve6String>
   d5848:	a806      	add	r0, sp, #24
   d584a:	f001 ff6b 	bl	d7724 <_ZN6StringD1Ev>
      wateringTimerFlag = false;
   d584e:	702f      	strb	r7, [r5, #0]
   d5850:	e7dd      	b.n	d580e <loop+0x106>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d5852:	f002 f9e5 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d5856:	2808      	cmp	r0, #8
   d5858:	4d54      	ldr	r5, [pc, #336]	; (d59ac <loop+0x2a4>)
   d585a:	d10b      	bne.n	d5874 <loop+0x16c>
    else if (sysStatus.stateOfCharge < 50) {
   d585c:	4f4f      	ldr	r7, [pc, #316]	; (d599c <loop+0x294>)
   d585e:	68bb      	ldr	r3, [r7, #8]
   d5860:	2b31      	cmp	r3, #49	; 0x31
   d5862:	dc2a      	bgt.n	d58ba <loop+0x1b2>
   d5864:	f7fe fef8 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d5868:	2300      	movs	r3, #0
      Particle.publish("Watering","Watering Needed but battery too low",PRIVATE);
   d586a:	f88d 3000 	strb.w	r3, [sp]
   d586e:	7833      	ldrb	r3, [r6, #0]
   d5870:	4a5b      	ldr	r2, [pc, #364]	; (d59e0 <loop+0x2d8>)
   d5872:	e00d      	b.n	d5890 <loop+0x188>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d5874:	f002 f9d4 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d5878:	280c      	cmp	r0, #12
   d587a:	d0ef      	beq.n	d585c <loop+0x154>
   d587c:	f002 f9d0 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d5880:	2811      	cmp	r0, #17
   d5882:	d0eb      	beq.n	d585c <loop+0x154>
   d5884:	f7fe fee8 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Watering","Not time to water",PRIVATE);
   d5888:	f88d 7000 	strb.w	r7, [sp]
   d588c:	7833      	ldrb	r3, [r6, #0]
   d588e:	4a55      	ldr	r2, [pc, #340]	; (d59e4 <loop+0x2dc>)
      Particle.publish("Watering","Watering not needed",PRIVATE);
   d5890:	4951      	ldr	r1, [pc, #324]	; (d59d8 <loop+0x2d0>)
   d5892:	a806      	add	r0, sp, #24
   d5894:	f7fe fc71 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5898:	a807      	add	r0, sp, #28
   d589a:	f7ff f829 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      if(current.solenoidState) controlValve("0");
   d589e:	68eb      	ldr	r3, [r5, #12]
   d58a0:	2b00      	cmp	r3, #0
   d58a2:	d0b4      	beq.n	d580e <loop+0x106>
   d58a4:	494d      	ldr	r1, [pc, #308]	; (d59dc <loop+0x2d4>)
   d58a6:	a806      	add	r0, sp, #24
   d58a8:	f001 ff87 	bl	d77ba <_ZN6StringC1EPKc>
   d58ac:	a806      	add	r0, sp, #24
   d58ae:	f7ff fbbf 	bl	d5030 <_Z12controlValve6String>
   d58b2:	a806      	add	r0, sp, #24
   d58b4:	f001 ff36 	bl	d7724 <_ZN6StringD1Ev>
   d58b8:	e7a9      	b.n	d580e <loop+0x106>
    else if (current.soilMoisture1 < sysStatus.wateringThresholdPct && !current.solenoidState) {  // Water if dry and if we are not already watering
   d58ba:	edd5 7a00 	vldr	s15, [r5]
   d58be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   d58c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d58c6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d58ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d58ce:	d534      	bpl.n	d593a <loop+0x232>
   d58d0:	f8d5 800c 	ldr.w	r8, [r5, #12]
   d58d4:	f1b8 0f00 	cmp.w	r8, #0
   d58d8:	d12f      	bne.n	d593a <loop+0x232>
   d58da:	f7fe febd 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Watering","Watering needed - starting watering cycle",PRIVATE);
   d58de:	f88d 8000 	strb.w	r8, [sp]
   d58e2:	7833      	ldrb	r3, [r6, #0]
   d58e4:	4a40      	ldr	r2, [pc, #256]	; (d59e8 <loop+0x2e0>)
   d58e6:	493c      	ldr	r1, [pc, #240]	; (d59d8 <loop+0x2d0>)
   d58e8:	a806      	add	r0, sp, #24
   d58ea:	f7fe fc46 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d58ee:	a807      	add	r0, sp, #28
   d58f0:	f7fe fffe 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlValve("1");
   d58f4:	493d      	ldr	r1, [pc, #244]	; (d59ec <loop+0x2e4>)
   d58f6:	a806      	add	r0, sp, #24
   d58f8:	f001 ff5f 	bl	d77ba <_ZN6StringC1EPKc>
   d58fc:	a806      	add	r0, sp, #24
   d58fe:	f7ff fb97 	bl	d5030 <_Z12controlValve6String>
   d5902:	a806      	add	r0, sp, #24
   d5904:	f001 ff0e 	bl	d7724 <_ZN6StringD1Ev>
      if (Time.hour() == 8) wateringTimer.changePeriod(sysStatus.wateringDurationMorning * 60 * 1000); // Start the timer to keep track of the watering time
   d5908:	f002 f98a 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d590c:	2808      	cmp	r0, #8
   d590e:	d109      	bne.n	d5924 <loop+0x21c>
   d5910:	6a3b      	ldr	r3, [r7, #32]
   d5912:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5916:	f64e 2160 	movw	r1, #60000	; 0xea60
      else wateringTimer.changePeriod(sysStatus.wateringDurationEvening * 60 * 1000);                                                
   d591a:	4359      	muls	r1, r3
   d591c:	4834      	ldr	r0, [pc, #208]	; (d59f0 <loop+0x2e8>)
   d591e:	f7fe fcdf 	bl	d42e0 <_ZN5Timer12changePeriodEjj>
   d5922:	e774      	b.n	d580e <loop+0x106>
      else if (Time.hour() == 12 ) wateringTimer.changePeriod(sysStatus.wateringDurationLunch * 60 * 1000);
   d5924:	f002 f97c 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d5928:	280c      	cmp	r0, #12
   d592a:	bf0c      	ite	eq
   d592c:	6a79      	ldreq	r1, [r7, #36]	; 0x24
      else wateringTimer.changePeriod(sysStatus.wateringDurationEvening * 60 * 1000);                                                
   d592e:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
   d5930:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5934:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5938:	e7ef      	b.n	d591a <loop+0x212>
   d593a:	f7fe fe8d 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d593e:	2300      	movs	r3, #0
      Particle.publish("Watering","Watering not needed",PRIVATE);
   d5940:	f88d 3000 	strb.w	r3, [sp]
   d5944:	7833      	ldrb	r3, [r6, #0]
   d5946:	4a2b      	ldr	r2, [pc, #172]	; (d59f4 <loop+0x2ec>)
   d5948:	e7a2      	b.n	d5890 <loop+0x188>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d594a:	4d14      	ldr	r5, [pc, #80]	; (d599c <loop+0x294>)
   d594c:	792b      	ldrb	r3, [r5, #4]
   d594e:	b12b      	cbz	r3, d595c <loop+0x254>
   d5950:	4b13      	ldr	r3, [pc, #76]	; (d59a0 <loop+0x298>)
   d5952:	781b      	ldrb	r3, [r3, #0]
   d5954:	2b05      	cmp	r3, #5
   d5956:	d001      	beq.n	d595c <loop+0x254>
   d5958:	f7ff fea2 	bl	d56a0 <_Z22publishStateTransitionv>
   d595c:	f000 fe80 	bl	d6660 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5960:	b190      	cbz	r0, d5988 <loop+0x280>
      if (Time.hour() == 0) {
   d5962:	f002 f95d 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d5966:	4606      	mov	r6, r0
   d5968:	b950      	cbnz	r0, d5980 <loop+0x278>
        sysStatus.verboseMode = false;                                    // Turn off Verbose mode
   d596a:	7128      	strb	r0, [r5, #4]
   d596c:	f000 fe78 	bl	d6660 <spark_cloud_flag_connected>
        if (!connected()) {
   d5970:	b110      	cbz	r0, d5978 <loop+0x270>
        return spark_sync_time(NULL);
   d5972:	4630      	mov	r0, r6
   d5974:	f000 fe94 	bl	d66a0 <spark_sync_time>
        current.alertCount = sysStatus.resetCount = 0;                    // Reset these each day as well
   d5978:	4a0c      	ldr	r2, [pc, #48]	; (d59ac <loop+0x2a4>)
   d597a:	2300      	movs	r3, #0
   d597c:	61ab      	str	r3, [r5, #24]
   d597e:	6213      	str	r3, [r2, #32]
      sendEvent();                                                        // Send data to Ubidots
   d5980:	f7fe ffcc 	bl	d491c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d5984:	2306      	movs	r3, #6
   d5986:	e714      	b.n	d57b2 <loop+0xaa>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5988:	f000 fe6a 	bl	d6660 <spark_cloud_flag_connected>
    else if (!Particle.connected()) state = ERROR_STATE;                  // In case we timed out on our 1st attempt to connect
   d598c:	2800      	cmp	r0, #0
   d598e:	f47f af38 	bne.w	d5802 <loop+0xfa>
   d5992:	2301      	movs	r3, #1
   d5994:	e70d      	b.n	d57b2 <loop+0xaa>
   d5996:	bf00      	nop
   d5998:	2003e534 	.word	0x2003e534
   d599c:	2003e53c 	.word	0x2003e53c
   d59a0:	2003e52c 	.word	0x2003e52c
   d59a4:	2003e570 	.word	0x2003e570
   d59a8:	2003e501 	.word	0x2003e501
   d59ac:	2003e4dc 	.word	0x2003e4dc
   d59b0:	2003e538 	.word	0x2003e538
   d59b4:	00015f90 	.word	0x00015f90
   d59b8:	2003e500 	.word	0x2003e500
   d59bc:	2003e1cc 	.word	0x2003e1cc
   d59c0:	2003e5b4 	.word	0x2003e5b4
   d59c4:	2003e530 	.word	0x2003e530
   d59c8:	2003e484 	.word	0x2003e484
   d59cc:	000db17a 	.word	0x000db17a
   d59d0:	000db194 	.word	0x000db194
   d59d4:	000db19a 	.word	0x000db19a
   d59d8:	000daf7b 	.word	0x000daf7b
   d59dc:	000dadfd 	.word	0x000dadfd
   d59e0:	000db1c5 	.word	0x000db1c5
   d59e4:	000db1b3 	.word	0x000db1b3
   d59e8:	000db1e9 	.word	0x000db1e9
   d59ec:	000dac68 	.word	0x000dac68
   d59f0:	2003e598 	.word	0x2003e598
   d59f4:	000db213 	.word	0x000db213
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d59f8:	4baa      	ldr	r3, [pc, #680]	; (d5ca4 <loop+0x59c>)
   d59fa:	791b      	ldrb	r3, [r3, #4]
   d59fc:	b12b      	cbz	r3, d5a0a <loop+0x302>
   d59fe:	4baa      	ldr	r3, [pc, #680]	; (d5ca8 <loop+0x5a0>)
   d5a00:	781b      	ldrb	r3, [r3, #0]
   d5a02:	2b06      	cmp	r3, #6
   d5a04:	d001      	beq.n	d5a0a <loop+0x302>
   d5a06:	f7ff fe4b 	bl	d56a0 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d5a0a:	4ba8      	ldr	r3, [pc, #672]	; (d5cac <loop+0x5a4>)
   d5a0c:	781b      	ldrb	r3, [r3, #0]
   d5a0e:	b92b      	cbnz	r3, d5a1c <loop+0x314>
   d5a10:	f000 fc02 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5a14:	4ba6      	ldr	r3, [pc, #664]	; (d5cb0 <loop+0x5a8>)
   d5a16:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d5a18:	2302      	movs	r3, #2
   d5a1a:	e6ca      	b.n	d57b2 <loop+0xaa>
   d5a1c:	f000 fbfc 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5a20:	4ba4      	ldr	r3, [pc, #656]	; (d5cb4 <loop+0x5ac>)
   d5a22:	681b      	ldr	r3, [r3, #0]
   d5a24:	1ac0      	subs	r0, r0, r3
   d5a26:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5a2a:	4298      	cmp	r0, r3
   d5a2c:	f67f aee9 	bls.w	d5802 <loop+0xfa>
   d5a30:	f000 fbf2 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5a34:	4ba0      	ldr	r3, [pc, #640]	; (d5cb8 <loop+0x5b0>)
   d5a36:	6018      	str	r0, [r3, #0]
   d5a38:	f000 fe12 	bl	d6660 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5a3c:	2800      	cmp	r0, #0
   d5a3e:	d0a8      	beq.n	d5992 <loop+0x28a>
   d5a40:	2300      	movs	r3, #0
   d5a42:	f88d 3000 	strb.w	r3, [sp]
   d5a46:	4b9d      	ldr	r3, [pc, #628]	; (d5cbc <loop+0x5b4>)
   d5a48:	4a9d      	ldr	r2, [pc, #628]	; (d5cc0 <loop+0x5b8>)
   d5a4a:	781b      	ldrb	r3, [r3, #0]
   d5a4c:	499d      	ldr	r1, [pc, #628]	; (d5cc4 <loop+0x5bc>)
   d5a4e:	a806      	add	r0, sp, #24
   d5a50:	f7fe fb93 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5a54:	a807      	add	r0, sp, #28
   d5a56:	f7fe ff4b 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a5a:	e79a      	b.n	d5992 <loop+0x28a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5a5c:	4d91      	ldr	r5, [pc, #580]	; (d5ca4 <loop+0x59c>)
   d5a5e:	792a      	ldrb	r2, [r5, #4]
   d5a60:	b12a      	cbz	r2, d5a6e <loop+0x366>
   d5a62:	4b91      	ldr	r3, [pc, #580]	; (d5ca8 <loop+0x5a0>)
   d5a64:	781b      	ldrb	r3, [r3, #0]
   d5a66:	2b07      	cmp	r3, #7
   d5a68:	d001      	beq.n	d5a6e <loop+0x366>
   d5a6a:	f7ff fe19 	bl	d56a0 <_Z22publishStateTransitionv>
    if (current.pressure > 1 && !pressureDetectedFlag) {               // If we detect pressure we will report again - once!
   d5a6e:	4b96      	ldr	r3, [pc, #600]	; (d5cc8 <loop+0x5c0>)
   d5a70:	4e96      	ldr	r6, [pc, #600]	; (d5ccc <loop+0x5c4>)
   d5a72:	689b      	ldr	r3, [r3, #8]
   d5a74:	2b01      	cmp	r3, #1
   d5a76:	dd05      	ble.n	d5a84 <loop+0x37c>
   d5a78:	7833      	ldrb	r3, [r6, #0]
   d5a7a:	b91b      	cbnz	r3, d5a84 <loop+0x37c>
      pressureDetectedFlag = true;
   d5a7c:	2301      	movs	r3, #1
   d5a7e:	7033      	strb	r3, [r6, #0]
      state = MEASURING_STATE;
   d5a80:	2303      	movs	r3, #3
   d5a82:	e696      	b.n	d57b2 <loop+0xaa>
   d5a84:	f000 fdec 	bl	d6660 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5a88:	b1b0      	cbz	r0, d5ab8 <loop+0x3b0>
      if (sysStatus.verboseMode) {
   d5a8a:	792b      	ldrb	r3, [r5, #4]
   d5a8c:	b173      	cbz	r3, d5aac <loop+0x3a4>
   d5a8e:	f7fe fde3 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Taking a Nap",PRIVATE);
   d5a92:	2300      	movs	r3, #0
   d5a94:	f88d 3000 	strb.w	r3, [sp]
   d5a98:	4b88      	ldr	r3, [pc, #544]	; (d5cbc <loop+0x5b4>)
   d5a9a:	4a8d      	ldr	r2, [pc, #564]	; (d5cd0 <loop+0x5c8>)
   d5a9c:	781b      	ldrb	r3, [r3, #0]
   d5a9e:	498d      	ldr	r1, [pc, #564]	; (d5cd4 <loop+0x5cc>)
   d5aa0:	a806      	add	r0, sp, #24
   d5aa2:	f7fe fb6a 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5aa6:	a807      	add	r0, sp, #28
   d5aa8:	f7fe ff22 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(1000);                                                      // Time to send last update
   d5aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5ab0:	f000 feba 	bl	d6828 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d5ab4:	f7fe fd1e 	bl	d44f4 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5ab8:	2100      	movs	r1, #0
   d5aba:	2007      	movs	r0, #7
   d5abc:	f002 facd 	bl	d805a <digitalWrite>
    digitalWrite(sensorShutdown,LOW);                                   // Turn off the sensors
   d5ac0:	2100      	movs	r1, #0
   d5ac2:	200e      	movs	r0, #14
   d5ac4:	f002 fac9 	bl	d805a <digitalWrite>
    pressureDetectedFlag = false;
   d5ac8:	2300      	movs	r3, #0
   d5aca:	7033      	strb	r3, [r6, #0]
    secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5acc:	f002 f8b4 	bl	d7c38 <_ZN9TimeClass6minuteEv>
        if (valid_) {
   d5ad0:	4b81      	ldr	r3, [pc, #516]	; (d5cd8 <loop+0x5d0>)
   d5ad2:	7d1a      	ldrb	r2, [r3, #20]
   d5ad4:	f1c0 053c 	rsb	r5, r0, #60	; 0x3c
   d5ad8:	b10a      	cbz	r2, d5ade <loop+0x3d6>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5ada:	2201      	movs	r2, #1
   d5adc:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5ade:	2200      	movs	r2, #0
   d5ae0:	2104      	movs	r1, #4
   d5ae2:	487d      	ldr	r0, [pc, #500]	; (d5cd8 <loop+0x5d0>)
   d5ae4:	f7fe fb68 	bl	d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5ae8:	f64e 2160 	movw	r1, #60000	; 0xea60
   d5aec:	4369      	muls	r1, r5
   d5aee:	f7fe fb97 	bl	d4220 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5af2:	4979      	ldr	r1, [pc, #484]	; (d5cd8 <loop+0x5d0>)
   d5af4:	a803      	add	r0, sp, #12
   d5af6:	f001 ff21 	bl	d793c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5afa:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5afc:	b17b      	cbz	r3, d5b1e <loop+0x416>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5afe:	889a      	ldrh	r2, [r3, #4]
   d5b00:	2a01      	cmp	r2, #1
   d5b02:	d10c      	bne.n	d5b1e <loop+0x416>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d5b04:	899b      	ldrh	r3, [r3, #12]
   d5b06:	2b04      	cmp	r3, #4
   d5b08:	d109      	bne.n	d5b1e <loop+0x416>
   d5b0a:	4974      	ldr	r1, [pc, #464]	; (d5cdc <loop+0x5d4>)
   d5b0c:	a806      	add	r0, sp, #24
   d5b0e:	f001 fe54 	bl	d77ba <_ZN6StringC1EPKc>
   d5b12:	a806      	add	r0, sp, #24
   d5b14:	f7ff fa24 	bl	d4f60 <_Z15setLowPowerMode6String>
   d5b18:	a806      	add	r0, sp, #24
   d5b1a:	f001 fe03 	bl	d7724 <_ZN6StringD1Ev>
    digitalWrite(blueLED,HIGH);                                         // On when the device is awake
   d5b1e:	2101      	movs	r1, #1
   d5b20:	2007      	movs	r0, #7
   d5b22:	f002 fa9a 	bl	d805a <digitalWrite>
    digitalWrite(sensorShutdown,HIGH);                                  // Turn on the sensors when awake
   d5b26:	2101      	movs	r1, #1
   d5b28:	200e      	movs	r0, #14
   d5b2a:	f002 fa96 	bl	d805a <digitalWrite>
    if (!isDayTime() && Time.hour() % 2 == 0) {                         // At night, only connect every other hour
   d5b2e:	f7fe fd17 	bl	d4560 <_Z9isDayTimev>
   d5b32:	b168      	cbz	r0, d5b50 <loop+0x448>
    else if (isDayTime()){                                              // During the day, connect every hour
   d5b34:	f7fe fd14 	bl	d4560 <_Z9isDayTimev>
   d5b38:	b178      	cbz	r0, d5b5a <loop+0x452>
      connectToParticle();                                              // Wakey Wakey and get connected.
   d5b3a:	f7fe fc95 	bl	d4468 <_Z17connectToParticlev>
      state = IDLE_STATE;                                               // Awake now, we need to go back to the IDLE state for next tasking
   d5b3e:	2302      	movs	r3, #2
        if (wakeupSource_) {
   d5b40:	9803      	ldr	r0, [sp, #12]
    else state = NAPPING_STATE;                                         // Otherwise sleep
   d5b42:	7023      	strb	r3, [r4, #0]
   d5b44:	2800      	cmp	r0, #0
   d5b46:	f43f ae5c 	beq.w	d5802 <loop+0xfa>
            free(wakeupSource_);
   d5b4a:	f000 fe21 	bl	d6790 <free>
    } break;
   d5b4e:	e658      	b.n	d5802 <loop+0xfa>
    if (!isDayTime() && Time.hour() % 2 == 0) {                         // At night, only connect every other hour
   d5b50:	f002 f866 	bl	d7c20 <_ZN9TimeClass4hourEv>
   d5b54:	07c3      	lsls	r3, r0, #31
   d5b56:	d4ed      	bmi.n	d5b34 <loop+0x42c>
   d5b58:	e7ef      	b.n	d5b3a <loop+0x432>
    else state = NAPPING_STATE;                                         // Otherwise sleep
   d5b5a:	2307      	movs	r3, #7
   d5b5c:	e7f0      	b.n	d5b40 <loop+0x438>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5b5e:	4d51      	ldr	r5, [pc, #324]	; (d5ca4 <loop+0x59c>)
   d5b60:	792a      	ldrb	r2, [r5, #4]
   d5b62:	b12a      	cbz	r2, d5b70 <loop+0x468>
   d5b64:	4b50      	ldr	r3, [pc, #320]	; (d5ca8 <loop+0x5a0>)
   d5b66:	781b      	ldrb	r3, [r3, #0]
   d5b68:	2b08      	cmp	r3, #8
   d5b6a:	d001      	beq.n	d5b70 <loop+0x468>
   d5b6c:	f7ff fd98 	bl	d56a0 <_Z22publishStateTransitionv>
   d5b70:	f000 fd76 	bl	d6660 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5b74:	b1a0      	cbz	r0, d5ba0 <loop+0x498>
        return waitConditionWhile(_condition, []{ return true; });
   d5b76:	f7fe fd6f 	bl	d4658 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d5b7a:	2300      	movs	r3, #0
      Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d5b7c:	f88d 3000 	strb.w	r3, [sp]
   d5b80:	4b4e      	ldr	r3, [pc, #312]	; (d5cbc <loop+0x5b4>)
   d5b82:	4a57      	ldr	r2, [pc, #348]	; (d5ce0 <loop+0x5d8>)
   d5b84:	781b      	ldrb	r3, [r3, #0]
   d5b86:	4953      	ldr	r1, [pc, #332]	; (d5cd4 <loop+0x5cc>)
   d5b88:	a806      	add	r0, sp, #24
   d5b8a:	f7fe faf6 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5b8e:	a807      	add	r0, sp, #28
   d5b90:	f7fe feae 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                                      // Time to send last update
   d5b94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5b98:	f000 fe46 	bl	d6828 <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d5b9c:	f7fe fcaa 	bl	d44f4 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d5ba0:	2100      	movs	r1, #0
   d5ba2:	2007      	movs	r0, #7
   d5ba4:	f002 fa59 	bl	d805a <digitalWrite>
    if (sysStatus.solenoidConfig) controlValve("0");                  // Make darn sure the water is off
   d5ba8:	7c6b      	ldrb	r3, [r5, #17]
   d5baa:	b14b      	cbz	r3, d5bc0 <loop+0x4b8>
   d5bac:	494b      	ldr	r1, [pc, #300]	; (d5cdc <loop+0x5d4>)
   d5bae:	a806      	add	r0, sp, #24
   d5bb0:	f001 fe03 	bl	d77ba <_ZN6StringC1EPKc>
   d5bb4:	a806      	add	r0, sp, #24
   d5bb6:	f7ff fa3b 	bl	d5030 <_Z12controlValve6String>
   d5bba:	a806      	add	r0, sp, #24
   d5bbc:	f001 fdb2 	bl	d7724 <_ZN6StringD1Ev>
    delay(5000);
   d5bc0:	f241 3088 	movw	r0, #5000	; 0x1388
   d5bc4:	f000 fe30 	bl	d6828 <delay>
    long secondsToHour = (60*(60 - Time.minute()));                     // Time till the top of the hour
   d5bc8:	f002 f836 	bl	d7c38 <_ZN9TimeClass6minuteEv>
        if (valid_) {
   d5bcc:	4b42      	ldr	r3, [pc, #264]	; (d5cd8 <loop+0x5d0>)
   d5bce:	7d1a      	ldrb	r2, [r3, #20]
   d5bd0:	f1c0 053c 	rsb	r5, r0, #60	; 0x3c
   d5bd4:	b10a      	cbz	r2, d5bda <loop+0x4d2>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5bd6:	2201      	movs	r2, #1
   d5bd8:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).duration(secondsToHour * 1000);
   d5bda:	2200      	movs	r2, #0
   d5bdc:	2104      	movs	r1, #4
   d5bde:	483e      	ldr	r0, [pc, #248]	; (d5cd8 <loop+0x5d0>)
   d5be0:	f7fe faea 	bl	d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5be4:	f64e 2160 	movw	r1, #60000	; 0xea60
   d5be8:	4369      	muls	r1, r5
   d5bea:	f7fe fb19 	bl	d4220 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d5bee:	a806      	add	r0, sp, #24
   d5bf0:	4939      	ldr	r1, [pc, #228]	; (d5cd8 <loop+0x5d0>)
   d5bf2:	f001 fea3 	bl	d793c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    state = IDLE_STATE;                                                 // Return to the IDLE_STATE
   d5bf6:	2302      	movs	r3, #2
        if (wakeupSource_) {
   d5bf8:	9806      	ldr	r0, [sp, #24]
   d5bfa:	7023      	strb	r3, [r4, #0]
   d5bfc:	e7a2      	b.n	d5b44 <loop+0x43c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5bfe:	4c29      	ldr	r4, [pc, #164]	; (d5ca4 <loop+0x59c>)
   d5c00:	7923      	ldrb	r3, [r4, #4]
   d5c02:	b12b      	cbz	r3, d5c10 <loop+0x508>
   d5c04:	4b28      	ldr	r3, [pc, #160]	; (d5ca8 <loop+0x5a0>)
   d5c06:	781b      	ldrb	r3, [r3, #0]
   d5c08:	2b01      	cmp	r3, #1
   d5c0a:	d001      	beq.n	d5c10 <loop+0x508>
   d5c0c:	f7ff fd48 	bl	d56a0 <_Z22publishStateTransitionv>
   d5c10:	f000 fb02 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d5c14:	4b28      	ldr	r3, [pc, #160]	; (d5cb8 <loop+0x5b0>)
   d5c16:	681b      	ldr	r3, [r3, #0]
   d5c18:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5c1c:	3330      	adds	r3, #48	; 0x30
   d5c1e:	4283      	cmp	r3, r0
   d5c20:	f4bf adef 	bcs.w	d5802 <loop+0xfa>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5c24:	69a3      	ldr	r3, [r4, #24]
   d5c26:	2b03      	cmp	r3, #3
   d5c28:	dc16      	bgt.n	d5c58 <loop+0x550>
   d5c2a:	f000 fd19 	bl	d6660 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5c2e:	b160      	cbz	r0, d5c4a <loop+0x542>
   d5c30:	2300      	movs	r3, #0
   d5c32:	f88d 3000 	strb.w	r3, [sp]
   d5c36:	4b21      	ldr	r3, [pc, #132]	; (d5cbc <loop+0x5b4>)
   d5c38:	4a2a      	ldr	r2, [pc, #168]	; (d5ce4 <loop+0x5dc>)
   d5c3a:	781b      	ldrb	r3, [r3, #0]
   d5c3c:	4925      	ldr	r1, [pc, #148]	; (d5cd4 <loop+0x5cc>)
   d5c3e:	a806      	add	r0, sp, #24
   d5c40:	f7fe fa9b 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5c44:	a807      	add	r0, sp, #28
   d5c46:	f7fe fe53 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5c4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5c4e:	f000 fdeb 	bl	d6828 <delay>
        System.reset();
   d5c52:	f001 fe6f 	bl	d7934 <_ZN11SystemClass5resetEv>
   d5c56:	e5d4      	b.n	d5802 <loop+0xfa>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5c58:	f001 ffd1 	bl	d7bfe <_ZN9TimeClass3nowEv>
   d5c5c:	69e3      	ldr	r3, [r4, #28]
   d5c5e:	1ac0      	subs	r0, r0, r3
   d5c60:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5c64:	d942      	bls.n	d5cec <loop+0x5e4>
   d5c66:	f000 fcfb 	bl	d6660 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d5c6a:	b160      	cbz	r0, d5c86 <loop+0x57e>
   d5c6c:	2300      	movs	r3, #0
   d5c6e:	f88d 3000 	strb.w	r3, [sp]
   d5c72:	4b12      	ldr	r3, [pc, #72]	; (d5cbc <loop+0x5b4>)
   d5c74:	4a1c      	ldr	r2, [pc, #112]	; (d5ce8 <loop+0x5e0>)
   d5c76:	781b      	ldrb	r3, [r3, #0]
   d5c78:	4916      	ldr	r1, [pc, #88]	; (d5cd4 <loop+0x5cc>)
   d5c7a:	a806      	add	r0, sp, #24
   d5c7c:	f7fe fa7d 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5c80:	a807      	add	r0, sp, #28
   d5c82:	f7fe fe35 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5c86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5c8a:	f000 fdcd 	bl	d6828 <delay>
        sysStatus.resetCount = 0;      // Zero the sysStatus.resetCount
   d5c8e:	2300      	movs	r3, #0
   d5c90:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5c92:	f002 fa25 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
   d5c96:	4903      	ldr	r1, [pc, #12]	; (d5ca4 <loop+0x59c>)
   d5c98:	2234      	movs	r2, #52	; 0x34
   d5c9a:	2001      	movs	r0, #1
   d5c9c:	f000 fadc 	bl	d6258 <HAL_EEPROM_Put>
   d5ca0:	e7d7      	b.n	d5c52 <loop+0x54a>
   d5ca2:	bf00      	nop
   d5ca4:	2003e53c 	.word	0x2003e53c
   d5ca8:	2003e52c 	.word	0x2003e52c
   d5cac:	2003e1c8 	.word	0x2003e1c8
   d5cb0:	2003e538 	.word	0x2003e538
   d5cb4:	2003e5b8 	.word	0x2003e5b8
   d5cb8:	2003e530 	.word	0x2003e530
   d5cbc:	2003e484 	.word	0x2003e484
   d5cc0:	000dacc2 	.word	0x000dacc2
   d5cc4:	000db227 	.word	0x000db227
   d5cc8:	2003e4dc 	.word	0x2003e4dc
   d5ccc:	2003e48c 	.word	0x2003e48c
   d5cd0:	000db240 	.word	0x000db240
   d5cd4:	000db194 	.word	0x000db194
   d5cd8:	2003e4c4 	.word	0x2003e4c4
   d5cdc:	000dadfd 	.word	0x000dadfd
   d5ce0:	000db24d 	.word	0x000db24d
   d5ce4:	000db264 	.word	0x000db264
   d5ce8:	000db278 	.word	0x000db278
   d5cec:	f000 fcb8 	bl	d6660 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5cf0:	b160      	cbz	r0, d5d0c <loop+0x604>
   d5cf2:	2300      	movs	r3, #0
   d5cf4:	f88d 3000 	strb.w	r3, [sp]
   d5cf8:	4b0c      	ldr	r3, [pc, #48]	; (d5d2c <loop+0x624>)
   d5cfa:	4a0d      	ldr	r2, [pc, #52]	; (d5d30 <loop+0x628>)
   d5cfc:	781b      	ldrb	r3, [r3, #0]
   d5cfe:	490d      	ldr	r1, [pc, #52]	; (d5d34 <loop+0x62c>)
   d5d00:	a806      	add	r0, sp, #24
   d5d02:	f7fe fa3a 	bl	d417a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d5d06:	a807      	add	r0, sp, #28
   d5d08:	f7fe fdf2 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5d0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5d10:	f000 fd8a 	bl	d6828 <delay>
        sysStatus.resetCount = 0;                                     // Zero the sysStatus.resetCount
   d5d14:	2300      	movs	r3, #0
   d5d16:	61a3      	str	r3, [r4, #24]
        EEPROM.put(MEM_MAP::systemStatusAddr,sysStatus);
   d5d18:	f002 f9e2 	bl	d80e0 <_Z21__fetch_global_EEPROMv>
   d5d1c:	4906      	ldr	r1, [pc, #24]	; (d5d38 <loop+0x630>)
   d5d1e:	2234      	movs	r2, #52	; 0x34
   d5d20:	2001      	movs	r0, #1
   d5d22:	f000 fa99 	bl	d6258 <HAL_EEPROM_Put>
        fullModemReset();                                             // Full Modem reset and reboots
   d5d26:	f7fe fca3 	bl	d4670 <_Z14fullModemResetv>
}
   d5d2a:	e56a      	b.n	d5802 <loop+0xfa>
   d5d2c:	2003e484 	.word	0x2003e484
   d5d30:	000db292 	.word	0x000db292
   d5d34:	000db194 	.word	0x000db194
   d5d38:	2003e53c 	.word	0x2003e53c

000d5d3c <_GLOBAL__sub_I___appProductID>:
}
   d5d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        val_(val) {
   d5d40:	4b3b      	ldr	r3, [pc, #236]	; (d5e30 <_GLOBAL__sub_I___appProductID+0xf4>)
              error_(SYSTEM_ERROR_NONE) {
   d5d42:	4e3c      	ldr	r6, [pc, #240]	; (d5e34 <_GLOBAL__sub_I___appProductID+0xf8>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5d44:	4f3c      	ldr	r7, [pc, #240]	; (d5e38 <_GLOBAL__sub_I___appProductID+0xfc>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5d46:	f8df 9130 	ldr.w	r9, [pc, #304]	; d5e78 <_GLOBAL__sub_I___appProductID+0x13c>
	    _M_invoker = &_My_handler::_M_invoke;
   d5d4a:	f8df 8130 	ldr.w	r8, [pc, #304]	; d5e7c <_GLOBAL__sub_I___appProductID+0x140>
   d5d4e:	2400      	movs	r4, #0
   d5d50:	601c      	str	r4, [r3, #0]
   d5d52:	4b3a      	ldr	r3, [pc, #232]	; (d5e3c <_GLOBAL__sub_I___appProductID+0x100>)
   d5d54:	2501      	movs	r5, #1
}
   d5d56:	b085      	sub	sp, #20
   d5d58:	701d      	strb	r5, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5d5a:	f002 f917 	bl	d7f8c <spark_protocol_instance>
   d5d5e:	4623      	mov	r3, r4
   d5d60:	4622      	mov	r2, r4
   d5d62:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d5d66:	f002 f919 	bl	d7f9c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5d6a:	f002 f90f 	bl	d7f8c <spark_protocol_instance>
   d5d6e:	4622      	mov	r2, r4
   d5d70:	4623      	mov	r3, r4
   d5d72:	2126      	movs	r1, #38	; 0x26
   d5d74:	f002 f91a 	bl	d7fac <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d5d78:	4b31      	ldr	r3, [pc, #196]	; (d5e40 <_GLOBAL__sub_I___appProductID+0x104>)
   d5d7a:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5d7c:	6034      	str	r4, [r6, #0]
   d5d7e:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d5d80:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d5d82:	2002      	movs	r0, #2
   d5d84:	f000 fbe2 	bl	d654c <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5d88:	463a      	mov	r2, r7
   d5d8a:	492e      	ldr	r1, [pc, #184]	; (d5e44 <_GLOBAL__sub_I___appProductID+0x108>)
   d5d8c:	4630      	mov	r0, r6
   d5d8e:	f002 fa3d 	bl	d820c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5d92:	4621      	mov	r1, r4
   d5d94:	4628      	mov	r0, r5
   d5d96:	f000 fbf1 	bl	d657c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5d9a:	4629      	mov	r1, r5
   d5d9c:	2004      	movs	r0, #4
   d5d9e:	f000 fa1b 	bl	d61d8 <HAL_Feature_Set>
        : config_(config) {
   d5da2:	4829      	ldr	r0, [pc, #164]	; (d5e48 <_GLOBAL__sub_I___appProductID+0x10c>)
SystemSleepConfiguration config;                    // Initialize the Sleep 2.0 API
   d5da4:	4929      	ldr	r1, [pc, #164]	; (d5e4c <_GLOBAL__sub_I___appProductID+0x110>)
              valid_(true) {
   d5da6:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5daa:	4603      	mov	r3, r0
   d5dac:	1d02      	adds	r2, r0, #4
   d5dae:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5db2:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5db4:	4b26      	ldr	r3, [pc, #152]	; (d5e50 <_GLOBAL__sub_I___appProductID+0x114>)
   d5db6:	6043      	str	r3, [r0, #4]
   d5db8:	463a      	mov	r2, r7
        config_.wakeup_sources = nullptr;
   d5dba:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5dbe:	7505      	strb	r5, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5dc0:	7204      	strb	r4, [r0, #8]
   d5dc2:	f002 fa23 	bl	d820c <__aeabi_atexit>
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5dc6:	4823      	ldr	r0, [pc, #140]	; (d5e54 <_GLOBAL__sub_I___appProductID+0x118>)
	    _M_manager = &_My_handler::_M_manager;
   d5dc8:	4c23      	ldr	r4, [pc, #140]	; (d5e58 <_GLOBAL__sub_I___appProductID+0x11c>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5dca:	4e24      	ldr	r6, [pc, #144]	; (d5e5c <_GLOBAL__sub_I___appProductID+0x120>)
Adafruit_SHT31 tempHumidSensor = Adafruit_SHT31();  // Temp and Humidity Sensor - Grove connected on i2c
   d5dcc:	f000 f8cd 	bl	d5f6a <_ZN14Adafruit_SHT31C1Ev>
BH1750 lightSensor(0x23, Wire);                     // Light sensor measures light level in Lux
   d5dd0:	f002 f9cc 	bl	d816c <_Z19__fetch_global_Wirev>
   d5dd4:	2123      	movs	r1, #35	; 0x23
   d5dd6:	4602      	mov	r2, r0
   d5dd8:	4821      	ldr	r0, [pc, #132]	; (d5e60 <_GLOBAL__sub_I___appProductID+0x124>)
   d5dda:	f000 f855 	bl	d5e88 <_ZN6BH1750C1EhR7TwoWire>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5dde:	4b21      	ldr	r3, [pc, #132]	; (d5e64 <_GLOBAL__sub_I___appProductID+0x128>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5de0:	4921      	ldr	r1, [pc, #132]	; (d5e68 <_GLOBAL__sub_I___appProductID+0x12c>)
   d5de2:	9300      	str	r3, [sp, #0]
   d5de4:	466a      	mov	r2, sp
   d5de6:	462b      	mov	r3, r5
   d5de8:	4648      	mov	r0, r9
	    _M_manager = &_My_handler::_M_manager;
   d5dea:	9402      	str	r4, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5dec:	f8cd 800c 	str.w	r8, [sp, #12]
   d5df0:	f7fe fa46 	bl	d4280 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5df4:	4668      	mov	r0, sp
   d5df6:	f7fe f9d5 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d5dfa:	463a      	mov	r2, r7
   d5dfc:	4631      	mov	r1, r6
   d5dfe:	4648      	mov	r0, r9
   d5e00:	f002 fa04 	bl	d820c <__aeabi_atexit>
	    _M_manager = &_My_handler::_M_manager;
   d5e04:	e9cd 4802 	strd	r4, r8, [sp, #8]
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5e08:	4c18      	ldr	r4, [pc, #96]	; (d5e6c <_GLOBAL__sub_I___appProductID+0x130>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e0a:	4b19      	ldr	r3, [pc, #100]	; (d5e70 <_GLOBAL__sub_I___appProductID+0x134>)
   d5e0c:	4919      	ldr	r1, [pc, #100]	; (d5e74 <_GLOBAL__sub_I___appProductID+0x138>)
   d5e0e:	9300      	str	r3, [sp, #0]
   d5e10:	466a      	mov	r2, sp
   d5e12:	462b      	mov	r3, r5
   d5e14:	4620      	mov	r0, r4
   d5e16:	f7fe fa33 	bl	d4280 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5e1a:	4668      	mov	r0, sp
   d5e1c:	f7fe f9c2 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d5e20:	463a      	mov	r2, r7
   d5e22:	4631      	mov	r1, r6
   d5e24:	4620      	mov	r0, r4
   d5e26:	f002 f9f1 	bl	d820c <__aeabi_atexit>
}
   d5e2a:	b005      	add	sp, #20
   d5e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e30:	2003e480 	.word	0x2003e480
   d5e34:	2003e474 	.word	0x2003e474
   d5e38:	2003e428 	.word	0x2003e428
   d5e3c:	2003e484 	.word	0x2003e484
   d5e40:	ffff0000 	.word	0xffff0000
   d5e44:	000d4195 	.word	0x000d4195
   d5e48:	2003e4c4 	.word	0x2003e4c4
   d5e4c:	000d40ef 	.word	0x000d40ef
   d5e50:	00030010 	.word	0x00030010
   d5e54:	2003e574 	.word	0x2003e574
   d5e58:	000d40d9 	.word	0x000d40d9
   d5e5c:	000d4335 	.word	0x000d4335
   d5e60:	2003e524 	.word	0x2003e524
   d5e64:	000d40b5 	.word	0x000d40b5
   d5e68:	00124f80 	.word	0x00124f80
   d5e6c:	2003e490 	.word	0x2003e490
   d5e70:	000d40c1 	.word	0x000d40c1
   d5e74:	001b7740 	.word	0x001b7740
   d5e78:	2003e598 	.word	0x2003e598
   d5e7c:	000d40d5 	.word	0x000d40d5

000d5e80 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5e80:	6803      	ldr	r3, [r0, #0]
   d5e82:	b2c9      	uxtb	r1, r1
   d5e84:	689b      	ldr	r3, [r3, #8]
   d5e86:	4718      	bx	r3

000d5e88 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5e88:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d5e8a:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   d5e8c:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   d5e8e:	7002      	strb	r2, [r0, #0]
}
   d5e90:	4770      	bx	lr

000d5e92 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d5e92:	b510      	push	{r4, lr}
   d5e94:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d5e96:	6840      	ldr	r0, [r0, #4]
   d5e98:	f001 f9df 	bl	d725a <_ZN7TwoWire9isEnabledEv>
   d5e9c:	b910      	cbnz	r0, d5ea4 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d5e9e:	6860      	ldr	r0, [r4, #4]
   d5ea0:	f001 f986 	bl	d71b0 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d5ea4:	2001      	movs	r0, #1
   d5ea6:	bd10      	pop	{r4, pc}

000d5ea8 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d5ea8:	b570      	push	{r4, r5, r6, lr}
   d5eaa:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d5eac:	7841      	ldrb	r1, [r0, #1]
   d5eae:	6840      	ldr	r0, [r0, #4]
   d5eb0:	f001 f9b0 	bl	d7214 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d5eb4:	7869      	ldrb	r1, [r5, #1]
   d5eb6:	6868      	ldr	r0, [r5, #4]
   d5eb8:	2202      	movs	r2, #2
   d5eba:	f001 f9a8 	bl	d720e <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d5ebe:	6868      	ldr	r0, [r5, #4]
   d5ec0:	6803      	ldr	r3, [r0, #0]
   d5ec2:	695b      	ldr	r3, [r3, #20]
   d5ec4:	4798      	blx	r3
   d5ec6:	4606      	mov	r6, r0
   d5ec8:	6868      	ldr	r0, [r5, #4]
   d5eca:	6803      	ldr	r3, [r0, #0]
   d5ecc:	695b      	ldr	r3, [r3, #20]
   d5ece:	4798      	blx	r3
   d5ed0:	4604      	mov	r4, r0
  m_i2c.endTransmission();
   d5ed2:	6868      	ldr	r0, [r5, #4]
   d5ed4:	f001 f9be 	bl	d7254 <_ZN7TwoWire15endTransmissionEv>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d5ed8:	ea44 2006 	orr.w	r0, r4, r6, lsl #8

  return (float)level / 1.2f; // convert to lux
   d5edc:	b284      	uxth	r4, r0
   d5ede:	ee07 4a90 	vmov	s15, r4
   d5ee2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d5ee6:	eddf 7a02 	vldr	s15, [pc, #8]	; d5ef0 <_ZN6BH175015get_light_levelEv+0x48>
   d5eea:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5eee:	bd70      	pop	{r4, r5, r6, pc}
   d5ef0:	3f99999a 	.word	0x3f99999a

000d5ef4 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d5ef4:	7803      	ldrb	r3, [r0, #0]
   d5ef6:	2b23      	cmp	r3, #35	; 0x23
   d5ef8:	d005      	beq.n	d5f06 <_ZN6BH175020wait_for_measurementEv+0x12>
   d5efa:	2b13      	cmp	r3, #19
   d5efc:	bf0c      	ite	eq
   d5efe:	2018      	moveq	r0, #24
   d5f00:	20b4      	movne	r0, #180	; 0xb4
   d5f02:	f000 bc91 	b.w	d6828 <delay>
   d5f06:	2018      	movs	r0, #24
   d5f08:	e7fb      	b.n	d5f02 <_ZN6BH175020wait_for_measurementEv+0xe>

000d5f0a <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   d5f0a:	b538      	push	{r3, r4, r5, lr}
   d5f0c:	4604      	mov	r4, r0
   d5f0e:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d5f10:	7841      	ldrb	r1, [r0, #1]
   d5f12:	6840      	ldr	r0, [r0, #4]
   d5f14:	f001 f97e 	bl	d7214 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d5f18:	6860      	ldr	r0, [r4, #4]
   d5f1a:	6803      	ldr	r3, [r0, #0]
   d5f1c:	4629      	mov	r1, r5
   d5f1e:	689b      	ldr	r3, [r3, #8]
   d5f20:	4798      	blx	r3
  m_i2c.endTransmission();
   d5f22:	6860      	ldr	r0, [r4, #4]
   d5f24:	f001 f996 	bl	d7254 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   d5f28:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   d5f2a:	4620      	mov	r0, r4
}
   d5f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   d5f30:	f7ff bfe0 	b.w	d5ef4 <_ZN6BH175020wait_for_measurementEv>

000d5f34 <_ZN6BH175023make_forced_measurementEv>:
{
   d5f34:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   d5f36:	7803      	ldrb	r3, [r0, #0]
   d5f38:	f1a3 0220 	sub.w	r2, r3, #32
   d5f3c:	2a01      	cmp	r2, #1
{
   d5f3e:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   d5f40:	d901      	bls.n	d5f46 <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d5f42:	2b23      	cmp	r3, #35	; 0x23
   d5f44:	d110      	bne.n	d5f68 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   d5f46:	7861      	ldrb	r1, [r4, #1]
   d5f48:	6860      	ldr	r0, [r4, #4]
   d5f4a:	f001 f963 	bl	d7214 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d5f4e:	6860      	ldr	r0, [r4, #4]
   d5f50:	7821      	ldrb	r1, [r4, #0]
   d5f52:	6803      	ldr	r3, [r0, #0]
   d5f54:	689b      	ldr	r3, [r3, #8]
   d5f56:	4798      	blx	r3
    m_i2c.endTransmission();
   d5f58:	6860      	ldr	r0, [r4, #4]
   d5f5a:	f001 f97b 	bl	d7254 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   d5f5e:	4620      	mov	r0, r4
}
   d5f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   d5f64:	f7ff bfc6 	b.w	d5ef4 <_ZN6BH175020wait_for_measurementEv>
}
   d5f68:	bd10      	pop	{r4, pc}

000d5f6a <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5f6a:	4770      	bx	lr

000d5f6c <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5f6c:	b538      	push	{r3, r4, r5, lr}
   d5f6e:	4605      	mov	r5, r0
   d5f70:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5f72:	f002 f8fb 	bl	d816c <_Z19__fetch_global_Wirev>
   d5f76:	7829      	ldrb	r1, [r5, #0]
   d5f78:	f001 f94c 	bl	d7214 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5f7c:	f002 f8f6 	bl	d816c <_Z19__fetch_global_Wirev>
   d5f80:	0a21      	lsrs	r1, r4, #8
   d5f82:	f7ff ff7d 	bl	d5e80 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5f86:	f002 f8f1 	bl	d816c <_Z19__fetch_global_Wirev>
   d5f8a:	b2e1      	uxtb	r1, r4
   d5f8c:	f7ff ff78 	bl	d5e80 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5f90:	f002 f8ec 	bl	d816c <_Z19__fetch_global_Wirev>
}
   d5f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d5f98:	f001 b95c 	b.w	d7254 <_ZN7TwoWire15endTransmissionEv>

000d5f9c <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d5f9c:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5f9e:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5fa2:	f7ff ffe3 	bl	d5f6c <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d5fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d5faa:	200a      	movs	r0, #10
   d5fac:	f000 bc3c 	b.w	d6828 <delay>

000d5fb0 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5fb0:	b538      	push	{r3, r4, r5, lr}
   d5fb2:	4604      	mov	r4, r0
   d5fb4:	460d      	mov	r5, r1
  Wire.begin();
   d5fb6:	f002 f8d9 	bl	d816c <_Z19__fetch_global_Wirev>
   d5fba:	f001 f8f9 	bl	d71b0 <_ZN7TwoWire5beginEv>
  reset();
   d5fbe:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d5fc0:	7025      	strb	r5, [r4, #0]
  reset();
   d5fc2:	f7ff ffeb 	bl	d5f9c <_ZN14Adafruit_SHT315resetEv>
}
   d5fc6:	2001      	movs	r0, #1
   d5fc8:	bd38      	pop	{r3, r4, r5, pc}

000d5fca <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d5fca:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d5fcc:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d5fce:	4291      	cmp	r1, r2
   d5fd0:	d00e      	beq.n	d5ff0 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d5fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5fd6:	4058      	eors	r0, r3
   d5fd8:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d5fda:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5fde:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d5fe2:	bf18      	it	ne
   d5fe4:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d5fe8:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d5fea:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d5fec:	d1f5      	bne.n	d5fda <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5fee:	e7ee      	b.n	d5fce <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d5ff0:	4770      	bx	lr
   d5ff2:	0000      	movs	r0, r0
   d5ff4:	0000      	movs	r0, r0
	...

000d5ff8 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d5ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d5ffa:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d5ffe:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d6000:	f7ff ffb4 	bl	d5f6c <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d6004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6008:	f000 fc0e 	bl	d6828 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d600c:	f002 f8ae 	bl	d816c <_Z19__fetch_global_Wirev>
   d6010:	7829      	ldrb	r1, [r5, #0]
   d6012:	2206      	movs	r2, #6
   d6014:	f001 f8fb 	bl	d720e <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d6018:	f002 f8a8 	bl	d816c <_Z19__fetch_global_Wirev>
   d601c:	6803      	ldr	r3, [r0, #0]
   d601e:	691b      	ldr	r3, [r3, #16]
   d6020:	4798      	blx	r3
   d6022:	2806      	cmp	r0, #6
   d6024:	d14b      	bne.n	d60be <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d6026:	466e      	mov	r6, sp
   d6028:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d602a:	f002 f89f 	bl	d816c <_Z19__fetch_global_Wirev>
   d602e:	6803      	ldr	r3, [r0, #0]
   d6030:	695b      	ldr	r3, [r3, #20]
   d6032:	4798      	blx	r3
   d6034:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d6036:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d603a:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d603e:	4669      	mov	r1, sp
   d6040:	d1f3      	bne.n	d602a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d6042:	2202      	movs	r2, #2
   d6044:	4628      	mov	r0, r5
   d6046:	f7ff ffc0 	bl	d5fca <_ZN14Adafruit_SHT314crc8EPKhi>
   d604a:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d604e:	4286      	cmp	r6, r0
   d6050:	d135      	bne.n	d60be <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d6052:	2202      	movs	r2, #2
   d6054:	f10d 0103 	add.w	r1, sp, #3
   d6058:	4628      	mov	r0, r5
   d605a:	f7ff ffb6 	bl	d5fca <_ZN14Adafruit_SHT314crc8EPKhi>
   d605e:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d6062:	4286      	cmp	r6, r0
   d6064:	d12b      	bne.n	d60be <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d6066:	f8bd 0000 	ldrh.w	r0, [sp]
   d606a:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d606e:	ba40      	rev16	r0, r0
   d6070:	b280      	uxth	r0, r0
   d6072:	f002 fa1b 	bl	d84ac <__aeabi_ui2d>
  stemp *= 175;
   d6076:	a318      	add	r3, pc, #96	; (adr r3, d60d8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d6078:	e9d3 2300 	ldrd	r2, r3, [r3]
   d607c:	f002 fa90 	bl	d85a0 <__aeabi_dmul>
  stemp /= 0xffff;
   d6080:	a311      	add	r3, pc, #68	; (adr r3, d60c8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d6082:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6086:	f002 fbb5 	bl	d87f4 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d608a:	4b11      	ldr	r3, [pc, #68]	; (d60d0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d608c:	2200      	movs	r2, #0
   d608e:	f002 f8cf 	bl	d8230 <__aeabi_dsub>
  temp = stemp;
   d6092:	f002 fd55 	bl	d8b40 <__aeabi_d2f>
   d6096:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d6098:	ba60      	rev16	r0, r4
   d609a:	b280      	uxth	r0, r0
   d609c:	f002 fa06 	bl	d84ac <__aeabi_ui2d>
  shum *= 100;
   d60a0:	4b0c      	ldr	r3, [pc, #48]	; (d60d4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d60a2:	2200      	movs	r2, #0
   d60a4:	f002 fa7c 	bl	d85a0 <__aeabi_dmul>
  shum /= 0xFFFF;
   d60a8:	a307      	add	r3, pc, #28	; (adr r3, d60c8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d60aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60ae:	f002 fba1 	bl	d87f4 <__aeabi_ddiv>
  humidity = shum;
   d60b2:	f002 fd45 	bl	d8b40 <__aeabi_d2f>
   d60b6:	6068      	str	r0, [r5, #4]
  return true;
   d60b8:	2001      	movs	r0, #1
}
   d60ba:	b002      	add	sp, #8
   d60bc:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d60be:	2000      	movs	r0, #0
   d60c0:	e7fb      	b.n	d60ba <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d60c2:	bf00      	nop
   d60c4:	f3af 8000 	nop.w
   d60c8:	00000000 	.word	0x00000000
   d60cc:	40efffe0 	.word	0x40efffe0
   d60d0:	40468000 	.word	0x40468000
   d60d4:	40590000 	.word	0x40590000
   d60d8:	00000000 	.word	0x00000000
   d60dc:	4065e000 	.word	0x4065e000

000d60e0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d60e0:	b510      	push	{r4, lr}
   d60e2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d60e4:	f7ff ff88 	bl	d5ff8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d60e8:	b110      	cbz	r0, d60f0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d60ea:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d60ee:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d60f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d60f8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d60f4:	e7fb      	b.n	d60ee <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d60f6:	bf00      	nop
   d60f8:	7fc00000 	.word	0x7fc00000

000d60fc <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d60fc:	b510      	push	{r4, lr}
   d60fe:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d6100:	f7ff ff7a 	bl	d5ff8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d6104:	b110      	cbz	r0, d610c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d6106:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d610a:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d610c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6114 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d6110:	e7fb      	b.n	d610a <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d6112:	bf00      	nop
   d6114:	7fc00000 	.word	0x7fc00000

000d6118 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <cellular_signal+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030274 	.word	0x00030274

000d6128 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <cellular_command+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030274 	.word	0x00030274

000d6138 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <os_thread_yield+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	68db      	ldr	r3, [r3, #12]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030248 	.word	0x00030248

000d6148 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <os_thread_scheduling+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	69db      	ldr	r3, [r3, #28]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030248 	.word	0x00030248

000d6158 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <os_timer_create+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	6a1b      	ldr	r3, [r3, #32]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030248 	.word	0x00030248

000d6168 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <os_timer_destroy+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030248 	.word	0x00030248

000d6178 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <os_timer_get_id+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	00030248 	.word	0x00030248

000d6188 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <os_timer_change+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030248 	.word	0x00030248

000d6198 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <os_mutex_recursive_create+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	00030248 	.word	0x00030248

000d61a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <os_mutex_recursive_destroy+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030248 	.word	0x00030248

000d61b8 <os_timer_is_active>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <os_timer_is_active+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	00030248 	.word	0x00030248

000d61c8 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <os_timer_set_id+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	00030248 	.word	0x00030248

000d61d8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <HAL_Feature_Set+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	00030234 	.word	0x00030234

000d61e8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	00030234 	.word	0x00030234

000d61f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <HAL_RNG_GetRandomNumber+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	685b      	ldr	r3, [r3, #4]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	00030218 	.word	0x00030218

000d6208 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <HAL_Delay_Microseconds+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	68db      	ldr	r3, [r3, #12]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030218 	.word	0x00030218

000d6218 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	695b      	ldr	r3, [r3, #20]
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030218 	.word	0x00030218

000d6228 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <HAL_EEPROM_Init+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030218 	.word	0x00030218

000d6238 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <HAL_EEPROM_Read+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030218 	.word	0x00030218

000d6248 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <HAL_EEPROM_Get+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030218 	.word	0x00030218

000d6258 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <HAL_EEPROM_Put+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030218 	.word	0x00030218

000d6268 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <hal_rtc_time_is_valid+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030218 	.word	0x00030218

000d6278 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <hal_timer_millis+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030218 	.word	0x00030218

000d6288 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <hal_rtc_get_time+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	00030218 	.word	0x00030218

000d6298 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <HAL_Pin_Map+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	681b      	ldr	r3, [r3, #0]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	0003022c 	.word	0x0003022c

000d62a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <HAL_Validate_Pin_Function+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	685b      	ldr	r3, [r3, #4]
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	0003022c 	.word	0x0003022c

000d62b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <HAL_Pin_Mode+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	689b      	ldr	r3, [r3, #8]
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	0003022c 	.word	0x0003022c

000d62c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <HAL_Get_Pin_Mode+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	68db      	ldr	r3, [r3, #12]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	0003022c 	.word	0x0003022c

000d62d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <HAL_GPIO_Write+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	691b      	ldr	r3, [r3, #16]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	0003022c 	.word	0x0003022c

000d62e8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <HAL_GPIO_Read+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	695b      	ldr	r3, [r3, #20]
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	0003022c 	.word	0x0003022c

000d62f8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <hal_adc_read+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	0003022c 	.word	0x0003022c

000d6308 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <hal_i2c_begin+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	68db      	ldr	r3, [r3, #12]
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	00030228 	.word	0x00030228

000d6318 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <hal_i2c_begin_transmission+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	699b      	ldr	r3, [r3, #24]
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	00030228 	.word	0x00030228

000d6328 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <hal_i2c_end_transmission+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	69db      	ldr	r3, [r3, #28]
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	00030228 	.word	0x00030228

000d6338 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <hal_i2c_write+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	6a1b      	ldr	r3, [r3, #32]
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	00030228 	.word	0x00030228

000d6348 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <hal_i2c_available+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	00030228 	.word	0x00030228

000d6358 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6358:	b508      	push	{r3, lr}
   d635a:	4b02      	ldr	r3, [pc, #8]	; (d6364 <hal_i2c_read+0xc>)
   d635c:	681b      	ldr	r3, [r3, #0]
   d635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6360:	9301      	str	r3, [sp, #4]
   d6362:	bd08      	pop	{r3, pc}
   d6364:	00030228 	.word	0x00030228

000d6368 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6368:	b508      	push	{r3, lr}
   d636a:	4b02      	ldr	r3, [pc, #8]	; (d6374 <hal_i2c_peek+0xc>)
   d636c:	681b      	ldr	r3, [r3, #0]
   d636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6370:	9301      	str	r3, [sp, #4]
   d6372:	bd08      	pop	{r3, pc}
   d6374:	00030228 	.word	0x00030228

000d6378 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b02      	ldr	r3, [pc, #8]	; (d6384 <hal_i2c_flush+0xc>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6380:	9301      	str	r3, [sp, #4]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	00030228 	.word	0x00030228

000d6388 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6388:	b508      	push	{r3, lr}
   d638a:	4b02      	ldr	r3, [pc, #8]	; (d6394 <hal_i2c_is_enabled+0xc>)
   d638c:	681b      	ldr	r3, [r3, #0]
   d638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	bd08      	pop	{r3, pc}
   d6394:	00030228 	.word	0x00030228

000d6398 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6398:	b508      	push	{r3, lr}
   d639a:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <hal_i2c_init+0xc>)
   d639c:	681b      	ldr	r3, [r3, #0]
   d639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d63a0:	9301      	str	r3, [sp, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	00030228 	.word	0x00030228

000d63a8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d63a8:	b508      	push	{r3, lr}
   d63aa:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <hal_i2c_lock+0xc>)
   d63ac:	681b      	ldr	r3, [r3, #0]
   d63ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d63b0:	9301      	str	r3, [sp, #4]
   d63b2:	bd08      	pop	{r3, pc}
   d63b4:	00030228 	.word	0x00030228

000d63b8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d63b8:	b508      	push	{r3, lr}
   d63ba:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <hal_i2c_unlock+0xc>)
   d63bc:	681b      	ldr	r3, [r3, #0]
   d63be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d63c0:	9301      	str	r3, [sp, #4]
   d63c2:	bd08      	pop	{r3, pc}
   d63c4:	00030228 	.word	0x00030228

000d63c8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d63c8:	b508      	push	{r3, lr}
   d63ca:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <hal_i2c_request_ex+0xc>)
   d63cc:	681b      	ldr	r3, [r3, #0]
   d63ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d63d0:	9301      	str	r3, [sp, #4]
   d63d2:	bd08      	pop	{r3, pc}
   d63d4:	00030228 	.word	0x00030228

000d63d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d63d8:	b508      	push	{r3, lr}
   d63da:	4b02      	ldr	r3, [pc, #8]	; (d63e4 <inet_inet_ntop+0xc>)
   d63dc:	681b      	ldr	r3, [r3, #0]
   d63de:	695b      	ldr	r3, [r3, #20]
   d63e0:	9301      	str	r3, [sp, #4]
   d63e2:	bd08      	pop	{r3, pc}
   d63e4:	00030264 	.word	0x00030264

000d63e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d63e8:	b508      	push	{r3, lr}
   d63ea:	4b02      	ldr	r3, [pc, #8]	; (d63f4 <netdb_freeaddrinfo+0xc>)
   d63ec:	681b      	ldr	r3, [r3, #0]
   d63ee:	689b      	ldr	r3, [r3, #8]
   d63f0:	9301      	str	r3, [sp, #4]
   d63f2:	bd08      	pop	{r3, pc}
   d63f4:	00030268 	.word	0x00030268

000d63f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d63f8:	b508      	push	{r3, lr}
   d63fa:	4b02      	ldr	r3, [pc, #8]	; (d6404 <netdb_getaddrinfo+0xc>)
   d63fc:	681b      	ldr	r3, [r3, #0]
   d63fe:	68db      	ldr	r3, [r3, #12]
   d6400:	9301      	str	r3, [sp, #4]
   d6402:	bd08      	pop	{r3, pc}
   d6404:	00030268 	.word	0x00030268

000d6408 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6408:	b508      	push	{r3, lr}
   d640a:	4b02      	ldr	r3, [pc, #8]	; (d6414 <hal_spi_init+0xc>)
   d640c:	681b      	ldr	r3, [r3, #0]
   d640e:	69db      	ldr	r3, [r3, #28]
   d6410:	9301      	str	r3, [sp, #4]
   d6412:	bd08      	pop	{r3, pc}
   d6414:	00030230 	.word	0x00030230

000d6418 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6418:	b508      	push	{r3, lr}
   d641a:	4b02      	ldr	r3, [pc, #8]	; (d6424 <hal_spi_is_enabled+0xc>)
   d641c:	681b      	ldr	r3, [r3, #0]
   d641e:	6a1b      	ldr	r3, [r3, #32]
   d6420:	9301      	str	r3, [sp, #4]
   d6422:	bd08      	pop	{r3, pc}
   d6424:	00030230 	.word	0x00030230

000d6428 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6428:	b508      	push	{r3, lr}
   d642a:	4b02      	ldr	r3, [pc, #8]	; (d6434 <hal_usart_init+0xc>)
   d642c:	681b      	ldr	r3, [r3, #0]
   d642e:	681b      	ldr	r3, [r3, #0]
   d6430:	9301      	str	r3, [sp, #4]
   d6432:	bd08      	pop	{r3, pc}
   d6434:	0003023c 	.word	0x0003023c

000d6438 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6438:	b508      	push	{r3, lr}
   d643a:	4b02      	ldr	r3, [pc, #8]	; (d6444 <hal_usart_write+0xc>)
   d643c:	681b      	ldr	r3, [r3, #0]
   d643e:	68db      	ldr	r3, [r3, #12]
   d6440:	9301      	str	r3, [sp, #4]
   d6442:	bd08      	pop	{r3, pc}
   d6444:	0003023c 	.word	0x0003023c

000d6448 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6448:	b508      	push	{r3, lr}
   d644a:	4b02      	ldr	r3, [pc, #8]	; (d6454 <hal_usart_available+0xc>)
   d644c:	681b      	ldr	r3, [r3, #0]
   d644e:	691b      	ldr	r3, [r3, #16]
   d6450:	9301      	str	r3, [sp, #4]
   d6452:	bd08      	pop	{r3, pc}
   d6454:	0003023c 	.word	0x0003023c

000d6458 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6458:	b508      	push	{r3, lr}
   d645a:	4b02      	ldr	r3, [pc, #8]	; (d6464 <hal_usart_read+0xc>)
   d645c:	681b      	ldr	r3, [r3, #0]
   d645e:	695b      	ldr	r3, [r3, #20]
   d6460:	9301      	str	r3, [sp, #4]
   d6462:	bd08      	pop	{r3, pc}
   d6464:	0003023c 	.word	0x0003023c

000d6468 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6468:	b508      	push	{r3, lr}
   d646a:	4b02      	ldr	r3, [pc, #8]	; (d6474 <hal_usart_peek+0xc>)
   d646c:	681b      	ldr	r3, [r3, #0]
   d646e:	699b      	ldr	r3, [r3, #24]
   d6470:	9301      	str	r3, [sp, #4]
   d6472:	bd08      	pop	{r3, pc}
   d6474:	0003023c 	.word	0x0003023c

000d6478 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6478:	b508      	push	{r3, lr}
   d647a:	4b02      	ldr	r3, [pc, #8]	; (d6484 <hal_usart_flush+0xc>)
   d647c:	681b      	ldr	r3, [r3, #0]
   d647e:	69db      	ldr	r3, [r3, #28]
   d6480:	9301      	str	r3, [sp, #4]
   d6482:	bd08      	pop	{r3, pc}
   d6484:	0003023c 	.word	0x0003023c

000d6488 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6488:	b508      	push	{r3, lr}
   d648a:	4b02      	ldr	r3, [pc, #8]	; (d6494 <hal_usart_is_enabled+0xc>)
   d648c:	681b      	ldr	r3, [r3, #0]
   d648e:	6a1b      	ldr	r3, [r3, #32]
   d6490:	9301      	str	r3, [sp, #4]
   d6492:	bd08      	pop	{r3, pc}
   d6494:	0003023c 	.word	0x0003023c

000d6498 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6498:	b508      	push	{r3, lr}
   d649a:	4b02      	ldr	r3, [pc, #8]	; (d64a4 <hal_usart_available_data_for_write+0xc>)
   d649c:	681b      	ldr	r3, [r3, #0]
   d649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64a0:	9301      	str	r3, [sp, #4]
   d64a2:	bd08      	pop	{r3, pc}
   d64a4:	0003023c 	.word	0x0003023c

000d64a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d64a8:	b508      	push	{r3, lr}
   d64aa:	4b02      	ldr	r3, [pc, #8]	; (d64b4 <HAL_USB_USART_Init+0xc>)
   d64ac:	681b      	ldr	r3, [r3, #0]
   d64ae:	681b      	ldr	r3, [r3, #0]
   d64b0:	9301      	str	r3, [sp, #4]
   d64b2:	bd08      	pop	{r3, pc}
   d64b4:	0003024c 	.word	0x0003024c

000d64b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d64b8:	b508      	push	{r3, lr}
   d64ba:	4b02      	ldr	r3, [pc, #8]	; (d64c4 <HAL_USB_USART_Available_Data+0xc>)
   d64bc:	681b      	ldr	r3, [r3, #0]
   d64be:	691b      	ldr	r3, [r3, #16]
   d64c0:	9301      	str	r3, [sp, #4]
   d64c2:	bd08      	pop	{r3, pc}
   d64c4:	0003024c 	.word	0x0003024c

000d64c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d64c8:	b508      	push	{r3, lr}
   d64ca:	4b02      	ldr	r3, [pc, #8]	; (d64d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d64cc:	681b      	ldr	r3, [r3, #0]
   d64ce:	695b      	ldr	r3, [r3, #20]
   d64d0:	9301      	str	r3, [sp, #4]
   d64d2:	bd08      	pop	{r3, pc}
   d64d4:	0003024c 	.word	0x0003024c

000d64d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64d8:	b508      	push	{r3, lr}
   d64da:	4b02      	ldr	r3, [pc, #8]	; (d64e4 <HAL_USB_USART_Receive_Data+0xc>)
   d64dc:	681b      	ldr	r3, [r3, #0]
   d64de:	699b      	ldr	r3, [r3, #24]
   d64e0:	9301      	str	r3, [sp, #4]
   d64e2:	bd08      	pop	{r3, pc}
   d64e4:	0003024c 	.word	0x0003024c

000d64e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64e8:	b508      	push	{r3, lr}
   d64ea:	4b02      	ldr	r3, [pc, #8]	; (d64f4 <HAL_USB_USART_Send_Data+0xc>)
   d64ec:	681b      	ldr	r3, [r3, #0]
   d64ee:	69db      	ldr	r3, [r3, #28]
   d64f0:	9301      	str	r3, [sp, #4]
   d64f2:	bd08      	pop	{r3, pc}
   d64f4:	0003024c 	.word	0x0003024c

000d64f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d64f8:	b508      	push	{r3, lr}
   d64fa:	4b02      	ldr	r3, [pc, #8]	; (d6504 <HAL_USB_USART_Flush_Data+0xc>)
   d64fc:	681b      	ldr	r3, [r3, #0]
   d64fe:	6a1b      	ldr	r3, [r3, #32]
   d6500:	9301      	str	r3, [sp, #4]
   d6502:	bd08      	pop	{r3, pc}
   d6504:	0003024c 	.word	0x0003024c

000d6508 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6508:	b508      	push	{r3, lr}
   d650a:	4b02      	ldr	r3, [pc, #8]	; (d6514 <panic_+0xc>)
   d650c:	681b      	ldr	r3, [r3, #0]
   d650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6510:	9301      	str	r3, [sp, #4]
   d6512:	bd08      	pop	{r3, pc}
   d6514:	00030260 	.word	0x00030260

000d6518 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6518:	b508      	push	{r3, lr}
   d651a:	4b02      	ldr	r3, [pc, #8]	; (d6524 <log_message+0xc>)
   d651c:	681b      	ldr	r3, [r3, #0]
   d651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6520:	9301      	str	r3, [sp, #4]
   d6522:	bd08      	pop	{r3, pc}
   d6524:	00030260 	.word	0x00030260

000d6528 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6528:	b508      	push	{r3, lr}
   d652a:	4b03      	ldr	r3, [pc, #12]	; (d6538 <diag_get_source+0x10>)
   d652c:	681b      	ldr	r3, [r3, #0]
   d652e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6532:	9301      	str	r3, [sp, #4]
   d6534:	bd08      	pop	{r3, pc}
   d6536:	0000      	.short	0x0000
   d6538:	00030260 	.word	0x00030260

000d653c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <system_mode+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	681b      	ldr	r3, [r3, #0]
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	00030220 	.word	0x00030220

000d654c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <set_system_mode+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	685b      	ldr	r3, [r3, #4]
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	00030220 	.word	0x00030220

000d655c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <system_delay_ms+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	695b      	ldr	r3, [r3, #20]
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	00030220 	.word	0x00030220

000d656c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <system_sleep+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	699b      	ldr	r3, [r3, #24]
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	00030220 	.word	0x00030220

000d657c <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <system_thread_set_state+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	00030220 	.word	0x00030220

000d658c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <application_thread_current+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	00030220 	.word	0x00030220

000d659c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <application_thread_invoke+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	00030220 	.word	0x00030220

000d65ac <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <system_thread_get_state+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	00030220 	.word	0x00030220

000d65bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b03      	ldr	r3, [pc, #12]	; (d65cc <system_ctrl_set_app_request_handler+0x10>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d65c6:	9301      	str	r3, [sp, #4]
   d65c8:	bd08      	pop	{r3, pc}
   d65ca:	0000      	.short	0x0000
   d65cc:	00030220 	.word	0x00030220

000d65d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b03      	ldr	r3, [pc, #12]	; (d65e0 <system_ctrl_set_result+0x10>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d65da:	9301      	str	r3, [sp, #4]
   d65dc:	bd08      	pop	{r3, pc}
   d65de:	0000      	.short	0x0000
   d65e0:	00030220 	.word	0x00030220

000d65e4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b03      	ldr	r3, [pc, #12]	; (d65f4 <system_power_management_set_config+0x10>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d65ee:	9301      	str	r3, [sp, #4]
   d65f0:	bd08      	pop	{r3, pc}
   d65f2:	0000      	.short	0x0000
   d65f4:	00030220 	.word	0x00030220

000d65f8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d65f8:	b508      	push	{r3, lr}
   d65fa:	4b03      	ldr	r3, [pc, #12]	; (d6608 <system_sleep_ext+0x10>)
   d65fc:	681b      	ldr	r3, [r3, #0]
   d65fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6602:	9301      	str	r3, [sp, #4]
   d6604:	bd08      	pop	{r3, pc}
   d6606:	0000      	.short	0x0000
   d6608:	00030220 	.word	0x00030220

000d660c <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b03      	ldr	r3, [pc, #12]	; (d661c <system_reset+0x10>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d6616:	9301      	str	r3, [sp, #4]
   d6618:	bd08      	pop	{r3, pc}
   d661a:	0000      	.short	0x0000
   d661c:	00030220 	.word	0x00030220

000d6620 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <spark_variable+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	681b      	ldr	r3, [r3, #0]
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	00030244 	.word	0x00030244

000d6630 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <spark_function+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	685b      	ldr	r3, [r3, #4]
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	00030244 	.word	0x00030244

000d6640 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <spark_process+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	689b      	ldr	r3, [r3, #8]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	00030244 	.word	0x00030244

000d6650 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <spark_cloud_flag_connect+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	68db      	ldr	r3, [r3, #12]
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	00030244 	.word	0x00030244

000d6660 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <spark_cloud_flag_connected+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	695b      	ldr	r3, [r3, #20]
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	00030244 	.word	0x00030244

000d6670 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6670:	b508      	push	{r3, lr}
   d6672:	4b02      	ldr	r3, [pc, #8]	; (d667c <spark_deviceID+0xc>)
   d6674:	681b      	ldr	r3, [r3, #0]
   d6676:	69db      	ldr	r3, [r3, #28]
   d6678:	9301      	str	r3, [sp, #4]
   d667a:	bd08      	pop	{r3, pc}
   d667c:	00030244 	.word	0x00030244

000d6680 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b02      	ldr	r3, [pc, #8]	; (d668c <spark_send_event+0xc>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	6a1b      	ldr	r3, [r3, #32]
   d6688:	9301      	str	r3, [sp, #4]
   d668a:	bd08      	pop	{r3, pc}
   d668c:	00030244 	.word	0x00030244

000d6690 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6690:	b508      	push	{r3, lr}
   d6692:	4b02      	ldr	r3, [pc, #8]	; (d669c <spark_subscribe+0xc>)
   d6694:	681b      	ldr	r3, [r3, #0]
   d6696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6698:	9301      	str	r3, [sp, #4]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	00030244 	.word	0x00030244

000d66a0 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d66a0:	b508      	push	{r3, lr}
   d66a2:	4b02      	ldr	r3, [pc, #8]	; (d66ac <spark_sync_time+0xc>)
   d66a4:	681b      	ldr	r3, [r3, #0]
   d66a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	bd08      	pop	{r3, pc}
   d66ac:	00030244 	.word	0x00030244

000d66b0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d66b0:	b508      	push	{r3, lr}
   d66b2:	4b02      	ldr	r3, [pc, #8]	; (d66bc <spark_sync_time_pending+0xc>)
   d66b4:	681b      	ldr	r3, [r3, #0]
   d66b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66b8:	9301      	str	r3, [sp, #4]
   d66ba:	bd08      	pop	{r3, pc}
   d66bc:	00030244 	.word	0x00030244

000d66c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d66c0:	b508      	push	{r3, lr}
   d66c2:	4b02      	ldr	r3, [pc, #8]	; (d66cc <spark_set_random_seed_from_cloud_handler+0xc>)
   d66c4:	681b      	ldr	r3, [r3, #0]
   d66c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d66c8:	9301      	str	r3, [sp, #4]
   d66ca:	bd08      	pop	{r3, pc}
   d66cc:	00030244 	.word	0x00030244

000d66d0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d66d0:	b508      	push	{r3, lr}
   d66d2:	4b02      	ldr	r3, [pc, #8]	; (d66dc <spark_cloud_disconnect+0xc>)
   d66d4:	681b      	ldr	r3, [r3, #0]
   d66d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d66d8:	9301      	str	r3, [sp, #4]
   d66da:	bd08      	pop	{r3, pc}
   d66dc:	00030244 	.word	0x00030244

000d66e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d66e0:	b508      	push	{r3, lr}
   d66e2:	4b02      	ldr	r3, [pc, #8]	; (d66ec <network_connect+0xc>)
   d66e4:	681b      	ldr	r3, [r3, #0]
   d66e6:	685b      	ldr	r3, [r3, #4]
   d66e8:	9301      	str	r3, [sp, #4]
   d66ea:	bd08      	pop	{r3, pc}
   d66ec:	00030240 	.word	0x00030240

000d66f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d66f0:	b508      	push	{r3, lr}
   d66f2:	4b02      	ldr	r3, [pc, #8]	; (d66fc <network_connecting+0xc>)
   d66f4:	681b      	ldr	r3, [r3, #0]
   d66f6:	689b      	ldr	r3, [r3, #8]
   d66f8:	9301      	str	r3, [sp, #4]
   d66fa:	bd08      	pop	{r3, pc}
   d66fc:	00030240 	.word	0x00030240

000d6700 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6700:	b508      	push	{r3, lr}
   d6702:	4b02      	ldr	r3, [pc, #8]	; (d670c <network_disconnect+0xc>)
   d6704:	681b      	ldr	r3, [r3, #0]
   d6706:	68db      	ldr	r3, [r3, #12]
   d6708:	9301      	str	r3, [sp, #4]
   d670a:	bd08      	pop	{r3, pc}
   d670c:	00030240 	.word	0x00030240

000d6710 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <network_ready+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	691b      	ldr	r3, [r3, #16]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	00030240 	.word	0x00030240

000d6720 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <network_on+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	695b      	ldr	r3, [r3, #20]
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	00030240 	.word	0x00030240

000d6730 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <network_off+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	699b      	ldr	r3, [r3, #24]
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	00030240 	.word	0x00030240

000d6740 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <network_listen+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	69db      	ldr	r3, [r3, #28]
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	00030240 	.word	0x00030240

000d6750 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <network_listening+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	6a1b      	ldr	r3, [r3, #32]
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030240 	.word	0x00030240

000d6760 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <network_set_listen_timeout+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	00030240 	.word	0x00030240

000d6770 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <network_get_listen_timeout+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	00030240 	.word	0x00030240

000d6780 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <malloc+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	681b      	ldr	r3, [r3, #0]
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	0003021c 	.word	0x0003021c

000d6790 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <free+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	685b      	ldr	r3, [r3, #4]
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	0003021c 	.word	0x0003021c

000d67a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <realloc+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	689b      	ldr	r3, [r3, #8]
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	0003021c 	.word	0x0003021c

000d67b0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <siprintf+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	691b      	ldr	r3, [r3, #16]
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	0003021c 	.word	0x0003021c

000d67c0 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b02      	ldr	r3, [pc, #8]	; (d67cc <snprintf+0xc>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	69db      	ldr	r3, [r3, #28]
   d67c8:	9301      	str	r3, [sp, #4]
   d67ca:	bd08      	pop	{r3, pc}
   d67cc:	0003021c 	.word	0x0003021c

000d67d0 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d67d0:	b508      	push	{r3, lr}
   d67d2:	4b02      	ldr	r3, [pc, #8]	; (d67dc <abort+0xc>)
   d67d4:	681b      	ldr	r3, [r3, #0]
   d67d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d67d8:	9301      	str	r3, [sp, #4]
   d67da:	bd08      	pop	{r3, pc}
   d67dc:	0003021c 	.word	0x0003021c

000d67e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d67e0:	b508      	push	{r3, lr}
   d67e2:	4b02      	ldr	r3, [pc, #8]	; (d67ec <_malloc_r+0xc>)
   d67e4:	681b      	ldr	r3, [r3, #0]
   d67e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67e8:	9301      	str	r3, [sp, #4]
   d67ea:	bd08      	pop	{r3, pc}
   d67ec:	0003021c 	.word	0x0003021c

000d67f0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d67f0:	b508      	push	{r3, lr}
   d67f2:	4b02      	ldr	r3, [pc, #8]	; (d67fc <newlib_impure_ptr_callback+0xc>)
   d67f4:	681b      	ldr	r3, [r3, #0]
   d67f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d67f8:	9301      	str	r3, [sp, #4]
   d67fa:	bd08      	pop	{r3, pc}
   d67fc:	0003021c 	.word	0x0003021c

000d6800 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6800:	b508      	push	{r3, lr}
   d6802:	4b02      	ldr	r3, [pc, #8]	; (d680c <localtime_r+0xc>)
   d6804:	681b      	ldr	r3, [r3, #0]
   d6806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6808:	9301      	str	r3, [sp, #4]
   d680a:	bd08      	pop	{r3, pc}
   d680c:	0003021c 	.word	0x0003021c

000d6810 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d6810:	428a      	cmp	r2, r1
{
   d6812:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d6814:	d007      	beq.n	d6826 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d6816:	9c02      	ldr	r4, [sp, #8]
   d6818:	1a40      	subs	r0, r0, r1
   d681a:	1ae4      	subs	r4, r4, r3
   d681c:	4360      	muls	r0, r4
   d681e:	1a52      	subs	r2, r2, r1
   d6820:	fb90 f0f2 	sdiv	r0, r0, r2
   d6824:	4418      	add	r0, r3
}
   d6826:	bd10      	pop	{r4, pc}

000d6828 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6828:	2100      	movs	r1, #0
   d682a:	f7ff be97 	b.w	d655c <system_delay_ms>

000d682e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d682e:	b510      	push	{r4, lr}
      if (_M_empty())
   d6830:	6883      	ldr	r3, [r0, #8]
   d6832:	4604      	mov	r4, r0
   d6834:	b90b      	cbnz	r3, d683a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6836:	f001 fcf4 	bl	d8222 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d683a:	68c3      	ldr	r3, [r0, #12]
   d683c:	4798      	blx	r3
      if (_M_manager)
   d683e:	68a3      	ldr	r3, [r4, #8]
   d6840:	b11b      	cbz	r3, d684a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6842:	2203      	movs	r2, #3
   d6844:	4621      	mov	r1, r4
   d6846:	4620      	mov	r0, r4
   d6848:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d684a:	4620      	mov	r0, r4
   d684c:	2110      	movs	r1, #16
}
   d684e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6852:	f001 bce0 	b.w	d8216 <_ZdlPvj>

000d6856 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6856:	b510      	push	{r4, lr}
   d6858:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d685a:	6800      	ldr	r0, [r0, #0]
   d685c:	b108      	cbz	r0, d6862 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d685e:	f7ff fca3 	bl	d61a8 <os_mutex_recursive_destroy>
    }
   d6862:	4620      	mov	r0, r4
   d6864:	bd10      	pop	{r4, pc}

000d6866 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6866:	680b      	ldr	r3, [r1, #0]
   d6868:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d686a:	b113      	cbz	r3, d6872 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d686c:	685a      	ldr	r2, [r3, #4]
   d686e:	3201      	adds	r2, #1
   d6870:	605a      	str	r2, [r3, #4]
      }
   d6872:	4770      	bx	lr

000d6874 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6874:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6876:	4c06      	ldr	r4, [pc, #24]	; (d6890 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6878:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d687a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d687c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d687e:	f7ff fc8b 	bl	d6198 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6882:	4620      	mov	r0, r4
   d6884:	4a03      	ldr	r2, [pc, #12]	; (d6894 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6886:	4904      	ldr	r1, [pc, #16]	; (d6898 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d688c:	f001 bcbe 	b.w	d820c <__aeabi_atexit>
   d6890:	2003e5bc 	.word	0x2003e5bc
   d6894:	2003e428 	.word	0x2003e428
   d6898:	000d6857 	.word	0x000d6857

000d689c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d689c:	2200      	movs	r2, #0
   d689e:	6840      	ldr	r0, [r0, #4]
   d68a0:	4611      	mov	r1, r2
   d68a2:	f7ff bf35 	b.w	d6710 <network_ready>

000d68a6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d68a6:	2200      	movs	r2, #0
   d68a8:	6840      	ldr	r0, [r0, #4]
   d68aa:	4611      	mov	r1, r2
   d68ac:	f7ff bf50 	b.w	d6750 <network_listening>

000d68b0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d68b0:	2200      	movs	r2, #0
   d68b2:	6840      	ldr	r0, [r0, #4]
   d68b4:	4611      	mov	r1, r2
   d68b6:	f7ff bf5b 	b.w	d6770 <network_get_listen_timeout>

000d68ba <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d68ba:	6840      	ldr	r0, [r0, #4]
   d68bc:	2200      	movs	r2, #0
   d68be:	f7ff bf4f 	b.w	d6760 <network_set_listen_timeout>

000d68c2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d68c2:	6840      	ldr	r0, [r0, #4]
   d68c4:	2200      	movs	r2, #0
   d68c6:	f081 0101 	eor.w	r1, r1, #1
   d68ca:	f7ff bf39 	b.w	d6740 <network_listen>

000d68ce <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d68ce:	2300      	movs	r3, #0
   d68d0:	6840      	ldr	r0, [r0, #4]
   d68d2:	461a      	mov	r2, r3
   d68d4:	4619      	mov	r1, r3
   d68d6:	f7ff bf2b 	b.w	d6730 <network_off>

000d68da <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d68da:	2300      	movs	r3, #0
   d68dc:	6840      	ldr	r0, [r0, #4]
   d68de:	461a      	mov	r2, r3
   d68e0:	4619      	mov	r1, r3
   d68e2:	f7ff bf1d 	b.w	d6720 <network_on>

000d68e6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d68e6:	2200      	movs	r2, #0
   d68e8:	6840      	ldr	r0, [r0, #4]
   d68ea:	4611      	mov	r1, r2
   d68ec:	f7ff bf00 	b.w	d66f0 <network_connecting>

000d68f0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68f0:	6840      	ldr	r0, [r0, #4]
   d68f2:	2200      	movs	r2, #0
   d68f4:	2102      	movs	r1, #2
   d68f6:	f7ff bf03 	b.w	d6700 <network_disconnect>

000d68fa <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d68fa:	2300      	movs	r3, #0
   d68fc:	6840      	ldr	r0, [r0, #4]
   d68fe:	461a      	mov	r2, r3
   d6900:	f7ff beee 	b.w	d66e0 <network_connect>

000d6904 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6904:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d6906:	4b1b      	ldr	r3, [pc, #108]	; (d6974 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6908:	6003      	str	r3, [r0, #0]
   d690a:	2500      	movs	r5, #0
   d690c:	460f      	mov	r7, r1
   d690e:	3328      	adds	r3, #40	; 0x28
   d6910:	2618      	movs	r6, #24
   d6912:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6916:	b089      	sub	sp, #36	; 0x24
   d6918:	6043      	str	r3, [r0, #4]
   d691a:	4632      	mov	r2, r6
   d691c:	4629      	mov	r1, r5
   d691e:	4604      	mov	r4, r0
   d6920:	3010      	adds	r0, #16
   d6922:	f002 f9f5 	bl	d8d10 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6926:	6878      	ldr	r0, [r7, #4]
   d6928:	462a      	mov	r2, r5
   d692a:	4629      	mov	r1, r5
   d692c:	f7ff fef0 	bl	d6710 <network_ready>
   d6930:	b918      	cbnz	r0, d693a <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d6932:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d6934:	4620      	mov	r0, r4
   d6936:	b009      	add	sp, #36	; 0x24
   d6938:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d693a:	4629      	mov	r1, r5
   d693c:	4632      	mov	r2, r6
   d693e:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d6940:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d6944:	f002 f9e4 	bl	d8d10 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6948:	a902      	add	r1, sp, #8
   d694a:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d694c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6950:	f7ff fbe2 	bl	d6118 <cellular_signal>
   d6954:	b110      	cbz	r0, d695c <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d6956:	2301      	movs	r3, #1
   d6958:	60a3      	str	r3, [r4, #8]
            return sig;
   d695a:	e7eb      	b.n	d6934 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d695c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d695e:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d6960:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6962:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6964:	b90b      	cbnz	r3, d696a <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d6966:	2302      	movs	r3, #2
   d6968:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d696a:	a902      	add	r1, sp, #8
   d696c:	4620      	mov	r0, r4
   d696e:	f000 f8ae 	bl	d6ace <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d6972:	e7df      	b.n	d6934 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d6974:	000db394 	.word	0x000db394

000d6978 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6978:	4b08      	ldr	r3, [pc, #32]	; (d699c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d697a:	b510      	push	{r4, lr}
   d697c:	2428      	movs	r4, #40	; 0x28
   d697e:	4622      	mov	r2, r4
   d6980:	4618      	mov	r0, r3
   d6982:	2100      	movs	r1, #0
   d6984:	f002 f9c4 	bl	d8d10 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6988:	4b05      	ldr	r3, [pc, #20]	; (d69a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d698a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d698c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6990:	6042      	str	r2, [r0, #4]
   d6992:	2204      	movs	r2, #4
   d6994:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6996:	4a03      	ldr	r2, [pc, #12]	; (d69a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6998:	601a      	str	r2, [r3, #0]
   d699a:	bd10      	pop	{r4, pc}
   d699c:	2003e5c8 	.word	0x2003e5c8
   d69a0:	2003e5c0 	.word	0x2003e5c0
   d69a4:	000db360 	.word	0x000db360

000d69a8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d69a8:	4770      	bx	lr

000d69aa <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d69aa:	7d00      	ldrb	r0, [r0, #20]
   d69ac:	4770      	bx	lr

000d69ae <_ZN14CellularSignalD0Ev>:
   d69ae:	b510      	push	{r4, lr}
   d69b0:	2128      	movs	r1, #40	; 0x28
   d69b2:	4604      	mov	r4, r0
   d69b4:	f001 fc2f 	bl	d8216 <_ZdlPvj>
   d69b8:	4620      	mov	r0, r4
   d69ba:	bd10      	pop	{r4, pc}

000d69bc <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d69bc:	7d03      	ldrb	r3, [r0, #20]
   d69be:	b17b      	cbz	r3, d69e0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d69c0:	69c3      	ldr	r3, [r0, #28]
   d69c2:	2b00      	cmp	r3, #0
   d69c4:	db0c      	blt.n	d69e0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d69c6:	ee07 3a90 	vmov	s15, r3
   d69ca:	ed9f 7a07 	vldr	s14, [pc, #28]	; d69e8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d69ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d69d2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d69d6:	eddf 7a05 	vldr	s15, [pc, #20]	; d69ec <_ZNK14CellularSignal11getStrengthEv+0x30>
   d69da:	ee20 0a27 	vmul.f32	s0, s0, s15
   d69de:	4770      	bx	lr
    }

    return -1.0f;
   d69e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d69e4:	4770      	bx	lr
   d69e6:	bf00      	nop
   d69e8:	477fff00 	.word	0x477fff00
   d69ec:	42c80000 	.word	0x42c80000

000d69f0 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d69f0:	7d03      	ldrb	r3, [r0, #20]
   d69f2:	b163      	cbz	r3, d6a0e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d69f4:	6983      	ldr	r3, [r0, #24]
   d69f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d69fa:	d008      	beq.n	d6a0e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d69fc:	ee07 3a90 	vmov	s15, r3
   d6a00:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6a14 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d6a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a08:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6a0c:	4770      	bx	lr
    }

    return 0.0f;
   d6a0e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d6a18 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d6a12:	4770      	bx	lr
   d6a14:	42c80000 	.word	0x42c80000
   d6a18:	00000000 	.word	0x00000000

000d6a1c <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6a1c:	7d03      	ldrb	r3, [r0, #20]
   d6a1e:	b17b      	cbz	r3, d6a40 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6a20:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d6a22:	2b00      	cmp	r3, #0
   d6a24:	db0c      	blt.n	d6a40 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d6a26:	ee07 3a90 	vmov	s15, r3
   d6a2a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d6a48 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a32:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6a36:	eddf 7a05 	vldr	s15, [pc, #20]	; d6a4c <_ZNK14CellularSignal10getQualityEv+0x30>
   d6a3a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6a3e:	4770      	bx	lr
    }

    return -1.0f;
   d6a40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6a44:	4770      	bx	lr
   d6a46:	bf00      	nop
   d6a48:	477fff00 	.word	0x477fff00
   d6a4c:	42c80000 	.word	0x42c80000

000d6a50 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6a50:	7d03      	ldrb	r3, [r0, #20]
   d6a52:	b163      	cbz	r3, d6a6e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d6a54:	6a03      	ldr	r3, [r0, #32]
   d6a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6a5a:	d008      	beq.n	d6a6e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d6a5c:	ee07 3a90 	vmov	s15, r3
   d6a60:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6a74 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a68:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6a6c:	4770      	bx	lr
    }

    return 0.0f;
   d6a6e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d6a78 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d6a72:	4770      	bx	lr
   d6a74:	42c80000 	.word	0x42c80000
   d6a78:	00000000 	.word	0x00000000

000d6a7c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d6a7c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d6a7e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d6a80:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d6a82:	da0a      	bge.n	d6a9a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d6a84:	212d      	movs	r1, #45	; 0x2d
   d6a86:	f000 fdf8 	bl	d767a <_ZN5Print5printEc>
            val = -n;
   d6a8a:	4261      	negs	r1, r4
            t = print('-');
   d6a8c:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6a8e:	220a      	movs	r2, #10
   d6a90:	4630      	mov	r0, r6
   d6a92:	f000 fe0b 	bl	d76ac <_ZN5Print11printNumberEmh>
    }
}
   d6a96:	4428      	add	r0, r5
   d6a98:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d6a9a:	4621      	mov	r1, r4
        size_t t = 0;
   d6a9c:	2500      	movs	r5, #0
   d6a9e:	e7f6      	b.n	d6a8e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d6aa0 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d6aa0:	b570      	push	{r4, r5, r6, lr}
   d6aa2:	460c      	mov	r4, r1
   d6aa4:	4605      	mov	r5, r0
   d6aa6:	6881      	ldr	r1, [r0, #8]
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	f7ff ffe7 	bl	d6a7c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d6aae:	212c      	movs	r1, #44	; 0x2c
   d6ab0:	4606      	mov	r6, r0
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	f000 fde1 	bl	d767a <_ZN5Print5printEc>
   d6ab8:	68e9      	ldr	r1, [r5, #12]
   d6aba:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d6abc:	4620      	mov	r0, r4
   d6abe:	f7ff ffdd 	bl	d6a7c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d6ac2:	4430      	add	r0, r6
   d6ac4:	bd70      	pop	{r4, r5, r6, pc}

000d6ac6 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d6ac6:	f1a0 0004 	sub.w	r0, r0, #4
   d6aca:	f7ff bfe9 	b.w	d6aa0 <_ZNK14CellularSignal7printToER5Print>

000d6ace <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d6ace:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d6ad0:	460d      	mov	r5, r1
   d6ad2:	f100 0410 	add.w	r4, r0, #16
   d6ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ada:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6ade:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d6ae2:	2001      	movs	r0, #1
   d6ae4:	bd30      	pop	{r4, r5, pc}

000d6ae6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6ae6:	4770      	bx	lr

000d6ae8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6ae8:	2000      	movs	r0, #0
   d6aea:	4770      	bx	lr

000d6aec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6aec:	b510      	push	{r4, lr}
   d6aee:	2110      	movs	r1, #16
   d6af0:	4604      	mov	r4, r0
   d6af2:	f001 fb90 	bl	d8216 <_ZdlPvj>
   d6af6:	4620      	mov	r0, r4
   d6af8:	bd10      	pop	{r4, pc}

000d6afa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6afa:	b508      	push	{r3, lr}
      { delete this; }
   d6afc:	f7ff fff6 	bl	d6aec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6b00:	bd08      	pop	{r3, pc}

000d6b02 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6b02:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6b04:	2200      	movs	r2, #0
   d6b06:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6b0a:	6002      	str	r2, [r0, #0]
   d6b0c:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6b0e:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b10:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6b12:	680c      	ldr	r4, [r1, #0]
   d6b14:	8085      	strh	r5, [r0, #4]
   d6b16:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b18:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6b1a:	bd30      	pop	{r4, r5, pc}

000d6b1c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6b1c:	b510      	push	{r4, lr}
   d6b1e:	4604      	mov	r4, r0
    free((void*)msg_);
   d6b20:	6800      	ldr	r0, [r0, #0]
   d6b22:	f7ff fe35 	bl	d6790 <free>
}
   d6b26:	4620      	mov	r0, r4
   d6b28:	bd10      	pop	{r4, pc}

000d6b2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6b2a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6b2c:	68c4      	ldr	r4, [r0, #12]
   d6b2e:	b1f4      	cbz	r4, d6b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6b30:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6b32:	2b02      	cmp	r3, #2
   d6b34:	d103      	bne.n	d6b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6b36:	f104 000c 	add.w	r0, r4, #12
   d6b3a:	f7ff ffef 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6b3e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6b40:	b135      	cbz	r5, d6b50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6b42:	4628      	mov	r0, r5
   d6b44:	f7fd fb2e 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d6b48:	2110      	movs	r1, #16
   d6b4a:	4628      	mov	r0, r5
   d6b4c:	f001 fb63 	bl	d8216 <_ZdlPvj>
   d6b50:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6b52:	b135      	cbz	r5, d6b62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6b54:	4628      	mov	r0, r5
   d6b56:	f7fd fb25 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d6b5a:	2110      	movs	r1, #16
   d6b5c:	4628      	mov	r0, r5
   d6b5e:	f001 fb5a 	bl	d8216 <_ZdlPvj>
   d6b62:	4620      	mov	r0, r4
   d6b64:	2114      	movs	r1, #20
   d6b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6b6a:	f001 bb54 	b.w	d8216 <_ZdlPvj>
   d6b6e:	bd38      	pop	{r3, r4, r5, pc}

000d6b70 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6b70:	b510      	push	{r4, lr}
   d6b72:	b088      	sub	sp, #32
   d6b74:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6b76:	4668      	mov	r0, sp
   d6b78:	f000 fe1f 	bl	d77ba <_ZN6StringC1EPKc>
    return (*fn)(p);
   d6b7c:	4669      	mov	r1, sp
   d6b7e:	a804      	add	r0, sp, #16
   d6b80:	f000 fe3e 	bl	d7800 <_ZN6StringC1ERKS_>
   d6b84:	a804      	add	r0, sp, #16
   d6b86:	47a0      	blx	r4
   d6b88:	4604      	mov	r4, r0
   d6b8a:	a804      	add	r0, sp, #16
   d6b8c:	f000 fdca 	bl	d7724 <_ZN6StringD1Ev>
    String p(param);
   d6b90:	4668      	mov	r0, sp
   d6b92:	f000 fdc7 	bl	d7724 <_ZN6StringD1Ev>
}
   d6b96:	4620      	mov	r0, r4
   d6b98:	b008      	add	sp, #32
   d6b9a:	bd10      	pop	{r4, pc}

000d6b9c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6b9e:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d6ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d6ba4:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d6ba6:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6ba8:	461a      	mov	r2, r3
   d6baa:	4669      	mov	r1, sp
   d6bac:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d6bae:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d6bb2:	f8ad 4000 	strh.w	r4, [sp]
   d6bb6:	f7ff fd3b 	bl	d6630 <spark_function>
}
   d6bba:	b004      	add	sp, #16
   d6bbc:	bd10      	pop	{r4, pc}

000d6bbe <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d6bbe:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d6bc0:	2308      	movs	r3, #8
   d6bc2:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d6bc6:	6803      	ldr	r3, [r0, #0]
   d6bc8:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d6bcc:	7a03      	ldrb	r3, [r0, #8]
   d6bce:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d6bd2:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d6bd4:	6843      	ldr	r3, [r0, #4]
   d6bd6:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d6bd8:	4668      	mov	r0, sp
   d6bda:	f7ff fd79 	bl	d66d0 <spark_cloud_disconnect>
}
   d6bde:	b003      	add	sp, #12
   d6be0:	f85d fb04 	ldr.w	pc, [sp], #4

000d6be4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6be6:	460e      	mov	r6, r1
   d6be8:	4604      	mov	r4, r0
   d6bea:	f856 3b04 	ldr.w	r3, [r6], #4
   d6bee:	9300      	str	r3, [sp, #0]
   d6bf0:	460d      	mov	r5, r1
   d6bf2:	a801      	add	r0, sp, #4
   d6bf4:	4631      	mov	r1, r6
   d6bf6:	f7ff fe36 	bl	d6866 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6bfa:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6bfc:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6bfe:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c00:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6c02:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6c04:	2300      	movs	r3, #0
   d6c06:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c08:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6c0a:	f7fd fe71 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c0e:	4630      	mov	r0, r6
   d6c10:	f7fd fe6e 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6c14:	4628      	mov	r0, r5
   d6c16:	2108      	movs	r1, #8
   d6c18:	f001 fafd 	bl	d8216 <_ZdlPvj>
        return p;
    }
   d6c1c:	4620      	mov	r0, r4
   d6c1e:	b002      	add	sp, #8
   d6c20:	bd70      	pop	{r4, r5, r6, pc}

000d6c22 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6c22:	b513      	push	{r0, r1, r4, lr}
   d6c24:	460b      	mov	r3, r1
   d6c26:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c28:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6c2c:	466c      	mov	r4, sp
   d6c2e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6c32:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6c36:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6c3a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6c3e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6c42:	b002      	add	sp, #8
   d6c44:	bd10      	pop	{r4, pc}

000d6c46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6c46:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6c48:	b510      	push	{r4, lr}
      if (_M_empty())
   d6c4a:	b90a      	cbnz	r2, d6c50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6c4c:	f001 fae9 	bl	d8222 <_ZSt25__throw_bad_function_callv>
    }
   d6c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c54:	68c3      	ldr	r3, [r0, #12]
   d6c56:	4718      	bx	r3

000d6c58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6c58:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6c5a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6c5c:	f100 0110 	add.w	r1, r0, #16
   d6c60:	f7ff fff1 	bl	d6c46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6c64:	bd08      	pop	{r3, pc}

000d6c66 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6c66:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6c68:	b510      	push	{r4, lr}
      if (_M_empty())
   d6c6a:	b90a      	cbnz	r2, d6c70 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6c6c:	f001 fad9 	bl	d8222 <_ZSt25__throw_bad_function_callv>
    }
   d6c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c74:	68c3      	ldr	r3, [r0, #12]
   d6c76:	4718      	bx	r3

000d6c78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6c78:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6c7a:	6800      	ldr	r0, [r0, #0]
   d6c7c:	f100 0110 	add.w	r1, r0, #16
   d6c80:	f7ff fff1 	bl	d6c66 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6c84:	bd08      	pop	{r3, pc}
	...

000d6c88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6c88:	b538      	push	{r3, r4, r5, lr}
   d6c8a:	2300      	movs	r3, #0
   d6c8c:	4604      	mov	r4, r0
   d6c8e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6c90:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6c92:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6c94:	f7fd f9ff 	bl	d4096 <_Znwj>
   d6c98:	b128      	cbz	r0, d6ca6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6c9a:	2301      	movs	r3, #1
   d6c9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6ca0:	4b02      	ldr	r3, [pc, #8]	; (d6cac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6ca2:	6003      	str	r3, [r0, #0]
   d6ca4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6ca6:	6020      	str	r0, [r4, #0]
	}
   d6ca8:	4620      	mov	r0, r4
   d6caa:	bd38      	pop	{r3, r4, r5, pc}
   d6cac:	000db3c8 	.word	0x000db3c8

000d6cb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6cb0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6cb2:	2300      	movs	r3, #0
   d6cb4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6cb6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6cb8:	4604      	mov	r4, r0
   d6cba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6cbc:	b12b      	cbz	r3, d6cca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6cbe:	2202      	movs	r2, #2
   d6cc0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6cc2:	68eb      	ldr	r3, [r5, #12]
   d6cc4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6cc6:	68ab      	ldr	r3, [r5, #8]
   d6cc8:	60a3      	str	r3, [r4, #8]
    }
   d6cca:	4620      	mov	r0, r4
   d6ccc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6cd2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6cd4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6cd6:	4668      	mov	r0, sp
   d6cd8:	f7ff ff13 	bl	d6b02 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6cdc:	f04f 0302 	mov.w	r3, #2
   d6ce0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6ce4:	2a00      	cmp	r2, #0
   d6ce6:	d103      	bne.n	d6cf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6ce8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6cec:	2900      	cmp	r1, #0
   d6cee:	d1f7      	bne.n	d6ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6cf0:	d125      	bne.n	d6d3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6cf2:	f104 050c 	add.w	r5, r4, #12
   d6cf6:	4669      	mov	r1, sp
   d6cf8:	4628      	mov	r0, r5
   d6cfa:	f7ff ff02 	bl	d6b02 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6cfe:	f3bf 8f5b 	dmb	ish
   d6d02:	2301      	movs	r3, #1
   d6d04:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6d06:	2000      	movs	r0, #0
   d6d08:	f104 0308 	add.w	r3, r4, #8
   d6d0c:	f3bf 8f5b 	dmb	ish
   d6d10:	e853 6f00 	ldrex	r6, [r3]
   d6d14:	e843 0200 	strex	r2, r0, [r3]
   d6d18:	2a00      	cmp	r2, #0
   d6d1a:	d1f9      	bne.n	d6d10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6d1c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6d20:	b16e      	cbz	r6, d6d3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6d22:	f7ff fc33 	bl	d658c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6d26:	b178      	cbz	r0, d6d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d28:	4629      	mov	r1, r5
   d6d2a:	4630      	mov	r0, r6
   d6d2c:	f7ff ff8b 	bl	d6c46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6d30:	4630      	mov	r0, r6
   d6d32:	f7fd fa37 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6d36:	2110      	movs	r1, #16
   d6d38:	4630      	mov	r0, r6
   d6d3a:	f001 fa6c 	bl	d8216 <_ZdlPvj>
        p_->setError(std::move(error));
   d6d3e:	4668      	mov	r0, sp
   d6d40:	f7ff feec 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
    }
   d6d44:	b009      	add	sp, #36	; 0x24
   d6d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d48:	4631      	mov	r1, r6
   d6d4a:	a802      	add	r0, sp, #8
   d6d4c:	f7ff ffb0 	bl	d6cb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6d50:	68e0      	ldr	r0, [r4, #12]
   d6d52:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6d56:	b108      	cbz	r0, d6d5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6d58:	f002 f818 	bl	d8d8c <strdup>
        type_(type) {
   d6d5c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d5e:	2010      	movs	r0, #16
   d6d60:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6d64:	f7fd f997 	bl	d4096 <_Znwj>
   d6d68:	4605      	mov	r5, r0
   d6d6a:	b1e8      	cbz	r0, d6da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6d6c:	2700      	movs	r7, #0
   d6d6e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d70:	2018      	movs	r0, #24
   d6d72:	f7fd f990 	bl	d4096 <_Znwj>
   d6d76:	4604      	mov	r4, r0
   d6d78:	b188      	cbz	r0, d6d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6d7a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6d7c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6d7e:	a802      	add	r0, sp, #8
   d6d80:	f7ff ff4f 	bl	d6c22 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d84:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6d86:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d88:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6d8c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6d8e:	a906      	add	r1, sp, #24
   d6d90:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d92:	60e3      	str	r3, [r4, #12]
   d6d94:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6d98:	9205      	str	r2, [sp, #20]
   d6d9a:	f7ff feb2 	bl	d6b02 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6d9e:	4b08      	ldr	r3, [pc, #32]	; (d6dc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6da0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6da2:	4b08      	ldr	r3, [pc, #32]	; (d6dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6da4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6da6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6da8:	a806      	add	r0, sp, #24
   d6daa:	f7ff feb7 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6dae:	a802      	add	r0, sp, #8
   d6db0:	f7fd f9f8 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6db4:	2200      	movs	r2, #0
   d6db6:	4629      	mov	r1, r5
   d6db8:	4803      	ldr	r0, [pc, #12]	; (d6dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6dba:	f7ff fbef 	bl	d659c <application_thread_invoke>
   d6dbe:	e7b7      	b.n	d6d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6dc0:	000d6c59 	.word	0x000d6c59
   d6dc4:	000d6ef1 	.word	0x000d6ef1
   d6dc8:	000d682f 	.word	0x000d682f

000d6dcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6dd0:	b08a      	sub	sp, #40	; 0x28
   d6dd2:	4605      	mov	r5, r0
   d6dd4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6dd8:	460c      	mov	r4, r1
   d6dda:	4617      	mov	r7, r2
   d6ddc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6dde:	f7ff fc3f 	bl	d6660 <spark_cloud_flag_connected>
   d6de2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6de4:	4682      	mov	sl, r0
   d6de6:	bb38      	cbnz	r0, d6e38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6de8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6dec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6dee:	a905      	add	r1, sp, #20
   d6df0:	4630      	mov	r0, r6
   d6df2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6df6:	f7ff fe84 	bl	d6b02 <_ZN8particle5ErrorC1EOS0_>
   d6dfa:	2014      	movs	r0, #20
   d6dfc:	f7fd f94b 	bl	d4096 <_Znwj>
   d6e00:	4604      	mov	r4, r0
   d6e02:	b148      	cbz	r0, d6e18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6e04:	2302      	movs	r3, #2
   d6e06:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e08:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e0a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e0e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6e10:	4631      	mov	r1, r6
   d6e12:	300c      	adds	r0, #12
   d6e14:	f7ff fe75 	bl	d6b02 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e18:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6e1a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e1c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6e20:	f7ff ff32 	bl	d6c88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e24:	4630      	mov	r0, r6
   d6e26:	f7ff fe79 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6e2a:	a805      	add	r0, sp, #20
   d6e2c:	f7ff fe76 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
}
   d6e30:	4628      	mov	r0, r5
   d6e32:	b00a      	add	sp, #40	; 0x28
   d6e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6e38:	230c      	movs	r3, #12
   d6e3a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6e3e:	2014      	movs	r0, #20
   d6e40:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6e44:	9307      	str	r3, [sp, #28]
   d6e46:	f7fd f926 	bl	d4096 <_Znwj>
   d6e4a:	4601      	mov	r1, r0
   d6e4c:	b128      	cbz	r0, d6e5a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e4e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6e52:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e56:	f880 a001 	strb.w	sl, [r0, #1]
   d6e5a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e5c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6e5e:	f7ff ff13 	bl	d6c88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6e62:	4b22      	ldr	r3, [pc, #136]	; (d6eec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6e64:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6e66:	2008      	movs	r0, #8
   d6e68:	f7fd f915 	bl	d4096 <_Znwj>
   d6e6c:	4682      	mov	sl, r0
   d6e6e:	b128      	cbz	r0, d6e7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e70:	9b03      	ldr	r3, [sp, #12]
   d6e72:	f840 3b04 	str.w	r3, [r0], #4
   d6e76:	a904      	add	r1, sp, #16
   d6e78:	f7ff fcf5 	bl	d6866 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6e7c:	9600      	str	r6, [sp, #0]
   d6e7e:	fa5f f389 	uxtb.w	r3, r9
   d6e82:	4642      	mov	r2, r8
   d6e84:	4639      	mov	r1, r7
   d6e86:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6e88:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6e8c:	f7ff fbf8 	bl	d6680 <spark_send_event>
   d6e90:	b9b8      	cbnz	r0, d6ec2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6e92:	9b03      	ldr	r3, [sp, #12]
   d6e94:	785b      	ldrb	r3, [r3, #1]
   d6e96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6e9a:	b993      	cbnz	r3, d6ec2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6e9c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6ea0:	a905      	add	r1, sp, #20
   d6ea2:	a803      	add	r0, sp, #12
   d6ea4:	9205      	str	r2, [sp, #20]
   d6ea6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6eaa:	f7ff ff11 	bl	d6cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6eae:	a805      	add	r0, sp, #20
   d6eb0:	f7ff fe34 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6eb4:	a805      	add	r0, sp, #20
   d6eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6eb8:	f7ff fe94 	bl	d6be4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6ebc:	a806      	add	r0, sp, #24
   d6ebe:	f7fd fd17 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ec2:	9b03      	ldr	r3, [sp, #12]
   d6ec4:	9305      	str	r3, [sp, #20]
   d6ec6:	a904      	add	r1, sp, #16
   d6ec8:	a806      	add	r0, sp, #24
   d6eca:	f7ff fccc 	bl	d6866 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6ece:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6ed0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6ed2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6ed4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6ed6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6ed8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6eda:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6edc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6ede:	f7fd fd07 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ee2:	a804      	add	r0, sp, #16
   d6ee4:	f7fd fd04 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6ee8:	e7a2      	b.n	d6e30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6eea:	bf00      	nop
   d6eec:	000d6fb5 	.word	0x000d6fb5

000d6ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6ef0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ef4:	4605      	mov	r5, r0
	  switch (__op)
   d6ef6:	d007      	beq.n	d6f08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6ef8:	2a03      	cmp	r2, #3
   d6efa:	d018      	beq.n	d6f2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6efc:	2a01      	cmp	r2, #1
   d6efe:	d101      	bne.n	d6f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6f00:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f02:	6003      	str	r3, [r0, #0]
	}
   d6f04:	2000      	movs	r0, #0
   d6f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f08:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6f0a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f0c:	f7fd f8c3 	bl	d4096 <_Znwj>
   d6f10:	4604      	mov	r4, r0
   d6f12:	b150      	cbz	r0, d6f2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6f14:	4631      	mov	r1, r6
   d6f16:	f7ff fecb 	bl	d6cb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6f1a:	6930      	ldr	r0, [r6, #16]
   d6f1c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6f20:	b108      	cbz	r0, d6f26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6f22:	f001 ff33 	bl	d8d8c <strdup>
        type_(type) {
   d6f26:	6120      	str	r0, [r4, #16]
   d6f28:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6f2a:	602c      	str	r4, [r5, #0]
	}
   d6f2c:	e7ea      	b.n	d6f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6f2e:	6804      	ldr	r4, [r0, #0]
   d6f30:	2c00      	cmp	r4, #0
   d6f32:	d0e7      	beq.n	d6f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6f34:	f104 0010 	add.w	r0, r4, #16
   d6f38:	f7ff fdf0 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	f7fd f931 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6f42:	2118      	movs	r1, #24
   d6f44:	4620      	mov	r0, r4
   d6f46:	f001 f966 	bl	d8216 <_ZdlPvj>
   d6f4a:	e7db      	b.n	d6f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6f4c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6f4c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6f4e:	2300      	movs	r3, #0
   d6f50:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6f52:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6f54:	4604      	mov	r4, r0
   d6f56:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6f58:	b12b      	cbz	r3, d6f66 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6f5a:	2202      	movs	r2, #2
   d6f5c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6f5e:	68eb      	ldr	r3, [r5, #12]
   d6f60:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6f62:	68ab      	ldr	r3, [r5, #8]
   d6f64:	60a3      	str	r3, [r4, #8]
    }
   d6f66:	4620      	mov	r0, r4
   d6f68:	bd38      	pop	{r3, r4, r5, pc}

000d6f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6f6a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f6c:	b570      	push	{r4, r5, r6, lr}
   d6f6e:	4604      	mov	r4, r0
	  switch (__op)
   d6f70:	d007      	beq.n	d6f82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6f72:	2a03      	cmp	r2, #3
   d6f74:	d012      	beq.n	d6f9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6f76:	2a01      	cmp	r2, #1
   d6f78:	d101      	bne.n	d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6f7a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f7c:	6003      	str	r3, [r0, #0]
	}
   d6f7e:	2000      	movs	r0, #0
   d6f80:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f82:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6f84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f86:	f7fd f886 	bl	d4096 <_Znwj>
   d6f8a:	4605      	mov	r5, r0
   d6f8c:	b120      	cbz	r0, d6f98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6f8e:	4631      	mov	r1, r6
   d6f90:	f7ff ffdc 	bl	d6f4c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6f94:	7c33      	ldrb	r3, [r6, #16]
   d6f96:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6f98:	6025      	str	r5, [r4, #0]
	}
   d6f9a:	e7f0      	b.n	d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6f9c:	6804      	ldr	r4, [r0, #0]
   d6f9e:	2c00      	cmp	r4, #0
   d6fa0:	d0ed      	beq.n	d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	f7fd f8fe 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6fa8:	2114      	movs	r1, #20
   d6faa:	4620      	mov	r0, r4
   d6fac:	f001 f933 	bl	d8216 <_ZdlPvj>
   d6fb0:	e7e5      	b.n	d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6fb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6fb6:	b089      	sub	sp, #36	; 0x24
   d6fb8:	4604      	mov	r4, r0
   d6fba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6fbc:	a801      	add	r0, sp, #4
   d6fbe:	4611      	mov	r1, r2
   d6fc0:	f7ff fe10 	bl	d6be4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6fc4:	b1a4      	cbz	r4, d6ff0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6fc6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6fc8:	b11d      	cbz	r5, d6fd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6fca:	4628      	mov	r0, r5
   d6fcc:	f001 fede 	bl	d8d8c <strdup>
   d6fd0:	4605      	mov	r5, r0
   d6fd2:	a801      	add	r0, sp, #4
   d6fd4:	a903      	add	r1, sp, #12
        type_(type) {
   d6fd6:	9503      	str	r5, [sp, #12]
   d6fd8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6fdc:	f7ff fe78 	bl	d6cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6fe0:	a803      	add	r0, sp, #12
   d6fe2:	f7ff fd9b 	bl	d6b1c <_ZN8particle5ErrorD1Ev>
   d6fe6:	a802      	add	r0, sp, #8
   d6fe8:	f7fd fc82 	bl	d48f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6fec:	b009      	add	sp, #36	; 0x24
   d6fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6ff0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6ff2:	2301      	movs	r3, #1
   d6ff4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6ff8:	2a00      	cmp	r2, #0
   d6ffa:	d103      	bne.n	d7004 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6ffc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7000:	2900      	cmp	r1, #0
   d7002:	d1f7      	bne.n	d6ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7004:	d1ef      	bne.n	d6fe6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7006:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7008:	f3bf 8f5b 	dmb	ish
   d700c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d700e:	1d2b      	adds	r3, r5, #4
   d7010:	f3bf 8f5b 	dmb	ish
   d7014:	e853 6f00 	ldrex	r6, [r3]
   d7018:	e843 4200 	strex	r2, r4, [r3]
   d701c:	2a00      	cmp	r2, #0
   d701e:	d1f9      	bne.n	d7014 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7020:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7024:	2e00      	cmp	r6, #0
   d7026:	d0de      	beq.n	d6fe6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7028:	4620      	mov	r0, r4
   d702a:	f7ff faaf 	bl	d658c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d702e:	4607      	mov	r7, r0
   d7030:	b160      	cbz	r0, d704c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7032:	f105 010c 	add.w	r1, r5, #12
   d7036:	4630      	mov	r0, r6
   d7038:	f7ff fe15 	bl	d6c66 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d703c:	4630      	mov	r0, r6
   d703e:	f7fd f8b1 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7042:	2110      	movs	r1, #16
   d7044:	4630      	mov	r0, r6
   d7046:	f001 f8e6 	bl	d8216 <_ZdlPvj>
   d704a:	e7cc      	b.n	d6fe6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d704c:	4631      	mov	r1, r6
   d704e:	a803      	add	r0, sp, #12
   d7050:	f7ff ff7c 	bl	d6f4c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7054:	7b2b      	ldrb	r3, [r5, #12]
   d7056:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d705a:	2010      	movs	r0, #16
   d705c:	f7fd f81b 	bl	d4096 <_Znwj>
   d7060:	4605      	mov	r5, r0
   d7062:	b1d0      	cbz	r0, d709a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7064:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7066:	2014      	movs	r0, #20
   d7068:	f7fd f815 	bl	d4096 <_Znwj>
   d706c:	4604      	mov	r4, r0
   d706e:	b178      	cbz	r0, d7090 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d7070:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7072:	4601      	mov	r1, r0
   d7074:	a803      	add	r0, sp, #12
   d7076:	f7ff fdd4 	bl	d6c22 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d707a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d707c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d707e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7080:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7082:	9205      	str	r2, [sp, #20]
   d7084:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7086:	60e3      	str	r3, [r4, #12]
   d7088:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d708c:	9206      	str	r2, [sp, #24]
   d708e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7090:	4b06      	ldr	r3, [pc, #24]	; (d70ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7092:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7094:	4b06      	ldr	r3, [pc, #24]	; (d70b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7096:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7098:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d709a:	a803      	add	r0, sp, #12
   d709c:	f7fd f882 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d70a0:	2200      	movs	r2, #0
   d70a2:	4629      	mov	r1, r5
   d70a4:	4803      	ldr	r0, [pc, #12]	; (d70b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d70a6:	f7ff fa79 	bl	d659c <application_thread_invoke>
   d70aa:	e7c7      	b.n	d703c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d70ac:	000d6c79 	.word	0x000d6c79
   d70b0:	000d6f6b 	.word	0x000d6f6b
   d70b4:	000d682f 	.word	0x000d682f

000d70b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70b8:	2200      	movs	r2, #0
   d70ba:	6840      	ldr	r0, [r0, #4]
   d70bc:	4611      	mov	r1, r2
   d70be:	f7ff bb47 	b.w	d6750 <network_listening>

000d70c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d70c2:	2200      	movs	r2, #0
   d70c4:	6840      	ldr	r0, [r0, #4]
   d70c6:	4611      	mov	r1, r2
   d70c8:	f7ff bb52 	b.w	d6770 <network_get_listen_timeout>

000d70cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d70cc:	6840      	ldr	r0, [r0, #4]
   d70ce:	2200      	movs	r2, #0
   d70d0:	f7ff bb46 	b.w	d6760 <network_set_listen_timeout>

000d70d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d70d4:	6840      	ldr	r0, [r0, #4]
   d70d6:	2200      	movs	r2, #0
   d70d8:	f081 0101 	eor.w	r1, r1, #1
   d70dc:	f7ff bb30 	b.w	d6740 <network_listen>

000d70e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d70e0:	2300      	movs	r3, #0
   d70e2:	6840      	ldr	r0, [r0, #4]
   d70e4:	461a      	mov	r2, r3
   d70e6:	4619      	mov	r1, r3
   d70e8:	f7ff bb22 	b.w	d6730 <network_off>

000d70ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d70ec:	2300      	movs	r3, #0
   d70ee:	6840      	ldr	r0, [r0, #4]
   d70f0:	461a      	mov	r2, r3
   d70f2:	4619      	mov	r1, r3
   d70f4:	f7ff bb14 	b.w	d6720 <network_on>

000d70f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d70f8:	2200      	movs	r2, #0
   d70fa:	6840      	ldr	r0, [r0, #4]
   d70fc:	4611      	mov	r1, r2
   d70fe:	f7ff bb07 	b.w	d6710 <network_ready>

000d7102 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7102:	2200      	movs	r2, #0
   d7104:	6840      	ldr	r0, [r0, #4]
   d7106:	4611      	mov	r1, r2
   d7108:	f7ff baf2 	b.w	d66f0 <network_connecting>

000d710c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d710c:	6840      	ldr	r0, [r0, #4]
   d710e:	2200      	movs	r2, #0
   d7110:	2102      	movs	r1, #2
   d7112:	f7ff baf5 	b.w	d6700 <network_disconnect>

000d7116 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7116:	2300      	movs	r3, #0
   d7118:	6840      	ldr	r0, [r0, #4]
   d711a:	461a      	mov	r2, r3
   d711c:	f7ff bae0 	b.w	d66e0 <network_connect>

000d7120 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7120:	4b02      	ldr	r3, [pc, #8]	; (d712c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7122:	2203      	movs	r2, #3
   d7124:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7126:	4a02      	ldr	r2, [pc, #8]	; (d7130 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7128:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d712a:	4770      	bx	lr
   d712c:	2003e5f0 	.word	0x2003e5f0
   d7130:	000db3e4 	.word	0x000db3e4

000d7134 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7134:	4770      	bx	lr

000d7136 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7138:	4606      	mov	r6, r0
   d713a:	4615      	mov	r5, r2
   d713c:	460c      	mov	r4, r1
   d713e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7140:	42bc      	cmp	r4, r7
   d7142:	d006      	beq.n	d7152 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7144:	6833      	ldr	r3, [r6, #0]
   d7146:	f814 1b01 	ldrb.w	r1, [r4], #1
   d714a:	689b      	ldr	r3, [r3, #8]
   d714c:	4630      	mov	r0, r6
   d714e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7150:	e7f6      	b.n	d7140 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7152:	4628      	mov	r0, r5
   d7154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7156 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7156:	7c00      	ldrb	r0, [r0, #16]
   d7158:	2200      	movs	r2, #0
   d715a:	f7ff b8ed 	b.w	d6338 <hal_i2c_write>

000d715e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d715e:	7c00      	ldrb	r0, [r0, #16]
   d7160:	2100      	movs	r1, #0
   d7162:	f7ff b8f1 	b.w	d6348 <hal_i2c_available>

000d7166 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7166:	7c00      	ldrb	r0, [r0, #16]
   d7168:	2100      	movs	r1, #0
   d716a:	f7ff b8f5 	b.w	d6358 <hal_i2c_read>

000d716e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d716e:	7c00      	ldrb	r0, [r0, #16]
   d7170:	2100      	movs	r1, #0
   d7172:	f7ff b8f9 	b.w	d6368 <hal_i2c_peek>

000d7176 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7176:	7c00      	ldrb	r0, [r0, #16]
   d7178:	2100      	movs	r1, #0
   d717a:	f7ff b8fd 	b.w	d6378 <hal_i2c_flush>

000d717e <_ZN7TwoWireD0Ev>:
   d717e:	b510      	push	{r4, lr}
   d7180:	2114      	movs	r1, #20
   d7182:	4604      	mov	r4, r0
   d7184:	f001 f847 	bl	d8216 <_ZdlPvj>
   d7188:	4620      	mov	r0, r4
   d718a:	bd10      	pop	{r4, pc}

000d718c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d718c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d718e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7192:	4604      	mov	r4, r0
   d7194:	4608      	mov	r0, r1
   d7196:	2100      	movs	r1, #0
   d7198:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d719c:	4b03      	ldr	r3, [pc, #12]	; (d71ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d719e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d71a0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d71a2:	4611      	mov	r1, r2
   d71a4:	f7ff f8f8 	bl	d6398 <hal_i2c_init>
}
   d71a8:	4620      	mov	r0, r4
   d71aa:	bd10      	pop	{r4, pc}
   d71ac:	000db418 	.word	0x000db418

000d71b0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d71b0:	2300      	movs	r3, #0
   d71b2:	7c00      	ldrb	r0, [r0, #16]
   d71b4:	461a      	mov	r2, r3
   d71b6:	4619      	mov	r1, r3
   d71b8:	f7ff b8a6 	b.w	d6308 <hal_i2c_begin>

000d71bc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d71bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d71be:	2200      	movs	r2, #0
   d71c0:	2314      	movs	r3, #20
   d71c2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d71c6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d71ca:	780b      	ldrb	r3, [r1, #0]
   d71cc:	f88d 3008 	strb.w	r3, [sp, #8]
   d71d0:	684b      	ldr	r3, [r1, #4]
   d71d2:	9303      	str	r3, [sp, #12]
   d71d4:	68cb      	ldr	r3, [r1, #12]
   d71d6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d71d8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d71da:	7a0b      	ldrb	r3, [r1, #8]
   d71dc:	9305      	str	r3, [sp, #20]
   d71de:	a901      	add	r1, sp, #4
   d71e0:	f7ff f8f2 	bl	d63c8 <hal_i2c_request_ex>
}
   d71e4:	b007      	add	sp, #28
   d71e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d71ea <_ZN7TwoWire11requestFromEhjh>:
{
   d71ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d71ec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d71ee:	f88d 1000 	strb.w	r1, [sp]
   d71f2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d71f6:	9103      	str	r1, [sp, #12]
   d71f8:	bf18      	it	ne
   d71fa:	2301      	movne	r3, #1
   d71fc:	4669      	mov	r1, sp
    size_ = size;
   d71fe:	9201      	str	r2, [sp, #4]
   d7200:	f88d 3008 	strb.w	r3, [sp, #8]
   d7204:	f7ff ffda 	bl	d71bc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7208:	b005      	add	sp, #20
   d720a:	f85d fb04 	ldr.w	pc, [sp], #4

000d720e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d720e:	2301      	movs	r3, #1
   d7210:	f7ff bfeb 	b.w	d71ea <_ZN7TwoWire11requestFromEhjh>

000d7214 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7214:	7c00      	ldrb	r0, [r0, #16]
   d7216:	2200      	movs	r2, #0
   d7218:	f7ff b87e 	b.w	d6318 <hal_i2c_begin_transmission>

000d721c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d721c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d721e:	2300      	movs	r3, #0
   d7220:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d7224:	684a      	ldr	r2, [r1, #4]
   d7226:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d7228:	2314      	movs	r3, #20
    };
   d722a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d722c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d7230:	780b      	ldrb	r3, [r1, #0]
    };
   d7232:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7234:	7a0a      	ldrb	r2, [r1, #8]
   d7236:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d7238:	7c00      	ldrb	r0, [r0, #16]
    };
   d723a:	f88d 3008 	strb.w	r3, [sp, #8]
   d723e:	aa01      	add	r2, sp, #4
   d7240:	4619      	mov	r1, r3
   d7242:	f7ff f869 	bl	d6318 <hal_i2c_begin_transmission>
}
   d7246:	b007      	add	sp, #28
   d7248:	f85d fb04 	ldr.w	pc, [sp], #4

000d724c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d724c:	7c00      	ldrb	r0, [r0, #16]
   d724e:	2200      	movs	r2, #0
   d7250:	f7ff b86a 	b.w	d6328 <hal_i2c_end_transmission>

000d7254 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7254:	2101      	movs	r1, #1
   d7256:	f7ff bff9 	b.w	d724c <_ZN7TwoWire15endTransmissionEh>

000d725a <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d725a:	7c00      	ldrb	r0, [r0, #16]
   d725c:	2100      	movs	r1, #0
   d725e:	f7ff b893 	b.w	d6388 <hal_i2c_is_enabled>

000d7262 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7262:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7264:	2100      	movs	r1, #0
   d7266:	7c00      	ldrb	r0, [r0, #16]
   d7268:	f7ff f89e 	bl	d63a8 <hal_i2c_lock>
}
   d726c:	fab0 f080 	clz	r0, r0
   d7270:	0940      	lsrs	r0, r0, #5
   d7272:	bd08      	pop	{r3, pc}

000d7274 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7274:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7276:	2100      	movs	r1, #0
   d7278:	7c00      	ldrb	r0, [r0, #16]
   d727a:	f7ff f89d 	bl	d63b8 <hal_i2c_unlock>
}
   d727e:	fab0 f080 	clz	r0, r0
   d7282:	0940      	lsrs	r0, r0, #5
   d7284:	bd08      	pop	{r3, pc}

000d7286 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7286:	4770      	bx	lr

000d7288 <_ZN9IPAddressD0Ev>:
   d7288:	b510      	push	{r4, lr}
   d728a:	2118      	movs	r1, #24
   d728c:	4604      	mov	r4, r0
   d728e:	f000 ffc2 	bl	d8216 <_ZdlPvj>
   d7292:	4620      	mov	r0, r4
   d7294:	bd10      	pop	{r4, pc}

000d7296 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7296:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7298:	7d03      	ldrb	r3, [r0, #20]
   d729a:	2b06      	cmp	r3, #6
{
   d729c:	b08d      	sub	sp, #52	; 0x34
   d729e:	460e      	mov	r6, r1
   d72a0:	f100 0704 	add.w	r7, r0, #4
   d72a4:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d72a8:	d012      	beq.n	d72d0 <_ZNK9IPAddress7printToER5Print+0x3a>
   d72aa:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d72ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d72b2:	220a      	movs	r2, #10
   d72b4:	4630      	mov	r0, r6
   d72b6:	f000 f9f9 	bl	d76ac <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d72ba:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d72bc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d72be:	d019      	beq.n	d72f4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d72c0:	2c00      	cmp	r4, #0
   d72c2:	d0f4      	beq.n	d72ae <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d72c4:	212e      	movs	r1, #46	; 0x2e
   d72c6:	4630      	mov	r0, r6
   d72c8:	f000 f9d7 	bl	d767a <_ZN5Print5printEc>
   d72cc:	4404      	add	r4, r0
   d72ce:	e7ee      	b.n	d72ae <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72d0:	232f      	movs	r3, #47	; 0x2f
   d72d2:	466a      	mov	r2, sp
   d72d4:	4639      	mov	r1, r7
   d72d6:	200a      	movs	r0, #10
		buf[0] = 0;
   d72d8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72dc:	f7ff f87c 	bl	d63d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d72e0:	4668      	mov	r0, sp
   d72e2:	f001 fd70 	bl	d8dc6 <strlen>
   d72e6:	6833      	ldr	r3, [r6, #0]
   d72e8:	4602      	mov	r2, r0
   d72ea:	68db      	ldr	r3, [r3, #12]
   d72ec:	4669      	mov	r1, sp
   d72ee:	4630      	mov	r0, r6
   d72f0:	4798      	blx	r3
   d72f2:	4604      	mov	r4, r0
    }
    return n;
}
   d72f4:	4620      	mov	r0, r4
   d72f6:	b00d      	add	sp, #52	; 0x34
   d72f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d72fc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d72fc:	b510      	push	{r4, lr}
   d72fe:	4b05      	ldr	r3, [pc, #20]	; (d7314 <_ZN9IPAddressC1Ev+0x18>)
   d7300:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7302:	2211      	movs	r2, #17
   d7304:	f840 3b04 	str.w	r3, [r0], #4
   d7308:	2100      	movs	r1, #0
   d730a:	f001 fd01 	bl	d8d10 <memset>
}
   d730e:	4620      	mov	r0, r4
   d7310:	bd10      	pop	{r4, pc}
   d7312:	bf00      	nop
   d7314:	000db440 	.word	0x000db440

000d7318 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7318:	4603      	mov	r3, r0
   d731a:	4a07      	ldr	r2, [pc, #28]	; (d7338 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d731c:	b510      	push	{r4, lr}
   d731e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7322:	f101 0210 	add.w	r2, r1, #16
   d7326:	f851 4b04 	ldr.w	r4, [r1], #4
   d732a:	f843 4b04 	str.w	r4, [r3], #4
   d732e:	4291      	cmp	r1, r2
   d7330:	d1f9      	bne.n	d7326 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7332:	780a      	ldrb	r2, [r1, #0]
   d7334:	701a      	strb	r2, [r3, #0]
}
   d7336:	bd10      	pop	{r4, pc}
   d7338:	000db440 	.word	0x000db440

000d733c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d733c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d733e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7342:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7346:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d734a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d734e:	2304      	movs	r3, #4
   d7350:	6041      	str	r1, [r0, #4]
   d7352:	7503      	strb	r3, [r0, #20]
}
   d7354:	bd10      	pop	{r4, pc}

000d7356 <_ZN9IPAddressaSEPKh>:
{
   d7356:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7358:	78cb      	ldrb	r3, [r1, #3]
   d735a:	9300      	str	r3, [sp, #0]
   d735c:	788b      	ldrb	r3, [r1, #2]
   d735e:	784a      	ldrb	r2, [r1, #1]
   d7360:	7809      	ldrb	r1, [r1, #0]
   d7362:	f7ff ffeb 	bl	d733c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7366:	b002      	add	sp, #8
   d7368:	bd10      	pop	{r4, pc}
	...

000d736c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d736c:	4b01      	ldr	r3, [pc, #4]	; (d7374 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d736e:	4a02      	ldr	r2, [pc, #8]	; (d7378 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7370:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7372:	4770      	bx	lr
   d7374:	2003e5f8 	.word	0x2003e5f8
   d7378:	000db44c 	.word	0x000db44c

000d737c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d737c:	2300      	movs	r3, #0
   d737e:	6840      	ldr	r0, [r0, #4]
   d7380:	461a      	mov	r2, r3
   d7382:	f7ff b9ad 	b.w	d66e0 <network_connect>

000d7386 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7386:	6840      	ldr	r0, [r0, #4]
   d7388:	2200      	movs	r2, #0
   d738a:	2102      	movs	r1, #2
   d738c:	f7ff b9b8 	b.w	d6700 <network_disconnect>

000d7390 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7390:	2200      	movs	r2, #0
   d7392:	6840      	ldr	r0, [r0, #4]
   d7394:	4611      	mov	r1, r2
   d7396:	f7ff b9ab 	b.w	d66f0 <network_connecting>

000d739a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d739a:	2200      	movs	r2, #0
   d739c:	6840      	ldr	r0, [r0, #4]
   d739e:	4611      	mov	r1, r2
   d73a0:	f7ff b9b6 	b.w	d6710 <network_ready>

000d73a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d73a4:	2300      	movs	r3, #0
   d73a6:	6840      	ldr	r0, [r0, #4]
   d73a8:	461a      	mov	r2, r3
   d73aa:	4619      	mov	r1, r3
   d73ac:	f7ff b9b8 	b.w	d6720 <network_on>

000d73b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d73b0:	2300      	movs	r3, #0
   d73b2:	6840      	ldr	r0, [r0, #4]
   d73b4:	461a      	mov	r2, r3
   d73b6:	4619      	mov	r1, r3
   d73b8:	f7ff b9ba 	b.w	d6730 <network_off>

000d73bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d73bc:	6840      	ldr	r0, [r0, #4]
   d73be:	2200      	movs	r2, #0
   d73c0:	f081 0101 	eor.w	r1, r1, #1
   d73c4:	f7ff b9bc 	b.w	d6740 <network_listen>

000d73c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d73c8:	6840      	ldr	r0, [r0, #4]
   d73ca:	2200      	movs	r2, #0
   d73cc:	f7ff b9c8 	b.w	d6760 <network_set_listen_timeout>

000d73d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d73d0:	2200      	movs	r2, #0
   d73d2:	6840      	ldr	r0, [r0, #4]
   d73d4:	4611      	mov	r1, r2
   d73d6:	f7ff b9cb 	b.w	d6770 <network_get_listen_timeout>

000d73da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d73da:	2200      	movs	r2, #0
   d73dc:	6840      	ldr	r0, [r0, #4]
   d73de:	4611      	mov	r1, r2
   d73e0:	f7ff b9b6 	b.w	d6750 <network_listening>

000d73e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d73e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d73e8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d73ea:	b095      	sub	sp, #84	; 0x54
   d73ec:	4616      	mov	r6, r2
   d73ee:	460d      	mov	r5, r1
   d73f0:	4607      	mov	r7, r0
    IPAddress addr;
   d73f2:	f7ff ff83 	bl	d72fc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d73f6:	4621      	mov	r1, r4
   d73f8:	2218      	movs	r2, #24
   d73fa:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d73fc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d73fe:	f001 fc87 	bl	d8d10 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7402:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7404:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7408:	4621      	mov	r1, r4
   d740a:	466b      	mov	r3, sp
   d740c:	aa0c      	add	r2, sp, #48	; 0x30
   d740e:	4630      	mov	r0, r6
   d7410:	f7fe fff2 	bl	d63f8 <netdb_getaddrinfo>
    if (!r) {
   d7414:	4604      	mov	r4, r0
   d7416:	2800      	cmp	r0, #0
   d7418:	d146      	bne.n	d74a8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d741a:	4602      	mov	r2, r0
   d741c:	2101      	movs	r1, #1
   d741e:	6868      	ldr	r0, [r5, #4]
   d7420:	f7ff f976 	bl	d6710 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7424:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7426:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7428:	4622      	mov	r2, r4
   d742a:	6868      	ldr	r0, [r5, #4]
   d742c:	f7ff f970 	bl	d6710 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7430:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7432:	4681      	mov	r9, r0
        bool ok = false;
   d7434:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7436:	2e00      	cmp	r6, #0
   d7438:	d036      	beq.n	d74a8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d743a:	2900      	cmp	r1, #0
   d743c:	d134      	bne.n	d74a8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d743e:	6873      	ldr	r3, [r6, #4]
   d7440:	2b02      	cmp	r3, #2
   d7442:	d003      	beq.n	d744c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7444:	2b0a      	cmp	r3, #10
   d7446:	d00b      	beq.n	d7460 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7448:	69f6      	ldr	r6, [r6, #28]
   d744a:	e7f4      	b.n	d7436 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d744c:	f1b8 0f00 	cmp.w	r8, #0
   d7450:	d004      	beq.n	d745c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7452:	6971      	ldr	r1, [r6, #20]
   d7454:	4638      	mov	r0, r7
   d7456:	3104      	adds	r1, #4
   d7458:	f7ff ff7d 	bl	d7356 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d745c:	4641      	mov	r1, r8
   d745e:	e7f3      	b.n	d7448 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7460:	f1b9 0f00 	cmp.w	r9, #0
   d7464:	d101      	bne.n	d746a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7466:	4649      	mov	r1, r9
   d7468:	e7ee      	b.n	d7448 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d746a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d746c:	2210      	movs	r2, #16
   d746e:	a801      	add	r0, sp, #4
   d7470:	f001 fc4e 	bl	d8d10 <memset>
                    a.v = 6;
   d7474:	2306      	movs	r3, #6
   d7476:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d747a:	ad01      	add	r5, sp, #4
   d747c:	f104 0308 	add.w	r3, r4, #8
   d7480:	3418      	adds	r4, #24
   d7482:	6818      	ldr	r0, [r3, #0]
   d7484:	6859      	ldr	r1, [r3, #4]
   d7486:	462a      	mov	r2, r5
   d7488:	c203      	stmia	r2!, {r0, r1}
   d748a:	3308      	adds	r3, #8
   d748c:	42a3      	cmp	r3, r4
   d748e:	4615      	mov	r5, r2
   d7490:	d1f7      	bne.n	d7482 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7492:	a901      	add	r1, sp, #4
   d7494:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7496:	ad07      	add	r5, sp, #28
   d7498:	f7ff ff3e 	bl	d7318 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d749c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d749e:	1d3c      	adds	r4, r7, #4
   d74a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74a2:	682b      	ldr	r3, [r5, #0]
   d74a4:	7023      	strb	r3, [r4, #0]
   d74a6:	e7de      	b.n	d7466 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d74a8:	9800      	ldr	r0, [sp, #0]
   d74aa:	f7fe ff9d 	bl	d63e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d74ae:	4638      	mov	r0, r7
   d74b0:	b015      	add	sp, #84	; 0x54
   d74b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d74b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d74b8:	4b02      	ldr	r3, [pc, #8]	; (d74c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d74ba:	4a03      	ldr	r2, [pc, #12]	; (d74c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d74bc:	601a      	str	r2, [r3, #0]
   d74be:	2200      	movs	r2, #0
   d74c0:	605a      	str	r2, [r3, #4]

} // spark
   d74c2:	4770      	bx	lr
   d74c4:	2003e5fc 	.word	0x2003e5fc
   d74c8:	000db458 	.word	0x000db458

000d74cc <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d74cc:	b508      	push	{r3, lr}
            return &Wire1;
   d74ce:	f000 fe75 	bl	d81bc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d74d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d74d6:	f7ff bec4 	b.w	d7262 <_ZN7TwoWire4lockEv>

000d74da <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d74da:	b510      	push	{r4, lr}
   d74dc:	4604      	mov	r4, r0
    lock_(_lock)
   d74de:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d74e0:	b109      	cbz	r1, d74e6 <_ZN4PMICC1Eb+0xc>
        lock();
   d74e2:	f7ff fff3 	bl	d74cc <_ZN4PMIC4lockEv.constprop.0>
}
   d74e6:	4620      	mov	r0, r4
   d74e8:	bd10      	pop	{r4, pc}

000d74ea <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d74ea:	b508      	push	{r3, lr}
            return &Wire1;
   d74ec:	f000 fe66 	bl	d81bc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d74f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d74f4:	f7ff bebe 	b.w	d7274 <_ZN7TwoWire6unlockEv>

000d74f8 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d74f8:	b510      	push	{r4, lr}
    if (lock_) {
   d74fa:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d74fc:	4604      	mov	r4, r0
    if (lock_) {
   d74fe:	b10b      	cbz	r3, d7504 <_ZN4PMICD1Ev+0xc>
        unlock();
   d7500:	f7ff fff3 	bl	d74ea <_ZN4PMIC6unlockEv>
}
   d7504:	4620      	mov	r0, r4
   d7506:	bd10      	pop	{r4, pc}

000d7508 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7508:	b510      	push	{r4, lr}
   d750a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d750c:	6800      	ldr	r0, [r0, #0]
   d750e:	f7ff ffec 	bl	d74ea <_ZN4PMIC6unlockEv>
   d7512:	4620      	mov	r0, r4
   d7514:	bd10      	pop	{r4, pc}

000d7516 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d7516:	b530      	push	{r4, r5, lr}
   d7518:	b087      	sub	sp, #28
   d751a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d751c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d751e:	f7ff ffd5 	bl	d74cc <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7522:	236b      	movs	r3, #107	; 0x6b
   d7524:	f88d 3008 	strb.w	r3, [sp, #8]
   d7528:	2300      	movs	r3, #0
   d752a:	2401      	movs	r4, #1
   d752c:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d752e:	230a      	movs	r3, #10
   d7530:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7532:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d7536:	f000 fe41 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d753a:	a902      	add	r1, sp, #8
   d753c:	f7ff fe6e 	bl	d721c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d7540:	f000 fe3c 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d7544:	6803      	ldr	r3, [r0, #0]
   d7546:	4629      	mov	r1, r5
   d7548:	689b      	ldr	r3, [r3, #8]
   d754a:	4798      	blx	r3
            return &Wire1;
   d754c:	f000 fe36 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d7550:	4621      	mov	r1, r4
   d7552:	f7ff fe7b 	bl	d724c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d7556:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d7558:	f000 fe30 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d755c:	a902      	add	r1, sp, #8
   d755e:	f7ff fe2d 	bl	d71bc <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d7562:	f000 fe2b 	bl	d81bc <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d7566:	6803      	ldr	r3, [r0, #0]
   d7568:	695b      	ldr	r3, [r3, #20]
   d756a:	4798      	blx	r3
   d756c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d756e:	a801      	add	r0, sp, #4
   d7570:	f7ff ffca 	bl	d7508 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d7574:	b2e0      	uxtb	r0, r4
   d7576:	b007      	add	sp, #28
   d7578:	bd30      	pop	{r4, r5, pc}

000d757a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d757a:	b570      	push	{r4, r5, r6, lr}
   d757c:	b086      	sub	sp, #24
   d757e:	4614      	mov	r4, r2
   d7580:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7582:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7584:	f7ff ffa2 	bl	d74cc <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7588:	236b      	movs	r3, #107	; 0x6b
   d758a:	f88d 3008 	strb.w	r3, [sp, #8]
   d758e:	2300      	movs	r3, #0
   d7590:	9303      	str	r3, [sp, #12]
   d7592:	2601      	movs	r6, #1
    timeout_ = ms;
   d7594:	230a      	movs	r3, #10
   d7596:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7598:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d759c:	f000 fe0e 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d75a0:	a902      	add	r1, sp, #8
   d75a2:	f7ff fe3b 	bl	d721c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d75a6:	f000 fe09 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d75aa:	6803      	ldr	r3, [r0, #0]
   d75ac:	4629      	mov	r1, r5
   d75ae:	689b      	ldr	r3, [r3, #8]
   d75b0:	4798      	blx	r3
            return &Wire1;
   d75b2:	f000 fe03 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d75b6:	6803      	ldr	r3, [r0, #0]
   d75b8:	4621      	mov	r1, r4
   d75ba:	689b      	ldr	r3, [r3, #8]
   d75bc:	4798      	blx	r3
            return &Wire1;
   d75be:	f000 fdfd 	bl	d81bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d75c2:	4631      	mov	r1, r6
   d75c4:	f7ff fe42 	bl	d724c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d75c8:	a801      	add	r0, sp, #4
   d75ca:	f7ff ff9d 	bl	d7508 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d75ce:	b006      	add	sp, #24
   d75d0:	bd70      	pop	{r4, r5, r6, pc}

000d75d2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d75d2:	b513      	push	{r0, r1, r4, lr}
   d75d4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d75d6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d75d8:	f7ff ff78 	bl	d74cc <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d75dc:	2101      	movs	r1, #1
   d75de:	4620      	mov	r0, r4
   d75e0:	f7ff ff99 	bl	d7516 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d75e4:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d75e8:	f040 0210 	orr.w	r2, r0, #16
   d75ec:	2101      	movs	r1, #1
   d75ee:	4620      	mov	r0, r4
   d75f0:	f7ff ffc3 	bl	d757a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d75f4:	a801      	add	r0, sp, #4
   d75f6:	f7ff ff87 	bl	d7508 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d75fa:	2001      	movs	r0, #1
   d75fc:	b002      	add	sp, #8
   d75fe:	bd10      	pop	{r4, pc}

000d7600 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   d7600:	b513      	push	{r0, r1, r4, lr}
   d7602:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7604:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7606:	f7ff ff61 	bl	d74cc <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d760a:	2101      	movs	r1, #1
   d760c:	4620      	mov	r0, r4
   d760e:	f7ff ff82 	bl	d7516 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d7612:	2101      	movs	r1, #1
   d7614:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d7618:	4620      	mov	r0, r4
   d761a:	f7ff ffae 	bl	d757a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d761e:	a801      	add	r0, sp, #4
   d7620:	f7ff ff72 	bl	d7508 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d7624:	2001      	movs	r0, #1
   d7626:	b002      	add	sp, #8
   d7628:	bd10      	pop	{r4, pc}

000d762a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d762a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d762c:	4606      	mov	r6, r0
   d762e:	460d      	mov	r5, r1
  size_t n = 0;
   d7630:	188f      	adds	r7, r1, r2
   d7632:	2400      	movs	r4, #0
  while (size--) {
   d7634:	42bd      	cmp	r5, r7
   d7636:	d00c      	beq.n	d7652 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7638:	6833      	ldr	r3, [r6, #0]
   d763a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d763e:	689b      	ldr	r3, [r3, #8]
   d7640:	4630      	mov	r0, r6
   d7642:	4798      	blx	r3
     if (chunk>=0)
   d7644:	1e03      	subs	r3, r0, #0
   d7646:	db01      	blt.n	d764c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7648:	441c      	add	r4, r3
  while (size--) {
   d764a:	e7f3      	b.n	d7634 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d764c:	2c00      	cmp	r4, #0
   d764e:	bf08      	it	eq
   d7650:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7652:	4620      	mov	r0, r4
   d7654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7656 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7656:	b513      	push	{r0, r1, r4, lr}
   d7658:	4604      	mov	r4, r0
    }
   d765a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d765c:	b159      	cbz	r1, d7676 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d765e:	9101      	str	r1, [sp, #4]
   d7660:	f001 fbb1 	bl	d8dc6 <strlen>
   d7664:	6823      	ldr	r3, [r4, #0]
   d7666:	9901      	ldr	r1, [sp, #4]
   d7668:	68db      	ldr	r3, [r3, #12]
   d766a:	4602      	mov	r2, r0
   d766c:	4620      	mov	r0, r4
    }
   d766e:	b002      	add	sp, #8
   d7670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7674:	4718      	bx	r3
    }
   d7676:	b002      	add	sp, #8
   d7678:	bd10      	pop	{r4, pc}

000d767a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d767a:	6803      	ldr	r3, [r0, #0]
   d767c:	689b      	ldr	r3, [r3, #8]
   d767e:	4718      	bx	r3

000d7680 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7680:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7682:	210d      	movs	r1, #13
{
   d7684:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7686:	f7ff fff8 	bl	d767a <_ZN5Print5printEc>
  n += print('\n');
   d768a:	210a      	movs	r1, #10
  size_t n = print('\r');
   d768c:	4604      	mov	r4, r0
  n += print('\n');
   d768e:	4628      	mov	r0, r5
   d7690:	f7ff fff3 	bl	d767a <_ZN5Print5printEc>
  return n;
}
   d7694:	4420      	add	r0, r4
   d7696:	bd38      	pop	{r3, r4, r5, pc}

000d7698 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7698:	b538      	push	{r3, r4, r5, lr}
   d769a:	4605      	mov	r5, r0
  return write(str);
   d769c:	f7ff ffdb 	bl	d7656 <_ZN5Print5writeEPKc>
   d76a0:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d76a2:	4628      	mov	r0, r5
   d76a4:	f7ff ffec 	bl	d7680 <_ZN5Print7printlnEv>
  return n;
}
   d76a8:	4420      	add	r0, r4
   d76aa:	bd38      	pop	{r3, r4, r5, pc}

000d76ac <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d76ac:	b530      	push	{r4, r5, lr}
   d76ae:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d76b0:	2300      	movs	r3, #0
   d76b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d76b6:	2a01      	cmp	r2, #1
   d76b8:	bf98      	it	ls
   d76ba:	220a      	movls	r2, #10
   d76bc:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d76be:	460d      	mov	r5, r1
   d76c0:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d76c4:	fb01 5312 	mls	r3, r1, r2, r5
   d76c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76cc:	2b09      	cmp	r3, #9
   d76ce:	bf94      	ite	ls
   d76d0:	3330      	addls	r3, #48	; 0x30
   d76d2:	3337      	addhi	r3, #55	; 0x37
   d76d4:	b2db      	uxtb	r3, r3
  } while(n);
   d76d6:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76d8:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d76dc:	d9ef      	bls.n	d76be <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d76de:	4621      	mov	r1, r4
   d76e0:	f7ff ffb9 	bl	d7656 <_ZN5Print5writeEPKc>
}
   d76e4:	b00b      	add	sp, #44	; 0x2c
   d76e6:	bd30      	pop	{r4, r5, pc}

000d76e8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d76e8:	b510      	push	{r4, lr}
   d76ea:	4604      	mov	r4, r0
   d76ec:	f7fc fd5a 	bl	d41a4 <_ZNSt14_Function_baseD1Ev>
   d76f0:	4620      	mov	r0, r4
   d76f2:	bd10      	pop	{r4, pc}

000d76f4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d76f4:	4803      	ldr	r0, [pc, #12]	; (d7704 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d76f6:	4a04      	ldr	r2, [pc, #16]	; (d7708 <_GLOBAL__sub_I_RGB+0x14>)
   d76f8:	4904      	ldr	r1, [pc, #16]	; (d770c <_GLOBAL__sub_I_RGB+0x18>)
   d76fa:	2300      	movs	r3, #0
   d76fc:	6083      	str	r3, [r0, #8]
   d76fe:	f000 bd85 	b.w	d820c <__aeabi_atexit>
   d7702:	bf00      	nop
   d7704:	2003e604 	.word	0x2003e604
   d7708:	2003e428 	.word	0x2003e428
   d770c:	000d76e9 	.word	0x000d76e9

000d7710 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7710:	b510      	push	{r4, lr}
   d7712:	4604      	mov	r4, r0
   d7714:	4608      	mov	r0, r1
{
    _spi = spi;
   d7716:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7718:	f7fe fe76 	bl	d6408 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d771c:	2300      	movs	r3, #0
   d771e:	6063      	str	r3, [r4, #4]
}
   d7720:	4620      	mov	r0, r4
   d7722:	bd10      	pop	{r4, pc}

000d7724 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7724:	b510      	push	{r4, lr}
   d7726:	4604      	mov	r4, r0
{
	free(buffer);
   d7728:	6800      	ldr	r0, [r0, #0]
   d772a:	f7ff f831 	bl	d6790 <free>
}
   d772e:	4620      	mov	r0, r4
   d7730:	bd10      	pop	{r4, pc}

000d7732 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7732:	b510      	push	{r4, lr}
   d7734:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7736:	6800      	ldr	r0, [r0, #0]
   d7738:	b108      	cbz	r0, d773e <_ZN6String10invalidateEv+0xc>
   d773a:	f7ff f829 	bl	d6790 <free>
	buffer = NULL;
   d773e:	2300      	movs	r3, #0
	capacity = len = 0;
   d7740:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7744:	6023      	str	r3, [r4, #0]
}
   d7746:	bd10      	pop	{r4, pc}

000d7748 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7748:	b538      	push	{r3, r4, r5, lr}
   d774a:	4604      	mov	r4, r0
   d774c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d774e:	6800      	ldr	r0, [r0, #0]
   d7750:	3101      	adds	r1, #1
   d7752:	f7ff f825 	bl	d67a0 <realloc>
	if (newbuffer) {
   d7756:	b110      	cbz	r0, d775e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7758:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d775c:	2001      	movs	r0, #1
	}
	return 0;
}
   d775e:	bd38      	pop	{r3, r4, r5, pc}

000d7760 <_ZN6String7reserveEj>:
{
   d7760:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7762:	6803      	ldr	r3, [r0, #0]
{
   d7764:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7766:	b123      	cbz	r3, d7772 <_ZN6String7reserveEj+0x12>
   d7768:	6843      	ldr	r3, [r0, #4]
   d776a:	428b      	cmp	r3, r1
   d776c:	d301      	bcc.n	d7772 <_ZN6String7reserveEj+0x12>
   d776e:	2001      	movs	r0, #1
}
   d7770:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7772:	4620      	mov	r0, r4
   d7774:	f7ff ffe8 	bl	d7748 <_ZN6String12changeBufferEj>
   d7778:	2800      	cmp	r0, #0
   d777a:	d0f9      	beq.n	d7770 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d777c:	68a3      	ldr	r3, [r4, #8]
   d777e:	2b00      	cmp	r3, #0
   d7780:	d1f5      	bne.n	d776e <_ZN6String7reserveEj+0xe>
   d7782:	6822      	ldr	r2, [r4, #0]
   d7784:	7013      	strb	r3, [r2, #0]
   d7786:	e7f2      	b.n	d776e <_ZN6String7reserveEj+0xe>

000d7788 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7788:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d778a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d778c:	4611      	mov	r1, r2
   d778e:	9201      	str	r2, [sp, #4]
{
   d7790:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7792:	f7ff ffe5 	bl	d7760 <_ZN6String7reserveEj>
   d7796:	9a01      	ldr	r2, [sp, #4]
   d7798:	b928      	cbnz	r0, d77a6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d779a:	4620      	mov	r0, r4
   d779c:	f7ff ffc9 	bl	d7732 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d77a0:	4620      	mov	r0, r4
   d77a2:	b003      	add	sp, #12
   d77a4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d77a6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d77a8:	4629      	mov	r1, r5
   d77aa:	6820      	ldr	r0, [r4, #0]
   d77ac:	f001 faa2 	bl	d8cf4 <memcpy>
	buffer[len] = 0;
   d77b0:	6822      	ldr	r2, [r4, #0]
   d77b2:	68a3      	ldr	r3, [r4, #8]
   d77b4:	2100      	movs	r1, #0
   d77b6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d77b8:	e7f2      	b.n	d77a0 <_ZN6String4copyEPKcj+0x18>

000d77ba <_ZN6StringC1EPKc>:
	buffer = NULL;
   d77ba:	2300      	movs	r3, #0
String::String(const char *cstr)
   d77bc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d77be:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d77c2:	4604      	mov	r4, r0
	len = 0;
   d77c4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d77c6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d77c8:	b141      	cbz	r1, d77dc <_ZN6StringC1EPKc+0x22>
   d77ca:	4608      	mov	r0, r1
   d77cc:	9101      	str	r1, [sp, #4]
   d77ce:	f001 fafa 	bl	d8dc6 <strlen>
   d77d2:	9901      	ldr	r1, [sp, #4]
   d77d4:	4602      	mov	r2, r0
   d77d6:	4620      	mov	r0, r4
   d77d8:	f7ff ffd6 	bl	d7788 <_ZN6String4copyEPKcj>
}
   d77dc:	4620      	mov	r0, r4
   d77de:	b002      	add	sp, #8
   d77e0:	bd10      	pop	{r4, pc}

000d77e2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d77e2:	4288      	cmp	r0, r1
{
   d77e4:	b510      	push	{r4, lr}
   d77e6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d77e8:	d005      	beq.n	d77f6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d77ea:	680b      	ldr	r3, [r1, #0]
   d77ec:	b12b      	cbz	r3, d77fa <_ZN6StringaSERKS_+0x18>
   d77ee:	688a      	ldr	r2, [r1, #8]
   d77f0:	4619      	mov	r1, r3
   d77f2:	f7ff ffc9 	bl	d7788 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d77f6:	4620      	mov	r0, r4
   d77f8:	bd10      	pop	{r4, pc}
	else invalidate();
   d77fa:	f7ff ff9a 	bl	d7732 <_ZN6String10invalidateEv>
   d77fe:	e7fa      	b.n	d77f6 <_ZN6StringaSERKS_+0x14>

000d7800 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7800:	b510      	push	{r4, lr}
	buffer = NULL;
   d7802:	2300      	movs	r3, #0
String::String(const String &value)
   d7804:	4604      	mov	r4, r0
	capacity = 0;
   d7806:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d780a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d780c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d780e:	f7ff ffe8 	bl	d77e2 <_ZN6StringaSERKS_>
}
   d7812:	4620      	mov	r0, r4
   d7814:	bd10      	pop	{r4, pc}

000d7816 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7816:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7818:	6882      	ldr	r2, [r0, #8]
   d781a:	b93a      	cbnz	r2, d782c <_ZNK6String6equalsEPKc+0x16>
   d781c:	b121      	cbz	r1, d7828 <_ZNK6String6equalsEPKc+0x12>
   d781e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7820:	fab0 f080 	clz	r0, r0
   d7824:	0940      	lsrs	r0, r0, #5
   d7826:	e000      	b.n	d782a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7828:	2001      	movs	r0, #1
}
   d782a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d782c:	6800      	ldr	r0, [r0, #0]
   d782e:	b909      	cbnz	r1, d7834 <_ZNK6String6equalsEPKc+0x1e>
   d7830:	7800      	ldrb	r0, [r0, #0]
   d7832:	e7f5      	b.n	d7820 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7834:	f001 fa98 	bl	d8d68 <strcmp>
   d7838:	e7f2      	b.n	d7820 <_ZNK6String6equalsEPKc+0xa>

000d783a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d783a:	b558      	push	{r3, r4, r6, lr}
   d783c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d783e:	b12a      	cbz	r2, d784c <_ZNK6String8getBytesEPhjj+0x12>
   d7840:	b121      	cbz	r1, d784c <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d7842:	6884      	ldr	r4, [r0, #8]
   d7844:	429c      	cmp	r4, r3
   d7846:	d802      	bhi.n	d784e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7848:	2300      	movs	r3, #0
   d784a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d784c:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d784e:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d7850:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d7852:	6801      	ldr	r1, [r0, #0]
   d7854:	4294      	cmp	r4, r2
   d7856:	bf28      	it	cs
   d7858:	4614      	movcs	r4, r2
   d785a:	4419      	add	r1, r3
   d785c:	4622      	mov	r2, r4
   d785e:	4630      	mov	r0, r6
   d7860:	f001 facb 	bl	d8dfa <strncpy>
	buf[n] = 0;
   d7864:	2300      	movs	r3, #0
   d7866:	5533      	strb	r3, [r6, r4]
   d7868:	e7f0      	b.n	d784c <_ZNK6String8getBytesEPhjj+0x12>

000d786a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d786a:	b510      	push	{r4, lr}
   d786c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d786e:	6800      	ldr	r0, [r0, #0]
   d7870:	b118      	cbz	r0, d787a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7872:	f7fe ff8d 	bl	d6790 <free>
            wakeupSource_ = nullptr;
   d7876:	2300      	movs	r3, #0
   d7878:	6023      	str	r3, [r4, #0]
        }
    }
   d787a:	bd10      	pop	{r4, pc}

000d787c <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d787c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d787e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7882:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7884:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7886:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d7888:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d788c:	f8c0 2006 	str.w	r2, [r0, #6]
   d7890:	889b      	ldrh	r3, [r3, #4]
   d7892:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7894:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7896:	f7ff ffe8 	bl	d786a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d789a:	682b      	ldr	r3, [r5, #0]
   d789c:	b113      	cbz	r3, d78a4 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d789e:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d78a0:	2300      	movs	r3, #0
   d78a2:	602b      	str	r3, [r5, #0]
    }
   d78a4:	4620      	mov	r0, r4
   d78a6:	bd38      	pop	{r3, r4, r5, pc}

000d78a8 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   d78a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d78ac:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   d78ae:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d78b0:	b933      	cbnz	r3, d78c0 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   d78b2:	b932      	cbnz	r2, d78c2 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   d78b4:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d78b8:	6003      	str	r3, [r0, #0]
   d78ba:	888b      	ldrh	r3, [r1, #4]
   d78bc:	8083      	strh	r3, [r0, #4]
    }
   d78be:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   d78c0:	b122      	cbz	r2, d78cc <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d78c2:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   d78c4:	2c01      	cmp	r4, #1
   d78c6:	d003      	beq.n	d78d0 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   d78c8:	2c04      	cmp	r4, #4
   d78ca:	d006      	beq.n	d78da <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d78cc:	2204      	movs	r2, #4
   d78ce:	e005      	b.n	d78dc <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d78d0:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d78d2:	814a      	strh	r2, [r1, #10]
   d78d4:	718c      	strb	r4, [r1, #6]
   d78d6:	810b      	strh	r3, [r1, #8]
                    break;
   d78d8:	e7ec      	b.n	d78b4 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d78da:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d78dc:	810b      	strh	r3, [r1, #8]
   d78de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d78e2:	718a      	strb	r2, [r1, #6]
   d78e4:	814b      	strh	r3, [r1, #10]
                    break;
   d78e6:	e7e5      	b.n	d78b4 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

000d78e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d78e8:	b538      	push	{r3, r4, r5, lr}
   d78ea:	460c      	mov	r4, r1
   d78ec:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d78ee:	f7ff ffbc 	bl	d786a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d78f2:	b144      	cbz	r4, d7906 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d78f4:	8820      	ldrh	r0, [r4, #0]
   d78f6:	f7fe ff43 	bl	d6780 <malloc>
   d78fa:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d78fc:	b128      	cbz	r0, d790a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d78fe:	8822      	ldrh	r2, [r4, #0]
   d7900:	4621      	mov	r1, r4
   d7902:	f001 f9f7 	bl	d8cf4 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d7906:	2000      	movs	r0, #0
    }
   d7908:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d790a:	4801      	ldr	r0, [pc, #4]	; (d7910 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d790c:	e7fc      	b.n	d7908 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d790e:	bf00      	nop
   d7910:	fffffefc 	.word	0xfffffefc

000d7914 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d7914:	b507      	push	{r0, r1, r2, lr}
   d7916:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7918:	2100      	movs	r1, #0
{
   d791a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d791c:	9100      	str	r1, [sp, #0]
   d791e:	2001      	movs	r0, #1
   d7920:	218c      	movs	r1, #140	; 0x8c
   d7922:	f7fe fe73 	bl	d660c <system_reset>
}
   d7926:	b003      	add	sp, #12
   d7928:	f85d fb04 	ldr.w	pc, [sp], #4

000d792c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d792c:	4601      	mov	r1, r0
    reset(0, flags);
   d792e:	2000      	movs	r0, #0
   d7930:	f7ff bff0 	b.w	d7914 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d7934 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d7934:	2000      	movs	r0, #0
   d7936:	f7ff bff9 	b.w	d792c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d793c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d793c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d793e:	4d2d      	ldr	r5, [pc, #180]	; (d79f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7940:	7d0b      	ldrb	r3, [r1, #20]
   d7942:	4604      	mov	r4, r0
   d7944:	b08b      	sub	sp, #44	; 0x2c
   d7946:	4608      	mov	r0, r1
   d7948:	1daf      	adds	r7, r5, #6
   d794a:	2b00      	cmp	r3, #0
   d794c:	d038      	beq.n	d79c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d794e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7950:	791b      	ldrb	r3, [r3, #4]
   d7952:	2b00      	cmp	r3, #0
   d7954:	d034      	beq.n	d79c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d7956:	2200      	movs	r2, #0
    SleepResult() {}
   d7958:	4b27      	ldr	r3, [pc, #156]	; (d79f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d795a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d795c:	a902      	add	r1, sp, #8
   d795e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7960:	9202      	str	r2, [sp, #8]
   d7962:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d7966:	f88d 200e 	strb.w	r2, [sp, #14]
   d796a:	f7fe fe45 	bl	d65f8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d796e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d7972:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d7976:	b200      	sxth	r0, r0
   d7978:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d797c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7980:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d7982:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d7984:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7986:	4628      	mov	r0, r5
   d7988:	f7ff ffae 	bl	d78e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d798c:	a802      	add	r0, sp, #8
   d798e:	f7ff ff6c 	bl	d786a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d7992:	2300      	movs	r3, #0
   d7994:	6023      	str	r3, [r4, #0]
   d7996:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d7998:	71a3      	strb	r3, [r4, #6]
   d799a:	8123      	strh	r3, [r4, #8]
   d799c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d79a0:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d79a2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d79a6:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d79a8:	683b      	ldr	r3, [r7, #0]
   d79aa:	f8c4 3006 	str.w	r3, [r4, #6]
   d79ae:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d79b0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d79b2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d79b4:	4620      	mov	r0, r4
   d79b6:	f7ff ff97 	bl	d78e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d79ba:	4620      	mov	r0, r4
   d79bc:	b00b      	add	sp, #44	; 0x2c
   d79be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d79c0:	2600      	movs	r6, #0
   d79c2:	2320      	movs	r3, #32
   d79c4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d79c8:	4b0c      	ldr	r3, [pc, #48]	; (d79fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d79ca:	9300      	str	r3, [sp, #0]
   d79cc:	490c      	ldr	r1, [pc, #48]	; (d7a00 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d79ce:	4633      	mov	r3, r6
   d79d0:	aa02      	add	r2, sp, #8
   d79d2:	2032      	movs	r0, #50	; 0x32
   d79d4:	f7fe fda0 	bl	d6518 <log_message>
    SleepResult() {}
   d79d8:	4b07      	ldr	r3, [pc, #28]	; (d79f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d79da:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d79dc:	a902      	add	r1, sp, #8
        error_ = error;
   d79de:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d79e2:	4804      	ldr	r0, [pc, #16]	; (d79f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d79e4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d79e6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d79ea:	f8ad 300c 	strh.w	r3, [sp, #12]
   d79ee:	f7ff ff45 	bl	d787c <_ZN17SystemSleepResultaSEOS_>
   d79f2:	e7cb      	b.n	d798c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d79f4:	2003e614 	.word	0x2003e614
   d79f8:	ffff0000 	.word	0xffff0000
   d79fc:	000db48b 	.word	0x000db48b
   d7a00:	000db484 	.word	0x000db484

000d7a04 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d7a04:	b530      	push	{r4, r5, lr}
   d7a06:	4604      	mov	r4, r0
   d7a08:	b085      	sub	sp, #20
   d7a0a:	4608      	mov	r0, r1
   d7a0c:	4611      	mov	r1, r2
   d7a0e:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d7a10:	2300      	movs	r3, #0
   d7a12:	f7fe fdab 	bl	d656c <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d7a16:	4d0d      	ldr	r5, [pc, #52]	; (d7a4c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d7a18:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   d7a1c:	2300      	movs	r3, #0
   d7a1e:	a901      	add	r1, sp, #4
   d7a20:	9301      	str	r3, [sp, #4]
   d7a22:	f8ad 3008 	strh.w	r3, [sp, #8]
   d7a26:	f88d 300a 	strb.w	r3, [sp, #10]
   d7a2a:	4628      	mov	r0, r5
   d7a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7a30:	f8ad 300e 	strh.w	r3, [sp, #14]
   d7a34:	f7ff ff22 	bl	d787c <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   d7a38:	a801      	add	r0, sp, #4
   d7a3a:	f7ff ff16 	bl	d786a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   d7a3e:	4620      	mov	r0, r4
   d7a40:	4629      	mov	r1, r5
   d7a42:	f7ff ff31 	bl	d78a8 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d7a46:	4620      	mov	r0, r4
   d7a48:	b005      	add	sp, #20
   d7a4a:	bd30      	pop	{r4, r5, pc}
   d7a4c:	2003e614 	.word	0x2003e614

000d7a50 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7a50:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7a52:	4b09      	ldr	r3, [pc, #36]	; (d7a78 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d7a54:	4c09      	ldr	r4, [pc, #36]	; (d7a7c <_GLOBAL__sub_I_System+0x2c>)
   d7a56:	2202      	movs	r2, #2
   d7a58:	2000      	movs	r0, #0
   d7a5a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7a5c:	4b08      	ldr	r3, [pc, #32]	; (d7a80 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7a5e:	6020      	str	r0, [r4, #0]
   d7a60:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7a62:	71a0      	strb	r0, [r4, #6]
   d7a64:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7a66:	f7fe fd71 	bl	d654c <set_system_mode>
SystemClass System;
   d7a6a:	4620      	mov	r0, r4
   d7a6c:	4a05      	ldr	r2, [pc, #20]	; (d7a84 <_GLOBAL__sub_I_System+0x34>)
   d7a6e:	4906      	ldr	r1, [pc, #24]	; (d7a88 <_GLOBAL__sub_I_System+0x38>)
   d7a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7a74:	f000 bbca 	b.w	d820c <__aeabi_atexit>
   d7a78:	2003e620 	.word	0x2003e620
   d7a7c:	2003e614 	.word	0x2003e614
   d7a80:	ffff0000 	.word	0xffff0000
   d7a84:	2003e428 	.word	0x2003e428
   d7a88:	000d4195 	.word	0x000d4195

000d7a8c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7a90:	4a15      	ldr	r2, [pc, #84]	; (d7ae8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7a92:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7af4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7a96:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7a9a:	18c0      	adds	r0, r0, r3
   d7a9c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7aa0:	4a12      	ldr	r2, [pc, #72]	; (d7aec <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7aa2:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7aa6:	18c6      	adds	r6, r0, r3
   d7aa8:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7aac:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7ab0:	42bb      	cmp	r3, r7
   d7ab2:	bf08      	it	eq
   d7ab4:	42b2      	cmpeq	r2, r6
{
   d7ab6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7ab8:	d013      	beq.n	d7ae2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7aba:	a903      	add	r1, sp, #12
   d7abc:	4668      	mov	r0, sp
   d7abe:	e9cd 6700 	strd	r6, r7, [sp]
   d7ac2:	f7fe fe9d 	bl	d6800 <localtime_r>
	calendar_time.tm_year += 1900;
   d7ac6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7ac8:	4d09      	ldr	r5, [pc, #36]	; (d7af0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7aca:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7ace:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7ad0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7ada:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7ade:	6823      	ldr	r3, [r4, #0]
   d7ae0:	602b      	str	r3, [r5, #0]
    }
}
   d7ae2:	b00c      	add	sp, #48	; 0x30
   d7ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7ae8:	2003e658 	.word	0x2003e658
   d7aec:	2003e650 	.word	0x2003e650
   d7af0:	2003e628 	.word	0x2003e628
   d7af4:	2003e660 	.word	0x2003e660

000d7af8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7af8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7afa:	2000      	movs	r0, #0
   d7afc:	f7fe fdd8 	bl	d66b0 <spark_sync_time_pending>
   d7b00:	b128      	cbz	r0, d7b0e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7b02:	f7fe fdad 	bl	d6660 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7b06:	f080 0001 	eor.w	r0, r0, #1
   d7b0a:	b2c0      	uxtb	r0, r0
    }
   d7b0c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7b0e:	2001      	movs	r0, #1
   d7b10:	e7fc      	b.n	d7b0c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d7b14 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7b14:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7b18:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d7b20:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7b22:	d411      	bmi.n	d7b48 <_ZN9TimeClass4zoneEf+0x34>
   d7b24:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7b28:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7b30:	dc0a      	bgt.n	d7b48 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7b32:	eddf 7a06 	vldr	s15, [pc, #24]	; d7b4c <_ZN9TimeClass4zoneEf+0x38>
   d7b36:	ee60 7a27 	vmul.f32	s15, s0, s15
   d7b3a:	ee17 0a90 	vmov	r0, s15
   d7b3e:	f001 f84f 	bl	d8be0 <__aeabi_f2lz>
   d7b42:	4b03      	ldr	r3, [pc, #12]	; (d7b50 <_ZN9TimeClass4zoneEf+0x3c>)
   d7b44:	e9c3 0100 	strd	r0, r1, [r3]
}
   d7b48:	bd08      	pop	{r3, pc}
   d7b4a:	bf00      	nop
   d7b4c:	45610000 	.word	0x45610000
   d7b50:	2003e658 	.word	0x2003e658

000d7b54 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7b54:	b530      	push	{r4, r5, lr}
   d7b56:	4604      	mov	r4, r0
    t += time_zone_cache;
   d7b58:	4818      	ldr	r0, [pc, #96]	; (d7bbc <_ZN9TimeClass7timeStrEx+0x68>)
   d7b5a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7b5e:	1852      	adds	r2, r2, r1
   d7b60:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7b64:	4816      	ldr	r0, [pc, #88]	; (d7bc0 <_ZN9TimeClass7timeStrEx+0x6c>)
   d7b66:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7b6a:	1852      	adds	r2, r2, r1
{
   d7b6c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d7b6e:	eb40 0303 	adc.w	r3, r0, r3
   d7b72:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d7b76:	2224      	movs	r2, #36	; 0x24
   d7b78:	eb0d 0002 	add.w	r0, sp, r2
   d7b7c:	2100      	movs	r1, #0
   d7b7e:	f001 f8c7 	bl	d8d10 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d7b82:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7b84:	a909      	add	r1, sp, #36	; 0x24
   d7b86:	4668      	mov	r0, sp
   d7b88:	f7fe fe3a 	bl	d6800 <localtime_r>
    char ascstr[26] = {};
   d7b8c:	2216      	movs	r2, #22
   d7b8e:	4629      	mov	r1, r5
   d7b90:	a803      	add	r0, sp, #12
   d7b92:	9502      	str	r5, [sp, #8]
   d7b94:	f001 f8bc 	bl	d8d10 <memset>
    asctime_r(&calendar_time, ascstr);
   d7b98:	a902      	add	r1, sp, #8
   d7b9a:	a809      	add	r0, sp, #36	; 0x24
   d7b9c:	f001 f872 	bl	d8c84 <asctime_r>
    int len = strlen(ascstr);
   d7ba0:	a802      	add	r0, sp, #8
   d7ba2:	f001 f910 	bl	d8dc6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7ba6:	ab12      	add	r3, sp, #72	; 0x48
   d7ba8:	4418      	add	r0, r3
    return String(ascstr);
   d7baa:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7bac:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7bb0:	4620      	mov	r0, r4
   d7bb2:	f7ff fe02 	bl	d77ba <_ZN6StringC1EPKc>
}
   d7bb6:	4620      	mov	r0, r4
   d7bb8:	b013      	add	sp, #76	; 0x4c
   d7bba:	bd30      	pop	{r4, r5, pc}
   d7bbc:	2003e658 	.word	0x2003e658
   d7bc0:	2003e650 	.word	0x2003e650

000d7bc4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7bc4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7bc6:	2000      	movs	r0, #0
   d7bc8:	f7fe fb4e 	bl	d6268 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7bcc:	4604      	mov	r4, r0
   d7bce:	b9a0      	cbnz	r0, d7bfa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7bd0:	f7fe fcb4 	bl	d653c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7bd4:	2801      	cmp	r0, #1
   d7bd6:	d110      	bne.n	d7bfa <_ZN9TimeClass7isValidEv+0x36>
   d7bd8:	4620      	mov	r0, r4
   d7bda:	f7fe fce7 	bl	d65ac <system_thread_get_state>
   d7bde:	b960      	cbnz	r0, d7bfa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7be0:	f7ff ff8a 	bl	d7af8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7be4:	b910      	cbnz	r0, d7bec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7be6:	f7fe fd2b 	bl	d6640 <spark_process>
        while (_while() && !_condition()) {
   d7bea:	e7f9      	b.n	d7be0 <_ZN9TimeClass7isValidEv+0x1c>
   d7bec:	f7ff ff84 	bl	d7af8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7bf4:	2000      	movs	r0, #0
   d7bf6:	f7fe bb37 	b.w	d6268 <hal_rtc_time_is_valid>
}
   d7bfa:	4620      	mov	r0, r4
   d7bfc:	bd10      	pop	{r4, pc}

000d7bfe <_ZN9TimeClass3nowEv>:
{
   d7bfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7c00:	f7ff ffe0 	bl	d7bc4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7c04:	2210      	movs	r2, #16
   d7c06:	2100      	movs	r1, #0
   d7c08:	4668      	mov	r0, sp
   d7c0a:	f001 f881 	bl	d8d10 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7c0e:	2100      	movs	r1, #0
   d7c10:	4668      	mov	r0, sp
   d7c12:	f7fe fb39 	bl	d6288 <hal_rtc_get_time>
}
   d7c16:	9800      	ldr	r0, [sp, #0]
   d7c18:	b005      	add	sp, #20
   d7c1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7c20 <_ZN9TimeClass4hourEv>:
{
   d7c20:	b508      	push	{r3, lr}
	return hour(now());
   d7c22:	f7ff ffec 	bl	d7bfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7c26:	17c1      	asrs	r1, r0, #31
   d7c28:	f7ff ff30 	bl	d7a8c <_ZL22Refresh_UnixTime_Cachex>
}
   d7c2c:	4b01      	ldr	r3, [pc, #4]	; (d7c34 <_ZN9TimeClass4hourEv+0x14>)
   d7c2e:	6898      	ldr	r0, [r3, #8]
   d7c30:	bd08      	pop	{r3, pc}
   d7c32:	bf00      	nop
   d7c34:	2003e628 	.word	0x2003e628

000d7c38 <_ZN9TimeClass6minuteEv>:
{
   d7c38:	b508      	push	{r3, lr}
	return minute(now());
   d7c3a:	f7ff ffe0 	bl	d7bfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7c3e:	17c1      	asrs	r1, r0, #31
   d7c40:	f7ff ff24 	bl	d7a8c <_ZL22Refresh_UnixTime_Cachex>
}
   d7c44:	4b01      	ldr	r3, [pc, #4]	; (d7c4c <_ZN9TimeClass6minuteEv+0x14>)
   d7c46:	6858      	ldr	r0, [r3, #4]
   d7c48:	bd08      	pop	{r3, pc}
   d7c4a:	bf00      	nop
   d7c4c:	2003e628 	.word	0x2003e628

000d7c50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7c50:	4b02      	ldr	r3, [pc, #8]	; (d7c5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7c52:	681a      	ldr	r2, [r3, #0]
   d7c54:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7c56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7c58:	4770      	bx	lr
   d7c5a:	bf00      	nop
   d7c5c:	2003e250 	.word	0x2003e250
   d7c60:	2003e624 	.word	0x2003e624

000d7c64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7c64:	4770      	bx	lr

000d7c66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c66:	7441      	strb	r1, [r0, #17]
}
   d7c68:	4770      	bx	lr

000d7c6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7c6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7c6c:	7c00      	ldrb	r0, [r0, #16]
   d7c6e:	f7fe fc13 	bl	d6498 <hal_usart_available_data_for_write>
}
   d7c72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c76:	bd08      	pop	{r3, pc}

000d7c78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7c78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7c7a:	7c00      	ldrb	r0, [r0, #16]
   d7c7c:	f7fe fbe4 	bl	d6448 <hal_usart_available>
}
   d7c80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c84:	bd08      	pop	{r3, pc}

000d7c86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7c86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7c88:	7c00      	ldrb	r0, [r0, #16]
   d7c8a:	f7fe fbed 	bl	d6468 <hal_usart_peek>
}
   d7c8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c92:	bd08      	pop	{r3, pc}

000d7c94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7c94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7c96:	7c00      	ldrb	r0, [r0, #16]
   d7c98:	f7fe fbde 	bl	d6458 <hal_usart_read>
}
   d7c9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7ca0:	bd08      	pop	{r3, pc}

000d7ca2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7ca2:	7c00      	ldrb	r0, [r0, #16]
   d7ca4:	f7fe bbe8 	b.w	d6478 <hal_usart_flush>

000d7ca8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7caa:	7c45      	ldrb	r5, [r0, #17]
{
   d7cac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7cae:	b12d      	cbz	r5, d7cbc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7cb0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7cb2:	b003      	add	sp, #12
   d7cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7cb8:	f7fe bbbe 	b.w	d6438 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7cbc:	7c00      	ldrb	r0, [r0, #16]
   d7cbe:	9101      	str	r1, [sp, #4]
   d7cc0:	f7fe fbea 	bl	d6498 <hal_usart_available_data_for_write>
   d7cc4:	2800      	cmp	r0, #0
   d7cc6:	9901      	ldr	r1, [sp, #4]
   d7cc8:	dcf2      	bgt.n	d7cb0 <_ZN11USARTSerial5writeEh+0x8>
}
   d7cca:	4628      	mov	r0, r5
   d7ccc:	b003      	add	sp, #12
   d7cce:	bd30      	pop	{r4, r5, pc}

000d7cd0 <_ZN11USARTSerialD0Ev>:
   d7cd0:	b510      	push	{r4, lr}
   d7cd2:	2114      	movs	r1, #20
   d7cd4:	4604      	mov	r4, r0
   d7cd6:	f000 fa9e 	bl	d8216 <_ZdlPvj>
   d7cda:	4620      	mov	r0, r4
   d7cdc:	bd10      	pop	{r4, pc}
	...

000d7ce0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	f04f 0c00 	mov.w	ip, #0
   d7ce6:	4604      	mov	r4, r0
   d7ce8:	4608      	mov	r0, r1
   d7cea:	4611      	mov	r1, r2
   d7cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7cf0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7cf4:	4a04      	ldr	r2, [pc, #16]	; (d7d08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7cf6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7cf8:	2201      	movs	r2, #1
  _serial = serial;
   d7cfa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7cfc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7cfe:	461a      	mov	r2, r3
   d7d00:	f7fe fb92 	bl	d6428 <hal_usart_init>
}
   d7d04:	4620      	mov	r0, r4
   d7d06:	bd10      	pop	{r4, pc}
   d7d08:	000db4d8 	.word	0x000db4d8

000d7d0c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7d0c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7d0e:	4c0e      	ldr	r4, [pc, #56]	; (d7d48 <_Z22__fetch_global_Serial1v+0x3c>)
   d7d10:	7821      	ldrb	r1, [r4, #0]
   d7d12:	f3bf 8f5b 	dmb	ish
   d7d16:	f011 0101 	ands.w	r1, r1, #1
   d7d1a:	d112      	bne.n	d7d42 <_Z22__fetch_global_Serial1v+0x36>
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	9101      	str	r1, [sp, #4]
   d7d20:	f7fc f9bf 	bl	d40a2 <__cxa_guard_acquire>
   d7d24:	9901      	ldr	r1, [sp, #4]
   d7d26:	b160      	cbz	r0, d7d42 <_Z22__fetch_global_Serial1v+0x36>
   d7d28:	4a08      	ldr	r2, [pc, #32]	; (d7d4c <_Z22__fetch_global_Serial1v+0x40>)
   d7d2a:	4b09      	ldr	r3, [pc, #36]	; (d7d50 <_Z22__fetch_global_Serial1v+0x44>)
   d7d2c:	4809      	ldr	r0, [pc, #36]	; (d7d54 <_Z22__fetch_global_Serial1v+0x48>)
   d7d2e:	f7ff ffd7 	bl	d7ce0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7d32:	4620      	mov	r0, r4
   d7d34:	f7fc f9ba 	bl	d40ac <__cxa_guard_release>
   d7d38:	4a07      	ldr	r2, [pc, #28]	; (d7d58 <_Z22__fetch_global_Serial1v+0x4c>)
   d7d3a:	4908      	ldr	r1, [pc, #32]	; (d7d5c <_Z22__fetch_global_Serial1v+0x50>)
   d7d3c:	4805      	ldr	r0, [pc, #20]	; (d7d54 <_Z22__fetch_global_Serial1v+0x48>)
   d7d3e:	f000 fa65 	bl	d820c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7d42:	4804      	ldr	r0, [pc, #16]	; (d7d54 <_Z22__fetch_global_Serial1v+0x48>)
   d7d44:	b002      	add	sp, #8
   d7d46:	bd10      	pop	{r4, pc}
   d7d48:	2003e668 	.word	0x2003e668
   d7d4c:	2003e66c 	.word	0x2003e66c
   d7d50:	2003e6f0 	.word	0x2003e6f0
   d7d54:	2003e774 	.word	0x2003e774
   d7d58:	2003e428 	.word	0x2003e428
   d7d5c:	000d7c65 	.word	0x000d7c65

000d7d60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d60:	7441      	strb	r1, [r0, #17]
}
   d7d62:	4770      	bx	lr

000d7d64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7d64:	4770      	bx	lr

000d7d66 <_ZN9USBSerial4readEv>:
{
   d7d66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7d68:	2100      	movs	r1, #0
   d7d6a:	7c00      	ldrb	r0, [r0, #16]
   d7d6c:	f7fe fbb4 	bl	d64d8 <HAL_USB_USART_Receive_Data>
}
   d7d70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d74:	bd08      	pop	{r3, pc}

000d7d76 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7d76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7d78:	2101      	movs	r1, #1
   d7d7a:	7c00      	ldrb	r0, [r0, #16]
   d7d7c:	f7fe fbac 	bl	d64d8 <HAL_USB_USART_Receive_Data>
}
   d7d80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d84:	bd08      	pop	{r3, pc}

000d7d86 <_ZN9USBSerial17availableForWriteEv>:
{
   d7d86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7d88:	7c00      	ldrb	r0, [r0, #16]
   d7d8a:	f7fe fb9d 	bl	d64c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d7d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d92:	bd08      	pop	{r3, pc}

000d7d94 <_ZN9USBSerial9availableEv>:
{
   d7d94:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7d96:	7c00      	ldrb	r0, [r0, #16]
   d7d98:	f7fe fb8e 	bl	d64b8 <HAL_USB_USART_Available_Data>
}
   d7d9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7da0:	bd08      	pop	{r3, pc}

000d7da2 <_ZN9USBSerial5writeEh>:
{
   d7da2:	b513      	push	{r0, r1, r4, lr}
   d7da4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7da6:	7c00      	ldrb	r0, [r0, #16]
{
   d7da8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7daa:	f7fe fb8d 	bl	d64c8 <HAL_USB_USART_Available_Data_For_Write>
   d7dae:	2800      	cmp	r0, #0
   d7db0:	9901      	ldr	r1, [sp, #4]
   d7db2:	dc01      	bgt.n	d7db8 <_ZN9USBSerial5writeEh+0x16>
   d7db4:	7c60      	ldrb	r0, [r4, #17]
   d7db6:	b120      	cbz	r0, d7dc2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7db8:	7c20      	ldrb	r0, [r4, #16]
   d7dba:	f7fe fb95 	bl	d64e8 <HAL_USB_USART_Send_Data>
   d7dbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7dc2:	b002      	add	sp, #8
   d7dc4:	bd10      	pop	{r4, pc}

000d7dc6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7dc6:	7c00      	ldrb	r0, [r0, #16]
   d7dc8:	f7fe bb96 	b.w	d64f8 <HAL_USB_USART_Flush_Data>

000d7dcc <_ZN9USBSerialD0Ev>:
   d7dcc:	b510      	push	{r4, lr}
   d7dce:	2114      	movs	r1, #20
   d7dd0:	4604      	mov	r4, r0
   d7dd2:	f000 fa20 	bl	d8216 <_ZdlPvj>
   d7dd6:	4620      	mov	r0, r4
   d7dd8:	bd10      	pop	{r4, pc}
	...

000d7ddc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7ddc:	b510      	push	{r4, lr}
   d7dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7de2:	4604      	mov	r4, r0
   d7de4:	4608      	mov	r0, r1
   d7de6:	2100      	movs	r1, #0
   d7de8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7dec:	4b04      	ldr	r3, [pc, #16]	; (d7e00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7dee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7df0:	2301      	movs	r3, #1
  _serial = serial;
   d7df2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7df4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7df6:	4611      	mov	r1, r2
   d7df8:	f7fe fb56 	bl	d64a8 <HAL_USB_USART_Init>
}
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	bd10      	pop	{r4, pc}
   d7e00:	000db508 	.word	0x000db508

000d7e04 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7e04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7e06:	2214      	movs	r2, #20
{
   d7e08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7e0a:	2100      	movs	r1, #0
   d7e0c:	f000 ff80 	bl	d8d10 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7e10:	4620      	mov	r0, r4
   d7e12:	bd10      	pop	{r4, pc}

000d7e14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7e14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e16:	4c10      	ldr	r4, [pc, #64]	; (d7e58 <_Z16_fetch_usbserialv+0x44>)
{
   d7e18:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7e1a:	a803      	add	r0, sp, #12
   d7e1c:	f7ff fff2 	bl	d7e04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e20:	7821      	ldrb	r1, [r4, #0]
   d7e22:	f3bf 8f5b 	dmb	ish
   d7e26:	f011 0101 	ands.w	r1, r1, #1
   d7e2a:	d111      	bne.n	d7e50 <_Z16_fetch_usbserialv+0x3c>
   d7e2c:	4620      	mov	r0, r4
   d7e2e:	9101      	str	r1, [sp, #4]
   d7e30:	f7fc f937 	bl	d40a2 <__cxa_guard_acquire>
   d7e34:	9901      	ldr	r1, [sp, #4]
   d7e36:	b158      	cbz	r0, d7e50 <_Z16_fetch_usbserialv+0x3c>
   d7e38:	aa03      	add	r2, sp, #12
   d7e3a:	4808      	ldr	r0, [pc, #32]	; (d7e5c <_Z16_fetch_usbserialv+0x48>)
   d7e3c:	f7ff ffce 	bl	d7ddc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7e40:	4620      	mov	r0, r4
   d7e42:	f7fc f933 	bl	d40ac <__cxa_guard_release>
   d7e46:	4a06      	ldr	r2, [pc, #24]	; (d7e60 <_Z16_fetch_usbserialv+0x4c>)
   d7e48:	4906      	ldr	r1, [pc, #24]	; (d7e64 <_Z16_fetch_usbserialv+0x50>)
   d7e4a:	4804      	ldr	r0, [pc, #16]	; (d7e5c <_Z16_fetch_usbserialv+0x48>)
   d7e4c:	f000 f9de 	bl	d820c <__aeabi_atexit>
	return _usbserial;
}
   d7e50:	4802      	ldr	r0, [pc, #8]	; (d7e5c <_Z16_fetch_usbserialv+0x48>)
   d7e52:	b008      	add	sp, #32
   d7e54:	bd10      	pop	{r4, pc}
   d7e56:	bf00      	nop
   d7e58:	2003e788 	.word	0x2003e788
   d7e5c:	2003e78c 	.word	0x2003e78c
   d7e60:	2003e428 	.word	0x2003e428
   d7e64:	000d7d65 	.word	0x000d7d65

000d7e68 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7e68:	4b01      	ldr	r3, [pc, #4]	; (d7e70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7e6a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7e6c:	4770      	bx	lr
   d7e6e:	bf00      	nop
   d7e70:	2003e254 	.word	0x2003e254

000d7e74 <serialEventRun>:
{
   d7e74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7e76:	4b0b      	ldr	r3, [pc, #44]	; (d7ea4 <serialEventRun+0x30>)
   d7e78:	b143      	cbz	r3, d7e8c <serialEventRun+0x18>
   d7e7a:	f7ff ffcb 	bl	d7e14 <_Z16_fetch_usbserialv>
   d7e7e:	6803      	ldr	r3, [r0, #0]
   d7e80:	691b      	ldr	r3, [r3, #16]
   d7e82:	4798      	blx	r3
   d7e84:	2800      	cmp	r0, #0
   d7e86:	dd01      	ble.n	d7e8c <serialEventRun+0x18>
        serialEvent();
   d7e88:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7e8c:	4b06      	ldr	r3, [pc, #24]	; (d7ea8 <serialEventRun+0x34>)
   d7e8e:	b143      	cbz	r3, d7ea2 <serialEventRun+0x2e>
   d7e90:	f7ff ff3c 	bl	d7d0c <_Z22__fetch_global_Serial1v>
   d7e94:	6803      	ldr	r3, [r0, #0]
   d7e96:	691b      	ldr	r3, [r3, #16]
   d7e98:	4798      	blx	r3
   d7e9a:	2800      	cmp	r0, #0
   d7e9c:	dd01      	ble.n	d7ea2 <serialEventRun+0x2e>
        serialEvent1();
   d7e9e:	f3af 8000 	nop.w
}
   d7ea2:	bd08      	pop	{r3, pc}
	...

000d7eac <_post_loop>:
{
   d7eac:	b508      	push	{r3, lr}
	serialEventRun();
   d7eae:	f7ff ffe1 	bl	d7e74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7eb2:	f7fe f9b1 	bl	d6218 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7eb6:	4b01      	ldr	r3, [pc, #4]	; (d7ebc <_post_loop+0x10>)
   d7eb8:	6018      	str	r0, [r3, #0]
}
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	2003e7b4 	.word	0x2003e7b4

000d7ec0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7ec0:	4802      	ldr	r0, [pc, #8]	; (d7ecc <_Z33system_initialize_user_backup_ramv+0xc>)
   d7ec2:	4a03      	ldr	r2, [pc, #12]	; (d7ed0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7ec4:	4903      	ldr	r1, [pc, #12]	; (d7ed4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7ec6:	1a12      	subs	r2, r2, r0
   d7ec8:	f000 bf14 	b.w	d8cf4 <memcpy>
   d7ecc:	2003f400 	.word	0x2003f400
   d7ed0:	2003f404 	.word	0x2003f404
   d7ed4:	000db820 	.word	0x000db820

000d7ed8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7ed8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7eda:	2300      	movs	r3, #0
   d7edc:	9300      	str	r3, [sp, #0]
   d7ede:	461a      	mov	r2, r3
   d7ee0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ee4:	f7fe fb74 	bl	d65d0 <system_ctrl_set_result>
}
   d7ee8:	b003      	add	sp, #12
   d7eea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7ef0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7ef0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7ef2:	8843      	ldrh	r3, [r0, #2]
   d7ef4:	2b0a      	cmp	r3, #10
   d7ef6:	d008      	beq.n	d7f0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7ef8:	2b50      	cmp	r3, #80	; 0x50
   d7efa:	d10b      	bne.n	d7f14 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7efc:	4b09      	ldr	r3, [pc, #36]	; (d7f24 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7efe:	681b      	ldr	r3, [r3, #0]
   d7f00:	b14b      	cbz	r3, d7f16 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7f02:	b003      	add	sp, #12
   d7f04:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7f08:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7f0a:	f7ff ffe5 	bl	d7ed8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7f0e:	b003      	add	sp, #12
   d7f10:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f14:	2300      	movs	r3, #0
   d7f16:	9300      	str	r3, [sp, #0]
   d7f18:	461a      	mov	r2, r3
   d7f1a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f1e:	f7fe fb57 	bl	d65d0 <system_ctrl_set_result>
}
   d7f22:	e7f4      	b.n	d7f0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7f24:	2003e7a4 	.word	0x2003e7a4

000d7f28 <module_user_init_hook>:
{
   d7f28:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f2a:	4c12      	ldr	r4, [pc, #72]	; (d7f74 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7f2c:	4812      	ldr	r0, [pc, #72]	; (d7f78 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f2e:	4d13      	ldr	r5, [pc, #76]	; (d7f7c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7f30:	2100      	movs	r1, #0
   d7f32:	f7fe fc5d 	bl	d67f0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f36:	6823      	ldr	r3, [r4, #0]
   d7f38:	42ab      	cmp	r3, r5
   d7f3a:	4b11      	ldr	r3, [pc, #68]	; (d7f80 <module_user_init_hook+0x58>)
   d7f3c:	bf0c      	ite	eq
   d7f3e:	2201      	moveq	r2, #1
   d7f40:	2200      	movne	r2, #0
   d7f42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7f44:	d002      	beq.n	d7f4c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7f46:	f7ff ffbb 	bl	d7ec0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7f4a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7f4c:	f7fe f954 	bl	d61f8 <HAL_RNG_GetRandomNumber>
   d7f50:	4604      	mov	r4, r0
    srand(seed);
   d7f52:	f000 fee5 	bl	d8d20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7f56:	4b0b      	ldr	r3, [pc, #44]	; (d7f84 <module_user_init_hook+0x5c>)
   d7f58:	b113      	cbz	r3, d7f60 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7f60:	2100      	movs	r1, #0
   d7f62:	4808      	ldr	r0, [pc, #32]	; (d7f84 <module_user_init_hook+0x5c>)
   d7f64:	f7fe fbac 	bl	d66c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f6c:	4806      	ldr	r0, [pc, #24]	; (d7f88 <module_user_init_hook+0x60>)
   d7f6e:	2100      	movs	r1, #0
   d7f70:	f7fe bb24 	b.w	d65bc <system_ctrl_set_app_request_handler>
   d7f74:	2003f400 	.word	0x2003f400
   d7f78:	000d7e69 	.word	0x000d7e69
   d7f7c:	9a271c1e 	.word	0x9a271c1e
   d7f80:	2003e7a0 	.word	0x2003e7a0
   d7f84:	00000000 	.word	0x00000000
   d7f88:	000d7ef1 	.word	0x000d7ef1

000d7f8c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7f8c:	b508      	push	{r3, lr}
   d7f8e:	4b02      	ldr	r3, [pc, #8]	; (d7f98 <spark_protocol_instance+0xc>)
   d7f90:	681b      	ldr	r3, [r3, #0]
   d7f92:	681b      	ldr	r3, [r3, #0]
   d7f94:	9301      	str	r3, [sp, #4]
   d7f96:	bd08      	pop	{r3, pc}
   d7f98:	0003025c 	.word	0x0003025c

000d7f9c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7f9c:	b508      	push	{r3, lr}
   d7f9e:	4b02      	ldr	r3, [pc, #8]	; (d7fa8 <spark_protocol_set_product_id+0xc>)
   d7fa0:	681b      	ldr	r3, [r3, #0]
   d7fa2:	685b      	ldr	r3, [r3, #4]
   d7fa4:	9301      	str	r3, [sp, #4]
   d7fa6:	bd08      	pop	{r3, pc}
   d7fa8:	0003025c 	.word	0x0003025c

000d7fac <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7fac:	b508      	push	{r3, lr}
   d7fae:	4b02      	ldr	r3, [pc, #8]	; (d7fb8 <spark_protocol_set_product_firmware_version+0xc>)
   d7fb0:	681b      	ldr	r3, [r3, #0]
   d7fb2:	689b      	ldr	r3, [r3, #8]
   d7fb4:	9301      	str	r3, [sp, #4]
   d7fb6:	bd08      	pop	{r3, pc}
   d7fb8:	0003025c 	.word	0x0003025c

000d7fbc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7fbc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7fbe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7fc0:	d902      	bls.n	d7fc8 <pinAvailable+0xc>
    return false;
   d7fc2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7fc4:	b002      	add	sp, #8
   d7fc6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7fc8:	f1a0 030b 	sub.w	r3, r0, #11
   d7fcc:	2b02      	cmp	r3, #2
   d7fce:	d81a      	bhi.n	d8006 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7fd0:	4c17      	ldr	r4, [pc, #92]	; (d8030 <pinAvailable+0x74>)
   d7fd2:	7821      	ldrb	r1, [r4, #0]
   d7fd4:	f3bf 8f5b 	dmb	ish
   d7fd8:	f011 0101 	ands.w	r1, r1, #1
   d7fdc:	d10b      	bne.n	d7ff6 <pinAvailable+0x3a>
   d7fde:	4620      	mov	r0, r4
   d7fe0:	9101      	str	r1, [sp, #4]
   d7fe2:	f7fc f85e 	bl	d40a2 <__cxa_guard_acquire>
   d7fe6:	9901      	ldr	r1, [sp, #4]
   d7fe8:	b128      	cbz	r0, d7ff6 <pinAvailable+0x3a>
   d7fea:	4812      	ldr	r0, [pc, #72]	; (d8034 <pinAvailable+0x78>)
   d7fec:	f7ff fb90 	bl	d7710 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	f7fc f85b 	bl	d40ac <__cxa_guard_release>
   d7ff6:	4b0f      	ldr	r3, [pc, #60]	; (d8034 <pinAvailable+0x78>)
   d7ff8:	7818      	ldrb	r0, [r3, #0]
   d7ffa:	f7fe fa0d 	bl	d6418 <hal_spi_is_enabled>
   d7ffe:	2800      	cmp	r0, #0
   d8000:	d1df      	bne.n	d7fc2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8002:	2001      	movs	r0, #1
   d8004:	e7de      	b.n	d7fc4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8006:	2801      	cmp	r0, #1
   d8008:	d809      	bhi.n	d801e <pinAvailable+0x62>
   d800a:	f000 f8af 	bl	d816c <_Z19__fetch_global_Wirev>
   d800e:	2100      	movs	r1, #0
   d8010:	7c00      	ldrb	r0, [r0, #16]
   d8012:	f7fe f9b9 	bl	d6388 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8016:	f080 0001 	eor.w	r0, r0, #1
   d801a:	b2c0      	uxtb	r0, r0
   d801c:	e7d2      	b.n	d7fc4 <pinAvailable+0x8>
   d801e:	3809      	subs	r0, #9
   d8020:	2801      	cmp	r0, #1
   d8022:	d8ee      	bhi.n	d8002 <pinAvailable+0x46>
   d8024:	f7ff fe72 	bl	d7d0c <_Z22__fetch_global_Serial1v>
   d8028:	7c00      	ldrb	r0, [r0, #16]
   d802a:	f7fe fa2d 	bl	d6488 <hal_usart_is_enabled>
   d802e:	e7f2      	b.n	d8016 <pinAvailable+0x5a>
   d8030:	2003e7a8 	.word	0x2003e7a8
   d8034:	2003e7ac 	.word	0x2003e7ac

000d8038 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8038:	2823      	cmp	r0, #35	; 0x23
{
   d803a:	b538      	push	{r3, r4, r5, lr}
   d803c:	4604      	mov	r4, r0
   d803e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8040:	d80a      	bhi.n	d8058 <pinMode+0x20>
   d8042:	29ff      	cmp	r1, #255	; 0xff
   d8044:	d008      	beq.n	d8058 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8046:	f7ff ffb9 	bl	d7fbc <pinAvailable>
   d804a:	b128      	cbz	r0, d8058 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d804c:	4629      	mov	r1, r5
   d804e:	4620      	mov	r0, r4
}
   d8050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8054:	f7fe b930 	b.w	d62b8 <HAL_Pin_Mode>
}
   d8058:	bd38      	pop	{r3, r4, r5, pc}

000d805a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d805a:	b538      	push	{r3, r4, r5, lr}
   d805c:	4604      	mov	r4, r0
   d805e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8060:	f7fe f932 	bl	d62c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8064:	28ff      	cmp	r0, #255	; 0xff
   d8066:	d010      	beq.n	d808a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8068:	2806      	cmp	r0, #6
   d806a:	d804      	bhi.n	d8076 <digitalWrite+0x1c>
   d806c:	234d      	movs	r3, #77	; 0x4d
   d806e:	fa23 f000 	lsr.w	r0, r3, r0
   d8072:	07c3      	lsls	r3, r0, #31
   d8074:	d409      	bmi.n	d808a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8076:	4620      	mov	r0, r4
   d8078:	f7ff ffa0 	bl	d7fbc <pinAvailable>
   d807c:	b128      	cbz	r0, d808a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d807e:	4629      	mov	r1, r5
   d8080:	4620      	mov	r0, r4
}
   d8082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8086:	f7fe b927 	b.w	d62d8 <HAL_GPIO_Write>
}
   d808a:	bd38      	pop	{r3, r4, r5, pc}

000d808c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d808c:	b510      	push	{r4, lr}
   d808e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8090:	f7fe f91a 	bl	d62c8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8094:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d8096:	b2db      	uxtb	r3, r3
   d8098:	2b01      	cmp	r3, #1
   d809a:	d908      	bls.n	d80ae <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d809c:	4620      	mov	r0, r4
   d809e:	f7ff ff8d 	bl	d7fbc <pinAvailable>
   d80a2:	b120      	cbz	r0, d80ae <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d80a4:	4620      	mov	r0, r4
}
   d80a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d80aa:	f7fe b91d 	b.w	d62e8 <HAL_GPIO_Read>
}
   d80ae:	2000      	movs	r0, #0
   d80b0:	bd10      	pop	{r4, pc}

000d80b2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d80b2:	280d      	cmp	r0, #13
{
   d80b4:	b510      	push	{r4, lr}
   d80b6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d80b8:	bf9c      	itt	ls
   d80ba:	340e      	addls	r4, #14
   d80bc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d80be:	4620      	mov	r0, r4
   d80c0:	f7ff ff7c 	bl	d7fbc <pinAvailable>
   d80c4:	b150      	cbz	r0, d80dc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d80c6:	2103      	movs	r1, #3
   d80c8:	4620      	mov	r0, r4
   d80ca:	f7fe f8ed 	bl	d62a8 <HAL_Validate_Pin_Function>
   d80ce:	2803      	cmp	r0, #3
   d80d0:	d104      	bne.n	d80dc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d80d2:	4620      	mov	r0, r4
}
   d80d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d80d8:	f7fe b90e 	b.w	d62f8 <hal_adc_read>
}
   d80dc:	2000      	movs	r0, #0
   d80de:	bd10      	pop	{r4, pc}

000d80e0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d80e0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d80e2:	4c08      	ldr	r4, [pc, #32]	; (d8104 <_Z21__fetch_global_EEPROMv+0x24>)
   d80e4:	7823      	ldrb	r3, [r4, #0]
   d80e6:	f3bf 8f5b 	dmb	ish
   d80ea:	07db      	lsls	r3, r3, #31
   d80ec:	d408      	bmi.n	d8100 <_Z21__fetch_global_EEPROMv+0x20>
   d80ee:	4620      	mov	r0, r4
   d80f0:	f7fb ffd7 	bl	d40a2 <__cxa_guard_acquire>
   d80f4:	b120      	cbz	r0, d8100 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d80f6:	f7fe f897 	bl	d6228 <HAL_EEPROM_Init>
   d80fa:	4620      	mov	r0, r4
   d80fc:	f7fb ffd6 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d8100:	4801      	ldr	r0, [pc, #4]	; (d8108 <_Z21__fetch_global_EEPROMv+0x28>)
   d8102:	bd10      	pop	{r4, pc}
   d8104:	2003e7b8 	.word	0x2003e7b8
   d8108:	2003e7bc 	.word	0x2003e7bc

000d810c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d810c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d810e:	2300      	movs	r3, #0
   d8110:	2520      	movs	r5, #32
   d8112:	8043      	strh	r3, [r0, #2]
   d8114:	2314      	movs	r3, #20
{
   d8116:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8118:	8003      	strh	r3, [r0, #0]
   d811a:	6085      	str	r5, [r0, #8]
   d811c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d811e:	4906      	ldr	r1, [pc, #24]	; (d8138 <_Z17acquireWireBufferv+0x2c>)
   d8120:	4628      	mov	r0, r5
   d8122:	f000 f87c 	bl	d821e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8126:	4904      	ldr	r1, [pc, #16]	; (d8138 <_Z17acquireWireBufferv+0x2c>)
	};
   d8128:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d812a:	4628      	mov	r0, r5
   d812c:	f000 f877 	bl	d821e <_ZnajRKSt9nothrow_t>
	};
   d8130:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8132:	4620      	mov	r0, r4
   d8134:	bd38      	pop	{r3, r4, r5, pc}
   d8136:	bf00      	nop
   d8138:	000db530 	.word	0x000db530

000d813c <_Z18acquireWire1Bufferv>:
   d813c:	b538      	push	{r3, r4, r5, lr}
   d813e:	2300      	movs	r3, #0
   d8140:	2520      	movs	r5, #32
   d8142:	8043      	strh	r3, [r0, #2]
   d8144:	2314      	movs	r3, #20
   d8146:	4604      	mov	r4, r0
   d8148:	8003      	strh	r3, [r0, #0]
   d814a:	6085      	str	r5, [r0, #8]
   d814c:	6105      	str	r5, [r0, #16]
   d814e:	4906      	ldr	r1, [pc, #24]	; (d8168 <_Z18acquireWire1Bufferv+0x2c>)
   d8150:	4628      	mov	r0, r5
   d8152:	f000 f864 	bl	d821e <_ZnajRKSt9nothrow_t>
   d8156:	4904      	ldr	r1, [pc, #16]	; (d8168 <_Z18acquireWire1Bufferv+0x2c>)
   d8158:	6060      	str	r0, [r4, #4]
   d815a:	4628      	mov	r0, r5
   d815c:	f000 f85f 	bl	d821e <_ZnajRKSt9nothrow_t>
   d8160:	60e0      	str	r0, [r4, #12]
   d8162:	4620      	mov	r0, r4
   d8164:	bd38      	pop	{r3, r4, r5, pc}
   d8166:	bf00      	nop
   d8168:	000db530 	.word	0x000db530

000d816c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d816c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d816e:	4d0f      	ldr	r5, [pc, #60]	; (d81ac <_Z19__fetch_global_Wirev+0x40>)
   d8170:	7829      	ldrb	r1, [r5, #0]
   d8172:	f3bf 8f5b 	dmb	ish
   d8176:	f011 0401 	ands.w	r4, r1, #1
{
   d817a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d817c:	d113      	bne.n	d81a6 <_Z19__fetch_global_Wirev+0x3a>
   d817e:	4628      	mov	r0, r5
   d8180:	f7fb ff8f 	bl	d40a2 <__cxa_guard_acquire>
   d8184:	b178      	cbz	r0, d81a6 <_Z19__fetch_global_Wirev+0x3a>
   d8186:	a801      	add	r0, sp, #4
   d8188:	f7ff ffc0 	bl	d810c <_Z17acquireWireBufferv>
   d818c:	aa01      	add	r2, sp, #4
   d818e:	4621      	mov	r1, r4
   d8190:	4807      	ldr	r0, [pc, #28]	; (d81b0 <_Z19__fetch_global_Wirev+0x44>)
   d8192:	f7fe fffb 	bl	d718c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8196:	4628      	mov	r0, r5
   d8198:	f7fb ff88 	bl	d40ac <__cxa_guard_release>
   d819c:	4a05      	ldr	r2, [pc, #20]	; (d81b4 <_Z19__fetch_global_Wirev+0x48>)
   d819e:	4906      	ldr	r1, [pc, #24]	; (d81b8 <_Z19__fetch_global_Wirev+0x4c>)
   d81a0:	4803      	ldr	r0, [pc, #12]	; (d81b0 <_Z19__fetch_global_Wirev+0x44>)
   d81a2:	f000 f833 	bl	d820c <__aeabi_atexit>
	return wire;
}
   d81a6:	4802      	ldr	r0, [pc, #8]	; (d81b0 <_Z19__fetch_global_Wirev+0x44>)
   d81a8:	b007      	add	sp, #28
   d81aa:	bd30      	pop	{r4, r5, pc}
   d81ac:	2003e7c0 	.word	0x2003e7c0
   d81b0:	2003e7c8 	.word	0x2003e7c8
   d81b4:	2003e428 	.word	0x2003e428
   d81b8:	000d7135 	.word	0x000d7135

000d81bc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d81bc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d81be:	4c0f      	ldr	r4, [pc, #60]	; (d81fc <_Z20__fetch_global_Wire1v+0x40>)
   d81c0:	7823      	ldrb	r3, [r4, #0]
   d81c2:	f3bf 8f5b 	dmb	ish
   d81c6:	07db      	lsls	r3, r3, #31
{
   d81c8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d81ca:	d413      	bmi.n	d81f4 <_Z20__fetch_global_Wire1v+0x38>
   d81cc:	4620      	mov	r0, r4
   d81ce:	f7fb ff68 	bl	d40a2 <__cxa_guard_acquire>
   d81d2:	b178      	cbz	r0, d81f4 <_Z20__fetch_global_Wire1v+0x38>
   d81d4:	a801      	add	r0, sp, #4
   d81d6:	f7ff ffb1 	bl	d813c <_Z18acquireWire1Bufferv>
   d81da:	aa01      	add	r2, sp, #4
   d81dc:	2101      	movs	r1, #1
   d81de:	4808      	ldr	r0, [pc, #32]	; (d8200 <_Z20__fetch_global_Wire1v+0x44>)
   d81e0:	f7fe ffd4 	bl	d718c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d81e4:	4620      	mov	r0, r4
   d81e6:	f7fb ff61 	bl	d40ac <__cxa_guard_release>
   d81ea:	4a06      	ldr	r2, [pc, #24]	; (d8204 <_Z20__fetch_global_Wire1v+0x48>)
   d81ec:	4906      	ldr	r1, [pc, #24]	; (d8208 <_Z20__fetch_global_Wire1v+0x4c>)
   d81ee:	4804      	ldr	r0, [pc, #16]	; (d8200 <_Z20__fetch_global_Wire1v+0x44>)
   d81f0:	f000 f80c 	bl	d820c <__aeabi_atexit>
	return wire;
}
   d81f4:	4802      	ldr	r0, [pc, #8]	; (d8200 <_Z20__fetch_global_Wire1v+0x44>)
   d81f6:	b006      	add	sp, #24
   d81f8:	bd10      	pop	{r4, pc}
   d81fa:	bf00      	nop
   d81fc:	2003e7c4 	.word	0x2003e7c4
   d8200:	2003e7dc 	.word	0x2003e7dc
   d8204:	2003e428 	.word	0x2003e428
   d8208:	000d7135 	.word	0x000d7135

000d820c <__aeabi_atexit>:
   d820c:	460b      	mov	r3, r1
   d820e:	4601      	mov	r1, r0
   d8210:	4618      	mov	r0, r3
   d8212:	f000 bd61 	b.w	d8cd8 <__cxa_atexit>

000d8216 <_ZdlPvj>:
   d8216:	f7fb bf42 	b.w	d409e <_ZdlPv>

000d821a <_ZnwjRKSt9nothrow_t>:
   d821a:	f7fb bf3c 	b.w	d4096 <_Znwj>

000d821e <_ZnajRKSt9nothrow_t>:
   d821e:	f7fb bf3c 	b.w	d409a <_Znaj>

000d8222 <_ZSt25__throw_bad_function_callv>:
   d8222:	b508      	push	{r3, lr}
   d8224:	f7fe fad4 	bl	d67d0 <abort>

000d8228 <__aeabi_drsub>:
   d8228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d822c:	e002      	b.n	d8234 <__adddf3>
   d822e:	bf00      	nop

000d8230 <__aeabi_dsub>:
   d8230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8234 <__adddf3>:
   d8234:	b530      	push	{r4, r5, lr}
   d8236:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d823a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d823e:	ea94 0f05 	teq	r4, r5
   d8242:	bf08      	it	eq
   d8244:	ea90 0f02 	teqeq	r0, r2
   d8248:	bf1f      	itttt	ne
   d824a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d824e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d825a:	f000 80e2 	beq.w	d8422 <__adddf3+0x1ee>
   d825e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8266:	bfb8      	it	lt
   d8268:	426d      	neglt	r5, r5
   d826a:	dd0c      	ble.n	d8286 <__adddf3+0x52>
   d826c:	442c      	add	r4, r5
   d826e:	ea80 0202 	eor.w	r2, r0, r2
   d8272:	ea81 0303 	eor.w	r3, r1, r3
   d8276:	ea82 0000 	eor.w	r0, r2, r0
   d827a:	ea83 0101 	eor.w	r1, r3, r1
   d827e:	ea80 0202 	eor.w	r2, r0, r2
   d8282:	ea81 0303 	eor.w	r3, r1, r3
   d8286:	2d36      	cmp	r5, #54	; 0x36
   d8288:	bf88      	it	hi
   d828a:	bd30      	pophi	{r4, r5, pc}
   d828c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8290:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d829c:	d002      	beq.n	d82a4 <__adddf3+0x70>
   d829e:	4240      	negs	r0, r0
   d82a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d82a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d82a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d82ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d82b0:	d002      	beq.n	d82b8 <__adddf3+0x84>
   d82b2:	4252      	negs	r2, r2
   d82b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d82b8:	ea94 0f05 	teq	r4, r5
   d82bc:	f000 80a7 	beq.w	d840e <__adddf3+0x1da>
   d82c0:	f1a4 0401 	sub.w	r4, r4, #1
   d82c4:	f1d5 0e20 	rsbs	lr, r5, #32
   d82c8:	db0d      	blt.n	d82e6 <__adddf3+0xb2>
   d82ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d82ce:	fa22 f205 	lsr.w	r2, r2, r5
   d82d2:	1880      	adds	r0, r0, r2
   d82d4:	f141 0100 	adc.w	r1, r1, #0
   d82d8:	fa03 f20e 	lsl.w	r2, r3, lr
   d82dc:	1880      	adds	r0, r0, r2
   d82de:	fa43 f305 	asr.w	r3, r3, r5
   d82e2:	4159      	adcs	r1, r3
   d82e4:	e00e      	b.n	d8304 <__adddf3+0xd0>
   d82e6:	f1a5 0520 	sub.w	r5, r5, #32
   d82ea:	f10e 0e20 	add.w	lr, lr, #32
   d82ee:	2a01      	cmp	r2, #1
   d82f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d82f4:	bf28      	it	cs
   d82f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d82fa:	fa43 f305 	asr.w	r3, r3, r5
   d82fe:	18c0      	adds	r0, r0, r3
   d8300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8308:	d507      	bpl.n	d831a <__adddf3+0xe6>
   d830a:	f04f 0e00 	mov.w	lr, #0
   d830e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8312:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8316:	eb6e 0101 	sbc.w	r1, lr, r1
   d831a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d831e:	d31b      	bcc.n	d8358 <__adddf3+0x124>
   d8320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8324:	d30c      	bcc.n	d8340 <__adddf3+0x10c>
   d8326:	0849      	lsrs	r1, r1, #1
   d8328:	ea5f 0030 	movs.w	r0, r0, rrx
   d832c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8330:	f104 0401 	add.w	r4, r4, #1
   d8334:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d833c:	f080 809a 	bcs.w	d8474 <__adddf3+0x240>
   d8340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8344:	bf08      	it	eq
   d8346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d834a:	f150 0000 	adcs.w	r0, r0, #0
   d834e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8352:	ea41 0105 	orr.w	r1, r1, r5
   d8356:	bd30      	pop	{r4, r5, pc}
   d8358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d835c:	4140      	adcs	r0, r0
   d835e:	eb41 0101 	adc.w	r1, r1, r1
   d8362:	3c01      	subs	r4, #1
   d8364:	bf28      	it	cs
   d8366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d836a:	d2e9      	bcs.n	d8340 <__adddf3+0x10c>
   d836c:	f091 0f00 	teq	r1, #0
   d8370:	bf04      	itt	eq
   d8372:	4601      	moveq	r1, r0
   d8374:	2000      	moveq	r0, #0
   d8376:	fab1 f381 	clz	r3, r1
   d837a:	bf08      	it	eq
   d837c:	3320      	addeq	r3, #32
   d837e:	f1a3 030b 	sub.w	r3, r3, #11
   d8382:	f1b3 0220 	subs.w	r2, r3, #32
   d8386:	da0c      	bge.n	d83a2 <__adddf3+0x16e>
   d8388:	320c      	adds	r2, #12
   d838a:	dd08      	ble.n	d839e <__adddf3+0x16a>
   d838c:	f102 0c14 	add.w	ip, r2, #20
   d8390:	f1c2 020c 	rsb	r2, r2, #12
   d8394:	fa01 f00c 	lsl.w	r0, r1, ip
   d8398:	fa21 f102 	lsr.w	r1, r1, r2
   d839c:	e00c      	b.n	d83b8 <__adddf3+0x184>
   d839e:	f102 0214 	add.w	r2, r2, #20
   d83a2:	bfd8      	it	le
   d83a4:	f1c2 0c20 	rsble	ip, r2, #32
   d83a8:	fa01 f102 	lsl.w	r1, r1, r2
   d83ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d83b0:	bfdc      	itt	le
   d83b2:	ea41 010c 	orrle.w	r1, r1, ip
   d83b6:	4090      	lslle	r0, r2
   d83b8:	1ae4      	subs	r4, r4, r3
   d83ba:	bfa2      	ittt	ge
   d83bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d83c0:	4329      	orrge	r1, r5
   d83c2:	bd30      	popge	{r4, r5, pc}
   d83c4:	ea6f 0404 	mvn.w	r4, r4
   d83c8:	3c1f      	subs	r4, #31
   d83ca:	da1c      	bge.n	d8406 <__adddf3+0x1d2>
   d83cc:	340c      	adds	r4, #12
   d83ce:	dc0e      	bgt.n	d83ee <__adddf3+0x1ba>
   d83d0:	f104 0414 	add.w	r4, r4, #20
   d83d4:	f1c4 0220 	rsb	r2, r4, #32
   d83d8:	fa20 f004 	lsr.w	r0, r0, r4
   d83dc:	fa01 f302 	lsl.w	r3, r1, r2
   d83e0:	ea40 0003 	orr.w	r0, r0, r3
   d83e4:	fa21 f304 	lsr.w	r3, r1, r4
   d83e8:	ea45 0103 	orr.w	r1, r5, r3
   d83ec:	bd30      	pop	{r4, r5, pc}
   d83ee:	f1c4 040c 	rsb	r4, r4, #12
   d83f2:	f1c4 0220 	rsb	r2, r4, #32
   d83f6:	fa20 f002 	lsr.w	r0, r0, r2
   d83fa:	fa01 f304 	lsl.w	r3, r1, r4
   d83fe:	ea40 0003 	orr.w	r0, r0, r3
   d8402:	4629      	mov	r1, r5
   d8404:	bd30      	pop	{r4, r5, pc}
   d8406:	fa21 f004 	lsr.w	r0, r1, r4
   d840a:	4629      	mov	r1, r5
   d840c:	bd30      	pop	{r4, r5, pc}
   d840e:	f094 0f00 	teq	r4, #0
   d8412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8416:	bf06      	itte	eq
   d8418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d841c:	3401      	addeq	r4, #1
   d841e:	3d01      	subne	r5, #1
   d8420:	e74e      	b.n	d82c0 <__adddf3+0x8c>
   d8422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8426:	bf18      	it	ne
   d8428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d842c:	d029      	beq.n	d8482 <__adddf3+0x24e>
   d842e:	ea94 0f05 	teq	r4, r5
   d8432:	bf08      	it	eq
   d8434:	ea90 0f02 	teqeq	r0, r2
   d8438:	d005      	beq.n	d8446 <__adddf3+0x212>
   d843a:	ea54 0c00 	orrs.w	ip, r4, r0
   d843e:	bf04      	itt	eq
   d8440:	4619      	moveq	r1, r3
   d8442:	4610      	moveq	r0, r2
   d8444:	bd30      	pop	{r4, r5, pc}
   d8446:	ea91 0f03 	teq	r1, r3
   d844a:	bf1e      	ittt	ne
   d844c:	2100      	movne	r1, #0
   d844e:	2000      	movne	r0, #0
   d8450:	bd30      	popne	{r4, r5, pc}
   d8452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8456:	d105      	bne.n	d8464 <__adddf3+0x230>
   d8458:	0040      	lsls	r0, r0, #1
   d845a:	4149      	adcs	r1, r1
   d845c:	bf28      	it	cs
   d845e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8462:	bd30      	pop	{r4, r5, pc}
   d8464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8468:	bf3c      	itt	cc
   d846a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d846e:	bd30      	popcc	{r4, r5, pc}
   d8470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d847c:	f04f 0000 	mov.w	r0, #0
   d8480:	bd30      	pop	{r4, r5, pc}
   d8482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8486:	bf1a      	itte	ne
   d8488:	4619      	movne	r1, r3
   d848a:	4610      	movne	r0, r2
   d848c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8490:	bf1c      	itt	ne
   d8492:	460b      	movne	r3, r1
   d8494:	4602      	movne	r2, r0
   d8496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d849a:	bf06      	itte	eq
   d849c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d84a0:	ea91 0f03 	teqeq	r1, r3
   d84a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d84a8:	bd30      	pop	{r4, r5, pc}
   d84aa:	bf00      	nop

000d84ac <__aeabi_ui2d>:
   d84ac:	f090 0f00 	teq	r0, #0
   d84b0:	bf04      	itt	eq
   d84b2:	2100      	moveq	r1, #0
   d84b4:	4770      	bxeq	lr
   d84b6:	b530      	push	{r4, r5, lr}
   d84b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d84bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84c0:	f04f 0500 	mov.w	r5, #0
   d84c4:	f04f 0100 	mov.w	r1, #0
   d84c8:	e750      	b.n	d836c <__adddf3+0x138>
   d84ca:	bf00      	nop

000d84cc <__aeabi_i2d>:
   d84cc:	f090 0f00 	teq	r0, #0
   d84d0:	bf04      	itt	eq
   d84d2:	2100      	moveq	r1, #0
   d84d4:	4770      	bxeq	lr
   d84d6:	b530      	push	{r4, r5, lr}
   d84d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d84dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d84e4:	bf48      	it	mi
   d84e6:	4240      	negmi	r0, r0
   d84e8:	f04f 0100 	mov.w	r1, #0
   d84ec:	e73e      	b.n	d836c <__adddf3+0x138>
   d84ee:	bf00      	nop

000d84f0 <__aeabi_f2d>:
   d84f0:	0042      	lsls	r2, r0, #1
   d84f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d84f6:	ea4f 0131 	mov.w	r1, r1, rrx
   d84fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d84fe:	bf1f      	itttt	ne
   d8500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d850c:	4770      	bxne	lr
   d850e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8512:	bf08      	it	eq
   d8514:	4770      	bxeq	lr
   d8516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d851a:	bf04      	itt	eq
   d851c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8520:	4770      	bxeq	lr
   d8522:	b530      	push	{r4, r5, lr}
   d8524:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d852c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8530:	e71c      	b.n	d836c <__adddf3+0x138>
   d8532:	bf00      	nop

000d8534 <__aeabi_ul2d>:
   d8534:	ea50 0201 	orrs.w	r2, r0, r1
   d8538:	bf08      	it	eq
   d853a:	4770      	bxeq	lr
   d853c:	b530      	push	{r4, r5, lr}
   d853e:	f04f 0500 	mov.w	r5, #0
   d8542:	e00a      	b.n	d855a <__aeabi_l2d+0x16>

000d8544 <__aeabi_l2d>:
   d8544:	ea50 0201 	orrs.w	r2, r0, r1
   d8548:	bf08      	it	eq
   d854a:	4770      	bxeq	lr
   d854c:	b530      	push	{r4, r5, lr}
   d854e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8552:	d502      	bpl.n	d855a <__aeabi_l2d+0x16>
   d8554:	4240      	negs	r0, r0
   d8556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d855a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d855e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8566:	f43f aed8 	beq.w	d831a <__adddf3+0xe6>
   d856a:	f04f 0203 	mov.w	r2, #3
   d856e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8572:	bf18      	it	ne
   d8574:	3203      	addne	r2, #3
   d8576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d857a:	bf18      	it	ne
   d857c:	3203      	addne	r2, #3
   d857e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8582:	f1c2 0320 	rsb	r3, r2, #32
   d8586:	fa00 fc03 	lsl.w	ip, r0, r3
   d858a:	fa20 f002 	lsr.w	r0, r0, r2
   d858e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8592:	ea40 000e 	orr.w	r0, r0, lr
   d8596:	fa21 f102 	lsr.w	r1, r1, r2
   d859a:	4414      	add	r4, r2
   d859c:	e6bd      	b.n	d831a <__adddf3+0xe6>
   d859e:	bf00      	nop

000d85a0 <__aeabi_dmul>:
   d85a0:	b570      	push	{r4, r5, r6, lr}
   d85a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d85a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d85aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d85ae:	bf1d      	ittte	ne
   d85b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d85b4:	ea94 0f0c 	teqne	r4, ip
   d85b8:	ea95 0f0c 	teqne	r5, ip
   d85bc:	f000 f8de 	bleq	d877c <__aeabi_dmul+0x1dc>
   d85c0:	442c      	add	r4, r5
   d85c2:	ea81 0603 	eor.w	r6, r1, r3
   d85c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d85ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d85ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d85d2:	bf18      	it	ne
   d85d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d85d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d85e0:	d038      	beq.n	d8654 <__aeabi_dmul+0xb4>
   d85e2:	fba0 ce02 	umull	ip, lr, r0, r2
   d85e6:	f04f 0500 	mov.w	r5, #0
   d85ea:	fbe1 e502 	umlal	lr, r5, r1, r2
   d85ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d85f2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d85f6:	f04f 0600 	mov.w	r6, #0
   d85fa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d85fe:	f09c 0f00 	teq	ip, #0
   d8602:	bf18      	it	ne
   d8604:	f04e 0e01 	orrne.w	lr, lr, #1
   d8608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d860c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8614:	d204      	bcs.n	d8620 <__aeabi_dmul+0x80>
   d8616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d861a:	416d      	adcs	r5, r5
   d861c:	eb46 0606 	adc.w	r6, r6, r6
   d8620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d862c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8638:	bf88      	it	hi
   d863a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d863e:	d81e      	bhi.n	d867e <__aeabi_dmul+0xde>
   d8640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8644:	bf08      	it	eq
   d8646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d864a:	f150 0000 	adcs.w	r0, r0, #0
   d864e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8652:	bd70      	pop	{r4, r5, r6, pc}
   d8654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8658:	ea46 0101 	orr.w	r1, r6, r1
   d865c:	ea40 0002 	orr.w	r0, r0, r2
   d8660:	ea81 0103 	eor.w	r1, r1, r3
   d8664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8668:	bfc2      	ittt	gt
   d866a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d866e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8672:	bd70      	popgt	{r4, r5, r6, pc}
   d8674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8678:	f04f 0e00 	mov.w	lr, #0
   d867c:	3c01      	subs	r4, #1
   d867e:	f300 80ab 	bgt.w	d87d8 <__aeabi_dmul+0x238>
   d8682:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8686:	bfde      	ittt	le
   d8688:	2000      	movle	r0, #0
   d868a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d868e:	bd70      	pople	{r4, r5, r6, pc}
   d8690:	f1c4 0400 	rsb	r4, r4, #0
   d8694:	3c20      	subs	r4, #32
   d8696:	da35      	bge.n	d8704 <__aeabi_dmul+0x164>
   d8698:	340c      	adds	r4, #12
   d869a:	dc1b      	bgt.n	d86d4 <__aeabi_dmul+0x134>
   d869c:	f104 0414 	add.w	r4, r4, #20
   d86a0:	f1c4 0520 	rsb	r5, r4, #32
   d86a4:	fa00 f305 	lsl.w	r3, r0, r5
   d86a8:	fa20 f004 	lsr.w	r0, r0, r4
   d86ac:	fa01 f205 	lsl.w	r2, r1, r5
   d86b0:	ea40 0002 	orr.w	r0, r0, r2
   d86b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d86b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d86bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d86c0:	fa21 f604 	lsr.w	r6, r1, r4
   d86c4:	eb42 0106 	adc.w	r1, r2, r6
   d86c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d86cc:	bf08      	it	eq
   d86ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d86d2:	bd70      	pop	{r4, r5, r6, pc}
   d86d4:	f1c4 040c 	rsb	r4, r4, #12
   d86d8:	f1c4 0520 	rsb	r5, r4, #32
   d86dc:	fa00 f304 	lsl.w	r3, r0, r4
   d86e0:	fa20 f005 	lsr.w	r0, r0, r5
   d86e4:	fa01 f204 	lsl.w	r2, r1, r4
   d86e8:	ea40 0002 	orr.w	r0, r0, r2
   d86ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d86f4:	f141 0100 	adc.w	r1, r1, #0
   d86f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d86fc:	bf08      	it	eq
   d86fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8702:	bd70      	pop	{r4, r5, r6, pc}
   d8704:	f1c4 0520 	rsb	r5, r4, #32
   d8708:	fa00 f205 	lsl.w	r2, r0, r5
   d870c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8710:	fa20 f304 	lsr.w	r3, r0, r4
   d8714:	fa01 f205 	lsl.w	r2, r1, r5
   d8718:	ea43 0302 	orr.w	r3, r3, r2
   d871c:	fa21 f004 	lsr.w	r0, r1, r4
   d8720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8724:	fa21 f204 	lsr.w	r2, r1, r4
   d8728:	ea20 0002 	bic.w	r0, r0, r2
   d872c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8734:	bf08      	it	eq
   d8736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d873a:	bd70      	pop	{r4, r5, r6, pc}
   d873c:	f094 0f00 	teq	r4, #0
   d8740:	d10f      	bne.n	d8762 <__aeabi_dmul+0x1c2>
   d8742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8746:	0040      	lsls	r0, r0, #1
   d8748:	eb41 0101 	adc.w	r1, r1, r1
   d874c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8750:	bf08      	it	eq
   d8752:	3c01      	subeq	r4, #1
   d8754:	d0f7      	beq.n	d8746 <__aeabi_dmul+0x1a6>
   d8756:	ea41 0106 	orr.w	r1, r1, r6
   d875a:	f095 0f00 	teq	r5, #0
   d875e:	bf18      	it	ne
   d8760:	4770      	bxne	lr
   d8762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8766:	0052      	lsls	r2, r2, #1
   d8768:	eb43 0303 	adc.w	r3, r3, r3
   d876c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8770:	bf08      	it	eq
   d8772:	3d01      	subeq	r5, #1
   d8774:	d0f7      	beq.n	d8766 <__aeabi_dmul+0x1c6>
   d8776:	ea43 0306 	orr.w	r3, r3, r6
   d877a:	4770      	bx	lr
   d877c:	ea94 0f0c 	teq	r4, ip
   d8780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8784:	bf18      	it	ne
   d8786:	ea95 0f0c 	teqne	r5, ip
   d878a:	d00c      	beq.n	d87a6 <__aeabi_dmul+0x206>
   d878c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8790:	bf18      	it	ne
   d8792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8796:	d1d1      	bne.n	d873c <__aeabi_dmul+0x19c>
   d8798:	ea81 0103 	eor.w	r1, r1, r3
   d879c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87a0:	f04f 0000 	mov.w	r0, #0
   d87a4:	bd70      	pop	{r4, r5, r6, pc}
   d87a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87aa:	bf06      	itte	eq
   d87ac:	4610      	moveq	r0, r2
   d87ae:	4619      	moveq	r1, r3
   d87b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87b4:	d019      	beq.n	d87ea <__aeabi_dmul+0x24a>
   d87b6:	ea94 0f0c 	teq	r4, ip
   d87ba:	d102      	bne.n	d87c2 <__aeabi_dmul+0x222>
   d87bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d87c0:	d113      	bne.n	d87ea <__aeabi_dmul+0x24a>
   d87c2:	ea95 0f0c 	teq	r5, ip
   d87c6:	d105      	bne.n	d87d4 <__aeabi_dmul+0x234>
   d87c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d87cc:	bf1c      	itt	ne
   d87ce:	4610      	movne	r0, r2
   d87d0:	4619      	movne	r1, r3
   d87d2:	d10a      	bne.n	d87ea <__aeabi_dmul+0x24a>
   d87d4:	ea81 0103 	eor.w	r1, r1, r3
   d87d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d87e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d87e4:	f04f 0000 	mov.w	r0, #0
   d87e8:	bd70      	pop	{r4, r5, r6, pc}
   d87ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d87ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d87f2:	bd70      	pop	{r4, r5, r6, pc}

000d87f4 <__aeabi_ddiv>:
   d87f4:	b570      	push	{r4, r5, r6, lr}
   d87f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d87fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d87fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8802:	bf1d      	ittte	ne
   d8804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8808:	ea94 0f0c 	teqne	r4, ip
   d880c:	ea95 0f0c 	teqne	r5, ip
   d8810:	f000 f8a7 	bleq	d8962 <__aeabi_ddiv+0x16e>
   d8814:	eba4 0405 	sub.w	r4, r4, r5
   d8818:	ea81 0e03 	eor.w	lr, r1, r3
   d881c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8820:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8824:	f000 8088 	beq.w	d8938 <__aeabi_ddiv+0x144>
   d8828:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d882c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8838:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d883c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8844:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d884c:	429d      	cmp	r5, r3
   d884e:	bf08      	it	eq
   d8850:	4296      	cmpeq	r6, r2
   d8852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8856:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d885a:	d202      	bcs.n	d8862 <__aeabi_ddiv+0x6e>
   d885c:	085b      	lsrs	r3, r3, #1
   d885e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8862:	1ab6      	subs	r6, r6, r2
   d8864:	eb65 0503 	sbc.w	r5, r5, r3
   d8868:	085b      	lsrs	r3, r3, #1
   d886a:	ea4f 0232 	mov.w	r2, r2, rrx
   d886e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8876:	ebb6 0e02 	subs.w	lr, r6, r2
   d887a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d887e:	bf22      	ittt	cs
   d8880:	1ab6      	subcs	r6, r6, r2
   d8882:	4675      	movcs	r5, lr
   d8884:	ea40 000c 	orrcs.w	r0, r0, ip
   d8888:	085b      	lsrs	r3, r3, #1
   d888a:	ea4f 0232 	mov.w	r2, r2, rrx
   d888e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8892:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8896:	bf22      	ittt	cs
   d8898:	1ab6      	subcs	r6, r6, r2
   d889a:	4675      	movcs	r5, lr
   d889c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d88a0:	085b      	lsrs	r3, r3, #1
   d88a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88ae:	bf22      	ittt	cs
   d88b0:	1ab6      	subcs	r6, r6, r2
   d88b2:	4675      	movcs	r5, lr
   d88b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d88b8:	085b      	lsrs	r3, r3, #1
   d88ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d88be:	ebb6 0e02 	subs.w	lr, r6, r2
   d88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88c6:	bf22      	ittt	cs
   d88c8:	1ab6      	subcs	r6, r6, r2
   d88ca:	4675      	movcs	r5, lr
   d88cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d88d0:	ea55 0e06 	orrs.w	lr, r5, r6
   d88d4:	d018      	beq.n	d8908 <__aeabi_ddiv+0x114>
   d88d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d88da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d88de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d88e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d88e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d88ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d88ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d88f2:	d1c0      	bne.n	d8876 <__aeabi_ddiv+0x82>
   d88f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d88f8:	d10b      	bne.n	d8912 <__aeabi_ddiv+0x11e>
   d88fa:	ea41 0100 	orr.w	r1, r1, r0
   d88fe:	f04f 0000 	mov.w	r0, #0
   d8902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8906:	e7b6      	b.n	d8876 <__aeabi_ddiv+0x82>
   d8908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d890c:	bf04      	itt	eq
   d890e:	4301      	orreq	r1, r0
   d8910:	2000      	moveq	r0, #0
   d8912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8916:	bf88      	it	hi
   d8918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d891c:	f63f aeaf 	bhi.w	d867e <__aeabi_dmul+0xde>
   d8920:	ebb5 0c03 	subs.w	ip, r5, r3
   d8924:	bf04      	itt	eq
   d8926:	ebb6 0c02 	subseq.w	ip, r6, r2
   d892a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d892e:	f150 0000 	adcs.w	r0, r0, #0
   d8932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8936:	bd70      	pop	{r4, r5, r6, pc}
   d8938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d893c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8944:	bfc2      	ittt	gt
   d8946:	ebd4 050c 	rsbsgt	r5, r4, ip
   d894a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d894e:	bd70      	popgt	{r4, r5, r6, pc}
   d8950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8954:	f04f 0e00 	mov.w	lr, #0
   d8958:	3c01      	subs	r4, #1
   d895a:	e690      	b.n	d867e <__aeabi_dmul+0xde>
   d895c:	ea45 0e06 	orr.w	lr, r5, r6
   d8960:	e68d      	b.n	d867e <__aeabi_dmul+0xde>
   d8962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8966:	ea94 0f0c 	teq	r4, ip
   d896a:	bf08      	it	eq
   d896c:	ea95 0f0c 	teqeq	r5, ip
   d8970:	f43f af3b 	beq.w	d87ea <__aeabi_dmul+0x24a>
   d8974:	ea94 0f0c 	teq	r4, ip
   d8978:	d10a      	bne.n	d8990 <__aeabi_ddiv+0x19c>
   d897a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d897e:	f47f af34 	bne.w	d87ea <__aeabi_dmul+0x24a>
   d8982:	ea95 0f0c 	teq	r5, ip
   d8986:	f47f af25 	bne.w	d87d4 <__aeabi_dmul+0x234>
   d898a:	4610      	mov	r0, r2
   d898c:	4619      	mov	r1, r3
   d898e:	e72c      	b.n	d87ea <__aeabi_dmul+0x24a>
   d8990:	ea95 0f0c 	teq	r5, ip
   d8994:	d106      	bne.n	d89a4 <__aeabi_ddiv+0x1b0>
   d8996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d899a:	f43f aefd 	beq.w	d8798 <__aeabi_dmul+0x1f8>
   d899e:	4610      	mov	r0, r2
   d89a0:	4619      	mov	r1, r3
   d89a2:	e722      	b.n	d87ea <__aeabi_dmul+0x24a>
   d89a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d89a8:	bf18      	it	ne
   d89aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d89ae:	f47f aec5 	bne.w	d873c <__aeabi_dmul+0x19c>
   d89b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d89b6:	f47f af0d 	bne.w	d87d4 <__aeabi_dmul+0x234>
   d89ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d89be:	f47f aeeb 	bne.w	d8798 <__aeabi_dmul+0x1f8>
   d89c2:	e712      	b.n	d87ea <__aeabi_dmul+0x24a>

000d89c4 <__gedf2>:
   d89c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d89c8:	e006      	b.n	d89d8 <__cmpdf2+0x4>
   d89ca:	bf00      	nop

000d89cc <__ledf2>:
   d89cc:	f04f 0c01 	mov.w	ip, #1
   d89d0:	e002      	b.n	d89d8 <__cmpdf2+0x4>
   d89d2:	bf00      	nop

000d89d4 <__cmpdf2>:
   d89d4:	f04f 0c01 	mov.w	ip, #1
   d89d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d89dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d89e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d89e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d89e8:	bf18      	it	ne
   d89ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d89ee:	d01b      	beq.n	d8a28 <__cmpdf2+0x54>
   d89f0:	b001      	add	sp, #4
   d89f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d89f6:	bf0c      	ite	eq
   d89f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d89fc:	ea91 0f03 	teqne	r1, r3
   d8a00:	bf02      	ittt	eq
   d8a02:	ea90 0f02 	teqeq	r0, r2
   d8a06:	2000      	moveq	r0, #0
   d8a08:	4770      	bxeq	lr
   d8a0a:	f110 0f00 	cmn.w	r0, #0
   d8a0e:	ea91 0f03 	teq	r1, r3
   d8a12:	bf58      	it	pl
   d8a14:	4299      	cmppl	r1, r3
   d8a16:	bf08      	it	eq
   d8a18:	4290      	cmpeq	r0, r2
   d8a1a:	bf2c      	ite	cs
   d8a1c:	17d8      	asrcs	r0, r3, #31
   d8a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8a22:	f040 0001 	orr.w	r0, r0, #1
   d8a26:	4770      	bx	lr
   d8a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a30:	d102      	bne.n	d8a38 <__cmpdf2+0x64>
   d8a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8a36:	d107      	bne.n	d8a48 <__cmpdf2+0x74>
   d8a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a40:	d1d6      	bne.n	d89f0 <__cmpdf2+0x1c>
   d8a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8a46:	d0d3      	beq.n	d89f0 <__cmpdf2+0x1c>
   d8a48:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8a4c:	4770      	bx	lr
   d8a4e:	bf00      	nop

000d8a50 <__aeabi_cdrcmple>:
   d8a50:	4684      	mov	ip, r0
   d8a52:	4610      	mov	r0, r2
   d8a54:	4662      	mov	r2, ip
   d8a56:	468c      	mov	ip, r1
   d8a58:	4619      	mov	r1, r3
   d8a5a:	4663      	mov	r3, ip
   d8a5c:	e000      	b.n	d8a60 <__aeabi_cdcmpeq>
   d8a5e:	bf00      	nop

000d8a60 <__aeabi_cdcmpeq>:
   d8a60:	b501      	push	{r0, lr}
   d8a62:	f7ff ffb7 	bl	d89d4 <__cmpdf2>
   d8a66:	2800      	cmp	r0, #0
   d8a68:	bf48      	it	mi
   d8a6a:	f110 0f00 	cmnmi.w	r0, #0
   d8a6e:	bd01      	pop	{r0, pc}

000d8a70 <__aeabi_dcmpeq>:
   d8a70:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a74:	f7ff fff4 	bl	d8a60 <__aeabi_cdcmpeq>
   d8a78:	bf0c      	ite	eq
   d8a7a:	2001      	moveq	r0, #1
   d8a7c:	2000      	movne	r0, #0
   d8a7e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a82:	bf00      	nop

000d8a84 <__aeabi_dcmplt>:
   d8a84:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a88:	f7ff ffea 	bl	d8a60 <__aeabi_cdcmpeq>
   d8a8c:	bf34      	ite	cc
   d8a8e:	2001      	movcc	r0, #1
   d8a90:	2000      	movcs	r0, #0
   d8a92:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a96:	bf00      	nop

000d8a98 <__aeabi_dcmple>:
   d8a98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a9c:	f7ff ffe0 	bl	d8a60 <__aeabi_cdcmpeq>
   d8aa0:	bf94      	ite	ls
   d8aa2:	2001      	movls	r0, #1
   d8aa4:	2000      	movhi	r0, #0
   d8aa6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8aaa:	bf00      	nop

000d8aac <__aeabi_dcmpge>:
   d8aac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ab0:	f7ff ffce 	bl	d8a50 <__aeabi_cdrcmple>
   d8ab4:	bf94      	ite	ls
   d8ab6:	2001      	movls	r0, #1
   d8ab8:	2000      	movhi	r0, #0
   d8aba:	f85d fb08 	ldr.w	pc, [sp], #8
   d8abe:	bf00      	nop

000d8ac0 <__aeabi_dcmpgt>:
   d8ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ac4:	f7ff ffc4 	bl	d8a50 <__aeabi_cdrcmple>
   d8ac8:	bf34      	ite	cc
   d8aca:	2001      	movcc	r0, #1
   d8acc:	2000      	movcs	r0, #0
   d8ace:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ad2:	bf00      	nop

000d8ad4 <__aeabi_dcmpun>:
   d8ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8adc:	d102      	bne.n	d8ae4 <__aeabi_dcmpun+0x10>
   d8ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8ae2:	d10a      	bne.n	d8afa <__aeabi_dcmpun+0x26>
   d8ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8aec:	d102      	bne.n	d8af4 <__aeabi_dcmpun+0x20>
   d8aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8af2:	d102      	bne.n	d8afa <__aeabi_dcmpun+0x26>
   d8af4:	f04f 0000 	mov.w	r0, #0
   d8af8:	4770      	bx	lr
   d8afa:	f04f 0001 	mov.w	r0, #1
   d8afe:	4770      	bx	lr

000d8b00 <__aeabi_d2uiz>:
   d8b00:	004a      	lsls	r2, r1, #1
   d8b02:	d211      	bcs.n	d8b28 <__aeabi_d2uiz+0x28>
   d8b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b08:	d211      	bcs.n	d8b2e <__aeabi_d2uiz+0x2e>
   d8b0a:	d50d      	bpl.n	d8b28 <__aeabi_d2uiz+0x28>
   d8b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8b14:	d40e      	bmi.n	d8b34 <__aeabi_d2uiz+0x34>
   d8b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8b22:	fa23 f002 	lsr.w	r0, r3, r2
   d8b26:	4770      	bx	lr
   d8b28:	f04f 0000 	mov.w	r0, #0
   d8b2c:	4770      	bx	lr
   d8b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8b32:	d102      	bne.n	d8b3a <__aeabi_d2uiz+0x3a>
   d8b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8b38:	4770      	bx	lr
   d8b3a:	f04f 0000 	mov.w	r0, #0
   d8b3e:	4770      	bx	lr

000d8b40 <__aeabi_d2f>:
   d8b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8b48:	bf24      	itt	cs
   d8b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8b52:	d90d      	bls.n	d8b70 <__aeabi_d2f+0x30>
   d8b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8b68:	bf08      	it	eq
   d8b6a:	f020 0001 	biceq.w	r0, r0, #1
   d8b6e:	4770      	bx	lr
   d8b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8b74:	d121      	bne.n	d8bba <__aeabi_d2f+0x7a>
   d8b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8b7a:	bfbc      	itt	lt
   d8b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8b80:	4770      	bxlt	lr
   d8b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8b8a:	f1c2 0218 	rsb	r2, r2, #24
   d8b8e:	f1c2 0c20 	rsb	ip, r2, #32
   d8b92:	fa10 f30c 	lsls.w	r3, r0, ip
   d8b96:	fa20 f002 	lsr.w	r0, r0, r2
   d8b9a:	bf18      	it	ne
   d8b9c:	f040 0001 	orrne.w	r0, r0, #1
   d8ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8bac:	ea40 000c 	orr.w	r0, r0, ip
   d8bb0:	fa23 f302 	lsr.w	r3, r3, r2
   d8bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8bb8:	e7cc      	b.n	d8b54 <__aeabi_d2f+0x14>
   d8bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8bbe:	d107      	bne.n	d8bd0 <__aeabi_d2f+0x90>
   d8bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8bc4:	bf1e      	ittt	ne
   d8bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8bce:	4770      	bxne	lr
   d8bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8bdc:	4770      	bx	lr
   d8bde:	bf00      	nop

000d8be0 <__aeabi_f2lz>:
   d8be0:	ee07 0a90 	vmov	s15, r0
   d8be4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d8be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8bec:	d401      	bmi.n	d8bf2 <__aeabi_f2lz+0x12>
   d8bee:	f000 b80b 	b.w	d8c08 <__aeabi_f2ulz>
   d8bf2:	eef1 7a67 	vneg.f32	s15, s15
   d8bf6:	b508      	push	{r3, lr}
   d8bf8:	ee17 0a90 	vmov	r0, s15
   d8bfc:	f000 f804 	bl	d8c08 <__aeabi_f2ulz>
   d8c00:	4240      	negs	r0, r0
   d8c02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8c06:	bd08      	pop	{r3, pc}

000d8c08 <__aeabi_f2ulz>:
   d8c08:	b5d0      	push	{r4, r6, r7, lr}
   d8c0a:	f7ff fc71 	bl	d84f0 <__aeabi_f2d>
   d8c0e:	4b0c      	ldr	r3, [pc, #48]	; (d8c40 <__aeabi_f2ulz+0x38>)
   d8c10:	2200      	movs	r2, #0
   d8c12:	4606      	mov	r6, r0
   d8c14:	460f      	mov	r7, r1
   d8c16:	f7ff fcc3 	bl	d85a0 <__aeabi_dmul>
   d8c1a:	f7ff ff71 	bl	d8b00 <__aeabi_d2uiz>
   d8c1e:	4604      	mov	r4, r0
   d8c20:	f7ff fc44 	bl	d84ac <__aeabi_ui2d>
   d8c24:	4b07      	ldr	r3, [pc, #28]	; (d8c44 <__aeabi_f2ulz+0x3c>)
   d8c26:	2200      	movs	r2, #0
   d8c28:	f7ff fcba 	bl	d85a0 <__aeabi_dmul>
   d8c2c:	4602      	mov	r2, r0
   d8c2e:	460b      	mov	r3, r1
   d8c30:	4630      	mov	r0, r6
   d8c32:	4639      	mov	r1, r7
   d8c34:	f7ff fafc 	bl	d8230 <__aeabi_dsub>
   d8c38:	f7ff ff62 	bl	d8b00 <__aeabi_d2uiz>
   d8c3c:	4621      	mov	r1, r4
   d8c3e:	bdd0      	pop	{r4, r6, r7, pc}
   d8c40:	3df00000 	.word	0x3df00000
   d8c44:	41f00000 	.word	0x41f00000

000d8c48 <__aeabi_d2ulz>:
   d8c48:	b5d0      	push	{r4, r6, r7, lr}
   d8c4a:	4b0c      	ldr	r3, [pc, #48]	; (d8c7c <__aeabi_d2ulz+0x34>)
   d8c4c:	2200      	movs	r2, #0
   d8c4e:	4606      	mov	r6, r0
   d8c50:	460f      	mov	r7, r1
   d8c52:	f7ff fca5 	bl	d85a0 <__aeabi_dmul>
   d8c56:	f7ff ff53 	bl	d8b00 <__aeabi_d2uiz>
   d8c5a:	4604      	mov	r4, r0
   d8c5c:	f7ff fc26 	bl	d84ac <__aeabi_ui2d>
   d8c60:	4b07      	ldr	r3, [pc, #28]	; (d8c80 <__aeabi_d2ulz+0x38>)
   d8c62:	2200      	movs	r2, #0
   d8c64:	f7ff fc9c 	bl	d85a0 <__aeabi_dmul>
   d8c68:	4602      	mov	r2, r0
   d8c6a:	460b      	mov	r3, r1
   d8c6c:	4630      	mov	r0, r6
   d8c6e:	4639      	mov	r1, r7
   d8c70:	f7ff fade 	bl	d8230 <__aeabi_dsub>
   d8c74:	f7ff ff44 	bl	d8b00 <__aeabi_d2uiz>
   d8c78:	4621      	mov	r1, r4
   d8c7a:	bdd0      	pop	{r4, r6, r7, pc}
   d8c7c:	3df00000 	.word	0x3df00000
   d8c80:	41f00000 	.word	0x41f00000

000d8c84 <asctime_r>:
   d8c84:	b510      	push	{r4, lr}
   d8c86:	460c      	mov	r4, r1
   d8c88:	6941      	ldr	r1, [r0, #20]
   d8c8a:	6903      	ldr	r3, [r0, #16]
   d8c8c:	6982      	ldr	r2, [r0, #24]
   d8c8e:	b086      	sub	sp, #24
   d8c90:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8c94:	9104      	str	r1, [sp, #16]
   d8c96:	6801      	ldr	r1, [r0, #0]
   d8c98:	9103      	str	r1, [sp, #12]
   d8c9a:	6841      	ldr	r1, [r0, #4]
   d8c9c:	9102      	str	r1, [sp, #8]
   d8c9e:	6881      	ldr	r1, [r0, #8]
   d8ca0:	9101      	str	r1, [sp, #4]
   d8ca2:	68c1      	ldr	r1, [r0, #12]
   d8ca4:	9100      	str	r1, [sp, #0]
   d8ca6:	4907      	ldr	r1, [pc, #28]	; (d8cc4 <asctime_r+0x40>)
   d8ca8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8cac:	440b      	add	r3, r1
   d8cae:	4906      	ldr	r1, [pc, #24]	; (d8cc8 <asctime_r+0x44>)
   d8cb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8cb4:	440a      	add	r2, r1
   d8cb6:	4620      	mov	r0, r4
   d8cb8:	4904      	ldr	r1, [pc, #16]	; (d8ccc <asctime_r+0x48>)
   d8cba:	f7fd fd79 	bl	d67b0 <siprintf>
   d8cbe:	4620      	mov	r0, r4
   d8cc0:	b006      	add	sp, #24
   d8cc2:	bd10      	pop	{r4, pc}
   d8cc4:	000db566 	.word	0x000db566
   d8cc8:	000db551 	.word	0x000db551
   d8ccc:	000db531 	.word	0x000db531

000d8cd0 <atoi>:
   d8cd0:	220a      	movs	r2, #10
   d8cd2:	2100      	movs	r1, #0
   d8cd4:	f000 bf9e 	b.w	d9c14 <strtol>

000d8cd8 <__cxa_atexit>:
   d8cd8:	b510      	push	{r4, lr}
   d8cda:	4c05      	ldr	r4, [pc, #20]	; (d8cf0 <__cxa_atexit+0x18>)
   d8cdc:	4613      	mov	r3, r2
   d8cde:	b12c      	cbz	r4, d8cec <__cxa_atexit+0x14>
   d8ce0:	460a      	mov	r2, r1
   d8ce2:	4601      	mov	r1, r0
   d8ce4:	2002      	movs	r0, #2
   d8ce6:	f3af 8000 	nop.w
   d8cea:	bd10      	pop	{r4, pc}
   d8cec:	4620      	mov	r0, r4
   d8cee:	e7fc      	b.n	d8cea <__cxa_atexit+0x12>
   d8cf0:	00000000 	.word	0x00000000

000d8cf4 <memcpy>:
   d8cf4:	440a      	add	r2, r1
   d8cf6:	4291      	cmp	r1, r2
   d8cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8cfc:	d100      	bne.n	d8d00 <memcpy+0xc>
   d8cfe:	4770      	bx	lr
   d8d00:	b510      	push	{r4, lr}
   d8d02:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d06:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8d0a:	4291      	cmp	r1, r2
   d8d0c:	d1f9      	bne.n	d8d02 <memcpy+0xe>
   d8d0e:	bd10      	pop	{r4, pc}

000d8d10 <memset>:
   d8d10:	4402      	add	r2, r0
   d8d12:	4603      	mov	r3, r0
   d8d14:	4293      	cmp	r3, r2
   d8d16:	d100      	bne.n	d8d1a <memset+0xa>
   d8d18:	4770      	bx	lr
   d8d1a:	f803 1b01 	strb.w	r1, [r3], #1
   d8d1e:	e7f9      	b.n	d8d14 <memset+0x4>

000d8d20 <srand>:
   d8d20:	b538      	push	{r3, r4, r5, lr}
   d8d22:	4b0d      	ldr	r3, [pc, #52]	; (d8d58 <srand+0x38>)
   d8d24:	681d      	ldr	r5, [r3, #0]
   d8d26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8d28:	4604      	mov	r4, r0
   d8d2a:	b97b      	cbnz	r3, d8d4c <srand+0x2c>
   d8d2c:	2018      	movs	r0, #24
   d8d2e:	f7fd fd27 	bl	d6780 <malloc>
   d8d32:	4a0a      	ldr	r2, [pc, #40]	; (d8d5c <srand+0x3c>)
   d8d34:	4b0a      	ldr	r3, [pc, #40]	; (d8d60 <srand+0x40>)
   d8d36:	63a8      	str	r0, [r5, #56]	; 0x38
   d8d38:	e9c0 2300 	strd	r2, r3, [r0]
   d8d3c:	4b09      	ldr	r3, [pc, #36]	; (d8d64 <srand+0x44>)
   d8d3e:	6083      	str	r3, [r0, #8]
   d8d40:	230b      	movs	r3, #11
   d8d42:	8183      	strh	r3, [r0, #12]
   d8d44:	2201      	movs	r2, #1
   d8d46:	2300      	movs	r3, #0
   d8d48:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8d4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8d4e:	2200      	movs	r2, #0
   d8d50:	611c      	str	r4, [r3, #16]
   d8d52:	615a      	str	r2, [r3, #20]
   d8d54:	bd38      	pop	{r3, r4, r5, pc}
   d8d56:	bf00      	nop
   d8d58:	2003e254 	.word	0x2003e254
   d8d5c:	abcd330e 	.word	0xabcd330e
   d8d60:	e66d1234 	.word	0xe66d1234
   d8d64:	0005deec 	.word	0x0005deec

000d8d68 <strcmp>:
   d8d68:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8d70:	2a01      	cmp	r2, #1
   d8d72:	bf28      	it	cs
   d8d74:	429a      	cmpcs	r2, r3
   d8d76:	d0f7      	beq.n	d8d68 <strcmp>
   d8d78:	1ad0      	subs	r0, r2, r3
   d8d7a:	4770      	bx	lr

000d8d7c <strcpy>:
   d8d7c:	4603      	mov	r3, r0
   d8d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8d82:	f803 2b01 	strb.w	r2, [r3], #1
   d8d86:	2a00      	cmp	r2, #0
   d8d88:	d1f9      	bne.n	d8d7e <strcpy+0x2>
   d8d8a:	4770      	bx	lr

000d8d8c <strdup>:
   d8d8c:	4b02      	ldr	r3, [pc, #8]	; (d8d98 <strdup+0xc>)
   d8d8e:	4601      	mov	r1, r0
   d8d90:	6818      	ldr	r0, [r3, #0]
   d8d92:	f000 b803 	b.w	d8d9c <_strdup_r>
   d8d96:	bf00      	nop
   d8d98:	2003e254 	.word	0x2003e254

000d8d9c <_strdup_r>:
   d8d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d9e:	4604      	mov	r4, r0
   d8da0:	4608      	mov	r0, r1
   d8da2:	460d      	mov	r5, r1
   d8da4:	f000 f80f 	bl	d8dc6 <strlen>
   d8da8:	1c42      	adds	r2, r0, #1
   d8daa:	4611      	mov	r1, r2
   d8dac:	4620      	mov	r0, r4
   d8dae:	9201      	str	r2, [sp, #4]
   d8db0:	f7fd fd16 	bl	d67e0 <_malloc_r>
   d8db4:	4604      	mov	r4, r0
   d8db6:	b118      	cbz	r0, d8dc0 <_strdup_r+0x24>
   d8db8:	9a01      	ldr	r2, [sp, #4]
   d8dba:	4629      	mov	r1, r5
   d8dbc:	f7ff ff9a 	bl	d8cf4 <memcpy>
   d8dc0:	4620      	mov	r0, r4
   d8dc2:	b003      	add	sp, #12
   d8dc4:	bd30      	pop	{r4, r5, pc}

000d8dc6 <strlen>:
   d8dc6:	4603      	mov	r3, r0
   d8dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8dcc:	2a00      	cmp	r2, #0
   d8dce:	d1fb      	bne.n	d8dc8 <strlen+0x2>
   d8dd0:	1a18      	subs	r0, r3, r0
   d8dd2:	3801      	subs	r0, #1
   d8dd4:	4770      	bx	lr

000d8dd6 <strncmp>:
   d8dd6:	b510      	push	{r4, lr}
   d8dd8:	b16a      	cbz	r2, d8df6 <strncmp+0x20>
   d8dda:	3901      	subs	r1, #1
   d8ddc:	1884      	adds	r4, r0, r2
   d8dde:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8de2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8de6:	4293      	cmp	r3, r2
   d8de8:	d103      	bne.n	d8df2 <strncmp+0x1c>
   d8dea:	42a0      	cmp	r0, r4
   d8dec:	d001      	beq.n	d8df2 <strncmp+0x1c>
   d8dee:	2b00      	cmp	r3, #0
   d8df0:	d1f5      	bne.n	d8dde <strncmp+0x8>
   d8df2:	1a98      	subs	r0, r3, r2
   d8df4:	bd10      	pop	{r4, pc}
   d8df6:	4610      	mov	r0, r2
   d8df8:	e7fc      	b.n	d8df4 <strncmp+0x1e>

000d8dfa <strncpy>:
   d8dfa:	b510      	push	{r4, lr}
   d8dfc:	3901      	subs	r1, #1
   d8dfe:	4603      	mov	r3, r0
   d8e00:	b132      	cbz	r2, d8e10 <strncpy+0x16>
   d8e02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8e06:	f803 4b01 	strb.w	r4, [r3], #1
   d8e0a:	3a01      	subs	r2, #1
   d8e0c:	2c00      	cmp	r4, #0
   d8e0e:	d1f7      	bne.n	d8e00 <strncpy+0x6>
   d8e10:	441a      	add	r2, r3
   d8e12:	2100      	movs	r1, #0
   d8e14:	4293      	cmp	r3, r2
   d8e16:	d100      	bne.n	d8e1a <strncpy+0x20>
   d8e18:	bd10      	pop	{r4, pc}
   d8e1a:	f803 1b01 	strb.w	r1, [r3], #1
   d8e1e:	e7f9      	b.n	d8e14 <strncpy+0x1a>

000d8e20 <sulp>:
   d8e20:	b570      	push	{r4, r5, r6, lr}
   d8e22:	4604      	mov	r4, r0
   d8e24:	460d      	mov	r5, r1
   d8e26:	ec45 4b10 	vmov	d0, r4, r5
   d8e2a:	4616      	mov	r6, r2
   d8e2c:	f001 fd68 	bl	da900 <__ulp>
   d8e30:	ec51 0b10 	vmov	r0, r1, d0
   d8e34:	b17e      	cbz	r6, d8e56 <sulp+0x36>
   d8e36:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8e3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8e3e:	2b00      	cmp	r3, #0
   d8e40:	dd09      	ble.n	d8e56 <sulp+0x36>
   d8e42:	051b      	lsls	r3, r3, #20
   d8e44:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8e48:	2400      	movs	r4, #0
   d8e4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8e4e:	4622      	mov	r2, r4
   d8e50:	462b      	mov	r3, r5
   d8e52:	f7ff fba5 	bl	d85a0 <__aeabi_dmul>
   d8e56:	bd70      	pop	{r4, r5, r6, pc}

000d8e58 <_strtod_l>:
   d8e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e5c:	b0a3      	sub	sp, #140	; 0x8c
   d8e5e:	461f      	mov	r7, r3
   d8e60:	2300      	movs	r3, #0
   d8e62:	931e      	str	r3, [sp, #120]	; 0x78
   d8e64:	4ba4      	ldr	r3, [pc, #656]	; (d90f8 <_strtod_l+0x2a0>)
   d8e66:	9219      	str	r2, [sp, #100]	; 0x64
   d8e68:	681b      	ldr	r3, [r3, #0]
   d8e6a:	9307      	str	r3, [sp, #28]
   d8e6c:	4604      	mov	r4, r0
   d8e6e:	4618      	mov	r0, r3
   d8e70:	4688      	mov	r8, r1
   d8e72:	f7ff ffa8 	bl	d8dc6 <strlen>
   d8e76:	f04f 0a00 	mov.w	sl, #0
   d8e7a:	4605      	mov	r5, r0
   d8e7c:	f04f 0b00 	mov.w	fp, #0
   d8e80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e86:	781a      	ldrb	r2, [r3, #0]
   d8e88:	2a2b      	cmp	r2, #43	; 0x2b
   d8e8a:	d04c      	beq.n	d8f26 <_strtod_l+0xce>
   d8e8c:	d839      	bhi.n	d8f02 <_strtod_l+0xaa>
   d8e8e:	2a0d      	cmp	r2, #13
   d8e90:	d832      	bhi.n	d8ef8 <_strtod_l+0xa0>
   d8e92:	2a08      	cmp	r2, #8
   d8e94:	d832      	bhi.n	d8efc <_strtod_l+0xa4>
   d8e96:	2a00      	cmp	r2, #0
   d8e98:	d03c      	beq.n	d8f14 <_strtod_l+0xbc>
   d8e9a:	2300      	movs	r3, #0
   d8e9c:	930e      	str	r3, [sp, #56]	; 0x38
   d8e9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d8ea0:	7833      	ldrb	r3, [r6, #0]
   d8ea2:	2b30      	cmp	r3, #48	; 0x30
   d8ea4:	f040 80b4 	bne.w	d9010 <_strtod_l+0x1b8>
   d8ea8:	7873      	ldrb	r3, [r6, #1]
   d8eaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8eae:	2b58      	cmp	r3, #88	; 0x58
   d8eb0:	d16c      	bne.n	d8f8c <_strtod_l+0x134>
   d8eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8eb4:	9301      	str	r3, [sp, #4]
   d8eb6:	ab1e      	add	r3, sp, #120	; 0x78
   d8eb8:	9702      	str	r7, [sp, #8]
   d8eba:	9300      	str	r3, [sp, #0]
   d8ebc:	4a8f      	ldr	r2, [pc, #572]	; (d90fc <_strtod_l+0x2a4>)
   d8ebe:	ab1f      	add	r3, sp, #124	; 0x7c
   d8ec0:	a91d      	add	r1, sp, #116	; 0x74
   d8ec2:	4620      	mov	r0, r4
   d8ec4:	f000 ff18 	bl	d9cf8 <__gethex>
   d8ec8:	f010 0707 	ands.w	r7, r0, #7
   d8ecc:	4605      	mov	r5, r0
   d8ece:	d005      	beq.n	d8edc <_strtod_l+0x84>
   d8ed0:	2f06      	cmp	r7, #6
   d8ed2:	d12a      	bne.n	d8f2a <_strtod_l+0xd2>
   d8ed4:	3601      	adds	r6, #1
   d8ed6:	2300      	movs	r3, #0
   d8ed8:	961d      	str	r6, [sp, #116]	; 0x74
   d8eda:	930e      	str	r3, [sp, #56]	; 0x38
   d8edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8ede:	2b00      	cmp	r3, #0
   d8ee0:	f040 8596 	bne.w	d9a10 <_strtod_l+0xbb8>
   d8ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8ee6:	b1db      	cbz	r3, d8f20 <_strtod_l+0xc8>
   d8ee8:	4652      	mov	r2, sl
   d8eea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8eee:	ec43 2b10 	vmov	d0, r2, r3
   d8ef2:	b023      	add	sp, #140	; 0x8c
   d8ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ef8:	2a20      	cmp	r2, #32
   d8efa:	d1ce      	bne.n	d8e9a <_strtod_l+0x42>
   d8efc:	3301      	adds	r3, #1
   d8efe:	931d      	str	r3, [sp, #116]	; 0x74
   d8f00:	e7c0      	b.n	d8e84 <_strtod_l+0x2c>
   d8f02:	2a2d      	cmp	r2, #45	; 0x2d
   d8f04:	d1c9      	bne.n	d8e9a <_strtod_l+0x42>
   d8f06:	2201      	movs	r2, #1
   d8f08:	920e      	str	r2, [sp, #56]	; 0x38
   d8f0a:	1c5a      	adds	r2, r3, #1
   d8f0c:	921d      	str	r2, [sp, #116]	; 0x74
   d8f0e:	785b      	ldrb	r3, [r3, #1]
   d8f10:	2b00      	cmp	r3, #0
   d8f12:	d1c4      	bne.n	d8e9e <_strtod_l+0x46>
   d8f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8f16:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8f1a:	2b00      	cmp	r3, #0
   d8f1c:	f040 8576 	bne.w	d9a0c <_strtod_l+0xbb4>
   d8f20:	4652      	mov	r2, sl
   d8f22:	465b      	mov	r3, fp
   d8f24:	e7e3      	b.n	d8eee <_strtod_l+0x96>
   d8f26:	2200      	movs	r2, #0
   d8f28:	e7ee      	b.n	d8f08 <_strtod_l+0xb0>
   d8f2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8f2c:	b13a      	cbz	r2, d8f3e <_strtod_l+0xe6>
   d8f2e:	2135      	movs	r1, #53	; 0x35
   d8f30:	a820      	add	r0, sp, #128	; 0x80
   d8f32:	f001 fde4 	bl	daafe <__copybits>
   d8f36:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8f38:	4620      	mov	r0, r4
   d8f3a:	f001 fa19 	bl	da370 <_Bfree>
   d8f3e:	3f01      	subs	r7, #1
   d8f40:	2f05      	cmp	r7, #5
   d8f42:	d807      	bhi.n	d8f54 <_strtod_l+0xfc>
   d8f44:	e8df f007 	tbb	[pc, r7]
   d8f48:	1d180b0e 	.word	0x1d180b0e
   d8f4c:	030e      	.short	0x030e
   d8f4e:	f04f 0b00 	mov.w	fp, #0
   d8f52:	46da      	mov	sl, fp
   d8f54:	0728      	lsls	r0, r5, #28
   d8f56:	d5c1      	bpl.n	d8edc <_strtod_l+0x84>
   d8f58:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8f5c:	e7be      	b.n	d8edc <_strtod_l+0x84>
   d8f5e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d8f62:	e7f7      	b.n	d8f54 <_strtod_l+0xfc>
   d8f64:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8f68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8f6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8f6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8f72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8f76:	e7ed      	b.n	d8f54 <_strtod_l+0xfc>
   d8f78:	f8df b184 	ldr.w	fp, [pc, #388]	; d9100 <_strtod_l+0x2a8>
   d8f7c:	f04f 0a00 	mov.w	sl, #0
   d8f80:	e7e8      	b.n	d8f54 <_strtod_l+0xfc>
   d8f82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8f86:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8f8a:	e7e3      	b.n	d8f54 <_strtod_l+0xfc>
   d8f8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f8e:	1c5a      	adds	r2, r3, #1
   d8f90:	921d      	str	r2, [sp, #116]	; 0x74
   d8f92:	785b      	ldrb	r3, [r3, #1]
   d8f94:	2b30      	cmp	r3, #48	; 0x30
   d8f96:	d0f9      	beq.n	d8f8c <_strtod_l+0x134>
   d8f98:	2b00      	cmp	r3, #0
   d8f9a:	d09f      	beq.n	d8edc <_strtod_l+0x84>
   d8f9c:	2301      	movs	r3, #1
   d8f9e:	f04f 0900 	mov.w	r9, #0
   d8fa2:	9304      	str	r3, [sp, #16]
   d8fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fa6:	930a      	str	r3, [sp, #40]	; 0x28
   d8fa8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d8fac:	464f      	mov	r7, r9
   d8fae:	220a      	movs	r2, #10
   d8fb0:	981d      	ldr	r0, [sp, #116]	; 0x74
   d8fb2:	7806      	ldrb	r6, [r0, #0]
   d8fb4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8fb8:	b2d9      	uxtb	r1, r3
   d8fba:	2909      	cmp	r1, #9
   d8fbc:	d92a      	bls.n	d9014 <_strtod_l+0x1bc>
   d8fbe:	9907      	ldr	r1, [sp, #28]
   d8fc0:	462a      	mov	r2, r5
   d8fc2:	f7ff ff08 	bl	d8dd6 <strncmp>
   d8fc6:	b398      	cbz	r0, d9030 <_strtod_l+0x1d8>
   d8fc8:	2000      	movs	r0, #0
   d8fca:	4633      	mov	r3, r6
   d8fcc:	463d      	mov	r5, r7
   d8fce:	9007      	str	r0, [sp, #28]
   d8fd0:	4602      	mov	r2, r0
   d8fd2:	2b65      	cmp	r3, #101	; 0x65
   d8fd4:	d001      	beq.n	d8fda <_strtod_l+0x182>
   d8fd6:	2b45      	cmp	r3, #69	; 0x45
   d8fd8:	d118      	bne.n	d900c <_strtod_l+0x1b4>
   d8fda:	b91d      	cbnz	r5, d8fe4 <_strtod_l+0x18c>
   d8fdc:	9b04      	ldr	r3, [sp, #16]
   d8fde:	4303      	orrs	r3, r0
   d8fe0:	d098      	beq.n	d8f14 <_strtod_l+0xbc>
   d8fe2:	2500      	movs	r5, #0
   d8fe4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d8fe8:	f108 0301 	add.w	r3, r8, #1
   d8fec:	931d      	str	r3, [sp, #116]	; 0x74
   d8fee:	f898 3001 	ldrb.w	r3, [r8, #1]
   d8ff2:	2b2b      	cmp	r3, #43	; 0x2b
   d8ff4:	d075      	beq.n	d90e2 <_strtod_l+0x28a>
   d8ff6:	2b2d      	cmp	r3, #45	; 0x2d
   d8ff8:	d07b      	beq.n	d90f2 <_strtod_l+0x29a>
   d8ffa:	f04f 0c00 	mov.w	ip, #0
   d8ffe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9002:	2909      	cmp	r1, #9
   d9004:	f240 8082 	bls.w	d910c <_strtod_l+0x2b4>
   d9008:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d900c:	2600      	movs	r6, #0
   d900e:	e09d      	b.n	d914c <_strtod_l+0x2f4>
   d9010:	2300      	movs	r3, #0
   d9012:	e7c4      	b.n	d8f9e <_strtod_l+0x146>
   d9014:	2f08      	cmp	r7, #8
   d9016:	bfd8      	it	le
   d9018:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d901a:	f100 0001 	add.w	r0, r0, #1
   d901e:	bfda      	itte	le
   d9020:	fb02 3301 	mlale	r3, r2, r1, r3
   d9024:	9309      	strle	r3, [sp, #36]	; 0x24
   d9026:	fb02 3909 	mlagt	r9, r2, r9, r3
   d902a:	3701      	adds	r7, #1
   d902c:	901d      	str	r0, [sp, #116]	; 0x74
   d902e:	e7bf      	b.n	d8fb0 <_strtod_l+0x158>
   d9030:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9032:	195a      	adds	r2, r3, r5
   d9034:	921d      	str	r2, [sp, #116]	; 0x74
   d9036:	5d5b      	ldrb	r3, [r3, r5]
   d9038:	2f00      	cmp	r7, #0
   d903a:	d037      	beq.n	d90ac <_strtod_l+0x254>
   d903c:	9007      	str	r0, [sp, #28]
   d903e:	463d      	mov	r5, r7
   d9040:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d9044:	2a09      	cmp	r2, #9
   d9046:	d912      	bls.n	d906e <_strtod_l+0x216>
   d9048:	2201      	movs	r2, #1
   d904a:	e7c2      	b.n	d8fd2 <_strtod_l+0x17a>
   d904c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d904e:	1c5a      	adds	r2, r3, #1
   d9050:	921d      	str	r2, [sp, #116]	; 0x74
   d9052:	785b      	ldrb	r3, [r3, #1]
   d9054:	3001      	adds	r0, #1
   d9056:	2b30      	cmp	r3, #48	; 0x30
   d9058:	d0f8      	beq.n	d904c <_strtod_l+0x1f4>
   d905a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d905e:	2a08      	cmp	r2, #8
   d9060:	f200 84db 	bhi.w	d9a1a <_strtod_l+0xbc2>
   d9064:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d9066:	9007      	str	r0, [sp, #28]
   d9068:	2000      	movs	r0, #0
   d906a:	920a      	str	r2, [sp, #40]	; 0x28
   d906c:	4605      	mov	r5, r0
   d906e:	3b30      	subs	r3, #48	; 0x30
   d9070:	f100 0201 	add.w	r2, r0, #1
   d9074:	d014      	beq.n	d90a0 <_strtod_l+0x248>
   d9076:	9907      	ldr	r1, [sp, #28]
   d9078:	4411      	add	r1, r2
   d907a:	9107      	str	r1, [sp, #28]
   d907c:	462a      	mov	r2, r5
   d907e:	eb00 0e05 	add.w	lr, r0, r5
   d9082:	210a      	movs	r1, #10
   d9084:	4572      	cmp	r2, lr
   d9086:	d113      	bne.n	d90b0 <_strtod_l+0x258>
   d9088:	182a      	adds	r2, r5, r0
   d908a:	2a08      	cmp	r2, #8
   d908c:	f105 0501 	add.w	r5, r5, #1
   d9090:	4405      	add	r5, r0
   d9092:	dc1c      	bgt.n	d90ce <_strtod_l+0x276>
   d9094:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9096:	220a      	movs	r2, #10
   d9098:	fb02 3301 	mla	r3, r2, r1, r3
   d909c:	9309      	str	r3, [sp, #36]	; 0x24
   d909e:	2200      	movs	r2, #0
   d90a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d90a2:	1c59      	adds	r1, r3, #1
   d90a4:	911d      	str	r1, [sp, #116]	; 0x74
   d90a6:	785b      	ldrb	r3, [r3, #1]
   d90a8:	4610      	mov	r0, r2
   d90aa:	e7c9      	b.n	d9040 <_strtod_l+0x1e8>
   d90ac:	4638      	mov	r0, r7
   d90ae:	e7d2      	b.n	d9056 <_strtod_l+0x1fe>
   d90b0:	2a08      	cmp	r2, #8
   d90b2:	dc04      	bgt.n	d90be <_strtod_l+0x266>
   d90b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d90b6:	434e      	muls	r6, r1
   d90b8:	9609      	str	r6, [sp, #36]	; 0x24
   d90ba:	3201      	adds	r2, #1
   d90bc:	e7e2      	b.n	d9084 <_strtod_l+0x22c>
   d90be:	f102 0c01 	add.w	ip, r2, #1
   d90c2:	f1bc 0f10 	cmp.w	ip, #16
   d90c6:	bfd8      	it	le
   d90c8:	fb01 f909 	mulle.w	r9, r1, r9
   d90cc:	e7f5      	b.n	d90ba <_strtod_l+0x262>
   d90ce:	2d10      	cmp	r5, #16
   d90d0:	bfdc      	itt	le
   d90d2:	220a      	movle	r2, #10
   d90d4:	fb02 3909 	mlale	r9, r2, r9, r3
   d90d8:	e7e1      	b.n	d909e <_strtod_l+0x246>
   d90da:	2300      	movs	r3, #0
   d90dc:	9307      	str	r3, [sp, #28]
   d90de:	2201      	movs	r2, #1
   d90e0:	e77c      	b.n	d8fdc <_strtod_l+0x184>
   d90e2:	f04f 0c00 	mov.w	ip, #0
   d90e6:	f108 0302 	add.w	r3, r8, #2
   d90ea:	931d      	str	r3, [sp, #116]	; 0x74
   d90ec:	f898 3002 	ldrb.w	r3, [r8, #2]
   d90f0:	e785      	b.n	d8ffe <_strtod_l+0x1a6>
   d90f2:	f04f 0c01 	mov.w	ip, #1
   d90f6:	e7f6      	b.n	d90e6 <_strtod_l+0x28e>
   d90f8:	000db6ec 	.word	0x000db6ec
   d90fc:	000db598 	.word	0x000db598
   d9100:	7ff00000 	.word	0x7ff00000
   d9104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9106:	1c59      	adds	r1, r3, #1
   d9108:	911d      	str	r1, [sp, #116]	; 0x74
   d910a:	785b      	ldrb	r3, [r3, #1]
   d910c:	2b30      	cmp	r3, #48	; 0x30
   d910e:	d0f9      	beq.n	d9104 <_strtod_l+0x2ac>
   d9110:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d9114:	2908      	cmp	r1, #8
   d9116:	f63f af79 	bhi.w	d900c <_strtod_l+0x1b4>
   d911a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d911e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9120:	9308      	str	r3, [sp, #32]
   d9122:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9124:	1c59      	adds	r1, r3, #1
   d9126:	911d      	str	r1, [sp, #116]	; 0x74
   d9128:	785b      	ldrb	r3, [r3, #1]
   d912a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d912e:	2e09      	cmp	r6, #9
   d9130:	d937      	bls.n	d91a2 <_strtod_l+0x34a>
   d9132:	9e08      	ldr	r6, [sp, #32]
   d9134:	1b89      	subs	r1, r1, r6
   d9136:	2908      	cmp	r1, #8
   d9138:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d913c:	dc02      	bgt.n	d9144 <_strtod_l+0x2ec>
   d913e:	4576      	cmp	r6, lr
   d9140:	bfa8      	it	ge
   d9142:	4676      	movge	r6, lr
   d9144:	f1bc 0f00 	cmp.w	ip, #0
   d9148:	d000      	beq.n	d914c <_strtod_l+0x2f4>
   d914a:	4276      	negs	r6, r6
   d914c:	2d00      	cmp	r5, #0
   d914e:	d14f      	bne.n	d91f0 <_strtod_l+0x398>
   d9150:	9904      	ldr	r1, [sp, #16]
   d9152:	4301      	orrs	r1, r0
   d9154:	f47f aec2 	bne.w	d8edc <_strtod_l+0x84>
   d9158:	2a00      	cmp	r2, #0
   d915a:	f47f aedb 	bne.w	d8f14 <_strtod_l+0xbc>
   d915e:	2b69      	cmp	r3, #105	; 0x69
   d9160:	d027      	beq.n	d91b2 <_strtod_l+0x35a>
   d9162:	dc24      	bgt.n	d91ae <_strtod_l+0x356>
   d9164:	2b49      	cmp	r3, #73	; 0x49
   d9166:	d024      	beq.n	d91b2 <_strtod_l+0x35a>
   d9168:	2b4e      	cmp	r3, #78	; 0x4e
   d916a:	f47f aed3 	bne.w	d8f14 <_strtod_l+0xbc>
   d916e:	499e      	ldr	r1, [pc, #632]	; (d93e8 <_strtod_l+0x590>)
   d9170:	a81d      	add	r0, sp, #116	; 0x74
   d9172:	f001 f807 	bl	da184 <__match>
   d9176:	2800      	cmp	r0, #0
   d9178:	f43f aecc 	beq.w	d8f14 <_strtod_l+0xbc>
   d917c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d917e:	781b      	ldrb	r3, [r3, #0]
   d9180:	2b28      	cmp	r3, #40	; 0x28
   d9182:	d12d      	bne.n	d91e0 <_strtod_l+0x388>
   d9184:	4999      	ldr	r1, [pc, #612]	; (d93ec <_strtod_l+0x594>)
   d9186:	aa20      	add	r2, sp, #128	; 0x80
   d9188:	a81d      	add	r0, sp, #116	; 0x74
   d918a:	f001 f80f 	bl	da1ac <__hexnan>
   d918e:	2805      	cmp	r0, #5
   d9190:	d126      	bne.n	d91e0 <_strtod_l+0x388>
   d9192:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9194:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9198:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d919c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d91a0:	e69c      	b.n	d8edc <_strtod_l+0x84>
   d91a2:	210a      	movs	r1, #10
   d91a4:	fb01 3e0e 	mla	lr, r1, lr, r3
   d91a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d91ac:	e7b9      	b.n	d9122 <_strtod_l+0x2ca>
   d91ae:	2b6e      	cmp	r3, #110	; 0x6e
   d91b0:	e7db      	b.n	d916a <_strtod_l+0x312>
   d91b2:	498f      	ldr	r1, [pc, #572]	; (d93f0 <_strtod_l+0x598>)
   d91b4:	a81d      	add	r0, sp, #116	; 0x74
   d91b6:	f000 ffe5 	bl	da184 <__match>
   d91ba:	2800      	cmp	r0, #0
   d91bc:	f43f aeaa 	beq.w	d8f14 <_strtod_l+0xbc>
   d91c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d91c2:	498c      	ldr	r1, [pc, #560]	; (d93f4 <_strtod_l+0x59c>)
   d91c4:	3b01      	subs	r3, #1
   d91c6:	a81d      	add	r0, sp, #116	; 0x74
   d91c8:	931d      	str	r3, [sp, #116]	; 0x74
   d91ca:	f000 ffdb 	bl	da184 <__match>
   d91ce:	b910      	cbnz	r0, d91d6 <_strtod_l+0x37e>
   d91d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d91d2:	3301      	adds	r3, #1
   d91d4:	931d      	str	r3, [sp, #116]	; 0x74
   d91d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; d9404 <_strtod_l+0x5ac>
   d91da:	f04f 0a00 	mov.w	sl, #0
   d91de:	e67d      	b.n	d8edc <_strtod_l+0x84>
   d91e0:	4885      	ldr	r0, [pc, #532]	; (d93f8 <_strtod_l+0x5a0>)
   d91e2:	f001 fce1 	bl	daba8 <nan>
   d91e6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d91ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d91ee:	e675      	b.n	d8edc <_strtod_l+0x84>
   d91f0:	9b07      	ldr	r3, [sp, #28]
   d91f2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d91f4:	1af3      	subs	r3, r6, r3
   d91f6:	2f00      	cmp	r7, #0
   d91f8:	bf08      	it	eq
   d91fa:	462f      	moveq	r7, r5
   d91fc:	2d10      	cmp	r5, #16
   d91fe:	9308      	str	r3, [sp, #32]
   d9200:	46a8      	mov	r8, r5
   d9202:	bfa8      	it	ge
   d9204:	f04f 0810 	movge.w	r8, #16
   d9208:	f7ff f950 	bl	d84ac <__aeabi_ui2d>
   d920c:	2d09      	cmp	r5, #9
   d920e:	4682      	mov	sl, r0
   d9210:	468b      	mov	fp, r1
   d9212:	dd13      	ble.n	d923c <_strtod_l+0x3e4>
   d9214:	4b79      	ldr	r3, [pc, #484]	; (d93fc <_strtod_l+0x5a4>)
   d9216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d921a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d921e:	f7ff f9bf 	bl	d85a0 <__aeabi_dmul>
   d9222:	4682      	mov	sl, r0
   d9224:	4648      	mov	r0, r9
   d9226:	468b      	mov	fp, r1
   d9228:	f7ff f940 	bl	d84ac <__aeabi_ui2d>
   d922c:	4602      	mov	r2, r0
   d922e:	460b      	mov	r3, r1
   d9230:	4650      	mov	r0, sl
   d9232:	4659      	mov	r1, fp
   d9234:	f7fe fffe 	bl	d8234 <__adddf3>
   d9238:	4682      	mov	sl, r0
   d923a:	468b      	mov	fp, r1
   d923c:	2d0f      	cmp	r5, #15
   d923e:	dc38      	bgt.n	d92b2 <_strtod_l+0x45a>
   d9240:	9b08      	ldr	r3, [sp, #32]
   d9242:	2b00      	cmp	r3, #0
   d9244:	f43f ae4a 	beq.w	d8edc <_strtod_l+0x84>
   d9248:	dd24      	ble.n	d9294 <_strtod_l+0x43c>
   d924a:	2b16      	cmp	r3, #22
   d924c:	dc0b      	bgt.n	d9266 <_strtod_l+0x40e>
   d924e:	4d6b      	ldr	r5, [pc, #428]	; (d93fc <_strtod_l+0x5a4>)
   d9250:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9254:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9258:	4652      	mov	r2, sl
   d925a:	465b      	mov	r3, fp
   d925c:	f7ff f9a0 	bl	d85a0 <__aeabi_dmul>
   d9260:	4682      	mov	sl, r0
   d9262:	468b      	mov	fp, r1
   d9264:	e63a      	b.n	d8edc <_strtod_l+0x84>
   d9266:	9a08      	ldr	r2, [sp, #32]
   d9268:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d926c:	4293      	cmp	r3, r2
   d926e:	db20      	blt.n	d92b2 <_strtod_l+0x45a>
   d9270:	4c62      	ldr	r4, [pc, #392]	; (d93fc <_strtod_l+0x5a4>)
   d9272:	f1c5 050f 	rsb	r5, r5, #15
   d9276:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d927a:	4652      	mov	r2, sl
   d927c:	465b      	mov	r3, fp
   d927e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9282:	f7ff f98d 	bl	d85a0 <__aeabi_dmul>
   d9286:	9b08      	ldr	r3, [sp, #32]
   d9288:	1b5d      	subs	r5, r3, r5
   d928a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d928e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9292:	e7e3      	b.n	d925c <_strtod_l+0x404>
   d9294:	9b08      	ldr	r3, [sp, #32]
   d9296:	3316      	adds	r3, #22
   d9298:	db0b      	blt.n	d92b2 <_strtod_l+0x45a>
   d929a:	9b07      	ldr	r3, [sp, #28]
   d929c:	4a57      	ldr	r2, [pc, #348]	; (d93fc <_strtod_l+0x5a4>)
   d929e:	1b9e      	subs	r6, r3, r6
   d92a0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d92a4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d92a8:	4650      	mov	r0, sl
   d92aa:	4659      	mov	r1, fp
   d92ac:	f7ff faa2 	bl	d87f4 <__aeabi_ddiv>
   d92b0:	e7d6      	b.n	d9260 <_strtod_l+0x408>
   d92b2:	9b08      	ldr	r3, [sp, #32]
   d92b4:	eba5 0808 	sub.w	r8, r5, r8
   d92b8:	4498      	add	r8, r3
   d92ba:	f1b8 0f00 	cmp.w	r8, #0
   d92be:	dd71      	ble.n	d93a4 <_strtod_l+0x54c>
   d92c0:	f018 030f 	ands.w	r3, r8, #15
   d92c4:	d00a      	beq.n	d92dc <_strtod_l+0x484>
   d92c6:	494d      	ldr	r1, [pc, #308]	; (d93fc <_strtod_l+0x5a4>)
   d92c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d92cc:	4652      	mov	r2, sl
   d92ce:	465b      	mov	r3, fp
   d92d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d92d4:	f7ff f964 	bl	d85a0 <__aeabi_dmul>
   d92d8:	4682      	mov	sl, r0
   d92da:	468b      	mov	fp, r1
   d92dc:	f038 080f 	bics.w	r8, r8, #15
   d92e0:	d04d      	beq.n	d937e <_strtod_l+0x526>
   d92e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d92e6:	dd22      	ble.n	d932e <_strtod_l+0x4d6>
   d92e8:	2500      	movs	r5, #0
   d92ea:	462e      	mov	r6, r5
   d92ec:	9509      	str	r5, [sp, #36]	; 0x24
   d92ee:	9507      	str	r5, [sp, #28]
   d92f0:	2322      	movs	r3, #34	; 0x22
   d92f2:	f8df b110 	ldr.w	fp, [pc, #272]	; d9404 <_strtod_l+0x5ac>
   d92f6:	6023      	str	r3, [r4, #0]
   d92f8:	f04f 0a00 	mov.w	sl, #0
   d92fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d92fe:	2b00      	cmp	r3, #0
   d9300:	f43f adec 	beq.w	d8edc <_strtod_l+0x84>
   d9304:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9306:	4620      	mov	r0, r4
   d9308:	f001 f832 	bl	da370 <_Bfree>
   d930c:	9907      	ldr	r1, [sp, #28]
   d930e:	4620      	mov	r0, r4
   d9310:	f001 f82e 	bl	da370 <_Bfree>
   d9314:	4631      	mov	r1, r6
   d9316:	4620      	mov	r0, r4
   d9318:	f001 f82a 	bl	da370 <_Bfree>
   d931c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d931e:	4620      	mov	r0, r4
   d9320:	f001 f826 	bl	da370 <_Bfree>
   d9324:	4629      	mov	r1, r5
   d9326:	4620      	mov	r0, r4
   d9328:	f001 f822 	bl	da370 <_Bfree>
   d932c:	e5d6      	b.n	d8edc <_strtod_l+0x84>
   d932e:	2300      	movs	r3, #0
   d9330:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9334:	4650      	mov	r0, sl
   d9336:	4659      	mov	r1, fp
   d9338:	4699      	mov	r9, r3
   d933a:	f1b8 0f01 	cmp.w	r8, #1
   d933e:	dc21      	bgt.n	d9384 <_strtod_l+0x52c>
   d9340:	b10b      	cbz	r3, d9346 <_strtod_l+0x4ee>
   d9342:	4682      	mov	sl, r0
   d9344:	468b      	mov	fp, r1
   d9346:	4b2e      	ldr	r3, [pc, #184]	; (d9400 <_strtod_l+0x5a8>)
   d9348:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d934c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9350:	4652      	mov	r2, sl
   d9352:	465b      	mov	r3, fp
   d9354:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9358:	f7ff f922 	bl	d85a0 <__aeabi_dmul>
   d935c:	4b29      	ldr	r3, [pc, #164]	; (d9404 <_strtod_l+0x5ac>)
   d935e:	460a      	mov	r2, r1
   d9360:	400b      	ands	r3, r1
   d9362:	4929      	ldr	r1, [pc, #164]	; (d9408 <_strtod_l+0x5b0>)
   d9364:	428b      	cmp	r3, r1
   d9366:	4682      	mov	sl, r0
   d9368:	d8be      	bhi.n	d92e8 <_strtod_l+0x490>
   d936a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d936e:	428b      	cmp	r3, r1
   d9370:	bf86      	itte	hi
   d9372:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d940c <_strtod_l+0x5b4>
   d9376:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d937a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d937e:	2300      	movs	r3, #0
   d9380:	9304      	str	r3, [sp, #16]
   d9382:	e081      	b.n	d9488 <_strtod_l+0x630>
   d9384:	f018 0f01 	tst.w	r8, #1
   d9388:	d007      	beq.n	d939a <_strtod_l+0x542>
   d938a:	4b1d      	ldr	r3, [pc, #116]	; (d9400 <_strtod_l+0x5a8>)
   d938c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9390:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9394:	f7ff f904 	bl	d85a0 <__aeabi_dmul>
   d9398:	2301      	movs	r3, #1
   d939a:	f109 0901 	add.w	r9, r9, #1
   d939e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d93a2:	e7ca      	b.n	d933a <_strtod_l+0x4e2>
   d93a4:	d0eb      	beq.n	d937e <_strtod_l+0x526>
   d93a6:	f1c8 0800 	rsb	r8, r8, #0
   d93aa:	f018 020f 	ands.w	r2, r8, #15
   d93ae:	d00a      	beq.n	d93c6 <_strtod_l+0x56e>
   d93b0:	4b12      	ldr	r3, [pc, #72]	; (d93fc <_strtod_l+0x5a4>)
   d93b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d93b6:	4650      	mov	r0, sl
   d93b8:	4659      	mov	r1, fp
   d93ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93be:	f7ff fa19 	bl	d87f4 <__aeabi_ddiv>
   d93c2:	4682      	mov	sl, r0
   d93c4:	468b      	mov	fp, r1
   d93c6:	ea5f 1828 	movs.w	r8, r8, asr #4
   d93ca:	d0d8      	beq.n	d937e <_strtod_l+0x526>
   d93cc:	f1b8 0f1f 	cmp.w	r8, #31
   d93d0:	dd1e      	ble.n	d9410 <_strtod_l+0x5b8>
   d93d2:	2500      	movs	r5, #0
   d93d4:	462e      	mov	r6, r5
   d93d6:	9509      	str	r5, [sp, #36]	; 0x24
   d93d8:	9507      	str	r5, [sp, #28]
   d93da:	2322      	movs	r3, #34	; 0x22
   d93dc:	f04f 0a00 	mov.w	sl, #0
   d93e0:	f04f 0b00 	mov.w	fp, #0
   d93e4:	6023      	str	r3, [r4, #0]
   d93e6:	e789      	b.n	d92fc <_strtod_l+0x4a4>
   d93e8:	000db593 	.word	0x000db593
   d93ec:	000db5ac 	.word	0x000db5ac
   d93f0:	000db58a 	.word	0x000db58a
   d93f4:	000db58d 	.word	0x000db58d
   d93f8:	000dacc2 	.word	0x000dacc2
   d93fc:	000db728 	.word	0x000db728
   d9400:	000db700 	.word	0x000db700
   d9404:	7ff00000 	.word	0x7ff00000
   d9408:	7ca00000 	.word	0x7ca00000
   d940c:	7fefffff 	.word	0x7fefffff
   d9410:	f018 0310 	ands.w	r3, r8, #16
   d9414:	bf18      	it	ne
   d9416:	236a      	movne	r3, #106	; 0x6a
   d9418:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d97d0 <_strtod_l+0x978>
   d941c:	9304      	str	r3, [sp, #16]
   d941e:	4650      	mov	r0, sl
   d9420:	4659      	mov	r1, fp
   d9422:	2300      	movs	r3, #0
   d9424:	f018 0f01 	tst.w	r8, #1
   d9428:	d004      	beq.n	d9434 <_strtod_l+0x5dc>
   d942a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d942e:	f7ff f8b7 	bl	d85a0 <__aeabi_dmul>
   d9432:	2301      	movs	r3, #1
   d9434:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9438:	f109 0908 	add.w	r9, r9, #8
   d943c:	d1f2      	bne.n	d9424 <_strtod_l+0x5cc>
   d943e:	b10b      	cbz	r3, d9444 <_strtod_l+0x5ec>
   d9440:	4682      	mov	sl, r0
   d9442:	468b      	mov	fp, r1
   d9444:	9b04      	ldr	r3, [sp, #16]
   d9446:	b1bb      	cbz	r3, d9478 <_strtod_l+0x620>
   d9448:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d944c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9450:	2b00      	cmp	r3, #0
   d9452:	4659      	mov	r1, fp
   d9454:	dd10      	ble.n	d9478 <_strtod_l+0x620>
   d9456:	2b1f      	cmp	r3, #31
   d9458:	f340 8128 	ble.w	d96ac <_strtod_l+0x854>
   d945c:	2b34      	cmp	r3, #52	; 0x34
   d945e:	bfde      	ittt	le
   d9460:	3b20      	suble	r3, #32
   d9462:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9466:	fa02 f303 	lslle.w	r3, r2, r3
   d946a:	f04f 0a00 	mov.w	sl, #0
   d946e:	bfcc      	ite	gt
   d9470:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9474:	ea03 0b01 	andle.w	fp, r3, r1
   d9478:	2200      	movs	r2, #0
   d947a:	2300      	movs	r3, #0
   d947c:	4650      	mov	r0, sl
   d947e:	4659      	mov	r1, fp
   d9480:	f7ff faf6 	bl	d8a70 <__aeabi_dcmpeq>
   d9484:	2800      	cmp	r0, #0
   d9486:	d1a4      	bne.n	d93d2 <_strtod_l+0x57a>
   d9488:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d948a:	9300      	str	r3, [sp, #0]
   d948c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d948e:	462b      	mov	r3, r5
   d9490:	463a      	mov	r2, r7
   d9492:	4620      	mov	r0, r4
   d9494:	f000 ffc1 	bl	da41a <__s2b>
   d9498:	9009      	str	r0, [sp, #36]	; 0x24
   d949a:	2800      	cmp	r0, #0
   d949c:	f43f af24 	beq.w	d92e8 <_strtod_l+0x490>
   d94a0:	9b07      	ldr	r3, [sp, #28]
   d94a2:	1b9e      	subs	r6, r3, r6
   d94a4:	9b08      	ldr	r3, [sp, #32]
   d94a6:	2b00      	cmp	r3, #0
   d94a8:	bfb4      	ite	lt
   d94aa:	4633      	movlt	r3, r6
   d94ac:	2300      	movge	r3, #0
   d94ae:	9310      	str	r3, [sp, #64]	; 0x40
   d94b0:	9b08      	ldr	r3, [sp, #32]
   d94b2:	2500      	movs	r5, #0
   d94b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d94b8:	9318      	str	r3, [sp, #96]	; 0x60
   d94ba:	462e      	mov	r6, r5
   d94bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d94be:	4620      	mov	r0, r4
   d94c0:	6859      	ldr	r1, [r3, #4]
   d94c2:	f000 ff21 	bl	da308 <_Balloc>
   d94c6:	9007      	str	r0, [sp, #28]
   d94c8:	2800      	cmp	r0, #0
   d94ca:	f43f af11 	beq.w	d92f0 <_strtod_l+0x498>
   d94ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d94d0:	691a      	ldr	r2, [r3, #16]
   d94d2:	3202      	adds	r2, #2
   d94d4:	f103 010c 	add.w	r1, r3, #12
   d94d8:	0092      	lsls	r2, r2, #2
   d94da:	300c      	adds	r0, #12
   d94dc:	f7ff fc0a 	bl	d8cf4 <memcpy>
   d94e0:	ec4b ab10 	vmov	d0, sl, fp
   d94e4:	aa20      	add	r2, sp, #128	; 0x80
   d94e6:	a91f      	add	r1, sp, #124	; 0x7c
   d94e8:	4620      	mov	r0, r4
   d94ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d94ee:	f001 fa83 	bl	da9f8 <__d2b>
   d94f2:	901e      	str	r0, [sp, #120]	; 0x78
   d94f4:	2800      	cmp	r0, #0
   d94f6:	f43f aefb 	beq.w	d92f0 <_strtod_l+0x498>
   d94fa:	2101      	movs	r1, #1
   d94fc:	4620      	mov	r0, r4
   d94fe:	f001 f81a 	bl	da536 <__i2b>
   d9502:	4606      	mov	r6, r0
   d9504:	2800      	cmp	r0, #0
   d9506:	f43f aef3 	beq.w	d92f0 <_strtod_l+0x498>
   d950a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d950c:	9904      	ldr	r1, [sp, #16]
   d950e:	2b00      	cmp	r3, #0
   d9510:	bfab      	itete	ge
   d9512:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d9514:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d9516:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9518:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d951c:	bfac      	ite	ge
   d951e:	eb03 0902 	addge.w	r9, r3, r2
   d9522:	1ad7      	sublt	r7, r2, r3
   d9524:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d9526:	eba3 0801 	sub.w	r8, r3, r1
   d952a:	4490      	add	r8, r2
   d952c:	4ba3      	ldr	r3, [pc, #652]	; (d97bc <_strtod_l+0x964>)
   d952e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9532:	4598      	cmp	r8, r3
   d9534:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9538:	f280 80cc 	bge.w	d96d4 <_strtod_l+0x87c>
   d953c:	eba3 0308 	sub.w	r3, r3, r8
   d9540:	2b1f      	cmp	r3, #31
   d9542:	eba2 0203 	sub.w	r2, r2, r3
   d9546:	f04f 0101 	mov.w	r1, #1
   d954a:	f300 80b6 	bgt.w	d96ba <_strtod_l+0x862>
   d954e:	fa01 f303 	lsl.w	r3, r1, r3
   d9552:	9311      	str	r3, [sp, #68]	; 0x44
   d9554:	2300      	movs	r3, #0
   d9556:	930c      	str	r3, [sp, #48]	; 0x30
   d9558:	eb09 0802 	add.w	r8, r9, r2
   d955c:	9b04      	ldr	r3, [sp, #16]
   d955e:	45c1      	cmp	r9, r8
   d9560:	4417      	add	r7, r2
   d9562:	441f      	add	r7, r3
   d9564:	464b      	mov	r3, r9
   d9566:	bfa8      	it	ge
   d9568:	4643      	movge	r3, r8
   d956a:	42bb      	cmp	r3, r7
   d956c:	bfa8      	it	ge
   d956e:	463b      	movge	r3, r7
   d9570:	2b00      	cmp	r3, #0
   d9572:	bfc2      	ittt	gt
   d9574:	eba8 0803 	subgt.w	r8, r8, r3
   d9578:	1aff      	subgt	r7, r7, r3
   d957a:	eba9 0903 	subgt.w	r9, r9, r3
   d957e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9580:	2b00      	cmp	r3, #0
   d9582:	dd17      	ble.n	d95b4 <_strtod_l+0x75c>
   d9584:	4631      	mov	r1, r6
   d9586:	461a      	mov	r2, r3
   d9588:	4620      	mov	r0, r4
   d958a:	f001 f879 	bl	da680 <__pow5mult>
   d958e:	4606      	mov	r6, r0
   d9590:	2800      	cmp	r0, #0
   d9592:	f43f aead 	beq.w	d92f0 <_strtod_l+0x498>
   d9596:	4601      	mov	r1, r0
   d9598:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d959a:	4620      	mov	r0, r4
   d959c:	f000 ffd4 	bl	da548 <__multiply>
   d95a0:	900f      	str	r0, [sp, #60]	; 0x3c
   d95a2:	2800      	cmp	r0, #0
   d95a4:	f43f aea4 	beq.w	d92f0 <_strtod_l+0x498>
   d95a8:	991e      	ldr	r1, [sp, #120]	; 0x78
   d95aa:	4620      	mov	r0, r4
   d95ac:	f000 fee0 	bl	da370 <_Bfree>
   d95b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d95b2:	931e      	str	r3, [sp, #120]	; 0x78
   d95b4:	f1b8 0f00 	cmp.w	r8, #0
   d95b8:	f300 8091 	bgt.w	d96de <_strtod_l+0x886>
   d95bc:	9b08      	ldr	r3, [sp, #32]
   d95be:	2b00      	cmp	r3, #0
   d95c0:	dd08      	ble.n	d95d4 <_strtod_l+0x77c>
   d95c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d95c4:	9907      	ldr	r1, [sp, #28]
   d95c6:	4620      	mov	r0, r4
   d95c8:	f001 f85a 	bl	da680 <__pow5mult>
   d95cc:	9007      	str	r0, [sp, #28]
   d95ce:	2800      	cmp	r0, #0
   d95d0:	f43f ae8e 	beq.w	d92f0 <_strtod_l+0x498>
   d95d4:	2f00      	cmp	r7, #0
   d95d6:	dd08      	ble.n	d95ea <_strtod_l+0x792>
   d95d8:	9907      	ldr	r1, [sp, #28]
   d95da:	463a      	mov	r2, r7
   d95dc:	4620      	mov	r0, r4
   d95de:	f001 f89d 	bl	da71c <__lshift>
   d95e2:	9007      	str	r0, [sp, #28]
   d95e4:	2800      	cmp	r0, #0
   d95e6:	f43f ae83 	beq.w	d92f0 <_strtod_l+0x498>
   d95ea:	f1b9 0f00 	cmp.w	r9, #0
   d95ee:	dd08      	ble.n	d9602 <_strtod_l+0x7aa>
   d95f0:	4631      	mov	r1, r6
   d95f2:	464a      	mov	r2, r9
   d95f4:	4620      	mov	r0, r4
   d95f6:	f001 f891 	bl	da71c <__lshift>
   d95fa:	4606      	mov	r6, r0
   d95fc:	2800      	cmp	r0, #0
   d95fe:	f43f ae77 	beq.w	d92f0 <_strtod_l+0x498>
   d9602:	9a07      	ldr	r2, [sp, #28]
   d9604:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9606:	4620      	mov	r0, r4
   d9608:	f001 f903 	bl	da812 <__mdiff>
   d960c:	4605      	mov	r5, r0
   d960e:	2800      	cmp	r0, #0
   d9610:	f43f ae6e 	beq.w	d92f0 <_strtod_l+0x498>
   d9614:	68c3      	ldr	r3, [r0, #12]
   d9616:	930f      	str	r3, [sp, #60]	; 0x3c
   d9618:	2300      	movs	r3, #0
   d961a:	60c3      	str	r3, [r0, #12]
   d961c:	4631      	mov	r1, r6
   d961e:	f001 f8dc 	bl	da7da <__mcmp>
   d9622:	2800      	cmp	r0, #0
   d9624:	da65      	bge.n	d96f2 <_strtod_l+0x89a>
   d9626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9628:	ea53 030a 	orrs.w	r3, r3, sl
   d962c:	f040 8087 	bne.w	d973e <_strtod_l+0x8e6>
   d9630:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9634:	2b00      	cmp	r3, #0
   d9636:	f040 8082 	bne.w	d973e <_strtod_l+0x8e6>
   d963a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d963e:	0d1b      	lsrs	r3, r3, #20
   d9640:	051b      	lsls	r3, r3, #20
   d9642:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9646:	d97a      	bls.n	d973e <_strtod_l+0x8e6>
   d9648:	696b      	ldr	r3, [r5, #20]
   d964a:	b913      	cbnz	r3, d9652 <_strtod_l+0x7fa>
   d964c:	692b      	ldr	r3, [r5, #16]
   d964e:	2b01      	cmp	r3, #1
   d9650:	dd75      	ble.n	d973e <_strtod_l+0x8e6>
   d9652:	4629      	mov	r1, r5
   d9654:	2201      	movs	r2, #1
   d9656:	4620      	mov	r0, r4
   d9658:	f001 f860 	bl	da71c <__lshift>
   d965c:	4631      	mov	r1, r6
   d965e:	4605      	mov	r5, r0
   d9660:	f001 f8bb 	bl	da7da <__mcmp>
   d9664:	2800      	cmp	r0, #0
   d9666:	dd6a      	ble.n	d973e <_strtod_l+0x8e6>
   d9668:	9904      	ldr	r1, [sp, #16]
   d966a:	4a55      	ldr	r2, [pc, #340]	; (d97c0 <_strtod_l+0x968>)
   d966c:	465b      	mov	r3, fp
   d966e:	2900      	cmp	r1, #0
   d9670:	f000 8085 	beq.w	d977e <_strtod_l+0x926>
   d9674:	ea02 010b 	and.w	r1, r2, fp
   d9678:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d967c:	dc7f      	bgt.n	d977e <_strtod_l+0x926>
   d967e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9682:	f77f aeaa 	ble.w	d93da <_strtod_l+0x582>
   d9686:	4a4f      	ldr	r2, [pc, #316]	; (d97c4 <_strtod_l+0x96c>)
   d9688:	2300      	movs	r3, #0
   d968a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d968e:	4650      	mov	r0, sl
   d9690:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9694:	4659      	mov	r1, fp
   d9696:	f7fe ff83 	bl	d85a0 <__aeabi_dmul>
   d969a:	460b      	mov	r3, r1
   d969c:	4303      	orrs	r3, r0
   d969e:	bf08      	it	eq
   d96a0:	2322      	moveq	r3, #34	; 0x22
   d96a2:	4682      	mov	sl, r0
   d96a4:	468b      	mov	fp, r1
   d96a6:	bf08      	it	eq
   d96a8:	6023      	streq	r3, [r4, #0]
   d96aa:	e62b      	b.n	d9304 <_strtod_l+0x4ac>
   d96ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d96b0:	fa02 f303 	lsl.w	r3, r2, r3
   d96b4:	ea03 0a0a 	and.w	sl, r3, sl
   d96b8:	e6de      	b.n	d9478 <_strtod_l+0x620>
   d96ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d96be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d96c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d96c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d96ca:	fa01 f308 	lsl.w	r3, r1, r8
   d96ce:	930c      	str	r3, [sp, #48]	; 0x30
   d96d0:	9111      	str	r1, [sp, #68]	; 0x44
   d96d2:	e741      	b.n	d9558 <_strtod_l+0x700>
   d96d4:	2300      	movs	r3, #0
   d96d6:	930c      	str	r3, [sp, #48]	; 0x30
   d96d8:	2301      	movs	r3, #1
   d96da:	9311      	str	r3, [sp, #68]	; 0x44
   d96dc:	e73c      	b.n	d9558 <_strtod_l+0x700>
   d96de:	991e      	ldr	r1, [sp, #120]	; 0x78
   d96e0:	4642      	mov	r2, r8
   d96e2:	4620      	mov	r0, r4
   d96e4:	f001 f81a 	bl	da71c <__lshift>
   d96e8:	901e      	str	r0, [sp, #120]	; 0x78
   d96ea:	2800      	cmp	r0, #0
   d96ec:	f47f af66 	bne.w	d95bc <_strtod_l+0x764>
   d96f0:	e5fe      	b.n	d92f0 <_strtod_l+0x498>
   d96f2:	465f      	mov	r7, fp
   d96f4:	d16e      	bne.n	d97d4 <_strtod_l+0x97c>
   d96f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d96f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d96fc:	b342      	cbz	r2, d9750 <_strtod_l+0x8f8>
   d96fe:	4a32      	ldr	r2, [pc, #200]	; (d97c8 <_strtod_l+0x970>)
   d9700:	4293      	cmp	r3, r2
   d9702:	d128      	bne.n	d9756 <_strtod_l+0x8fe>
   d9704:	9b04      	ldr	r3, [sp, #16]
   d9706:	4650      	mov	r0, sl
   d9708:	b1eb      	cbz	r3, d9746 <_strtod_l+0x8ee>
   d970a:	4a2d      	ldr	r2, [pc, #180]	; (d97c0 <_strtod_l+0x968>)
   d970c:	403a      	ands	r2, r7
   d970e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9712:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9716:	d819      	bhi.n	d974c <_strtod_l+0x8f4>
   d9718:	0d12      	lsrs	r2, r2, #20
   d971a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d971e:	fa01 f303 	lsl.w	r3, r1, r3
   d9722:	4298      	cmp	r0, r3
   d9724:	d117      	bne.n	d9756 <_strtod_l+0x8fe>
   d9726:	4b29      	ldr	r3, [pc, #164]	; (d97cc <_strtod_l+0x974>)
   d9728:	429f      	cmp	r7, r3
   d972a:	d102      	bne.n	d9732 <_strtod_l+0x8da>
   d972c:	3001      	adds	r0, #1
   d972e:	f43f addf 	beq.w	d92f0 <_strtod_l+0x498>
   d9732:	4b23      	ldr	r3, [pc, #140]	; (d97c0 <_strtod_l+0x968>)
   d9734:	403b      	ands	r3, r7
   d9736:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d973a:	f04f 0a00 	mov.w	sl, #0
   d973e:	9b04      	ldr	r3, [sp, #16]
   d9740:	2b00      	cmp	r3, #0
   d9742:	d1a0      	bne.n	d9686 <_strtod_l+0x82e>
   d9744:	e5de      	b.n	d9304 <_strtod_l+0x4ac>
   d9746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d974a:	e7ea      	b.n	d9722 <_strtod_l+0x8ca>
   d974c:	460b      	mov	r3, r1
   d974e:	e7e8      	b.n	d9722 <_strtod_l+0x8ca>
   d9750:	ea53 030a 	orrs.w	r3, r3, sl
   d9754:	d088      	beq.n	d9668 <_strtod_l+0x810>
   d9756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9758:	b1db      	cbz	r3, d9792 <_strtod_l+0x93a>
   d975a:	423b      	tst	r3, r7
   d975c:	d0ef      	beq.n	d973e <_strtod_l+0x8e6>
   d975e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9760:	9a04      	ldr	r2, [sp, #16]
   d9762:	4650      	mov	r0, sl
   d9764:	4659      	mov	r1, fp
   d9766:	b1c3      	cbz	r3, d979a <_strtod_l+0x942>
   d9768:	f7ff fb5a 	bl	d8e20 <sulp>
   d976c:	4602      	mov	r2, r0
   d976e:	460b      	mov	r3, r1
   d9770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9774:	f7fe fd5e 	bl	d8234 <__adddf3>
   d9778:	4682      	mov	sl, r0
   d977a:	468b      	mov	fp, r1
   d977c:	e7df      	b.n	d973e <_strtod_l+0x8e6>
   d977e:	4013      	ands	r3, r2
   d9780:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9784:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9788:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d978c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9790:	e7d5      	b.n	d973e <_strtod_l+0x8e6>
   d9792:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9794:	ea13 0f0a 	tst.w	r3, sl
   d9798:	e7e0      	b.n	d975c <_strtod_l+0x904>
   d979a:	f7ff fb41 	bl	d8e20 <sulp>
   d979e:	4602      	mov	r2, r0
   d97a0:	460b      	mov	r3, r1
   d97a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d97a6:	f7fe fd43 	bl	d8230 <__aeabi_dsub>
   d97aa:	2200      	movs	r2, #0
   d97ac:	2300      	movs	r3, #0
   d97ae:	4682      	mov	sl, r0
   d97b0:	468b      	mov	fp, r1
   d97b2:	f7ff f95d 	bl	d8a70 <__aeabi_dcmpeq>
   d97b6:	2800      	cmp	r0, #0
   d97b8:	d0c1      	beq.n	d973e <_strtod_l+0x8e6>
   d97ba:	e60e      	b.n	d93da <_strtod_l+0x582>
   d97bc:	fffffc02 	.word	0xfffffc02
   d97c0:	7ff00000 	.word	0x7ff00000
   d97c4:	39500000 	.word	0x39500000
   d97c8:	000fffff 	.word	0x000fffff
   d97cc:	7fefffff 	.word	0x7fefffff
   d97d0:	000db5c0 	.word	0x000db5c0
   d97d4:	4631      	mov	r1, r6
   d97d6:	4628      	mov	r0, r5
   d97d8:	f001 f95e 	bl	daa98 <__ratio>
   d97dc:	ec59 8b10 	vmov	r8, r9, d0
   d97e0:	ee10 0a10 	vmov	r0, s0
   d97e4:	2200      	movs	r2, #0
   d97e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d97ea:	4649      	mov	r1, r9
   d97ec:	f7ff f954 	bl	d8a98 <__aeabi_dcmple>
   d97f0:	2800      	cmp	r0, #0
   d97f2:	d07c      	beq.n	d98ee <_strtod_l+0xa96>
   d97f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d97f6:	2b00      	cmp	r3, #0
   d97f8:	d04c      	beq.n	d9894 <_strtod_l+0xa3c>
   d97fa:	4b95      	ldr	r3, [pc, #596]	; (d9a50 <_strtod_l+0xbf8>)
   d97fc:	2200      	movs	r2, #0
   d97fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9802:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9a50 <_strtod_l+0xbf8>
   d9806:	f04f 0800 	mov.w	r8, #0
   d980a:	4b92      	ldr	r3, [pc, #584]	; (d9a54 <_strtod_l+0xbfc>)
   d980c:	403b      	ands	r3, r7
   d980e:	9311      	str	r3, [sp, #68]	; 0x44
   d9810:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9812:	4b91      	ldr	r3, [pc, #580]	; (d9a58 <_strtod_l+0xc00>)
   d9814:	429a      	cmp	r2, r3
   d9816:	f040 80b2 	bne.w	d997e <_strtod_l+0xb26>
   d981a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d981e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9822:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9826:	ec4b ab10 	vmov	d0, sl, fp
   d982a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d982e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9832:	f001 f865 	bl	da900 <__ulp>
   d9836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d983a:	ec53 2b10 	vmov	r2, r3, d0
   d983e:	f7fe feaf 	bl	d85a0 <__aeabi_dmul>
   d9842:	4652      	mov	r2, sl
   d9844:	465b      	mov	r3, fp
   d9846:	f7fe fcf5 	bl	d8234 <__adddf3>
   d984a:	460b      	mov	r3, r1
   d984c:	4981      	ldr	r1, [pc, #516]	; (d9a54 <_strtod_l+0xbfc>)
   d984e:	4a83      	ldr	r2, [pc, #524]	; (d9a5c <_strtod_l+0xc04>)
   d9850:	4019      	ands	r1, r3
   d9852:	4291      	cmp	r1, r2
   d9854:	4682      	mov	sl, r0
   d9856:	d95e      	bls.n	d9916 <_strtod_l+0xabe>
   d9858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d985a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d985e:	4293      	cmp	r3, r2
   d9860:	d103      	bne.n	d986a <_strtod_l+0xa12>
   d9862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9864:	3301      	adds	r3, #1
   d9866:	f43f ad43 	beq.w	d92f0 <_strtod_l+0x498>
   d986a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9a68 <_strtod_l+0xc10>
   d986e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9872:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9874:	4620      	mov	r0, r4
   d9876:	f000 fd7b 	bl	da370 <_Bfree>
   d987a:	9907      	ldr	r1, [sp, #28]
   d987c:	4620      	mov	r0, r4
   d987e:	f000 fd77 	bl	da370 <_Bfree>
   d9882:	4631      	mov	r1, r6
   d9884:	4620      	mov	r0, r4
   d9886:	f000 fd73 	bl	da370 <_Bfree>
   d988a:	4629      	mov	r1, r5
   d988c:	4620      	mov	r0, r4
   d988e:	f000 fd6f 	bl	da370 <_Bfree>
   d9892:	e613      	b.n	d94bc <_strtod_l+0x664>
   d9894:	f1ba 0f00 	cmp.w	sl, #0
   d9898:	d11b      	bne.n	d98d2 <_strtod_l+0xa7a>
   d989a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d989e:	b9f3      	cbnz	r3, d98de <_strtod_l+0xa86>
   d98a0:	4b6b      	ldr	r3, [pc, #428]	; (d9a50 <_strtod_l+0xbf8>)
   d98a2:	2200      	movs	r2, #0
   d98a4:	4640      	mov	r0, r8
   d98a6:	4649      	mov	r1, r9
   d98a8:	f7ff f8ec 	bl	d8a84 <__aeabi_dcmplt>
   d98ac:	b9d0      	cbnz	r0, d98e4 <_strtod_l+0xa8c>
   d98ae:	4640      	mov	r0, r8
   d98b0:	4649      	mov	r1, r9
   d98b2:	4b6b      	ldr	r3, [pc, #428]	; (d9a60 <_strtod_l+0xc08>)
   d98b4:	2200      	movs	r2, #0
   d98b6:	f7fe fe73 	bl	d85a0 <__aeabi_dmul>
   d98ba:	4680      	mov	r8, r0
   d98bc:	4689      	mov	r9, r1
   d98be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d98c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d98c6:	931b      	str	r3, [sp, #108]	; 0x6c
   d98c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d98cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d98d0:	e79b      	b.n	d980a <_strtod_l+0x9b2>
   d98d2:	f1ba 0f01 	cmp.w	sl, #1
   d98d6:	d102      	bne.n	d98de <_strtod_l+0xa86>
   d98d8:	2f00      	cmp	r7, #0
   d98da:	f43f ad7e 	beq.w	d93da <_strtod_l+0x582>
   d98de:	4b61      	ldr	r3, [pc, #388]	; (d9a64 <_strtod_l+0xc0c>)
   d98e0:	2200      	movs	r2, #0
   d98e2:	e78c      	b.n	d97fe <_strtod_l+0x9a6>
   d98e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9a60 <_strtod_l+0xc08>
   d98e8:	f04f 0800 	mov.w	r8, #0
   d98ec:	e7e7      	b.n	d98be <_strtod_l+0xa66>
   d98ee:	4b5c      	ldr	r3, [pc, #368]	; (d9a60 <_strtod_l+0xc08>)
   d98f0:	4640      	mov	r0, r8
   d98f2:	4649      	mov	r1, r9
   d98f4:	2200      	movs	r2, #0
   d98f6:	f7fe fe53 	bl	d85a0 <__aeabi_dmul>
   d98fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d98fc:	4680      	mov	r8, r0
   d98fe:	4689      	mov	r9, r1
   d9900:	b933      	cbnz	r3, d9910 <_strtod_l+0xab8>
   d9902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9906:	9012      	str	r0, [sp, #72]	; 0x48
   d9908:	9313      	str	r3, [sp, #76]	; 0x4c
   d990a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d990e:	e7dd      	b.n	d98cc <_strtod_l+0xa74>
   d9910:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9914:	e7f9      	b.n	d990a <_strtod_l+0xab2>
   d9916:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d991a:	9b04      	ldr	r3, [sp, #16]
   d991c:	2b00      	cmp	r3, #0
   d991e:	d1a8      	bne.n	d9872 <_strtod_l+0xa1a>
   d9920:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9924:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9926:	0d1b      	lsrs	r3, r3, #20
   d9928:	051b      	lsls	r3, r3, #20
   d992a:	429a      	cmp	r2, r3
   d992c:	d1a1      	bne.n	d9872 <_strtod_l+0xa1a>
   d992e:	4640      	mov	r0, r8
   d9930:	4649      	mov	r1, r9
   d9932:	f001 f955 	bl	dabe0 <__aeabi_d2lz>
   d9936:	f7fe fe05 	bl	d8544 <__aeabi_l2d>
   d993a:	4602      	mov	r2, r0
   d993c:	460b      	mov	r3, r1
   d993e:	4640      	mov	r0, r8
   d9940:	4649      	mov	r1, r9
   d9942:	f7fe fc75 	bl	d8230 <__aeabi_dsub>
   d9946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9948:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d994c:	ea43 030a 	orr.w	r3, r3, sl
   d9950:	4313      	orrs	r3, r2
   d9952:	4680      	mov	r8, r0
   d9954:	4689      	mov	r9, r1
   d9956:	d053      	beq.n	d9a00 <_strtod_l+0xba8>
   d9958:	a335      	add	r3, pc, #212	; (adr r3, d9a30 <_strtod_l+0xbd8>)
   d995a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d995e:	f7ff f891 	bl	d8a84 <__aeabi_dcmplt>
   d9962:	2800      	cmp	r0, #0
   d9964:	f47f acce 	bne.w	d9304 <_strtod_l+0x4ac>
   d9968:	a333      	add	r3, pc, #204	; (adr r3, d9a38 <_strtod_l+0xbe0>)
   d996a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d996e:	4640      	mov	r0, r8
   d9970:	4649      	mov	r1, r9
   d9972:	f7ff f8a5 	bl	d8ac0 <__aeabi_dcmpgt>
   d9976:	2800      	cmp	r0, #0
   d9978:	f43f af7b 	beq.w	d9872 <_strtod_l+0xa1a>
   d997c:	e4c2      	b.n	d9304 <_strtod_l+0x4ac>
   d997e:	9b04      	ldr	r3, [sp, #16]
   d9980:	b333      	cbz	r3, d99d0 <_strtod_l+0xb78>
   d9982:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9984:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9988:	d822      	bhi.n	d99d0 <_strtod_l+0xb78>
   d998a:	a32d      	add	r3, pc, #180	; (adr r3, d9a40 <_strtod_l+0xbe8>)
   d998c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9990:	4640      	mov	r0, r8
   d9992:	4649      	mov	r1, r9
   d9994:	f7ff f880 	bl	d8a98 <__aeabi_dcmple>
   d9998:	b1a0      	cbz	r0, d99c4 <_strtod_l+0xb6c>
   d999a:	4649      	mov	r1, r9
   d999c:	4640      	mov	r0, r8
   d999e:	f7ff f8af 	bl	d8b00 <__aeabi_d2uiz>
   d99a2:	2801      	cmp	r0, #1
   d99a4:	bf38      	it	cc
   d99a6:	2001      	movcc	r0, #1
   d99a8:	f7fe fd80 	bl	d84ac <__aeabi_ui2d>
   d99ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d99ae:	4680      	mov	r8, r0
   d99b0:	4689      	mov	r9, r1
   d99b2:	bb13      	cbnz	r3, d99fa <_strtod_l+0xba2>
   d99b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d99b8:	9014      	str	r0, [sp, #80]	; 0x50
   d99ba:	9315      	str	r3, [sp, #84]	; 0x54
   d99bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d99c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d99c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d99c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d99c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d99cc:	1a9b      	subs	r3, r3, r2
   d99ce:	930d      	str	r3, [sp, #52]	; 0x34
   d99d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d99d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d99d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d99dc:	f000 ff90 	bl	da900 <__ulp>
   d99e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d99e4:	ec53 2b10 	vmov	r2, r3, d0
   d99e8:	f7fe fdda 	bl	d85a0 <__aeabi_dmul>
   d99ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d99f0:	f7fe fc20 	bl	d8234 <__adddf3>
   d99f4:	4682      	mov	sl, r0
   d99f6:	468b      	mov	fp, r1
   d99f8:	e78f      	b.n	d991a <_strtod_l+0xac2>
   d99fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d99fe:	e7dd      	b.n	d99bc <_strtod_l+0xb64>
   d9a00:	a311      	add	r3, pc, #68	; (adr r3, d9a48 <_strtod_l+0xbf0>)
   d9a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a06:	f7ff f83d 	bl	d8a84 <__aeabi_dcmplt>
   d9a0a:	e7b4      	b.n	d9976 <_strtod_l+0xb1e>
   d9a0c:	2300      	movs	r3, #0
   d9a0e:	930e      	str	r3, [sp, #56]	; 0x38
   d9a10:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9a14:	6013      	str	r3, [r2, #0]
   d9a16:	f7ff ba65 	b.w	d8ee4 <_strtod_l+0x8c>
   d9a1a:	2b65      	cmp	r3, #101	; 0x65
   d9a1c:	f43f ab5d 	beq.w	d90da <_strtod_l+0x282>
   d9a20:	2b45      	cmp	r3, #69	; 0x45
   d9a22:	f43f ab5a 	beq.w	d90da <_strtod_l+0x282>
   d9a26:	2201      	movs	r2, #1
   d9a28:	f7ff bb92 	b.w	d9150 <_strtod_l+0x2f8>
   d9a2c:	f3af 8000 	nop.w
   d9a30:	94a03595 	.word	0x94a03595
   d9a34:	3fdfffff 	.word	0x3fdfffff
   d9a38:	35afe535 	.word	0x35afe535
   d9a3c:	3fe00000 	.word	0x3fe00000
   d9a40:	ffc00000 	.word	0xffc00000
   d9a44:	41dfffff 	.word	0x41dfffff
   d9a48:	94a03595 	.word	0x94a03595
   d9a4c:	3fcfffff 	.word	0x3fcfffff
   d9a50:	3ff00000 	.word	0x3ff00000
   d9a54:	7ff00000 	.word	0x7ff00000
   d9a58:	7fe00000 	.word	0x7fe00000
   d9a5c:	7c9fffff 	.word	0x7c9fffff
   d9a60:	3fe00000 	.word	0x3fe00000
   d9a64:	bff00000 	.word	0xbff00000
   d9a68:	7fefffff 	.word	0x7fefffff

000d9a6c <strtof>:
   d9a6c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   d9a70:	4e26      	ldr	r6, [pc, #152]	; (d9b0c <strtof+0xa0>)
   d9a72:	4b27      	ldr	r3, [pc, #156]	; (d9b10 <strtof+0xa4>)
   d9a74:	460a      	mov	r2, r1
   d9a76:	ed2d 8b02 	vpush	{d8}
   d9a7a:	4601      	mov	r1, r0
   d9a7c:	6830      	ldr	r0, [r6, #0]
   d9a7e:	f7ff f9eb 	bl	d8e58 <_strtod_l>
   d9a82:	ec55 4b10 	vmov	r4, r5, d0
   d9a86:	ee10 2a10 	vmov	r2, s0
   d9a8a:	ee10 0a10 	vmov	r0, s0
   d9a8e:	462b      	mov	r3, r5
   d9a90:	4629      	mov	r1, r5
   d9a92:	f7ff f81f 	bl	d8ad4 <__aeabi_dcmpun>
   d9a96:	b190      	cbz	r0, d9abe <strtof+0x52>
   d9a98:	2d00      	cmp	r5, #0
   d9a9a:	481e      	ldr	r0, [pc, #120]	; (d9b14 <strtof+0xa8>)
   d9a9c:	da09      	bge.n	d9ab2 <strtof+0x46>
   d9a9e:	f001 f88b 	bl	dabb8 <nanf>
   d9aa2:	eeb1 8a40 	vneg.f32	s16, s0
   d9aa6:	eeb0 0a48 	vmov.f32	s0, s16
   d9aaa:	ecbd 8b02 	vpop	{d8}
   d9aae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d9ab2:	ecbd 8b02 	vpop	{d8}
   d9ab6:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   d9aba:	f001 b87d 	b.w	dabb8 <nanf>
   d9abe:	4620      	mov	r0, r4
   d9ac0:	4629      	mov	r1, r5
   d9ac2:	f7ff f83d 	bl	d8b40 <__aeabi_d2f>
   d9ac6:	ee08 0a10 	vmov	s16, r0
   d9aca:	eddf 7a13 	vldr	s15, [pc, #76]	; d9b18 <strtof+0xac>
   d9ace:	eeb0 7ac8 	vabs.f32	s14, s16
   d9ad2:	eeb4 7a67 	vcmp.f32	s14, s15
   d9ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9ada:	dde4      	ble.n	d9aa6 <strtof+0x3a>
   d9adc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   d9ae0:	4b0e      	ldr	r3, [pc, #56]	; (d9b1c <strtof+0xb0>)
   d9ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9ae6:	4620      	mov	r0, r4
   d9ae8:	4649      	mov	r1, r9
   d9aea:	f7fe fff3 	bl	d8ad4 <__aeabi_dcmpun>
   d9aee:	b940      	cbnz	r0, d9b02 <strtof+0x96>
   d9af0:	4b0a      	ldr	r3, [pc, #40]	; (d9b1c <strtof+0xb0>)
   d9af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9af6:	4620      	mov	r0, r4
   d9af8:	4649      	mov	r1, r9
   d9afa:	f7fe ffcd 	bl	d8a98 <__aeabi_dcmple>
   d9afe:	2800      	cmp	r0, #0
   d9b00:	d0d1      	beq.n	d9aa6 <strtof+0x3a>
   d9b02:	6833      	ldr	r3, [r6, #0]
   d9b04:	2222      	movs	r2, #34	; 0x22
   d9b06:	601a      	str	r2, [r3, #0]
   d9b08:	e7cd      	b.n	d9aa6 <strtof+0x3a>
   d9b0a:	bf00      	nop
   d9b0c:	2003e254 	.word	0x2003e254
   d9b10:	2003e2bc 	.word	0x2003e2bc
   d9b14:	000dacc2 	.word	0x000dacc2
   d9b18:	7f7fffff 	.word	0x7f7fffff
   d9b1c:	7fefffff 	.word	0x7fefffff

000d9b20 <_strtol_l.isra.0>:
   d9b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9b24:	4e3a      	ldr	r6, [pc, #232]	; (d9c10 <_strtol_l.isra.0+0xf0>)
   d9b26:	4686      	mov	lr, r0
   d9b28:	468c      	mov	ip, r1
   d9b2a:	4660      	mov	r0, ip
   d9b2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9b30:	5da5      	ldrb	r5, [r4, r6]
   d9b32:	f015 0508 	ands.w	r5, r5, #8
   d9b36:	d1f8      	bne.n	d9b2a <_strtol_l.isra.0+0xa>
   d9b38:	2c2d      	cmp	r4, #45	; 0x2d
   d9b3a:	d133      	bne.n	d9ba4 <_strtol_l.isra.0+0x84>
   d9b3c:	f89c 4000 	ldrb.w	r4, [ip]
   d9b40:	f04f 0801 	mov.w	r8, #1
   d9b44:	f100 0c02 	add.w	ip, r0, #2
   d9b48:	2b00      	cmp	r3, #0
   d9b4a:	d05c      	beq.n	d9c06 <_strtol_l.isra.0+0xe6>
   d9b4c:	2b10      	cmp	r3, #16
   d9b4e:	d10c      	bne.n	d9b6a <_strtol_l.isra.0+0x4a>
   d9b50:	2c30      	cmp	r4, #48	; 0x30
   d9b52:	d10a      	bne.n	d9b6a <_strtol_l.isra.0+0x4a>
   d9b54:	f89c 0000 	ldrb.w	r0, [ip]
   d9b58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9b5c:	2858      	cmp	r0, #88	; 0x58
   d9b5e:	d14d      	bne.n	d9bfc <_strtol_l.isra.0+0xdc>
   d9b60:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9b64:	2310      	movs	r3, #16
   d9b66:	f10c 0c02 	add.w	ip, ip, #2
   d9b6a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9b6e:	3f01      	subs	r7, #1
   d9b70:	2600      	movs	r6, #0
   d9b72:	fbb7 f9f3 	udiv	r9, r7, r3
   d9b76:	4630      	mov	r0, r6
   d9b78:	fb03 7a19 	mls	sl, r3, r9, r7
   d9b7c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9b80:	2d09      	cmp	r5, #9
   d9b82:	d818      	bhi.n	d9bb6 <_strtol_l.isra.0+0x96>
   d9b84:	462c      	mov	r4, r5
   d9b86:	42a3      	cmp	r3, r4
   d9b88:	dd24      	ble.n	d9bd4 <_strtol_l.isra.0+0xb4>
   d9b8a:	1c75      	adds	r5, r6, #1
   d9b8c:	d007      	beq.n	d9b9e <_strtol_l.isra.0+0x7e>
   d9b8e:	4581      	cmp	r9, r0
   d9b90:	d31d      	bcc.n	d9bce <_strtol_l.isra.0+0xae>
   d9b92:	d101      	bne.n	d9b98 <_strtol_l.isra.0+0x78>
   d9b94:	45a2      	cmp	sl, r4
   d9b96:	db1a      	blt.n	d9bce <_strtol_l.isra.0+0xae>
   d9b98:	fb00 4003 	mla	r0, r0, r3, r4
   d9b9c:	2601      	movs	r6, #1
   d9b9e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9ba2:	e7eb      	b.n	d9b7c <_strtol_l.isra.0+0x5c>
   d9ba4:	2c2b      	cmp	r4, #43	; 0x2b
   d9ba6:	bf08      	it	eq
   d9ba8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9bac:	46a8      	mov	r8, r5
   d9bae:	bf08      	it	eq
   d9bb0:	f100 0c02 	addeq.w	ip, r0, #2
   d9bb4:	e7c8      	b.n	d9b48 <_strtol_l.isra.0+0x28>
   d9bb6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9bba:	2d19      	cmp	r5, #25
   d9bbc:	d801      	bhi.n	d9bc2 <_strtol_l.isra.0+0xa2>
   d9bbe:	3c37      	subs	r4, #55	; 0x37
   d9bc0:	e7e1      	b.n	d9b86 <_strtol_l.isra.0+0x66>
   d9bc2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9bc6:	2d19      	cmp	r5, #25
   d9bc8:	d804      	bhi.n	d9bd4 <_strtol_l.isra.0+0xb4>
   d9bca:	3c57      	subs	r4, #87	; 0x57
   d9bcc:	e7db      	b.n	d9b86 <_strtol_l.isra.0+0x66>
   d9bce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9bd2:	e7e4      	b.n	d9b9e <_strtol_l.isra.0+0x7e>
   d9bd4:	1c73      	adds	r3, r6, #1
   d9bd6:	d106      	bne.n	d9be6 <_strtol_l.isra.0+0xc6>
   d9bd8:	2322      	movs	r3, #34	; 0x22
   d9bda:	f8ce 3000 	str.w	r3, [lr]
   d9bde:	4638      	mov	r0, r7
   d9be0:	b942      	cbnz	r2, d9bf4 <_strtol_l.isra.0+0xd4>
   d9be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9be6:	f1b8 0f00 	cmp.w	r8, #0
   d9bea:	d000      	beq.n	d9bee <_strtol_l.isra.0+0xce>
   d9bec:	4240      	negs	r0, r0
   d9bee:	2a00      	cmp	r2, #0
   d9bf0:	d0f7      	beq.n	d9be2 <_strtol_l.isra.0+0xc2>
   d9bf2:	b10e      	cbz	r6, d9bf8 <_strtol_l.isra.0+0xd8>
   d9bf4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9bf8:	6011      	str	r1, [r2, #0]
   d9bfa:	e7f2      	b.n	d9be2 <_strtol_l.isra.0+0xc2>
   d9bfc:	2430      	movs	r4, #48	; 0x30
   d9bfe:	2b00      	cmp	r3, #0
   d9c00:	d1b3      	bne.n	d9b6a <_strtol_l.isra.0+0x4a>
   d9c02:	2308      	movs	r3, #8
   d9c04:	e7b1      	b.n	d9b6a <_strtol_l.isra.0+0x4a>
   d9c06:	2c30      	cmp	r4, #48	; 0x30
   d9c08:	d0a4      	beq.n	d9b54 <_strtol_l.isra.0+0x34>
   d9c0a:	230a      	movs	r3, #10
   d9c0c:	e7ad      	b.n	d9b6a <_strtol_l.isra.0+0x4a>
   d9c0e:	bf00      	nop
   d9c10:	000db5e9 	.word	0x000db5e9

000d9c14 <strtol>:
   d9c14:	4613      	mov	r3, r2
   d9c16:	460a      	mov	r2, r1
   d9c18:	4601      	mov	r1, r0
   d9c1a:	4802      	ldr	r0, [pc, #8]	; (d9c24 <strtol+0x10>)
   d9c1c:	6800      	ldr	r0, [r0, #0]
   d9c1e:	f7ff bf7f 	b.w	d9b20 <_strtol_l.isra.0>
   d9c22:	bf00      	nop
   d9c24:	2003e254 	.word	0x2003e254

000d9c28 <rshift>:
   d9c28:	6903      	ldr	r3, [r0, #16]
   d9c2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9c2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9c32:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9c36:	f100 0414 	add.w	r4, r0, #20
   d9c3a:	dd45      	ble.n	d9cc8 <rshift+0xa0>
   d9c3c:	f011 011f 	ands.w	r1, r1, #31
   d9c40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9c44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9c48:	d10c      	bne.n	d9c64 <rshift+0x3c>
   d9c4a:	f100 0710 	add.w	r7, r0, #16
   d9c4e:	4629      	mov	r1, r5
   d9c50:	42b1      	cmp	r1, r6
   d9c52:	d334      	bcc.n	d9cbe <rshift+0x96>
   d9c54:	1a9b      	subs	r3, r3, r2
   d9c56:	009b      	lsls	r3, r3, #2
   d9c58:	1eea      	subs	r2, r5, #3
   d9c5a:	4296      	cmp	r6, r2
   d9c5c:	bf38      	it	cc
   d9c5e:	2300      	movcc	r3, #0
   d9c60:	4423      	add	r3, r4
   d9c62:	e015      	b.n	d9c90 <rshift+0x68>
   d9c64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9c68:	f1c1 0820 	rsb	r8, r1, #32
   d9c6c:	40cf      	lsrs	r7, r1
   d9c6e:	f105 0e04 	add.w	lr, r5, #4
   d9c72:	46a1      	mov	r9, r4
   d9c74:	4576      	cmp	r6, lr
   d9c76:	46f4      	mov	ip, lr
   d9c78:	d815      	bhi.n	d9ca6 <rshift+0x7e>
   d9c7a:	1a9b      	subs	r3, r3, r2
   d9c7c:	009a      	lsls	r2, r3, #2
   d9c7e:	3a04      	subs	r2, #4
   d9c80:	3501      	adds	r5, #1
   d9c82:	42ae      	cmp	r6, r5
   d9c84:	bf38      	it	cc
   d9c86:	2200      	movcc	r2, #0
   d9c88:	18a3      	adds	r3, r4, r2
   d9c8a:	50a7      	str	r7, [r4, r2]
   d9c8c:	b107      	cbz	r7, d9c90 <rshift+0x68>
   d9c8e:	3304      	adds	r3, #4
   d9c90:	1b1a      	subs	r2, r3, r4
   d9c92:	42a3      	cmp	r3, r4
   d9c94:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9c98:	bf08      	it	eq
   d9c9a:	2300      	moveq	r3, #0
   d9c9c:	6102      	str	r2, [r0, #16]
   d9c9e:	bf08      	it	eq
   d9ca0:	6143      	streq	r3, [r0, #20]
   d9ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9ca6:	f8dc c000 	ldr.w	ip, [ip]
   d9caa:	fa0c fc08 	lsl.w	ip, ip, r8
   d9cae:	ea4c 0707 	orr.w	r7, ip, r7
   d9cb2:	f849 7b04 	str.w	r7, [r9], #4
   d9cb6:	f85e 7b04 	ldr.w	r7, [lr], #4
   d9cba:	40cf      	lsrs	r7, r1
   d9cbc:	e7da      	b.n	d9c74 <rshift+0x4c>
   d9cbe:	f851 cb04 	ldr.w	ip, [r1], #4
   d9cc2:	f847 cf04 	str.w	ip, [r7, #4]!
   d9cc6:	e7c3      	b.n	d9c50 <rshift+0x28>
   d9cc8:	4623      	mov	r3, r4
   d9cca:	e7e1      	b.n	d9c90 <rshift+0x68>

000d9ccc <__hexdig_fun>:
   d9ccc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9cd0:	2b09      	cmp	r3, #9
   d9cd2:	d802      	bhi.n	d9cda <__hexdig_fun+0xe>
   d9cd4:	3820      	subs	r0, #32
   d9cd6:	b2c0      	uxtb	r0, r0
   d9cd8:	4770      	bx	lr
   d9cda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9cde:	2b05      	cmp	r3, #5
   d9ce0:	d801      	bhi.n	d9ce6 <__hexdig_fun+0x1a>
   d9ce2:	3847      	subs	r0, #71	; 0x47
   d9ce4:	e7f7      	b.n	d9cd6 <__hexdig_fun+0xa>
   d9ce6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9cea:	2b05      	cmp	r3, #5
   d9cec:	d801      	bhi.n	d9cf2 <__hexdig_fun+0x26>
   d9cee:	3827      	subs	r0, #39	; 0x27
   d9cf0:	e7f1      	b.n	d9cd6 <__hexdig_fun+0xa>
   d9cf2:	2000      	movs	r0, #0
   d9cf4:	4770      	bx	lr
	...

000d9cf8 <__gethex>:
   d9cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9cfc:	ed2d 8b02 	vpush	{d8}
   d9d00:	b089      	sub	sp, #36	; 0x24
   d9d02:	ee08 0a10 	vmov	s16, r0
   d9d06:	9304      	str	r3, [sp, #16]
   d9d08:	4bbc      	ldr	r3, [pc, #752]	; (d9ffc <__gethex+0x304>)
   d9d0a:	681b      	ldr	r3, [r3, #0]
   d9d0c:	9301      	str	r3, [sp, #4]
   d9d0e:	4618      	mov	r0, r3
   d9d10:	468b      	mov	fp, r1
   d9d12:	4690      	mov	r8, r2
   d9d14:	f7ff f857 	bl	d8dc6 <strlen>
   d9d18:	9b01      	ldr	r3, [sp, #4]
   d9d1a:	f8db 2000 	ldr.w	r2, [fp]
   d9d1e:	4403      	add	r3, r0
   d9d20:	4682      	mov	sl, r0
   d9d22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9d26:	9305      	str	r3, [sp, #20]
   d9d28:	1c93      	adds	r3, r2, #2
   d9d2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d9d2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d9d32:	32fe      	adds	r2, #254	; 0xfe
   d9d34:	18d1      	adds	r1, r2, r3
   d9d36:	461f      	mov	r7, r3
   d9d38:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9d3c:	9100      	str	r1, [sp, #0]
   d9d3e:	2830      	cmp	r0, #48	; 0x30
   d9d40:	d0f8      	beq.n	d9d34 <__gethex+0x3c>
   d9d42:	f7ff ffc3 	bl	d9ccc <__hexdig_fun>
   d9d46:	4604      	mov	r4, r0
   d9d48:	2800      	cmp	r0, #0
   d9d4a:	d13a      	bne.n	d9dc2 <__gethex+0xca>
   d9d4c:	9901      	ldr	r1, [sp, #4]
   d9d4e:	4652      	mov	r2, sl
   d9d50:	4638      	mov	r0, r7
   d9d52:	f7ff f840 	bl	d8dd6 <strncmp>
   d9d56:	4605      	mov	r5, r0
   d9d58:	2800      	cmp	r0, #0
   d9d5a:	d168      	bne.n	d9e2e <__gethex+0x136>
   d9d5c:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9d60:	eb07 060a 	add.w	r6, r7, sl
   d9d64:	f7ff ffb2 	bl	d9ccc <__hexdig_fun>
   d9d68:	2800      	cmp	r0, #0
   d9d6a:	d062      	beq.n	d9e32 <__gethex+0x13a>
   d9d6c:	4633      	mov	r3, r6
   d9d6e:	7818      	ldrb	r0, [r3, #0]
   d9d70:	2830      	cmp	r0, #48	; 0x30
   d9d72:	461f      	mov	r7, r3
   d9d74:	f103 0301 	add.w	r3, r3, #1
   d9d78:	d0f9      	beq.n	d9d6e <__gethex+0x76>
   d9d7a:	f7ff ffa7 	bl	d9ccc <__hexdig_fun>
   d9d7e:	2301      	movs	r3, #1
   d9d80:	fab0 f480 	clz	r4, r0
   d9d84:	0964      	lsrs	r4, r4, #5
   d9d86:	4635      	mov	r5, r6
   d9d88:	9300      	str	r3, [sp, #0]
   d9d8a:	463a      	mov	r2, r7
   d9d8c:	4616      	mov	r6, r2
   d9d8e:	3201      	adds	r2, #1
   d9d90:	7830      	ldrb	r0, [r6, #0]
   d9d92:	f7ff ff9b 	bl	d9ccc <__hexdig_fun>
   d9d96:	2800      	cmp	r0, #0
   d9d98:	d1f8      	bne.n	d9d8c <__gethex+0x94>
   d9d9a:	9901      	ldr	r1, [sp, #4]
   d9d9c:	4652      	mov	r2, sl
   d9d9e:	4630      	mov	r0, r6
   d9da0:	f7ff f819 	bl	d8dd6 <strncmp>
   d9da4:	b980      	cbnz	r0, d9dc8 <__gethex+0xd0>
   d9da6:	b94d      	cbnz	r5, d9dbc <__gethex+0xc4>
   d9da8:	eb06 050a 	add.w	r5, r6, sl
   d9dac:	462a      	mov	r2, r5
   d9dae:	4616      	mov	r6, r2
   d9db0:	3201      	adds	r2, #1
   d9db2:	7830      	ldrb	r0, [r6, #0]
   d9db4:	f7ff ff8a 	bl	d9ccc <__hexdig_fun>
   d9db8:	2800      	cmp	r0, #0
   d9dba:	d1f8      	bne.n	d9dae <__gethex+0xb6>
   d9dbc:	1bad      	subs	r5, r5, r6
   d9dbe:	00ad      	lsls	r5, r5, #2
   d9dc0:	e004      	b.n	d9dcc <__gethex+0xd4>
   d9dc2:	2400      	movs	r4, #0
   d9dc4:	4625      	mov	r5, r4
   d9dc6:	e7e0      	b.n	d9d8a <__gethex+0x92>
   d9dc8:	2d00      	cmp	r5, #0
   d9dca:	d1f7      	bne.n	d9dbc <__gethex+0xc4>
   d9dcc:	7833      	ldrb	r3, [r6, #0]
   d9dce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9dd2:	2b50      	cmp	r3, #80	; 0x50
   d9dd4:	d13b      	bne.n	d9e4e <__gethex+0x156>
   d9dd6:	7873      	ldrb	r3, [r6, #1]
   d9dd8:	2b2b      	cmp	r3, #43	; 0x2b
   d9dda:	d02c      	beq.n	d9e36 <__gethex+0x13e>
   d9ddc:	2b2d      	cmp	r3, #45	; 0x2d
   d9dde:	d02e      	beq.n	d9e3e <__gethex+0x146>
   d9de0:	1c71      	adds	r1, r6, #1
   d9de2:	f04f 0900 	mov.w	r9, #0
   d9de6:	7808      	ldrb	r0, [r1, #0]
   d9de8:	f7ff ff70 	bl	d9ccc <__hexdig_fun>
   d9dec:	1e43      	subs	r3, r0, #1
   d9dee:	b2db      	uxtb	r3, r3
   d9df0:	2b18      	cmp	r3, #24
   d9df2:	d82c      	bhi.n	d9e4e <__gethex+0x156>
   d9df4:	f1a0 0210 	sub.w	r2, r0, #16
   d9df8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9dfc:	f7ff ff66 	bl	d9ccc <__hexdig_fun>
   d9e00:	1e43      	subs	r3, r0, #1
   d9e02:	b2db      	uxtb	r3, r3
   d9e04:	2b18      	cmp	r3, #24
   d9e06:	d91d      	bls.n	d9e44 <__gethex+0x14c>
   d9e08:	f1b9 0f00 	cmp.w	r9, #0
   d9e0c:	d000      	beq.n	d9e10 <__gethex+0x118>
   d9e0e:	4252      	negs	r2, r2
   d9e10:	4415      	add	r5, r2
   d9e12:	f8cb 1000 	str.w	r1, [fp]
   d9e16:	b1e4      	cbz	r4, d9e52 <__gethex+0x15a>
   d9e18:	9b00      	ldr	r3, [sp, #0]
   d9e1a:	2b00      	cmp	r3, #0
   d9e1c:	bf14      	ite	ne
   d9e1e:	2700      	movne	r7, #0
   d9e20:	2706      	moveq	r7, #6
   d9e22:	4638      	mov	r0, r7
   d9e24:	b009      	add	sp, #36	; 0x24
   d9e26:	ecbd 8b02 	vpop	{d8}
   d9e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e2e:	463e      	mov	r6, r7
   d9e30:	4625      	mov	r5, r4
   d9e32:	2401      	movs	r4, #1
   d9e34:	e7ca      	b.n	d9dcc <__gethex+0xd4>
   d9e36:	f04f 0900 	mov.w	r9, #0
   d9e3a:	1cb1      	adds	r1, r6, #2
   d9e3c:	e7d3      	b.n	d9de6 <__gethex+0xee>
   d9e3e:	f04f 0901 	mov.w	r9, #1
   d9e42:	e7fa      	b.n	d9e3a <__gethex+0x142>
   d9e44:	230a      	movs	r3, #10
   d9e46:	fb03 0202 	mla	r2, r3, r2, r0
   d9e4a:	3a10      	subs	r2, #16
   d9e4c:	e7d4      	b.n	d9df8 <__gethex+0x100>
   d9e4e:	4631      	mov	r1, r6
   d9e50:	e7df      	b.n	d9e12 <__gethex+0x11a>
   d9e52:	1bf3      	subs	r3, r6, r7
   d9e54:	3b01      	subs	r3, #1
   d9e56:	4621      	mov	r1, r4
   d9e58:	2b07      	cmp	r3, #7
   d9e5a:	dc52      	bgt.n	d9f02 <__gethex+0x20a>
   d9e5c:	ee18 0a10 	vmov	r0, s16
   d9e60:	f000 fa52 	bl	da308 <_Balloc>
   d9e64:	f04f 0b00 	mov.w	fp, #0
   d9e68:	f100 0914 	add.w	r9, r0, #20
   d9e6c:	f1ca 0301 	rsb	r3, sl, #1
   d9e70:	4604      	mov	r4, r0
   d9e72:	f8cd 9008 	str.w	r9, [sp, #8]
   d9e76:	f8cd b000 	str.w	fp, [sp]
   d9e7a:	9306      	str	r3, [sp, #24]
   d9e7c:	42b7      	cmp	r7, r6
   d9e7e:	d343      	bcc.n	d9f08 <__gethex+0x210>
   d9e80:	9802      	ldr	r0, [sp, #8]
   d9e82:	9b00      	ldr	r3, [sp, #0]
   d9e84:	f840 3b04 	str.w	r3, [r0], #4
   d9e88:	eba0 0009 	sub.w	r0, r0, r9
   d9e8c:	1080      	asrs	r0, r0, #2
   d9e8e:	0146      	lsls	r6, r0, #5
   d9e90:	6120      	str	r0, [r4, #16]
   d9e92:	4618      	mov	r0, r3
   d9e94:	f000 faff 	bl	da496 <__hi0bits>
   d9e98:	1a30      	subs	r0, r6, r0
   d9e9a:	f8d8 6000 	ldr.w	r6, [r8]
   d9e9e:	42b0      	cmp	r0, r6
   d9ea0:	dd66      	ble.n	d9f70 <__gethex+0x278>
   d9ea2:	1b87      	subs	r7, r0, r6
   d9ea4:	4639      	mov	r1, r7
   d9ea6:	4620      	mov	r0, r4
   d9ea8:	f000 fe4c 	bl	dab44 <__any_on>
   d9eac:	4682      	mov	sl, r0
   d9eae:	b1a8      	cbz	r0, d9edc <__gethex+0x1e4>
   d9eb0:	1e7b      	subs	r3, r7, #1
   d9eb2:	1159      	asrs	r1, r3, #5
   d9eb4:	f003 021f 	and.w	r2, r3, #31
   d9eb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d9ebc:	f04f 0a01 	mov.w	sl, #1
   d9ec0:	fa0a f202 	lsl.w	r2, sl, r2
   d9ec4:	420a      	tst	r2, r1
   d9ec6:	d009      	beq.n	d9edc <__gethex+0x1e4>
   d9ec8:	4553      	cmp	r3, sl
   d9eca:	dd05      	ble.n	d9ed8 <__gethex+0x1e0>
   d9ecc:	1eb9      	subs	r1, r7, #2
   d9ece:	4620      	mov	r0, r4
   d9ed0:	f000 fe38 	bl	dab44 <__any_on>
   d9ed4:	2800      	cmp	r0, #0
   d9ed6:	d148      	bne.n	d9f6a <__gethex+0x272>
   d9ed8:	f04f 0a02 	mov.w	sl, #2
   d9edc:	4639      	mov	r1, r7
   d9ede:	4620      	mov	r0, r4
   d9ee0:	f7ff fea2 	bl	d9c28 <rshift>
   d9ee4:	443d      	add	r5, r7
   d9ee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9eea:	42ab      	cmp	r3, r5
   d9eec:	da4f      	bge.n	d9f8e <__gethex+0x296>
   d9eee:	ee18 0a10 	vmov	r0, s16
   d9ef2:	4621      	mov	r1, r4
   d9ef4:	f000 fa3c 	bl	da370 <_Bfree>
   d9ef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9efa:	2300      	movs	r3, #0
   d9efc:	6013      	str	r3, [r2, #0]
   d9efe:	27a3      	movs	r7, #163	; 0xa3
   d9f00:	e78f      	b.n	d9e22 <__gethex+0x12a>
   d9f02:	3101      	adds	r1, #1
   d9f04:	105b      	asrs	r3, r3, #1
   d9f06:	e7a7      	b.n	d9e58 <__gethex+0x160>
   d9f08:	1e73      	subs	r3, r6, #1
   d9f0a:	9a05      	ldr	r2, [sp, #20]
   d9f0c:	9303      	str	r3, [sp, #12]
   d9f0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9f12:	4293      	cmp	r3, r2
   d9f14:	d019      	beq.n	d9f4a <__gethex+0x252>
   d9f16:	f1bb 0f20 	cmp.w	fp, #32
   d9f1a:	d107      	bne.n	d9f2c <__gethex+0x234>
   d9f1c:	9b02      	ldr	r3, [sp, #8]
   d9f1e:	9a00      	ldr	r2, [sp, #0]
   d9f20:	f843 2b04 	str.w	r2, [r3], #4
   d9f24:	9302      	str	r3, [sp, #8]
   d9f26:	2300      	movs	r3, #0
   d9f28:	9300      	str	r3, [sp, #0]
   d9f2a:	469b      	mov	fp, r3
   d9f2c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9f30:	f7ff fecc 	bl	d9ccc <__hexdig_fun>
   d9f34:	9b00      	ldr	r3, [sp, #0]
   d9f36:	f000 000f 	and.w	r0, r0, #15
   d9f3a:	fa00 f00b 	lsl.w	r0, r0, fp
   d9f3e:	4303      	orrs	r3, r0
   d9f40:	9300      	str	r3, [sp, #0]
   d9f42:	f10b 0b04 	add.w	fp, fp, #4
   d9f46:	9b03      	ldr	r3, [sp, #12]
   d9f48:	e00d      	b.n	d9f66 <__gethex+0x26e>
   d9f4a:	9b03      	ldr	r3, [sp, #12]
   d9f4c:	9a06      	ldr	r2, [sp, #24]
   d9f4e:	4413      	add	r3, r2
   d9f50:	42bb      	cmp	r3, r7
   d9f52:	d3e0      	bcc.n	d9f16 <__gethex+0x21e>
   d9f54:	4618      	mov	r0, r3
   d9f56:	9901      	ldr	r1, [sp, #4]
   d9f58:	9307      	str	r3, [sp, #28]
   d9f5a:	4652      	mov	r2, sl
   d9f5c:	f7fe ff3b 	bl	d8dd6 <strncmp>
   d9f60:	9b07      	ldr	r3, [sp, #28]
   d9f62:	2800      	cmp	r0, #0
   d9f64:	d1d7      	bne.n	d9f16 <__gethex+0x21e>
   d9f66:	461e      	mov	r6, r3
   d9f68:	e788      	b.n	d9e7c <__gethex+0x184>
   d9f6a:	f04f 0a03 	mov.w	sl, #3
   d9f6e:	e7b5      	b.n	d9edc <__gethex+0x1e4>
   d9f70:	da0a      	bge.n	d9f88 <__gethex+0x290>
   d9f72:	1a37      	subs	r7, r6, r0
   d9f74:	4621      	mov	r1, r4
   d9f76:	ee18 0a10 	vmov	r0, s16
   d9f7a:	463a      	mov	r2, r7
   d9f7c:	f000 fbce 	bl	da71c <__lshift>
   d9f80:	1bed      	subs	r5, r5, r7
   d9f82:	4604      	mov	r4, r0
   d9f84:	f100 0914 	add.w	r9, r0, #20
   d9f88:	f04f 0a00 	mov.w	sl, #0
   d9f8c:	e7ab      	b.n	d9ee6 <__gethex+0x1ee>
   d9f8e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9f92:	42a8      	cmp	r0, r5
   d9f94:	dd6d      	ble.n	da072 <__gethex+0x37a>
   d9f96:	1b45      	subs	r5, r0, r5
   d9f98:	42ae      	cmp	r6, r5
   d9f9a:	dc31      	bgt.n	da000 <__gethex+0x308>
   d9f9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9fa0:	2b02      	cmp	r3, #2
   d9fa2:	d023      	beq.n	d9fec <__gethex+0x2f4>
   d9fa4:	2b03      	cmp	r3, #3
   d9fa6:	d025      	beq.n	d9ff4 <__gethex+0x2fc>
   d9fa8:	2b01      	cmp	r3, #1
   d9faa:	d115      	bne.n	d9fd8 <__gethex+0x2e0>
   d9fac:	42ae      	cmp	r6, r5
   d9fae:	d113      	bne.n	d9fd8 <__gethex+0x2e0>
   d9fb0:	2e01      	cmp	r6, #1
   d9fb2:	d10b      	bne.n	d9fcc <__gethex+0x2d4>
   d9fb4:	9a04      	ldr	r2, [sp, #16]
   d9fb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9fba:	6013      	str	r3, [r2, #0]
   d9fbc:	2301      	movs	r3, #1
   d9fbe:	6123      	str	r3, [r4, #16]
   d9fc0:	f8c9 3000 	str.w	r3, [r9]
   d9fc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9fc6:	2762      	movs	r7, #98	; 0x62
   d9fc8:	601c      	str	r4, [r3, #0]
   d9fca:	e72a      	b.n	d9e22 <__gethex+0x12a>
   d9fcc:	1e71      	subs	r1, r6, #1
   d9fce:	4620      	mov	r0, r4
   d9fd0:	f000 fdb8 	bl	dab44 <__any_on>
   d9fd4:	2800      	cmp	r0, #0
   d9fd6:	d1ed      	bne.n	d9fb4 <__gethex+0x2bc>
   d9fd8:	ee18 0a10 	vmov	r0, s16
   d9fdc:	4621      	mov	r1, r4
   d9fde:	f000 f9c7 	bl	da370 <_Bfree>
   d9fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9fe4:	2300      	movs	r3, #0
   d9fe6:	6013      	str	r3, [r2, #0]
   d9fe8:	2750      	movs	r7, #80	; 0x50
   d9fea:	e71a      	b.n	d9e22 <__gethex+0x12a>
   d9fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9fee:	2b00      	cmp	r3, #0
   d9ff0:	d1f2      	bne.n	d9fd8 <__gethex+0x2e0>
   d9ff2:	e7df      	b.n	d9fb4 <__gethex+0x2bc>
   d9ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9ff6:	2b00      	cmp	r3, #0
   d9ff8:	d1dc      	bne.n	d9fb4 <__gethex+0x2bc>
   d9ffa:	e7ed      	b.n	d9fd8 <__gethex+0x2e0>
   d9ffc:	000db6ec 	.word	0x000db6ec
   da000:	1e6f      	subs	r7, r5, #1
   da002:	f1ba 0f00 	cmp.w	sl, #0
   da006:	d131      	bne.n	da06c <__gethex+0x374>
   da008:	b127      	cbz	r7, da014 <__gethex+0x31c>
   da00a:	4639      	mov	r1, r7
   da00c:	4620      	mov	r0, r4
   da00e:	f000 fd99 	bl	dab44 <__any_on>
   da012:	4682      	mov	sl, r0
   da014:	117b      	asrs	r3, r7, #5
   da016:	2101      	movs	r1, #1
   da018:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da01c:	f007 071f 	and.w	r7, r7, #31
   da020:	fa01 f707 	lsl.w	r7, r1, r7
   da024:	421f      	tst	r7, r3
   da026:	4629      	mov	r1, r5
   da028:	4620      	mov	r0, r4
   da02a:	bf18      	it	ne
   da02c:	f04a 0a02 	orrne.w	sl, sl, #2
   da030:	1b76      	subs	r6, r6, r5
   da032:	f7ff fdf9 	bl	d9c28 <rshift>
   da036:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da03a:	2702      	movs	r7, #2
   da03c:	f1ba 0f00 	cmp.w	sl, #0
   da040:	d048      	beq.n	da0d4 <__gethex+0x3dc>
   da042:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da046:	2b02      	cmp	r3, #2
   da048:	d015      	beq.n	da076 <__gethex+0x37e>
   da04a:	2b03      	cmp	r3, #3
   da04c:	d017      	beq.n	da07e <__gethex+0x386>
   da04e:	2b01      	cmp	r3, #1
   da050:	d109      	bne.n	da066 <__gethex+0x36e>
   da052:	f01a 0f02 	tst.w	sl, #2
   da056:	d006      	beq.n	da066 <__gethex+0x36e>
   da058:	f8d9 0000 	ldr.w	r0, [r9]
   da05c:	ea4a 0a00 	orr.w	sl, sl, r0
   da060:	f01a 0f01 	tst.w	sl, #1
   da064:	d10e      	bne.n	da084 <__gethex+0x38c>
   da066:	f047 0710 	orr.w	r7, r7, #16
   da06a:	e033      	b.n	da0d4 <__gethex+0x3dc>
   da06c:	f04f 0a01 	mov.w	sl, #1
   da070:	e7d0      	b.n	da014 <__gethex+0x31c>
   da072:	2701      	movs	r7, #1
   da074:	e7e2      	b.n	da03c <__gethex+0x344>
   da076:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da078:	f1c3 0301 	rsb	r3, r3, #1
   da07c:	9315      	str	r3, [sp, #84]	; 0x54
   da07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da080:	2b00      	cmp	r3, #0
   da082:	d0f0      	beq.n	da066 <__gethex+0x36e>
   da084:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da088:	f104 0314 	add.w	r3, r4, #20
   da08c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da090:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da094:	f04f 0c00 	mov.w	ip, #0
   da098:	4618      	mov	r0, r3
   da09a:	f853 2b04 	ldr.w	r2, [r3], #4
   da09e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da0a2:	d01c      	beq.n	da0de <__gethex+0x3e6>
   da0a4:	3201      	adds	r2, #1
   da0a6:	6002      	str	r2, [r0, #0]
   da0a8:	2f02      	cmp	r7, #2
   da0aa:	f104 0314 	add.w	r3, r4, #20
   da0ae:	d13a      	bne.n	da126 <__gethex+0x42e>
   da0b0:	f8d8 2000 	ldr.w	r2, [r8]
   da0b4:	3a01      	subs	r2, #1
   da0b6:	42b2      	cmp	r2, r6
   da0b8:	d10a      	bne.n	da0d0 <__gethex+0x3d8>
   da0ba:	1171      	asrs	r1, r6, #5
   da0bc:	2201      	movs	r2, #1
   da0be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da0c2:	f006 061f 	and.w	r6, r6, #31
   da0c6:	fa02 f606 	lsl.w	r6, r2, r6
   da0ca:	421e      	tst	r6, r3
   da0cc:	bf18      	it	ne
   da0ce:	4617      	movne	r7, r2
   da0d0:	f047 0720 	orr.w	r7, r7, #32
   da0d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da0d6:	601c      	str	r4, [r3, #0]
   da0d8:	9b04      	ldr	r3, [sp, #16]
   da0da:	601d      	str	r5, [r3, #0]
   da0dc:	e6a1      	b.n	d9e22 <__gethex+0x12a>
   da0de:	4299      	cmp	r1, r3
   da0e0:	f843 cc04 	str.w	ip, [r3, #-4]
   da0e4:	d8d8      	bhi.n	da098 <__gethex+0x3a0>
   da0e6:	68a3      	ldr	r3, [r4, #8]
   da0e8:	4599      	cmp	r9, r3
   da0ea:	db14      	blt.n	da116 <__gethex+0x41e>
   da0ec:	6861      	ldr	r1, [r4, #4]
   da0ee:	ee18 0a10 	vmov	r0, s16
   da0f2:	3101      	adds	r1, #1
   da0f4:	f000 f908 	bl	da308 <_Balloc>
   da0f8:	6922      	ldr	r2, [r4, #16]
   da0fa:	3202      	adds	r2, #2
   da0fc:	f104 010c 	add.w	r1, r4, #12
   da100:	4682      	mov	sl, r0
   da102:	0092      	lsls	r2, r2, #2
   da104:	300c      	adds	r0, #12
   da106:	f7fe fdf5 	bl	d8cf4 <memcpy>
   da10a:	4621      	mov	r1, r4
   da10c:	ee18 0a10 	vmov	r0, s16
   da110:	f000 f92e 	bl	da370 <_Bfree>
   da114:	4654      	mov	r4, sl
   da116:	6923      	ldr	r3, [r4, #16]
   da118:	1c5a      	adds	r2, r3, #1
   da11a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da11e:	6122      	str	r2, [r4, #16]
   da120:	2201      	movs	r2, #1
   da122:	615a      	str	r2, [r3, #20]
   da124:	e7c0      	b.n	da0a8 <__gethex+0x3b0>
   da126:	6922      	ldr	r2, [r4, #16]
   da128:	454a      	cmp	r2, r9
   da12a:	dd0b      	ble.n	da144 <__gethex+0x44c>
   da12c:	2101      	movs	r1, #1
   da12e:	4620      	mov	r0, r4
   da130:	f7ff fd7a 	bl	d9c28 <rshift>
   da134:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da138:	3501      	adds	r5, #1
   da13a:	42ab      	cmp	r3, r5
   da13c:	f6ff aed7 	blt.w	d9eee <__gethex+0x1f6>
   da140:	2701      	movs	r7, #1
   da142:	e7c5      	b.n	da0d0 <__gethex+0x3d8>
   da144:	f016 061f 	ands.w	r6, r6, #31
   da148:	d0fa      	beq.n	da140 <__gethex+0x448>
   da14a:	449b      	add	fp, r3
   da14c:	f1c6 0620 	rsb	r6, r6, #32
   da150:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da154:	f000 f99f 	bl	da496 <__hi0bits>
   da158:	42b0      	cmp	r0, r6
   da15a:	dbe7      	blt.n	da12c <__gethex+0x434>
   da15c:	e7f0      	b.n	da140 <__gethex+0x448>
   da15e:	bf00      	nop

000da160 <L_shift>:
   da160:	f1c2 0208 	rsb	r2, r2, #8
   da164:	0092      	lsls	r2, r2, #2
   da166:	b570      	push	{r4, r5, r6, lr}
   da168:	f1c2 0620 	rsb	r6, r2, #32
   da16c:	6843      	ldr	r3, [r0, #4]
   da16e:	6804      	ldr	r4, [r0, #0]
   da170:	fa03 f506 	lsl.w	r5, r3, r6
   da174:	432c      	orrs	r4, r5
   da176:	40d3      	lsrs	r3, r2
   da178:	6004      	str	r4, [r0, #0]
   da17a:	f840 3f04 	str.w	r3, [r0, #4]!
   da17e:	4288      	cmp	r0, r1
   da180:	d3f4      	bcc.n	da16c <L_shift+0xc>
   da182:	bd70      	pop	{r4, r5, r6, pc}

000da184 <__match>:
   da184:	b530      	push	{r4, r5, lr}
   da186:	6803      	ldr	r3, [r0, #0]
   da188:	3301      	adds	r3, #1
   da18a:	f811 4b01 	ldrb.w	r4, [r1], #1
   da18e:	b914      	cbnz	r4, da196 <__match+0x12>
   da190:	6003      	str	r3, [r0, #0]
   da192:	2001      	movs	r0, #1
   da194:	bd30      	pop	{r4, r5, pc}
   da196:	f813 2b01 	ldrb.w	r2, [r3], #1
   da19a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da19e:	2d19      	cmp	r5, #25
   da1a0:	bf98      	it	ls
   da1a2:	3220      	addls	r2, #32
   da1a4:	42a2      	cmp	r2, r4
   da1a6:	d0f0      	beq.n	da18a <__match+0x6>
   da1a8:	2000      	movs	r0, #0
   da1aa:	e7f3      	b.n	da194 <__match+0x10>

000da1ac <__hexnan>:
   da1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da1b0:	680b      	ldr	r3, [r1, #0]
   da1b2:	6801      	ldr	r1, [r0, #0]
   da1b4:	115e      	asrs	r6, r3, #5
   da1b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da1ba:	f013 031f 	ands.w	r3, r3, #31
   da1be:	b087      	sub	sp, #28
   da1c0:	bf18      	it	ne
   da1c2:	3604      	addne	r6, #4
   da1c4:	2500      	movs	r5, #0
   da1c6:	1f37      	subs	r7, r6, #4
   da1c8:	4682      	mov	sl, r0
   da1ca:	4690      	mov	r8, r2
   da1cc:	9301      	str	r3, [sp, #4]
   da1ce:	f846 5c04 	str.w	r5, [r6, #-4]
   da1d2:	46b9      	mov	r9, r7
   da1d4:	463c      	mov	r4, r7
   da1d6:	9502      	str	r5, [sp, #8]
   da1d8:	46ab      	mov	fp, r5
   da1da:	784a      	ldrb	r2, [r1, #1]
   da1dc:	1c4b      	adds	r3, r1, #1
   da1de:	9303      	str	r3, [sp, #12]
   da1e0:	b342      	cbz	r2, da234 <__hexnan+0x88>
   da1e2:	4610      	mov	r0, r2
   da1e4:	9105      	str	r1, [sp, #20]
   da1e6:	9204      	str	r2, [sp, #16]
   da1e8:	f7ff fd70 	bl	d9ccc <__hexdig_fun>
   da1ec:	2800      	cmp	r0, #0
   da1ee:	d14f      	bne.n	da290 <__hexnan+0xe4>
   da1f0:	9a04      	ldr	r2, [sp, #16]
   da1f2:	9905      	ldr	r1, [sp, #20]
   da1f4:	2a20      	cmp	r2, #32
   da1f6:	d818      	bhi.n	da22a <__hexnan+0x7e>
   da1f8:	9b02      	ldr	r3, [sp, #8]
   da1fa:	459b      	cmp	fp, r3
   da1fc:	dd13      	ble.n	da226 <__hexnan+0x7a>
   da1fe:	454c      	cmp	r4, r9
   da200:	d206      	bcs.n	da210 <__hexnan+0x64>
   da202:	2d07      	cmp	r5, #7
   da204:	dc04      	bgt.n	da210 <__hexnan+0x64>
   da206:	462a      	mov	r2, r5
   da208:	4649      	mov	r1, r9
   da20a:	4620      	mov	r0, r4
   da20c:	f7ff ffa8 	bl	da160 <L_shift>
   da210:	4544      	cmp	r4, r8
   da212:	d950      	bls.n	da2b6 <__hexnan+0x10a>
   da214:	2300      	movs	r3, #0
   da216:	f1a4 0904 	sub.w	r9, r4, #4
   da21a:	f844 3c04 	str.w	r3, [r4, #-4]
   da21e:	f8cd b008 	str.w	fp, [sp, #8]
   da222:	464c      	mov	r4, r9
   da224:	461d      	mov	r5, r3
   da226:	9903      	ldr	r1, [sp, #12]
   da228:	e7d7      	b.n	da1da <__hexnan+0x2e>
   da22a:	2a29      	cmp	r2, #41	; 0x29
   da22c:	d156      	bne.n	da2dc <__hexnan+0x130>
   da22e:	3102      	adds	r1, #2
   da230:	f8ca 1000 	str.w	r1, [sl]
   da234:	f1bb 0f00 	cmp.w	fp, #0
   da238:	d050      	beq.n	da2dc <__hexnan+0x130>
   da23a:	454c      	cmp	r4, r9
   da23c:	d206      	bcs.n	da24c <__hexnan+0xa0>
   da23e:	2d07      	cmp	r5, #7
   da240:	dc04      	bgt.n	da24c <__hexnan+0xa0>
   da242:	462a      	mov	r2, r5
   da244:	4649      	mov	r1, r9
   da246:	4620      	mov	r0, r4
   da248:	f7ff ff8a 	bl	da160 <L_shift>
   da24c:	4544      	cmp	r4, r8
   da24e:	d934      	bls.n	da2ba <__hexnan+0x10e>
   da250:	f1a8 0204 	sub.w	r2, r8, #4
   da254:	4623      	mov	r3, r4
   da256:	f853 1b04 	ldr.w	r1, [r3], #4
   da25a:	f842 1f04 	str.w	r1, [r2, #4]!
   da25e:	429f      	cmp	r7, r3
   da260:	d2f9      	bcs.n	da256 <__hexnan+0xaa>
   da262:	1b3b      	subs	r3, r7, r4
   da264:	f023 0303 	bic.w	r3, r3, #3
   da268:	3304      	adds	r3, #4
   da26a:	3401      	adds	r4, #1
   da26c:	3e03      	subs	r6, #3
   da26e:	42b4      	cmp	r4, r6
   da270:	bf88      	it	hi
   da272:	2304      	movhi	r3, #4
   da274:	4443      	add	r3, r8
   da276:	2200      	movs	r2, #0
   da278:	f843 2b04 	str.w	r2, [r3], #4
   da27c:	429f      	cmp	r7, r3
   da27e:	d2fb      	bcs.n	da278 <__hexnan+0xcc>
   da280:	683b      	ldr	r3, [r7, #0]
   da282:	b91b      	cbnz	r3, da28c <__hexnan+0xe0>
   da284:	4547      	cmp	r7, r8
   da286:	d127      	bne.n	da2d8 <__hexnan+0x12c>
   da288:	2301      	movs	r3, #1
   da28a:	603b      	str	r3, [r7, #0]
   da28c:	2005      	movs	r0, #5
   da28e:	e026      	b.n	da2de <__hexnan+0x132>
   da290:	3501      	adds	r5, #1
   da292:	2d08      	cmp	r5, #8
   da294:	f10b 0b01 	add.w	fp, fp, #1
   da298:	dd06      	ble.n	da2a8 <__hexnan+0xfc>
   da29a:	4544      	cmp	r4, r8
   da29c:	d9c3      	bls.n	da226 <__hexnan+0x7a>
   da29e:	2300      	movs	r3, #0
   da2a0:	f844 3c04 	str.w	r3, [r4, #-4]
   da2a4:	2501      	movs	r5, #1
   da2a6:	3c04      	subs	r4, #4
   da2a8:	6822      	ldr	r2, [r4, #0]
   da2aa:	f000 000f 	and.w	r0, r0, #15
   da2ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da2b2:	6022      	str	r2, [r4, #0]
   da2b4:	e7b7      	b.n	da226 <__hexnan+0x7a>
   da2b6:	2508      	movs	r5, #8
   da2b8:	e7b5      	b.n	da226 <__hexnan+0x7a>
   da2ba:	9b01      	ldr	r3, [sp, #4]
   da2bc:	2b00      	cmp	r3, #0
   da2be:	d0df      	beq.n	da280 <__hexnan+0xd4>
   da2c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da2c4:	f1c3 0320 	rsb	r3, r3, #32
   da2c8:	fa22 f303 	lsr.w	r3, r2, r3
   da2cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da2d0:	401a      	ands	r2, r3
   da2d2:	f846 2c04 	str.w	r2, [r6, #-4]
   da2d6:	e7d3      	b.n	da280 <__hexnan+0xd4>
   da2d8:	3f04      	subs	r7, #4
   da2da:	e7d1      	b.n	da280 <__hexnan+0xd4>
   da2dc:	2004      	movs	r0, #4
   da2de:	b007      	add	sp, #28
   da2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da2e4 <__ascii_mbtowc>:
   da2e4:	b082      	sub	sp, #8
   da2e6:	b901      	cbnz	r1, da2ea <__ascii_mbtowc+0x6>
   da2e8:	a901      	add	r1, sp, #4
   da2ea:	b142      	cbz	r2, da2fe <__ascii_mbtowc+0x1a>
   da2ec:	b14b      	cbz	r3, da302 <__ascii_mbtowc+0x1e>
   da2ee:	7813      	ldrb	r3, [r2, #0]
   da2f0:	600b      	str	r3, [r1, #0]
   da2f2:	7812      	ldrb	r2, [r2, #0]
   da2f4:	1e10      	subs	r0, r2, #0
   da2f6:	bf18      	it	ne
   da2f8:	2001      	movne	r0, #1
   da2fa:	b002      	add	sp, #8
   da2fc:	4770      	bx	lr
   da2fe:	4610      	mov	r0, r2
   da300:	e7fb      	b.n	da2fa <__ascii_mbtowc+0x16>
   da302:	f06f 0001 	mvn.w	r0, #1
   da306:	e7f8      	b.n	da2fa <__ascii_mbtowc+0x16>

000da308 <_Balloc>:
   da308:	b570      	push	{r4, r5, r6, lr}
   da30a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da30c:	4604      	mov	r4, r0
   da30e:	460d      	mov	r5, r1
   da310:	b93e      	cbnz	r6, da322 <_Balloc+0x1a>
   da312:	2010      	movs	r0, #16
   da314:	f7fc fa34 	bl	d6780 <malloc>
   da318:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da31c:	6260      	str	r0, [r4, #36]	; 0x24
   da31e:	6006      	str	r6, [r0, #0]
   da320:	60c6      	str	r6, [r0, #12]
   da322:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da324:	68f3      	ldr	r3, [r6, #12]
   da326:	b183      	cbz	r3, da34a <_Balloc+0x42>
   da328:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da32a:	68db      	ldr	r3, [r3, #12]
   da32c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da330:	b9b8      	cbnz	r0, da362 <_Balloc+0x5a>
   da332:	2101      	movs	r1, #1
   da334:	fa01 f605 	lsl.w	r6, r1, r5
   da338:	1d72      	adds	r2, r6, #5
   da33a:	0092      	lsls	r2, r2, #2
   da33c:	4620      	mov	r0, r4
   da33e:	f000 fc22 	bl	dab86 <_calloc_r>
   da342:	b160      	cbz	r0, da35e <_Balloc+0x56>
   da344:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da348:	e00e      	b.n	da368 <_Balloc+0x60>
   da34a:	2221      	movs	r2, #33	; 0x21
   da34c:	2104      	movs	r1, #4
   da34e:	4620      	mov	r0, r4
   da350:	f000 fc19 	bl	dab86 <_calloc_r>
   da354:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da356:	60f0      	str	r0, [r6, #12]
   da358:	68db      	ldr	r3, [r3, #12]
   da35a:	2b00      	cmp	r3, #0
   da35c:	d1e4      	bne.n	da328 <_Balloc+0x20>
   da35e:	2000      	movs	r0, #0
   da360:	bd70      	pop	{r4, r5, r6, pc}
   da362:	6802      	ldr	r2, [r0, #0]
   da364:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da368:	2300      	movs	r3, #0
   da36a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da36e:	e7f7      	b.n	da360 <_Balloc+0x58>

000da370 <_Bfree>:
   da370:	b570      	push	{r4, r5, r6, lr}
   da372:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da374:	4605      	mov	r5, r0
   da376:	460c      	mov	r4, r1
   da378:	b93e      	cbnz	r6, da38a <_Bfree+0x1a>
   da37a:	2010      	movs	r0, #16
   da37c:	f7fc fa00 	bl	d6780 <malloc>
   da380:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da384:	6268      	str	r0, [r5, #36]	; 0x24
   da386:	6006      	str	r6, [r0, #0]
   da388:	60c6      	str	r6, [r0, #12]
   da38a:	b13c      	cbz	r4, da39c <_Bfree+0x2c>
   da38c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da38e:	6862      	ldr	r2, [r4, #4]
   da390:	68db      	ldr	r3, [r3, #12]
   da392:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da396:	6021      	str	r1, [r4, #0]
   da398:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da39c:	bd70      	pop	{r4, r5, r6, pc}

000da39e <__multadd>:
   da39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da3a2:	690e      	ldr	r6, [r1, #16]
   da3a4:	4607      	mov	r7, r0
   da3a6:	4698      	mov	r8, r3
   da3a8:	460c      	mov	r4, r1
   da3aa:	f101 0014 	add.w	r0, r1, #20
   da3ae:	2300      	movs	r3, #0
   da3b0:	6805      	ldr	r5, [r0, #0]
   da3b2:	b2a9      	uxth	r1, r5
   da3b4:	fb02 8101 	mla	r1, r2, r1, r8
   da3b8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da3bc:	0c2d      	lsrs	r5, r5, #16
   da3be:	fb02 c505 	mla	r5, r2, r5, ip
   da3c2:	b289      	uxth	r1, r1
   da3c4:	3301      	adds	r3, #1
   da3c6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da3ca:	429e      	cmp	r6, r3
   da3cc:	f840 1b04 	str.w	r1, [r0], #4
   da3d0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da3d4:	dcec      	bgt.n	da3b0 <__multadd+0x12>
   da3d6:	f1b8 0f00 	cmp.w	r8, #0
   da3da:	d01b      	beq.n	da414 <__multadd+0x76>
   da3dc:	68a3      	ldr	r3, [r4, #8]
   da3de:	42b3      	cmp	r3, r6
   da3e0:	dc12      	bgt.n	da408 <__multadd+0x6a>
   da3e2:	6861      	ldr	r1, [r4, #4]
   da3e4:	4638      	mov	r0, r7
   da3e6:	3101      	adds	r1, #1
   da3e8:	f7ff ff8e 	bl	da308 <_Balloc>
   da3ec:	6922      	ldr	r2, [r4, #16]
   da3ee:	3202      	adds	r2, #2
   da3f0:	f104 010c 	add.w	r1, r4, #12
   da3f4:	4605      	mov	r5, r0
   da3f6:	0092      	lsls	r2, r2, #2
   da3f8:	300c      	adds	r0, #12
   da3fa:	f7fe fc7b 	bl	d8cf4 <memcpy>
   da3fe:	4621      	mov	r1, r4
   da400:	4638      	mov	r0, r7
   da402:	f7ff ffb5 	bl	da370 <_Bfree>
   da406:	462c      	mov	r4, r5
   da408:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da40c:	3601      	adds	r6, #1
   da40e:	f8c3 8014 	str.w	r8, [r3, #20]
   da412:	6126      	str	r6, [r4, #16]
   da414:	4620      	mov	r0, r4
   da416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da41a <__s2b>:
   da41a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da41e:	460c      	mov	r4, r1
   da420:	4615      	mov	r5, r2
   da422:	461f      	mov	r7, r3
   da424:	2209      	movs	r2, #9
   da426:	3308      	adds	r3, #8
   da428:	4606      	mov	r6, r0
   da42a:	fb93 f3f2 	sdiv	r3, r3, r2
   da42e:	2100      	movs	r1, #0
   da430:	2201      	movs	r2, #1
   da432:	429a      	cmp	r2, r3
   da434:	db20      	blt.n	da478 <__s2b+0x5e>
   da436:	4630      	mov	r0, r6
   da438:	f7ff ff66 	bl	da308 <_Balloc>
   da43c:	9b08      	ldr	r3, [sp, #32]
   da43e:	6143      	str	r3, [r0, #20]
   da440:	2d09      	cmp	r5, #9
   da442:	f04f 0301 	mov.w	r3, #1
   da446:	6103      	str	r3, [r0, #16]
   da448:	dd19      	ble.n	da47e <__s2b+0x64>
   da44a:	f104 0909 	add.w	r9, r4, #9
   da44e:	46c8      	mov	r8, r9
   da450:	442c      	add	r4, r5
   da452:	f818 3b01 	ldrb.w	r3, [r8], #1
   da456:	4601      	mov	r1, r0
   da458:	3b30      	subs	r3, #48	; 0x30
   da45a:	220a      	movs	r2, #10
   da45c:	4630      	mov	r0, r6
   da45e:	f7ff ff9e 	bl	da39e <__multadd>
   da462:	45a0      	cmp	r8, r4
   da464:	d1f5      	bne.n	da452 <__s2b+0x38>
   da466:	f1a5 0408 	sub.w	r4, r5, #8
   da46a:	444c      	add	r4, r9
   da46c:	1b2d      	subs	r5, r5, r4
   da46e:	1963      	adds	r3, r4, r5
   da470:	42bb      	cmp	r3, r7
   da472:	db07      	blt.n	da484 <__s2b+0x6a>
   da474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da478:	0052      	lsls	r2, r2, #1
   da47a:	3101      	adds	r1, #1
   da47c:	e7d9      	b.n	da432 <__s2b+0x18>
   da47e:	340a      	adds	r4, #10
   da480:	2509      	movs	r5, #9
   da482:	e7f3      	b.n	da46c <__s2b+0x52>
   da484:	f814 3b01 	ldrb.w	r3, [r4], #1
   da488:	4601      	mov	r1, r0
   da48a:	3b30      	subs	r3, #48	; 0x30
   da48c:	220a      	movs	r2, #10
   da48e:	4630      	mov	r0, r6
   da490:	f7ff ff85 	bl	da39e <__multadd>
   da494:	e7eb      	b.n	da46e <__s2b+0x54>

000da496 <__hi0bits>:
   da496:	0c03      	lsrs	r3, r0, #16
   da498:	041b      	lsls	r3, r3, #16
   da49a:	b9d3      	cbnz	r3, da4d2 <__hi0bits+0x3c>
   da49c:	0400      	lsls	r0, r0, #16
   da49e:	2310      	movs	r3, #16
   da4a0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da4a4:	bf04      	itt	eq
   da4a6:	0200      	lsleq	r0, r0, #8
   da4a8:	3308      	addeq	r3, #8
   da4aa:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da4ae:	bf04      	itt	eq
   da4b0:	0100      	lsleq	r0, r0, #4
   da4b2:	3304      	addeq	r3, #4
   da4b4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da4b8:	bf04      	itt	eq
   da4ba:	0080      	lsleq	r0, r0, #2
   da4bc:	3302      	addeq	r3, #2
   da4be:	2800      	cmp	r0, #0
   da4c0:	db05      	blt.n	da4ce <__hi0bits+0x38>
   da4c2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da4c6:	f103 0301 	add.w	r3, r3, #1
   da4ca:	bf08      	it	eq
   da4cc:	2320      	moveq	r3, #32
   da4ce:	4618      	mov	r0, r3
   da4d0:	4770      	bx	lr
   da4d2:	2300      	movs	r3, #0
   da4d4:	e7e4      	b.n	da4a0 <__hi0bits+0xa>

000da4d6 <__lo0bits>:
   da4d6:	6803      	ldr	r3, [r0, #0]
   da4d8:	f013 0207 	ands.w	r2, r3, #7
   da4dc:	4601      	mov	r1, r0
   da4de:	d00b      	beq.n	da4f8 <__lo0bits+0x22>
   da4e0:	07da      	lsls	r2, r3, #31
   da4e2:	d424      	bmi.n	da52e <__lo0bits+0x58>
   da4e4:	0798      	lsls	r0, r3, #30
   da4e6:	bf49      	itett	mi
   da4e8:	085b      	lsrmi	r3, r3, #1
   da4ea:	089b      	lsrpl	r3, r3, #2
   da4ec:	2001      	movmi	r0, #1
   da4ee:	600b      	strmi	r3, [r1, #0]
   da4f0:	bf5c      	itt	pl
   da4f2:	600b      	strpl	r3, [r1, #0]
   da4f4:	2002      	movpl	r0, #2
   da4f6:	4770      	bx	lr
   da4f8:	b298      	uxth	r0, r3
   da4fa:	b9b0      	cbnz	r0, da52a <__lo0bits+0x54>
   da4fc:	0c1b      	lsrs	r3, r3, #16
   da4fe:	2010      	movs	r0, #16
   da500:	f013 0fff 	tst.w	r3, #255	; 0xff
   da504:	bf04      	itt	eq
   da506:	0a1b      	lsreq	r3, r3, #8
   da508:	3008      	addeq	r0, #8
   da50a:	071a      	lsls	r2, r3, #28
   da50c:	bf04      	itt	eq
   da50e:	091b      	lsreq	r3, r3, #4
   da510:	3004      	addeq	r0, #4
   da512:	079a      	lsls	r2, r3, #30
   da514:	bf04      	itt	eq
   da516:	089b      	lsreq	r3, r3, #2
   da518:	3002      	addeq	r0, #2
   da51a:	07da      	lsls	r2, r3, #31
   da51c:	d403      	bmi.n	da526 <__lo0bits+0x50>
   da51e:	085b      	lsrs	r3, r3, #1
   da520:	f100 0001 	add.w	r0, r0, #1
   da524:	d005      	beq.n	da532 <__lo0bits+0x5c>
   da526:	600b      	str	r3, [r1, #0]
   da528:	4770      	bx	lr
   da52a:	4610      	mov	r0, r2
   da52c:	e7e8      	b.n	da500 <__lo0bits+0x2a>
   da52e:	2000      	movs	r0, #0
   da530:	4770      	bx	lr
   da532:	2020      	movs	r0, #32
   da534:	4770      	bx	lr

000da536 <__i2b>:
   da536:	b510      	push	{r4, lr}
   da538:	460c      	mov	r4, r1
   da53a:	2101      	movs	r1, #1
   da53c:	f7ff fee4 	bl	da308 <_Balloc>
   da540:	2201      	movs	r2, #1
   da542:	6144      	str	r4, [r0, #20]
   da544:	6102      	str	r2, [r0, #16]
   da546:	bd10      	pop	{r4, pc}

000da548 <__multiply>:
   da548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da54c:	4615      	mov	r5, r2
   da54e:	690a      	ldr	r2, [r1, #16]
   da550:	692b      	ldr	r3, [r5, #16]
   da552:	429a      	cmp	r2, r3
   da554:	bfb8      	it	lt
   da556:	460b      	movlt	r3, r1
   da558:	460c      	mov	r4, r1
   da55a:	bfbc      	itt	lt
   da55c:	462c      	movlt	r4, r5
   da55e:	461d      	movlt	r5, r3
   da560:	6927      	ldr	r7, [r4, #16]
   da562:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da566:	68a3      	ldr	r3, [r4, #8]
   da568:	6861      	ldr	r1, [r4, #4]
   da56a:	eb07 0609 	add.w	r6, r7, r9
   da56e:	42b3      	cmp	r3, r6
   da570:	bfb8      	it	lt
   da572:	3101      	addlt	r1, #1
   da574:	b085      	sub	sp, #20
   da576:	f7ff fec7 	bl	da308 <_Balloc>
   da57a:	f100 0114 	add.w	r1, r0, #20
   da57e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da582:	460b      	mov	r3, r1
   da584:	2200      	movs	r2, #0
   da586:	4543      	cmp	r3, r8
   da588:	d31d      	bcc.n	da5c6 <__multiply+0x7e>
   da58a:	f104 0314 	add.w	r3, r4, #20
   da58e:	f105 0214 	add.w	r2, r5, #20
   da592:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da596:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da59a:	9302      	str	r3, [sp, #8]
   da59c:	1b3b      	subs	r3, r7, r4
   da59e:	3b15      	subs	r3, #21
   da5a0:	f023 0303 	bic.w	r3, r3, #3
   da5a4:	3304      	adds	r3, #4
   da5a6:	f104 0515 	add.w	r5, r4, #21
   da5aa:	42af      	cmp	r7, r5
   da5ac:	bf38      	it	cc
   da5ae:	2304      	movcc	r3, #4
   da5b0:	9301      	str	r3, [sp, #4]
   da5b2:	9b02      	ldr	r3, [sp, #8]
   da5b4:	9203      	str	r2, [sp, #12]
   da5b6:	4293      	cmp	r3, r2
   da5b8:	d808      	bhi.n	da5cc <__multiply+0x84>
   da5ba:	2e00      	cmp	r6, #0
   da5bc:	dc5a      	bgt.n	da674 <__multiply+0x12c>
   da5be:	6106      	str	r6, [r0, #16]
   da5c0:	b005      	add	sp, #20
   da5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da5c6:	f843 2b04 	str.w	r2, [r3], #4
   da5ca:	e7dc      	b.n	da586 <__multiply+0x3e>
   da5cc:	f8b2 a000 	ldrh.w	sl, [r2]
   da5d0:	f1ba 0f00 	cmp.w	sl, #0
   da5d4:	d024      	beq.n	da620 <__multiply+0xd8>
   da5d6:	f104 0e14 	add.w	lr, r4, #20
   da5da:	4689      	mov	r9, r1
   da5dc:	f04f 0c00 	mov.w	ip, #0
   da5e0:	f85e 5b04 	ldr.w	r5, [lr], #4
   da5e4:	f8d9 b000 	ldr.w	fp, [r9]
   da5e8:	b2ab      	uxth	r3, r5
   da5ea:	fa1f fb8b 	uxth.w	fp, fp
   da5ee:	fb0a b303 	mla	r3, sl, r3, fp
   da5f2:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da5f6:	f8d9 5000 	ldr.w	r5, [r9]
   da5fa:	4463      	add	r3, ip
   da5fc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da600:	fb0a c50b 	mla	r5, sl, fp, ip
   da604:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da608:	b29b      	uxth	r3, r3
   da60a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da60e:	4577      	cmp	r7, lr
   da610:	f849 3b04 	str.w	r3, [r9], #4
   da614:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da618:	d8e2      	bhi.n	da5e0 <__multiply+0x98>
   da61a:	9b01      	ldr	r3, [sp, #4]
   da61c:	f841 c003 	str.w	ip, [r1, r3]
   da620:	9b03      	ldr	r3, [sp, #12]
   da622:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da626:	3204      	adds	r2, #4
   da628:	f1b9 0f00 	cmp.w	r9, #0
   da62c:	d020      	beq.n	da670 <__multiply+0x128>
   da62e:	680b      	ldr	r3, [r1, #0]
   da630:	f104 0c14 	add.w	ip, r4, #20
   da634:	468e      	mov	lr, r1
   da636:	f04f 0a00 	mov.w	sl, #0
   da63a:	f8bc 5000 	ldrh.w	r5, [ip]
   da63e:	f8be b002 	ldrh.w	fp, [lr, #2]
   da642:	fb09 b505 	mla	r5, r9, r5, fp
   da646:	44aa      	add	sl, r5
   da648:	b29b      	uxth	r3, r3
   da64a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da64e:	f84e 3b04 	str.w	r3, [lr], #4
   da652:	f85c 3b04 	ldr.w	r3, [ip], #4
   da656:	f8be 5000 	ldrh.w	r5, [lr]
   da65a:	0c1b      	lsrs	r3, r3, #16
   da65c:	fb09 5303 	mla	r3, r9, r3, r5
   da660:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da664:	4567      	cmp	r7, ip
   da666:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da66a:	d8e6      	bhi.n	da63a <__multiply+0xf2>
   da66c:	9d01      	ldr	r5, [sp, #4]
   da66e:	514b      	str	r3, [r1, r5]
   da670:	3104      	adds	r1, #4
   da672:	e79e      	b.n	da5b2 <__multiply+0x6a>
   da674:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da678:	2b00      	cmp	r3, #0
   da67a:	d1a0      	bne.n	da5be <__multiply+0x76>
   da67c:	3e01      	subs	r6, #1
   da67e:	e79c      	b.n	da5ba <__multiply+0x72>

000da680 <__pow5mult>:
   da680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da684:	4615      	mov	r5, r2
   da686:	f012 0203 	ands.w	r2, r2, #3
   da68a:	4606      	mov	r6, r0
   da68c:	460f      	mov	r7, r1
   da68e:	d007      	beq.n	da6a0 <__pow5mult+0x20>
   da690:	4c21      	ldr	r4, [pc, #132]	; (da718 <__pow5mult+0x98>)
   da692:	3a01      	subs	r2, #1
   da694:	2300      	movs	r3, #0
   da696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da69a:	f7ff fe80 	bl	da39e <__multadd>
   da69e:	4607      	mov	r7, r0
   da6a0:	10ad      	asrs	r5, r5, #2
   da6a2:	d035      	beq.n	da710 <__pow5mult+0x90>
   da6a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da6a6:	b93c      	cbnz	r4, da6b8 <__pow5mult+0x38>
   da6a8:	2010      	movs	r0, #16
   da6aa:	f7fc f869 	bl	d6780 <malloc>
   da6ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da6b2:	6270      	str	r0, [r6, #36]	; 0x24
   da6b4:	6004      	str	r4, [r0, #0]
   da6b6:	60c4      	str	r4, [r0, #12]
   da6b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da6c0:	b94c      	cbnz	r4, da6d6 <__pow5mult+0x56>
   da6c2:	f240 2171 	movw	r1, #625	; 0x271
   da6c6:	4630      	mov	r0, r6
   da6c8:	f7ff ff35 	bl	da536 <__i2b>
   da6cc:	2300      	movs	r3, #0
   da6ce:	f8c8 0008 	str.w	r0, [r8, #8]
   da6d2:	4604      	mov	r4, r0
   da6d4:	6003      	str	r3, [r0, #0]
   da6d6:	f04f 0900 	mov.w	r9, #0
   da6da:	07eb      	lsls	r3, r5, #31
   da6dc:	d50a      	bpl.n	da6f4 <__pow5mult+0x74>
   da6de:	4639      	mov	r1, r7
   da6e0:	4622      	mov	r2, r4
   da6e2:	4630      	mov	r0, r6
   da6e4:	f7ff ff30 	bl	da548 <__multiply>
   da6e8:	4639      	mov	r1, r7
   da6ea:	4680      	mov	r8, r0
   da6ec:	4630      	mov	r0, r6
   da6ee:	f7ff fe3f 	bl	da370 <_Bfree>
   da6f2:	4647      	mov	r7, r8
   da6f4:	106d      	asrs	r5, r5, #1
   da6f6:	d00b      	beq.n	da710 <__pow5mult+0x90>
   da6f8:	6820      	ldr	r0, [r4, #0]
   da6fa:	b938      	cbnz	r0, da70c <__pow5mult+0x8c>
   da6fc:	4622      	mov	r2, r4
   da6fe:	4621      	mov	r1, r4
   da700:	4630      	mov	r0, r6
   da702:	f7ff ff21 	bl	da548 <__multiply>
   da706:	6020      	str	r0, [r4, #0]
   da708:	f8c0 9000 	str.w	r9, [r0]
   da70c:	4604      	mov	r4, r0
   da70e:	e7e4      	b.n	da6da <__pow5mult+0x5a>
   da710:	4638      	mov	r0, r7
   da712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da716:	bf00      	nop
   da718:	000db7f0 	.word	0x000db7f0

000da71c <__lshift>:
   da71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da720:	460c      	mov	r4, r1
   da722:	6849      	ldr	r1, [r1, #4]
   da724:	6923      	ldr	r3, [r4, #16]
   da726:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da72a:	68a3      	ldr	r3, [r4, #8]
   da72c:	4607      	mov	r7, r0
   da72e:	4691      	mov	r9, r2
   da730:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da734:	f108 0601 	add.w	r6, r8, #1
   da738:	42b3      	cmp	r3, r6
   da73a:	db3f      	blt.n	da7bc <__lshift+0xa0>
   da73c:	4638      	mov	r0, r7
   da73e:	f7ff fde3 	bl	da308 <_Balloc>
   da742:	2300      	movs	r3, #0
   da744:	4605      	mov	r5, r0
   da746:	f100 0114 	add.w	r1, r0, #20
   da74a:	f100 0210 	add.w	r2, r0, #16
   da74e:	4618      	mov	r0, r3
   da750:	4553      	cmp	r3, sl
   da752:	db36      	blt.n	da7c2 <__lshift+0xa6>
   da754:	6920      	ldr	r0, [r4, #16]
   da756:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da75a:	f104 0314 	add.w	r3, r4, #20
   da75e:	f019 091f 	ands.w	r9, r9, #31
   da762:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da766:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da76a:	d02e      	beq.n	da7ca <__lshift+0xae>
   da76c:	f1c9 0e20 	rsb	lr, r9, #32
   da770:	468a      	mov	sl, r1
   da772:	2200      	movs	r2, #0
   da774:	6818      	ldr	r0, [r3, #0]
   da776:	fa00 f009 	lsl.w	r0, r0, r9
   da77a:	4302      	orrs	r2, r0
   da77c:	f84a 2b04 	str.w	r2, [sl], #4
   da780:	f853 2b04 	ldr.w	r2, [r3], #4
   da784:	459c      	cmp	ip, r3
   da786:	fa22 f20e 	lsr.w	r2, r2, lr
   da78a:	d8f3      	bhi.n	da774 <__lshift+0x58>
   da78c:	ebac 0304 	sub.w	r3, ip, r4
   da790:	3b15      	subs	r3, #21
   da792:	f023 0303 	bic.w	r3, r3, #3
   da796:	3304      	adds	r3, #4
   da798:	f104 0015 	add.w	r0, r4, #21
   da79c:	4560      	cmp	r0, ip
   da79e:	bf88      	it	hi
   da7a0:	2304      	movhi	r3, #4
   da7a2:	50ca      	str	r2, [r1, r3]
   da7a4:	b10a      	cbz	r2, da7aa <__lshift+0x8e>
   da7a6:	f108 0602 	add.w	r6, r8, #2
   da7aa:	3e01      	subs	r6, #1
   da7ac:	4638      	mov	r0, r7
   da7ae:	612e      	str	r6, [r5, #16]
   da7b0:	4621      	mov	r1, r4
   da7b2:	f7ff fddd 	bl	da370 <_Bfree>
   da7b6:	4628      	mov	r0, r5
   da7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7bc:	3101      	adds	r1, #1
   da7be:	005b      	lsls	r3, r3, #1
   da7c0:	e7ba      	b.n	da738 <__lshift+0x1c>
   da7c2:	f842 0f04 	str.w	r0, [r2, #4]!
   da7c6:	3301      	adds	r3, #1
   da7c8:	e7c2      	b.n	da750 <__lshift+0x34>
   da7ca:	3904      	subs	r1, #4
   da7cc:	f853 2b04 	ldr.w	r2, [r3], #4
   da7d0:	f841 2f04 	str.w	r2, [r1, #4]!
   da7d4:	459c      	cmp	ip, r3
   da7d6:	d8f9      	bhi.n	da7cc <__lshift+0xb0>
   da7d8:	e7e7      	b.n	da7aa <__lshift+0x8e>

000da7da <__mcmp>:
   da7da:	b530      	push	{r4, r5, lr}
   da7dc:	6902      	ldr	r2, [r0, #16]
   da7de:	690c      	ldr	r4, [r1, #16]
   da7e0:	1b12      	subs	r2, r2, r4
   da7e2:	d10e      	bne.n	da802 <__mcmp+0x28>
   da7e4:	f100 0314 	add.w	r3, r0, #20
   da7e8:	3114      	adds	r1, #20
   da7ea:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da7ee:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da7f2:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da7f6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da7fa:	42a5      	cmp	r5, r4
   da7fc:	d003      	beq.n	da806 <__mcmp+0x2c>
   da7fe:	d305      	bcc.n	da80c <__mcmp+0x32>
   da800:	2201      	movs	r2, #1
   da802:	4610      	mov	r0, r2
   da804:	bd30      	pop	{r4, r5, pc}
   da806:	4283      	cmp	r3, r0
   da808:	d3f3      	bcc.n	da7f2 <__mcmp+0x18>
   da80a:	e7fa      	b.n	da802 <__mcmp+0x28>
   da80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da810:	e7f7      	b.n	da802 <__mcmp+0x28>

000da812 <__mdiff>:
   da812:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da816:	460c      	mov	r4, r1
   da818:	4606      	mov	r6, r0
   da81a:	4611      	mov	r1, r2
   da81c:	4620      	mov	r0, r4
   da81e:	4617      	mov	r7, r2
   da820:	f7ff ffdb 	bl	da7da <__mcmp>
   da824:	1e05      	subs	r5, r0, #0
   da826:	d108      	bne.n	da83a <__mdiff+0x28>
   da828:	4629      	mov	r1, r5
   da82a:	4630      	mov	r0, r6
   da82c:	f7ff fd6c 	bl	da308 <_Balloc>
   da830:	2301      	movs	r3, #1
   da832:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da836:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da83a:	bfa4      	itt	ge
   da83c:	463b      	movge	r3, r7
   da83e:	4627      	movge	r7, r4
   da840:	4630      	mov	r0, r6
   da842:	6879      	ldr	r1, [r7, #4]
   da844:	bfa6      	itte	ge
   da846:	461c      	movge	r4, r3
   da848:	2500      	movge	r5, #0
   da84a:	2501      	movlt	r5, #1
   da84c:	f7ff fd5c 	bl	da308 <_Balloc>
   da850:	693e      	ldr	r6, [r7, #16]
   da852:	60c5      	str	r5, [r0, #12]
   da854:	6925      	ldr	r5, [r4, #16]
   da856:	f107 0114 	add.w	r1, r7, #20
   da85a:	f104 0914 	add.w	r9, r4, #20
   da85e:	f100 0e14 	add.w	lr, r0, #20
   da862:	f107 0210 	add.w	r2, r7, #16
   da866:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da86a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da86e:	46f2      	mov	sl, lr
   da870:	2700      	movs	r7, #0
   da872:	f859 3b04 	ldr.w	r3, [r9], #4
   da876:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da87a:	fa1f f883 	uxth.w	r8, r3
   da87e:	fa17 f78b 	uxtah	r7, r7, fp
   da882:	0c1b      	lsrs	r3, r3, #16
   da884:	eba7 0808 	sub.w	r8, r7, r8
   da888:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da88c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da890:	fa1f f888 	uxth.w	r8, r8
   da894:	141f      	asrs	r7, r3, #16
   da896:	454d      	cmp	r5, r9
   da898:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da89c:	f84a 3b04 	str.w	r3, [sl], #4
   da8a0:	d8e7      	bhi.n	da872 <__mdiff+0x60>
   da8a2:	1b2b      	subs	r3, r5, r4
   da8a4:	3b15      	subs	r3, #21
   da8a6:	f023 0303 	bic.w	r3, r3, #3
   da8aa:	3304      	adds	r3, #4
   da8ac:	3415      	adds	r4, #21
   da8ae:	42a5      	cmp	r5, r4
   da8b0:	bf38      	it	cc
   da8b2:	2304      	movcc	r3, #4
   da8b4:	4419      	add	r1, r3
   da8b6:	4473      	add	r3, lr
   da8b8:	469e      	mov	lr, r3
   da8ba:	460d      	mov	r5, r1
   da8bc:	4565      	cmp	r5, ip
   da8be:	d30e      	bcc.n	da8de <__mdiff+0xcc>
   da8c0:	f10c 0203 	add.w	r2, ip, #3
   da8c4:	1a52      	subs	r2, r2, r1
   da8c6:	f022 0203 	bic.w	r2, r2, #3
   da8ca:	3903      	subs	r1, #3
   da8cc:	458c      	cmp	ip, r1
   da8ce:	bf38      	it	cc
   da8d0:	2200      	movcc	r2, #0
   da8d2:	441a      	add	r2, r3
   da8d4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da8d8:	b17b      	cbz	r3, da8fa <__mdiff+0xe8>
   da8da:	6106      	str	r6, [r0, #16]
   da8dc:	e7ab      	b.n	da836 <__mdiff+0x24>
   da8de:	f855 8b04 	ldr.w	r8, [r5], #4
   da8e2:	fa17 f488 	uxtah	r4, r7, r8
   da8e6:	1422      	asrs	r2, r4, #16
   da8e8:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da8ec:	b2a4      	uxth	r4, r4
   da8ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da8f2:	f84e 4b04 	str.w	r4, [lr], #4
   da8f6:	1417      	asrs	r7, r2, #16
   da8f8:	e7e0      	b.n	da8bc <__mdiff+0xaa>
   da8fa:	3e01      	subs	r6, #1
   da8fc:	e7ea      	b.n	da8d4 <__mdiff+0xc2>
	...

000da900 <__ulp>:
   da900:	b082      	sub	sp, #8
   da902:	ed8d 0b00 	vstr	d0, [sp]
   da906:	9b01      	ldr	r3, [sp, #4]
   da908:	4912      	ldr	r1, [pc, #72]	; (da954 <__ulp+0x54>)
   da90a:	4019      	ands	r1, r3
   da90c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da910:	2900      	cmp	r1, #0
   da912:	dd05      	ble.n	da920 <__ulp+0x20>
   da914:	2200      	movs	r2, #0
   da916:	460b      	mov	r3, r1
   da918:	ec43 2b10 	vmov	d0, r2, r3
   da91c:	b002      	add	sp, #8
   da91e:	4770      	bx	lr
   da920:	4249      	negs	r1, r1
   da922:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da926:	ea4f 5021 	mov.w	r0, r1, asr #20
   da92a:	f04f 0200 	mov.w	r2, #0
   da92e:	f04f 0300 	mov.w	r3, #0
   da932:	da04      	bge.n	da93e <__ulp+0x3e>
   da934:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da938:	fa41 f300 	asr.w	r3, r1, r0
   da93c:	e7ec      	b.n	da918 <__ulp+0x18>
   da93e:	f1a0 0114 	sub.w	r1, r0, #20
   da942:	291e      	cmp	r1, #30
   da944:	bfda      	itte	le
   da946:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da94a:	fa20 f101 	lsrle.w	r1, r0, r1
   da94e:	2101      	movgt	r1, #1
   da950:	460a      	mov	r2, r1
   da952:	e7e1      	b.n	da918 <__ulp+0x18>
   da954:	7ff00000 	.word	0x7ff00000

000da958 <__b2d>:
   da958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da95a:	6905      	ldr	r5, [r0, #16]
   da95c:	f100 0714 	add.w	r7, r0, #20
   da960:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da964:	1f2e      	subs	r6, r5, #4
   da966:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da96a:	4620      	mov	r0, r4
   da96c:	f7ff fd93 	bl	da496 <__hi0bits>
   da970:	f1c0 0320 	rsb	r3, r0, #32
   da974:	280a      	cmp	r0, #10
   da976:	f8df c07c 	ldr.w	ip, [pc, #124]	; da9f4 <__b2d+0x9c>
   da97a:	600b      	str	r3, [r1, #0]
   da97c:	dc14      	bgt.n	da9a8 <__b2d+0x50>
   da97e:	f1c0 0e0b 	rsb	lr, r0, #11
   da982:	fa24 f10e 	lsr.w	r1, r4, lr
   da986:	42b7      	cmp	r7, r6
   da988:	ea41 030c 	orr.w	r3, r1, ip
   da98c:	bf34      	ite	cc
   da98e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da992:	2100      	movcs	r1, #0
   da994:	3015      	adds	r0, #21
   da996:	fa04 f000 	lsl.w	r0, r4, r0
   da99a:	fa21 f10e 	lsr.w	r1, r1, lr
   da99e:	ea40 0201 	orr.w	r2, r0, r1
   da9a2:	ec43 2b10 	vmov	d0, r2, r3
   da9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da9a8:	42b7      	cmp	r7, r6
   da9aa:	bf3a      	itte	cc
   da9ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da9b0:	f1a5 0608 	subcc.w	r6, r5, #8
   da9b4:	2100      	movcs	r1, #0
   da9b6:	380b      	subs	r0, #11
   da9b8:	d017      	beq.n	da9ea <__b2d+0x92>
   da9ba:	f1c0 0c20 	rsb	ip, r0, #32
   da9be:	fa04 f500 	lsl.w	r5, r4, r0
   da9c2:	42be      	cmp	r6, r7
   da9c4:	fa21 f40c 	lsr.w	r4, r1, ip
   da9c8:	ea45 0504 	orr.w	r5, r5, r4
   da9cc:	bf8c      	ite	hi
   da9ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da9d2:	2400      	movls	r4, #0
   da9d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da9d8:	fa01 f000 	lsl.w	r0, r1, r0
   da9dc:	fa24 f40c 	lsr.w	r4, r4, ip
   da9e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da9e4:	ea40 0204 	orr.w	r2, r0, r4
   da9e8:	e7db      	b.n	da9a2 <__b2d+0x4a>
   da9ea:	ea44 030c 	orr.w	r3, r4, ip
   da9ee:	460a      	mov	r2, r1
   da9f0:	e7d7      	b.n	da9a2 <__b2d+0x4a>
   da9f2:	bf00      	nop
   da9f4:	3ff00000 	.word	0x3ff00000

000da9f8 <__d2b>:
   da9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da9fc:	4689      	mov	r9, r1
   da9fe:	2101      	movs	r1, #1
   daa00:	ec57 6b10 	vmov	r6, r7, d0
   daa04:	4690      	mov	r8, r2
   daa06:	f7ff fc7f 	bl	da308 <_Balloc>
   daa0a:	f3c7 550a 	ubfx	r5, r7, #20, #11
   daa0e:	4604      	mov	r4, r0
   daa10:	f3c7 0313 	ubfx	r3, r7, #0, #20
   daa14:	bb35      	cbnz	r5, daa64 <__d2b+0x6c>
   daa16:	2e00      	cmp	r6, #0
   daa18:	9301      	str	r3, [sp, #4]
   daa1a:	d028      	beq.n	daa6e <__d2b+0x76>
   daa1c:	4668      	mov	r0, sp
   daa1e:	9600      	str	r6, [sp, #0]
   daa20:	f7ff fd59 	bl	da4d6 <__lo0bits>
   daa24:	9900      	ldr	r1, [sp, #0]
   daa26:	b300      	cbz	r0, daa6a <__d2b+0x72>
   daa28:	9a01      	ldr	r2, [sp, #4]
   daa2a:	f1c0 0320 	rsb	r3, r0, #32
   daa2e:	fa02 f303 	lsl.w	r3, r2, r3
   daa32:	430b      	orrs	r3, r1
   daa34:	40c2      	lsrs	r2, r0
   daa36:	6163      	str	r3, [r4, #20]
   daa38:	9201      	str	r2, [sp, #4]
   daa3a:	9b01      	ldr	r3, [sp, #4]
   daa3c:	61a3      	str	r3, [r4, #24]
   daa3e:	2b00      	cmp	r3, #0
   daa40:	bf14      	ite	ne
   daa42:	2202      	movne	r2, #2
   daa44:	2201      	moveq	r2, #1
   daa46:	6122      	str	r2, [r4, #16]
   daa48:	b1d5      	cbz	r5, daa80 <__d2b+0x88>
   daa4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   daa4e:	4405      	add	r5, r0
   daa50:	f8c9 5000 	str.w	r5, [r9]
   daa54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   daa58:	f8c8 0000 	str.w	r0, [r8]
   daa5c:	4620      	mov	r0, r4
   daa5e:	b003      	add	sp, #12
   daa60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daa64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daa68:	e7d5      	b.n	daa16 <__d2b+0x1e>
   daa6a:	6161      	str	r1, [r4, #20]
   daa6c:	e7e5      	b.n	daa3a <__d2b+0x42>
   daa6e:	a801      	add	r0, sp, #4
   daa70:	f7ff fd31 	bl	da4d6 <__lo0bits>
   daa74:	9b01      	ldr	r3, [sp, #4]
   daa76:	6163      	str	r3, [r4, #20]
   daa78:	2201      	movs	r2, #1
   daa7a:	6122      	str	r2, [r4, #16]
   daa7c:	3020      	adds	r0, #32
   daa7e:	e7e3      	b.n	daa48 <__d2b+0x50>
   daa80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   daa84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   daa88:	f8c9 0000 	str.w	r0, [r9]
   daa8c:	6918      	ldr	r0, [r3, #16]
   daa8e:	f7ff fd02 	bl	da496 <__hi0bits>
   daa92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   daa96:	e7df      	b.n	daa58 <__d2b+0x60>

000daa98 <__ratio>:
   daa98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daa9c:	4688      	mov	r8, r1
   daa9e:	4669      	mov	r1, sp
   daaa0:	4681      	mov	r9, r0
   daaa2:	f7ff ff59 	bl	da958 <__b2d>
   daaa6:	a901      	add	r1, sp, #4
   daaa8:	4640      	mov	r0, r8
   daaaa:	ec55 4b10 	vmov	r4, r5, d0
   daaae:	f7ff ff53 	bl	da958 <__b2d>
   daab2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   daab6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   daaba:	eba3 0c02 	sub.w	ip, r3, r2
   daabe:	e9dd 3200 	ldrd	r3, r2, [sp]
   daac2:	1a9b      	subs	r3, r3, r2
   daac4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   daac8:	ec51 0b10 	vmov	r0, r1, d0
   daacc:	2b00      	cmp	r3, #0
   daace:	bfd6      	itet	le
   daad0:	460a      	movle	r2, r1
   daad2:	462a      	movgt	r2, r5
   daad4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   daad8:	468b      	mov	fp, r1
   daada:	462f      	mov	r7, r5
   daadc:	bfd4      	ite	le
   daade:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   daae2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   daae6:	4620      	mov	r0, r4
   daae8:	ee10 2a10 	vmov	r2, s0
   daaec:	465b      	mov	r3, fp
   daaee:	4639      	mov	r1, r7
   daaf0:	f7fd fe80 	bl	d87f4 <__aeabi_ddiv>
   daaf4:	ec41 0b10 	vmov	d0, r0, r1
   daaf8:	b003      	add	sp, #12
   daafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daafe <__copybits>:
   daafe:	3901      	subs	r1, #1
   dab00:	b570      	push	{r4, r5, r6, lr}
   dab02:	1149      	asrs	r1, r1, #5
   dab04:	6914      	ldr	r4, [r2, #16]
   dab06:	3101      	adds	r1, #1
   dab08:	f102 0314 	add.w	r3, r2, #20
   dab0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dab10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dab14:	1f05      	subs	r5, r0, #4
   dab16:	42a3      	cmp	r3, r4
   dab18:	d30c      	bcc.n	dab34 <__copybits+0x36>
   dab1a:	1aa3      	subs	r3, r4, r2
   dab1c:	3b11      	subs	r3, #17
   dab1e:	f023 0303 	bic.w	r3, r3, #3
   dab22:	3211      	adds	r2, #17
   dab24:	42a2      	cmp	r2, r4
   dab26:	bf88      	it	hi
   dab28:	2300      	movhi	r3, #0
   dab2a:	4418      	add	r0, r3
   dab2c:	2300      	movs	r3, #0
   dab2e:	4288      	cmp	r0, r1
   dab30:	d305      	bcc.n	dab3e <__copybits+0x40>
   dab32:	bd70      	pop	{r4, r5, r6, pc}
   dab34:	f853 6b04 	ldr.w	r6, [r3], #4
   dab38:	f845 6f04 	str.w	r6, [r5, #4]!
   dab3c:	e7eb      	b.n	dab16 <__copybits+0x18>
   dab3e:	f840 3b04 	str.w	r3, [r0], #4
   dab42:	e7f4      	b.n	dab2e <__copybits+0x30>

000dab44 <__any_on>:
   dab44:	f100 0214 	add.w	r2, r0, #20
   dab48:	6900      	ldr	r0, [r0, #16]
   dab4a:	114b      	asrs	r3, r1, #5
   dab4c:	4298      	cmp	r0, r3
   dab4e:	b510      	push	{r4, lr}
   dab50:	db11      	blt.n	dab76 <__any_on+0x32>
   dab52:	dd0a      	ble.n	dab6a <__any_on+0x26>
   dab54:	f011 011f 	ands.w	r1, r1, #31
   dab58:	d007      	beq.n	dab6a <__any_on+0x26>
   dab5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dab5e:	fa24 f001 	lsr.w	r0, r4, r1
   dab62:	fa00 f101 	lsl.w	r1, r0, r1
   dab66:	428c      	cmp	r4, r1
   dab68:	d10b      	bne.n	dab82 <__any_on+0x3e>
   dab6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dab6e:	4293      	cmp	r3, r2
   dab70:	d803      	bhi.n	dab7a <__any_on+0x36>
   dab72:	2000      	movs	r0, #0
   dab74:	bd10      	pop	{r4, pc}
   dab76:	4603      	mov	r3, r0
   dab78:	e7f7      	b.n	dab6a <__any_on+0x26>
   dab7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dab7e:	2900      	cmp	r1, #0
   dab80:	d0f5      	beq.n	dab6e <__any_on+0x2a>
   dab82:	2001      	movs	r0, #1
   dab84:	e7f6      	b.n	dab74 <__any_on+0x30>

000dab86 <_calloc_r>:
   dab86:	b513      	push	{r0, r1, r4, lr}
   dab88:	434a      	muls	r2, r1
   dab8a:	4611      	mov	r1, r2
   dab8c:	9201      	str	r2, [sp, #4]
   dab8e:	f7fb fe27 	bl	d67e0 <_malloc_r>
   dab92:	4604      	mov	r4, r0
   dab94:	b118      	cbz	r0, dab9e <_calloc_r+0x18>
   dab96:	9a01      	ldr	r2, [sp, #4]
   dab98:	2100      	movs	r1, #0
   dab9a:	f7fe f8b9 	bl	d8d10 <memset>
   dab9e:	4620      	mov	r0, r4
   daba0:	b002      	add	sp, #8
   daba2:	bd10      	pop	{r4, pc}
   daba4:	0000      	movs	r0, r0
	...

000daba8 <nan>:
   daba8:	ed9f 0b01 	vldr	d0, [pc, #4]	; dabb0 <nan+0x8>
   dabac:	4770      	bx	lr
   dabae:	bf00      	nop
   dabb0:	00000000 	.word	0x00000000
   dabb4:	7ff80000 	.word	0x7ff80000

000dabb8 <nanf>:
   dabb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; dabc0 <nanf+0x8>
   dabbc:	4770      	bx	lr
   dabbe:	bf00      	nop
   dabc0:	7fc00000 	.word	0x7fc00000

000dabc4 <__ascii_wctomb>:
   dabc4:	b149      	cbz	r1, dabda <__ascii_wctomb+0x16>
   dabc6:	2aff      	cmp	r2, #255	; 0xff
   dabc8:	bf85      	ittet	hi
   dabca:	238a      	movhi	r3, #138	; 0x8a
   dabcc:	6003      	strhi	r3, [r0, #0]
   dabce:	700a      	strbls	r2, [r1, #0]
   dabd0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dabd4:	bf98      	it	ls
   dabd6:	2001      	movls	r0, #1
   dabd8:	4770      	bx	lr
   dabda:	4608      	mov	r0, r1
   dabdc:	4770      	bx	lr
	...

000dabe0 <__aeabi_d2lz>:
   dabe0:	b538      	push	{r3, r4, r5, lr}
   dabe2:	2200      	movs	r2, #0
   dabe4:	2300      	movs	r3, #0
   dabe6:	4604      	mov	r4, r0
   dabe8:	460d      	mov	r5, r1
   dabea:	f7fd ff4b 	bl	d8a84 <__aeabi_dcmplt>
   dabee:	b928      	cbnz	r0, dabfc <__aeabi_d2lz+0x1c>
   dabf0:	4620      	mov	r0, r4
   dabf2:	4629      	mov	r1, r5
   dabf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dabf8:	f7fe b826 	b.w	d8c48 <__aeabi_d2ulz>
   dabfc:	4620      	mov	r0, r4
   dabfe:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dac02:	f7fe f821 	bl	d8c48 <__aeabi_d2ulz>
   dac06:	4240      	negs	r0, r0
   dac08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dac0c:	bd38      	pop	{r3, r4, r5, pc}
   dac0e:	bf00      	nop

000dac10 <dynalib_user>:
   dac10:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dac20:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   dac30:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dac40:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dac50:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dac60:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   dac70:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   dac80:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   dac90:	4400 6369 6e6f 656e 7463 6465 2500 2073     .Diconnected.%s 
   daca0:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   dacb0:	6630 2525 0020 5441 432b 5546 3d4e 3631     0f%% .AT+CFUN=16
   dacc0:	0a0d 2500 2e34 6631 4320 2500 2e34 6631     ...%4.1f C.%4.1f
   dacd0:	2520 0025 3425 312e 2066 756c 0078 6925      %%.%4.1f lux.%i
   dace0:	2520 0025 227b 6554 706d 7265 7461 7275      %%.{"Temperatur
   dacf0:	2265 253a 2e34 6631 202c 4822 6d75 6469     e":%4.1f, "Humid
   dad00:	7469 2279 253a 2e34 6631 202c 4c22 6769     ity":%4.1f, "Lig
   dad10:	7468 654c 6576 226c 253a 2e34 6631 202c     htLevel":%4.1f, 
   dad20:	5322 696f 6d6c 696f 7473 7275 3165 3a22     "Soilmoisture1":
   dad30:	6925 202c 5322 696f 6d6c 696f 7473 7275     %i, "Soilmoistur
   dad40:	3265 3a22 6925 202c 7722 7461 7265 7250     e2":%i, "waterPr
   dad50:	7365 7573 6572 3a22 6925 202c 5322 6c6f     essure":%i, "Sol
   dad60:	6e65 696f 2264 253a 2c69 2220 6162 7474     enoid":%i, "batt
   dad70:	7265 2279 253a 2c69 2220 656b 3179 3a22     ery":%i, "key1":
   dad80:	2522 2273 202c 5222 7365 7465 2273 253a     "%s", "Resets":%
   dad90:	2c69 2220 6c41 7265 7374 3a22 6925 007d     i, "Alerts":%i}.
   dada0:	7752 6e61 6164 532d 6e65 6573 412d 646e     Rwanda-Sense-And
   dadb0:	432d 6e6f 7274 6c6f 4e00 206f 6144 6174     -Control.No Data
   dadc0:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   dadd0:	6465 5500 6b6e 6f6e 6e77 7220 7365 6f70     ed.Unknown respo
   dade0:	736e 2065 6572 6563 6976 6465 2520 0069     nse recevied %i.
   dadf0:	6255 6469 746f 2073 6f48 6b6f 3000 4e00     Ubidots Hook.0.N
   dae00:	206f 6f53 6c69 5320 6e65 6f73 7372 4300     o Soil Sensors.C
   dae10:	6e6f 6966 0067 6e4f 2065 6f53 6c69 5320     onfig.One Soil S
   dae20:	6e65 6f73 0072 7754 206f 6f53 6c69 5320     ensor.Two Soil S
   dae30:	6e65 6f73 7372 4e00 206f 7250 7365 7573     ensors.No Pressu
   dae40:	6572 5320 6e65 6f73 0072 7250 7365 7573     re Sensor.Pressu
   dae50:	6572 5320 6e65 6f73 2072 7250 7365 6e65     re Sensor Presen
   dae60:	0074 6f4e 4c20 6769 7468 5320 6e65 6f73     t.No Light Senso
   dae70:	0072 694c 6867 2074 6553 736e 726f 5020     r.Light Sensor P
   dae80:	6572 6573 746e 4e00 206f 6554 706d 2f20     resent.No Temp /
   dae90:	4820 6d75 6469 7469 2079 6553 736e 726f      Humidity Sensor
   daea0:	5020 6572 6573 746e 4d00 726f 696e 676e      Present.Morning
   daeb0:	5720 7461 7265 6e69 2067 7544 6172 6974      Watering Durati
   daec0:	6e6f 7320 7465 7420 206f 6925 4400 7275     on set to %i.Dur
   daed0:	7461 6f69 006e 754c 636e 2068 6157 6574     ation.Lunch Wate
   daee0:	6972 676e 4420 7275 7461 6f69 206e 6573     ring Duration se
   daef0:	2074 6f74 2520 0069 7645 6e65 6e69 2067     t to %i.Evening 
   daf00:	6157 6574 6972 676e 4420 7275 7461 6f69     Watering Duratio
   daf10:	206e 6573 2074 6f74 2520 0069 3225 312e     n set to %i.%2.1
   daf20:	2066 2525 5300 7465 5620 7265 6f62 6573     f %%.Set Verbose
   daf30:	4d20 646f 0065 6c43 6165 6572 2064 6556      Mode.Cleared Ve
   daf40:	6272 736f 2065 6f4d 6564 4c00 776f 5020     rbose Mode.Low P
   daf50:	776f 7265 4d20 646f 0065 6f4e 6d72 6c61     ower Mode.Normal
   daf60:	4f20 6570 6172 6974 6e6f 0073 704f 6e65      Operations.Open
   daf70:	7420 6568 5620 6c61 6576 5700 7461 7265      the Valve.Water
   daf80:	6e69 0067 6c43 736f 2065 6874 2065 6176     ing.Close the va
   daf90:	766c 0065 6953 6e67 6c61 5200 7365 7465     lve.Signal.Reset
   dafa0:	6f43 6e75 0074 6552 656c 7361 0065 7453     Count.Release.St
   dafb0:	7461 4f65 4366 6768 4200 7461 6574 7972     ateOfChg.Battery
   dafc0:	6f43 746e 7865 0074 6157 6574 6972 676e     Context.Watering
   dafd0:	6854 6572 6873 6c6f 0064 6554 706d 7265     Threshold.Temper
   dafe0:	7461 7275 0065 7548 696d 6964 7974 4c00     ature.Humidity.L
   daff0:	6d75 6e69 736f 7469 0079 6f53 6c69 6f4d     uminosity.SoilMo
   db000:	7369 7574 6572 0031 6f53 6c69 6f4d 7369     isture1.SoilMois
   db010:	7574 6572 0032 7250 7365 7573 6572 5700     ture2.Pressure.W
   db020:	7461 7265 6957 646e 776f 4d00 6165 7573     aterWindow.Measu
   db030:	6572 4e2d 776f 4c00 776f 6f50 6577 4d72     re-Now.LowPowerM
   db040:	646f 0065 6556 6272 736f 2d65 6f4d 6564     ode.Verbose-Mode
   db050:	5300 7465 6f53 6c69 6553 736e 726f 0073     .SetSoilSensors.
   db060:	6553 5074 6572 7373 7275 5365 6e65 6f73     SetPressureSenso
   db070:	0072 6553 4c74 6769 7468 6553 736e 726f     r.SetLightSensor
   db080:	5300 6c6f 6e65 696f 5064 6572 6573 746e     .SolenoidPresent
   db090:	5300 7465 6554 706d 7548 696d 5364 6e65     .SetTempHumidSen
   db0a0:	6f73 0072 6553 4474 7275 7461 6f69 4d6e     sor.SetDurationM
   db0b0:	726f 696e 676e 5300 7465 7544 6172 6974     orning.SetDurati
   db0c0:	6e6f 754c 636e 0068 6553 4474 7275 7461     onLunch.SetDurat
   db0d0:	6f69 456e 6576 696e 676e 5300 7465 6157     ionEvening.SetWa
   db0e0:	6574 5472 7268 7365 6f68 646c 5400 6d65     terThreshold.Tem
   db0f0:	2f70 7548 696d 6964 7974 5320 6e65 6f73     p/Humidity Senso
   db100:	2072 6146 6c69 6465 7420 206f 6e49 6169     r Failed to Inia
   db110:	696c 657a 2d20 6420 7369 6261 696c 676e     lize - disabling
   db120:	4600 6961 656c 2064 6f74 6320 6e6f 656e     .Failed to conne
   db130:	7463 5300 6174 7472 7075 4c00 636f 6c61     ct.Startup.Local
   db140:	5420 6d69 0065 6f4e 5320 6c6f 6e65 696f      Time.No Solenoi
   db150:	2064 7441 6174 6863 6465 4600 6f72 206d     d Attached.From 
   db160:	7325 7420 206f 7325 5300 6174 6574 5420     %s to %s.State T
   db170:	6172 736e 7469 6f69 006e 7245 6f72 2072     ransition.Error 
   db180:	6174 696b 676e 4d20 6165 7573 6572 656d     taking Measureme
   db190:	746e 0073 7453 7461 0065 6f44 656e 7720     nts.State.Done w
   db1a0:	7469 2068 6177 6574 6972 676e 6320 6379     ith watering cyc
   db1b0:	656c 4e00 746f 7420 6d69 2065 6f74 7720     le.Not time to w
   db1c0:	7461 7265 5700 7461 7265 6e69 2067 654e     ater.Watering Ne
   db1d0:	6465 6465 6220 7475 6220 7461 6574 7972     eded but battery
   db1e0:	7420 6f6f 6c20 776f 5700 7461 7265 6e69      too low.Waterin
   db1f0:	2067 656e 6465 6465 2d20 7320 6174 7472     g needed - start
   db200:	6e69 2067 6177 6574 6972 676e 6320 6379     ing watering cyc
   db210:	656c 5700 7461 7265 6e69 2067 6f6e 2074     le.Watering not 
   db220:	656e 6465 6465 7300 6170 6b72 642f 7665     needed.spark/dev
   db230:	6369 2f65 6573 7373 6f69 2f6e 6e65 0064     ice/session/end.
   db240:	6154 696b 676e 6120 4e20 7061 4c00 776f     Taking a Nap.Low
   db250:	4220 7461 6574 7972 2d20 5320 656c 7065      Battery - Sleep
   db260:	6e69 0067 7245 6f72 2072 7453 7461 2065     ing.Error State 
   db270:	202d 6552 6573 0074 7245 6f72 2072 7453     - Reset.Error St
   db280:	7461 2065 202d 6f50 6577 2072 7943 6c63     ate - Power Cycl
   db290:	0065 7245 6f72 2072 7453 7461 2065 202d     e.Error State - 
   db2a0:	7546 6c6c 4d20 646f 6d65 5220 7365 7465     Full Modem Reset
   db2b0:	0000 0000                                   ....

000db2b4 <_ZTV5Timer>:
	...
   db2bc:	4335 000d 437d 000d 4125 000d ac24 000d     5C..}C..%A..$...
   db2cc:	ac2c 000d ac31 000d ac36 000d ac3a 000d     ,...1...6...:...
   db2dc:	ac3f 000d ac44 000d ac48 000d ac53 000d     ?...D...H...S...
   db2ec:	ac5e 000d ac24 000d ac6a 000d ac6e 000d     ^...$...j...n...
   db2fc:	ac77 000d ac7f 000d ac8b 000d ac91 000d     w...............
   db30c:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   db31c:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000db34c <_ZL13releaseNumber>:
   db34c:	3833 0000 0000 0000                         38......

000db354 <_ZL16MemVersionNumber>:
   db354:	0002 0000                                   ....

000db358 <_ZTVN5spark13CellularClassE>:
	...
   db360:	68fb 000d 68f1 000d 68e7 000d 689d 000d     .h...h...h...h..
   db370:	68db 000d 68cf 000d 68c3 000d 68bb 000d     .h...h...h...h..
   db380:	68b1 000d 68a7 000d 73e5 000d               .h...h...s..

000db38c <_ZTV14CellularSignal>:
	...
   db394:	69a9 000d 69af 000d 69ab 000d 69bd 000d     .i...i...i...i..
   db3a4:	69f1 000d 6a1d 000d 6a51 000d 6aa1 000d     .i...j..Qj...j..
   db3b4:	fffc ffff 0000 0000 6ac7 000d               .........j..

000db3c0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db3c8:	6ae7 000d 6aed 000d 6b2b 000d 6afb 000d     .j...j..+k...j..
   db3d8:	6ae9 000d                                   .j..

000db3dc <_ZTVN5spark13EthernetClassE>:
	...
   db3e4:	7117 000d 710d 000d 7103 000d 70f9 000d     .q...q...q...p..
   db3f4:	70ed 000d 70e1 000d 70d5 000d 70cd 000d     .p...p...p...p..
   db404:	70c3 000d 70b9 000d 73e5 000d               .p...p...s..

000db410 <_ZTV7TwoWire>:
	...
   db418:	7135 000d 717f 000d 7157 000d 7137 000d     5q...q..Wq..7q..
   db428:	715f 000d 7167 000d 716f 000d 7177 000d     _q..gq..oq..wq..

000db438 <_ZTV9IPAddress>:
	...
   db440:	7297 000d 7287 000d 7289 000d 7061 0070     .r...r...r..app.

000db450 <_ZTVN5spark12NetworkClassE>:
	...
   db458:	737d 000d 7387 000d 7391 000d 739b 000d     }s...s...s...s..
   db468:	73a5 000d 73b1 000d 73bd 000d 73c9 000d     .s...s...s...s..
   db478:	73d1 000d 73db 000d 73e5 000d 6977 6972     .s...s...s..wiri
   db488:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   db498:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   db4a8:	6920 766e 6c61 6469 002e 5925 252d 2d6d      invalid..%Y-%m-
   db4b8:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   db4c8:	7463 6d69 0065 0000                         ctime...

000db4d0 <_ZTV11USARTSerial>:
	...
   db4d8:	7c65 000d 7cd1 000d 7ca9 000d 762b 000d     e|...|...|..+v..
   db4e8:	7c79 000d 7c95 000d 7c87 000d 7ca3 000d     y|...|...|...|..
   db4f8:	7c67 000d 7c6b 000d                         g|..k|..

000db500 <_ZTV9USBSerial>:
	...
   db508:	7d65 000d 7dcd 000d 7da3 000d 762b 000d     e}...}...}..+v..
   db518:	7d95 000d 7d67 000d 7d77 000d 7dc7 000d     .}..g}..w}...}..
   db528:	7d87 000d 7d61 000d                         .}..a}..

000db530 <_ZSt7nothrow>:
   db530:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   db540:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000db551 <day_name.6145>:
   db551:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db561:	6972 6153                                    riSat

000db566 <mon_name.6146>:
   db566:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db576:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db586:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000db598 <fpi.7566>:
   db598:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db5a8:	0000 0000                                   ....

000db5ac <fpinan.7602>:
   db5ac:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   db5bc:	0000 0000                                   ....

000db5c0 <tinytens>:
   db5c0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db5d0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db5e0:	6f43 64ac 0628 1168                         Co.d(.h.

000db5e8 <_ctype_>:
   db5e8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db5f8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db608:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db618:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db628:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db638:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db648:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db658:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db668:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db6ec <_C_numeric_locale>:
   db6ec:	b4b0 000d acc2 000d e2b8 2003 4f50 4953     ........... POSI
   db6fc:	0058 0000                                   X...

000db700 <__mprec_bigtens>:
   db700:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db710:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db720:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db728 <__mprec_tens>:
   db728:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db738:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db748:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db758:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db768:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db778:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db788:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db798:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db7a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db7b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db7c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db7d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db7e8:	9db4 79d9 7843 44ea                         ...yCx.D

000db7f0 <p05.7490>:
   db7f0:	0005 0000 0019 0000 007d 0000               ........}...

000db7fc <link_const_variable_data_end>:
   db7fc:	000d5d3d 	.word	0x000d5d3d
   db800:	000d6875 	.word	0x000d6875
   db804:	000d6979 	.word	0x000d6979
   db808:	000d7121 	.word	0x000d7121
   db80c:	000d736d 	.word	0x000d736d
   db810:	000d74b9 	.word	0x000d74b9
   db814:	000d76f5 	.word	0x000d76f5
   db818:	000d7a51 	.word	0x000d7a51
   db81c:	000d7c51 	.word	0x000d7c51
